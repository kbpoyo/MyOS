
/home/kbpoyo/Documents/code/cpp/MyOS/build/source/loader/loader.elf：     文件格式 elf32-i386
/home/kbpoyo/Documents/code/cpp/MyOS/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x0000034b memsz 0x0000034b flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000004f memsz 0x0000004f flags r--
    LOAD off    0x00002050 vaddr 0x0000a050 paddr 0x0000a050 align 2**12
         filesz 0x00000018 memsz 0x00000084 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034b  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000004f  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000a050  0000a050  00002050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000a080  0000a080  00002068  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00002098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000463  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000001dd  00000000  00000000  0000255b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000022b  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000001a4  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000002b0  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 0000014e  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000000b cli
00008023 l     F .text	0000002a inb
0000804d l     F .text	00000030 outb
0000807d l     F .text	00000036 lgdt
000080b3 l     F .text	0000001a read_cr0
000080cd l     F .text	00000012 write_cr0
000080df l     F .text	0000002b far_jump
0000810a l     F .text	0000003c show_msg
00008146 l     F .text	0000014b detect_memory
00008291 l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008323 g     F .text	00000023 loader_entry
0000a050 g     O .data	00000018 gdt_table
0000a080 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000a068 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00008346 g     F .text	00000005 loader_kernel
0000a068 g       .data	00000000 _edata
0000a0d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text					//指定之后的内容是属于代码段
	.global _start			//声明全局变量，允其他文件使用符号_start(即地址)
	.extern loader_entry 	//告诉编译器loader_entry函数在其他文件中

_start:
	jmp loader_entry 
    8000:	e9 20 03             	jmp    8323 <loader_entry>

00008003 <protect_mode_entry>:
	.extern loader_kernel //32位loader程序入口

//保护模式的入口函数
protect_mode_entry:
	//cs寄存器已进入32位模式，还需要将其他段寄存器全部设置为32位模式
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs

	//跳转到32位的loader程序中
	//TODO: $8, $地址 传参模式之后会讲解
	jmp $8, $loader_kernel
    8011:	ea 46 83 00 00       	ljmp   $0x0,$0x8346
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <cli>:

/**
 * @brief  关闭中断
 * 
 */
static inline void cli (void) {
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    801d:	fa                   	cli    
}
    801e:	90                   	nop
    801f:	66 5d                	pop    %ebp
    8021:	66 c3                	retl   

00008023 <inb>:
 * @brief  从设备IO端口寄存器(端口号为port)中读取8位数据
 * 
 * @param port 
 * @return uint8_t 
 */
static inline uint8_t inb (uint16_t port) {
    8023:	66 55                	push   %ebp
    8025:	66 89 e5             	mov    %esp,%ebp
    8028:	66 83 ec 14          	sub    $0x14,%esp
    802c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8031:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv; //读取的8位数据

    //at&t汇编格式
    __asm__ __volatile__("inb %[p], %[v]"   // in 表示从端口寄存器中读取数据，端口只能用dx表示
    8035:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    803b:	66 89 c2             	mov    %eax,%edx
    803e:	ec                   	in     (%dx),%al
    803f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
                                            // out 表示往端口寄存器中写入数据，端口只能用立即数或dx寄存器表示，
                                            // b表示只读取一个字节(w, l 分别表示2，4字节)
                        :[v]"=a"(rv)        // rv为输出参数用ax 或 al存储， 具体用哪个要看port指定的端口为多少位的寄存器
                        :[p]"d"(port));     // port为输入参数只能用dx寄存器, 

    return rv;
    8043:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8049:	66 c9                	leavel 
    804b:	66 c3                	retl   

0000804d <outb>:
 * @brief  往IO端口寄存器port中写入八位数据data
 * 
 * @param port 
 * @param data 
 */
static inline void outb(uint16_t port, uint8_t data) {
    804d:	66 55                	push   %ebp
    804f:	66 89 e5             	mov    %esp,%ebp
    8052:	66 83 ec 08          	sub    $0x8,%esp
    8056:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    805b:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    8060:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    8064:	66 89 d0             	mov    %edx,%eax
    8067:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"
    806b:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8071:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8077:	ee                   	out    %al,(%dx)
                            :   //无输出参数
                            :[p]"d"(port), [v]"a"(data));   //out 指令只能使用dx寄存器或立即数指定端口，
                                                            //只能用ax 或 al来作为数据输入，具体用哪个需要看端口寄存器是几位
}
    8078:	90                   	nop
    8079:	66 c9                	leavel 
    807b:	66 c3                	retl   

0000807d <lgdt>:
 * @brief  加载全局描述符表
 * 
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lgdt(uint32_t start, uint32_t size) {
    807d:	66 55                	push   %ebp
    807f:	66 89 e5             	mov    %esp,%ebp
    8082:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;         //GDT的在内存中的逻辑边界
        uint16_t start15_0;     //GDT地址的低16位
        uint16_t start31_16;    //GDT地址的高16位
    }gdt;

    gdt.start31_16 = start >> 16;   //初始化GDT地址的高16位
    8086:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    808b:	66 c1 e8 10          	shr    $0x10,%eax
    808f:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xffff; //初始化GDT地址的低16位
    8093:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8098:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;           //初始化GDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1
    809c:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a1:	66 83 e8 01          	sub    $0x1,%eax
    80a5:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    
     __asm__ __volatile__("lgdt %[g]"
    80a9:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
                            :
                            :[g]"m"(gdt));  //"m"表示指令直接作用于该内存位置
                                            //即此处表示lgdt直接加载gdt所在的内存区域的内容
}
    80ae:	90                   	nop
    80af:	66 c9                	leavel 
    80b1:	66 c3                	retl   

000080b3 <read_cr0>:
/**
 * @brief  读取cr0寄存器的值
 * 
 * @return uint16_t 
 */
static inline uint32_t read_cr0(void) {
    80b3:	66 55                	push   %ebp
    80b5:	66 89 e5             	mov    %esp,%ebp
    80b8:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0, %[v]"
    80bc:	0f 20 c0             	mov    %cr0,%eax
    80bf:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
                            :[v]"=r"(cr0));
    return cr0;
    80c4:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c9:	66 c9                	leavel 
    80cb:	66 c3                	retl   

000080cd <write_cr0>:
/**
 * @brief  向cr0寄存器写入数据
 * 
 * @param data 
 */
static inline void write_cr0(uint32_t data) {
    80cd:	66 55                	push   %ebp
    80cf:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0"
    80d2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d7:	0f 22 c0             	mov    %eax,%cr0
                            :
                            :[v]"r"(data));
}
    80da:	90                   	nop
    80db:	66 5d                	pop    %ebp
    80dd:	66 c3                	retl   

000080df <far_jump>:
 * @brief  进入保护模式后进行远跳转到32位模式下运行的程序
 * 
 * @param selector 选择子
 * @param offset 跳转的偏移量，也就是某个函数的地址，函数访问是通过(函数地址 = 当前地址 + 偏移地址 + 当前地址的长度)来实现的
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
    80df:	66 55                	push   %ebp
    80e1:	66 89 e5             	mov    %esp,%ebp
    80e4:	66 83 ec 10          	sub    $0x10,%esp
    
    uint32_t addr[] = {offset, selector}; //传入远跳转需要的参数
    80e8:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ed:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f7:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

    __asm__ __volatile__("ljmpl *(%[a])"
    80fc:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8101:	67 66 ff 28          	ljmpl  *(%eax)
                            :
                            :[a]"r"(addr));
}
    8105:	90                   	nop
    8106:	66 c9                	leavel 
    8108:	66 c3                	retl   

0000810a <show_msg>:
/**
 * @brief  
 * 在显示器上打印字符串msg 
 * @param msg 
 */
static void show_msg(const char* msg) {
    810a:	66 55                	push   %ebp
    810c:	66 89 e5             	mov    %esp,%ebp
    810f:	66 83 ec 10          	sub    $0x10,%esp
     char c;
     while ((c = *(msg++)) != '\0') {          
    8113:	eb 0c                	jmp    8121 <show_msg+0x17>
          //asm()会对内联汇编进行优化，可能会导致不确定的结果，所以使用__asm__ __volatile__()
          __asm__ __volatile__(
    8115:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    811b:	b4 0e                	mov    $0xe,%ah
    811d:	88 c0                	mov    %al,%al
    811f:	cd 10                	int    $0x10
     while ((c = *(msg++)) != '\0') {          
    8121:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8126:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    812b:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8130:	67 66 0f b6 00       	movzbl (%eax),%eax
    8135:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8139:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813e:	75 d5                	jne    8115 <show_msg+0xb>
               "int $0x10"::[rgs]"r"(c) //"r" 将rgs映射到任意寄存器, 
                                        //且有了输入参数后，真正的寄存器要用%%前缀进行访问
          );
     }
     
}
    8140:	90                   	nop
    8141:	90                   	nop
    8142:	66 c9                	leavel 
    8144:	66 c3                	retl   

00008146 <detect_memory>:

/**
 * @brief  
 * 检测系统当前可用的内存块的地址和大小
 */
static void detect_memory(void) {
    8146:	66 55                	push   %ebp
    8148:	66 89 e5             	mov    %esp,%ebp
    814b:	66 57                	push   %edi
    814d:	66 56                	push   %esi
    814f:	66 53                	push   %ebx
    8151:	66 83 ec 30          	sub    $0x30,%esp
     show_msg("try to detect memory:\r\n");
    8155:	66 68 00 90 00 00    	pushl  $0x9000
    815b:	66 e8 a9 ff ff ff    	calll  810a <show_msg>
    8161:	66 83 c4 04          	add    $0x4,%esp

     SMAP_entry_t smap_entry;//记录每一次探测的结果
     
     boot_info.ram_region_count = 0; //将有效内存卡数量初始化为0
    8165:	66 c7 06 d0 a0 00 00 	movl   $0x0,-0x5f30
    816c:	00 00 

     //传入参数
     SMAP_entry_t *entry = &smap_entry; //记录的信息将回填到结构体中
    816e:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8173:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

     //传出参数
      uint32_t signature = 0, bytes =0, contID = 0; //分别为ax, cx, bx的传出参数
    8178:	67 66 c7 45 e4 00 00 	movl   $0x0,-0x1c(%ebp)
    817f:	00 00 
    8181:	67 66 c7 45 e0 00 00 	movl   $0x0,-0x20(%ebp)
    8188:	00 00 
    818a:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8191:	00 00 

     //逐个检测内存块，有效则装入数组中
     for (int i = 0; i < BOOT_RAM_REGION_MAX; ++i) {
    8193:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    819a:	00 00 
    819c:	e9 c6 00             	jmp    8265 <detect_memory+0x11f>

          //调用内联汇编进行一次内存块探测
          __asm__ __volatile__ ("int  $0x15" 
    819f:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    81a5:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    81aa:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81b0:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81b6:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81bb:	66 89 f7             	mov    %esi,%edi
    81be:	cd 15                	int    $0x15
    81c0:	66 89 da             	mov    %ebx,%edx
    81c3:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81c8:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81cd:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
				: "=a"(signature), "=c"(bytes), "=b"(contID) //传出参数
				: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)); //传入参数

          //判断所探测的内存块是否有效
          if (signature != 0x534d4150) { //无效直接退出
    81d2:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81d9:	4d 53 
    81db:	74 13                	je     81f0 <detect_memory+0xaa>
               show_msg("failed\r\n");
    81dd:	66 68 18 90 00 00    	pushl  $0x9018
    81e3:	66 e8 21 ff ff ff    	calll  810a <show_msg>
    81e9:	66 83 c4 04          	add    $0x4,%esp
    81ed:	e9 92 00             	jmp    8282 <detect_memory+0x13c>
               return;
          }

          if (bytes > 20 && (entry->ACPI & 0x0001) == 0) continue; //ACPI位为0，则内存块无效应当忽略	
    81f0:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81f6:	76 13                	jbe    820b <detect_memory+0xc5>
    81f8:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fd:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    8202:	66 83 e0 01          	and    $0x1,%eax
    8206:	66 85 c0             	test   %eax,%eax
    8209:	74 53                	je     825e <detect_memory+0x118>
		
          if (entry->Type == 1) { //Type = 1 当前内存块有效
    820b:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8210:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8215:	66 83 f8 01          	cmp    $0x1,%eax
    8219:	75 39                	jne    8254 <detect_memory+0x10e>
               boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;  //由于内存寻址空间较小，读取低32位即可
    821b:	66 a1 d0 a0          	mov    0xa0d0,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 12          	mov    (%edx),%edx
    8228:	67 66 89 14 c5 80 a0 	mov    %edx,0xa080(,%eax,8)
    822f:	00 00 
               boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8231:	66 a1 d0 a0          	mov    0xa0d0,%eax
    8235:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    823a:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    823f:	67 66 89 14 c5 84 a0 	mov    %edx,0xa084(,%eax,8)
    8246:	00 00 
               boot_info.ram_region_count++;
    8248:	66 a1 d0 a0          	mov    0xa0d0,%eax
    824c:	66 83 c0 01          	add    $0x1,%eax
    8250:	66 a3 d0 a0          	mov    %eax,0xa0d0
          }

          if (contID == 0) break; //contID为0则探测结束
    8254:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    825a:	74 15                	je     8271 <detect_memory+0x12b>
    825c:	eb 01                	jmp    825f <detect_memory+0x119>
          if (bytes > 20 && (entry->ACPI & 0x0001) == 0) continue; //ACPI位为0，则内存块无效应当忽略	
    825e:	90                   	nop
     for (int i = 0; i < BOOT_RAM_REGION_MAX; ++i) {
    825f:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8265:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    826b:	0f 8e 30 ff          	jle    819f <detect_memory+0x59>
    826f:	eb 01                	jmp    8272 <detect_memory+0x12c>
          if (contID == 0) break; //contID为0则探测结束
    8271:	90                   	nop
     } 

     show_msg("detect success\r\n");
    8272:	66 68 21 90 00 00    	pushl  $0x9021
    8278:	66 e8 8c fe ff ff    	calll  810a <show_msg>
    827e:	66 83 c4 04          	add    $0x4,%esp

}
    8282:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8287:	66 5b                	pop    %ebx
    8289:	66 5e                	pop    %esi
    828b:	66 5f                	pop    %edi
    828d:	66 5d                	pop    %ebp
    828f:	66 c3                	retl   

00008291 <enter_protect_mode>:

/**
 * @brief  进入保护模式
 * 
 */
static void enter_protect_mode(void){
    8291:	66 55                	push   %ebp
    8293:	66 89 e5             	mov    %esp,%ebp
    8296:	66 83 ec 10          	sub    $0x10,%esp
     //1.关闭中断，设置eflags对应的位
     cli();
    829a:	66 e8 78 fd ff ff    	calll  8018 <cli>

     //2.以此打开A20Gate, 读取92端口，并将其第二位设置为1
     uint8_t v = inb(0x92);
    82a0:	66 68 92 00 00 00    	pushl  $0x92
    82a6:	66 e8 77 fd ff ff    	calll  8023 <inb>
    82ac:	66 83 c4 04          	add    $0x4,%esp
    82b0:	67 88 45 ff          	mov    %al,-0x1(%ebp)
     outb(0x92, v | 0x2);
    82b4:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82ba:	66 83 c8 02          	or     $0x2,%eax
    82be:	66 0f b6 c0          	movzbl %al,%eax
    82c2:	66 50                	push   %eax
    82c4:	66 68 92 00 00 00    	pushl  $0x92
    82ca:	66 e8 7d fd ff ff    	calll  804d <outb>
    82d0:	66 83 c4 08          	add    $0x8,%esp

     //3.加载全局描述符
     lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82d4:	66 b8 50 a0 00 00    	mov    $0xa050,%eax
    82da:	66 6a 18             	pushl  $0x18
    82dd:	66 50                	push   %eax
    82df:	66 e8 98 fd ff ff    	calll  807d <lgdt>
    82e5:	66 83 c4 08          	add    $0x8,%esp

     //4.开启保护模式的使能位，设置cr0寄存器的第0位PE设置为1
     uint32_t cr0 = read_cr0();
    82e9:	66 e8 c4 fd ff ff    	calll  80b3 <read_cr0>
    82ef:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
     write_cr0(cr0 | 0x1);
    82f4:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82f9:	66 83 c8 01          	or     $0x1,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 e8 c8 fd ff ff    	calll  80cd <write_cr0>
    8305:	66 83 c4 04          	add    $0x4,%esp

     //5.远跳转到32位的loader程序，并清空原来的16位指令流水线
     far_jump(8, (uint32_t)protect_mode_entry);
    8309:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    830f:	66 50                	push   %eax
    8311:	66 6a 08             	pushl  $0x8
    8314:	66 e8 c5 fd ff ff    	calll  80df <far_jump>
    831a:	66 83 c4 08          	add    $0x8,%esp
}
    831e:	90                   	nop
    831f:	66 c9                	leavel 
    8321:	66 c3                	retl   

00008323 <loader_entry>:

void loader_entry(void) {
    8323:	66 55                	push   %ebp
    8325:	66 89 e5             	mov    %esp,%ebp
     show_msg("..........loading.........\r\n");
    8328:	66 68 32 90 00 00    	pushl  $0x9032
    832e:	66 e8 d6 fd ff ff    	calll  810a <show_msg>
    8334:	66 83 c4 04          	add    $0x4,%esp

     detect_memory();         //检测可用内存块
    8338:	66 e8 08 fe ff ff    	calll  8146 <detect_memory>
     enter_protect_mode();    //进入保护模式
    833e:	66 e8 4d ff ff ff    	calll  8291 <enter_protect_mode>
     
     for (;;){
    8344:	eb fe                	jmp    8344 <loader_entry+0x21>

00008346 <loader_kernel>:
 * 
 * @copyright Copyright (c) 2023
 * 
 */

void loader_kernel() {
    8346:	55                   	push   %bp
    8347:	89 e5                	mov    %sp,%bp
    for (;;){};
    8349:	eb fe                	jmp    8349 <loader_kernel+0x3>
