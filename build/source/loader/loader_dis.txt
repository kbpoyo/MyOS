
/home/kbpoyo/code/cpp/MyOs/build/source/loader/loader.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000006c9 memsz 0x000006c9 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000004f memsz 0x0000004f flags r--
    LOAD off    0x00003000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00002000 memsz 0x00002054 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c9  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000004f  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002000  0000b000  0000b000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000d000  0000d000  00005000  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000009a6  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000379  00000000  00000000  00005a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000435  00000000  00000000  00005daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000330  00000000  00000000  000061e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000424  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000122  00000000  00000000  00006938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000000b cli
00008023 l     F .text	0000002a inb
0000804d l     F .text	00000030 outb
0000807d l     F .text	00000036 lgdt
000080b3 l     F .text	0000001a read_cr0
000080cd l     F .text	00000012 write_cr0
000080df l     F .text	0000002b far_jump
0000810a l     F .text	0000003c show_msg
00008146 l     F .text	0000014b detect_memory
00008291 l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008349 l     F .text	0000001d inb
00008366 l     F .text	00000021 outb
00008387 l     F .text	0000001f inw
000083a6 l     F .text	00000011 read_cr0
000083b7 l     F .text	0000000c write_cr0
000083c3 l     F .text	0000000c write_cr3
000083cf l     F .text	00000011 read_cr4
000083e0 l     F .text	0000000c write_cr4
000083ec l     F .text	0000013d read_disk
00008529 l     F .text	00000105 reload_elf_file
0000862e l     F .text	0000000e die
0000c000 l     O .data	00001000 page_dir.0
00008323 g     F .text	00000026 loader_entry
0000b000 g     O .data	00000018 gdt_table
00008674 g     F .text	00000055 load_kernel
0000863c g     F .text	00000038 enable_page_mode
0000d000 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000d000 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000d000 g       .data	00000000 _edata
0000d054 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text					//指定之后的内容是属于代码段
	.global _start			//声明全局变量，允其他文件使用符号_start(即地址)
	.extern loader_entry 	//告诉编译器loader_entry函数在其他文件中

_start:
	jmp loader_entry 
    8000:	e9 20 03             	jmp    8323 <loader_entry>

00008003 <protect_mode_entry>:
	//已经进入了保护模式，所以cpu正在执行的16位模式的流水线失效
	//重置各个段寄存器，存储选择子，0x10即指向第3个段描述符(数据段)
	//第三个段描述符所指的段基址为0，所以继续平坦模式
	//且第三个段描述符的属性位的G位设置为1，标志了该段为32位程序，其他位也设置了正确值
	//临时的内核数据段描述符:{0xffff, 0x0000, 0x9200, 0x00cf}
	mov $0x10, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs

	//跳转到32位的loader程序中，jmp指令可以清空流水线
	jmp $8, $load_kernel //直接跳转 cs:8， ip:load_kernel, 8为1000(b), 即选择此时GDT中的第2个段描述符(代码段)
    8011:	ea 74 86 00 00       	ljmp   $0x0,$0x8674
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <cli>:

/**
 * @brief  关闭中断
 *
 */
static inline void cli(void) { __asm__ __volatile__("cli"); }
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	fa                   	cli    
    801e:	90                   	nop
    801f:	66 5d                	pop    %ebp
    8021:	66 c3                	retl   

00008023 <inb>:
 * @brief  从设备IO端口寄存器(端口号为port)中读取8位数据
 *
 * @param port
 * @return uint8_t
 */
static inline uint8_t inb(uint16_t port) {
    8023:	66 55                	push   %ebp
    8025:	66 89 e5             	mov    %esp,%ebp
    8028:	66 83 ec 14          	sub    $0x14,%esp
    802c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8031:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
  uint8_t rv;  // 读取的8位数据

  __asm__ __volatile__(
    8035:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    803b:	66 89 c2             	mov    %eax,%edx
    803e:	ec                   	in     (%dx),%al
    803f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
                        // b表示只读取一个字节(w, l 分别表示2，4字节)
      : [v] "=a"(rv)  // rv为输出参数用ax 或 al存储，
                      // 具体用哪个要看port指定的端口为多少位的寄存器
      : [p] "d"(port));  // port为输入参数只能用dx寄存器,

  return rv;
    8043:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8049:	66 c9                	leavel 
    804b:	66 c3                	retl   

0000804d <outb>:
 * @brief  往IO端口寄存器port中写入八位数据data
 *
 * @param port
 * @param data
 */
static inline void outb(uint16_t port, uint8_t data) {
    804d:	66 55                	push   %ebp
    804f:	66 89 e5             	mov    %esp,%ebp
    8052:	66 83 ec 08          	sub    $0x8,%esp
    8056:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    805b:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    8060:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    8064:	66 89 d0             	mov    %edx,%eax
    8067:	67 88 45 f8          	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
    806b:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8071:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8077:	ee                   	out    %al,(%dx)
      :  // 无输出参数
      : [p] "d"(port),
        [v] "a"(data));  // out 指令只能使用dx寄存器或立即数指定端口，
                         // 只能用ax 或
                         // al来作为数据输入，具体用哪个需要看端口寄存器是几位
}
    8078:	90                   	nop
    8079:	66 c9                	leavel 
    807b:	66 c3                	retl   

0000807d <lgdt>:
 * @brief  加载全局描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lgdt(uint32_t start, uint32_t size) {
    807d:	66 55                	push   %ebp
    807f:	66 89 e5             	mov    %esp,%ebp
    8082:	66 83 ec 10          	sub    $0x10,%esp
    uint16_t limit;       // GDT的在内存中的逻辑边界
    uint16_t start15_0;   // GDT地址的低16位
    uint16_t start31_16;  // GDT地址的高16位
  } gdt;

  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
    8086:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    808b:	66 c1 e8 10          	shr    $0x10,%eax
    808f:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
    8093:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8098:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
  gdt.limit =
      size -
    809c:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a1:	66 83 e8 01          	sub    $0x1,%eax
  gdt.limit =
    80a5:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化GDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
    80a9:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
      "lgdt %[g]"
      :
      : [g] "m"(gdt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lgdt直接加载gdt所在的内存区域的内容
}
    80ae:	90                   	nop
    80af:	66 c9                	leavel 
    80b1:	66 c3                	retl   

000080b3 <read_cr0>:
/**
 * @brief  读取cr0寄存器的值
 *
 * @return uint16_t
 */
static inline uint32_t read_cr0(void) {
    80b3:	66 55                	push   %ebp
    80b5:	66 89 e5             	mov    %esp,%ebp
    80b8:	66 83 ec 10          	sub    $0x10,%esp
  uint32_t cr0;
  __asm__ __volatile__("mov %%cr0, %[v]" : [v] "=r"(cr0));
    80bc:	0f 20 c0             	mov    %cr0,%eax
    80bf:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
  return cr0;
    80c4:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c9:	66 c9                	leavel 
    80cb:	66 c3                	retl   

000080cd <write_cr0>:
/**
 * @brief  向cr0寄存器写入数据
 *
 * @param data
 */
static inline void write_cr0(uint32_t data) {
    80cd:	66 55                	push   %ebp
    80cf:	66 89 e5             	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr0" : : [v] "r"(data));
    80d2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d7:	0f 22 c0             	mov    %eax,%cr0
}
    80da:	90                   	nop
    80db:	66 5d                	pop    %ebp
    80dd:	66 c3                	retl   

000080df <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
    80df:	66 55                	push   %ebp
    80e1:	66 89 e5             	mov    %esp,%ebp
    80e4:	66 83 ec 10          	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
    80e8:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ed:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f7:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
    80fc:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8101:	67 66 ff 28          	ljmpl  *(%eax)
}
    8105:	90                   	nop
    8106:	66 c9                	leavel 
    8108:	66 c3                	retl   

0000810a <show_msg>:
/**
 * @brief  
 * 在显示器上打印字符串msg 
 * @param msg 
 */
static void show_msg(const char* msg) {
    810a:	66 55                	push   %ebp
    810c:	66 89 e5             	mov    %esp,%ebp
    810f:	66 83 ec 10          	sub    $0x10,%esp
     char c;
     while ((c = *(msg++)) != '\0') {          
    8113:	eb 0c                	jmp    8121 <show_msg+0x17>
          //asm()会对内联汇编进行优化，可能会导致不确定的结果，所以使用__asm__ __volatile__()
          __asm__ __volatile__(
    8115:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    811b:	b4 0e                	mov    $0xe,%ah
    811d:	88 c0                	mov    %al,%al
    811f:	cd 10                	int    $0x10
     while ((c = *(msg++)) != '\0') {          
    8121:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8126:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    812b:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8130:	67 66 0f b6 00       	movzbl (%eax),%eax
    8135:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8139:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813e:	75 d5                	jne    8115 <show_msg+0xb>
               "int $0x10"::[rgs]"r"(c) //"r" 将rgs映射到任意寄存器, 
                                        //且有了输入参数后，真正的寄存器要用%%前缀进行访问
          );
     }
     
}
    8140:	90                   	nop
    8141:	90                   	nop
    8142:	66 c9                	leavel 
    8144:	66 c3                	retl   

00008146 <detect_memory>:

/**
 * @brief  
 * 检测系统当前可用的内存块的地址和大小
 */
static void detect_memory(void) {
    8146:	66 55                	push   %ebp
    8148:	66 89 e5             	mov    %esp,%ebp
    814b:	66 57                	push   %edi
    814d:	66 56                	push   %esi
    814f:	66 53                	push   %ebx
    8151:	66 83 ec 30          	sub    $0x30,%esp
     show_msg("try to detect memory:\r\n");
    8155:	66 68 00 90 00 00    	pushl  $0x9000
    815b:	66 e8 a9 ff ff ff    	calll  810a <show_msg>
    8161:	66 83 c4 04          	add    $0x4,%esp

     SMAP_entry_t smap_entry;//记录每一次探测的结果
     
     boot_info.ram_region_count = 0; //将有效内存卡数量初始化为0
    8165:	66 c7 06 50 d0 00 00 	movl   $0x0,-0x2fb0
    816c:	00 00 

     //传入参数
     SMAP_entry_t *entry = &smap_entry; //记录的信息将回填到结构体中
    816e:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8173:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

     //传出参数
      uint32_t signature = 0, bytes =0, contID = 0; //分别为ax, cx, bx的传出参数
    8178:	67 66 c7 45 e4 00 00 	movl   $0x0,-0x1c(%ebp)
    817f:	00 00 
    8181:	67 66 c7 45 e0 00 00 	movl   $0x0,-0x20(%ebp)
    8188:	00 00 
    818a:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8191:	00 00 

     //逐个检测内存块，有效则装入数组中
     for (int i = 0; i < BOOT_RAM_REGION_MAX; ++i) {
    8193:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    819a:	00 00 
    819c:	e9 c6 00             	jmp    8265 <detect_memory+0x11f>

          //调用内联汇编进行一次内存块探测
          __asm__ __volatile__ ("int  $0x15" 
    819f:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    81a5:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    81aa:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81b0:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81b6:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81bb:	66 89 f7             	mov    %esi,%edi
    81be:	cd 15                	int    $0x15
    81c0:	66 89 da             	mov    %ebx,%edx
    81c3:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81c8:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81cd:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
				: "=a"(signature), "=c"(bytes), "=b"(contID) //传出参数
				: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)); //传入参数

          //判断所探测的内存块是否有效
          if (signature != 0x534d4150) { //无效直接退出
    81d2:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81d9:	4d 53 
    81db:	74 13                	je     81f0 <detect_memory+0xaa>
               show_msg("failed\r\n");
    81dd:	66 68 18 90 00 00    	pushl  $0x9018
    81e3:	66 e8 21 ff ff ff    	calll  810a <show_msg>
    81e9:	66 83 c4 04          	add    $0x4,%esp
    81ed:	e9 92 00             	jmp    8282 <detect_memory+0x13c>
               return;
          }

          if (bytes > 20 && (entry->ACPI & 0x0001) == 0) continue; //ACPI位为0，则内存块无效应当忽略	
    81f0:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81f6:	76 13                	jbe    820b <detect_memory+0xc5>
    81f8:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fd:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    8202:	66 83 e0 01          	and    $0x1,%eax
    8206:	66 85 c0             	test   %eax,%eax
    8209:	74 53                	je     825e <detect_memory+0x118>
		
          if (entry->Type == 1) { //Type = 1 当前内存块有效
    820b:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8210:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8215:	66 83 f8 01          	cmp    $0x1,%eax
    8219:	75 39                	jne    8254 <detect_memory+0x10e>
               //由于内存寻址空间较小，读取低32位即可
               boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;  
    821b:	66 a1 50 d0          	mov    0xd050,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 12          	mov    (%edx),%edx
    8228:	67 66 89 14 c5 00 d0 	mov    %edx,0xd000(,%eax,8)
    822f:	00 00 
               boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8231:	66 a1 50 d0          	mov    0xd050,%eax
    8235:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    823a:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    823f:	67 66 89 14 c5 04 d0 	mov    %edx,0xd004(,%eax,8)
    8246:	00 00 
               boot_info.ram_region_count++;
    8248:	66 a1 50 d0          	mov    0xd050,%eax
    824c:	66 83 c0 01          	add    $0x1,%eax
    8250:	66 a3 50 d0          	mov    %eax,0xd050
          }

          if (contID == 0) break; //contID为0则探测结束
    8254:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    825a:	74 15                	je     8271 <detect_memory+0x12b>
    825c:	eb 01                	jmp    825f <detect_memory+0x119>
          if (bytes > 20 && (entry->ACPI & 0x0001) == 0) continue; //ACPI位为0，则内存块无效应当忽略	
    825e:	90                   	nop
     for (int i = 0; i < BOOT_RAM_REGION_MAX; ++i) {
    825f:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8265:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    826b:	0f 8e 30 ff          	jle    819f <detect_memory+0x59>
    826f:	eb 01                	jmp    8272 <detect_memory+0x12c>
          if (contID == 0) break; //contID为0则探测结束
    8271:	90                   	nop
     } 

     show_msg("detect success\r\n");
    8272:	66 68 21 90 00 00    	pushl  $0x9021
    8278:	66 e8 8c fe ff ff    	calll  810a <show_msg>
    827e:	66 83 c4 04          	add    $0x4,%esp

}
    8282:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8287:	66 5b                	pop    %ebx
    8289:	66 5e                	pop    %esi
    828b:	66 5f                	pop    %edi
    828d:	66 5d                	pop    %ebp
    828f:	66 c3                	retl   

00008291 <enter_protect_mode>:

/**
 * @brief  进入保护模式
 * 
 */
static void enter_protect_mode(void){
    8291:	66 55                	push   %ebp
    8293:	66 89 e5             	mov    %esp,%ebp
    8296:	66 83 ec 10          	sub    $0x10,%esp
     //1.关闭中断，设置eflags对应的位即可，在进入保护模式时不接收中断调用
     cli();
    829a:	66 e8 78 fd ff ff    	calll  8018 <cli>

     //2.以此打开A20Gate, 读取92端口，并将其第二位设置为1
     uint8_t v = inb(0x92);
    82a0:	66 68 92 00 00 00    	pushl  $0x92
    82a6:	66 e8 77 fd ff ff    	calll  8023 <inb>
    82ac:	66 83 c4 04          	add    $0x4,%esp
    82b0:	67 88 45 ff          	mov    %al,-0x1(%ebp)
     outb(0x92, v | 0x2);
    82b4:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82ba:	66 83 c8 02          	or     $0x2,%eax
    82be:	66 0f b6 c0          	movzbl %al,%eax
    82c2:	66 50                	push   %eax
    82c4:	66 68 92 00 00 00    	pushl  $0x92
    82ca:	66 e8 7d fd ff ff    	calll  804d <outb>
    82d0:	66 83 c4 08          	add    $0x8,%esp

     //3.加载全局描述符
     lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82d4:	66 b8 00 b0 00 00    	mov    $0xb000,%eax
    82da:	66 6a 18             	pushl  $0x18
    82dd:	66 50                	push   %eax
    82df:	66 e8 98 fd ff ff    	calll  807d <lgdt>
    82e5:	66 83 c4 08          	add    $0x8,%esp

     //4.开启保护模式的使能位，设置cr0寄存器的第0位PE设置为1
     uint32_t cr0 = read_cr0();
    82e9:	66 e8 c4 fd ff ff    	calll  80b3 <read_cr0>
    82ef:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
     write_cr0(cr0 | 0x1);
    82f4:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82f9:	66 83 c8 01          	or     $0x1,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 e8 c8 fd ff ff    	calll  80cd <write_cr0>
    8305:	66 83 c4 04          	add    $0x4,%esp

     //5.远跳转到32位的loader程序，并清空原来的16位指令流水线
     far_jump(8, (uint32_t)protect_mode_entry);
    8309:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    830f:	66 50                	push   %eax
    8311:	66 6a 08             	pushl  $0x8
    8314:	66 e8 c5 fd ff ff    	calll  80df <far_jump>
    831a:	66 83 c4 08          	add    $0x8,%esp
}
    831e:	90                   	nop
    831f:	66 c9                	leavel 
    8321:	66 c3                	retl   

00008323 <loader_entry>:

/**
 * @brief 完成实模式下为进入保护模式的初始化工作 
 * 
 */
void loader_entry(void) {
    8323:	66 55                	push   %ebp
    8325:	66 89 e5             	mov    %esp,%ebp
     show_msg("..........loading.........\r\n");
    8328:	66 68 32 90 00 00    	pushl  $0x9032
    832e:	66 e8 d6 fd ff ff    	calll  810a <show_msg>
    8334:	66 83 c4 04          	add    $0x4,%esp

     //1.检测可用内存块
     detect_memory();         
    8338:	66 e8 08 fe ff ff    	calll  8146 <detect_memory>
     
     //2.进入保护模式
     enter_protect_mode();    
    833e:	66 e8 4d ff ff ff    	calll  8291 <enter_protect_mode>
     
}
    8344:	90                   	nop
    8345:	66 c9                	leavel 
    8347:	66 c3                	retl   

00008349 <inb>:
static inline uint8_t inb(uint16_t port) {
    8349:	55                   	push   %bp
    834a:	89 e5                	mov    %sp,%bp
    834c:	83 ec 14             	sub    $0x14,%sp
    834f:	8b 45 08             	mov    0x8(%di),%ax
    8352:	66 89 45 ec          	mov    %eax,-0x14(%di)
  __asm__ __volatile__(
    8356:	0f b7 45 ec          	movzww -0x14(%di),%ax
    835a:	89 c2                	mov    %ax,%dx
    835c:	ec                   	in     (%dx),%al
    835d:	88 45 ff             	mov    %al,-0x1(%di)
  return rv;
    8360:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8364:	c9                   	leave  
    8365:	c3                   	ret    

00008366 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
    8366:	55                   	push   %bp
    8367:	89 e5                	mov    %sp,%bp
    8369:	83 ec 08             	sub    $0x8,%sp
    836c:	8b 45 08             	mov    0x8(%di),%ax
    836f:	8b 55 0c             	mov    0xc(%di),%dx
    8372:	66 89 45 fc          	mov    %eax,-0x4(%di)
    8376:	89 d0                	mov    %dx,%ax
    8378:	88 45 f8             	mov    %al,-0x8(%di)
  __asm__ __volatile__(
    837b:	0f b7 55 fc          	movzww -0x4(%di),%dx
    837f:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    8383:	ee                   	out    %al,(%dx)
}
    8384:	90                   	nop
    8385:	c9                   	leave  
    8386:	c3                   	ret    

00008387 <inw>:
static inline uint16_t inw(uint16_t port) {
    8387:	55                   	push   %bp
    8388:	89 e5                	mov    %sp,%bp
    838a:	83 ec 14             	sub    $0x14,%sp
    838d:	8b 45 08             	mov    0x8(%di),%ax
    8390:	66 89 45 ec          	mov    %eax,-0x14(%di)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
    8394:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8398:	89 c2                	mov    %ax,%dx
    839a:	66 ed                	in     (%dx),%eax
    839c:	66 89 45 fe          	mov    %eax,-0x2(%di)
  return rv;
    83a0:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    83a4:	c9                   	leave  
    83a5:	c3                   	ret    

000083a6 <read_cr0>:
static inline uint32_t read_cr0(void) {
    83a6:	55                   	push   %bp
    83a7:	89 e5                	mov    %sp,%bp
    83a9:	83 ec 10             	sub    $0x10,%sp
  __asm__ __volatile__("mov %%cr0, %[v]" : [v] "=r"(cr0));
    83ac:	0f 20 c0             	mov    %cr0,%eax
    83af:	89 45 fc             	mov    %ax,-0x4(%di)
  return cr0;
    83b2:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83b5:	c9                   	leave  
    83b6:	c3                   	ret    

000083b7 <write_cr0>:
static inline void write_cr0(uint32_t data) {
    83b7:	55                   	push   %bp
    83b8:	89 e5                	mov    %sp,%bp
  __asm__ __volatile__("mov %[v], %%cr0" : : [v] "r"(data));
    83ba:	8b 45 08             	mov    0x8(%di),%ax
    83bd:	0f 22 c0             	mov    %eax,%cr0
}
    83c0:	90                   	nop
    83c1:	5d                   	pop    %bp
    83c2:	c3                   	ret    

000083c3 <write_cr3>:
static inline void write_cr3(uint32_t data) {
    83c3:	55                   	push   %bp
    83c4:	89 e5                	mov    %sp,%bp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
    83c6:	8b 45 08             	mov    0x8(%di),%ax
    83c9:	0f 22 d8             	mov    %eax,%cr3
}
    83cc:	90                   	nop
    83cd:	5d                   	pop    %bp
    83ce:	c3                   	ret    

000083cf <read_cr4>:
static inline uint32_t read_cr4(void) {
    83cf:	55                   	push   %bp
    83d0:	89 e5                	mov    %sp,%bp
    83d2:	83 ec 10             	sub    $0x10,%sp
  __asm__ __volatile__("mov %%cr4, %[v]" : [v] "=r"(cr4));
    83d5:	0f 20 e0             	mov    %cr4,%eax
    83d8:	89 45 fc             	mov    %ax,-0x4(%di)
  return cr4;
    83db:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83de:	c9                   	leave  
    83df:	c3                   	ret    

000083e0 <write_cr4>:
static inline void write_cr4(uint32_t data) {
    83e0:	55                   	push   %bp
    83e1:	89 e5                	mov    %sp,%bp
  __asm__ __volatile__("mov %[v], %%cr4" : : [v] "r"(data));
    83e3:	8b 45 08             	mov    0x8(%di),%ax
    83e6:	0f 22 e0             	mov    %eax,%cr4
}
    83e9:	90                   	nop
    83ea:	5d                   	pop    %bp
    83eb:	c3                   	ret    

000083ec <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
    83ec:	55                   	push   %bp
    83ed:	89 e5                	mov    %sp,%bp
    83ef:	53                   	push   %bx
    83f0:	83 ec 14             	sub    $0x14,%sp
    83f3:	8b 45 0c             	mov    0xc(%di),%ax
    83f6:	66 89 45 e8          	mov    %eax,-0x18(%di)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
    83fa:	68 e0 00             	push   $0xe0
    83fd:	00 00                	add    %al,(%bx,%si)
    83ff:	68 f6 01             	push   $0x1f6
    8402:	00 00                	add    %al,(%bx,%si)
    8404:	e8 5d ff             	call   8364 <inb+0x1b>
    8407:	ff                   	(bad)  
    8408:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
    840c:	0f b7 45 e8          	movzww -0x18(%di),%ax
    8410:	66 c1 e8 08          	shr    $0x8,%eax
    8414:	0f b6 c0             	movzbw %al,%ax
    8417:	50                   	push   %ax
    8418:	68 f2 01             	push   $0x1f2
    841b:	00 00                	add    %al,(%bx,%si)
    841d:	e8 44 ff             	call   8364 <inb+0x1b>
    8420:	ff                   	(bad)  
    8421:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
    8425:	8b 45 08             	mov    0x8(%di),%ax
    8428:	c1 e8 18             	shr    $0x18,%ax
    842b:	0f b6 c0             	movzbw %al,%ax
    842e:	50                   	push   %ax
    842f:	68 f3 01             	push   $0x1f3
    8432:	00 00                	add    %al,(%bx,%si)
    8434:	e8 2d ff             	call   8364 <inb+0x1b>
    8437:	ff                   	(bad)  
    8438:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, 0x00);                          //LBA5
    843c:	6a 00                	push   $0x0
    843e:	68 f4 01             	push   $0x1f4
    8441:	00 00                	add    %al,(%bx,%si)
    8443:	e8 1e ff             	call   8364 <inb+0x1b>
    8446:	ff                   	(bad)  
    8447:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, 0x00);                          //LBA6
    844b:	6a 00                	push   $0x0
    844d:	68 f5 01             	push   $0x1f5
    8450:	00 00                	add    %al,(%bx,%si)
    8452:	e8 0f ff             	call   8364 <inb+0x1b>
    8455:	ff                   	(bad)  
    8456:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
    845a:	0f b7 45 e8          	movzww -0x18(%di),%ax
    845e:	0f b6 c0             	movzbw %al,%ax
    8461:	50                   	push   %ax
    8462:	68 f2 01             	push   $0x1f2
    8465:	00 00                	add    %al,(%bx,%si)
    8467:	e8 fa fe             	call   8364 <inb+0x1b>
    846a:	ff                   	(bad)  
    846b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)sector);               //LBA1
    846f:	8b 45 08             	mov    0x8(%di),%ax
    8472:	0f b6 c0             	movzbw %al,%ax
    8475:	50                   	push   %ax
    8476:	68 f3 01             	push   $0x1f3
    8479:	00 00                	add    %al,(%bx,%si)
    847b:	e8 e6 fe             	call   8364 <inb+0x1b>
    847e:	ff                   	(bad)  
    847f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
    8483:	8b 45 08             	mov    0x8(%di),%ax
    8486:	c1 e8 08             	shr    $0x8,%ax
    8489:	0f b6 c0             	movzbw %al,%ax
    848c:	50                   	push   %ax
    848d:	68 f4 01             	push   $0x1f4
    8490:	00 00                	add    %al,(%bx,%si)
    8492:	e8 cf fe             	call   8364 <inb+0x1b>
    8495:	ff                   	(bad)  
    8496:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
    849a:	8b 45 08             	mov    0x8(%di),%ax
    849d:	c1 e8 10             	shr    $0x10,%ax
    84a0:	0f b6 c0             	movzbw %al,%ax
    84a3:	50                   	push   %ax
    84a4:	68 f5 01             	push   $0x1f5
    84a7:	00 00                	add    %al,(%bx,%si)
    84a9:	e8 b8 fe             	call   8364 <inb+0x1b>
    84ac:	ff                   	(bad)  
    84ad:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
    84b1:	6a 24                	push   $0x24
    84b3:	68 f7 01             	push   $0x1f7
    84b6:	00 00                	add    %al,(%bx,%si)
    84b8:	e8 a9 fe             	call   8364 <inb+0x1b>
    84bb:	ff                   	(bad)  
    84bc:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
    84c0:	8b 45 10             	mov    0x10(%di),%ax
    84c3:	89 45 f8             	mov    %ax,-0x8(%di)
    while (sector_count--) {
    84c6:	eb 4a                	jmp    8512 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
    84c8:	90                   	nop
    84c9:	68 f7 01             	push   $0x1f7
    84cc:	00 00                	add    %al,(%bx,%si)
    84ce:	e8 76 fe             	call   8347 <loader_entry+0x24>
    84d1:	ff                   	(bad)  
    84d2:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84d6:	0f b6 c0             	movzbw %al,%ax
    84d9:	25 88 00             	and    $0x88,%ax
    84dc:	00 00                	add    %al,(%bx,%si)
    84de:	83 f8 08             	cmp    $0x8,%ax
    84e1:	75 e6                	jne    84c9 <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
    84e3:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84e8:	00 00                	add    %al,(%bx,%si)
    84ea:	eb 1d                	jmp    8509 <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
    84ec:	8b 5d f8             	mov    -0x8(%di),%bx
    84ef:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84f2:	89 45 f8             	mov    %ax,-0x8(%di)
    84f5:	68 f0 01             	push   $0x1f0
    84f8:	00 00                	add    %al,(%bx,%si)
    84fa:	e8 88 fe             	call   8385 <outb+0x1f>
    84fd:	ff                   	(bad)  
    84fe:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8502:	66 89 03             	mov    %eax,(%bp,%di)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
    8505:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    8509:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    850e:	00 00                	add    %al,(%bx,%si)
    8510:	7e da                	jle    84ec <read_disk+0x100>
    while (sector_count--) {
    8512:	0f b7 45 e8          	movzww -0x18(%di),%ax
    8516:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    8519:	66 89 55 e8          	mov    %edx,-0x18(%di)
    851d:	66 85 c0             	test   %eax,%eax
    8520:	75 a6                	jne    84c8 <read_disk+0xdc>
        }
        
    }
    
}
    8522:	90                   	nop
    8523:	90                   	nop
    8524:	8b 5d fc             	mov    -0x4(%di),%bx
    8527:	c9                   	leave  
    8528:	c3                   	ret    

00008529 <reload_elf_file>:
 *          拷贝到内存中的目的地址，elf文件会将(.text, .rodata)，(.data, .bss)各放在一个段
 * 
 * @param file_start_addr 已加载到内存中的elf文件的起始地址
 * @return uint32_t   返回所拷贝的程序段的入口地址
 */
static uint32_t reload_elf_file(uint8_t *file_start_addr ) {
    8529:	55                   	push   %bp
    852a:	89 e5                	mov    %sp,%bp
    852c:	83 ec 20             	sub    $0x20,%sp
    //1.强转为Elf32_Ehdr, 使该结构体可以访问到之后的52字节, 即elf header所包含的内容
    Elf32_Ehdr *elf_hdr = (Elf32_Ehdr*)file_start_addr; 
    852f:	8b 45 08             	mov    0x8(%di),%ax
    8532:	89 45 e8             	mov    %ax,-0x18(%di)

    //2.判断为访问的内存区域是否为elf文件,若不是则直接返回0
    if (elf_hdr->e_ident[0] != 0x7f 
    8535:	8b 45 e8             	mov    -0x18(%di),%ax
    8538:	0f b6 00             	movzbw (%bx,%si),%ax
    853b:	3c 7f                	cmp    $0x7f,%al
    853d:	75 21                	jne    8560 <reload_elf_file+0x37>
        || elf_hdr->e_ident[1] != 'E' 
    853f:	8b 45 e8             	mov    -0x18(%di),%ax
    8542:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    8546:	3c 45                	cmp    $0x45,%al
    8548:	75 16                	jne    8560 <reload_elf_file+0x37>
        || elf_hdr->e_ident[2] != 'L' 
    854a:	8b 45 e8             	mov    -0x18(%di),%ax
    854d:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    8551:	3c 4c                	cmp    $0x4c,%al
    8553:	75 0b                	jne    8560 <reload_elf_file+0x37>
        || elf_hdr->e_ident[3] != 'F') return 0;
    8555:	8b 45 e8             	mov    -0x18(%di),%ax
    8558:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    855c:	3c 46                	cmp    $0x46,%al
    855e:	74 0a                	je     856a <reload_elf_file+0x41>
    8560:	b8 00 00             	mov    $0x0,%ax
    8563:	00 00                	add    %al,(%bx,%si)
    8565:	e9 c2 00             	jmp    862a <reload_elf_file+0x101>
    8568:	00 00                	add    %al,(%bx,%si)

    //3.解析program hear即段的头信息数组
    for (int i = 0; i < elf_hdr->e_phnum; ++i) {
    856a:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    856f:	00 00                	add    %al,(%bx,%si)
    8571:	e9 9d 00             	jmp    8611 <reload_elf_file+0xe8>
    8574:	00 00                	add    %al,(%bx,%si)
        //4.以 Elf32_Phdr 内存大小为单位，逐个读取段的头信息，e_phoff 为其起始地址相对于elf文件的偏移量
        Elf32_Phdr *phdr = (Elf32_Phdr*)(file_start_addr + elf_hdr->e_phoff) + i;
    8576:	8b 45 e8             	mov    -0x18(%di),%ax
    8579:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    857c:	8b 45 fc             	mov    -0x4(%di),%ax
    857f:	c1 e0 05             	shl    $0x5,%ax
    8582:	01 c2                	add    %ax,%dx
    8584:	8b 45 08             	mov    0x8(%di),%ax
    8587:	01 d0                	add    %dx,%ax
    8589:	89 45 e4             	mov    %ax,-0x1c(%di)

        //5.判断是否为可加载的程序段, 不是则直接忽略
        if (phdr->p_type != PT_LOAD) continue;
    858c:	8b 45 e4             	mov    -0x1c(%di),%ax
    858f:	8b 00                	mov    (%bx,%si),%ax
    8591:	83 f8 01             	cmp    $0x1,%ax
    8594:	75 78                	jne    860e <reload_elf_file+0xe5>

        //6.找到可加载程序段在内存中的位置, p_offset为其起始地址相对于elf文件的偏移量
        uint8_t *src = file_start_addr + phdr->p_offset;
    8596:	8b 45 e4             	mov    -0x1c(%di),%ax
    8599:	8b 50 04             	mov    0x4(%bx,%si),%dx
    859c:	8b 45 08             	mov    0x8(%di),%ax
    859f:	01 d0                	add    %dx,%ax
    85a1:	89 45 f8             	mov    %ax,-0x8(%di)

        //7.加载到内存中的目的地址
        uint8_t *dest = (uint8_t*)phdr->p_paddr;
    85a4:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a7:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85aa:	89 45 f4             	mov    %ax,-0xc(%di)

        //8.逐个字节拷贝到对应位置
        for (int i = 0; i < phdr->p_filesz; ++i) {
    85ad:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    85b2:	00 00                	add    %al,(%bx,%si)
    85b4:	eb 1b                	jmp    85d1 <reload_elf_file+0xa8>
            *(dest++) = *(src++);
    85b6:	8b 55 f8             	mov    -0x8(%di),%dx
    85b9:	8d 42 01             	lea    0x1(%bp,%si),%ax
    85bc:	89 45 f8             	mov    %ax,-0x8(%di)
    85bf:	8b 45 f4             	mov    -0xc(%di),%ax
    85c2:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85c5:	89 4d f4             	mov    %cx,-0xc(%di)
    85c8:	0f b6 12             	movzbw (%bp,%si),%dx
    85cb:	88 10                	mov    %dl,(%bx,%si)
        for (int i = 0; i < phdr->p_filesz; ++i) {
    85cd:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85d1:	8b 45 e4             	mov    -0x1c(%di),%ax
    85d4:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85d7:	8b 45 f0             	mov    -0x10(%di),%ax
    85da:	39 c2                	cmp    %ax,%dx
    85dc:	77 d8                	ja     85b6 <reload_elf_file+0x8d>
        }

        //9.若加载的是.data段和.bss段，则.bss段因为未初始化，所以在elf文件中并为为其预留空间
        //但在内存中需要为其分配空间，还需要分配空间大小为 (p_memsz - p_filesz),置0即可
        for (int i = 0; i < phdr->p_memsz - phdr->p_filesz; ++i) {
    85de:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85e3:	00 00                	add    %al,(%bx,%si)
    85e5:	eb 10                	jmp    85f7 <reload_elf_file+0xce>
            *(dest++) = 0;
    85e7:	8b 45 f4             	mov    -0xc(%di),%ax
    85ea:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85ed:	89 55 f4             	mov    %dx,-0xc(%di)
    85f0:	c6 00 00             	movb   $0x0,(%bx,%si)
        for (int i = 0; i < phdr->p_memsz - phdr->p_filesz; ++i) {
    85f3:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85f7:	8b 45 e4             	mov    -0x1c(%di),%ax
    85fa:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85fd:	8b 45 e4             	mov    -0x1c(%di),%ax
    8600:	8b 40 10             	mov    0x10(%bx,%si),%ax
    8603:	29 c2                	sub    %ax,%dx
    8605:	8b 45 ec             	mov    -0x14(%di),%ax
    8608:	39 c2                	cmp    %ax,%dx
    860a:	77 db                	ja     85e7 <reload_elf_file+0xbe>
    860c:	eb 01                	jmp    860f <reload_elf_file+0xe6>
        if (phdr->p_type != PT_LOAD) continue;
    860e:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; ++i) {
    860f:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    8613:	8b 45 e8             	mov    -0x18(%di),%ax
    8616:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    861a:	0f b7 c0             	movzww %ax,%ax
    861d:	39 45 fc             	cmp    %ax,-0x4(%di)
    8620:	0f 8c 50 ff          	jl     8574 <reload_elf_file+0x4b>
    8624:	ff                   	(bad)  
    8625:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }

    //10.返回解析的程序段的入口地址
    return elf_hdr->e_entry;
    8629:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    862c:	c9                   	leave  
    862d:	c3                   	ret    

0000862e <die>:
/**
 * @brief  读取错误代码进行异常处理
 * 
 * @param err_code 
 */
static void die(uint8_t err_code) {
    862e:	55                   	push   %bp
    862f:	89 e5                	mov    %sp,%bp
    8631:	83 ec 04             	sub    $0x4,%sp
    8634:	8b 45 08             	mov    0x8(%di),%ax
    8637:	88 45 fc             	mov    %al,-0x4(%di)
    //TODO:暂时什么都不做，直接卡死电脑
    for(;;){}
    863a:	eb fe                	jmp    863a <die+0xc>

0000863c <enable_page_mode>:

/**
 * @brief 打开分页机制, 先按4mb大小的页进行一级分页，之后再改为4kb大小的页并且二级分页
 * 
 */
void enable_page_mode(void) {
    863c:	55                   	push   %bp
    863d:	89 e5                	mov    %sp,%bp
    static uint32_t page_dir[1024] __attribute__((aligned(4096))) = {
        [0] = PDE_P | PDE_W | PED_PS  //地址位为0，所以从内存的低4mb开始映射
    };

    //2.将cr4寄存器的PSE位置1
    write_cr4(read_cr4() | CR4_PSE);
    863f:	e8 8b fd             	call   83cd <write_cr3+0xa>
    8642:	ff                   	(bad)  
    8643:	ff 83 c8 10          	incw   0x10c8(%bp,%di)
    8647:	50                   	push   %ax
    8648:	e8 93 fd             	call   83de <read_cr4+0xf>
    864b:	ff                   	(bad)  
    864c:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    //3.设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3((uint32_t)page_dir);
    8650:	b8 00 c0             	mov    $0xc000,%ax
    8653:	00 00                	add    %al,(%bx,%si)
    8655:	50                   	push   %ax
    8656:	e8 68 fd             	call   83c1 <write_cr0+0xa>
    8659:	ff                   	(bad)  
    865a:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    //4.将cr0寄存器的PG_ENABLE位置1
    write_cr0(read_cr0() | CR0_PG);
    865e:	e8 43 fd             	call   83a4 <inw+0x1d>
    8661:	ff                   	(bad)  
    8662:	ff 0d                	decw   (%di)
    8664:	00 00                	add    %al,(%bx,%si)
    8666:	00 80 50 e8          	add    %al,-0x17b0(%bx,%si)
    866a:	49                   	dec    %cx
    866b:	fd                   	std    
    866c:	ff                   	(bad)  
    866d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)




}
    8671:	90                   	nop
    8672:	c9                   	leave  
    8673:	c3                   	ret    

00008674 <load_kernel>:

/**
 * @brief  32位loader程序的入口函数
 * 
 */
void load_kernel(void) {
    8674:	55                   	push   %bp
    8675:	89 e5                	mov    %sp,%bp
    8677:	83 ec 18             	sub    $0x18,%sp
    //1.从磁盘100号分区读取内核，一共读取250kb，到内存中地址为SYS_KERNEL_LOAD_ADDR的地方
    read_disk(100, 500, (uint8_t*)SYS_KERNEL_LOAD_ADDR);            
    867a:	68 00 00             	push   $0x0
    867d:	10 00                	adc    %al,(%bx,%si)
    867f:	68 f4 01             	push   $0x1f4
    8682:	00 00                	add    %al,(%bx,%si)
    8684:	6a 64                	push   $0x64
    8686:	e8 61 fd             	call   83ea <write_cr4+0xa>
    8689:	ff                   	(bad)  
    868a:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

    //2.解析内存中地址为SYS_KERNEL_LOAD_ADDR处的elf文件头     
    uint32_t kernel_entry = reload_elf_file((uint8_t*)SYS_KERNEL_LOAD_ADDR); 
    868e:	68 00 00             	push   $0x0
    8691:	10 00                	adc    %al,(%bx,%si)
    8693:	e8 91 fe             	call   8527 <read_disk+0x13b>
    8696:	ff                   	(bad)  
    8697:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    869b:	89 45 f4             	mov    %ax,-0xc(%di)
    
    //3.若函数执行失败，返回的入口地址为0，进行错误处理
    if (kernel_entry == 0) { 
    869e:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    86a2:	75 0d                	jne    86b1 <load_kernel+0x3d>
        die(-1);
    86a4:	68 ff 00             	push   $0xff
    86a7:	00 00                	add    %al,(%bx,%si)
    86a9:	e8 80 ff             	call   862c <reload_elf_file+0x103>
    86ac:	ff                   	(bad)  
    86ad:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    } 

    //4.加载内核后开启分页机制
    enable_page_mode();              
    86b1:	e8 86 ff             	call   863a <die+0xc>
    86b4:	ff                   	(bad)  
    86b5:	ff 8b 45 f4          	decw   -0xbbb(%bp,%di)

    //5.将boot_info记录的信息传递给已拷贝到确定内存中的内核初始化函数
    ((void(*)(boot_info_t*))kernel_entry)(&boot_info);    
    86b9:	83 ec 0c             	sub    $0xc,%sp
    86bc:	68 00 d0             	push   $0xd000
    86bf:	00 00                	add    %al,(%bx,%si)
    86c1:	ff d0                	call   *%ax
    86c3:	83 c4 10             	add    $0x10,%sp
    86c6:	90                   	nop
    86c7:	c9                   	leave  
    86c8:	c3                   	ret    
