
/home/kbpoyo/Documents/code/cpp/MyOS/build/source/loader/loader.elf：     文件格式 elf32-i386
/home/kbpoyo/Documents/code/cpp/MyOS/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000197 memsz 0x00000197 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00000032 memsz 0x00000032 flags r--
    LOAD off    0x00000040 vaddr 0x0000a040 paddr 0x0000a040 align 2**12
         filesz 0x00000000 memsz 0x00000054 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000197  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000032  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000054  0000a040  0000a040  00002040  2**5
                  ALLOC
  3 .comment      0000002b  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00002060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000220  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 0000013e  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   0000014a  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000078  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000201  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000142  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	0000003c show_msg
0000803f l     F .text	0000014b detect_memory
00000000 l    df *ABS*	00000000 loader_32.c
0000818a g     F .text	0000000d loader_entry
0000a040 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000a032 g       .bss	00000000 __bss_start
0000a032 g       .bss	00000000 _edata
0000a094 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text
	.global _start
	.extern loader_entry 	//告诉编译器loader_entry函数在其他文件中

_start:
	jmp loader_entry 
    8000:	e9 87 01             	jmp    818a <loader_entry>

00008003 <show_msg>:
/**
 * @brief  
 * 在显示器上打印字符串msg 
 * @param msg 
 */
static void show_msg(const char* msg) {
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    8008:	66 83 ec 10          	sub    $0x10,%esp
     char c;
     while ((c = *(msg++)) != '\0') {          
    800c:	eb 0c                	jmp    801a <show_msg+0x17>
          //asm()会对内联汇编进行优化，可能会导致不确定的结果，所以使用__asm__ __volatile__()
          __asm__ __volatile__(
    800e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8014:	b4 0e                	mov    $0xe,%ah
    8016:	88 c0                	mov    %al,%al
    8018:	cd 10                	int    $0x10
     while ((c = *(msg++)) != '\0') {          
    801a:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    801f:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8024:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8029:	67 66 0f b6 00       	movzbl (%eax),%eax
    802e:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8032:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8037:	75 d5                	jne    800e <show_msg+0xb>
               "int $0x10"::[rgs]"r"(c) //"r" 将rgs映射到任意寄存器, 
                                        //且有了输入参数后，真正的寄存器要用%%前缀进行访问
          );
     }
     
}
    8039:	90                   	nop
    803a:	90                   	nop
    803b:	66 c9                	leavel 
    803d:	66 c3                	retl   

0000803f <detect_memory>:

/**
 * @brief  
 * 检测系统当前可用的内存块的地址和大小
 */
static void detect_memory(void) {
    803f:	66 55                	push   %ebp
    8041:	66 89 e5             	mov    %esp,%ebp
    8044:	66 57                	push   %edi
    8046:	66 56                	push   %esi
    8048:	66 53                	push   %ebx
    804a:	66 83 ec 30          	sub    $0x30,%esp
     SMAP_entry_t smap_entry;//记录每一次探测的结果

     show_msg("try to detect memory:\r\n");
    804e:	66 68 00 90 00 00    	pushl  $0x9000
    8054:	66 e8 a9 ff ff ff    	calll  8003 <show_msg>
    805a:	66 83 c4 04          	add    $0x4,%esp
     
     boot_info.ram_region_count = 0; //将有效内存卡数量初始化为0
    805e:	66 c7 06 90 a0 00 00 	movl   $0x0,-0x5f70
    8065:	00 00 

     //传入参数
     SMAP_entry_t *entry = &smap_entry; //记录的信息将回填到结构体中
    8067:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    806c:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

     //传出参数
      int signature = 0, bytes =0, contID = 0; //分别为ax, cx, bx的传出参数
    8071:	67 66 c7 45 e4 00 00 	movl   $0x0,-0x1c(%ebp)
    8078:	00 00 
    807a:	67 66 c7 45 e0 00 00 	movl   $0x0,-0x20(%ebp)
    8081:	00 00 
    8083:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    808a:	00 00 

     //逐个检测内存块，有效则装入数组中
     for (int i = 0; i < BOOT_RAM_REGION_MAX; ++i) {
    808c:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8093:	00 00 
    8095:	e9 c6 00             	jmp    815e <detect_memory+0x11f>

          //调用内联汇编进行一次内存块探测
          __asm__ __volatile__ ("int  $0x15" 
    8098:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    809e:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    80a3:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    80a9:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    80af:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    80b4:	66 89 f7             	mov    %esi,%edi
    80b7:	cd 15                	int    $0x15
    80b9:	66 89 da             	mov    %ebx,%edx
    80bc:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    80c1:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    80c6:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
				: "=a"(signature), "=c"(bytes), "=b"(contID) //传出参数
				: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)); //传入参数

          //判断所探测的内存块是否有效
          if (signature != 0x534d4150) { //无效直接退出
    80cb:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    80d2:	4d 53 
    80d4:	74 13                	je     80e9 <detect_memory+0xaa>
               show_msg("failed\r\n");
    80d6:	66 68 18 90 00 00    	pushl  $0x9018
    80dc:	66 e8 21 ff ff ff    	calll  8003 <show_msg>
    80e2:	66 83 c4 04          	add    $0x4,%esp
    80e6:	e9 92 00             	jmp    817b <detect_memory+0x13c>
               return;
          }

          if (bytes > 20 && (entry->ACPI & 0x0001) == 0) continue; //ACPI位为0，则内存块无效应当忽略	
    80e9:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    80ef:	7e 13                	jle    8104 <detect_memory+0xc5>
    80f1:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80f6:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    80fb:	66 83 e0 01          	and    $0x1,%eax
    80ff:	66 85 c0             	test   %eax,%eax
    8102:	74 53                	je     8157 <detect_memory+0x118>
		
          if (entry->Type == 1) { //Type = 1 当前内存卡有效
    8104:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8109:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    810e:	66 83 f8 01          	cmp    $0x1,%eax
    8112:	75 39                	jne    814d <detect_memory+0x10e>
               boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;  //由于内存寻址空间较小，读取低32位即可
    8114:	66 a1 90 a0          	mov    0xa090,%eax
    8118:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    811d:	67 66 8b 12          	mov    (%edx),%edx
    8121:	67 66 89 14 c5 40 a0 	mov    %edx,0xa040(,%eax,8)
    8128:	00 00 
               boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    812a:	66 a1 90 a0          	mov    0xa090,%eax
    812e:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8133:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8138:	67 66 89 14 c5 44 a0 	mov    %edx,0xa044(,%eax,8)
    813f:	00 00 
               boot_info.ram_region_count++;
    8141:	66 a1 90 a0          	mov    0xa090,%eax
    8145:	66 83 c0 01          	add    $0x1,%eax
    8149:	66 a3 90 a0          	mov    %eax,0xa090
          }

          if (contID == 0) break; //contID为0则探测结束
    814d:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8153:	74 15                	je     816a <detect_memory+0x12b>
    8155:	eb 01                	jmp    8158 <detect_memory+0x119>
          if (bytes > 20 && (entry->ACPI & 0x0001) == 0) continue; //ACPI位为0，则内存块无效应当忽略	
    8157:	90                   	nop
     for (int i = 0; i < BOOT_RAM_REGION_MAX; ++i) {
    8158:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    815e:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8164:	0f 8e 30 ff          	jle    8098 <detect_memory+0x59>
    8168:	eb 01                	jmp    816b <detect_memory+0x12c>
          if (contID == 0) break; //contID为0则探测结束
    816a:	90                   	nop
     } 

     show_msg("detect success\r\n");
    816b:	66 68 21 90 00 00    	pushl  $0x9021
    8171:	66 e8 8c fe ff ff    	calll  8003 <show_msg>
    8177:	66 83 c4 04          	add    $0x4,%esp

}
    817b:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8180:	66 5b                	pop    %ebx
    8182:	66 5e                	pop    %esi
    8184:	66 5f                	pop    %edi
    8186:	66 5d                	pop    %ebp
    8188:	66 c3                	retl   

0000818a <loader_entry>:


void loader_entry(void) {
    818a:	66 55                	push   %ebp
    818c:	66 89 e5             	mov    %esp,%ebp

     detect_memory();
    818f:	66 e8 aa fe ff ff    	calll  803f <detect_memory>
     for (;;){
    8195:	eb fe                	jmp    8195 <loader_entry+0xb>
