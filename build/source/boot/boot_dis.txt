
/home/kbpoyo/code/cpp/MyOs/build/source/boot/boot.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000051 memsz 0x00000051 flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000051  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002b  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   0000005d  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000041  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   000000b2  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_frame  00000034  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000103  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line_str 0000008a  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00007c25 l       .text	00000000 read_loader
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c3a g     F .text	00000017 boot_entry
00007c00 g       .text	00000000 _start
00008000 g       .text	00000000 __bss_start
00008000 g       .text	00000000 _edata
00008000 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:

// bios自动将磁盘0磁头0柱面1扇区加载到0x7c00，而此处的代码段将放在最前面，即_start加载后为0x7c00
//链接器在链接时需要用-e(或--entry)指明程序的入口地址或符号(函数或段名),若没有指明则默认为_start
_start:
	//初始化段寄存器为0,采用平坦模型访问内存，cs寄存器默认为0，其他其实也是默认为0
	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c0b:	8e e8                	mov    %ax,%gs
	mov $_start, %esp 	//初始化栈顶指针寄存器，即将0x7c00前面一段空间用做程序运行的栈空间
    7c0d:	66 bc 00 7c 00 00    	mov    $0x7c00,%esp
						//此处用了esp,即16位模式下用了32位模式的资源，指令前缀为反转前缀66

	//int 0x10 软中断调用显卡驱动，
	mov $0xe, %ah 	//ah = 0xe 表示显示字符
    7c13:	b4 0e                	mov    $0xe,%ah
	mov $'S', %al 	// al 缓冲区记录显示内容
    7c15:	b0 53                	mov    $0x53,%al
	int $0x10 		//进入中断程序
    7c17:	cd 10                	int    $0x10

	mov $0xe, %ah 	
    7c19:	b4 0e                	mov    $0xe,%ah
	mov $'\r', %al 	
    7c1b:	b0 0d                	mov    $0xd,%al
	int $0x10 		
    7c1d:	cd 10                	int    $0x10

	mov $0xe, %ah 	
    7c1f:	b4 0e                	mov    $0xe,%ah
	mov $'\n', %al 	
    7c21:	b0 0a                	mov    $0xa,%al
	int $0x10 		
    7c23:	cd 10                	int    $0x10

00007c25 <read_loader>:



//int 0x13 软中断调用磁盘驱动读取磁盘
read_loader:
	mov $0x8000, %bx	// es:bx = 加载到内存中的地址,此时es = 0， 即直接将读取的内容加载到内存0x8000处 
    7c25:	bb 00 80             	mov    $0x8000,%bx
	mov $0x2, %ah 		// ah = 0x2, al = 扇区数, 
    7c28:	b4 02                	mov    $0x2,%ah
	mov $64, %al		// 读取64个扇区, 即32kb
    7c2a:	b0 40                	mov    $0x40,%al
	mov $0x2, %cx 		// ch = 柱面，cl = 扇区编号， 在0柱面进行读取，bios从1开始为扇区编号，1扇区为mbr引导程序，所以从2扇区读取
    7c2c:	b9 02 00             	mov    $0x2,%cx
	mov $0, %dh			// dh = 磁头，即盘面，当前从0盘面开始读取
    7c2f:	b6 00                	mov    $0x0,%dh
	mov $0x80, %dl 		// dl = 驱动器，0x00~0x7f:软盘， 0x80~0xff:硬盘
    7c31:	b2 80                	mov    $0x80,%dl
	int $0x13 			//执行中断程序
    7c33:	cd 13                	int    $0x13

	//出口参数, cf = 0表示操作成功否则失败，若成功则ah=0x00,al=传输的扇区数，否则ah=状态代码(参见功能号0x01)
	// cf为eflags寄存器的0号位，表示carry flag， 在运算过程中若最高位有进位或借位则置1
	jc read_loader		// jc/jb/jna 跳转条件为 cf = 1,即当前失败时跳转重新读取
    7c35:	72 ee                	jb     7c25 <read_loader>


	//加载完loader后跳转到loader入口程序执行
	jmp boot_entry
    7c37:	e9 00 00             	jmp    7c3a <boot_entry>

00007c3a <boot_entry>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c3a:	66 55                	push   %ebp
    7c3c:	66 89 e5             	mov    %esp,%ebp
    7c3f:	66 83 ec 08          	sub    $0x8,%esp
    ((void (*)(void))LOADER_START_ADDR)(); //用函数指针直接调用0x8000处的函数
    7c43:	66 b8 00 80 00 00    	mov    $0x8000,%eax
    7c49:	66 ff d0             	call   *%eax
} 
    7c4c:	90                   	nop
    7c4d:	66 c9                	leavel 
    7c4f:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
