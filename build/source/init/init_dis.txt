
/home/kbpoyo/code/cpp/MyOs/build/source/init/init.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/init/init.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00001000 vaddr 0x82000000 paddr 0x82000000 align 2**12
         filesz 0x00002030 memsz 0x00002094 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ce  82000000  82000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000004  820017d0  820017d0  000027d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000850  820017e0  820017e0  000027e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  82002040  82002040  00003030  2**5
                  ALLOC
  4 .debug_line   00000ea7  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000005f0  00000000  00000000  00003ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00006367  00000000  00000000  000044c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001723  00000000  00000000  0000a82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000198  00000000  00000000  0000bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a0c  00000000  00000000  0000c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000003d  00000000  00000000  0000cafc  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000005ac  00000000  00000000  0000cb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    df *ABS*	00000000 lib_syscall.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
820017e0 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
820004e5 l     F .text	00000293 malloc_extend_top
00000000 l    df *ABS*	00000000 mlock.c
82002088 l     O .bss	00000004 __malloc_recursive_mutex
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
8200208c l     O .bss	00000004 __atexit_recursive_mutex
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
82001637 g     F .text	00000037 cleanup_glue
8200014f g     F .text	0000001b yield
820003e3 g     F .text	00000039 ioctl
82000fa0 g     F .text	00000006 __malloc_unlock
82002090 g     O .bss	00000004 errno
82000122 g     F .text	0000002d execve
820000c4 g     F .text	0000001b getpid
820004ac g     F .text	0000001c malloc
82000239 g     F .text	00000021 isatty
82002040 g     O .bss	00000004 __malloc_top_pad
82002040 g       .bss	00000000 __bss_start__
82000fa6 g     F .text	00000040 _sbrk_r
8200036e g     F .text	00000040 readdir
82002044 g     O .bss	00000004 __malloc_max_sbrked_mem
8200020c g     F .text	0000002d lseek
820017d0 g     O .rodata	00000004 _global_impure_ptr
8200166e g     F .text	00000160 _reclaim_reent
820001be g     F .text	0000002d write
8200025a g     F .text	00000027 fstat
8200004e g     F .text	0000004c sys_call
82002094 g       .bss	00000000 __bss_end__
820010fb g     F .text	000003db _free_r
820002e5 g     F .text	00000021 wait
82000fe6 g     F .text	00000115 __call_exitprocs
8200202c g     O .data	00000004 __malloc_sbrk_base
82000000 g       .text	00000000 _start
82000191 g     F .text	0000002d read
82002060 g     O .bss	00000028 __malloc_current_mallinfo
8200041c g     F .text	00000027 unlink
82000107 g     F .text	0000001b fork
82001c20 g     O .data	00000408 __malloc_av_
82000f9a g     F .text	00000006 __malloc_lock
82000281 g     F .text	00000021 sbrk
82000010 g     F .text	0000003e cstart
82000443 g     F .text	00000025 main
82002048 g     O .bss	00000004 __malloc_max_total_mem
82000778 g     F .text	00000822 _malloc_r
82000306 g     F .text	00000068 opendir
820014d6 g     F .text	00000161 _malloc_trim_r
820002a2 g     F .text	00000021 dup
82001c04 g     O .data	00000004 _impure_ptr
820000df g     F .text	00000028 print_msg
82002028 g     O .data	00000004 __malloc_trim_threshold
82000468 g     F .text	00000044 exit
820002c3 g     F .text	00000022 _exit
8200016a g     F .text	00000027 open
820003ae g     F .text	00000035 closedir
8200009a g     F .text	0000002a msleep
820001eb g     F .text	00000021 close
820004c8 g     F .text	0000001d free



Disassembly of section .text:

82000000 <_start>:
    .extern cstart
_start:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
82000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
82000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
82000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
82000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
82000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
	jmp cstart
8200000b:	e9 00 00 00 00       	jmp    82000010 <cstart>

82000010 <cstart>:
 * @brief 执行调用main之前的初始化工作
 *
 * @param argc
 * @param argv
 */
void cstart(int argc, char **argv) {
82000010:	55                   	push   %ebp
82000011:	89 e5                	mov    %esp,%ebp
82000013:	83 ec 18             	sub    $0x18,%esp
    //对程序的bss段进行清零操作
    char *start = __bss_start__;
82000016:	c7 45 f4 40 20 00 82 	movl   $0x82002040,-0xc(%ebp)
    while (start < __bss_end__) {
8200001d:	eb 0c                	jmp    8200002b <cstart+0x1b>
        *(start++) = 0;
8200001f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000022:	8d 50 01             	lea    0x1(%eax),%edx
82000025:	89 55 f4             	mov    %edx,-0xc(%ebp)
82000028:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__) {
8200002b:	81 7d f4 94 20 00 82 	cmpl   $0x82002094,-0xc(%ebp)
82000032:	72 eb                	jb     8200001f <cstart+0xf>
    }
    
    exit(main(argc, argv));
82000034:	83 ec 08             	sub    $0x8,%esp
82000037:	ff 75 0c             	push   0xc(%ebp)
8200003a:	ff 75 08             	push   0x8(%ebp)
8200003d:	e8 01 04 00 00       	call   82000443 <main>
82000042:	83 c4 10             	add    $0x10,%esp
82000045:	83 ec 0c             	sub    $0xc,%esp
82000048:	50                   	push   %eax
82000049:	e8 1a 04 00 00       	call   82000468 <exit>

8200004e <sys_call>:
#include    "os_cfg.h"
#include    "lib_syscall.h"
#include    <stdlib.h>


int sys_call(syscall_args_t *args) {
8200004e:	55                   	push   %ebp
8200004f:	89 e5                	mov    %esp,%ebp
82000051:	57                   	push   %edi
82000052:	56                   	push   %esi
82000053:	53                   	push   %ebx
82000054:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
82000057:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8200005e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
82000065:	8b 45 08             	mov    0x8(%ebp),%eax
82000068:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8200006b:	8b 55 08             	mov    0x8(%ebp),%edx
8200006e:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
82000071:	8b 4d 08             	mov    0x8(%ebp),%ecx
82000074:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
82000077:	8b 5d 08             	mov    0x8(%ebp),%ebx
8200007a:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8200007d:	8b 75 08             	mov    0x8(%ebp),%esi
82000080:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
82000082:	8d 7d e8             	lea    -0x18(%ebp),%edi
82000085:	50                   	push   %eax
82000086:	52                   	push   %edx
82000087:	51                   	push   %ecx
82000088:	53                   	push   %ebx
82000089:	56                   	push   %esi
8200008a:	ff 1f                	lcall  *(%edi)
8200008c:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8200008f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
82000092:	83 c4 10             	add    $0x10,%esp
82000095:	5b                   	pop    %ebx
82000096:	5e                   	pop    %esi
82000097:	5f                   	pop    %edi
82000098:	5d                   	pop    %ebp
82000099:	c3                   	ret    

8200009a <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8200009a:	55                   	push   %ebp
8200009b:	89 e5                	mov    %esp,%ebp
8200009d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
820000a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
820000a4:	7e 1b                	jle    820000c1 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
820000a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
820000ad:	8b 45 08             	mov    0x8(%ebp),%eax
820000b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
820000b3:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000b6:	50                   	push   %eax
820000b7:	e8 92 ff ff ff       	call   8200004e <sys_call>
820000bc:	83 c4 04             	add    $0x4,%esp
820000bf:	eb 01                	jmp    820000c2 <msleep+0x28>
    if (ms <= 0) return;
820000c1:	90                   	nop

}
820000c2:	c9                   	leave  
820000c3:	c3                   	ret    

820000c4 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
820000c4:	55                   	push   %ebp
820000c5:	89 e5                	mov    %esp,%ebp
820000c7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
820000ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
820000d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000d4:	50                   	push   %eax
820000d5:	e8 74 ff ff ff       	call   8200004e <sys_call>
820000da:	83 c4 04             	add    $0x4,%esp
}
820000dd:	c9                   	leave  
820000de:	c3                   	ret    

820000df <print_msg>:

void print_msg(const char *fmt, int arg) {
820000df:	55                   	push   %ebp
820000e0:	89 e5                	mov    %esp,%ebp
820000e2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
820000e5:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
820000ec:	8b 45 08             	mov    0x8(%ebp),%eax
820000ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
820000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
820000f5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
820000f8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000fb:	50                   	push   %eax
820000fc:	e8 4d ff ff ff       	call   8200004e <sys_call>
82000101:	83 c4 04             	add    $0x4,%esp
}
82000104:	90                   	nop
82000105:	c9                   	leave  
82000106:	c3                   	ret    

82000107 <fork>:

int fork (void) {
82000107:	55                   	push   %ebp
82000108:	89 e5                	mov    %esp,%ebp
8200010a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8200010d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
82000114:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000117:	50                   	push   %eax
82000118:	e8 31 ff ff ff       	call   8200004e <sys_call>
8200011d:	83 c4 04             	add    $0x4,%esp
}
82000120:	c9                   	leave  
82000121:	c3                   	ret    

82000122 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
82000122:	55                   	push   %ebp
82000123:	89 e5                	mov    %esp,%ebp
82000125:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
82000128:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
8200012f:	8b 45 08             	mov    0x8(%ebp),%eax
82000132:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
82000135:	8b 45 0c             	mov    0xc(%ebp),%eax
82000138:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
8200013b:	8b 45 10             	mov    0x10(%ebp),%eax
8200013e:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
82000141:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000144:	50                   	push   %eax
82000145:	e8 04 ff ff ff       	call   8200004e <sys_call>
8200014a:	83 c4 04             	add    $0x4,%esp
}
8200014d:	c9                   	leave  
8200014e:	c3                   	ret    

8200014f <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
8200014f:	55                   	push   %ebp
82000150:	89 e5                	mov    %esp,%ebp
82000152:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
82000155:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
8200015c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200015f:	50                   	push   %eax
82000160:	e8 e9 fe ff ff       	call   8200004e <sys_call>
82000165:	83 c4 04             	add    $0x4,%esp
}
82000168:	c9                   	leave  
82000169:	c3                   	ret    

8200016a <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
8200016a:	55                   	push   %ebp
8200016b:	89 e5                	mov    %esp,%ebp
8200016d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
82000170:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
82000177:	8b 45 08             	mov    0x8(%ebp),%eax
8200017a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8200017d:	8b 45 0c             	mov    0xc(%ebp),%eax
82000180:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
82000183:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000186:	50                   	push   %eax
82000187:	e8 c2 fe ff ff       	call   8200004e <sys_call>
8200018c:	83 c4 04             	add    $0x4,%esp
}
8200018f:	c9                   	leave  
82000190:	c3                   	ret    

82000191 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
82000191:	55                   	push   %ebp
82000192:	89 e5                	mov    %esp,%ebp
82000194:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
82000197:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8200019e:	8b 45 08             	mov    0x8(%ebp),%eax
820001a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
820001a4:	8b 45 0c             	mov    0xc(%ebp),%eax
820001a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
820001aa:	8b 45 10             	mov    0x10(%ebp),%eax
820001ad:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
820001b0:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001b3:	50                   	push   %eax
820001b4:	e8 95 fe ff ff       	call   8200004e <sys_call>
820001b9:	83 c4 04             	add    $0x4,%esp
}
820001bc:	c9                   	leave  
820001bd:	c3                   	ret    

820001be <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
820001be:	55                   	push   %ebp
820001bf:	89 e5                	mov    %esp,%ebp
820001c1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
820001c4:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
820001cb:	8b 45 08             	mov    0x8(%ebp),%eax
820001ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
820001d1:	8b 45 0c             	mov    0xc(%ebp),%eax
820001d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
820001d7:	8b 45 10             	mov    0x10(%ebp),%eax
820001da:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
820001dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001e0:	50                   	push   %eax
820001e1:	e8 68 fe ff ff       	call   8200004e <sys_call>
820001e6:	83 c4 04             	add    $0x4,%esp
}
820001e9:	c9                   	leave  
820001ea:	c3                   	ret    

820001eb <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
820001eb:	55                   	push   %ebp
820001ec:	89 e5                	mov    %esp,%ebp
820001ee:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
820001f1:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
820001f8:	8b 45 08             	mov    0x8(%ebp),%eax
820001fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
820001fe:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000201:	50                   	push   %eax
82000202:	e8 47 fe ff ff       	call   8200004e <sys_call>
82000207:	83 c4 04             	add    $0x4,%esp
}
8200020a:	c9                   	leave  
8200020b:	c3                   	ret    

8200020c <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8200020c:	55                   	push   %ebp
8200020d:	89 e5                	mov    %esp,%ebp
8200020f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
82000212:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
82000219:	8b 45 08             	mov    0x8(%ebp),%eax
8200021c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
8200021f:	8b 45 0c             	mov    0xc(%ebp),%eax
82000222:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
82000225:	8b 45 10             	mov    0x10(%ebp),%eax
82000228:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8200022b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200022e:	50                   	push   %eax
8200022f:	e8 1a fe ff ff       	call   8200004e <sys_call>
82000234:	83 c4 04             	add    $0x4,%esp
}
82000237:	c9                   	leave  
82000238:	c3                   	ret    

82000239 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
82000239:	55                   	push   %ebp
8200023a:	89 e5                	mov    %esp,%ebp
8200023c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8200023f:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
82000246:	8b 45 08             	mov    0x8(%ebp),%eax
82000249:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8200024c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200024f:	50                   	push   %eax
82000250:	e8 f9 fd ff ff       	call   8200004e <sys_call>
82000255:	83 c4 04             	add    $0x4,%esp
}
82000258:	c9                   	leave  
82000259:	c3                   	ret    

8200025a <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
8200025a:	55                   	push   %ebp
8200025b:	89 e5                	mov    %esp,%ebp
8200025d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
82000260:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
82000267:	8b 45 08             	mov    0x8(%ebp),%eax
8200026a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
8200026d:	8b 45 0c             	mov    0xc(%ebp),%eax
82000270:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
82000273:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000276:	50                   	push   %eax
82000277:	e8 d2 fd ff ff       	call   8200004e <sys_call>
8200027c:	83 c4 04             	add    $0x4,%esp
}
8200027f:	c9                   	leave  
82000280:	c3                   	ret    

82000281 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
82000281:	55                   	push   %ebp
82000282:	89 e5                	mov    %esp,%ebp
82000284:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
82000287:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)incr;
8200028e:	8b 45 08             	mov    0x8(%ebp),%eax
82000291:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
82000294:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000297:	50                   	push   %eax
82000298:	e8 b1 fd ff ff       	call   8200004e <sys_call>
8200029d:	83 c4 04             	add    $0x4,%esp
}
820002a0:	c9                   	leave  
820002a1:	c3                   	ret    

820002a2 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
820002a2:	55                   	push   %ebp
820002a3:	89 e5                	mov    %esp,%ebp
820002a5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
820002a8:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = file;
820002af:	8b 45 08             	mov    0x8(%ebp),%eax
820002b2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
820002b5:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002b8:	50                   	push   %eax
820002b9:	e8 90 fd ff ff       	call   8200004e <sys_call>
820002be:	83 c4 04             	add    $0x4,%esp
}
820002c1:	c9                   	leave  
820002c2:	c3                   	ret    

820002c3 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
820002c3:	55                   	push   %ebp
820002c4:	89 e5                	mov    %esp,%ebp
820002c6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
820002c9:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
820002d0:	8b 45 08             	mov    0x8(%ebp),%eax
820002d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
820002d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002d9:	50                   	push   %eax
820002da:	e8 6f fd ff ff       	call   8200004e <sys_call>
820002df:	83 c4 04             	add    $0x4,%esp
}
820002e2:	90                   	nop
820002e3:	c9                   	leave  
820002e4:	c3                   	ret    

820002e5 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
820002e5:	55                   	push   %ebp
820002e6:	89 e5                	mov    %esp,%ebp
820002e8:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
820002eb:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
820002f2:	8b 45 08             	mov    0x8(%ebp),%eax
820002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
820002f8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002fb:	50                   	push   %eax
820002fc:	e8 4d fd ff ff       	call   8200004e <sys_call>
82000301:	83 c4 04             	add    $0x4,%esp
}
82000304:	c9                   	leave  
82000305:	c3                   	ret    

82000306 <opendir>:
 * @brief 打开一个目录
 * 
 * @param path 
 * @return DIR* 
 */
DIR *opendir(const char *path) {
82000306:	55                   	push   %ebp
82000307:	89 e5                	mov    %esp,%ebp
82000309:	83 ec 28             	sub    $0x28,%esp
    DIR *dir = (DIR*)malloc(sizeof(DIR));
8200030c:	83 ec 0c             	sub    $0xc,%esp
8200030f:	6a 20                	push   $0x20
82000311:	e8 96 01 00 00       	call   820004ac <malloc>
82000316:	83 c4 10             	add    $0x10,%esp
82000319:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == (DIR*)0) {
8200031c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
82000320:	75 07                	jne    82000329 <opendir+0x23>
        return (DIR*)0;
82000322:	b8 00 00 00 00       	mov    $0x0,%eax
82000327:	eb 43                	jmp    8200036c <opendir+0x66>
    }

    syscall_args_t args;
    args.id = SYS_opendir;
82000329:	c7 45 dc 3c 00 00 00 	movl   $0x3c,-0x24(%ebp)
    args.arg0 = (int)path;
82000330:	8b 45 08             	mov    0x8(%ebp),%eax
82000333:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
82000336:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000339:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int err = sys_call(&args);
8200033c:	83 ec 0c             	sub    $0xc,%esp
8200033f:	8d 45 dc             	lea    -0x24(%ebp),%eax
82000342:	50                   	push   %eax
82000343:	e8 06 fd ff ff       	call   8200004e <sys_call>
82000348:	83 c4 10             	add    $0x10,%esp
8200034b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (err < 0) {
8200034e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
82000352:	79 15                	jns    82000369 <opendir+0x63>
        free(dir);
82000354:	83 ec 0c             	sub    $0xc,%esp
82000357:	ff 75 f4             	push   -0xc(%ebp)
8200035a:	e8 69 01 00 00       	call   820004c8 <free>
8200035f:	83 c4 10             	add    $0x10,%esp
        return (DIR*)0;
82000362:	b8 00 00 00 00       	mov    $0x0,%eax
82000367:	eb 03                	jmp    8200036c <opendir+0x66>
    }

    return dir;    
82000369:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8200036c:	c9                   	leave  
8200036d:	c3                   	ret    

8200036e <readdir>:
 * @brief 读取目录信息得到目录项表
 * 
 * @param dir 
 * @return struct dirent* 
 */
struct dirent *readdir(DIR *dir) {
8200036e:	55                   	push   %ebp
8200036f:	89 e5                	mov    %esp,%ebp
82000371:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_readdir;
82000374:	c7 45 e8 3d 00 00 00 	movl   $0x3d,-0x18(%ebp)
    args.arg0 = (int)dir;
8200037b:	8b 45 08             	mov    0x8(%ebp),%eax
8200037e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&(dir->dirent);
82000381:	8b 45 08             	mov    0x8(%ebp),%eax
82000384:	83 c0 04             	add    $0x4,%eax
82000387:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int err = sys_call(&args);
8200038a:	8d 45 e8             	lea    -0x18(%ebp),%eax
8200038d:	50                   	push   %eax
8200038e:	e8 bb fc ff ff       	call   8200004e <sys_call>
82000393:	83 c4 04             	add    $0x4,%esp
82000396:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (err < 0) {
82000399:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
8200039d:	79 07                	jns    820003a6 <readdir+0x38>
        return (struct dirent*)0;
8200039f:	b8 00 00 00 00       	mov    $0x0,%eax
820003a4:	eb 06                	jmp    820003ac <readdir+0x3e>
    }

    return &dir->dirent;   
820003a6:	8b 45 08             	mov    0x8(%ebp),%eax
820003a9:	83 c0 04             	add    $0x4,%eax
}
820003ac:	c9                   	leave  
820003ad:	c3                   	ret    

820003ae <closedir>:
 * @brief 关闭目录
 * 
 * @param dir 
 * @return int 
 */
int closedir(DIR *dir) {
820003ae:	55                   	push   %ebp
820003af:	89 e5                	mov    %esp,%ebp
820003b1:	83 ec 28             	sub    $0x28,%esp
    syscall_args_t args;
    args.id = SYS_closedir;
820003b4:	c7 45 e0 3e 00 00 00 	movl   $0x3e,-0x20(%ebp)
    args.arg0 = (int)dir;
820003bb:	8b 45 08             	mov    0x8(%ebp),%eax
820003be:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int err = sys_call(&args);
820003c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
820003c4:	50                   	push   %eax
820003c5:	e8 84 fc ff ff       	call   8200004e <sys_call>
820003ca:	83 c4 04             	add    $0x4,%esp
820003cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    free(dir);
820003d0:	83 ec 0c             	sub    $0xc,%esp
820003d3:	ff 75 08             	push   0x8(%ebp)
820003d6:	e8 ed 00 00 00       	call   820004c8 <free>
820003db:	83 c4 10             	add    $0x10,%esp

    return err;   
820003de:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
820003e1:	c9                   	leave  
820003e2:	c3                   	ret    

820003e3 <ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int ioctl(int file, int cmd, int arg0, int arg1) {
820003e3:	55                   	push   %ebp
820003e4:	89 e5                	mov    %esp,%ebp
820003e6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_ioctl;
820003e9:	c7 45 e8 3a 00 00 00 	movl   $0x3a,-0x18(%ebp)
    args.arg0 = file;
820003f0:	8b 45 08             	mov    0x8(%ebp),%eax
820003f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = cmd;
820003f6:	8b 45 0c             	mov    0xc(%ebp),%eax
820003f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg2 = arg0;
820003fc:	8b 45 10             	mov    0x10(%ebp),%eax
820003ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg3 = arg1;
82000402:	8b 45 14             	mov    0x14(%ebp),%eax
82000405:	89 45 f8             	mov    %eax,-0x8(%ebp)

    int err = sys_call(&args);
82000408:	8d 45 e8             	lea    -0x18(%ebp),%eax
8200040b:	50                   	push   %eax
8200040c:	e8 3d fc ff ff       	call   8200004e <sys_call>
82000411:	83 c4 04             	add    $0x4,%esp
82000414:	89 45 fc             	mov    %eax,-0x4(%ebp)

    return err;   
82000417:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
8200041a:	c9                   	leave  
8200041b:	c3                   	ret    

8200041c <unlink>:
 * @brief 删除一个文件
 * 
 * @param path 
 * @return int 
 */
int unlink(const char *path) {
8200041c:	55                   	push   %ebp
8200041d:	89 e5                	mov    %esp,%ebp
8200041f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_unlink;
82000422:	c7 45 e8 3b 00 00 00 	movl   $0x3b,-0x18(%ebp)
    args.arg0 = (path);
82000429:	8b 45 08             	mov    0x8(%ebp),%eax
8200042c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int err = sys_call(&args);
8200042f:	8d 45 e8             	lea    -0x18(%ebp),%eax
82000432:	50                   	push   %eax
82000433:	e8 16 fc ff ff       	call   8200004e <sys_call>
82000438:	83 c4 04             	add    $0x4,%esp
8200043b:	89 45 fc             	mov    %eax,-0x4(%ebp)

    return err;   
8200043e:	8b 45 fc             	mov    -0x4(%ebp),%eax
82000441:	c9                   	leave  
82000442:	c3                   	ret    

82000443 <main>:
 * 作者：李述铜
 * 联系邮箱: 527676163@qq.com
 */
#include <stdio.h>

int main (int argc, char ** argv) {
82000443:	55                   	push   %ebp
82000444:	89 e5                	mov    %esp,%ebp
82000446:	83 ec 10             	sub    $0x10,%esp
    *(char *)0 = 0x1234;
82000449:	b8 00 00 00 00       	mov    $0x0,%eax
8200044e:	c6 00 34             	movb   $0x34,(%eax)

    int a = 3 / 0;
82000451:	b8 03 00 00 00       	mov    $0x3,%eax
82000456:	b9 00 00 00 00       	mov    $0x0,%ecx
8200045b:	99                   	cltd   
8200045c:	f7 f9                	idiv   %ecx
8200045e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return 0;
82000461:	b8 00 00 00 00       	mov    $0x0,%eax
}
82000466:	c9                   	leave  
82000467:	c3                   	ret    

82000468 <exit>:
82000468:	55                   	push   %ebp
82000469:	89 e5                	mov    %esp,%ebp
8200046b:	83 ec 08             	sub    $0x8,%esp
8200046e:	83 ec 08             	sub    $0x8,%esp
82000471:	6a 00                	push   $0x0
82000473:	ff 75 08             	push   0x8(%ebp)
82000476:	e8 6b 0b 00 00       	call   82000fe6 <__call_exitprocs>
8200047b:	83 c4 10             	add    $0x10,%esp
8200047e:	a1 d0 17 00 82       	mov    0x820017d0,%eax
82000483:	8b 40 3c             	mov    0x3c(%eax),%eax
82000486:	85 c0                	test   %eax,%eax
82000488:	74 17                	je     820004a1 <exit+0x39>
8200048a:	a1 d0 17 00 82       	mov    0x820017d0,%eax
8200048f:	8b 40 3c             	mov    0x3c(%eax),%eax
82000492:	8b 15 d0 17 00 82    	mov    0x820017d0,%edx
82000498:	83 ec 0c             	sub    $0xc,%esp
8200049b:	52                   	push   %edx
8200049c:	ff d0                	call   *%eax
8200049e:	83 c4 10             	add    $0x10,%esp
820004a1:	83 ec 0c             	sub    $0xc,%esp
820004a4:	ff 75 08             	push   0x8(%ebp)
820004a7:	e8 17 fe ff ff       	call   820002c3 <_exit>

820004ac <malloc>:
820004ac:	55                   	push   %ebp
820004ad:	89 e5                	mov    %esp,%ebp
820004af:	83 ec 08             	sub    $0x8,%esp
820004b2:	a1 04 1c 00 82       	mov    0x82001c04,%eax
820004b7:	83 ec 08             	sub    $0x8,%esp
820004ba:	ff 75 08             	push   0x8(%ebp)
820004bd:	50                   	push   %eax
820004be:	e8 b5 02 00 00       	call   82000778 <_malloc_r>
820004c3:	83 c4 10             	add    $0x10,%esp
820004c6:	c9                   	leave  
820004c7:	c3                   	ret    

820004c8 <free>:
820004c8:	55                   	push   %ebp
820004c9:	89 e5                	mov    %esp,%ebp
820004cb:	83 ec 08             	sub    $0x8,%esp
820004ce:	a1 04 1c 00 82       	mov    0x82001c04,%eax
820004d3:	83 ec 08             	sub    $0x8,%esp
820004d6:	ff 75 08             	push   0x8(%ebp)
820004d9:	50                   	push   %eax
820004da:	e8 1c 0c 00 00       	call   820010fb <_free_r>
820004df:	83 c4 10             	add    $0x10,%esp
820004e2:	90                   	nop
820004e3:	c9                   	leave  
820004e4:	c3                   	ret    

820004e5 <malloc_extend_top>:
820004e5:	55                   	push   %ebp
820004e6:	89 e5                	mov    %esp,%ebp
820004e8:	83 ec 38             	sub    $0x38,%esp
820004eb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820004f2:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820004f7:	8b 40 08             	mov    0x8(%eax),%eax
820004fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
820004fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000500:	8b 40 04             	mov    0x4(%eax),%eax
82000503:	83 e0 fc             	and    $0xfffffffc,%eax
82000506:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000509:	8b 55 e0             	mov    -0x20(%ebp),%edx
8200050c:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200050f:	01 d0                	add    %edx,%eax
82000511:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000514:	8b 15 40 20 00 82    	mov    0x82002040,%edx
8200051a:	8b 45 0c             	mov    0xc(%ebp),%eax
8200051d:	01 d0                	add    %edx,%eax
8200051f:	83 c0 10             	add    $0x10,%eax
82000522:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000525:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
8200052c:	a1 2c 20 00 82       	mov    0x8200202c,%eax
82000531:	83 f8 ff             	cmp    $0xffffffff,%eax
82000534:	74 15                	je     8200054b <malloc_extend_top+0x66>
82000536:	8b 55 d4             	mov    -0x2c(%ebp),%edx
82000539:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200053c:	01 d0                	add    %edx,%eax
8200053e:	8d 50 ff             	lea    -0x1(%eax),%edx
82000541:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000544:	f7 d8                	neg    %eax
82000546:	21 d0                	and    %edx,%eax
82000548:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200054b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200054e:	83 ec 08             	sub    $0x8,%esp
82000551:	50                   	push   %eax
82000552:	ff 75 08             	push   0x8(%ebp)
82000555:	e8 4c 0a 00 00       	call   82000fa6 <_sbrk_r>
8200055a:	83 c4 10             	add    $0x10,%esp
8200055d:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000560:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000564:	0f 84 0b 02 00 00    	je     82000775 <malloc_extend_top+0x290>
8200056a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200056d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000570:	73 0e                	jae    82000580 <malloc_extend_top+0x9b>
82000572:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000577:	39 45 e0             	cmp    %eax,-0x20(%ebp)
8200057a:	0f 85 f5 01 00 00    	jne    82000775 <malloc_extend_top+0x290>
82000580:	a1 60 20 00 82       	mov    0x82002060,%eax
82000585:	89 c2                	mov    %eax,%edx
82000587:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200058a:	01 d0                	add    %edx,%eax
8200058c:	a3 60 20 00 82       	mov    %eax,0x82002060
82000591:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000594:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000597:	75 30                	jne    820005c9 <malloc_extend_top+0xe4>
82000599:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200059c:	8d 50 ff             	lea    -0x1(%eax),%edx
8200059f:	8b 45 d8             	mov    -0x28(%ebp),%eax
820005a2:	21 d0                	and    %edx,%eax
820005a4:	85 c0                	test   %eax,%eax
820005a6:	75 21                	jne    820005c9 <malloc_extend_top+0xe4>
820005a8:	8b 55 e8             	mov    -0x18(%ebp),%edx
820005ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
820005ae:	01 d0                	add    %edx,%eax
820005b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
820005b3:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820005b8:	8b 40 08             	mov    0x8(%eax),%eax
820005bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
820005be:	83 ca 01             	or     $0x1,%edx
820005c1:	89 50 04             	mov    %edx,0x4(%eax)
820005c4:	e9 76 01 00 00       	jmp    8200073f <malloc_extend_top+0x25a>
820005c9:	a1 2c 20 00 82       	mov    0x8200202c,%eax
820005ce:	83 f8 ff             	cmp    $0xffffffff,%eax
820005d1:	75 0a                	jne    820005dd <malloc_extend_top+0xf8>
820005d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005d6:	a3 2c 20 00 82       	mov    %eax,0x8200202c
820005db:	eb 13                	jmp    820005f0 <malloc_extend_top+0x10b>
820005dd:	8b 15 60 20 00 82    	mov    0x82002060,%edx
820005e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005e6:	2b 45 d8             	sub    -0x28(%ebp),%eax
820005e9:	01 d0                	add    %edx,%eax
820005eb:	a3 60 20 00 82       	mov    %eax,0x82002060
820005f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005f3:	83 c0 08             	add    $0x8,%eax
820005f6:	83 e0 07             	and    $0x7,%eax
820005f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
820005fc:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
82000600:	74 13                	je     82000615 <malloc_extend_top+0x130>
82000602:	b8 08 00 00 00       	mov    $0x8,%eax
82000607:	2b 45 cc             	sub    -0x34(%ebp),%eax
8200060a:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200060d:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000610:	01 45 f4             	add    %eax,-0xc(%ebp)
82000613:	eb 07                	jmp    8200061c <malloc_extend_top+0x137>
82000615:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8200061c:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200061f:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000622:	01 d0                	add    %edx,%eax
82000624:	89 c2                	mov    %eax,%edx
82000626:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000629:	83 e8 01             	sub    $0x1,%eax
8200062c:	21 c2                	and    %eax,%edx
8200062e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000631:	29 d0                	sub    %edx,%eax
82000633:	01 45 f0             	add    %eax,-0x10(%ebp)
82000636:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000639:	83 e8 01             	sub    $0x1,%eax
8200063c:	21 45 f0             	and    %eax,-0x10(%ebp)
8200063f:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000642:	83 ec 08             	sub    $0x8,%esp
82000645:	50                   	push   %eax
82000646:	ff 75 08             	push   0x8(%ebp)
82000649:	e8 58 09 00 00       	call   82000fa6 <_sbrk_r>
8200064e:	83 c4 10             	add    $0x10,%esp
82000651:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000654:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
82000658:	75 28                	jne    82000682 <malloc_extend_top+0x19d>
8200065a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
82000661:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82000668:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200066b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200066e:	01 d0                	add    %edx,%eax
82000670:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000673:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
82000677:	74 09                	je     82000682 <malloc_extend_top+0x19d>
82000679:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200067c:	83 e8 08             	sub    $0x8,%eax
8200067f:	01 45 ec             	add    %eax,-0x14(%ebp)
82000682:	a1 60 20 00 82       	mov    0x82002060,%eax
82000687:	89 c2                	mov    %eax,%edx
82000689:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200068c:	01 d0                	add    %edx,%eax
8200068e:	a3 60 20 00 82       	mov    %eax,0x82002060
82000693:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000698:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200069b:	89 42 08             	mov    %eax,0x8(%edx)
8200069e:	8b 45 ec             	mov    -0x14(%ebp),%eax
820006a1:	2b 45 f4             	sub    -0xc(%ebp),%eax
820006a4:	89 c2                	mov    %eax,%edx
820006a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
820006a9:	01 d0                	add    %edx,%eax
820006ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
820006ae:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006b3:	8b 40 08             	mov    0x8(%eax),%eax
820006b6:	8b 55 d0             	mov    -0x30(%ebp),%edx
820006b9:	83 ca 01             	or     $0x1,%edx
820006bc:	89 50 04             	mov    %edx,0x4(%eax)
820006bf:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006c4:	39 45 e0             	cmp    %eax,-0x20(%ebp)
820006c7:	74 76                	je     8200073f <malloc_extend_top+0x25a>
820006c9:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
820006cd:	77 14                	ja     820006e3 <malloc_extend_top+0x1fe>
820006cf:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006d4:	8b 40 08             	mov    0x8(%eax),%eax
820006d7:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
820006de:	e9 93 00 00 00       	jmp    82000776 <malloc_extend_top+0x291>
820006e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006e6:	83 e8 0c             	sub    $0xc,%eax
820006e9:	83 e0 f8             	and    $0xfffffff8,%eax
820006ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
820006ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006f2:	8b 40 04             	mov    0x4(%eax),%eax
820006f5:	83 e0 01             	and    $0x1,%eax
820006f8:	0b 45 dc             	or     -0x24(%ebp),%eax
820006fb:	89 c2                	mov    %eax,%edx
820006fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000700:	89 50 04             	mov    %edx,0x4(%eax)
82000703:	8b 55 e0             	mov    -0x20(%ebp),%edx
82000706:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000709:	01 d0                	add    %edx,%eax
8200070b:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
82000712:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000715:	8d 50 04             	lea    0x4(%eax),%edx
82000718:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200071b:	01 d0                	add    %edx,%eax
8200071d:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
82000724:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
82000728:	76 15                	jbe    8200073f <malloc_extend_top+0x25a>
8200072a:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200072d:	83 c0 08             	add    $0x8,%eax
82000730:	83 ec 08             	sub    $0x8,%esp
82000733:	50                   	push   %eax
82000734:	ff 75 08             	push   0x8(%ebp)
82000737:	e8 bf 09 00 00       	call   820010fb <_free_r>
8200073c:	83 c4 10             	add    $0x10,%esp
8200073f:	a1 60 20 00 82       	mov    0x82002060,%eax
82000744:	89 c2                	mov    %eax,%edx
82000746:	a1 44 20 00 82       	mov    0x82002044,%eax
8200074b:	39 c2                	cmp    %eax,%edx
8200074d:	76 0a                	jbe    82000759 <malloc_extend_top+0x274>
8200074f:	a1 60 20 00 82       	mov    0x82002060,%eax
82000754:	a3 44 20 00 82       	mov    %eax,0x82002044
82000759:	a1 60 20 00 82       	mov    0x82002060,%eax
8200075e:	89 c2                	mov    %eax,%edx
82000760:	a1 48 20 00 82       	mov    0x82002048,%eax
82000765:	39 c2                	cmp    %eax,%edx
82000767:	76 0d                	jbe    82000776 <malloc_extend_top+0x291>
82000769:	a1 60 20 00 82       	mov    0x82002060,%eax
8200076e:	a3 48 20 00 82       	mov    %eax,0x82002048
82000773:	eb 01                	jmp    82000776 <malloc_extend_top+0x291>
82000775:	90                   	nop
82000776:	c9                   	leave  
82000777:	c3                   	ret    

82000778 <_malloc_r>:
82000778:	55                   	push   %ebp
82000779:	89 e5                	mov    %esp,%ebp
8200077b:	53                   	push   %ebx
8200077c:	83 ec 44             	sub    $0x44,%esp
8200077f:	8b 45 0c             	mov    0xc(%ebp),%eax
82000782:	83 c0 0b             	add    $0xb,%eax
82000785:	83 f8 16             	cmp    $0x16,%eax
82000788:	76 0b                	jbe    82000795 <_malloc_r+0x1d>
8200078a:	8b 45 0c             	mov    0xc(%ebp),%eax
8200078d:	83 c0 0b             	add    $0xb,%eax
82000790:	83 e0 f8             	and    $0xfffffff8,%eax
82000793:	eb 05                	jmp    8200079a <_malloc_r+0x22>
82000795:	b8 10 00 00 00       	mov    $0x10,%eax
8200079a:	89 45 d0             	mov    %eax,-0x30(%ebp)
8200079d:	8b 45 d0             	mov    -0x30(%ebp),%eax
820007a0:	85 c0                	test   %eax,%eax
820007a2:	78 08                	js     820007ac <_malloc_r+0x34>
820007a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
820007a7:	3b 45 0c             	cmp    0xc(%ebp),%eax
820007aa:	73 13                	jae    820007bf <_malloc_r+0x47>
820007ac:	8b 45 08             	mov    0x8(%ebp),%eax
820007af:	c7 00 0c 00 00 00    	movl   $0xc,(%eax)
820007b5:	b8 00 00 00 00       	mov    $0x0,%eax
820007ba:	e9 d6 07 00 00       	jmp    82000f95 <_malloc_r+0x81d>
820007bf:	83 ec 0c             	sub    $0xc,%esp
820007c2:	ff 75 08             	push   0x8(%ebp)
820007c5:	e8 d0 07 00 00       	call   82000f9a <__malloc_lock>
820007ca:	83 c4 10             	add    $0x10,%esp
820007cd:	81 7d d0 f7 01 00 00 	cmpl   $0x1f7,-0x30(%ebp)
820007d4:	0f 87 b0 00 00 00    	ja     8200088a <_malloc_r+0x112>
820007da:	8b 45 d0             	mov    -0x30(%ebp),%eax
820007dd:	c1 e8 03             	shr    $0x3,%eax
820007e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
820007e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
820007e6:	83 c0 01             	add    $0x1,%eax
820007e9:	01 c0                	add    %eax,%eax
820007eb:	c1 e0 02             	shl    $0x2,%eax
820007ee:	05 20 1c 00 82       	add    $0x82001c20,%eax
820007f3:	83 e8 08             	sub    $0x8,%eax
820007f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
820007f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820007fc:	8b 40 0c             	mov    0xc(%eax),%eax
820007ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000802:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000805:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
82000808:	75 0d                	jne    82000817 <_malloc_r+0x9f>
8200080a:	83 45 d4 08          	addl   $0x8,-0x2c(%ebp)
8200080e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000811:	8b 40 0c             	mov    0xc(%eax),%eax
82000814:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000817:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200081a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
8200081d:	74 62                	je     82000881 <_malloc_r+0x109>
8200081f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000822:	8b 40 04             	mov    0x4(%eax),%eax
82000825:	83 e0 fc             	and    $0xfffffffc,%eax
82000828:	89 45 cc             	mov    %eax,-0x34(%ebp)
8200082b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200082e:	8b 40 0c             	mov    0xc(%eax),%eax
82000831:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000834:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000837:	8b 40 08             	mov    0x8(%eax),%eax
8200083a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8200083d:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000840:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000843:	89 50 0c             	mov    %edx,0xc(%eax)
82000846:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000849:	8b 55 dc             	mov    -0x24(%ebp),%edx
8200084c:	89 50 08             	mov    %edx,0x8(%eax)
8200084f:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000852:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000855:	01 d0                	add    %edx,%eax
82000857:	8b 50 04             	mov    0x4(%eax),%edx
8200085a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
8200085d:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000860:	01 c8                	add    %ecx,%eax
82000862:	83 ca 01             	or     $0x1,%edx
82000865:	89 50 04             	mov    %edx,0x4(%eax)
82000868:	83 ec 0c             	sub    $0xc,%esp
8200086b:	ff 75 08             	push   0x8(%ebp)
8200086e:	e8 2d 07 00 00       	call   82000fa0 <__malloc_unlock>
82000873:	83 c4 10             	add    $0x10,%esp
82000876:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000879:	83 c0 08             	add    $0x8,%eax
8200087c:	e9 14 07 00 00       	jmp    82000f95 <_malloc_r+0x81d>
82000881:	83 45 f0 02          	addl   $0x2,-0x10(%ebp)
82000885:	e9 46 01 00 00       	jmp    820009d0 <_malloc_r+0x258>
8200088a:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200088d:	c1 e8 09             	shr    $0x9,%eax
82000890:	85 c0                	test   %eax,%eax
82000892:	75 08                	jne    8200089c <_malloc_r+0x124>
82000894:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000897:	c1 e8 03             	shr    $0x3,%eax
8200089a:	eb 77                	jmp    82000913 <_malloc_r+0x19b>
8200089c:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200089f:	c1 e8 09             	shr    $0x9,%eax
820008a2:	83 f8 04             	cmp    $0x4,%eax
820008a5:	77 0b                	ja     820008b2 <_malloc_r+0x13a>
820008a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008aa:	c1 e8 06             	shr    $0x6,%eax
820008ad:	83 c0 38             	add    $0x38,%eax
820008b0:	eb 61                	jmp    82000913 <_malloc_r+0x19b>
820008b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008b5:	c1 e8 09             	shr    $0x9,%eax
820008b8:	83 f8 14             	cmp    $0x14,%eax
820008bb:	77 0b                	ja     820008c8 <_malloc_r+0x150>
820008bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008c0:	c1 e8 09             	shr    $0x9,%eax
820008c3:	83 c0 5b             	add    $0x5b,%eax
820008c6:	eb 4b                	jmp    82000913 <_malloc_r+0x19b>
820008c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008cb:	c1 e8 09             	shr    $0x9,%eax
820008ce:	83 f8 54             	cmp    $0x54,%eax
820008d1:	77 0b                	ja     820008de <_malloc_r+0x166>
820008d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008d6:	c1 e8 0c             	shr    $0xc,%eax
820008d9:	83 c0 6e             	add    $0x6e,%eax
820008dc:	eb 35                	jmp    82000913 <_malloc_r+0x19b>
820008de:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008e1:	c1 e8 09             	shr    $0x9,%eax
820008e4:	3d 54 01 00 00       	cmp    $0x154,%eax
820008e9:	77 0b                	ja     820008f6 <_malloc_r+0x17e>
820008eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008ee:	c1 e8 0f             	shr    $0xf,%eax
820008f1:	83 c0 77             	add    $0x77,%eax
820008f4:	eb 1d                	jmp    82000913 <_malloc_r+0x19b>
820008f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008f9:	c1 e8 09             	shr    $0x9,%eax
820008fc:	3d 54 05 00 00       	cmp    $0x554,%eax
82000901:	77 0b                	ja     8200090e <_malloc_r+0x196>
82000903:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000906:	c1 e8 12             	shr    $0x12,%eax
82000909:	83 c0 7c             	add    $0x7c,%eax
8200090c:	eb 05                	jmp    82000913 <_malloc_r+0x19b>
8200090e:	b8 7e 00 00 00       	mov    $0x7e,%eax
82000913:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000916:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000919:	83 c0 01             	add    $0x1,%eax
8200091c:	01 c0                	add    %eax,%eax
8200091e:	c1 e0 02             	shl    $0x2,%eax
82000921:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000926:	83 e8 08             	sub    $0x8,%eax
82000929:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200092c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200092f:	8b 40 0c             	mov    0xc(%eax),%eax
82000932:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000935:	e9 86 00 00 00       	jmp    820009c0 <_malloc_r+0x248>
8200093a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200093d:	8b 40 04             	mov    0x4(%eax),%eax
82000940:	83 e0 fc             	and    $0xfffffffc,%eax
82000943:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000946:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000949:	2b 45 d0             	sub    -0x30(%ebp),%eax
8200094c:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200094f:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000953:	7e 06                	jle    8200095b <_malloc_r+0x1e3>
82000955:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
82000959:	eb 71                	jmp    820009cc <_malloc_r+0x254>
8200095b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
8200095f:	78 56                	js     820009b7 <_malloc_r+0x23f>
82000961:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000964:	8b 40 0c             	mov    0xc(%eax),%eax
82000967:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200096a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200096d:	8b 40 08             	mov    0x8(%eax),%eax
82000970:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000973:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000976:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000979:	89 50 0c             	mov    %edx,0xc(%eax)
8200097c:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200097f:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000982:	89 50 08             	mov    %edx,0x8(%eax)
82000985:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000988:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200098b:	01 d0                	add    %edx,%eax
8200098d:	8b 50 04             	mov    0x4(%eax),%edx
82000990:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000993:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000996:	01 c8                	add    %ecx,%eax
82000998:	83 ca 01             	or     $0x1,%edx
8200099b:	89 50 04             	mov    %edx,0x4(%eax)
8200099e:	83 ec 0c             	sub    $0xc,%esp
820009a1:	ff 75 08             	push   0x8(%ebp)
820009a4:	e8 f7 05 00 00       	call   82000fa0 <__malloc_unlock>
820009a9:	83 c4 10             	add    $0x10,%esp
820009ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009af:	83 c0 08             	add    $0x8,%eax
820009b2:	e9 de 05 00 00       	jmp    82000f95 <_malloc_r+0x81d>
820009b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009ba:	8b 40 0c             	mov    0xc(%eax),%eax
820009bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009c3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
820009c6:	0f 85 6e ff ff ff    	jne    8200093a <_malloc_r+0x1c2>
820009cc:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
820009d0:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
820009d5:	8b 40 08             	mov    0x8(%eax),%eax
820009d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009db:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
820009e0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
820009e3:	0f 84 9c 02 00 00    	je     82000c85 <_malloc_r+0x50d>
820009e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009ec:	8b 40 04             	mov    0x4(%eax),%eax
820009ef:	83 e0 fc             	and    $0xfffffffc,%eax
820009f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
820009f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
820009f8:	2b 45 d0             	sub    -0x30(%ebp),%eax
820009fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
820009fe:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000a02:	7e 7a                	jle    82000a7e <_malloc_r+0x306>
82000a04:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000a07:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000a0a:	01 d0                	add    %edx,%eax
82000a0c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000a0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000a12:	83 c8 01             	or     $0x1,%eax
82000a15:	89 c2                	mov    %eax,%edx
82000a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a1a:	89 50 04             	mov    %edx,0x4(%eax)
82000a1d:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000a22:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000a25:	89 50 0c             	mov    %edx,0xc(%eax)
82000a28:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a2d:	8b 40 0c             	mov    0xc(%eax),%eax
82000a30:	89 42 08             	mov    %eax,0x8(%edx)
82000a33:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a3b:	89 50 0c             	mov    %edx,0xc(%eax)
82000a3e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a41:	8b 50 0c             	mov    0xc(%eax),%edx
82000a44:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a47:	89 50 08             	mov    %edx,0x8(%eax)
82000a4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a4d:	83 c8 01             	or     $0x1,%eax
82000a50:	89 c2                	mov    %eax,%edx
82000a52:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a55:	89 50 04             	mov    %edx,0x4(%eax)
82000a58:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000a5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a5e:	01 c2                	add    %eax,%edx
82000a60:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a63:	89 02                	mov    %eax,(%edx)
82000a65:	83 ec 0c             	sub    $0xc,%esp
82000a68:	ff 75 08             	push   0x8(%ebp)
82000a6b:	e8 30 05 00 00       	call   82000fa0 <__malloc_unlock>
82000a70:	83 c4 10             	add    $0x10,%esp
82000a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a76:	83 c0 08             	add    $0x8,%eax
82000a79:	e9 17 05 00 00       	jmp    82000f95 <_malloc_r+0x81d>
82000a7e:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000a83:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a88:	89 50 0c             	mov    %edx,0xc(%eax)
82000a8b:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a90:	8b 40 0c             	mov    0xc(%eax),%eax
82000a93:	89 42 08             	mov    %eax,0x8(%edx)
82000a96:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000a9a:	78 32                	js     82000ace <_malloc_r+0x356>
82000a9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000a9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000aa2:	01 d0                	add    %edx,%eax
82000aa4:	8b 50 04             	mov    0x4(%eax),%edx
82000aa7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000aaa:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000aad:	01 c8                	add    %ecx,%eax
82000aaf:	83 ca 01             	or     $0x1,%edx
82000ab2:	89 50 04             	mov    %edx,0x4(%eax)
82000ab5:	83 ec 0c             	sub    $0xc,%esp
82000ab8:	ff 75 08             	push   0x8(%ebp)
82000abb:	e8 e0 04 00 00       	call   82000fa0 <__malloc_unlock>
82000ac0:	83 c4 10             	add    $0x10,%esp
82000ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000ac6:	83 c0 08             	add    $0x8,%eax
82000ac9:	e9 c7 04 00 00       	jmp    82000f95 <_malloc_r+0x81d>
82000ace:	81 7d cc ff 01 00 00 	cmpl   $0x1ff,-0x34(%ebp)
82000ad5:	77 7f                	ja     82000b56 <_malloc_r+0x3de>
82000ad7:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ada:	c1 e8 03             	shr    $0x3,%eax
82000add:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000ae0:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ae5:	8b 58 04             	mov    0x4(%eax),%ebx
82000ae8:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000aeb:	8d 50 03             	lea    0x3(%eax),%edx
82000aee:	85 c0                	test   %eax,%eax
82000af0:	0f 48 c2             	cmovs  %edx,%eax
82000af3:	c1 f8 02             	sar    $0x2,%eax
82000af6:	ba 01 00 00 00       	mov    $0x1,%edx
82000afb:	89 c1                	mov    %eax,%ecx
82000afd:	d3 e2                	shl    %cl,%edx
82000aff:	89 d0                	mov    %edx,%eax
82000b01:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000b06:	09 d8                	or     %ebx,%eax
82000b08:	89 42 04             	mov    %eax,0x4(%edx)
82000b0b:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000b0e:	83 c0 01             	add    $0x1,%eax
82000b11:	01 c0                	add    %eax,%eax
82000b13:	c1 e0 02             	shl    $0x2,%eax
82000b16:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000b1b:	83 e8 08             	sub    $0x8,%eax
82000b1e:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000b21:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b24:	8b 40 08             	mov    0x8(%eax),%eax
82000b27:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b2d:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000b30:	89 50 0c             	mov    %edx,0xc(%eax)
82000b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b36:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000b39:	89 50 08             	mov    %edx,0x8(%eax)
82000b3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000b42:	89 50 08             	mov    %edx,0x8(%eax)
82000b45:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b48:	8b 50 08             	mov    0x8(%eax),%edx
82000b4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000b4e:	89 50 0c             	mov    %edx,0xc(%eax)
82000b51:	e9 2f 01 00 00       	jmp    82000c85 <_malloc_r+0x50d>
82000b56:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b59:	c1 e8 09             	shr    $0x9,%eax
82000b5c:	85 c0                	test   %eax,%eax
82000b5e:	75 08                	jne    82000b68 <_malloc_r+0x3f0>
82000b60:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b63:	c1 e8 03             	shr    $0x3,%eax
82000b66:	eb 77                	jmp    82000bdf <_malloc_r+0x467>
82000b68:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b6b:	c1 e8 09             	shr    $0x9,%eax
82000b6e:	83 f8 04             	cmp    $0x4,%eax
82000b71:	77 0b                	ja     82000b7e <_malloc_r+0x406>
82000b73:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b76:	c1 e8 06             	shr    $0x6,%eax
82000b79:	83 c0 38             	add    $0x38,%eax
82000b7c:	eb 61                	jmp    82000bdf <_malloc_r+0x467>
82000b7e:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b81:	c1 e8 09             	shr    $0x9,%eax
82000b84:	83 f8 14             	cmp    $0x14,%eax
82000b87:	77 0b                	ja     82000b94 <_malloc_r+0x41c>
82000b89:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b8c:	c1 e8 09             	shr    $0x9,%eax
82000b8f:	83 c0 5b             	add    $0x5b,%eax
82000b92:	eb 4b                	jmp    82000bdf <_malloc_r+0x467>
82000b94:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b97:	c1 e8 09             	shr    $0x9,%eax
82000b9a:	83 f8 54             	cmp    $0x54,%eax
82000b9d:	77 0b                	ja     82000baa <_malloc_r+0x432>
82000b9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ba2:	c1 e8 0c             	shr    $0xc,%eax
82000ba5:	83 c0 6e             	add    $0x6e,%eax
82000ba8:	eb 35                	jmp    82000bdf <_malloc_r+0x467>
82000baa:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bad:	c1 e8 09             	shr    $0x9,%eax
82000bb0:	3d 54 01 00 00       	cmp    $0x154,%eax
82000bb5:	77 0b                	ja     82000bc2 <_malloc_r+0x44a>
82000bb7:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bba:	c1 e8 0f             	shr    $0xf,%eax
82000bbd:	83 c0 77             	add    $0x77,%eax
82000bc0:	eb 1d                	jmp    82000bdf <_malloc_r+0x467>
82000bc2:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bc5:	c1 e8 09             	shr    $0x9,%eax
82000bc8:	3d 54 05 00 00       	cmp    $0x554,%eax
82000bcd:	77 0b                	ja     82000bda <_malloc_r+0x462>
82000bcf:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bd2:	c1 e8 12             	shr    $0x12,%eax
82000bd5:	83 c0 7c             	add    $0x7c,%eax
82000bd8:	eb 05                	jmp    82000bdf <_malloc_r+0x467>
82000bda:	b8 7e 00 00 00       	mov    $0x7e,%eax
82000bdf:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000be2:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000be5:	83 c0 01             	add    $0x1,%eax
82000be8:	01 c0                	add    %eax,%eax
82000bea:	c1 e0 02             	shl    $0x2,%eax
82000bed:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000bf2:	83 e8 08             	sub    $0x8,%eax
82000bf5:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000bf8:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000bfb:	8b 40 08             	mov    0x8(%eax),%eax
82000bfe:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000c01:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c04:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000c07:	75 36                	jne    82000c3f <_malloc_r+0x4c7>
82000c09:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000c0e:	8b 58 04             	mov    0x4(%eax),%ebx
82000c11:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000c14:	8d 50 03             	lea    0x3(%eax),%edx
82000c17:	85 c0                	test   %eax,%eax
82000c19:	0f 48 c2             	cmovs  %edx,%eax
82000c1c:	c1 f8 02             	sar    $0x2,%eax
82000c1f:	ba 01 00 00 00       	mov    $0x1,%edx
82000c24:	89 c1                	mov    %eax,%ecx
82000c26:	d3 e2                	shl    %cl,%edx
82000c28:	89 d0                	mov    %edx,%eax
82000c2a:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000c2f:	09 d8                	or     %ebx,%eax
82000c31:	89 42 04             	mov    %eax,0x4(%edx)
82000c34:	eb 28                	jmp    82000c5e <_malloc_r+0x4e6>
82000c36:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c39:	8b 40 08             	mov    0x8(%eax),%eax
82000c3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000c3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c42:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000c45:	74 0e                	je     82000c55 <_malloc_r+0x4dd>
82000c47:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c4a:	8b 40 04             	mov    0x4(%eax),%eax
82000c4d:	83 e0 fc             	and    $0xfffffffc,%eax
82000c50:	39 45 cc             	cmp    %eax,-0x34(%ebp)
82000c53:	72 e1                	jb     82000c36 <_malloc_r+0x4be>
82000c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c58:	8b 40 0c             	mov    0xc(%eax),%eax
82000c5b:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c61:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000c64:	89 50 0c             	mov    %edx,0xc(%eax)
82000c67:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c6a:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000c6d:	89 50 08             	mov    %edx,0x8(%eax)
82000c70:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c73:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000c76:	89 50 08             	mov    %edx,0x8(%eax)
82000c79:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c7c:	8b 50 08             	mov    0x8(%eax),%edx
82000c7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c82:	89 50 0c             	mov    %edx,0xc(%eax)
82000c85:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000c88:	8d 50 03             	lea    0x3(%eax),%edx
82000c8b:	85 c0                	test   %eax,%eax
82000c8d:	0f 48 c2             	cmovs  %edx,%eax
82000c90:	c1 f8 02             	sar    $0x2,%eax
82000c93:	ba 01 00 00 00       	mov    $0x1,%edx
82000c98:	89 c1                	mov    %eax,%ecx
82000c9a:	d3 e2                	shl    %cl,%edx
82000c9c:	89 d0                	mov    %edx,%eax
82000c9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000ca1:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ca6:	8b 40 04             	mov    0x4(%eax),%eax
82000ca9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000cac:	0f 87 13 02 00 00    	ja     82000ec5 <_malloc_r+0x74d>
82000cb2:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000cb7:	8b 40 04             	mov    0x4(%eax),%eax
82000cba:	23 45 e4             	and    -0x1c(%ebp),%eax
82000cbd:	85 c0                	test   %eax,%eax
82000cbf:	75 27                	jne    82000ce8 <_malloc_r+0x570>
82000cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000cc4:	83 e0 fc             	and    $0xfffffffc,%eax
82000cc7:	83 c0 04             	add    $0x4,%eax
82000cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000ccd:	d1 65 e4             	shll   -0x1c(%ebp)
82000cd0:	eb 07                	jmp    82000cd9 <_malloc_r+0x561>
82000cd2:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000cd6:	d1 65 e4             	shll   -0x1c(%ebp)
82000cd9:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000cde:	8b 40 04             	mov    0x4(%eax),%eax
82000ce1:	23 45 e4             	and    -0x1c(%ebp),%eax
82000ce4:	85 c0                	test   %eax,%eax
82000ce6:	74 ea                	je     82000cd2 <_malloc_r+0x55a>
82000ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000ceb:	89 45 e0             	mov    %eax,-0x20(%ebp)
82000cee:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000cf1:	83 c0 01             	add    $0x1,%eax
82000cf4:	01 c0                	add    %eax,%eax
82000cf6:	c1 e0 02             	shl    $0x2,%eax
82000cf9:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000cfe:	83 e8 08             	sub    $0x8,%eax
82000d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000d07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82000d0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000d0d:	8b 40 0c             	mov    0xc(%eax),%eax
82000d10:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000d13:	e9 22 01 00 00       	jmp    82000e3a <_malloc_r+0x6c2>
82000d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d1b:	8b 40 04             	mov    0x4(%eax),%eax
82000d1e:	83 e0 fc             	and    $0xfffffffc,%eax
82000d21:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000d24:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000d27:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000d2a:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000d2d:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000d31:	0f 8e 9e 00 00 00    	jle    82000dd5 <_malloc_r+0x65d>
82000d37:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000d3a:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d3d:	01 d0                	add    %edx,%eax
82000d3f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000d42:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d45:	83 c8 01             	or     $0x1,%eax
82000d48:	89 c2                	mov    %eax,%edx
82000d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d4d:	89 50 04             	mov    %edx,0x4(%eax)
82000d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d53:	8b 40 0c             	mov    0xc(%eax),%eax
82000d56:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d5c:	8b 40 08             	mov    0x8(%eax),%eax
82000d5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000d62:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000d65:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000d68:	89 50 0c             	mov    %edx,0xc(%eax)
82000d6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000d6e:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000d71:	89 50 08             	mov    %edx,0x8(%eax)
82000d74:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000d79:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000d7c:	89 50 0c             	mov    %edx,0xc(%eax)
82000d7f:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000d84:	8b 40 0c             	mov    0xc(%eax),%eax
82000d87:	89 42 08             	mov    %eax,0x8(%edx)
82000d8a:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000d8f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d92:	89 50 0c             	mov    %edx,0xc(%eax)
82000d95:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d98:	8b 50 0c             	mov    0xc(%eax),%edx
82000d9b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d9e:	89 50 08             	mov    %edx,0x8(%eax)
82000da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000da4:	83 c8 01             	or     $0x1,%eax
82000da7:	89 c2                	mov    %eax,%edx
82000da9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000dac:	89 50 04             	mov    %edx,0x4(%eax)
82000daf:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000db2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000db5:	01 c2                	add    %eax,%edx
82000db7:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000dba:	89 02                	mov    %eax,(%edx)
82000dbc:	83 ec 0c             	sub    $0xc,%esp
82000dbf:	ff 75 08             	push   0x8(%ebp)
82000dc2:	e8 d9 01 00 00       	call   82000fa0 <__malloc_unlock>
82000dc7:	83 c4 10             	add    $0x10,%esp
82000dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000dcd:	83 c0 08             	add    $0x8,%eax
82000dd0:	e9 c0 01 00 00       	jmp    82000f95 <_malloc_r+0x81d>
82000dd5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000dd9:	78 56                	js     82000e31 <_malloc_r+0x6b9>
82000ddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000dde:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000de1:	01 d0                	add    %edx,%eax
82000de3:	8b 50 04             	mov    0x4(%eax),%edx
82000de6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000de9:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000dec:	01 c8                	add    %ecx,%eax
82000dee:	83 ca 01             	or     $0x1,%edx
82000df1:	89 50 04             	mov    %edx,0x4(%eax)
82000df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000df7:	8b 40 0c             	mov    0xc(%eax),%eax
82000dfa:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e00:	8b 40 08             	mov    0x8(%eax),%eax
82000e03:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000e06:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000e09:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000e0c:	89 50 0c             	mov    %edx,0xc(%eax)
82000e0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000e12:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000e15:	89 50 08             	mov    %edx,0x8(%eax)
82000e18:	83 ec 0c             	sub    $0xc,%esp
82000e1b:	ff 75 08             	push   0x8(%ebp)
82000e1e:	e8 7d 01 00 00       	call   82000fa0 <__malloc_unlock>
82000e23:	83 c4 10             	add    $0x10,%esp
82000e26:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e29:	83 c0 08             	add    $0x8,%eax
82000e2c:	e9 64 01 00 00       	jmp    82000f95 <_malloc_r+0x81d>
82000e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e34:	8b 40 0c             	mov    0xc(%eax),%eax
82000e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82000e40:	0f 85 d2 fe ff ff    	jne    82000d18 <_malloc_r+0x5a0>
82000e46:	83 45 ec 08          	addl   $0x8,-0x14(%ebp)
82000e4a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
82000e4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000e51:	83 e0 03             	and    $0x3,%eax
82000e54:	85 c0                	test   %eax,%eax
82000e56:	0f 85 ae fe ff ff    	jne    82000d0a <_malloc_r+0x592>
82000e5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000e5f:	83 e0 03             	and    $0x3,%eax
82000e62:	85 c0                	test   %eax,%eax
82000e64:	75 19                	jne    82000e7f <_malloc_r+0x707>
82000e66:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000e6b:	8b 48 04             	mov    0x4(%eax),%ecx
82000e6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
82000e71:	f7 d0                	not    %eax
82000e73:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000e78:	21 c8                	and    %ecx,%eax
82000e7a:	89 42 04             	mov    %eax,0x4(%edx)
82000e7d:	eb 13                	jmp    82000e92 <_malloc_r+0x71a>
82000e7f:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
82000e83:	83 6d d4 08          	subl   $0x8,-0x2c(%ebp)
82000e87:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000e8a:	8b 40 08             	mov    0x8(%eax),%eax
82000e8d:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
82000e90:	74 ca                	je     82000e5c <_malloc_r+0x6e4>
82000e92:	d1 65 e4             	shll   -0x1c(%ebp)
82000e95:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000e9a:	8b 40 04             	mov    0x4(%eax),%eax
82000e9d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000ea0:	77 23                	ja     82000ec5 <_malloc_r+0x74d>
82000ea2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82000ea6:	74 1d                	je     82000ec5 <_malloc_r+0x74d>
82000ea8:	eb 07                	jmp    82000eb1 <_malloc_r+0x739>
82000eaa:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000eae:	d1 65 e4             	shll   -0x1c(%ebp)
82000eb1:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000eb6:	8b 40 04             	mov    0x4(%eax),%eax
82000eb9:	23 45 e4             	and    -0x1c(%ebp),%eax
82000ebc:	85 c0                	test   %eax,%eax
82000ebe:	74 ea                	je     82000eaa <_malloc_r+0x732>
82000ec0:	e9 23 fe ff ff       	jmp    82000ce8 <_malloc_r+0x570>
82000ec5:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000eca:	8b 40 08             	mov    0x8(%eax),%eax
82000ecd:	8b 40 04             	mov    0x4(%eax),%eax
82000ed0:	83 e0 fc             	and    $0xfffffffc,%eax
82000ed3:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000ed6:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000ed9:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ede:	8b 40 08             	mov    0x8(%eax),%eax
82000ee1:	8b 40 04             	mov    0x4(%eax),%eax
82000ee4:	83 e0 fc             	and    $0xfffffffc,%eax
82000ee7:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000eea:	77 06                	ja     82000ef2 <_malloc_r+0x77a>
82000eec:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000ef0:	7f 53                	jg     82000f45 <_malloc_r+0x7cd>
82000ef2:	83 ec 08             	sub    $0x8,%esp
82000ef5:	ff 75 d0             	push   -0x30(%ebp)
82000ef8:	ff 75 08             	push   0x8(%ebp)
82000efb:	e8 e5 f5 ff ff       	call   820004e5 <malloc_extend_top>
82000f00:	83 c4 10             	add    $0x10,%esp
82000f03:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f08:	8b 40 08             	mov    0x8(%eax),%eax
82000f0b:	8b 40 04             	mov    0x4(%eax),%eax
82000f0e:	83 e0 fc             	and    $0xfffffffc,%eax
82000f11:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000f14:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000f17:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f1c:	8b 40 08             	mov    0x8(%eax),%eax
82000f1f:	8b 40 04             	mov    0x4(%eax),%eax
82000f22:	83 e0 fc             	and    $0xfffffffc,%eax
82000f25:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000f28:	77 06                	ja     82000f30 <_malloc_r+0x7b8>
82000f2a:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000f2e:	7f 15                	jg     82000f45 <_malloc_r+0x7cd>
82000f30:	83 ec 0c             	sub    $0xc,%esp
82000f33:	ff 75 08             	push   0x8(%ebp)
82000f36:	e8 65 00 00 00       	call   82000fa0 <__malloc_unlock>
82000f3b:	83 c4 10             	add    $0x10,%esp
82000f3e:	b8 00 00 00 00       	mov    $0x0,%eax
82000f43:	eb 50                	jmp    82000f95 <_malloc_r+0x81d>
82000f45:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f4a:	8b 40 08             	mov    0x8(%eax),%eax
82000f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000f50:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f53:	83 c8 01             	or     $0x1,%eax
82000f56:	89 c2                	mov    %eax,%edx
82000f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f5b:	89 50 04             	mov    %edx,0x4(%eax)
82000f5e:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000f63:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000f66:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f69:	01 c8                	add    %ecx,%eax
82000f6b:	89 42 08             	mov    %eax,0x8(%edx)
82000f6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000f71:	83 c8 01             	or     $0x1,%eax
82000f74:	89 c2                	mov    %eax,%edx
82000f76:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f7b:	8b 40 08             	mov    0x8(%eax),%eax
82000f7e:	89 50 04             	mov    %edx,0x4(%eax)
82000f81:	83 ec 0c             	sub    $0xc,%esp
82000f84:	ff 75 08             	push   0x8(%ebp)
82000f87:	e8 14 00 00 00       	call   82000fa0 <__malloc_unlock>
82000f8c:	83 c4 10             	add    $0x10,%esp
82000f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f92:	83 c0 08             	add    $0x8,%eax
82000f95:	8b 5d fc             	mov    -0x4(%ebp),%ebx
82000f98:	c9                   	leave  
82000f99:	c3                   	ret    

82000f9a <__malloc_lock>:
82000f9a:	55                   	push   %ebp
82000f9b:	89 e5                	mov    %esp,%ebp
82000f9d:	90                   	nop
82000f9e:	5d                   	pop    %ebp
82000f9f:	c3                   	ret    

82000fa0 <__malloc_unlock>:
82000fa0:	55                   	push   %ebp
82000fa1:	89 e5                	mov    %esp,%ebp
82000fa3:	90                   	nop
82000fa4:	5d                   	pop    %ebp
82000fa5:	c3                   	ret    

82000fa6 <_sbrk_r>:
82000fa6:	55                   	push   %ebp
82000fa7:	89 e5                	mov    %esp,%ebp
82000fa9:	83 ec 18             	sub    $0x18,%esp
82000fac:	c7 05 90 20 00 82 00 	movl   $0x0,0x82002090
82000fb3:	00 00 00 
82000fb6:	83 ec 0c             	sub    $0xc,%esp
82000fb9:	ff 75 0c             	push   0xc(%ebp)
82000fbc:	e8 c0 f2 ff ff       	call   82000281 <sbrk>
82000fc1:	83 c4 10             	add    $0x10,%esp
82000fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000fc7:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000fcb:	75 14                	jne    82000fe1 <_sbrk_r+0x3b>
82000fcd:	a1 90 20 00 82       	mov    0x82002090,%eax
82000fd2:	85 c0                	test   %eax,%eax
82000fd4:	74 0b                	je     82000fe1 <_sbrk_r+0x3b>
82000fd6:	8b 15 90 20 00 82    	mov    0x82002090,%edx
82000fdc:	8b 45 08             	mov    0x8(%ebp),%eax
82000fdf:	89 10                	mov    %edx,(%eax)
82000fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000fe4:	c9                   	leave  
82000fe5:	c3                   	ret    

82000fe6 <__call_exitprocs>:
82000fe6:	55                   	push   %ebp
82000fe7:	89 e5                	mov    %esp,%ebp
82000fe9:	57                   	push   %edi
82000fea:	56                   	push   %esi
82000feb:	53                   	push   %ebx
82000fec:	83 ec 1c             	sub    $0x1c,%esp
82000fef:	a1 d0 17 00 82       	mov    0x820017d0,%eax
82000ff4:	8b 98 48 01 00 00    	mov    0x148(%eax),%ebx
82000ffa:	a1 d0 17 00 82       	mov    0x820017d0,%eax
82000fff:	05 48 01 00 00       	add    $0x148,%eax
82001004:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82001007:	90                   	nop
82001008:	85 db                	test   %ebx,%ebx
8200100a:	0f 84 e1 00 00 00    	je     820010f1 <__call_exitprocs+0x10b>
82001010:	8d bb 88 00 00 00    	lea    0x88(%ebx),%edi
82001016:	8b 43 04             	mov    0x4(%ebx),%eax
82001019:	8d 70 ff             	lea    -0x1(%eax),%esi
8200101c:	e9 c6 00 00 00       	jmp    820010e7 <__call_exitprocs+0x101>
82001021:	b8 01 00 00 00       	mov    $0x1,%eax
82001026:	89 f1                	mov    %esi,%ecx
82001028:	d3 e0                	shl    %cl,%eax
8200102a:	89 45 e0             	mov    %eax,-0x20(%ebp)
8200102d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
82001031:	74 17                	je     8200104a <__call_exitprocs+0x64>
82001033:	85 ff                	test   %edi,%edi
82001035:	0f 84 a5 00 00 00    	je     820010e0 <__call_exitprocs+0xfa>
8200103b:	8d 46 20             	lea    0x20(%esi),%eax
8200103e:	8b 04 87             	mov    (%edi,%eax,4),%eax
82001041:	39 45 0c             	cmp    %eax,0xc(%ebp)
82001044:	0f 85 96 00 00 00    	jne    820010e0 <__call_exitprocs+0xfa>
8200104a:	8b 44 b3 08          	mov    0x8(%ebx,%esi,4),%eax
8200104e:	89 45 dc             	mov    %eax,-0x24(%ebp)
82001051:	8b 43 04             	mov    0x4(%ebx),%eax
82001054:	83 e8 01             	sub    $0x1,%eax
82001057:	39 c6                	cmp    %eax,%esi
82001059:	75 0b                	jne    82001066 <__call_exitprocs+0x80>
8200105b:	8b 43 04             	mov    0x4(%ebx),%eax
8200105e:	83 e8 01             	sub    $0x1,%eax
82001061:	89 43 04             	mov    %eax,0x4(%ebx)
82001064:	eb 08                	jmp    8200106e <__call_exitprocs+0x88>
82001066:	c7 44 b3 08 00 00 00 	movl   $0x0,0x8(%ebx,%esi,4)
8200106d:	00 
8200106e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
82001072:	74 6f                	je     820010e3 <__call_exitprocs+0xfd>
82001074:	8b 43 04             	mov    0x4(%ebx),%eax
82001077:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200107a:	85 ff                	test   %edi,%edi
8200107c:	74 0f                	je     8200108d <__call_exitprocs+0xa7>
8200107e:	8b 97 00 01 00 00    	mov    0x100(%edi),%edx
82001084:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001087:	21 d0                	and    %edx,%eax
82001089:	85 c0                	test   %eax,%eax
8200108b:	75 07                	jne    82001094 <__call_exitprocs+0xae>
8200108d:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001090:	ff d0                	call   *%eax
82001092:	eb 32                	jmp    820010c6 <__call_exitprocs+0xe0>
82001094:	8b 97 04 01 00 00    	mov    0x104(%edi),%edx
8200109a:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200109d:	21 d0                	and    %edx,%eax
8200109f:	85 c0                	test   %eax,%eax
820010a1:	75 14                	jne    820010b7 <__call_exitprocs+0xd1>
820010a3:	8b 04 b7             	mov    (%edi,%esi,4),%eax
820010a6:	83 ec 08             	sub    $0x8,%esp
820010a9:	50                   	push   %eax
820010aa:	ff 75 08             	push   0x8(%ebp)
820010ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
820010b0:	ff d0                	call   *%eax
820010b2:	83 c4 10             	add    $0x10,%esp
820010b5:	eb 0f                	jmp    820010c6 <__call_exitprocs+0xe0>
820010b7:	8b 04 b7             	mov    (%edi,%esi,4),%eax
820010ba:	83 ec 0c             	sub    $0xc,%esp
820010bd:	50                   	push   %eax
820010be:	8b 45 dc             	mov    -0x24(%ebp),%eax
820010c1:	ff d0                	call   *%eax
820010c3:	83 c4 10             	add    $0x10,%esp
820010c6:	8b 43 04             	mov    0x4(%ebx),%eax
820010c9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
820010cc:	0f 85 1d ff ff ff    	jne    82000fef <__call_exitprocs+0x9>
820010d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
820010d5:	8b 00                	mov    (%eax),%eax
820010d7:	39 c3                	cmp    %eax,%ebx
820010d9:	74 09                	je     820010e4 <__call_exitprocs+0xfe>
820010db:	e9 0f ff ff ff       	jmp    82000fef <__call_exitprocs+0x9>
820010e0:	90                   	nop
820010e1:	eb 01                	jmp    820010e4 <__call_exitprocs+0xfe>
820010e3:	90                   	nop
820010e4:	83 ee 01             	sub    $0x1,%esi
820010e7:	85 f6                	test   %esi,%esi
820010e9:	0f 89 32 ff ff ff    	jns    82001021 <__call_exitprocs+0x3b>
820010ef:	eb 01                	jmp    820010f2 <__call_exitprocs+0x10c>
820010f1:	90                   	nop
820010f2:	90                   	nop
820010f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
820010f6:	5b                   	pop    %ebx
820010f7:	5e                   	pop    %esi
820010f8:	5f                   	pop    %edi
820010f9:	5d                   	pop    %ebp
820010fa:	c3                   	ret    

820010fb <_free_r>:
820010fb:	55                   	push   %ebp
820010fc:	89 e5                	mov    %esp,%ebp
820010fe:	53                   	push   %ebx
820010ff:	83 ec 34             	sub    $0x34,%esp
82001102:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
82001106:	0f 84 c4 03 00 00    	je     820014d0 <_free_r+0x3d5>
8200110c:	83 ec 0c             	sub    $0xc,%esp
8200110f:	ff 75 08             	push   0x8(%ebp)
82001112:	e8 83 fe ff ff       	call   82000f9a <__malloc_lock>
82001117:	83 c4 10             	add    $0x10,%esp
8200111a:	8b 45 0c             	mov    0xc(%ebp),%eax
8200111d:	83 e8 08             	sub    $0x8,%eax
82001120:	89 45 f4             	mov    %eax,-0xc(%ebp)
82001123:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001126:	8b 40 04             	mov    0x4(%eax),%eax
82001129:	89 45 e0             	mov    %eax,-0x20(%ebp)
8200112c:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200112f:	83 e0 fe             	and    $0xfffffffe,%eax
82001132:	89 45 f0             	mov    %eax,-0x10(%ebp)
82001135:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001138:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200113b:	01 d0                	add    %edx,%eax
8200113d:	89 45 dc             	mov    %eax,-0x24(%ebp)
82001140:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001143:	8b 40 04             	mov    0x4(%eax),%eax
82001146:	83 e0 fc             	and    $0xfffffffc,%eax
82001149:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200114c:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001151:	8b 40 08             	mov    0x8(%eax),%eax
82001154:	39 45 dc             	cmp    %eax,-0x24(%ebp)
82001157:	0f 85 94 00 00 00    	jne    820011f1 <_free_r+0xf6>
8200115d:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001160:	01 45 f0             	add    %eax,-0x10(%ebp)
82001163:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001166:	83 e0 01             	and    $0x1,%eax
82001169:	85 c0                	test   %eax,%eax
8200116b:	75 3a                	jne    820011a7 <_free_r+0xac>
8200116d:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001170:	8b 00                	mov    (%eax),%eax
82001172:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82001175:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001178:	f7 d8                	neg    %eax
8200117a:	01 45 f4             	add    %eax,-0xc(%ebp)
8200117d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001180:	01 45 f0             	add    %eax,-0x10(%ebp)
82001183:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001186:	8b 40 0c             	mov    0xc(%eax),%eax
82001189:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200118c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200118f:	8b 40 08             	mov    0x8(%eax),%eax
82001192:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001195:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001198:	8b 55 ec             	mov    -0x14(%ebp),%edx
8200119b:	89 50 0c             	mov    %edx,0xc(%eax)
8200119e:	8b 45 ec             	mov    -0x14(%ebp),%eax
820011a1:	8b 55 e8             	mov    -0x18(%ebp),%edx
820011a4:	89 50 08             	mov    %edx,0x8(%eax)
820011a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820011aa:	83 c8 01             	or     $0x1,%eax
820011ad:	89 c2                	mov    %eax,%edx
820011af:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011b2:	89 50 04             	mov    %edx,0x4(%eax)
820011b5:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
820011ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011bd:	89 42 08             	mov    %eax,0x8(%edx)
820011c0:	a1 28 20 00 82       	mov    0x82002028,%eax
820011c5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
820011c8:	72 14                	jb     820011de <_free_r+0xe3>
820011ca:	a1 40 20 00 82       	mov    0x82002040,%eax
820011cf:	83 ec 08             	sub    $0x8,%esp
820011d2:	50                   	push   %eax
820011d3:	ff 75 08             	push   0x8(%ebp)
820011d6:	e8 fb 02 00 00       	call   820014d6 <_malloc_trim_r>
820011db:	83 c4 10             	add    $0x10,%esp
820011de:	83 ec 0c             	sub    $0xc,%esp
820011e1:	ff 75 08             	push   0x8(%ebp)
820011e4:	e8 b7 fd ff ff       	call   82000fa0 <__malloc_unlock>
820011e9:	83 c4 10             	add    $0x10,%esp
820011ec:	e9 e0 02 00 00       	jmp    820014d1 <_free_r+0x3d6>
820011f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
820011f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
820011f7:	89 50 04             	mov    %edx,0x4(%eax)
820011fa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
82001201:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001204:	83 e0 01             	and    $0x1,%eax
82001207:	85 c0                	test   %eax,%eax
82001209:	75 52                	jne    8200125d <_free_r+0x162>
8200120b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200120e:	8b 00                	mov    (%eax),%eax
82001210:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82001213:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001216:	f7 d8                	neg    %eax
82001218:	01 45 f4             	add    %eax,-0xc(%ebp)
8200121b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200121e:	01 45 f0             	add    %eax,-0x10(%ebp)
82001221:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001224:	8b 40 08             	mov    0x8(%eax),%eax
82001227:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
8200122c:	39 d0                	cmp    %edx,%eax
8200122e:	75 09                	jne    82001239 <_free_r+0x13e>
82001230:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82001237:	eb 24                	jmp    8200125d <_free_r+0x162>
82001239:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200123c:	8b 40 0c             	mov    0xc(%eax),%eax
8200123f:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001242:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001245:	8b 40 08             	mov    0x8(%eax),%eax
82001248:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200124b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200124e:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001251:	89 50 0c             	mov    %edx,0xc(%eax)
82001254:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001257:	8b 55 e8             	mov    -0x18(%ebp),%edx
8200125a:	89 50 08             	mov    %edx,0x8(%eax)
8200125d:	8b 55 dc             	mov    -0x24(%ebp),%edx
82001260:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001263:	01 d0                	add    %edx,%eax
82001265:	8b 40 04             	mov    0x4(%eax),%eax
82001268:	83 e0 01             	and    $0x1,%eax
8200126b:	85 c0                	test   %eax,%eax
8200126d:	75 75                	jne    820012e4 <_free_r+0x1e9>
8200126f:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001272:	01 45 f0             	add    %eax,-0x10(%ebp)
82001275:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82001279:	75 45                	jne    820012c0 <_free_r+0x1c5>
8200127b:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200127e:	8b 40 08             	mov    0x8(%eax),%eax
82001281:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82001286:	39 d0                	cmp    %edx,%eax
82001288:	75 36                	jne    820012c0 <_free_r+0x1c5>
8200128a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82001291:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82001296:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001299:	89 50 0c             	mov    %edx,0xc(%eax)
8200129c:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
820012a1:	8b 40 0c             	mov    0xc(%eax),%eax
820012a4:	89 42 08             	mov    %eax,0x8(%edx)
820012a7:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
820012ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012af:	89 50 0c             	mov    %edx,0xc(%eax)
820012b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012b5:	8b 50 0c             	mov    0xc(%eax),%edx
820012b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012bb:	89 50 08             	mov    %edx,0x8(%eax)
820012be:	eb 24                	jmp    820012e4 <_free_r+0x1e9>
820012c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012c3:	8b 40 0c             	mov    0xc(%eax),%eax
820012c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
820012c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012cc:	8b 40 08             	mov    0x8(%eax),%eax
820012cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
820012d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
820012d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
820012d8:	89 50 0c             	mov    %edx,0xc(%eax)
820012db:	8b 45 ec             	mov    -0x14(%ebp),%eax
820012de:	8b 55 e8             	mov    -0x18(%ebp),%edx
820012e1:	89 50 08             	mov    %edx,0x8(%eax)
820012e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012e7:	83 c8 01             	or     $0x1,%eax
820012ea:	89 c2                	mov    %eax,%edx
820012ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012ef:	89 50 04             	mov    %edx,0x4(%eax)
820012f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
820012f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012f8:	01 c2                	add    %eax,%edx
820012fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012fd:	89 02                	mov    %eax,(%edx)
820012ff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82001303:	0f 85 b7 01 00 00    	jne    820014c0 <_free_r+0x3c5>
82001309:	81 7d f0 ff 01 00 00 	cmpl   $0x1ff,-0x10(%ebp)
82001310:	77 7f                	ja     82001391 <_free_r+0x296>
82001312:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001315:	c1 e8 03             	shr    $0x3,%eax
82001318:	89 45 d0             	mov    %eax,-0x30(%ebp)
8200131b:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001320:	8b 58 04             	mov    0x4(%eax),%ebx
82001323:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001326:	8d 50 03             	lea    0x3(%eax),%edx
82001329:	85 c0                	test   %eax,%eax
8200132b:	0f 48 c2             	cmovs  %edx,%eax
8200132e:	c1 f8 02             	sar    $0x2,%eax
82001331:	ba 01 00 00 00       	mov    $0x1,%edx
82001336:	89 c1                	mov    %eax,%ecx
82001338:	d3 e2                	shl    %cl,%edx
8200133a:	89 d0                	mov    %edx,%eax
8200133c:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82001341:	09 d8                	or     %ebx,%eax
82001343:	89 42 04             	mov    %eax,0x4(%edx)
82001346:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001349:	83 c0 01             	add    $0x1,%eax
8200134c:	01 c0                	add    %eax,%eax
8200134e:	c1 e0 02             	shl    $0x2,%eax
82001351:	05 20 1c 00 82       	add    $0x82001c20,%eax
82001356:	83 e8 08             	sub    $0x8,%eax
82001359:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200135c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200135f:	8b 40 08             	mov    0x8(%eax),%eax
82001362:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001365:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001368:	8b 55 ec             	mov    -0x14(%ebp),%edx
8200136b:	89 50 0c             	mov    %edx,0xc(%eax)
8200136e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001371:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001374:	89 50 08             	mov    %edx,0x8(%eax)
82001377:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200137a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200137d:	89 50 08             	mov    %edx,0x8(%eax)
82001380:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001383:	8b 50 08             	mov    0x8(%eax),%edx
82001386:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001389:	89 50 0c             	mov    %edx,0xc(%eax)
8200138c:	e9 2f 01 00 00       	jmp    820014c0 <_free_r+0x3c5>
82001391:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001394:	c1 e8 09             	shr    $0x9,%eax
82001397:	85 c0                	test   %eax,%eax
82001399:	75 08                	jne    820013a3 <_free_r+0x2a8>
8200139b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200139e:	c1 e8 03             	shr    $0x3,%eax
820013a1:	eb 77                	jmp    8200141a <_free_r+0x31f>
820013a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013a6:	c1 e8 09             	shr    $0x9,%eax
820013a9:	83 f8 04             	cmp    $0x4,%eax
820013ac:	77 0b                	ja     820013b9 <_free_r+0x2be>
820013ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013b1:	c1 e8 06             	shr    $0x6,%eax
820013b4:	83 c0 38             	add    $0x38,%eax
820013b7:	eb 61                	jmp    8200141a <_free_r+0x31f>
820013b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013bc:	c1 e8 09             	shr    $0x9,%eax
820013bf:	83 f8 14             	cmp    $0x14,%eax
820013c2:	77 0b                	ja     820013cf <_free_r+0x2d4>
820013c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013c7:	c1 e8 09             	shr    $0x9,%eax
820013ca:	83 c0 5b             	add    $0x5b,%eax
820013cd:	eb 4b                	jmp    8200141a <_free_r+0x31f>
820013cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013d2:	c1 e8 09             	shr    $0x9,%eax
820013d5:	83 f8 54             	cmp    $0x54,%eax
820013d8:	77 0b                	ja     820013e5 <_free_r+0x2ea>
820013da:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013dd:	c1 e8 0c             	shr    $0xc,%eax
820013e0:	83 c0 6e             	add    $0x6e,%eax
820013e3:	eb 35                	jmp    8200141a <_free_r+0x31f>
820013e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013e8:	c1 e8 09             	shr    $0x9,%eax
820013eb:	3d 54 01 00 00       	cmp    $0x154,%eax
820013f0:	77 0b                	ja     820013fd <_free_r+0x302>
820013f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013f5:	c1 e8 0f             	shr    $0xf,%eax
820013f8:	83 c0 77             	add    $0x77,%eax
820013fb:	eb 1d                	jmp    8200141a <_free_r+0x31f>
820013fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001400:	c1 e8 09             	shr    $0x9,%eax
82001403:	3d 54 05 00 00       	cmp    $0x554,%eax
82001408:	77 0b                	ja     82001415 <_free_r+0x31a>
8200140a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200140d:	c1 e8 12             	shr    $0x12,%eax
82001410:	83 c0 7c             	add    $0x7c,%eax
82001413:	eb 05                	jmp    8200141a <_free_r+0x31f>
82001415:	b8 7e 00 00 00       	mov    $0x7e,%eax
8200141a:	89 45 d0             	mov    %eax,-0x30(%ebp)
8200141d:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001420:	83 c0 01             	add    $0x1,%eax
82001423:	01 c0                	add    %eax,%eax
82001425:	c1 e0 02             	shl    $0x2,%eax
82001428:	05 20 1c 00 82       	add    $0x82001c20,%eax
8200142d:	83 e8 08             	sub    $0x8,%eax
82001430:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001433:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001436:	8b 40 08             	mov    0x8(%eax),%eax
82001439:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200143c:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200143f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82001442:	75 36                	jne    8200147a <_free_r+0x37f>
82001444:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001449:	8b 58 04             	mov    0x4(%eax),%ebx
8200144c:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200144f:	8d 50 03             	lea    0x3(%eax),%edx
82001452:	85 c0                	test   %eax,%eax
82001454:	0f 48 c2             	cmovs  %edx,%eax
82001457:	c1 f8 02             	sar    $0x2,%eax
8200145a:	ba 01 00 00 00       	mov    $0x1,%edx
8200145f:	89 c1                	mov    %eax,%ecx
82001461:	d3 e2                	shl    %cl,%edx
82001463:	89 d0                	mov    %edx,%eax
82001465:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
8200146a:	09 d8                	or     %ebx,%eax
8200146c:	89 42 04             	mov    %eax,0x4(%edx)
8200146f:	eb 28                	jmp    82001499 <_free_r+0x39e>
82001471:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001474:	8b 40 08             	mov    0x8(%eax),%eax
82001477:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200147a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200147d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82001480:	74 0e                	je     82001490 <_free_r+0x395>
82001482:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001485:	8b 40 04             	mov    0x4(%eax),%eax
82001488:	83 e0 fc             	and    $0xfffffffc,%eax
8200148b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
8200148e:	72 e1                	jb     82001471 <_free_r+0x376>
82001490:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001493:	8b 40 0c             	mov    0xc(%eax),%eax
82001496:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001499:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200149c:	8b 55 ec             	mov    -0x14(%ebp),%edx
8200149f:	89 50 0c             	mov    %edx,0xc(%eax)
820014a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
820014a5:	8b 55 e8             	mov    -0x18(%ebp),%edx
820014a8:	89 50 08             	mov    %edx,0x8(%eax)
820014ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
820014ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
820014b1:	89 50 08             	mov    %edx,0x8(%eax)
820014b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
820014b7:	8b 50 08             	mov    0x8(%eax),%edx
820014ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
820014bd:	89 50 0c             	mov    %edx,0xc(%eax)
820014c0:	83 ec 0c             	sub    $0xc,%esp
820014c3:	ff 75 08             	push   0x8(%ebp)
820014c6:	e8 d5 fa ff ff       	call   82000fa0 <__malloc_unlock>
820014cb:	83 c4 10             	add    $0x10,%esp
820014ce:	eb 01                	jmp    820014d1 <_free_r+0x3d6>
820014d0:	90                   	nop
820014d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
820014d4:	c9                   	leave  
820014d5:	c3                   	ret    

820014d6 <_malloc_trim_r>:
820014d6:	55                   	push   %ebp
820014d7:	89 e5                	mov    %esp,%ebp
820014d9:	83 ec 28             	sub    $0x28,%esp
820014dc:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
820014e3:	83 ec 0c             	sub    $0xc,%esp
820014e6:	ff 75 08             	push   0x8(%ebp)
820014e9:	e8 ac fa ff ff       	call   82000f9a <__malloc_lock>
820014ee:	83 c4 10             	add    $0x10,%esp
820014f1:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820014f6:	8b 40 08             	mov    0x8(%eax),%eax
820014f9:	8b 40 04             	mov    0x4(%eax),%eax
820014fc:	83 e0 fc             	and    $0xfffffffc,%eax
820014ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
82001502:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001505:	2b 45 0c             	sub    0xc(%ebp),%eax
82001508:	89 c2                	mov    %eax,%edx
8200150a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200150d:	01 d0                	add    %edx,%eax
8200150f:	83 e8 11             	sub    $0x11,%eax
82001512:	ba 00 00 00 00       	mov    $0x0,%edx
82001517:	f7 75 f4             	divl   -0xc(%ebp)
8200151a:	83 e8 01             	sub    $0x1,%eax
8200151d:	0f af 45 f4          	imul   -0xc(%ebp),%eax
82001521:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001524:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001527:	39 45 ec             	cmp    %eax,-0x14(%ebp)
8200152a:	7d 18                	jge    82001544 <_malloc_trim_r+0x6e>
8200152c:	83 ec 0c             	sub    $0xc,%esp
8200152f:	ff 75 08             	push   0x8(%ebp)
82001532:	e8 69 fa ff ff       	call   82000fa0 <__malloc_unlock>
82001537:	83 c4 10             	add    $0x10,%esp
8200153a:	b8 00 00 00 00       	mov    $0x0,%eax
8200153f:	e9 f1 00 00 00       	jmp    82001635 <_malloc_trim_r+0x15f>
82001544:	83 ec 08             	sub    $0x8,%esp
82001547:	6a 00                	push   $0x0
82001549:	ff 75 08             	push   0x8(%ebp)
8200154c:	e8 55 fa ff ff       	call   82000fa6 <_sbrk_r>
82001551:	83 c4 10             	add    $0x10,%esp
82001554:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001557:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
8200155c:	8b 50 08             	mov    0x8(%eax),%edx
8200155f:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001562:	01 d0                	add    %edx,%eax
82001564:	39 45 e8             	cmp    %eax,-0x18(%ebp)
82001567:	74 18                	je     82001581 <_malloc_trim_r+0xab>
82001569:	83 ec 0c             	sub    $0xc,%esp
8200156c:	ff 75 08             	push   0x8(%ebp)
8200156f:	e8 2c fa ff ff       	call   82000fa0 <__malloc_unlock>
82001574:	83 c4 10             	add    $0x10,%esp
82001577:	b8 00 00 00 00       	mov    $0x0,%eax
8200157c:	e9 b4 00 00 00       	jmp    82001635 <_malloc_trim_r+0x15f>
82001581:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001584:	f7 d8                	neg    %eax
82001586:	83 ec 08             	sub    $0x8,%esp
82001589:	50                   	push   %eax
8200158a:	ff 75 08             	push   0x8(%ebp)
8200158d:	e8 14 fa ff ff       	call   82000fa6 <_sbrk_r>
82001592:	83 c4 10             	add    $0x10,%esp
82001595:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82001598:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
8200159c:	75 61                	jne    820015ff <_malloc_trim_r+0x129>
8200159e:	83 ec 08             	sub    $0x8,%esp
820015a1:	6a 00                	push   $0x0
820015a3:	ff 75 08             	push   0x8(%ebp)
820015a6:	e8 fb f9 ff ff       	call   82000fa6 <_sbrk_r>
820015ab:	83 c4 10             	add    $0x10,%esp
820015ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
820015b1:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820015b6:	8b 50 08             	mov    0x8(%eax),%edx
820015b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015bc:	29 d0                	sub    %edx,%eax
820015be:	89 45 f0             	mov    %eax,-0x10(%ebp)
820015c1:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
820015c5:	7e 23                	jle    820015ea <_malloc_trim_r+0x114>
820015c7:	8b 15 2c 20 00 82    	mov    0x8200202c,%edx
820015cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015d0:	29 d0                	sub    %edx,%eax
820015d2:	a3 60 20 00 82       	mov    %eax,0x82002060
820015d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015da:	83 c8 01             	or     $0x1,%eax
820015dd:	89 c2                	mov    %eax,%edx
820015df:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820015e4:	8b 40 08             	mov    0x8(%eax),%eax
820015e7:	89 50 04             	mov    %edx,0x4(%eax)
820015ea:	83 ec 0c             	sub    $0xc,%esp
820015ed:	ff 75 08             	push   0x8(%ebp)
820015f0:	e8 ab f9 ff ff       	call   82000fa0 <__malloc_unlock>
820015f5:	83 c4 10             	add    $0x10,%esp
820015f8:	b8 00 00 00 00       	mov    $0x0,%eax
820015fd:	eb 36                	jmp    82001635 <_malloc_trim_r+0x15f>
820015ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001602:	2b 45 ec             	sub    -0x14(%ebp),%eax
82001605:	83 c8 01             	or     $0x1,%eax
82001608:	89 c2                	mov    %eax,%edx
8200160a:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
8200160f:	8b 40 08             	mov    0x8(%eax),%eax
82001612:	89 50 04             	mov    %edx,0x4(%eax)
82001615:	a1 60 20 00 82       	mov    0x82002060,%eax
8200161a:	2b 45 ec             	sub    -0x14(%ebp),%eax
8200161d:	a3 60 20 00 82       	mov    %eax,0x82002060
82001622:	83 ec 0c             	sub    $0xc,%esp
82001625:	ff 75 08             	push   0x8(%ebp)
82001628:	e8 73 f9 ff ff       	call   82000fa0 <__malloc_unlock>
8200162d:	83 c4 10             	add    $0x10,%esp
82001630:	b8 01 00 00 00       	mov    $0x1,%eax
82001635:	c9                   	leave  
82001636:	c3                   	ret    

82001637 <cleanup_glue>:
82001637:	55                   	push   %ebp
82001638:	89 e5                	mov    %esp,%ebp
8200163a:	83 ec 08             	sub    $0x8,%esp
8200163d:	8b 45 0c             	mov    0xc(%ebp),%eax
82001640:	8b 00                	mov    (%eax),%eax
82001642:	85 c0                	test   %eax,%eax
82001644:	74 14                	je     8200165a <cleanup_glue+0x23>
82001646:	8b 45 0c             	mov    0xc(%ebp),%eax
82001649:	8b 00                	mov    (%eax),%eax
8200164b:	83 ec 08             	sub    $0x8,%esp
8200164e:	50                   	push   %eax
8200164f:	ff 75 08             	push   0x8(%ebp)
82001652:	e8 e0 ff ff ff       	call   82001637 <cleanup_glue>
82001657:	83 c4 10             	add    $0x10,%esp
8200165a:	83 ec 08             	sub    $0x8,%esp
8200165d:	ff 75 0c             	push   0xc(%ebp)
82001660:	ff 75 08             	push   0x8(%ebp)
82001663:	e8 93 fa ff ff       	call   820010fb <_free_r>
82001668:	83 c4 10             	add    $0x10,%esp
8200166b:	90                   	nop
8200166c:	c9                   	leave  
8200166d:	c3                   	ret    

8200166e <_reclaim_reent>:
8200166e:	55                   	push   %ebp
8200166f:	89 e5                	mov    %esp,%ebp
82001671:	83 ec 28             	sub    $0x28,%esp
82001674:	a1 04 1c 00 82       	mov    0x82001c04,%eax
82001679:	39 45 08             	cmp    %eax,0x8(%ebp)
8200167c:	0f 84 49 01 00 00    	je     820017cb <_reclaim_reent+0x15d>
82001682:	8b 45 08             	mov    0x8(%ebp),%eax
82001685:	8b 40 4c             	mov    0x4c(%eax),%eax
82001688:	85 c0                	test   %eax,%eax
8200168a:	74 64                	je     820016f0 <_reclaim_reent+0x82>
8200168c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
82001693:	eb 3e                	jmp    820016d3 <_reclaim_reent+0x65>
82001695:	8b 45 08             	mov    0x8(%ebp),%eax
82001698:	8b 50 4c             	mov    0x4c(%eax),%edx
8200169b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200169e:	c1 e0 02             	shl    $0x2,%eax
820016a1:	01 d0                	add    %edx,%eax
820016a3:	8b 00                	mov    (%eax),%eax
820016a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
820016a8:	eb 1f                	jmp    820016c9 <_reclaim_reent+0x5b>
820016aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
820016ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
820016b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
820016b3:	8b 00                	mov    (%eax),%eax
820016b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
820016b8:	83 ec 08             	sub    $0x8,%esp
820016bb:	ff 75 e8             	push   -0x18(%ebp)
820016be:	ff 75 08             	push   0x8(%ebp)
820016c1:	e8 35 fa ff ff       	call   820010fb <_free_r>
820016c6:	83 c4 10             	add    $0x10,%esp
820016c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
820016cd:	75 db                	jne    820016aa <_reclaim_reent+0x3c>
820016cf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
820016d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
820016d6:	83 f8 1f             	cmp    $0x1f,%eax
820016d9:	76 ba                	jbe    82001695 <_reclaim_reent+0x27>
820016db:	8b 45 08             	mov    0x8(%ebp),%eax
820016de:	8b 40 4c             	mov    0x4c(%eax),%eax
820016e1:	83 ec 08             	sub    $0x8,%esp
820016e4:	50                   	push   %eax
820016e5:	ff 75 08             	push   0x8(%ebp)
820016e8:	e8 0e fa ff ff       	call   820010fb <_free_r>
820016ed:	83 c4 10             	add    $0x10,%esp
820016f0:	8b 45 08             	mov    0x8(%ebp),%eax
820016f3:	8b 40 40             	mov    0x40(%eax),%eax
820016f6:	85 c0                	test   %eax,%eax
820016f8:	74 15                	je     8200170f <_reclaim_reent+0xa1>
820016fa:	8b 45 08             	mov    0x8(%ebp),%eax
820016fd:	8b 40 40             	mov    0x40(%eax),%eax
82001700:	83 ec 08             	sub    $0x8,%esp
82001703:	50                   	push   %eax
82001704:	ff 75 08             	push   0x8(%ebp)
82001707:	e8 ef f9 ff ff       	call   820010fb <_free_r>
8200170c:	83 c4 10             	add    $0x10,%esp
8200170f:	8b 45 08             	mov    0x8(%ebp),%eax
82001712:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001718:	85 c0                	test   %eax,%eax
8200171a:	74 50                	je     8200176c <_reclaim_reent+0xfe>
8200171c:	8b 45 08             	mov    0x8(%ebp),%eax
8200171f:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001725:	8b 55 08             	mov    0x8(%ebp),%edx
82001728:	81 c2 4c 01 00 00    	add    $0x14c,%edx
8200172e:	39 d0                	cmp    %edx,%eax
82001730:	74 3a                	je     8200176c <_reclaim_reent+0xfe>
82001732:	8b 45 08             	mov    0x8(%ebp),%eax
82001735:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
8200173b:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200173e:	eb 1f                	jmp    8200175f <_reclaim_reent+0xf1>
82001740:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001743:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82001746:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001749:	8b 00                	mov    (%eax),%eax
8200174b:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200174e:	83 ec 08             	sub    $0x8,%esp
82001751:	ff 75 e4             	push   -0x1c(%ebp)
82001754:	ff 75 08             	push   0x8(%ebp)
82001757:	e8 9f f9 ff ff       	call   820010fb <_free_r>
8200175c:	83 c4 10             	add    $0x10,%esp
8200175f:	8b 45 08             	mov    0x8(%ebp),%eax
82001762:	05 4c 01 00 00       	add    $0x14c,%eax
82001767:	39 45 ec             	cmp    %eax,-0x14(%ebp)
8200176a:	75 d4                	jne    82001740 <_reclaim_reent+0xd2>
8200176c:	8b 45 08             	mov    0x8(%ebp),%eax
8200176f:	8b 40 54             	mov    0x54(%eax),%eax
82001772:	85 c0                	test   %eax,%eax
82001774:	74 15                	je     8200178b <_reclaim_reent+0x11d>
82001776:	8b 45 08             	mov    0x8(%ebp),%eax
82001779:	8b 40 54             	mov    0x54(%eax),%eax
8200177c:	83 ec 08             	sub    $0x8,%esp
8200177f:	50                   	push   %eax
82001780:	ff 75 08             	push   0x8(%ebp)
82001783:	e8 73 f9 ff ff       	call   820010fb <_free_r>
82001788:	83 c4 10             	add    $0x10,%esp
8200178b:	8b 45 08             	mov    0x8(%ebp),%eax
8200178e:	8b 40 38             	mov    0x38(%eax),%eax
82001791:	85 c0                	test   %eax,%eax
82001793:	74 36                	je     820017cb <_reclaim_reent+0x15d>
82001795:	8b 45 08             	mov    0x8(%ebp),%eax
82001798:	8b 40 3c             	mov    0x3c(%eax),%eax
8200179b:	83 ec 0c             	sub    $0xc,%esp
8200179e:	ff 75 08             	push   0x8(%ebp)
820017a1:	ff d0                	call   *%eax
820017a3:	83 c4 10             	add    $0x10,%esp
820017a6:	8b 45 08             	mov    0x8(%ebp),%eax
820017a9:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
820017af:	85 c0                	test   %eax,%eax
820017b1:	74 18                	je     820017cb <_reclaim_reent+0x15d>
820017b3:	8b 45 08             	mov    0x8(%ebp),%eax
820017b6:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
820017bc:	83 ec 08             	sub    $0x8,%esp
820017bf:	50                   	push   %eax
820017c0:	ff 75 08             	push   0x8(%ebp)
820017c3:	e8 6f fe ff ff       	call   82001637 <cleanup_glue>
820017c8:	83 c4 10             	add    $0x10,%esp
820017cb:	90                   	nop
820017cc:	c9                   	leave  
820017cd:	c3                   	ret    
