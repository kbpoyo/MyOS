
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000a3ac memsz 0x0000a3ac flags r-x
    LOAD off    0x0000c000 vaddr 0x0001b000 paddr 0x0001b000 align 2**12
         filesz 0x00000174 memsz 0x0005de20 flags rw-
    LOAD off    0x0000d000 vaddr 0x80000000 paddr 0x00079000 align 2**12
         filesz 0x00000396 memsz 0x00000396 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a00  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000019ac  00018a00  00018a00  00009a00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000174  0001b000  0001b000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005ce20  0001c000  0001c000  0000c174  2**12
                  ALLOC
  4 .first_task   00000396  80000000  00079000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00004b64  00000000  00000000  0000d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000bca  00000000  00000000  00011efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0001083f  00000000  00000000  00012ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000038a2  00000000  00000000  00023303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000003a0  00000000  00000000  00026ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00002745  00000000  00000000  00026f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 000000a9  00000000  00000000  0002968d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  00029736  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002c10  00000000  00000000  00029764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010301 l     F .text	0000000d down2
0001030e l     F .text	00000017 up2
00010325 l     F .text	0000000c write_cr3
00010331 l     F .text	0000000b pde_index
0001033c l     F .text	00000010 pte_index
0001034c l     F .text	00000027 pde_to_pt_addr
00010373 l     F .text	00000027 pte_to_pg_addr
0001039a l     F .text	0000000f get_pte_privilege
000103a9 l     F .text	00000011 mmu_set_page_dir
0001c000 l     O .bss	00007e88 paddr_alloc
00024000 l     O .bss	00001000 kernel_page_dir
000103ba l     F .text	00000025 page_index
000103df l     F .text	00000056 page_ref_add
00010435 l     F .text	00000068 page_ref_sub
0001049d l     F .text	0000004e get_page_ref
000104eb l     F .text	00000051 clear_page_ref
0001053c l     F .text	00000087 addr_alloc_init
000105c3 l     F .text	00000067 addr_alloc_page
0001062a l     F .text	0000009c addr_free_page
000106c6 l     F .text	00000066 show_mem_info
0001072c l     F .text	00000037 total_mem_size
00018b9c l     O .rodata	00000011 __func__.4
0001b000 l     O .data	00000050 kernal_map.3
00018bb0 l     O .rodata	0000000c __func__.2
00010e49 l     F .text	00000010 curr_page_dir
00018bbc l     O .rodata	00000011 __func__.1
00018bd0 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
0001110e l     F .text	0000003d list_node_init
00018d98 l     O .rodata	0000000f __func__.11
0001114b l     F .text	0000002d list_node_next
00018df8 l     O .rodata	0000000f __func__.5
00011178 l     F .text	00000047 list_init
00018da8 l     O .rodata	0000000a __func__.10
000111bf l     F .text	00000035 list_is_empty
00018e08 l     O .rodata	0000000e __func__.4
000111f4 l     F .text	0000002d list_get_size
00018e38 l     O .rodata	0000000e __func__.1
00011221 l     F .text	0000002c list_get_first
00018de8 l     O .rodata	0000000f __func__.6
0001124d l     F .text	00000007 hlt
00011254 l     F .text	0000000c write_cr3
00011260 l     F .text	0000001a far_jump
0001127a l     F .text	00000017 write_tr
00011291 l     F .text	00000011 mmu_set_page_dir
000112a2 l     F .text	00000017 up2
00025000 l     O .bss	000005c0 task_manager
000255c0 l     O .bss	00016400 task_table
0003b9c0 l     O .bss	00000014 task_table_lock
00011364 l     F .text	0000001f switch_to_tss
0001139e l     F .text	00000175 tss_init
00018d8c l     O .rodata	0000000a __func__.12
00011c3d l     F .text	00000033 free_task
0003b9e0 l     O .bss	00000200 empty_task_stack
00011708 l     F .text	0000000a empty_task
00018db4 l     O .rodata	00000010 __func__.9
00018dc4 l     O .rodata	0000000f __func__.8
00018dd4 l     O .rodata	00000011 __func__.7
00018e18 l     O .rodata	0000000f __func__.3
00018e28 l     O .rodata	00000010 __func__.2
00011bd5 l     F .text	00000068 alloc_task
00011cdd l     F .text	00000059 copy_opened_files
00011f20 l     F .text	00000114 load_phdr
00012034 l     F .text	00000213 load_elf_file
00012247 l     F .text	0000010b copy_args
00018e48 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012779 l     F .text	00000028 lgdt
0003bbe0 l     O .bss	00010000 gdt_table
0004bbe0 l     O .bss	00002000 is_alloc
0004dbe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000129af l     F .text	00000007 cli
000129b6 l     F .text	00000007 sti
000129bd l     F .text	00000007 hlt
000129c4 l     F .text	0000001d inb
000129e1 l     F .text	00000021 outb
00012a02 l     F .text	00000028 lidt
00012a2a l     F .text	00000011 read_cr2
00012a3b l     F .text	00000010 read_eflags
00012a4b l     F .text	0000000b write_eflags
0004dc00 l     O .bss	00000800 idt_table
00012a56 l     F .text	0000010f print_exception_fram
00012b65 l     F .text	00000030 exit_excption_handler
00012b95 l     F .text	00000048 do_default_handler
00012fd1 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00019440 l     O .rodata	000000fc sys_table
00000000 l    df *ABS*	00000000 console.c
00013466 l     F .text	0000001d inb
00013483 l     F .text	00000021 outb
0004e400 l     O .bss	00000340 console_table
0004e740 l     O .bss	00000004 curr_console_index
000134a4 l     F .text	00000074 read_cursor_pos
00013518 l     F .text	000000a6 update_cursor_pos
000135be l     F .text	0000006d erase_rows
0001362b l     F .text	00000094 scroll_up
000136bf l     F .text	00000010 move_to_col0
000136cf l     F .text	00000038 move_to_next_line
00013707 l     F .text	00000077 move_forward
0001377e l     F .text	00000095 show_char
00013813 l     F .text	00000078 move_backword
0001388b l     F .text	0000003a erase_backword
000138c5 l     F .text	00000087 clear_display
0001394c l     F .text	00000051 print_table
00013aa8 l     F .text	000000b2 write_normal
00013b5a l     F .text	0000001e save_cursor
00013b78 l     F .text	0000001e restore_cursor
00013b96 l     F .text	00000029 clear_esc_param
00013bbf l     F .text	0000007e write_esc
00013c3d l     F .text	0000009a set_font_style
000195c0 l     O .rodata	00000020 color_table.0
00013cd7 l     F .text	0000004f erase_in_display
00013d26 l     F .text	00000022 move_cursor
00013d48 l     F .text	00000039 move_left
00013d81 l     F .text	00000045 move_right
00013dc6 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001b050 l     O .data	0000000c dev_des_table
0004e760 l     O .bss	00000a00 dev_table
000140aa l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 disk.c
000143af l     F .text	0000001d inb
000143cc l     F .text	00000021 outb
000143ed l     F .text	00000021 outw
0001440e l     F .text	0000001f inw
0004f160 l     O .bss	00000250 disk_table
0004f3b0 l     O .bss	00000014 mutex
0004f3c4 l     O .bss	00000010 op_sem
0004f3d4 l     O .bss	00000001 task_on_op
0001442d l     F .text	00000130 disk_send_cmd
0001455d l     F .text	00000051 disk_read_data
000145ae l     F .text	00000051 disk_write_data
000145ff l     F .text	0000004f disk_wait_data
0001464e l     F .text	00000115 detect_part_info
00014763 l     F .text	00000129 identify_disk
0001488c l     F .text	000000c8 print_disk_info
00000000 l    df *ABS*	00000000 keyboard.c
00014e04 l     F .text	0000001d inb
00019740 l     O .rodata	00000200 map_table
0004f3d8 l     O .bss	00000004 kbd_state
00014e21 l     F .text	0000001a is_make_code
00014e3b l     F .text	00000015 get_key
00014e50 l     F .text	00000043 do_fx_key
00014e93 l     F .text	000001e0 do_normal_key
00015073 l     F .text	0000008e do_e0_key
0004f3dc l     O .bss	00000001 is_inited.1
0004f3e0 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
00015219 l     F .text	00000021 outb
0004f3e4 l     O .bss	00000004 sys_tick
00015262 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004f400 l     O .bss	000022a0 tty_table
000516a0 l     O .bss	00000004 curr_tty_index
000152dc l     F .text	0000004f get_tty
0001532b l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 devfs.c
0001b0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
00015a6b l     F .text	0000002a cluster_is_valid
00015a95 l     F .text	0000005b cache_read_sector
00015af0 l     F .text	000000be cluster_get_next
00015bae l     F .text	00000083 move_file_pos
00015c8e l     F .text	00000063 read_from_diritem
00015cf1 l     F .text	000000b5 diritem_get_name
00015da6 l     F .text	00000036 diritem_name_match
00015ddc l     F .text	00000085 read_dir_entry
00000000 l    df *ABS*	00000000 file.c
000516c0 l     O .bss	00024000 file_table
000756c0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00016664 l     F .text	0000002d list_node_next
00019d98 l     O .rodata	0000000f __func__.3
00016691 l     F .text	00000047 list_init
00019db4 l     O .rodata	0000000a __func__.1
000166d8 l     F .text	0000002c list_get_first
00019d88 l     O .rodata	0000000f __func__.4
000756e0 l     O .bss	0000000c mounted_list
00075700 l     O .bss	000016f8 fs_table
00076df8 l     O .bss	0000000c free_list
00076e04 l     O .bss	00000004 root_fs
00016704 l     F .text	0000001d is_fd_bad
00016721 l     F .text	00000021 is_path_valid
00016839 l     F .text	0000002b fs_protect
00016864 l     F .text	0000002b fs_unprotect
00019da8 l     O .rodata	0000000a __func__.2
00017097 l     F .text	00000060 mount_list_init
000170f7 l     F .text	00000026 get_fs_op
0001711d l     F .text	000001b7 mount
00019dc0 l     O .rodata	00000008 __func__.0
00000000 l    df *ABS*	00000000 init.c
00019e64 l     O .rodata	0000000c __func__.1
00019e70 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00017458 l     F .text	00000047 list_init
00019f30 l     O .rodata	0000000a __func__.1
0001749f l     F .text	00000035 list_is_empty
00019f3c l     O .rodata	0000000e __func__.0
00019f24 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00017697 l     F .text	00000047 list_init
00019ff0 l     O .rodata	0000000a __func__.1
000176de l     F .text	00000035 list_is_empty
00019ffc l     O .rodata	0000000e __func__.0
00019fe4 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
0001789d l     F .text	00000047 list_init
0001a110 l     O .rodata	0000000a __func__.3
000178e4 l     F .text	0000002d list_get_size
0001a11c l     O .rodata	0000000e __func__.2
00017911 l     F .text	0000002c list_get_first
0001a13c l     O .rodata	0000000f __func__.0
0001793d l     F .text	0000002d list_get_last
0001a12c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00017c45 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001a210 l     O .rodata	0000000c __func__.3
0001a21c l     O .rodata	0000000f __func__.2
0001a22c l     O .rodata	0000000f __func__.1
0001a23c l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001b170 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00018588 l     F .text	00000035 list_is_empty
0001a344 l     O .rodata	0000000e __func__.5
000185bd l     F .text	0000002d list_get_size
0001a37c l     O .rodata	0000000e __func__.2
0001a330 l     O .rodata	00000012 __func__.6
0001a354 l     O .rodata	00000011 __func__.4
0001a368 l     O .rodata	00000012 __func__.3
0001a38c l     O .rodata	00000011 __func__.1
0001a3a0 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00076e08 l     O .bss	00000014 mutex
00076e1c l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
00015c31 g     F .text	0000005d diritem_get_type
00017d2c g     F .text	00000078 bitmap_get_bit
00018116 g     F .text	0000004f kernel_memcpy
00016c42 g     F .text	000000f9 sys_close
00013219 g     F .text	00000098 idt_enable
000119b1 g     F .text	0000000a task_current
000167e9 g     F .text	00000050 path_begin_with
800001df g     F .first_task	0000001b yield
00018675 g     F .text	0000008f list_insert_last
000112b9 g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fe8 g     F .text	00000126 sys_sbrk
00011ebf g     F .text	00000061 sys_yield
00012d11 g     F .text	0000001c do_handler_segment_not_present
000118ff g     F .text	00000042 task_set_ready
00017eac g     F .text	00000021 bitmap_is_set
00013350 g     F .text	0000000b idt_enable_global
00018165 g     F .text	00000041 kernel_memset
00014294 g     F .text	0000004c dev_write
00016bad g     F .text	00000095 sys_lseek
00015101 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00014dfe g     F .text	00000006 disk_close
000133d7 g     F .text	0000008f do_handler_syscall
00018515 g     F .text	0000002d strings_count
00018933 g     F .text	0000002f log_init
00016441 g     F .text	000000e4 fatfs_readdir
00011d36 g     F .text	00000189 sys_fork
00017420 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00014dc3 g     F .text	0000000a disk_control
000133bd g     F .text	0000001a sys_print_msg
0001b140 g     O .data	00000030 fatfs_op
00017fc8 g     F .text	00000047 kernel_strcpy
00013345 g     F .text	0000000b idt_disable_global
0001b000 g       .data	00000000 s_data
80000010 g     F .first_task	000000af first_main
00012f8e g     F .text	00000043 idt_install
800001b2 g     F .first_task	0000002d execve
80000154 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012c69 g     F .text	0000001c do_handler_overflow
00012f02 g     F .text	0000001c do_handler_alignment_check
00016a24 g     F .text	000000c5 sys_read
00016742 g     F .text	00000058 path_next_child
00016335 g     F .text	0000000a fatfs_write
00013fda g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012d49 g     F .text	000000bf do_handler_general_protection
00012f72 g     F .text	0000001c do_handler_control_exception
00017874 g     F .text	00000029 sem_count
00012bf9 g     F .text	0000001c do_handler_divider
00017da4 g     F .text	00000108 bitmap_set_bit
00012cd9 g     F .text	0000001c do_handler_double_fault
00016525 g     F .text	0000000a fatfs_closedir
00012e08 g     F .text	000000de do_handler_page_fault
00015e61 g     F .text	00000234 fatfs_mount
800002c9 g     F .first_task	00000021 isatty
0001618f g     F .text	000001a6 fatfs_read
0001012f g       .text	00000000 exception_handler_double_fault
0001335b g     F .text	00000039 pic_send_eoi
000187b5 g     F .text	000000b5 list_remove_last
000118f5 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00017755 g     F .text	00000080 sem_wait
00010e27 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00016d3b g     F .text	000000b6 sys_fstat
00014248 g     F .text	0000004c dev_read
00016345 g     F .text	000000df fatfs_seek
00012860 g     F .text	000000b3 gdt_init
0001633f g     F .text	00000006 fatfs_close
00012f56 g     F .text	0000001c do_handler_virtual_exception
00015a40 g     F .text	0000000a devfs_stat
000100bb g       .text	00000000 exception_handler_overflow
000102d2 g       .text	00000000 simple_switch
00016095 g     F .text	0000003c fatfs_unmount
00014dcd g     F .text	00000031 do_handler_primary_disk
8000029c g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012c15 g     F .text	0000001c do_handler_debug
00076e20 g     O .bss	00002000 stack
00011c70 g     F .text	00000060 sys_sleep
00014954 g     F .text	000000f9 disk_init
000172d4 g     F .text	00000090 fs_init
0001662c g     F .text	00000038 file_inc_ref
00010e79 g     F .text	00000099 memory_free_page
0001796a g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00079000 g       *ABS*	00000000 s_first_task
0001133c g     F .text	00000028 task_remove_fd
0001577c g     F .text	0000007a tty_control
0001399d g     F .text	0000010b console_init
00015660 g     F .text	0000011c tty_read
00011678 g     F .text	00000090 task_uninit
00010d6f g     F .text	000000b8 memory_alloc_for_page_dir
00015a4a g     F .text	00000021 devfs_ioctl
000153fa g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
000157fc g     F .text	00000066 tty_in
00013064 g     F .text	000001b5 idt_init
000177d5 g     F .text	0000009f sem_notify
00010f65 g     F .text	00000083 memory_copy_uvm_data
000142e0 g     F .text	0000004c dev_control
0001514f g     F .text	000000ca do_handler_kbd
00012988 g     F .text	00000027 gdt_free
00012ca1 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00016f4d g     F .text	00000053 sys_readdir
00012ee6 g     F .text	0000001c do_handler_fpu_error
000117ef g     F .text	00000106 task_first_init
00012f1e g     F .text	0000001c do_handler_machine_check
8000024e g     F .first_task	0000002d write
0001688f g     F .text	00000195 sys_open
800002ea g     F .first_task	00000027 fstat
00016df1 g     F .text	0000006b sys_isatty
000185ea g     F .text	0000008b list_insert_first
000140fe g     F .text	0000014a dev_open
0001679a g     F .text	0000004f path_to_num
00011b8a g     F .text	0000004b task_set_wakeup
00011983 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
0001b060 g     O .data	0000002c dev_disk_desc
800000de g     F .first_task	0000004c sys_call
0001097d g     F .text	00000085 memory_creat_uvm
0001800f g     F .text	00000051 kernel_strncpy
00016ae9 g     F .text	000000c4 sys_write
80000375 g     F .first_task	00000021 wait
00079396 g       *ABS*	00000000 mem_free_start
00017364 g     F .text	00000058 kernel_init
00017713 g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
0001824e g     F .text	0000019d kernel_vsprintf
00018542 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0001432c g     F .text	00000083 dev_close
00079000 g       .first_task	00000000 e_data
80000221 g     F .first_task	0000002d read
00017521 g     F .text	000000a6 mutex_lock
00016fa0 g     F .text	00000050 sys_closedir
000112e9 g     F .text	00000053 task_alloc_fd
00015a36 g     F .text	0000000a devfs_seek
00010209 g       .text	00000000 exception_handler_machine_check
00015570 g     F .text	000000f0 tty_write
00012cf5 g     F .text	0000001c do_handler_invalid_tss
00015362 g     F .text	00000098 tty_fifo_put
000102b5 g       .text	00000000 exception_handler_primary_disk
000132b1 g     F .text	00000094 idt_disable
00079396 g       *ABS*	00000000 e_first_task
00011b2e g     F .text	0000005c task_set_sleep
00016e5c g     F .text	0000009e sys_dup
00010813 g     F .text	000000b6 memory_creat_map
0001588b g     F .text	0000001b devfs_mount
00012c31 g     F .text	0000001c do_handler_nmi
00015487 g     F .text	000000e9 tty_open
80000197 g     F .first_task	0000001b fork
000174d4 g     F .text	0000004d mutex_init
80000311 g     F .first_task	00000021 sbrk
0001b100 g     O .data	00000030 devfs_op
000158ac g     F .text	00000127 devfs_open
00010226 g       .text	00000000 exception_handler_smd_exception
00016ff0 g     F .text	000000a7 sys_ioctl
00010b8f g     F .text	000000e7 memory_destroy_uvm
00017c82 g     F .text	00000016 bitmap_byte_count
00012cbd g     F .text	0000001c do_handler_device_unavailable
00013394 g     F .text	00000018 idt_enter_protection
0001642e g     F .text	00000013 fatfs_opendir
000108c9 g     F .text	000000b4 create_kernal_table
00011a23 g     F .text	0000010b task_slice_end
00010a02 g     F .text	0000018d memory_copy_uvm
000157f6 g     F .text	00000006 tty_close
000159f7 g     F .text	00000024 devfs_write
000173bc g     F .text	00000064 move_to_first_task
00015a1b g     F .text	0000001b devfs_close
00013eca g     F .text	0000010a console_write
80000332 g     F .first_task	00000021 dup
000181a6 g     F .text	00000084 kernel_memcmp
00012f3a g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012bdd g     F .text	0000001c do_handler_unknown
00010e59 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011383 g     F .text	0000001b task_switch_from_to
000175c7 g     F .text	000000d0 mutex_unlock
0001652f g     F .text	00000030 file_table_init
000165ea g     F .text	00000042 file_free
000119bb g     F .text	00000068 task_switch
8000016f g     F .first_task	00000028 print_msg
000180e1 g     F .text	00000035 kernel_strlen
00011941 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000127a1 g     F .text	000000bf segment_desc_set
00012c85 g     F .text	0000001c do_handler_bound_range
000102e7 g       .text	00000000 exception_handler_syscall
00014a4d g     F .text	000000ee disk_open
000160d1 g     F .text	000000be fatfs_open
00018704 g     F .text	000000b1 list_remove_first
0001a3ac g       .rodata	00000000 e_text
00018060 g     F .text	00000081 kernel_strncmp
00016efa g     F .text	00000053 sys_opendir
00017c98 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00016424 g     F .text	0000000a fatfs_stat
00017ecd g     F .text	000000fb bitmap_alloc_nbits
0001655f g     F .text	0000008b file_alloc
00011712 g     F .text	000000dd task_manager_init
00011513 g     F .text	00000036 task_start
00010c76 g     F .text	000000f9 memory_init
00012352 g     F .text	000001af sys_execve
00014c7f g     F .text	00000144 disk_write
00012650 g     F .text	000000e2 sys_wait
00012501 g     F .text	0000014f sys_exit
00017c4c g     F .text	00000036 pannic
00015862 g     F .text	00000029 tty_select
00013fd4 g     F .text	00000006 console_close
00010f12 g     F .text	00000053 memory_get_paddr
00012d2d g     F .text	0000001c do_handler_stack_segment_fault
00012c4d g     F .text	0000001c do_handler_breakpoint
000158a6 g     F .text	00000006 devfs_unmount
80000353 g     F .first_task	00000022 _exit
000159d3 g     F .text	00000024 devfs_read
00018962 g     F .text	0000009e log_printf
00011549 g     F .text	0000012f task_init
00014b3b g     F .text	00000144 disk_read
800001fa g     F .first_task	00000027 open
0001822a g     F .text	00000024 kernel_sprintf
00011cd0 g     F .text	0000000d sys_getpid
00012913 g     F .text	00000075 gdt_alloc_desc
000183eb g     F .text	0000012a kernel_itoa
0001886a g     F .text	000000c9 list_remove
00012732 g     F .text	00000047 gate_desc_set
8000012a g     F .first_task	0000002a msleep
000133ac g     F .text	00000011 idt_leave_protection
8000027b g     F .first_task	00000021 close
00010763 g     F .text	000000b0 find_pte
0001523a g     F .text	00000028 do_handler_time
000152c4 g     F .text	00000018 time_init
0001b0a0 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 59 73 00 00       	call   17364 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 8e 07 00       	mov    $0x78e20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 f6 73 00 00       	jmp    17420 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 a2 2b 00 00       	call   12bdd <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 a1 2b 00 00       	call   12bf9 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 a0 2b 00 00       	call   12c15 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 9f 2b 00 00       	call   12c31 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 9e 2b 00 00       	call   12c4d <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 9d 2b 00 00       	call   12c69 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 9c 2b 00 00       	call   12c85 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 9b 2b 00 00       	call   12ca1 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 9a 2b 00 00       	call   12cbd <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 9b 2b 00 00       	call   12cd9 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 9c 2b 00 00       	call   12cf5 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 9d 2b 00 00       	call   12d11 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 9e 2b 00 00       	call   12d2d <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 9f 2b 00 00       	call   12d49 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 43 2c 00 00       	call   12e08 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 04 2d 00 00       	call   12ee6 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 05 2d 00 00       	call   12f02 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 04 2d 00 00       	call   12f1e <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 03 2d 00 00       	call   12f3a <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 02 2d 00 00       	call   12f56 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 03 2d 00 00       	call   12f72 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 ae 4f 00 00       	call   1523a <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                  0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 a6 4e 00 00       	call   1514f <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <exception_handler_primary_disk>:
//磁盘的中断处理函数
exception_handler primary_disk          0x2E, 0
   102b5:	6a 00                	push   $0x0
   102b7:	6a 2e                	push   $0x2e
   102b9:	60                   	pusha  
   102ba:	1e                   	push   %ds
   102bb:	06                   	push   %es
   102bc:	0f a0                	push   %fs
   102be:	0f a8                	push   %gs
   102c0:	54                   	push   %esp
   102c1:	e8 07 4b 00 00       	call   14dcd <do_handler_primary_disk>
   102c6:	5c                   	pop    %esp
   102c7:	0f a9                	pop    %gs
   102c9:	0f a1                	pop    %fs
   102cb:	07                   	pop    %es
   102cc:	1f                   	pop    %ds
   102cd:	61                   	popa   
   102ce:	83 c4 08             	add    $0x8,%esp
   102d1:	cf                   	iret   

000102d2 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102d2:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102d6:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102da:	55                   	push   %ebp
    push %ebx
   102db:	53                   	push   %ebx
    push %esi
   102dc:	56                   	push   %esi
    push %edi
   102dd:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102de:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102e0:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102e2:	5f                   	pop    %edi
    pop %esi
   102e3:	5e                   	pop    %esi
    pop %ebx
   102e4:	5b                   	pop    %ebx
    pop %ebp
   102e5:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102e6:	c3                   	ret    

000102e7 <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102e7:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102e8:	1e                   	push   %ds
    push %es
   102e9:	06                   	push   %es
    push %fs
   102ea:	0f a0                	push   %fs
    push %gs
   102ec:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102ee:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102ef:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102f0:	e8 e2 30 00 00       	call   133d7 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102f5:	5c                   	pop    %esp
    popf
   102f6:	9d                   	popf   
    pop %gs
   102f7:	0f a9                	pop    %gs
    pop %fs
   102f9:	0f a1                	pop    %fs
    pop %es
   102fb:	07                   	pop    %es
    pop %ds
   102fc:	1f                   	pop    %ds
    popa
   102fd:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102fe:	ca 14 00             	lret   $0x14

00010301 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   10301:	55                   	push   %ebp
   10302:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   10304:	8b 45 0c             	mov    0xc(%ebp),%eax
   10307:	f7 d8                	neg    %eax
   10309:	23 45 08             	and    0x8(%ebp),%eax
}
   1030c:	5d                   	pop    %ebp
   1030d:	c3                   	ret    

0001030e <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   1030e:	55                   	push   %ebp
   1030f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10311:	8b 55 08             	mov    0x8(%ebp),%edx
   10314:	8b 45 0c             	mov    0xc(%ebp),%eax
   10317:	01 d0                	add    %edx,%eax
   10319:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	21 d0                	and    %edx,%eax
}
   10323:	5d                   	pop    %ebp
   10324:	c3                   	ret    

00010325 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10325:	55                   	push   %ebp
   10326:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10328:	8b 45 08             	mov    0x8(%ebp),%eax
   1032b:	0f 22 d8             	mov    %eax,%cr3
}
   1032e:	90                   	nop
   1032f:	5d                   	pop    %ebp
   10330:	c3                   	ret    

00010331 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10331:	55                   	push   %ebp
   10332:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10334:	8b 45 08             	mov    0x8(%ebp),%eax
   10337:	c1 e8 16             	shr    $0x16,%eax
}
   1033a:	5d                   	pop    %ebp
   1033b:	c3                   	ret    

0001033c <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1033c:	55                   	push   %ebp
   1033d:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   1033f:	8b 45 08             	mov    0x8(%ebp),%eax
   10342:	c1 e8 0c             	shr    $0xc,%eax
   10345:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1034a:	5d                   	pop    %ebp
   1034b:	c3                   	ret    

0001034c <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1034c:	55                   	push   %ebp
   1034d:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   1034f:	8b 45 08             	mov    0x8(%ebp),%eax
   10352:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10356:	c0 ea 04             	shr    $0x4,%dl
   10359:	0f b6 ca             	movzbl %dl,%ecx
   1035c:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10360:	c1 e2 04             	shl    $0x4,%edx
   10363:	09 ca                	or     %ecx,%edx
   10365:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10369:	c1 e0 0c             	shl    $0xc,%eax
   1036c:	09 d0                	or     %edx,%eax
   1036e:	c1 e0 0c             	shl    $0xc,%eax
}
   10371:	5d                   	pop    %ebp
   10372:	c3                   	ret    

00010373 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10373:	55                   	push   %ebp
   10374:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1037d:	c0 ea 04             	shr    $0x4,%dl
   10380:	0f b6 ca             	movzbl %dl,%ecx
   10383:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10387:	c1 e2 04             	shl    $0x4,%edx
   1038a:	09 ca                	or     %ecx,%edx
   1038c:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10390:	c1 e0 0c             	shl    $0xc,%eax
   10393:	09 d0                	or     %edx,%eax
   10395:	c1 e0 0c             	shl    $0xc,%eax
}
   10398:	5d                   	pop    %ebp
   10399:	c3                   	ret    

0001039a <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1039a:	55                   	push   %ebp
   1039b:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 00                	mov    (%eax),%eax
   103a2:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103a7:	5d                   	pop    %ebp
   103a8:	c3                   	ret    

000103a9 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   103a9:	55                   	push   %ebp
   103aa:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   103ac:	ff 75 08             	push   0x8(%ebp)
   103af:	e8 71 ff ff ff       	call   10325 <write_cr3>
   103b4:	83 c4 04             	add    $0x4,%esp
}
   103b7:	90                   	nop
   103b8:	c9                   	leave  
   103b9:	c3                   	ret    

000103ba <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   103ba:	55                   	push   %ebp
   103bb:	89 e5                	mov    %esp,%ebp
   103bd:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 50 1c             	mov    0x1c(%eax),%edx
   103c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103c7:	29 d0                	sub    %edx,%eax
   103c9:	89 c1                	mov    %eax,%ecx
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	8b 58 24             	mov    0x24(%eax),%ebx
   103d1:	89 c8                	mov    %ecx,%eax
   103d3:	ba 00 00 00 00       	mov    $0x0,%edx
   103d8:	f7 f3                	div    %ebx
}
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103e5:	ff 75 0c             	push   0xc(%ebp)
   103e8:	ff 75 08             	push   0x8(%ebp)
   103eb:	e8 ca ff ff ff       	call   103ba <page_index>
   103f0:	83 c4 08             	add    $0x8,%esp
   103f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103f6:	8b 45 08             	mov    0x8(%ebp),%eax
   103f9:	83 ec 0c             	sub    $0xc,%esp
   103fc:	50                   	push   %eax
   103fd:	e8 1f 71 00 00       	call   17521 <mutex_lock>
   10402:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   10405:	8b 55 08             	mov    0x8(%ebp),%edx
   10408:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1040b:	01 d0                	add    %edx,%eax
   1040d:	83 c0 28             	add    $0x28,%eax
   10410:	0f b6 00             	movzbl (%eax),%eax
   10413:	8d 50 01             	lea    0x1(%eax),%edx
   10416:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10419:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	83 c0 28             	add    $0x28,%eax
   10421:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	83 ec 0c             	sub    $0xc,%esp
   10429:	50                   	push   %eax
   1042a:	e8 98 71 00 00       	call   175c7 <mutex_unlock>
   1042f:	83 c4 10             	add    $0x10,%esp
 }
   10432:	90                   	nop
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1043b:	ff 75 0c             	push   0xc(%ebp)
   1043e:	ff 75 08             	push   0x8(%ebp)
   10441:	e8 74 ff ff ff       	call   103ba <page_index>
   10446:	83 c4 08             	add    $0x8,%esp
   10449:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1044c:	8b 45 08             	mov    0x8(%ebp),%eax
   1044f:	83 ec 0c             	sub    $0xc,%esp
   10452:	50                   	push   %eax
   10453:	e8 c9 70 00 00       	call   17521 <mutex_lock>
   10458:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1045b:	8b 55 08             	mov    0x8(%ebp),%edx
   1045e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10461:	01 d0                	add    %edx,%eax
   10463:	83 c0 28             	add    $0x28,%eax
   10466:	0f b6 00             	movzbl (%eax),%eax
   10469:	84 c0                	test   %al,%al
   1046b:	74 1e                	je     1048b <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   1046d:	8b 55 08             	mov    0x8(%ebp),%edx
   10470:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10473:	01 d0                	add    %edx,%eax
   10475:	83 c0 28             	add    $0x28,%eax
   10478:	0f b6 00             	movzbl (%eax),%eax
   1047b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1047e:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10481:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10484:	01 c8                	add    %ecx,%eax
   10486:	83 c0 28             	add    $0x28,%eax
   10489:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	83 ec 0c             	sub    $0xc,%esp
   10491:	50                   	push   %eax
   10492:	e8 30 71 00 00       	call   175c7 <mutex_unlock>
   10497:	83 c4 10             	add    $0x10,%esp
 }
   1049a:	90                   	nop
   1049b:	c9                   	leave  
   1049c:	c3                   	ret    

0001049d <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   1049d:	55                   	push   %ebp
   1049e:	89 e5                	mov    %esp,%ebp
   104a0:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   104a3:	ff 75 0c             	push   0xc(%ebp)
   104a6:	ff 75 08             	push   0x8(%ebp)
   104a9:	e8 0c ff ff ff       	call   103ba <page_index>
   104ae:	83 c4 08             	add    $0x8,%esp
   104b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   104b4:	8b 45 08             	mov    0x8(%ebp),%eax
   104b7:	83 ec 0c             	sub    $0xc,%esp
   104ba:	50                   	push   %eax
   104bb:	e8 61 70 00 00       	call   17521 <mutex_lock>
   104c0:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104c3:	8b 55 08             	mov    0x8(%ebp),%edx
   104c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c9:	01 d0                	add    %edx,%eax
   104cb:	83 c0 28             	add    $0x28,%eax
   104ce:	0f b6 00             	movzbl (%eax),%eax
   104d1:	0f b6 c0             	movzbl %al,%eax
   104d4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104d7:	8b 45 08             	mov    0x8(%ebp),%eax
   104da:	83 ec 0c             	sub    $0xc,%esp
   104dd:	50                   	push   %eax
   104de:	e8 e4 70 00 00       	call   175c7 <mutex_unlock>
   104e3:	83 c4 10             	add    $0x10,%esp

  return ref;
   104e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104e9:	c9                   	leave  
   104ea:	c3                   	ret    

000104eb <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104eb:	55                   	push   %ebp
   104ec:	89 e5                	mov    %esp,%ebp
   104ee:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104f1:	8b 45 08             	mov    0x8(%ebp),%eax
   104f4:	83 ec 0c             	sub    $0xc,%esp
   104f7:	50                   	push   %eax
   104f8:	e8 24 70 00 00       	call   17521 <mutex_lock>
   104fd:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   10500:	8b 45 08             	mov    0x8(%ebp),%eax
   10503:	8b 40 20             	mov    0x20(%eax),%eax
   10506:	8b 55 08             	mov    0x8(%ebp),%edx
   10509:	8b 4a 24             	mov    0x24(%edx),%ecx
   1050c:	ba 00 00 00 00       	mov    $0x0,%edx
   10511:	f7 f1                	div    %ecx
   10513:	89 c2                	mov    %eax,%edx
   10515:	8b 45 08             	mov    0x8(%ebp),%eax
   10518:	83 c0 28             	add    $0x28,%eax
   1051b:	83 ec 04             	sub    $0x4,%esp
   1051e:	52                   	push   %edx
   1051f:	6a 00                	push   $0x0
   10521:	50                   	push   %eax
   10522:	e8 3e 7c 00 00       	call   18165 <kernel_memset>
   10527:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1052a:	8b 45 08             	mov    0x8(%ebp),%eax
   1052d:	83 ec 0c             	sub    $0xc,%esp
   10530:	50                   	push   %eax
   10531:	e8 91 70 00 00       	call   175c7 <mutex_unlock>
   10536:	83 c4 10             	add    $0x10,%esp
}
   10539:	90                   	nop
   1053a:	c9                   	leave  
   1053b:	c3                   	ret    

0001053c <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1053c:	55                   	push   %ebp
   1053d:	89 e5                	mov    %esp,%ebp
   1053f:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	83 ec 0c             	sub    $0xc,%esp
   10548:	50                   	push   %eax
   10549:	e8 86 6f 00 00       	call   174d4 <mutex_init>
   1054e:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10551:	8b 45 08             	mov    0x8(%ebp),%eax
   10554:	8b 55 10             	mov    0x10(%ebp),%edx
   10557:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 55 14             	mov    0x14(%ebp),%edx
   10560:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10563:	8b 45 08             	mov    0x8(%ebp),%eax
   10566:	8b 55 18             	mov    0x18(%ebp),%edx
   10569:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1056c:	8b 45 08             	mov    0x8(%ebp),%eax
   1056f:	8b 40 20             	mov    0x20(%eax),%eax
   10572:	8b 55 08             	mov    0x8(%ebp),%edx
   10575:	8b 4a 24             	mov    0x24(%edx),%ecx
   10578:	ba 00 00 00 00       	mov    $0x0,%edx
   1057d:	f7 f1                	div    %ecx
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 08             	mov    0x8(%ebp),%eax
   10584:	83 c0 14             	add    $0x14,%eax
   10587:	6a 00                	push   $0x0
   10589:	52                   	push   %edx
   1058a:	ff 75 0c             	push   0xc(%ebp)
   1058d:	50                   	push   %eax
   1058e:	e8 05 77 00 00       	call   17c98 <bitmap_init>
   10593:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	8b 40 20             	mov    0x20(%eax),%eax
   1059c:	8b 55 08             	mov    0x8(%ebp),%edx
   1059f:	8b 4a 24             	mov    0x24(%edx),%ecx
   105a2:	ba 00 00 00 00       	mov    $0x0,%edx
   105a7:	f7 f1                	div    %ecx
   105a9:	89 c2                	mov    %eax,%edx
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	83 c0 28             	add    $0x28,%eax
   105b1:	83 ec 04             	sub    $0x4,%esp
   105b4:	52                   	push   %edx
   105b5:	6a 00                	push   $0x0
   105b7:	50                   	push   %eax
   105b8:	e8 a8 7b 00 00       	call   18165 <kernel_memset>
   105bd:	83 c4 10             	add    $0x10,%esp
}
   105c0:	90                   	nop
   105c1:	c9                   	leave  
   105c2:	c3                   	ret    

000105c3 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105c3:	55                   	push   %ebp
   105c4:	89 e5                	mov    %esp,%ebp
   105c6:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105d0:	8b 45 08             	mov    0x8(%ebp),%eax
   105d3:	83 ec 0c             	sub    $0xc,%esp
   105d6:	50                   	push   %eax
   105d7:	e8 45 6f 00 00       	call   17521 <mutex_lock>
   105dc:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	83 c0 14             	add    $0x14,%eax
   105e5:	83 ec 04             	sub    $0x4,%esp
   105e8:	ff 75 0c             	push   0xc(%ebp)
   105eb:	6a 00                	push   $0x0
   105ed:	50                   	push   %eax
   105ee:	e8 da 78 00 00       	call   17ecd <bitmap_alloc_nbits>
   105f3:	83 c4 10             	add    $0x10,%esp
   105f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105fd:	78 17                	js     10616 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	8b 50 24             	mov    0x24(%eax),%edx
   1060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060e:	0f af c2             	imul   %edx,%eax
   10611:	01 c8                	add    %ecx,%eax
   10613:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	83 ec 0c             	sub    $0xc,%esp
   1061c:	50                   	push   %eax
   1061d:	e8 a5 6f 00 00       	call   175c7 <mutex_unlock>
   10622:	83 c4 10             	add    $0x10,%esp

  return addr;
   10625:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10628:	c9                   	leave  
   10629:	c3                   	ret    

0001062a <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1062a:	55                   	push   %ebp
   1062b:	89 e5                	mov    %esp,%ebp
   1062d:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10630:	8b 45 08             	mov    0x8(%ebp),%eax
   10633:	83 ec 0c             	sub    $0xc,%esp
   10636:	50                   	push   %eax
   10637:	e8 e5 6e 00 00       	call   17521 <mutex_lock>
   1063c:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   1063f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10646:	eb 64                	jmp    106ac <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   10648:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1064b:	c1 e0 0c             	shl    $0xc,%eax
   1064e:	89 c2                	mov    %eax,%edx
   10650:	8b 45 0c             	mov    0xc(%ebp),%eax
   10653:	01 d0                	add    %edx,%eax
   10655:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   10658:	83 ec 08             	sub    $0x8,%esp
   1065b:	ff 75 f0             	push   -0x10(%ebp)
   1065e:	ff 75 08             	push   0x8(%ebp)
   10661:	e8 cf fd ff ff       	call   10435 <page_ref_sub>
   10666:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   10669:	83 ec 08             	sub    $0x8,%esp
   1066c:	ff 75 f0             	push   -0x10(%ebp)
   1066f:	ff 75 08             	push   0x8(%ebp)
   10672:	e8 26 fe ff ff       	call   1049d <get_page_ref>
   10677:	83 c4 10             	add    $0x10,%esp
   1067a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   1067d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10681:	75 25                	jne    106a8 <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10683:	83 ec 08             	sub    $0x8,%esp
   10686:	ff 75 f0             	push   -0x10(%ebp)
   10689:	ff 75 08             	push   0x8(%ebp)
   1068c:	e8 29 fd ff ff       	call   103ba <page_index>
   10691:	83 c4 10             	add    $0x10,%esp
   10694:	8b 55 08             	mov    0x8(%ebp),%edx
   10697:	83 c2 14             	add    $0x14,%edx
   1069a:	6a 00                	push   $0x0
   1069c:	6a 01                	push   $0x1
   1069e:	50                   	push   %eax
   1069f:	52                   	push   %edx
   106a0:	e8 ff 76 00 00       	call   17da4 <bitmap_set_bit>
   106a5:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   106a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106af:	3b 45 10             	cmp    0x10(%ebp),%eax
   106b2:	7c 94                	jl     10648 <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	83 ec 0c             	sub    $0xc,%esp
   106ba:	50                   	push   %eax
   106bb:	e8 07 6f 00 00       	call   175c7 <mutex_unlock>
   106c0:	83 c4 10             	add    $0x10,%esp
}
   106c3:	90                   	nop
   106c4:	c9                   	leave  
   106c5:	c3                   	ret    

000106c6 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106c6:	55                   	push   %ebp
   106c7:	89 e5                	mov    %esp,%ebp
   106c9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106cc:	83 ec 0c             	sub    $0xc,%esp
   106cf:	68 00 8a 01 00       	push   $0x18a00
   106d4:	e8 89 82 00 00       	call   18962 <log_printf>
   106d9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106e3:	eb 29                	jmp    1070e <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106e5:	8b 45 08             	mov    0x8(%ebp),%eax
   106e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106eb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106ef:	8b 45 08             	mov    0x8(%ebp),%eax
   106f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106f5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106f8:	52                   	push   %edx
   106f9:	50                   	push   %eax
   106fa:	ff 75 f4             	push   -0xc(%ebp)
   106fd:	68 0d 8a 01 00       	push   $0x18a0d
   10702:	e8 5b 82 00 00       	call   18962 <log_printf>
   10707:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1070a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1070e:	8b 45 08             	mov    0x8(%ebp),%eax
   10711:	8b 40 50             	mov    0x50(%eax),%eax
   10714:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10717:	7c cc                	jl     106e5 <show_mem_info+0x1f>
    }

    log_printf("\n");
   10719:	83 ec 0c             	sub    $0xc,%esp
   1071c:	68 20 8a 01 00       	push   $0x18a20
   10721:	e8 3c 82 00 00       	call   18962 <log_printf>
   10726:	83 c4 10             	add    $0x10,%esp
}
   10729:	90                   	nop
   1072a:	c9                   	leave  
   1072b:	c3                   	ret    

0001072c <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1072c:	55                   	push   %ebp
   1072d:	89 e5                	mov    %esp,%ebp
   1072f:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10732:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10739:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10740:	eb 11                	jmp    10753 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10742:	8b 45 08             	mov    0x8(%ebp),%eax
   10745:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10748:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1074c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1074f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10753:	8b 45 08             	mov    0x8(%ebp),%eax
   10756:	8b 40 50             	mov    0x50(%eax),%eax
   10759:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1075c:	7c e4                	jl     10742 <total_mem_size+0x16>
    }

    return mem_size;
   1075e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10761:	c9                   	leave  
   10762:	c3                   	ret    

00010763 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10763:	55                   	push   %ebp
   10764:	89 e5                	mov    %esp,%ebp
   10766:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10769:	ff 75 0c             	push   0xc(%ebp)
   1076c:	e8 c0 fb ff ff       	call   10331 <pde_index>
   10771:	83 c4 04             	add    $0x4,%esp
   10774:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	01 d0                	add    %edx,%eax
   10780:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10783:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10786:	0f b6 00             	movzbl (%eax),%eax
   10789:	83 e0 01             	and    $0x1,%eax
   1078c:	84 c0                	test   %al,%al
   1078e:	74 10                	je     107a0 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10790:	ff 75 f0             	push   -0x10(%ebp)
   10793:	e8 b4 fb ff ff       	call   1034c <pde_to_pt_addr>
   10798:	83 c4 04             	add    $0x4,%esp
   1079b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1079e:	eb 57                	jmp    107f7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   107a0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   107a4:	75 07                	jne    107ad <find_pte+0x4a>
      return (pte_t*)0;
   107a6:	b8 00 00 00 00       	mov    $0x0,%eax
   107ab:	eb 64                	jmp    10811 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   107ad:	83 ec 08             	sub    $0x8,%esp
   107b0:	6a 01                	push   $0x1
   107b2:	68 00 c0 01 00       	push   $0x1c000
   107b7:	e8 07 fe ff ff       	call   105c3 <addr_alloc_page>
   107bc:	83 c4 10             	add    $0x10,%esp
   107bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107c6:	75 07                	jne    107cf <find_pte+0x6c>
      return (pte_t*)0;
   107c8:	b8 00 00 00 00       	mov    $0x0,%eax
   107cd:	eb 42                	jmp    10811 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107d5:	83 ec 04             	sub    $0x4,%esp
   107d8:	68 00 10 00 00       	push   $0x1000
   107dd:	6a 00                	push   $0x0
   107df:	ff 75 f4             	push   -0xc(%ebp)
   107e2:	e8 7e 79 00 00       	call   18165 <kernel_memset>
   107e7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ed:	83 c8 07             	or     $0x7,%eax
   107f0:	89 c2                	mov    %eax,%edx
   107f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107f7:	83 ec 0c             	sub    $0xc,%esp
   107fa:	ff 75 0c             	push   0xc(%ebp)
   107fd:	e8 3a fb ff ff       	call   1033c <pte_index>
   10802:	83 c4 10             	add    $0x10,%esp
   10805:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1080c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080f:	01 d0                	add    %edx,%eax

}
   10811:	c9                   	leave  
   10812:	c3                   	ret    

00010813 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   10813:	55                   	push   %ebp
   10814:	89 e5                	mov    %esp,%ebp
   10816:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   10819:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10820:	e9 91 00 00 00       	jmp    108b6 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10825:	83 ec 04             	sub    $0x4,%esp
   10828:	6a 01                	push   $0x1
   1082a:	ff 75 0c             	push   0xc(%ebp)
   1082d:	ff 75 08             	push   0x8(%ebp)
   10830:	e8 2e ff ff ff       	call   10763 <find_pte>
   10835:	83 c4 10             	add    $0x10,%esp
   10838:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1083b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1083f:	75 17                	jne    10858 <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10841:	83 ec 0c             	sub    $0xc,%esp
   10844:	68 22 8a 01 00       	push   $0x18a22
   10849:	e8 14 81 00 00       	call   18962 <log_printf>
   1084e:	83 c4 10             	add    $0x10,%esp
      return -1;
   10851:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10856:	eb 6f                	jmp    108c7 <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085b:	0f b6 00             	movzbl (%eax),%eax
   1085e:	83 e0 01             	and    $0x1,%eax
   10861:	84 c0                	test   %al,%al
   10863:	74 1c                	je     10881 <memory_creat_map+0x6e>
   10865:	68 3d 8a 01 00       	push   $0x18a3d
   1086a:	68 9c 8b 01 00       	push   $0x18b9c
   1086f:	68 1d 01 00 00       	push   $0x11d
   10874:	68 50 8a 01 00       	push   $0x18a50
   10879:	e8 ce 73 00 00       	call   17c4c <pannic>
   1087e:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10881:	8b 45 10             	mov    0x10(%ebp),%eax
   10884:	0b 45 18             	or     0x18(%ebp),%eax
   10887:	83 c8 01             	or     $0x1,%eax
   1088a:	89 c2                	mov    %eax,%edx
   1088c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088f:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10891:	83 ec 08             	sub    $0x8,%esp
   10894:	ff 75 10             	push   0x10(%ebp)
   10897:	68 00 c0 01 00       	push   $0x1c000
   1089c:	e8 3e fb ff ff       	call   103df <page_ref_add>
   108a1:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   108a4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   108ab:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   108b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108b9:	3b 45 14             	cmp    0x14(%ebp),%eax
   108bc:	0f 8c 63 ff ff ff    	jl     10825 <memory_creat_map+0x12>

  }

  return 1;
   108c2:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108c7:	c9                   	leave  
   108c8:	c3                   	ret    

000108c9 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108d6:	e9 92 00 00 00       	jmp    1096d <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108de:	c1 e0 04             	shl    $0x4,%eax
   108e1:	05 00 b0 01 00       	add    $0x1b000,%eax
   108e6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108ec:	8b 00                	mov    (%eax),%eax
   108ee:	68 00 10 00 00       	push   $0x1000
   108f3:	50                   	push   %eax
   108f4:	e8 08 fa ff ff       	call   10301 <down2>
   108f9:	83 c4 08             	add    $0x8,%esp
   108fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 08             	mov    0x8(%eax),%eax
   10905:	68 00 10 00 00       	push   $0x1000
   1090a:	50                   	push   %eax
   1090b:	e8 f1 f9 ff ff       	call   10301 <down2>
   10910:	83 c4 08             	add    $0x8,%esp
   10913:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10916:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10919:	8b 40 04             	mov    0x4(%eax),%eax
   1091c:	68 00 10 00 00       	push   $0x1000
   10921:	50                   	push   %eax
   10922:	e8 e7 f9 ff ff       	call   1030e <up2>
   10927:	83 c4 08             	add    $0x8,%esp
   1092a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1092d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10930:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10933:	c1 e8 0c             	shr    $0xc,%eax
   10936:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   10939:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1093c:	8b 40 0c             	mov    0xc(%eax),%eax
   1093f:	83 ec 0c             	sub    $0xc,%esp
   10942:	50                   	push   %eax
   10943:	ff 75 e0             	push   -0x20(%ebp)
   10946:	ff 75 e8             	push   -0x18(%ebp)
   10949:	ff 75 ec             	push   -0x14(%ebp)
   1094c:	68 00 40 02 00       	push   $0x24000
   10951:	e8 bd fe ff ff       	call   10813 <memory_creat_map>
   10956:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   10959:	83 ec 0c             	sub    $0xc,%esp
   1095c:	68 00 c0 01 00       	push   $0x1c000
   10961:	e8 85 fb ff ff       	call   104eb <clear_page_ref>
   10966:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10969:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1096d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10970:	83 f8 04             	cmp    $0x4,%eax
   10973:	0f 86 62 ff ff ff    	jbe    108db <create_kernal_table+0x12>

  }
}
   10979:	90                   	nop
   1097a:	90                   	nop
   1097b:	c9                   	leave  
   1097c:	c3                   	ret    

0001097d <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   1097d:	55                   	push   %ebp
   1097e:	89 e5                	mov    %esp,%ebp
   10980:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10983:	83 ec 08             	sub    $0x8,%esp
   10986:	6a 01                	push   $0x1
   10988:	68 00 c0 01 00       	push   $0x1c000
   1098d:	e8 31 fc ff ff       	call   105c3 <addr_alloc_page>
   10992:	83 c4 10             	add    $0x10,%esp
   10995:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10998:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1099c:	75 07                	jne    109a5 <memory_creat_uvm+0x28>
   1099e:	b8 00 00 00 00       	mov    $0x0,%eax
   109a3:	eb 5b                	jmp    10a00 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   109a5:	83 ec 04             	sub    $0x4,%esp
   109a8:	68 00 10 00 00       	push   $0x1000
   109ad:	6a 00                	push   $0x0
   109af:	ff 75 f0             	push   -0x10(%ebp)
   109b2:	e8 ae 77 00 00       	call   18165 <kernel_memset>
   109b7:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ba:	83 ec 0c             	sub    $0xc,%esp
   109bd:	68 00 00 00 80       	push   $0x80000000
   109c2:	e8 6a f9 ff ff       	call   10331 <pde_index>
   109c7:	83 c4 10             	add    $0x10,%esp
   109ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109d4:	eb 1f                	jmp    109f5 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109e3:	01 c2                	add    %eax,%edx
   109e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109e8:	8b 04 85 00 40 02 00 	mov    0x24000(,%eax,4),%eax
   109ef:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109fb:	77 d9                	ja     109d6 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10a00:	c9                   	leave  
   10a01:	c3                   	ret    

00010a02 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   10a02:	55                   	push   %ebp
   10a03:	89 e5                	mov    %esp,%ebp
   10a05:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10a08:	68 00 00 00 80       	push   $0x80000000
   10a0d:	e8 1f f9 ff ff       	call   10331 <pde_index>
   10a12:	83 c4 04             	add    $0x4,%esp
   10a15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   10a18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a22:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a25:	01 d0                	add    %edx,%eax
   10a27:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a30:	e9 2a 01 00 00       	jmp    10b5f <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a38:	0f b6 00             	movzbl (%eax),%eax
   10a3b:	83 e0 01             	and    $0x1,%eax
   10a3e:	84 c0                	test   %al,%al
   10a40:	0f 84 10 01 00 00    	je     10b56 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a46:	ff 75 f4             	push   -0xc(%ebp)
   10a49:	e8 fe f8 ff ff       	call   1034c <pde_to_pt_addr>
   10a4e:	83 c4 04             	add    $0x4,%esp
   10a51:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a54:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a5b:	e9 e7 00 00 00       	jmp    10b47 <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a63:	0f b6 00             	movzbl (%eax),%eax
   10a66:	83 e0 01             	and    $0x1,%eax
   10a69:	84 c0                	test   %al,%al
   10a6b:	0f 84 cd 00 00 00    	je     10b3e <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a74:	c1 e0 16             	shl    $0x16,%eax
   10a77:	89 c2                	mov    %eax,%edx
   10a79:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a7c:	c1 e0 0c             	shl    $0xc,%eax
   10a7f:	09 d0                	or     %edx,%eax
   10a81:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a87:	8b 00                	mov    (%eax),%eax
   10a89:	83 e0 02             	and    $0x2,%eax
   10a8c:	85 c0                	test   %eax,%eax
   10a8e:	74 6c                	je     10afc <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	6a 01                	push   $0x1
   10a95:	68 00 c0 01 00       	push   $0x1c000
   10a9a:	e8 24 fb ff ff       	call   105c3 <addr_alloc_page>
   10a9f:	83 c4 10             	add    $0x10,%esp
   10aa2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10aa5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10aa9:	0f 84 c4 00 00 00    	je     10b73 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10aaf:	83 ec 0c             	sub    $0xc,%esp
   10ab2:	ff 75 ec             	push   -0x14(%ebp)
   10ab5:	e8 e0 f8 ff ff       	call   1039a <get_pte_privilege>
   10aba:	83 c4 10             	add    $0x10,%esp
   10abd:	8b 55 08             	mov    0x8(%ebp),%edx
   10ac0:	83 ec 0c             	sub    $0xc,%esp
   10ac3:	50                   	push   %eax
   10ac4:	6a 01                	push   $0x1
   10ac6:	ff 75 d4             	push   -0x2c(%ebp)
   10ac9:	ff 75 e0             	push   -0x20(%ebp)
   10acc:	52                   	push   %edx
   10acd:	e8 41 fd ff ff       	call   10813 <memory_creat_map>
   10ad2:	83 c4 20             	add    $0x20,%esp
   10ad5:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10ad8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10adc:	0f 88 94 00 00 00    	js     10b76 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ae2:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10ae8:	83 ec 04             	sub    $0x4,%esp
   10aeb:	68 00 10 00 00       	push   $0x1000
   10af0:	52                   	push   %edx
   10af1:	50                   	push   %eax
   10af2:	e8 1f 76 00 00       	call   18116 <kernel_memcpy>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	eb 43                	jmp    10b3f <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10afc:	83 ec 0c             	sub    $0xc,%esp
   10aff:	ff 75 ec             	push   -0x14(%ebp)
   10b02:	e8 6c f8 ff ff       	call   10373 <pte_to_pg_addr>
   10b07:	83 c4 10             	add    $0x10,%esp
   10b0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10b0d:	83 ec 0c             	sub    $0xc,%esp
   10b10:	ff 75 ec             	push   -0x14(%ebp)
   10b13:	e8 82 f8 ff ff       	call   1039a <get_pte_privilege>
   10b18:	83 c4 10             	add    $0x10,%esp
   10b1b:	8b 55 08             	mov    0x8(%ebp),%edx
   10b1e:	83 ec 0c             	sub    $0xc,%esp
   10b21:	50                   	push   %eax
   10b22:	6a 01                	push   $0x1
   10b24:	ff 75 dc             	push   -0x24(%ebp)
   10b27:	ff 75 e0             	push   -0x20(%ebp)
   10b2a:	52                   	push   %edx
   10b2b:	e8 e3 fc ff ff       	call   10813 <memory_creat_map>
   10b30:	83 c4 20             	add    $0x20,%esp
   10b33:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b36:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b3a:	78 3d                	js     10b79 <memory_copy_uvm+0x177>
   10b3c:	eb 01                	jmp    10b3f <memory_copy_uvm+0x13d>
        continue;
   10b3e:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b3f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b43:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b47:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b4e:	0f 8e 0c ff ff ff    	jle    10a60 <memory_copy_uvm+0x5e>
   10b54:	eb 01                	jmp    10b57 <memory_copy_uvm+0x155>
      continue;
   10b56:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b57:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b5b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b5f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b66:	0f 8e c9 fe ff ff    	jle    10a35 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b6c:	b8 01 00 00 00       	mov    $0x1,%eax
   10b71:	eb 1a                	jmp    10b8d <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b73:	90                   	nop
   10b74:	eb 04                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b76:	90                   	nop
   10b77:	eb 01                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b79:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b7a:	83 ec 0c             	sub    $0xc,%esp
   10b7d:	ff 75 08             	push   0x8(%ebp)
   10b80:	e8 0a 00 00 00       	call   10b8f <memory_destroy_uvm>
   10b85:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b8d:	c9                   	leave  
   10b8e:	c3                   	ret    

00010b8f <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b8f:	55                   	push   %ebp
   10b90:	89 e5                	mov    %esp,%ebp
   10b92:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b95:	68 00 00 00 80       	push   $0x80000000
   10b9a:	e8 92 f7 ff ff       	call   10331 <pde_index>
   10b9f:	83 c4 04             	add    $0x4,%esp
   10ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10ba5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ba8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	01 d0                	add    %edx,%eax
   10bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10bb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10bba:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10bbd:	e9 8f 00 00 00       	jmp    10c51 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc5:	0f b6 00             	movzbl (%eax),%eax
   10bc8:	83 e0 01             	and    $0x1,%eax
   10bcb:	84 c0                	test   %al,%al
   10bcd:	74 79                	je     10c48 <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bcf:	ff 75 f4             	push   -0xc(%ebp)
   10bd2:	e8 75 f7 ff ff       	call   1034c <pde_to_pt_addr>
   10bd7:	83 c4 04             	add    $0x4,%esp
   10bda:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bdd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10be4:	eb 36                	jmp    10c1c <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10be6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10be9:	0f b6 00             	movzbl (%eax),%eax
   10bec:	83 e0 01             	and    $0x1,%eax
   10bef:	84 c0                	test   %al,%al
   10bf1:	74 20                	je     10c13 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bf3:	ff 75 ec             	push   -0x14(%ebp)
   10bf6:	e8 78 f7 ff ff       	call   10373 <pte_to_pg_addr>
   10bfb:	83 c4 04             	add    $0x4,%esp
   10bfe:	83 ec 04             	sub    $0x4,%esp
   10c01:	6a 01                	push   $0x1
   10c03:	50                   	push   %eax
   10c04:	68 00 c0 01 00       	push   $0x1c000
   10c09:	e8 1c fa ff ff       	call   1062a <addr_free_page>
   10c0e:	83 c4 10             	add    $0x10,%esp
   10c11:	eb 01                	jmp    10c14 <memory_destroy_uvm+0x85>
        continue;
   10c13:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10c14:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10c18:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10c1c:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c23:	7e c1                	jle    10be6 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c25:	83 ec 0c             	sub    $0xc,%esp
   10c28:	ff 75 f4             	push   -0xc(%ebp)
   10c2b:	e8 1c f7 ff ff       	call   1034c <pde_to_pt_addr>
   10c30:	83 c4 10             	add    $0x10,%esp
   10c33:	83 ec 04             	sub    $0x4,%esp
   10c36:	6a 01                	push   $0x1
   10c38:	50                   	push   %eax
   10c39:	68 00 c0 01 00       	push   $0x1c000
   10c3e:	e8 e7 f9 ff ff       	call   1062a <addr_free_page>
   10c43:	83 c4 10             	add    $0x10,%esp
   10c46:	eb 01                	jmp    10c49 <memory_destroy_uvm+0xba>
        continue;
   10c48:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c49:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c4d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c51:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c58:	0f 8e 64 ff ff ff    	jle    10bc2 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c5e:	83 ec 04             	sub    $0x4,%esp
   10c61:	6a 01                	push   $0x1
   10c63:	ff 75 08             	push   0x8(%ebp)
   10c66:	68 00 c0 01 00       	push   $0x1c000
   10c6b:	e8 ba f9 ff ff       	call   1062a <addr_free_page>
   10c70:	83 c4 10             	add    $0x10,%esp
}
   10c73:	90                   	nop
   10c74:	c9                   	leave  
   10c75:	c3                   	ret    

00010c76 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c76:	55                   	push   %ebp
   10c77:	89 e5                	mov    %esp,%ebp
   10c79:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c7c:	83 ec 0c             	sub    $0xc,%esp
   10c7f:	68 87 8a 01 00       	push   $0x18a87
   10c84:	e8 d9 7c 00 00       	call   18962 <log_printf>
   10c89:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c8c:	83 ec 08             	sub    $0x8,%esp
   10c8f:	68 96 93 07 00       	push   $0x79396
   10c94:	68 94 8a 01 00       	push   $0x18a94
   10c99:	e8 c4 7c 00 00       	call   18962 <log_printf>
   10c9e:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	ff 75 08             	push   0x8(%ebp)
   10ca7:	e8 1a fa ff ff       	call   106c6 <show_mem_info>
   10cac:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10caf:	83 ec 0c             	sub    $0xc,%esp
   10cb2:	ff 75 08             	push   0x8(%ebp)
   10cb5:	e8 72 fa ff ff       	call   1072c <total_mem_size>
   10cba:	83 c4 10             	add    $0x10,%esp
   10cbd:	2d 00 00 10 00       	sub    $0x100000,%eax
   10cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10cc5:	83 ec 08             	sub    $0x8,%esp
   10cc8:	68 00 10 00 00       	push   $0x1000
   10ccd:	ff 75 f4             	push   -0xc(%ebp)
   10cd0:	e8 2c f6 ff ff       	call   10301 <down2>
   10cd5:	83 c4 10             	add    $0x10,%esp
   10cd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cdb:	83 ec 04             	sub    $0x4,%esp
   10cde:	ff 75 f4             	push   -0xc(%ebp)
   10ce1:	68 00 00 10 00       	push   $0x100000
   10ce6:	68 ac 8a 01 00       	push   $0x18aac
   10ceb:	e8 72 7c 00 00       	call   18962 <log_printf>
   10cf0:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cf3:	c7 45 f0 96 93 07 00 	movl   $0x79396,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cfa:	83 ec 0c             	sub    $0xc,%esp
   10cfd:	68 00 10 00 00       	push   $0x1000
   10d02:	ff 75 f4             	push   -0xc(%ebp)
   10d05:	68 00 00 10 00       	push   $0x100000
   10d0a:	ff 75 f0             	push   -0x10(%ebp)
   10d0d:	68 00 c0 01 00       	push   $0x1c000
   10d12:	e8 25 f8 ff ff       	call   1053c <addr_alloc_init>
   10d17:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10d1a:	a1 20 c0 01 00       	mov    0x1c020,%eax
   10d1f:	c1 e8 0c             	shr    $0xc,%eax
   10d22:	83 ec 0c             	sub    $0xc,%esp
   10d25:	50                   	push   %eax
   10d26:	e8 57 6f 00 00       	call   17c82 <bitmap_byte_count>
   10d2b:	83 c4 10             	add    $0x10,%esp
   10d2e:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d31:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d38:	76 1c                	jbe    10d56 <memory_init+0xe0>
   10d3a:	68 cc 8a 01 00       	push   $0x18acc
   10d3f:	68 b0 8b 01 00       	push   $0x18bb0
   10d44:	68 f8 01 00 00       	push   $0x1f8
   10d49:	68 50 8a 01 00       	push   $0x18a50
   10d4e:	e8 f9 6e 00 00       	call   17c4c <pannic>
   10d53:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d56:	e8 6e fb ff ff       	call   108c9 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d5b:	b8 00 40 02 00       	mov    $0x24000,%eax
   10d60:	83 ec 0c             	sub    $0xc,%esp
   10d63:	50                   	push   %eax
   10d64:	e8 40 f6 ff ff       	call   103a9 <mmu_set_page_dir>
   10d69:	83 c4 10             	add    $0x10,%esp
}
   10d6c:	90                   	nop
   10d6d:	c9                   	leave  
   10d6e:	c3                   	ret    

00010d6f <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d6f:	55                   	push   %ebp
   10d70:	89 e5                	mov    %esp,%ebp
   10d72:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d75:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d7b:	68 00 10 00 00       	push   $0x1000
   10d80:	ff 75 10             	push   0x10(%ebp)
   10d83:	e8 86 f5 ff ff       	call   1030e <up2>
   10d88:	83 c4 08             	add    $0x8,%esp
   10d8b:	c1 e8 0c             	shr    $0xc,%eax
   10d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d98:	eb 7a                	jmp    10e14 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d9a:	83 ec 08             	sub    $0x8,%esp
   10d9d:	6a 01                	push   $0x1
   10d9f:	68 00 c0 01 00       	push   $0x1c000
   10da4:	e8 1a f8 ff ff       	call   105c3 <addr_alloc_page>
   10da9:	83 c4 10             	add    $0x10,%esp
   10dac:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10daf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10db3:	75 17                	jne    10dcc <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10db5:	83 ec 0c             	sub    $0xc,%esp
   10db8:	68 f0 8a 01 00       	push   $0x18af0
   10dbd:	e8 a0 7b 00 00       	call   18962 <log_printf>
   10dc2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dca:	eb 59                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcf:	83 ec 0c             	sub    $0xc,%esp
   10dd2:	ff 75 14             	push   0x14(%ebp)
   10dd5:	6a 01                	push   $0x1
   10dd7:	ff 75 e8             	push   -0x18(%ebp)
   10dda:	ff 75 f4             	push   -0xc(%ebp)
   10ddd:	50                   	push   %eax
   10dde:	e8 30 fa ff ff       	call   10813 <memory_creat_map>
   10de3:	83 c4 20             	add    $0x20,%esp
   10de6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10de9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10ded:	79 1a                	jns    10e09 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10def:	83 ec 08             	sub    $0x8,%esp
   10df2:	ff 75 e4             	push   -0x1c(%ebp)
   10df5:	68 10 8b 01 00       	push   $0x18b10
   10dfa:	e8 63 7b 00 00       	call   18962 <log_printf>
   10dff:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10e02:	b8 00 00 00 00       	mov    $0x0,%eax
   10e07:	eb 1c                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10e09:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10e10:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e17:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10e1a:	0f 8c 7a ff ff ff    	jl     10d9a <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e25:	c9                   	leave  
   10e26:	c3                   	ret    

00010e27 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e27:	55                   	push   %ebp
   10e28:	89 e5                	mov    %esp,%ebp
   10e2a:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e2d:	e8 7f 0b 00 00       	call   119b1 <task_current>
   10e32:	8b 40 78             	mov    0x78(%eax),%eax
   10e35:	ff 75 10             	push   0x10(%ebp)
   10e38:	ff 75 0c             	push   0xc(%ebp)
   10e3b:	ff 75 08             	push   0x8(%ebp)
   10e3e:	50                   	push   %eax
   10e3f:	e8 2b ff ff ff       	call   10d6f <memory_alloc_for_page_dir>
   10e44:	83 c4 10             	add    $0x10,%esp
}
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp
   10e4c:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e4f:	e8 5d 0b 00 00       	call   119b1 <task_current>
   10e54:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e57:	c9                   	leave  
   10e58:	c3                   	ret    

00010e59 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e59:	55                   	push   %ebp
   10e5a:	89 e5                	mov    %esp,%ebp
   10e5c:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e5f:	83 ec 08             	sub    $0x8,%esp
   10e62:	6a 01                	push   $0x1
   10e64:	68 00 c0 01 00       	push   $0x1c000
   10e69:	e8 55 f7 ff ff       	call   105c3 <addr_alloc_page>
   10e6e:	83 c4 10             	add    $0x10,%esp
   10e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e77:	c9                   	leave  
   10e78:	c3                   	ret    

00010e79 <memory_free_page>:
/**
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */
void memory_free_page(uint32_t addr) {
   10e79:	55                   	push   %ebp
   10e7a:	89 e5                	mov    %esp,%ebp
   10e7c:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e82:	85 c0                	test   %eax,%eax
   10e84:	78 17                	js     10e9d <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e86:	83 ec 04             	sub    $0x4,%esp
   10e89:	6a 01                	push   $0x1
   10e8b:	ff 75 08             	push   0x8(%ebp)
   10e8e:	68 00 c0 01 00       	push   $0x1c000
   10e93:	e8 92 f7 ff ff       	call   1062a <addr_free_page>
   10e98:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e9b:	eb 72                	jmp    10f0f <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e9d:	e8 a7 ff ff ff       	call   10e49 <curr_page_dir>
   10ea2:	83 ec 04             	sub    $0x4,%esp
   10ea5:	6a 00                	push   $0x0
   10ea7:	ff 75 08             	push   0x8(%ebp)
   10eaa:	50                   	push   %eax
   10eab:	e8 b3 f8 ff ff       	call   10763 <find_pte>
   10eb0:	83 c4 10             	add    $0x10,%esp
   10eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10eb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10eba:	74 0d                	je     10ec9 <memory_free_page+0x50>
   10ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ebf:	0f b6 00             	movzbl (%eax),%eax
   10ec2:	83 e0 01             	and    $0x1,%eax
   10ec5:	84 c0                	test   %al,%al
   10ec7:	75 1c                	jne    10ee5 <memory_free_page+0x6c>
   10ec9:	68 30 8b 01 00       	push   $0x18b30
   10ece:	68 bc 8b 01 00       	push   $0x18bbc
   10ed3:	68 59 02 00 00       	push   $0x259
   10ed8:	68 50 8a 01 00       	push   $0x18a50
   10edd:	e8 6a 6d 00 00       	call   17c4c <pannic>
   10ee2:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ee5:	83 ec 0c             	sub    $0xc,%esp
   10ee8:	ff 75 f4             	push   -0xc(%ebp)
   10eeb:	e8 83 f4 ff ff       	call   10373 <pte_to_pg_addr>
   10ef0:	83 c4 10             	add    $0x10,%esp
   10ef3:	83 ec 04             	sub    $0x4,%esp
   10ef6:	6a 01                	push   $0x1
   10ef8:	50                   	push   %eax
   10ef9:	68 00 c0 01 00       	push   $0x1c000
   10efe:	e8 27 f7 ff ff       	call   1062a <addr_free_page>
   10f03:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10f0f:	90                   	nop
   10f10:	c9                   	leave  
   10f11:	c3                   	ret    

00010f12 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10f12:	55                   	push   %ebp
   10f13:	89 e5                	mov    %esp,%ebp
   10f15:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10f18:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1b:	83 ec 04             	sub    $0x4,%esp
   10f1e:	6a 00                	push   $0x0
   10f20:	ff 75 0c             	push   0xc(%ebp)
   10f23:	50                   	push   %eax
   10f24:	e8 3a f8 ff ff       	call   10763 <find_pte>
   10f29:	83 c4 10             	add    $0x10,%esp
   10f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f33:	74 0d                	je     10f42 <memory_get_paddr+0x30>
   10f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f38:	0f b6 00             	movzbl (%eax),%eax
   10f3b:	83 e0 01             	and    $0x1,%eax
   10f3e:	84 c0                	test   %al,%al
   10f40:	75 07                	jne    10f49 <memory_get_paddr+0x37>
    return 0;
   10f42:	b8 00 00 00 00       	mov    $0x0,%eax
   10f47:	eb 1a                	jmp    10f63 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f49:	83 ec 0c             	sub    $0xc,%esp
   10f4c:	ff 75 f4             	push   -0xc(%ebp)
   10f4f:	e8 1f f4 ff ff       	call   10373 <pte_to_pg_addr>
   10f54:	83 c4 10             	add    $0x10,%esp
   10f57:	89 c2                	mov    %eax,%edx
   10f59:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f5c:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f61:	09 d0                	or     %edx,%eax

}
   10f63:	c9                   	leave  
   10f64:	c3                   	ret    

00010f65 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f65:	55                   	push   %ebp
   10f66:	89 e5                	mov    %esp,%ebp
   10f68:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f6b:	eb 6e                	jmp    10fdb <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f6d:	83 ec 08             	sub    $0x8,%esp
   10f70:	ff 75 08             	push   0x8(%ebp)
   10f73:	ff 75 0c             	push   0xc(%ebp)
   10f76:	e8 97 ff ff ff       	call   10f12 <memory_get_paddr>
   10f7b:	83 c4 10             	add    $0x10,%esp
   10f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f85:	75 07                	jne    10f8e <memory_copy_uvm_data+0x29>
      return -1;
   10f87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f8c:	eb 58                	jmp    10fe6 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f91:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f96:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f99:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f9e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10fa4:	8b 45 14             	mov    0x14(%ebp),%eax
   10fa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10faa:	73 06                	jae    10fb2 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10fac:	8b 45 14             	mov    0x14(%ebp),%eax
   10faf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10fb2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10fb5:	8b 55 10             	mov    0x10(%ebp),%edx
   10fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fbb:	83 ec 04             	sub    $0x4,%esp
   10fbe:	51                   	push   %ecx
   10fbf:	52                   	push   %edx
   10fc0:	50                   	push   %eax
   10fc1:	e8 50 71 00 00       	call   18116 <kernel_memcpy>
   10fc6:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcc:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd2:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd8:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fdb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fdf:	75 8c                	jne    10f6d <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fe1:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fe6:	c9                   	leave  
   10fe7:	c3                   	ret    

00010fe8 <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fe8:	55                   	push   %ebp
   10fe9:	89 e5                	mov    %esp,%ebp
   10feb:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff2:	79 1c                	jns    11010 <sys_sbrk+0x28>
   10ff4:	68 51 8b 01 00       	push   $0x18b51
   10ff9:	68 d0 8b 01 00       	push   $0x18bd0
   10ffe:	68 a8 02 00 00       	push   $0x2a8
   11003:	68 50 8a 01 00       	push   $0x18a50
   11008:	e8 3f 6c 00 00       	call   17c4c <pannic>
   1100d:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   11010:	e8 9c 09 00 00       	call   119b1 <task_current>
   11015:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   11018:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1101b:	8b 40 14             	mov    0x14(%eax),%eax
   1101e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11021:	8b 45 08             	mov    0x8(%ebp),%eax
   11024:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   11027:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1102b:	75 1b                	jne    11048 <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   1102d:	83 ec 08             	sub    $0x8,%esp
   11030:	ff 75 ec             	push   -0x14(%ebp)
   11033:	68 5b 8b 01 00       	push   $0x18b5b
   11038:	e8 25 79 00 00       	call   18962 <log_printf>
   1103d:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11040:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11043:	e9 c4 00 00 00       	jmp    1110c <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   11048:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1104b:	8b 40 14             	mov    0x14(%eax),%eax
   1104e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11051:	8b 55 08             	mov    0x8(%ebp),%edx
   11054:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11057:	01 d0                	add    %edx,%eax
   11059:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1105f:	25 ff 0f 00 00       	and    $0xfff,%eax
   11064:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   11067:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1106b:	74 3b                	je     110a8 <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   1106d:	8b 55 08             	mov    0x8(%ebp),%edx
   11070:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11073:	01 d0                	add    %edx,%eax
   11075:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1107a:	77 12                	ja     1108e <sys_sbrk+0xa6>
      task->heap_end = end; 
   1107c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1107f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11082:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11085:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1108c:	eb 1a                	jmp    110a8 <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   1108e:	b8 00 10 00 00       	mov    $0x1000,%eax
   11093:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11096:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   11099:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1109c:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   1109f:	8b 45 08             	mov    0x8(%ebp),%eax
   110a2:	2b 45 dc             	sub    -0x24(%ebp),%eax
   110a5:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   110a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ac:	74 3c                	je     110ea <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   110ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110b1:	2b 45 f4             	sub    -0xc(%ebp),%eax
   110b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   110b7:	83 ec 04             	sub    $0x4,%esp
   110ba:	6a 07                	push   $0x7
   110bc:	ff 75 d8             	push   -0x28(%ebp)
   110bf:	ff 75 f4             	push   -0xc(%ebp)
   110c2:	e8 60 fd ff ff       	call   10e27 <memory_alloc_page_for>
   110c7:	83 c4 10             	add    $0x10,%esp
   110ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110cd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110d1:	79 17                	jns    110ea <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110d3:	83 ec 0c             	sub    $0xc,%esp
   110d6:	68 6e 8b 01 00       	push   $0x18b6e
   110db:	e8 82 78 00 00       	call   18962 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110e8:	eb 22                	jmp    1110c <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110ea:	83 ec 04             	sub    $0x4,%esp
   110ed:	ff 75 e4             	push   -0x1c(%ebp)
   110f0:	ff 75 e8             	push   -0x18(%ebp)
   110f3:	68 87 8b 01 00       	push   $0x18b87
   110f8:	e8 65 78 00 00       	call   18962 <log_printf>
   110fd:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   11100:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11106:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)pre_heap_end;
   11109:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1110c:	c9                   	leave  
   1110d:	c3                   	ret    

0001110e <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1110e:	55                   	push   %ebp
   1110f:	89 e5                	mov    %esp,%ebp
   11111:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11114:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11118:	75 19                	jne    11133 <list_node_init+0x25>
   1111a:	68 dc 8b 01 00       	push   $0x18bdc
   1111f:	68 98 8d 01 00       	push   $0x18d98
   11124:	6a 20                	push   $0x20
   11126:	68 f4 8b 01 00       	push   $0x18bf4
   1112b:	e8 1c 6b 00 00       	call   17c4c <pannic>
   11130:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11133:	8b 45 08             	mov    0x8(%ebp),%eax
   11136:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	8b 50 04             	mov    0x4(%eax),%edx
   11143:	8b 45 08             	mov    0x8(%ebp),%eax
   11146:	89 10                	mov    %edx,(%eax)
}
   11148:	90                   	nop
   11149:	c9                   	leave  
   1114a:	c3                   	ret    

0001114b <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1114b:	55                   	push   %ebp
   1114c:	89 e5                	mov    %esp,%ebp
   1114e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11151:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11155:	75 19                	jne    11170 <list_node_next+0x25>
   11157:	68 dc 8b 01 00       	push   $0x18bdc
   1115c:	68 f8 8d 01 00       	push   $0x18df8
   11161:	6a 2b                	push   $0x2b
   11163:	68 f4 8b 01 00       	push   $0x18bf4
   11168:	e8 df 6a 00 00       	call   17c4c <pannic>
   1116d:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11170:	8b 45 08             	mov    0x8(%ebp),%eax
   11173:	8b 40 04             	mov    0x4(%eax),%eax
}
   11176:	c9                   	leave  
   11177:	c3                   	ret    

00011178 <list_init>:

static inline void list_init(list_t *list) {
   11178:	55                   	push   %ebp
   11179:	89 e5                	mov    %esp,%ebp
   1117b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1117e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11182:	75 19                	jne    1119d <list_init+0x25>
   11184:	68 32 8c 01 00       	push   $0x18c32
   11189:	68 a8 8d 01 00       	push   $0x18da8
   1118e:	6a 31                	push   $0x31
   11190:	68 f4 8b 01 00       	push   $0x18bf4
   11195:	e8 b2 6a 00 00       	call   17c4c <pannic>
   1119a:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   111a7:	8b 45 08             	mov    0x8(%ebp),%eax
   111aa:	8b 50 04             	mov    0x4(%eax),%edx
   111ad:	8b 45 08             	mov    0x8(%ebp),%eax
   111b0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   111b2:	8b 45 08             	mov    0x8(%ebp),%eax
   111b5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   111bc:	90                   	nop
   111bd:	c9                   	leave  
   111be:	c3                   	ret    

000111bf <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111bf:	55                   	push   %ebp
   111c0:	89 e5                	mov    %esp,%ebp
   111c2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111c9:	75 19                	jne    111e4 <list_is_empty+0x25>
   111cb:	68 32 8c 01 00       	push   $0x18c32
   111d0:	68 08 8e 01 00       	push   $0x18e08
   111d5:	6a 38                	push   $0x38
   111d7:	68 f4 8b 01 00       	push   $0x18bf4
   111dc:	e8 6b 6a 00 00       	call   17c4c <pannic>
   111e1:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111e4:	8b 45 08             	mov    0x8(%ebp),%eax
   111e7:	8b 40 08             	mov    0x8(%eax),%eax
   111ea:	85 c0                	test   %eax,%eax
   111ec:	0f 94 c0             	sete   %al
   111ef:	0f b6 c0             	movzbl %al,%eax
}
   111f2:	c9                   	leave  
   111f3:	c3                   	ret    

000111f4 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111f4:	55                   	push   %ebp
   111f5:	89 e5                	mov    %esp,%ebp
   111f7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111fe:	75 19                	jne    11219 <list_get_size+0x25>
   11200:	68 32 8c 01 00       	push   $0x18c32
   11205:	68 38 8e 01 00       	push   $0x18e38
   1120a:	6a 3e                	push   $0x3e
   1120c:	68 f4 8b 01 00       	push   $0x18bf4
   11211:	e8 36 6a 00 00       	call   17c4c <pannic>
   11216:	83 c4 10             	add    $0x10,%esp

    return list->size;
   11219:	8b 45 08             	mov    0x8(%ebp),%eax
   1121c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1121f:	c9                   	leave  
   11220:	c3                   	ret    

00011221 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11221:	55                   	push   %ebp
   11222:	89 e5                	mov    %esp,%ebp
   11224:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11227:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1122b:	75 19                	jne    11246 <list_get_first+0x25>
   1122d:	68 32 8c 01 00       	push   $0x18c32
   11232:	68 e8 8d 01 00       	push   $0x18de8
   11237:	6a 44                	push   $0x44
   11239:	68 f4 8b 01 00       	push   $0x18bf4
   1123e:	e8 09 6a 00 00       	call   17c4c <pannic>
   11243:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11246:	8b 45 08             	mov    0x8(%ebp),%eax
   11249:	8b 00                	mov    (%eax),%eax
}
   1124b:	c9                   	leave  
   1124c:	c3                   	ret    

0001124d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1124d:	55                   	push   %ebp
   1124e:	89 e5                	mov    %esp,%ebp
   11250:	f4                   	hlt    
   11251:	90                   	nop
   11252:	5d                   	pop    %ebp
   11253:	c3                   	ret    

00011254 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	0f 22 d8             	mov    %eax,%cr3
}
   1125d:	90                   	nop
   1125e:	5d                   	pop    %ebp
   1125f:	c3                   	ret    

00011260 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11260:	55                   	push   %ebp
   11261:	89 e5                	mov    %esp,%ebp
   11263:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11266:	8b 45 0c             	mov    0xc(%ebp),%eax
   11269:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1126c:	8b 45 08             	mov    0x8(%ebp),%eax
   1126f:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11272:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11275:	ff 28                	ljmp   *(%eax)
}
   11277:	90                   	nop
   11278:	c9                   	leave  
   11279:	c3                   	ret    

0001127a <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1127a:	55                   	push   %ebp
   1127b:	89 e5                	mov    %esp,%ebp
   1127d:	83 ec 04             	sub    $0x4,%esp
   11280:	8b 45 08             	mov    0x8(%ebp),%eax
   11283:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11287:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1128b:	0f 00 d8             	ltr    %ax
}
   1128e:	90                   	nop
   1128f:	c9                   	leave  
   11290:	c3                   	ret    

00011291 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11291:	55                   	push   %ebp
   11292:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11294:	ff 75 08             	push   0x8(%ebp)
   11297:	e8 b8 ff ff ff       	call   11254 <write_cr3>
   1129c:	83 c4 04             	add    $0x4,%esp
}
   1129f:	90                   	nop
   112a0:	c9                   	leave  
   112a1:	c3                   	ret    

000112a2 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   112a2:	55                   	push   %ebp
   112a3:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   112a5:	8b 55 08             	mov    0x8(%ebp),%edx
   112a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ab:	01 d0                	add    %edx,%eax
   112ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b3:	f7 d8                	neg    %eax
   112b5:	21 d0                	and    %edx,%eax
}
   112b7:	5d                   	pop    %ebp
   112b8:	c3                   	ret    

000112b9 <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   112b9:	55                   	push   %ebp
   112ba:	89 e5                	mov    %esp,%ebp
   112bc:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ca:	78 18                	js     112e4 <task_file+0x2b>
   112cc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112d0:	7f 12                	jg     112e4 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112d2:	e8 da 06 00 00       	call   119b1 <task_current>
   112d7:	8b 55 08             	mov    0x8(%ebp),%edx
   112da:	83 c2 30             	add    $0x30,%edx
   112dd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112e7:	c9                   	leave  
   112e8:	c3                   	ret    

000112e9 <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112e9:	55                   	push   %ebp
   112ea:	89 e5                	mov    %esp,%ebp
   112ec:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112ef:	e8 bd 06 00 00       	call   119b1 <task_current>
   112f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112fe:	eb 2f                	jmp    1132f <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   11300:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11303:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11306:	83 c2 30             	add    $0x30,%edx
   11309:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1130d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   11310:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11314:	75 15                	jne    1132b <task_alloc_fd+0x42>
      task->file_table[i] = file;
   11316:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11319:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1131c:	8d 4a 30             	lea    0x30(%edx),%ecx
   1131f:	8b 55 08             	mov    0x8(%ebp),%edx
   11322:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11326:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11329:	eb 0f                	jmp    1133a <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1132b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1132f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11333:	7e cb                	jle    11300 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11335:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1133a:	c9                   	leave  
   1133b:	c3                   	ret    

0001133c <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1133c:	55                   	push   %ebp
   1133d:	89 e5                	mov    %esp,%ebp
   1133f:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11346:	78 19                	js     11361 <task_remove_fd+0x25>
   11348:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1134c:	7f 13                	jg     11361 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   1134e:	e8 5e 06 00 00       	call   119b1 <task_current>
   11353:	8b 55 08             	mov    0x8(%ebp),%edx
   11356:	83 c2 30             	add    $0x30,%edx
   11359:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11360:	00 
  }
}
   11361:	90                   	nop
   11362:	c9                   	leave  
   11363:	c3                   	ret    

00011364 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11364:	55                   	push   %ebp
   11365:	89 e5                	mov    %esp,%ebp
   11367:	83 ec 04             	sub    $0x4,%esp
   1136a:	8b 45 08             	mov    0x8(%ebp),%eax
   1136d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11371:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11375:	6a 00                	push   $0x0
   11377:	50                   	push   %eax
   11378:	e8 e3 fe ff ff       	call   11260 <far_jump>
   1137d:	83 c4 08             	add    $0x8,%esp
}
   11380:	90                   	nop
   11381:	c9                   	leave  
   11382:	c3                   	ret    

00011383 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11383:	55                   	push   %ebp
   11384:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11386:	8b 45 0c             	mov    0xc(%ebp),%eax
   11389:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1138f:	0f b7 c0             	movzwl %ax,%eax
   11392:	50                   	push   %eax
   11393:	e8 cc ff ff ff       	call   11364 <switch_to_tss>
   11398:	83 c4 04             	add    $0x4,%esp
}
   1139b:	90                   	nop
   1139c:	c9                   	leave  
   1139d:	c3                   	ret    

0001139e <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   1139e:	55                   	push   %ebp
   1139f:	89 e5                	mov    %esp,%ebp
   113a1:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   113a4:	e8 6a 15 00 00       	call   12913 <gdt_alloc_desc>
   113a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   113ac:	8b 45 08             	mov    0x8(%ebp),%eax
   113af:	83 c0 5c             	add    $0x5c,%eax
   113b2:	89 c2                	mov    %eax,%edx
   113b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113b7:	0f b7 c0             	movzwl %ax,%eax
   113ba:	68 89 00 00 00       	push   $0x89
   113bf:	6a 68                	push   $0x68
   113c1:	52                   	push   %edx
   113c2:	50                   	push   %eax
   113c3:	e8 d9 13 00 00       	call   127a1 <segment_desc_set>
   113c8:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113cb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ce:	83 c0 5c             	add    $0x5c,%eax
   113d1:	83 ec 04             	sub    $0x4,%esp
   113d4:	6a 68                	push   $0x68
   113d6:	6a 00                	push   $0x0
   113d8:	50                   	push   %eax
   113d9:	e8 87 6d 00 00       	call   18165 <kernel_memset>
   113de:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113e1:	8b 45 08             	mov    0x8(%ebp),%eax
   113e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113e7:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113ed:	8b 45 14             	mov    0x14(%ebp),%eax
   113f0:	83 e0 01             	and    $0x1,%eax
   113f3:	85 c0                	test   %eax,%eax
   113f5:	74 10                	je     11407 <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113f7:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113fe:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11405:	eb 16                	jmp    1141d <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   11407:	a1 b8 55 02 00       	mov    0x255b8,%eax
   1140c:	83 c8 03             	or     $0x3,%eax
   1140f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   11412:	a1 bc 55 02 00       	mov    0x255bc,%eax
   11417:	83 c8 03             	or     $0x3,%eax
   1141a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   1141d:	8b 45 08             	mov    0x8(%ebp),%eax
   11420:	8b 55 0c             	mov    0xc(%ebp),%edx
   11423:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	8b 55 10             	mov    0x10(%ebp),%edx
   1142c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11432:	e8 22 fa ff ff       	call   10e59 <memory_alloc_page>
   11437:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1143a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1143e:	0f 84 9e 00 00 00    	je     114e2 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11444:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11447:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1144d:	8b 45 08             	mov    0x8(%ebp),%eax
   11450:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11453:	8b 45 08             	mov    0x8(%ebp),%eax
   11456:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11459:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   1145f:	8b 45 08             	mov    0x8(%ebp),%eax
   11462:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11469:	8b 45 08             	mov    0x8(%ebp),%eax
   1146c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1146f:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11475:	8b 45 08             	mov    0x8(%ebp),%eax
   11478:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   1147e:	8b 45 08             	mov    0x8(%ebp),%eax
   11481:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   11487:	8b 45 08             	mov    0x8(%ebp),%eax
   1148a:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11490:	8b 45 08             	mov    0x8(%ebp),%eax
   11493:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   11499:	8b 45 08             	mov    0x8(%ebp),%eax
   1149c:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   114a2:	8b 45 08             	mov    0x8(%ebp),%eax
   114a5:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   114ab:	8b 45 08             	mov    0x8(%ebp),%eax
   114ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114b1:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   114b7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ba:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114c1:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114c4:	e8 b4 f4 ff ff       	call   1097d <memory_creat_uvm>
   114c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114d0:	74 13                	je     114e5 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114d2:	8b 45 08             	mov    0x8(%ebp),%eax
   114d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114d8:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114db:	b8 00 00 00 00       	mov    $0x0,%eax
   114e0:	eb 2f                	jmp    11511 <tss_init+0x173>
    goto tss_init_failed;
   114e2:	90                   	nop
   114e3:	eb 01                	jmp    114e6 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114e5:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114e9:	0f b7 c0             	movzwl %ax,%eax
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	50                   	push   %eax
   114f0:	e8 93 14 00 00       	call   12988 <gdt_free>
   114f5:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114fc:	74 0e                	je     1150c <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114fe:	83 ec 0c             	sub    $0xc,%esp
   11501:	ff 75 e8             	push   -0x18(%ebp)
   11504:	e8 70 f9 ff ff       	call   10e79 <memory_free_page>
   11509:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   1150c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11511:	c9                   	leave  
   11512:	c3                   	ret    

00011513 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   11513:	55                   	push   %ebp
   11514:	89 e5                	mov    %esp,%ebp
   11516:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11519:	e8 76 1e 00 00       	call   13394 <idt_enter_protection>
   1151e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11521:	83 ec 0c             	sub    $0xc,%esp
   11524:	ff 75 08             	push   0x8(%ebp)
   11527:	e8 d3 03 00 00       	call   118ff <task_set_ready>
   1152c:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   1152f:	8b 45 08             	mov    0x8(%ebp),%eax
   11532:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   11538:	83 ec 0c             	sub    $0xc,%esp
   1153b:	ff 75 f4             	push   -0xc(%ebp)
   1153e:	e8 69 1e 00 00       	call   133ac <idt_leave_protection>
   11543:	83 c4 10             	add    $0x10,%esp
}
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   1154f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11553:	75 1c                	jne    11571 <task_init+0x28>
   11555:	68 45 8c 01 00       	push   $0x18c45
   1155a:	68 8c 8d 01 00       	push   $0x18d8c
   1155f:	68 ca 00 00 00       	push   $0xca
   11564:	68 5c 8c 01 00       	push   $0x18c5c
   11569:	e8 de 66 00 00       	call   17c4c <pannic>
   1156e:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11571:	ff 75 18             	push   0x18(%ebp)
   11574:	ff 75 14             	push   0x14(%ebp)
   11577:	ff 75 10             	push   0x10(%ebp)
   1157a:	ff 75 08             	push   0x8(%ebp)
   1157d:	e8 1c fe ff ff       	call   1139e <tss_init>
   11582:	83 c4 10             	add    $0x10,%esp
   11585:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   11588:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1158c:	75 08                	jne    11596 <task_init+0x4d>
   1158e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11591:	e9 e0 00 00 00       	jmp    11676 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11596:	8b 45 08             	mov    0x8(%ebp),%eax
   11599:	83 c0 24             	add    $0x24,%eax
   1159c:	83 ec 04             	sub    $0x4,%esp
   1159f:	6a 20                	push   $0x20
   115a1:	ff 75 0c             	push   0xc(%ebp)
   115a4:	50                   	push   %eax
   115a5:	e8 65 6a 00 00       	call   1800f <kernel_strncpy>
   115aa:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   115ad:	8b 45 08             	mov    0x8(%ebp),%eax
   115b0:	83 c0 44             	add    $0x44,%eax
   115b3:	83 ec 0c             	sub    $0xc,%esp
   115b6:	50                   	push   %eax
   115b7:	e8 52 fb ff ff       	call   1110e <list_node_init>
   115bc:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115bf:	8b 45 08             	mov    0x8(%ebp),%eax
   115c2:	83 c0 4c             	add    $0x4c,%eax
   115c5:	83 ec 0c             	sub    $0xc,%esp
   115c8:	50                   	push   %eax
   115c9:	e8 40 fb ff ff       	call   1110e <list_node_init>
   115ce:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115d1:	8b 45 08             	mov    0x8(%ebp),%eax
   115d4:	83 c0 54             	add    $0x54,%eax
   115d7:	83 ec 0c             	sub    $0xc,%esp
   115da:	50                   	push   %eax
   115db:	e8 2e fb ff ff       	call   1110e <list_node_init>
   115e0:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115e3:	8b 45 08             	mov    0x8(%ebp),%eax
   115e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115ec:	8b 45 08             	mov    0x8(%ebp),%eax
   115ef:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115f6:	8b 45 08             	mov    0x8(%ebp),%eax
   115f9:	8b 50 1c             	mov    0x1c(%eax),%edx
   115fc:	8b 45 08             	mov    0x8(%ebp),%eax
   115ff:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   1160c:	8b 55 08             	mov    0x8(%ebp),%edx
   1160f:	8b 45 08             	mov    0x8(%ebp),%eax
   11612:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   11615:	8b 45 08             	mov    0x8(%ebp),%eax
   11618:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   11629:	8b 45 08             	mov    0x8(%ebp),%eax
   1162c:	8b 50 14             	mov    0x14(%eax),%edx
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   1163f:	8b 45 08             	mov    0x8(%ebp),%eax
   11642:	05 c8 00 00 00       	add    $0xc8,%eax
   11647:	83 ec 04             	sub    $0x4,%esp
   1164a:	68 00 02 00 00       	push   $0x200
   1164f:	6a 00                	push   $0x0
   11651:	50                   	push   %eax
   11652:	e8 0e 6b 00 00       	call   18165 <kernel_memset>
   11657:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1165a:	8b 45 08             	mov    0x8(%ebp),%eax
   1165d:	83 c0 4c             	add    $0x4c,%eax
   11660:	83 ec 08             	sub    $0x8,%esp
   11663:	50                   	push   %eax
   11664:	68 10 50 02 00       	push   $0x25010
   11669:	e8 07 70 00 00       	call   18675 <list_insert_last>
   1166e:	83 c4 10             	add    $0x10,%esp

  return 1;
   11671:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11676:	c9                   	leave  
   11677:	c3                   	ret    

00011678 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   11678:	55                   	push   %ebp
   11679:	89 e5                	mov    %esp,%ebp
   1167b:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   1167e:	8b 45 08             	mov    0x8(%ebp),%eax
   11681:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11687:	85 c0                	test   %eax,%eax
   11689:	74 18                	je     116a3 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1168b:	8b 45 08             	mov    0x8(%ebp),%eax
   1168e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11694:	0f b7 c0             	movzwl %ax,%eax
   11697:	83 ec 0c             	sub    $0xc,%esp
   1169a:	50                   	push   %eax
   1169b:	e8 e8 12 00 00       	call   12988 <gdt_free>
   116a0:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   116a3:	8b 45 08             	mov    0x8(%ebp),%eax
   116a6:	8b 40 60             	mov    0x60(%eax),%eax
   116a9:	85 c0                	test   %eax,%eax
   116ab:	74 17                	je     116c4 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 40 60             	mov    0x60(%eax),%eax
   116b3:	2d 00 10 00 00       	sub    $0x1000,%eax
   116b8:	83 ec 0c             	sub    $0xc,%esp
   116bb:	50                   	push   %eax
   116bc:	e8 b8 f7 ff ff       	call   10e79 <memory_free_page>
   116c1:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	8b 40 78             	mov    0x78(%eax),%eax
   116ca:	85 c0                	test   %eax,%eax
   116cc:	74 12                	je     116e0 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116ce:	8b 45 08             	mov    0x8(%ebp),%eax
   116d1:	8b 40 78             	mov    0x78(%eax),%eax
   116d4:	83 ec 0c             	sub    $0xc,%esp
   116d7:	50                   	push   %eax
   116d8:	e8 b2 f4 ff ff       	call   10b8f <memory_destroy_uvm>
   116dd:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	83 c0 4c             	add    $0x4c,%eax
   116e6:	83 ec 08             	sub    $0x8,%esp
   116e9:	50                   	push   %eax
   116ea:	68 10 50 02 00       	push   $0x25010
   116ef:	e8 76 71 00 00       	call   1886a <list_remove>
   116f4:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116f7:	83 ec 0c             	sub    $0xc,%esp
   116fa:	ff 75 08             	push   0x8(%ebp)
   116fd:	e8 3b 05 00 00       	call   11c3d <free_task>
   11702:	83 c4 10             	add    $0x10,%esp
}
   11705:	90                   	nop
   11706:	c9                   	leave  
   11707:	c3                   	ret    

00011708 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   11708:	55                   	push   %ebp
   11709:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   1170b:	e8 3d fb ff ff       	call   1124d <hlt>
   11710:	eb f9                	jmp    1170b <empty_task+0x3>

00011712 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   11712:	55                   	push   %ebp
   11713:	89 e5                	mov    %esp,%ebp
   11715:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   11718:	e8 f6 11 00 00       	call   12913 <gdt_alloc_desc>
   1171d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11720:	e8 ee 11 00 00       	call   12913 <gdt_alloc_desc>
   11725:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   11728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1172b:	0f b7 c0             	movzwl %ax,%eax
   1172e:	68 f2 40 00 00       	push   $0x40f2
   11733:	6a ff                	push   $0xffffffff
   11735:	6a 00                	push   $0x0
   11737:	50                   	push   %eax
   11738:	e8 64 10 00 00       	call   127a1 <segment_desc_set>
   1173d:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11740:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11743:	0f b7 c0             	movzwl %ax,%eax
   11746:	68 fa 40 00 00       	push   $0x40fa
   1174b:	6a ff                	push   $0xffffffff
   1174d:	6a 00                	push   $0x0
   1174f:	50                   	push   %eax
   11750:	e8 4c 10 00 00       	call   127a1 <segment_desc_set>
   11755:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   11758:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1175b:	a3 b8 55 02 00       	mov    %eax,0x255b8
  task_manager.app_data_selector = data_selector;
   11760:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11763:	a3 bc 55 02 00       	mov    %eax,0x255bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   11768:	83 ec 0c             	sub    $0xc,%esp
   1176b:	68 04 50 02 00       	push   $0x25004
   11770:	e8 03 fa ff ff       	call   11178 <list_init>
   11775:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   11778:	83 ec 0c             	sub    $0xc,%esp
   1177b:	68 10 50 02 00       	push   $0x25010
   11780:	e8 f3 f9 ff ff       	call   11178 <list_init>
   11785:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   11788:	83 ec 0c             	sub    $0xc,%esp
   1178b:	68 1c 50 02 00       	push   $0x2501c
   11790:	e8 e3 f9 ff ff       	call   11178 <list_init>
   11795:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   11798:	c7 05 00 50 02 00 00 	movl   $0x0,0x25000
   1179f:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   117a2:	ba e0 bb 03 00       	mov    $0x3bbe0,%edx
   117a7:	b8 08 17 01 00       	mov    $0x11708,%eax
   117ac:	83 ec 0c             	sub    $0xc,%esp
   117af:	6a 01                	push   $0x1
   117b1:	52                   	push   %edx
   117b2:	50                   	push   %eax
   117b3:	68 91 8c 01 00       	push   $0x18c91
   117b8:	68 f0 52 02 00       	push   $0x252f0
   117bd:	e8 87 fd ff ff       	call   11549 <task_init>
   117c2:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117c5:	83 ec 04             	sub    $0x4,%esp
   117c8:	68 00 64 01 00       	push   $0x16400
   117cd:	6a 00                	push   $0x0
   117cf:	68 c0 55 02 00       	push   $0x255c0
   117d4:	e8 8c 69 00 00       	call   18165 <kernel_memset>
   117d9:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117dc:	83 ec 0c             	sub    $0xc,%esp
   117df:	68 c0 b9 03 00       	push   $0x3b9c0
   117e4:	e8 eb 5c 00 00       	call   174d4 <mutex_init>
   117e9:	83 c4 10             	add    $0x10,%esp
}
   117ec:	90                   	nop
   117ed:	c9                   	leave  
   117ee:	c3                   	ret    

000117ef <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117ef:	55                   	push   %ebp
   117f0:	89 e5                	mov    %esp,%ebp
   117f2:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117f5:	b8 96 93 07 00       	mov    $0x79396,%eax
   117fa:	2d 00 90 07 00       	sub    $0x79000,%eax
  uint32_t copy_size =
   117ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   11802:	68 00 10 00 00       	push   $0x1000
   11807:	ff 75 f4             	push   -0xc(%ebp)
   1180a:	e8 93 fa ff ff       	call   112a2 <up2>
   1180f:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   11812:	05 00 a0 00 00       	add    $0xa000,%eax
   11817:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   1181a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1181d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11820:	72 1c                	jb     1183e <task_first_init+0x4f>
   11822:	68 9c 8c 01 00       	push   $0x18c9c
   11827:	68 b4 8d 01 00       	push   $0x18db4
   1182c:	68 6e 01 00 00       	push   $0x16e
   11831:	68 5c 8c 01 00       	push   $0x18c5c
   11836:	e8 11 64 00 00       	call   17c4c <pannic>
   1183b:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   1183e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11845:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11848:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1184b:	01 d0                	add    %edx,%eax
   1184d:	83 ec 0c             	sub    $0xc,%esp
   11850:	6a 00                	push   $0x0
   11852:	50                   	push   %eax
   11853:	ff 75 ec             	push   -0x14(%ebp)
   11856:	68 b3 8c 01 00       	push   $0x18cb3
   1185b:	68 28 50 02 00       	push   $0x25028
   11860:	e8 e4 fc ff ff       	call   11549 <task_init>
   11865:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   11868:	b8 96 93 07 00       	mov    $0x79396,%eax
  task_manager.first_task.heap_start =
   1186d:	a3 38 50 02 00       	mov    %eax,0x25038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11872:	b8 96 93 07 00       	mov    $0x79396,%eax
   11877:	a3 3c 50 02 00       	mov    %eax,0x2503c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1187c:	a1 ec 50 02 00       	mov    0x250ec,%eax
   11881:	0f b7 c0             	movzwl %ax,%eax
   11884:	83 ec 0c             	sub    $0xc,%esp
   11887:	50                   	push   %eax
   11888:	e8 ed f9 ff ff       	call   1127a <write_tr>
   1188d:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11890:	c7 05 00 50 02 00 28 	movl   $0x25028,0x25000
   11897:	50 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1189a:	a1 a0 50 02 00       	mov    0x250a0,%eax
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	50                   	push   %eax
   118a3:	e8 e9 f9 ff ff       	call   11291 <mmu_set_page_dir>
   118a8:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   118ab:	a1 00 50 02 00       	mov    0x25000,%eax
   118b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   118b6:	83 ec 04             	sub    $0x4,%esp
   118b9:	6a 07                	push   $0x7
   118bb:	ff 75 f0             	push   -0x10(%ebp)
   118be:	ff 75 ec             	push   -0x14(%ebp)
   118c1:	e8 61 f5 ff ff       	call   10e27 <memory_alloc_page_for>
   118c6:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118cc:	83 ec 04             	sub    $0x4,%esp
   118cf:	50                   	push   %eax
   118d0:	68 00 90 07 00       	push   $0x79000
   118d5:	68 00 00 00 80       	push   $0x80000000
   118da:	e8 37 68 00 00       	call   18116 <kernel_memcpy>
   118df:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118e2:	83 ec 0c             	sub    $0xc,%esp
   118e5:	68 28 50 02 00       	push   $0x25028
   118ea:	e8 24 fc ff ff       	call   11513 <task_start>
   118ef:	83 c4 10             	add    $0x10,%esp
}
   118f2:	90                   	nop
   118f3:	c9                   	leave  
   118f4:	c3                   	ret    

000118f5 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	b8 28 50 02 00       	mov    $0x25028,%eax
   118fd:	5d                   	pop    %ebp
   118fe:	c3                   	ret    

000118ff <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118ff:	55                   	push   %ebp
   11900:	89 e5                	mov    %esp,%ebp
   11902:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11905:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11909:	75 1c                	jne    11927 <task_set_ready+0x28>
   1190b:	68 45 8c 01 00       	push   $0x18c45
   11910:	68 c4 8d 01 00       	push   $0x18dc4
   11915:	68 a0 01 00 00       	push   $0x1a0
   1191a:	68 5c 8c 01 00       	push   $0x18c5c
   1191f:	e8 28 63 00 00       	call   17c4c <pannic>
   11924:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   11927:	8b 45 08             	mov    0x8(%ebp),%eax
   1192a:	83 c0 44             	add    $0x44,%eax
   1192d:	83 ec 08             	sub    $0x8,%esp
   11930:	50                   	push   %eax
   11931:	68 04 50 02 00       	push   $0x25004
   11936:	e8 3a 6d 00 00       	call   18675 <list_insert_last>
   1193b:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   1193e:	90                   	nop
   1193f:	c9                   	leave  
   11940:	c3                   	ret    

00011941 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11941:	55                   	push   %ebp
   11942:	89 e5                	mov    %esp,%ebp
   11944:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1194b:	75 1c                	jne    11969 <task_set_unready+0x28>
   1194d:	68 45 8c 01 00       	push   $0x18c45
   11952:	68 d4 8d 01 00       	push   $0x18dd4
   11957:	68 af 01 00 00       	push   $0x1af
   1195c:	68 5c 8c 01 00       	push   $0x18c5c
   11961:	e8 e6 62 00 00       	call   17c4c <pannic>
   11966:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   11969:	8b 45 08             	mov    0x8(%ebp),%eax
   1196c:	83 c0 44             	add    $0x44,%eax
   1196f:	83 ec 08             	sub    $0x8,%esp
   11972:	50                   	push   %eax
   11973:	68 04 50 02 00       	push   $0x25004
   11978:	e8 ed 6e 00 00       	call   1886a <list_remove>
   1197d:	83 c4 10             	add    $0x10,%esp
}
   11980:	90                   	nop
   11981:	c9                   	leave  
   11982:	c3                   	ret    

00011983 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11983:	55                   	push   %ebp
   11984:	89 e5                	mov    %esp,%ebp
   11986:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11989:	83 ec 0c             	sub    $0xc,%esp
   1198c:	68 04 50 02 00       	push   $0x25004
   11991:	e8 8b f8 ff ff       	call   11221 <list_get_first>
   11996:	83 c4 10             	add    $0x10,%esp
   11999:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1199c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119a0:	74 08                	je     119aa <task_ready_first+0x27>
   119a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119a5:	83 e8 44             	sub    $0x44,%eax
   119a8:	eb 05                	jmp    119af <task_ready_first+0x2c>
   119aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119af:	c9                   	leave  
   119b0:	c3                   	ret    

000119b1 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   119b1:	55                   	push   %ebp
   119b2:	89 e5                	mov    %esp,%ebp
   119b4:	a1 00 50 02 00       	mov    0x25000,%eax
   119b9:	5d                   	pop    %ebp
   119ba:	c3                   	ret    

000119bb <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   119bb:	55                   	push   %ebp
   119bc:	89 e5                	mov    %esp,%ebp
   119be:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119c1:	e8 ce 19 00 00       	call   13394 <idt_enter_protection>
   119c6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119c9:	e8 b5 ff ff ff       	call   11983 <task_ready_first>
   119ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119d1:	a1 00 50 02 00       	mov    0x25000,%eax
   119d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119d9:	74 37                	je     11a12 <task_switch+0x57>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119db:	a1 00 50 02 00       	mov    0x25000,%eax
   119e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119e7:	75 07                	jne    119f0 <task_switch+0x35>
      to = &task_manager.empty_task;
   119e9:	c7 45 f4 f0 52 02 00 	movl   $0x252f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    task_manager.curr_task = to;
   119f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119fc:	a3 00 50 02 00       	mov    %eax,0x25000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   11a01:	83 ec 08             	sub    $0x8,%esp
   11a04:	ff 75 f4             	push   -0xc(%ebp)
   11a07:	ff 75 ec             	push   -0x14(%ebp)
   11a0a:	e8 74 f9 ff ff       	call   11383 <task_switch_from_to>
   11a0f:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   11a12:	83 ec 0c             	sub    $0xc,%esp
   11a15:	ff 75 f0             	push   -0x10(%ebp)
   11a18:	e8 8f 19 00 00       	call   133ac <idt_leave_protection>
   11a1d:	83 c4 10             	add    $0x10,%esp
}
   11a20:	90                   	nop
   11a21:	c9                   	leave  
   11a22:	c3                   	ret    

00011a23 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a23:	55                   	push   %ebp
   11a24:	89 e5                	mov    %esp,%ebp
   11a26:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a29:	83 ec 0c             	sub    $0xc,%esp
   11a2c:	68 1c 50 02 00       	push   $0x2501c
   11a31:	e8 eb f7 ff ff       	call   11221 <list_get_first>
   11a36:	83 c4 10             	add    $0x10,%esp
   11a39:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a3c:	eb 62                	jmp    11aa0 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a3e:	83 ec 0c             	sub    $0xc,%esp
   11a41:	ff 75 f4             	push   -0xc(%ebp)
   11a44:	e8 02 f7 ff ff       	call   1114b <list_node_next>
   11a49:	83 c4 10             	add    $0x10,%esp
   11a4c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a53:	74 08                	je     11a5d <task_slice_end+0x3a>
   11a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a58:	83 e8 44             	sub    $0x44,%eax
   11a5b:	eb 05                	jmp    11a62 <task_slice_end+0x3f>
   11a5d:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a62:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a65:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a68:	8b 40 20             	mov    0x20(%eax),%eax
   11a6b:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a71:	89 50 20             	mov    %edx,0x20(%eax)
   11a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a77:	8b 40 20             	mov    0x20(%eax),%eax
   11a7a:	85 c0                	test   %eax,%eax
   11a7c:	75 1c                	jne    11a9a <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a7e:	83 ec 0c             	sub    $0xc,%esp
   11a81:	ff 75 e8             	push   -0x18(%ebp)
   11a84:	e8 01 01 00 00       	call   11b8a <task_set_wakeup>
   11a89:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a8c:	83 ec 0c             	sub    $0xc,%esp
   11a8f:	ff 75 e8             	push   -0x18(%ebp)
   11a92:	e8 68 fe ff ff       	call   118ff <task_set_ready>
   11a97:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11a9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11aa0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11aa4:	75 98                	jne    11a3e <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11aa6:	e8 06 ff ff ff       	call   119b1 <task_current>
   11aab:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11aae:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11ab5:	75 23                	jne    11ada <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11ab7:	83 ec 0c             	sub    $0xc,%esp
   11aba:	68 04 50 02 00       	push   $0x25004
   11abf:	e8 fb f6 ff ff       	call   111bf <list_is_empty>
   11ac4:	83 c4 10             	add    $0x10,%esp
   11ac7:	85 c0                	test   %eax,%eax
   11ac9:	75 60                	jne    11b2b <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11acb:	c7 05 f0 52 02 00 00 	movl   $0x0,0x252f0
   11ad2:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ad5:	e8 e1 fe ff ff       	call   119bb <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11ada:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11ae1:	74 49                	je     11b2c <task_slice_end+0x109>
   11ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae6:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ae9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aef:	89 50 1c             	mov    %edx,0x1c(%eax)
   11af2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11af5:	8b 40 1c             	mov    0x1c(%eax),%eax
   11af8:	85 c0                	test   %eax,%eax
   11afa:	75 30                	jne    11b2c <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aff:	8b 50 18             	mov    0x18(%eax),%edx
   11b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b05:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11b08:	83 ec 0c             	sub    $0xc,%esp
   11b0b:	ff 75 f0             	push   -0x10(%ebp)
   11b0e:	e8 2e fe ff ff       	call   11941 <task_set_unready>
   11b13:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11b16:	83 ec 0c             	sub    $0xc,%esp
   11b19:	ff 75 f0             	push   -0x10(%ebp)
   11b1c:	e8 de fd ff ff       	call   118ff <task_set_ready>
   11b21:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b24:	e8 92 fe ff ff       	call   119bb <task_switch>
   11b29:	eb 01                	jmp    11b2c <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b2b:	90                   	nop
  }
}
   11b2c:	c9                   	leave  
   11b2d:	c3                   	ret    

00011b2e <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b2e:	55                   	push   %ebp
   11b2f:	89 e5                	mov    %esp,%ebp
   11b31:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b38:	75 1c                	jne    11b56 <task_set_sleep+0x28>
   11b3a:	68 45 8c 01 00       	push   $0x18c45
   11b3f:	68 18 8e 01 00       	push   $0x18e18
   11b44:	68 18 02 00 00       	push   $0x218
   11b49:	68 5c 8c 01 00       	push   $0x18c5c
   11b4e:	e8 f9 60 00 00       	call   17c4c <pannic>
   11b53:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b5a:	74 2b                	je     11b87 <task_set_sleep+0x59>

  task->sleep = slice;
   11b5c:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b62:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b65:	8b 45 08             	mov    0x8(%ebp),%eax
   11b68:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b71:	83 c0 44             	add    $0x44,%eax
   11b74:	83 ec 08             	sub    $0x8,%esp
   11b77:	50                   	push   %eax
   11b78:	68 1c 50 02 00       	push   $0x2501c
   11b7d:	e8 f3 6a 00 00       	call   18675 <list_insert_last>
   11b82:	83 c4 10             	add    $0x10,%esp
   11b85:	eb 01                	jmp    11b88 <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b87:	90                   	nop
}
   11b88:	c9                   	leave  
   11b89:	c3                   	ret    

00011b8a <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b8a:	55                   	push   %ebp
   11b8b:	89 e5                	mov    %esp,%ebp
   11b8d:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b94:	75 1c                	jne    11bb2 <task_set_wakeup+0x28>
   11b96:	68 45 8c 01 00       	push   $0x18c45
   11b9b:	68 28 8e 01 00       	push   $0x18e28
   11ba0:	68 26 02 00 00       	push   $0x226
   11ba5:	68 5c 8c 01 00       	push   $0x18c5c
   11baa:	e8 9d 60 00 00       	call   17c4c <pannic>
   11baf:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb5:	83 c0 44             	add    $0x44,%eax
   11bb8:	83 ec 08             	sub    $0x8,%esp
   11bbb:	50                   	push   %eax
   11bbc:	68 1c 50 02 00       	push   $0x2501c
   11bc1:	e8 a4 6c 00 00       	call   1886a <list_remove>
   11bc6:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bc9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bcc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11bd2:	90                   	nop
   11bd3:	c9                   	leave  
   11bd4:	c3                   	ret    

00011bd5 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11bd5:	55                   	push   %ebp
   11bd6:	89 e5                	mov    %esp,%ebp
   11bd8:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11be2:	83 ec 0c             	sub    $0xc,%esp
   11be5:	68 c0 b9 03 00       	push   $0x3b9c0
   11bea:	e8 32 59 00 00       	call   17521 <mutex_lock>
   11bef:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11bf2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bf9:	eb 27                	jmp    11c22 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11bfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bfe:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11c04:	05 c0 55 02 00       	add    $0x255c0,%eax
   11c09:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11c0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c0f:	8b 40 08             	mov    0x8(%eax),%eax
   11c12:	85 c0                	test   %eax,%eax
   11c14:	75 08                	jne    11c1e <alloc_task+0x49>
      task = curr;
   11c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c19:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11c1c:	eb 0a                	jmp    11c28 <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c1e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c22:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c26:	7e d3                	jle    11bfb <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c28:	83 ec 0c             	sub    $0xc,%esp
   11c2b:	68 c0 b9 03 00       	push   $0x3b9c0
   11c30:	e8 92 59 00 00       	call   175c7 <mutex_unlock>
   11c35:	83 c4 10             	add    $0x10,%esp

  return task;
   11c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c3b:	c9                   	leave  
   11c3c:	c3                   	ret    

00011c3d <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c3d:	55                   	push   %ebp
   11c3e:	89 e5                	mov    %esp,%ebp
   11c40:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c43:	83 ec 0c             	sub    $0xc,%esp
   11c46:	68 c0 b9 03 00       	push   $0x3b9c0
   11c4b:	e8 d1 58 00 00       	call   17521 <mutex_lock>
   11c50:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c53:	8b 45 08             	mov    0x8(%ebp),%eax
   11c56:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c5d:	83 ec 0c             	sub    $0xc,%esp
   11c60:	68 c0 b9 03 00       	push   $0x3b9c0
   11c65:	e8 5d 59 00 00       	call   175c7 <mutex_unlock>
   11c6a:	83 c4 10             	add    $0x10,%esp
}
   11c6d:	90                   	nop
   11c6e:	c9                   	leave  
   11c6f:	c3                   	ret    

00011c70 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c70:	55                   	push   %ebp
   11c71:	89 e5                	mov    %esp,%ebp
   11c73:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c76:	e8 19 17 00 00       	call   13394 <idt_enter_protection>
   11c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c7e:	e8 2e fd ff ff       	call   119b1 <task_current>
   11c83:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11c86:	83 ec 0c             	sub    $0xc,%esp
   11c89:	ff 75 f0             	push   -0x10(%ebp)
   11c8c:	e8 b0 fc ff ff       	call   11941 <task_set_unready>
   11c91:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11c94:	8b 45 08             	mov    0x8(%ebp),%eax
   11c97:	83 c0 09             	add    $0x9,%eax
   11c9a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11c9f:	f7 e2                	mul    %edx
   11ca1:	89 d0                	mov    %edx,%eax
   11ca3:	c1 e8 03             	shr    $0x3,%eax
   11ca6:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11ca9:	83 ec 08             	sub    $0x8,%esp
   11cac:	ff 75 ec             	push   -0x14(%ebp)
   11caf:	ff 75 f0             	push   -0x10(%ebp)
   11cb2:	e8 77 fe ff ff       	call   11b2e <task_set_sleep>
   11cb7:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11cba:	e8 fc fc ff ff       	call   119bb <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11cbf:	83 ec 0c             	sub    $0xc,%esp
   11cc2:	ff 75 f4             	push   -0xc(%ebp)
   11cc5:	e8 e2 16 00 00       	call   133ac <idt_leave_protection>
   11cca:	83 c4 10             	add    $0x10,%esp
}
   11ccd:	90                   	nop
   11cce:	c9                   	leave  
   11ccf:	c3                   	ret    

00011cd0 <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cd0:	55                   	push   %ebp
   11cd1:	89 e5                	mov    %esp,%ebp
   11cd3:	e8 d9 fc ff ff       	call   119b1 <task_current>
   11cd8:	8b 40 08             	mov    0x8(%eax),%eax
   11cdb:	5d                   	pop    %ebp
   11cdc:	c3                   	ret    

00011cdd <copy_opened_files>:
/**
 * @brief 将当前进程的打开文件表复制给传入进程
 * 
 * @param child_task 
 */
static void copy_opened_files(task_t *child_task) {
   11cdd:	55                   	push   %ebp
   11cde:	89 e5                	mov    %esp,%ebp
   11ce0:	83 ec 18             	sub    $0x18,%esp
  task_t *parent = task_current();
   11ce3:	e8 c9 fc ff ff       	call   119b1 <task_current>
   11ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cf2:	eb 38                	jmp    11d2c <copy_opened_files+0x4f>
    file_t *file = parent->file_table[i];
   11cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfa:	83 c2 30             	add    $0x30,%edx
   11cfd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file) {
   11d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d08:	74 1e                	je     11d28 <copy_opened_files+0x4b>
      file_inc_ref(file);
   11d0a:	83 ec 0c             	sub    $0xc,%esp
   11d0d:	ff 75 ec             	push   -0x14(%ebp)
   11d10:	e8 17 49 00 00       	call   1662c <file_inc_ref>
   11d15:	83 c4 10             	add    $0x10,%esp
      child_task->file_table[i] = file;
   11d18:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d1e:	8d 4a 30             	lea    0x30(%edx),%ecx
   11d21:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11d24:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11d28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d2c:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11d30:	7e c2                	jle    11cf4 <copy_opened_files+0x17>
    }
  }
}
   11d32:	90                   	nop
   11d33:	90                   	nop
   11d34:	c9                   	leave  
   11d35:	c3                   	ret    

00011d36 <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11d36:	55                   	push   %ebp
   11d37:	89 e5                	mov    %esp,%ebp
   11d39:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11d3c:	e8 70 fc ff ff       	call   119b1 <task_current>
   11d41:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11d44:	e8 8c fe ff ff       	call   11bd5 <alloc_task>
   11d49:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11d4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d50:	0f 84 39 01 00 00    	je     11e8f <sys_fork+0x159>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d59:	8b 40 60             	mov    0x60(%eax),%eax
   11d5c:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11d5f:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11d62:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d65:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11d68:	8d 48 14             	lea    0x14(%eax),%ecx
   11d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d6e:	8b 40 34             	mov    0x34(%eax),%eax
   11d71:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d74:	83 c2 24             	add    $0x24,%edx
   11d77:	83 ec 0c             	sub    $0xc,%esp
   11d7a:	6a 00                	push   $0x0
   11d7c:	51                   	push   %ecx
   11d7d:	50                   	push   %eax
   11d7e:	52                   	push   %edx
   11d7f:	ff 75 f0             	push   -0x10(%ebp)
   11d82:	e8 c2 f7 ff ff       	call   11549 <task_init>
   11d87:	83 c4 20             	add    $0x20,%esp
   11d8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d91:	0f 88 fb 00 00 00    	js     11e92 <sys_fork+0x15c>

  //让子进程继承父进程的打开文件表
  copy_opened_files(child_task);
   11d97:	83 ec 0c             	sub    $0xc,%esp
   11d9a:	ff 75 f0             	push   -0x10(%ebp)
   11d9d:	e8 3b ff ff ff       	call   11cdd <copy_opened_files>
   11da2:	83 c4 10             	add    $0x10,%esp


  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11da5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11da8:	83 c0 5c             	add    $0x5c,%eax
   11dab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11dae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11db8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dbb:	8b 50 24             	mov    0x24(%eax),%edx
   11dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dc1:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dc7:	8b 50 2c             	mov    0x2c(%eax),%edx
   11dca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dcd:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11dd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dd3:	8b 50 28             	mov    0x28(%eax),%edx
   11dd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dd9:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11ddc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ddf:	8b 50 14             	mov    0x14(%eax),%edx
   11de2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11de5:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11de8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11deb:	8b 50 18             	mov    0x18(%eax),%edx
   11dee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11df1:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11df4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11df7:	8b 10                	mov    (%eax),%edx
   11df9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dfc:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11dff:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e02:	8b 50 1c             	mov    0x1c(%eax),%edx
   11e05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e08:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e0e:	8b 50 38             	mov    0x38(%eax),%edx
   11e11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e14:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11e17:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e1a:	8b 50 10             	mov    0x10(%eax),%edx
   11e1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e20:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e26:	8b 50 0c             	mov    0xc(%eax),%edx
   11e29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e2c:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e32:	8b 50 08             	mov    0x8(%eax),%edx
   11e35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e38:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11e3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e3e:	8b 50 04             	mov    0x4(%eax),%edx
   11e41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e44:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e4a:	8b 50 54             	mov    0x54(%eax),%edx
   11e4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e50:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e59:	89 50 04             	mov    %edx,0x4(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e5f:	8b 50 78             	mov    0x78(%eax),%edx
   11e62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e65:	8b 40 1c             	mov    0x1c(%eax),%eax
   11e68:	83 ec 08             	sub    $0x8,%esp
   11e6b:	52                   	push   %edx
   11e6c:	50                   	push   %eax
   11e6d:	e8 90 eb ff ff       	call   10a02 <memory_copy_uvm>
   11e72:	83 c4 10             	add    $0x10,%esp
   11e75:	85 c0                	test   %eax,%eax
   11e77:	78 1c                	js     11e95 <sys_fork+0x15f>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11e79:	83 ec 0c             	sub    $0xc,%esp
   11e7c:	ff 75 f0             	push   -0x10(%ebp)
   11e7f:	e8 8f f6 ff ff       	call   11513 <task_start>
   11e84:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e8a:	8b 40 08             	mov    0x8(%eax),%eax
   11e8d:	eb 2e                	jmp    11ebd <sys_fork+0x187>
  if (child_task == (task_t *)0) goto fork_failed;
   11e8f:	90                   	nop
   11e90:	eb 04                	jmp    11e96 <sys_fork+0x160>
  if (err < 0) goto fork_failed;
   11e92:	90                   	nop
   11e93:	eb 01                	jmp    11e96 <sys_fork+0x160>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e95:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11e96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e9a:	74 1c                	je     11eb8 <sys_fork+0x182>
    task_uninit(child_task);
   11e9c:	83 ec 0c             	sub    $0xc,%esp
   11e9f:	ff 75 f0             	push   -0x10(%ebp)
   11ea2:	e8 d1 f7 ff ff       	call   11678 <task_uninit>
   11ea7:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11eaa:	83 ec 0c             	sub    $0xc,%esp
   11ead:	ff 75 f0             	push   -0x10(%ebp)
   11eb0:	e8 88 fd ff ff       	call   11c3d <free_task>
   11eb5:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11eb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11ebd:	c9                   	leave  
   11ebe:	c3                   	ret    

00011ebf <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11ebf:	55                   	push   %ebp
   11ec0:	89 e5                	mov    %esp,%ebp
   11ec2:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11ec5:	e8 ca 14 00 00       	call   13394 <idt_enter_protection>
   11eca:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11ecd:	83 ec 0c             	sub    $0xc,%esp
   11ed0:	68 04 50 02 00       	push   $0x25004
   11ed5:	e8 1a f3 ff ff       	call   111f4 <list_get_size>
   11eda:	83 c4 10             	add    $0x10,%esp
   11edd:	83 f8 01             	cmp    $0x1,%eax
   11ee0:	7e 29                	jle    11f0b <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11ee2:	e8 ca fa ff ff       	call   119b1 <task_current>
   11ee7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11eea:	83 ec 0c             	sub    $0xc,%esp
   11eed:	ff 75 f0             	push   -0x10(%ebp)
   11ef0:	e8 4c fa ff ff       	call   11941 <task_set_unready>
   11ef5:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11ef8:	83 ec 0c             	sub    $0xc,%esp
   11efb:	ff 75 f0             	push   -0x10(%ebp)
   11efe:	e8 fc f9 ff ff       	call   118ff <task_set_ready>
   11f03:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11f06:	e8 b0 fa ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11f0b:	83 ec 0c             	sub    $0xc,%esp
   11f0e:	ff 75 f4             	push   -0xc(%ebp)
   11f11:	e8 96 14 00 00       	call   133ac <idt_leave_protection>
   11f16:	83 c4 10             	add    $0x10,%esp
  return 0;
   11f19:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f1e:	c9                   	leave  
   11f1f:	c3                   	ret    

00011f20 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11f20:	55                   	push   %ebp
   11f21:	89 e5                	mov    %esp,%ebp
   11f23:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11f26:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f30:	8b 40 18             	mov    0x18(%eax),%eax
   11f33:	83 e0 02             	and    $0x2,%eax
   11f36:	85 c0                	test   %eax,%eax
   11f38:	74 04                	je     11f3e <load_phdr+0x1e>
    privilege |= PTE_W;
   11f3a:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f41:	8b 50 14             	mov    0x14(%eax),%edx
   11f44:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f47:	8b 40 08             	mov    0x8(%eax),%eax
   11f4a:	ff 75 f4             	push   -0xc(%ebp)
   11f4d:	52                   	push   %edx
   11f4e:	50                   	push   %eax
   11f4f:	ff 75 10             	push   0x10(%ebp)
   11f52:	e8 18 ee ff ff       	call   10d6f <memory_alloc_for_page_dir>
   11f57:	83 c4 10             	add    $0x10,%esp
   11f5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11f5d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f61:	79 1a                	jns    11f7d <load_phdr+0x5d>
    log_printf("no memory\n");
   11f63:	83 ec 0c             	sub    $0xc,%esp
   11f66:	68 be 8c 01 00       	push   $0x18cbe
   11f6b:	e8 f2 69 00 00       	call   18962 <log_printf>
   11f70:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f78:	e9 b5 00 00 00       	jmp    12032 <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f80:	8b 40 04             	mov    0x4(%eax),%eax
   11f83:	83 ec 04             	sub    $0x4,%esp
   11f86:	6a 00                	push   $0x0
   11f88:	50                   	push   %eax
   11f89:	ff 75 08             	push   0x8(%ebp)
   11f8c:	e8 1c 4c 00 00       	call   16bad <sys_lseek>
   11f91:	83 c4 10             	add    $0x10,%esp
   11f94:	85 c0                	test   %eax,%eax
   11f96:	79 1a                	jns    11fb2 <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11f98:	83 ec 0c             	sub    $0xc,%esp
   11f9b:	68 c9 8c 01 00       	push   $0x18cc9
   11fa0:	e8 bd 69 00 00       	call   18962 <log_printf>
   11fa5:	83 c4 10             	add    $0x10,%esp
    return -1;
   11fa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11fad:	e9 80 00 00 00       	jmp    12032 <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11fb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fb5:	8b 40 08             	mov    0x8(%eax),%eax
   11fb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fbe:	8b 40 10             	mov    0x10(%eax),%eax
   11fc1:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11fc4:	eb 61                	jmp    12027 <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11fc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fc9:	ba 00 10 00 00       	mov    $0x1000,%edx
   11fce:	39 d0                	cmp    %edx,%eax
   11fd0:	0f 47 c2             	cmova  %edx,%eax
   11fd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11fd6:	83 ec 08             	sub    $0x8,%esp
   11fd9:	ff 75 f0             	push   -0x10(%ebp)
   11fdc:	ff 75 10             	push   0x10(%ebp)
   11fdf:	e8 2e ef ff ff       	call   10f12 <memory_get_paddr>
   11fe4:	83 c4 10             	add    $0x10,%esp
   11fe7:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   11fea:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11fed:	83 ec 04             	sub    $0x4,%esp
   11ff0:	ff 75 e4             	push   -0x1c(%ebp)
   11ff3:	50                   	push   %eax
   11ff4:	ff 75 08             	push   0x8(%ebp)
   11ff7:	e8 28 4a 00 00       	call   16a24 <sys_read>
   11ffc:	83 c4 10             	add    $0x10,%esp
   11fff:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   12002:	7e 17                	jle    1201b <load_phdr+0xfb>
      log_printf("read file failed\n");
   12004:	83 ec 0c             	sub    $0xc,%esp
   12007:	68 dc 8c 01 00       	push   $0x18cdc
   1200c:	e8 51 69 00 00       	call   18962 <log_printf>
   12011:	83 c4 10             	add    $0x10,%esp
      return -1;
   12014:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12019:	eb 17                	jmp    12032 <load_phdr+0x112>
    }

    size -= curr_size;
   1201b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1201e:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   12021:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12024:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   12027:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1202b:	75 99                	jne    11fc6 <load_phdr+0xa6>
  }

  return 0;
   1202d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12032:	c9                   	leave  
   12033:	c3                   	ret    

00012034 <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   12034:	55                   	push   %ebp
   12035:	89 e5                	mov    %esp,%ebp
   12037:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   1203a:	83 ec 08             	sub    $0x8,%esp
   1203d:	6a 00                	push   $0x0
   1203f:	ff 75 0c             	push   0xc(%ebp)
   12042:	e8 48 48 00 00       	call   1688f <sys_open>
   12047:	83 c4 10             	add    $0x10,%esp
   1204a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   1204d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12051:	79 18                	jns    1206b <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   12053:	83 ec 08             	sub    $0x8,%esp
   12056:	ff 75 0c             	push   0xc(%ebp)
   12059:	68 ee 8c 01 00       	push   $0x18cee
   1205e:	e8 ff 68 00 00       	call   18962 <log_printf>
   12063:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12066:	e9 c1 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   1206b:	83 ec 04             	sub    $0x4,%esp
   1206e:	6a 34                	push   $0x34
   12070:	8d 45 b0             	lea    -0x50(%ebp),%eax
   12073:	50                   	push   %eax
   12074:	ff 75 ec             	push   -0x14(%ebp)
   12077:	e8 a8 49 00 00       	call   16a24 <sys_read>
   1207c:	83 c4 10             	add    $0x10,%esp
   1207f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   12082:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12085:	83 f8 33             	cmp    $0x33,%eax
   12088:	77 18                	ja     120a2 <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   1208a:	83 ec 08             	sub    $0x8,%esp
   1208d:	ff 75 e8             	push   -0x18(%ebp)
   12090:	68 fe 8c 01 00       	push   $0x18cfe
   12095:	e8 c8 68 00 00       	call   18962 <log_printf>
   1209a:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1209d:	e9 8a 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120a2:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   120a6:	3c 7f                	cmp    $0x7f,%al
   120a8:	75 18                	jne    120c2 <load_elf_file+0x8e>
   120aa:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   120ae:	3c 45                	cmp    $0x45,%al
   120b0:	75 10                	jne    120c2 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120b2:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120b6:	3c 4c                	cmp    $0x4c,%al
   120b8:	75 08                	jne    120c2 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120ba:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   120be:	3c 46                	cmp    $0x46,%al
   120c0:	74 15                	je     120d7 <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   120c2:	83 ec 0c             	sub    $0xc,%esp
   120c5:	68 1a 8d 01 00       	push   $0x18d1a
   120ca:	e8 93 68 00 00       	call   18962 <log_printf>
   120cf:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120d2:	e9 55 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120d7:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   120db:	66 83 f8 02          	cmp    $0x2,%ax
   120df:	75 11                	jne    120f2 <load_elf_file+0xbe>
   120e1:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   120e5:	66 83 f8 03          	cmp    $0x3,%ax
   120e9:	75 07                	jne    120f2 <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   120eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120ee:	85 c0                	test   %eax,%eax
   120f0:	75 15                	jne    12107 <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   120f2:	83 ec 0c             	sub    $0xc,%esp
   120f5:	68 34 8d 01 00       	push   $0x18d34
   120fa:	e8 63 68 00 00       	call   18962 <log_printf>
   120ff:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12102:	e9 25 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   12107:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   1210b:	66 85 c0             	test   %ax,%ax
   1210e:	74 07                	je     12117 <load_elf_file+0xe3>
   12110:	8b 45 cc             	mov    -0x34(%ebp),%eax
   12113:	85 c0                	test   %eax,%eax
   12115:	75 15                	jne    1212c <load_elf_file+0xf8>
    log_printf("none programe header\n");
   12117:	83 ec 0c             	sub    $0xc,%esp
   1211a:	68 55 8d 01 00       	push   $0x18d55
   1211f:	e8 3e 68 00 00       	call   18962 <log_printf>
   12124:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12127:	e9 00 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   1212c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1212f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12132:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12139:	e9 cb 00 00 00       	jmp    12209 <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   1213e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12141:	83 ec 04             	sub    $0x4,%esp
   12144:	6a 00                	push   $0x0
   12146:	50                   	push   %eax
   12147:	ff 75 ec             	push   -0x14(%ebp)
   1214a:	e8 5e 4a 00 00       	call   16bad <sys_lseek>
   1214f:	83 c4 10             	add    $0x10,%esp
   12152:	85 c0                	test   %eax,%eax
   12154:	79 15                	jns    1216b <load_elf_file+0x137>
      log_printf("read file failed\n");
   12156:	83 ec 0c             	sub    $0xc,%esp
   12159:	68 dc 8c 01 00       	push   $0x18cdc
   1215e:	e8 ff 67 00 00       	call   18962 <log_printf>
   12163:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12166:	e9 c1 00 00 00       	jmp    1222c <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   1216b:	83 ec 04             	sub    $0x4,%esp
   1216e:	6a 20                	push   $0x20
   12170:	8d 45 90             	lea    -0x70(%ebp),%eax
   12173:	50                   	push   %eax
   12174:	ff 75 ec             	push   -0x14(%ebp)
   12177:	e8 a8 48 00 00       	call   16a24 <sys_read>
   1217c:	83 c4 10             	add    $0x10,%esp
   1217f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   12182:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12185:	83 f8 1f             	cmp    $0x1f,%eax
   12188:	77 15                	ja     1219f <load_elf_file+0x16b>
      log_printf("read file failed\n");
   1218a:	83 ec 0c             	sub    $0xc,%esp
   1218d:	68 dc 8c 01 00       	push   $0x18cdc
   12192:	e8 cb 67 00 00       	call   18962 <log_printf>
   12197:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   1219a:	e9 8d 00 00 00       	jmp    1222c <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   1219f:	8b 45 90             	mov    -0x70(%ebp),%eax
   121a2:	83 f8 01             	cmp    $0x1,%eax
   121a5:	75 53                	jne    121fa <load_elf_file+0x1c6>
   121a7:	8b 45 98             	mov    -0x68(%ebp),%eax
   121aa:	85 c0                	test   %eax,%eax
   121ac:	79 4c                	jns    121fa <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   121ae:	83 ec 04             	sub    $0x4,%esp
   121b1:	ff 75 10             	push   0x10(%ebp)
   121b4:	8d 45 90             	lea    -0x70(%ebp),%eax
   121b7:	50                   	push   %eax
   121b8:	ff 75 ec             	push   -0x14(%ebp)
   121bb:	e8 60 fd ff ff       	call   11f20 <load_phdr>
   121c0:	83 c4 10             	add    $0x10,%esp
   121c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   121c6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   121ca:	79 12                	jns    121de <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   121cc:	83 ec 0c             	sub    $0xc,%esp
   121cf:	68 6b 8d 01 00       	push   $0x18d6b
   121d4:	e8 89 67 00 00       	call   18962 <log_printf>
   121d9:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   121dc:	eb 4e                	jmp    1222c <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   121de:	8b 55 98             	mov    -0x68(%ebp),%edx
   121e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   121e4:	01 c2                	add    %eax,%edx
   121e6:	8b 45 08             	mov    0x8(%ebp),%eax
   121e9:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   121ec:	8b 45 08             	mov    0x8(%ebp),%eax
   121ef:	8b 50 10             	mov    0x10(%eax),%edx
   121f2:	8b 45 08             	mov    0x8(%ebp),%eax
   121f5:	89 50 14             	mov    %edx,0x14(%eax)
   121f8:	eb 01                	jmp    121fb <load_elf_file+0x1c7>
      continue;
   121fa:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   121fb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121ff:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12203:	0f b7 c0             	movzwl %ax,%eax
   12206:	01 45 f4             	add    %eax,-0xc(%ebp)
   12209:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   1220d:	0f b7 c0             	movzwl %ax,%eax
   12210:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12213:	0f 8c 25 ff ff ff    	jl     1213e <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   12219:	83 ec 0c             	sub    $0xc,%esp
   1221c:	ff 75 ec             	push   -0x14(%ebp)
   1221f:	e8 1e 4a 00 00       	call   16c42 <sys_close>
   12224:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   12227:	8b 45 c8             	mov    -0x38(%ebp),%eax
   1222a:	eb 19                	jmp    12245 <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   1222c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12230:	78 0e                	js     12240 <load_elf_file+0x20c>
    sys_close(file);
   12232:	83 ec 0c             	sub    $0xc,%esp
   12235:	ff 75 ec             	push   -0x14(%ebp)
   12238:	e8 05 4a 00 00       	call   16c42 <sys_close>
   1223d:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   12240:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12245:	c9                   	leave  
   12246:	c3                   	ret    

00012247 <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   12247:	55                   	push   %ebp
   12248:	89 e5                	mov    %esp,%ebp
   1224a:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   1224d:	8b 45 14             	mov    0x14(%ebp),%eax
   12250:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   12253:	8b 45 0c             	mov    0xc(%ebp),%eax
   12256:	83 c0 0c             	add    $0xc,%eax
   12259:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **dest_argv_tb =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   1225c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1225f:	83 ec 08             	sub    $0x8,%esp
   12262:	50                   	push   %eax
   12263:	ff 75 08             	push   0x8(%ebp)
   12266:	e8 a7 ec ff ff       	call   10f12 <memory_get_paddr>
   1226b:	83 c4 10             	add    $0x10,%esp
  char **dest_argv_tb =
   1226e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小
  //TODO:多给一个空指针位置，不然在解析参数的时候没有结束标志可能会访问异常
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * (argc + 1);
   12271:	8b 45 14             	mov    0x14(%ebp),%eax
   12274:	83 c0 04             	add    $0x4,%eax
   12277:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1227e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12281:	01 d0                	add    %edx,%eax
   12283:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   12286:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1228d:	e9 82 00 00 00       	jmp    12314 <copy_args+0xcd>
    char *from = argv[i];
   12292:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12295:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1229c:	8b 45 10             	mov    0x10(%ebp),%eax
   1229f:	01 d0                	add    %edx,%eax
   122a1:	8b 00                	mov    (%eax),%eax
   122a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   122a6:	83 ec 0c             	sub    $0xc,%esp
   122a9:	ff 75 e8             	push   -0x18(%ebp)
   122ac:	e8 30 5e 00 00       	call   180e1 <kernel_strlen>
   122b1:	83 c4 10             	add    $0x10,%esp
   122b4:	83 c0 01             	add    $0x1,%eax
   122b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //将每个字符串的内容陆续拷贝到dest_arg处，即task_arg以及指针数组的紧邻上方
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   122ba:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   122bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122c3:	51                   	push   %ecx
   122c4:	52                   	push   %edx
   122c5:	ff 75 08             	push   0x8(%ebp)
   122c8:	50                   	push   %eax
   122c9:	e8 97 ec ff ff       	call   10f65 <memory_copy_uvm_data>
   122ce:	83 c4 10             	add    $0x10,%esp
   122d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   122d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   122d8:	79 1c                	jns    122f6 <copy_args+0xaf>
   122da:	68 80 8d 01 00       	push   $0x18d80
   122df:	68 48 8e 01 00       	push   $0x18e48
   122e4:	68 98 03 00 00       	push   $0x398
   122e9:	68 5c 8c 01 00       	push   $0x18c5c
   122ee:	e8 59 59 00 00       	call   17c4c <pannic>
   122f3:	83 c4 10             	add    $0x10,%esp
    dest_argv_tb[i] = dest_arg;
   122f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12300:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12303:	01 c2                	add    %eax,%edx
   12305:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12308:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   1230a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1230d:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   12310:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12314:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12317:	3b 45 14             	cmp    0x14(%ebp),%eax
   1231a:	0f 8c 72 ff ff ff    	jl     12292 <copy_args+0x4b>
  }

  //将字符串指针数组的最后一项
  if (argc) {
   12320:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12324:	74 15                	je     1233b <copy_args+0xf4>
    dest_argv_tb[argc] = (char *)0; 
   12326:	8b 45 14             	mov    0x14(%ebp),%eax
   12329:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12330:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12333:	01 d0                	add    %edx,%eax
   12335:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  return memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   1233b:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1233e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12341:	6a 0c                	push   $0xc
   12343:	52                   	push   %edx
   12344:	ff 75 08             	push   0x8(%ebp)
   12347:	50                   	push   %eax
   12348:	e8 18 ec ff ff       	call   10f65 <memory_copy_uvm_data>
   1234d:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   12350:	c9                   	leave  
   12351:	c3                   	ret    

00012352 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   12352:	55                   	push   %ebp
   12353:	89 e5                	mov    %esp,%ebp
   12355:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   12358:	e8 54 f6 ff ff       	call   119b1 <task_current>
   1235d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   12360:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12363:	8b 40 78             	mov    0x78(%eax),%eax
   12366:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   12369:	e8 0f e6 ff ff       	call   1097d <memory_creat_uvm>
   1236e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   12371:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12375:	0f 84 4a 01 00 00    	je     124c5 <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   1237b:	83 ec 04             	sub    $0x4,%esp
   1237e:	ff 75 ec             	push   -0x14(%ebp)
   12381:	ff 75 08             	push   0x8(%ebp)
   12384:	ff 75 f4             	push   -0xc(%ebp)
   12387:	e8 a8 fc ff ff       	call   12034 <load_elf_file>
   1238c:	83 c4 10             	add    $0x10,%esp
   1238f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   12392:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12396:	0f 84 2c 01 00 00    	je     124c8 <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   1239c:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   123a3:	6a 07                	push   $0x7
   123a5:	68 00 20 03 00       	push   $0x32000
   123aa:	68 00 e0 fc df       	push   $0xdffce000
   123af:	ff 75 ec             	push   -0x14(%ebp)
   123b2:	e8 b8 e9 ff ff       	call   10d6f <memory_alloc_for_page_dir>
   123b7:	83 c4 10             	add    $0x10,%esp
   123ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   123bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123c1:	0f 88 04 01 00 00    	js     124cb <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   123c7:	83 ec 0c             	sub    $0xc,%esp
   123ca:	ff 75 0c             	push   0xc(%ebp)
   123cd:	e8 43 61 00 00       	call   18515 <strings_count>
   123d2:	83 c4 10             	add    $0x10,%esp
   123d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   123d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123db:	ff 75 dc             	push   -0x24(%ebp)
   123de:	ff 75 0c             	push   0xc(%ebp)
   123e1:	50                   	push   %eax
   123e2:	ff 75 ec             	push   -0x14(%ebp)
   123e5:	e8 5d fe ff ff       	call   12247 <copy_args>
   123ea:	83 c4 10             	add    $0x10,%esp
   123ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   123f0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123f4:	0f 88 d4 00 00 00    	js     124ce <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   123fa:	e8 b2 f5 ff ff       	call   119b1 <task_current>
   123ff:	8b 40 60             	mov    0x60(%eax),%eax
   12402:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   12405:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   12408:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1240b:	8d 50 ec             	lea    -0x14(%eax),%edx
   1240e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12411:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   12414:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12417:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1241a:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1241d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12420:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12427:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1242a:	8b 50 28             	mov    0x28(%eax),%edx
   1242d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12430:	89 50 2c             	mov    %edx,0x2c(%eax)
   12433:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12436:	8b 50 2c             	mov    0x2c(%eax),%edx
   12439:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1243c:	89 50 24             	mov    %edx,0x24(%eax)
   1243f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12442:	8b 50 24             	mov    0x24(%eax),%edx
   12445:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12448:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   1244b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1244e:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12455:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12458:	8b 50 1c             	mov    0x1c(%eax),%edx
   1245b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1245e:	89 50 14             	mov    %edx,0x14(%eax)
   12461:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12464:	8b 50 14             	mov    0x14(%eax),%edx
   12467:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1246a:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   1246d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12470:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   12476:	83 ec 0c             	sub    $0xc,%esp
   12479:	ff 75 08             	push   0x8(%ebp)
   1247c:	e8 c1 60 00 00       	call   18542 <get_file_name>
   12481:	83 c4 10             	add    $0x10,%esp
   12484:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12487:	83 c2 24             	add    $0x24,%edx
   1248a:	83 ec 04             	sub    $0x4,%esp
   1248d:	6a 20                	push   $0x20
   1248f:	50                   	push   %eax
   12490:	52                   	push   %edx
   12491:	e8 79 5b 00 00       	call   1800f <kernel_strncpy>
   12496:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   12499:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1249c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1249f:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   124a2:	83 ec 0c             	sub    $0xc,%esp
   124a5:	ff 75 ec             	push   -0x14(%ebp)
   124a8:	e8 e4 ed ff ff       	call   11291 <mmu_set_page_dir>
   124ad:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   124b0:	83 ec 0c             	sub    $0xc,%esp
   124b3:	ff 75 f0             	push   -0x10(%ebp)
   124b6:	e8 d4 e6 ff ff       	call   10b8f <memory_destroy_uvm>
   124bb:	83 c4 10             	add    $0x10,%esp
  return 0;
   124be:	b8 00 00 00 00       	mov    $0x0,%eax
   124c3:	eb 3a                	jmp    124ff <sys_execve+0x1ad>
    goto exec_failed;
   124c5:	90                   	nop
   124c6:	eb 07                	jmp    124cf <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   124c8:	90                   	nop
   124c9:	eb 04                	jmp    124cf <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124cb:	90                   	nop
   124cc:	eb 01                	jmp    124cf <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124ce:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   124cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   124d3:	74 25                	je     124fa <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   124d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   124db:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   124de:	83 ec 0c             	sub    $0xc,%esp
   124e1:	ff 75 f0             	push   -0x10(%ebp)
   124e4:	e8 a8 ed ff ff       	call   11291 <mmu_set_page_dir>
   124e9:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   124ec:	83 ec 0c             	sub    $0xc,%esp
   124ef:	ff 75 ec             	push   -0x14(%ebp)
   124f2:	e8 98 e6 ff ff       	call   10b8f <memory_destroy_uvm>
   124f7:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   124fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   124ff:	c9                   	leave  
   12500:	c3                   	ret    

00012501 <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   12501:	55                   	push   %ebp
   12502:	89 e5                	mov    %esp,%ebp
   12504:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   12507:	e8 a5 f4 ff ff       	call   119b1 <task_current>
   1250c:	89 45 e8             	mov    %eax,-0x18(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   1250f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12516:	eb 39                	jmp    12551 <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   12518:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1251b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1251e:	83 c2 30             	add    $0x30,%edx
   12521:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   12525:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (file) {
   12528:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   1252c:	74 1f                	je     1254d <sys_exit+0x4c>
      sys_close(fd);
   1252e:	83 ec 0c             	sub    $0xc,%esp
   12531:	ff 75 f4             	push   -0xc(%ebp)
   12534:	e8 09 47 00 00       	call   16c42 <sys_close>
   12539:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   1253c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1253f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12542:	83 c2 30             	add    $0x30,%edx
   12545:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   1254c:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   1254d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12551:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12555:	7e c1                	jle    12518 <sys_exit+0x17>
    }
  }

  //3.将该进程的子进程的父进程设为first_task，由其进行统一回收
  int move_child = 0; //标志位，判断是否当前进程已有子进程进入僵尸态
   12557:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  //TODO:加锁
  mutex_lock(&task_table_lock);
   1255e:	83 ec 0c             	sub    $0xc,%esp
   12561:	68 c0 b9 03 00       	push   $0x3b9c0
   12566:	e8 b6 4f 00 00       	call   17521 <mutex_lock>
   1256b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < TASK_COUNT; ++i) {
   1256e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12575:	eb 3b                	jmp    125b2 <sys_exit+0xb1>
    task_t *task = task_table + i;
   12577:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1257a:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12580:	05 c0 55 02 00       	add    $0x255c0,%eax
   12585:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (task->parent == curr_task) {
   12588:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1258b:	8b 40 04             	mov    0x4(%eax),%eax
   1258e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   12591:	75 1b                	jne    125ae <sys_exit+0xad>
      task->parent = &task_manager.first_task;
   12593:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12596:	c7 40 04 28 50 02 00 	movl   $0x25028,0x4(%eax)
      if (task->state == TASK_ZOMBIE) { //已有子进程提前退出进入僵尸态，则设置标志位
   1259d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125a0:	8b 00                	mov    (%eax),%eax
   125a2:	83 f8 06             	cmp    $0x6,%eax
   125a5:	75 07                	jne    125ae <sys_exit+0xad>
        move_child = 1;
   125a7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  for (int i = 0; i < TASK_COUNT; ++i) {
   125ae:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   125b2:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   125b6:	7e bf                	jle    12577 <sys_exit+0x76>
      }
    }
  }
  //TODO:解锁
  mutex_unlock(&task_table_lock);
   125b8:	83 ec 0c             	sub    $0xc,%esp
   125bb:	68 c0 b9 03 00       	push   $0x3b9c0
   125c0:	e8 02 50 00 00       	call   175c7 <mutex_unlock>
   125c5:	83 c4 10             	add    $0x10,%esp
 

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   125c8:	e8 c7 0d 00 00       	call   13394 <idt_enter_protection>
   125cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)


  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   125d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125d3:	8b 40 04             	mov    0x4(%eax),%eax
   125d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  if (move_child && (parent != &task_manager.first_task)) {  
   125d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125dd:	74 23                	je     12602 <sys_exit+0x101>
   125df:	81 7d e0 28 50 02 00 	cmpl   $0x25028,-0x20(%ebp)
   125e6:	74 1a                	je     12602 <sys_exit+0x101>
    //当前进程的父进程不是first_task,
    //需要对first_task进行唤醒，以使first_task
    //对当前进程的提前死亡的子进程进行资源回收
    if (task_manager.first_task.state == TASK_WAITTING) {
   125e8:	a1 28 50 02 00       	mov    0x25028,%eax
   125ed:	83 f8 04             	cmp    $0x4,%eax
   125f0:	75 10                	jne    12602 <sys_exit+0x101>
      task_set_ready(&task_manager.first_task);
   125f2:	83 ec 0c             	sub    $0xc,%esp
   125f5:	68 28 50 02 00       	push   $0x25028
   125fa:	e8 00 f3 ff ff       	call   118ff <task_set_ready>
   125ff:	83 c4 10             	add    $0x10,%esp
    }

  }
  

  if (parent->state ==
   12602:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12605:	8b 00                	mov    (%eax),%eax
   12607:	83 f8 04             	cmp    $0x4,%eax
   1260a:	75 0e                	jne    1261a <sys_exit+0x119>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   1260c:	83 ec 0c             	sub    $0xc,%esp
   1260f:	ff 75 e0             	push   -0x20(%ebp)
   12612:	e8 e8 f2 ff ff       	call   118ff <task_set_ready>
   12617:	83 c4 10             	add    $0x10,%esp
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   1261a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1261d:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   12623:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12626:	8b 55 08             	mov    0x8(%ebp),%edx
   12629:	89 50 0c             	mov    %edx,0xc(%eax)

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   1262c:	83 ec 0c             	sub    $0xc,%esp
   1262f:	ff 75 e8             	push   -0x18(%ebp)
   12632:	e8 0a f3 ff ff       	call   11941 <task_set_unready>
   12637:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   1263a:	e8 7c f3 ff ff       	call   119bb <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   1263f:	83 ec 0c             	sub    $0xc,%esp
   12642:	ff 75 e4             	push   -0x1c(%ebp)
   12645:	e8 62 0d 00 00       	call   133ac <idt_leave_protection>
   1264a:	83 c4 10             	add    $0x10,%esp
}
   1264d:	90                   	nop
   1264e:	c9                   	leave  
   1264f:	c3                   	ret    

00012650 <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   12650:	55                   	push   %ebp
   12651:	89 e5                	mov    %esp,%ebp
   12653:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   12656:	e8 56 f3 ff ff       	call   119b1 <task_current>
   1265b:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   1265e:	83 ec 0c             	sub    $0xc,%esp
   12661:	68 c0 b9 03 00       	push   $0x3b9c0
   12666:	e8 b6 4e 00 00       	call   17521 <mutex_lock>
   1266b:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   1266e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12675:	eb 6c                	jmp    126e3 <sys_wait+0x93>
      task_t *task = task_table + i;
   12677:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1267a:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12680:	05 c0 55 02 00       	add    $0x255c0,%eax
   12685:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->pid != 0 && task->parent != curr_task) {
   12688:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1268b:	8b 40 08             	mov    0x8(%eax),%eax
   1268e:	85 c0                	test   %eax,%eax
   12690:	74 0b                	je     1269d <sys_wait+0x4d>
   12692:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12695:	8b 40 04             	mov    0x4(%eax),%eax
   12698:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1269b:	75 41                	jne    126de <sys_wait+0x8e>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   1269d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126a0:	8b 00                	mov    (%eax),%eax
   126a2:	83 f8 06             	cmp    $0x6,%eax
   126a5:	75 38                	jne    126df <sys_wait+0x8f>
        int pid = task->pid;
   126a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126aa:	8b 40 08             	mov    0x8(%eax),%eax
   126ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   126b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126b3:	8b 50 0c             	mov    0xc(%eax),%edx
   126b6:	8b 45 08             	mov    0x8(%ebp),%eax
   126b9:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   126bb:	83 ec 0c             	sub    $0xc,%esp
   126be:	ff 75 e8             	push   -0x18(%ebp)
   126c1:	e8 b2 ef ff ff       	call   11678 <task_uninit>
   126c6:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   126c9:	83 ec 0c             	sub    $0xc,%esp
   126cc:	68 c0 b9 03 00       	push   $0x3b9c0
   126d1:	e8 f1 4e 00 00       	call   175c7 <mutex_unlock>
   126d6:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   126d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   126dc:	eb 52                	jmp    12730 <sys_wait+0xe0>
        continue;
   126de:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   126df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   126e3:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   126e7:	7e 8e                	jle    12677 <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   126e9:	83 ec 0c             	sub    $0xc,%esp
   126ec:	68 c0 b9 03 00       	push   $0x3b9c0
   126f1:	e8 d1 4e 00 00       	call   175c7 <mutex_unlock>
   126f6:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   126f9:	e8 96 0c 00 00       	call   13394 <idt_enter_protection>
   126fe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   12701:	83 ec 0c             	sub    $0xc,%esp
   12704:	ff 75 f0             	push   -0x10(%ebp)
   12707:	e8 35 f2 ff ff       	call   11941 <task_set_unready>
   1270c:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   1270f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12712:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   12718:	e8 9e f2 ff ff       	call   119bb <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   1271d:	83 ec 0c             	sub    $0xc,%esp
   12720:	ff 75 ec             	push   -0x14(%ebp)
   12723:	e8 84 0c 00 00       	call   133ac <idt_leave_protection>
   12728:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   1272b:	e9 2e ff ff ff       	jmp    1265e <sys_wait+0xe>
  }
  return 0;
   12730:	c9                   	leave  
   12731:	c3                   	ret    

00012732 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   12732:	55                   	push   %ebp
   12733:	89 e5                	mov    %esp,%ebp
   12735:	83 ec 08             	sub    $0x8,%esp
   12738:	8b 55 0c             	mov    0xc(%ebp),%edx
   1273b:	8b 45 14             	mov    0x14(%ebp),%eax
   1273e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12742:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12746:	8b 45 10             	mov    0x10(%ebp),%eax
   12749:	89 c2                	mov    %eax,%edx
   1274b:	8b 45 08             	mov    0x8(%ebp),%eax
   1274e:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   12751:	8b 45 10             	mov    0x10(%ebp),%eax
   12754:	c1 e8 10             	shr    $0x10,%eax
   12757:	89 c2                	mov    %eax,%edx
   12759:	8b 45 08             	mov    0x8(%ebp),%eax
   1275c:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   12760:	8b 45 08             	mov    0x8(%ebp),%eax
   12763:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12767:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1276b:	8b 45 08             	mov    0x8(%ebp),%eax
   1276e:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12772:	66 89 50 04          	mov    %dx,0x4(%eax)
   12776:	90                   	nop
   12777:	c9                   	leave  
   12778:	c3                   	ret    

00012779 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12779:	55                   	push   %ebp
   1277a:	89 e5                	mov    %esp,%ebp
   1277c:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1277f:	8b 45 08             	mov    0x8(%ebp),%eax
   12782:	c1 e8 10             	shr    $0x10,%eax
   12785:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   12789:	8b 45 08             	mov    0x8(%ebp),%eax
   1278c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12790:	8b 45 0c             	mov    0xc(%ebp),%eax
   12793:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   12796:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1279a:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1279e:	90                   	nop
   1279f:	c9                   	leave  
   127a0:	c3                   	ret    

000127a1 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   127a1:	55                   	push   %ebp
   127a2:	89 e5                	mov    %esp,%ebp
   127a4:	83 ec 18             	sub    $0x18,%esp
   127a7:	8b 55 08             	mov    0x8(%ebp),%edx
   127aa:	8b 45 14             	mov    0x14(%ebp),%eax
   127ad:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   127b1:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   127b5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   127b9:	66 c1 e8 03          	shr    $0x3,%ax
   127bd:	0f b7 c0             	movzwl %ax,%eax
   127c0:	c1 e0 03             	shl    $0x3,%eax
   127c3:	05 e0 bb 03 00       	add    $0x3bbe0,%eax
   127c8:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   127cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   127ce:	89 c2                	mov    %eax,%edx
   127d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127d3:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   127d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   127da:	c1 e8 10             	shr    $0x10,%eax
   127dd:	89 c2                	mov    %eax,%edx
   127df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127e2:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   127e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   127e8:	c1 e8 18             	shr    $0x18,%eax
   127eb:	89 c2                	mov    %eax,%edx
   127ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127f0:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   127f3:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   127fa:	76 1d                	jbe    12819 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   127fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ff:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12803:	66 0d 00 80          	or     $0x8000,%ax
   12807:	89 c2                	mov    %eax,%edx
   12809:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280c:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   12810:	8b 45 10             	mov    0x10(%ebp),%eax
   12813:	c1 e8 0c             	shr    $0xc,%eax
   12816:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12819:	8b 45 10             	mov    0x10(%ebp),%eax
   1281c:	89 c2                	mov    %eax,%edx
   1281e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12821:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   12824:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12827:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1282b:	89 c2                	mov    %eax,%edx
   1282d:	8b 45 10             	mov    0x10(%ebp),%eax
   12830:	c1 e8 08             	shr    $0x8,%eax
   12833:	66 25 00 0f          	and    $0xf00,%ax
   12837:	09 d0                	or     %edx,%eax
   12839:	89 c2                	mov    %eax,%edx
   1283b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1283e:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   12842:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12845:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12849:	89 c2                	mov    %eax,%edx
   1284b:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1284f:	80 e4 f0             	and    $0xf0,%ah
   12852:	09 d0                	or     %edx,%eax
   12854:	89 c2                	mov    %eax,%edx
   12856:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12859:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1285d:	90                   	nop
   1285e:	c9                   	leave  
   1285f:	c3                   	ret    

00012860 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   12860:	55                   	push   %ebp
   12861:	89 e5                	mov    %esp,%ebp
   12863:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12866:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1286d:	eb 1c                	jmp    1288b <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1286f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12872:	c1 e0 03             	shl    $0x3,%eax
   12875:	0f b7 c0             	movzwl %ax,%eax
   12878:	6a 00                	push   $0x0
   1287a:	6a 00                	push   $0x0
   1287c:	6a 00                	push   $0x0
   1287e:	50                   	push   %eax
   1287f:	e8 1d ff ff ff       	call   127a1 <segment_desc_set>
   12884:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12887:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1288b:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   12892:	7e db                	jle    1286f <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   12894:	68 92 40 00 00       	push   $0x4092
   12899:	6a ff                	push   $0xffffffff
   1289b:	6a 00                	push   $0x0
   1289d:	6a 10                	push   $0x10
   1289f:	e8 fd fe ff ff       	call   127a1 <segment_desc_set>
   128a4:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   128a7:	c6 05 e2 bb 04 00 01 	movb   $0x1,0x4bbe2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   128ae:	68 9a 40 00 00       	push   $0x409a
   128b3:	6a ff                	push   $0xffffffff
   128b5:	6a 00                	push   $0x0
   128b7:	6a 08                	push   $0x8
   128b9:	e8 e3 fe ff ff       	call   127a1 <segment_desc_set>
   128be:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   128c1:	c6 05 e1 bb 04 00 01 	movb   $0x1,0x4bbe1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   128c8:	ba e7 02 01 00       	mov    $0x102e7,%edx
   128cd:	b8 f8 bb 03 00       	mov    $0x3bbf8,%eax
   128d2:	68 05 ec 00 00       	push   $0xec05
   128d7:	52                   	push   %edx
   128d8:	6a 08                	push   $0x8
   128da:	50                   	push   %eax
   128db:	e8 52 fe ff ff       	call   12732 <gate_desc_set>
   128e0:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   128e3:	c6 05 e3 bb 04 00 01 	movb   $0x1,0x4bbe3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   128ea:	b8 e0 bb 03 00       	mov    $0x3bbe0,%eax
   128ef:	83 ec 08             	sub    $0x8,%esp
   128f2:	68 00 00 01 00       	push   $0x10000
   128f7:	50                   	push   %eax
   128f8:	e8 7c fe ff ff       	call   12779 <lgdt>
   128fd:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   12900:	83 ec 0c             	sub    $0xc,%esp
   12903:	68 e0 db 04 00       	push   $0x4dbe0
   12908:	e8 c7 4b 00 00       	call   174d4 <mutex_init>
   1290d:	83 c4 10             	add    $0x10,%esp
}
   12910:	90                   	nop
   12911:	c9                   	leave  
   12912:	c3                   	ret    

00012913 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   12913:	55                   	push   %ebp
   12914:	89 e5                	mov    %esp,%ebp
   12916:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12919:	83 ec 0c             	sub    $0xc,%esp
   1291c:	68 e0 db 04 00       	push   $0x4dbe0
   12921:	e8 fb 4b 00 00       	call   17521 <mutex_lock>
   12926:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12929:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12930:	eb 36                	jmp    12968 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   12932:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12935:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   1293a:	0f b6 00             	movzbl (%eax),%eax
   1293d:	84 c0                	test   %al,%al
   1293f:	75 23                	jne    12964 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   12941:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12944:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   12949:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   1294c:	83 ec 0c             	sub    $0xc,%esp
   1294f:	68 e0 db 04 00       	push   $0x4dbe0
   12954:	e8 6e 4c 00 00       	call   175c7 <mutex_unlock>
   12959:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1295c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1295f:	c1 e0 03             	shl    $0x3,%eax
   12962:	eb 22                	jmp    12986 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12964:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12968:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1296f:	7e c1                	jle    12932 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   12971:	83 ec 0c             	sub    $0xc,%esp
   12974:	68 e0 db 04 00       	push   $0x4dbe0
   12979:	e8 49 4c 00 00       	call   175c7 <mutex_unlock>
   1297e:	83 c4 10             	add    $0x10,%esp
    return -1;
   12981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12986:	c9                   	leave  
   12987:	c3                   	ret    

00012988 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   12988:	55                   	push   %ebp
   12989:	89 e5                	mov    %esp,%ebp
   1298b:	83 ec 14             	sub    $0x14,%esp
   1298e:	8b 45 08             	mov    0x8(%ebp),%eax
   12991:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   12995:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12999:	66 c1 e8 03          	shr    $0x3,%ax
   1299d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   129a1:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   129a5:	c6 80 e0 bb 04 00 00 	movb   $0x0,0x4bbe0(%eax)
}
   129ac:	90                   	nop
   129ad:	c9                   	leave  
   129ae:	c3                   	ret    

000129af <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   129af:	55                   	push   %ebp
   129b0:	89 e5                	mov    %esp,%ebp
   129b2:	fa                   	cli    
   129b3:	90                   	nop
   129b4:	5d                   	pop    %ebp
   129b5:	c3                   	ret    

000129b6 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   129b6:	55                   	push   %ebp
   129b7:	89 e5                	mov    %esp,%ebp
   129b9:	fb                   	sti    
   129ba:	90                   	nop
   129bb:	5d                   	pop    %ebp
   129bc:	c3                   	ret    

000129bd <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   129bd:	55                   	push   %ebp
   129be:	89 e5                	mov    %esp,%ebp
   129c0:	f4                   	hlt    
   129c1:	90                   	nop
   129c2:	5d                   	pop    %ebp
   129c3:	c3                   	ret    

000129c4 <inb>:
static inline uint8_t inb(uint16_t port) {
   129c4:	55                   	push   %ebp
   129c5:	89 e5                	mov    %esp,%ebp
   129c7:	83 ec 14             	sub    $0x14,%esp
   129ca:	8b 45 08             	mov    0x8(%ebp),%eax
   129cd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   129d1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129d5:	89 c2                	mov    %eax,%edx
   129d7:	ec                   	in     (%dx),%al
   129d8:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   129db:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   129df:	c9                   	leave  
   129e0:	c3                   	ret    

000129e1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   129e1:	55                   	push   %ebp
   129e2:	89 e5                	mov    %esp,%ebp
   129e4:	83 ec 08             	sub    $0x8,%esp
   129e7:	8b 45 08             	mov    0x8(%ebp),%eax
   129ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   129ed:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   129f1:	89 d0                	mov    %edx,%eax
   129f3:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   129f6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   129fa:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   129fe:	ee                   	out    %al,(%dx)
}
   129ff:	90                   	nop
   12a00:	c9                   	leave  
   12a01:	c3                   	ret    

00012a02 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12a02:	55                   	push   %ebp
   12a03:	89 e5                	mov    %esp,%ebp
   12a05:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   12a08:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0b:	c1 e8 10             	shr    $0x10,%eax
   12a0e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   12a12:	8b 45 08             	mov    0x8(%ebp),%eax
   12a15:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12a19:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a1c:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12a1f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12a23:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12a27:	90                   	nop
   12a28:	c9                   	leave  
   12a29:	c3                   	ret    

00012a2a <read_cr2>:
static inline uint32_t read_cr2(void) {
   12a2a:	55                   	push   %ebp
   12a2b:	89 e5                	mov    %esp,%ebp
   12a2d:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12a30:	0f 20 d0             	mov    %cr2,%eax
   12a33:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12a36:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a39:	c9                   	leave  
   12a3a:	c3                   	ret    

00012a3b <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12a3b:	55                   	push   %ebp
   12a3c:	89 e5                	mov    %esp,%ebp
   12a3e:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12a41:	9c                   	pushf  
   12a42:	58                   	pop    %eax
   12a43:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12a46:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a49:	c9                   	leave  
   12a4a:	c3                   	ret    

00012a4b <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12a4b:	55                   	push   %ebp
   12a4c:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12a4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a51:	50                   	push   %eax
   12a52:	9d                   	popf   
}
   12a53:	90                   	nop
   12a54:	5d                   	pop    %ebp
   12a55:	c3                   	ret    

00012a56 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12a56:	55                   	push   %ebp
   12a57:	89 e5                	mov    %esp,%ebp
   12a59:	57                   	push   %edi
   12a5a:	56                   	push   %esi
   12a5b:	53                   	push   %ebx
   12a5c:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   12a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a62:	8b 40 3c             	mov    0x3c(%eax),%eax
   12a65:	83 e0 03             	and    $0x3,%eax
   12a68:	85 c0                	test   %eax,%eax
   12a6a:	74 14                	je     12a80 <print_exception_fram+0x2a>
    ss = frame->ss3;
   12a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6f:	8b 40 48             	mov    0x48(%eax),%eax
   12a72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12a75:	8b 45 08             	mov    0x8(%ebp),%eax
   12a78:	8b 40 44             	mov    0x44(%eax),%eax
   12a7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
   12a7e:	eb 12                	jmp    12a92 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   12a80:	8b 45 08             	mov    0x8(%ebp),%eax
   12a83:	8b 40 0c             	mov    0xc(%eax),%eax
   12a86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12a89:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8c:	8b 40 1c             	mov    0x1c(%eax),%eax
   12a8f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   12a92:	83 ec 0c             	sub    $0xc,%esp
   12a95:	68 54 8e 01 00       	push   $0x18e54
   12a9a:	e8 c3 5e 00 00       	call   18962 <log_printf>
   12a9f:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa5:	8b 50 34             	mov    0x34(%eax),%edx
   12aa8:	8b 45 08             	mov    0x8(%ebp),%eax
   12aab:	8b 40 30             	mov    0x30(%eax),%eax
   12aae:	83 ec 04             	sub    $0x4,%esp
   12ab1:	52                   	push   %edx
   12ab2:	50                   	push   %eax
   12ab3:	68 93 8e 01 00       	push   $0x18e93
   12ab8:	e8 a5 5e 00 00       	call   18962 <log_printf>
   12abd:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t\t%d\nDS:\t\t\t%d\nSS:\t\t\t%d\nES:\t\t\t%d\nFS:\t\t\t%d\nGS:\t\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac3:	8b 30                	mov    (%eax),%esi
   12ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac8:	8b 58 04             	mov    0x4(%eax),%ebx
   12acb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ace:	8b 48 08             	mov    0x8(%eax),%ecx
   12ad1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad4:	8b 50 0c             	mov    0xc(%eax),%edx
   12ad7:	8b 45 08             	mov    0x8(%ebp),%eax
   12ada:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t\t%d\nDS:\t\t\t%d\nSS:\t\t\t%d\nES:\t\t\t%d\nFS:\t\t\t%d\nGS:\t\t\t%d\n", 
   12add:	83 ec 04             	sub    $0x4,%esp
   12ae0:	56                   	push   %esi
   12ae1:	53                   	push   %ebx
   12ae2:	51                   	push   %ecx
   12ae3:	ff 75 e4             	push   -0x1c(%ebp)
   12ae6:	52                   	push   %edx
   12ae7:	50                   	push   %eax
   12ae8:	68 ac 8e 01 00       	push   $0x18eac
   12aed:	e8 70 5e 00 00       	call   18962 <log_printf>
   12af2:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12af5:	8b 45 08             	mov    0x8(%ebp),%eax
   12af8:	8b 40 18             	mov    0x18(%eax),%eax
   12afb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12afe:	8b 45 08             	mov    0x8(%ebp),%eax
   12b01:	8b 78 10             	mov    0x10(%eax),%edi
   12b04:	8b 45 08             	mov    0x8(%ebp),%eax
   12b07:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12b0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0d:	8b 58 24             	mov    0x24(%eax),%ebx
   12b10:	8b 45 08             	mov    0x8(%ebp),%eax
   12b13:	8b 48 28             	mov    0x28(%eax),%ecx
   12b16:	8b 45 08             	mov    0x8(%ebp),%eax
   12b19:	8b 50 20             	mov    0x20(%eax),%edx
   12b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1f:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12b22:	83 ec 0c             	sub    $0xc,%esp
   12b25:	ff 75 e0             	push   -0x20(%ebp)
   12b28:	ff 75 d4             	push   -0x2c(%ebp)
   12b2b:	57                   	push   %edi
   12b2c:	56                   	push   %esi
   12b2d:	53                   	push   %ebx
   12b2e:	51                   	push   %ecx
   12b2f:	52                   	push   %edx
   12b30:	50                   	push   %eax
   12b31:	68 e4 8e 01 00       	push   $0x18ee4
   12b36:	e8 27 5e 00 00       	call   18962 <log_printf>
   12b3b:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b41:	8b 50 40             	mov    0x40(%eax),%edx
   12b44:	8b 45 08             	mov    0x8(%ebp),%eax
   12b47:	8b 40 38             	mov    0x38(%eax),%eax
   12b4a:	83 ec 04             	sub    $0x4,%esp
   12b4d:	52                   	push   %edx
   12b4e:	50                   	push   %eax
   12b4f:	68 3d 8f 01 00       	push   $0x18f3d
   12b54:	e8 09 5e 00 00       	call   18962 <log_printf>
   12b59:	83 c4 10             	add    $0x10,%esp
}
   12b5c:	90                   	nop
   12b5d:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12b60:	5b                   	pop    %ebx
   12b61:	5e                   	pop    %esi
   12b62:	5f                   	pop    %edi
   12b63:	5d                   	pop    %ebp
   12b64:	c3                   	ret    

00012b65 <exit_excption_handler>:
/**
 * @brief 进程退出异常处理
 * 
 * @param frame 
 */
static void exit_excption_handler(const exception_frame_t *frame) {
   12b65:	55                   	push   %ebp
   12b66:	89 e5                	mov    %esp,%ebp
   12b68:	83 ec 08             	sub    $0x8,%esp
  if (frame->cs & 0x3) {  //用户进程异常，直接退出用户进程
   12b6b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6e:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b71:	83 e0 03             	and    $0x3,%eax
   12b74:	85 c0                	test   %eax,%eax
   12b76:	74 14                	je     12b8c <exit_excption_handler+0x27>
        sys_exit(frame->error_code);
   12b78:	8b 45 08             	mov    0x8(%ebp),%eax
   12b7b:	8b 40 34             	mov    0x34(%eax),%eax
   12b7e:	83 ec 0c             	sub    $0xc,%esp
   12b81:	50                   	push   %eax
   12b82:	e8 7a f9 ff ff       	call   12501 <sys_exit>
   12b87:	83 c4 10             	add    $0x10,%esp
  } else {  //内核异常直接死机
      for (;;) {
          hlt();
      }
  }
}
   12b8a:	eb 07                	jmp    12b93 <exit_excption_handler+0x2e>
          hlt();
   12b8c:	e8 2c fe ff ff       	call   129bd <hlt>
   12b91:	eb f9                	jmp    12b8c <exit_excption_handler+0x27>
}
   12b93:	c9                   	leave  
   12b94:	c3                   	ret    

00012b95 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12b95:	55                   	push   %ebp
   12b96:	89 e5                	mov    %esp,%ebp
   12b98:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12b9b:	83 ec 0c             	sub    $0xc,%esp
   12b9e:	68 58 8f 01 00       	push   $0x18f58
   12ba3:	e8 ba 5d 00 00       	call   18962 <log_printf>
   12ba8:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12bab:	83 ec 08             	sub    $0x8,%esp
   12bae:	ff 75 0c             	push   0xc(%ebp)
   12bb1:	68 8d 8f 01 00       	push   $0x18f8d
   12bb6:	e8 a7 5d 00 00       	call   18962 <log_printf>
   12bbb:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12bbe:	83 ec 0c             	sub    $0xc,%esp
   12bc1:	ff 75 08             	push   0x8(%ebp)
   12bc4:	e8 8d fe ff ff       	call   12a56 <print_exception_fram>
   12bc9:	83 c4 10             	add    $0x10,%esp
                              
  
  exit_excption_handler(frame);
   12bcc:	83 ec 0c             	sub    $0xc,%esp
   12bcf:	ff 75 08             	push   0x8(%ebp)
   12bd2:	e8 8e ff ff ff       	call   12b65 <exit_excption_handler>
   12bd7:	83 c4 10             	add    $0x10,%esp
}
   12bda:	90                   	nop
   12bdb:	c9                   	leave  
   12bdc:	c3                   	ret    

00012bdd <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12bdd:	55                   	push   %ebp
   12bde:	89 e5                	mov    %esp,%ebp
   12be0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12be3:	83 ec 08             	sub    $0x8,%esp
   12be6:	68 a8 8f 01 00       	push   $0x18fa8
   12beb:	ff 75 08             	push   0x8(%ebp)
   12bee:	e8 a2 ff ff ff       	call   12b95 <do_default_handler>
   12bf3:	83 c4 10             	add    $0x10,%esp
}
   12bf6:	90                   	nop
   12bf7:	c9                   	leave  
   12bf8:	c3                   	ret    

00012bf9 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12bf9:	55                   	push   %ebp
   12bfa:	89 e5                	mov    %esp,%ebp
   12bfc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12bff:	83 ec 08             	sub    $0x8,%esp
   12c02:	68 ba 8f 01 00       	push   $0x18fba
   12c07:	ff 75 08             	push   0x8(%ebp)
   12c0a:	e8 86 ff ff ff       	call   12b95 <do_default_handler>
   12c0f:	83 c4 10             	add    $0x10,%esp
}
   12c12:	90                   	nop
   12c13:	c9                   	leave  
   12c14:	c3                   	ret    

00012c15 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12c15:	55                   	push   %ebp
   12c16:	89 e5                	mov    %esp,%ebp
   12c18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12c1b:	83 ec 08             	sub    $0x8,%esp
   12c1e:	68 cc 8f 01 00       	push   $0x18fcc
   12c23:	ff 75 08             	push   0x8(%ebp)
   12c26:	e8 6a ff ff ff       	call   12b95 <do_default_handler>
   12c2b:	83 c4 10             	add    $0x10,%esp
}
   12c2e:	90                   	nop
   12c2f:	c9                   	leave  
   12c30:	c3                   	ret    

00012c31 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12c31:	55                   	push   %ebp
   12c32:	89 e5                	mov    %esp,%ebp
   12c34:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12c37:	83 ec 08             	sub    $0x8,%esp
   12c3a:	68 dc 8f 01 00       	push   $0x18fdc
   12c3f:	ff 75 08             	push   0x8(%ebp)
   12c42:	e8 4e ff ff ff       	call   12b95 <do_default_handler>
   12c47:	83 c4 10             	add    $0x10,%esp
}
   12c4a:	90                   	nop
   12c4b:	c9                   	leave  
   12c4c:	c3                   	ret    

00012c4d <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12c4d:	55                   	push   %ebp
   12c4e:	89 e5                	mov    %esp,%ebp
   12c50:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12c53:	83 ec 08             	sub    $0x8,%esp
   12c56:	68 ea 8f 01 00       	push   $0x18fea
   12c5b:	ff 75 08             	push   0x8(%ebp)
   12c5e:	e8 32 ff ff ff       	call   12b95 <do_default_handler>
   12c63:	83 c4 10             	add    $0x10,%esp
}
   12c66:	90                   	nop
   12c67:	c9                   	leave  
   12c68:	c3                   	ret    

00012c69 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12c69:	55                   	push   %ebp
   12c6a:	89 e5                	mov    %esp,%ebp
   12c6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12c6f:	83 ec 08             	sub    $0x8,%esp
   12c72:	68 ff 8f 01 00       	push   $0x18fff
   12c77:	ff 75 08             	push   0x8(%ebp)
   12c7a:	e8 16 ff ff ff       	call   12b95 <do_default_handler>
   12c7f:	83 c4 10             	add    $0x10,%esp
}
   12c82:	90                   	nop
   12c83:	c9                   	leave  
   12c84:	c3                   	ret    

00012c85 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12c85:	55                   	push   %ebp
   12c86:	89 e5                	mov    %esp,%ebp
   12c88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12c8b:	83 ec 08             	sub    $0x8,%esp
   12c8e:	68 12 90 01 00       	push   $0x19012
   12c93:	ff 75 08             	push   0x8(%ebp)
   12c96:	e8 fa fe ff ff       	call   12b95 <do_default_handler>
   12c9b:	83 c4 10             	add    $0x10,%esp
}
   12c9e:	90                   	nop
   12c9f:	c9                   	leave  
   12ca0:	c3                   	ret    

00012ca1 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12ca1:	55                   	push   %ebp
   12ca2:	89 e5                	mov    %esp,%ebp
   12ca4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12ca7:	83 ec 08             	sub    $0x8,%esp
   12caa:	68 28 90 01 00       	push   $0x19028
   12caf:	ff 75 08             	push   0x8(%ebp)
   12cb2:	e8 de fe ff ff       	call   12b95 <do_default_handler>
   12cb7:	83 c4 10             	add    $0x10,%esp
}
   12cba:	90                   	nop
   12cbb:	c9                   	leave  
   12cbc:	c3                   	ret    

00012cbd <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12cbd:	55                   	push   %ebp
   12cbe:	89 e5                	mov    %esp,%ebp
   12cc0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12cc3:	83 ec 08             	sub    $0x8,%esp
   12cc6:	68 41 90 01 00       	push   $0x19041
   12ccb:	ff 75 08             	push   0x8(%ebp)
   12cce:	e8 c2 fe ff ff       	call   12b95 <do_default_handler>
   12cd3:	83 c4 10             	add    $0x10,%esp
}
   12cd6:	90                   	nop
   12cd7:	c9                   	leave  
   12cd8:	c3                   	ret    

00012cd9 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12cd9:	55                   	push   %ebp
   12cda:	89 e5                	mov    %esp,%ebp
   12cdc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12cdf:	83 ec 08             	sub    $0x8,%esp
   12ce2:	68 5e 90 01 00       	push   $0x1905e
   12ce7:	ff 75 08             	push   0x8(%ebp)
   12cea:	e8 a6 fe ff ff       	call   12b95 <do_default_handler>
   12cef:	83 c4 10             	add    $0x10,%esp
}
   12cf2:	90                   	nop
   12cf3:	c9                   	leave  
   12cf4:	c3                   	ret    

00012cf5 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12cf5:	55                   	push   %ebp
   12cf6:	89 e5                	mov    %esp,%ebp
   12cf8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12cfb:	83 ec 08             	sub    $0x8,%esp
   12cfe:	68 75 90 01 00       	push   $0x19075
   12d03:	ff 75 08             	push   0x8(%ebp)
   12d06:	e8 8a fe ff ff       	call   12b95 <do_default_handler>
   12d0b:	83 c4 10             	add    $0x10,%esp
}
   12d0e:	90                   	nop
   12d0f:	c9                   	leave  
   12d10:	c3                   	ret    

00012d11 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12d11:	55                   	push   %ebp
   12d12:	89 e5                	mov    %esp,%ebp
   12d14:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12d17:	83 ec 08             	sub    $0x8,%esp
   12d1a:	68 8b 90 01 00       	push   $0x1908b
   12d1f:	ff 75 08             	push   0x8(%ebp)
   12d22:	e8 6e fe ff ff       	call   12b95 <do_default_handler>
   12d27:	83 c4 10             	add    $0x10,%esp
}
   12d2a:	90                   	nop
   12d2b:	c9                   	leave  
   12d2c:	c3                   	ret    

00012d2d <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12d2d:	55                   	push   %ebp
   12d2e:	89 e5                	mov    %esp,%ebp
   12d30:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12d33:	83 ec 08             	sub    $0x8,%esp
   12d36:	68 a9 90 01 00       	push   $0x190a9
   12d3b:	ff 75 08             	push   0x8(%ebp)
   12d3e:	e8 52 fe ff ff       	call   12b95 <do_default_handler>
   12d43:	83 c4 10             	add    $0x10,%esp
}
   12d46:	90                   	nop
   12d47:	c9                   	leave  
   12d48:	c3                   	ret    

00012d49 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12d49:	55                   	push   %ebp
   12d4a:	89 e5                	mov    %esp,%ebp
   12d4c:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12d4f:	83 ec 0c             	sub    $0xc,%esp
   12d52:	68 c8 90 01 00       	push   $0x190c8
   12d57:	e8 06 5c 00 00       	call   18962 <log_printf>
   12d5c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12d5f:	83 ec 0c             	sub    $0xc,%esp
   12d62:	68 ec 90 01 00       	push   $0x190ec
   12d67:	e8 f6 5b 00 00       	call   18962 <log_printf>
   12d6c:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12d6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d72:	8b 40 34             	mov    0x34(%eax),%eax
   12d75:	83 e0 01             	and    $0x1,%eax
   12d78:	85 c0                	test   %eax,%eax
   12d7a:	74 12                	je     12d8e <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12d7c:	83 ec 0c             	sub    $0xc,%esp
   12d7f:	68 18 91 01 00       	push   $0x19118
   12d84:	e8 d9 5b 00 00       	call   18962 <log_printf>
   12d89:	83 c4 10             	add    $0x10,%esp
   12d8c:	eb 10                	jmp    12d9e <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12d8e:	83 ec 0c             	sub    $0xc,%esp
   12d91:	68 94 91 01 00       	push   $0x19194
   12d96:	e8 c7 5b 00 00       	call   18962 <log_printf>
   12d9b:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12d9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12da1:	8b 40 34             	mov    0x34(%eax),%eax
   12da4:	83 e0 02             	and    $0x2,%eax
   12da7:	85 c0                	test   %eax,%eax
   12da9:	74 12                	je     12dbd <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12dab:	83 ec 0c             	sub    $0xc,%esp
   12dae:	68 ec 91 01 00       	push   $0x191ec
   12db3:	e8 aa 5b 00 00       	call   18962 <log_printf>
   12db8:	83 c4 10             	add    $0x10,%esp
   12dbb:	eb 10                	jmp    12dcd <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12dbd:	83 ec 0c             	sub    $0xc,%esp
   12dc0:	68 38 92 01 00       	push   $0x19238
   12dc5:	e8 98 5b 00 00       	call   18962 <log_printf>
   12dca:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12dcd:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd0:	8b 40 34             	mov    0x34(%eax),%eax
   12dd3:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12dd8:	83 ec 08             	sub    $0x8,%esp
   12ddb:	50                   	push   %eax
   12ddc:	68 65 92 01 00       	push   $0x19265
   12de1:	e8 7c 5b 00 00       	call   18962 <log_printf>
   12de6:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12de9:	83 ec 0c             	sub    $0xc,%esp
   12dec:	ff 75 08             	push   0x8(%ebp)
   12def:	e8 62 fc ff ff       	call   12a56 <print_exception_fram>
   12df4:	83 c4 10             	add    $0x10,%esp

    //进程退出异常
    exit_excption_handler(frame);
   12df7:	83 ec 0c             	sub    $0xc,%esp
   12dfa:	ff 75 08             	push   0x8(%ebp)
   12dfd:	e8 63 fd ff ff       	call   12b65 <exit_excption_handler>
   12e02:	83 c4 10             	add    $0x10,%esp
}
   12e05:	90                   	nop
   12e06:	c9                   	leave  
   12e07:	c3                   	ret    

00012e08 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12e08:	55                   	push   %ebp
   12e09:	89 e5                	mov    %esp,%ebp
   12e0b:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12e0e:	83 ec 0c             	sub    $0xc,%esp
   12e11:	68 c8 90 01 00       	push   $0x190c8
   12e16:	e8 47 5b 00 00       	call   18962 <log_printf>
   12e1b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12e1e:	83 ec 0c             	sub    $0xc,%esp
   12e21:	68 78 92 01 00       	push   $0x19278
   12e26:	e8 37 5b 00 00       	call   18962 <log_printf>
   12e2b:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e31:	8b 40 34             	mov    0x34(%eax),%eax
   12e34:	83 e0 01             	and    $0x1,%eax
   12e37:	85 c0                	test   %eax,%eax
   12e39:	74 18                	je     12e53 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12e3b:	e8 ea fb ff ff       	call   12a2a <read_cr2>
   12e40:	83 ec 08             	sub    $0x8,%esp
   12e43:	50                   	push   %eax
   12e44:	68 9c 92 01 00       	push   $0x1929c
   12e49:	e8 14 5b 00 00       	call   18962 <log_printf>
   12e4e:	83 c4 10             	add    $0x10,%esp
   12e51:	eb 16                	jmp    12e69 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12e53:	e8 d2 fb ff ff       	call   12a2a <read_cr2>
   12e58:	83 ec 08             	sub    $0x8,%esp
   12e5b:	50                   	push   %eax
   12e5c:	68 c4 92 01 00       	push   $0x192c4
   12e61:	e8 fc 5a 00 00       	call   18962 <log_printf>
   12e66:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12e69:	8b 45 08             	mov    0x8(%ebp),%eax
   12e6c:	8b 40 34             	mov    0x34(%eax),%eax
   12e6f:	83 e0 02             	and    $0x2,%eax
   12e72:	85 c0                	test   %eax,%eax
   12e74:	74 12                	je     12e88 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12e76:	83 ec 0c             	sub    $0xc,%esp
   12e79:	68 e0 92 01 00       	push   $0x192e0
   12e7e:	e8 df 5a 00 00       	call   18962 <log_printf>
   12e83:	83 c4 10             	add    $0x10,%esp
   12e86:	eb 10                	jmp    12e98 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12e88:	83 ec 0c             	sub    $0xc,%esp
   12e8b:	68 0c 93 01 00       	push   $0x1930c
   12e90:	e8 cd 5a 00 00       	call   18962 <log_printf>
   12e95:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12e98:	8b 45 08             	mov    0x8(%ebp),%eax
   12e9b:	8b 40 34             	mov    0x34(%eax),%eax
   12e9e:	83 e0 04             	and    $0x4,%eax
   12ea1:	85 c0                	test   %eax,%eax
   12ea3:	74 12                	je     12eb7 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12ea5:	83 ec 0c             	sub    $0xc,%esp
   12ea8:	68 38 93 01 00       	push   $0x19338
   12ead:	e8 b0 5a 00 00       	call   18962 <log_printf>
   12eb2:	83 c4 10             	add    $0x10,%esp
   12eb5:	eb 10                	jmp    12ec7 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12eb7:	83 ec 0c             	sub    $0xc,%esp
   12eba:	68 60 93 01 00       	push   $0x19360
   12ebf:	e8 9e 5a 00 00       	call   18962 <log_printf>
   12ec4:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12ec7:	83 ec 0c             	sub    $0xc,%esp
   12eca:	ff 75 08             	push   0x8(%ebp)
   12ecd:	e8 84 fb ff ff       	call   12a56 <print_exception_fram>
   12ed2:	83 c4 10             	add    $0x10,%esp
  
    //进程退出异常
    exit_excption_handler(frame);
   12ed5:	83 ec 0c             	sub    $0xc,%esp
   12ed8:	ff 75 08             	push   0x8(%ebp)
   12edb:	e8 85 fc ff ff       	call   12b65 <exit_excption_handler>
   12ee0:	83 c4 10             	add    $0x10,%esp
}
   12ee3:	90                   	nop
   12ee4:	c9                   	leave  
   12ee5:	c3                   	ret    

00012ee6 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12ee6:	55                   	push   %ebp
   12ee7:	89 e5                	mov    %esp,%ebp
   12ee9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12eec:	83 ec 08             	sub    $0x8,%esp
   12eef:	68 8c 93 01 00       	push   $0x1938c
   12ef4:	ff 75 08             	push   0x8(%ebp)
   12ef7:	e8 99 fc ff ff       	call   12b95 <do_default_handler>
   12efc:	83 c4 10             	add    $0x10,%esp
}
   12eff:	90                   	nop
   12f00:	c9                   	leave  
   12f01:	c3                   	ret    

00012f02 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12f02:	55                   	push   %ebp
   12f03:	89 e5                	mov    %esp,%ebp
   12f05:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12f08:	83 ec 08             	sub    $0x8,%esp
   12f0b:	68 a1 93 01 00       	push   $0x193a1
   12f10:	ff 75 08             	push   0x8(%ebp)
   12f13:	e8 7d fc ff ff       	call   12b95 <do_default_handler>
   12f18:	83 c4 10             	add    $0x10,%esp
}
   12f1b:	90                   	nop
   12f1c:	c9                   	leave  
   12f1d:	c3                   	ret    

00012f1e <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12f1e:	55                   	push   %ebp
   12f1f:	89 e5                	mov    %esp,%ebp
   12f21:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12f24:	83 ec 08             	sub    $0x8,%esp
   12f27:	68 bc 93 01 00       	push   $0x193bc
   12f2c:	ff 75 08             	push   0x8(%ebp)
   12f2f:	e8 61 fc ff ff       	call   12b95 <do_default_handler>
   12f34:	83 c4 10             	add    $0x10,%esp
}
   12f37:	90                   	nop
   12f38:	c9                   	leave  
   12f39:	c3                   	ret    

00012f3a <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12f3a:	55                   	push   %ebp
   12f3b:	89 e5                	mov    %esp,%ebp
   12f3d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12f40:	83 ec 08             	sub    $0x8,%esp
   12f43:	68 d5 93 01 00       	push   $0x193d5
   12f48:	ff 75 08             	push   0x8(%ebp)
   12f4b:	e8 45 fc ff ff       	call   12b95 <do_default_handler>
   12f50:	83 c4 10             	add    $0x10,%esp
}
   12f53:	90                   	nop
   12f54:	c9                   	leave  
   12f55:	c3                   	ret    

00012f56 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12f56:	55                   	push   %ebp
   12f57:	89 e5                	mov    %esp,%ebp
   12f59:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12f5c:	83 ec 08             	sub    $0x8,%esp
   12f5f:	68 ee 93 01 00       	push   $0x193ee
   12f64:	ff 75 08             	push   0x8(%ebp)
   12f67:	e8 29 fc ff ff       	call   12b95 <do_default_handler>
   12f6c:	83 c4 10             	add    $0x10,%esp
}
   12f6f:	90                   	nop
   12f70:	c9                   	leave  
   12f71:	c3                   	ret    

00012f72 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12f72:	55                   	push   %ebp
   12f73:	89 e5                	mov    %esp,%ebp
   12f75:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12f78:	83 ec 08             	sub    $0x8,%esp
   12f7b:	68 0b 94 01 00       	push   $0x1940b
   12f80:	ff 75 08             	push   0x8(%ebp)
   12f83:	e8 0d fc ff ff       	call   12b95 <do_default_handler>
   12f88:	83 c4 10             	add    $0x10,%esp
}
   12f8b:	90                   	nop
   12f8c:	c9                   	leave  
   12f8d:	c3                   	ret    

00012f8e <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12f8e:	55                   	push   %ebp
   12f8f:	89 e5                	mov    %esp,%ebp
   12f91:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12f94:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12f9b:	7f 06                	jg     12fa3 <idt_install+0x15>
   12f9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12fa1:	79 07                	jns    12faa <idt_install+0x1c>
   12fa3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fa8:	eb 25                	jmp    12fcf <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12faa:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fad:	8b 55 08             	mov    0x8(%ebp),%edx
   12fb0:	c1 e2 03             	shl    $0x3,%edx
   12fb3:	81 c2 00 dc 04 00    	add    $0x4dc00,%edx
   12fb9:	68 00 8e 00 00       	push   $0x8e00
   12fbe:	50                   	push   %eax
   12fbf:	6a 08                	push   $0x8
   12fc1:	52                   	push   %edx
   12fc2:	e8 6b f7 ff ff       	call   12732 <gate_desc_set>
   12fc7:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12fca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fcf:	c9                   	leave  
   12fd0:	c3                   	ret    

00012fd1 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12fd1:	55                   	push   %ebp
   12fd2:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12fd4:	6a 11                	push   $0x11
   12fd6:	6a 20                	push   $0x20
   12fd8:	e8 04 fa ff ff       	call   129e1 <outb>
   12fdd:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12fe0:	6a 20                	push   $0x20
   12fe2:	6a 21                	push   $0x21
   12fe4:	e8 f8 f9 ff ff       	call   129e1 <outb>
   12fe9:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12fec:	6a 04                	push   $0x4
   12fee:	6a 21                	push   $0x21
   12ff0:	e8 ec f9 ff ff       	call   129e1 <outb>
   12ff5:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12ff8:	6a 01                	push   $0x1
   12ffa:	6a 21                	push   $0x21
   12ffc:	e8 e0 f9 ff ff       	call   129e1 <outb>
   13001:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   13004:	6a 11                	push   $0x11
   13006:	68 a0 00 00 00       	push   $0xa0
   1300b:	e8 d1 f9 ff ff       	call   129e1 <outb>
   13010:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   13013:	6a 28                	push   $0x28
   13015:	68 a1 00 00 00       	push   $0xa1
   1301a:	e8 c2 f9 ff ff       	call   129e1 <outb>
   1301f:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   13022:	6a 02                	push   $0x2
   13024:	68 a1 00 00 00       	push   $0xa1
   13029:	e8 b3 f9 ff ff       	call   129e1 <outb>
   1302e:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   13031:	6a 01                	push   $0x1
   13033:	68 a1 00 00 00       	push   $0xa1
   13038:	e8 a4 f9 ff ff       	call   129e1 <outb>
   1303d:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   13040:	68 fb 00 00 00       	push   $0xfb
   13045:	6a 21                	push   $0x21
   13047:	e8 95 f9 ff ff       	call   129e1 <outb>
   1304c:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   1304f:	68 ff 00 00 00       	push   $0xff
   13054:	68 a1 00 00 00       	push   $0xa1
   13059:	e8 83 f9 ff ff       	call   129e1 <outb>
   1305e:	83 c4 08             	add    $0x8,%esp


}
   13061:	90                   	nop
   13062:	c9                   	leave  
   13063:	c3                   	ret    

00013064 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   13064:	55                   	push   %ebp
   13065:	89 e5                	mov    %esp,%ebp
   13067:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1306a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13071:	eb 17                	jmp    1308a <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   13073:	83 ec 08             	sub    $0x8,%esp
   13076:	68 2a 00 01 00       	push   $0x1002a
   1307b:	ff 75 f4             	push   -0xc(%ebp)
   1307e:	e8 0b ff ff ff       	call   12f8e <idt_install>
   13083:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   13086:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1308a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   13091:	7e e0                	jle    13073 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   13093:	83 ec 08             	sub    $0x8,%esp
   13096:	68 47 00 01 00       	push   $0x10047
   1309b:	6a 00                	push   $0x0
   1309d:	e8 ec fe ff ff       	call   12f8e <idt_install>
   130a2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   130a5:	83 ec 08             	sub    $0x8,%esp
   130a8:	68 64 00 01 00       	push   $0x10064
   130ad:	6a 01                	push   $0x1
   130af:	e8 da fe ff ff       	call   12f8e <idt_install>
   130b4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   130b7:	83 ec 08             	sub    $0x8,%esp
   130ba:	68 81 00 01 00       	push   $0x10081
   130bf:	6a 02                	push   $0x2
   130c1:	e8 c8 fe ff ff       	call   12f8e <idt_install>
   130c6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   130c9:	83 ec 08             	sub    $0x8,%esp
   130cc:	68 9e 00 01 00       	push   $0x1009e
   130d1:	6a 03                	push   $0x3
   130d3:	e8 b6 fe ff ff       	call   12f8e <idt_install>
   130d8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   130db:	83 ec 08             	sub    $0x8,%esp
   130de:	68 bb 00 01 00       	push   $0x100bb
   130e3:	6a 04                	push   $0x4
   130e5:	e8 a4 fe ff ff       	call   12f8e <idt_install>
   130ea:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   130ed:	83 ec 08             	sub    $0x8,%esp
   130f0:	68 d8 00 01 00       	push   $0x100d8
   130f5:	6a 05                	push   $0x5
   130f7:	e8 92 fe ff ff       	call   12f8e <idt_install>
   130fc:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   130ff:	83 ec 08             	sub    $0x8,%esp
   13102:	68 f5 00 01 00       	push   $0x100f5
   13107:	6a 06                	push   $0x6
   13109:	e8 80 fe ff ff       	call   12f8e <idt_install>
   1310e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   13111:	83 ec 08             	sub    $0x8,%esp
   13114:	68 12 01 01 00       	push   $0x10112
   13119:	6a 07                	push   $0x7
   1311b:	e8 6e fe ff ff       	call   12f8e <idt_install>
   13120:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   13123:	83 ec 08             	sub    $0x8,%esp
   13126:	68 2f 01 01 00       	push   $0x1012f
   1312b:	6a 08                	push   $0x8
   1312d:	e8 5c fe ff ff       	call   12f8e <idt_install>
   13132:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   13135:	83 ec 08             	sub    $0x8,%esp
   13138:	68 4a 01 01 00       	push   $0x1014a
   1313d:	6a 0a                	push   $0xa
   1313f:	e8 4a fe ff ff       	call   12f8e <idt_install>
   13144:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   13147:	83 ec 08             	sub    $0x8,%esp
   1314a:	68 65 01 01 00       	push   $0x10165
   1314f:	6a 0b                	push   $0xb
   13151:	e8 38 fe ff ff       	call   12f8e <idt_install>
   13156:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   13159:	83 ec 08             	sub    $0x8,%esp
   1315c:	68 80 01 01 00       	push   $0x10180
   13161:	6a 0c                	push   $0xc
   13163:	e8 26 fe ff ff       	call   12f8e <idt_install>
   13168:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1316b:	83 ec 08             	sub    $0x8,%esp
   1316e:	68 9b 01 01 00       	push   $0x1019b
   13173:	6a 0d                	push   $0xd
   13175:	e8 14 fe ff ff       	call   12f8e <idt_install>
   1317a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1317d:	83 ec 08             	sub    $0x8,%esp
   13180:	68 b6 01 01 00       	push   $0x101b6
   13185:	6a 0e                	push   $0xe
   13187:	e8 02 fe ff ff       	call   12f8e <idt_install>
   1318c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1318f:	83 ec 08             	sub    $0x8,%esp
   13192:	68 d1 01 01 00       	push   $0x101d1
   13197:	6a 10                	push   $0x10
   13199:	e8 f0 fd ff ff       	call   12f8e <idt_install>
   1319e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   131a1:	83 ec 08             	sub    $0x8,%esp
   131a4:	68 ee 01 01 00       	push   $0x101ee
   131a9:	6a 11                	push   $0x11
   131ab:	e8 de fd ff ff       	call   12f8e <idt_install>
   131b0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   131b3:	83 ec 08             	sub    $0x8,%esp
   131b6:	68 09 02 01 00       	push   $0x10209
   131bb:	6a 12                	push   $0x12
   131bd:	e8 cc fd ff ff       	call   12f8e <idt_install>
   131c2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   131c5:	83 ec 08             	sub    $0x8,%esp
   131c8:	68 26 02 01 00       	push   $0x10226
   131cd:	6a 13                	push   $0x13
   131cf:	e8 ba fd ff ff       	call   12f8e <idt_install>
   131d4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   131d7:	83 ec 08             	sub    $0x8,%esp
   131da:	68 43 02 01 00       	push   $0x10243
   131df:	6a 14                	push   $0x14
   131e1:	e8 a8 fd ff ff       	call   12f8e <idt_install>
   131e6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   131e9:	83 ec 08             	sub    $0x8,%esp
   131ec:	68 60 02 01 00       	push   $0x10260
   131f1:	6a 15                	push   $0x15
   131f3:	e8 96 fd ff ff       	call   12f8e <idt_install>
   131f8:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   131fb:	b8 00 dc 04 00       	mov    $0x4dc00,%eax
   13200:	83 ec 08             	sub    $0x8,%esp
   13203:	68 00 08 00 00       	push   $0x800
   13208:	50                   	push   %eax
   13209:	e8 f4 f7 ff ff       	call   12a02 <lidt>
   1320e:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   13211:	e8 bb fd ff ff       	call   12fd1 <init_pic>
}
   13216:	90                   	nop
   13217:	c9                   	leave  
   13218:	c3                   	ret    

00013219 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   13219:	55                   	push   %ebp
   1321a:	89 e5                	mov    %esp,%ebp
   1321c:	53                   	push   %ebx
   1321d:	83 ec 14             	sub    $0x14,%esp
   13220:	8b 45 08             	mov    0x8(%ebp),%eax
   13223:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   13226:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1322a:	76 7f                	jbe    132ab <idt_enable+0x92>
   1322c:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   13230:	77 79                	ja     132ab <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   13232:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   13236:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1323a:	77 33                	ja     1326f <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1323c:	6a 21                	push   $0x21
   1323e:	e8 81 f7 ff ff       	call   129c4 <inb>
   13243:	83 c4 04             	add    $0x4,%esp
   13246:	89 c3                	mov    %eax,%ebx
   13248:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1324c:	ba 01 00 00 00       	mov    $0x1,%edx
   13251:	89 c1                	mov    %eax,%ecx
   13253:	d3 e2                	shl    %cl,%edx
   13255:	89 d0                	mov    %edx,%eax
   13257:	f7 d0                	not    %eax
   13259:	21 d8                	and    %ebx,%eax
   1325b:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1325e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13262:	50                   	push   %eax
   13263:	6a 21                	push   $0x21
   13265:	e8 77 f7 ff ff       	call   129e1 <outb>
   1326a:	83 c4 08             	add    $0x8,%esp
   1326d:	eb 3d                	jmp    132ac <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1326f:	68 a1 00 00 00       	push   $0xa1
   13274:	e8 4b f7 ff ff       	call   129c4 <inb>
   13279:	83 c4 04             	add    $0x4,%esp
   1327c:	89 c3                	mov    %eax,%ebx
   1327e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13282:	83 e8 08             	sub    $0x8,%eax
   13285:	ba 01 00 00 00       	mov    $0x1,%edx
   1328a:	89 c1                	mov    %eax,%ecx
   1328c:	d3 e2                	shl    %cl,%edx
   1328e:	89 d0                	mov    %edx,%eax
   13290:	f7 d0                	not    %eax
   13292:	21 d8                	and    %ebx,%eax
   13294:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   13297:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1329b:	50                   	push   %eax
   1329c:	68 a1 00 00 00       	push   $0xa1
   132a1:	e8 3b f7 ff ff       	call   129e1 <outb>
   132a6:	83 c4 08             	add    $0x8,%esp
   132a9:	eb 01                	jmp    132ac <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   132ab:	90                   	nop
  }
  
}
   132ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   132af:	c9                   	leave  
   132b0:	c3                   	ret    

000132b1 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   132b1:	55                   	push   %ebp
   132b2:	89 e5                	mov    %esp,%ebp
   132b4:	53                   	push   %ebx
   132b5:	83 ec 14             	sub    $0x14,%esp
   132b8:	8b 45 08             	mov    0x8(%ebp),%eax
   132bb:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   132be:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   132c2:	76 7b                	jbe    1333f <idt_disable+0x8e>
   132c4:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   132c8:	77 75                	ja     1333f <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   132ca:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   132ce:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   132d2:	77 31                	ja     13305 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   132d4:	6a 21                	push   $0x21
   132d6:	e8 e9 f6 ff ff       	call   129c4 <inb>
   132db:	83 c4 04             	add    $0x4,%esp
   132de:	89 c3                	mov    %eax,%ebx
   132e0:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   132e4:	ba 01 00 00 00       	mov    $0x1,%edx
   132e9:	89 c1                	mov    %eax,%ecx
   132eb:	d3 e2                	shl    %cl,%edx
   132ed:	89 d0                	mov    %edx,%eax
   132ef:	09 d8                	or     %ebx,%eax
   132f1:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   132f4:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   132f8:	50                   	push   %eax
   132f9:	6a 21                	push   $0x21
   132fb:	e8 e1 f6 ff ff       	call   129e1 <outb>
   13300:	83 c4 08             	add    $0x8,%esp
   13303:	eb 3b                	jmp    13340 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   13305:	68 a1 00 00 00       	push   $0xa1
   1330a:	e8 b5 f6 ff ff       	call   129c4 <inb>
   1330f:	83 c4 04             	add    $0x4,%esp
   13312:	89 c3                	mov    %eax,%ebx
   13314:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13318:	83 e8 08             	sub    $0x8,%eax
   1331b:	ba 01 00 00 00       	mov    $0x1,%edx
   13320:	89 c1                	mov    %eax,%ecx
   13322:	d3 e2                	shl    %cl,%edx
   13324:	89 d0                	mov    %edx,%eax
   13326:	09 d8                	or     %ebx,%eax
   13328:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1332b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1332f:	50                   	push   %eax
   13330:	68 a1 00 00 00       	push   $0xa1
   13335:	e8 a7 f6 ff ff       	call   129e1 <outb>
   1333a:	83 c4 08             	add    $0x8,%esp
   1333d:	eb 01                	jmp    13340 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1333f:	90                   	nop
  }
  
}
   13340:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13343:	c9                   	leave  
   13344:	c3                   	ret    

00013345 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   13345:	55                   	push   %ebp
   13346:	89 e5                	mov    %esp,%ebp
  cli();
   13348:	e8 62 f6 ff ff       	call   129af <cli>
}
   1334d:	90                   	nop
   1334e:	5d                   	pop    %ebp
   1334f:	c3                   	ret    

00013350 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   13350:	55                   	push   %ebp
   13351:	89 e5                	mov    %esp,%ebp
  sti();
   13353:	e8 5e f6 ff ff       	call   129b6 <sti>
}
   13358:	90                   	nop
   13359:	5d                   	pop    %ebp
   1335a:	c3                   	ret    

0001335b <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   1335b:	55                   	push   %ebp
   1335c:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   1335e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   13362:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13366:	78 29                	js     13391 <pic_send_eoi+0x36>
   13368:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   1336c:	7f 23                	jg     13391 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   1336e:	6a 20                	push   $0x20
   13370:	6a 20                	push   $0x20
   13372:	e8 6a f6 ff ff       	call   129e1 <outb>
   13377:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1337a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1337e:	7e 12                	jle    13392 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   13380:	6a 20                	push   $0x20
   13382:	68 a0 00 00 00       	push   $0xa0
   13387:	e8 55 f6 ff ff       	call   129e1 <outb>
   1338c:	83 c4 08             	add    $0x8,%esp
   1338f:	eb 01                	jmp    13392 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   13391:	90                   	nop
  }

}
   13392:	c9                   	leave  
   13393:	c3                   	ret    

00013394 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   13394:	55                   	push   %ebp
   13395:	89 e5                	mov    %esp,%ebp
   13397:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1339a:	e8 9c f6 ff ff       	call   12a3b <read_eflags>
   1339f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   133a2:	e8 9e ff ff ff       	call   13345 <idt_disable_global>
  return state;;
   133a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   133aa:	c9                   	leave  
   133ab:	c3                   	ret    

000133ac <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   133ac:	55                   	push   %ebp
   133ad:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   133af:	ff 75 08             	push   0x8(%ebp)
   133b2:	e8 94 f6 ff ff       	call   12a4b <write_eflags>
   133b7:	83 c4 04             	add    $0x4,%esp
}
   133ba:	90                   	nop
   133bb:	c9                   	leave  
   133bc:	c3                   	ret    

000133bd <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   133bd:	55                   	push   %ebp
   133be:	89 e5                	mov    %esp,%ebp
   133c0:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   133c3:	83 ec 08             	sub    $0x8,%esp
   133c6:	ff 75 0c             	push   0xc(%ebp)
   133c9:	ff 75 08             	push   0x8(%ebp)
   133cc:	e8 91 55 00 00       	call   18962 <log_printf>
   133d1:	83 c4 10             	add    $0x10,%esp
}
   133d4:	90                   	nop
   133d5:	c9                   	leave  
   133d6:	c3                   	ret    

000133d7 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   133d7:	55                   	push   %ebp
   133d8:	89 e5                	mov    %esp,%ebp
   133da:	53                   	push   %ebx
   133db:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   133de:	8b 45 08             	mov    0x8(%ebp),%eax
   133e1:	8b 40 3c             	mov    0x3c(%eax),%eax
   133e4:	83 f8 3e             	cmp    $0x3e,%eax
   133e7:	77 48                	ja     13431 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   133e9:	8b 45 08             	mov    0x8(%ebp),%eax
   133ec:	8b 40 3c             	mov    0x3c(%eax),%eax
   133ef:	8b 04 85 40 94 01 00 	mov    0x19440(,%eax,4),%eax
   133f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   133f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   133fd:	74 32                	je     13431 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   133ff:	8b 45 08             	mov    0x8(%ebp),%eax
   13402:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13405:	8b 45 08             	mov    0x8(%ebp),%eax
   13408:	8b 48 48             	mov    0x48(%eax),%ecx
   1340b:	8b 45 08             	mov    0x8(%ebp),%eax
   1340e:	8b 50 44             	mov    0x44(%eax),%edx
   13411:	8b 45 08             	mov    0x8(%ebp),%eax
   13414:	8b 40 40             	mov    0x40(%eax),%eax
   13417:	53                   	push   %ebx
   13418:	51                   	push   %ecx
   13419:	52                   	push   %edx
   1341a:	50                   	push   %eax
   1341b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1341e:	ff d0                	call   *%eax
   13420:	83 c4 10             	add    $0x10,%esp
   13423:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   13426:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13429:	8b 45 08             	mov    0x8(%ebp),%eax
   1342c:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   1342f:	eb 30                	jmp    13461 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   13431:	e8 7b e5 ff ff       	call   119b1 <task_current>
   13436:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   13439:	8b 45 08             	mov    0x8(%ebp),%eax
   1343c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1343f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13442:	83 c2 24             	add    $0x24,%edx
   13445:	83 ec 04             	sub    $0x4,%esp
   13448:	50                   	push   %eax
   13449:	52                   	push   %edx
   1344a:	68 3c 95 01 00       	push   $0x1953c
   1344f:	e8 0e 55 00 00       	call   18962 <log_printf>
   13454:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   13457:	8b 45 08             	mov    0x8(%ebp),%eax
   1345a:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   13461:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13464:	c9                   	leave  
   13465:	c3                   	ret    

00013466 <inb>:
static inline uint8_t inb(uint16_t port) {
   13466:	55                   	push   %ebp
   13467:	89 e5                	mov    %esp,%ebp
   13469:	83 ec 14             	sub    $0x14,%esp
   1346c:	8b 45 08             	mov    0x8(%ebp),%eax
   1346f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13473:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13477:	89 c2                	mov    %eax,%edx
   13479:	ec                   	in     (%dx),%al
   1347a:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1347d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13481:	c9                   	leave  
   13482:	c3                   	ret    

00013483 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13483:	55                   	push   %ebp
   13484:	89 e5                	mov    %esp,%ebp
   13486:	83 ec 08             	sub    $0x8,%esp
   13489:	8b 45 08             	mov    0x8(%ebp),%eax
   1348c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1348f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13493:	89 d0                	mov    %edx,%eax
   13495:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13498:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1349c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   134a0:	ee                   	out    %al,(%dx)
}
   134a1:	90                   	nop
   134a2:	c9                   	leave  
   134a3:	c3                   	ret    

000134a4 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   134a4:	55                   	push   %ebp
   134a5:	89 e5                	mov    %esp,%ebp
   134a7:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   134aa:	e8 e5 fe ff ff       	call   13394 <idt_enter_protection>
   134af:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   134b2:	83 ec 08             	sub    $0x8,%esp
   134b5:	6a 0f                	push   $0xf
   134b7:	68 d4 03 00 00       	push   $0x3d4
   134bc:	e8 c2 ff ff ff       	call   13483 <outb>
   134c1:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   134c4:	83 ec 0c             	sub    $0xc,%esp
   134c7:	68 d5 03 00 00       	push   $0x3d5
   134cc:	e8 95 ff ff ff       	call   13466 <inb>
   134d1:	83 c4 10             	add    $0x10,%esp
   134d4:	0f b6 c0             	movzbl %al,%eax
   134d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   134da:	83 ec 08             	sub    $0x8,%esp
   134dd:	6a 0e                	push   $0xe
   134df:	68 d4 03 00 00       	push   $0x3d4
   134e4:	e8 9a ff ff ff       	call   13483 <outb>
   134e9:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   134ec:	83 ec 0c             	sub    $0xc,%esp
   134ef:	68 d5 03 00 00       	push   $0x3d5
   134f4:	e8 6d ff ff ff       	call   13466 <inb>
   134f9:	83 c4 10             	add    $0x10,%esp
   134fc:	0f b6 c0             	movzbl %al,%eax
   134ff:	c1 e0 08             	shl    $0x8,%eax
   13502:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   13505:	83 ec 0c             	sub    $0xc,%esp
   13508:	ff 75 f4             	push   -0xc(%ebp)
   1350b:	e8 9c fe ff ff       	call   133ac <idt_leave_protection>
   13510:	83 c4 10             	add    $0x10,%esp
  return pos;
   13513:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13516:	c9                   	leave  
   13517:	c3                   	ret    

00013518 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   13518:	55                   	push   %ebp
   13519:	89 e5                	mov    %esp,%ebp
   1351b:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   1351e:	e8 71 fe ff ff       	call   13394 <idt_enter_protection>
   13523:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   13526:	8b 45 08             	mov    0x8(%ebp),%eax
   13529:	8b 40 10             	mov    0x10(%eax),%eax
   1352c:	89 c2                	mov    %eax,%edx
   1352e:	8b 45 08             	mov    0x8(%ebp),%eax
   13531:	8b 40 0c             	mov    0xc(%eax),%eax
   13534:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   13537:	8b 45 08             	mov    0x8(%ebp),%eax
   1353a:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   1353d:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   1353f:	8b 45 08             	mov    0x8(%ebp),%eax
   13542:	8b 40 04             	mov    0x4(%eax),%eax
   13545:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   1354a:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   1354c:	01 d0                	add    %edx,%eax
   1354e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13552:	83 ec 08             	sub    $0x8,%esp
   13555:	6a 0f                	push   $0xf
   13557:	68 d4 03 00 00       	push   $0x3d4
   1355c:	e8 22 ff ff ff       	call   13483 <outb>
   13561:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   13564:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13568:	0f b6 c0             	movzbl %al,%eax
   1356b:	83 ec 08             	sub    $0x8,%esp
   1356e:	50                   	push   %eax
   1356f:	68 d5 03 00 00       	push   $0x3d5
   13574:	e8 0a ff ff ff       	call   13483 <outb>
   13579:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   1357c:	83 ec 08             	sub    $0x8,%esp
   1357f:	6a 0e                	push   $0xe
   13581:	68 d4 03 00 00       	push   $0x3d4
   13586:	e8 f8 fe ff ff       	call   13483 <outb>
   1358b:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   1358e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13592:	66 c1 e8 08          	shr    $0x8,%ax
   13596:	0f b6 c0             	movzbl %al,%eax
   13599:	83 ec 08             	sub    $0x8,%esp
   1359c:	50                   	push   %eax
   1359d:	68 d5 03 00 00       	push   $0x3d5
   135a2:	e8 dc fe ff ff       	call   13483 <outb>
   135a7:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   135aa:	83 ec 0c             	sub    $0xc,%esp
   135ad:	ff 75 f4             	push   -0xc(%ebp)
   135b0:	e8 f7 fd ff ff       	call   133ac <idt_leave_protection>
   135b5:	83 c4 10             	add    $0x10,%esp
  return pos;
   135b8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   135bc:	c9                   	leave  
   135bd:	c3                   	ret    

000135be <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   135be:	55                   	push   %ebp
   135bf:	89 e5                	mov    %esp,%ebp
   135c1:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   135c4:	8b 45 08             	mov    0x8(%ebp),%eax
   135c7:	8b 48 04             	mov    0x4(%eax),%ecx
   135ca:	8b 45 08             	mov    0x8(%ebp),%eax
   135cd:	8b 50 0c             	mov    0xc(%eax),%edx
   135d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   135d3:	0f af c2             	imul   %edx,%eax
   135d6:	01 c0                	add    %eax,%eax
   135d8:	01 c8                	add    %ecx,%eax
   135da:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   135dd:	8b 45 08             	mov    0x8(%ebp),%eax
   135e0:	8b 48 04             	mov    0x4(%eax),%ecx
   135e3:	8b 45 08             	mov    0x8(%ebp),%eax
   135e6:	8b 40 0c             	mov    0xc(%eax),%eax
   135e9:	8b 55 10             	mov    0x10(%ebp),%edx
   135ec:	83 c2 01             	add    $0x1,%edx
   135ef:	0f af c2             	imul   %edx,%eax
   135f2:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   135f4:	01 c8                	add    %ecx,%eax
   135f6:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   135f9:	eb 24                	jmp    1361f <erase_rows+0x61>
    disp_start->c = ' ';
   135fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   135fe:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = COLOR_White;
   13601:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13604:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13608:	83 ca 0f             	or     $0xf,%edx
   1360b:	88 50 01             	mov    %dl,0x1(%eax)
    disp_start->background = COLOR_Black;
   1360e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13611:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13615:	83 e2 8f             	and    $0xffffff8f,%edx
   13618:	88 50 01             	mov    %dl,0x1(%eax)

    disp_start++;
   1361b:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   1361f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13622:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13625:	72 d4                	jb     135fb <erase_rows+0x3d>
  }
}
   13627:	90                   	nop
   13628:	90                   	nop
   13629:	c9                   	leave  
   1362a:	c3                   	ret    

0001362b <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   1362b:	55                   	push   %ebp
   1362c:	89 e5                	mov    %esp,%ebp
   1362e:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   13631:	8b 45 08             	mov    0x8(%ebp),%eax
   13634:	8b 40 04             	mov    0x4(%eax),%eax
   13637:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   1363a:	8b 45 08             	mov    0x8(%ebp),%eax
   1363d:	8b 48 04             	mov    0x4(%eax),%ecx
   13640:	8b 45 08             	mov    0x8(%ebp),%eax
   13643:	8b 50 0c             	mov    0xc(%eax),%edx
   13646:	8b 45 0c             	mov    0xc(%ebp),%eax
   13649:	0f af c2             	imul   %edx,%eax
   1364c:	01 c0                	add    %eax,%eax
   1364e:	01 c8                	add    %ecx,%eax
   13650:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   13653:	8b 45 08             	mov    0x8(%ebp),%eax
   13656:	8b 40 08             	mov    0x8(%eax),%eax
   13659:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   1365c:	29 c8                	sub    %ecx,%eax
   1365e:	89 c2                	mov    %eax,%edx
   13660:	8b 45 08             	mov    0x8(%ebp),%eax
   13663:	8b 40 0c             	mov    0xc(%eax),%eax
   13666:	0f af c2             	imul   %edx,%eax
   13669:	01 c0                	add    %eax,%eax
   1366b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   1366e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13671:	83 ec 04             	sub    $0x4,%esp
   13674:	50                   	push   %eax
   13675:	ff 75 f0             	push   -0x10(%ebp)
   13678:	ff 75 f4             	push   -0xc(%ebp)
   1367b:	e8 96 4a 00 00       	call   18116 <kernel_memcpy>
   13680:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13683:	8b 45 08             	mov    0x8(%ebp),%eax
   13686:	8b 40 08             	mov    0x8(%eax),%eax
   13689:	83 e8 01             	sub    $0x1,%eax
   1368c:	89 c2                	mov    %eax,%edx
   1368e:	8b 45 08             	mov    0x8(%ebp),%eax
   13691:	8b 40 08             	mov    0x8(%eax),%eax
   13694:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13697:	29 c8                	sub    %ecx,%eax
   13699:	83 ec 04             	sub    $0x4,%esp
   1369c:	52                   	push   %edx
   1369d:	50                   	push   %eax
   1369e:	ff 75 08             	push   0x8(%ebp)
   136a1:	e8 18 ff ff ff       	call   135be <erase_rows>
   136a6:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   136a9:	8b 45 08             	mov    0x8(%ebp),%eax
   136ac:	8b 40 10             	mov    0x10(%eax),%eax
   136af:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   136b2:	29 c8                	sub    %ecx,%eax
   136b4:	89 c2                	mov    %eax,%edx
   136b6:	8b 45 08             	mov    0x8(%ebp),%eax
   136b9:	89 50 10             	mov    %edx,0x10(%eax)
}
   136bc:	90                   	nop
   136bd:	c9                   	leave  
   136be:	c3                   	ret    

000136bf <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   136bf:	55                   	push   %ebp
   136c0:	89 e5                	mov    %esp,%ebp
   136c2:	8b 45 08             	mov    0x8(%ebp),%eax
   136c5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   136cc:	90                   	nop
   136cd:	5d                   	pop    %ebp
   136ce:	c3                   	ret    

000136cf <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   136cf:	55                   	push   %ebp
   136d0:	89 e5                	mov    %esp,%ebp
   136d2:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   136d5:	8b 45 08             	mov    0x8(%ebp),%eax
   136d8:	8b 40 10             	mov    0x10(%eax),%eax
   136db:	8d 50 01             	lea    0x1(%eax),%edx
   136de:	8b 45 08             	mov    0x8(%ebp),%eax
   136e1:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   136e4:	8b 45 08             	mov    0x8(%ebp),%eax
   136e7:	8b 50 10             	mov    0x10(%eax),%edx
   136ea:	8b 45 08             	mov    0x8(%ebp),%eax
   136ed:	8b 40 08             	mov    0x8(%eax),%eax
   136f0:	39 c2                	cmp    %eax,%edx
   136f2:	72 10                	jb     13704 <move_to_next_line+0x35>
    scroll_up(console, 1);
   136f4:	83 ec 08             	sub    $0x8,%esp
   136f7:	6a 01                	push   $0x1
   136f9:	ff 75 08             	push   0x8(%ebp)
   136fc:	e8 2a ff ff ff       	call   1362b <scroll_up>
   13701:	83 c4 10             	add    $0x10,%esp
  }
}
   13704:	90                   	nop
   13705:	c9                   	leave  
   13706:	c3                   	ret    

00013707 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   13707:	55                   	push   %ebp
   13708:	89 e5                	mov    %esp,%ebp
   1370a:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   1370d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13714:	eb 5c                	jmp    13772 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   13716:	8b 45 08             	mov    0x8(%ebp),%eax
   13719:	8b 40 14             	mov    0x14(%eax),%eax
   1371c:	8d 50 01             	lea    0x1(%eax),%edx
   1371f:	8b 45 08             	mov    0x8(%ebp),%eax
   13722:	89 50 14             	mov    %edx,0x14(%eax)
   13725:	8b 45 08             	mov    0x8(%ebp),%eax
   13728:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   1372b:	8b 45 08             	mov    0x8(%ebp),%eax
   1372e:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   13731:	39 c2                	cmp    %eax,%edx
   13733:	72 39                	jb     1376e <move_forward+0x67>
      console->cursor_row++;
   13735:	8b 45 08             	mov    0x8(%ebp),%eax
   13738:	8b 40 10             	mov    0x10(%eax),%eax
   1373b:	8d 50 01             	lea    0x1(%eax),%edx
   1373e:	8b 45 08             	mov    0x8(%ebp),%eax
   13741:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   13744:	8b 45 08             	mov    0x8(%ebp),%eax
   13747:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   1374e:	8b 45 08             	mov    0x8(%ebp),%eax
   13751:	8b 50 10             	mov    0x10(%eax),%edx
   13754:	8b 45 08             	mov    0x8(%ebp),%eax
   13757:	8b 40 08             	mov    0x8(%eax),%eax
   1375a:	39 c2                	cmp    %eax,%edx
   1375c:	72 10                	jb     1376e <move_forward+0x67>
        scroll_up(console, 1);
   1375e:	83 ec 08             	sub    $0x8,%esp
   13761:	6a 01                	push   $0x1
   13763:	ff 75 08             	push   0x8(%ebp)
   13766:	e8 c0 fe ff ff       	call   1362b <scroll_up>
   1376b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   1376e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13772:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13775:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13778:	7c 9c                	jl     13716 <move_forward+0xf>
      }
    }
  }
}
   1377a:	90                   	nop
   1377b:	90                   	nop
   1377c:	c9                   	leave  
   1377d:	c3                   	ret    

0001377e <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   1377e:	55                   	push   %ebp
   1377f:	89 e5                	mov    %esp,%ebp
   13781:	83 ec 28             	sub    $0x28,%esp
   13784:	8b 45 0c             	mov    0xc(%ebp),%eax
   13787:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   1378a:	8b 45 08             	mov    0x8(%ebp),%eax
   1378d:	8b 48 14             	mov    0x14(%eax),%ecx
   13790:	8b 45 08             	mov    0x8(%ebp),%eax
   13793:	8b 50 10             	mov    0x10(%eax),%edx
   13796:	8b 45 08             	mov    0x8(%ebp),%eax
   13799:	8b 40 0c             	mov    0xc(%eax),%eax
   1379c:	0f af c2             	imul   %edx,%eax
   1379f:	01 c8                	add    %ecx,%eax
  int offset =
   137a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   137a4:	8b 45 08             	mov    0x8(%ebp),%eax
   137a7:	8b 50 04             	mov    0x4(%eax),%edx
   137aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137ad:	01 c0                	add    %eax,%eax
   137af:	01 d0                	add    %edx,%eax
   137b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   137b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137b7:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   137bb:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   137bd:	8b 45 08             	mov    0x8(%ebp),%eax
   137c0:	8b 40 18             	mov    0x18(%eax),%eax
   137c3:	c1 e0 04             	shl    $0x4,%eax
   137c6:	c0 f8 04             	sar    $0x4,%al
   137c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   137cc:	83 e0 0f             	and    $0xf,%eax
   137cf:	89 c1                	mov    %eax,%ecx
   137d1:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   137d5:	83 e0 f0             	and    $0xfffffff0,%eax
   137d8:	09 c8                	or     %ecx,%eax
   137da:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   137dd:	8b 45 08             	mov    0x8(%ebp),%eax
   137e0:	8b 40 1c             	mov    0x1c(%eax),%eax
   137e3:	c1 e0 05             	shl    $0x5,%eax
   137e6:	c0 f8 05             	sar    $0x5,%al
   137e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   137ec:	83 e0 07             	and    $0x7,%eax
   137ef:	c1 e0 04             	shl    $0x4,%eax
   137f2:	89 c1                	mov    %eax,%ecx
   137f4:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   137f8:	83 e0 8f             	and    $0xffffff8f,%eax
   137fb:	09 c8                	or     %ecx,%eax
   137fd:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   13800:	83 ec 08             	sub    $0x8,%esp
   13803:	6a 01                	push   $0x1
   13805:	ff 75 08             	push   0x8(%ebp)
   13808:	e8 fa fe ff ff       	call   13707 <move_forward>
   1380d:	83 c4 10             	add    $0x10,%esp
}
   13810:	90                   	nop
   13811:	c9                   	leave  
   13812:	c3                   	ret    

00013813 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   13813:	55                   	push   %ebp
   13814:	89 e5                	mov    %esp,%ebp
   13816:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   13819:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13820:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13827:	eb 55                	jmp    1387e <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   13829:	8b 45 08             	mov    0x8(%ebp),%eax
   1382c:	8b 40 14             	mov    0x14(%eax),%eax
   1382f:	85 c0                	test   %eax,%eax
   13831:	74 18                	je     1384b <move_backword+0x38>
      console->cursor_col--;
   13833:	8b 45 08             	mov    0x8(%ebp),%eax
   13836:	8b 40 14             	mov    0x14(%eax),%eax
   13839:	8d 50 ff             	lea    -0x1(%eax),%edx
   1383c:	8b 45 08             	mov    0x8(%ebp),%eax
   1383f:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13842:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13849:	eb 2f                	jmp    1387a <move_backword+0x67>
    } else if (console->cursor_row >
   1384b:	8b 45 08             	mov    0x8(%ebp),%eax
   1384e:	8b 40 10             	mov    0x10(%eax),%eax
   13851:	85 c0                	test   %eax,%eax
   13853:	74 25                	je     1387a <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   13855:	8b 45 08             	mov    0x8(%ebp),%eax
   13858:	8b 40 10             	mov    0x10(%eax),%eax
   1385b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1385e:	8b 45 08             	mov    0x8(%ebp),%eax
   13861:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   13864:	8b 45 08             	mov    0x8(%ebp),%eax
   13867:	8b 40 0c             	mov    0xc(%eax),%eax
   1386a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1386d:	8b 45 08             	mov    0x8(%ebp),%eax
   13870:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13873:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1387a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1387e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13881:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13884:	7c a3                	jl     13829 <move_backword+0x16>
    }
  }

  return status;
   13886:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13889:	c9                   	leave  
   1388a:	c3                   	ret    

0001388b <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   1388b:	55                   	push   %ebp
   1388c:	89 e5                	mov    %esp,%ebp
   1388e:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   13891:	6a 01                	push   $0x1
   13893:	ff 75 08             	push   0x8(%ebp)
   13896:	e8 78 ff ff ff       	call   13813 <move_backword>
   1389b:	83 c4 08             	add    $0x8,%esp
   1389e:	85 c0                	test   %eax,%eax
   138a0:	75 20                	jne    138c2 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   138a2:	83 ec 08             	sub    $0x8,%esp
   138a5:	6a 20                	push   $0x20
   138a7:	ff 75 08             	push   0x8(%ebp)
   138aa:	e8 cf fe ff ff       	call   1377e <show_char>
   138af:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   138b2:	83 ec 08             	sub    $0x8,%esp
   138b5:	6a 01                	push   $0x1
   138b7:	ff 75 08             	push   0x8(%ebp)
   138ba:	e8 54 ff ff ff       	call   13813 <move_backword>
   138bf:	83 c4 10             	add    $0x10,%esp
  }
}
   138c2:	90                   	nop
   138c3:	c9                   	leave  
   138c4:	c3                   	ret    

000138c5 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   138c5:	55                   	push   %ebp
   138c6:	89 e5                	mov    %esp,%ebp
   138c8:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   138cb:	8b 45 08             	mov    0x8(%ebp),%eax
   138ce:	8b 50 0c             	mov    0xc(%eax),%edx
   138d1:	8b 45 08             	mov    0x8(%ebp),%eax
   138d4:	8b 40 08             	mov    0x8(%eax),%eax
   138d7:	0f af c2             	imul   %edx,%eax
   138da:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   138dd:	8b 45 08             	mov    0x8(%ebp),%eax
   138e0:	8b 40 04             	mov    0x4(%eax),%eax
   138e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   138e6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   138ed:	eb 51                	jmp    13940 <clear_display+0x7b>
    start->c = ' ';
   138ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   138f2:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   138f5:	8b 45 08             	mov    0x8(%ebp),%eax
   138f8:	8b 40 18             	mov    0x18(%eax),%eax
   138fb:	c1 e0 04             	shl    $0x4,%eax
   138fe:	c0 f8 04             	sar    $0x4,%al
   13901:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13904:	83 e0 0f             	and    $0xf,%eax
   13907:	89 c1                	mov    %eax,%ecx
   13909:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1390d:	83 e0 f0             	and    $0xfffffff0,%eax
   13910:	09 c8                	or     %ecx,%eax
   13912:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   13915:	8b 45 08             	mov    0x8(%ebp),%eax
   13918:	8b 40 1c             	mov    0x1c(%eax),%eax
   1391b:	c1 e0 05             	shl    $0x5,%eax
   1391e:	c0 f8 05             	sar    $0x5,%al
   13921:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13924:	83 e0 07             	and    $0x7,%eax
   13927:	c1 e0 04             	shl    $0x4,%eax
   1392a:	89 c1                	mov    %eax,%ecx
   1392c:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13930:	83 e0 8f             	and    $0xffffff8f,%eax
   13933:	09 c8                	or     %ecx,%eax
   13935:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   13938:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1393c:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   13940:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13943:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13946:	7c a7                	jl     138ef <clear_display+0x2a>
  }
}
   13948:	90                   	nop
   13949:	90                   	nop
   1394a:	c9                   	leave  
   1394b:	c3                   	ret    

0001394c <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   1394c:	55                   	push   %ebp
   1394d:	89 e5                	mov    %esp,%ebp
   1394f:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   13952:	8b 45 08             	mov    0x8(%ebp),%eax
   13955:	8b 40 14             	mov    0x14(%eax),%eax
   13958:	83 e0 03             	and    $0x3,%eax
   1395b:	89 c2                	mov    %eax,%edx
   1395d:	b8 04 00 00 00       	mov    $0x4,%eax
   13962:	29 d0                	sub    %edx,%eax
   13964:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   13967:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1396e:	eb 14                	jmp    13984 <print_table+0x38>
    show_char(console, ' ');
   13970:	83 ec 08             	sub    $0x8,%esp
   13973:	6a 20                	push   $0x20
   13975:	ff 75 08             	push   0x8(%ebp)
   13978:	e8 01 fe ff ff       	call   1377e <show_char>
   1397d:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   13980:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13984:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13987:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1398a:	7c e4                	jl     13970 <print_table+0x24>
  }

  update_cursor_pos(console);
   1398c:	83 ec 0c             	sub    $0xc,%esp
   1398f:	ff 75 08             	push   0x8(%ebp)
   13992:	e8 81 fb ff ff       	call   13518 <update_cursor_pos>
   13997:	83 c4 10             	add    $0x10,%esp
}
   1399a:	90                   	nop
   1399b:	c9                   	leave  
   1399c:	c3                   	ret    

0001399d <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   1399d:	55                   	push   %ebp
   1399e:	89 e5                	mov    %esp,%ebp
   139a0:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   139a3:	8b 45 08             	mov    0x8(%ebp),%eax
   139a6:	6b c0 68             	imul   $0x68,%eax,%eax
   139a9:	05 00 e4 04 00       	add    $0x4e400,%eax
   139ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   139b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139b4:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   139bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139be:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   139c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139c8:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   139cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139d2:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   139d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   139dd:	75 38                	jne    13a17 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   139df:	e8 c0 fa ff ff       	call   134a4 <read_cursor_pos>
   139e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   139e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   139ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
   139ed:	8b 4a 0c             	mov    0xc(%edx),%ecx
   139f0:	ba 00 00 00 00       	mov    $0x0,%edx
   139f5:	f7 f1                	div    %ecx
   139f7:	89 c2                	mov    %eax,%edx
   139f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139fc:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   139ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a02:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13a05:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13a08:	ba 00 00 00 00       	mov    $0x0,%edx
   13a0d:	f7 f1                	div    %ecx
   13a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a12:	89 50 14             	mov    %edx,0x14(%eax)
   13a15:	eb 22                	jmp    13a39 <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   13a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a1a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a24:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   13a2b:	83 ec 0c             	sub    $0xc,%esp
   13a2e:	ff 75 f4             	push   -0xc(%ebp)
   13a31:	e8 8f fe ff ff       	call   138c5 <clear_display>
   13a36:	83 c4 10             	add    $0x10,%esp
    //update_cursor_pos(console);
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   13a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a3c:	8b 50 14             	mov    0x14(%eax),%edx
   13a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a42:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a48:	8b 50 10             	mov    0x10(%eax),%edx
   13a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a4e:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a54:	83 c0 28             	add    $0x28,%eax
   13a57:	83 ec 04             	sub    $0x4,%esp
   13a5a:	6a 28                	push   $0x28
   13a5c:	6a 00                	push   $0x0
   13a5e:	50                   	push   %eax
   13a5f:	e8 01 47 00 00       	call   18165 <kernel_memset>
   13a64:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a6a:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   13a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a74:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13a7a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a7d:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13a83:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a8c:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  //初始化终端互斥锁
  mutex_init(&console->mutex);
   13a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a92:	83 c0 54             	add    $0x54,%eax
   13a95:	83 ec 0c             	sub    $0xc,%esp
   13a98:	50                   	push   %eax
   13a99:	e8 36 3a 00 00       	call   174d4 <mutex_init>
   13a9e:	83 c4 10             	add    $0x10,%esp
  return 0;
   13aa1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13aa6:	c9                   	leave  
   13aa7:	c3                   	ret    

00013aa8 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13aa8:	55                   	push   %ebp
   13aa9:	89 e5                	mov    %esp,%ebp
   13aab:	83 ec 18             	sub    $0x18,%esp
   13aae:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ab1:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13ab4:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13ab8:	83 f8 1b             	cmp    $0x1b,%eax
   13abb:	7f 16                	jg     13ad3 <write_normal+0x2b>
   13abd:	83 f8 08             	cmp    $0x8,%eax
   13ac0:	7c 75                	jl     13b37 <write_normal+0x8f>
   13ac2:	83 e8 08             	sub    $0x8,%eax
   13ac5:	83 f8 13             	cmp    $0x13,%eax
   13ac8:	77 6d                	ja     13b37 <write_normal+0x8f>
   13aca:	8b 04 85 60 95 01 00 	mov    0x19560(,%eax,4),%eax
   13ad1:	ff e0                	jmp    *%eax
   13ad3:	83 f8 7f             	cmp    $0x7f,%eax
   13ad6:	74 0d                	je     13ae5 <write_normal+0x3d>
   13ad8:	eb 5d                	jmp    13b37 <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   13ada:	8b 45 08             	mov    0x8(%ebp),%eax
   13add:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13ae3:	eb 72                	jmp    13b57 <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   13ae5:	83 ec 0c             	sub    $0xc,%esp
   13ae8:	ff 75 08             	push   0x8(%ebp)
   13aeb:	e8 9b fd ff ff       	call   1388b <erase_backword>
   13af0:	83 c4 10             	add    $0x10,%esp
      break;
   13af3:	eb 62                	jmp    13b57 <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13af5:	83 ec 08             	sub    $0x8,%esp
   13af8:	6a 01                	push   $0x1
   13afa:	ff 75 08             	push   0x8(%ebp)
   13afd:	e8 11 fd ff ff       	call   13813 <move_backword>
   13b02:	83 c4 10             	add    $0x10,%esp
      break;
   13b05:	eb 50                	jmp    13b57 <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13b07:	83 ec 0c             	sub    $0xc,%esp
   13b0a:	ff 75 08             	push   0x8(%ebp)
   13b0d:	e8 3a fe ff ff       	call   1394c <print_table>
   13b12:	83 c4 10             	add    $0x10,%esp
      break;
   13b15:	eb 40                	jmp    13b57 <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13b17:	83 ec 0c             	sub    $0xc,%esp
   13b1a:	ff 75 08             	push   0x8(%ebp)
   13b1d:	e8 9d fb ff ff       	call   136bf <move_to_col0>
   13b22:	83 c4 10             	add    $0x10,%esp
      break;
   13b25:	eb 30                	jmp    13b57 <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   13b27:	83 ec 0c             	sub    $0xc,%esp
   13b2a:	ff 75 08             	push   0x8(%ebp)
   13b2d:	e8 9d fb ff ff       	call   136cf <move_to_next_line>
   13b32:	83 c4 10             	add    $0x10,%esp
      break;
   13b35:	eb 20                	jmp    13b57 <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   13b37:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13b3b:	7e 19                	jle    13b56 <write_normal+0xae>
   13b3d:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13b41:	74 13                	je     13b56 <write_normal+0xae>
        show_char(console, c);
   13b43:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13b47:	83 ec 08             	sub    $0x8,%esp
   13b4a:	50                   	push   %eax
   13b4b:	ff 75 08             	push   0x8(%ebp)
   13b4e:	e8 2b fc ff ff       	call   1377e <show_char>
   13b53:	83 c4 10             	add    $0x10,%esp
      }
      break;
   13b56:	90                   	nop
  }
}
   13b57:	90                   	nop
   13b58:	c9                   	leave  
   13b59:	c3                   	ret    

00013b5a <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   13b5a:	55                   	push   %ebp
   13b5b:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   13b5d:	8b 45 08             	mov    0x8(%ebp),%eax
   13b60:	8b 50 14             	mov    0x14(%eax),%edx
   13b63:	8b 45 08             	mov    0x8(%ebp),%eax
   13b66:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13b69:	8b 45 08             	mov    0x8(%ebp),%eax
   13b6c:	8b 50 10             	mov    0x10(%eax),%edx
   13b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b72:	89 50 24             	mov    %edx,0x24(%eax)
}
   13b75:	90                   	nop
   13b76:	5d                   	pop    %ebp
   13b77:	c3                   	ret    

00013b78 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13b78:	55                   	push   %ebp
   13b79:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b7e:	8b 50 20             	mov    0x20(%eax),%edx
   13b81:	8b 45 08             	mov    0x8(%ebp),%eax
   13b84:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13b87:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8a:	8b 50 24             	mov    0x24(%eax),%edx
   13b8d:	8b 45 08             	mov    0x8(%ebp),%eax
   13b90:	89 50 10             	mov    %edx,0x10(%eax)
}
   13b93:	90                   	nop
   13b94:	5d                   	pop    %ebp
   13b95:	c3                   	ret    

00013b96 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13b96:	55                   	push   %ebp
   13b97:	89 e5                	mov    %esp,%ebp
   13b99:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9f:	83 c0 28             	add    $0x28,%eax
   13ba2:	83 ec 04             	sub    $0x4,%esp
   13ba5:	6a 28                	push   $0x28
   13ba7:	6a 00                	push   $0x0
   13ba9:	50                   	push   %eax
   13baa:	e8 b6 45 00 00       	call   18165 <kernel_memset>
   13baf:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13bbc:	90                   	nop
   13bbd:	c9                   	leave  
   13bbe:	c3                   	ret    

00013bbf <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13bbf:	55                   	push   %ebp
   13bc0:	89 e5                	mov    %esp,%ebp
   13bc2:	83 ec 18             	sub    $0x18,%esp
   13bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bc8:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13bcb:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13bcf:	83 f8 5b             	cmp    $0x5b,%eax
   13bd2:	74 11                	je     13be5 <write_esc+0x26>
   13bd4:	83 f8 5b             	cmp    $0x5b,%eax
   13bd7:	7f 57                	jg     13c30 <write_esc+0x71>
   13bd9:	83 f8 37             	cmp    $0x37,%eax
   13bdc:	74 20                	je     13bfe <write_esc+0x3f>
   13bde:	83 f8 38             	cmp    $0x38,%eax
   13be1:	74 34                	je     13c17 <write_esc+0x58>
   13be3:	eb 4b                	jmp    13c30 <write_esc+0x71>
    case '[':
      clear_esc_param(console);
   13be5:	83 ec 0c             	sub    $0xc,%esp
   13be8:	ff 75 08             	push   0x8(%ebp)
   13beb:	e8 a6 ff ff ff       	call   13b96 <clear_esc_param>
   13bf0:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13bf3:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13bfc:	eb 3c                	jmp    13c3a <write_esc+0x7b>
    case '7':
      save_cursor(console);
   13bfe:	83 ec 0c             	sub    $0xc,%esp
   13c01:	ff 75 08             	push   0x8(%ebp)
   13c04:	e8 51 ff ff ff       	call   13b5a <save_cursor>
   13c09:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c0c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c15:	eb 23                	jmp    13c3a <write_esc+0x7b>
    case '8':
      restore_cursor(console);
   13c17:	83 ec 0c             	sub    $0xc,%esp
   13c1a:	ff 75 08             	push   0x8(%ebp)
   13c1d:	e8 56 ff ff ff       	call   13b78 <restore_cursor>
   13c22:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c25:	8b 45 08             	mov    0x8(%ebp),%eax
   13c28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c2e:	eb 0a                	jmp    13c3a <write_esc+0x7b>
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c30:	8b 45 08             	mov    0x8(%ebp),%eax
   13c33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c39:	90                   	nop
  }
}
   13c3a:	90                   	nop
   13c3b:	c9                   	leave  
   13c3c:	c3                   	ret    

00013c3d <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13c3d:	55                   	push   %ebp
   13c3e:	89 e5                	mov    %esp,%ebp
   13c40:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13c43:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13c4a:	eb 78                	jmp    13cc4 <set_font_style+0x87>
    int param = console->esc_param[i];
   13c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c4f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13c52:	83 c2 08             	add    $0x8,%edx
   13c55:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13c59:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13c5c:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13c60:	7e 1b                	jle    13c7d <set_font_style+0x40>
   13c62:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13c66:	7f 15                	jg     13c7d <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13c68:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c6b:	83 e8 1e             	sub    $0x1e,%eax
   13c6e:	8b 14 85 c0 95 01 00 	mov    0x195c0(,%eax,4),%edx
   13c75:	8b 45 08             	mov    0x8(%ebp),%eax
   13c78:	89 50 18             	mov    %edx,0x18(%eax)
   13c7b:	eb 43                	jmp    13cc0 <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13c7d:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13c81:	7e 1b                	jle    13c9e <set_font_style+0x61>
   13c83:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13c87:	7f 15                	jg     13c9e <set_font_style+0x61>
      console->background = color_table[param - 40];
   13c89:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c8c:	83 e8 28             	sub    $0x28,%eax
   13c8f:	8b 14 85 c0 95 01 00 	mov    0x195c0(,%eax,4),%edx
   13c96:	8b 45 08             	mov    0x8(%ebp),%eax
   13c99:	89 50 1c             	mov    %edx,0x1c(%eax)
   13c9c:	eb 22                	jmp    13cc0 <set_font_style+0x83>
    } else if (param == 39) {
   13c9e:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13ca2:	75 0c                	jne    13cb0 <set_font_style+0x73>
      console->foreground = COLOR_White;
   13ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ca7:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13cae:	eb 10                	jmp    13cc0 <set_font_style+0x83>
    } else if (param == 49) {
   13cb0:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13cb4:	75 0a                	jne    13cc0 <set_font_style+0x83>
      console->background = COLOR_Black;
   13cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13cc0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc7:	8b 40 50             	mov    0x50(%eax),%eax
   13cca:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13ccd:	0f 8e 79 ff ff ff    	jle    13c4c <set_font_style+0xf>
    }
  }
}
   13cd3:	90                   	nop
   13cd4:	90                   	nop
   13cd5:	c9                   	leave  
   13cd6:	c3                   	ret    

00013cd7 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13cd7:	55                   	push   %ebp
   13cd8:	89 e5                	mov    %esp,%ebp
   13cda:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   13ce0:	8b 40 50             	mov    0x50(%eax),%eax
   13ce3:	85 c0                	test   %eax,%eax
   13ce5:	78 3c                	js     13d23 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13ce7:	8b 45 08             	mov    0x8(%ebp),%eax
   13cea:	8b 40 28             	mov    0x28(%eax),%eax
   13ced:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13cf0:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13cf4:	75 2e                	jne    13d24 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13cf6:	8b 45 08             	mov    0x8(%ebp),%eax
   13cf9:	8b 40 08             	mov    0x8(%eax),%eax
   13cfc:	83 e8 01             	sub    $0x1,%eax
   13cff:	50                   	push   %eax
   13d00:	6a 00                	push   $0x0
   13d02:	ff 75 08             	push   0x8(%ebp)
   13d05:	e8 b4 f8 ff ff       	call   135be <erase_rows>
   13d0a:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13d0d:	8b 45 08             	mov    0x8(%ebp),%eax
   13d10:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13d17:	8b 45 08             	mov    0x8(%ebp),%eax
   13d1a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13d21:	eb 01                	jmp    13d24 <erase_in_display+0x4d>
    return;
   13d23:	90                   	nop
  }
}
   13d24:	c9                   	leave  
   13d25:	c3                   	ret    

00013d26 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13d26:	55                   	push   %ebp
   13d27:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13d29:	8b 45 08             	mov    0x8(%ebp),%eax
   13d2c:	8b 40 28             	mov    0x28(%eax),%eax
   13d2f:	89 c2                	mov    %eax,%edx
   13d31:	8b 45 08             	mov    0x8(%ebp),%eax
   13d34:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13d37:	8b 45 08             	mov    0x8(%ebp),%eax
   13d3a:	8b 40 2c             	mov    0x2c(%eax),%eax
   13d3d:	89 c2                	mov    %eax,%edx
   13d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   13d42:	89 50 14             	mov    %edx,0x14(%eax)
}
   13d45:	90                   	nop
   13d46:	5d                   	pop    %ebp
   13d47:	c3                   	ret    

00013d48 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13d48:	55                   	push   %ebp
   13d49:	89 e5                	mov    %esp,%ebp
   13d4b:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13d4e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13d52:	75 07                	jne    13d5b <move_left+0x13>
    n = 1;
   13d54:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13d5b:	8b 45 08             	mov    0x8(%ebp),%eax
   13d5e:	8b 40 14             	mov    0x14(%eax),%eax
   13d61:	8b 55 0c             	mov    0xc(%ebp),%edx
   13d64:	29 d0                	sub    %edx,%eax
   13d66:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13d69:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d6c:	ba 00 00 00 00       	mov    $0x0,%edx
   13d71:	85 c0                	test   %eax,%eax
   13d73:	0f 48 c2             	cmovs  %edx,%eax
   13d76:	89 c2                	mov    %eax,%edx
   13d78:	8b 45 08             	mov    0x8(%ebp),%eax
   13d7b:	89 50 14             	mov    %edx,0x14(%eax)
}
   13d7e:	90                   	nop
   13d7f:	c9                   	leave  
   13d80:	c3                   	ret    

00013d81 <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13d81:	55                   	push   %ebp
   13d82:	89 e5                	mov    %esp,%ebp
   13d84:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13d87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13d8b:	75 07                	jne    13d94 <move_right+0x13>
    n = 1;
   13d8d:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13d94:	8b 45 08             	mov    0x8(%ebp),%eax
   13d97:	8b 50 14             	mov    0x14(%eax),%edx
   13d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d9d:	01 d0                	add    %edx,%eax
   13d9f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13da2:	8b 45 08             	mov    0x8(%ebp),%eax
   13da5:	8b 50 0c             	mov    0xc(%eax),%edx
   13da8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13dab:	39 c2                	cmp    %eax,%edx
   13dad:	77 0b                	ja     13dba <move_right+0x39>
   13daf:	8b 45 08             	mov    0x8(%ebp),%eax
   13db2:	8b 40 0c             	mov    0xc(%eax),%eax
   13db5:	83 e8 01             	sub    $0x1,%eax
   13db8:	eb 03                	jmp    13dbd <move_right+0x3c>
   13dba:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13dbd:	8b 55 08             	mov    0x8(%ebp),%edx
   13dc0:	89 42 14             	mov    %eax,0x14(%edx)
}
   13dc3:	90                   	nop
   13dc4:	c9                   	leave  
   13dc5:	c3                   	ret    

00013dc6 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13dc6:	55                   	push   %ebp
   13dc7:	89 e5                	mov    %esp,%ebp
   13dc9:	83 ec 14             	sub    $0x14,%esp
   13dcc:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dcf:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13dd2:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13dd6:	7e 44                	jle    13e1c <write_esc_square+0x56>
   13dd8:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13ddc:	7f 3e                	jg     13e1c <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13dde:	8b 45 08             	mov    0x8(%ebp),%eax
   13de1:	8b 40 50             	mov    0x50(%eax),%eax
   13de4:	83 c0 08             	add    $0x8,%eax
   13de7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13dee:	8b 45 08             	mov    0x8(%ebp),%eax
   13df1:	01 d0                	add    %edx,%eax
   13df3:	83 c0 08             	add    $0x8,%eax
   13df6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13df9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13dfc:	8b 10                	mov    (%eax),%edx
   13dfe:	89 d0                	mov    %edx,%eax
   13e00:	c1 e0 02             	shl    $0x2,%eax
   13e03:	01 d0                	add    %edx,%eax
   13e05:	01 c0                	add    %eax,%eax
   13e07:	89 c2                	mov    %eax,%edx
   13e09:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13e0d:	01 d0                	add    %edx,%eax
   13e0f:	8d 50 d0             	lea    -0x30(%eax),%edx
   13e12:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e15:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13e17:	e9 ab 00 00 00       	jmp    13ec7 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13e1c:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13e20:	75 1f                	jne    13e41 <write_esc_square+0x7b>
   13e22:	8b 45 08             	mov    0x8(%ebp),%eax
   13e25:	8b 40 50             	mov    0x50(%eax),%eax
   13e28:	83 f8 09             	cmp    $0x9,%eax
   13e2b:	7f 14                	jg     13e41 <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13e2d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e30:	8b 40 50             	mov    0x50(%eax),%eax
   13e33:	8d 50 01             	lea    0x1(%eax),%edx
   13e36:	8b 45 08             	mov    0x8(%ebp),%eax
   13e39:	89 50 50             	mov    %edx,0x50(%eax)
   13e3c:	e9 86 00 00 00       	jmp    13ec7 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13e41:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13e45:	83 f8 6d             	cmp    $0x6d,%eax
   13e48:	74 25                	je     13e6f <write_esc_square+0xa9>
   13e4a:	83 f8 6d             	cmp    $0x6d,%eax
   13e4d:	7f 6d                	jg     13ebc <write_esc_square+0xf6>
   13e4f:	83 f8 4a             	cmp    $0x4a,%eax
   13e52:	74 5d                	je     13eb1 <write_esc_square+0xeb>
   13e54:	83 f8 4a             	cmp    $0x4a,%eax
   13e57:	7f 63                	jg     13ebc <write_esc_square+0xf6>
   13e59:	83 f8 48             	cmp    $0x48,%eax
   13e5c:	74 46                	je     13ea4 <write_esc_square+0xde>
   13e5e:	83 f8 48             	cmp    $0x48,%eax
   13e61:	7f 59                	jg     13ebc <write_esc_square+0xf6>
   13e63:	83 f8 43             	cmp    $0x43,%eax
   13e66:	74 28                	je     13e90 <write_esc_square+0xca>
   13e68:	83 f8 44             	cmp    $0x44,%eax
   13e6b:	74 0f                	je     13e7c <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13e6d:	eb 4d                	jmp    13ebc <write_esc_square+0xf6>
        set_font_style(console);
   13e6f:	ff 75 08             	push   0x8(%ebp)
   13e72:	e8 c6 fd ff ff       	call   13c3d <set_font_style>
   13e77:	83 c4 04             	add    $0x4,%esp
        break;
   13e7a:	eb 41                	jmp    13ebd <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13e7c:	8b 45 08             	mov    0x8(%ebp),%eax
   13e7f:	8b 40 28             	mov    0x28(%eax),%eax
   13e82:	50                   	push   %eax
   13e83:	ff 75 08             	push   0x8(%ebp)
   13e86:	e8 bd fe ff ff       	call   13d48 <move_left>
   13e8b:	83 c4 08             	add    $0x8,%esp
        break;
   13e8e:	eb 2d                	jmp    13ebd <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13e90:	8b 45 08             	mov    0x8(%ebp),%eax
   13e93:	8b 40 28             	mov    0x28(%eax),%eax
   13e96:	50                   	push   %eax
   13e97:	ff 75 08             	push   0x8(%ebp)
   13e9a:	e8 e2 fe ff ff       	call   13d81 <move_right>
   13e9f:	83 c4 08             	add    $0x8,%esp
        break;
   13ea2:	eb 19                	jmp    13ebd <write_esc_square+0xf7>
        move_cursor(console);
   13ea4:	ff 75 08             	push   0x8(%ebp)
   13ea7:	e8 7a fe ff ff       	call   13d26 <move_cursor>
   13eac:	83 c4 04             	add    $0x4,%esp
        break;
   13eaf:	eb 0c                	jmp    13ebd <write_esc_square+0xf7>
        erase_in_display(console);
   13eb1:	ff 75 08             	push   0x8(%ebp)
   13eb4:	e8 1e fe ff ff       	call   13cd7 <erase_in_display>
   13eb9:	83 c4 04             	add    $0x4,%esp
        break;
   13ebc:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13ebd:	8b 45 08             	mov    0x8(%ebp),%eax
   13ec0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13ec6:	90                   	nop
   13ec7:	90                   	nop
   13ec8:	c9                   	leave  
   13ec9:	c3                   	ret    

00013eca <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13eca:	55                   	push   %ebp
   13ecb:	89 e5                	mov    %esp,%ebp
   13ecd:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13ed0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ed3:	8b 40 08             	mov    0x8(%eax),%eax
   13ed6:	6b c0 68             	imul   $0x68,%eax,%eax
   13ed9:	05 00 e4 04 00       	add    $0x4e400,%eax
   13ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13ee1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&console->mutex);
   13ee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13eeb:	83 c0 54             	add    $0x54,%eax
   13eee:	83 ec 0c             	sub    $0xc,%esp
   13ef1:	50                   	push   %eax
   13ef2:	e8 2a 36 00 00       	call   17521 <mutex_lock>
   13ef7:	83 c4 10             	add    $0x10,%esp

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13efa:	8b 45 08             	mov    0x8(%ebp),%eax
   13efd:	8d 50 0c             	lea    0xc(%eax),%edx
   13f00:	83 ec 08             	sub    $0x8,%esp
   13f03:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13f06:	50                   	push   %eax
   13f07:	52                   	push   %edx
   13f08:	e8 ed 14 00 00       	call   153fa <tty_fifo_get>
   13f0d:	83 c4 10             	add    $0x10,%esp
   13f10:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13f13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f17:	79 2a                	jns    13f43 <console_write+0x79>
    len++;
  } while (1);


  //TODO:解锁
  mutex_unlock(&console->mutex);
   13f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f1c:	83 c0 54             	add    $0x54,%eax
   13f1f:	83 ec 0c             	sub    $0xc,%esp
   13f22:	50                   	push   %eax
   13f23:	e8 9f 36 00 00       	call   175c7 <mutex_unlock>
   13f28:	83 c4 10             	add    $0x10,%esp

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   13f2e:	8b 50 08             	mov    0x8(%eax),%edx
   13f31:	a1 40 e7 04 00       	mov    0x4e740,%eax
   13f36:	39 c2                	cmp    %eax,%edx
   13f38:	0f 84 83 00 00 00    	je     13fc1 <console_write+0xf7>
   13f3e:	e9 8c 00 00 00       	jmp    13fcf <console_write+0x105>
    sem_notify(&tty->out_sem);
   13f43:	8b 45 08             	mov    0x8(%ebp),%eax
   13f46:	83 c0 34             	add    $0x34,%eax
   13f49:	83 ec 0c             	sub    $0xc,%esp
   13f4c:	50                   	push   %eax
   13f4d:	e8 83 38 00 00       	call   177d5 <sem_notify>
   13f52:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13f55:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f58:	8b 00                	mov    (%eax),%eax
   13f5a:	83 f8 02             	cmp    $0x2,%eax
   13f5d:	74 40                	je     13f9f <console_write+0xd5>
   13f5f:	83 f8 02             	cmp    $0x2,%eax
   13f62:	77 53                	ja     13fb7 <console_write+0xed>
   13f64:	85 c0                	test   %eax,%eax
   13f66:	74 07                	je     13f6f <console_write+0xa5>
   13f68:	83 f8 01             	cmp    $0x1,%eax
   13f6b:	74 1a                	je     13f87 <console_write+0xbd>
        break;
   13f6d:	eb 48                	jmp    13fb7 <console_write+0xed>
        write_normal(console, c);
   13f6f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f73:	0f be c0             	movsbl %al,%eax
   13f76:	83 ec 08             	sub    $0x8,%esp
   13f79:	50                   	push   %eax
   13f7a:	ff 75 f0             	push   -0x10(%ebp)
   13f7d:	e8 26 fb ff ff       	call   13aa8 <write_normal>
   13f82:	83 c4 10             	add    $0x10,%esp
        break;
   13f85:	eb 31                	jmp    13fb8 <console_write+0xee>
        write_esc(console, c);
   13f87:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f8b:	0f be c0             	movsbl %al,%eax
   13f8e:	83 ec 08             	sub    $0x8,%esp
   13f91:	50                   	push   %eax
   13f92:	ff 75 f0             	push   -0x10(%ebp)
   13f95:	e8 25 fc ff ff       	call   13bbf <write_esc>
   13f9a:	83 c4 10             	add    $0x10,%esp
        break;
   13f9d:	eb 19                	jmp    13fb8 <console_write+0xee>
        write_esc_square(console, c);
   13f9f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13fa3:	0f be c0             	movsbl %al,%eax
   13fa6:	83 ec 08             	sub    $0x8,%esp
   13fa9:	50                   	push   %eax
   13faa:	ff 75 f0             	push   -0x10(%ebp)
   13fad:	e8 14 fe ff ff       	call   13dc6 <write_esc_square>
   13fb2:	83 c4 10             	add    $0x10,%esp
        break;
   13fb5:	eb 01                	jmp    13fb8 <console_write+0xee>
        break;
   13fb7:	90                   	nop
    len++;
   13fb8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13fbc:	e9 39 ff ff ff       	jmp    13efa <console_write+0x30>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13fc1:	83 ec 0c             	sub    $0xc,%esp
   13fc4:	ff 75 f0             	push   -0x10(%ebp)
   13fc7:	e8 4c f5 ff ff       	call   13518 <update_cursor_pos>
   13fcc:	83 c4 10             	add    $0x10,%esp
  }


  return len;
   13fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13fd2:	c9                   	leave  
   13fd3:	c3                   	ret    

00013fd4 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13fd4:	55                   	push   %ebp
   13fd5:	89 e5                	mov    %esp,%ebp
   13fd7:	90                   	nop
   13fd8:	5d                   	pop    %ebp
   13fd9:	c3                   	ret    

00013fda <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13fda:	55                   	push   %ebp
   13fdb:	89 e5                	mov    %esp,%ebp
   13fdd:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13fe0:	8b 45 08             	mov    0x8(%ebp),%eax
   13fe3:	6b c0 68             	imul   $0x68,%eax,%eax
   13fe6:	05 00 e4 04 00       	add    $0x4e400,%eax
   13feb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   13fee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ff1:	8b 40 04             	mov    0x4(%eax),%eax
   13ff4:	85 c0                	test   %eax,%eax
   13ff6:	75 0e                	jne    14006 <console_select+0x2c>
      console_init(console_index);
   13ff8:	83 ec 0c             	sub    $0xc,%esp
   13ffb:	ff 75 08             	push   0x8(%ebp)
   13ffe:	e8 9a f9 ff ff       	call   1399d <console_init>
   14003:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   14006:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14009:	8b 40 08             	mov    0x8(%eax),%eax
   1400c:	89 c2                	mov    %eax,%edx
   1400e:	8b 45 08             	mov    0x8(%ebp),%eax
   14011:	0f af d0             	imul   %eax,%edx
   14014:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14017:	8b 40 0c             	mov    0xc(%eax),%eax
   1401a:	0f af c2             	imul   %edx,%eax
   1401d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   14021:	83 ec 08             	sub    $0x8,%esp
   14024:	6a 0c                	push   $0xc
   14026:	68 d4 03 00 00       	push   $0x3d4
   1402b:	e8 53 f4 ff ff       	call   13483 <outb>
   14030:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   14033:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   14037:	66 c1 e8 08          	shr    $0x8,%ax
   1403b:	0f b6 c0             	movzbl %al,%eax
   1403e:	83 ec 08             	sub    $0x8,%esp
   14041:	50                   	push   %eax
   14042:	68 d5 03 00 00       	push   $0x3d5
   14047:	e8 37 f4 ff ff       	call   13483 <outb>
   1404c:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   1404f:	83 ec 08             	sub    $0x8,%esp
   14052:	6a 0d                	push   $0xd
   14054:	68 d4 03 00 00       	push   $0x3d4
   14059:	e8 25 f4 ff ff       	call   13483 <outb>
   1405e:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   14061:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   14065:	0f b6 c0             	movzbl %al,%eax
   14068:	83 ec 08             	sub    $0x8,%esp
   1406b:	50                   	push   %eax
   1406c:	68 d5 03 00 00       	push   $0x3d5
   14071:	e8 0d f4 ff ff       	call   13483 <outb>
   14076:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   14079:	8b 45 08             	mov    0x8(%ebp),%eax
   1407c:	a3 40 e7 04 00       	mov    %eax,0x4e740

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   14081:	8b 45 08             	mov    0x8(%ebp),%eax
   14084:	83 c0 30             	add    $0x30,%eax
   14087:	0f be c0             	movsbl %al,%eax
   1408a:	83 ec 08             	sub    $0x8,%esp
   1408d:	50                   	push   %eax
   1408e:	ff 75 f4             	push   -0xc(%ebp)
   14091:	e8 e8 f6 ff ff       	call   1377e <show_char>
   14096:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   14099:	83 ec 0c             	sub    $0xc,%esp
   1409c:	ff 75 f4             	push   -0xc(%ebp)
   1409f:	e8 74 f4 ff ff       	call   13518 <update_cursor_pos>
   140a4:	83 c4 10             	add    $0x10,%esp

   

   140a7:	90                   	nop
   140a8:	c9                   	leave  
   140a9:	c3                   	ret    

000140aa <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   140aa:	55                   	push   %ebp
   140ab:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   140ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   140b1:	78 06                	js     140b9 <is_dev_exist+0xf>
   140b3:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   140b7:	7e 07                	jle    140c0 <is_dev_exist+0x16>
        return 0;
   140b9:	b8 00 00 00 00       	mov    $0x0,%eax
   140be:	eb 3c                	jmp    140fc <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   140c0:	8b 55 08             	mov    0x8(%ebp),%edx
   140c3:	89 d0                	mov    %edx,%eax
   140c5:	c1 e0 02             	shl    $0x2,%eax
   140c8:	01 d0                	add    %edx,%eax
   140ca:	c1 e0 02             	shl    $0x2,%eax
   140cd:	05 70 e7 04 00       	add    $0x4e770,%eax
   140d2:	8b 00                	mov    (%eax),%eax
   140d4:	85 c0                	test   %eax,%eax
   140d6:	74 18                	je     140f0 <is_dev_exist+0x46>
   140d8:	8b 55 08             	mov    0x8(%ebp),%edx
   140db:	89 d0                	mov    %edx,%eax
   140dd:	c1 e0 02             	shl    $0x2,%eax
   140e0:	01 d0                	add    %edx,%eax
   140e2:	c1 e0 02             	shl    $0x2,%eax
   140e5:	05 60 e7 04 00       	add    $0x4e760,%eax
   140ea:	8b 00                	mov    (%eax),%eax
   140ec:	85 c0                	test   %eax,%eax
   140ee:	75 07                	jne    140f7 <is_dev_exist+0x4d>
        return 0;
   140f0:	b8 00 00 00 00       	mov    $0x0,%eax
   140f5:	eb 05                	jmp    140fc <is_dev_exist+0x52>
    }

    return 1;
   140f7:	b8 01 00 00 00       	mov    $0x1,%eax
}
   140fc:	5d                   	pop    %ebp
   140fd:	c3                   	ret    

000140fe <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   140fe:	55                   	push   %ebp
   140ff:	89 e5                	mov    %esp,%ebp
   14101:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   14104:	e8 8b f2 ff ff       	call   13394 <idt_enter_protection>
   14109:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   1410c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14113:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1411a:	eb 68                	jmp    14184 <dev_open+0x86>
        device_t *dev = dev_table + i;
   1411c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1411f:	89 d0                	mov    %edx,%eax
   14121:	c1 e0 02             	shl    $0x2,%eax
   14124:	01 d0                	add    %edx,%eax
   14126:	c1 e0 02             	shl    $0x2,%eax
   14129:	05 60 e7 04 00       	add    $0x4e760,%eax
   1412e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   14131:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14134:	8b 40 10             	mov    0x10(%eax),%eax
   14137:	85 c0                	test   %eax,%eax
   14139:	75 08                	jne    14143 <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   1413b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1413e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14141:	eb 49                	jmp    1418c <dev_open+0x8e>
        } else if (dev->desc->dev_type == dev_type && dev->dev_index == dev_index) {
   14143:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14146:	8b 00                	mov    (%eax),%eax
   14148:	8b 40 14             	mov    0x14(%eax),%eax
   1414b:	39 45 08             	cmp    %eax,0x8(%ebp)
   1414e:	75 30                	jne    14180 <dev_open+0x82>
   14150:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14153:	8b 40 08             	mov    0x8(%eax),%eax
   14156:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14159:	75 25                	jne    14180 <dev_open+0x82>
            //设备已打开过,增加打开次数
            dev->open_count++;
   1415b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1415e:	8b 40 10             	mov    0x10(%eax),%eax
   14161:	8d 50 01             	lea    0x1(%eax),%edx
   14164:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14167:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   1416a:	83 ec 0c             	sub    $0xc,%esp
   1416d:	ff 75 e4             	push   -0x1c(%ebp)
   14170:	e8 37 f2 ff ff       	call   133ac <idt_leave_protection>
   14175:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   14178:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1417b:	e9 c6 00 00 00       	jmp    14246 <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14180:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14184:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14187:	83 f8 7f             	cmp    $0x7f,%eax
   1418a:	76 90                	jbe    1411c <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   1418c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   14193:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1419a:	eb 24                	jmp    141c0 <dev_open+0xc2>
        dev_desc_t *d = dev_des_table[i];
   1419c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1419f:	8b 04 85 50 b0 01 00 	mov    0x1b050(,%eax,4),%eax
   141a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   141a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
   141ac:	8b 40 14             	mov    0x14(%eax),%eax
   141af:	39 45 08             	cmp    %eax,0x8(%ebp)
   141b2:	75 08                	jne    141bc <dev_open+0xbe>
            desc = d;
   141b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
   141b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   141ba:	eb 0c                	jmp    141c8 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   141bc:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   141c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   141c3:	83 f8 02             	cmp    $0x2,%eax
   141c6:	76 d4                	jbe    1419c <dev_open+0x9e>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   141c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   141cc:	74 65                	je     14233 <dev_open+0x135>
   141ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   141d2:	74 5f                	je     14233 <dev_open+0x135>
        free_dev->desc = desc;
   141d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   141da:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   141dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141df:	8b 55 10             	mov    0x10(%ebp),%edx
   141e2:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   141e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141e8:	8b 55 0c             	mov    0xc(%ebp),%edx
   141eb:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   141ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
   141f1:	8b 40 18             	mov    0x18(%eax),%eax
   141f4:	83 ec 0c             	sub    $0xc,%esp
   141f7:	ff 75 f4             	push   -0xc(%ebp)
   141fa:	ff d0                	call   *%eax
   141fc:	83 c4 10             	add    $0x10,%esp
   141ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   14202:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   14206:	75 2b                	jne    14233 <dev_open+0x135>
            free_dev->open_count = 1;
   14208:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1420b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   14212:	83 ec 0c             	sub    $0xc,%esp
   14215:	ff 75 e4             	push   -0x1c(%ebp)
   14218:	e8 8f f1 ff ff       	call   133ac <idt_leave_protection>
   1421d:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   14220:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14223:	2d 60 e7 04 00       	sub    $0x4e760,%eax
   14228:	c1 f8 02             	sar    $0x2,%eax
   1422b:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   14231:	eb 13                	jmp    14246 <dev_open+0x148>

        }
    }

    idt_leave_protection(state);
   14233:	83 ec 0c             	sub    $0xc,%esp
   14236:	ff 75 e4             	push   -0x1c(%ebp)
   14239:	e8 6e f1 ff ff       	call   133ac <idt_leave_protection>
   1423e:	83 c4 10             	add    $0x10,%esp
    return -1;
   14241:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14246:	c9                   	leave  
   14247:	c3                   	ret    

00014248 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   14248:	55                   	push   %ebp
   14249:	89 e5                	mov    %esp,%ebp
   1424b:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1424e:	ff 75 08             	push   0x8(%ebp)
   14251:	e8 54 fe ff ff       	call   140aa <is_dev_exist>
   14256:	83 c4 04             	add    $0x4,%esp
   14259:	85 c0                	test   %eax,%eax
   1425b:	75 07                	jne    14264 <dev_read+0x1c>
        return -1;
   1425d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14262:	eb 2e                	jmp    14292 <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   14264:	8b 55 08             	mov    0x8(%ebp),%edx
   14267:	89 d0                	mov    %edx,%eax
   14269:	c1 e0 02             	shl    $0x2,%eax
   1426c:	01 d0                	add    %edx,%eax
   1426e:	c1 e0 02             	shl    $0x2,%eax
   14271:	05 60 e7 04 00       	add    $0x4e760,%eax
   14276:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14279:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1427c:	8b 00                	mov    (%eax),%eax
   1427e:	8b 40 1c             	mov    0x1c(%eax),%eax
   14281:	ff 75 14             	push   0x14(%ebp)
   14284:	ff 75 10             	push   0x10(%ebp)
   14287:	ff 75 0c             	push   0xc(%ebp)
   1428a:	ff 75 f4             	push   -0xc(%ebp)
   1428d:	ff d0                	call   *%eax
   1428f:	83 c4 10             	add    $0x10,%esp
}
   14292:	c9                   	leave  
   14293:	c3                   	ret    

00014294 <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   14294:	55                   	push   %ebp
   14295:	89 e5                	mov    %esp,%ebp
   14297:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1429a:	ff 75 08             	push   0x8(%ebp)
   1429d:	e8 08 fe ff ff       	call   140aa <is_dev_exist>
   142a2:	83 c4 04             	add    $0x4,%esp
   142a5:	85 c0                	test   %eax,%eax
   142a7:	75 07                	jne    142b0 <dev_write+0x1c>
        return -1;
   142a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142ae:	eb 2e                	jmp    142de <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   142b0:	8b 55 08             	mov    0x8(%ebp),%edx
   142b3:	89 d0                	mov    %edx,%eax
   142b5:	c1 e0 02             	shl    $0x2,%eax
   142b8:	01 d0                	add    %edx,%eax
   142ba:	c1 e0 02             	shl    $0x2,%eax
   142bd:	05 60 e7 04 00       	add    $0x4e760,%eax
   142c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   142c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142c8:	8b 00                	mov    (%eax),%eax
   142ca:	8b 40 20             	mov    0x20(%eax),%eax
   142cd:	ff 75 14             	push   0x14(%ebp)
   142d0:	ff 75 10             	push   0x10(%ebp)
   142d3:	ff 75 0c             	push   0xc(%ebp)
   142d6:	ff 75 f4             	push   -0xc(%ebp)
   142d9:	ff d0                	call   *%eax
   142db:	83 c4 10             	add    $0x10,%esp
}
   142de:	c9                   	leave  
   142df:	c3                   	ret    

000142e0 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   142e0:	55                   	push   %ebp
   142e1:	89 e5                	mov    %esp,%ebp
   142e3:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   142e6:	ff 75 08             	push   0x8(%ebp)
   142e9:	e8 bc fd ff ff       	call   140aa <is_dev_exist>
   142ee:	83 c4 04             	add    $0x4,%esp
   142f1:	85 c0                	test   %eax,%eax
   142f3:	75 07                	jne    142fc <dev_control+0x1c>
        return -1;
   142f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142fa:	eb 2e                	jmp    1432a <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   142fc:	8b 55 08             	mov    0x8(%ebp),%edx
   142ff:	89 d0                	mov    %edx,%eax
   14301:	c1 e0 02             	shl    $0x2,%eax
   14304:	01 d0                	add    %edx,%eax
   14306:	c1 e0 02             	shl    $0x2,%eax
   14309:	05 60 e7 04 00       	add    $0x4e760,%eax
   1430e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   14311:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14314:	8b 00                	mov    (%eax),%eax
   14316:	8b 40 24             	mov    0x24(%eax),%eax
   14319:	ff 75 14             	push   0x14(%ebp)
   1431c:	ff 75 10             	push   0x10(%ebp)
   1431f:	ff 75 0c             	push   0xc(%ebp)
   14322:	ff 75 f4             	push   -0xc(%ebp)
   14325:	ff d0                	call   *%eax
   14327:	83 c4 10             	add    $0x10,%esp
}
   1432a:	c9                   	leave  
   1432b:	c3                   	ret    

0001432c <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   1432c:	55                   	push   %ebp
   1432d:	89 e5                	mov    %esp,%ebp
   1432f:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14332:	ff 75 08             	push   0x8(%ebp)
   14335:	e8 70 fd ff ff       	call   140aa <is_dev_exist>
   1433a:	83 c4 04             	add    $0x4,%esp
   1433d:	85 c0                	test   %eax,%eax
   1433f:	74 6b                	je     143ac <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   14341:	8b 55 08             	mov    0x8(%ebp),%edx
   14344:	89 d0                	mov    %edx,%eax
   14346:	c1 e0 02             	shl    $0x2,%eax
   14349:	01 d0                	add    %edx,%eax
   1434b:	c1 e0 02             	shl    $0x2,%eax
   1434e:	05 60 e7 04 00       	add    $0x4e760,%eax
   14353:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   14356:	e8 39 f0 ff ff       	call   13394 <idt_enter_protection>
   1435b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   1435e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14361:	8b 40 10             	mov    0x10(%eax),%eax
   14364:	8d 50 ff             	lea    -0x1(%eax),%edx
   14367:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1436a:	89 50 10             	mov    %edx,0x10(%eax)
   1436d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14370:	8b 40 10             	mov    0x10(%eax),%eax
   14373:	85 c0                	test   %eax,%eax
   14375:	75 25                	jne    1439c <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   14377:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1437a:	8b 00                	mov    (%eax),%eax
   1437c:	8b 40 28             	mov    0x28(%eax),%eax
   1437f:	83 ec 0c             	sub    $0xc,%esp
   14382:	ff 75 f4             	push   -0xc(%ebp)
   14385:	ff d0                	call   *%eax
   14387:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   1438a:	83 ec 04             	sub    $0x4,%esp
   1438d:	6a 14                	push   $0x14
   1438f:	6a 00                	push   $0x0
   14391:	ff 75 f4             	push   -0xc(%ebp)
   14394:	e8 cc 3d 00 00       	call   18165 <kernel_memset>
   14399:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   1439c:	83 ec 0c             	sub    $0xc,%esp
   1439f:	ff 75 f0             	push   -0x10(%ebp)
   143a2:	e8 05 f0 ff ff       	call   133ac <idt_leave_protection>
   143a7:	83 c4 10             	add    $0x10,%esp
   143aa:	eb 01                	jmp    143ad <dev_close+0x81>
        return;
   143ac:	90                   	nop
}
   143ad:	c9                   	leave  
   143ae:	c3                   	ret    

000143af <inb>:
static inline uint8_t inb(uint16_t port) {
   143af:	55                   	push   %ebp
   143b0:	89 e5                	mov    %esp,%ebp
   143b2:	83 ec 14             	sub    $0x14,%esp
   143b5:	8b 45 08             	mov    0x8(%ebp),%eax
   143b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   143bc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   143c0:	89 c2                	mov    %eax,%edx
   143c2:	ec                   	in     (%dx),%al
   143c3:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   143c6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   143ca:	c9                   	leave  
   143cb:	c3                   	ret    

000143cc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   143cc:	55                   	push   %ebp
   143cd:	89 e5                	mov    %esp,%ebp
   143cf:	83 ec 08             	sub    $0x8,%esp
   143d2:	8b 45 08             	mov    0x8(%ebp),%eax
   143d5:	8b 55 0c             	mov    0xc(%ebp),%edx
   143d8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   143dc:	89 d0                	mov    %edx,%eax
   143de:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   143e1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   143e5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   143e9:	ee                   	out    %al,(%dx)
}
   143ea:	90                   	nop
   143eb:	c9                   	leave  
   143ec:	c3                   	ret    

000143ed <outw>:
static inline void outw(uint16_t port, uint8_t data) {
   143ed:	55                   	push   %ebp
   143ee:	89 e5                	mov    %esp,%ebp
   143f0:	83 ec 08             	sub    $0x8,%esp
   143f3:	8b 45 08             	mov    0x8(%ebp),%eax
   143f6:	8b 55 0c             	mov    0xc(%ebp),%edx
   143f9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   143fd:	89 d0                	mov    %edx,%eax
   143ff:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14402:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14406:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1440a:	ee                   	out    %al,(%dx)
}
   1440b:	90                   	nop
   1440c:	c9                   	leave  
   1440d:	c3                   	ret    

0001440e <inw>:
static inline uint16_t inw(uint16_t port) {
   1440e:	55                   	push   %ebp
   1440f:	89 e5                	mov    %esp,%ebp
   14411:	83 ec 14             	sub    $0x14,%esp
   14414:	8b 45 08             	mov    0x8(%ebp),%eax
   14417:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   1441b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1441f:	89 c2                	mov    %eax,%edx
   14421:	66 ed                	in     (%dx),%ax
   14423:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14427:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   1442b:	c9                   	leave  
   1442c:	c3                   	ret    

0001442d <disk_send_cmd>:
 * @param start_sector
 * @param sector_count
 * @param cmd
 */
static void disk_send_cmd(disk_t *disk, uint32_t start_sector,
                          uint32_t sector_count, int cmd) {
   1442d:	55                   	push   %ebp
   1442e:	89 e5                	mov    %esp,%ebp
  // 1.LBA模式下指定磁盘的驱动器号，即master或者slave
  outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);
   14430:	8b 45 08             	mov    0x8(%ebp),%eax
   14433:	8b 40 20             	mov    0x20(%eax),%eax
   14436:	83 c8 e0             	or     $0xffffffe0,%eax
   14439:	0f b6 d0             	movzbl %al,%edx
   1443c:	8b 45 08             	mov    0x8(%ebp),%eax
   1443f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14443:	83 c0 06             	add    $0x6,%eax
   14446:	0f b7 c0             	movzwl %ax,%eax
   14449:	52                   	push   %edx
   1444a:	50                   	push   %eax
   1444b:	e8 7c ff ff ff       	call   143cc <outb>
   14450:	83 c4 08             	add    $0x8,%esp

  // 2.指定扇区数的高八位和起始扇区即LBA值的高24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 8));
   14453:	8b 45 10             	mov    0x10(%ebp),%eax
   14456:	c1 e8 08             	shr    $0x8,%eax
   14459:	0f b6 d0             	movzbl %al,%edx
   1445c:	8b 45 08             	mov    0x8(%ebp),%eax
   1445f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14463:	83 c0 02             	add    $0x2,%eax
   14466:	0f b7 c0             	movzwl %ax,%eax
   14469:	52                   	push   %edx
   1446a:	50                   	push   %eax
   1446b:	e8 5c ff ff ff       	call   143cc <outb>
   14470:	83 c4 08             	add    $0x8,%esp
  // 6字节LBA值，先初始化第456个字节
  // 暂时只用到了4个字节的LBA值, 所以第5, 6个字节置0即可
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 24));  // LBA4
   14473:	8b 45 0c             	mov    0xc(%ebp),%eax
   14476:	c1 e8 18             	shr    $0x18,%eax
   14479:	0f b6 d0             	movzbl %al,%edx
   1447c:	8b 45 08             	mov    0x8(%ebp),%eax
   1447f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14483:	83 c0 03             	add    $0x3,%eax
   14486:	0f b7 c0             	movzwl %ax,%eax
   14489:	52                   	push   %edx
   1448a:	50                   	push   %eax
   1448b:	e8 3c ff ff ff       	call   143cc <outb>
   14490:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), 0x00);                          // LBA5
   14493:	8b 45 08             	mov    0x8(%ebp),%eax
   14496:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1449a:	83 c0 04             	add    $0x4,%eax
   1449d:	0f b7 c0             	movzwl %ax,%eax
   144a0:	6a 00                	push   $0x0
   144a2:	50                   	push   %eax
   144a3:	e8 24 ff ff ff       	call   143cc <outb>
   144a8:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), 0x00);                           // LBA6
   144ab:	8b 45 08             	mov    0x8(%ebp),%eax
   144ae:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144b2:	83 c0 05             	add    $0x5,%eax
   144b5:	0f b7 c0             	movzwl %ax,%eax
   144b8:	6a 00                	push   $0x0
   144ba:	50                   	push   %eax
   144bb:	e8 0c ff ff ff       	call   143cc <outb>
   144c0:	83 c4 08             	add    $0x8,%esp

  // 3.指定读取扇区的低8位和起始扇区即LBA值的低24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 0));
   144c3:	8b 45 10             	mov    0x10(%ebp),%eax
   144c6:	0f b6 d0             	movzbl %al,%edx
   144c9:	8b 45 08             	mov    0x8(%ebp),%eax
   144cc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144d0:	83 c0 02             	add    $0x2,%eax
   144d3:	0f b7 c0             	movzwl %ax,%eax
   144d6:	52                   	push   %edx
   144d7:	50                   	push   %eax
   144d8:	e8 ef fe ff ff       	call   143cc <outb>
   144dd:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 0));   // LBA1
   144e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   144e3:	0f b6 d0             	movzbl %al,%edx
   144e6:	8b 45 08             	mov    0x8(%ebp),%eax
   144e9:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144ed:	83 c0 03             	add    $0x3,%eax
   144f0:	0f b7 c0             	movzwl %ax,%eax
   144f3:	52                   	push   %edx
   144f4:	50                   	push   %eax
   144f5:	e8 d2 fe ff ff       	call   143cc <outb>
   144fa:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), (uint8_t)(start_sector >> 8));  // LBA2
   144fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   14500:	c1 e8 08             	shr    $0x8,%eax
   14503:	0f b6 d0             	movzbl %al,%edx
   14506:	8b 45 08             	mov    0x8(%ebp),%eax
   14509:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1450d:	83 c0 04             	add    $0x4,%eax
   14510:	0f b7 c0             	movzwl %ax,%eax
   14513:	52                   	push   %edx
   14514:	50                   	push   %eax
   14515:	e8 b2 fe ff ff       	call   143cc <outb>
   1451a:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), (uint8_t)(start_sector >> 16));  // LBA3
   1451d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14520:	c1 e8 10             	shr    $0x10,%eax
   14523:	0f b6 d0             	movzbl %al,%edx
   14526:	8b 45 08             	mov    0x8(%ebp),%eax
   14529:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1452d:	83 c0 05             	add    $0x5,%eax
   14530:	0f b7 c0             	movzwl %ax,%eax
   14533:	52                   	push   %edx
   14534:	50                   	push   %eax
   14535:	e8 92 fe ff ff       	call   143cc <outb>
   1453a:	83 c4 08             	add    $0x8,%esp

  // 4.对指定的区域执行cmd指令操作
  outb(DISK_CMD(disk), cmd);
   1453d:	8b 45 14             	mov    0x14(%ebp),%eax
   14540:	0f b6 d0             	movzbl %al,%edx
   14543:	8b 45 08             	mov    0x8(%ebp),%eax
   14546:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1454a:	83 c0 07             	add    $0x7,%eax
   1454d:	0f b7 c0             	movzwl %ax,%eax
   14550:	52                   	push   %edx
   14551:	50                   	push   %eax
   14552:	e8 75 fe ff ff       	call   143cc <outb>
   14557:	83 c4 08             	add    $0x8,%esp
}
   1455a:	90                   	nop
   1455b:	c9                   	leave  
   1455c:	c3                   	ret    

0001455d <disk_read_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_read_data(disk_t *disk, void *buf, int size) {
   1455d:	55                   	push   %ebp
   1455e:	89 e5                	mov    %esp,%ebp
   14560:	53                   	push   %ebx
   14561:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   14564:	8b 45 0c             	mov    0xc(%ebp),%eax
   14567:	89 45 f8             	mov    %eax,-0x8(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   1456a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14571:	eb 23                	jmp    14596 <disk_read_data+0x39>
    *(c++) = inw(DISK_DATA(disk));
   14573:	8b 45 08             	mov    0x8(%ebp),%eax
   14576:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1457a:	0f b7 c0             	movzwl %ax,%eax
   1457d:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14580:	8d 53 02             	lea    0x2(%ebx),%edx
   14583:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14586:	50                   	push   %eax
   14587:	e8 82 fe ff ff       	call   1440e <inw>
   1458c:	83 c4 04             	add    $0x4,%esp
   1458f:	66 89 03             	mov    %ax,(%ebx)
  for (int i = 0; i < size / 2; ++i) {
   14592:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14596:	8b 45 10             	mov    0x10(%ebp),%eax
   14599:	89 c2                	mov    %eax,%edx
   1459b:	c1 ea 1f             	shr    $0x1f,%edx
   1459e:	01 d0                	add    %edx,%eax
   145a0:	d1 f8                	sar    %eax
   145a2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   145a5:	7c cc                	jl     14573 <disk_read_data+0x16>
  }
}
   145a7:	90                   	nop
   145a8:	90                   	nop
   145a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   145ac:	c9                   	leave  
   145ad:	c3                   	ret    

000145ae <disk_write_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_write_data(disk_t *disk, void *buf, int size) {
   145ae:	55                   	push   %ebp
   145af:	89 e5                	mov    %esp,%ebp
   145b1:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   145b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   145b7:	89 45 fc             	mov    %eax,-0x4(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   145ba:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   145c1:	eb 27                	jmp    145ea <disk_write_data+0x3c>
    outw(DISK_DATA(disk), *(c++));
   145c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145c6:	8d 50 02             	lea    0x2(%eax),%edx
   145c9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   145cc:	0f b7 00             	movzwl (%eax),%eax
   145cf:	0f b6 d0             	movzbl %al,%edx
   145d2:	8b 45 08             	mov    0x8(%ebp),%eax
   145d5:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   145d9:	0f b7 c0             	movzwl %ax,%eax
   145dc:	52                   	push   %edx
   145dd:	50                   	push   %eax
   145de:	e8 0a fe ff ff       	call   143ed <outw>
   145e3:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < size / 2; ++i) {
   145e6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   145ea:	8b 45 10             	mov    0x10(%ebp),%eax
   145ed:	89 c2                	mov    %eax,%edx
   145ef:	c1 ea 1f             	shr    $0x1f,%edx
   145f2:	01 d0                	add    %edx,%eax
   145f4:	d1 f8                	sar    %eax
   145f6:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   145f9:	7c c8                	jl     145c3 <disk_write_data+0x15>
  }
}
   145fb:	90                   	nop
   145fc:	90                   	nop
   145fd:	c9                   	leave  
   145fe:	c3                   	ret    

000145ff <disk_wait_data>:
 *        并检测磁盘是否发生错误
 * 
 * @param disk 
 * @return int 
 */
static int disk_wait_data(disk_t *disk) {
   145ff:	55                   	push   %ebp
   14600:	89 e5                	mov    %esp,%ebp
   14602:	83 ec 10             	sub    $0x10,%esp
  uint8_t status = 0;
   14605:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
  do {

    //轮询状态寄存器
    //若磁盘空闲则进行下一步操作
    //若磁盘忙碌 但有数据就绪又或者有错误发生，则进行下一步操作
    status = inb(DISK_STATUS(disk));
   14609:	8b 45 08             	mov    0x8(%ebp),%eax
   1460c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14610:	83 c0 07             	add    $0x7,%eax
   14613:	0f b7 c0             	movzwl %ax,%eax
   14616:	50                   	push   %eax
   14617:	e8 93 fd ff ff       	call   143af <inb>
   1461c:	83 c4 04             	add    $0x4,%esp
   1461f:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((status & ( DISK_STATUS_BUSY 
   14622:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   14626:	25 89 00 00 00       	and    $0x89,%eax
   1462b:	3d 80 00 00 00       	cmp    $0x80,%eax
   14630:	75 02                	jne    14634 <disk_wait_data+0x35>
    status = inb(DISK_STATUS(disk));
   14632:	eb d5                	jmp    14609 <disk_wait_data+0xa>
                    | DISK_STATUS_DRQ 
                    | DISK_STATUS_ERR)) 
                    != DISK_STATUS_BUSY) {

        break;
   14634:	90                   	nop
    }
  } while (1);


  return (status & DISK_STATUS_ERR) ? -1 : 0;
   14635:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   14639:	83 e0 01             	and    $0x1,%eax
   1463c:	85 c0                	test   %eax,%eax
   1463e:	74 07                	je     14647 <disk_wait_data+0x48>
   14640:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14645:	eb 05                	jmp    1464c <disk_wait_data+0x4d>
   14647:	b8 00 00 00 00       	mov    $0x0,%eax
  
}
   1464c:	c9                   	leave  
   1464d:	c3                   	ret    

0001464e <detect_part_info>:
 * @brief 检测磁盘disk的分区表信息
 * 
 * @param disk 
 * @return int 
 */
static int detect_part_info(disk_t *disk) {
   1464e:	55                   	push   %ebp
   1464f:	89 e5                	mov    %esp,%ebp
   14651:	81 ec 18 02 00 00    	sub    $0x218,%esp
  mbr_t mbr;
  //1.发送读取指令
  disk_send_cmd(disk, 0, 1, DISK_CMD_READ);
   14657:	6a 24                	push   $0x24
   14659:	6a 01                	push   $0x1
   1465b:	6a 00                	push   $0x0
   1465d:	ff 75 08             	push   0x8(%ebp)
   14660:	e8 c8 fd ff ff       	call   1442d <disk_send_cmd>
   14665:	83 c4 10             	add    $0x10,%esp
  //2.等待磁盘数据就绪
  int err = disk_wait_data(disk);
   14668:	ff 75 08             	push   0x8(%ebp)
   1466b:	e8 8f ff ff ff       	call   145ff <disk_wait_data>
   14670:	83 c4 04             	add    $0x4,%esp
   14673:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (err < 0) {
   14676:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1467a:	79 18                	jns    14694 <detect_part_info+0x46>
    log_printf("read mbr failed!\n");
   1467c:	83 ec 0c             	sub    $0xc,%esp
   1467f:	68 e0 95 01 00       	push   $0x195e0
   14684:	e8 d9 42 00 00       	call   18962 <log_printf>
   14689:	83 c4 10             	add    $0x10,%esp
    return err;
   1468c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1468f:	e9 cd 00 00 00       	jmp    14761 <detect_part_info+0x113>
  }

  //3.读取0扇区的mbr,并将由bios检测并填充的分区表信息
  //读取到disk的partinfo结构中
  disk_read_data(disk, &mbr, sizeof(mbr));
   14694:	83 ec 04             	sub    $0x4,%esp
   14697:	68 00 02 00 00       	push   $0x200
   1469c:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   146a2:	50                   	push   %eax
   146a3:	ff 75 08             	push   0x8(%ebp)
   146a6:	e8 b2 fe ff ff       	call   1455d <disk_read_data>
   146ab:	83 c4 10             	add    $0x10,%esp
  part_item_t *item = mbr.part_item;
   146ae:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   146b4:	05 be 01 00 00       	add    $0x1be,%eax
   146b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  partinfo_t *part_info = disk->partinfo + 1;
   146bc:	8b 45 08             	mov    0x8(%ebp),%eax
   146bf:	83 c0 30             	add    $0x30,%eax
   146c2:	83 c0 30             	add    $0x30,%eax
   146c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   146c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   146cf:	e9 83 00 00 00       	jmp    14757 <detect_part_info+0x109>
    part_info->type = item->system_id;
   146d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146d7:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   146db:	0f b6 d0             	movzbl %al,%edx
   146de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e1:	89 50 24             	mov    %edx,0x24(%eax)
    if (part_info->type == FS_INVALID) {  //无效分区，不使用
   146e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e7:	8b 40 24             	mov    0x24(%eax),%eax
   146ea:	85 c0                	test   %eax,%eax
   146ec:	75 20                	jne    1470e <detect_part_info+0xc0>
      part_info->total_sectors = 0;
   146ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f1:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
      part_info->start_sector = 0;
   146f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146fb:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
      part_info->disk = (disk_t *)0;
   14702:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14705:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   1470c:	eb 3d                	jmp    1474b <detect_part_info+0xfd>
    } else {  //分区有效，记录分区信息
      kernel_sprintf(part_info->name, "%s%d", disk->name, i);
   1470e:	8b 55 08             	mov    0x8(%ebp),%edx
   14711:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14714:	ff 75 ec             	push   -0x14(%ebp)
   14717:	52                   	push   %edx
   14718:	68 f2 95 01 00       	push   $0x195f2
   1471d:	50                   	push   %eax
   1471e:	e8 07 3b 00 00       	call   1822a <kernel_sprintf>
   14723:	83 c4 10             	add    $0x10,%esp
      part_info->disk = disk;
   14726:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14729:	8b 55 08             	mov    0x8(%ebp),%edx
   1472c:	89 50 20             	mov    %edx,0x20(%eax)
      part_info->start_sector = item->relative_sector;
   1472f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14732:	8b 40 08             	mov    0x8(%eax),%eax
   14735:	89 c2                	mov    %eax,%edx
   14737:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1473a:	89 50 28             	mov    %edx,0x28(%eax)
      part_info->total_sectors = item->total_sectors;
   1473d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14740:	8b 40 0c             	mov    0xc(%eax),%eax
   14743:	89 c2                	mov    %eax,%edx
   14745:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14748:	89 50 2c             	mov    %edx,0x2c(%eax)
  for (int i = 0; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   1474b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1474f:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   14753:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   14757:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   1475b:	0f 8e 73 ff ff ff    	jle    146d4 <detect_part_info+0x86>
    }
  }
}
   14761:	c9                   	leave  
   14762:	c3                   	ret    

00014763 <identify_disk>:
 * @brief 检测磁盘
 * 
 * @param disk 
 * @return int 
 */
static int identify_disk(disk_t *disk) {
   14763:	55                   	push   %ebp
   14764:	89 e5                	mov    %esp,%ebp
   14766:	81 ec 18 02 00 00    	sub    $0x218,%esp
    //将扇区数量和起始扇区即LBA lo,mid,hi 寄存器都设为0，并发送检测指令
    disk_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   1476c:	68 ec 00 00 00       	push   $0xec
   14771:	6a 00                	push   $0x0
   14773:	6a 00                	push   $0x0
   14775:	ff 75 08             	push   0x8(%ebp)
   14778:	e8 b0 fc ff ff       	call   1442d <disk_send_cmd>
   1477d:	83 c4 10             	add    $0x10,%esp

    //读取状态寄存器判断是否出错，不出错则存在磁盘
    int err = inb(DISK_STATUS(disk));
   14780:	8b 45 08             	mov    0x8(%ebp),%eax
   14783:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14787:	83 c0 07             	add    $0x7,%eax
   1478a:	0f b7 c0             	movzwl %ax,%eax
   1478d:	50                   	push   %eax
   1478e:	e8 1c fc ff ff       	call   143af <inb>
   14793:	83 c4 04             	add    $0x4,%esp
   14796:	0f b6 c0             	movzbl %al,%eax
   14799:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   1479c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   147a0:	75 1e                	jne    147c0 <identify_disk+0x5d>
        log_printf("%s doesn't exist", disk->name);
   147a2:	8b 45 08             	mov    0x8(%ebp),%eax
   147a5:	83 ec 08             	sub    $0x8,%esp
   147a8:	50                   	push   %eax
   147a9:	68 f7 95 01 00       	push   $0x195f7
   147ae:	e8 af 41 00 00       	call   18962 <log_printf>
   147b3:	83 c4 10             	add    $0x10,%esp
        return -1;
   147b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147bb:	e9 ca 00 00 00       	jmp    1488a <identify_disk+0x127>
    }

    //等待磁盘数据就绪
    err = disk_wait_data(disk);
   147c0:	83 ec 0c             	sub    $0xc,%esp
   147c3:	ff 75 08             	push   0x8(%ebp)
   147c6:	e8 34 fe ff ff       	call   145ff <disk_wait_data>
   147cb:	83 c4 10             	add    $0x10,%esp
   147ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   147d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   147d5:	79 1e                	jns    147f5 <identify_disk+0x92>
        log_printf("disk[%s]: read failed", disk->name);
   147d7:	8b 45 08             	mov    0x8(%ebp),%eax
   147da:	83 ec 08             	sub    $0x8,%esp
   147dd:	50                   	push   %eax
   147de:	68 08 96 01 00       	push   $0x19608
   147e3:	e8 7a 41 00 00       	call   18962 <log_printf>
   147e8:	83 c4 10             	add    $0x10,%esp
        return -1;
   147eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147f0:	e9 95 00 00 00       	jmp    1488a <identify_disk+0x127>
    }

    //读取就绪的一个扇区的数据, 一共256个16位数据，其中包含了该磁盘的信息
    uint16_t buf[256];
    disk_read_data(disk, buf, sizeof(buf));
   147f5:	83 ec 04             	sub    $0x4,%esp
   147f8:	68 00 02 00 00       	push   $0x200
   147fd:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14803:	50                   	push   %eax
   14804:	ff 75 08             	push   0x8(%ebp)
   14807:	e8 51 fd ff ff       	call   1455d <disk_read_data>
   1480c:	83 c4 10             	add    $0x10,%esp

    //第100 到 103个数据，一共64位，保存了该磁盘的扇区总数量
    disk->sector_count = *(uint32_t *)(buf + 100);
   1480f:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14815:	05 c8 00 00 00       	add    $0xc8,%eax
   1481a:	8b 00                	mov    (%eax),%eax
   1481c:	89 c2                	mov    %eax,%edx
   1481e:	8b 45 08             	mov    0x8(%ebp),%eax
   14821:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;
   14824:	8b 45 08             	mov    0x8(%ebp),%eax
   14827:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    //初始化磁盘分区信息
    //用partinfo将整个磁盘视为一个大分区
    partinfo_t *part_info = disk->partinfo + 0;
   1482e:	8b 45 08             	mov    0x8(%ebp),%eax
   14831:	83 c0 30             	add    $0x30,%eax
   14834:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part_info->disk = disk;
   14837:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1483a:	8b 55 08             	mov    0x8(%ebp),%edx
   1483d:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part_info->name, "%s%d", disk->name, 0);
   14840:	8b 55 08             	mov    0x8(%ebp),%edx
   14843:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14846:	6a 00                	push   $0x0
   14848:	52                   	push   %edx
   14849:	68 f2 95 01 00       	push   $0x195f2
   1484e:	50                   	push   %eax
   1484f:	e8 d6 39 00 00       	call   1822a <kernel_sprintf>
   14854:	83 c4 10             	add    $0x10,%esp
    part_info->start_sector = 0;
   14857:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1485a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part_info->total_sectors = disk->sector_count;
   14861:	8b 45 08             	mov    0x8(%ebp),%eax
   14864:	8b 50 2c             	mov    0x2c(%eax),%edx
   14867:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1486a:	89 50 2c             	mov    %edx,0x2c(%eax)
    part_info->type = FS_INVALID;
   1486d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14870:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    //读取并检测磁盘的分区表信息
    detect_part_info(disk);
   14877:	83 ec 0c             	sub    $0xc,%esp
   1487a:	ff 75 08             	push   0x8(%ebp)
   1487d:	e8 cc fd ff ff       	call   1464e <detect_part_info>
   14882:	83 c4 10             	add    $0x10,%esp

    return 0;
   14885:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1488a:	c9                   	leave  
   1488b:	c3                   	ret    

0001488c <print_disk_info>:
/**
 * @brief 打印磁盘相关信息
 * 
 * @param disk 
 */
static void print_disk_info(disk_t *disk) {
   1488c:	55                   	push   %ebp
   1488d:	89 e5                	mov    %esp,%ebp
   1488f:	53                   	push   %ebx
   14890:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s\n", disk->name);
   14893:	8b 45 08             	mov    0x8(%ebp),%eax
   14896:	83 ec 08             	sub    $0x8,%esp
   14899:	50                   	push   %eax
   1489a:	68 1e 96 01 00       	push   $0x1961e
   1489f:	e8 be 40 00 00       	call   18962 <log_printf>
   148a4:	83 c4 10             	add    $0x10,%esp
    log_printf("\tport base: %x\n", disk->port_base);
   148a7:	8b 45 08             	mov    0x8(%ebp),%eax
   148aa:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   148ae:	0f b7 c0             	movzwl %ax,%eax
   148b1:	83 ec 08             	sub    $0x8,%esp
   148b4:	50                   	push   %eax
   148b5:	68 22 96 01 00       	push   $0x19622
   148ba:	e8 a3 40 00 00       	call   18962 <log_printf>
   148bf:	83 c4 10             	add    $0x10,%esp
    log_printf("\ttotal size: %d m\n", disk->sector_count * disk->sector_size / (1024*1024));
   148c2:	8b 45 08             	mov    0x8(%ebp),%eax
   148c5:	8b 50 2c             	mov    0x2c(%eax),%edx
   148c8:	8b 45 08             	mov    0x8(%ebp),%eax
   148cb:	8b 40 28             	mov    0x28(%eax),%eax
   148ce:	0f af c2             	imul   %edx,%eax
   148d1:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   148d7:	85 c0                	test   %eax,%eax
   148d9:	0f 48 c2             	cmovs  %edx,%eax
   148dc:	c1 f8 14             	sar    $0x14,%eax
   148df:	83 ec 08             	sub    $0x8,%esp
   148e2:	50                   	push   %eax
   148e3:	68 32 96 01 00       	push   $0x19632
   148e8:	e8 75 40 00 00       	call   18962 <log_printf>
   148ed:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   148f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   148f7:	eb 4e                	jmp    14947 <print_disk_info+0xbb>
      partinfo_t *part_info = disk->partinfo + i;
   148f9:	8b 45 08             	mov    0x8(%ebp),%eax
   148fc:	8d 48 30             	lea    0x30(%eax),%ecx
   148ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14902:	89 d0                	mov    %edx,%eax
   14904:	01 c0                	add    %eax,%eax
   14906:	01 d0                	add    %edx,%eax
   14908:	c1 e0 04             	shl    $0x4,%eax
   1490b:	01 c8                	add    %ecx,%eax
   1490d:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if (part_info->type != FS_INVALID) {
   14910:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14913:	8b 40 24             	mov    0x24(%eax),%eax
   14916:	85 c0                	test   %eax,%eax
   14918:	74 29                	je     14943 <print_disk_info+0xb7>
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   1491a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1491d:	8b 58 2c             	mov    0x2c(%eax),%ebx
   14920:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14923:	8b 48 28             	mov    0x28(%eax),%ecx
            part_info->name, part_info->type, part_info->start_sector, 
   14926:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14929:	8b 50 24             	mov    0x24(%eax),%edx
   1492c:	8b 45 f0             	mov    -0x10(%ebp),%eax
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   1492f:	83 ec 0c             	sub    $0xc,%esp
   14932:	53                   	push   %ebx
   14933:	51                   	push   %ecx
   14934:	52                   	push   %edx
   14935:	50                   	push   %eax
   14936:	68 48 96 01 00       	push   $0x19648
   1493b:	e8 22 40 00 00       	call   18962 <log_printf>
   14940:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   14943:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14947:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1494b:	7e ac                	jle    148f9 <print_disk_info+0x6d>
            part_info->total_sectors);
      }
    }
}
   1494d:	90                   	nop
   1494e:	90                   	nop
   1494f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14952:	c9                   	leave  
   14953:	c3                   	ret    

00014954 <disk_init>:

/**
 * @brief 初始化系统磁盘信息
 *
 */
void disk_init(void) {
   14954:	55                   	push   %ebp
   14955:	89 e5                	mov    %esp,%ebp
   14957:	83 ec 18             	sub    $0x18,%esp
  log_printf("Check disk...\n");
   1495a:	83 ec 0c             	sub    $0xc,%esp
   1495d:	68 7b 96 01 00       	push   $0x1967b
   14962:	e8 fb 3f 00 00       	call   18962 <log_printf>
   14967:	83 c4 10             	add    $0x10,%esp

  kernel_memset(disk_table, 0, sizeof(disk_table));
   1496a:	83 ec 04             	sub    $0x4,%esp
   1496d:	68 50 02 00 00       	push   $0x250
   14972:	6a 00                	push   $0x0
   14974:	68 60 f1 04 00       	push   $0x4f160
   14979:	e8 e7 37 00 00       	call   18165 <kernel_memset>
   1497e:	83 c4 10             	add    $0x10,%esp

  //初始化磁盘锁与操作信号量
  mutex_init(&mutex);
   14981:	83 ec 0c             	sub    $0xc,%esp
   14984:	68 b0 f3 04 00       	push   $0x4f3b0
   14989:	e8 46 2b 00 00       	call   174d4 <mutex_init>
   1498e:	83 c4 10             	add    $0x10,%esp
  sem_init(&op_sem, 0);
   14991:	83 ec 08             	sub    $0x8,%esp
   14994:	6a 00                	push   $0x0
   14996:	68 c4 f3 04 00       	push   $0x4f3c4
   1499b:	e8 73 2d 00 00       	call   17713 <sem_init>
   149a0:	83 c4 10             	add    $0x10,%esp

  // 遍历并初始化化primary信道上的磁盘信息
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   149a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149aa:	e9 90 00 00 00       	jmp    14a3f <disk_init+0xeb>
    disk_t *disk = disk_table + i;
   149af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149b2:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   149b8:	05 60 f1 04 00       	add    $0x4f160,%eax
   149bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kernel_sprintf(disk->name, "sd%c", i + 'a');
   149c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149c3:	8d 50 61             	lea    0x61(%eax),%edx
   149c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149c9:	83 ec 04             	sub    $0x4,%esp
   149cc:	52                   	push   %edx
   149cd:	68 8a 96 01 00       	push   $0x1968a
   149d2:	50                   	push   %eax
   149d3:	e8 52 38 00 00       	call   1822a <kernel_sprintf>
   149d8:	83 c4 10             	add    $0x10,%esp
    disk->drive = i == 0 ? DISK_MASTER : DISK_SLAVE;
   149db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   149df:	75 07                	jne    149e8 <disk_init+0x94>
   149e1:	ba 00 00 00 00       	mov    $0x0,%edx
   149e6:	eb 05                	jmp    149ed <disk_init+0x99>
   149e8:	ba 10 00 00 00       	mov    $0x10,%edx
   149ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149f0:	89 50 20             	mov    %edx,0x20(%eax)
    disk->port_base = IOBASE_PRIMARY;
   149f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149f6:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
    disk->mutex = &mutex;
   149fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149ff:	c7 80 20 01 00 00 b0 	movl   $0x4f3b0,0x120(%eax)
   14a06:	f3 04 00 
    disk->op_sem = &op_sem;
   14a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a0c:	c7 80 24 01 00 00 c4 	movl   $0x4f3c4,0x124(%eax)
   14a13:	f3 04 00 

    int err = identify_disk(disk);
   14a16:	83 ec 0c             	sub    $0xc,%esp
   14a19:	ff 75 f0             	push   -0x10(%ebp)
   14a1c:	e8 42 fd ff ff       	call   14763 <identify_disk>
   14a21:	83 c4 10             	add    $0x10,%esp
   14a24:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err == 0) {
   14a27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14a2b:	75 0e                	jne    14a3b <disk_init+0xe7>
      print_disk_info(disk);
   14a2d:	83 ec 0c             	sub    $0xc,%esp
   14a30:	ff 75 f0             	push   -0x10(%ebp)
   14a33:	e8 54 fe ff ff       	call   1488c <print_disk_info>
   14a38:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   14a3b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a3f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a43:	0f 8e 66 ff ff ff    	jle    149af <disk_init+0x5b>
    }
  }
}
   14a49:	90                   	nop
   14a4a:	90                   	nop
   14a4b:	c9                   	leave  
   14a4c:	c3                   	ret    

00014a4d <disk_open>:
 * @brief 打开磁盘设备
 * 
 * @param dev 
 * @return int 
 */
int disk_open (device_t *dev) {
   14a4d:	55                   	push   %ebp
   14a4e:	89 e5                	mov    %esp,%ebp
   14a50:	83 ec 18             	sub    $0x18,%esp
  //对磁盘的编号为 a , b
  //对扇区的编号为0, 1, 2, 3, 4, 0分区包含整个磁盘
  //设备索引编号0xa0表示 a磁盘上的0分区

  //获取磁盘在系统磁盘表中的索引
  int disk_index = (dev->dev_index >> 4) - 0xa;   
   14a53:	8b 45 08             	mov    0x8(%ebp),%eax
   14a56:	8b 40 08             	mov    0x8(%eax),%eax
   14a59:	c1 f8 04             	sar    $0x4,%eax
   14a5c:	83 e8 0a             	sub    $0xa,%eax
   14a5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //获取分区的索引
  int part_index = dev->dev_index & 0xf;
   14a62:	8b 45 08             	mov    0x8(%ebp),%eax
   14a65:	8b 40 08             	mov    0x8(%eax),%eax
   14a68:	83 e0 0f             	and    $0xf,%eax
   14a6b:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (disk_index >= DISK_CNT || part_index >= DISK_PRIMARY_PART_CNT) {
   14a6e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a72:	7f 06                	jg     14a7a <disk_open+0x2d>
   14a74:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14a78:	7e 21                	jle    14a9b <disk_open+0x4e>
      log_printf("device index error: %d\n", dev->dev_index);
   14a7a:	8b 45 08             	mov    0x8(%ebp),%eax
   14a7d:	8b 40 08             	mov    0x8(%eax),%eax
   14a80:	83 ec 08             	sub    $0x8,%esp
   14a83:	50                   	push   %eax
   14a84:	68 8f 96 01 00       	push   $0x1968f
   14a89:	e8 d4 3e 00 00       	call   18962 <log_printf>
   14a8e:	83 c4 10             	add    $0x10,%esp
      return -1;
   14a91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a96:	e9 9e 00 00 00       	jmp    14b39 <disk_open+0xec>
  }

  //获取磁盘对象
  disk_t *disk = disk_table + disk_index;
   14a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a9e:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14aa4:	05 60 f1 04 00       	add    $0x4f160,%eax
   14aa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk->sector_count == 0) {
   14aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aaf:	8b 40 2c             	mov    0x2c(%eax),%eax
   14ab2:	85 c0                	test   %eax,%eax
   14ab4:	75 1e                	jne    14ad4 <disk_open+0x87>
    log_printf("disk not exist, device: sd%d", dev->dev_index);
   14ab6:	8b 45 08             	mov    0x8(%ebp),%eax
   14ab9:	8b 40 08             	mov    0x8(%eax),%eax
   14abc:	83 ec 08             	sub    $0x8,%esp
   14abf:	50                   	push   %eax
   14ac0:	68 a7 96 01 00       	push   $0x196a7
   14ac5:	e8 98 3e 00 00       	call   18962 <log_printf>
   14aca:	83 c4 10             	add    $0x10,%esp
    return -1;
   14acd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ad2:	eb 65                	jmp    14b39 <disk_open+0xec>
  }

  //获取分区对象
  partinfo_t *part_info = disk->partinfo + part_index;
   14ad4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ad7:	8d 48 30             	lea    0x30(%eax),%ecx
   14ada:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14add:	89 d0                	mov    %edx,%eax
   14adf:	01 c0                	add    %eax,%eax
   14ae1:	01 d0                	add    %edx,%eax
   14ae3:	c1 e0 04             	shl    $0x4,%eax
   14ae6:	01 c8                	add    %ecx,%eax
   14ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (part_info->total_sectors == 0) {
   14aeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14aee:	8b 40 2c             	mov    0x2c(%eax),%eax
   14af1:	85 c0                	test   %eax,%eax
   14af3:	75 17                	jne    14b0c <disk_open+0xbf>
    log_printf("part not exist\n");
   14af5:	83 ec 0c             	sub    $0xc,%esp
   14af8:	68 c4 96 01 00       	push   $0x196c4
   14afd:	e8 60 3e 00 00       	call   18962 <log_printf>
   14b02:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b0a:	eb 2d                	jmp    14b39 <disk_open+0xec>
  }

  //记录分区信息
  dev->data = (void *)part_info;
   14b0c:	8b 45 08             	mov    0x8(%ebp),%eax
   14b0f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14b12:	89 50 0c             	mov    %edx,0xc(%eax)

  //注册中断处理程序,并开启中断
  idt_install(IRQ14_HARDDISK_PRIMARY, (idt_handler_t)exception_handler_primary_disk);
   14b15:	83 ec 08             	sub    $0x8,%esp
   14b18:	68 b5 02 01 00       	push   $0x102b5
   14b1d:	6a 2e                	push   $0x2e
   14b1f:	e8 6a e4 ff ff       	call   12f8e <idt_install>
   14b24:	83 c4 10             	add    $0x10,%esp
  idt_enable(IRQ14_HARDDISK_PRIMARY);
   14b27:	83 ec 0c             	sub    $0xc,%esp
   14b2a:	6a 2e                	push   $0x2e
   14b2c:	e8 e8 e6 ff ff       	call   13219 <idt_enable>
   14b31:	83 c4 10             	add    $0x10,%esp

  return 0;
   14b34:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b39:	c9                   	leave  
   14b3a:	c3                   	ret    

00014b3b <disk_read>:
 * @param addr 读取的起始扇区相对于dev指定分区的偏移量
 * @param buf 读取缓冲区
 * @param size 读取扇区数
 * @return * int 
 */
int disk_read(device_t *dev, int addr, char *buf, int size) {
   14b3b:	55                   	push   %ebp
   14b3c:	89 e5                	mov    %esp,%ebp
   14b3e:	83 ec 18             	sub    $0x18,%esp

  //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14b41:	8b 45 08             	mov    0x8(%ebp),%eax
   14b44:	8b 40 0c             	mov    0xc(%eax),%eax
   14b47:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14b4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14b4e:	75 21                	jne    14b71 <disk_read+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14b50:	8b 45 08             	mov    0x8(%ebp),%eax
   14b53:	8b 40 08             	mov    0x8(%eax),%eax
   14b56:	83 ec 08             	sub    $0x8,%esp
   14b59:	50                   	push   %eax
   14b5a:	68 d4 96 01 00       	push   $0x196d4
   14b5f:	e8 fe 3d 00 00       	call   18962 <log_printf>
   14b64:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b6c:	e9 0c 01 00 00       	jmp    14c7d <disk_read+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14b71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b74:	8b 40 20             	mov    0x20(%eax),%eax
   14b77:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14b7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14b7e:	75 21                	jne    14ba1 <disk_read+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14b80:	8b 45 08             	mov    0x8(%ebp),%eax
   14b83:	8b 40 08             	mov    0x8(%eax),%eax
   14b86:	83 ec 08             	sub    $0x8,%esp
   14b89:	50                   	push   %eax
   14b8a:	68 f5 96 01 00       	push   $0x196f5
   14b8f:	e8 ce 3d 00 00       	call   18962 <log_printf>
   14b94:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b97:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b9c:	e9 dc 00 00 00       	jmp    14c7d <disk_read+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14ba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ba4:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14baa:	83 ec 0c             	sub    $0xc,%esp
   14bad:	50                   	push   %eax
   14bae:	e8 6e 29 00 00       	call   17521 <mutex_lock>
   14bb3:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14bb6:	e8 f6 cd ff ff       	call   119b1 <task_current>
   14bbb:	85 c0                	test   %eax,%eax
   14bbd:	74 07                	je     14bc6 <disk_read+0x8b>
    task_on_op = 1; //将标志位置1，表示内核在执行磁盘操作
   14bbf:	c6 05 d4 f3 04 00 01 	movb   $0x1,0x4f3d4
  }

  //发送读取指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_READ);
   14bc6:	8b 45 14             	mov    0x14(%ebp),%eax
   14bc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14bcc:	8b 4a 28             	mov    0x28(%edx),%ecx
   14bcf:	8b 55 0c             	mov    0xc(%ebp),%edx
   14bd2:	01 ca                	add    %ecx,%edx
   14bd4:	6a 24                	push   $0x24
   14bd6:	50                   	push   %eax
   14bd7:	52                   	push   %edx
   14bd8:	ff 75 ec             	push   -0x14(%ebp)
   14bdb:	e8 4d f8 ff ff       	call   1442d <disk_send_cmd>
   14be0:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14be3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14bea:	eb 71                	jmp    14c5d <disk_read+0x122>
    //等待磁盘的中断，代表准备就绪
    sem_wait(disk->op_sem);
   14bec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bef:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14bf5:	83 ec 0c             	sub    $0xc,%esp
   14bf8:	50                   	push   %eax
   14bf9:	e8 57 2b 00 00       	call   17755 <sem_wait>
   14bfe:	83 c4 10             	add    $0x10,%esp

    //因为信号量已经让进程等待了，所以此处只是检测是否发生错误
    int err = disk_wait_data(disk);
   14c01:	83 ec 0c             	sub    $0xc,%esp
   14c04:	ff 75 ec             	push   -0x14(%ebp)
   14c07:	e8 f3 f9 ff ff       	call   145ff <disk_wait_data>
   14c0c:	83 c4 10             	add    $0x10,%esp
   14c0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14c12:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14c16:	79 20                	jns    14c38 <disk_read+0xfd>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14c1b:	ff 75 14             	push   0x14(%ebp)
   14c1e:	ff 75 0c             	push   0xc(%ebp)
   14c21:	50                   	push   %eax
   14c22:	68 0c 97 01 00       	push   $0x1970c
   14c27:	e8 36 3d 00 00       	call   18962 <log_printf>
   14c2c:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14c2f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14c36:	eb 2d                	jmp    14c65 <disk_read+0x12a>
    }

    //磁盘每次读取都是按一个扇区的大小进行读取
    disk_read_data(disk, buf, disk->sector_size);
   14c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c3b:	8b 40 28             	mov    0x28(%eax),%eax
   14c3e:	83 ec 04             	sub    $0x4,%esp
   14c41:	50                   	push   %eax
   14c42:	ff 75 10             	push   0x10(%ebp)
   14c45:	ff 75 ec             	push   -0x14(%ebp)
   14c48:	e8 10 f9 ff ff       	call   1455d <disk_read_data>
   14c4d:	83 c4 10             	add    $0x10,%esp
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14c50:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14c54:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c57:	8b 40 28             	mov    0x28(%eax),%eax
   14c5a:	01 45 10             	add    %eax,0x10(%ebp)
   14c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c60:	3b 45 14             	cmp    0x14(%ebp),%eax
   14c63:	7c 87                	jl     14bec <disk_read+0xb1>
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14c65:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c68:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14c6e:	83 ec 0c             	sub    $0xc,%esp
   14c71:	50                   	push   %eax
   14c72:	e8 50 29 00 00       	call   175c7 <mutex_unlock>
   14c77:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14c7d:	c9                   	leave  
   14c7e:	c3                   	ret    

00014c7f <disk_write>:
 * @param addr 
 * @param buf 
 * @param size 
 * @return int 
 */
int disk_write(device_t *dev, int addr, char *buf, int size) {
   14c7f:	55                   	push   %ebp
   14c80:	89 e5                	mov    %esp,%ebp
   14c82:	83 ec 18             	sub    $0x18,%esp

   //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14c85:	8b 45 08             	mov    0x8(%ebp),%eax
   14c88:	8b 40 0c             	mov    0xc(%eax),%eax
   14c8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14c8e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14c92:	75 21                	jne    14cb5 <disk_write+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14c94:	8b 45 08             	mov    0x8(%ebp),%eax
   14c97:	8b 40 08             	mov    0x8(%eax),%eax
   14c9a:	83 ec 08             	sub    $0x8,%esp
   14c9d:	50                   	push   %eax
   14c9e:	68 d4 96 01 00       	push   $0x196d4
   14ca3:	e8 ba 3c 00 00       	call   18962 <log_printf>
   14ca8:	83 c4 10             	add    $0x10,%esp
    return -1;
   14cab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14cb0:	e9 0c 01 00 00       	jmp    14dc1 <disk_write+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14cb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cb8:	8b 40 20             	mov    0x20(%eax),%eax
   14cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14cbe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14cc2:	75 21                	jne    14ce5 <disk_write+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   14cc7:	8b 40 08             	mov    0x8(%eax),%eax
   14cca:	83 ec 08             	sub    $0x8,%esp
   14ccd:	50                   	push   %eax
   14cce:	68 f5 96 01 00       	push   $0x196f5
   14cd3:	e8 8a 3c 00 00       	call   18962 <log_printf>
   14cd8:	83 c4 10             	add    $0x10,%esp
    return -1;
   14cdb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ce0:	e9 dc 00 00 00       	jmp    14dc1 <disk_write+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14ce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ce8:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14cee:	83 ec 0c             	sub    $0xc,%esp
   14cf1:	50                   	push   %eax
   14cf2:	e8 2a 28 00 00       	call   17521 <mutex_lock>
   14cf7:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14cfa:	e8 b2 cc ff ff       	call   119b1 <task_current>
   14cff:	85 c0                	test   %eax,%eax
   14d01:	74 07                	je     14d0a <disk_write+0x8b>
    task_on_op = 1; //将标志位置1，表示用户进程在执行磁盘操作
   14d03:	c6 05 d4 f3 04 00 01 	movb   $0x1,0x4f3d4
  }

  //发送读取指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_WRITE);
   14d0a:	8b 45 14             	mov    0x14(%ebp),%eax
   14d0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14d10:	8b 4a 28             	mov    0x28(%edx),%ecx
   14d13:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d16:	01 ca                	add    %ecx,%edx
   14d18:	6a 34                	push   $0x34
   14d1a:	50                   	push   %eax
   14d1b:	52                   	push   %edx
   14d1c:	ff 75 ec             	push   -0x14(%ebp)
   14d1f:	e8 09 f7 ff ff       	call   1442d <disk_send_cmd>
   14d24:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14d27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14d2e:	eb 71                	jmp    14da1 <disk_write+0x122>
    //磁盘每次写入都是按一个扇区的大小进行写入
    disk_write_data(disk, buf, disk->sector_size);
   14d30:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d33:	8b 40 28             	mov    0x28(%eax),%eax
   14d36:	83 ec 04             	sub    $0x4,%esp
   14d39:	50                   	push   %eax
   14d3a:	ff 75 10             	push   0x10(%ebp)
   14d3d:	ff 75 ec             	push   -0x14(%ebp)
   14d40:	e8 69 f8 ff ff       	call   145ae <disk_write_data>
   14d45:	83 c4 10             	add    $0x10,%esp
    //等待磁盘的中断，代表写入完成
    sem_wait(disk->op_sem);
   14d48:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d4b:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14d51:	83 ec 0c             	sub    $0xc,%esp
   14d54:	50                   	push   %eax
   14d55:	e8 fb 29 00 00       	call   17755 <sem_wait>
   14d5a:	83 c4 10             	add    $0x10,%esp
    

    //检测是否发生错误
    int err = disk_wait_data(disk);
   14d5d:	83 ec 0c             	sub    $0xc,%esp
   14d60:	ff 75 ec             	push   -0x14(%ebp)
   14d63:	e8 97 f8 ff ff       	call   145ff <disk_wait_data>
   14d68:	83 c4 10             	add    $0x10,%esp
   14d6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14d6e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14d72:	79 20                	jns    14d94 <disk_write+0x115>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14d74:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14d77:	ff 75 14             	push   0x14(%ebp)
   14d7a:	ff 75 0c             	push   0xc(%ebp)
   14d7d:	50                   	push   %eax
   14d7e:	68 0c 97 01 00       	push   $0x1970c
   14d83:	e8 da 3b 00 00       	call   18962 <log_printf>
   14d88:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14d8b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14d92:	eb 15                	jmp    14da9 <disk_write+0x12a>
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14d94:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14d98:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d9b:	8b 40 28             	mov    0x28(%eax),%eax
   14d9e:	01 45 10             	add    %eax,0x10(%ebp)
   14da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14da4:	3b 45 14             	cmp    0x14(%ebp),%eax
   14da7:	7c 87                	jl     14d30 <disk_write+0xb1>
    } 
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14dac:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14db2:	83 ec 0c             	sub    $0xc,%esp
   14db5:	50                   	push   %eax
   14db6:	e8 0c 28 00 00       	call   175c7 <mutex_unlock>
   14dbb:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14dc1:	c9                   	leave  
   14dc2:	c3                   	ret    

00014dc3 <disk_control>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int disk_control(device_t *dev, int cmd, int arg0, int arg1) {
   14dc3:	55                   	push   %ebp
   14dc4:	89 e5                	mov    %esp,%ebp

  return -1;
   14dc6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14dcb:	5d                   	pop    %ebp
   14dcc:	c3                   	ret    

00014dcd <do_handler_primary_disk>:
 * @brief 磁盘的中断处理函数
 *        磁盘执行完读操作或写操作后会触发中断
 * 
 * @param frame 
 */
void do_handler_primary_disk(exception_frame_t *frame) {
   14dcd:	55                   	push   %ebp
   14dce:	89 e5                	mov    %esp,%ebp
   14dd0:	83 ec 08             	sub    $0x8,%esp
  //中断抢占成功，发送eoi信号，清除中断请求
  pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14dd3:	83 ec 0c             	sub    $0xc,%esp
   14dd6:	6a 2e                	push   $0x2e
   14dd8:	e8 7e e5 ff ff       	call   1335b <pic_send_eoi>
   14ddd:	83 c4 10             	add    $0x10,%esp

  //当用户程序触发磁盘中断时，唤醒等待进程
  if (task_on_op) {
   14de0:	0f b6 05 d4 f3 04 00 	movzbl 0x4f3d4,%eax
   14de7:	84 c0                	test   %al,%al
   14de9:	74 10                	je     14dfb <do_handler_primary_disk+0x2e>
    //磁盘数据准备就绪或磁盘写入完成，唤醒等待进程
    sem_notify(&op_sem);
   14deb:	83 ec 0c             	sub    $0xc,%esp
   14dee:	68 c4 f3 04 00       	push   $0x4f3c4
   14df3:	e8 dd 29 00 00       	call   177d5 <sem_notify>
   14df8:	83 c4 10             	add    $0x10,%esp
  }
}
   14dfb:	90                   	nop
   14dfc:	c9                   	leave  
   14dfd:	c3                   	ret    

00014dfe <disk_close>:
/**
 * @brief 关闭磁盘
 * 
 * @param dev 
 */
void disk_close(device_t *dev) {
   14dfe:	55                   	push   %ebp
   14dff:	89 e5                	mov    %esp,%ebp

}
   14e01:	90                   	nop
   14e02:	5d                   	pop    %ebp
   14e03:	c3                   	ret    

00014e04 <inb>:
static inline uint8_t inb(uint16_t port) {
   14e04:	55                   	push   %ebp
   14e05:	89 e5                	mov    %esp,%ebp
   14e07:	83 ec 14             	sub    $0x14,%esp
   14e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   14e0d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14e11:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14e15:	89 c2                	mov    %eax,%edx
   14e17:	ec                   	in     (%dx),%al
   14e18:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14e1b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14e1f:	c9                   	leave  
   14e20:	c3                   	ret    

00014e21 <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   14e21:	55                   	push   %ebp
   14e22:	89 e5                	mov    %esp,%ebp
   14e24:	83 ec 04             	sub    $0x4,%esp
   14e27:	8b 45 08             	mov    0x8(%ebp),%eax
   14e2a:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14e2d:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14e31:	f7 d0                	not    %eax
   14e33:	c0 e8 07             	shr    $0x7,%al
   14e36:	0f b6 c0             	movzbl %al,%eax
}
   14e39:	c9                   	leave  
   14e3a:	c3                   	ret    

00014e3b <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   14e3b:	55                   	push   %ebp
   14e3c:	89 e5                	mov    %esp,%ebp
   14e3e:	83 ec 04             	sub    $0x4,%esp
   14e41:	8b 45 08             	mov    0x8(%ebp),%eax
   14e44:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   14e47:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14e4b:	83 e0 7f             	and    $0x7f,%eax
}
   14e4e:	c9                   	leave  
   14e4f:	c3                   	ret    

00014e50 <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   14e50:	55                   	push   %ebp
   14e51:	89 e5                	mov    %esp,%ebp
   14e53:	83 ec 28             	sub    $0x28,%esp
   14e56:	8b 45 08             	mov    0x8(%ebp),%eax
   14e59:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14e5c:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14e60:	83 e8 3b             	sub    $0x3b,%eax
   14e63:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14e66:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14e6d:	83 e0 20             	and    $0x20,%eax
   14e70:	84 c0                	test   %al,%al
   14e72:	75 0e                	jne    14e82 <do_fx_key+0x32>
   14e74:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14e7b:	83 e0 40             	and    $0x40,%eax
   14e7e:	84 c0                	test   %al,%al
   14e80:	74 0e                	je     14e90 <do_fx_key+0x40>
        tty_select(index);
   14e82:	83 ec 0c             	sub    $0xc,%esp
   14e85:	ff 75 f4             	push   -0xc(%ebp)
   14e88:	e8 d5 09 00 00       	call   15862 <tty_select>
   14e8d:	83 c4 10             	add    $0x10,%esp
    }
}
   14e90:	90                   	nop
   14e91:	c9                   	leave  
   14e92:	c3                   	ret    

00014e93 <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   14e93:	55                   	push   %ebp
   14e94:	89 e5                	mov    %esp,%ebp
   14e96:	83 ec 28             	sub    $0x28,%esp
   14e99:	8b 45 08             	mov    0x8(%ebp),%eax
   14e9c:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   14e9f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14ea3:	50                   	push   %eax
   14ea4:	e8 92 ff ff ff       	call   14e3b <get_key>
   14ea9:	83 c4 04             	add    $0x4,%esp
   14eac:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   14eaf:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14eb3:	50                   	push   %eax
   14eb4:	e8 68 ff ff ff       	call   14e21 <is_make_code>
   14eb9:	83 c4 04             	add    $0x4,%esp
   14ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   14ebf:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ec3:	83 e8 1d             	sub    $0x1d,%eax
   14ec6:	83 f8 3b             	cmp    $0x3b,%eax
   14ec9:	0f 87 06 01 00 00    	ja     14fd5 <do_normal_key+0x142>
   14ecf:	8b 04 85 40 99 01 00 	mov    0x19940(,%eax,4),%eax
   14ed6:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   14ed8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14edc:	0f 95 c0             	setne  %al
   14edf:	c1 e0 07             	shl    $0x7,%eax
   14ee2:	c0 f8 07             	sar    $0x7,%al
   14ee5:	83 e0 01             	and    $0x1,%eax
   14ee8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14eef:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14ef6:	83 e0 fb             	and    $0xfffffffb,%eax
   14ef9:	09 d0                	or     %edx,%eax
   14efb:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;
   14f00:	e9 6b 01 00 00       	jmp    15070 <do_normal_key+0x1dd>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14f05:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f09:	0f 95 c0             	setne  %al
   14f0c:	c1 e0 07             	shl    $0x7,%eax
   14f0f:	c0 f8 07             	sar    $0x7,%al
   14f12:	83 e0 01             	and    $0x1,%eax
   14f15:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14f18:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f1f:	83 e0 fd             	and    $0xfffffffd,%eax
   14f22:	09 d0                	or     %edx,%eax
   14f24:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;  
   14f29:	e9 42 01 00 00       	jmp    15070 <do_normal_key+0x1dd>
        case KEY_CAPS:
            if (is_make) {
   14f2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f32:	0f 84 34 01 00 00    	je     1506c <do_normal_key+0x1d9>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   14f38:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f3f:	c1 e0 07             	shl    $0x7,%eax
   14f42:	c0 f8 07             	sar    $0x7,%al
   14f45:	f7 d0                	not    %eax
   14f47:	c1 e0 07             	shl    $0x7,%eax
   14f4a:	c0 f8 07             	sar    $0x7,%al
   14f4d:	83 e0 01             	and    $0x1,%eax
   14f50:	89 c2                	mov    %eax,%edx
   14f52:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f59:	83 e0 fe             	and    $0xfffffffe,%eax
   14f5c:	09 d0                	or     %edx,%eax
   14f5e:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            }
            break;
   14f63:	e9 04 01 00 00       	jmp    1506c <do_normal_key+0x1d9>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   14f68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f6c:	0f 95 c0             	setne  %al
   14f6f:	c1 e0 07             	shl    $0x7,%eax
   14f72:	c0 f8 07             	sar    $0x7,%al
   14f75:	83 e0 01             	and    $0x1,%eax
   14f78:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14f7f:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f86:	83 e0 f7             	and    $0xfffffff7,%eax
   14f89:	09 d0                	or     %edx,%eax
   14f8b:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;
   14f90:	e9 db 00 00 00       	jmp    15070 <do_normal_key+0x1dd>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   14f95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f99:	0f 95 c0             	setne  %al
   14f9c:	c1 e0 07             	shl    $0x7,%eax
   14f9f:	c0 f8 07             	sar    $0x7,%al
   14fa2:	83 e0 01             	and    $0x1,%eax
   14fa5:	c1 e0 05             	shl    $0x5,%eax
   14fa8:	89 c2                	mov    %eax,%edx
   14faa:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14fb1:	83 e0 df             	and    $0xffffffdf,%eax
   14fb4:	09 d0                	or     %edx,%eax
   14fb6:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;
   14fbb:	e9 b0 00 00 00       	jmp    15070 <do_normal_key+0x1dd>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   14fc0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14fc4:	83 ec 0c             	sub    $0xc,%esp
   14fc7:	50                   	push   %eax
   14fc8:	e8 83 fe ff ff       	call   14e50 <do_fx_key>
   14fcd:	83 c4 10             	add    $0x10,%esp
            break;
   14fd0:	e9 9b 00 00 00       	jmp    15070 <do_normal_key+0x1dd>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   14fd5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14fd9:	0f 84 90 00 00 00    	je     1506f <do_normal_key+0x1dc>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14fdf:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14fe6:	83 e0 04             	and    $0x4,%eax
   14fe9:	84 c0                	test   %al,%al
   14feb:	75 0e                	jne    14ffb <do_normal_key+0x168>
   14fed:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14ff4:	83 e0 02             	and    $0x2,%eax
   14ff7:	84 c0                	test   %al,%al
   14ff9:	74 11                	je     1500c <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   14ffb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14fff:	0f b6 84 00 41 97 01 	movzbl 0x19741(%eax,%eax,1),%eax
   15006:	00 
   15007:	88 45 f7             	mov    %al,-0x9(%ebp)
   1500a:	eb 0f                	jmp    1501b <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   1500c:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   15010:	0f b6 84 00 40 97 01 	movzbl 0x19740(%eax,%eax,1),%eax
   15017:	00 
   15018:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   1501b:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   15022:	83 e0 01             	and    $0x1,%eax
   15025:	84 c0                	test   %al,%al
   15027:	74 2e                	je     15057 <do_normal_key+0x1c4>
                        if ((key >= 'A' && key <= 'Z')) {
   15029:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   1502d:	7e 12                	jle    15041 <do_normal_key+0x1ae>
   1502f:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   15033:	7f 0c                	jg     15041 <do_normal_key+0x1ae>
                            key = key - 'A' + 'a';
   15035:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   15039:	83 c0 20             	add    $0x20,%eax
   1503c:	88 45 f7             	mov    %al,-0x9(%ebp)
   1503f:	eb 16                	jmp    15057 <do_normal_key+0x1c4>
                        } else if (key >= 'a' && key <= 'z') {
   15041:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   15045:	7e 10                	jle    15057 <do_normal_key+0x1c4>
   15047:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   1504b:	7f 0a                	jg     15057 <do_normal_key+0x1c4>
                            key = key -'a' + 'A';
   1504d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   15051:	83 e8 20             	sub    $0x20,%eax
   15054:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                // log_printf("key: %c\n", key);
                // log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
                //将读取的键值放入tty设备的输入缓冲区
                tty_in(key);
   15057:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1505b:	83 ec 0c             	sub    $0xc,%esp
   1505e:	50                   	push   %eax
   1505f:	e8 98 07 00 00       	call   157fc <tty_in>
   15064:	83 c4 10             	add    $0x10,%esp
            }
            break;
   15067:	eb 06                	jmp    1506f <do_normal_key+0x1dc>
            break;
   15069:	90                   	nop
   1506a:	eb 04                	jmp    15070 <do_normal_key+0x1dd>
            break;
   1506c:	90                   	nop
   1506d:	eb 01                	jmp    15070 <do_normal_key+0x1dd>
            break;
   1506f:	90                   	nop
    }
}
   15070:	90                   	nop
   15071:	c9                   	leave  
   15072:	c3                   	ret    

00015073 <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   15073:	55                   	push   %ebp
   15074:	89 e5                	mov    %esp,%ebp
   15076:	83 ec 14             	sub    $0x14,%esp
   15079:	8b 45 08             	mov    0x8(%ebp),%eax
   1507c:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   1507f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   15083:	50                   	push   %eax
   15084:	e8 b2 fd ff ff       	call   14e3b <get_key>
   15089:	83 c4 04             	add    $0x4,%esp
   1508c:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   1508f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   15093:	50                   	push   %eax
   15094:	e8 88 fd ff ff       	call   14e21 <is_make_code>
   15099:	83 c4 04             	add    $0x4,%esp
   1509c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   1509f:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   150a3:	83 f8 1d             	cmp    $0x1d,%eax
   150a6:	74 07                	je     150af <do_e0_key+0x3c>
   150a8:	83 f8 38             	cmp    $0x38,%eax
   150ab:	74 2a                	je     150d7 <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   150ad:	eb 4f                	jmp    150fe <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   150af:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   150b3:	0f 95 c0             	setne  %al
   150b6:	c1 e0 07             	shl    $0x7,%eax
   150b9:	c0 f8 07             	sar    $0x7,%al
   150bc:	83 e0 01             	and    $0x1,%eax
   150bf:	c1 e0 06             	shl    $0x6,%eax
   150c2:	89 c2                	mov    %eax,%edx
   150c4:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   150cb:	83 e0 bf             	and    $0xffffffbf,%eax
   150ce:	09 d0                	or     %edx,%eax
   150d0:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
        break;
   150d5:	eb 27                	jmp    150fe <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   150d7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   150db:	0f 95 c0             	setne  %al
   150de:	c1 e0 07             	shl    $0x7,%eax
   150e1:	c0 f8 07             	sar    $0x7,%al
   150e4:	83 e0 01             	and    $0x1,%eax
   150e7:	c1 e0 04             	shl    $0x4,%eax
   150ea:	89 c2                	mov    %eax,%edx
   150ec:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   150f3:	83 e0 ef             	and    $0xffffffef,%eax
   150f6:	09 d0                	or     %edx,%eax
   150f8:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
        break;
   150fd:	90                   	nop
    }
}
   150fe:	90                   	nop
   150ff:	c9                   	leave  
   15100:	c3                   	ret    

00015101 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   15101:	55                   	push   %ebp
   15102:	89 e5                	mov    %esp,%ebp
   15104:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   15107:	0f b6 05 dc f3 04 00 	movzbl 0x4f3dc,%eax
   1510e:	84 c0                	test   %al,%al
   15110:	75 3a                	jne    1514c <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   15112:	83 ec 08             	sub    $0x8,%esp
   15115:	68 98 02 01 00       	push   $0x10298
   1511a:	6a 21                	push   $0x21
   1511c:	e8 6d de ff ff       	call   12f8e <idt_install>
   15121:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   15124:	83 ec 0c             	sub    $0xc,%esp
   15127:	6a 21                	push   $0x21
   15129:	e8 eb e0 ff ff       	call   13219 <idt_enable>
   1512e:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   15131:	83 ec 04             	sub    $0x4,%esp
   15134:	6a 04                	push   $0x4
   15136:	6a 00                	push   $0x0
   15138:	68 d8 f3 04 00       	push   $0x4f3d8
   1513d:	e8 23 30 00 00       	call   18165 <kernel_memset>
   15142:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   15145:	c6 05 dc f3 04 00 01 	movb   $0x1,0x4f3dc
    }
}
   1514c:	90                   	nop
   1514d:	c9                   	leave  
   1514e:	c3                   	ret    

0001514f <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   1514f:	55                   	push   %ebp
   15150:	89 e5                	mov    %esp,%ebp
   15152:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   15155:	6a 64                	push   $0x64
   15157:	e8 a8 fc ff ff       	call   14e04 <inb>
   1515c:	83 c4 04             	add    $0x4,%esp
   1515f:	0f b6 c0             	movzbl %al,%eax
   15162:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   15165:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15168:	83 e0 01             	and    $0x1,%eax
   1516b:	85 c0                	test   %eax,%eax
   1516d:	75 12                	jne    15181 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   1516f:	83 ec 0c             	sub    $0xc,%esp
   15172:	6a 21                	push   $0x21
   15174:	e8 e2 e1 ff ff       	call   1335b <pic_send_eoi>
   15179:	83 c4 10             	add    $0x10,%esp
        return;
   1517c:	e9 96 00 00 00       	jmp    15217 <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   15181:	83 ec 0c             	sub    $0xc,%esp
   15184:	6a 60                	push   $0x60
   15186:	e8 79 fc ff ff       	call   14e04 <inb>
   1518b:	83 c4 10             	add    $0x10,%esp
   1518e:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   15191:	83 ec 0c             	sub    $0xc,%esp
   15194:	6a 21                	push   $0x21
   15196:	e8 c0 e1 ff ff       	call   1335b <pic_send_eoi>
   1519b:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   1519e:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   151a2:	75 0c                	jne    151b0 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   151a4:	c7 05 e0 f3 04 00 01 	movl   $0x1,0x4f3e0
   151ab:	00 00 00 
   151ae:	eb 67                	jmp    15217 <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   151b0:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   151b4:	75 0c                	jne    151c2 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   151b6:	c7 05 e0 f3 04 00 02 	movl   $0x2,0x4f3e0
   151bd:	00 00 00 
   151c0:	eb 55                	jmp    15217 <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   151c2:	a1 e0 f3 04 00       	mov    0x4f3e0,%eax
   151c7:	83 f8 02             	cmp    $0x2,%eax
   151ca:	74 3e                	je     1520a <do_handler_kbd+0xbb>
   151cc:	83 f8 02             	cmp    $0x2,%eax
   151cf:	77 45                	ja     15216 <do_handler_kbd+0xc7>
   151d1:	85 c0                	test   %eax,%eax
   151d3:	74 07                	je     151dc <do_handler_kbd+0x8d>
   151d5:	83 f8 01             	cmp    $0x1,%eax
   151d8:	74 14                	je     151ee <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   151da:	eb 3a                	jmp    15216 <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   151dc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   151e0:	83 ec 0c             	sub    $0xc,%esp
   151e3:	50                   	push   %eax
   151e4:	e8 aa fc ff ff       	call   14e93 <do_normal_key>
   151e9:	83 c4 10             	add    $0x10,%esp
                break;
   151ec:	eb 29                	jmp    15217 <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   151ee:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   151f2:	83 ec 0c             	sub    $0xc,%esp
   151f5:	50                   	push   %eax
   151f6:	e8 78 fe ff ff       	call   15073 <do_e0_key>
   151fb:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   151fe:	c7 05 e0 f3 04 00 00 	movl   $0x0,0x4f3e0
   15205:	00 00 00 
                break;
   15208:	eb 0d                	jmp    15217 <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   1520a:	c7 05 e0 f3 04 00 00 	movl   $0x0,0x4f3e0
   15211:	00 00 00 
                break;
   15214:	eb 01                	jmp    15217 <do_handler_kbd+0xc8>
                break;
   15216:	90                   	nop
        }
    }

   15217:	c9                   	leave  
   15218:	c3                   	ret    

00015219 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   15219:	55                   	push   %ebp
   1521a:	89 e5                	mov    %esp,%ebp
   1521c:	83 ec 08             	sub    $0x8,%esp
   1521f:	8b 45 08             	mov    0x8(%ebp),%eax
   15222:	8b 55 0c             	mov    0xc(%ebp),%edx
   15225:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   15229:	89 d0                	mov    %edx,%eax
   1522b:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1522e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   15232:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   15236:	ee                   	out    %al,(%dx)
}
   15237:	90                   	nop
   15238:	c9                   	leave  
   15239:	c3                   	ret    

0001523a <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1523a:	55                   	push   %ebp
   1523b:	89 e5                	mov    %esp,%ebp
   1523d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   15240:	a1 e4 f3 04 00       	mov    0x4f3e4,%eax
   15245:	83 c0 01             	add    $0x1,%eax
   15248:	a3 e4 f3 04 00       	mov    %eax,0x4f3e4

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   1524d:	83 ec 0c             	sub    $0xc,%esp
   15250:	6a 20                	push   $0x20
   15252:	e8 04 e1 ff ff       	call   1335b <pic_send_eoi>
   15257:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1525a:	e8 c4 c7 ff ff       	call   11a23 <task_slice_end>
}
   1525f:	90                   	nop
   15260:	c9                   	leave  
   15261:	c3                   	ret    

00015262 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   15262:	55                   	push   %ebp
   15263:	89 e5                	mov    %esp,%ebp
   15265:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   15268:	6a 36                	push   $0x36
   1526a:	6a 43                	push   $0x43
   1526c:	e8 a8 ff ff ff       	call   15219 <outb>
   15271:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   15274:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1527a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1527e:	0f b6 c0             	movzbl %al,%eax
   15281:	50                   	push   %eax
   15282:	6a 40                	push   $0x40
   15284:	e8 90 ff ff ff       	call   15219 <outb>
   15289:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1528c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15290:	66 c1 e8 08          	shr    $0x8,%ax
   15294:	0f b6 c0             	movzbl %al,%eax
   15297:	50                   	push   %eax
   15298:	6a 40                	push   $0x40
   1529a:	e8 7a ff ff ff       	call   15219 <outb>
   1529f:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   152a2:	83 ec 08             	sub    $0x8,%esp
   152a5:	68 7b 02 01 00       	push   $0x1027b
   152aa:	6a 20                	push   $0x20
   152ac:	e8 dd dc ff ff       	call   12f8e <idt_install>
   152b1:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   152b4:	83 ec 0c             	sub    $0xc,%esp
   152b7:	6a 20                	push   $0x20
   152b9:	e8 5b df ff ff       	call   13219 <idt_enable>
   152be:	83 c4 10             	add    $0x10,%esp

}
   152c1:	90                   	nop
   152c2:	c9                   	leave  
   152c3:	c3                   	ret    

000152c4 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   152c4:	55                   	push   %ebp
   152c5:	89 e5                	mov    %esp,%ebp
   152c7:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   152ca:	c7 05 e4 f3 04 00 00 	movl   $0x0,0x4f3e4
   152d1:	00 00 00 
    init_pit();
   152d4:	e8 89 ff ff ff       	call   15262 <init_pit>
   152d9:	90                   	nop
   152da:	c9                   	leave  
   152db:	c3                   	ret    

000152dc <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   152dc:	55                   	push   %ebp
   152dd:	89 e5                	mov    %esp,%ebp
   152df:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   152e2:	8b 45 08             	mov    0x8(%ebp),%eax
   152e5:	8b 40 08             	mov    0x8(%eax),%eax
   152e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   152eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   152ef:	78 10                	js     15301 <get_tty+0x25>
   152f1:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   152f5:	7f 0a                	jg     15301 <get_tty+0x25>
   152f7:	8b 45 08             	mov    0x8(%ebp),%eax
   152fa:	8b 40 10             	mov    0x10(%eax),%eax
   152fd:	85 c0                	test   %eax,%eax
   152ff:	75 1a                	jne    1531b <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   15301:	83 ec 08             	sub    $0x8,%esp
   15304:	ff 75 f4             	push   -0xc(%ebp)
   15307:	68 30 9a 01 00       	push   $0x19a30
   1530c:	e8 51 36 00 00       	call   18962 <log_printf>
   15311:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   15314:	b8 00 00 00 00       	mov    $0x0,%eax
   15319:	eb 0e                	jmp    15329 <get_tty+0x4d>
    }

    return tty_table + tty_index;
   1531b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1531e:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15324:	05 00 f4 04 00       	add    $0x4f400,%eax
}
   15329:	c9                   	leave  
   1532a:	c3                   	ret    

0001532b <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   1532b:	55                   	push   %ebp
   1532c:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   1532e:	8b 45 08             	mov    0x8(%ebp),%eax
   15331:	8b 55 0c             	mov    0xc(%ebp),%edx
   15334:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   15336:	8b 45 08             	mov    0x8(%ebp),%eax
   15339:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   15340:	8b 45 08             	mov    0x8(%ebp),%eax
   15343:	8b 55 10             	mov    0x10(%ebp),%edx
   15346:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   15349:	8b 45 08             	mov    0x8(%ebp),%eax
   1534c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   15353:	8b 45 08             	mov    0x8(%ebp),%eax
   15356:	8b 50 0c             	mov    0xc(%eax),%edx
   15359:	8b 45 08             	mov    0x8(%ebp),%eax
   1535c:	89 50 08             	mov    %edx,0x8(%eax)
}
   1535f:	90                   	nop
   15360:	5d                   	pop    %ebp
   15361:	c3                   	ret    

00015362 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   15362:	55                   	push   %ebp
   15363:	89 e5                	mov    %esp,%ebp
   15365:	53                   	push   %ebx
   15366:	83 ec 24             	sub    $0x24,%esp
   15369:	8b 45 0c             	mov    0xc(%ebp),%eax
   1536c:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   1536f:	e8 20 e0 ff ff       	call   13394 <idt_enter_protection>
   15374:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   15377:	8b 45 08             	mov    0x8(%ebp),%eax
   1537a:	8b 50 10             	mov    0x10(%eax),%edx
   1537d:	8b 45 08             	mov    0x8(%ebp),%eax
   15380:	8b 40 04             	mov    0x4(%eax),%eax
   15383:	39 c2                	cmp    %eax,%edx
   15385:	7c 15                	jl     1539c <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   15387:	83 ec 0c             	sub    $0xc,%esp
   1538a:	ff 75 f4             	push   -0xc(%ebp)
   1538d:	e8 1a e0 ff ff       	call   133ac <idt_leave_protection>
   15392:	83 c4 10             	add    $0x10,%esp
        return -1;
   15395:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1539a:	eb 59                	jmp    153f5 <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   1539c:	8b 45 08             	mov    0x8(%ebp),%eax
   1539f:	8b 18                	mov    (%eax),%ebx
   153a1:	8b 45 08             	mov    0x8(%ebp),%eax
   153a4:	8b 40 0c             	mov    0xc(%eax),%eax
   153a7:	8d 48 01             	lea    0x1(%eax),%ecx
   153aa:	8b 55 08             	mov    0x8(%ebp),%edx
   153ad:	89 4a 0c             	mov    %ecx,0xc(%edx)
   153b0:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   153b3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   153b7:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   153b9:	8b 45 08             	mov    0x8(%ebp),%eax
   153bc:	8b 50 0c             	mov    0xc(%eax),%edx
   153bf:	8b 45 08             	mov    0x8(%ebp),%eax
   153c2:	8b 40 04             	mov    0x4(%eax),%eax
   153c5:	39 c2                	cmp    %eax,%edx
   153c7:	7c 0a                	jl     153d3 <tty_fifo_put+0x71>
        fifo->write = 0;
   153c9:	8b 45 08             	mov    0x8(%ebp),%eax
   153cc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   153d3:	8b 45 08             	mov    0x8(%ebp),%eax
   153d6:	8b 40 10             	mov    0x10(%eax),%eax
   153d9:	8d 50 01             	lea    0x1(%eax),%edx
   153dc:	8b 45 08             	mov    0x8(%ebp),%eax
   153df:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   153e2:	83 ec 0c             	sub    $0xc,%esp
   153e5:	ff 75 f4             	push   -0xc(%ebp)
   153e8:	e8 bf df ff ff       	call   133ac <idt_leave_protection>
   153ed:	83 c4 10             	add    $0x10,%esp
    return 0;
   153f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   153f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   153f8:	c9                   	leave  
   153f9:	c3                   	ret    

000153fa <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   153fa:	55                   	push   %ebp
   153fb:	89 e5                	mov    %esp,%ebp
   153fd:	53                   	push   %ebx
   153fe:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   15401:	e8 8e df ff ff       	call   13394 <idt_enter_protection>
   15406:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   15409:	8b 45 08             	mov    0x8(%ebp),%eax
   1540c:	8b 40 10             	mov    0x10(%eax),%eax
   1540f:	85 c0                	test   %eax,%eax
   15411:	7f 15                	jg     15428 <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   15413:	83 ec 0c             	sub    $0xc,%esp
   15416:	ff 75 f4             	push   -0xc(%ebp)
   15419:	e8 8e df ff ff       	call   133ac <idt_leave_protection>
   1541e:	83 c4 10             	add    $0x10,%esp
        return -1;
   15421:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15426:	eb 5a                	jmp    15482 <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   15428:	8b 45 08             	mov    0x8(%ebp),%eax
   1542b:	8b 18                	mov    (%eax),%ebx
   1542d:	8b 45 08             	mov    0x8(%ebp),%eax
   15430:	8b 40 08             	mov    0x8(%eax),%eax
   15433:	8d 48 01             	lea    0x1(%eax),%ecx
   15436:	8b 55 08             	mov    0x8(%ebp),%edx
   15439:	89 4a 08             	mov    %ecx,0x8(%edx)
   1543c:	01 d8                	add    %ebx,%eax
   1543e:	0f b6 10             	movzbl (%eax),%edx
   15441:	8b 45 0c             	mov    0xc(%ebp),%eax
   15444:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   15446:	8b 45 08             	mov    0x8(%ebp),%eax
   15449:	8b 50 08             	mov    0x8(%eax),%edx
   1544c:	8b 45 08             	mov    0x8(%ebp),%eax
   1544f:	8b 40 04             	mov    0x4(%eax),%eax
   15452:	39 c2                	cmp    %eax,%edx
   15454:	7c 0a                	jl     15460 <tty_fifo_get+0x66>
        fifo->read = 0;
   15456:	8b 45 08             	mov    0x8(%ebp),%eax
   15459:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   15460:	8b 45 08             	mov    0x8(%ebp),%eax
   15463:	8b 40 10             	mov    0x10(%eax),%eax
   15466:	8d 50 ff             	lea    -0x1(%eax),%edx
   15469:	8b 45 08             	mov    0x8(%ebp),%eax
   1546c:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   1546f:	83 ec 0c             	sub    $0xc,%esp
   15472:	ff 75 f4             	push   -0xc(%ebp)
   15475:	e8 32 df ff ff       	call   133ac <idt_leave_protection>
   1547a:	83 c4 10             	add    $0x10,%esp
    return 0;
   1547d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15482:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15485:	c9                   	leave  
   15486:	c3                   	ret    

00015487 <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   15487:	55                   	push   %ebp
   15488:	89 e5                	mov    %esp,%ebp
   1548a:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   1548d:	8b 45 08             	mov    0x8(%ebp),%eax
   15490:	8b 40 08             	mov    0x8(%eax),%eax
   15493:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   15496:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1549a:	78 06                	js     154a2 <tty_open+0x1b>
   1549c:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   154a0:	7e 1d                	jle    154bf <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   154a2:	83 ec 08             	sub    $0x8,%esp
   154a5:	ff 75 f4             	push   -0xc(%ebp)
   154a8:	68 50 9a 01 00       	push   $0x19a50
   154ad:	e8 b0 34 00 00       	call   18962 <log_printf>
   154b2:	83 c4 10             	add    $0x10,%esp
        return -1;
   154b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   154ba:	e9 af 00 00 00       	jmp    1556e <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   154bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   154c2:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   154c8:	05 00 f4 04 00       	add    $0x4f400,%eax
   154cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   154d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154d3:	8d 50 54             	lea    0x54(%eax),%edx
   154d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154d9:	83 c0 0c             	add    $0xc,%eax
   154dc:	83 ec 04             	sub    $0x4,%esp
   154df:	68 00 02 00 00       	push   $0x200
   154e4:	52                   	push   %edx
   154e5:	50                   	push   %eax
   154e6:	e8 40 fe ff ff       	call   1532b <tty_fifo_init>
   154eb:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   154ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154f1:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   154f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154fa:	83 c0 20             	add    $0x20,%eax
   154fd:	83 ec 04             	sub    $0x4,%esp
   15500:	68 00 02 00 00       	push   $0x200
   15505:	52                   	push   %edx
   15506:	50                   	push   %eax
   15507:	e8 1f fe ff ff       	call   1532b <tty_fifo_init>
   1550c:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   1550f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15512:	83 c0 34             	add    $0x34,%eax
   15515:	83 ec 08             	sub    $0x8,%esp
   15518:	68 00 02 00 00       	push   $0x200
   1551d:	50                   	push   %eax
   1551e:	e8 f0 21 00 00       	call   17713 <sem_init>
   15523:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   15526:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15529:	83 c0 44             	add    $0x44,%eax
   1552c:	83 ec 08             	sub    $0x8,%esp
   1552f:	6a 00                	push   $0x0
   15531:	50                   	push   %eax
   15532:	e8 dc 21 00 00       	call   17713 <sem_init>
   15537:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   1553a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1553d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15540:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   15543:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15546:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   1554c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1554f:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   15556:	e8 a6 fb ff ff       	call   15101 <kbd_init>
    console_init(index);
   1555b:	83 ec 0c             	sub    $0xc,%esp
   1555e:	ff 75 f4             	push   -0xc(%ebp)
   15561:	e8 37 e4 ff ff       	call   1399d <console_init>
   15566:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   15569:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1556e:	c9                   	leave  
   1556f:	c3                   	ret    

00015570 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   15570:	55                   	push   %ebp
   15571:	89 e5                	mov    %esp,%ebp
   15573:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   15576:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1557a:	79 0a                	jns    15586 <tty_write+0x16>
        return -1;
   1557c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15581:	e9 d8 00 00 00       	jmp    1565e <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   15586:	83 ec 0c             	sub    $0xc,%esp
   15589:	ff 75 08             	push   0x8(%ebp)
   1558c:	e8 4b fd ff ff       	call   152dc <get_tty>
   15591:	83 c4 10             	add    $0x10,%esp
   15594:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   15597:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1559b:	75 0a                	jne    155a7 <tty_write+0x37>
        return -1;
   1559d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   155a2:	e9 b7 00 00 00       	jmp    1565e <tty_write+0xee>
    }

    int len = 0;
   155a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   155ae:	e9 98 00 00 00       	jmp    1564b <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   155b3:	8b 45 10             	mov    0x10(%ebp),%eax
   155b6:	8d 50 01             	lea    0x1(%eax),%edx
   155b9:	89 55 10             	mov    %edx,0x10(%ebp)
   155bc:	0f b6 00             	movzbl (%eax),%eax
   155bf:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   155c2:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   155c6:	75 3b                	jne    15603 <tty_write+0x93>
   155c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155cb:	8b 00                	mov    (%eax),%eax
   155cd:	83 e0 01             	and    $0x1,%eax
   155d0:	85 c0                	test   %eax,%eax
   155d2:	74 2f                	je     15603 <tty_write+0x93>
            sem_wait(&tty->out_sem);
   155d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155d7:	83 c0 34             	add    $0x34,%eax
   155da:	83 ec 0c             	sub    $0xc,%esp
   155dd:	50                   	push   %eax
   155de:	e8 72 21 00 00       	call   17755 <sem_wait>
   155e3:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   155e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155e9:	83 c0 0c             	add    $0xc,%eax
   155ec:	83 ec 08             	sub    $0x8,%esp
   155ef:	6a 0d                	push   $0xd
   155f1:	50                   	push   %eax
   155f2:	e8 6b fd ff ff       	call   15362 <tty_fifo_put>
   155f7:	83 c4 10             	add    $0x10,%esp
   155fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   155fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15601:	78 54                	js     15657 <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   15603:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15606:	83 c0 34             	add    $0x34,%eax
   15609:	83 ec 0c             	sub    $0xc,%esp
   1560c:	50                   	push   %eax
   1560d:	e8 43 21 00 00       	call   17755 <sem_wait>
   15612:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   15615:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   15619:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1561c:	83 c2 0c             	add    $0xc,%edx
   1561f:	83 ec 08             	sub    $0x8,%esp
   15622:	50                   	push   %eax
   15623:	52                   	push   %edx
   15624:	e8 39 fd ff ff       	call   15362 <tty_fifo_put>
   15629:	83 c4 10             	add    $0x10,%esp
   1562c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   1562f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15633:	78 25                	js     1565a <tty_write+0xea>
            break;
        }

        len++;
   15635:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   15639:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   1563d:	83 ec 0c             	sub    $0xc,%esp
   15640:	ff 75 f0             	push   -0x10(%ebp)
   15643:	e8 82 e8 ff ff       	call   13eca <console_write>
   15648:	83 c4 10             	add    $0x10,%esp
    while (size) {
   1564b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1564f:	0f 85 5e ff ff ff    	jne    155b3 <tty_write+0x43>
   15655:	eb 04                	jmp    1565b <tty_write+0xeb>
                break;
   15657:	90                   	nop
   15658:	eb 01                	jmp    1565b <tty_write+0xeb>
            break;
   1565a:	90                   	nop
    }
    


    return len;
   1565b:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   1565e:	c9                   	leave  
   1565f:	c3                   	ret    

00015660 <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   15660:	55                   	push   %ebp
   15661:	89 e5                	mov    %esp,%ebp
   15663:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   15666:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1566a:	79 0a                	jns    15676 <tty_read+0x16>
        return -1;
   1566c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15671:	e9 04 01 00 00       	jmp    1577a <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   15676:	83 ec 0c             	sub    $0xc,%esp
   15679:	ff 75 08             	push   0x8(%ebp)
   1567c:	e8 5b fc ff ff       	call   152dc <get_tty>
   15681:	83 c4 10             	add    $0x10,%esp
   15684:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   15687:	8b 45 10             	mov    0x10(%ebp),%eax
   1568a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   1568d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   15694:	e9 d2 00 00 00       	jmp    1576b <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   15699:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1569c:	83 c0 44             	add    $0x44,%eax
   1569f:	83 ec 0c             	sub    $0xc,%esp
   156a2:	50                   	push   %eax
   156a3:	e8 ad 20 00 00       	call   17755 <sem_wait>
   156a8:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   156ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   156ae:	8d 50 20             	lea    0x20(%eax),%edx
   156b1:	83 ec 08             	sub    $0x8,%esp
   156b4:	8d 45 eb             	lea    -0x15(%ebp),%eax
   156b7:	50                   	push   %eax
   156b8:	52                   	push   %edx
   156b9:	e8 3c fd ff ff       	call   153fa <tty_fifo_get>
   156be:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   156c1:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   156c5:	0f be c0             	movsbl %al,%eax
   156c8:	83 f8 0a             	cmp    $0xa,%eax
   156cb:	74 20                	je     156ed <tty_read+0x8d>
   156cd:	83 f8 7f             	cmp    $0x7f,%eax
   156d0:	75 55                	jne    15727 <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   156d2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   156d6:	75 05                	jne    156dd <tty_read+0x7d>
   156d8:	e9 8e 00 00 00       	jmp    1576b <tty_read+0x10b>
                continue;
            } else {
                len--;
   156dd:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   156e1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   156e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156e8:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   156eb:	eb 4e                	jmp    1573b <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   156ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
   156f0:	8b 40 04             	mov    0x4(%eax),%eax
   156f3:	83 e0 01             	and    $0x1,%eax
   156f6:	85 c0                	test   %eax,%eax
   156f8:	74 1b                	je     15715 <tty_read+0xb5>
   156fa:	8b 45 14             	mov    0x14(%ebp),%eax
   156fd:	83 e8 01             	sub    $0x1,%eax
   15700:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15703:	7d 10                	jge    15715 <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   15705:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15708:	8d 50 01             	lea    0x1(%eax),%edx
   1570b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1570e:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   15711:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   15715:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15718:	8d 50 01             	lea    0x1(%eax),%edx
   1571b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1571e:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   15721:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   15725:	eb 14                	jmp    1573b <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   15727:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1572a:	8d 50 01             	lea    0x1(%eax),%edx
   1572d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15730:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   15734:	88 10                	mov    %dl,(%eax)
            len++;
   15736:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   1573a:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   1573b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1573e:	8b 40 04             	mov    0x4(%eax),%eax
   15741:	83 e0 02             	and    $0x2,%eax
   15744:	85 c0                	test   %eax,%eax
   15746:	74 13                	je     1575b <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   15748:	6a 01                	push   $0x1
   1574a:	8d 45 eb             	lea    -0x15(%ebp),%eax
   1574d:	50                   	push   %eax
   1574e:	6a 00                	push   $0x0
   15750:	ff 75 08             	push   0x8(%ebp)
   15753:	e8 18 fe ff ff       	call   15570 <tty_write>
   15758:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   1575b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1575f:	3c 0a                	cmp    $0xa,%al
   15761:	74 14                	je     15777 <tty_read+0x117>
   15763:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15767:	3c 0d                	cmp    $0xd,%al
   15769:	74 0c                	je     15777 <tty_read+0x117>
    while (len < size) {
   1576b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1576e:	3b 45 14             	cmp    0x14(%ebp),%eax
   15771:	0f 8c 22 ff ff ff    	jl     15699 <tty_read+0x39>
            break;
        }

    }

    return len;
   15777:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1577a:	c9                   	leave  
   1577b:	c3                   	ret    

0001577c <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   1577c:	55                   	push   %ebp
   1577d:	89 e5                	mov    %esp,%ebp
   1577f:	53                   	push   %ebx
   15780:	83 ec 14             	sub    $0x14,%esp
    tty_t *tty = get_tty(dev);
   15783:	83 ec 0c             	sub    $0xc,%esp
   15786:	ff 75 08             	push   0x8(%ebp)
   15789:	e8 4e fb ff ff       	call   152dc <get_tty>
   1578e:	83 c4 10             	add    $0x10,%esp
   15791:	89 45 f4             	mov    %eax,-0xc(%ebp)
    switch (cmd) {
   15794:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
   15798:	74 08                	je     157a2 <tty_control+0x26>
   1579a:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
   1579e:	74 2e                	je     157ce <tty_control+0x52>
		    if (arg0) {
			    *(int *)arg0 = sem_count(&tty->in_sem); 
		    }
		    break;
        default :
            break;
   157a0:	eb 4a                	jmp    157ec <tty_control+0x70>
            if (arg0) {
   157a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   157a6:	74 13                	je     157bb <tty_control+0x3f>
                tty->iflags |= TTY_IECHO;
   157a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157ab:	8b 40 04             	mov    0x4(%eax),%eax
   157ae:	83 c8 02             	or     $0x2,%eax
   157b1:	89 c2                	mov    %eax,%edx
   157b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157b6:	89 50 04             	mov    %edx,0x4(%eax)
            break;
   157b9:	eb 31                	jmp    157ec <tty_control+0x70>
                tty->iflags &= ~TTY_IECHO;
   157bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157be:	8b 40 04             	mov    0x4(%eax),%eax
   157c1:	83 e0 fd             	and    $0xfffffffd,%eax
   157c4:	89 c2                	mov    %eax,%edx
   157c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157c9:	89 50 04             	mov    %edx,0x4(%eax)
            break;
   157cc:	eb 1e                	jmp    157ec <tty_control+0x70>
		    if (arg0) {
   157ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   157d2:	74 17                	je     157eb <tty_control+0x6f>
			    *(int *)arg0 = sem_count(&tty->in_sem); 
   157d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157d7:	83 c0 44             	add    $0x44,%eax
   157da:	8b 5d 10             	mov    0x10(%ebp),%ebx
   157dd:	83 ec 0c             	sub    $0xc,%esp
   157e0:	50                   	push   %eax
   157e1:	e8 8e 20 00 00       	call   17874 <sem_count>
   157e6:	83 c4 10             	add    $0x10,%esp
   157e9:	89 03                	mov    %eax,(%ebx)
		    break;
   157eb:	90                   	nop
    }
    return 0;
   157ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
   157f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   157f4:	c9                   	leave  
   157f5:	c3                   	ret    

000157f6 <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   157f6:	55                   	push   %ebp
   157f7:	89 e5                	mov    %esp,%ebp

}
   157f9:	90                   	nop
   157fa:	5d                   	pop    %ebp
   157fb:	c3                   	ret    

000157fc <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   157fc:	55                   	push   %ebp
   157fd:	89 e5                	mov    %esp,%ebp
   157ff:	83 ec 28             	sub    $0x28,%esp
   15802:	8b 45 08             	mov    0x8(%ebp),%eax
   15805:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   15808:	a1 a0 16 05 00       	mov    0x516a0,%eax
   1580d:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15813:	05 00 f4 04 00       	add    $0x4f400,%eax
   15818:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   1581b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1581e:	83 c0 44             	add    $0x44,%eax
   15821:	83 ec 0c             	sub    $0xc,%esp
   15824:	50                   	push   %eax
   15825:	e8 4a 20 00 00       	call   17874 <sem_count>
   1582a:	83 c4 10             	add    $0x10,%esp
   1582d:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15832:	7f 2b                	jg     1585f <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   15834:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   15838:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1583b:	83 c2 20             	add    $0x20,%edx
   1583e:	83 ec 08             	sub    $0x8,%esp
   15841:	50                   	push   %eax
   15842:	52                   	push   %edx
   15843:	e8 1a fb ff ff       	call   15362 <tty_fifo_put>
   15848:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   1584b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1584e:	83 c0 44             	add    $0x44,%eax
   15851:	83 ec 0c             	sub    $0xc,%esp
   15854:	50                   	push   %eax
   15855:	e8 7b 1f 00 00       	call   177d5 <sem_notify>
   1585a:	83 c4 10             	add    $0x10,%esp
   1585d:	eb 01                	jmp    15860 <tty_in+0x64>
        return;
   1585f:	90                   	nop
}
   15860:	c9                   	leave  
   15861:	c3                   	ret    

00015862 <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   15862:	55                   	push   %ebp
   15863:	89 e5                	mov    %esp,%ebp
   15865:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   15868:	a1 a0 16 05 00       	mov    0x516a0,%eax
   1586d:	39 45 08             	cmp    %eax,0x8(%ebp)
   15870:	74 16                	je     15888 <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   15872:	83 ec 0c             	sub    $0xc,%esp
   15875:	ff 75 08             	push   0x8(%ebp)
   15878:	e8 5d e7 ff ff       	call   13fda <console_select>
   1587d:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   15880:	8b 45 08             	mov    0x8(%ebp),%eax
   15883:	a3 a0 16 05 00       	mov    %eax,0x516a0
    }
}
   15888:	90                   	nop
   15889:	c9                   	leave  
   1588a:	c3                   	ret    

0001588b <devfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int devfs_mount(struct _fs_t *fs, int major, int minor) {
   1588b:	55                   	push   %ebp
   1588c:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   1588e:	8b 45 08             	mov    0x8(%ebp),%eax
   15891:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   15898:	00 00 00 
    return fs->type;
   1589b:	8b 45 08             	mov    0x8(%ebp),%eax
   1589e:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
}
   158a4:	5d                   	pop    %ebp
   158a5:	c3                   	ret    

000158a6 <devfs_unmount>:
/**
 * @brief 卸载设备文件系统
 * 
 * @param fs 
 */
void devfs_unmount(struct _fs_t *fs) {
   158a6:	55                   	push   %ebp
   158a7:	89 e5                	mov    %esp,%ebp
} 
   158a9:	90                   	nop
   158aa:	5d                   	pop    %ebp
   158ab:	c3                   	ret    

000158ac <devfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int devfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   158ac:	55                   	push   %ebp
   158ad:	89 e5                	mov    %esp,%ebp
   158af:	83 ec 28             	sub    $0x28,%esp
    //遍历设备类型表，获取需要打开的设备的信息
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   158b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   158b9:	e9 04 01 00 00       	jmp    159c2 <devfs_open+0x116>
        devfs_type_t *type = devfs_type_list + i;
   158be:	8b 55 f4             	mov    -0xc(%ebp),%edx
   158c1:	89 d0                	mov    %edx,%eax
   158c3:	01 c0                	add    %eax,%eax
   158c5:	01 d0                	add    %edx,%eax
   158c7:	c1 e0 02             	shl    $0x2,%eax
   158ca:	05 e0 b0 01 00       	add    $0x1b0e0,%eax
   158cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int type_name_len = kernel_strlen(type->name);
   158d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   158d5:	8b 00                	mov    (%eax),%eax
   158d7:	83 ec 0c             	sub    $0xc,%esp
   158da:	50                   	push   %eax
   158db:	e8 01 28 00 00       	call   180e1 <kernel_strlen>
   158e0:	83 c4 10             	add    $0x10,%esp
   158e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   158e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   158e9:	8b 00                	mov    (%eax),%eax
   158eb:	83 ec 04             	sub    $0x4,%esp
   158ee:	ff 75 ec             	push   -0x14(%ebp)
   158f1:	50                   	push   %eax
   158f2:	ff 75 0c             	push   0xc(%ebp)
   158f5:	e8 66 27 00 00       	call   18060 <kernel_strncmp>
   158fa:	83 c4 10             	add    $0x10,%esp
   158fd:	85 c0                	test   %eax,%eax
   158ff:	0f 85 b9 00 00 00    	jne    159be <devfs_open+0x112>
            int minor;
            //判断路径是否正确并读取路径中的设备号
            if (kernel_strlen(path) > type_name_len && path_to_num(path + type_name_len, &minor) < 0) {
   15905:	83 ec 0c             	sub    $0xc,%esp
   15908:	ff 75 0c             	push   0xc(%ebp)
   1590b:	e8 d1 27 00 00       	call   180e1 <kernel_strlen>
   15910:	83 c4 10             	add    $0x10,%esp
   15913:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15916:	7d 34                	jge    1594c <devfs_open+0xa0>
   15918:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1591b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1591e:	01 c2                	add    %eax,%edx
   15920:	83 ec 08             	sub    $0x8,%esp
   15923:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   15926:	50                   	push   %eax
   15927:	52                   	push   %edx
   15928:	e8 6d 0e 00 00       	call   1679a <path_to_num>
   1592d:	83 c4 10             	add    $0x10,%esp
   15930:	85 c0                	test   %eax,%eax
   15932:	79 18                	jns    1594c <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   15934:	83 ec 08             	sub    $0x8,%esp
   15937:	ff 75 0c             	push   0xc(%ebp)
   1593a:	68 7d 9a 01 00       	push   $0x19a7d
   1593f:	e8 1e 30 00 00       	call   18962 <log_printf>
   15944:	83 c4 10             	add    $0x10,%esp
                break;
   15947:	e9 80 00 00 00       	jmp    159cc <devfs_open+0x120>
            }

            //打开设备
            int dev_id = dev_open(type->dev_type, minor, (void*)0);
   1594c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1594f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15952:	8b 40 04             	mov    0x4(%eax),%eax
   15955:	83 ec 04             	sub    $0x4,%esp
   15958:	6a 00                	push   $0x0
   1595a:	52                   	push   %edx
   1595b:	50                   	push   %eax
   1595c:	e8 9d e7 ff ff       	call   140fe <dev_open>
   15961:	83 c4 10             	add    $0x10,%esp
   15964:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   15967:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1596b:	79 15                	jns    15982 <devfs_open+0xd6>
                log_printf("open device failed: %s", path);
   1596d:	83 ec 08             	sub    $0x8,%esp
   15970:	ff 75 0c             	push   0xc(%ebp)
   15973:	68 97 9a 01 00       	push   $0x19a97
   15978:	e8 e5 2f 00 00       	call   18962 <log_printf>
   1597d:	83 c4 10             	add    $0x10,%esp
                break;
   15980:	eb 4a                	jmp    159cc <devfs_open+0x120>
            }

            //打开成功，初始化file结构，用file记录文件信息
            file->dev_id = dev_id;
   15982:	8b 45 10             	mov    0x10(%ebp),%eax
   15985:	8b 55 e8             	mov    -0x18(%ebp),%edx
   15988:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->pos = 0;
   1598b:	8b 45 10             	mov    0x10(%ebp),%eax
   1598e:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   15995:	8b 45 10             	mov    0x10(%ebp),%eax
   15998:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
            file->type = type->file_type;
   1599f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159a2:	8b 40 08             	mov    0x8(%eax),%eax
   159a5:	89 c2                	mov    %eax,%edx
   159a7:	8b 45 10             	mov    0x10(%ebp),%eax
   159aa:	89 50 20             	mov    %edx,0x20(%eax)
            file->ref = 1;
   159ad:	8b 45 10             	mov    0x10(%ebp),%eax
   159b0:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)

            return 0;
   159b7:	b8 00 00 00 00       	mov    $0x0,%eax
   159bc:	eb 13                	jmp    159d1 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   159be:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   159c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   159c6:	0f 84 f2 fe ff ff    	je     158be <devfs_open+0x12>
        }
    }

    return 0;
   159cc:	b8 00 00 00 00       	mov    $0x0,%eax
};
   159d1:	c9                   	leave  
   159d2:	c3                   	ret    

000159d3 <devfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_read(char *buf, int size, file_t *file) {
   159d3:	55                   	push   %ebp
   159d4:	89 e5                	mov    %esp,%ebp
   159d6:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   159d9:	8b 45 10             	mov    0x10(%ebp),%eax
   159dc:	8b 50 30             	mov    0x30(%eax),%edx
   159df:	8b 45 10             	mov    0x10(%ebp),%eax
   159e2:	8b 40 2c             	mov    0x2c(%eax),%eax
   159e5:	ff 75 0c             	push   0xc(%ebp)
   159e8:	ff 75 08             	push   0x8(%ebp)
   159eb:	52                   	push   %edx
   159ec:	50                   	push   %eax
   159ed:	e8 56 e8 ff ff       	call   14248 <dev_read>
   159f2:	83 c4 10             	add    $0x10,%esp
}
   159f5:	c9                   	leave  
   159f6:	c3                   	ret    

000159f7 <devfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_write(char *buf, int size, file_t *file) {
   159f7:	55                   	push   %ebp
   159f8:	89 e5                	mov    %esp,%ebp
   159fa:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   159fd:	8b 45 10             	mov    0x10(%ebp),%eax
   15a00:	8b 50 30             	mov    0x30(%eax),%edx
   15a03:	8b 45 10             	mov    0x10(%ebp),%eax
   15a06:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a09:	ff 75 0c             	push   0xc(%ebp)
   15a0c:	ff 75 08             	push   0x8(%ebp)
   15a0f:	52                   	push   %edx
   15a10:	50                   	push   %eax
   15a11:	e8 7e e8 ff ff       	call   14294 <dev_write>
   15a16:	83 c4 10             	add    $0x10,%esp
}
   15a19:	c9                   	leave  
   15a1a:	c3                   	ret    

00015a1b <devfs_close>:
/**
 * @brief 关闭设备文件系统
 * 
 * @param file 
 */
void devfs_close(file_t *file) {
   15a1b:	55                   	push   %ebp
   15a1c:	89 e5                	mov    %esp,%ebp
   15a1e:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   15a21:	8b 45 08             	mov    0x8(%ebp),%eax
   15a24:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a27:	83 ec 0c             	sub    $0xc,%esp
   15a2a:	50                   	push   %eax
   15a2b:	e8 fc e8 ff ff       	call   1432c <dev_close>
   15a30:	83 c4 10             	add    $0x10,%esp
}
   15a33:	90                   	nop
   15a34:	c9                   	leave  
   15a35:	c3                   	ret    

00015a36 <devfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int devfs_seek(file_t *file, uint32_t offset, int dir) {
   15a36:	55                   	push   %ebp
   15a37:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持偏移调用，直接返回-1;
    return -1;
   15a39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15a3e:	5d                   	pop    %ebp
   15a3f:	c3                   	ret    

00015a40 <devfs_stat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int devfs_stat(file_t *file, struct stat *st) {
   15a40:	55                   	push   %ebp
   15a41:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持该调用
    return -1;
   15a43:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15a48:	5d                   	pop    %ebp
   15a49:	c3                   	ret    

00015a4a <devfs_ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int devfs_ioctl(file_t *file, int cmd, int arg0, int arg1) {
   15a4a:	55                   	push   %ebp
   15a4b:	89 e5                	mov    %esp,%ebp
   15a4d:	83 ec 08             	sub    $0x8,%esp
    dev_control(file->dev_id, cmd, arg0, arg1);
   15a50:	8b 45 08             	mov    0x8(%ebp),%eax
   15a53:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a56:	ff 75 14             	push   0x14(%ebp)
   15a59:	ff 75 10             	push   0x10(%ebp)
   15a5c:	ff 75 0c             	push   0xc(%ebp)
   15a5f:	50                   	push   %eax
   15a60:	e8 7b e8 ff ff       	call   142e0 <dev_control>
   15a65:	83 c4 10             	add    $0x10,%esp
}
   15a68:	90                   	nop
   15a69:	c9                   	leave  
   15a6a:	c3                   	ret    

00015a6b <cluster_is_valid>:
 * @brief 判断簇号是否有效
 * 
 * @param cluster 
 * @return int 
 */
static int cluster_is_valid(cluster_t cluster) {
   15a6b:	55                   	push   %ebp
   15a6c:	89 e5                	mov    %esp,%ebp
   15a6e:	83 ec 04             	sub    $0x4,%esp
   15a71:	8b 45 08             	mov    0x8(%ebp),%eax
   15a74:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < FAT_CLUSTER_INVALID) && (cluster >= 0x2);
   15a78:	66 81 7d fc f7 0f    	cmpw   $0xff7,-0x4(%ebp)
   15a7e:	77 0e                	ja     15a8e <cluster_is_valid+0x23>
   15a80:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15a85:	76 07                	jbe    15a8e <cluster_is_valid+0x23>
   15a87:	b8 01 00 00 00       	mov    $0x1,%eax
   15a8c:	eb 05                	jmp    15a93 <cluster_is_valid+0x28>
   15a8e:	b8 00 00 00 00       	mov    $0x0,%eax
} 
   15a93:	c9                   	leave  
   15a94:	c3                   	ret    

00015a95 <cache_read_sector>:
 * 
 * @param fat 
 * @param sector 
 * @return int 
 */
static int cache_read_sector(fat_t *fat, int sector) {
   15a95:	55                   	push   %ebp
   15a96:	89 e5                	mov    %esp,%ebp
   15a98:	83 ec 18             	sub    $0x18,%esp
    //要读扇区已被缓存，直接返回即可
    if (sector == fat->curr_sector) {
   15a9b:	8b 45 08             	mov    0x8(%ebp),%eax
   15a9e:	8b 50 24             	mov    0x24(%eax),%edx
   15aa1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15aa4:	39 c2                	cmp    %eax,%edx
   15aa6:	75 07                	jne    15aaf <cache_read_sector+0x1a>
        return 0;
   15aa8:	b8 00 00 00 00       	mov    $0x0,%eax
   15aad:	eb 3f                	jmp    15aee <cache_read_sector+0x59>
    }

    //读取信的扇区，并记录扇区号
    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   15ab2:	8b 50 28             	mov    0x28(%eax),%edx
   15ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   15ab8:	8b 40 2c             	mov    0x2c(%eax),%eax
   15abb:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   15ac1:	6a 01                	push   $0x1
   15ac3:	52                   	push   %edx
   15ac4:	ff 75 0c             	push   0xc(%ebp)
   15ac7:	50                   	push   %eax
   15ac8:	e8 7b e7 ff ff       	call   14248 <dev_read>
   15acd:	83 c4 10             	add    $0x10,%esp
   15ad0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   15ad3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15ad7:	75 10                	jne    15ae9 <cache_read_sector+0x54>
        fat->curr_sector = sector;
   15ad9:	8b 55 0c             	mov    0xc(%ebp),%edx
   15adc:	8b 45 08             	mov    0x8(%ebp),%eax
   15adf:	89 50 24             	mov    %edx,0x24(%eax)
        return 0;
   15ae2:	b8 00 00 00 00       	mov    $0x0,%eax
   15ae7:	eb 05                	jmp    15aee <cache_read_sector+0x59>
    }

    return -1;
   15ae9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15aee:	c9                   	leave  
   15aef:	c3                   	ret    

00015af0 <cluster_get_next>:
 * 
 * @param fat 
 * @param cblk 
 * @return int 
 */
static int cluster_get_next(fat_t *fat, cluster_t cblk) {
   15af0:	55                   	push   %ebp
   15af1:	89 e5                	mov    %esp,%ebp
   15af3:	83 ec 28             	sub    $0x28,%esp
   15af6:	8b 45 0c             	mov    0xc(%ebp),%eax
   15af9:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    //簇号无效
    if (!cluster_is_valid(cblk)) {
   15afd:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15b01:	50                   	push   %eax
   15b02:	e8 64 ff ff ff       	call   15a6b <cluster_is_valid>
   15b07:	83 c4 04             	add    $0x4,%esp
   15b0a:	85 c0                	test   %eax,%eax
   15b0c:	75 0a                	jne    15b18 <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15b0e:	b8 f8 0f 00 00       	mov    $0xff8,%eax
   15b13:	e9 94 00 00 00       	jmp    15bac <cluster_get_next+0xbc>
    }

    //计算当前簇cblk在对应分区中的扇区号
    //fat表保存了簇链关系，
    int offset = cblk * sizeof(cluster_t);
   15b18:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15b1c:	01 c0                	add    %eax,%eax
   15b1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sector;
   15b21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b24:	8b 55 08             	mov    0x8(%ebp),%edx
   15b27:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b2a:	ba 00 00 00 00       	mov    $0x0,%edx
   15b2f:	f7 f1                	div    %ecx
   15b31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //计算该簇在扇区中的偏移量
    int off_in_sector = offset % fat->bytes_per_sector;
   15b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b37:	8b 55 08             	mov    0x8(%ebp),%edx
   15b3a:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b3d:	ba 00 00 00 00       	mov    $0x0,%edx
   15b42:	f7 f1                	div    %ecx
   15b44:	89 d0                	mov    %edx,%eax
   15b46:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if (sector >= fat->tbl_sectors) {
   15b49:	8b 45 08             	mov    0x8(%ebp),%eax
   15b4c:	8b 50 08             	mov    0x8(%eax),%edx
   15b4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15b52:	39 c2                	cmp    %eax,%edx
   15b54:	77 1c                	ja     15b72 <cluster_get_next+0x82>
        log_printf("cluster too big: %d\n", cblk);
   15b56:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15b5a:	83 ec 08             	sub    $0x8,%esp
   15b5d:	50                   	push   %eax
   15b5e:	68 b0 9a 01 00       	push   $0x19ab0
   15b63:	e8 fa 2d 00 00       	call   18962 <log_printf>
   15b68:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15b6b:	b8 f8 0f 00 00       	mov    $0xff8,%eax
   15b70:	eb 3a                	jmp    15bac <cluster_get_next+0xbc>
    }

    int err = cache_read_sector(fat, fat->tbl_start_sector + sector);
   15b72:	8b 45 08             	mov    0x8(%ebp),%eax
   15b75:	8b 10                	mov    (%eax),%edx
   15b77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15b7a:	01 d0                	add    %edx,%eax
   15b7c:	83 ec 08             	sub    $0x8,%esp
   15b7f:	50                   	push   %eax
   15b80:	ff 75 08             	push   0x8(%ebp)
   15b83:	e8 0d ff ff ff       	call   15a95 <cache_read_sector>
   15b88:	83 c4 10             	add    $0x10,%esp
   15b8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15b8e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15b92:	79 07                	jns    15b9b <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15b94:	b8 f8 0f 00 00       	mov    $0xff8,%eax
   15b99:	eb 11                	jmp    15bac <cluster_get_next+0xbc>
    }

    return *(cluster_t *)(fat->fat_buffer + off_in_sector);
   15b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   15b9e:	8b 50 28             	mov    0x28(%eax),%edx
   15ba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15ba4:	01 d0                	add    %edx,%eax
   15ba6:	0f b7 00             	movzwl (%eax),%eax
   15ba9:	0f b7 c0             	movzwl %ax,%eax
}
   15bac:	c9                   	leave  
   15bad:	c3                   	ret    

00015bae <move_file_pos>:
 * @param move_bytes 
 * @param expand 
 * @return int 
 */
static int move_file_pos(file_t *file, 
    fat_t *fat, uint32_t move_bytes, int expand) {
   15bae:	55                   	push   %ebp
   15baf:	89 e5                	mov    %esp,%ebp
   15bb1:	83 ec 18             	sub    $0x18,%esp
        //判断移动pos后是否当前读取簇号是否需要更改
        uint32_t c_offset = file->pos % fat->cluster_bytes_size;
   15bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   15bb7:	8b 40 30             	mov    0x30(%eax),%eax
   15bba:	89 c2                	mov    %eax,%edx
   15bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bbf:	8b 48 20             	mov    0x20(%eax),%ecx
   15bc2:	89 d0                	mov    %edx,%eax
   15bc4:	ba 00 00 00 00       	mov    $0x0,%edx
   15bc9:	f7 f1                	div    %ecx
   15bcb:	89 55 f4             	mov    %edx,-0xc(%ebp)
        if (c_offset + move_bytes >= fat->cluster_bytes_size) {
   15bce:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15bd1:	8b 45 10             	mov    0x10(%ebp),%eax
   15bd4:	01 c2                	add    %eax,%edx
   15bd6:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bd9:	8b 40 20             	mov    0x20(%eax),%eax
   15bdc:	39 c2                	cmp    %eax,%edx
   15bde:	72 35                	jb     15c15 <move_file_pos+0x67>
            //当前簇已读取完毕需更改当前簇号
            //通过fat的簇链获取当前簇的下一个簇
            cluster_t next = cluster_get_next(fat, file->cblk);
   15be0:	8b 45 08             	mov    0x8(%ebp),%eax
   15be3:	8b 40 40             	mov    0x40(%eax),%eax
   15be6:	0f b7 c0             	movzwl %ax,%eax
   15be9:	83 ec 08             	sub    $0x8,%esp
   15bec:	50                   	push   %eax
   15bed:	ff 75 0c             	push   0xc(%ebp)
   15bf0:	e8 fb fe ff ff       	call   15af0 <cluster_get_next>
   15bf5:	83 c4 10             	add    $0x10,%esp
   15bf8:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            if (next == FAT_CLUSTER_INVALID) {  //簇号无效
   15bfc:	66 81 7d f2 f8 0f    	cmpw   $0xff8,-0xe(%ebp)
   15c02:	75 07                	jne    15c0b <move_file_pos+0x5d>
                return -1;
   15c04:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15c09:	eb 24                	jmp    15c2f <move_file_pos+0x81>
            }
            file->cblk = next;
   15c0b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
   15c0f:	8b 45 08             	mov    0x8(%ebp),%eax
   15c12:	89 50 40             	mov    %edx,0x40(%eax)
        }

        file->pos += move_bytes;
   15c15:	8b 45 08             	mov    0x8(%ebp),%eax
   15c18:	8b 40 30             	mov    0x30(%eax),%eax
   15c1b:	89 c2                	mov    %eax,%edx
   15c1d:	8b 45 10             	mov    0x10(%ebp),%eax
   15c20:	01 d0                	add    %edx,%eax
   15c22:	89 c2                	mov    %eax,%edx
   15c24:	8b 45 08             	mov    0x8(%ebp),%eax
   15c27:	89 50 30             	mov    %edx,0x30(%eax)
        return 0;
   15c2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15c2f:	c9                   	leave  
   15c30:	c3                   	ret    

00015c31 <diritem_get_type>:
 * @brief 从根目录项中获取该项的文件类型
 * 
 * @param diritem 
 * @return file_type_t 
 */
file_type_t diritem_get_type(diritem_t *diritem) {
   15c31:	55                   	push   %ebp
   15c32:	89 e5                	mov    %esp,%ebp
   15c34:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15c37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (diritem->DIR_Attr & 
   15c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   15c41:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15c45:	0f b6 c0             	movzbl %al,%eax
   15c48:	83 e0 0e             	and    $0xe,%eax
   15c4b:	85 c0                	test   %eax,%eax
   15c4d:	74 07                	je     15c56 <diritem_get_type+0x25>
    (DIRITEM_ATTR_VOLUME_ID 
    | DIRITEM_ATTR_SYSTEM 
    | DIRITEM_ATTR_HIDDEN)) {   //该项是卷标，隐藏或系统文件时直接跳过
        return FILE_UNKNOWN;
   15c4f:	b8 00 00 00 00       	mov    $0x0,%eax
   15c54:	eb 36                	jmp    15c8c <diritem_get_type+0x5b>
    }

    //该项为LONG_NAME项时也跳过
    if ((diritem->DIR_Attr & DIRITEM_ATTR_LONG_NAME) == DIRITEM_ATTR_LONG_NAME) {
   15c56:	8b 45 08             	mov    0x8(%ebp),%eax
   15c59:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15c5d:	0f b6 c0             	movzbl %al,%eax
   15c60:	83 e0 0f             	and    $0xf,%eax
   15c63:	83 f8 0f             	cmp    $0xf,%eax
   15c66:	75 07                	jne    15c6f <diritem_get_type+0x3e>
        return FILE_UNKNOWN;
   15c68:	b8 00 00 00 00       	mov    $0x0,%eax
   15c6d:	eb 1d                	jmp    15c8c <diritem_get_type+0x5b>

    }


    return diritem->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   15c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   15c72:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15c76:	0f b6 c0             	movzbl %al,%eax
   15c79:	83 e0 10             	and    $0x10,%eax
   15c7c:	85 c0                	test   %eax,%eax
   15c7e:	74 07                	je     15c87 <diritem_get_type+0x56>
   15c80:	b8 02 00 00 00       	mov    $0x2,%eax
   15c85:	eb 05                	jmp    15c8c <diritem_get_type+0x5b>
   15c87:	b8 03 00 00 00       	mov    $0x3,%eax
}
   15c8c:	c9                   	leave  
   15c8d:	c3                   	ret    

00015c8e <read_from_diritem>:
 * @param file
 * @param file_item 
 * @param p_index 
 */
static void read_from_diritem(fat_t *fat, 
    file_t *file, diritem_t *item, int index) {
   15c8e:	55                   	push   %ebp
   15c8f:	89 e5                	mov    %esp,%ebp
        file->type = diritem_get_type(item);
   15c91:	ff 75 10             	push   0x10(%ebp)
   15c94:	e8 98 ff ff ff       	call   15c31 <diritem_get_type>
   15c99:	83 c4 04             	add    $0x4,%esp
   15c9c:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c9f:	89 42 20             	mov    %eax,0x20(%edx)
        file->size = item->DIR_FileSize;
   15ca2:	8b 45 10             	mov    0x10(%ebp),%eax
   15ca5:	8b 50 1c             	mov    0x1c(%eax),%edx
   15ca8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cab:	89 50 38             	mov    %edx,0x38(%eax)
        file->pos = 0;
   15cae:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cb1:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->p_index = index;
   15cb8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cbb:	8b 55 14             	mov    0x14(%ebp),%edx
   15cbe:	89 50 44             	mov    %edx,0x44(%eax)
        file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusLo;
   15cc1:	8b 45 10             	mov    0x10(%ebp),%eax
   15cc4:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   15cc8:	0f b7 c0             	movzwl %ax,%eax
   15ccb:	c1 e0 10             	shl    $0x10,%eax
   15cce:	89 c2                	mov    %eax,%edx
   15cd0:	8b 45 10             	mov    0x10(%ebp),%eax
   15cd3:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   15cd7:	0f b7 c0             	movzwl %ax,%eax
   15cda:	09 c2                	or     %eax,%edx
   15cdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cdf:	89 50 3c             	mov    %edx,0x3c(%eax)
        file->cblk = file->sblk;
   15ce2:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ce5:	8b 50 3c             	mov    0x3c(%eax),%edx
   15ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ceb:	89 50 40             	mov    %edx,0x40(%eax)
}
   15cee:	90                   	nop
   15cef:	c9                   	leave  
   15cf0:	c3                   	ret    

00015cf1 <diritem_get_name>:
 * @brief 从当前目录项中获取文件名到dest中
 * 
 * @param diritem 
 * @param dest
 */
static void diritem_get_name(diritem_t *diritem, char *dest) {
   15cf1:	55                   	push   %ebp
   15cf2:	89 e5                	mov    %esp,%ebp
   15cf4:	83 ec 18             	sub    $0x18,%esp
    //file.c 存储在目录项中的形式为 "FILE    C  "
    //8字节的文件名，三字节的拓展名
    char *c = dest;
   15cf7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *ext = (char*)0;
   15cfd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    //8字节文件名 + '.' + 3字节拓展名，一共最大12字节空间
    kernel_memset(dest, 0, 12);
   15d04:	83 ec 04             	sub    $0x4,%esp
   15d07:	6a 0c                	push   $0xc
   15d09:	6a 00                	push   $0x0
   15d0b:	ff 75 0c             	push   0xc(%ebp)
   15d0e:	e8 52 24 00 00       	call   18165 <kernel_memset>
   15d13:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; ++i) {
   15d16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15d1d:	eb 65                	jmp    15d84 <diritem_get_name+0x93>
        if (diritem->DIR_Name[i] != ' ') {
   15d1f:	8b 55 08             	mov    0x8(%ebp),%edx
   15d22:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15d25:	01 d0                	add    %edx,%eax
   15d27:	0f b6 00             	movzbl (%eax),%eax
   15d2a:	3c 20                	cmp    $0x20,%al
   15d2c:	74 3a                	je     15d68 <diritem_get_name+0x77>
            *c = diritem->DIR_Name[i];
   15d2e:	8b 55 08             	mov    0x8(%ebp),%edx
   15d31:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15d34:	01 d0                	add    %edx,%eax
   15d36:	0f b6 00             	movzbl (%eax),%eax
   15d39:	89 c2                	mov    %eax,%edx
   15d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d3e:	88 10                	mov    %dl,(%eax)
            if (*c >= 'A' && *c <= 'Z') {
   15d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d43:	0f b6 00             	movzbl (%eax),%eax
   15d46:	3c 40                	cmp    $0x40,%al
   15d48:	7e 1a                	jle    15d64 <diritem_get_name+0x73>
   15d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d4d:	0f b6 00             	movzbl (%eax),%eax
   15d50:	3c 5a                	cmp    $0x5a,%al
   15d52:	7f 10                	jg     15d64 <diritem_get_name+0x73>
                *c -= ('A' - 'a');
   15d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d57:	0f b6 00             	movzbl (%eax),%eax
   15d5a:	83 c0 20             	add    $0x20,%eax
   15d5d:	89 c2                	mov    %eax,%edx
   15d5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d62:	88 10                	mov    %dl,(%eax)
            }
            c++;
   15d64:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        }

        //读完8字节的文件名，用ext记录".拓展名""
        if (i == 7) {
   15d68:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15d6c:	75 12                	jne    15d80 <diritem_get_name+0x8f>
            ext = c;
   15d6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *(c++) = '.';
   15d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d77:	8d 50 01             	lea    0x1(%eax),%edx
   15d7a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15d7d:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; ++i) {
   15d80:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15d84:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15d88:	7e 95                	jle    15d1f <diritem_get_name+0x2e>
        }
    }

    //文件无拓展名，将之前写入的'.'设置为'\0'
    if (ext && (ext[1] == '\0')) {
   15d8a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15d8e:	74 13                	je     15da3 <diritem_get_name+0xb2>
   15d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15d93:	83 c0 01             	add    $0x1,%eax
   15d96:	0f b6 00             	movzbl (%eax),%eax
   15d99:	84 c0                	test   %al,%al
   15d9b:	75 06                	jne    15da3 <diritem_get_name+0xb2>
        ext[0] = '\0';
   15d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15da0:	c6 00 00             	movb   $0x0,(%eax)
    }

}
   15da3:	90                   	nop
   15da4:	c9                   	leave  
   15da5:	c3                   	ret    

00015da6 <diritem_name_match>:
 * 
 * @param item 
 * @param dest 
 * @return int 
 */
static int diritem_name_match(diritem_t *item, const char *dest) {
   15da6:	55                   	push   %ebp
   15da7:	89 e5                	mov    %esp,%ebp
   15da9:	83 ec 18             	sub    $0x18,%esp
    char buf[12];
    diritem_get_name(item, buf);
   15dac:	83 ec 08             	sub    $0x8,%esp
   15daf:	8d 45 ec             	lea    -0x14(%ebp),%eax
   15db2:	50                   	push   %eax
   15db3:	ff 75 08             	push   0x8(%ebp)
   15db6:	e8 36 ff ff ff       	call   15cf1 <diritem_get_name>
   15dbb:	83 c4 10             	add    $0x10,%esp
    return kernel_strncmp(buf, dest, 11) == 0;
   15dbe:	83 ec 04             	sub    $0x4,%esp
   15dc1:	6a 0b                	push   $0xb
   15dc3:	ff 75 0c             	push   0xc(%ebp)
   15dc6:	8d 45 ec             	lea    -0x14(%ebp),%eax
   15dc9:	50                   	push   %eax
   15dca:	e8 91 22 00 00       	call   18060 <kernel_strncmp>
   15dcf:	83 c4 10             	add    $0x10,%esp
   15dd2:	85 c0                	test   %eax,%eax
   15dd4:	0f 94 c0             	sete   %al
   15dd7:	0f b6 c0             	movzbl %al,%eax
}
   15dda:	c9                   	leave  
   15ddb:	c3                   	ret    

00015ddc <read_dir_entry>:
 * 
 * @param fat 
 * @param dir_index 
 * @return diritem_t* 
 */
static diritem_t * read_dir_entry(fat_t *fat, int dir_index) {
   15ddc:	55                   	push   %ebp
   15ddd:	89 e5                	mov    %esp,%ebp
   15ddf:	53                   	push   %ebx
   15de0:	83 ec 14             	sub    $0x14,%esp
    if (dir_index < 0 || dir_index >= fat->root_ent_cnt) {
   15de3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15de7:	78 0d                	js     15df6 <read_dir_entry+0x1a>
   15de9:	8b 45 08             	mov    0x8(%ebp),%eax
   15dec:	8b 50 18             	mov    0x18(%eax),%edx
   15def:	8b 45 0c             	mov    0xc(%ebp),%eax
   15df2:	39 c2                	cmp    %eax,%edx
   15df4:	77 07                	ja     15dfd <read_dir_entry+0x21>
        return (diritem_t*)0;
   15df6:	b8 00 00 00 00       	mov    $0x0,%eax
   15dfb:	eb 5f                	jmp    15e5c <read_dir_entry+0x80>
    }

    //计算该目录项所在根目录区的扇区的扇区号
    int offset = dir_index * sizeof(diritem_t);
   15dfd:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e00:	c1 e0 05             	shl    $0x5,%eax
   15e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start_sector + offset / fat->bytes_per_sector;
   15e06:	8b 45 08             	mov    0x8(%ebp),%eax
   15e09:	8b 48 14             	mov    0x14(%eax),%ecx
   15e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e0f:	8b 55 08             	mov    0x8(%ebp),%edx
   15e12:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15e15:	ba 00 00 00 00       	mov    $0x0,%edx
   15e1a:	f7 f3                	div    %ebx
   15e1c:	01 c8                	add    %ecx,%eax
   15e1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = cache_read_sector(fat, sector);
   15e21:	83 ec 08             	sub    $0x8,%esp
   15e24:	ff 75 f0             	push   -0x10(%ebp)
   15e27:	ff 75 08             	push   0x8(%ebp)
   15e2a:	e8 66 fc ff ff       	call   15a95 <cache_read_sector>
   15e2f:	83 c4 10             	add    $0x10,%esp
   15e32:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   15e35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15e39:	79 07                	jns    15e42 <read_dir_entry+0x66>
        return (diritem_t*)0;
   15e3b:	b8 00 00 00 00       	mov    $0x0,%eax
   15e40:	eb 1a                	jmp    15e5c <read_dir_entry+0x80>
    }

    //计算出该目录项的起始地址并返回
    return (diritem_t*)(fat->fat_buffer + offset % fat->bytes_per_sector);
   15e42:	8b 45 08             	mov    0x8(%ebp),%eax
   15e45:	8b 58 28             	mov    0x28(%eax),%ebx
   15e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e4b:	8b 55 08             	mov    0x8(%ebp),%edx
   15e4e:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15e51:	ba 00 00 00 00       	mov    $0x0,%edx
   15e56:	f7 f1                	div    %ecx
   15e58:	89 d0                	mov    %edx,%eax
   15e5a:	01 d8                	add    %ebx,%eax
}
   15e5c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15e5f:	c9                   	leave  
   15e60:	c3                   	ret    

00015e61 <fatfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int fatfs_mount(struct _fs_t *fs, int major, int minor) {
   15e61:	55                   	push   %ebp
   15e62:	89 e5                	mov    %esp,%ebp
   15e64:	56                   	push   %esi
   15e65:	53                   	push   %ebx
   15e66:	83 ec 10             	sub    $0x10,%esp

    //打开对应设备 即对应磁盘的对应分区
    int dev_id = dev_open(major, minor, (void *)0);
   15e69:	83 ec 04             	sub    $0x4,%esp
   15e6c:	6a 00                	push   $0x0
   15e6e:	ff 75 10             	push   0x10(%ebp)
   15e71:	ff 75 0c             	push   0xc(%ebp)
   15e74:	e8 85 e2 ff ff       	call   140fe <dev_open>
   15e79:	83 c4 10             	add    $0x10,%esp
   15e7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev_id < 0) {
   15e7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15e83:	79 1b                	jns    15ea0 <fatfs_mount+0x3f>
        log_printf("open disk failed, major: %x, minor: %x\n", major, minor);
   15e85:	83 ec 04             	sub    $0x4,%esp
   15e88:	ff 75 10             	push   0x10(%ebp)
   15e8b:	ff 75 0c             	push   0xc(%ebp)
   15e8e:	68 c8 9a 01 00       	push   $0x19ac8
   15e93:	e8 ca 2a 00 00       	call   18962 <log_printf>
   15e98:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15e9b:	e9 c6 01 00 00       	jmp    16066 <fatfs_mount+0x205>
    }

    //分配一页来作为dbr区域的缓冲区
    dbr_t *dbr = (dbr_t *)memory_alloc_page();
   15ea0:	e8 b4 af ff ff       	call   10e59 <memory_alloc_page>
   15ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!dbr) {
   15ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15eac:	75 15                	jne    15ec3 <fatfs_mount+0x62>
        log_printf("mount failed: can't alloc buf\n");
   15eae:	83 ec 0c             	sub    $0xc,%esp
   15eb1:	68 f0 9a 01 00       	push   $0x19af0
   15eb6:	e8 a7 2a 00 00       	call   18962 <log_printf>
   15ebb:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15ebe:	e9 a3 01 00 00       	jmp    16066 <fatfs_mount+0x205>
    }


    //读取该分区的0号扇区，获取dbr的信息
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   15ec3:	6a 01                	push   $0x1
   15ec5:	ff 75 f4             	push   -0xc(%ebp)
   15ec8:	6a 00                	push   $0x0
   15eca:	ff 75 f0             	push   -0x10(%ebp)
   15ecd:	e8 76 e3 ff ff       	call   14248 <dev_read>
   15ed2:	83 c4 10             	add    $0x10,%esp
   15ed5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   15ed8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15edc:	7f 15                	jg     15ef3 <fatfs_mount+0x92>
        log_printf("read dbr failed\n");
   15ede:	83 ec 0c             	sub    $0xc,%esp
   15ee1:	68 0f 9b 01 00       	push   $0x19b0f
   15ee6:	e8 77 2a 00 00       	call   18962 <log_printf>
   15eeb:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15eee:	e9 73 01 00 00       	jmp    16066 <fatfs_mount+0x205>
    }

    //解析fat表的信息到文件系统中
    fat_t *fat = &fs->fat_data;
   15ef3:	8b 45 08             	mov    0x8(%ebp),%eax
   15ef6:	05 1c 02 00 00       	add    $0x21c,%eax
   15efb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->bytes_per_sector = dbr->BPB_BytsPerSec;
   15efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f01:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15f05:	0f b7 d0             	movzwl %ax,%edx
   15f08:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f0b:	89 50 0c             	mov    %edx,0xc(%eax)
    //因为保留区dbr从0扇区开始，且fat表紧邻dbr区
    //所以fat表的起始扇区，也就是保留区dbr的扇区总数
    fat->tbl_start_sector = dbr->BPB_RsvdSecCnt;
   15f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f11:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15f15:	0f b7 d0             	movzwl %ax,%edx
   15f18:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f1b:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   15f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f20:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   15f24:	0f b7 d0             	movzwl %ax,%edx
   15f27:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f2a:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   15f2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f30:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   15f34:	0f b6 d0             	movzbl %al,%edx
   15f37:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f3a:	89 50 04             	mov    %edx,0x4(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   15f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f40:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   15f44:	0f b6 d0             	movzbl %al,%edx
   15f47:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f4a:	89 50 10             	mov    %edx,0x10(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   15f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f50:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   15f54:	0f b7 d0             	movzwl %ax,%edx
   15f57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f5a:	89 50 18             	mov    %edx,0x18(%eax)
    fat->root_start_sector = fat->tbl_start_sector + fat->tbl_sectors * fat->tbl_cnt;
   15f5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f60:	8b 08                	mov    (%eax),%ecx
   15f62:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f65:	8b 50 08             	mov    0x8(%eax),%edx
   15f68:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f6b:	8b 40 04             	mov    0x4(%eax),%eax
   15f6e:	0f af c2             	imul   %edx,%eax
   15f71:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   15f74:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f77:	89 50 14             	mov    %edx,0x14(%eax)
    fat->data_start_sector = fat->root_start_sector + fat->root_ent_cnt * 32 / dbr->BPB_BytsPerSec;
   15f7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f7d:	8b 58 14             	mov    0x14(%eax),%ebx
   15f80:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15f83:	8b 40 18             	mov    0x18(%eax),%eax
   15f86:	c1 e0 05             	shl    $0x5,%eax
   15f89:	89 c1                	mov    %eax,%ecx
   15f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f8e:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15f92:	0f b7 f0             	movzwl %ax,%esi
   15f95:	89 c8                	mov    %ecx,%eax
   15f97:	ba 00 00 00 00       	mov    $0x0,%edx
   15f9c:	f7 f6                	div    %esi
   15f9e:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   15fa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15fa4:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->cluster_bytes_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   15fa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15faa:	8b 50 10             	mov    0x10(%eax),%edx
   15fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15fb0:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15fb4:	0f b7 c0             	movzwl %ax,%eax
   15fb7:	0f af d0             	imul   %eax,%edx
   15fba:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15fbd:	89 50 20             	mov    %edx,0x20(%eax)
    fat->fat_buffer = (uint8_t*)dbr;
   15fc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15fc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15fc6:	89 50 28             	mov    %edx,0x28(%eax)
    fat->fs = fs;
   15fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15fcc:	8b 55 08             	mov    0x8(%ebp),%edx
   15fcf:	89 50 2c             	mov    %edx,0x2c(%eax)
    fat->curr_sector = -1;
   15fd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15fd5:	c7 40 24 ff ff ff ff 	movl   $0xffffffff,0x24(%eax)

    if (fat->tbl_cnt != 2) {    //fat表数量一般为2， 不为2则出错
   15fdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15fdf:	8b 40 04             	mov    0x4(%eax),%eax
   15fe2:	83 f8 02             	cmp    $0x2,%eax
   15fe5:	74 18                	je     15fff <fatfs_mount+0x19e>
        log_printf("%s: fat table error: major: %x, minor: %x\n", major, minor);
   15fe7:	83 ec 04             	sub    $0x4,%esp
   15fea:	ff 75 10             	push   0x10(%ebp)
   15fed:	ff 75 0c             	push   0xc(%ebp)
   15ff0:	68 20 9b 01 00       	push   $0x19b20
   15ff5:	e8 68 29 00 00       	call   18962 <log_printf>
   15ffa:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15ffd:	eb 67                	jmp    16066 <fatfs_mount+0x205>
    }

    if (kernel_strncmp((char*)(dbr->BS_FilSysType), "FAT16", 5) != 0) { //不是FAT16文件系统，出错
   15fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16002:	83 c0 36             	add    $0x36,%eax
   16005:	83 ec 04             	sub    $0x4,%esp
   16008:	6a 05                	push   $0x5
   1600a:	68 4b 9b 01 00       	push   $0x19b4b
   1600f:	50                   	push   %eax
   16010:	e8 4b 20 00 00       	call   18060 <kernel_strncmp>
   16015:	83 c4 10             	add    $0x10,%esp
   16018:	85 c0                	test   %eax,%eax
   1601a:	74 18                	je     16034 <fatfs_mount+0x1d3>
        log_printf("not a fat filesystem: major: %x, minor: %x\n", major, minor);
   1601c:	83 ec 04             	sub    $0x4,%esp
   1601f:	ff 75 10             	push   0x10(%ebp)
   16022:	ff 75 0c             	push   0xc(%ebp)
   16025:	68 54 9b 01 00       	push   $0x19b54
   1602a:	e8 33 29 00 00       	call   18962 <log_printf>
   1602f:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16032:	eb 32                	jmp    16066 <fatfs_mount+0x205>

    }

    fs->type = FS_FAT16;
   16034:	8b 45 08             	mov    0x8(%ebp),%eax
   16037:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   1603e:	00 00 00 
    fs->data = &fs->fat_data;
   16041:	8b 45 08             	mov    0x8(%ebp),%eax
   16044:	8d 90 1c 02 00 00    	lea    0x21c(%eax),%edx
   1604a:	8b 45 08             	mov    0x8(%ebp),%eax
   1604d:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   16053:	8b 45 08             	mov    0x8(%ebp),%eax
   16056:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16059:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)

    return 0;
   1605f:	b8 00 00 00 00       	mov    $0x0,%eax
   16064:	eb 28                	jmp    1608e <fatfs_mount+0x22d>

mount_failed:
    if (dbr) {
   16066:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1606a:	74 0f                	je     1607b <fatfs_mount+0x21a>
        memory_free_page((uint32_t)dbr);
   1606c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1606f:	83 ec 0c             	sub    $0xc,%esp
   16072:	50                   	push   %eax
   16073:	e8 01 ae ff ff       	call   10e79 <memory_free_page>
   16078:	83 c4 10             	add    $0x10,%esp
    }

    dev_close(dev_id);
   1607b:	83 ec 0c             	sub    $0xc,%esp
   1607e:	ff 75 f0             	push   -0x10(%ebp)
   16081:	e8 a6 e2 ff ff       	call   1432c <dev_close>
   16086:	83 c4 10             	add    $0x10,%esp

    return -1;
   16089:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

} 
   1608e:	8d 65 f8             	lea    -0x8(%ebp),%esp
   16091:	5b                   	pop    %ebx
   16092:	5e                   	pop    %esi
   16093:	5d                   	pop    %ebp
   16094:	c3                   	ret    

00016095 <fatfs_unmount>:
/**
 * @brief 卸载fat文件系统
 * 
 * @param fs 
 */
void fatfs_unmount(struct _fs_t *fs) {
   16095:	55                   	push   %ebp
   16096:	89 e5                	mov    %esp,%ebp
   16098:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   1609b:	8b 45 08             	mov    0x8(%ebp),%eax
   1609e:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   160a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dev_close(fs->dev_id);
   160a7:	8b 45 08             	mov    0x8(%ebp),%eax
   160aa:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   160b0:	83 ec 0c             	sub    $0xc,%esp
   160b3:	50                   	push   %eax
   160b4:	e8 73 e2 ff ff       	call   1432c <dev_close>
   160b9:	83 c4 10             	add    $0x10,%esp

    memory_free_page((uint32_t)fat->fat_buffer);
   160bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160bf:	8b 40 28             	mov    0x28(%eax),%eax
   160c2:	83 ec 0c             	sub    $0xc,%esp
   160c5:	50                   	push   %eax
   160c6:	e8 ae ad ff ff       	call   10e79 <memory_free_page>
   160cb:	83 c4 10             	add    $0x10,%esp
}
   160ce:	90                   	nop
   160cf:	c9                   	leave  
   160d0:	c3                   	ret    

000160d1 <fatfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int fatfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   160d1:	55                   	push   %ebp
   160d2:	89 e5                	mov    %esp,%ebp
   160d4:	83 ec 28             	sub    $0x28,%esp
    //获取fat表信息
    fat_t *fat = (fat_t*)fs->data;
   160d7:	8b 45 08             	mov    0x8(%ebp),%eax
   160da:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   160e0:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //遍历读取根目录区的目录项,按路径path匹配对应目录项
    diritem_t *file_item = (diritem_t*)0;
   160e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;   //记录匹配到的目录项的索引
   160ea:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   160f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   160f8:	eb 5d                	jmp    16157 <fatfs_open+0x86>
        diritem_t * item = read_dir_entry(fat, i);
   160fa:	83 ec 08             	sub    $0x8,%esp
   160fd:	ff 75 ec             	push   -0x14(%ebp)
   16100:	ff 75 e8             	push   -0x18(%ebp)
   16103:	e8 d4 fc ff ff       	call   15ddc <read_dir_entry>
   16108:	83 c4 10             	add    $0x10,%esp
   1610b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   1610e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16112:	75 07                	jne    1611b <fatfs_open+0x4a>
            return -1;
   16114:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16119:	eb 72                	jmp    1618d <fatfs_open+0xbc>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   1611b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1611e:	0f b6 00             	movzbl (%eax),%eax
   16121:	84 c0                	test   %al,%al
   16123:	74 41                	je     16166 <fatfs_open+0x95>
            break;
        }

        if (item->DIR_Name[0] == DIRITEM_NAEM_FREE) {
   16125:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16128:	0f b6 00             	movzbl (%eax),%eax
   1612b:	3c e5                	cmp    $0xe5,%al
   1612d:	74 23                	je     16152 <fatfs_open+0x81>
            continue;
        }

        //进行路径匹配
        if (diritem_name_match(item, path)) {
   1612f:	83 ec 08             	sub    $0x8,%esp
   16132:	ff 75 0c             	push   0xc(%ebp)
   16135:	ff 75 e4             	push   -0x1c(%ebp)
   16138:	e8 69 fc ff ff       	call   15da6 <diritem_name_match>
   1613d:	83 c4 10             	add    $0x10,%esp
   16140:	85 c0                	test   %eax,%eax
   16142:	74 0f                	je     16153 <fatfs_open+0x82>
            file_item = item;
   16144:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16147:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   1614a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1614d:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   16150:	eb 15                	jmp    16167 <fatfs_open+0x96>
            continue;
   16152:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16153:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16157:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1615a:	8b 50 18             	mov    0x18(%eax),%edx
   1615d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16160:	39 c2                	cmp    %eax,%edx
   16162:	77 96                	ja     160fa <fatfs_open+0x29>
   16164:	eb 01                	jmp    16167 <fatfs_open+0x96>
            break;
   16166:	90                   	nop
        }
    }

    //从目录项中读取文件信息到file结构中
    if (file_item) {
   16167:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1616b:	74 1b                	je     16188 <fatfs_open+0xb7>
        read_from_diritem(fat, file, file_item, p_index);
   1616d:	ff 75 f0             	push   -0x10(%ebp)
   16170:	ff 75 f4             	push   -0xc(%ebp)
   16173:	ff 75 10             	push   0x10(%ebp)
   16176:	ff 75 e8             	push   -0x18(%ebp)
   16179:	e8 10 fb ff ff       	call   15c8e <read_from_diritem>
   1617e:	83 c4 10             	add    $0x10,%esp
        return 0;
   16181:	b8 00 00 00 00       	mov    $0x0,%eax
   16186:	eb 05                	jmp    1618d <fatfs_open+0xbc>
    }

    return -1;
   16188:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1618d:	c9                   	leave  
   1618e:	c3                   	ret    

0001618f <fatfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int fatfs_read(char *buf, int size, file_t *file) {
   1618f:	55                   	push   %ebp
   16190:	89 e5                	mov    %esp,%ebp
   16192:	53                   	push   %ebx
   16193:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t*)file->fs->data;
   16196:	8b 45 10             	mov    0x10(%ebp),%eax
   16199:	8b 40 28             	mov    0x28(%eax),%eax
   1619c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   161a2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //修正读取字节数
    uint32_t nbytes = size;
   161a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   161a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   161ab:	8b 45 10             	mov    0x10(%ebp),%eax
   161ae:	8b 40 30             	mov    0x30(%eax),%eax
   161b1:	89 c2                	mov    %eax,%edx
   161b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   161b6:	01 c2                	add    %eax,%edx
   161b8:	8b 45 10             	mov    0x10(%ebp),%eax
   161bb:	8b 40 38             	mov    0x38(%eax),%eax
   161be:	39 c2                	cmp    %eax,%edx
   161c0:	76 15                	jbe    161d7 <fatfs_read+0x48>
        nbytes = file->size - file->pos;
   161c2:	8b 45 10             	mov    0x10(%ebp),%eax
   161c5:	8b 50 38             	mov    0x38(%eax),%edx
   161c8:	8b 45 10             	mov    0x10(%ebp),%eax
   161cb:	8b 40 30             	mov    0x30(%eax),%eax
   161ce:	89 c1                	mov    %eax,%ecx
   161d0:	89 d0                	mov    %edx,%eax
   161d2:	29 c8                	sub    %ecx,%eax
   161d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   161d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  
    //读取nbytes个字节到buf中
    while (nbytes > 0) {
   161de:	e9 40 01 00 00       	jmp    16323 <fatfs_read+0x194>
        //记录每次循环读取的字节数
        uint32_t curr_read = nbytes;
   161e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   161e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //计算当前读取位置pos在当前读取的簇中的偏移量
        uint32_t cluster_offset = file->pos % fat->cluster_bytes_size;
   161e9:	8b 45 10             	mov    0x10(%ebp),%eax
   161ec:	8b 40 30             	mov    0x30(%eax),%eax
   161ef:	89 c2                	mov    %eax,%edx
   161f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   161f4:	8b 48 20             	mov    0x20(%eax),%ecx
   161f7:	89 d0                	mov    %edx,%eax
   161f9:	ba 00 00 00 00       	mov    $0x0,%edx
   161fe:	f7 f1                	div    %ecx
   16200:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //计算文件在该分区中的起始扇区号
        //fat文件系统中，在分区的文件数据区中，簇号从2开始编号
        //[2],[3],[4]
        uint32_t start_sector = fat->data_start_sector + (file->cblk - 2) * fat->sec_per_cluster;
   16203:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16206:	8b 50 1c             	mov    0x1c(%eax),%edx
   16209:	8b 45 10             	mov    0x10(%ebp),%eax
   1620c:	8b 40 40             	mov    0x40(%eax),%eax
   1620f:	83 e8 02             	sub    $0x2,%eax
   16212:	89 c1                	mov    %eax,%ecx
   16214:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16217:	8b 40 10             	mov    0x10(%eax),%eax
   1621a:	0f af c1             	imul   %ecx,%eax
   1621d:	01 d0                	add    %edx,%eax
   1621f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //当前读取位置刚好在簇的开头，且读取大小为一个簇，直接进行整簇读取即可
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16222:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16226:	75 4c                	jne    16274 <fatfs_read+0xe5>
   16228:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1622b:	8b 40 20             	mov    0x20(%eax),%eax
   1622e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16231:	75 41                	jne    16274 <fatfs_read+0xe5>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16233:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16236:	8b 40 10             	mov    0x10(%eax),%eax
   16239:	89 c1                	mov    %eax,%ecx
   1623b:	8b 55 e0             	mov    -0x20(%ebp),%edx
   1623e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16241:	8b 40 2c             	mov    0x2c(%eax),%eax
   16244:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1624a:	51                   	push   %ecx
   1624b:	ff 75 08             	push   0x8(%ebp)
   1624e:	52                   	push   %edx
   1624f:	50                   	push   %eax
   16250:	e8 f3 df ff ff       	call   14248 <dev_read>
   16255:	83 c4 10             	add    $0x10,%esp
   16258:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   1625b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   1625f:	79 08                	jns    16269 <fatfs_read+0xda>
                return total_read;
   16261:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16264:	e9 c7 00 00 00       	jmp    16330 <fatfs_read+0x1a1>
            }

            curr_read = fat->cluster_bytes_size;
   16269:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1626c:	8b 40 20             	mov    0x20(%eax),%eax
   1626f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16272:	eb 7c                	jmp    162f0 <fatfs_read+0x161>
        } else {//当前读取内容需要进行跨簇读取
            if (cluster_offset + curr_read > fat->cluster_bytes_size) {
   16274:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16277:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1627a:	01 c2                	add    %eax,%edx
   1627c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1627f:	8b 40 20             	mov    0x20(%eax),%eax
   16282:	39 c2                	cmp    %eax,%edx
   16284:	76 0c                	jbe    16292 <fatfs_read+0x103>
                curr_read = fat->cluster_bytes_size - cluster_offset;
   16286:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16289:	8b 40 20             	mov    0x20(%eax),%eax
   1628c:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   1628f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            //先将当前簇中的内容读取到fat_buffer中
            fat->curr_sector = start_sector;
   16292:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16295:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16298:	89 50 24             	mov    %edx,0x24(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   1629b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1629e:	8b 40 10             	mov    0x10(%eax),%eax
   162a1:	89 c3                	mov    %eax,%ebx
   162a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162a6:	8b 48 28             	mov    0x28(%eax),%ecx
   162a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
   162ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162af:	8b 40 2c             	mov    0x2c(%eax),%eax
   162b2:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   162b8:	53                   	push   %ebx
   162b9:	51                   	push   %ecx
   162ba:	52                   	push   %edx
   162bb:	50                   	push   %eax
   162bc:	e8 87 df ff ff       	call   14248 <dev_read>
   162c1:	83 c4 10             	add    $0x10,%esp
   162c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   162c7:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   162cb:	79 05                	jns    162d2 <fatfs_read+0x143>
                return total_read;
   162cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162d0:	eb 5e                	jmp    16330 <fatfs_read+0x1a1>
            }
            //再从fat_buffer中读取文件相关部分到buf中
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   162d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   162d5:	8b 55 e8             	mov    -0x18(%ebp),%edx
   162d8:	8b 4a 28             	mov    0x28(%edx),%ecx
   162db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   162de:	01 ca                	add    %ecx,%edx
   162e0:	83 ec 04             	sub    $0x4,%esp
   162e3:	50                   	push   %eax
   162e4:	52                   	push   %edx
   162e5:	ff 75 08             	push   0x8(%ebp)
   162e8:	e8 29 1e 00 00       	call   18116 <kernel_memcpy>
   162ed:	83 c4 10             	add    $0x10,%esp
        }
        buf += curr_read;
   162f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   162f3:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   162f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   162f9:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   162fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   162ff:	01 45 f0             	add    %eax,-0x10(%ebp)

        //移动文件的读取位置file->pos
        int err = move_file_pos(file, fat, curr_read, 0);
   16302:	6a 00                	push   $0x0
   16304:	ff 75 ec             	push   -0x14(%ebp)
   16307:	ff 75 e8             	push   -0x18(%ebp)
   1630a:	ff 75 10             	push   0x10(%ebp)
   1630d:	e8 9c f8 ff ff       	call   15bae <move_file_pos>
   16312:	83 c4 10             	add    $0x10,%esp
   16315:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   16318:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   1631c:	79 05                	jns    16323 <fatfs_read+0x194>
            return total_read;
   1631e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16321:	eb 0d                	jmp    16330 <fatfs_read+0x1a1>
    while (nbytes > 0) {
   16323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16327:	0f 85 b6 fe ff ff    	jne    161e3 <fatfs_read+0x54>
        }
    
    }
    

    return total_read;
   1632d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16330:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16333:	c9                   	leave  
   16334:	c3                   	ret    

00016335 <fatfs_write>:


int fatfs_write(char *buf, int size, file_t *file) {
   16335:	55                   	push   %ebp
   16336:	89 e5                	mov    %esp,%ebp
    return 0;
   16338:	b8 00 00 00 00       	mov    $0x0,%eax

}
   1633d:	5d                   	pop    %ebp
   1633e:	c3                   	ret    

0001633f <fatfs_close>:
void fatfs_close(file_t *file) {
   1633f:	55                   	push   %ebp
   16340:	89 e5                	mov    %esp,%ebp

}
   16342:	90                   	nop
   16343:	5d                   	pop    %ebp
   16344:	c3                   	ret    

00016345 <fatfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int fatfs_seek(file_t *file, uint32_t offset, int dir) {
   16345:	55                   	push   %ebp
   16346:	89 e5                	mov    %esp,%ebp
   16348:	83 ec 28             	sub    $0x28,%esp
    if (dir != 0) {
   1634b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1634f:	74 0a                	je     1635b <fatfs_seek+0x16>
        return -1;
   16351:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16356:	e9 c7 00 00 00       	jmp    16422 <fatfs_seek+0xdd>
    }

    fat_t *fat = (fat_t *)file->fs->data;
   1635b:	8b 45 08             	mov    0x8(%ebp),%eax
   1635e:	8b 40 28             	mov    0x28(%eax),%eax
   16361:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16367:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t current_cluster = file->cblk;
   1636a:	8b 45 08             	mov    0x8(%ebp),%eax
   1636d:	8b 40 40             	mov    0x40(%eax),%eax
   16370:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16374:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   1637b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1637e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //进行偏移处理
    while (offset_to_move) {
   16381:	eb 7d                	jmp    16400 <fatfs_seek+0xbb>
        //计算文件pos在当前簇中的偏移量
        uint32_t c_offset = curr_pos % fat->cluster_bytes_size;
   16383:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16386:	8b 48 20             	mov    0x20(%eax),%ecx
   16389:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1638c:	ba 00 00 00 00       	mov    $0x0,%edx
   16391:	f7 f1                	div    %ecx
   16393:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //初始化此次循环预备移动的字节量
        uint32_t curr_move = offset_to_move;
   16396:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16399:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if (c_offset + curr_move < fat->cluster_bytes_size) {
   1639c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1639f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   163a2:	01 c2                	add    %eax,%edx
   163a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163a7:	8b 40 20             	mov    0x20(%eax),%eax
   163aa:	39 c2                	cmp    %eax,%edx
   163ac:	73 08                	jae    163b6 <fatfs_seek+0x71>
            //此处循环移动后，pos还在当前簇中
            curr_pos += curr_move;
   163ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
   163b1:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   163b4:	eb 54                	jmp    1640a <fatfs_seek+0xc5>
        }

        //此次循环移动后pos将移动到下一个簇
        //所以先将本簇中的剩余字节量偏移
        curr_move = fat->cluster_bytes_size - c_offset;
   163b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163b9:	8b 40 20             	mov    0x20(%eax),%eax
   163bc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   163bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   163c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
   163c5:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   163c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
   163cb:	29 45 ec             	sub    %eax,-0x14(%ebp)

        //获取下一个簇号
        current_cluster = cluster_get_next(fat, current_cluster);
   163ce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   163d2:	83 ec 08             	sub    $0x8,%esp
   163d5:	50                   	push   %eax
   163d6:	ff 75 e8             	push   -0x18(%ebp)
   163d9:	e8 12 f7 ff ff       	call   15af0 <cluster_get_next>
   163de:	83 c4 10             	add    $0x10,%esp
   163e1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(current_cluster)) {
   163e5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   163e9:	83 ec 0c             	sub    $0xc,%esp
   163ec:	50                   	push   %eax
   163ed:	e8 79 f6 ff ff       	call   15a6b <cluster_is_valid>
   163f2:	83 c4 10             	add    $0x10,%esp
   163f5:	85 c0                	test   %eax,%eax
   163f7:	75 07                	jne    16400 <fatfs_seek+0xbb>
            return -1;
   163f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   163fe:	eb 22                	jmp    16422 <fatfs_seek+0xdd>
    while (offset_to_move) {
   16400:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16404:	0f 85 79 ff ff ff    	jne    16383 <fatfs_seek+0x3e>
        }

    }

    file->cblk = current_cluster;
   1640a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   1640e:	8b 45 08             	mov    0x8(%ebp),%eax
   16411:	89 50 40             	mov    %edx,0x40(%eax)
    file->pos = curr_pos;
   16414:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16417:	8b 45 08             	mov    0x8(%ebp),%eax
   1641a:	89 50 30             	mov    %edx,0x30(%eax)
    
    return 0;
   1641d:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16422:	c9                   	leave  
   16423:	c3                   	ret    

00016424 <fatfs_stat>:
int fatfs_stat(file_t *file, struct stat *st) {
   16424:	55                   	push   %ebp
   16425:	89 e5                	mov    %esp,%ebp
    return 0;
   16427:	b8 00 00 00 00       	mov    $0x0,%eax

}
   1642c:	5d                   	pop    %ebp
   1642d:	c3                   	ret    

0001642e <fatfs_opendir>:
 * @param fs 
 * @param name 
 * @param dir 
 * @return int 
 */
int fatfs_opendir(struct _fs_t *fs, const char *name, DIR *dir) {
   1642e:	55                   	push   %ebp
   1642f:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16431:	8b 45 10             	mov    0x10(%ebp),%eax
   16434:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   1643a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1643f:	5d                   	pop    %ebp
   16440:	c3                   	ret    

00016441 <fatfs_readdir>:
 * @param fs 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int fatfs_readdir(struct _fs_t *fs, DIR *dir, struct dirent *dirent) {
   16441:	55                   	push   %ebp
   16442:	89 e5                	mov    %esp,%ebp
   16444:	83 ec 18             	sub    $0x18,%esp
    //获取当前fat文件系统的fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16447:	8b 45 08             	mov    0x8(%ebp),%eax
   1644a:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16450:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (dir->index < fat->root_ent_cnt) {
   16453:	e9 ae 00 00 00       	jmp    16506 <fatfs_readdir+0xc5>
        diritem_t *item = read_dir_entry(fat, dir->index);
   16458:	8b 45 0c             	mov    0xc(%ebp),%eax
   1645b:	8b 00                	mov    (%eax),%eax
   1645d:	83 ec 08             	sub    $0x8,%esp
   16460:	50                   	push   %eax
   16461:	ff 75 f4             	push   -0xc(%ebp)
   16464:	e8 73 f9 ff ff       	call   15ddc <read_dir_entry>
   16469:	83 c4 10             	add    $0x10,%esp
   1646c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   1646f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16473:	75 0a                	jne    1647f <fatfs_readdir+0x3e>
            return -1;
   16475:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1647a:	e9 a4 00 00 00       	jmp    16523 <fatfs_readdir+0xe2>
        }

        //已经遍历到末尾项
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   1647f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16482:	0f b6 00             	movzbl (%eax),%eax
   16485:	84 c0                	test   %al,%al
   16487:	0f 84 90 00 00 00    	je     1651d <fatfs_readdir+0xdc>
            break;
        }

        //该目录项有效,获取目录项信息到dirent中
        if (item->DIR_Name[0] != DIRITEM_NAEM_FREE) {
   1648d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16490:	0f b6 00             	movzbl (%eax),%eax
   16493:	3c e5                	cmp    $0xe5,%al
   16495:	74 62                	je     164f9 <fatfs_readdir+0xb8>
            file_type_t type = diritem_get_type(item);
   16497:	83 ec 0c             	sub    $0xc,%esp
   1649a:	ff 75 f0             	push   -0x10(%ebp)
   1649d:	e8 8f f7 ff ff       	call   15c31 <diritem_get_type>
   164a2:	83 c4 10             	add    $0x10,%esp
   164a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   164a8:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   164ac:	74 06                	je     164b4 <fatfs_readdir+0x73>
   164ae:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   164b2:	75 45                	jne    164f9 <fatfs_readdir+0xb8>
                dirent->size = item->DIR_FileSize;
   164b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   164b7:	8b 40 1c             	mov    0x1c(%eax),%eax
   164ba:	89 c2                	mov    %eax,%edx
   164bc:	8b 45 10             	mov    0x10(%ebp),%eax
   164bf:	89 50 18             	mov    %edx,0x18(%eax)
                dirent->type = type;
   164c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   164c5:	8b 45 10             	mov    0x10(%ebp),%eax
   164c8:	89 50 04             	mov    %edx,0x4(%eax)
                diritem_get_name(item, dirent->name);
   164cb:	8b 45 10             	mov    0x10(%ebp),%eax
   164ce:	83 c0 08             	add    $0x8,%eax
   164d1:	83 ec 08             	sub    $0x8,%esp
   164d4:	50                   	push   %eax
   164d5:	ff 75 f0             	push   -0x10(%ebp)
   164d8:	e8 14 f8 ff ff       	call   15cf1 <diritem_get_name>
   164dd:	83 c4 10             	add    $0x10,%esp

                //记录目录项在该目录中的索引
                dirent->index = dir->index++;
   164e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   164e3:	8b 00                	mov    (%eax),%eax
   164e5:	8d 48 01             	lea    0x1(%eax),%ecx
   164e8:	8b 55 0c             	mov    0xc(%ebp),%edx
   164eb:	89 0a                	mov    %ecx,(%edx)
   164ed:	8b 55 10             	mov    0x10(%ebp),%edx
   164f0:	89 02                	mov    %eax,(%edx)
                return 0;
   164f2:	b8 00 00 00 00       	mov    $0x0,%eax
   164f7:	eb 2a                	jmp    16523 <fatfs_readdir+0xe2>
            }
        }

        //该目录项无效，继续获取下一个目录项
        dir->index++;
   164f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   164fc:	8b 00                	mov    (%eax),%eax
   164fe:	8d 50 01             	lea    0x1(%eax),%edx
   16501:	8b 45 0c             	mov    0xc(%ebp),%eax
   16504:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16506:	8b 45 0c             	mov    0xc(%ebp),%eax
   16509:	8b 00                	mov    (%eax),%eax
   1650b:	89 c2                	mov    %eax,%edx
   1650d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16510:	8b 40 18             	mov    0x18(%eax),%eax
   16513:	39 c2                	cmp    %eax,%edx
   16515:	0f 82 3d ff ff ff    	jb     16458 <fatfs_readdir+0x17>
   1651b:	eb 01                	jmp    1651e <fatfs_readdir+0xdd>
            break;
   1651d:	90                   	nop
    }


    return -1;
   1651e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16523:	c9                   	leave  
   16524:	c3                   	ret    

00016525 <fatfs_closedir>:
 * 
 * @param fs 
 * @param dir 
 * @return int 
 */
int fatfs_closedir(struct _fs_t *fs, DIR *dir) {
   16525:	55                   	push   %ebp
   16526:	89 e5                	mov    %esp,%ebp
 return 0;
   16528:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1652d:	5d                   	pop    %ebp
   1652e:	c3                   	ret    

0001652f <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   1652f:	55                   	push   %ebp
   16530:	89 e5                	mov    %esp,%ebp
   16532:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   16535:	83 ec 0c             	sub    $0xc,%esp
   16538:	68 c0 56 07 00       	push   $0x756c0
   1653d:	e8 92 0f 00 00       	call   174d4 <mutex_init>
   16542:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   16545:	83 ec 04             	sub    $0x4,%esp
   16548:	68 00 40 02 00       	push   $0x24000
   1654d:	6a 00                	push   $0x0
   1654f:	68 c0 16 05 00       	push   $0x516c0
   16554:	e8 0c 1c 00 00       	call   18165 <kernel_memset>
   16559:	83 c4 10             	add    $0x10,%esp
}
   1655c:	90                   	nop
   1655d:	c9                   	leave  
   1655e:	c3                   	ret    

0001655f <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   1655f:	55                   	push   %ebp
   16560:	89 e5                	mov    %esp,%ebp
   16562:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   16565:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   1656c:	83 ec 0c             	sub    $0xc,%esp
   1656f:	68 c0 56 07 00       	push   $0x756c0
   16574:	e8 a8 0f 00 00       	call   17521 <mutex_lock>
   16579:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   1657c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16583:	eb 47                	jmp    165cc <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   16585:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16588:	89 d0                	mov    %edx,%eax
   1658a:	c1 e0 03             	shl    $0x3,%eax
   1658d:	01 d0                	add    %edx,%eax
   1658f:	c1 e0 03             	shl    $0x3,%eax
   16592:	05 c0 16 05 00       	add    $0x516c0,%eax
   16597:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   1659a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1659d:	8b 40 24             	mov    0x24(%eax),%eax
   165a0:	85 c0                	test   %eax,%eax
   165a2:	75 24                	jne    165c8 <file_alloc+0x69>
            kernel_memset(p_file, 0, sizeof(file_t));
   165a4:	83 ec 04             	sub    $0x4,%esp
   165a7:	6a 48                	push   $0x48
   165a9:	6a 00                	push   $0x0
   165ab:	ff 75 ec             	push   -0x14(%ebp)
   165ae:	e8 b2 1b 00 00       	call   18165 <kernel_memset>
   165b3:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   165b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   165b9:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
            file = p_file;
   165c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   165c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   165c6:	eb 0d                	jmp    165d5 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   165c8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   165cc:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   165d3:	7e b0                	jle    16585 <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   165d5:	83 ec 0c             	sub    $0xc,%esp
   165d8:	68 c0 56 07 00       	push   $0x756c0
   165dd:	e8 e5 0f 00 00       	call   175c7 <mutex_unlock>
   165e2:	83 c4 10             	add    $0x10,%esp
    return file;
   165e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   165e8:	c9                   	leave  
   165e9:	c3                   	ret    

000165ea <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   165ea:	55                   	push   %ebp
   165eb:	89 e5                	mov    %esp,%ebp
   165ed:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   165f0:	83 ec 0c             	sub    $0xc,%esp
   165f3:	68 c0 56 07 00       	push   $0x756c0
   165f8:	e8 24 0f 00 00       	call   17521 <mutex_lock>
   165fd:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   16600:	8b 45 08             	mov    0x8(%ebp),%eax
   16603:	8b 40 24             	mov    0x24(%eax),%eax
   16606:	85 c0                	test   %eax,%eax
   16608:	7e 0f                	jle    16619 <file_free+0x2f>
        file->ref--;
   1660a:	8b 45 08             	mov    0x8(%ebp),%eax
   1660d:	8b 40 24             	mov    0x24(%eax),%eax
   16610:	8d 50 ff             	lea    -0x1(%eax),%edx
   16613:	8b 45 08             	mov    0x8(%ebp),%eax
   16616:	89 50 24             	mov    %edx,0x24(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   16619:	83 ec 0c             	sub    $0xc,%esp
   1661c:	68 c0 56 07 00       	push   $0x756c0
   16621:	e8 a1 0f 00 00       	call   175c7 <mutex_unlock>
   16626:	83 c4 10             	add    $0x10,%esp
}
   16629:	90                   	nop
   1662a:	c9                   	leave  
   1662b:	c3                   	ret    

0001662c <file_inc_ref>:
/**
 * @brief 增加文件file的引用计数
 * 
 * @param file 
 */
void file_inc_ref(file_t *file) {
   1662c:	55                   	push   %ebp
   1662d:	89 e5                	mov    %esp,%ebp
   1662f:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   16632:	83 ec 0c             	sub    $0xc,%esp
   16635:	68 c0 56 07 00       	push   $0x756c0
   1663a:	e8 e2 0e 00 00       	call   17521 <mutex_lock>
   1663f:	83 c4 10             	add    $0x10,%esp
    
    file->ref++;
   16642:	8b 45 08             	mov    0x8(%ebp),%eax
   16645:	8b 40 24             	mov    0x24(%eax),%eax
   16648:	8d 50 01             	lea    0x1(%eax),%edx
   1664b:	8b 45 08             	mov    0x8(%ebp),%eax
   1664e:	89 50 24             	mov    %edx,0x24(%eax)

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   16651:	83 ec 0c             	sub    $0xc,%esp
   16654:	68 c0 56 07 00       	push   $0x756c0
   16659:	e8 69 0f 00 00       	call   175c7 <mutex_unlock>
   1665e:	83 c4 10             	add    $0x10,%esp
   16661:	90                   	nop
   16662:	c9                   	leave  
   16663:	c3                   	ret    

00016664 <list_node_next>:
static inline list_node_t *list_node_next(list_node_t *node) {
   16664:	55                   	push   %ebp
   16665:	89 e5                	mov    %esp,%ebp
   16667:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1666a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1666e:	75 19                	jne    16689 <list_node_next+0x25>
   16670:	68 80 9b 01 00       	push   $0x19b80
   16675:	68 98 9d 01 00       	push   $0x19d98
   1667a:	6a 2b                	push   $0x2b
   1667c:	68 98 9b 01 00       	push   $0x19b98
   16681:	e8 c6 15 00 00       	call   17c4c <pannic>
   16686:	83 c4 10             	add    $0x10,%esp
    return node->next;
   16689:	8b 45 08             	mov    0x8(%ebp),%eax
   1668c:	8b 40 04             	mov    0x4(%eax),%eax
}
   1668f:	c9                   	leave  
   16690:	c3                   	ret    

00016691 <list_init>:
static inline void list_init(list_t *list) {
   16691:	55                   	push   %ebp
   16692:	89 e5                	mov    %esp,%ebp
   16694:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16697:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1669b:	75 19                	jne    166b6 <list_init+0x25>
   1669d:	68 d6 9b 01 00       	push   $0x19bd6
   166a2:	68 b4 9d 01 00       	push   $0x19db4
   166a7:	6a 31                	push   $0x31
   166a9:	68 98 9b 01 00       	push   $0x19b98
   166ae:	e8 99 15 00 00       	call   17c4c <pannic>
   166b3:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   166b6:	8b 45 08             	mov    0x8(%ebp),%eax
   166b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   166c0:	8b 45 08             	mov    0x8(%ebp),%eax
   166c3:	8b 50 04             	mov    0x4(%eax),%edx
   166c6:	8b 45 08             	mov    0x8(%ebp),%eax
   166c9:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   166cb:	8b 45 08             	mov    0x8(%ebp),%eax
   166ce:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   166d5:	90                   	nop
   166d6:	c9                   	leave  
   166d7:	c3                   	ret    

000166d8 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   166d8:	55                   	push   %ebp
   166d9:	89 e5                	mov    %esp,%ebp
   166db:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   166de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   166e2:	75 19                	jne    166fd <list_get_first+0x25>
   166e4:	68 d6 9b 01 00       	push   $0x19bd6
   166e9:	68 88 9d 01 00       	push   $0x19d88
   166ee:	6a 44                	push   $0x44
   166f0:	68 98 9b 01 00       	push   $0x19b98
   166f5:	e8 52 15 00 00       	call   17c4c <pannic>
   166fa:	83 c4 10             	add    $0x10,%esp
    return list->first;
   166fd:	8b 45 08             	mov    0x8(%ebp),%eax
   16700:	8b 00                	mov    (%eax),%eax
}
   16702:	c9                   	leave  
   16703:	c3                   	ret    

00016704 <is_fd_bad>:
 * @brief 检验文件描述符fd是否有效
 *
 * @param fd
 * @return int
 */
static int is_fd_bad(int fd) {
   16704:	55                   	push   %ebp
   16705:	89 e5                	mov    %esp,%ebp
  if (fd < 0 && fd >= TASK_OFILE_SIZE) {
   16707:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1670b:	79 0d                	jns    1671a <is_fd_bad+0x16>
   1670d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   16711:	7e 07                	jle    1671a <is_fd_bad+0x16>
    return 1;
   16713:	b8 01 00 00 00       	mov    $0x1,%eax
   16718:	eb 05                	jmp    1671f <is_fd_bad+0x1b>
  }

  return 0;
   1671a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1671f:	5d                   	pop    %ebp
   16720:	c3                   	ret    

00016721 <is_path_valid>:
 * @brief 判断文件路径是否有效
 *
 * @param path
 * @return int
 */
static int is_path_valid(const char *path) {
   16721:	55                   	push   %ebp
   16722:	89 e5                	mov    %esp,%ebp
  if (path == (const char *)0 || path[0] == '\0') {  // 路径无效
   16724:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16728:	74 0a                	je     16734 <is_path_valid+0x13>
   1672a:	8b 45 08             	mov    0x8(%ebp),%eax
   1672d:	0f b6 00             	movzbl (%eax),%eax
   16730:	84 c0                	test   %al,%al
   16732:	75 07                	jne    1673b <is_path_valid+0x1a>
    return 0;
   16734:	b8 00 00 00 00       	mov    $0x0,%eax
   16739:	eb 05                	jmp    16740 <is_path_valid+0x1f>
  }

  return 1;
   1673b:	b8 01 00 00 00       	mov    $0x1,%eax
}
   16740:	5d                   	pop    %ebp
   16741:	c3                   	ret    

00016742 <path_next_child>:
 * @brief 获取路径path下一级路径
 *
 * @param path
 * @return const char*
 */
const char *path_next_child(const char *path) {
   16742:	55                   	push   %ebp
   16743:	89 e5                	mov    %esp,%ebp
   16745:	83 ec 10             	sub    $0x10,%esp
  const char *c = path;
   16748:	8b 45 08             	mov    0x8(%ebp),%eax
   1674b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*c && (*(c++) == '/')) {
   1674e:	90                   	nop
   1674f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16752:	0f b6 00             	movzbl (%eax),%eax
   16755:	84 c0                	test   %al,%al
   16757:	74 10                	je     16769 <path_next_child+0x27>
   16759:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1675c:	8d 50 01             	lea    0x1(%eax),%edx
   1675f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   16762:	0f b6 00             	movzbl (%eax),%eax
   16765:	3c 2f                	cmp    $0x2f,%al
   16767:	74 e6                	je     1674f <path_next_child+0xd>
  };  // 跳过第一个'/'
  while (*c && (*(c++) != '/')) {
   16769:	90                   	nop
   1676a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1676d:	0f b6 00             	movzbl (%eax),%eax
   16770:	84 c0                	test   %al,%al
   16772:	74 10                	je     16784 <path_next_child+0x42>
   16774:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16777:	8d 50 01             	lea    0x1(%eax),%edx
   1677a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1677d:	0f b6 00             	movzbl (%eax),%eax
   16780:	3c 2f                	cmp    $0x2f,%al
   16782:	75 e6                	jne    1676a <path_next_child+0x28>
  };  // 跳过一级目录到下一个'/'

  return *c ? c : (const char *)0;  // 返回第二个'/'后的部分
   16784:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16787:	0f b6 00             	movzbl (%eax),%eax
   1678a:	84 c0                	test   %al,%al
   1678c:	74 05                	je     16793 <path_next_child+0x51>
   1678e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16791:	eb 05                	jmp    16798 <path_next_child+0x56>
   16793:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16798:	c9                   	leave  
   16799:	c3                   	ret    

0001679a <path_to_num>:
 *
 * @param path
 * @param num
 * @return int
 */
int path_to_num(const char *path, int *num) {
   1679a:	55                   	push   %ebp
   1679b:	89 e5                	mov    %esp,%ebp
   1679d:	83 ec 10             	sub    $0x10,%esp
  int n = 0;
   167a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  const char *c = path;
   167a7:	8b 45 08             	mov    0x8(%ebp),%eax
   167aa:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (*c) {
   167ad:	eb 23                	jmp    167d2 <path_to_num+0x38>
    n = n * 10 + *c - '0';
   167af:	8b 55 fc             	mov    -0x4(%ebp),%edx
   167b2:	89 d0                	mov    %edx,%eax
   167b4:	c1 e0 02             	shl    $0x2,%eax
   167b7:	01 d0                	add    %edx,%eax
   167b9:	01 c0                	add    %eax,%eax
   167bb:	89 c2                	mov    %eax,%edx
   167bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   167c0:	0f b6 00             	movzbl (%eax),%eax
   167c3:	0f be c0             	movsbl %al,%eax
   167c6:	01 d0                	add    %edx,%eax
   167c8:	83 e8 30             	sub    $0x30,%eax
   167cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    c++;
   167ce:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*c) {
   167d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   167d5:	0f b6 00             	movzbl (%eax),%eax
   167d8:	84 c0                	test   %al,%al
   167da:	75 d3                	jne    167af <path_to_num+0x15>
  }

  *num = n;
   167dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   167df:	8b 55 fc             	mov    -0x4(%ebp),%edx
   167e2:	89 10                	mov    %edx,(%eax)

  return n;
   167e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   167e7:	c9                   	leave  
   167e8:	c3                   	ret    

000167e9 <path_begin_with>:
 *
 * @param path
 * @param str
 * @return int
 */
int path_begin_with(const char *path, const char *str) {
   167e9:	55                   	push   %ebp
   167ea:	89 e5                	mov    %esp,%ebp
   167ec:	83 ec 10             	sub    $0x10,%esp
  const char *s1 = path, *s2 = str;
   167ef:	8b 45 08             	mov    0x8(%ebp),%eax
   167f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
   167f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   167f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   167fb:	eb 08                	jmp    16805 <path_begin_with+0x1c>
    s1++;
   167fd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    s2++;
   16801:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   16805:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16808:	0f b6 00             	movzbl (%eax),%eax
   1680b:	84 c0                	test   %al,%al
   1680d:	74 1a                	je     16829 <path_begin_with+0x40>
   1680f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16812:	0f b6 00             	movzbl (%eax),%eax
   16815:	84 c0                	test   %al,%al
   16817:	74 10                	je     16829 <path_begin_with+0x40>
   16819:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1681c:	0f b6 10             	movzbl (%eax),%edx
   1681f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16822:	0f b6 00             	movzbl (%eax),%eax
   16825:	38 c2                	cmp    %al,%dl
   16827:	74 d4                	je     167fd <path_begin_with+0x14>
  }

  return *s2 == '\0';
   16829:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1682c:	0f b6 00             	movzbl (%eax),%eax
   1682f:	84 c0                	test   %al,%al
   16831:	0f 94 c0             	sete   %al
   16834:	0f b6 c0             	movzbl %al,%eax
}
   16837:	c9                   	leave  
   16838:	c3                   	ret    

00016839 <fs_protect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_protect(fs_t *fs) {
   16839:	55                   	push   %ebp
   1683a:	89 e5                	mov    %esp,%ebp
   1683c:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   1683f:	8b 45 08             	mov    0x8(%ebp),%eax
   16842:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16848:	85 c0                	test   %eax,%eax
   1684a:	74 15                	je     16861 <fs_protect+0x28>
    mutex_lock(fs->mutex);
   1684c:	8b 45 08             	mov    0x8(%ebp),%eax
   1684f:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16855:	83 ec 0c             	sub    $0xc,%esp
   16858:	50                   	push   %eax
   16859:	e8 c3 0c 00 00       	call   17521 <mutex_lock>
   1685e:	83 c4 10             	add    $0x10,%esp
  }
}
   16861:	90                   	nop
   16862:	c9                   	leave  
   16863:	c3                   	ret    

00016864 <fs_unprotect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_unprotect(fs_t *fs) {
   16864:	55                   	push   %ebp
   16865:	89 e5                	mov    %esp,%ebp
   16867:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   1686a:	8b 45 08             	mov    0x8(%ebp),%eax
   1686d:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16873:	85 c0                	test   %eax,%eax
   16875:	74 15                	je     1688c <fs_unprotect+0x28>
    mutex_unlock(fs->mutex);
   16877:	8b 45 08             	mov    0x8(%ebp),%eax
   1687a:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16880:	83 ec 0c             	sub    $0xc,%esp
   16883:	50                   	push   %eax
   16884:	e8 3e 0d 00 00       	call   175c7 <mutex_unlock>
   16889:	83 c4 10             	add    $0x10,%esp
  }
}
   1688c:	90                   	nop
   1688d:	c9                   	leave  
   1688e:	c3                   	ret    

0001688f <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ...
 * @return int 文件描述符
 */
int sys_open(const char *name, int flags, ...) {
   1688f:	55                   	push   %ebp
   16890:	89 e5                	mov    %esp,%ebp
   16892:	83 ec 28             	sub    $0x28,%esp
  // 1.判断路径是否有效
  if (!is_path_valid(name)) {  // 文件路径无效
   16895:	ff 75 08             	push   0x8(%ebp)
   16898:	e8 84 fe ff ff       	call   16721 <is_path_valid>
   1689d:	83 c4 04             	add    $0x4,%esp
   168a0:	85 c0                	test   %eax,%eax
   168a2:	75 1a                	jne    168be <sys_open+0x2f>
    log_printf("path is not valid\n");
   168a4:	83 ec 0c             	sub    $0xc,%esp
   168a7:	68 e9 9b 01 00       	push   $0x19be9
   168ac:	e8 b1 20 00 00       	call   18962 <log_printf>
   168b1:	83 c4 10             	add    $0x10,%esp
    return -1;
   168b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   168b9:	e9 64 01 00 00       	jmp    16a22 <sys_open+0x193>
  }

  // 2.从系统file_table中分配一个文件结构
  file_t *file = file_alloc();
   168be:	e8 9c fc ff ff       	call   1655f <file_alloc>
   168c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!file) {
   168c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   168ca:	75 0a                	jne    168d6 <sys_open+0x47>
    return -1;
   168cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   168d1:	e9 4c 01 00 00       	jmp    16a22 <sys_open+0x193>
  }
  // 3.将文件结构放入当前进程的打开文件表中并得到文件描述符
  int fd = task_alloc_fd(file);
   168d6:	83 ec 0c             	sub    $0xc,%esp
   168d9:	ff 75 ec             	push   -0x14(%ebp)
   168dc:	e8 08 aa ff ff       	call   112e9 <task_alloc_fd>
   168e1:	83 c4 10             	add    $0x10,%esp
   168e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (fd < 0) {  // 放入失败
   168e7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   168eb:	0f 88 09 01 00 00    	js     169fa <sys_open+0x16b>
    goto sys_open_failed;
  }

  // 遍历文件系统挂载链表mounted_list,寻找需要打开的文件对应的文件系统
  fs_t *fs = (fs_t *)0;
   168f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  list_node_t *node = list_get_first(&mounted_list);
   168f8:	83 ec 0c             	sub    $0xc,%esp
   168fb:	68 e0 56 07 00       	push   $0x756e0
   16900:	e8 d3 fd ff ff       	call   166d8 <list_get_first>
   16905:	83 c4 10             	add    $0x10,%esp
   16908:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   1690b:	eb 47                	jmp    16954 <sys_open+0xc5>
    fs_t *curr = list_node_parent(node, fs_t, node);
   1690d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16911:	74 0a                	je     1691d <sys_open+0x8e>
   16913:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16916:	2d 10 02 00 00       	sub    $0x210,%eax
   1691b:	eb 05                	jmp    16922 <sys_open+0x93>
   1691d:	b8 00 00 00 00       	mov    $0x0,%eax
   16922:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (path_begin_with(name,
                        curr->mount_point)) {  // 该文件属于curr这个文件系统
   16925:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    if (path_begin_with(name,
   16928:	83 ec 08             	sub    $0x8,%esp
   1692b:	50                   	push   %eax
   1692c:	ff 75 08             	push   0x8(%ebp)
   1692f:	e8 b5 fe ff ff       	call   167e9 <path_begin_with>
   16934:	83 c4 10             	add    $0x10,%esp
   16937:	85 c0                	test   %eax,%eax
   16939:	74 08                	je     16943 <sys_open+0xb4>
      fs = curr;
   1693b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1693e:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   16941:	eb 17                	jmp    1695a <sys_open+0xcb>
    }

    node = list_node_next(node);
   16943:	83 ec 0c             	sub    $0xc,%esp
   16946:	ff 75 f0             	push   -0x10(%ebp)
   16949:	e8 16 fd ff ff       	call   16664 <list_node_next>
   1694e:	83 c4 10             	add    $0x10,%esp
   16951:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   16954:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16958:	75 b3                	jne    1690d <sys_open+0x7e>
  }

  if (fs) {  // 找到对应的文件系统
   1695a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1695e:	74 13                	je     16973 <sys_open+0xe4>
    // 获取下一级路径
    name = path_next_child(name);
   16960:	83 ec 0c             	sub    $0xc,%esp
   16963:	ff 75 08             	push   0x8(%ebp)
   16966:	e8 d7 fd ff ff       	call   16742 <path_next_child>
   1696b:	83 c4 10             	add    $0x10,%esp
   1696e:	89 45 08             	mov    %eax,0x8(%ebp)
   16971:	eb 08                	jmp    1697b <sys_open+0xec>
  } else {  // 未找到对应文件系统，使用默认的根文件系统
    fs = root_fs;
   16973:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16978:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  // 为文件绑定模式参数和文件系统
  file->mode = flags;
   1697b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1697e:	8b 55 0c             	mov    0xc(%ebp),%edx
   16981:	89 50 34             	mov    %edx,0x34(%eax)
  file->fs = fs;
   16984:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16987:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1698a:	89 50 28             	mov    %edx,0x28(%eax)
  kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   1698d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16990:	83 ec 04             	sub    $0x4,%esp
   16993:	6a 20                	push   $0x20
   16995:	ff 75 08             	push   0x8(%ebp)
   16998:	50                   	push   %eax
   16999:	e8 71 16 00 00       	call   1800f <kernel_strncpy>
   1699e:	83 c4 10             	add    $0x10,%esp

  // 使用该文件系统打开该文件
  fs_protect(fs);
   169a1:	83 ec 0c             	sub    $0xc,%esp
   169a4:	ff 75 f4             	push   -0xc(%ebp)
   169a7:	e8 8d fe ff ff       	call   16839 <fs_protect>
   169ac:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->open(fs, name, file);
   169af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   169b2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   169b8:	8b 40 08             	mov    0x8(%eax),%eax
   169bb:	83 ec 04             	sub    $0x4,%esp
   169be:	ff 75 ec             	push   -0x14(%ebp)
   169c1:	ff 75 08             	push   0x8(%ebp)
   169c4:	ff 75 f4             	push   -0xc(%ebp)
   169c7:	ff d0                	call   *%eax
   169c9:	83 c4 10             	add    $0x10,%esp
   169cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  fs_unprotect(fs);
   169cf:	83 ec 0c             	sub    $0xc,%esp
   169d2:	ff 75 f4             	push   -0xc(%ebp)
   169d5:	e8 8a fe ff ff       	call   16864 <fs_unprotect>
   169da:	83 c4 10             	add    $0x10,%esp

  if (err < 0) {
   169dd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   169e1:	79 12                	jns    169f5 <sys_open+0x166>
    log_printf("open failed!");
   169e3:	83 ec 0c             	sub    $0xc,%esp
   169e6:	68 fc 9b 01 00       	push   $0x19bfc
   169eb:	e8 72 1f 00 00       	call   18962 <log_printf>
   169f0:	83 c4 10             	add    $0x10,%esp
    goto sys_open_failed;
   169f3:	eb 06                	jmp    169fb <sys_open+0x16c>
  }

  // 6.返回文件描述符
  return fd;
   169f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169f8:	eb 28                	jmp    16a22 <sys_open+0x193>
    goto sys_open_failed;
   169fa:	90                   	nop

// 打开失败，回收资源
sys_open_failed:
  // 释放掉已分配的file
  file_free(file);
   169fb:	83 ec 0c             	sub    $0xc,%esp
   169fe:	ff 75 ec             	push   -0x14(%ebp)
   16a01:	e8 e4 fb ff ff       	call   165ea <file_free>
   16a06:	83 c4 10             	add    $0x10,%esp
  if (fd >= 0) {  // 释放掉已分配的打开文件表的资源
   16a09:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   16a0d:	78 0e                	js     16a1d <sys_open+0x18e>
    task_remove_fd(fd);
   16a0f:	83 ec 0c             	sub    $0xc,%esp
   16a12:	ff 75 e8             	push   -0x18(%ebp)
   16a15:	e8 22 a9 ff ff       	call   1133c <task_remove_fd>
   16a1a:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   16a1d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16a22:	c9                   	leave  
   16a23:	c3                   	ret    

00016a24 <sys_read>:
 * @param fd 文件描述符
 * @param buf 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int fd, char *buf, int len) {
   16a24:	55                   	push   %ebp
   16a25:	89 e5                	mov    %esp,%ebp
   16a27:	83 ec 18             	sub    $0x18,%esp

  if (is_fd_bad(fd) || !buf || !len) {
   16a2a:	ff 75 08             	push   0x8(%ebp)
   16a2d:	e8 d2 fc ff ff       	call   16704 <is_fd_bad>
   16a32:	83 c4 04             	add    $0x4,%esp
   16a35:	85 c0                	test   %eax,%eax
   16a37:	75 0c                	jne    16a45 <sys_read+0x21>
   16a39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16a3d:	74 06                	je     16a45 <sys_read+0x21>
   16a3f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16a43:	75 0a                	jne    16a4f <sys_read+0x2b>
    return -1;
   16a45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16a4a:	e9 98 00 00 00       	jmp    16ae7 <sys_read+0xc3>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   16a4f:	83 ec 0c             	sub    $0xc,%esp
   16a52:	ff 75 08             	push   0x8(%ebp)
   16a55:	e8 5f a8 ff ff       	call   112b9 <task_file>
   16a5a:	83 c4 10             	add    $0x10,%esp
   16a5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   16a60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16a64:	75 17                	jne    16a7d <sys_read+0x59>
    log_printf("file not opened!\n");
   16a66:	83 ec 0c             	sub    $0xc,%esp
   16a69:	68 09 9c 01 00       	push   $0x19c09
   16a6e:	e8 ef 1e 00 00       	call   18962 <log_printf>
   16a73:	83 c4 10             	add    $0x10,%esp
    return -1;
   16a76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16a7b:	eb 6a                	jmp    16ae7 <sys_read+0xc3>
  }

  //2.判断文件的读写模式
  if (file->mode == O_WRONLY) { //文件只写，不可读
   16a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16a80:	8b 40 34             	mov    0x34(%eax),%eax
   16a83:	83 f8 01             	cmp    $0x1,%eax
   16a86:	75 17                	jne    16a9f <sys_read+0x7b>
    log_printf("file is write only!\n");
   16a88:	83 ec 0c             	sub    $0xc,%esp
   16a8b:	68 1b 9c 01 00       	push   $0x19c1b
   16a90:	e8 cd 1e 00 00       	call   18962 <log_printf>
   16a95:	83 c4 10             	add    $0x10,%esp
    return -1;
   16a98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16a9d:	eb 48                	jmp    16ae7 <sys_read+0xc3>
  }

  //3.获取文件对应的文件系统，并执行读操作
  fs_t *fs = file->fs;
   16a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16aa2:	8b 40 28             	mov    0x28(%eax),%eax
   16aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   16aa8:	83 ec 0c             	sub    $0xc,%esp
   16aab:	ff 75 f0             	push   -0x10(%ebp)
   16aae:	e8 86 fd ff ff       	call   16839 <fs_protect>
   16ab3:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->read(buf, len, file);
   16ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ab9:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16abf:	8b 40 0c             	mov    0xc(%eax),%eax
   16ac2:	83 ec 04             	sub    $0x4,%esp
   16ac5:	ff 75 f4             	push   -0xc(%ebp)
   16ac8:	ff 75 10             	push   0x10(%ebp)
   16acb:	ff 75 0c             	push   0xc(%ebp)
   16ace:	ff d0                	call   *%eax
   16ad0:	83 c4 10             	add    $0x10,%esp
   16ad3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16ad6:	83 ec 0c             	sub    $0xc,%esp
   16ad9:	ff 75 f0             	push   -0x10(%ebp)
   16adc:	e8 83 fd ff ff       	call   16864 <fs_unprotect>
   16ae1:	83 c4 10             	add    $0x10,%esp

  return err;
   16ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
   16ae7:	c9                   	leave  
   16ae8:	c3                   	ret    

00016ae9 <sys_write>:
 * @param fd 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int fd, char *buf, int len) {
   16ae9:	55                   	push   %ebp
   16aea:	89 e5                	mov    %esp,%ebp
   16aec:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd) || !buf || !len) {
   16aef:	ff 75 08             	push   0x8(%ebp)
   16af2:	e8 0d fc ff ff       	call   16704 <is_fd_bad>
   16af7:	83 c4 04             	add    $0x4,%esp
   16afa:	85 c0                	test   %eax,%eax
   16afc:	75 0c                	jne    16b0a <sys_write+0x21>
   16afe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16b02:	74 06                	je     16b0a <sys_write+0x21>
   16b04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16b08:	75 0a                	jne    16b14 <sys_write+0x2b>
    return -1;
   16b0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b0f:	e9 97 00 00 00       	jmp    16bab <sys_write+0xc2>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   16b14:	83 ec 0c             	sub    $0xc,%esp
   16b17:	ff 75 08             	push   0x8(%ebp)
   16b1a:	e8 9a a7 ff ff       	call   112b9 <task_file>
   16b1f:	83 c4 10             	add    $0x10,%esp
   16b22:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   16b25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16b29:	75 17                	jne    16b42 <sys_write+0x59>
    log_printf("file not opened!\n");
   16b2b:	83 ec 0c             	sub    $0xc,%esp
   16b2e:	68 09 9c 01 00       	push   $0x19c09
   16b33:	e8 2a 1e 00 00       	call   18962 <log_printf>
   16b38:	83 c4 10             	add    $0x10,%esp
    return -1;
   16b3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b40:	eb 69                	jmp    16bab <sys_write+0xc2>
  }

  //2.判断文件的读写模式
  if (file->mode == O_RDONLY) { //文件只读，不可写
   16b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16b45:	8b 40 34             	mov    0x34(%eax),%eax
   16b48:	85 c0                	test   %eax,%eax
   16b4a:	75 17                	jne    16b63 <sys_write+0x7a>
    log_printf("file is read only!\n");
   16b4c:	83 ec 0c             	sub    $0xc,%esp
   16b4f:	68 30 9c 01 00       	push   $0x19c30
   16b54:	e8 09 1e 00 00       	call   18962 <log_printf>
   16b59:	83 c4 10             	add    $0x10,%esp
    return -1;
   16b5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b61:	eb 48                	jmp    16bab <sys_write+0xc2>
  }

  //3.获取文件对应的文件系统，并执行写操作
  fs_t *fs = file->fs;
   16b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16b66:	8b 40 28             	mov    0x28(%eax),%eax
   16b69:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   16b6c:	83 ec 0c             	sub    $0xc,%esp
   16b6f:	ff 75 f0             	push   -0x10(%ebp)
   16b72:	e8 c2 fc ff ff       	call   16839 <fs_protect>
   16b77:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->write(buf, len, file);
   16b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b7d:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16b83:	8b 40 10             	mov    0x10(%eax),%eax
   16b86:	83 ec 04             	sub    $0x4,%esp
   16b89:	ff 75 f4             	push   -0xc(%ebp)
   16b8c:	ff 75 10             	push   0x10(%ebp)
   16b8f:	ff 75 0c             	push   0xc(%ebp)
   16b92:	ff d0                	call   *%eax
   16b94:	83 c4 10             	add    $0x10,%esp
   16b97:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16b9a:	83 ec 0c             	sub    $0xc,%esp
   16b9d:	ff 75 f0             	push   -0x10(%ebp)
   16ba0:	e8 bf fc ff ff       	call   16864 <fs_unprotect>
   16ba5:	83 c4 10             	add    $0x10,%esp
  
  return err;
   16ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   16bab:	c9                   	leave  
   16bac:	c3                   	ret    

00016bad <sys_lseek>:
 * @param fd
 * @param offset
 * @param pos
 * @return int
 */
int sys_lseek(int fd, int offset, int dir) {
   16bad:	55                   	push   %ebp
   16bae:	89 e5                	mov    %esp,%ebp
   16bb0:	83 ec 18             	sub    $0x18,%esp

  if (is_fd_bad(fd)) {
   16bb3:	ff 75 08             	push   0x8(%ebp)
   16bb6:	e8 49 fb ff ff       	call   16704 <is_fd_bad>
   16bbb:	83 c4 04             	add    $0x4,%esp
   16bbe:	85 c0                	test   %eax,%eax
   16bc0:	74 07                	je     16bc9 <sys_lseek+0x1c>
    return -1;
   16bc2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bc7:	eb 77                	jmp    16c40 <sys_lseek+0x93>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   16bc9:	83 ec 0c             	sub    $0xc,%esp
   16bcc:	ff 75 08             	push   0x8(%ebp)
   16bcf:	e8 e5 a6 ff ff       	call   112b9 <task_file>
   16bd4:	83 c4 10             	add    $0x10,%esp
   16bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   16bda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16bde:	75 17                	jne    16bf7 <sys_lseek+0x4a>
    log_printf("file not opened!\n");
   16be0:	83 ec 0c             	sub    $0xc,%esp
   16be3:	68 09 9c 01 00       	push   $0x19c09
   16be8:	e8 75 1d 00 00       	call   18962 <log_printf>
   16bed:	83 c4 10             	add    $0x10,%esp
    return -1;
   16bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bf5:	eb 49                	jmp    16c40 <sys_lseek+0x93>
  }


  //2.获取文件对应的文件系统，并执行偏移操作
  fs_t *fs = file->fs;
   16bf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16bfa:	8b 40 28             	mov    0x28(%eax),%eax
   16bfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   16c00:	83 ec 0c             	sub    $0xc,%esp
   16c03:	ff 75 f0             	push   -0x10(%ebp)
   16c06:	e8 2e fc ff ff       	call   16839 <fs_protect>
   16c0b:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->seek(file, offset, dir);
   16c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c11:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16c17:	8b 40 18             	mov    0x18(%eax),%eax
   16c1a:	8b 55 0c             	mov    0xc(%ebp),%edx
   16c1d:	83 ec 04             	sub    $0x4,%esp
   16c20:	ff 75 10             	push   0x10(%ebp)
   16c23:	52                   	push   %edx
   16c24:	ff 75 f4             	push   -0xc(%ebp)
   16c27:	ff d0                	call   *%eax
   16c29:	83 c4 10             	add    $0x10,%esp
   16c2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16c2f:	83 ec 0c             	sub    $0xc,%esp
   16c32:	ff 75 f0             	push   -0x10(%ebp)
   16c35:	e8 2a fc ff ff       	call   16864 <fs_unprotect>
   16c3a:	83 c4 10             	add    $0x10,%esp
  
  return err;
   16c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   16c40:	c9                   	leave  
   16c41:	c3                   	ret    

00016c42 <sys_close>:
 * @brief 关闭文件
 *
 * @param fd
 * @return int
 */
int sys_close(int fd) {
   16c42:	55                   	push   %ebp
   16c43:	89 e5                	mov    %esp,%ebp
   16c45:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   16c48:	ff 75 08             	push   0x8(%ebp)
   16c4b:	e8 b4 fa ff ff       	call   16704 <is_fd_bad>
   16c50:	83 c4 04             	add    $0x4,%esp
   16c53:	85 c0                	test   %eax,%eax
   16c55:	74 1a                	je     16c71 <sys_close+0x2f>
    log_printf("file error");
   16c57:	83 ec 0c             	sub    $0xc,%esp
   16c5a:	68 44 9c 01 00       	push   $0x19c44
   16c5f:	e8 fe 1c 00 00       	call   18962 <log_printf>
   16c64:	83 c4 10             	add    $0x10,%esp
    return -1;
   16c67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c6c:	e9 c8 00 00 00       	jmp    16d39 <sys_close+0xf7>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   16c71:	83 ec 0c             	sub    $0xc,%esp
   16c74:	ff 75 08             	push   0x8(%ebp)
   16c77:	e8 3d a6 ff ff       	call   112b9 <task_file>
   16c7c:	83 c4 10             	add    $0x10,%esp
   16c7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16c82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16c86:	75 1a                	jne    16ca2 <sys_close+0x60>
    log_printf("file not opened!\n");
   16c88:	83 ec 0c             	sub    $0xc,%esp
   16c8b:	68 09 9c 01 00       	push   $0x19c09
   16c90:	e8 cd 1c 00 00       	call   18962 <log_printf>
   16c95:	83 c4 10             	add    $0x10,%esp
    return -1;
   16c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c9d:	e9 97 00 00 00       	jmp    16d39 <sys_close+0xf7>
  }

  ASSERT(file->ref > 0);  //文件必须为打开状态
   16ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16ca5:	8b 40 24             	mov    0x24(%eax),%eax
   16ca8:	85 c0                	test   %eax,%eax
   16caa:	7f 1c                	jg     16cc8 <sys_close+0x86>
   16cac:	68 4f 9c 01 00       	push   $0x19c4f
   16cb1:	68 a8 9d 01 00       	push   $0x19da8
   16cb6:	68 55 01 00 00       	push   $0x155
   16cbb:	68 60 9c 01 00       	push   $0x19c60
   16cc0:	e8 87 0f 00 00       	call   17c4c <pannic>
   16cc5:	83 c4 10             	add    $0x10,%esp

  //2.若当前文件只被一个进程引用则获取对应文件系统并执行关闭操作
  if (file->ref-- == 1) {
   16cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16ccb:	8b 40 24             	mov    0x24(%eax),%eax
   16cce:	8d 48 ff             	lea    -0x1(%eax),%ecx
   16cd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   16cd4:	89 4a 24             	mov    %ecx,0x24(%edx)
   16cd7:	83 f8 01             	cmp    $0x1,%eax
   16cda:	75 4a                	jne    16d26 <sys_close+0xe4>
    fs_t *fs = file->fs;
   16cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16cdf:	8b 40 28             	mov    0x28(%eax),%eax
   16ce2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   16ce5:	83 ec 0c             	sub    $0xc,%esp
   16ce8:	ff 75 f0             	push   -0x10(%ebp)
   16ceb:	e8 49 fb ff ff       	call   16839 <fs_protect>
   16cf0:	83 c4 10             	add    $0x10,%esp
    fs->op->close(file);
   16cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16cf6:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16cfc:	8b 40 14             	mov    0x14(%eax),%eax
   16cff:	83 ec 0c             	sub    $0xc,%esp
   16d02:	ff 75 f4             	push   -0xc(%ebp)
   16d05:	ff d0                	call   *%eax
   16d07:	83 c4 10             	add    $0x10,%esp
    fs_protect(fs);
   16d0a:	83 ec 0c             	sub    $0xc,%esp
   16d0d:	ff 75 f0             	push   -0x10(%ebp)
   16d10:	e8 24 fb ff ff       	call   16839 <fs_protect>
   16d15:	83 c4 10             	add    $0x10,%esp

    //关闭文件后释放文件结构
    file_free(file);
   16d18:	83 ec 0c             	sub    $0xc,%esp
   16d1b:	ff 75 f4             	push   -0xc(%ebp)
   16d1e:	e8 c7 f8 ff ff       	call   165ea <file_free>
   16d23:	83 c4 10             	add    $0x10,%esp
  }

  //3.当前文件还被其它进程所引用，只在当前进程的打开文件表中释放该文件即可
  task_remove_fd(fd);
   16d26:	83 ec 0c             	sub    $0xc,%esp
   16d29:	ff 75 08             	push   0x8(%ebp)
   16d2c:	e8 0b a6 ff ff       	call   1133c <task_remove_fd>
   16d31:	83 c4 10             	add    $0x10,%esp

  return 0;
   16d34:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16d39:	c9                   	leave  
   16d3a:	c3                   	ret    

00016d3b <sys_fstat>:
 *
 * @param fd
 * @param st
 * @return int
 */
int sys_fstat(int fd, struct stat *st) { 
   16d3b:	55                   	push   %ebp
   16d3c:	89 e5                	mov    %esp,%ebp
   16d3e:	83 ec 18             	sub    $0x18,%esp
  
   if (is_fd_bad(fd)) {
   16d41:	ff 75 08             	push   0x8(%ebp)
   16d44:	e8 bb f9 ff ff       	call   16704 <is_fd_bad>
   16d49:	83 c4 04             	add    $0x4,%esp
   16d4c:	85 c0                	test   %eax,%eax
   16d4e:	74 1a                	je     16d6a <sys_fstat+0x2f>
    log_printf("file error");
   16d50:	83 ec 0c             	sub    $0xc,%esp
   16d53:	68 44 9c 01 00       	push   $0x19c44
   16d58:	e8 05 1c 00 00       	call   18962 <log_printf>
   16d5d:	83 c4 10             	add    $0x10,%esp
    return -1;
   16d60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d65:	e9 85 00 00 00       	jmp    16def <sys_fstat+0xb4>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   16d6a:	83 ec 0c             	sub    $0xc,%esp
   16d6d:	ff 75 08             	push   0x8(%ebp)
   16d70:	e8 44 a5 ff ff       	call   112b9 <task_file>
   16d75:	83 c4 10             	add    $0x10,%esp
   16d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16d7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16d7f:	75 17                	jne    16d98 <sys_fstat+0x5d>
    log_printf("file not opened!\n");
   16d81:	83 ec 0c             	sub    $0xc,%esp
   16d84:	68 09 9c 01 00       	push   $0x19c09
   16d89:	e8 d4 1b 00 00       	call   18962 <log_printf>
   16d8e:	83 c4 10             	add    $0x10,%esp
    return -1;
   16d91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d96:	eb 57                	jmp    16def <sys_fstat+0xb4>
  }

  //2.获取对应文件系统进行状态获取操作
  fs_t *fs = file->fs;
   16d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16d9b:	8b 40 28             	mov    0x28(%eax),%eax
   16d9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kernel_memset(st, 0, sizeof(struct stat));
   16da1:	83 ec 04             	sub    $0x4,%esp
   16da4:	6a 48                	push   $0x48
   16da6:	6a 00                	push   $0x0
   16da8:	ff 75 0c             	push   0xc(%ebp)
   16dab:	e8 b5 13 00 00       	call   18165 <kernel_memset>
   16db0:	83 c4 10             	add    $0x10,%esp
  fs_protect(fs);
   16db3:	83 ec 0c             	sub    $0xc,%esp
   16db6:	ff 75 f0             	push   -0x10(%ebp)
   16db9:	e8 7b fa ff ff       	call   16839 <fs_protect>
   16dbe:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->stat(file, st);
   16dc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16dc4:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16dca:	8b 40 1c             	mov    0x1c(%eax),%eax
   16dcd:	83 ec 08             	sub    $0x8,%esp
   16dd0:	ff 75 0c             	push   0xc(%ebp)
   16dd3:	ff 75 f4             	push   -0xc(%ebp)
   16dd6:	ff d0                	call   *%eax
   16dd8:	83 c4 10             	add    $0x10,%esp
   16ddb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16dde:	83 ec 0c             	sub    $0xc,%esp
   16de1:	ff 75 f0             	push   -0x10(%ebp)
   16de4:	e8 7b fa ff ff       	call   16864 <fs_unprotect>
   16de9:	83 c4 10             	add    $0x10,%esp


  return err;
   16dec:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   16def:	c9                   	leave  
   16df0:	c3                   	ret    

00016df1 <sys_isatty>:
 * @brief
 *
 * @param fd
 * @return int
 */
int sys_isatty(int fd) { 
   16df1:	55                   	push   %ebp
   16df2:	89 e5                	mov    %esp,%ebp
   16df4:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   16df7:	ff 75 08             	push   0x8(%ebp)
   16dfa:	e8 05 f9 ff ff       	call   16704 <is_fd_bad>
   16dff:	83 c4 04             	add    $0x4,%esp
   16e02:	85 c0                	test   %eax,%eax
   16e04:	74 17                	je     16e1d <sys_isatty+0x2c>
    log_printf("file error");
   16e06:	83 ec 0c             	sub    $0xc,%esp
   16e09:	68 44 9c 01 00       	push   $0x19c44
   16e0e:	e8 4f 1b 00 00       	call   18962 <log_printf>
   16e13:	83 c4 10             	add    $0x10,%esp
    return -1;
   16e16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e1b:	eb 3d                	jmp    16e5a <sys_isatty+0x69>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   16e1d:	83 ec 0c             	sub    $0xc,%esp
   16e20:	ff 75 08             	push   0x8(%ebp)
   16e23:	e8 91 a4 ff ff       	call   112b9 <task_file>
   16e28:	83 c4 10             	add    $0x10,%esp
   16e2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16e2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16e32:	75 17                	jne    16e4b <sys_isatty+0x5a>
    log_printf("file not opened!\n");
   16e34:	83 ec 0c             	sub    $0xc,%esp
   16e37:	68 09 9c 01 00       	push   $0x19c09
   16e3c:	e8 21 1b 00 00       	call   18962 <log_printf>
   16e41:	83 c4 10             	add    $0x10,%esp
    return -1;
   16e44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e49:	eb 0f                	jmp    16e5a <sys_isatty+0x69>
  }

  return file->type == FILE_TTY;
   16e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e4e:	8b 40 20             	mov    0x20(%eax),%eax
   16e51:	83 f8 01             	cmp    $0x1,%eax
   16e54:	0f 94 c0             	sete   %al
   16e57:	0f b6 c0             	movzbl %al,%eax
}
   16e5a:	c9                   	leave  
   16e5b:	c3                   	ret    

00016e5c <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 *
 * @param fd 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int fd) {
   16e5c:	55                   	push   %ebp
   16e5d:	89 e5                	mov    %esp,%ebp
   16e5f:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   16e62:	ff 75 08             	push   0x8(%ebp)
   16e65:	e8 9a f8 ff ff       	call   16704 <is_fd_bad>
   16e6a:	83 c4 04             	add    $0x4,%esp
   16e6d:	85 c0                	test   %eax,%eax
   16e6f:	74 1a                	je     16e8b <sys_dup+0x2f>
    log_printf("fd %d is not valid.", fd);
   16e71:	83 ec 08             	sub    $0x8,%esp
   16e74:	ff 75 08             	push   0x8(%ebp)
   16e77:	68 91 9c 01 00       	push   $0x19c91
   16e7c:	e8 e1 1a 00 00       	call   18962 <log_printf>
   16e81:	83 c4 10             	add    $0x10,%esp
    return -1;
   16e84:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e89:	eb 6d                	jmp    16ef8 <sys_dup+0x9c>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   16e8b:	83 ec 0c             	sub    $0xc,%esp
   16e8e:	ff 75 08             	push   0x8(%ebp)
   16e91:	e8 23 a4 ff ff       	call   112b9 <task_file>
   16e96:	83 c4 10             	add    $0x10,%esp
   16e99:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16e9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16ea0:	75 17                	jne    16eb9 <sys_dup+0x5d>
    log_printf("file not opend!\n");
   16ea2:	83 ec 0c             	sub    $0xc,%esp
   16ea5:	68 a5 9c 01 00       	push   $0x19ca5
   16eaa:	e8 b3 1a 00 00       	call   18962 <log_printf>
   16eaf:	83 c4 10             	add    $0x10,%esp
    return -1;
   16eb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16eb7:	eb 3f                	jmp    16ef8 <sys_dup+0x9c>
  }

  // 2.在打开文件表中新分配一项给该文件指针
  int new_fd = task_alloc_fd(file);
   16eb9:	83 ec 0c             	sub    $0xc,%esp
   16ebc:	ff 75 f4             	push   -0xc(%ebp)
   16ebf:	e8 25 a4 ff ff       	call   112e9 <task_alloc_fd>
   16ec4:	83 c4 10             	add    $0x10,%esp
   16ec7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (new_fd < 0) {
   16eca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16ece:	79 17                	jns    16ee7 <sys_dup+0x8b>
    log_printf("no task file avaliable\n");
   16ed0:	83 ec 0c             	sub    $0xc,%esp
   16ed3:	68 b6 9c 01 00       	push   $0x19cb6
   16ed8:	e8 85 1a 00 00       	call   18962 <log_printf>
   16edd:	83 c4 10             	add    $0x10,%esp
    return -1;
   16ee0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16ee5:	eb 11                	jmp    16ef8 <sys_dup+0x9c>
  }

  file_inc_ref(file);  // 分配成功，该文件引用次数加一
   16ee7:	83 ec 0c             	sub    $0xc,%esp
   16eea:	ff 75 f4             	push   -0xc(%ebp)
   16eed:	e8 3a f7 ff ff       	call   1662c <file_inc_ref>
   16ef2:	83 c4 10             	add    $0x10,%esp
  return fd;
   16ef5:	8b 45 08             	mov    0x8(%ebp),%eax
}
   16ef8:	c9                   	leave  
   16ef9:	c3                   	ret    

00016efa <sys_opendir>:
 * 
 * @param path 
 * @param dir 
 * @return int 
 */
int sys_opendir(const char *path, DIR *dir) {
   16efa:	55                   	push   %ebp
   16efb:	89 e5                	mov    %esp,%ebp
   16efd:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统打开该目录
  fs_protect(root_fs);
   16f00:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16f05:	83 ec 0c             	sub    $0xc,%esp
   16f08:	50                   	push   %eax
   16f09:	e8 2b f9 ff ff       	call   16839 <fs_protect>
   16f0e:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->opendir(root_fs, path, dir);
   16f11:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16f16:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16f1c:	8b 40 24             	mov    0x24(%eax),%eax
   16f1f:	8b 15 04 6e 07 00    	mov    0x76e04,%edx
   16f25:	83 ec 04             	sub    $0x4,%esp
   16f28:	ff 75 0c             	push   0xc(%ebp)
   16f2b:	ff 75 08             	push   0x8(%ebp)
   16f2e:	52                   	push   %edx
   16f2f:	ff d0                	call   *%eax
   16f31:	83 c4 10             	add    $0x10,%esp
   16f34:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   16f37:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16f3c:	83 ec 0c             	sub    $0xc,%esp
   16f3f:	50                   	push   %eax
   16f40:	e8 1f f9 ff ff       	call   16864 <fs_unprotect>
   16f45:	83 c4 10             	add    $0x10,%esp
  return err;
   16f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16f4b:	c9                   	leave  
   16f4c:	c3                   	ret    

00016f4d <sys_readdir>:
 * 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int sys_readdir(DIR *dir, struct dirent *dirent) {
   16f4d:	55                   	push   %ebp
   16f4e:	89 e5                	mov    %esp,%ebp
   16f50:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统遍历该目录
  fs_protect(root_fs);
   16f53:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16f58:	83 ec 0c             	sub    $0xc,%esp
   16f5b:	50                   	push   %eax
   16f5c:	e8 d8 f8 ff ff       	call   16839 <fs_protect>
   16f61:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->readdir(root_fs, dir, dirent);
   16f64:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16f69:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16f6f:	8b 40 28             	mov    0x28(%eax),%eax
   16f72:	8b 15 04 6e 07 00    	mov    0x76e04,%edx
   16f78:	83 ec 04             	sub    $0x4,%esp
   16f7b:	ff 75 0c             	push   0xc(%ebp)
   16f7e:	ff 75 08             	push   0x8(%ebp)
   16f81:	52                   	push   %edx
   16f82:	ff d0                	call   *%eax
   16f84:	83 c4 10             	add    $0x10,%esp
   16f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   16f8a:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16f8f:	83 ec 0c             	sub    $0xc,%esp
   16f92:	50                   	push   %eax
   16f93:	e8 cc f8 ff ff       	call   16864 <fs_unprotect>
   16f98:	83 c4 10             	add    $0x10,%esp
  return err;
   16f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16f9e:	c9                   	leave  
   16f9f:	c3                   	ret    

00016fa0 <sys_closedir>:
 * @brief 关闭目录
 * 
 * @param dir 
 * @return int 
 */
int sys_closedir(DIR *dir) {
   16fa0:	55                   	push   %ebp
   16fa1:	89 e5                	mov    %esp,%ebp
   16fa3:	83 ec 18             	sub    $0x18,%esp
  // 使用该文件系统关闭该目录
  fs_protect(root_fs);
   16fa6:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16fab:	83 ec 0c             	sub    $0xc,%esp
   16fae:	50                   	push   %eax
   16faf:	e8 85 f8 ff ff       	call   16839 <fs_protect>
   16fb4:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->closedir(root_fs, dir);
   16fb7:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16fbc:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16fc2:	8b 40 2c             	mov    0x2c(%eax),%eax
   16fc5:	8b 15 04 6e 07 00    	mov    0x76e04,%edx
   16fcb:	83 ec 08             	sub    $0x8,%esp
   16fce:	ff 75 08             	push   0x8(%ebp)
   16fd1:	52                   	push   %edx
   16fd2:	ff d0                	call   *%eax
   16fd4:	83 c4 10             	add    $0x10,%esp
   16fd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   16fda:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16fdf:	83 ec 0c             	sub    $0xc,%esp
   16fe2:	50                   	push   %eax
   16fe3:	e8 7c f8 ff ff       	call   16864 <fs_unprotect>
   16fe8:	83 c4 10             	add    $0x10,%esp
  return err;
   16feb:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
   16fee:	c9                   	leave  
   16fef:	c3                   	ret    

00016ff0 <sys_ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   16ff0:	55                   	push   %ebp
   16ff1:	89 e5                	mov    %esp,%ebp
   16ff3:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   16ff6:	ff 75 08             	push   0x8(%ebp)
   16ff9:	e8 06 f7 ff ff       	call   16704 <is_fd_bad>
   16ffe:	83 c4 04             	add    $0x4,%esp
   17001:	85 c0                	test   %eax,%eax
   17003:	74 1a                	je     1701f <sys_ioctl+0x2f>
    log_printf("fd %d is not valid.", fd);
   17005:	83 ec 08             	sub    $0x8,%esp
   17008:	ff 75 08             	push   0x8(%ebp)
   1700b:	68 91 9c 01 00       	push   $0x19c91
   17010:	e8 4d 19 00 00       	call   18962 <log_printf>
   17015:	83 c4 10             	add    $0x10,%esp
    return -1;
   17018:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1701d:	eb 76                	jmp    17095 <sys_ioctl+0xa5>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   1701f:	83 ec 0c             	sub    $0xc,%esp
   17022:	ff 75 08             	push   0x8(%ebp)
   17025:	e8 8f a2 ff ff       	call   112b9 <task_file>
   1702a:	83 c4 10             	add    $0x10,%esp
   1702d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   17030:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17034:	75 17                	jne    1704d <sys_ioctl+0x5d>
    log_printf("file not opend!\n");
   17036:	83 ec 0c             	sub    $0xc,%esp
   17039:	68 a5 9c 01 00       	push   $0x19ca5
   1703e:	e8 1f 19 00 00       	call   18962 <log_printf>
   17043:	83 c4 10             	add    $0x10,%esp
    return -1;
   17046:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1704b:	eb 48                	jmp    17095 <sys_ioctl+0xa5>
  }

  fs_t *fs = file->fs;
   1704d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17050:	8b 40 28             	mov    0x28(%eax),%eax
   17053:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   17056:	83 ec 0c             	sub    $0xc,%esp
   17059:	ff 75 f0             	push   -0x10(%ebp)
   1705c:	e8 d8 f7 ff ff       	call   16839 <fs_protect>
   17061:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->ioctl(file, cmd, arg0, arg1);
   17064:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17067:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1706d:	8b 40 20             	mov    0x20(%eax),%eax
   17070:	ff 75 14             	push   0x14(%ebp)
   17073:	ff 75 10             	push   0x10(%ebp)
   17076:	ff 75 0c             	push   0xc(%ebp)
   17079:	ff 75 f4             	push   -0xc(%ebp)
   1707c:	ff d0                	call   *%eax
   1707e:	83 c4 10             	add    $0x10,%esp
   17081:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   17084:	83 ec 0c             	sub    $0xc,%esp
   17087:	ff 75 f0             	push   -0x10(%ebp)
   1708a:	e8 d5 f7 ff ff       	call   16864 <fs_unprotect>
   1708f:	83 c4 10             	add    $0x10,%esp

  return err;
   17092:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17095:	c9                   	leave  
   17096:	c3                   	ret    

00017097 <mount_list_init>:

/**
 * @brief 初始化free_list和mount_list
 *
 */
static void mount_list_init(void) {
   17097:	55                   	push   %ebp
   17098:	89 e5                	mov    %esp,%ebp
   1709a:	83 ec 18             	sub    $0x18,%esp
  list_init(&free_list);
   1709d:	83 ec 0c             	sub    $0xc,%esp
   170a0:	68 f8 6d 07 00       	push   $0x76df8
   170a5:	e8 e7 f5 ff ff       	call   16691 <list_init>
   170aa:	83 c4 10             	add    $0x10,%esp
  // 将全局文件系统加入到free_list，等待被挂载
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   170ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   170b4:	eb 28                	jmp    170de <mount_list_init+0x47>
    list_insert_first(&free_list, &(fs_table[i].node));
   170b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170b9:	69 c0 4c 02 00 00    	imul   $0x24c,%eax,%eax
   170bf:	05 10 02 00 00       	add    $0x210,%eax
   170c4:	05 00 57 07 00       	add    $0x75700,%eax
   170c9:	83 ec 08             	sub    $0x8,%esp
   170cc:	50                   	push   %eax
   170cd:	68 f8 6d 07 00       	push   $0x76df8
   170d2:	e8 13 15 00 00       	call   185ea <list_insert_first>
   170d7:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   170da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   170de:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   170e2:	7e d2                	jle    170b6 <mount_list_init+0x1f>
  }

  list_init(&mounted_list);
   170e4:	83 ec 0c             	sub    $0xc,%esp
   170e7:	68 e0 56 07 00       	push   $0x756e0
   170ec:	e8 a0 f5 ff ff       	call   16691 <list_init>
   170f1:	83 c4 10             	add    $0x10,%esp
}
   170f4:	90                   	nop
   170f5:	c9                   	leave  
   170f6:	c3                   	ret    

000170f7 <get_fs_op>:
 *
 * @param type
 * @param major
 * @return fs_op_t*
 */
static fs_op_t *get_fs_op(fs_type_t type, int major) {
   170f7:	55                   	push   %ebp
   170f8:	89 e5                	mov    %esp,%ebp
  switch (type) {
   170fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   170fe:	74 08                	je     17108 <get_fs_op+0x11>
   17100:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   17104:	74 09                	je     1710f <get_fs_op+0x18>
   17106:	eb 0e                	jmp    17116 <get_fs_op+0x1f>
    case FS_DEVFS:
      return &devfs_op;
   17108:	b8 00 b1 01 00       	mov    $0x1b100,%eax
   1710d:	eb 0c                	jmp    1711b <get_fs_op+0x24>
      break;
    case FS_FAT16:
      return &fatfs_op;
   1710f:	b8 40 b1 01 00       	mov    $0x1b140,%eax
   17114:	eb 05                	jmp    1711b <get_fs_op+0x24>
      break;
    default:
      return 0;
   17116:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
}
   1711b:	5d                   	pop    %ebp
   1711c:	c3                   	ret    

0001711d <mount>:
 * @param dev_major 具体文件的主设备号
 * @param dev_minor 具体文件的次设备号
 * @return fs_t*
 */
static fs_t *mount(fs_type_t type, const char *mount_point, int dev_major,
                   int dev_minor) {
   1711d:	55                   	push   %ebp
   1711e:	89 e5                	mov    %esp,%ebp
   17120:	83 ec 28             	sub    $0x28,%esp
  fs_t *fs = (fs_t *)0;
   17123:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  log_printf("mount file system, name: %s, dev: %x\n", mount_point, dev_major);
   1712a:	83 ec 04             	sub    $0x4,%esp
   1712d:	ff 75 10             	push   0x10(%ebp)
   17130:	ff 75 0c             	push   0xc(%ebp)
   17133:	68 d0 9c 01 00       	push   $0x19cd0
   17138:	e8 25 18 00 00       	call   18962 <log_printf>
   1713d:	83 c4 10             	add    $0x10,%esp

  // 1.检查当前文件系统是否已被挂载
  list_node_t *curr = list_get_first(&mounted_list);
   17140:	83 ec 0c             	sub    $0xc,%esp
   17143:	68 e0 56 07 00       	push   $0x756e0
   17148:	e8 8b f5 ff ff       	call   166d8 <list_get_first>
   1714d:	83 c4 10             	add    $0x10,%esp
   17150:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   17153:	eb 59                	jmp    171ae <mount+0x91>
    fs_t *fs = list_node_parent(curr, fs_t, node);
   17155:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17159:	74 0a                	je     17165 <mount+0x48>
   1715b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1715e:	2d 10 02 00 00       	sub    $0x210,%eax
   17163:	eb 05                	jmp    1716a <mount+0x4d>
   17165:	b8 00 00 00 00       	mov    $0x0,%eax
   1716a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE) ==
   1716d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17170:	83 ec 04             	sub    $0x4,%esp
   17173:	68 00 02 00 00       	push   $0x200
   17178:	ff 75 0c             	push   0xc(%ebp)
   1717b:	50                   	push   %eax
   1717c:	e8 df 0e 00 00       	call   18060 <kernel_strncmp>
   17181:	83 c4 10             	add    $0x10,%esp
   17184:	85 c0                	test   %eax,%eax
   17186:	75 15                	jne    1719d <mount+0x80>
        0) {
      log_printf("fs already mounted!\n");
   17188:	83 ec 0c             	sub    $0xc,%esp
   1718b:	68 f6 9c 01 00       	push   $0x19cf6
   17190:	e8 cd 17 00 00       	call   18962 <log_printf>
   17195:	83 c4 10             	add    $0x10,%esp
      goto mount_failed;
   17198:	e9 11 01 00 00       	jmp    172ae <mount+0x191>
    }

    curr = list_node_next(curr);
   1719d:	83 ec 0c             	sub    $0xc,%esp
   171a0:	ff 75 f0             	push   -0x10(%ebp)
   171a3:	e8 bc f4 ff ff       	call   16664 <list_node_next>
   171a8:	83 c4 10             	add    $0x10,%esp
   171ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   171ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   171b2:	75 a1                	jne    17155 <mount+0x38>
  }

  // 2.从空闲链表中取下一个待挂载的fs对象进行挂载
  list_node_t *free_node = list_remove_first(&free_list);
   171b4:	83 ec 0c             	sub    $0xc,%esp
   171b7:	68 f8 6d 07 00       	push   $0x76df8
   171bc:	e8 43 15 00 00       	call   18704 <list_remove_first>
   171c1:	83 c4 10             	add    $0x10,%esp
   171c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!free_node) {
   171c7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   171cb:	75 15                	jne    171e2 <mount+0xc5>
    log_printf("no free fs, mount failed!\n");
   171cd:	83 ec 0c             	sub    $0xc,%esp
   171d0:	68 0b 9d 01 00       	push   $0x19d0b
   171d5:	e8 88 17 00 00       	call   18962 <log_printf>
   171da:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   171dd:	e9 cc 00 00 00       	jmp    172ae <mount+0x191>
  }
  fs = list_node_parent(free_node, fs_t, node);
   171e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   171e6:	74 0a                	je     171f2 <mount+0xd5>
   171e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   171eb:	2d 10 02 00 00       	sub    $0x210,%eax
   171f0:	eb 05                	jmp    171f7 <mount+0xda>
   171f2:	b8 00 00 00 00       	mov    $0x0,%eax
   171f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_memset(fs, 0, sizeof(fs_t));
   171fa:	83 ec 04             	sub    $0x4,%esp
   171fd:	68 4c 02 00 00       	push   $0x24c
   17202:	6a 00                	push   $0x0
   17204:	ff 75 f4             	push   -0xc(%ebp)
   17207:	e8 59 0f 00 00       	call   18165 <kernel_memset>
   1720c:	83 c4 10             	add    $0x10,%esp
  kernel_strncpy(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE);
   1720f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17212:	83 ec 04             	sub    $0x4,%esp
   17215:	68 00 02 00 00       	push   $0x200
   1721a:	ff 75 0c             	push   0xc(%ebp)
   1721d:	50                   	push   %eax
   1721e:	e8 ec 0d 00 00       	call   1800f <kernel_strncpy>
   17223:	83 c4 10             	add    $0x10,%esp

  // 3.获取该fs对象的操作函数表并交给该对象
  fs_op_t *op = get_fs_op(type, dev_major);
   17226:	83 ec 08             	sub    $0x8,%esp
   17229:	ff 75 10             	push   0x10(%ebp)
   1722c:	ff 75 08             	push   0x8(%ebp)
   1722f:	e8 c3 fe ff ff       	call   170f7 <get_fs_op>
   17234:	83 c4 10             	add    $0x10,%esp
   17237:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (!op) {
   1723a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1723e:	75 15                	jne    17255 <mount+0x138>
    log_printf("unsupported fs type: %du\n", type);
   17240:	83 ec 08             	sub    $0x8,%esp
   17243:	ff 75 08             	push   0x8(%ebp)
   17246:	68 26 9d 01 00       	push   $0x19d26
   1724b:	e8 12 17 00 00       	call   18962 <log_printf>
   17250:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17253:	eb 59                	jmp    172ae <mount+0x191>
  }
  fs->op = op;
   17255:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17258:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1725b:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)

  // 4.挂载该文件系统类型下具体的设备
  if (op->mount(fs, dev_major, dev_minor) < 0) {
   17261:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17264:	8b 00                	mov    (%eax),%eax
   17266:	83 ec 04             	sub    $0x4,%esp
   17269:	ff 75 14             	push   0x14(%ebp)
   1726c:	ff 75 10             	push   0x10(%ebp)
   1726f:	ff 75 f4             	push   -0xc(%ebp)
   17272:	ff d0                	call   *%eax
   17274:	83 c4 10             	add    $0x10,%esp
   17277:	85 c0                	test   %eax,%eax
   17279:	79 15                	jns    17290 <mount+0x173>
    log_printf("mount fs %s failed!\n", mount_point);
   1727b:	83 ec 08             	sub    $0x8,%esp
   1727e:	ff 75 0c             	push   0xc(%ebp)
   17281:	68 40 9d 01 00       	push   $0x19d40
   17286:	e8 d7 16 00 00       	call   18962 <log_printf>
   1728b:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   1728e:	eb 1e                	jmp    172ae <mount+0x191>
  }

  // 5.将该文件系统挂载到mounted_list上
  list_insert_last(&mounted_list, &fs->node);
   17290:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17293:	05 10 02 00 00       	add    $0x210,%eax
   17298:	83 ec 08             	sub    $0x8,%esp
   1729b:	50                   	push   %eax
   1729c:	68 e0 56 07 00       	push   $0x756e0
   172a1:	e8 cf 13 00 00       	call   18675 <list_insert_last>
   172a6:	83 c4 10             	add    $0x10,%esp

  return fs;
   172a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   172ac:	eb 24                	jmp    172d2 <mount+0x1b5>

// 挂载失败的异常处理
mount_failed:
  // fs不为空，证明已从free_list上取下，需要将其插回去
  if (fs) {
   172ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   172b2:	74 19                	je     172cd <mount+0x1b0>
    list_insert_last(&free_list, &fs->node);
   172b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   172b7:	05 10 02 00 00       	add    $0x210,%eax
   172bc:	83 ec 08             	sub    $0x8,%esp
   172bf:	50                   	push   %eax
   172c0:	68 f8 6d 07 00       	push   $0x76df8
   172c5:	e8 ab 13 00 00       	call   18675 <list_insert_last>
   172ca:	83 c4 10             	add    $0x10,%esp
  }
  return (fs_t *)0;
   172cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   172d2:	c9                   	leave  
   172d3:	c3                   	ret    

000172d4 <fs_init>:

/**
 * @brief 初始化文件系统
 *
 */
void fs_init(void) {
   172d4:	55                   	push   %ebp
   172d5:	89 e5                	mov    %esp,%ebp
   172d7:	83 ec 18             	sub    $0x18,%esp
  mount_list_init();
   172da:	e8 b8 fd ff ff       	call   17097 <mount_list_init>
  file_table_init();
   172df:	e8 4b f2 ff ff       	call   1652f <file_table_init>

  disk_init();
   172e4:	e8 6b d6 ff ff       	call   14954 <disk_init>

  fs_t *fs = mount(FS_DEVFS, "/dev", 0, 0);
   172e9:	6a 00                	push   $0x0
   172eb:	6a 00                	push   $0x0
   172ed:	68 55 9d 01 00       	push   $0x19d55
   172f2:	6a 00                	push   $0x0
   172f4:	e8 24 fe ff ff       	call   1711d <mount>
   172f9:	83 c4 10             	add    $0x10,%esp
   172fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT(fs != (fs_t *)0);
   172ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17303:	75 1c                	jne    17321 <fs_init+0x4d>
   17305:	68 5a 9d 01 00       	push   $0x19d5a
   1730a:	68 c0 9d 01 00       	push   $0x19dc0
   1730f:	68 77 02 00 00       	push   $0x277
   17314:	68 60 9c 01 00       	push   $0x19c60
   17319:	e8 2e 09 00 00       	call   17c4c <pannic>
   1731e:	83 c4 10             	add    $0x10,%esp

  root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   17321:	68 b1 00 00 00       	push   $0xb1
   17326:	6a 02                	push   $0x2
   17328:	68 6a 9d 01 00       	push   $0x19d6a
   1732d:	6a 01                	push   $0x1
   1732f:	e8 e9 fd ff ff       	call   1711d <mount>
   17334:	83 c4 10             	add    $0x10,%esp
   17337:	a3 04 6e 07 00       	mov    %eax,0x76e04
  ASSERT(root_fs != (fs_t *)0);
   1733c:	a1 04 6e 07 00       	mov    0x76e04,%eax
   17341:	85 c0                	test   %eax,%eax
   17343:	75 1c                	jne    17361 <fs_init+0x8d>
   17345:	68 70 9d 01 00       	push   $0x19d70
   1734a:	68 c0 9d 01 00       	push   $0x19dc0
   1734f:	68 7a 02 00 00       	push   $0x27a
   17354:	68 60 9c 01 00       	push   $0x19c60
   17359:	e8 ee 08 00 00       	call   17c4c <pannic>
   1735e:	83 c4 10             	add    $0x10,%esp
}
   17361:	90                   	nop
   17362:	c9                   	leave  
   17363:	c3                   	ret    

00017364 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   17364:	55                   	push   %ebp
   17365:	89 e5                	mov    %esp,%ebp
   17367:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   1736a:	8b 45 08             	mov    0x8(%ebp),%eax
   1736d:	8b 40 50             	mov    0x50(%eax),%eax
   17370:	85 c0                	test   %eax,%eax
   17372:	75 19                	jne    1738d <kernel_init+0x29>
   17374:	68 c8 9d 01 00       	push   $0x19dc8
   17379:	68 64 9e 01 00       	push   $0x19e64
   1737e:	6a 25                	push   $0x25
   17380:	68 ec 9d 01 00       	push   $0x19dec
   17385:	e8 c2 08 00 00       	call   17c4c <pannic>
   1738a:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   1738d:	e8 ce b4 ff ff       	call   12860 <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   17392:	e8 cd bc ff ff       	call   13064 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   17397:	e8 97 15 00 00       	call   18933 <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   1739c:	83 ec 0c             	sub    $0xc,%esp
   1739f:	ff 75 08             	push   0x8(%ebp)
   173a2:	e8 cf 98 ff ff       	call   10c76 <memory_init>
   173a7:	83 c4 10             	add    $0x10,%esp
    
    //6.初始化文件系统
    fs_init();
   173aa:	e8 25 ff ff ff       	call   172d4 <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   173af:	e8 10 df ff ff       	call   152c4 <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   173b4:	e8 59 a3 ff ff       	call   11712 <task_manager_init>
    
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   173b9:	90                   	nop
   173ba:	c9                   	leave  
   173bb:	c3                   	ret    

000173bc <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   173bc:	55                   	push   %ebp
   173bd:	89 e5                	mov    %esp,%ebp
   173bf:	56                   	push   %esi
   173c0:	53                   	push   %ebx
   173c1:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   173c4:	e8 e8 a5 ff ff       	call   119b1 <task_current>
   173c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   173cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   173d0:	75 19                	jne    173eb <move_to_first_task+0x2f>
   173d2:	68 21 9e 01 00       	push   $0x19e21
   173d7:	68 70 9e 01 00       	push   $0x19e70
   173dc:	6a 49                	push   $0x49
   173de:	68 ec 9d 01 00       	push   $0x19dec
   173e3:	e8 64 08 00 00       	call   17c4c <pannic>
   173e8:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   173eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   173ee:	83 c0 5c             	add    $0x5c,%eax
   173f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   173f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   173f7:	8b 40 50             	mov    0x50(%eax),%eax
   173fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
   173fd:	8b 52 38             	mov    0x38(%edx),%edx
   17400:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17403:	8b 49 24             	mov    0x24(%ecx),%ecx
   17406:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17409:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1740c:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1740f:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   17412:	50                   	push   %eax
   17413:	52                   	push   %edx
   17414:	51                   	push   %ecx
   17415:	53                   	push   %ebx
   17416:	56                   	push   %esi
   17417:	cf                   	iret   

        
    );
}
   17418:	90                   	nop
   17419:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1741c:	5b                   	pop    %ebx
   1741d:	5e                   	pop    %esi
   1741e:	5d                   	pop    %ebp
   1741f:	c3                   	ret    

00017420 <init_main>:


void init_main(void) {
   17420:	55                   	push   %ebp
   17421:	89 e5                	mov    %esp,%ebp
   17423:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   17426:	83 ec 0c             	sub    $0xc,%esp
   17429:	68 2b 9e 01 00       	push   $0x19e2b
   1742e:	e8 2f 15 00 00       	call   18962 <log_printf>
   17433:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: kbOS, Version: %s\n", OS_VERSION);
   17436:	83 ec 08             	sub    $0x8,%esp
   17439:	68 44 9e 01 00       	push   $0x19e44
   1743e:	68 4a 9e 01 00       	push   $0x19e4a
   17443:	e8 1a 15 00 00       	call   18962 <log_printf>
   17448:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   1744b:	e8 9f a3 ff ff       	call   117ef <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   17450:	e8 67 ff ff ff       	call   173bc <move_to_first_task>
   17455:	90                   	nop
   17456:	c9                   	leave  
   17457:	c3                   	ret    

00017458 <list_init>:
static inline void list_init(list_t *list) {
   17458:	55                   	push   %ebp
   17459:	89 e5                	mov    %esp,%ebp
   1745b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1745e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17462:	75 19                	jne    1747d <list_init+0x25>
   17464:	68 84 9e 01 00       	push   $0x19e84
   17469:	68 30 9f 01 00       	push   $0x19f30
   1746e:	6a 31                	push   $0x31
   17470:	68 98 9e 01 00       	push   $0x19e98
   17475:	e8 d2 07 00 00       	call   17c4c <pannic>
   1747a:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1747d:	8b 45 08             	mov    0x8(%ebp),%eax
   17480:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   17487:	8b 45 08             	mov    0x8(%ebp),%eax
   1748a:	8b 50 04             	mov    0x4(%eax),%edx
   1748d:	8b 45 08             	mov    0x8(%ebp),%eax
   17490:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   17492:	8b 45 08             	mov    0x8(%ebp),%eax
   17495:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1749c:	90                   	nop
   1749d:	c9                   	leave  
   1749e:	c3                   	ret    

0001749f <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1749f:	55                   	push   %ebp
   174a0:	89 e5                	mov    %esp,%ebp
   174a2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   174a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   174a9:	75 19                	jne    174c4 <list_is_empty+0x25>
   174ab:	68 84 9e 01 00       	push   $0x19e84
   174b0:	68 3c 9f 01 00       	push   $0x19f3c
   174b5:	6a 38                	push   $0x38
   174b7:	68 98 9e 01 00       	push   $0x19e98
   174bc:	e8 8b 07 00 00       	call   17c4c <pannic>
   174c1:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   174c4:	8b 45 08             	mov    0x8(%ebp),%eax
   174c7:	8b 40 08             	mov    0x8(%eax),%eax
   174ca:	85 c0                	test   %eax,%eax
   174cc:	0f 94 c0             	sete   %al
   174cf:	0f b6 c0             	movzbl %al,%eax
}
   174d2:	c9                   	leave  
   174d3:	c3                   	ret    

000174d4 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   174d4:	55                   	push   %ebp
   174d5:	89 e5                	mov    %esp,%ebp
   174d7:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   174da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   174de:	75 19                	jne    174f9 <mutex_init+0x25>
   174e0:	68 d6 9e 01 00       	push   $0x19ed6
   174e5:	68 24 9f 01 00       	push   $0x19f24
   174ea:	6a 15                	push   $0x15
   174ec:	68 ec 9e 01 00       	push   $0x19eec
   174f1:	e8 56 07 00 00       	call   17c4c <pannic>
   174f6:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   174f9:	8b 45 08             	mov    0x8(%ebp),%eax
   174fc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   17503:	8b 45 08             	mov    0x8(%ebp),%eax
   17506:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1750c:	8b 45 08             	mov    0x8(%ebp),%eax
   1750f:	83 c0 08             	add    $0x8,%eax
   17512:	83 ec 0c             	sub    $0xc,%esp
   17515:	50                   	push   %eax
   17516:	e8 3d ff ff ff       	call   17458 <list_init>
   1751b:	83 c4 10             	add    $0x10,%esp
}
   1751e:	90                   	nop
   1751f:	c9                   	leave  
   17520:	c3                   	ret    

00017521 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   17521:	55                   	push   %ebp
   17522:	89 e5                	mov    %esp,%ebp
   17524:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   17527:	e8 68 be ff ff       	call   13394 <idt_enter_protection>
   1752c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   1752f:	e8 7d a4 ff ff       	call   119b1 <task_current>
   17534:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   17537:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1753b:	75 10                	jne    1754d <mutex_lock+0x2c>
    idt_leave_protection(state);  // TODO:解锁
   1753d:	83 ec 0c             	sub    $0xc,%esp
   17540:	ff 75 f4             	push   -0xc(%ebp)
   17543:	e8 64 be ff ff       	call   133ac <idt_leave_protection>
   17548:	83 c4 10             	add    $0x10,%esp
    return;
   1754b:	eb 78                	jmp    175c5 <mutex_lock+0xa4>
  }

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   1754d:	8b 45 08             	mov    0x8(%ebp),%eax
   17550:	8b 40 04             	mov    0x4(%eax),%eax
   17553:	85 c0                	test   %eax,%eax
   17555:	75 19                	jne    17570 <mutex_lock+0x4f>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   17557:	8b 45 08             	mov    0x8(%ebp),%eax
   1755a:	8b 40 04             	mov    0x4(%eax),%eax
   1755d:	8d 50 01             	lea    0x1(%eax),%edx
   17560:	8b 45 08             	mov    0x8(%ebp),%eax
   17563:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   17566:	8b 45 08             	mov    0x8(%ebp),%eax
   17569:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1756c:	89 10                	mov    %edx,(%eax)
   1756e:	eb 47                	jmp    175b7 <mutex_lock+0x96>
  } else if (mutex->owner == curr) {
   17570:	8b 45 08             	mov    0x8(%ebp),%eax
   17573:	8b 00                	mov    (%eax),%eax
   17575:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17578:	75 11                	jne    1758b <mutex_lock+0x6a>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   1757a:	8b 45 08             	mov    0x8(%ebp),%eax
   1757d:	8b 40 04             	mov    0x4(%eax),%eax
   17580:	8d 50 01             	lea    0x1(%eax),%edx
   17583:	8b 45 08             	mov    0x8(%ebp),%eax
   17586:	89 50 04             	mov    %edx,0x4(%eax)
   17589:	eb 2c                	jmp    175b7 <mutex_lock+0x96>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   1758b:	83 ec 0c             	sub    $0xc,%esp
   1758e:	ff 75 f0             	push   -0x10(%ebp)
   17591:	e8 ab a3 ff ff       	call   11941 <task_set_unready>
   17596:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   17599:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1759c:	8d 50 54             	lea    0x54(%eax),%edx
   1759f:	8b 45 08             	mov    0x8(%ebp),%eax
   175a2:	83 c0 08             	add    $0x8,%eax
   175a5:	83 ec 08             	sub    $0x8,%esp
   175a8:	52                   	push   %edx
   175a9:	50                   	push   %eax
   175aa:	e8 c6 10 00 00       	call   18675 <list_insert_last>
   175af:	83 c4 10             	add    $0x10,%esp
    task_switch();
   175b2:	e8 04 a4 ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   175b7:	83 ec 0c             	sub    $0xc,%esp
   175ba:	ff 75 f4             	push   -0xc(%ebp)
   175bd:	e8 ea bd ff ff       	call   133ac <idt_leave_protection>
   175c2:	83 c4 10             	add    $0x10,%esp
}
   175c5:	c9                   	leave  
   175c6:	c3                   	ret    

000175c7 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   175c7:	55                   	push   %ebp
   175c8:	89 e5                	mov    %esp,%ebp
   175ca:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   175cd:	e8 c2 bd ff ff       	call   13394 <idt_enter_protection>
   175d2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   175d5:	e8 d7 a3 ff ff       	call   119b1 <task_current>
   175da:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   175dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   175e1:	75 13                	jne    175f6 <mutex_unlock+0x2f>
    idt_leave_protection(state);  // TODO:解锁
   175e3:	83 ec 0c             	sub    $0xc,%esp
   175e6:	ff 75 f4             	push   -0xc(%ebp)
   175e9:	e8 be bd ff ff       	call   133ac <idt_leave_protection>
   175ee:	83 c4 10             	add    $0x10,%esp
    return;
   175f1:	e9 9f 00 00 00       	jmp    17695 <mutex_unlock+0xce>
  }

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   175f6:	8b 45 08             	mov    0x8(%ebp),%eax
   175f9:	8b 00                	mov    (%eax),%eax
   175fb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   175fe:	0f 85 83 00 00 00    	jne    17687 <mutex_unlock+0xc0>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   17604:	8b 45 08             	mov    0x8(%ebp),%eax
   17607:	8b 40 04             	mov    0x4(%eax),%eax
   1760a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1760d:	8b 45 08             	mov    0x8(%ebp),%eax
   17610:	89 50 04             	mov    %edx,0x4(%eax)
   17613:	8b 45 08             	mov    0x8(%ebp),%eax
   17616:	8b 40 04             	mov    0x4(%eax),%eax
   17619:	85 c0                	test   %eax,%eax
   1761b:	75 6a                	jne    17687 <mutex_unlock+0xc0>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   1761d:	8b 45 08             	mov    0x8(%ebp),%eax
   17620:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   17626:	8b 45 08             	mov    0x8(%ebp),%eax
   17629:	83 c0 08             	add    $0x8,%eax
   1762c:	83 ec 0c             	sub    $0xc,%esp
   1762f:	50                   	push   %eax
   17630:	e8 6a fe ff ff       	call   1749f <list_is_empty>
   17635:	83 c4 10             	add    $0x10,%esp
   17638:	85 c0                	test   %eax,%eax
   1763a:	75 4b                	jne    17687 <mutex_unlock+0xc0>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1763c:	8b 45 08             	mov    0x8(%ebp),%eax
   1763f:	83 c0 08             	add    $0x8,%eax
   17642:	83 ec 0c             	sub    $0xc,%esp
   17645:	50                   	push   %eax
   17646:	e8 b9 10 00 00       	call   18704 <list_remove_first>
   1764b:	83 c4 10             	add    $0x10,%esp
   1764e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   17651:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17655:	74 08                	je     1765f <mutex_unlock+0x98>
   17657:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1765a:	83 e8 54             	sub    $0x54,%eax
   1765d:	eb 05                	jmp    17664 <mutex_unlock+0x9d>
   1765f:	b8 00 00 00 00       	mov    $0x0,%eax
   17664:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   17667:	8b 45 08             	mov    0x8(%ebp),%eax
   1766a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   17671:	8b 45 08             	mov    0x8(%ebp),%eax
   17674:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17677:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   17679:	83 ec 0c             	sub    $0xc,%esp
   1767c:	ff 75 e8             	push   -0x18(%ebp)
   1767f:	e8 7b a2 ff ff       	call   118ff <task_set_ready>
   17684:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   17687:	83 ec 0c             	sub    $0xc,%esp
   1768a:	ff 75 f4             	push   -0xc(%ebp)
   1768d:	e8 1a bd ff ff       	call   133ac <idt_leave_protection>
   17692:	83 c4 10             	add    $0x10,%esp
}
   17695:	c9                   	leave  
   17696:	c3                   	ret    

00017697 <list_init>:
static inline void list_init(list_t *list) {
   17697:	55                   	push   %ebp
   17698:	89 e5                	mov    %esp,%ebp
   1769a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1769d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   176a1:	75 19                	jne    176bc <list_init+0x25>
   176a3:	68 4c 9f 01 00       	push   $0x19f4c
   176a8:	68 f0 9f 01 00       	push   $0x19ff0
   176ad:	6a 31                	push   $0x31
   176af:	68 60 9f 01 00       	push   $0x19f60
   176b4:	e8 93 05 00 00       	call   17c4c <pannic>
   176b9:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   176bc:	8b 45 08             	mov    0x8(%ebp),%eax
   176bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   176c6:	8b 45 08             	mov    0x8(%ebp),%eax
   176c9:	8b 50 04             	mov    0x4(%eax),%edx
   176cc:	8b 45 08             	mov    0x8(%ebp),%eax
   176cf:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   176d1:	8b 45 08             	mov    0x8(%ebp),%eax
   176d4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   176db:	90                   	nop
   176dc:	c9                   	leave  
   176dd:	c3                   	ret    

000176de <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   176de:	55                   	push   %ebp
   176df:	89 e5                	mov    %esp,%ebp
   176e1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   176e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   176e8:	75 19                	jne    17703 <list_is_empty+0x25>
   176ea:	68 4c 9f 01 00       	push   $0x19f4c
   176ef:	68 fc 9f 01 00       	push   $0x19ffc
   176f4:	6a 38                	push   $0x38
   176f6:	68 60 9f 01 00       	push   $0x19f60
   176fb:	e8 4c 05 00 00       	call   17c4c <pannic>
   17700:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   17703:	8b 45 08             	mov    0x8(%ebp),%eax
   17706:	8b 40 08             	mov    0x8(%eax),%eax
   17709:	85 c0                	test   %eax,%eax
   1770b:	0f 94 c0             	sete   %al
   1770e:	0f b6 c0             	movzbl %al,%eax
}
   17711:	c9                   	leave  
   17712:	c3                   	ret    

00017713 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   17713:	55                   	push   %ebp
   17714:	89 e5                	mov    %esp,%ebp
   17716:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   17719:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1771d:	75 19                	jne    17738 <sem_init+0x25>
   1771f:	68 9e 9f 01 00       	push   $0x19f9e
   17724:	68 e4 9f 01 00       	push   $0x19fe4
   17729:	6a 18                	push   $0x18
   1772b:	68 b0 9f 01 00       	push   $0x19fb0
   17730:	e8 17 05 00 00       	call   17c4c <pannic>
   17735:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   17738:	8b 45 08             	mov    0x8(%ebp),%eax
   1773b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1773e:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17740:	8b 45 08             	mov    0x8(%ebp),%eax
   17743:	83 c0 04             	add    $0x4,%eax
   17746:	83 ec 0c             	sub    $0xc,%esp
   17749:	50                   	push   %eax
   1774a:	e8 48 ff ff ff       	call   17697 <list_init>
   1774f:	83 c4 10             	add    $0x10,%esp
}
   17752:	90                   	nop
   17753:	c9                   	leave  
   17754:	c3                   	ret    

00017755 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   17755:	55                   	push   %ebp
   17756:	89 e5                	mov    %esp,%ebp
   17758:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1775b:	e8 34 bc ff ff       	call   13394 <idt_enter_protection>
   17760:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   17763:	e8 49 a2 ff ff       	call   119b1 <task_current>
   17768:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   1776b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1776f:	75 10                	jne    17781 <sem_wait+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   17771:	83 ec 0c             	sub    $0xc,%esp
   17774:	ff 75 f4             	push   -0xc(%ebp)
   17777:	e8 30 bc ff ff       	call   133ac <idt_leave_protection>
   1777c:	83 c4 10             	add    $0x10,%esp
        return;
   1777f:	eb 52                	jmp    177d3 <sem_wait+0x7e>
    }

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   17781:	8b 45 08             	mov    0x8(%ebp),%eax
   17784:	8b 00                	mov    (%eax),%eax
   17786:	85 c0                	test   %eax,%eax
   17788:	7e 0f                	jle    17799 <sem_wait+0x44>
        --sem->count;   
   1778a:	8b 45 08             	mov    0x8(%ebp),%eax
   1778d:	8b 00                	mov    (%eax),%eax
   1778f:	8d 50 ff             	lea    -0x1(%eax),%edx
   17792:	8b 45 08             	mov    0x8(%ebp),%eax
   17795:	89 10                	mov    %edx,(%eax)
   17797:	eb 2c                	jmp    177c5 <sem_wait+0x70>
    } else {//没有剩余，任务进入延时队列等待信号量
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   17799:	83 ec 0c             	sub    $0xc,%esp
   1779c:	ff 75 f0             	push   -0x10(%ebp)
   1779f:	e8 9d a1 ff ff       	call   11941 <task_set_unready>
   177a4:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   177a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   177aa:	8d 50 54             	lea    0x54(%eax),%edx
   177ad:	8b 45 08             	mov    0x8(%ebp),%eax
   177b0:	83 c0 04             	add    $0x4,%eax
   177b3:	83 ec 08             	sub    $0x8,%esp
   177b6:	52                   	push   %edx
   177b7:	50                   	push   %eax
   177b8:	e8 b8 0e 00 00       	call   18675 <list_insert_last>
   177bd:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   177c0:	e8 f6 a1 ff ff       	call   119bb <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   177c5:	83 ec 0c             	sub    $0xc,%esp
   177c8:	ff 75 f4             	push   -0xc(%ebp)
   177cb:	e8 dc bb ff ff       	call   133ac <idt_leave_protection>
   177d0:	83 c4 10             	add    $0x10,%esp
}
   177d3:	c9                   	leave  
   177d4:	c3                   	ret    

000177d5 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   177d5:	55                   	push   %ebp
   177d6:	89 e5                	mov    %esp,%ebp
   177d8:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   177db:	e8 b4 bb ff ff       	call   13394 <idt_enter_protection>
   177e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   177e3:	e8 c9 a1 ff ff       	call   119b1 <task_current>
   177e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   177eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   177ef:	75 10                	jne    17801 <sem_notify+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   177f1:	83 ec 0c             	sub    $0xc,%esp
   177f4:	ff 75 f4             	push   -0xc(%ebp)
   177f7:	e8 b0 bb ff ff       	call   133ac <idt_leave_protection>
   177fc:	83 c4 10             	add    $0x10,%esp
        return;
   177ff:	eb 71                	jmp    17872 <sem_notify+0x9d>
    }

    if (!list_is_empty(&sem->wait_list)) {
   17801:	8b 45 08             	mov    0x8(%ebp),%eax
   17804:	83 c0 04             	add    $0x4,%eax
   17807:	83 ec 0c             	sub    $0xc,%esp
   1780a:	50                   	push   %eax
   1780b:	e8 ce fe ff ff       	call   176de <list_is_empty>
   17810:	83 c4 10             	add    $0x10,%esp
   17813:	85 c0                	test   %eax,%eax
   17815:	75 40                	jne    17857 <sem_notify+0x82>
        list_node_t *node = list_remove_first(&sem->wait_list);
   17817:	8b 45 08             	mov    0x8(%ebp),%eax
   1781a:	83 c0 04             	add    $0x4,%eax
   1781d:	83 ec 0c             	sub    $0xc,%esp
   17820:	50                   	push   %eax
   17821:	e8 de 0e 00 00       	call   18704 <list_remove_first>
   17826:	83 c4 10             	add    $0x10,%esp
   17829:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   1782c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17830:	74 08                	je     1783a <sem_notify+0x65>
   17832:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17835:	83 e8 54             	sub    $0x54,%eax
   17838:	eb 05                	jmp    1783f <sem_notify+0x6a>
   1783a:	b8 00 00 00 00       	mov    $0x0,%eax
   1783f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_set_ready(task);
   17842:	83 ec 0c             	sub    $0xc,%esp
   17845:	ff 75 e8             	push   -0x18(%ebp)
   17848:	e8 b2 a0 ff ff       	call   118ff <task_set_ready>
   1784d:	83 c4 10             	add    $0x10,%esp
        task_switch();
   17850:	e8 66 a1 ff ff       	call   119bb <task_switch>
   17855:	eb 0d                	jmp    17864 <sem_notify+0x8f>
    } else {
        sem->count++;
   17857:	8b 45 08             	mov    0x8(%ebp),%eax
   1785a:	8b 00                	mov    (%eax),%eax
   1785c:	8d 50 01             	lea    0x1(%eax),%edx
   1785f:	8b 45 08             	mov    0x8(%ebp),%eax
   17862:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   17864:	83 ec 0c             	sub    $0xc,%esp
   17867:	ff 75 f4             	push   -0xc(%ebp)
   1786a:	e8 3d bb ff ff       	call   133ac <idt_leave_protection>
   1786f:	83 c4 10             	add    $0x10,%esp

}
   17872:	c9                   	leave  
   17873:	c3                   	ret    

00017874 <sem_count>:

int sem_count(sem_t *sem) {
   17874:	55                   	push   %ebp
   17875:	89 e5                	mov    %esp,%ebp
   17877:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1787a:	e8 15 bb ff ff       	call   13394 <idt_enter_protection>
   1787f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   17882:	8b 45 08             	mov    0x8(%ebp),%eax
   17885:	8b 00                	mov    (%eax),%eax
   17887:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   1788a:	83 ec 0c             	sub    $0xc,%esp
   1788d:	ff 75 f4             	push   -0xc(%ebp)
   17890:	e8 17 bb ff ff       	call   133ac <idt_leave_protection>
   17895:	83 c4 10             	add    $0x10,%esp

    return count;
   17898:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1789b:	c9                   	leave  
   1789c:	c3                   	ret    

0001789d <list_init>:
static inline void list_init(list_t *list) {
   1789d:	55                   	push   %ebp
   1789e:	89 e5                	mov    %esp,%ebp
   178a0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   178a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   178a7:	75 19                	jne    178c2 <list_init+0x25>
   178a9:	68 0c a0 01 00       	push   $0x1a00c
   178ae:	68 10 a1 01 00       	push   $0x1a110
   178b3:	6a 31                	push   $0x31
   178b5:	68 20 a0 01 00       	push   $0x1a020
   178ba:	e8 8d 03 00 00       	call   17c4c <pannic>
   178bf:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   178c2:	8b 45 08             	mov    0x8(%ebp),%eax
   178c5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   178cc:	8b 45 08             	mov    0x8(%ebp),%eax
   178cf:	8b 50 04             	mov    0x4(%eax),%edx
   178d2:	8b 45 08             	mov    0x8(%ebp),%eax
   178d5:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   178d7:	8b 45 08             	mov    0x8(%ebp),%eax
   178da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   178e1:	90                   	nop
   178e2:	c9                   	leave  
   178e3:	c3                   	ret    

000178e4 <list_get_size>:
static inline int list_get_size(list_t *list) {
   178e4:	55                   	push   %ebp
   178e5:	89 e5                	mov    %esp,%ebp
   178e7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   178ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   178ee:	75 19                	jne    17909 <list_get_size+0x25>
   178f0:	68 0c a0 01 00       	push   $0x1a00c
   178f5:	68 1c a1 01 00       	push   $0x1a11c
   178fa:	6a 3e                	push   $0x3e
   178fc:	68 20 a0 01 00       	push   $0x1a020
   17901:	e8 46 03 00 00       	call   17c4c <pannic>
   17906:	83 c4 10             	add    $0x10,%esp
    return list->size;
   17909:	8b 45 08             	mov    0x8(%ebp),%eax
   1790c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1790f:	c9                   	leave  
   17910:	c3                   	ret    

00017911 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   17911:	55                   	push   %ebp
   17912:	89 e5                	mov    %esp,%ebp
   17914:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17917:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1791b:	75 19                	jne    17936 <list_get_first+0x25>
   1791d:	68 0c a0 01 00       	push   $0x1a00c
   17922:	68 3c a1 01 00       	push   $0x1a13c
   17927:	6a 44                	push   $0x44
   17929:	68 20 a0 01 00       	push   $0x1a020
   1792e:	e8 19 03 00 00       	call   17c4c <pannic>
   17933:	83 c4 10             	add    $0x10,%esp
    return list->first;
   17936:	8b 45 08             	mov    0x8(%ebp),%eax
   17939:	8b 00                	mov    (%eax),%eax
}
   1793b:	c9                   	leave  
   1793c:	c3                   	ret    

0001793d <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1793d:	55                   	push   %ebp
   1793e:	89 e5                	mov    %esp,%ebp
   17940:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17943:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17947:	75 19                	jne    17962 <list_get_last+0x25>
   17949:	68 0c a0 01 00       	push   $0x1a00c
   1794e:	68 2c a1 01 00       	push   $0x1a12c
   17953:	6a 4a                	push   $0x4a
   17955:	68 20 a0 01 00       	push   $0x1a020
   1795a:	e8 ed 02 00 00       	call   17c4c <pannic>
   1795f:	83 c4 10             	add    $0x10,%esp

    return list->last;
   17962:	8b 45 08             	mov    0x8(%ebp),%eax
   17965:	8b 40 04             	mov    0x4(%eax),%eax
}
   17968:	c9                   	leave  
   17969:	c3                   	ret    

0001796a <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   1796a:	55                   	push   %ebp
   1796b:	89 e5                	mov    %esp,%ebp
   1796d:	56                   	push   %esi
   1796e:	53                   	push   %ebx
   1796f:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   17972:	83 ec 0c             	sub    $0xc,%esp
   17975:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17978:	50                   	push   %eax
   17979:	e8 1f ff ff ff       	call   1789d <list_init>
   1797e:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   17981:	83 ec 0c             	sub    $0xc,%esp
   17984:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17987:	50                   	push   %eax
   17988:	e8 57 ff ff ff       	call   178e4 <list_get_size>
   1798d:	83 c4 10             	add    $0x10,%esp
   17990:	89 c6                	mov    %eax,%esi
   17992:	83 ec 0c             	sub    $0xc,%esp
   17995:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17998:	50                   	push   %eax
   17999:	e8 9f ff ff ff       	call   1793d <list_get_last>
   1799e:	83 c4 10             	add    $0x10,%esp
   179a1:	89 c3                	mov    %eax,%ebx
   179a3:	83 ec 0c             	sub    $0xc,%esp
   179a6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   179a9:	50                   	push   %eax
   179aa:	e8 62 ff ff ff       	call   17911 <list_get_first>
   179af:	83 c4 10             	add    $0x10,%esp
   179b2:	56                   	push   %esi
   179b3:	53                   	push   %ebx
   179b4:	50                   	push   %eax
   179b5:	68 60 a0 01 00       	push   $0x1a060
   179ba:	e8 a3 0f 00 00       	call   18962 <log_printf>
   179bf:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   179c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   179c9:	eb 3f                	jmp    17a0a <list_test+0xa0>
        list_node_t *node = nodes + i;
   179cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   179ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   179d5:	8d 45 9c             	lea    -0x64(%ebp),%eax
   179d8:	01 d0                	add    %edx,%eax
   179da:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   179dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
   179e0:	83 ec 04             	sub    $0x4,%esp
   179e3:	50                   	push   %eax
   179e4:	ff 75 f4             	push   -0xc(%ebp)
   179e7:	68 88 a0 01 00       	push   $0x1a088
   179ec:	e8 71 0f 00 00       	call   18962 <log_printf>
   179f1:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   179f4:	83 ec 08             	sub    $0x8,%esp
   179f7:	ff 75 d0             	push   -0x30(%ebp)
   179fa:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   179fd:	50                   	push   %eax
   179fe:	e8 e7 0b 00 00       	call   185ea <list_insert_first>
   17a03:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   17a06:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17a0a:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   17a0e:	7e bb                	jle    179cb <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   17a10:	83 ec 0c             	sub    $0xc,%esp
   17a13:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17a16:	50                   	push   %eax
   17a17:	e8 c8 fe ff ff       	call   178e4 <list_get_size>
   17a1c:	83 c4 10             	add    $0x10,%esp
   17a1f:	89 c6                	mov    %eax,%esi
   17a21:	83 ec 0c             	sub    $0xc,%esp
   17a24:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17a27:	50                   	push   %eax
   17a28:	e8 10 ff ff ff       	call   1793d <list_get_last>
   17a2d:	83 c4 10             	add    $0x10,%esp
   17a30:	89 c3                	mov    %eax,%ebx
   17a32:	83 ec 0c             	sub    $0xc,%esp
   17a35:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17a38:	50                   	push   %eax
   17a39:	e8 d3 fe ff ff       	call   17911 <list_get_first>
   17a3e:	83 c4 10             	add    $0x10,%esp
   17a41:	56                   	push   %esi
   17a42:	53                   	push   %ebx
   17a43:	50                   	push   %eax
   17a44:	68 60 a0 01 00       	push   $0x1a060
   17a49:	e8 14 0f 00 00       	call   18962 <log_printf>
   17a4e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   17a51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   17a58:	eb 2d                	jmp    17a87 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   17a5a:	83 ec 0c             	sub    $0xc,%esp
   17a5d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17a60:	50                   	push   %eax
   17a61:	e8 9e 0c 00 00       	call   18704 <list_remove_first>
   17a66:	83 c4 10             	add    $0x10,%esp
   17a69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   17a6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   17a6f:	83 ec 04             	sub    $0x4,%esp
   17a72:	50                   	push   %eax
   17a73:	ff 75 f0             	push   -0x10(%ebp)
   17a76:	68 a7 a0 01 00       	push   $0x1a0a7
   17a7b:	e8 e2 0e 00 00       	call   18962 <log_printf>
   17a80:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   17a83:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   17a87:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   17a8b:	7e cd                	jle    17a5a <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   17a8d:	83 ec 0c             	sub    $0xc,%esp
   17a90:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17a93:	50                   	push   %eax
   17a94:	e8 4b fe ff ff       	call   178e4 <list_get_size>
   17a99:	83 c4 10             	add    $0x10,%esp
   17a9c:	89 c6                	mov    %eax,%esi
   17a9e:	83 ec 0c             	sub    $0xc,%esp
   17aa1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17aa4:	50                   	push   %eax
   17aa5:	e8 93 fe ff ff       	call   1793d <list_get_last>
   17aaa:	83 c4 10             	add    $0x10,%esp
   17aad:	89 c3                	mov    %eax,%ebx
   17aaf:	83 ec 0c             	sub    $0xc,%esp
   17ab2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17ab5:	50                   	push   %eax
   17ab6:	e8 56 fe ff ff       	call   17911 <list_get_first>
   17abb:	83 c4 10             	add    $0x10,%esp
   17abe:	56                   	push   %esi
   17abf:	53                   	push   %ebx
   17ac0:	50                   	push   %eax
   17ac1:	68 60 a0 01 00       	push   $0x1a060
   17ac6:	e8 97 0e 00 00       	call   18962 <log_printf>
   17acb:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   17ace:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   17ad5:	eb 3f                	jmp    17b16 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   17ad7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17ada:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   17ae1:	8d 45 9c             	lea    -0x64(%ebp),%eax
   17ae4:	01 d0                	add    %edx,%eax
   17ae6:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   17ae9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   17aec:	83 ec 04             	sub    $0x4,%esp
   17aef:	50                   	push   %eax
   17af0:	ff 75 ec             	push   -0x14(%ebp)
   17af3:	68 be a0 01 00       	push   $0x1a0be
   17af8:	e8 65 0e 00 00       	call   18962 <log_printf>
   17afd:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   17b00:	83 ec 08             	sub    $0x8,%esp
   17b03:	ff 75 d8             	push   -0x28(%ebp)
   17b06:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17b09:	50                   	push   %eax
   17b0a:	e8 66 0b 00 00       	call   18675 <list_insert_last>
   17b0f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   17b12:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   17b16:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   17b1a:	7e bb                	jle    17ad7 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   17b1c:	83 ec 0c             	sub    $0xc,%esp
   17b1f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17b22:	50                   	push   %eax
   17b23:	e8 bc fd ff ff       	call   178e4 <list_get_size>
   17b28:	83 c4 10             	add    $0x10,%esp
   17b2b:	89 c6                	mov    %eax,%esi
   17b2d:	83 ec 0c             	sub    $0xc,%esp
   17b30:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17b33:	50                   	push   %eax
   17b34:	e8 04 fe ff ff       	call   1793d <list_get_last>
   17b39:	83 c4 10             	add    $0x10,%esp
   17b3c:	89 c3                	mov    %eax,%ebx
   17b3e:	83 ec 0c             	sub    $0xc,%esp
   17b41:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17b44:	50                   	push   %eax
   17b45:	e8 c7 fd ff ff       	call   17911 <list_get_first>
   17b4a:	83 c4 10             	add    $0x10,%esp
   17b4d:	56                   	push   %esi
   17b4e:	53                   	push   %ebx
   17b4f:	50                   	push   %eax
   17b50:	68 60 a0 01 00       	push   $0x1a060
   17b55:	e8 08 0e 00 00       	call   18962 <log_printf>
   17b5a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   17b5d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   17b64:	eb 2d                	jmp    17b93 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   17b66:	83 ec 0c             	sub    $0xc,%esp
   17b69:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17b6c:	50                   	push   %eax
   17b6d:	e8 43 0c 00 00       	call   187b5 <list_remove_last>
   17b72:	83 c4 10             	add    $0x10,%esp
   17b75:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   17b78:	8b 45 dc             	mov    -0x24(%ebp),%eax
   17b7b:	83 ec 04             	sub    $0x4,%esp
   17b7e:	50                   	push   %eax
   17b7f:	ff 75 e8             	push   -0x18(%ebp)
   17b82:	68 dc a0 01 00       	push   $0x1a0dc
   17b87:	e8 d6 0d 00 00       	call   18962 <log_printf>
   17b8c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   17b8f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   17b93:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   17b97:	7e cd                	jle    17b66 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   17b99:	83 ec 0c             	sub    $0xc,%esp
   17b9c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17b9f:	50                   	push   %eax
   17ba0:	e8 3f fd ff ff       	call   178e4 <list_get_size>
   17ba5:	83 c4 10             	add    $0x10,%esp
   17ba8:	89 c6                	mov    %eax,%esi
   17baa:	83 ec 0c             	sub    $0xc,%esp
   17bad:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17bb0:	50                   	push   %eax
   17bb1:	e8 87 fd ff ff       	call   1793d <list_get_last>
   17bb6:	83 c4 10             	add    $0x10,%esp
   17bb9:	89 c3                	mov    %eax,%ebx
   17bbb:	83 ec 0c             	sub    $0xc,%esp
   17bbe:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17bc1:	50                   	push   %eax
   17bc2:	e8 4a fd ff ff       	call   17911 <list_get_first>
   17bc7:	83 c4 10             	add    $0x10,%esp
   17bca:	56                   	push   %esi
   17bcb:	53                   	push   %ebx
   17bcc:	50                   	push   %eax
   17bcd:	68 60 a0 01 00       	push   $0x1a060
   17bd2:	e8 8b 0d 00 00       	call   18962 <log_printf>
   17bd7:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   17bda:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   17be1:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   17be8:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   17bef:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   17bf6:	8d 45 90             	lea    -0x70(%ebp),%eax
   17bf9:	83 c0 04             	add    $0x4,%eax
   17bfc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   17bff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   17c03:	74 08                	je     17c0d <list_test+0x2a3>
   17c05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17c08:	83 e8 04             	sub    $0x4,%eax
   17c0b:	eb 05                	jmp    17c12 <list_test+0x2a8>
   17c0d:	b8 00 00 00 00       	mov    $0x0,%eax
   17c12:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   17c15:	8d 45 90             	lea    -0x70(%ebp),%eax
   17c18:	83 ec 08             	sub    $0x8,%esp
   17c1b:	50                   	push   %eax
   17c1c:	68 f2 a0 01 00       	push   $0x1a0f2
   17c21:	e8 3c 0d 00 00       	call   18962 <log_printf>
   17c26:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   17c29:	8b 45 e0             	mov    -0x20(%ebp),%eax
   17c2c:	83 ec 08             	sub    $0x8,%esp
   17c2f:	50                   	push   %eax
   17c30:	68 00 a1 01 00       	push   $0x1a100
   17c35:	e8 28 0d 00 00       	call   18962 <log_printf>
   17c3a:	83 c4 10             	add    $0x10,%esp

 }
   17c3d:	90                   	nop
   17c3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17c41:	5b                   	pop    %ebx
   17c42:	5e                   	pop    %esi
   17c43:	5d                   	pop    %ebp
   17c44:	c3                   	ret    

00017c45 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   17c45:	55                   	push   %ebp
   17c46:	89 e5                	mov    %esp,%ebp
   17c48:	f4                   	hlt    
   17c49:	90                   	nop
   17c4a:	5d                   	pop    %ebp
   17c4b:	c3                   	ret    

00017c4c <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   17c4c:	55                   	push   %ebp
   17c4d:	89 e5                	mov    %esp,%ebp
   17c4f:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   17c52:	83 ec 08             	sub    $0x8,%esp
   17c55:	ff 75 14             	push   0x14(%ebp)
   17c58:	68 4b a1 01 00       	push   $0x1a14b
   17c5d:	e8 00 0d 00 00       	call   18962 <log_printf>
   17c62:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   17c65:	ff 75 10             	push   0x10(%ebp)
   17c68:	ff 75 0c             	push   0xc(%ebp)
   17c6b:	ff 75 08             	push   0x8(%ebp)
   17c6e:	68 5d a1 01 00       	push   $0x1a15d
   17c73:	e8 ea 0c 00 00       	call   18962 <log_printf>
   17c78:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   17c7b:	e8 c5 ff ff ff       	call   17c45 <hlt>
   17c80:	eb f9                	jmp    17c7b <pannic+0x2f>

00017c82 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   17c82:	55                   	push   %ebp
   17c83:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   17c85:	8b 45 08             	mov    0x8(%ebp),%eax
   17c88:	83 c0 07             	add    $0x7,%eax
   17c8b:	8d 50 07             	lea    0x7(%eax),%edx
   17c8e:	85 c0                	test   %eax,%eax
   17c90:	0f 48 c2             	cmovs  %edx,%eax
   17c93:	c1 f8 03             	sar    $0x3,%eax
}
   17c96:	5d                   	pop    %ebp
   17c97:	c3                   	ret    

00017c98 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   17c98:	55                   	push   %ebp
   17c99:	89 e5                	mov    %esp,%ebp
   17c9b:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17c9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17ca2:	75 19                	jne    17cbd <bitmap_init+0x25>
   17ca4:	68 7c a1 01 00       	push   $0x1a17c
   17ca9:	68 10 a2 01 00       	push   $0x1a210
   17cae:	6a 24                	push   $0x24
   17cb0:	68 94 a1 01 00       	push   $0x1a194
   17cb5:	e8 92 ff ff ff       	call   17c4c <pannic>
   17cba:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   17cbd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17cc1:	75 19                	jne    17cdc <bitmap_init+0x44>
   17cc3:	68 cc a1 01 00       	push   $0x1a1cc
   17cc8:	68 10 a2 01 00       	push   $0x1a210
   17ccd:	6a 25                	push   $0x25
   17ccf:	68 94 a1 01 00       	push   $0x1a194
   17cd4:	e8 73 ff ff ff       	call   17c4c <pannic>
   17cd9:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   17cdc:	8b 45 08             	mov    0x8(%ebp),%eax
   17cdf:	8b 55 10             	mov    0x10(%ebp),%edx
   17ce2:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   17ce4:	8b 45 08             	mov    0x8(%ebp),%eax
   17ce7:	8b 55 0c             	mov    0xc(%ebp),%edx
   17cea:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   17ced:	8b 45 08             	mov    0x8(%ebp),%eax
   17cf0:	8b 00                	mov    (%eax),%eax
   17cf2:	83 ec 0c             	sub    $0xc,%esp
   17cf5:	50                   	push   %eax
   17cf6:	e8 87 ff ff ff       	call   17c82 <bitmap_byte_count>
   17cfb:	83 c4 10             	add    $0x10,%esp
   17cfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   17d01:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17d05:	74 07                	je     17d0e <bitmap_init+0x76>
   17d07:	ba ff 00 00 00       	mov    $0xff,%edx
   17d0c:	eb 05                	jmp    17d13 <bitmap_init+0x7b>
   17d0e:	ba 00 00 00 00       	mov    $0x0,%edx
   17d13:	8b 45 08             	mov    0x8(%ebp),%eax
   17d16:	8b 40 04             	mov    0x4(%eax),%eax
   17d19:	83 ec 04             	sub    $0x4,%esp
   17d1c:	ff 75 f4             	push   -0xc(%ebp)
   17d1f:	52                   	push   %edx
   17d20:	50                   	push   %eax
   17d21:	e8 3f 04 00 00       	call   18165 <kernel_memset>
   17d26:	83 c4 10             	add    $0x10,%esp

}
   17d29:	90                   	nop
   17d2a:	c9                   	leave  
   17d2b:	c3                   	ret    

00017d2c <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   17d2c:	55                   	push   %ebp
   17d2d:	89 e5                	mov    %esp,%ebp
   17d2f:	53                   	push   %ebx
   17d30:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17d33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17d37:	75 19                	jne    17d52 <bitmap_get_bit+0x26>
   17d39:	68 7c a1 01 00       	push   $0x1a17c
   17d3e:	68 1c a2 01 00       	push   $0x1a21c
   17d43:	6a 39                	push   $0x39
   17d45:	68 94 a1 01 00       	push   $0x1a194
   17d4a:	e8 fd fe ff ff       	call   17c4c <pannic>
   17d4f:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   17d52:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17d56:	79 19                	jns    17d71 <bitmap_get_bit+0x45>
   17d58:	68 e0 a1 01 00       	push   $0x1a1e0
   17d5d:	68 1c a2 01 00       	push   $0x1a21c
   17d62:	6a 3a                	push   $0x3a
   17d64:	68 94 a1 01 00       	push   $0x1a194
   17d69:	e8 de fe ff ff       	call   17c4c <pannic>
   17d6e:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   17d71:	8b 45 08             	mov    0x8(%ebp),%eax
   17d74:	8b 48 04             	mov    0x4(%eax),%ecx
   17d77:	8b 45 0c             	mov    0xc(%ebp),%eax
   17d7a:	8d 50 07             	lea    0x7(%eax),%edx
   17d7d:	85 c0                	test   %eax,%eax
   17d7f:	0f 48 c2             	cmovs  %edx,%eax
   17d82:	c1 f8 03             	sar    $0x3,%eax
   17d85:	01 c8                	add    %ecx,%eax
   17d87:	0f b6 00             	movzbl (%eax),%eax
   17d8a:	89 c3                	mov    %eax,%ebx
   17d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   17d8f:	83 e0 07             	and    $0x7,%eax
   17d92:	ba 01 00 00 00       	mov    $0x1,%edx
   17d97:	89 c1                	mov    %eax,%ecx
   17d99:	d3 e2                	shl    %cl,%edx
   17d9b:	89 d0                	mov    %edx,%eax
   17d9d:	21 d8                	and    %ebx,%eax
}
   17d9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   17da2:	c9                   	leave  
   17da3:	c3                   	ret    

00017da4 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   17da4:	55                   	push   %ebp
   17da5:	89 e5                	mov    %esp,%ebp
   17da7:	56                   	push   %esi
   17da8:	53                   	push   %ebx
   17da9:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17dac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17db0:	75 19                	jne    17dcb <bitmap_set_bit+0x27>
   17db2:	68 7c a1 01 00       	push   $0x1a17c
   17db7:	68 2c a2 01 00       	push   $0x1a22c
   17dbc:	6a 48                	push   $0x48
   17dbe:	68 94 a1 01 00       	push   $0x1a194
   17dc3:	e8 84 fe ff ff       	call   17c4c <pannic>
   17dc8:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   17dcb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17dcf:	78 06                	js     17dd7 <bitmap_set_bit+0x33>
   17dd1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17dd5:	79 19                	jns    17df0 <bitmap_set_bit+0x4c>
   17dd7:	68 eb a1 01 00       	push   $0x1a1eb
   17ddc:	68 2c a2 01 00       	push   $0x1a22c
   17de1:	6a 49                	push   $0x49
   17de3:	68 94 a1 01 00       	push   $0x1a194
   17de8:	e8 5f fe ff ff       	call   17c4c <pannic>
   17ded:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   17df0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17df7:	e9 92 00 00 00       	jmp    17e8e <bitmap_set_bit+0xea>
        if (bit) {
   17dfc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17e00:	74 42                	je     17e44 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   17e02:	8b 45 08             	mov    0x8(%ebp),%eax
   17e05:	8b 48 04             	mov    0x4(%eax),%ecx
   17e08:	8b 45 0c             	mov    0xc(%ebp),%eax
   17e0b:	8d 50 07             	lea    0x7(%eax),%edx
   17e0e:	85 c0                	test   %eax,%eax
   17e10:	0f 48 c2             	cmovs  %edx,%eax
   17e13:	c1 f8 03             	sar    $0x3,%eax
   17e16:	89 c2                	mov    %eax,%edx
   17e18:	89 d0                	mov    %edx,%eax
   17e1a:	01 c8                	add    %ecx,%eax
   17e1c:	0f b6 00             	movzbl (%eax),%eax
   17e1f:	89 c6                	mov    %eax,%esi
   17e21:	8b 45 0c             	mov    0xc(%ebp),%eax
   17e24:	83 e0 07             	and    $0x7,%eax
   17e27:	bb 01 00 00 00       	mov    $0x1,%ebx
   17e2c:	89 c1                	mov    %eax,%ecx
   17e2e:	d3 e3                	shl    %cl,%ebx
   17e30:	89 d8                	mov    %ebx,%eax
   17e32:	89 f1                	mov    %esi,%ecx
   17e34:	09 c1                	or     %eax,%ecx
   17e36:	8b 45 08             	mov    0x8(%ebp),%eax
   17e39:	8b 40 04             	mov    0x4(%eax),%eax
   17e3c:	01 d0                	add    %edx,%eax
   17e3e:	89 ca                	mov    %ecx,%edx
   17e40:	88 10                	mov    %dl,(%eax)
   17e42:	eb 42                	jmp    17e86 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   17e44:	8b 45 08             	mov    0x8(%ebp),%eax
   17e47:	8b 48 04             	mov    0x4(%eax),%ecx
   17e4a:	8b 45 0c             	mov    0xc(%ebp),%eax
   17e4d:	8d 50 07             	lea    0x7(%eax),%edx
   17e50:	85 c0                	test   %eax,%eax
   17e52:	0f 48 c2             	cmovs  %edx,%eax
   17e55:	c1 f8 03             	sar    $0x3,%eax
   17e58:	89 c2                	mov    %eax,%edx
   17e5a:	89 d0                	mov    %edx,%eax
   17e5c:	01 c8                	add    %ecx,%eax
   17e5e:	0f b6 00             	movzbl (%eax),%eax
   17e61:	89 c6                	mov    %eax,%esi
   17e63:	8b 45 0c             	mov    0xc(%ebp),%eax
   17e66:	83 e0 07             	and    $0x7,%eax
   17e69:	bb 01 00 00 00       	mov    $0x1,%ebx
   17e6e:	89 c1                	mov    %eax,%ecx
   17e70:	d3 e3                	shl    %cl,%ebx
   17e72:	89 d8                	mov    %ebx,%eax
   17e74:	f7 d0                	not    %eax
   17e76:	89 f1                	mov    %esi,%ecx
   17e78:	21 c1                	and    %eax,%ecx
   17e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   17e7d:	8b 40 04             	mov    0x4(%eax),%eax
   17e80:	01 d0                	add    %edx,%eax
   17e82:	89 ca                	mov    %ecx,%edx
   17e84:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   17e86:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17e8a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   17e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17e91:	3b 45 10             	cmp    0x10(%ebp),%eax
   17e94:	7d 0e                	jge    17ea4 <bitmap_set_bit+0x100>
   17e96:	8b 45 08             	mov    0x8(%ebp),%eax
   17e99:	8b 00                	mov    (%eax),%eax
   17e9b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17e9e:	0f 8c 58 ff ff ff    	jl     17dfc <bitmap_set_bit+0x58>
        }
    }
}
   17ea4:	90                   	nop
   17ea5:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17ea8:	5b                   	pop    %ebx
   17ea9:	5e                   	pop    %esi
   17eaa:	5d                   	pop    %ebp
   17eab:	c3                   	ret    

00017eac <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   17eac:	55                   	push   %ebp
   17ead:	89 e5                	mov    %esp,%ebp
   17eaf:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   17eb2:	83 ec 08             	sub    $0x8,%esp
   17eb5:	ff 75 0c             	push   0xc(%ebp)
   17eb8:	ff 75 08             	push   0x8(%ebp)
   17ebb:	e8 6c fe ff ff       	call   17d2c <bitmap_get_bit>
   17ec0:	83 c4 10             	add    $0x10,%esp
   17ec3:	84 c0                	test   %al,%al
   17ec5:	0f 95 c0             	setne  %al
   17ec8:	0f b6 c0             	movzbl %al,%eax
}
   17ecb:	c9                   	leave  
   17ecc:	c3                   	ret    

00017ecd <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   17ecd:	55                   	push   %ebp
   17ece:	89 e5                	mov    %esp,%ebp
   17ed0:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17ed3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17ed7:	75 19                	jne    17ef2 <bitmap_alloc_nbits+0x25>
   17ed9:	68 7c a1 01 00       	push   $0x1a17c
   17ede:	68 3c a2 01 00       	push   $0x1a23c
   17ee3:	6a 68                	push   $0x68
   17ee5:	68 94 a1 01 00       	push   $0x1a194
   17eea:	e8 5d fd ff ff       	call   17c4c <pannic>
   17eef:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   17ef2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17ef6:	79 19                	jns    17f11 <bitmap_alloc_nbits+0x44>
   17ef8:	68 04 a2 01 00       	push   $0x1a204
   17efd:	68 3c a2 01 00       	push   $0x1a23c
   17f02:	6a 69                	push   $0x69
   17f04:	68 94 a1 01 00       	push   $0x1a194
   17f09:	e8 3e fd ff ff       	call   17c4c <pannic>
   17f0e:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   17f11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   17f18:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   17f1f:	e9 8f 00 00 00       	jmp    17fb3 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   17f24:	83 ec 08             	sub    $0x8,%esp
   17f27:	ff 75 f4             	push   -0xc(%ebp)
   17f2a:	ff 75 08             	push   0x8(%ebp)
   17f2d:	e8 fa fd ff ff       	call   17d2c <bitmap_get_bit>
   17f32:	83 c4 10             	add    $0x10,%esp
   17f35:	0f b6 c0             	movzbl %al,%eax
   17f38:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17f3b:	74 06                	je     17f43 <bitmap_alloc_nbits+0x76>
            search_index++;
   17f3d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   17f41:	eb 70                	jmp    17fb3 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   17f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17f46:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   17f49:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   17f50:	eb 2d                	jmp    17f7f <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   17f52:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17f55:	8d 50 01             	lea    0x1(%eax),%edx
   17f58:	89 55 f4             	mov    %edx,-0xc(%ebp)
   17f5b:	83 ec 08             	sub    $0x8,%esp
   17f5e:	50                   	push   %eax
   17f5f:	ff 75 08             	push   0x8(%ebp)
   17f62:	e8 c5 fd ff ff       	call   17d2c <bitmap_get_bit>
   17f67:	83 c4 10             	add    $0x10,%esp
   17f6a:	0f b6 c0             	movzbl %al,%eax
   17f6d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17f70:	74 09                	je     17f7b <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   17f72:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   17f79:	eb 16                	jmp    17f91 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   17f7b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   17f7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17f82:	3b 45 10             	cmp    0x10(%ebp),%eax
   17f85:	7d 0a                	jge    17f91 <bitmap_alloc_nbits+0xc4>
   17f87:	8b 45 08             	mov    0x8(%ebp),%eax
   17f8a:	8b 00                	mov    (%eax),%eax
   17f8c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   17f8f:	7c c1                	jl     17f52 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   17f91:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   17f95:	74 1c                	je     17fb3 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   17f97:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f9a:	f7 d0                	not    %eax
   17f9c:	50                   	push   %eax
   17f9d:	ff 75 10             	push   0x10(%ebp)
   17fa0:	ff 75 f0             	push   -0x10(%ebp)
   17fa3:	ff 75 08             	push   0x8(%ebp)
   17fa6:	e8 f9 fd ff ff       	call   17da4 <bitmap_set_bit>
   17fab:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   17fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17fb1:	eb 13                	jmp    17fc6 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   17fb3:	8b 45 08             	mov    0x8(%ebp),%eax
   17fb6:	8b 00                	mov    (%eax),%eax
   17fb8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   17fbb:	0f 8c 63 ff ff ff    	jl     17f24 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   17fc1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   17fc6:	c9                   	leave  
   17fc7:	c3                   	ret    

00017fc8 <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   17fc8:	55                   	push   %ebp
   17fc9:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   17fcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17fcf:	74 3b                	je     1800c <kernel_strcpy+0x44>
   17fd1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17fd5:	74 35                	je     1800c <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   17fd7:	eb 17                	jmp    17ff0 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   17fd9:	8b 55 0c             	mov    0xc(%ebp),%edx
   17fdc:	8d 42 01             	lea    0x1(%edx),%eax
   17fdf:	89 45 0c             	mov    %eax,0xc(%ebp)
   17fe2:	8b 45 08             	mov    0x8(%ebp),%eax
   17fe5:	8d 48 01             	lea    0x1(%eax),%ecx
   17fe8:	89 4d 08             	mov    %ecx,0x8(%ebp)
   17feb:	0f b6 12             	movzbl (%edx),%edx
   17fee:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   17ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   17ff3:	0f b6 00             	movzbl (%eax),%eax
   17ff6:	84 c0                	test   %al,%al
   17ff8:	74 0a                	je     18004 <kernel_strcpy+0x3c>
   17ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
   17ffd:	0f b6 00             	movzbl (%eax),%eax
   18000:	84 c0                	test   %al,%al
   18002:	75 d5                	jne    17fd9 <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   18004:	8b 45 08             	mov    0x8(%ebp),%eax
   18007:	c6 00 00             	movb   $0x0,(%eax)
   1800a:	eb 01                	jmp    1800d <kernel_strcpy+0x45>
  if (!dest || !src) return;
   1800c:	90                   	nop
}
   1800d:	5d                   	pop    %ebp
   1800e:	c3                   	ret    

0001800f <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   1800f:	55                   	push   %ebp
   18010:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   18012:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18016:	74 45                	je     1805d <kernel_strncpy+0x4e>
   18018:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1801c:	74 3f                	je     1805d <kernel_strncpy+0x4e>
   1801e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18022:	74 39                	je     1805d <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   18024:	eb 17                	jmp    1803d <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   18026:	8b 55 0c             	mov    0xc(%ebp),%edx
   18029:	8d 42 01             	lea    0x1(%edx),%eax
   1802c:	89 45 0c             	mov    %eax,0xc(%ebp)
   1802f:	8b 45 08             	mov    0x8(%ebp),%eax
   18032:	8d 48 01             	lea    0x1(%eax),%ecx
   18035:	89 4d 08             	mov    %ecx,0x8(%ebp)
   18038:	0f b6 12             	movzbl (%edx),%edx
   1803b:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   1803d:	8b 45 10             	mov    0x10(%ebp),%eax
   18040:	8d 50 ff             	lea    -0x1(%eax),%edx
   18043:	89 55 10             	mov    %edx,0x10(%ebp)
   18046:	83 f8 01             	cmp    $0x1,%eax
   18049:	7e 0a                	jle    18055 <kernel_strncpy+0x46>
   1804b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1804e:	0f b6 00             	movzbl (%eax),%eax
   18051:	84 c0                	test   %al,%al
   18053:	75 d1                	jne    18026 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   18055:	8b 45 08             	mov    0x8(%ebp),%eax
   18058:	c6 00 00             	movb   $0x0,(%eax)
   1805b:	eb 01                	jmp    1805e <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   1805d:	90                   	nop
}
   1805e:	5d                   	pop    %ebp
   1805f:	c3                   	ret    

00018060 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   18060:	55                   	push   %ebp
   18061:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   18063:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18067:	74 06                	je     1806f <kernel_strncmp+0xf>
   18069:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1806d:	75 0f                	jne    1807e <kernel_strncmp+0x1e>
   1806f:	b8 00 00 00 00       	mov    $0x0,%eax
   18074:	eb 69                	jmp    180df <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   18076:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   1807a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   1807e:	8b 45 08             	mov    0x8(%ebp),%eax
   18081:	0f b6 00             	movzbl (%eax),%eax
   18084:	84 c0                	test   %al,%al
   18086:	74 24                	je     180ac <kernel_strncmp+0x4c>
   18088:	8b 45 0c             	mov    0xc(%ebp),%eax
   1808b:	0f b6 00             	movzbl (%eax),%eax
   1808e:	84 c0                	test   %al,%al
   18090:	74 1a                	je     180ac <kernel_strncmp+0x4c>
   18092:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   18096:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1809a:	74 10                	je     180ac <kernel_strncmp+0x4c>
   1809c:	8b 45 08             	mov    0x8(%ebp),%eax
   1809f:	0f b6 10             	movzbl (%eax),%edx
   180a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   180a5:	0f b6 00             	movzbl (%eax),%eax
   180a8:	38 c2                	cmp    %al,%dl
   180aa:	74 ca                	je     18076 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   180ac:	8b 45 08             	mov    0x8(%ebp),%eax
   180af:	0f b6 10             	movzbl (%eax),%edx
   180b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   180b5:	0f b6 00             	movzbl (%eax),%eax
   180b8:	38 c2                	cmp    %al,%dl
   180ba:	7e 07                	jle    180c3 <kernel_strncmp+0x63>
    return 1;
   180bc:	b8 01 00 00 00       	mov    $0x1,%eax
   180c1:	eb 1c                	jmp    180df <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   180c3:	8b 45 08             	mov    0x8(%ebp),%eax
   180c6:	0f b6 10             	movzbl (%eax),%edx
   180c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   180cc:	0f b6 00             	movzbl (%eax),%eax
   180cf:	38 c2                	cmp    %al,%dl
   180d1:	7d 07                	jge    180da <kernel_strncmp+0x7a>
    return -1;
   180d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   180d8:	eb 05                	jmp    180df <kernel_strncmp+0x7f>
  } else {
    return 0;
   180da:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   180df:	5d                   	pop    %ebp
   180e0:	c3                   	ret    

000180e1 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   180e1:	55                   	push   %ebp
   180e2:	89 e5                	mov    %esp,%ebp
   180e4:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   180e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   180eb:	75 07                	jne    180f4 <kernel_strlen+0x13>
   180ed:	b8 00 00 00 00       	mov    $0x0,%eax
   180f2:	eb 20                	jmp    18114 <kernel_strlen+0x33>

  int len = 0;
   180f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   180fb:	eb 04                	jmp    18101 <kernel_strlen+0x20>
   180fd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   18101:	8b 45 08             	mov    0x8(%ebp),%eax
   18104:	8d 50 01             	lea    0x1(%eax),%edx
   18107:	89 55 08             	mov    %edx,0x8(%ebp)
   1810a:	0f b6 00             	movzbl (%eax),%eax
   1810d:	84 c0                	test   %al,%al
   1810f:	75 ec                	jne    180fd <kernel_strlen+0x1c>

  return len;
   18111:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18114:	c9                   	leave  
   18115:	c3                   	ret    

00018116 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   18116:	55                   	push   %ebp
   18117:	89 e5                	mov    %esp,%ebp
   18119:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   1811c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18120:	74 40                	je     18162 <kernel_memcpy+0x4c>
   18122:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18126:	74 3a                	je     18162 <kernel_memcpy+0x4c>
   18128:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1812c:	74 34                	je     18162 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   1812e:	8b 45 08             	mov    0x8(%ebp),%eax
   18131:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   18134:	8b 45 0c             	mov    0xc(%ebp),%eax
   18137:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   1813a:	eb 17                	jmp    18153 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   1813c:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1813f:	8d 42 01             	lea    0x1(%edx),%eax
   18142:	89 45 f8             	mov    %eax,-0x8(%ebp)
   18145:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18148:	8d 48 01             	lea    0x1(%eax),%ecx
   1814b:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1814e:	0f b6 12             	movzbl (%edx),%edx
   18151:	88 10                	mov    %dl,(%eax)
  while (size--) {
   18153:	8b 45 10             	mov    0x10(%ebp),%eax
   18156:	8d 50 ff             	lea    -0x1(%eax),%edx
   18159:	89 55 10             	mov    %edx,0x10(%ebp)
   1815c:	85 c0                	test   %eax,%eax
   1815e:	75 dc                	jne    1813c <kernel_memcpy+0x26>
   18160:	eb 01                	jmp    18163 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   18162:	90                   	nop
  }
}
   18163:	c9                   	leave  
   18164:	c3                   	ret    

00018165 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   18165:	55                   	push   %ebp
   18166:	89 e5                	mov    %esp,%ebp
   18168:	83 ec 14             	sub    $0x14,%esp
   1816b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1816e:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   18171:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18175:	74 2c                	je     181a3 <kernel_memset+0x3e>
   18177:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1817b:	74 26                	je     181a3 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   1817d:	8b 45 08             	mov    0x8(%ebp),%eax
   18180:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   18183:	eb 0f                	jmp    18194 <kernel_memset+0x2f>
    *(d++) = v;
   18185:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18188:	8d 50 01             	lea    0x1(%eax),%edx
   1818b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1818e:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   18192:	88 10                	mov    %dl,(%eax)
  while (size--) {
   18194:	8b 45 10             	mov    0x10(%ebp),%eax
   18197:	8d 50 ff             	lea    -0x1(%eax),%edx
   1819a:	89 55 10             	mov    %edx,0x10(%ebp)
   1819d:	85 c0                	test   %eax,%eax
   1819f:	75 e4                	jne    18185 <kernel_memset+0x20>
   181a1:	eb 01                	jmp    181a4 <kernel_memset+0x3f>
  if (!dest || !size) return;
   181a3:	90                   	nop
  }
}
   181a4:	c9                   	leave  
   181a5:	c3                   	ret    

000181a6 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   181a6:	55                   	push   %ebp
   181a7:	89 e5                	mov    %esp,%ebp
   181a9:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   181ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   181b0:	74 0c                	je     181be <kernel_memcmp+0x18>
   181b2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   181b6:	74 06                	je     181be <kernel_memcmp+0x18>
   181b8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   181bc:	75 07                	jne    181c5 <kernel_memcmp+0x1f>
   181be:	b8 00 00 00 00       	mov    $0x0,%eax
   181c3:	eb 63                	jmp    18228 <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   181c5:	8b 45 08             	mov    0x8(%ebp),%eax
   181c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   181cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   181ce:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   181d1:	eb 08                	jmp    181db <kernel_memcmp+0x35>
    d1++;
   181d3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   181d7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   181db:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   181df:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   181e3:	74 10                	je     181f5 <kernel_memcmp+0x4f>
   181e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181e8:	0f b6 10             	movzbl (%eax),%edx
   181eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   181ee:	0f b6 00             	movzbl (%eax),%eax
   181f1:	38 c2                	cmp    %al,%dl
   181f3:	74 de                	je     181d3 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   181f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181f8:	0f b6 10             	movzbl (%eax),%edx
   181fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   181fe:	0f b6 00             	movzbl (%eax),%eax
   18201:	38 c2                	cmp    %al,%dl
   18203:	76 07                	jbe    1820c <kernel_memcmp+0x66>
    return 1;
   18205:	b8 01 00 00 00       	mov    $0x1,%eax
   1820a:	eb 1c                	jmp    18228 <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   1820c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1820f:	0f b6 10             	movzbl (%eax),%edx
   18212:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18215:	0f b6 00             	movzbl (%eax),%eax
   18218:	38 c2                	cmp    %al,%dl
   1821a:	73 07                	jae    18223 <kernel_memcmp+0x7d>
    return -1;
   1821c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18221:	eb 05                	jmp    18228 <kernel_memcmp+0x82>
  else
    return 0;
   18223:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18228:	c9                   	leave  
   18229:	c3                   	ret    

0001822a <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   1822a:	55                   	push   %ebp
   1822b:	89 e5                	mov    %esp,%ebp
   1822d:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   18230:	8d 45 10             	lea    0x10(%ebp),%eax
   18233:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   18236:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18239:	83 ec 04             	sub    $0x4,%esp
   1823c:	50                   	push   %eax
   1823d:	ff 75 0c             	push   0xc(%ebp)
   18240:	ff 75 08             	push   0x8(%ebp)
   18243:	e8 06 00 00 00       	call   1824e <kernel_vsprintf>
   18248:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   1824b:	90                   	nop
   1824c:	c9                   	leave  
   1824d:	c3                   	ret    

0001824e <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   1824e:	55                   	push   %ebp
   1824f:	89 e5                	mov    %esp,%ebp
   18251:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   18254:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   1825b:	8b 45 08             	mov    0x8(%ebp),%eax
   1825e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   18261:	e9 68 01 00 00       	jmp    183ce <kernel_vsprintf+0x180>
    switch (state) {
   18266:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1826a:	74 0b                	je     18277 <kernel_vsprintf+0x29>
   1826c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   18270:	74 2b                	je     1829d <kernel_vsprintf+0x4f>
   18272:	e9 56 01 00 00       	jmp    183cd <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   18277:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   1827b:	75 0c                	jne    18289 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   1827d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   18284:	e9 45 01 00 00       	jmp    183ce <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   18289:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1828c:	8d 50 01             	lea    0x1(%eax),%edx
   1828f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18292:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   18296:	88 10                	mov    %dl,(%eax)
        break;
   18298:	e9 31 01 00 00       	jmp    183ce <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   1829d:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   182a1:	75 47                	jne    182ea <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   182a3:	8b 45 10             	mov    0x10(%ebp),%eax
   182a6:	8d 50 04             	lea    0x4(%eax),%edx
   182a9:	89 55 10             	mov    %edx,0x10(%ebp)
   182ac:	8b 00                	mov    (%eax),%eax
   182ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   182b1:	ff 75 ec             	push   -0x14(%ebp)
   182b4:	e8 28 fe ff ff       	call   180e1 <kernel_strlen>
   182b9:	83 c4 04             	add    $0x4,%esp
   182bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   182bf:	eb 17                	jmp    182d8 <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   182c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
   182c4:	8d 42 01             	lea    0x1(%edx),%eax
   182c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
   182ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   182cd:	8d 48 01             	lea    0x1(%eax),%ecx
   182d0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   182d3:	0f b6 12             	movzbl (%edx),%edx
   182d6:	88 10                	mov    %dl,(%eax)
          while (len--) {
   182d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   182db:	8d 50 ff             	lea    -0x1(%eax),%edx
   182de:	89 55 e8             	mov    %edx,-0x18(%ebp)
   182e1:	85 c0                	test   %eax,%eax
   182e3:	75 dc                	jne    182c1 <kernel_vsprintf+0x73>
   182e5:	e9 da 00 00 00       	jmp    183c4 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   182ea:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   182ee:	75 37                	jne    18327 <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   182f0:	8b 45 10             	mov    0x10(%ebp),%eax
   182f3:	8d 50 04             	lea    0x4(%eax),%edx
   182f6:	89 55 10             	mov    %edx,0x10(%ebp)
   182f9:	8b 00                	mov    (%eax),%eax
   182fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   182fe:	83 ec 04             	sub    $0x4,%esp
   18301:	6a 0a                	push   $0xa
   18303:	ff 75 d8             	push   -0x28(%ebp)
   18306:	ff 75 f0             	push   -0x10(%ebp)
   18309:	e8 dd 00 00 00       	call   183eb <kernel_itoa>
   1830e:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18311:	83 ec 0c             	sub    $0xc,%esp
   18314:	ff 75 f0             	push   -0x10(%ebp)
   18317:	e8 c5 fd ff ff       	call   180e1 <kernel_strlen>
   1831c:	83 c4 10             	add    $0x10,%esp
   1831f:	01 45 f0             	add    %eax,-0x10(%ebp)
   18322:	e9 9d 00 00 00       	jmp    183c4 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   18327:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   1832b:	74 06                	je     18333 <kernel_vsprintf+0xe5>
   1832d:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   18331:	75 34                	jne    18367 <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   18333:	8b 45 10             	mov    0x10(%ebp),%eax
   18336:	8d 50 04             	lea    0x4(%eax),%edx
   18339:	89 55 10             	mov    %edx,0x10(%ebp)
   1833c:	8b 00                	mov    (%eax),%eax
   1833e:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   18341:	83 ec 04             	sub    $0x4,%esp
   18344:	6a 10                	push   $0x10
   18346:	ff 75 dc             	push   -0x24(%ebp)
   18349:	ff 75 f0             	push   -0x10(%ebp)
   1834c:	e8 9a 00 00 00       	call   183eb <kernel_itoa>
   18351:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18354:	83 ec 0c             	sub    $0xc,%esp
   18357:	ff 75 f0             	push   -0x10(%ebp)
   1835a:	e8 82 fd ff ff       	call   180e1 <kernel_strlen>
   1835f:	83 c4 10             	add    $0x10,%esp
   18362:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   18365:	eb 5d                	jmp    183c4 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   18367:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1836b:	75 34                	jne    183a1 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   1836d:	8b 45 10             	mov    0x10(%ebp),%eax
   18370:	8d 50 04             	lea    0x4(%eax),%edx
   18373:	89 55 10             	mov    %edx,0x10(%ebp)
   18376:	8b 00                	mov    (%eax),%eax
   18378:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   1837b:	83 ec 04             	sub    $0x4,%esp
   1837e:	6a 02                	push   $0x2
   18380:	ff 75 e0             	push   -0x20(%ebp)
   18383:	ff 75 f0             	push   -0x10(%ebp)
   18386:	e8 60 00 00 00       	call   183eb <kernel_itoa>
   1838b:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   1838e:	83 ec 0c             	sub    $0xc,%esp
   18391:	ff 75 f0             	push   -0x10(%ebp)
   18394:	e8 48 fd ff ff       	call   180e1 <kernel_strlen>
   18399:	83 c4 10             	add    $0x10,%esp
   1839c:	01 45 f0             	add    %eax,-0x10(%ebp)
   1839f:	eb 23                	jmp    183c4 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   183a1:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   183a5:	75 1d                	jne    183c4 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   183a7:	8b 45 10             	mov    0x10(%ebp),%eax
   183aa:	8d 50 04             	lea    0x4(%eax),%edx
   183ad:	89 55 10             	mov    %edx,0x10(%ebp)
   183b0:	8b 00                	mov    (%eax),%eax
   183b2:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   183b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   183b8:	8d 50 01             	lea    0x1(%eax),%edx
   183bb:	89 55 f0             	mov    %edx,-0x10(%ebp)
   183be:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   183c2:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   183c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   183cb:	eb 01                	jmp    183ce <kernel_vsprintf+0x180>
      default:
        break;
   183cd:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   183ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   183d1:	8d 50 01             	lea    0x1(%eax),%edx
   183d4:	89 55 0c             	mov    %edx,0xc(%ebp)
   183d7:	0f b6 00             	movzbl (%eax),%eax
   183da:	88 45 e7             	mov    %al,-0x19(%ebp)
   183dd:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   183e1:	0f 85 7f fe ff ff    	jne    18266 <kernel_vsprintf+0x18>
    }
  }
}
   183e7:	90                   	nop
   183e8:	90                   	nop
   183e9:	c9                   	leave  
   183ea:	c3                   	ret    

000183eb <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   183eb:	55                   	push   %ebp
   183ec:	89 e5                	mov    %esp,%ebp
   183ee:	53                   	push   %ebx
   183ef:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   183f5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   183f9:	74 1d                	je     18418 <kernel_itoa+0x2d>
   183fb:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   183ff:	74 17                	je     18418 <kernel_itoa+0x2d>
   18401:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18405:	74 11                	je     18418 <kernel_itoa+0x2d>
   18407:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1840b:	74 0b                	je     18418 <kernel_itoa+0x2d>
    *buf = '\0';
   1840d:	8b 45 08             	mov    0x8(%ebp),%eax
   18410:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18413:	e9 f8 00 00 00       	jmp    18510 <kernel_itoa+0x125>
  }

  if (num == 0) {
   18418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1841b:	85 c0                	test   %eax,%eax
   1841d:	75 17                	jne    18436 <kernel_itoa+0x4b>
    *(buf++) = '0';
   1841f:	8b 45 08             	mov    0x8(%ebp),%eax
   18422:	8d 50 01             	lea    0x1(%eax),%edx
   18425:	89 55 08             	mov    %edx,0x8(%ebp)
   18428:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   1842b:	8b 45 08             	mov    0x8(%ebp),%eax
   1842e:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18431:	e9 da 00 00 00       	jmp    18510 <kernel_itoa+0x125>
  }

  char *p = buf;
   18436:	8b 45 08             	mov    0x8(%ebp),%eax
   18439:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   1843c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   18443:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18447:	75 41                	jne    1848a <kernel_itoa+0x9f>
    u_num = num;
   18449:	8b 45 0c             	mov    0xc(%ebp),%eax
   1844c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   1844f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18452:	85 c0                	test   %eax,%eax
   18454:	79 16                	jns    1846c <kernel_itoa+0x81>
      *(p++) = '-';
   18456:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18459:	8d 50 01             	lea    0x1(%eax),%edx
   1845c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1845f:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   18462:	8b 45 0c             	mov    0xc(%ebp),%eax
   18465:	f7 d8                	neg    %eax
   18467:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1846a:	eb 26                	jmp    18492 <kernel_itoa+0xa7>
    } else if (num == 0) {
   1846c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1846f:	85 c0                	test   %eax,%eax
   18471:	75 1f                	jne    18492 <kernel_itoa+0xa7>
      *(p++) = '0';
   18473:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18476:	8d 50 01             	lea    0x1(%eax),%edx
   18479:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1847c:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   1847f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18482:	c6 00 00             	movb   $0x0,(%eax)
      return;
   18485:	e9 86 00 00 00       	jmp    18510 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   1848a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1848d:	8b 00                	mov    (%eax),%eax
   1848f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   18492:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   18499:	eb 3b                	jmp    184d6 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   1849b:	8b 1d 70 b1 01 00    	mov    0x1b170,%ebx
   184a1:	8b 4d 10             	mov    0x10(%ebp),%ecx
   184a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   184a7:	ba 00 00 00 00       	mov    $0x0,%edx
   184ac:	f7 f1                	div    %ecx
   184ae:	89 d0                	mov    %edx,%eax
   184b0:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   184b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   184b6:	8d 50 01             	lea    0x1(%eax),%edx
   184b9:	89 55 f0             	mov    %edx,-0x10(%ebp)
   184bc:	0f b6 11             	movzbl (%ecx),%edx
   184bf:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   184c6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   184c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   184cc:	ba 00 00 00 00       	mov    $0x0,%edx
   184d1:	f7 f3                	div    %ebx
   184d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   184d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   184da:	75 bf                	jne    1849b <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   184dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   184df:	83 e8 01             	sub    $0x1,%eax
   184e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
   184e5:	eb 1d                	jmp    18504 <kernel_itoa+0x119>
    *(p++) = arr[i];
   184e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184ea:	8d 50 01             	lea    0x1(%eax),%edx
   184ed:	89 55 f8             	mov    %edx,-0x8(%ebp)
   184f0:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   184f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
   184f9:	01 ca                	add    %ecx,%edx
   184fb:	0f b6 12             	movzbl (%edx),%edx
   184fe:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   18500:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   18504:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   18508:	79 dd                	jns    184e7 <kernel_itoa+0xfc>
  }
  *p = '\0';
   1850a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1850d:	c6 00 00             	movb   $0x0,(%eax)
}
   18510:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   18513:	c9                   	leave  
   18514:	c3                   	ret    

00018515 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   18515:	55                   	push   %ebp
   18516:	89 e5                	mov    %esp,%ebp
   18518:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   1851b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   18522:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18526:	74 15                	je     1853d <strings_count+0x28>
    while (*(strs++)) {
   18528:	eb 04                	jmp    1852e <strings_count+0x19>
      count++;
   1852a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   1852e:	8b 45 08             	mov    0x8(%ebp),%eax
   18531:	8d 50 04             	lea    0x4(%eax),%edx
   18534:	89 55 08             	mov    %edx,0x8(%ebp)
   18537:	8b 00                	mov    (%eax),%eax
   18539:	85 c0                	test   %eax,%eax
   1853b:	75 ed                	jne    1852a <strings_count+0x15>
    }
  }

  return count;
   1853d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18540:	c9                   	leave  
   18541:	c3                   	ret    

00018542 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   18542:	55                   	push   %ebp
   18543:	89 e5                	mov    %esp,%ebp
   18545:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   18548:	8b 45 08             	mov    0x8(%ebp),%eax
   1854b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   1854e:	eb 04                	jmp    18554 <get_file_name+0x12>
    s++;
   18550:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   18554:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18557:	0f b6 00             	movzbl (%eax),%eax
   1855a:	84 c0                	test   %al,%al
   1855c:	75 f2                	jne    18550 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   1855e:	eb 04                	jmp    18564 <get_file_name+0x22>
    s--;
   18560:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   18564:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18567:	0f b6 00             	movzbl (%eax),%eax
   1856a:	3c 2f                	cmp    $0x2f,%al
   1856c:	74 12                	je     18580 <get_file_name+0x3e>
   1856e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18571:	0f b6 00             	movzbl (%eax),%eax
   18574:	3c 5c                	cmp    $0x5c,%al
   18576:	74 08                	je     18580 <get_file_name+0x3e>
   18578:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1857b:	3b 45 08             	cmp    0x8(%ebp),%eax
   1857e:	73 e0                	jae    18560 <get_file_name+0x1e>
  }

  return s + 1;
   18580:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18583:	83 c0 01             	add    $0x1,%eax
   18586:	c9                   	leave  
   18587:	c3                   	ret    

00018588 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   18588:	55                   	push   %ebp
   18589:	89 e5                	mov    %esp,%ebp
   1858b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1858e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18592:	75 19                	jne    185ad <list_is_empty+0x25>
   18594:	68 60 a2 01 00       	push   $0x1a260
   18599:	68 44 a3 01 00       	push   $0x1a344
   1859e:	6a 38                	push   $0x38
   185a0:	68 74 a2 01 00       	push   $0x1a274
   185a5:	e8 a2 f6 ff ff       	call   17c4c <pannic>
   185aa:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   185ad:	8b 45 08             	mov    0x8(%ebp),%eax
   185b0:	8b 40 08             	mov    0x8(%eax),%eax
   185b3:	85 c0                	test   %eax,%eax
   185b5:	0f 94 c0             	sete   %al
   185b8:	0f b6 c0             	movzbl %al,%eax
}
   185bb:	c9                   	leave  
   185bc:	c3                   	ret    

000185bd <list_get_size>:
static inline int list_get_size(list_t *list) {
   185bd:	55                   	push   %ebp
   185be:	89 e5                	mov    %esp,%ebp
   185c0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   185c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   185c7:	75 19                	jne    185e2 <list_get_size+0x25>
   185c9:	68 60 a2 01 00       	push   $0x1a260
   185ce:	68 7c a3 01 00       	push   $0x1a37c
   185d3:	6a 3e                	push   $0x3e
   185d5:	68 74 a2 01 00       	push   $0x1a274
   185da:	e8 6d f6 ff ff       	call   17c4c <pannic>
   185df:	83 c4 10             	add    $0x10,%esp
    return list->size;
   185e2:	8b 45 08             	mov    0x8(%ebp),%eax
   185e5:	8b 40 08             	mov    0x8(%eax),%eax
}
   185e8:	c9                   	leave  
   185e9:	c3                   	ret    

000185ea <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   185ea:	55                   	push   %ebp
   185eb:	89 e5                	mov    %esp,%ebp
   185ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   185f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   185f4:	74 06                	je     185fc <list_insert_first+0x12>
   185f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   185fa:	75 19                	jne    18615 <list_insert_first+0x2b>
   185fc:	68 b4 a2 01 00       	push   $0x1a2b4
   18601:	68 30 a3 01 00       	push   $0x1a330
   18606:	6a 0f                	push   $0xf
   18608:	68 e4 a2 01 00       	push   $0x1a2e4
   1860d:	e8 3a f6 ff ff       	call   17c4c <pannic>
   18612:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   18615:	8b 45 08             	mov    0x8(%ebp),%eax
   18618:	8b 10                	mov    (%eax),%edx
   1861a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1861d:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   18620:	8b 45 0c             	mov    0xc(%ebp),%eax
   18623:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   18629:	83 ec 0c             	sub    $0xc,%esp
   1862c:	ff 75 08             	push   0x8(%ebp)
   1862f:	e8 54 ff ff ff       	call   18588 <list_is_empty>
   18634:	83 c4 10             	add    $0x10,%esp
   18637:	85 c0                	test   %eax,%eax
   18639:	74 16                	je     18651 <list_insert_first+0x67>
        list->first = list->last = node;
   1863b:	8b 45 08             	mov    0x8(%ebp),%eax
   1863e:	8b 55 0c             	mov    0xc(%ebp),%edx
   18641:	89 50 04             	mov    %edx,0x4(%eax)
   18644:	8b 45 08             	mov    0x8(%ebp),%eax
   18647:	8b 50 04             	mov    0x4(%eax),%edx
   1864a:	8b 45 08             	mov    0x8(%ebp),%eax
   1864d:	89 10                	mov    %edx,(%eax)
   1864f:	eb 12                	jmp    18663 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   18651:	8b 45 08             	mov    0x8(%ebp),%eax
   18654:	8b 00                	mov    (%eax),%eax
   18656:	8b 55 0c             	mov    0xc(%ebp),%edx
   18659:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1865b:	8b 45 08             	mov    0x8(%ebp),%eax
   1865e:	8b 55 0c             	mov    0xc(%ebp),%edx
   18661:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   18663:	8b 45 08             	mov    0x8(%ebp),%eax
   18666:	8b 40 08             	mov    0x8(%eax),%eax
   18669:	8d 50 01             	lea    0x1(%eax),%edx
   1866c:	8b 45 08             	mov    0x8(%ebp),%eax
   1866f:	89 50 08             	mov    %edx,0x8(%eax)
}
   18672:	90                   	nop
   18673:	c9                   	leave  
   18674:	c3                   	ret    

00018675 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   18675:	55                   	push   %ebp
   18676:	89 e5                	mov    %esp,%ebp
   18678:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1867b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1867f:	74 06                	je     18687 <list_insert_last+0x12>
   18681:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18685:	75 19                	jne    186a0 <list_insert_last+0x2b>
   18687:	68 b4 a2 01 00       	push   $0x1a2b4
   1868c:	68 54 a3 01 00       	push   $0x1a354
   18691:	6a 21                	push   $0x21
   18693:	68 e4 a2 01 00       	push   $0x1a2e4
   18698:	e8 af f5 ff ff       	call   17c4c <pannic>
   1869d:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   186a0:	8b 45 08             	mov    0x8(%ebp),%eax
   186a3:	8b 50 04             	mov    0x4(%eax),%edx
   186a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   186a9:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   186ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   186ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   186b5:	83 ec 0c             	sub    $0xc,%esp
   186b8:	ff 75 08             	push   0x8(%ebp)
   186bb:	e8 c8 fe ff ff       	call   18588 <list_is_empty>
   186c0:	83 c4 10             	add    $0x10,%esp
   186c3:	85 c0                	test   %eax,%eax
   186c5:	74 16                	je     186dd <list_insert_last+0x68>
        list->first = list->last = node;
   186c7:	8b 45 08             	mov    0x8(%ebp),%eax
   186ca:	8b 55 0c             	mov    0xc(%ebp),%edx
   186cd:	89 50 04             	mov    %edx,0x4(%eax)
   186d0:	8b 45 08             	mov    0x8(%ebp),%eax
   186d3:	8b 50 04             	mov    0x4(%eax),%edx
   186d6:	8b 45 08             	mov    0x8(%ebp),%eax
   186d9:	89 10                	mov    %edx,(%eax)
   186db:	eb 15                	jmp    186f2 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   186dd:	8b 45 08             	mov    0x8(%ebp),%eax
   186e0:	8b 40 04             	mov    0x4(%eax),%eax
   186e3:	8b 55 0c             	mov    0xc(%ebp),%edx
   186e6:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   186e9:	8b 45 08             	mov    0x8(%ebp),%eax
   186ec:	8b 55 0c             	mov    0xc(%ebp),%edx
   186ef:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   186f2:	8b 45 08             	mov    0x8(%ebp),%eax
   186f5:	8b 40 08             	mov    0x8(%eax),%eax
   186f8:	8d 50 01             	lea    0x1(%eax),%edx
   186fb:	8b 45 08             	mov    0x8(%ebp),%eax
   186fe:	89 50 08             	mov    %edx,0x8(%eax)

}
   18701:	90                   	nop
   18702:	c9                   	leave  
   18703:	c3                   	ret    

00018704 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   18704:	55                   	push   %ebp
   18705:	89 e5                	mov    %esp,%ebp
   18707:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1870a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1870e:	75 19                	jne    18729 <list_remove_first+0x25>
   18710:	68 1a a3 01 00       	push   $0x1a31a
   18715:	68 68 a3 01 00       	push   $0x1a368
   1871a:	6a 34                	push   $0x34
   1871c:	68 e4 a2 01 00       	push   $0x1a2e4
   18721:	e8 26 f5 ff ff       	call   17c4c <pannic>
   18726:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   18729:	83 ec 0c             	sub    $0xc,%esp
   1872c:	ff 75 08             	push   0x8(%ebp)
   1872f:	e8 54 fe ff ff       	call   18588 <list_is_empty>
   18734:	83 c4 10             	add    $0x10,%esp
   18737:	85 c0                	test   %eax,%eax
   18739:	74 07                	je     18742 <list_remove_first+0x3e>
        return (list_node_t*)0;
   1873b:	b8 00 00 00 00       	mov    $0x0,%eax
   18740:	eb 71                	jmp    187b3 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   18742:	8b 45 08             	mov    0x8(%ebp),%eax
   18745:	8b 00                	mov    (%eax),%eax
   18747:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1874a:	83 ec 0c             	sub    $0xc,%esp
   1874d:	ff 75 08             	push   0x8(%ebp)
   18750:	e8 68 fe ff ff       	call   185bd <list_get_size>
   18755:	83 c4 10             	add    $0x10,%esp
   18758:	83 f8 01             	cmp    $0x1,%eax
   1875b:	75 17                	jne    18774 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1875d:	8b 45 08             	mov    0x8(%ebp),%eax
   18760:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18767:	8b 45 08             	mov    0x8(%ebp),%eax
   1876a:	8b 50 04             	mov    0x4(%eax),%edx
   1876d:	8b 45 08             	mov    0x8(%ebp),%eax
   18770:	89 10                	mov    %edx,(%eax)
   18772:	eb 18                	jmp    1878c <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   18774:	8b 45 08             	mov    0x8(%ebp),%eax
   18777:	8b 00                	mov    (%eax),%eax
   18779:	8b 50 04             	mov    0x4(%eax),%edx
   1877c:	8b 45 08             	mov    0x8(%ebp),%eax
   1877f:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   18781:	8b 45 08             	mov    0x8(%ebp),%eax
   18784:	8b 00                	mov    (%eax),%eax
   18786:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1878c:	8b 45 08             	mov    0x8(%ebp),%eax
   1878f:	8b 40 08             	mov    0x8(%eax),%eax
   18792:	8d 50 ff             	lea    -0x1(%eax),%edx
   18795:	8b 45 08             	mov    0x8(%ebp),%eax
   18798:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1879b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1879e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   187a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   187a8:	8b 50 04             	mov    0x4(%eax),%edx
   187ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   187ae:	89 10                	mov    %edx,(%eax)
    return ret;
   187b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   187b3:	c9                   	leave  
   187b4:	c3                   	ret    

000187b5 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   187b5:	55                   	push   %ebp
   187b6:	89 e5                	mov    %esp,%ebp
   187b8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   187bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   187bf:	75 19                	jne    187da <list_remove_last+0x25>
   187c1:	68 1a a3 01 00       	push   $0x1a31a
   187c6:	68 8c a3 01 00       	push   $0x1a38c
   187cb:	6a 4a                	push   $0x4a
   187cd:	68 e4 a2 01 00       	push   $0x1a2e4
   187d2:	e8 75 f4 ff ff       	call   17c4c <pannic>
   187d7:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   187da:	83 ec 0c             	sub    $0xc,%esp
   187dd:	ff 75 08             	push   0x8(%ebp)
   187e0:	e8 a3 fd ff ff       	call   18588 <list_is_empty>
   187e5:	83 c4 10             	add    $0x10,%esp
   187e8:	85 c0                	test   %eax,%eax
   187ea:	74 07                	je     187f3 <list_remove_last+0x3e>
        return (list_node_t*)0;
   187ec:	b8 00 00 00 00       	mov    $0x0,%eax
   187f1:	eb 75                	jmp    18868 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   187f3:	8b 45 08             	mov    0x8(%ebp),%eax
   187f6:	8b 40 04             	mov    0x4(%eax),%eax
   187f9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   187fc:	83 ec 0c             	sub    $0xc,%esp
   187ff:	ff 75 08             	push   0x8(%ebp)
   18802:	e8 b6 fd ff ff       	call   185bd <list_get_size>
   18807:	83 c4 10             	add    $0x10,%esp
   1880a:	83 f8 01             	cmp    $0x1,%eax
   1880d:	75 17                	jne    18826 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   1880f:	8b 45 08             	mov    0x8(%ebp),%eax
   18812:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18819:	8b 45 08             	mov    0x8(%ebp),%eax
   1881c:	8b 50 04             	mov    0x4(%eax),%edx
   1881f:	8b 45 08             	mov    0x8(%ebp),%eax
   18822:	89 10                	mov    %edx,(%eax)
   18824:	eb 1b                	jmp    18841 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   18826:	8b 45 08             	mov    0x8(%ebp),%eax
   18829:	8b 40 04             	mov    0x4(%eax),%eax
   1882c:	8b 10                	mov    (%eax),%edx
   1882e:	8b 45 08             	mov    0x8(%ebp),%eax
   18831:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   18834:	8b 45 08             	mov    0x8(%ebp),%eax
   18837:	8b 40 04             	mov    0x4(%eax),%eax
   1883a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   18841:	8b 45 08             	mov    0x8(%ebp),%eax
   18844:	8b 40 08             	mov    0x8(%eax),%eax
   18847:	8d 50 ff             	lea    -0x1(%eax),%edx
   1884a:	8b 45 08             	mov    0x8(%ebp),%eax
   1884d:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   18850:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18853:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1885a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1885d:	8b 50 04             	mov    0x4(%eax),%edx
   18860:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18863:	89 10                	mov    %edx,(%eax)
    return ret;
   18865:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   18868:	c9                   	leave  
   18869:	c3                   	ret    

0001886a <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1886a:	55                   	push   %ebp
   1886b:	89 e5                	mov    %esp,%ebp
   1886d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   18870:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18874:	74 06                	je     1887c <list_remove+0x12>
   18876:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1887a:	75 19                	jne    18895 <list_remove+0x2b>
   1887c:	68 b4 a2 01 00       	push   $0x1a2b4
   18881:	68 a0 a3 01 00       	push   $0x1a3a0
   18886:	6a 60                	push   $0x60
   18888:	68 e4 a2 01 00       	push   $0x1a2e4
   1888d:	e8 ba f3 ff ff       	call   17c4c <pannic>
   18892:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   18895:	83 ec 0c             	sub    $0xc,%esp
   18898:	ff 75 08             	push   0x8(%ebp)
   1889b:	e8 e8 fc ff ff       	call   18588 <list_is_empty>
   188a0:	83 c4 10             	add    $0x10,%esp
   188a3:	85 c0                	test   %eax,%eax
   188a5:	74 0a                	je     188b1 <list_remove+0x47>
        return (list_node_t*)0;
   188a7:	b8 00 00 00 00       	mov    $0x0,%eax
   188ac:	e9 80 00 00 00       	jmp    18931 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   188b1:	8b 45 08             	mov    0x8(%ebp),%eax
   188b4:	8b 00                	mov    (%eax),%eax
   188b6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   188b9:	75 0b                	jne    188c6 <list_remove+0x5c>
   188bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   188be:	8b 50 04             	mov    0x4(%eax),%edx
   188c1:	8b 45 08             	mov    0x8(%ebp),%eax
   188c4:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   188c6:	8b 45 08             	mov    0x8(%ebp),%eax
   188c9:	8b 40 04             	mov    0x4(%eax),%eax
   188cc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   188cf:	75 0b                	jne    188dc <list_remove+0x72>
   188d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   188d4:	8b 10                	mov    (%eax),%edx
   188d6:	8b 45 08             	mov    0x8(%ebp),%eax
   188d9:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   188dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   188df:	8b 00                	mov    (%eax),%eax
   188e1:	85 c0                	test   %eax,%eax
   188e3:	74 0e                	je     188f3 <list_remove+0x89>
   188e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   188e8:	8b 00                	mov    (%eax),%eax
   188ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   188ed:	8b 52 04             	mov    0x4(%edx),%edx
   188f0:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   188f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   188f6:	8b 40 04             	mov    0x4(%eax),%eax
   188f9:	85 c0                	test   %eax,%eax
   188fb:	74 0d                	je     1890a <list_remove+0xa0>
   188fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   18900:	8b 40 04             	mov    0x4(%eax),%eax
   18903:	8b 55 0c             	mov    0xc(%ebp),%edx
   18906:	8b 12                	mov    (%edx),%edx
   18908:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   1890a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1890d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18914:	8b 45 0c             	mov    0xc(%ebp),%eax
   18917:	8b 50 04             	mov    0x4(%eax),%edx
   1891a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1891d:	89 10                	mov    %edx,(%eax)
    list->size--;
   1891f:	8b 45 08             	mov    0x8(%ebp),%eax
   18922:	8b 40 08             	mov    0x8(%eax),%eax
   18925:	8d 50 ff             	lea    -0x1(%eax),%edx
   18928:	8b 45 08             	mov    0x8(%ebp),%eax
   1892b:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   1892e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18931:	c9                   	leave  
   18932:	c3                   	ret    

00018933 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   18933:	55                   	push   %ebp
   18934:	89 e5                	mov    %esp,%ebp
   18936:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   18939:	83 ec 0c             	sub    $0xc,%esp
   1893c:	68 08 6e 07 00       	push   $0x76e08
   18941:	e8 8e eb ff ff       	call   174d4 <mutex_init>
   18946:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   18949:	83 ec 04             	sub    $0x4,%esp
   1894c:	6a 00                	push   $0x0
   1894e:	6a 00                	push   $0x0
   18950:	6a 01                	push   $0x1
   18952:	e8 a7 b7 ff ff       	call   140fe <dev_open>
   18957:	83 c4 10             	add    $0x10,%esp
   1895a:	a3 1c 6e 07 00       	mov    %eax,0x76e1c
}
   1895f:	90                   	nop
   18960:	c9                   	leave  
   18961:	c3                   	ret    

00018962 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   18962:	55                   	push   %ebp
   18963:	89 e5                	mov    %esp,%ebp
   18965:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1896b:	83 ec 04             	sub    $0x4,%esp
   1896e:	68 80 00 00 00       	push   $0x80
   18973:	6a 00                	push   $0x0
   18975:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1897b:	50                   	push   %eax
   1897c:	e8 e4 f7 ff ff       	call   18165 <kernel_memset>
   18981:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   18984:	8d 45 0c             	lea    0xc(%ebp),%eax
   18987:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1898d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   18993:	83 ec 04             	sub    $0x4,%esp
   18996:	50                   	push   %eax
   18997:	ff 75 08             	push   0x8(%ebp)
   1899a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   189a0:	50                   	push   %eax
   189a1:	e8 a8 f8 ff ff       	call   1824e <kernel_vsprintf>
   189a6:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   189a9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   189af:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   189b2:	83 ec 0c             	sub    $0xc,%esp
   189b5:	68 08 6e 07 00       	push   $0x76e08
   189ba:	e8 62 eb ff ff       	call   17521 <mutex_lock>
   189bf:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   189c2:	83 ec 0c             	sub    $0xc,%esp
   189c5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   189cb:	50                   	push   %eax
   189cc:	e8 10 f7 ff ff       	call   180e1 <kernel_strlen>
   189d1:	83 c4 10             	add    $0x10,%esp
   189d4:	8b 15 1c 6e 07 00    	mov    0x76e1c,%edx
   189da:	50                   	push   %eax
   189db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   189e1:	50                   	push   %eax
   189e2:	6a 00                	push   $0x0
   189e4:	52                   	push   %edx
   189e5:	e8 aa b8 ff ff       	call   14294 <dev_write>
   189ea:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   189ed:	83 ec 0c             	sub    $0xc,%esp
   189f0:	68 08 6e 07 00       	push   $0x76e08
   189f5:	e8 cd eb ff ff       	call   175c7 <mutex_unlock>
   189fa:	83 c4 10             	add    $0x10,%esp
   189fd:	90                   	nop
   189fe:	c9                   	leave  
   189ff:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < 1; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 7e                	jmp    8000009d <first_main+0x8d>
        int pid = fork();
8000001f:	e8 73 01 00 00       	call   80000197 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 bf 00 00 80       	push   $0x800000bf
80000037:	e8 33 01 00 00       	call   8000016f <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 66                	jmp    800000a7 <first_main+0x97>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 52                	jne    80000099 <first_main+0x89>
            char tty_num[] = "/dev/tty?";
80000047:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
8000004e:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000055:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8000005e:	83 c0 30             	add    $0x30,%eax
80000061:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * const argv[] = {tty_num, 0};
80000064:	8d 45 e6             	lea    -0x1a(%ebp),%eax
80000067:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, 0);
80000071:	83 ec 04             	sub    $0x4,%esp
80000074:	6a 00                	push   $0x0
80000076:	8d 45 dc             	lea    -0x24(%ebp),%eax
80000079:	50                   	push   %eax
8000007a:	68 d4 00 00 80       	push   $0x800000d4
8000007f:	e8 2e 01 00 00       	call   800001b2 <execve>
80000084:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
80000087:	83 ec 0c             	sub    $0xc,%esp
8000008a:	68 e8 03 00 00       	push   $0x3e8
8000008f:	e8 96 00 00 00       	call   8000012a <msleep>
80000094:	83 c4 10             	add    $0x10,%esp
80000097:	eb ee                	jmp    80000087 <first_main+0x77>
    for (int i = 0; i < 1; ++i) {
80000099:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8000009d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
800000a1:	0f 8e 78 ff ff ff    	jle    8000001f <first_main+0xf>
        }
    }    

    for (;;) {
        //回收所有孤儿进程
        int status = 0;
800000a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        wait(&status);
800000ae:	83 ec 0c             	sub    $0xc,%esp
800000b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000b4:	50                   	push   %eax
800000b5:	e8 bb 02 00 00       	call   80000375 <wait>
800000ba:	83 c4 10             	add    $0x10,%esp
    for (;;) {
800000bd:	eb e8                	jmp    800000a7 <first_main+0x97>
800000bf:	63 72 65             	arpl   %si,0x65(%edx)
800000c2:	61                   	popa   
800000c3:	74 65                	je     8000012a <msleep>
800000c5:	20 73 68             	and    %dh,0x68(%ebx)
800000c8:	65 6c                	gs insb (%dx),%es:(%edi)
800000ca:	6c                   	insb   (%dx),%es:(%edi)
800000cb:	20 66 61             	and    %ah,0x61(%esi)
800000ce:	69 6c 65 64 2e 00 73 	imul   $0x6873002e,0x64(%ebp,%eiz,2),%ebp
800000d5:	68 
800000d6:	65 6c                	gs insb (%dx),%es:(%edi)
800000d8:	6c                   	insb   (%dx),%es:(%edi)
800000d9:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
800000dc:	66                   	data16
	...

800000de <sys_call>:
#include    "os_cfg.h"
#include    "applib/lib_syscall.h"
#include    <stdlib.h>


int sys_call(syscall_args_t *args) {
800000de:	55                   	push   %ebp
800000df:	89 e5                	mov    %esp,%ebp
800000e1:	57                   	push   %edi
800000e2:	56                   	push   %esi
800000e3:	53                   	push   %ebx
800000e4:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000ee:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000f5:	8b 45 08             	mov    0x8(%ebp),%eax
800000f8:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000fb:	8b 55 08             	mov    0x8(%ebp),%edx
800000fe:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000101:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000104:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000107:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000010a:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000010d:	8b 75 08             	mov    0x8(%ebp),%esi
80000110:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000112:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000115:	50                   	push   %eax
80000116:	52                   	push   %edx
80000117:	51                   	push   %ecx
80000118:	53                   	push   %ebx
80000119:	56                   	push   %esi
8000011a:	ff 1f                	lcall  *(%edi)
8000011c:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8000011f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000122:	83 c4 10             	add    $0x10,%esp
80000125:	5b                   	pop    %ebx
80000126:	5e                   	pop    %esi
80000127:	5f                   	pop    %edi
80000128:	5d                   	pop    %ebp
80000129:	c3                   	ret    

8000012a <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8000012a:	55                   	push   %ebp
8000012b:	89 e5                	mov    %esp,%ebp
8000012d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000130:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000134:	7e 1b                	jle    80000151 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000136:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000013d:	8b 45 08             	mov    0x8(%ebp),%eax
80000140:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000143:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000146:	50                   	push   %eax
80000147:	e8 92 ff ff ff       	call   800000de <sys_call>
8000014c:	83 c4 04             	add    $0x4,%esp
8000014f:	eb 01                	jmp    80000152 <msleep+0x28>
    if (ms <= 0) return;
80000151:	90                   	nop

}
80000152:	c9                   	leave  
80000153:	c3                   	ret    

80000154 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000154:	55                   	push   %ebp
80000155:	89 e5                	mov    %esp,%ebp
80000157:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000015a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000161:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000164:	50                   	push   %eax
80000165:	e8 74 ff ff ff       	call   800000de <sys_call>
8000016a:	83 c4 04             	add    $0x4,%esp
}
8000016d:	c9                   	leave  
8000016e:	c3                   	ret    

8000016f <print_msg>:

void print_msg(const char *fmt, int arg) {
8000016f:	55                   	push   %ebp
80000170:	89 e5                	mov    %esp,%ebp
80000172:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000175:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000017c:	8b 45 08             	mov    0x8(%ebp),%eax
8000017f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000182:	8b 45 0c             	mov    0xc(%ebp),%eax
80000185:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000188:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000018b:	50                   	push   %eax
8000018c:	e8 4d ff ff ff       	call   800000de <sys_call>
80000191:	83 c4 04             	add    $0x4,%esp
}
80000194:	90                   	nop
80000195:	c9                   	leave  
80000196:	c3                   	ret    

80000197 <fork>:

int fork (void) {
80000197:	55                   	push   %ebp
80000198:	89 e5                	mov    %esp,%ebp
8000019a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000019d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800001a4:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001a7:	50                   	push   %eax
800001a8:	e8 31 ff ff ff       	call   800000de <sys_call>
800001ad:	83 c4 04             	add    $0x4,%esp
}
800001b0:	c9                   	leave  
800001b1:	c3                   	ret    

800001b2 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001b2:	55                   	push   %ebp
800001b3:	89 e5                	mov    %esp,%ebp
800001b5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001b8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001bf:	8b 45 08             	mov    0x8(%ebp),%eax
800001c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001c5:	8b 45 0c             	mov    0xc(%ebp),%eax
800001c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001cb:	8b 45 10             	mov    0x10(%ebp),%eax
800001ce:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d4:	50                   	push   %eax
800001d5:	e8 04 ff ff ff       	call   800000de <sys_call>
800001da:	83 c4 04             	add    $0x4,%esp
}
800001dd:	c9                   	leave  
800001de:	c3                   	ret    

800001df <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001df:	55                   	push   %ebp
800001e0:	89 e5                	mov    %esp,%ebp
800001e2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001e5:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001ec:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ef:	50                   	push   %eax
800001f0:	e8 e9 fe ff ff       	call   800000de <sys_call>
800001f5:	83 c4 04             	add    $0x4,%esp
}
800001f8:	c9                   	leave  
800001f9:	c3                   	ret    

800001fa <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001fa:	55                   	push   %ebp
800001fb:	89 e5                	mov    %esp,%ebp
800001fd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
80000200:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000207:	8b 45 08             	mov    0x8(%ebp),%eax
8000020a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8000020d:	8b 45 0c             	mov    0xc(%ebp),%eax
80000210:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000213:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000216:	50                   	push   %eax
80000217:	e8 c2 fe ff ff       	call   800000de <sys_call>
8000021c:	83 c4 04             	add    $0x4,%esp
}
8000021f:	c9                   	leave  
80000220:	c3                   	ret    

80000221 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000221:	55                   	push   %ebp
80000222:	89 e5                	mov    %esp,%ebp
80000224:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000227:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000022e:	8b 45 08             	mov    0x8(%ebp),%eax
80000231:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000234:	8b 45 0c             	mov    0xc(%ebp),%eax
80000237:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000023a:	8b 45 10             	mov    0x10(%ebp),%eax
8000023d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000240:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000243:	50                   	push   %eax
80000244:	e8 95 fe ff ff       	call   800000de <sys_call>
80000249:	83 c4 04             	add    $0x4,%esp
}
8000024c:	c9                   	leave  
8000024d:	c3                   	ret    

8000024e <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000024e:	55                   	push   %ebp
8000024f:	89 e5                	mov    %esp,%ebp
80000251:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000254:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000025b:	8b 45 08             	mov    0x8(%ebp),%eax
8000025e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000261:	8b 45 0c             	mov    0xc(%ebp),%eax
80000264:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000267:	8b 45 10             	mov    0x10(%ebp),%eax
8000026a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000026d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000270:	50                   	push   %eax
80000271:	e8 68 fe ff ff       	call   800000de <sys_call>
80000276:	83 c4 04             	add    $0x4,%esp
}
80000279:	c9                   	leave  
8000027a:	c3                   	ret    

8000027b <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000027b:	55                   	push   %ebp
8000027c:	89 e5                	mov    %esp,%ebp
8000027e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000281:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000288:	8b 45 08             	mov    0x8(%ebp),%eax
8000028b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000028e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000291:	50                   	push   %eax
80000292:	e8 47 fe ff ff       	call   800000de <sys_call>
80000297:	83 c4 04             	add    $0x4,%esp
}
8000029a:	c9                   	leave  
8000029b:	c3                   	ret    

8000029c <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000029c:	55                   	push   %ebp
8000029d:	89 e5                	mov    %esp,%ebp
8000029f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002a2:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
800002a9:	8b 45 08             	mov    0x8(%ebp),%eax
800002ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002af:	8b 45 0c             	mov    0xc(%ebp),%eax
800002b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002b5:	8b 45 10             	mov    0x10(%ebp),%eax
800002b8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002be:	50                   	push   %eax
800002bf:	e8 1a fe ff ff       	call   800000de <sys_call>
800002c4:	83 c4 04             	add    $0x4,%esp
}
800002c7:	c9                   	leave  
800002c8:	c3                   	ret    

800002c9 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002c9:	55                   	push   %ebp
800002ca:	89 e5                	mov    %esp,%ebp
800002cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002cf:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002d6:	8b 45 08             	mov    0x8(%ebp),%eax
800002d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002df:	50                   	push   %eax
800002e0:	e8 f9 fd ff ff       	call   800000de <sys_call>
800002e5:	83 c4 04             	add    $0x4,%esp
}
800002e8:	c9                   	leave  
800002e9:	c3                   	ret    

800002ea <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002ea:	55                   	push   %ebp
800002eb:	89 e5                	mov    %esp,%ebp
800002ed:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002f0:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002f7:	8b 45 08             	mov    0x8(%ebp),%eax
800002fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002fd:	8b 45 0c             	mov    0xc(%ebp),%eax
80000300:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000303:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000306:	50                   	push   %eax
80000307:	e8 d2 fd ff ff       	call   800000de <sys_call>
8000030c:	83 c4 04             	add    $0x4,%esp
}
8000030f:	c9                   	leave  
80000310:	c3                   	ret    

80000311 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000311:	55                   	push   %ebp
80000312:	89 e5                	mov    %esp,%ebp
80000314:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000317:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = (int)incr;
8000031e:	8b 45 08             	mov    0x8(%ebp),%eax
80000321:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000324:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000327:	50                   	push   %eax
80000328:	e8 b1 fd ff ff       	call   800000de <sys_call>
8000032d:	83 c4 04             	add    $0x4,%esp
}
80000330:	c9                   	leave  
80000331:	c3                   	ret    

80000332 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000332:	55                   	push   %ebp
80000333:	89 e5                	mov    %esp,%ebp
80000335:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000338:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = file;
8000033f:	8b 45 08             	mov    0x8(%ebp),%eax
80000342:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000345:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000348:	50                   	push   %eax
80000349:	e8 90 fd ff ff       	call   800000de <sys_call>
8000034e:	83 c4 04             	add    $0x4,%esp
}
80000351:	c9                   	leave  
80000352:	c3                   	ret    

80000353 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000353:	55                   	push   %ebp
80000354:	89 e5                	mov    %esp,%ebp
80000356:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000359:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
80000360:	8b 45 08             	mov    0x8(%ebp),%eax
80000363:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
80000366:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000369:	50                   	push   %eax
8000036a:	e8 6f fd ff ff       	call   800000de <sys_call>
8000036f:	83 c4 04             	add    $0x4,%esp
}
80000372:	90                   	nop
80000373:	c9                   	leave  
80000374:	c3                   	ret    

80000375 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000375:	55                   	push   %ebp
80000376:	89 e5                	mov    %esp,%ebp
80000378:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
8000037b:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000382:	8b 45 08             	mov    0x8(%ebp),%eax
80000385:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
80000388:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000038b:	50                   	push   %eax
8000038c:	e8 4d fd ff ff       	call   800000de <sys_call>
80000391:	83 c4 04             	add    $0x4,%esp
}
80000394:	c9                   	leave  
80000395:	c3                   	ret    
