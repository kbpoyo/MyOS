
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00004ed0 memsz 0x00004ed0 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x00024a20 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x0003a000 align 2**12
         filesz 0x00000123 memsz 0x00000123 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fab  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000f10  00013fc0  00013fc0  00004fc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00023a20  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   00000123  80000000  0003a000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000022de  00000000  00000000  00007123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000780  00000000  00000000  00009401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00006325  00000000  00000000  00009b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001cd3  00000000  00000000  0000fea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000260  00000000  00000000  00011b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000013d8  00000000  00000000  00011de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000004e  00000000  00000000  000131b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  00013206  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001758  00000000  00000000  00013234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	0000000f get_pte_privilege
0001036f l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00007e88 paddr_alloc
0001e000 l     O .bss	00001000 kernel_page_dir
00010380 l     F .text	00000025 page_index
000103a5 l     F .text	00000056 page_ref_add
000103fb l     F .text	00000068 page_ref_sub
00010463 l     F .text	0000004e get_page_ref
000104b1 l     F .text	00000051 clear_page_ref
00010502 l     F .text	00000087 addr_alloc_init
00010589 l     F .text	00000067 addr_alloc_page
000105f0 l     F .text	0000009c addr_free_page
0001068c l     F .text	00000066 show_mem_info
000106f2 l     F .text	00000037 total_mem_size
00014108 l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
0001411c l     O .rodata	0000000c __func__.1
00010e0f l     F .text	00000010 curr_page_dir
00014128 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010ed8 l     F .text	0000003d list_node_init
00014228 l     O .rodata	0000000f __func__.10
00010f15 l     F .text	0000002d list_node_next
00014288 l     O .rodata	0000000f __func__.4
00010f42 l     F .text	00000047 list_init
00014238 l     O .rodata	0000000a __func__.9
00010f89 l     F .text	00000035 list_is_empty
00014298 l     O .rodata	0000000e __func__.3
00010fbe l     F .text	0000002d list_get_size
000142c8 l     O .rodata	0000000e __func__.0
00010feb l     F .text	0000002c list_get_first
00014278 l     O .rodata	0000000f __func__.5
00011017 l     F .text	00000017 up2
0001102e l     F .text	00000007 hlt
00011035 l     F .text	0000000c write_cr3
00011041 l     F .text	0000001a far_jump
0001105b l     F .text	00000017 write_tr
00011072 l     F .text	00000011 mmu_set_page_dir
0001f000 l     O .bss	000001a8 task_manager
0001f1c0 l     O .bss	00005e00 task_table
00024fc0 l     O .bss	00000014 task_table_lock
00011083 l     F .text	0000001f switch_to_tss
000110bd l     F .text	00000172 tss_init
0001421c l     O .rodata	0000000a __func__.11
00024fe0 l     O .bss	00000200 empty_task_stack
000113d0 l     F .text	0000000a empty_task
00014244 l     O .rodata	00000010 __func__.8
00014254 l     O .rodata	0000000f __func__.7
00014264 l     O .rodata	00000011 __func__.6
000142a8 l     O .rodata	0000000f __func__.2
000142b8 l     O .rodata	00000010 __func__.1
0001189b l     F .text	00000068 alloc_task
00011903 l     F .text	00000033 free_task
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00011c03 l     F .text	00000028 lgdt
000251e0 l     O .bss	00010000 gdt_table
000351e0 l     O .bss	00002000 is_alloc
000371e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011e39 l     F .text	00000007 cli
00011e40 l     F .text	00000007 sti
00011e47 l     F .text	00000007 hlt
00011e4e l     F .text	0000001d inb
00011e6b l     F .text	00000021 outb
00011e8c l     F .text	00000028 lidt
00011eb4 l     F .text	00000011 read_cr2
00011ec5 l     F .text	00000010 read_eflags
00011ed5 l     F .text	0000000b write_eflags
00037200 l     O .bss	00000800 idt_table
00011ee0 l     F .text	0000010f print_exception_fram
00011fef l     F .text	0000003e do_default_handler
00012405 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
000148a0 l     O .rodata	0000002c sys_table
00000000 l    df *ABS*	00000000 time.c
0001289a l     F .text	00000021 outb
00037a00 l     O .bss	00000004 sys_tick
000128e3 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
0001498c l     O .rodata	0000000c __func__.1
00014998 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00012a51 l     F .text	00000047 list_init
00014a58 l     O .rodata	0000000a __func__.1
00012a98 l     F .text	00000035 list_is_empty
00014a64 l     O .rodata	0000000e __func__.0
00014a4c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00012c63 l     F .text	00000047 list_init
00014b18 l     O .rodata	0000000a __func__.1
00012caa l     F .text	00000035 list_is_empty
00014b24 l     O .rodata	0000000e __func__.0
00014b0c l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012e33 l     F .text	00000047 list_init
00014c38 l     O .rodata	0000000a __func__.3
00012e7a l     F .text	0000002d list_get_size
00014c44 l     O .rodata	0000000e __func__.2
00012ea7 l     F .text	0000002c list_get_first
00014c64 l     O .rodata	0000000f __func__.0
00012ed3 l     F .text	0000002d list_get_last
00014c54 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000131db l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00014d34 l     O .rodata	0000000c __func__.3
00014d40 l     O .rodata	0000000f __func__.2
00014d50 l     O .rodata	0000000f __func__.1
00014d60 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00013a40 l     F .text	00000035 list_is_empty
00014e68 l     O .rodata	0000000e __func__.5
00013a75 l     F .text	0000002d list_get_size
00014ea0 l     O .rodata	0000000e __func__.2
00014e54 l     O .rodata	00000012 __func__.6
00014e78 l     O .rodata	00000011 __func__.4
00014e8c l     O .rodata	00000012 __func__.3
00014eb0 l     O .rodata	00000011 __func__.1
00014ec4 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00013deb l     F .text	0000001d inb
00013e08 l     F .text	00000021 outb
00037a04 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000001b getpid
80000077 l     F .first_task	00000028 print_msg
8000009f l     F .first_task	0000001b fork
000132c2 g     F .text	00000078 bitmap_get_bit
00013695 g     F .text	0000004f kernel_memcpy
0001264d g     F .text	00000098 idt_enable
00011677 g     F .text	0000000a task_current
00013b2d g     F .text	0000008f list_insert_last
00011b1e g     F .text	00000061 sys_yield
00012161 g     F .text	0000001c do_handler_segment_not_present
000115b3 g     F .text	0000004b task_set_ready
00013442 g     F .text	00000021 bitmap_is_set
00012784 g     F .text	0000000b idt_enable_global
000136e4 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001280b g     F .text	0000008f do_handler_syscall
00013e29 g     F .text	00000088 log_init
000119a3 g     F .text	0000017b sys_fork
00012a14 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000127f1 g     F .text	0000001a sys_print_msg
0001355e g     F .text	00000047 kernel_strcpy
00012779 g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
800000ba g     F .first_task	00000059 first_main
000123c2 g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000120b9 g     F .text	0000001c do_handler_overflow
00012336 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00012199 g     F .text	000000b1 do_handler_general_protection
000123a6 g     F .text	0000001c do_handler_control_exception
00012e0a g     F .text	00000029 sem_count
00012049 g     F .text	0000001c do_handler_divider
0001333a g     F .text	00000108 bitmap_set_bit
00012129 g     F .text	0000001c do_handler_double_fault
0001224a g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
0001278f g     F .text	00000039 pic_send_eoi
00013c6d g     F .text	000000b5 list_remove_last
000115a9 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012d22 g     F .text	0000006b sem_wait
00010ded g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011cea g     F .text	000000b3 gdt_init
0001238a g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00012065 g     F .text	0000001c do_handler_debug
00037a20 g     O .bss	00002000 stack
00011936 g     F .text	00000060 sys_sleep
00010e3f g     F .text	00000099 memory_free_page
00012f00 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0003a000 g       *ABS*	00000000 s_first_task
00011350 g     F .text	00000080 task_uninit
00010d35 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00012498 g     F .text	000001b5 idt_init
00012d8d g     F .text	0000007d sem_notify
00011e12 g     F .text	00000027 gdt_free
000120f1 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
0001231a g     F .text	0000001c do_handler_fpu_error
000114b7 g     F .text	000000f2 task_first_init
00012352 g     F .text	0000001c do_handler_machine_check
00013aa2 g     F .text	0000008b list_insert_first
00011850 g     F .text	0000004b task_set_wakeup
00011649 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010943 g     F .text	00000085 memory_creat_uvm
000135a5 g     F .text	00000051 kernel_strncpy
0003a123 g       *ABS*	00000000 mem_free_start
0001295d g     F .text	00000053 kernel_init
00012cdf g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000137cd g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0003a000 g       .first_task	00000000 e_data
00012b1a g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00012145 g     F .text	0000001c do_handler_invalid_tss
000126e5 g     F .text	00000094 idt_disable
0003a123 g       *ABS*	00000000 e_first_task
000117f4 g     F .text	0000005c task_set_sleep
000107d9 g     F .text	000000b6 memory_creat_map
00012081 g     F .text	0000001c do_handler_nmi
00012acd g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
00010b55 g     F .text	000000e7 memory_destroy_uvm
00013218 g     F .text	00000016 bitmap_byte_count
0001210d g     F .text	0000001c do_handler_device_unavailable
000127c8 g     F .text	00000018 idt_enter_protection
0001088f g     F .text	000000b4 create_kernal_table
000116e9 g     F .text	0000010b task_slice_end
000109c8 g     F .text	0000018d memory_copy_uvm
000129b0 g     F .text	00000064 move_to_first_task
00013725 g     F .text	00000084 kernel_memcmp
0001236e g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
0001202d g     F .text	0000001c do_handler_unknown
00010e1f g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
000110a2 g     F .text	0000001b task_switch_from_to
00012bab g     F .text	000000b8 mutex_unlock
00011681 g     F .text	00000068 task_switch
00013660 g     F .text	00000035 kernel_strlen
000115fe g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00011c2b g     F .text	000000bf segment_desc_set
000120d5 g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
00013bbc g     F .text	000000b1 list_remove_first
00014ed0 g       .rodata	00000000 e_text
000135f6 g     F .text	0000006a kernel_strncmp
0001322e g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00013463 g     F .text	000000fb bitmap_alloc_nbits
000113da g     F .text	000000dd task_manager_init
0001122f g     F .text	00000044 task_start
00010c3c g     F .text	000000f9 memory_init
00011b7f g     F .text	0000003d sys_execve
000131e2 g     F .text	00000036 pannic
0001217d g     F .text	0000001c do_handler_stack_segment_fault
0001209d g     F .text	0000001c do_handler_breakpoint
00013eb1 g     F .text	000000fa log_printf
00011273 g     F .text	000000dd task_init
000137a9 g     F .text	00000024 kernel_sprintf
00011996 g     F .text	0000000d sys_getpid
00011d9d g     F .text	00000075 gdt_alloc_desc
0001396a g     F .text	000000d6 kernel_itoa
00013d22 g     F .text	000000c9 list_remove
00011bbc g     F .text	00000047 gate_desc_set
000127e0 g     F .text	00000011 idt_leave_protection
00010729 g     F .text	000000b0 find_pte
000128bb g     F .text	00000028 do_handler_time
00012945 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 52 29 00 00       	call   1295d <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 9a 03 00       	mov    $0x39a20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 ea 29 00 00       	jmp    12a14 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 f2 1f 00 00       	call   1202d <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 f1 1f 00 00       	call   12049 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 f0 1f 00 00       	call   12065 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 ef 1f 00 00       	call   12081 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 ee 1f 00 00       	call   1209d <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 ed 1f 00 00       	call   120b9 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 ec 1f 00 00       	call   120d5 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 eb 1f 00 00       	call   120f1 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 ea 1f 00 00       	call   1210d <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 eb 1f 00 00       	call   12129 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 ec 1f 00 00       	call   12145 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 ed 1f 00 00       	call   12161 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 ee 1f 00 00       	call   1217d <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 ef 1f 00 00       	call   12199 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 85 20 00 00       	call   1224a <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 38 21 00 00       	call   1231a <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 39 21 00 00       	call   12336 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 38 21 00 00       	call   12352 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 37 21 00 00       	call   1236e <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 36 21 00 00       	call   1238a <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 37 21 00 00       	call   123a6 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 2f 26 00 00       	call   128bb <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 50 25 00 00       	call   1280b <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10363:	8b 45 08             	mov    0x8(%ebp),%eax
   10366:	8b 00                	mov    (%eax),%eax
   10368:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1036d:	5d                   	pop    %ebp
   1036e:	c3                   	ret    

0001036f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1036f:	55                   	push   %ebp
   10370:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10372:	ff 75 08             	push   0x8(%ebp)
   10375:	e8 71 ff ff ff       	call   102eb <write_cr3>
   1037a:	83 c4 04             	add    $0x4,%esp
}
   1037d:	90                   	nop
   1037e:	c9                   	leave  
   1037f:	c3                   	ret    

00010380 <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   10384:	8b 45 08             	mov    0x8(%ebp),%eax
   10387:	8b 50 1c             	mov    0x1c(%eax),%edx
   1038a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1038d:	29 d0                	sub    %edx,%eax
   1038f:	89 c1                	mov    %eax,%ecx
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	8b 58 24             	mov    0x24(%eax),%ebx
   10397:	89 c8                	mov    %ecx,%eax
   10399:	ba 00 00 00 00       	mov    $0x0,%edx
   1039e:	f7 f3                	div    %ebx
}
   103a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103a3:	c9                   	leave  
   103a4:	c3                   	ret    

000103a5 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103a5:	55                   	push   %ebp
   103a6:	89 e5                	mov    %esp,%ebp
   103a8:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103ab:	ff 75 0c             	push   0xc(%ebp)
   103ae:	ff 75 08             	push   0x8(%ebp)
   103b1:	e8 ca ff ff ff       	call   10380 <page_index>
   103b6:	83 c4 08             	add    $0x8,%esp
   103b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103bc:	8b 45 08             	mov    0x8(%ebp),%eax
   103bf:	83 ec 0c             	sub    $0xc,%esp
   103c2:	50                   	push   %eax
   103c3:	e8 52 27 00 00       	call   12b1a <mutex_lock>
   103c8:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103cb:	8b 55 08             	mov    0x8(%ebp),%edx
   103ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103d1:	01 d0                	add    %edx,%eax
   103d3:	83 c0 28             	add    $0x28,%eax
   103d6:	0f b6 00             	movzbl (%eax),%eax
   103d9:	8d 50 01             	lea    0x1(%eax),%edx
   103dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103e2:	01 c8                	add    %ecx,%eax
   103e4:	83 c0 28             	add    $0x28,%eax
   103e7:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   103e9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ec:	83 ec 0c             	sub    $0xc,%esp
   103ef:	50                   	push   %eax
   103f0:	e8 b6 27 00 00       	call   12bab <mutex_unlock>
   103f5:	83 c4 10             	add    $0x10,%esp
 }
   103f8:	90                   	nop
   103f9:	c9                   	leave  
   103fa:	c3                   	ret    

000103fb <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   103fb:	55                   	push   %ebp
   103fc:	89 e5                	mov    %esp,%ebp
   103fe:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   10401:	ff 75 0c             	push   0xc(%ebp)
   10404:	ff 75 08             	push   0x8(%ebp)
   10407:	e8 74 ff ff ff       	call   10380 <page_index>
   1040c:	83 c4 08             	add    $0x8,%esp
   1040f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	83 ec 0c             	sub    $0xc,%esp
   10418:	50                   	push   %eax
   10419:	e8 fc 26 00 00       	call   12b1a <mutex_lock>
   1041e:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   10421:	8b 55 08             	mov    0x8(%ebp),%edx
   10424:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10427:	01 d0                	add    %edx,%eax
   10429:	83 c0 28             	add    $0x28,%eax
   1042c:	0f b6 00             	movzbl (%eax),%eax
   1042f:	84 c0                	test   %al,%al
   10431:	74 1e                	je     10451 <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10433:	8b 55 08             	mov    0x8(%ebp),%edx
   10436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10439:	01 d0                	add    %edx,%eax
   1043b:	83 c0 28             	add    $0x28,%eax
   1043e:	0f b6 00             	movzbl (%eax),%eax
   10441:	8d 50 ff             	lea    -0x1(%eax),%edx
   10444:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10447:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044a:	01 c8                	add    %ecx,%eax
   1044c:	83 c0 28             	add    $0x28,%eax
   1044f:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10451:	8b 45 08             	mov    0x8(%ebp),%eax
   10454:	83 ec 0c             	sub    $0xc,%esp
   10457:	50                   	push   %eax
   10458:	e8 4e 27 00 00       	call   12bab <mutex_unlock>
   1045d:	83 c4 10             	add    $0x10,%esp
 }
   10460:	90                   	nop
   10461:	c9                   	leave  
   10462:	c3                   	ret    

00010463 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
   10466:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10469:	ff 75 0c             	push   0xc(%ebp)
   1046c:	ff 75 08             	push   0x8(%ebp)
   1046f:	e8 0c ff ff ff       	call   10380 <page_index>
   10474:	83 c4 08             	add    $0x8,%esp
   10477:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 94 26 00 00       	call   12b1a <mutex_lock>
   10486:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   10489:	8b 55 08             	mov    0x8(%ebp),%edx
   1048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048f:	01 d0                	add    %edx,%eax
   10491:	83 c0 28             	add    $0x28,%eax
   10494:	0f b6 00             	movzbl (%eax),%eax
   10497:	0f b6 c0             	movzbl %al,%eax
   1049a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	83 ec 0c             	sub    $0xc,%esp
   104a3:	50                   	push   %eax
   104a4:	e8 02 27 00 00       	call   12bab <mutex_unlock>
   104a9:	83 c4 10             	add    $0x10,%esp

  return ref;
   104ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104af:	c9                   	leave  
   104b0:	c3                   	ret    

000104b1 <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static void clear_page_ref(addr_alloc_t *alloc) {
   104b1:	55                   	push   %ebp
   104b2:	89 e5                	mov    %esp,%ebp
   104b4:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	83 ec 0c             	sub    $0xc,%esp
   104bd:	50                   	push   %eax
   104be:	e8 57 26 00 00       	call   12b1a <mutex_lock>
   104c3:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104c6:	8b 45 08             	mov    0x8(%ebp),%eax
   104c9:	8b 40 20             	mov    0x20(%eax),%eax
   104cc:	8b 55 08             	mov    0x8(%ebp),%edx
   104cf:	8b 4a 24             	mov    0x24(%edx),%ecx
   104d2:	ba 00 00 00 00       	mov    $0x0,%edx
   104d7:	f7 f1                	div    %ecx
   104d9:	89 c2                	mov    %eax,%edx
   104db:	8b 45 08             	mov    0x8(%ebp),%eax
   104de:	83 c0 28             	add    $0x28,%eax
   104e1:	83 ec 04             	sub    $0x4,%esp
   104e4:	52                   	push   %edx
   104e5:	6a 00                	push   $0x0
   104e7:	50                   	push   %eax
   104e8:	e8 f7 31 00 00       	call   136e4 <kernel_memset>
   104ed:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   104f0:	8b 45 08             	mov    0x8(%ebp),%eax
   104f3:	83 ec 0c             	sub    $0xc,%esp
   104f6:	50                   	push   %eax
   104f7:	e8 af 26 00 00       	call   12bab <mutex_unlock>
   104fc:	83 c4 10             	add    $0x10,%esp
}
   104ff:	90                   	nop
   10500:	c9                   	leave  
   10501:	c3                   	ret    

00010502 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10502:	55                   	push   %ebp
   10503:	89 e5                	mov    %esp,%ebp
   10505:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10508:	8b 45 08             	mov    0x8(%ebp),%eax
   1050b:	83 ec 0c             	sub    $0xc,%esp
   1050e:	50                   	push   %eax
   1050f:	e8 b9 25 00 00       	call   12acd <mutex_init>
   10514:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10517:	8b 45 08             	mov    0x8(%ebp),%eax
   1051a:	8b 55 10             	mov    0x10(%ebp),%edx
   1051d:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 55 14             	mov    0x14(%ebp),%edx
   10526:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10529:	8b 45 08             	mov    0x8(%ebp),%eax
   1052c:	8b 55 18             	mov    0x18(%ebp),%edx
   1052f:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 20             	mov    0x20(%eax),%eax
   10538:	8b 55 08             	mov    0x8(%ebp),%edx
   1053b:	8b 4a 24             	mov    0x24(%edx),%ecx
   1053e:	ba 00 00 00 00       	mov    $0x0,%edx
   10543:	f7 f1                	div    %ecx
   10545:	89 c2                	mov    %eax,%edx
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	83 c0 14             	add    $0x14,%eax
   1054d:	6a 00                	push   $0x0
   1054f:	52                   	push   %edx
   10550:	ff 75 0c             	push   0xc(%ebp)
   10553:	50                   	push   %eax
   10554:	e8 d5 2c 00 00       	call   1322e <bitmap_init>
   10559:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   1055c:	8b 45 08             	mov    0x8(%ebp),%eax
   1055f:	8b 40 20             	mov    0x20(%eax),%eax
   10562:	8b 55 08             	mov    0x8(%ebp),%edx
   10565:	8b 4a 24             	mov    0x24(%edx),%ecx
   10568:	ba 00 00 00 00       	mov    $0x0,%edx
   1056d:	f7 f1                	div    %ecx
   1056f:	89 c2                	mov    %eax,%edx
   10571:	8b 45 08             	mov    0x8(%ebp),%eax
   10574:	83 c0 28             	add    $0x28,%eax
   10577:	83 ec 04             	sub    $0x4,%esp
   1057a:	52                   	push   %edx
   1057b:	6a 00                	push   $0x0
   1057d:	50                   	push   %eax
   1057e:	e8 61 31 00 00       	call   136e4 <kernel_memset>
   10583:	83 c4 10             	add    $0x10,%esp
}
   10586:	90                   	nop
   10587:	c9                   	leave  
   10588:	c3                   	ret    

00010589 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1058f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	83 ec 0c             	sub    $0xc,%esp
   1059c:	50                   	push   %eax
   1059d:	e8 78 25 00 00       	call   12b1a <mutex_lock>
   105a2:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	83 c0 14             	add    $0x14,%eax
   105ab:	83 ec 04             	sub    $0x4,%esp
   105ae:	ff 75 0c             	push   0xc(%ebp)
   105b1:	6a 00                	push   $0x0
   105b3:	50                   	push   %eax
   105b4:	e8 aa 2e 00 00       	call   13463 <bitmap_alloc_nbits>
   105b9:	83 c4 10             	add    $0x10,%esp
   105bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105c3:	78 17                	js     105dc <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105c5:	8b 45 08             	mov    0x8(%ebp),%eax
   105c8:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105cb:	8b 45 08             	mov    0x8(%ebp),%eax
   105ce:	8b 50 24             	mov    0x24(%eax),%edx
   105d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105d4:	0f af c2             	imul   %edx,%eax
   105d7:	01 c8                	add    %ecx,%eax
   105d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105dc:	8b 45 08             	mov    0x8(%ebp),%eax
   105df:	83 ec 0c             	sub    $0xc,%esp
   105e2:	50                   	push   %eax
   105e3:	e8 c3 25 00 00       	call   12bab <mutex_unlock>
   105e8:	83 c4 10             	add    $0x10,%esp

  return addr;
   105eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   105ee:	c9                   	leave  
   105ef:	c3                   	ret    

000105f0 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   105f0:	55                   	push   %ebp
   105f1:	89 e5                	mov    %esp,%ebp
   105f3:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   105f6:	8b 45 08             	mov    0x8(%ebp),%eax
   105f9:	83 ec 0c             	sub    $0xc,%esp
   105fc:	50                   	push   %eax
   105fd:	e8 18 25 00 00       	call   12b1a <mutex_lock>
   10602:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1060c:	eb 64                	jmp    10672 <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1060e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10611:	c1 e0 0c             	shl    $0xc,%eax
   10614:	89 c2                	mov    %eax,%edx
   10616:	8b 45 0c             	mov    0xc(%ebp),%eax
   10619:	01 d0                	add    %edx,%eax
   1061b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1061e:	83 ec 08             	sub    $0x8,%esp
   10621:	ff 75 f0             	push   -0x10(%ebp)
   10624:	ff 75 08             	push   0x8(%ebp)
   10627:	e8 cf fd ff ff       	call   103fb <page_ref_sub>
   1062c:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1062f:	83 ec 08             	sub    $0x8,%esp
   10632:	ff 75 f0             	push   -0x10(%ebp)
   10635:	ff 75 08             	push   0x8(%ebp)
   10638:	e8 26 fe ff ff       	call   10463 <get_page_ref>
   1063d:	83 c4 10             	add    $0x10,%esp
   10640:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10643:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10647:	75 25                	jne    1066e <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10649:	83 ec 08             	sub    $0x8,%esp
   1064c:	ff 75 f0             	push   -0x10(%ebp)
   1064f:	ff 75 08             	push   0x8(%ebp)
   10652:	e8 29 fd ff ff       	call   10380 <page_index>
   10657:	83 c4 10             	add    $0x10,%esp
   1065a:	8b 55 08             	mov    0x8(%ebp),%edx
   1065d:	83 c2 14             	add    $0x14,%edx
   10660:	6a 00                	push   $0x0
   10662:	6a 01                	push   $0x1
   10664:	50                   	push   %eax
   10665:	52                   	push   %edx
   10666:	e8 cf 2c 00 00       	call   1333a <bitmap_set_bit>
   1066b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1066e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10672:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10675:	3b 45 10             	cmp    0x10(%ebp),%eax
   10678:	7c 94                	jl     1060e <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   1067a:	8b 45 08             	mov    0x8(%ebp),%eax
   1067d:	83 ec 0c             	sub    $0xc,%esp
   10680:	50                   	push   %eax
   10681:	e8 25 25 00 00       	call   12bab <mutex_unlock>
   10686:	83 c4 10             	add    $0x10,%esp
}
   10689:	90                   	nop
   1068a:	c9                   	leave  
   1068b:	c3                   	ret    

0001068c <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1068c:	55                   	push   %ebp
   1068d:	89 e5                	mov    %esp,%ebp
   1068f:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10692:	83 ec 0c             	sub    $0xc,%esp
   10695:	68 c0 3f 01 00       	push   $0x13fc0
   1069a:	e8 12 38 00 00       	call   13eb1 <log_printf>
   1069f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106a9:	eb 29                	jmp    106d4 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106ab:	8b 45 08             	mov    0x8(%ebp),%eax
   106ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106b1:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106bb:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106be:	52                   	push   %edx
   106bf:	50                   	push   %eax
   106c0:	ff 75 f4             	push   -0xc(%ebp)
   106c3:	68 cc 3f 01 00       	push   $0x13fcc
   106c8:	e8 e4 37 00 00       	call   13eb1 <log_printf>
   106cd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 40 50             	mov    0x50(%eax),%eax
   106da:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106dd:	7c cc                	jl     106ab <show_mem_info+0x1f>
    }

    log_printf("");
   106df:	83 ec 0c             	sub    $0xc,%esp
   106e2:	68 de 3f 01 00       	push   $0x13fde
   106e7:	e8 c5 37 00 00       	call   13eb1 <log_printf>
   106ec:	83 c4 10             	add    $0x10,%esp
}
   106ef:	90                   	nop
   106f0:	c9                   	leave  
   106f1:	c3                   	ret    

000106f2 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   106f2:	55                   	push   %ebp
   106f3:	89 e5                	mov    %esp,%ebp
   106f5:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10706:	eb 11                	jmp    10719 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10708:	8b 45 08             	mov    0x8(%ebp),%eax
   1070b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1070e:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10712:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10715:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10719:	8b 45 08             	mov    0x8(%ebp),%eax
   1071c:	8b 40 50             	mov    0x50(%eax),%eax
   1071f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10722:	7c e4                	jl     10708 <total_mem_size+0x16>
    }

    return mem_size;
   10724:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10727:	c9                   	leave  
   10728:	c3                   	ret    

00010729 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10729:	55                   	push   %ebp
   1072a:	89 e5                	mov    %esp,%ebp
   1072c:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1072f:	ff 75 0c             	push   0xc(%ebp)
   10732:	e8 c0 fb ff ff       	call   102f7 <pde_index>
   10737:	83 c4 04             	add    $0x4,%esp
   1073a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10741:	8b 45 08             	mov    0x8(%ebp),%eax
   10744:	01 d0                	add    %edx,%eax
   10746:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10749:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074c:	0f b6 00             	movzbl (%eax),%eax
   1074f:	83 e0 01             	and    $0x1,%eax
   10752:	84 c0                	test   %al,%al
   10754:	74 10                	je     10766 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10756:	ff 75 f0             	push   -0x10(%ebp)
   10759:	e8 b4 fb ff ff       	call   10312 <pde_to_pt_addr>
   1075e:	83 c4 04             	add    $0x4,%esp
   10761:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10764:	eb 57                	jmp    107bd <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10766:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1076a:	75 07                	jne    10773 <find_pte+0x4a>
      return (pte_t*)0;
   1076c:	b8 00 00 00 00       	mov    $0x0,%eax
   10771:	eb 64                	jmp    107d7 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10773:	83 ec 08             	sub    $0x8,%esp
   10776:	6a 01                	push   $0x1
   10778:	68 00 60 01 00       	push   $0x16000
   1077d:	e8 07 fe ff ff       	call   10589 <addr_alloc_page>
   10782:	83 c4 10             	add    $0x10,%esp
   10785:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10788:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1078c:	75 07                	jne    10795 <find_pte+0x6c>
      return (pte_t*)0;
   1078e:	b8 00 00 00 00       	mov    $0x0,%eax
   10793:	eb 42                	jmp    107d7 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10795:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1079b:	83 ec 04             	sub    $0x4,%esp
   1079e:	68 00 10 00 00       	push   $0x1000
   107a3:	6a 00                	push   $0x0
   107a5:	ff 75 f4             	push   -0xc(%ebp)
   107a8:	e8 37 2f 00 00       	call   136e4 <kernel_memset>
   107ad:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b3:	83 c8 07             	or     $0x7,%eax
   107b6:	89 c2                	mov    %eax,%edx
   107b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107bb:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107bd:	83 ec 0c             	sub    $0xc,%esp
   107c0:	ff 75 0c             	push   0xc(%ebp)
   107c3:	e8 3a fb ff ff       	call   10302 <pte_index>
   107c8:	83 c4 10             	add    $0x10,%esp
   107cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d5:	01 d0                	add    %edx,%eax

}
   107d7:	c9                   	leave  
   107d8:	c3                   	ret    

000107d9 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107d9:	55                   	push   %ebp
   107da:	89 e5                	mov    %esp,%ebp
   107dc:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107e6:	e9 91 00 00 00       	jmp    1087c <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   107eb:	83 ec 04             	sub    $0x4,%esp
   107ee:	6a 01                	push   $0x1
   107f0:	ff 75 0c             	push   0xc(%ebp)
   107f3:	ff 75 08             	push   0x8(%ebp)
   107f6:	e8 2e ff ff ff       	call   10729 <find_pte>
   107fb:	83 c4 10             	add    $0x10,%esp
   107fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10801:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10805:	75 17                	jne    1081e <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0");
   10807:	83 ec 0c             	sub    $0xc,%esp
   1080a:	68 df 3f 01 00       	push   $0x13fdf
   1080f:	e8 9d 36 00 00       	call   13eb1 <log_printf>
   10814:	83 c4 10             	add    $0x10,%esp
      return -1;
   10817:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1081c:	eb 6f                	jmp    1088d <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10821:	0f b6 00             	movzbl (%eax),%eax
   10824:	83 e0 01             	and    $0x1,%eax
   10827:	84 c0                	test   %al,%al
   10829:	74 1c                	je     10847 <memory_creat_map+0x6e>
   1082b:	68 f9 3f 01 00       	push   $0x13ff9
   10830:	68 08 41 01 00       	push   $0x14108
   10835:	68 1c 01 00 00       	push   $0x11c
   1083a:	68 0c 40 01 00       	push   $0x1400c
   1083f:	e8 9e 29 00 00       	call   131e2 <pannic>
   10844:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10847:	8b 45 10             	mov    0x10(%ebp),%eax
   1084a:	0b 45 18             	or     0x18(%ebp),%eax
   1084d:	83 c8 01             	or     $0x1,%eax
   10850:	89 c2                	mov    %eax,%edx
   10852:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10855:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10857:	83 ec 08             	sub    $0x8,%esp
   1085a:	ff 75 10             	push   0x10(%ebp)
   1085d:	68 00 60 01 00       	push   $0x16000
   10862:	e8 3e fb ff ff       	call   103a5 <page_ref_add>
   10867:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1086a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10871:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10878:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087f:	3b 45 14             	cmp    0x14(%ebp),%eax
   10882:	0f 8c 63 ff ff ff    	jl     107eb <memory_creat_map+0x12>

  }

  return 1;
   10888:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   1088d:	c9                   	leave  
   1088e:	c3                   	ret    

0001088f <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1088f:	55                   	push   %ebp
   10890:	89 e5                	mov    %esp,%ebp
   10892:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1089c:	e9 92 00 00 00       	jmp    10933 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108a4:	c1 e0 04             	shl    $0x4,%eax
   108a7:	05 00 50 01 00       	add    $0x15000,%eax
   108ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108b2:	8b 00                	mov    (%eax),%eax
   108b4:	68 00 10 00 00       	push   $0x1000
   108b9:	50                   	push   %eax
   108ba:	e8 08 fa ff ff       	call   102c7 <down2>
   108bf:	83 c4 08             	add    $0x8,%esp
   108c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108c8:	8b 40 08             	mov    0x8(%eax),%eax
   108cb:	68 00 10 00 00       	push   $0x1000
   108d0:	50                   	push   %eax
   108d1:	e8 f1 f9 ff ff       	call   102c7 <down2>
   108d6:	83 c4 08             	add    $0x8,%esp
   108d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108df:	8b 40 04             	mov    0x4(%eax),%eax
   108e2:	68 00 10 00 00       	push   $0x1000
   108e7:	50                   	push   %eax
   108e8:	e8 e7 f9 ff ff       	call   102d4 <up2>
   108ed:	83 c4 08             	add    $0x8,%esp
   108f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   108f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108f6:	2b 45 ec             	sub    -0x14(%ebp),%eax
   108f9:	c1 e8 0c             	shr    $0xc,%eax
   108fc:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 0c             	mov    0xc(%eax),%eax
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	50                   	push   %eax
   10909:	ff 75 e0             	push   -0x20(%ebp)
   1090c:	ff 75 e8             	push   -0x18(%ebp)
   1090f:	ff 75 ec             	push   -0x14(%ebp)
   10912:	68 00 e0 01 00       	push   $0x1e000
   10917:	e8 bd fe ff ff       	call   107d9 <memory_creat_map>
   1091c:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1091f:	83 ec 0c             	sub    $0xc,%esp
   10922:	68 00 60 01 00       	push   $0x16000
   10927:	e8 85 fb ff ff       	call   104b1 <clear_page_ref>
   1092c:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1092f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10933:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10936:	83 f8 03             	cmp    $0x3,%eax
   10939:	0f 86 62 ff ff ff    	jbe    108a1 <create_kernal_table+0x12>

  }
}
   1093f:	90                   	nop
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10949:	83 ec 08             	sub    $0x8,%esp
   1094c:	6a 01                	push   $0x1
   1094e:	68 00 60 01 00       	push   $0x16000
   10953:	e8 31 fc ff ff       	call   10589 <addr_alloc_page>
   10958:	83 c4 10             	add    $0x10,%esp
   1095b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1095e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10962:	75 07                	jne    1096b <memory_creat_uvm+0x28>
   10964:	b8 00 00 00 00       	mov    $0x0,%eax
   10969:	eb 5b                	jmp    109c6 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1096b:	83 ec 04             	sub    $0x4,%esp
   1096e:	68 00 10 00 00       	push   $0x1000
   10973:	6a 00                	push   $0x0
   10975:	ff 75 f0             	push   -0x10(%ebp)
   10978:	e8 67 2d 00 00       	call   136e4 <kernel_memset>
   1097d:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10980:	83 ec 0c             	sub    $0xc,%esp
   10983:	68 00 00 00 80       	push   $0x80000000
   10988:	e8 6a f9 ff ff       	call   102f7 <pde_index>
   1098d:	83 c4 10             	add    $0x10,%esp
   10990:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10993:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1099a:	eb 1f                	jmp    109bb <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1099f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109a9:	01 c2                	add    %eax,%edx
   109ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109ae:	8b 04 85 00 e0 01 00 	mov    0x1e000(,%eax,4),%eax
   109b5:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109be:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109c1:	77 d9                	ja     1099c <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
   109cb:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ce:	68 00 00 00 80       	push   $0x80000000
   109d3:	e8 1f f9 ff ff       	call   102f7 <pde_index>
   109d8:	83 c4 04             	add    $0x4,%esp
   109db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   109eb:	01 d0                	add    %edx,%eax
   109ed:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   109f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
   109f6:	e9 2a 01 00 00       	jmp    10b25 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   109fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109fe:	0f b6 00             	movzbl (%eax),%eax
   10a01:	83 e0 01             	and    $0x1,%eax
   10a04:	84 c0                	test   %al,%al
   10a06:	0f 84 10 01 00 00    	je     10b1c <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a0c:	ff 75 f4             	push   -0xc(%ebp)
   10a0f:	e8 fe f8 ff ff       	call   10312 <pde_to_pt_addr>
   10a14:	83 c4 04             	add    $0x4,%esp
   10a17:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a1a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a21:	e9 e7 00 00 00       	jmp    10b0d <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a29:	0f b6 00             	movzbl (%eax),%eax
   10a2c:	83 e0 01             	and    $0x1,%eax
   10a2f:	84 c0                	test   %al,%al
   10a31:	0f 84 cd 00 00 00    	je     10b04 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a3a:	c1 e0 16             	shl    $0x16,%eax
   10a3d:	89 c2                	mov    %eax,%edx
   10a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a42:	c1 e0 0c             	shl    $0xc,%eax
   10a45:	09 d0                	or     %edx,%eax
   10a47:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //当前页支持写操作，需进行复制操作
   10a4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a4d:	8b 00                	mov    (%eax),%eax
   10a4f:	83 e0 02             	and    $0x2,%eax
   10a52:	85 c0                	test   %eax,%eax
   10a54:	74 6c                	je     10ac2 <memory_copy_uvm+0xfa>
        //分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a56:	83 ec 08             	sub    $0x8,%esp
   10a59:	6a 01                	push   $0x1
   10a5b:	68 00 60 01 00       	push   $0x16000
   10a60:	e8 24 fb ff ff       	call   10589 <addr_alloc_page>
   10a65:	83 c4 10             	add    $0x10,%esp
   10a68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a6b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a6f:	0f 84 c4 00 00 00    	je     10b39 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a75:	83 ec 0c             	sub    $0xc,%esp
   10a78:	ff 75 ec             	push   -0x14(%ebp)
   10a7b:	e8 e0 f8 ff ff       	call   10360 <get_pte_privilege>
   10a80:	83 c4 10             	add    $0x10,%esp
   10a83:	8b 55 08             	mov    0x8(%ebp),%edx
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	50                   	push   %eax
   10a8a:	6a 01                	push   $0x1
   10a8c:	ff 75 d4             	push   -0x2c(%ebp)
   10a8f:	ff 75 e0             	push   -0x20(%ebp)
   10a92:	52                   	push   %edx
   10a93:	e8 41 fd ff ff       	call   107d9 <memory_creat_map>
   10a98:	83 c4 20             	add    $0x20,%esp
   10a9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10a9e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10aa2:	0f 88 94 00 00 00    	js     10b3c <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //拷贝该页内容
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10aa8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10aab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10aae:	83 ec 04             	sub    $0x4,%esp
   10ab1:	68 00 10 00 00       	push   $0x1000
   10ab6:	52                   	push   %edx
   10ab7:	50                   	push   %eax
   10ab8:	e8 d8 2b 00 00       	call   13695 <kernel_memcpy>
   10abd:	83 c4 10             	add    $0x10,%esp
   10ac0:	eb 43                	jmp    10b05 <memory_copy_uvm+0x13d>

      } else {  //当前页为只读页，直接共享该页即可，即只复制页表项即可
        //获取该页的地址
        uint32_t page = pte_to_pg_addr(pte);
   10ac2:	83 ec 0c             	sub    $0xc,%esp
   10ac5:	ff 75 ec             	push   -0x14(%ebp)
   10ac8:	e8 6c f8 ff ff       	call   10339 <pte_to_pg_addr>
   10acd:	83 c4 10             	add    $0x10,%esp
   10ad0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10ad3:	83 ec 0c             	sub    $0xc,%esp
   10ad6:	ff 75 ec             	push   -0x14(%ebp)
   10ad9:	e8 82 f8 ff ff       	call   10360 <get_pte_privilege>
   10ade:	83 c4 10             	add    $0x10,%esp
   10ae1:	8b 55 08             	mov    0x8(%ebp),%edx
   10ae4:	83 ec 0c             	sub    $0xc,%esp
   10ae7:	50                   	push   %eax
   10ae8:	6a 01                	push   $0x1
   10aea:	ff 75 dc             	push   -0x24(%ebp)
   10aed:	ff 75 e0             	push   -0x20(%ebp)
   10af0:	52                   	push   %edx
   10af1:	e8 e3 fc ff ff       	call   107d9 <memory_creat_map>
   10af6:	83 c4 20             	add    $0x20,%esp
   10af9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10afc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b00:	78 3d                	js     10b3f <memory_copy_uvm+0x177>
   10b02:	eb 01                	jmp    10b05 <memory_copy_uvm+0x13d>
        continue;
   10b04:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b05:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b09:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b0d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b14:	0f 8e 0c ff ff ff    	jle    10a26 <memory_copy_uvm+0x5e>
   10b1a:	eb 01                	jmp    10b1d <memory_copy_uvm+0x155>
      continue;
   10b1c:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b1d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b21:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b25:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b2c:	0f 8e c9 fe ff ff    	jle    109fb <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b32:	b8 01 00 00 00       	mov    $0x1,%eax
   10b37:	eb 1a                	jmp    10b53 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b39:	90                   	nop
   10b3a:	eb 04                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3c:	90                   	nop
   10b3d:	eb 01                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3f:	90                   	nop


copy_uvm_failed:
  //copy虚拟空间映射失败，以开启读共享的方式清理对应资源
  memory_destroy_uvm(to_page_dir);
   10b40:	83 ec 0c             	sub    $0xc,%esp
   10b43:	ff 75 08             	push   0x8(%ebp)
   10b46:	e8 0a 00 00 00       	call   10b55 <memory_destroy_uvm>
   10b4b:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <memory_destroy_uvm>:
 *        //TODO:进行了读不释放写释放的处理操作，只能供memory_copy_uvm函数失败时调用
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b5b:	68 00 00 00 80       	push   $0x80000000
   10b60:	e8 92 f7 ff ff       	call   102f7 <pde_index>
   10b65:	83 c4 04             	add    $0x4,%esp
   10b68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b6e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b75:	8b 45 08             	mov    0x8(%ebp),%eax
   10b78:	01 d0                	add    %edx,%eax
   10b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10b83:	e9 8f 00 00 00       	jmp    10c17 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b8b:	0f b6 00             	movzbl (%eax),%eax
   10b8e:	83 e0 01             	and    $0x1,%eax
   10b91:	84 c0                	test   %al,%al
   10b93:	74 79                	je     10c0e <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10b95:	ff 75 f4             	push   -0xc(%ebp)
   10b98:	e8 75 f7 ff ff       	call   10312 <pde_to_pt_addr>
   10b9d:	83 c4 04             	add    $0x4,%esp
   10ba0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10ba3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10baa:	eb 36                	jmp    10be2 <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10baf:	0f b6 00             	movzbl (%eax),%eax
   10bb2:	83 e0 01             	and    $0x1,%eax
   10bb5:	84 c0                	test   %al,%al
   10bb7:	74 20                	je     10bd9 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bb9:	ff 75 ec             	push   -0x14(%ebp)
   10bbc:	e8 78 f7 ff ff       	call   10339 <pte_to_pg_addr>
   10bc1:	83 c4 04             	add    $0x4,%esp
   10bc4:	83 ec 04             	sub    $0x4,%esp
   10bc7:	6a 01                	push   $0x1
   10bc9:	50                   	push   %eax
   10bca:	68 00 60 01 00       	push   $0x16000
   10bcf:	e8 1c fa ff ff       	call   105f0 <addr_free_page>
   10bd4:	83 c4 10             	add    $0x10,%esp
   10bd7:	eb 01                	jmp    10bda <memory_destroy_uvm+0x85>
        continue;
   10bd9:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bda:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bde:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10be2:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10be9:	7e c1                	jle    10bac <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10beb:	83 ec 0c             	sub    $0xc,%esp
   10bee:	ff 75 f4             	push   -0xc(%ebp)
   10bf1:	e8 1c f7 ff ff       	call   10312 <pde_to_pt_addr>
   10bf6:	83 c4 10             	add    $0x10,%esp
   10bf9:	83 ec 04             	sub    $0x4,%esp
   10bfc:	6a 01                	push   $0x1
   10bfe:	50                   	push   %eax
   10bff:	68 00 60 01 00       	push   $0x16000
   10c04:	e8 e7 f9 ff ff       	call   105f0 <addr_free_page>
   10c09:	83 c4 10             	add    $0x10,%esp
   10c0c:	eb 01                	jmp    10c0f <memory_destroy_uvm+0xba>
        continue;
   10c0e:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c13:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c17:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c1e:	0f 8e 64 ff ff ff    	jle    10b88 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c24:	83 ec 04             	sub    $0x4,%esp
   10c27:	6a 01                	push   $0x1
   10c29:	ff 75 08             	push   0x8(%ebp)
   10c2c:	68 00 60 01 00       	push   $0x16000
   10c31:	e8 ba f9 ff ff       	call   105f0 <addr_free_page>
   10c36:	83 c4 10             	add    $0x10,%esp
}
   10c39:	90                   	nop
   10c3a:	c9                   	leave  
   10c3b:	c3                   	ret    

00010c3c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c3c:	55                   	push   %ebp
   10c3d:	89 e5                	mov    %esp,%ebp
   10c3f:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10c42:	83 ec 0c             	sub    $0xc,%esp
   10c45:	68 43 40 01 00       	push   $0x14043
   10c4a:	e8 62 32 00 00       	call   13eb1 <log_printf>
   10c4f:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10c52:	83 ec 08             	sub    $0x8,%esp
   10c55:	68 23 a1 03 00       	push   $0x3a123
   10c5a:	68 4f 40 01 00       	push   $0x1404f
   10c5f:	e8 4d 32 00 00       	call   13eb1 <log_printf>
   10c64:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c67:	83 ec 0c             	sub    $0xc,%esp
   10c6a:	ff 75 08             	push   0x8(%ebp)
   10c6d:	e8 1a fa ff ff       	call   1068c <show_mem_info>
   10c72:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c75:	83 ec 0c             	sub    $0xc,%esp
   10c78:	ff 75 08             	push   0x8(%ebp)
   10c7b:	e8 72 fa ff ff       	call   106f2 <total_mem_size>
   10c80:	83 c4 10             	add    $0x10,%esp
   10c83:	2d 00 00 10 00       	sub    $0x100000,%eax
   10c88:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10c8b:	83 ec 08             	sub    $0x8,%esp
   10c8e:	68 00 10 00 00       	push   $0x1000
   10c93:	ff 75 f4             	push   -0xc(%ebp)
   10c96:	e8 2c f6 ff ff       	call   102c7 <down2>
   10c9b:	83 c4 10             	add    $0x10,%esp
   10c9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10ca1:	83 ec 04             	sub    $0x4,%esp
   10ca4:	ff 75 f4             	push   -0xc(%ebp)
   10ca7:	68 00 00 10 00       	push   $0x100000
   10cac:	68 64 40 01 00       	push   $0x14064
   10cb1:	e8 fb 31 00 00       	call   13eb1 <log_printf>
   10cb6:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cb9:	c7 45 f0 23 a1 03 00 	movl   $0x3a123,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cc0:	83 ec 0c             	sub    $0xc,%esp
   10cc3:	68 00 10 00 00       	push   $0x1000
   10cc8:	ff 75 f4             	push   -0xc(%ebp)
   10ccb:	68 00 00 10 00       	push   $0x100000
   10cd0:	ff 75 f0             	push   -0x10(%ebp)
   10cd3:	68 00 60 01 00       	push   $0x16000
   10cd8:	e8 25 f8 ff ff       	call   10502 <addr_alloc_init>
   10cdd:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10ce0:	a1 20 60 01 00       	mov    0x16020,%eax
   10ce5:	c1 e8 0c             	shr    $0xc,%eax
   10ce8:	83 ec 0c             	sub    $0xc,%esp
   10ceb:	50                   	push   %eax
   10cec:	e8 27 25 00 00       	call   13218 <bitmap_byte_count>
   10cf1:	83 c4 10             	add    $0x10,%esp
   10cf4:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10cf7:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10cfe:	76 1c                	jbe    10d1c <memory_init+0xe0>
   10d00:	68 84 40 01 00       	push   $0x14084
   10d05:	68 1c 41 01 00       	push   $0x1411c
   10d0a:	68 f9 01 00 00       	push   $0x1f9
   10d0f:	68 0c 40 01 00       	push   $0x1400c
   10d14:	e8 c9 24 00 00       	call   131e2 <pannic>
   10d19:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d1c:	e8 6e fb ff ff       	call   1088f <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d21:	b8 00 e0 01 00       	mov    $0x1e000,%eax
   10d26:	83 ec 0c             	sub    $0xc,%esp
   10d29:	50                   	push   %eax
   10d2a:	e8 40 f6 ff ff       	call   1036f <mmu_set_page_dir>
   10d2f:	83 c4 10             	add    $0x10,%esp
}
   10d32:	90                   	nop
   10d33:	c9                   	leave  
   10d34:	c3                   	ret    

00010d35 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d35:	55                   	push   %ebp
   10d36:	89 e5                	mov    %esp,%ebp
   10d38:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d41:	68 00 10 00 00       	push   $0x1000
   10d46:	ff 75 10             	push   0x10(%ebp)
   10d49:	e8 86 f5 ff ff       	call   102d4 <up2>
   10d4e:	83 c4 08             	add    $0x8,%esp
   10d51:	c1 e8 0c             	shr    $0xc,%eax
   10d54:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d5e:	eb 7a                	jmp    10dda <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	6a 01                	push   $0x1
   10d65:	68 00 60 01 00       	push   $0x16000
   10d6a:	e8 1a f8 ff ff       	call   10589 <addr_alloc_page>
   10d6f:	83 c4 10             	add    $0x10,%esp
   10d72:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d79:	75 17                	jne    10d92 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   10d7b:	83 ec 0c             	sub    $0xc,%esp
   10d7e:	68 a8 40 01 00       	push   $0x140a8
   10d83:	e8 29 31 00 00       	call   13eb1 <log_printf>
   10d88:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10d8b:	b8 00 00 00 00       	mov    $0x0,%eax
   10d90:	eb 59                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10d92:	8b 45 08             	mov    0x8(%ebp),%eax
   10d95:	83 ec 0c             	sub    $0xc,%esp
   10d98:	ff 75 14             	push   0x14(%ebp)
   10d9b:	6a 01                	push   $0x1
   10d9d:	ff 75 e8             	push   -0x18(%ebp)
   10da0:	ff 75 f4             	push   -0xc(%ebp)
   10da3:	50                   	push   %eax
   10da4:	e8 30 fa ff ff       	call   107d9 <memory_creat_map>
   10da9:	83 c4 20             	add    $0x20,%esp
   10dac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10daf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10db3:	79 1a                	jns    10dcf <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10db5:	83 ec 08             	sub    $0x8,%esp
   10db8:	ff 75 e4             	push   -0x1c(%ebp)
   10dbb:	68 c4 40 01 00       	push   $0x140c4
   10dc0:	e8 ec 30 00 00       	call   13eb1 <log_printf>
   10dc5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dcd:	eb 1c                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dcf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10dd6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ddd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10de0:	0f 8c 7a ff ff ff    	jl     10d60 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10deb:	c9                   	leave  
   10dec:	c3                   	ret    

00010ded <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10ded:	55                   	push   %ebp
   10dee:	89 e5                	mov    %esp,%ebp
   10df0:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10df3:	e8 7f 08 00 00       	call   11677 <task_current>
   10df8:	8b 40 6c             	mov    0x6c(%eax),%eax
   10dfb:	ff 75 10             	push   0x10(%ebp)
   10dfe:	ff 75 0c             	push   0xc(%ebp)
   10e01:	ff 75 08             	push   0x8(%ebp)
   10e04:	50                   	push   %eax
   10e05:	e8 2b ff ff ff       	call   10d35 <memory_alloc_for_page_dir>
   10e0a:	83 c4 10             	add    $0x10,%esp
}
   10e0d:	c9                   	leave  
   10e0e:	c3                   	ret    

00010e0f <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e0f:	55                   	push   %ebp
   10e10:	89 e5                	mov    %esp,%ebp
   10e12:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e15:	e8 5d 08 00 00       	call   11677 <task_current>
   10e1a:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   10e1d:	c9                   	leave  
   10e1e:	c3                   	ret    

00010e1f <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e1f:	55                   	push   %ebp
   10e20:	89 e5                	mov    %esp,%ebp
   10e22:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e25:	83 ec 08             	sub    $0x8,%esp
   10e28:	6a 01                	push   $0x1
   10e2a:	68 00 60 01 00       	push   $0x16000
   10e2f:	e8 55 f7 ff ff       	call   10589 <addr_alloc_page>
   10e34:	83 c4 10             	add    $0x10,%esp
   10e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e3d:	c9                   	leave  
   10e3e:	c3                   	ret    

00010e3f <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e3f:	55                   	push   %ebp
   10e40:	89 e5                	mov    %esp,%ebp
   10e42:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e45:	8b 45 08             	mov    0x8(%ebp),%eax
   10e48:	85 c0                	test   %eax,%eax
   10e4a:	78 17                	js     10e63 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e4c:	83 ec 04             	sub    $0x4,%esp
   10e4f:	6a 01                	push   $0x1
   10e51:	ff 75 08             	push   0x8(%ebp)
   10e54:	68 00 60 01 00       	push   $0x16000
   10e59:	e8 92 f7 ff ff       	call   105f0 <addr_free_page>
   10e5e:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e61:	eb 72                	jmp    10ed5 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e63:	e8 a7 ff ff ff       	call   10e0f <curr_page_dir>
   10e68:	83 ec 04             	sub    $0x4,%esp
   10e6b:	6a 00                	push   $0x0
   10e6d:	ff 75 08             	push   0x8(%ebp)
   10e70:	50                   	push   %eax
   10e71:	e8 b3 f8 ff ff       	call   10729 <find_pte>
   10e76:	83 c4 10             	add    $0x10,%esp
   10e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e80:	74 0d                	je     10e8f <memory_free_page+0x50>
   10e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e85:	0f b6 00             	movzbl (%eax),%eax
   10e88:	83 e0 01             	and    $0x1,%eax
   10e8b:	84 c0                	test   %al,%al
   10e8d:	75 1c                	jne    10eab <memory_free_page+0x6c>
   10e8f:	68 e4 40 01 00       	push   $0x140e4
   10e94:	68 28 41 01 00       	push   $0x14128
   10e99:	68 5b 02 00 00       	push   $0x25b
   10e9e:	68 0c 40 01 00       	push   $0x1400c
   10ea3:	e8 3a 23 00 00       	call   131e2 <pannic>
   10ea8:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10eab:	83 ec 0c             	sub    $0xc,%esp
   10eae:	ff 75 f4             	push   -0xc(%ebp)
   10eb1:	e8 83 f4 ff ff       	call   10339 <pte_to_pg_addr>
   10eb6:	83 c4 10             	add    $0x10,%esp
   10eb9:	83 ec 04             	sub    $0x4,%esp
   10ebc:	6a 01                	push   $0x1
   10ebe:	50                   	push   %eax
   10ebf:	68 00 60 01 00       	push   $0x16000
   10ec4:	e8 27 f7 ff ff       	call   105f0 <addr_free_page>
   10ec9:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ecf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ed5:	90                   	nop
   10ed6:	c9                   	leave  
   10ed7:	c3                   	ret    

00010ed8 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10ed8:	55                   	push   %ebp
   10ed9:	89 e5                	mov    %esp,%ebp
   10edb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10ede:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ee2:	75 19                	jne    10efd <list_node_init+0x25>
   10ee4:	68 3c 41 01 00       	push   $0x1413c
   10ee9:	68 28 42 01 00       	push   $0x14228
   10eee:	6a 20                	push   $0x20
   10ef0:	68 54 41 01 00       	push   $0x14154
   10ef5:	e8 e8 22 00 00       	call   131e2 <pannic>
   10efa:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10efd:	8b 45 08             	mov    0x8(%ebp),%eax
   10f00:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10f07:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0a:	8b 50 04             	mov    0x4(%eax),%edx
   10f0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f10:	89 10                	mov    %edx,(%eax)
}
   10f12:	90                   	nop
   10f13:	c9                   	leave  
   10f14:	c3                   	ret    

00010f15 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10f15:	55                   	push   %ebp
   10f16:	89 e5                	mov    %esp,%ebp
   10f18:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10f1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f1f:	75 19                	jne    10f3a <list_node_next+0x25>
   10f21:	68 3c 41 01 00       	push   $0x1413c
   10f26:	68 88 42 01 00       	push   $0x14288
   10f2b:	6a 2b                	push   $0x2b
   10f2d:	68 54 41 01 00       	push   $0x14154
   10f32:	e8 ab 22 00 00       	call   131e2 <pannic>
   10f37:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10f3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3d:	8b 40 04             	mov    0x4(%eax),%eax
}
   10f40:	c9                   	leave  
   10f41:	c3                   	ret    

00010f42 <list_init>:

static inline void list_init(list_t *list) {
   10f42:	55                   	push   %ebp
   10f43:	89 e5                	mov    %esp,%ebp
   10f45:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10f48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f4c:	75 19                	jne    10f67 <list_init+0x25>
   10f4e:	68 92 41 01 00       	push   $0x14192
   10f53:	68 38 42 01 00       	push   $0x14238
   10f58:	6a 31                	push   $0x31
   10f5a:	68 54 41 01 00       	push   $0x14154
   10f5f:	e8 7e 22 00 00       	call   131e2 <pannic>
   10f64:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10f67:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10f71:	8b 45 08             	mov    0x8(%ebp),%eax
   10f74:	8b 50 04             	mov    0x4(%eax),%edx
   10f77:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7a:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10f7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10f86:	90                   	nop
   10f87:	c9                   	leave  
   10f88:	c3                   	ret    

00010f89 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10f89:	55                   	push   %ebp
   10f8a:	89 e5                	mov    %esp,%ebp
   10f8c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10f8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f93:	75 19                	jne    10fae <list_is_empty+0x25>
   10f95:	68 92 41 01 00       	push   $0x14192
   10f9a:	68 98 42 01 00       	push   $0x14298
   10f9f:	6a 38                	push   $0x38
   10fa1:	68 54 41 01 00       	push   $0x14154
   10fa6:	e8 37 22 00 00       	call   131e2 <pannic>
   10fab:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10fae:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb1:	8b 40 08             	mov    0x8(%eax),%eax
   10fb4:	85 c0                	test   %eax,%eax
   10fb6:	0f 94 c0             	sete   %al
   10fb9:	0f b6 c0             	movzbl %al,%eax
}
   10fbc:	c9                   	leave  
   10fbd:	c3                   	ret    

00010fbe <list_get_size>:

static inline int list_get_size(list_t *list) {
   10fbe:	55                   	push   %ebp
   10fbf:	89 e5                	mov    %esp,%ebp
   10fc1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10fc4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fc8:	75 19                	jne    10fe3 <list_get_size+0x25>
   10fca:	68 92 41 01 00       	push   $0x14192
   10fcf:	68 c8 42 01 00       	push   $0x142c8
   10fd4:	6a 3e                	push   $0x3e
   10fd6:	68 54 41 01 00       	push   $0x14154
   10fdb:	e8 02 22 00 00       	call   131e2 <pannic>
   10fe0:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe6:	8b 40 08             	mov    0x8(%eax),%eax
}
   10fe9:	c9                   	leave  
   10fea:	c3                   	ret    

00010feb <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10feb:	55                   	push   %ebp
   10fec:	89 e5                	mov    %esp,%ebp
   10fee:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10ff1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff5:	75 19                	jne    11010 <list_get_first+0x25>
   10ff7:	68 92 41 01 00       	push   $0x14192
   10ffc:	68 78 42 01 00       	push   $0x14278
   11001:	6a 44                	push   $0x44
   11003:	68 54 41 01 00       	push   $0x14154
   11008:	e8 d5 21 00 00       	call   131e2 <pannic>
   1100d:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11010:	8b 45 08             	mov    0x8(%ebp),%eax
   11013:	8b 00                	mov    (%eax),%eax
}
   11015:	c9                   	leave  
   11016:	c3                   	ret    

00011017 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11017:	55                   	push   %ebp
   11018:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   1101a:	8b 55 08             	mov    0x8(%ebp),%edx
   1101d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11020:	01 d0                	add    %edx,%eax
   11022:	8d 50 ff             	lea    -0x1(%eax),%edx
   11025:	8b 45 0c             	mov    0xc(%ebp),%eax
   11028:	f7 d8                	neg    %eax
   1102a:	21 d0                	and    %edx,%eax
}
   1102c:	5d                   	pop    %ebp
   1102d:	c3                   	ret    

0001102e <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1102e:	55                   	push   %ebp
   1102f:	89 e5                	mov    %esp,%ebp
   11031:	f4                   	hlt    
   11032:	90                   	nop
   11033:	5d                   	pop    %ebp
   11034:	c3                   	ret    

00011035 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11035:	55                   	push   %ebp
   11036:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11038:	8b 45 08             	mov    0x8(%ebp),%eax
   1103b:	0f 22 d8             	mov    %eax,%cr3
}
   1103e:	90                   	nop
   1103f:	5d                   	pop    %ebp
   11040:	c3                   	ret    

00011041 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11041:	55                   	push   %ebp
   11042:	89 e5                	mov    %esp,%ebp
   11044:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11047:	8b 45 0c             	mov    0xc(%ebp),%eax
   1104a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1104d:	8b 45 08             	mov    0x8(%ebp),%eax
   11050:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11053:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11056:	ff 28                	ljmp   *(%eax)
}
   11058:	90                   	nop
   11059:	c9                   	leave  
   1105a:	c3                   	ret    

0001105b <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1105b:	55                   	push   %ebp
   1105c:	89 e5                	mov    %esp,%ebp
   1105e:	83 ec 04             	sub    $0x4,%esp
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11068:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1106c:	0f 00 d8             	ltr    %ax
}
   1106f:	90                   	nop
   11070:	c9                   	leave  
   11071:	c3                   	ret    

00011072 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11072:	55                   	push   %ebp
   11073:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11075:	ff 75 08             	push   0x8(%ebp)
   11078:	e8 b8 ff ff ff       	call   11035 <write_cr3>
   1107d:	83 c4 04             	add    $0x4,%esp
}
   11080:	90                   	nop
   11081:	c9                   	leave  
   11082:	c3                   	ret    

00011083 <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   11083:	55                   	push   %ebp
   11084:	89 e5                	mov    %esp,%ebp
   11086:	83 ec 04             	sub    $0x4,%esp
   11089:	8b 45 08             	mov    0x8(%ebp),%eax
   1108c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   11090:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11094:	6a 00                	push   $0x0
   11096:	50                   	push   %eax
   11097:	e8 a5 ff ff ff       	call   11041 <far_jump>
   1109c:	83 c4 08             	add    $0x8,%esp
}
   1109f:	90                   	nop
   110a0:	c9                   	leave  
   110a1:	c3                   	ret    

000110a2 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   110a2:	55                   	push   %ebp
   110a3:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   110a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a8:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   110ae:	0f b7 c0             	movzwl %ax,%eax
   110b1:	50                   	push   %eax
   110b2:	e8 cc ff ff ff       	call   11083 <switch_to_tss>
   110b7:	83 c4 04             	add    $0x4,%esp
}
   110ba:	90                   	nop
   110bb:	c9                   	leave  
   110bc:	c3                   	ret    

000110bd <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   110bd:	55                   	push   %ebp
   110be:	89 e5                	mov    %esp,%ebp
   110c0:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   110c3:	e8 d5 0c 00 00       	call   11d9d <gdt_alloc_desc>
   110c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   110cb:	8b 45 08             	mov    0x8(%ebp),%eax
   110ce:	83 c0 50             	add    $0x50,%eax
   110d1:	89 c2                	mov    %eax,%edx
   110d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110d6:	0f b7 c0             	movzwl %ax,%eax
   110d9:	68 89 00 00 00       	push   $0x89
   110de:	6a 68                	push   $0x68
   110e0:	52                   	push   %edx
   110e1:	50                   	push   %eax
   110e2:	e8 44 0b 00 00       	call   11c2b <segment_desc_set>
   110e7:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   110ea:	8b 45 08             	mov    0x8(%ebp),%eax
   110ed:	83 c0 50             	add    $0x50,%eax
   110f0:	83 ec 04             	sub    $0x4,%esp
   110f3:	6a 68                	push   $0x68
   110f5:	6a 00                	push   $0x0
   110f7:	50                   	push   %eax
   110f8:	e8 e7 25 00 00       	call   136e4 <kernel_memset>
   110fd:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   11100:	8b 45 08             	mov    0x8(%ebp),%eax
   11103:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11106:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   1110c:	8b 45 14             	mov    0x14(%ebp),%eax
   1110f:	83 e0 01             	and    $0x1,%eax
   11112:	85 c0                	test   %eax,%eax
   11114:	74 10                	je     11126 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   11116:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   1111d:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11124:	eb 16                	jmp    1113c <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   11126:	a1 a0 f1 01 00       	mov    0x1f1a0,%eax
   1112b:	83 c8 03             	or     $0x3,%eax
   1112e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   11131:	a1 a4 f1 01 00       	mov    0x1f1a4,%eax
   11136:	83 c8 03             	or     $0x3,%eax
   11139:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1113c:	8b 45 08             	mov    0x8(%ebp),%eax
   1113f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11142:	89 50 70             	mov    %edx,0x70(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   11145:	8b 45 08             	mov    0x8(%ebp),%eax
   11148:	8b 55 10             	mov    0x10(%ebp),%edx
   1114b:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   11151:	e8 c9 fc ff ff       	call   10e1f <memory_alloc_page>
   11156:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   11159:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1115d:	0f 84 9b 00 00 00    	je     111fe <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   11163:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11166:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1116c:	8b 45 08             	mov    0x8(%ebp),%eax
   1116f:	89 50 54             	mov    %edx,0x54(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   11172:	8b 45 08             	mov    0x8(%ebp),%eax
   11175:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11178:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   1117e:	8b 45 08             	mov    0x8(%ebp),%eax
   11181:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11188:	8b 45 08             	mov    0x8(%ebp),%eax
   1118b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1118e:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   11194:	8b 45 08             	mov    0x8(%ebp),%eax
   11197:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   111a6:	8b 45 08             	mov    0x8(%ebp),%eax
   111a9:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   111af:	8b 45 08             	mov    0x8(%ebp),%eax
   111b2:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   111b8:	8b 45 08             	mov    0x8(%ebp),%eax
   111bb:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   111c1:	8b 45 08             	mov    0x8(%ebp),%eax
   111c4:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   111ca:	8b 45 08             	mov    0x8(%ebp),%eax
   111cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   111d0:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   111d6:	8b 45 08             	mov    0x8(%ebp),%eax
   111d9:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   111e0:	e8 5e f7 ff ff       	call   10943 <memory_creat_uvm>
   111e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   111e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   111ec:	74 13                	je     11201 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   111ee:	8b 45 08             	mov    0x8(%ebp),%eax
   111f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   111f4:	89 50 6c             	mov    %edx,0x6c(%eax)
    
    return 0;
   111f7:	b8 00 00 00 00       	mov    $0x0,%eax
   111fc:	eb 2f                	jmp    1122d <tss_init+0x170>
        goto tss_init_failed;   
   111fe:	90                   	nop
   111ff:	eb 01                	jmp    11202 <tss_init+0x145>
        goto tss_init_failed;
   11201:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   11202:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11205:	0f b7 c0             	movzwl %ax,%eax
   11208:	83 ec 0c             	sub    $0xc,%esp
   1120b:	50                   	push   %eax
   1120c:	e8 01 0c 00 00       	call   11e12 <gdt_free>
   11211:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   11214:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11218:	74 0e                	je     11228 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   1121a:	83 ec 0c             	sub    $0xc,%esp
   1121d:	ff 75 e8             	push   -0x18(%ebp)
   11220:	e8 1a fc ff ff       	call   10e3f <memory_free_page>
   11225:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11228:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1122d:	c9                   	leave  
   1122e:	c3                   	ret    

0001122f <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   1122f:	55                   	push   %ebp
   11230:	89 e5                	mov    %esp,%ebp
   11232:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11235:	e8 8e 15 00 00       	call   127c8 <idt_enter_protection>
   1123a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   1123d:	8b 45 08             	mov    0x8(%ebp),%eax
   11240:	83 c0 40             	add    $0x40,%eax
   11243:	83 ec 08             	sub    $0x8,%esp
   11246:	50                   	push   %eax
   11247:	68 10 f0 01 00       	push   $0x1f010
   1124c:	e8 dc 28 00 00       	call   13b2d <list_insert_last>
   11251:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   11254:	83 ec 0c             	sub    $0xc,%esp
   11257:	ff 75 08             	push   0x8(%ebp)
   1125a:	e8 54 03 00 00       	call   115b3 <task_set_ready>
   1125f:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   11262:	83 ec 0c             	sub    $0xc,%esp
   11265:	ff 75 f4             	push   -0xc(%ebp)
   11268:	e8 73 15 00 00       	call   127e0 <idt_leave_protection>
   1126d:	83 c4 10             	add    $0x10,%esp
}
   11270:	90                   	nop
   11271:	c9                   	leave  
   11272:	c3                   	ret    

00011273 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   11273:	55                   	push   %ebp
   11274:	89 e5                	mov    %esp,%ebp
   11276:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   11279:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1127d:	75 1c                	jne    1129b <task_init+0x28>
   1127f:	68 a5 41 01 00       	push   $0x141a5
   11284:	68 1c 42 01 00       	push   $0x1421c
   11289:	68 9d 00 00 00       	push   $0x9d
   1128e:	68 b8 41 01 00       	push   $0x141b8
   11293:	e8 4a 1f 00 00       	call   131e2 <pannic>
   11298:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   1129b:	ff 75 18             	push   0x18(%ebp)
   1129e:	ff 75 14             	push   0x14(%ebp)
   112a1:	ff 75 10             	push   0x10(%ebp)
   112a4:	ff 75 08             	push   0x8(%ebp)
   112a7:	e8 11 fe ff ff       	call   110bd <tss_init>
   112ac:	83 c4 10             	add    $0x10,%esp
   112af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   112b2:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   112b6:	75 08                	jne    112c0 <task_init+0x4d>
        return err;
   112b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112bb:	e9 8e 00 00 00       	jmp    1134e <task_init+0xdb>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   112c0:	8b 45 08             	mov    0x8(%ebp),%eax
   112c3:	83 c0 18             	add    $0x18,%eax
   112c6:	83 ec 04             	sub    $0x4,%esp
   112c9:	6a 20                	push   $0x20
   112cb:	ff 75 0c             	push   0xc(%ebp)
   112ce:	50                   	push   %eax
   112cf:	e8 d1 22 00 00       	call   135a5 <kernel_strncpy>
   112d4:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   112d7:	8b 45 08             	mov    0x8(%ebp),%eax
   112da:	83 c0 38             	add    $0x38,%eax
   112dd:	83 ec 0c             	sub    $0xc,%esp
   112e0:	50                   	push   %eax
   112e1:	e8 f2 fb ff ff       	call   10ed8 <list_node_init>
   112e6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   112e9:	8b 45 08             	mov    0x8(%ebp),%eax
   112ec:	83 c0 40             	add    $0x40,%eax
   112ef:	83 ec 0c             	sub    $0xc,%esp
   112f2:	50                   	push   %eax
   112f3:	e8 e0 fb ff ff       	call   10ed8 <list_node_init>
   112f8:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112fb:	8b 45 08             	mov    0x8(%ebp),%eax
   112fe:	83 c0 48             	add    $0x48,%eax
   11301:	83 ec 0c             	sub    $0xc,%esp
   11304:	50                   	push   %eax
   11305:	e8 ce fb ff ff       	call   10ed8 <list_node_init>
   1130a:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   1130d:	8b 45 08             	mov    0x8(%ebp),%eax
   11310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   11316:	8b 45 08             	mov    0x8(%ebp),%eax
   11319:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
   11320:	8b 45 08             	mov    0x8(%ebp),%eax
   11323:	8b 50 10             	mov    0x10(%eax),%edx
   11326:	8b 45 08             	mov    0x8(%ebp),%eax
   11329:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep = 0;
   1132c:	8b 45 08             	mov    0x8(%ebp),%eax
   1132f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    task->pid = (uint32_t)task;
   11336:	8b 55 08             	mov    0x8(%ebp),%edx
   11339:	8b 45 08             	mov    0x8(%ebp),%eax
   1133c:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   1133f:	8b 45 08             	mov    0x8(%ebp),%eax
   11342:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   

    return 1;
   11349:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1134e:	c9                   	leave  
   1134f:	c3                   	ret    

00011350 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   11350:	55                   	push   %ebp
   11351:	89 e5                	mov    %esp,%ebp
   11353:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   11356:	8b 45 08             	mov    0x8(%ebp),%eax
   11359:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   1135f:	85 c0                	test   %eax,%eax
   11361:	74 18                	je     1137b <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11363:	8b 45 08             	mov    0x8(%ebp),%eax
   11366:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   1136c:	0f b7 c0             	movzwl %ax,%eax
   1136f:	83 ec 0c             	sub    $0xc,%esp
   11372:	50                   	push   %eax
   11373:	e8 9a 0a 00 00       	call   11e12 <gdt_free>
   11378:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   1137b:	8b 45 08             	mov    0x8(%ebp),%eax
   1137e:	8b 40 54             	mov    0x54(%eax),%eax
   11381:	85 c0                	test   %eax,%eax
   11383:	74 17                	je     1139c <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   11385:	8b 45 08             	mov    0x8(%ebp),%eax
   11388:	8b 40 54             	mov    0x54(%eax),%eax
   1138b:	2d 00 10 00 00       	sub    $0x1000,%eax
   11390:	83 ec 0c             	sub    $0xc,%esp
   11393:	50                   	push   %eax
   11394:	e8 a6 fa ff ff       	call   10e3f <memory_free_page>
   11399:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   1139c:	8b 45 08             	mov    0x8(%ebp),%eax
   1139f:	8b 40 6c             	mov    0x6c(%eax),%eax
   113a2:	85 c0                	test   %eax,%eax
   113a4:	74 12                	je     113b8 <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   113a6:	8b 45 08             	mov    0x8(%ebp),%eax
   113a9:	8b 40 6c             	mov    0x6c(%eax),%eax
   113ac:	83 ec 0c             	sub    $0xc,%esp
   113af:	50                   	push   %eax
   113b0:	e8 a0 f7 ff ff       	call   10b55 <memory_destroy_uvm>
   113b5:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   113b8:	83 ec 04             	sub    $0x4,%esp
   113bb:	68 bc 00 00 00       	push   $0xbc
   113c0:	6a 00                	push   $0x0
   113c2:	ff 75 08             	push   0x8(%ebp)
   113c5:	e8 1a 23 00 00       	call   136e4 <kernel_memset>
   113ca:	83 c4 10             	add    $0x10,%esp
}
   113cd:	90                   	nop
   113ce:	c9                   	leave  
   113cf:	c3                   	ret    

000113d0 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   113d0:	55                   	push   %ebp
   113d1:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   113d3:	e8 56 fc ff ff       	call   1102e <hlt>
   113d8:	eb f9                	jmp    113d3 <empty_task+0x3>

000113da <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   113da:	55                   	push   %ebp
   113db:	89 e5                	mov    %esp,%ebp
   113dd:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   113e0:	e8 b8 09 00 00       	call   11d9d <gdt_alloc_desc>
   113e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   113e8:	e8 b0 09 00 00       	call   11d9d <gdt_alloc_desc>
   113ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   113f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113f3:	0f b7 c0             	movzwl %ax,%eax
   113f6:	68 f2 40 00 00       	push   $0x40f2
   113fb:	6a ff                	push   $0xffffffff
   113fd:	6a 00                	push   $0x0
   113ff:	50                   	push   %eax
   11400:	e8 26 08 00 00       	call   11c2b <segment_desc_set>
   11405:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   11408:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1140b:	0f b7 c0             	movzwl %ax,%eax
   1140e:	68 fa 40 00 00       	push   $0x40fa
   11413:	6a ff                	push   $0xffffffff
   11415:	6a 00                	push   $0x0
   11417:	50                   	push   %eax
   11418:	e8 0e 08 00 00       	call   11c2b <segment_desc_set>
   1141d:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   11420:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11423:	a3 a0 f1 01 00       	mov    %eax,0x1f1a0
    task_manager.app_data_selector = data_selector;
   11428:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1142b:	a3 a4 f1 01 00       	mov    %eax,0x1f1a4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   11430:	83 ec 0c             	sub    $0xc,%esp
   11433:	68 04 f0 01 00       	push   $0x1f004
   11438:	e8 05 fb ff ff       	call   10f42 <list_init>
   1143d:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11440:	83 ec 0c             	sub    $0xc,%esp
   11443:	68 10 f0 01 00       	push   $0x1f010
   11448:	e8 f5 fa ff ff       	call   10f42 <list_init>
   1144d:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11450:	83 ec 0c             	sub    $0xc,%esp
   11453:	68 1c f0 01 00       	push   $0x1f01c
   11458:	e8 e5 fa ff ff       	call   10f42 <list_init>
   1145d:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   11460:	c7 05 00 f0 01 00 00 	movl   $0x0,0x1f000
   11467:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1146a:	ba e0 51 02 00       	mov    $0x251e0,%edx
   1146f:	b8 d0 13 01 00       	mov    $0x113d0,%eax
   11474:	83 ec 0c             	sub    $0xc,%esp
   11477:	6a 01                	push   $0x1
   11479:	52                   	push   %edx
   1147a:	50                   	push   %eax
   1147b:	68 ed 41 01 00       	push   $0x141ed
   11480:	68 e4 f0 01 00       	push   $0x1f0e4
   11485:	e8 e9 fd ff ff       	call   11273 <task_init>
   1148a:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   1148d:	83 ec 04             	sub    $0x4,%esp
   11490:	68 00 5e 00 00       	push   $0x5e00
   11495:	6a 00                	push   $0x0
   11497:	68 c0 f1 01 00       	push   $0x1f1c0
   1149c:	e8 43 22 00 00       	call   136e4 <kernel_memset>
   114a1:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   114a4:	83 ec 0c             	sub    $0xc,%esp
   114a7:	68 c0 4f 02 00       	push   $0x24fc0
   114ac:	e8 1c 16 00 00       	call   12acd <mutex_init>
   114b1:	83 c4 10             	add    $0x10,%esp
  
}
   114b4:	90                   	nop
   114b5:	c9                   	leave  
   114b6:	c3                   	ret    

000114b7 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   114b7:	55                   	push   %ebp
   114b8:	89 e5                	mov    %esp,%ebp
   114ba:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   114bd:	b8 23 a1 03 00       	mov    $0x3a123,%eax
   114c2:	2d 00 a0 03 00       	sub    $0x3a000,%eax
   114c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   114ca:	68 00 10 00 00       	push   $0x1000
   114cf:	ff 75 f4             	push   -0xc(%ebp)
   114d2:	e8 40 fb ff ff       	call   11017 <up2>
   114d7:	83 c4 08             	add    $0x8,%esp
   114da:	05 00 a0 00 00       	add    $0xa000,%eax
   114df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   114e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   114e8:	72 1c                	jb     11506 <task_first_init+0x4f>
   114ea:	68 f8 41 01 00       	push   $0x141f8
   114ef:	68 44 42 01 00       	push   $0x14244
   114f4:	68 32 01 00 00       	push   $0x132
   114f9:	68 b8 41 01 00       	push   $0x141b8
   114fe:	e8 df 1c 00 00       	call   131e2 <pannic>
   11503:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   11506:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   1150d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11510:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11513:	01 d0                	add    %edx,%eax
   11515:	83 ec 0c             	sub    $0xc,%esp
   11518:	6a 00                	push   $0x0
   1151a:	50                   	push   %eax
   1151b:	ff 75 ec             	push   -0x14(%ebp)
   1151e:	68 0f 42 01 00       	push   $0x1420f
   11523:	68 28 f0 01 00       	push   $0x1f028
   11528:	e8 46 fd ff ff       	call   11273 <task_init>
   1152d:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   11530:	a1 e0 f0 01 00       	mov    0x1f0e0,%eax
   11535:	0f b7 c0             	movzwl %ax,%eax
   11538:	83 ec 0c             	sub    $0xc,%esp
   1153b:	50                   	push   %eax
   1153c:	e8 1a fb ff ff       	call   1105b <write_tr>
   11541:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   11544:	c7 05 00 f0 01 00 28 	movl   $0x1f028,0x1f000
   1154b:	f0 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1154e:	a1 94 f0 01 00       	mov    0x1f094,%eax
   11553:	83 ec 0c             	sub    $0xc,%esp
   11556:	50                   	push   %eax
   11557:	e8 16 fb ff ff       	call   11072 <mmu_set_page_dir>
   1155c:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   1155f:	a1 00 f0 01 00       	mov    0x1f000,%eax
   11564:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   1156a:	83 ec 04             	sub    $0x4,%esp
   1156d:	6a 07                	push   $0x7
   1156f:	ff 75 f0             	push   -0x10(%ebp)
   11572:	ff 75 ec             	push   -0x14(%ebp)
   11575:	e8 73 f8 ff ff       	call   10ded <memory_alloc_page_for>
   1157a:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   1157d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11580:	83 ec 04             	sub    $0x4,%esp
   11583:	50                   	push   %eax
   11584:	68 00 a0 03 00       	push   $0x3a000
   11589:	68 00 00 00 80       	push   $0x80000000
   1158e:	e8 02 21 00 00       	call   13695 <kernel_memcpy>
   11593:	83 c4 10             	add    $0x10,%esp

    //10.将任务设为可被调度
    task_start(&task_manager.first_task);
   11596:	83 ec 0c             	sub    $0xc,%esp
   11599:	68 28 f0 01 00       	push   $0x1f028
   1159e:	e8 8c fc ff ff       	call   1122f <task_start>
   115a3:	83 c4 10             	add    $0x10,%esp
}
   115a6:	90                   	nop
   115a7:	c9                   	leave  
   115a8:	c3                   	ret    

000115a9 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   115a9:	55                   	push   %ebp
   115aa:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   115ac:	b8 28 f0 01 00       	mov    $0x1f028,%eax
}
   115b1:	5d                   	pop    %ebp
   115b2:	c3                   	ret    

000115b3 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   115b3:	55                   	push   %ebp
   115b4:	89 e5                	mov    %esp,%ebp
   115b6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   115b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115bd:	75 1c                	jne    115db <task_set_ready+0x28>
   115bf:	68 a5 41 01 00       	push   $0x141a5
   115c4:	68 54 42 01 00       	push   $0x14254
   115c9:	68 5f 01 00 00       	push   $0x15f
   115ce:	68 b8 41 01 00       	push   $0x141b8
   115d3:	e8 0a 1c 00 00       	call   131e2 <pannic>
   115d8:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   115db:	8b 45 08             	mov    0x8(%ebp),%eax
   115de:	83 c0 38             	add    $0x38,%eax
   115e1:	83 ec 08             	sub    $0x8,%esp
   115e4:	50                   	push   %eax
   115e5:	68 04 f0 01 00       	push   $0x1f004
   115ea:	e8 3e 25 00 00       	call   13b2d <list_insert_last>
   115ef:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   115f2:	8b 45 08             	mov    0x8(%ebp),%eax
   115f5:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   115fb:	90                   	nop
   115fc:	c9                   	leave  
   115fd:	c3                   	ret    

000115fe <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   115fe:	55                   	push   %ebp
   115ff:	89 e5                	mov    %esp,%ebp
   11601:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11604:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11608:	75 1c                	jne    11626 <task_set_unready+0x28>
   1160a:	68 a5 41 01 00       	push   $0x141a5
   1160f:	68 64 42 01 00       	push   $0x14264
   11614:	68 6e 01 00 00       	push   $0x16e
   11619:	68 b8 41 01 00       	push   $0x141b8
   1161e:	e8 bf 1b 00 00       	call   131e2 <pannic>
   11623:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   11626:	8b 45 08             	mov    0x8(%ebp),%eax
   11629:	83 c0 38             	add    $0x38,%eax
   1162c:	83 ec 08             	sub    $0x8,%esp
   1162f:	50                   	push   %eax
   11630:	68 04 f0 01 00       	push   $0x1f004
   11635:	e8 e8 26 00 00       	call   13d22 <list_remove>
   1163a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1163d:	8b 45 08             	mov    0x8(%ebp),%eax
   11640:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11646:	90                   	nop
   11647:	c9                   	leave  
   11648:	c3                   	ret    

00011649 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   11649:	55                   	push   %ebp
   1164a:	89 e5                	mov    %esp,%ebp
   1164c:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1164f:	83 ec 0c             	sub    $0xc,%esp
   11652:	68 04 f0 01 00       	push   $0x1f004
   11657:	e8 8f f9 ff ff       	call   10feb <list_get_first>
   1165c:	83 c4 10             	add    $0x10,%esp
   1165f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   11662:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11666:	74 08                	je     11670 <task_ready_first+0x27>
   11668:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1166b:	83 e8 38             	sub    $0x38,%eax
   1166e:	eb 05                	jmp    11675 <task_ready_first+0x2c>
   11670:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11675:	c9                   	leave  
   11676:	c3                   	ret    

00011677 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   11677:	55                   	push   %ebp
   11678:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1167a:	a1 00 f0 01 00       	mov    0x1f000,%eax
}
   1167f:	5d                   	pop    %ebp
   11680:	c3                   	ret    

00011681 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   11681:	55                   	push   %ebp
   11682:	89 e5                	mov    %esp,%ebp
   11684:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11687:	e8 3c 11 00 00       	call   127c8 <idt_enter_protection>
   1168c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   1168f:	e8 b5 ff ff ff       	call   11649 <task_ready_first>
   11694:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   11697:	a1 00 f0 01 00       	mov    0x1f000,%eax
   1169c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1169f:	74 37                	je     116d8 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   116a1:	a1 00 f0 01 00       	mov    0x1f000,%eax
   116a6:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   116a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   116ad:	75 07                	jne    116b6 <task_switch+0x35>
            to = &task_manager.empty_task;
   116af:	c7 45 f4 e4 f0 01 00 	movl   $0x1f0e4,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   116b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116b9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   116bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116c2:	a3 00 f0 01 00       	mov    %eax,0x1f000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   116c7:	83 ec 08             	sub    $0x8,%esp
   116ca:	ff 75 f4             	push   -0xc(%ebp)
   116cd:	ff 75 ec             	push   -0x14(%ebp)
   116d0:	e8 cd f9 ff ff       	call   110a2 <task_switch_from_to>
   116d5:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   116d8:	83 ec 0c             	sub    $0xc,%esp
   116db:	ff 75 f0             	push   -0x10(%ebp)
   116de:	e8 fd 10 00 00       	call   127e0 <idt_leave_protection>
   116e3:	83 c4 10             	add    $0x10,%esp
}
   116e6:	90                   	nop
   116e7:	c9                   	leave  
   116e8:	c3                   	ret    

000116e9 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   116e9:	55                   	push   %ebp
   116ea:	89 e5                	mov    %esp,%ebp
   116ec:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   116ef:	83 ec 0c             	sub    $0xc,%esp
   116f2:	68 1c f0 01 00       	push   $0x1f01c
   116f7:	e8 ef f8 ff ff       	call   10feb <list_get_first>
   116fc:	83 c4 10             	add    $0x10,%esp
   116ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   11702:	eb 62                	jmp    11766 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11704:	83 ec 0c             	sub    $0xc,%esp
   11707:	ff 75 f4             	push   -0xc(%ebp)
   1170a:	e8 06 f8 ff ff       	call   10f15 <list_node_next>
   1170f:	83 c4 10             	add    $0x10,%esp
   11712:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   11715:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11719:	74 08                	je     11723 <task_slice_end+0x3a>
   1171b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1171e:	83 e8 38             	sub    $0x38,%eax
   11721:	eb 05                	jmp    11728 <task_slice_end+0x3f>
   11723:	b8 00 00 00 00       	mov    $0x0,%eax
   11728:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   1172b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1172e:	8b 40 14             	mov    0x14(%eax),%eax
   11731:	8d 50 ff             	lea    -0x1(%eax),%edx
   11734:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11737:	89 50 14             	mov    %edx,0x14(%eax)
   1173a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1173d:	8b 40 14             	mov    0x14(%eax),%eax
   11740:	85 c0                	test   %eax,%eax
   11742:	75 1c                	jne    11760 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11744:	83 ec 0c             	sub    $0xc,%esp
   11747:	ff 75 e8             	push   -0x18(%ebp)
   1174a:	e8 01 01 00 00       	call   11850 <task_set_wakeup>
   1174f:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11752:	83 ec 0c             	sub    $0xc,%esp
   11755:	ff 75 e8             	push   -0x18(%ebp)
   11758:	e8 56 fe ff ff       	call   115b3 <task_set_ready>
   1175d:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   11760:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11763:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11766:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1176a:	75 98                	jne    11704 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   1176c:	e8 06 ff ff ff       	call   11677 <task_current>
   11771:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   11774:	81 7d f0 e4 f0 01 00 	cmpl   $0x1f0e4,-0x10(%ebp)
   1177b:	75 23                	jne    117a0 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   1177d:	83 ec 0c             	sub    $0xc,%esp
   11780:	68 04 f0 01 00       	push   $0x1f004
   11785:	e8 ff f7 ff ff       	call   10f89 <list_is_empty>
   1178a:	83 c4 10             	add    $0x10,%esp
   1178d:	85 c0                	test   %eax,%eax
   1178f:	75 60                	jne    117f1 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   11791:	c7 05 e4 f0 01 00 00 	movl   $0x0,0x1f0e4
   11798:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   1179b:	e8 e1 fe ff ff       	call   11681 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   117a0:	81 7d f0 e4 f0 01 00 	cmpl   $0x1f0e4,-0x10(%ebp)
   117a7:	74 49                	je     117f2 <task_slice_end+0x109>
   117a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117ac:	8b 40 10             	mov    0x10(%eax),%eax
   117af:	8d 50 ff             	lea    -0x1(%eax),%edx
   117b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117b5:	89 50 10             	mov    %edx,0x10(%eax)
   117b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117bb:	8b 40 10             	mov    0x10(%eax),%eax
   117be:	85 c0                	test   %eax,%eax
   117c0:	75 30                	jne    117f2 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   117c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117c5:	8b 50 0c             	mov    0xc(%eax),%edx
   117c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117cb:	89 50 10             	mov    %edx,0x10(%eax)
        task_set_unready(curr_task);
   117ce:	83 ec 0c             	sub    $0xc,%esp
   117d1:	ff 75 f0             	push   -0x10(%ebp)
   117d4:	e8 25 fe ff ff       	call   115fe <task_set_unready>
   117d9:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117dc:	83 ec 0c             	sub    $0xc,%esp
   117df:	ff 75 f0             	push   -0x10(%ebp)
   117e2:	e8 cc fd ff ff       	call   115b3 <task_set_ready>
   117e7:	83 c4 10             	add    $0x10,%esp
        task_switch();
   117ea:	e8 92 fe ff ff       	call   11681 <task_switch>
   117ef:	eb 01                	jmp    117f2 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   117f1:	90                   	nop
    }
}
   117f2:	c9                   	leave  
   117f3:	c3                   	ret    

000117f4 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   117f4:	55                   	push   %ebp
   117f5:	89 e5                	mov    %esp,%ebp
   117f7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   117fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117fe:	75 1c                	jne    1181c <task_set_sleep+0x28>
   11800:	68 a5 41 01 00       	push   $0x141a5
   11805:	68 a8 42 01 00       	push   $0x142a8
   1180a:	68 e3 01 00 00       	push   $0x1e3
   1180f:	68 b8 41 01 00       	push   $0x141b8
   11814:	e8 c9 19 00 00       	call   131e2 <pannic>
   11819:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   1181c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11820:	74 2b                	je     1184d <task_set_sleep+0x59>

    task->sleep = slice;
   11822:	8b 55 0c             	mov    0xc(%ebp),%edx
   11825:	8b 45 08             	mov    0x8(%ebp),%eax
   11828:	89 50 14             	mov    %edx,0x14(%eax)
    task->state = TASK_SLEEP;
   1182b:	8b 45 08             	mov    0x8(%ebp),%eax
   1182e:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11834:	8b 45 08             	mov    0x8(%ebp),%eax
   11837:	83 c0 38             	add    $0x38,%eax
   1183a:	83 ec 08             	sub    $0x8,%esp
   1183d:	50                   	push   %eax
   1183e:	68 1c f0 01 00       	push   $0x1f01c
   11843:	e8 e5 22 00 00       	call   13b2d <list_insert_last>
   11848:	83 c4 10             	add    $0x10,%esp
   1184b:	eb 01                	jmp    1184e <task_set_sleep+0x5a>
    if (slice == 0) return;
   1184d:	90                   	nop
}
   1184e:	c9                   	leave  
   1184f:	c3                   	ret    

00011850 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11850:	55                   	push   %ebp
   11851:	89 e5                	mov    %esp,%ebp
   11853:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11856:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1185a:	75 1c                	jne    11878 <task_set_wakeup+0x28>
   1185c:	68 a5 41 01 00       	push   $0x141a5
   11861:	68 b8 42 01 00       	push   $0x142b8
   11866:	68 f1 01 00 00       	push   $0x1f1
   1186b:	68 b8 41 01 00       	push   $0x141b8
   11870:	e8 6d 19 00 00       	call   131e2 <pannic>
   11875:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11878:	8b 45 08             	mov    0x8(%ebp),%eax
   1187b:	83 c0 38             	add    $0x38,%eax
   1187e:	83 ec 08             	sub    $0x8,%esp
   11881:	50                   	push   %eax
   11882:	68 1c f0 01 00       	push   $0x1f01c
   11887:	e8 96 24 00 00       	call   13d22 <list_remove>
   1188c:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1188f:	8b 45 08             	mov    0x8(%ebp),%eax
   11892:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11898:	90                   	nop
   11899:	c9                   	leave  
   1189a:	c3                   	ret    

0001189b <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   1189b:	55                   	push   %ebp
   1189c:	89 e5                	mov    %esp,%ebp
   1189e:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   118a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   118a8:	83 ec 0c             	sub    $0xc,%esp
   118ab:	68 c0 4f 02 00       	push   $0x24fc0
   118b0:	e8 65 12 00 00       	call   12b1a <mutex_lock>
   118b5:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   118b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   118bf:	eb 27                	jmp    118e8 <alloc_task+0x4d>
        task_t *curr = task_table + i;
   118c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118c4:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   118ca:	05 c0 f1 01 00       	add    $0x1f1c0,%eax
   118cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   118d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   118d5:	8b 40 08             	mov    0x8(%eax),%eax
   118d8:	85 c0                	test   %eax,%eax
   118da:	75 08                	jne    118e4 <alloc_task+0x49>
            task = curr;
   118dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   118df:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   118e2:	eb 0a                	jmp    118ee <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   118e4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   118e8:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   118ec:	7e d3                	jle    118c1 <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   118ee:	83 ec 0c             	sub    $0xc,%esp
   118f1:	68 c0 4f 02 00       	push   $0x24fc0
   118f6:	e8 b0 12 00 00       	call   12bab <mutex_unlock>
   118fb:	83 c4 10             	add    $0x10,%esp

    return task;
   118fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11901:	c9                   	leave  
   11902:	c3                   	ret    

00011903 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   11903:	55                   	push   %ebp
   11904:	89 e5                	mov    %esp,%ebp
   11906:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   11909:	83 ec 0c             	sub    $0xc,%esp
   1190c:	68 c0 4f 02 00       	push   $0x24fc0
   11911:	e8 04 12 00 00       	call   12b1a <mutex_lock>
   11916:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   11919:	8b 45 08             	mov    0x8(%ebp),%eax
   1191c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   11923:	83 ec 0c             	sub    $0xc,%esp
   11926:	68 c0 4f 02 00       	push   $0x24fc0
   1192b:	e8 7b 12 00 00       	call   12bab <mutex_unlock>
   11930:	83 c4 10             	add    $0x10,%esp
}
   11933:	90                   	nop
   11934:	c9                   	leave  
   11935:	c3                   	ret    

00011936 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11936:	55                   	push   %ebp
   11937:	89 e5                	mov    %esp,%ebp
   11939:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1193c:	e8 87 0e 00 00       	call   127c8 <idt_enter_protection>
   11941:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11944:	e8 2e fd ff ff       	call   11677 <task_current>
   11949:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   1194c:	83 ec 0c             	sub    $0xc,%esp
   1194f:	ff 75 f0             	push   -0x10(%ebp)
   11952:	e8 a7 fc ff ff       	call   115fe <task_set_unready>
   11957:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   1195a:	8b 45 08             	mov    0x8(%ebp),%eax
   1195d:	83 c0 09             	add    $0x9,%eax
   11960:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11965:	f7 e2                	mul    %edx
   11967:	89 d0                	mov    %edx,%eax
   11969:	c1 e8 03             	shr    $0x3,%eax
   1196c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   1196f:	83 ec 08             	sub    $0x8,%esp
   11972:	ff 75 ec             	push   -0x14(%ebp)
   11975:	ff 75 f0             	push   -0x10(%ebp)
   11978:	e8 77 fe ff ff       	call   117f4 <task_set_sleep>
   1197d:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11980:	e8 fc fc ff ff       	call   11681 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11985:	83 ec 0c             	sub    $0xc,%esp
   11988:	ff 75 f4             	push   -0xc(%ebp)
   1198b:	e8 50 0e 00 00       	call   127e0 <idt_leave_protection>
   11990:	83 c4 10             	add    $0x10,%esp
}
   11993:	90                   	nop
   11994:	c9                   	leave  
   11995:	c3                   	ret    

00011996 <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11996:	55                   	push   %ebp
   11997:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11999:	e8 d9 fc ff ff       	call   11677 <task_current>
   1199e:	8b 40 08             	mov    0x8(%eax),%eax
}
   119a1:	5d                   	pop    %ebp
   119a2:	c3                   	ret    

000119a3 <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   119a3:	55                   	push   %ebp
   119a4:	89 e5                	mov    %esp,%ebp
   119a6:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   119a9:	e8 c9 fc ff ff       	call   11677 <task_current>
   119ae:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   119b1:	e8 e5 fe ff ff       	call   1189b <alloc_task>
   119b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   119b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   119bd:	0f 84 2b 01 00 00    	je     11aee <sys_fork+0x14b>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   119c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119c6:	8b 40 54             	mov    0x54(%eax),%eax
   119c9:	83 e8 58             	sub    $0x58,%eax
   119cc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   119cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119d2:	8b 40 50             	mov    0x50(%eax),%eax
   119d5:	8d 48 14             	lea    0x14(%eax),%ecx
   119d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119db:	8b 40 34             	mov    0x34(%eax),%eax
   119de:	8b 55 f4             	mov    -0xc(%ebp),%edx
   119e1:	83 c2 18             	add    $0x18,%edx
   119e4:	83 ec 0c             	sub    $0xc,%esp
   119e7:	6a 00                	push   $0x0
   119e9:	51                   	push   %ecx
   119ea:	50                   	push   %eax
   119eb:	52                   	push   %edx
   119ec:	ff 75 f0             	push   -0x10(%ebp)
   119ef:	e8 7f f8 ff ff       	call   11273 <task_init>
   119f4:	83 c4 20             	add    $0x20,%esp
   119f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   119fa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   119fe:	0f 88 ed 00 00 00    	js     11af1 <sys_fork+0x14e>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a07:	83 c0 50             	add    $0x50,%eax
   11a0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a10:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11a17:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a1a:	8b 50 24             	mov    0x24(%eax),%edx
   11a1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a20:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a26:	8b 50 2c             	mov    0x2c(%eax),%edx
   11a29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a2c:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11a2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a32:	8b 50 28             	mov    0x28(%eax),%edx
   11a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a38:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11a3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a3e:	8b 50 14             	mov    0x14(%eax),%edx
   11a41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a44:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a4a:	8b 50 18             	mov    0x18(%eax),%edx
   11a4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a50:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a56:	8b 10                	mov    (%eax),%edx
   11a58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a5b:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11a5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a61:	8b 50 1c             	mov    0x1c(%eax),%edx
   11a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a67:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11a6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a6d:	8b 50 38             	mov    0x38(%eax),%edx
   11a70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a73:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a79:	8b 50 10             	mov    0x10(%eax),%edx
   11a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a7f:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11a82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a85:	8b 50 0c             	mov    0xc(%eax),%edx
   11a88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a8b:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11a8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a91:	8b 50 08             	mov    0x8(%eax),%edx
   11a94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a97:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11a9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a9d:	8b 50 04             	mov    0x4(%eax),%edx
   11aa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aa3:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   11aa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa9:	8b 50 54             	mov    0x54(%eax),%edx
   11aac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aaf:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   11ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ab5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11ab8:	89 50 04             	mov    %edx,0x4(%eax)

    //拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11abe:	8b 50 6c             	mov    0x6c(%eax),%edx
   11ac1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ac4:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ac7:	83 ec 08             	sub    $0x8,%esp
   11aca:	52                   	push   %edx
   11acb:	50                   	push   %eax
   11acc:	e8 f7 ee ff ff       	call   109c8 <memory_copy_uvm>
   11ad1:	83 c4 10             	add    $0x10,%esp
   11ad4:	85 c0                	test   %eax,%eax
   11ad6:	78 1c                	js     11af4 <sys_fork+0x151>
        goto fork_failed;

    //子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   11ad8:	83 ec 0c             	sub    $0xc,%esp
   11adb:	ff 75 f0             	push   -0x10(%ebp)
   11ade:	e8 4c f7 ff ff       	call   1122f <task_start>
   11ae3:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   11ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae9:	8b 40 08             	mov    0x8(%eax),%eax
   11aec:	eb 2e                	jmp    11b1c <sys_fork+0x179>
        goto fork_failed;
   11aee:	90                   	nop
   11aef:	eb 04                	jmp    11af5 <sys_fork+0x152>
        goto fork_failed;
   11af1:	90                   	nop
   11af2:	eb 01                	jmp    11af5 <sys_fork+0x152>
        goto fork_failed;
   11af4:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   11af5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11af9:	74 1c                	je     11b17 <sys_fork+0x174>
        task_uninit(child_task);
   11afb:	83 ec 0c             	sub    $0xc,%esp
   11afe:	ff 75 f0             	push   -0x10(%ebp)
   11b01:	e8 4a f8 ff ff       	call   11350 <task_uninit>
   11b06:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11b09:	83 ec 0c             	sub    $0xc,%esp
   11b0c:	ff 75 f0             	push   -0x10(%ebp)
   11b0f:	e8 ef fd ff ff       	call   11903 <free_task>
   11b14:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   11b17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11b1c:	c9                   	leave  
   11b1d:	c3                   	ret    

00011b1e <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11b1e:	55                   	push   %ebp
   11b1f:	89 e5                	mov    %esp,%ebp
   11b21:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11b24:	e8 9f 0c 00 00       	call   127c8 <idt_enter_protection>
   11b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11b2c:	83 ec 0c             	sub    $0xc,%esp
   11b2f:	68 04 f0 01 00       	push   $0x1f004
   11b34:	e8 85 f4 ff ff       	call   10fbe <list_get_size>
   11b39:	83 c4 10             	add    $0x10,%esp
   11b3c:	83 f8 01             	cmp    $0x1,%eax
   11b3f:	7e 29                	jle    11b6a <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11b41:	e8 31 fb ff ff       	call   11677 <task_current>
   11b46:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   11b49:	83 ec 0c             	sub    $0xc,%esp
   11b4c:	ff 75 f0             	push   -0x10(%ebp)
   11b4f:	e8 aa fa ff ff       	call   115fe <task_set_unready>
   11b54:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   11b57:	83 ec 0c             	sub    $0xc,%esp
   11b5a:	ff 75 f0             	push   -0x10(%ebp)
   11b5d:	e8 51 fa ff ff       	call   115b3 <task_set_ready>
   11b62:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11b65:	e8 17 fb ff ff       	call   11681 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11b6a:	83 ec 0c             	sub    $0xc,%esp
   11b6d:	ff 75 f4             	push   -0xc(%ebp)
   11b70:	e8 6b 0c 00 00       	call   127e0 <idt_leave_protection>
   11b75:	83 c4 10             	add    $0x10,%esp
    return 0;
   11b78:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11b7d:	c9                   	leave  
   11b7e:	c3                   	ret    

00011b7f <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   11b7f:	55                   	push   %ebp
   11b80:	89 e5                	mov    %esp,%ebp
   11b82:	83 ec 18             	sub    $0x18,%esp
        //1.获取当前任务进程
        task_t *task = task_current();
   11b85:	e8 ed fa ff ff       	call   11677 <task_current>
   11b8a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        //2.创建一个新的页目录表
        uint32_t new_page_dir = memory_creat_uvm();
   11b8d:	e8 b1 ed ff ff       	call   10943 <memory_creat_uvm>
   11b92:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (new_page_dir == 0)  //创建失败
   11b95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b99:	74 19                	je     11bb4 <sys_execve+0x35>
        // if (entry == 0)
        //     goto exec_failed;

        
        //记录并设置新页目录表
        task->tss.cr3 = new_page_dir;
   11b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11ba1:	89 50 6c             	mov    %edx,0x6c(%eax)
        mmu_set_page_dir(new_page_dir);
   11ba4:	83 ec 0c             	sub    $0xc,%esp
   11ba7:	ff 75 f0             	push   -0x10(%ebp)
   11baa:	e8 c3 f4 ff ff       	call   11072 <mmu_set_page_dir>
   11baf:	83 c4 10             	add    $0x10,%esp
   11bb2:	eb 01                	jmp    11bb5 <sys_execve+0x36>
            goto exec_failed;
   11bb4:	90                   	nop


exec_failed:

    return -1;
   11bb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bba:	c9                   	leave  
   11bbb:	c3                   	ret    

00011bbc <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11bbc:	55                   	push   %ebp
   11bbd:	89 e5                	mov    %esp,%ebp
   11bbf:	83 ec 08             	sub    $0x8,%esp
   11bc2:	8b 55 0c             	mov    0xc(%ebp),%edx
   11bc5:	8b 45 14             	mov    0x14(%ebp),%eax
   11bc8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11bcc:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11bd0:	8b 45 10             	mov    0x10(%ebp),%eax
   11bd3:	89 c2                	mov    %eax,%edx
   11bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd8:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11bdb:	8b 45 10             	mov    0x10(%ebp),%eax
   11bde:	c1 e8 10             	shr    $0x10,%eax
   11be1:	89 c2                	mov    %eax,%edx
   11be3:	8b 45 08             	mov    0x8(%ebp),%eax
   11be6:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11bea:	8b 45 08             	mov    0x8(%ebp),%eax
   11bed:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11bf1:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf8:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11bfc:	66 89 50 04          	mov    %dx,0x4(%eax)
   11c00:	90                   	nop
   11c01:	c9                   	leave  
   11c02:	c3                   	ret    

00011c03 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11c03:	55                   	push   %ebp
   11c04:	89 e5                	mov    %esp,%ebp
   11c06:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   11c09:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0c:	c1 e8 10             	shr    $0x10,%eax
   11c0f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   11c13:	8b 45 08             	mov    0x8(%ebp),%eax
   11c16:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c1d:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   11c20:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11c24:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11c28:	90                   	nop
   11c29:	c9                   	leave  
   11c2a:	c3                   	ret    

00011c2b <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   11c2b:	55                   	push   %ebp
   11c2c:	89 e5                	mov    %esp,%ebp
   11c2e:	83 ec 18             	sub    $0x18,%esp
   11c31:	8b 55 08             	mov    0x8(%ebp),%edx
   11c34:	8b 45 14             	mov    0x14(%ebp),%eax
   11c37:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11c3b:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11c3f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11c43:	66 c1 e8 03          	shr    $0x3,%ax
   11c47:	0f b7 c0             	movzwl %ax,%eax
   11c4a:	c1 e0 03             	shl    $0x3,%eax
   11c4d:	05 e0 51 02 00       	add    $0x251e0,%eax
   11c52:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   11c55:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c58:	89 c2                	mov    %eax,%edx
   11c5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c5d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   11c61:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c64:	c1 e8 10             	shr    $0x10,%eax
   11c67:	89 c2                	mov    %eax,%edx
   11c69:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c6c:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   11c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c72:	c1 e8 18             	shr    $0x18,%eax
   11c75:	89 c2                	mov    %eax,%edx
   11c77:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c7a:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   11c7d:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11c84:	76 1d                	jbe    11ca3 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   11c86:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c89:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11c8d:	66 0d 00 80          	or     $0x8000,%ax
   11c91:	89 c2                	mov    %eax,%edx
   11c93:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c96:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   11c9a:	8b 45 10             	mov    0x10(%ebp),%eax
   11c9d:	c1 e8 0c             	shr    $0xc,%eax
   11ca0:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   11ca3:	8b 45 10             	mov    0x10(%ebp),%eax
   11ca6:	89 c2                	mov    %eax,%edx
   11ca8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cab:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   11cae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cb1:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11cb5:	89 c2                	mov    %eax,%edx
   11cb7:	8b 45 10             	mov    0x10(%ebp),%eax
   11cba:	c1 e8 08             	shr    $0x8,%eax
   11cbd:	66 25 00 0f          	and    $0xf00,%ax
   11cc1:	09 d0                	or     %edx,%eax
   11cc3:	89 c2                	mov    %eax,%edx
   11cc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cc8:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   11ccc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ccf:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11cd3:	89 c2                	mov    %eax,%edx
   11cd5:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   11cd9:	80 e4 f0             	and    $0xf0,%ah
   11cdc:	09 d0                	or     %edx,%eax
   11cde:	89 c2                	mov    %eax,%edx
   11ce0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ce3:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11ce7:	90                   	nop
   11ce8:	c9                   	leave  
   11ce9:	c3                   	ret    

00011cea <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11cea:	55                   	push   %ebp
   11ceb:	89 e5                	mov    %esp,%ebp
   11ced:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11cf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cf7:	eb 1c                	jmp    11d15 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11cfc:	c1 e0 03             	shl    $0x3,%eax
   11cff:	0f b7 c0             	movzwl %ax,%eax
   11d02:	6a 00                	push   $0x0
   11d04:	6a 00                	push   $0x0
   11d06:	6a 00                	push   $0x0
   11d08:	50                   	push   %eax
   11d09:	e8 1d ff ff ff       	call   11c2b <segment_desc_set>
   11d0e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11d11:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d15:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11d1c:	7e db                	jle    11cf9 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11d1e:	68 92 40 00 00       	push   $0x4092
   11d23:	6a ff                	push   $0xffffffff
   11d25:	6a 00                	push   $0x0
   11d27:	6a 10                	push   $0x10
   11d29:	e8 fd fe ff ff       	call   11c2b <segment_desc_set>
   11d2e:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   11d31:	c6 05 e2 51 03 00 01 	movb   $0x1,0x351e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   11d38:	68 9a 40 00 00       	push   $0x409a
   11d3d:	6a ff                	push   $0xffffffff
   11d3f:	6a 00                	push   $0x0
   11d41:	6a 08                	push   $0x8
   11d43:	e8 e3 fe ff ff       	call   11c2b <segment_desc_set>
   11d48:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   11d4b:	c6 05 e1 51 03 00 01 	movb   $0x1,0x351e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL && DPL >= RPL, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   11d52:	ba ad 02 01 00       	mov    $0x102ad,%edx
   11d57:	b8 f8 51 02 00       	mov    $0x251f8,%eax
   11d5c:	68 05 ec 00 00       	push   $0xec05
   11d61:	52                   	push   %edx
   11d62:	6a 08                	push   $0x8
   11d64:	50                   	push   %eax
   11d65:	e8 52 fe ff ff       	call   11bbc <gate_desc_set>
   11d6a:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   11d6d:	c6 05 e3 51 03 00 01 	movb   $0x1,0x351e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11d74:	b8 e0 51 02 00       	mov    $0x251e0,%eax
   11d79:	83 ec 08             	sub    $0x8,%esp
   11d7c:	68 00 00 01 00       	push   $0x10000
   11d81:	50                   	push   %eax
   11d82:	e8 7c fe ff ff       	call   11c03 <lgdt>
   11d87:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   11d8a:	83 ec 0c             	sub    $0xc,%esp
   11d8d:	68 e0 71 03 00       	push   $0x371e0
   11d92:	e8 36 0d 00 00       	call   12acd <mutex_init>
   11d97:	83 c4 10             	add    $0x10,%esp
}
   11d9a:	90                   	nop
   11d9b:	c9                   	leave  
   11d9c:	c3                   	ret    

00011d9d <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   11d9d:	55                   	push   %ebp
   11d9e:	89 e5                	mov    %esp,%ebp
   11da0:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   11da3:	83 ec 0c             	sub    $0xc,%esp
   11da6:	68 e0 71 03 00       	push   $0x371e0
   11dab:	e8 6a 0d 00 00       	call   12b1a <mutex_lock>
   11db0:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11db3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11dba:	eb 36                	jmp    11df2 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   11dbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dbf:	05 e0 51 03 00       	add    $0x351e0,%eax
   11dc4:	0f b6 00             	movzbl (%eax),%eax
   11dc7:	84 c0                	test   %al,%al
   11dc9:	75 23                	jne    11dee <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   11dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dce:	05 e0 51 03 00       	add    $0x351e0,%eax
   11dd3:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   11dd6:	83 ec 0c             	sub    $0xc,%esp
   11dd9:	68 e0 71 03 00       	push   $0x371e0
   11dde:	e8 c8 0d 00 00       	call   12bab <mutex_unlock>
   11de3:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   11de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11de9:	c1 e0 03             	shl    $0x3,%eax
   11dec:	eb 22                	jmp    11e10 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11dee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11df2:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11df9:	7e c1                	jle    11dbc <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11dfb:	83 ec 0c             	sub    $0xc,%esp
   11dfe:	68 e0 71 03 00       	push   $0x371e0
   11e03:	e8 a3 0d 00 00       	call   12bab <mutex_unlock>
   11e08:	83 c4 10             	add    $0x10,%esp
    return -1;
   11e0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11e10:	c9                   	leave  
   11e11:	c3                   	ret    

00011e12 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   11e12:	55                   	push   %ebp
   11e13:	89 e5                	mov    %esp,%ebp
   11e15:	83 ec 14             	sub    $0x14,%esp
   11e18:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   11e1f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11e23:	66 c1 e8 03          	shr    $0x3,%ax
   11e27:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   11e2b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   11e2f:	c6 80 e0 51 03 00 00 	movb   $0x0,0x351e0(%eax)
}
   11e36:	90                   	nop
   11e37:	c9                   	leave  
   11e38:	c3                   	ret    

00011e39 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11e39:	55                   	push   %ebp
   11e3a:	89 e5                	mov    %esp,%ebp
   11e3c:	fa                   	cli    
   11e3d:	90                   	nop
   11e3e:	5d                   	pop    %ebp
   11e3f:	c3                   	ret    

00011e40 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11e40:	55                   	push   %ebp
   11e41:	89 e5                	mov    %esp,%ebp
   11e43:	fb                   	sti    
   11e44:	90                   	nop
   11e45:	5d                   	pop    %ebp
   11e46:	c3                   	ret    

00011e47 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11e47:	55                   	push   %ebp
   11e48:	89 e5                	mov    %esp,%ebp
   11e4a:	f4                   	hlt    
   11e4b:	90                   	nop
   11e4c:	5d                   	pop    %ebp
   11e4d:	c3                   	ret    

00011e4e <inb>:
static inline uint8_t inb(uint16_t port) {
   11e4e:	55                   	push   %ebp
   11e4f:	89 e5                	mov    %esp,%ebp
   11e51:	83 ec 14             	sub    $0x14,%esp
   11e54:	8b 45 08             	mov    0x8(%ebp),%eax
   11e57:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11e5b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11e5f:	89 c2                	mov    %eax,%edx
   11e61:	ec                   	in     (%dx),%al
   11e62:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11e65:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11e69:	c9                   	leave  
   11e6a:	c3                   	ret    

00011e6b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11e6b:	55                   	push   %ebp
   11e6c:	89 e5                	mov    %esp,%ebp
   11e6e:	83 ec 08             	sub    $0x8,%esp
   11e71:	8b 45 08             	mov    0x8(%ebp),%eax
   11e74:	8b 55 0c             	mov    0xc(%ebp),%edx
   11e77:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11e7b:	89 d0                	mov    %edx,%eax
   11e7d:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11e80:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11e84:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11e88:	ee                   	out    %al,(%dx)
}
   11e89:	90                   	nop
   11e8a:	c9                   	leave  
   11e8b:	c3                   	ret    

00011e8c <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11e8c:	55                   	push   %ebp
   11e8d:	89 e5                	mov    %esp,%ebp
   11e8f:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   11e92:	8b 45 08             	mov    0x8(%ebp),%eax
   11e95:	c1 e8 10             	shr    $0x10,%eax
   11e98:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   11e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11ea3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ea6:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11ea9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11ead:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11eb1:	90                   	nop
   11eb2:	c9                   	leave  
   11eb3:	c3                   	ret    

00011eb4 <read_cr2>:
static inline uint32_t read_cr2(void) {
   11eb4:	55                   	push   %ebp
   11eb5:	89 e5                	mov    %esp,%ebp
   11eb7:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   11eba:	0f 20 d0             	mov    %cr2,%eax
   11ebd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   11ec0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ec3:	c9                   	leave  
   11ec4:	c3                   	ret    

00011ec5 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   11ec5:	55                   	push   %ebp
   11ec6:	89 e5                	mov    %esp,%ebp
   11ec8:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11ecb:	9c                   	pushf  
   11ecc:	58                   	pop    %eax
   11ecd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   11ed0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ed3:	c9                   	leave  
   11ed4:	c3                   	ret    

00011ed5 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   11ed5:	55                   	push   %ebp
   11ed6:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   11ed8:	8b 45 08             	mov    0x8(%ebp),%eax
   11edb:	50                   	push   %eax
   11edc:	9d                   	popf   
}
   11edd:	90                   	nop
   11ede:	5d                   	pop    %ebp
   11edf:	c3                   	ret    

00011ee0 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   11ee0:	55                   	push   %ebp
   11ee1:	89 e5                	mov    %esp,%ebp
   11ee3:	57                   	push   %edi
   11ee4:	56                   	push   %esi
   11ee5:	53                   	push   %ebx
   11ee6:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11ee9:	8b 45 08             	mov    0x8(%ebp),%eax
   11eec:	8b 40 3c             	mov    0x3c(%eax),%eax
   11eef:	83 e0 03             	and    $0x3,%eax
   11ef2:	85 c0                	test   %eax,%eax
   11ef4:	74 14                	je     11f0a <print_exception_fram+0x2a>
    ss = frame->ss3;
   11ef6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef9:	8b 40 48             	mov    0x48(%eax),%eax
   11efc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   11eff:	8b 45 08             	mov    0x8(%ebp),%eax
   11f02:	8b 40 44             	mov    0x44(%eax),%eax
   11f05:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11f08:	eb 12                	jmp    11f1c <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   11f0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0d:	8b 40 0c             	mov    0xc(%eax),%eax
   11f10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   11f13:	8b 45 08             	mov    0x8(%ebp),%eax
   11f16:	8b 40 1c             	mov    0x1c(%eax),%eax
   11f19:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   11f1c:	83 ec 0c             	sub    $0xc,%esp
   11f1f:	68 d8 42 01 00       	push   $0x142d8
   11f24:	e8 88 1f 00 00       	call   13eb1 <log_printf>
   11f29:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11f2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2f:	8b 50 34             	mov    0x34(%eax),%edx
   11f32:	8b 45 08             	mov    0x8(%ebp),%eax
   11f35:	8b 40 30             	mov    0x30(%eax),%eax
   11f38:	83 ec 04             	sub    $0x4,%esp
   11f3b:	52                   	push   %edx
   11f3c:	50                   	push   %eax
   11f3d:	68 16 43 01 00       	push   $0x14316
   11f42:	e8 6a 1f 00 00       	call   13eb1 <log_printf>
   11f47:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   11f4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f4d:	8b 30                	mov    (%eax),%esi
   11f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f52:	8b 58 04             	mov    0x4(%eax),%ebx
   11f55:	8b 45 08             	mov    0x8(%ebp),%eax
   11f58:	8b 48 08             	mov    0x8(%eax),%ecx
   11f5b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5e:	8b 50 0c             	mov    0xc(%eax),%edx
   11f61:	8b 45 08             	mov    0x8(%ebp),%eax
   11f64:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11f67:	83 ec 04             	sub    $0x4,%esp
   11f6a:	56                   	push   %esi
   11f6b:	53                   	push   %ebx
   11f6c:	51                   	push   %ecx
   11f6d:	ff 75 e4             	push   -0x1c(%ebp)
   11f70:	52                   	push   %edx
   11f71:	50                   	push   %eax
   11f72:	68 30 43 01 00       	push   $0x14330
   11f77:	e8 35 1f 00 00       	call   13eb1 <log_printf>
   11f7c:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   11f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f82:	8b 40 18             	mov    0x18(%eax),%eax
   11f85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   11f88:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8b:	8b 78 10             	mov    0x10(%eax),%edi
   11f8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f91:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11f94:	8b 45 08             	mov    0x8(%ebp),%eax
   11f97:	8b 58 24             	mov    0x24(%eax),%ebx
   11f9a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9d:	8b 48 28             	mov    0x28(%eax),%ecx
   11fa0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa3:	8b 50 20             	mov    0x20(%eax),%edx
   11fa6:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa9:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11fac:	83 ec 0c             	sub    $0xc,%esp
   11faf:	ff 75 e0             	push   -0x20(%ebp)
   11fb2:	ff 75 d4             	push   -0x2c(%ebp)
   11fb5:	57                   	push   %edi
   11fb6:	56                   	push   %esi
   11fb7:	53                   	push   %ebx
   11fb8:	51                   	push   %ecx
   11fb9:	52                   	push   %edx
   11fba:	50                   	push   %eax
   11fbb:	68 60 43 01 00       	push   $0x14360
   11fc0:	e8 ec 1e 00 00       	call   13eb1 <log_printf>
   11fc5:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11fc8:	8b 45 08             	mov    0x8(%ebp),%eax
   11fcb:	8b 50 40             	mov    0x40(%eax),%edx
   11fce:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd1:	8b 40 38             	mov    0x38(%eax),%eax
   11fd4:	83 ec 04             	sub    $0x4,%esp
   11fd7:	52                   	push   %edx
   11fd8:	50                   	push   %eax
   11fd9:	68 b8 43 01 00       	push   $0x143b8
   11fde:	e8 ce 1e 00 00       	call   13eb1 <log_printf>
   11fe3:	83 c4 10             	add    $0x10,%esp
}
   11fe6:	90                   	nop
   11fe7:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11fea:	5b                   	pop    %ebx
   11feb:	5e                   	pop    %esi
   11fec:	5f                   	pop    %edi
   11fed:	5d                   	pop    %ebp
   11fee:	c3                   	ret    

00011fef <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11fef:	55                   	push   %ebp
   11ff0:	89 e5                	mov    %esp,%ebp
   11ff2:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11ff5:	83 ec 0c             	sub    $0xc,%esp
   11ff8:	68 d4 43 01 00       	push   $0x143d4
   11ffd:	e8 af 1e 00 00       	call   13eb1 <log_printf>
   12002:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   12005:	83 ec 08             	sub    $0x8,%esp
   12008:	ff 75 0c             	push   0xc(%ebp)
   1200b:	68 08 44 01 00       	push   $0x14408
   12010:	e8 9c 1e 00 00       	call   13eb1 <log_printf>
   12015:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12018:	83 ec 0c             	sub    $0xc,%esp
   1201b:	ff 75 08             	push   0x8(%ebp)
   1201e:	e8 bd fe ff ff       	call   11ee0 <print_exception_fram>
   12023:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   12026:	e8 1c fe ff ff       	call   11e47 <hlt>
   1202b:	eb f9                	jmp    12026 <do_default_handler+0x37>

0001202d <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   1202d:	55                   	push   %ebp
   1202e:	89 e5                	mov    %esp,%ebp
   12030:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12033:	83 ec 08             	sub    $0x8,%esp
   12036:	68 22 44 01 00       	push   $0x14422
   1203b:	ff 75 08             	push   0x8(%ebp)
   1203e:	e8 ac ff ff ff       	call   11fef <do_default_handler>
   12043:	83 c4 10             	add    $0x10,%esp
}
   12046:	90                   	nop
   12047:	c9                   	leave  
   12048:	c3                   	ret    

00012049 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12049:	55                   	push   %ebp
   1204a:	89 e5                	mov    %esp,%ebp
   1204c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1204f:	83 ec 08             	sub    $0x8,%esp
   12052:	68 34 44 01 00       	push   $0x14434
   12057:	ff 75 08             	push   0x8(%ebp)
   1205a:	e8 90 ff ff ff       	call   11fef <do_default_handler>
   1205f:	83 c4 10             	add    $0x10,%esp
}
   12062:	90                   	nop
   12063:	c9                   	leave  
   12064:	c3                   	ret    

00012065 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12065:	55                   	push   %ebp
   12066:	89 e5                	mov    %esp,%ebp
   12068:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   1206b:	83 ec 08             	sub    $0x8,%esp
   1206e:	68 46 44 01 00       	push   $0x14446
   12073:	ff 75 08             	push   0x8(%ebp)
   12076:	e8 74 ff ff ff       	call   11fef <do_default_handler>
   1207b:	83 c4 10             	add    $0x10,%esp
}
   1207e:	90                   	nop
   1207f:	c9                   	leave  
   12080:	c3                   	ret    

00012081 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12081:	55                   	push   %ebp
   12082:	89 e5                	mov    %esp,%ebp
   12084:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12087:	83 ec 08             	sub    $0x8,%esp
   1208a:	68 56 44 01 00       	push   $0x14456
   1208f:	ff 75 08             	push   0x8(%ebp)
   12092:	e8 58 ff ff ff       	call   11fef <do_default_handler>
   12097:	83 c4 10             	add    $0x10,%esp
}
   1209a:	90                   	nop
   1209b:	c9                   	leave  
   1209c:	c3                   	ret    

0001209d <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   1209d:	55                   	push   %ebp
   1209e:	89 e5                	mov    %esp,%ebp
   120a0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   120a3:	83 ec 08             	sub    $0x8,%esp
   120a6:	68 64 44 01 00       	push   $0x14464
   120ab:	ff 75 08             	push   0x8(%ebp)
   120ae:	e8 3c ff ff ff       	call   11fef <do_default_handler>
   120b3:	83 c4 10             	add    $0x10,%esp
}
   120b6:	90                   	nop
   120b7:	c9                   	leave  
   120b8:	c3                   	ret    

000120b9 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   120b9:	55                   	push   %ebp
   120ba:	89 e5                	mov    %esp,%ebp
   120bc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   120bf:	83 ec 08             	sub    $0x8,%esp
   120c2:	68 79 44 01 00       	push   $0x14479
   120c7:	ff 75 08             	push   0x8(%ebp)
   120ca:	e8 20 ff ff ff       	call   11fef <do_default_handler>
   120cf:	83 c4 10             	add    $0x10,%esp
}
   120d2:	90                   	nop
   120d3:	c9                   	leave  
   120d4:	c3                   	ret    

000120d5 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   120d5:	55                   	push   %ebp
   120d6:	89 e5                	mov    %esp,%ebp
   120d8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   120db:	83 ec 08             	sub    $0x8,%esp
   120de:	68 8c 44 01 00       	push   $0x1448c
   120e3:	ff 75 08             	push   0x8(%ebp)
   120e6:	e8 04 ff ff ff       	call   11fef <do_default_handler>
   120eb:	83 c4 10             	add    $0x10,%esp
}
   120ee:	90                   	nop
   120ef:	c9                   	leave  
   120f0:	c3                   	ret    

000120f1 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   120f1:	55                   	push   %ebp
   120f2:	89 e5                	mov    %esp,%ebp
   120f4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   120f7:	83 ec 08             	sub    $0x8,%esp
   120fa:	68 a2 44 01 00       	push   $0x144a2
   120ff:	ff 75 08             	push   0x8(%ebp)
   12102:	e8 e8 fe ff ff       	call   11fef <do_default_handler>
   12107:	83 c4 10             	add    $0x10,%esp
}
   1210a:	90                   	nop
   1210b:	c9                   	leave  
   1210c:	c3                   	ret    

0001210d <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   1210d:	55                   	push   %ebp
   1210e:	89 e5                	mov    %esp,%ebp
   12110:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12113:	83 ec 08             	sub    $0x8,%esp
   12116:	68 bb 44 01 00       	push   $0x144bb
   1211b:	ff 75 08             	push   0x8(%ebp)
   1211e:	e8 cc fe ff ff       	call   11fef <do_default_handler>
   12123:	83 c4 10             	add    $0x10,%esp
}
   12126:	90                   	nop
   12127:	c9                   	leave  
   12128:	c3                   	ret    

00012129 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12129:	55                   	push   %ebp
   1212a:	89 e5                	mov    %esp,%ebp
   1212c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1212f:	83 ec 08             	sub    $0x8,%esp
   12132:	68 d8 44 01 00       	push   $0x144d8
   12137:	ff 75 08             	push   0x8(%ebp)
   1213a:	e8 b0 fe ff ff       	call   11fef <do_default_handler>
   1213f:	83 c4 10             	add    $0x10,%esp
}
   12142:	90                   	nop
   12143:	c9                   	leave  
   12144:	c3                   	ret    

00012145 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12145:	55                   	push   %ebp
   12146:	89 e5                	mov    %esp,%ebp
   12148:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   1214b:	83 ec 08             	sub    $0x8,%esp
   1214e:	68 ef 44 01 00       	push   $0x144ef
   12153:	ff 75 08             	push   0x8(%ebp)
   12156:	e8 94 fe ff ff       	call   11fef <do_default_handler>
   1215b:	83 c4 10             	add    $0x10,%esp
}
   1215e:	90                   	nop
   1215f:	c9                   	leave  
   12160:	c3                   	ret    

00012161 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12161:	55                   	push   %ebp
   12162:	89 e5                	mov    %esp,%ebp
   12164:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12167:	83 ec 08             	sub    $0x8,%esp
   1216a:	68 05 45 01 00       	push   $0x14505
   1216f:	ff 75 08             	push   0x8(%ebp)
   12172:	e8 78 fe ff ff       	call   11fef <do_default_handler>
   12177:	83 c4 10             	add    $0x10,%esp
}
   1217a:	90                   	nop
   1217b:	c9                   	leave  
   1217c:	c3                   	ret    

0001217d <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   1217d:	55                   	push   %ebp
   1217e:	89 e5                	mov    %esp,%ebp
   12180:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12183:	83 ec 08             	sub    $0x8,%esp
   12186:	68 23 45 01 00       	push   $0x14523
   1218b:	ff 75 08             	push   0x8(%ebp)
   1218e:	e8 5c fe ff ff       	call   11fef <do_default_handler>
   12193:	83 c4 10             	add    $0x10,%esp
}
   12196:	90                   	nop
   12197:	c9                   	leave  
   12198:	c3                   	ret    

00012199 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12199:	55                   	push   %ebp
   1219a:	89 e5                	mov    %esp,%ebp
   1219c:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1219f:	83 ec 0c             	sub    $0xc,%esp
   121a2:	68 44 45 01 00       	push   $0x14544
   121a7:	e8 05 1d 00 00       	call   13eb1 <log_printf>
   121ac:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   121af:	83 ec 0c             	sub    $0xc,%esp
   121b2:	68 68 45 01 00       	push   $0x14568
   121b7:	e8 f5 1c 00 00       	call   13eb1 <log_printf>
   121bc:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   121bf:	8b 45 08             	mov    0x8(%ebp),%eax
   121c2:	8b 40 34             	mov    0x34(%eax),%eax
   121c5:	83 e0 01             	and    $0x1,%eax
   121c8:	85 c0                	test   %eax,%eax
   121ca:	74 12                	je     121de <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   121cc:	83 ec 0c             	sub    $0xc,%esp
   121cf:	68 94 45 01 00       	push   $0x14594
   121d4:	e8 d8 1c 00 00       	call   13eb1 <log_printf>
   121d9:	83 c4 10             	add    $0x10,%esp
   121dc:	eb 10                	jmp    121ee <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   121de:	83 ec 0c             	sub    $0xc,%esp
   121e1:	68 10 46 01 00       	push   $0x14610
   121e6:	e8 c6 1c 00 00       	call   13eb1 <log_printf>
   121eb:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   121ee:	8b 45 08             	mov    0x8(%ebp),%eax
   121f1:	8b 40 34             	mov    0x34(%eax),%eax
   121f4:	83 e0 02             	and    $0x2,%eax
   121f7:	85 c0                	test   %eax,%eax
   121f9:	74 12                	je     1220d <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   121fb:	83 ec 0c             	sub    $0xc,%esp
   121fe:	68 68 46 01 00       	push   $0x14668
   12203:	e8 a9 1c 00 00       	call   13eb1 <log_printf>
   12208:	83 c4 10             	add    $0x10,%esp
   1220b:	eb 10                	jmp    1221d <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   1220d:	83 ec 0c             	sub    $0xc,%esp
   12210:	68 b4 46 01 00       	push   $0x146b4
   12215:	e8 97 1c 00 00       	call   13eb1 <log_printf>
   1221a:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   1221d:	8b 45 08             	mov    0x8(%ebp),%eax
   12220:	8b 40 34             	mov    0x34(%eax),%eax
   12223:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12228:	83 ec 08             	sub    $0x8,%esp
   1222b:	50                   	push   %eax
   1222c:	68 e0 46 01 00       	push   $0x146e0
   12231:	e8 7b 1c 00 00       	call   13eb1 <log_printf>
   12236:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12239:	83 ec 0c             	sub    $0xc,%esp
   1223c:	ff 75 08             	push   0x8(%ebp)
   1223f:	e8 9c fc ff ff       	call   11ee0 <print_exception_fram>
   12244:	83 c4 10             	add    $0x10,%esp
}
   12247:	90                   	nop
   12248:	c9                   	leave  
   12249:	c3                   	ret    

0001224a <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   1224a:	55                   	push   %ebp
   1224b:	89 e5                	mov    %esp,%ebp
   1224d:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12250:	83 ec 0c             	sub    $0xc,%esp
   12253:	68 44 45 01 00       	push   $0x14544
   12258:	e8 54 1c 00 00       	call   13eb1 <log_printf>
   1225d:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12260:	83 ec 0c             	sub    $0xc,%esp
   12263:	68 f4 46 01 00       	push   $0x146f4
   12268:	e8 44 1c 00 00       	call   13eb1 <log_printf>
   1226d:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12270:	8b 45 08             	mov    0x8(%ebp),%eax
   12273:	8b 40 34             	mov    0x34(%eax),%eax
   12276:	83 e0 01             	and    $0x1,%eax
   12279:	85 c0                	test   %eax,%eax
   1227b:	74 18                	je     12295 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   1227d:	e8 32 fc ff ff       	call   11eb4 <read_cr2>
   12282:	83 ec 08             	sub    $0x8,%esp
   12285:	50                   	push   %eax
   12286:	68 18 47 01 00       	push   $0x14718
   1228b:	e8 21 1c 00 00       	call   13eb1 <log_printf>
   12290:	83 c4 10             	add    $0x10,%esp
   12293:	eb 16                	jmp    122ab <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   12295:	e8 1a fc ff ff       	call   11eb4 <read_cr2>
   1229a:	83 ec 08             	sub    $0x8,%esp
   1229d:	50                   	push   %eax
   1229e:	68 3f 47 01 00       	push   $0x1473f
   122a3:	e8 09 1c 00 00       	call   13eb1 <log_printf>
   122a8:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   122ab:	8b 45 08             	mov    0x8(%ebp),%eax
   122ae:	8b 40 34             	mov    0x34(%eax),%eax
   122b1:	83 e0 02             	and    $0x2,%eax
   122b4:	85 c0                	test   %eax,%eax
   122b6:	74 12                	je     122ca <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   122b8:	83 ec 0c             	sub    $0xc,%esp
   122bb:	68 5c 47 01 00       	push   $0x1475c
   122c0:	e8 ec 1b 00 00       	call   13eb1 <log_printf>
   122c5:	83 c4 10             	add    $0x10,%esp
   122c8:	eb 10                	jmp    122da <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   122ca:	83 ec 0c             	sub    $0xc,%esp
   122cd:	68 88 47 01 00       	push   $0x14788
   122d2:	e8 da 1b 00 00       	call   13eb1 <log_printf>
   122d7:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   122da:	8b 45 08             	mov    0x8(%ebp),%eax
   122dd:	8b 40 34             	mov    0x34(%eax),%eax
   122e0:	83 e0 04             	and    $0x4,%eax
   122e3:	85 c0                	test   %eax,%eax
   122e5:	74 12                	je     122f9 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   122e7:	83 ec 0c             	sub    $0xc,%esp
   122ea:	68 b4 47 01 00       	push   $0x147b4
   122ef:	e8 bd 1b 00 00       	call   13eb1 <log_printf>
   122f4:	83 c4 10             	add    $0x10,%esp
   122f7:	eb 10                	jmp    12309 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   122f9:	83 ec 0c             	sub    $0xc,%esp
   122fc:	68 dc 47 01 00       	push   $0x147dc
   12301:	e8 ab 1b 00 00       	call   13eb1 <log_printf>
   12306:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12309:	83 ec 0c             	sub    $0xc,%esp
   1230c:	ff 75 08             	push   0x8(%ebp)
   1230f:	e8 cc fb ff ff       	call   11ee0 <print_exception_fram>
   12314:	83 c4 10             	add    $0x10,%esp
}
   12317:	90                   	nop
   12318:	c9                   	leave  
   12319:	c3                   	ret    

0001231a <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   1231a:	55                   	push   %ebp
   1231b:	89 e5                	mov    %esp,%ebp
   1231d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   12320:	83 ec 08             	sub    $0x8,%esp
   12323:	68 07 48 01 00       	push   $0x14807
   12328:	ff 75 08             	push   0x8(%ebp)
   1232b:	e8 bf fc ff ff       	call   11fef <do_default_handler>
   12330:	83 c4 10             	add    $0x10,%esp
}
   12333:	90                   	nop
   12334:	c9                   	leave  
   12335:	c3                   	ret    

00012336 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12336:	55                   	push   %ebp
   12337:	89 e5                	mov    %esp,%ebp
   12339:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   1233c:	83 ec 08             	sub    $0x8,%esp
   1233f:	68 1b 48 01 00       	push   $0x1481b
   12344:	ff 75 08             	push   0x8(%ebp)
   12347:	e8 a3 fc ff ff       	call   11fef <do_default_handler>
   1234c:	83 c4 10             	add    $0x10,%esp
}
   1234f:	90                   	nop
   12350:	c9                   	leave  
   12351:	c3                   	ret    

00012352 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12352:	55                   	push   %ebp
   12353:	89 e5                	mov    %esp,%ebp
   12355:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   12358:	83 ec 08             	sub    $0x8,%esp
   1235b:	68 35 48 01 00       	push   $0x14835
   12360:	ff 75 08             	push   0x8(%ebp)
   12363:	e8 87 fc ff ff       	call   11fef <do_default_handler>
   12368:	83 c4 10             	add    $0x10,%esp
}
   1236b:	90                   	nop
   1236c:	c9                   	leave  
   1236d:	c3                   	ret    

0001236e <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1236e:	55                   	push   %ebp
   1236f:	89 e5                	mov    %esp,%ebp
   12371:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   12374:	83 ec 08             	sub    $0x8,%esp
   12377:	68 4d 48 01 00       	push   $0x1484d
   1237c:	ff 75 08             	push   0x8(%ebp)
   1237f:	e8 6b fc ff ff       	call   11fef <do_default_handler>
   12384:	83 c4 10             	add    $0x10,%esp
}
   12387:	90                   	nop
   12388:	c9                   	leave  
   12389:	c3                   	ret    

0001238a <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1238a:	55                   	push   %ebp
   1238b:	89 e5                	mov    %esp,%ebp
   1238d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   12390:	83 ec 08             	sub    $0x8,%esp
   12393:	68 65 48 01 00       	push   $0x14865
   12398:	ff 75 08             	push   0x8(%ebp)
   1239b:	e8 4f fc ff ff       	call   11fef <do_default_handler>
   123a0:	83 c4 10             	add    $0x10,%esp
}
   123a3:	90                   	nop
   123a4:	c9                   	leave  
   123a5:	c3                   	ret    

000123a6 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   123a6:	55                   	push   %ebp
   123a7:	89 e5                	mov    %esp,%ebp
   123a9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   123ac:	83 ec 08             	sub    $0x8,%esp
   123af:	68 81 48 01 00       	push   $0x14881
   123b4:	ff 75 08             	push   0x8(%ebp)
   123b7:	e8 33 fc ff ff       	call   11fef <do_default_handler>
   123bc:	83 c4 10             	add    $0x10,%esp
}
   123bf:	90                   	nop
   123c0:	c9                   	leave  
   123c1:	c3                   	ret    

000123c2 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   123c2:	55                   	push   %ebp
   123c3:	89 e5                	mov    %esp,%ebp
   123c5:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   123c8:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   123cf:	7f 06                	jg     123d7 <idt_install+0x15>
   123d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123d5:	79 07                	jns    123de <idt_install+0x1c>
   123d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   123dc:	eb 25                	jmp    12403 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   123de:	8b 45 0c             	mov    0xc(%ebp),%eax
   123e1:	8b 55 08             	mov    0x8(%ebp),%edx
   123e4:	c1 e2 03             	shl    $0x3,%edx
   123e7:	81 c2 00 72 03 00    	add    $0x37200,%edx
   123ed:	68 00 8e 00 00       	push   $0x8e00
   123f2:	50                   	push   %eax
   123f3:	6a 08                	push   $0x8
   123f5:	52                   	push   %edx
   123f6:	e8 c1 f7 ff ff       	call   11bbc <gate_desc_set>
   123fb:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   123fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12403:	c9                   	leave  
   12404:	c3                   	ret    

00012405 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12405:	55                   	push   %ebp
   12406:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12408:	6a 11                	push   $0x11
   1240a:	6a 20                	push   $0x20
   1240c:	e8 5a fa ff ff       	call   11e6b <outb>
   12411:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12414:	6a 20                	push   $0x20
   12416:	6a 21                	push   $0x21
   12418:	e8 4e fa ff ff       	call   11e6b <outb>
   1241d:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12420:	6a 04                	push   $0x4
   12422:	6a 21                	push   $0x21
   12424:	e8 42 fa ff ff       	call   11e6b <outb>
   12429:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   1242c:	6a 01                	push   $0x1
   1242e:	6a 21                	push   $0x21
   12430:	e8 36 fa ff ff       	call   11e6b <outb>
   12435:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12438:	6a 11                	push   $0x11
   1243a:	68 a0 00 00 00       	push   $0xa0
   1243f:	e8 27 fa ff ff       	call   11e6b <outb>
   12444:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12447:	6a 28                	push   $0x28
   12449:	68 a1 00 00 00       	push   $0xa1
   1244e:	e8 18 fa ff ff       	call   11e6b <outb>
   12453:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12456:	6a 02                	push   $0x2
   12458:	68 a1 00 00 00       	push   $0xa1
   1245d:	e8 09 fa ff ff       	call   11e6b <outb>
   12462:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12465:	6a 01                	push   $0x1
   12467:	68 a1 00 00 00       	push   $0xa1
   1246c:	e8 fa f9 ff ff       	call   11e6b <outb>
   12471:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12474:	68 fb 00 00 00       	push   $0xfb
   12479:	6a 21                	push   $0x21
   1247b:	e8 eb f9 ff ff       	call   11e6b <outb>
   12480:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12483:	68 ff 00 00 00       	push   $0xff
   12488:	68 a1 00 00 00       	push   $0xa1
   1248d:	e8 d9 f9 ff ff       	call   11e6b <outb>
   12492:	83 c4 08             	add    $0x8,%esp


}
   12495:	90                   	nop
   12496:	c9                   	leave  
   12497:	c3                   	ret    

00012498 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12498:	55                   	push   %ebp
   12499:	89 e5                	mov    %esp,%ebp
   1249b:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1249e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   124a5:	eb 17                	jmp    124be <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   124a7:	83 ec 08             	sub    $0x8,%esp
   124aa:	68 2a 00 01 00       	push   $0x1002a
   124af:	ff 75 f4             	push   -0xc(%ebp)
   124b2:	e8 0b ff ff ff       	call   123c2 <idt_install>
   124b7:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   124ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124be:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   124c5:	7e e0                	jle    124a7 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   124c7:	83 ec 08             	sub    $0x8,%esp
   124ca:	68 47 00 01 00       	push   $0x10047
   124cf:	6a 00                	push   $0x0
   124d1:	e8 ec fe ff ff       	call   123c2 <idt_install>
   124d6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   124d9:	83 ec 08             	sub    $0x8,%esp
   124dc:	68 64 00 01 00       	push   $0x10064
   124e1:	6a 01                	push   $0x1
   124e3:	e8 da fe ff ff       	call   123c2 <idt_install>
   124e8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   124eb:	83 ec 08             	sub    $0x8,%esp
   124ee:	68 81 00 01 00       	push   $0x10081
   124f3:	6a 02                	push   $0x2
   124f5:	e8 c8 fe ff ff       	call   123c2 <idt_install>
   124fa:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   124fd:	83 ec 08             	sub    $0x8,%esp
   12500:	68 9e 00 01 00       	push   $0x1009e
   12505:	6a 03                	push   $0x3
   12507:	e8 b6 fe ff ff       	call   123c2 <idt_install>
   1250c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1250f:	83 ec 08             	sub    $0x8,%esp
   12512:	68 bb 00 01 00       	push   $0x100bb
   12517:	6a 04                	push   $0x4
   12519:	e8 a4 fe ff ff       	call   123c2 <idt_install>
   1251e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12521:	83 ec 08             	sub    $0x8,%esp
   12524:	68 d8 00 01 00       	push   $0x100d8
   12529:	6a 05                	push   $0x5
   1252b:	e8 92 fe ff ff       	call   123c2 <idt_install>
   12530:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12533:	83 ec 08             	sub    $0x8,%esp
   12536:	68 f5 00 01 00       	push   $0x100f5
   1253b:	6a 06                	push   $0x6
   1253d:	e8 80 fe ff ff       	call   123c2 <idt_install>
   12542:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12545:	83 ec 08             	sub    $0x8,%esp
   12548:	68 12 01 01 00       	push   $0x10112
   1254d:	6a 07                	push   $0x7
   1254f:	e8 6e fe ff ff       	call   123c2 <idt_install>
   12554:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12557:	83 ec 08             	sub    $0x8,%esp
   1255a:	68 2f 01 01 00       	push   $0x1012f
   1255f:	6a 08                	push   $0x8
   12561:	e8 5c fe ff ff       	call   123c2 <idt_install>
   12566:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12569:	83 ec 08             	sub    $0x8,%esp
   1256c:	68 4a 01 01 00       	push   $0x1014a
   12571:	6a 0a                	push   $0xa
   12573:	e8 4a fe ff ff       	call   123c2 <idt_install>
   12578:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1257b:	83 ec 08             	sub    $0x8,%esp
   1257e:	68 65 01 01 00       	push   $0x10165
   12583:	6a 0b                	push   $0xb
   12585:	e8 38 fe ff ff       	call   123c2 <idt_install>
   1258a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1258d:	83 ec 08             	sub    $0x8,%esp
   12590:	68 80 01 01 00       	push   $0x10180
   12595:	6a 0c                	push   $0xc
   12597:	e8 26 fe ff ff       	call   123c2 <idt_install>
   1259c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1259f:	83 ec 08             	sub    $0x8,%esp
   125a2:	68 9b 01 01 00       	push   $0x1019b
   125a7:	6a 0d                	push   $0xd
   125a9:	e8 14 fe ff ff       	call   123c2 <idt_install>
   125ae:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   125b1:	83 ec 08             	sub    $0x8,%esp
   125b4:	68 b6 01 01 00       	push   $0x101b6
   125b9:	6a 0e                	push   $0xe
   125bb:	e8 02 fe ff ff       	call   123c2 <idt_install>
   125c0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   125c3:	83 ec 08             	sub    $0x8,%esp
   125c6:	68 d1 01 01 00       	push   $0x101d1
   125cb:	6a 10                	push   $0x10
   125cd:	e8 f0 fd ff ff       	call   123c2 <idt_install>
   125d2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   125d5:	83 ec 08             	sub    $0x8,%esp
   125d8:	68 ee 01 01 00       	push   $0x101ee
   125dd:	6a 11                	push   $0x11
   125df:	e8 de fd ff ff       	call   123c2 <idt_install>
   125e4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   125e7:	83 ec 08             	sub    $0x8,%esp
   125ea:	68 09 02 01 00       	push   $0x10209
   125ef:	6a 12                	push   $0x12
   125f1:	e8 cc fd ff ff       	call   123c2 <idt_install>
   125f6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   125f9:	83 ec 08             	sub    $0x8,%esp
   125fc:	68 26 02 01 00       	push   $0x10226
   12601:	6a 13                	push   $0x13
   12603:	e8 ba fd ff ff       	call   123c2 <idt_install>
   12608:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   1260b:	83 ec 08             	sub    $0x8,%esp
   1260e:	68 43 02 01 00       	push   $0x10243
   12613:	6a 14                	push   $0x14
   12615:	e8 a8 fd ff ff       	call   123c2 <idt_install>
   1261a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   1261d:	83 ec 08             	sub    $0x8,%esp
   12620:	68 60 02 01 00       	push   $0x10260
   12625:	6a 15                	push   $0x15
   12627:	e8 96 fd ff ff       	call   123c2 <idt_install>
   1262c:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1262f:	b8 00 72 03 00       	mov    $0x37200,%eax
   12634:	83 ec 08             	sub    $0x8,%esp
   12637:	68 00 08 00 00       	push   $0x800
   1263c:	50                   	push   %eax
   1263d:	e8 4a f8 ff ff       	call   11e8c <lidt>
   12642:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12645:	e8 bb fd ff ff       	call   12405 <init_pic>
}
   1264a:	90                   	nop
   1264b:	c9                   	leave  
   1264c:	c3                   	ret    

0001264d <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   1264d:	55                   	push   %ebp
   1264e:	89 e5                	mov    %esp,%ebp
   12650:	53                   	push   %ebx
   12651:	83 ec 14             	sub    $0x14,%esp
   12654:	8b 45 08             	mov    0x8(%ebp),%eax
   12657:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1265a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1265e:	76 7f                	jbe    126df <idt_enable+0x92>
   12660:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12664:	77 79                	ja     126df <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12666:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1266a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1266e:	77 33                	ja     126a3 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12670:	6a 21                	push   $0x21
   12672:	e8 d7 f7 ff ff       	call   11e4e <inb>
   12677:	83 c4 04             	add    $0x4,%esp
   1267a:	89 c3                	mov    %eax,%ebx
   1267c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12680:	ba 01 00 00 00       	mov    $0x1,%edx
   12685:	89 c1                	mov    %eax,%ecx
   12687:	d3 e2                	shl    %cl,%edx
   12689:	89 d0                	mov    %edx,%eax
   1268b:	f7 d0                	not    %eax
   1268d:	21 d8                	and    %ebx,%eax
   1268f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12692:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12696:	50                   	push   %eax
   12697:	6a 21                	push   $0x21
   12699:	e8 cd f7 ff ff       	call   11e6b <outb>
   1269e:	83 c4 08             	add    $0x8,%esp
   126a1:	eb 3d                	jmp    126e0 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   126a3:	68 a1 00 00 00       	push   $0xa1
   126a8:	e8 a1 f7 ff ff       	call   11e4e <inb>
   126ad:	83 c4 04             	add    $0x4,%esp
   126b0:	89 c3                	mov    %eax,%ebx
   126b2:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   126b6:	83 e8 08             	sub    $0x8,%eax
   126b9:	ba 01 00 00 00       	mov    $0x1,%edx
   126be:	89 c1                	mov    %eax,%ecx
   126c0:	d3 e2                	shl    %cl,%edx
   126c2:	89 d0                	mov    %edx,%eax
   126c4:	f7 d0                	not    %eax
   126c6:	21 d8                	and    %ebx,%eax
   126c8:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   126cb:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   126cf:	50                   	push   %eax
   126d0:	68 a1 00 00 00       	push   $0xa1
   126d5:	e8 91 f7 ff ff       	call   11e6b <outb>
   126da:	83 c4 08             	add    $0x8,%esp
   126dd:	eb 01                	jmp    126e0 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   126df:	90                   	nop
  }
  
}
   126e0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   126e3:	c9                   	leave  
   126e4:	c3                   	ret    

000126e5 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   126e5:	55                   	push   %ebp
   126e6:	89 e5                	mov    %esp,%ebp
   126e8:	53                   	push   %ebx
   126e9:	83 ec 14             	sub    $0x14,%esp
   126ec:	8b 45 08             	mov    0x8(%ebp),%eax
   126ef:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   126f2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   126f6:	76 7b                	jbe    12773 <idt_disable+0x8e>
   126f8:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   126fc:	77 75                	ja     12773 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   126fe:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12702:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12706:	77 31                	ja     12739 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12708:	6a 21                	push   $0x21
   1270a:	e8 3f f7 ff ff       	call   11e4e <inb>
   1270f:	83 c4 04             	add    $0x4,%esp
   12712:	89 c3                	mov    %eax,%ebx
   12714:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12718:	ba 01 00 00 00       	mov    $0x1,%edx
   1271d:	89 c1                	mov    %eax,%ecx
   1271f:	d3 e2                	shl    %cl,%edx
   12721:	89 d0                	mov    %edx,%eax
   12723:	09 d8                	or     %ebx,%eax
   12725:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12728:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1272c:	50                   	push   %eax
   1272d:	6a 21                	push   $0x21
   1272f:	e8 37 f7 ff ff       	call   11e6b <outb>
   12734:	83 c4 08             	add    $0x8,%esp
   12737:	eb 3b                	jmp    12774 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12739:	68 a1 00 00 00       	push   $0xa1
   1273e:	e8 0b f7 ff ff       	call   11e4e <inb>
   12743:	83 c4 04             	add    $0x4,%esp
   12746:	89 c3                	mov    %eax,%ebx
   12748:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1274c:	83 e8 08             	sub    $0x8,%eax
   1274f:	ba 01 00 00 00       	mov    $0x1,%edx
   12754:	89 c1                	mov    %eax,%ecx
   12756:	d3 e2                	shl    %cl,%edx
   12758:	89 d0                	mov    %edx,%eax
   1275a:	09 d8                	or     %ebx,%eax
   1275c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1275f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12763:	50                   	push   %eax
   12764:	68 a1 00 00 00       	push   $0xa1
   12769:	e8 fd f6 ff ff       	call   11e6b <outb>
   1276e:	83 c4 08             	add    $0x8,%esp
   12771:	eb 01                	jmp    12774 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12773:	90                   	nop
  }
  
}
   12774:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12777:	c9                   	leave  
   12778:	c3                   	ret    

00012779 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   12779:	55                   	push   %ebp
   1277a:	89 e5                	mov    %esp,%ebp
  cli();
   1277c:	e8 b8 f6 ff ff       	call   11e39 <cli>
}
   12781:	90                   	nop
   12782:	5d                   	pop    %ebp
   12783:	c3                   	ret    

00012784 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   12784:	55                   	push   %ebp
   12785:	89 e5                	mov    %esp,%ebp
  sti();
   12787:	e8 b4 f6 ff ff       	call   11e40 <sti>
}
   1278c:	90                   	nop
   1278d:	5d                   	pop    %ebp
   1278e:	c3                   	ret    

0001278f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   1278f:	55                   	push   %ebp
   12790:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   12792:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   12796:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1279a:	78 29                	js     127c5 <pic_send_eoi+0x36>
   1279c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   127a0:	7f 23                	jg     127c5 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   127a2:	6a 20                	push   $0x20
   127a4:	6a 20                	push   $0x20
   127a6:	e8 c0 f6 ff ff       	call   11e6b <outb>
   127ab:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   127ae:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   127b2:	7e 12                	jle    127c6 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   127b4:	6a 20                	push   $0x20
   127b6:	68 a0 00 00 00       	push   $0xa0
   127bb:	e8 ab f6 ff ff       	call   11e6b <outb>
   127c0:	83 c4 08             	add    $0x8,%esp
   127c3:	eb 01                	jmp    127c6 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   127c5:	90                   	nop
  }

}
   127c6:	c9                   	leave  
   127c7:	c3                   	ret    

000127c8 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   127c8:	55                   	push   %ebp
   127c9:	89 e5                	mov    %esp,%ebp
   127cb:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   127ce:	e8 f2 f6 ff ff       	call   11ec5 <read_eflags>
   127d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   127d6:	e8 9e ff ff ff       	call   12779 <idt_disable_global>
  return state;;
   127db:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127de:	c9                   	leave  
   127df:	c3                   	ret    

000127e0 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   127e0:	55                   	push   %ebp
   127e1:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   127e3:	ff 75 08             	push   0x8(%ebp)
   127e6:	e8 ea f6 ff ff       	call   11ed5 <write_eflags>
   127eb:	83 c4 04             	add    $0x4,%esp
}
   127ee:	90                   	nop
   127ef:	c9                   	leave  
   127f0:	c3                   	ret    

000127f1 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   127f1:	55                   	push   %ebp
   127f2:	89 e5                	mov    %esp,%ebp
   127f4:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   127f7:	83 ec 08             	sub    $0x8,%esp
   127fa:	ff 75 0c             	push   0xc(%ebp)
   127fd:	ff 75 08             	push   0x8(%ebp)
   12800:	e8 ac 16 00 00       	call   13eb1 <log_printf>
   12805:	83 c4 10             	add    $0x10,%esp
}
   12808:	90                   	nop
   12809:	c9                   	leave  
   1280a:	c3                   	ret    

0001280b <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   1280b:	55                   	push   %ebp
   1280c:	89 e5                	mov    %esp,%ebp
   1280e:	53                   	push   %ebx
   1280f:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12812:	8b 45 08             	mov    0x8(%ebp),%eax
   12815:	8b 40 3c             	mov    0x3c(%eax),%eax
   12818:	83 f8 0a             	cmp    $0xa,%eax
   1281b:	77 48                	ja     12865 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   1281d:	8b 45 08             	mov    0x8(%ebp),%eax
   12820:	8b 40 3c             	mov    0x3c(%eax),%eax
   12823:	8b 04 85 a0 48 01 00 	mov    0x148a0(,%eax,4),%eax
   1282a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   1282d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12831:	74 32                	je     12865 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12833:	8b 45 08             	mov    0x8(%ebp),%eax
   12836:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12839:	8b 45 08             	mov    0x8(%ebp),%eax
   1283c:	8b 48 48             	mov    0x48(%eax),%ecx
   1283f:	8b 45 08             	mov    0x8(%ebp),%eax
   12842:	8b 50 44             	mov    0x44(%eax),%edx
   12845:	8b 45 08             	mov    0x8(%ebp),%eax
   12848:	8b 40 40             	mov    0x40(%eax),%eax
   1284b:	53                   	push   %ebx
   1284c:	51                   	push   %ecx
   1284d:	52                   	push   %edx
   1284e:	50                   	push   %eax
   1284f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12852:	ff d0                	call   *%eax
   12854:	83 c4 10             	add    $0x10,%esp
   12857:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   1285a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1285d:	8b 45 08             	mov    0x8(%ebp),%eax
   12860:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   12863:	eb 30                	jmp    12895 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   12865:	e8 0d ee ff ff       	call   11677 <task_current>
   1286a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   1286d:	8b 45 08             	mov    0x8(%ebp),%eax
   12870:	8b 40 3c             	mov    0x3c(%eax),%eax
   12873:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12876:	83 c2 18             	add    $0x18,%edx
   12879:	83 ec 04             	sub    $0x4,%esp
   1287c:	50                   	push   %eax
   1287d:	52                   	push   %edx
   1287e:	68 cc 48 01 00       	push   $0x148cc
   12883:	e8 29 16 00 00       	call   13eb1 <log_printf>
   12888:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   1288b:	8b 45 08             	mov    0x8(%ebp),%eax
   1288e:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   12895:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12898:	c9                   	leave  
   12899:	c3                   	ret    

0001289a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1289a:	55                   	push   %ebp
   1289b:	89 e5                	mov    %esp,%ebp
   1289d:	83 ec 08             	sub    $0x8,%esp
   128a0:	8b 45 08             	mov    0x8(%ebp),%eax
   128a3:	8b 55 0c             	mov    0xc(%ebp),%edx
   128a6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   128aa:	89 d0                	mov    %edx,%eax
   128ac:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   128af:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   128b3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   128b7:	ee                   	out    %al,(%dx)
}
   128b8:	90                   	nop
   128b9:	c9                   	leave  
   128ba:	c3                   	ret    

000128bb <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   128bb:	55                   	push   %ebp
   128bc:	89 e5                	mov    %esp,%ebp
   128be:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   128c1:	a1 00 7a 03 00       	mov    0x37a00,%eax
   128c6:	83 c0 01             	add    $0x1,%eax
   128c9:	a3 00 7a 03 00       	mov    %eax,0x37a00

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   128ce:	83 ec 0c             	sub    $0xc,%esp
   128d1:	6a 20                	push   $0x20
   128d3:	e8 b7 fe ff ff       	call   1278f <pic_send_eoi>
   128d8:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   128db:	e8 09 ee ff ff       	call   116e9 <task_slice_end>
}
   128e0:	90                   	nop
   128e1:	c9                   	leave  
   128e2:	c3                   	ret    

000128e3 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   128e3:	55                   	push   %ebp
   128e4:	89 e5                	mov    %esp,%ebp
   128e6:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   128e9:	6a 36                	push   $0x36
   128eb:	6a 43                	push   $0x43
   128ed:	e8 a8 ff ff ff       	call   1289a <outb>
   128f2:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   128f5:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   128fb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   128ff:	0f b6 c0             	movzbl %al,%eax
   12902:	50                   	push   %eax
   12903:	6a 40                	push   $0x40
   12905:	e8 90 ff ff ff       	call   1289a <outb>
   1290a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1290d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12911:	66 c1 e8 08          	shr    $0x8,%ax
   12915:	0f b6 c0             	movzbl %al,%eax
   12918:	50                   	push   %eax
   12919:	6a 40                	push   $0x40
   1291b:	e8 7a ff ff ff       	call   1289a <outb>
   12920:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   12923:	83 ec 08             	sub    $0x8,%esp
   12926:	68 7b 02 01 00       	push   $0x1027b
   1292b:	6a 20                	push   $0x20
   1292d:	e8 90 fa ff ff       	call   123c2 <idt_install>
   12932:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   12935:	83 ec 0c             	sub    $0xc,%esp
   12938:	6a 20                	push   $0x20
   1293a:	e8 0e fd ff ff       	call   1264d <idt_enable>
   1293f:	83 c4 10             	add    $0x10,%esp

}
   12942:	90                   	nop
   12943:	c9                   	leave  
   12944:	c3                   	ret    

00012945 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   12945:	55                   	push   %ebp
   12946:	89 e5                	mov    %esp,%ebp
   12948:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1294b:	c7 05 00 7a 03 00 00 	movl   $0x0,0x37a00
   12952:	00 00 00 
    init_pit();
   12955:	e8 89 ff ff ff       	call   128e3 <init_pit>
   1295a:	90                   	nop
   1295b:	c9                   	leave  
   1295c:	c3                   	ret    

0001295d <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1295d:	55                   	push   %ebp
   1295e:	89 e5                	mov    %esp,%ebp
   12960:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   12963:	8b 45 08             	mov    0x8(%ebp),%eax
   12966:	8b 40 50             	mov    0x50(%eax),%eax
   12969:	85 c0                	test   %eax,%eax
   1296b:	75 19                	jne    12986 <kernel_init+0x29>
   1296d:	68 f0 48 01 00       	push   $0x148f0
   12972:	68 8c 49 01 00       	push   $0x1498c
   12977:	6a 22                	push   $0x22
   12979:	68 14 49 01 00       	push   $0x14914
   1297e:	e8 5f 08 00 00       	call   131e2 <pannic>
   12983:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   12986:	e8 9e 14 00 00       	call   13e29 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   1298b:	83 ec 0c             	sub    $0xc,%esp
   1298e:	ff 75 08             	push   0x8(%ebp)
   12991:	e8 a6 e2 ff ff       	call   10c3c <memory_init>
   12996:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   12999:	e8 4c f3 ff ff       	call   11cea <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   1299e:	e8 f5 fa ff ff       	call   12498 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   129a3:	e8 9d ff ff ff       	call   12945 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   129a8:	e8 2d ea ff ff       	call   113da <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   129ad:	90                   	nop
   129ae:	c9                   	leave  
   129af:	c3                   	ret    

000129b0 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   129b0:	55                   	push   %ebp
   129b1:	89 e5                	mov    %esp,%ebp
   129b3:	56                   	push   %esi
   129b4:	53                   	push   %ebx
   129b5:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   129b8:	e8 ba ec ff ff       	call   11677 <task_current>
   129bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   129c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   129c4:	75 19                	jne    129df <move_to_first_task+0x2f>
   129c6:	68 49 49 01 00       	push   $0x14949
   129cb:	68 98 49 01 00       	push   $0x14998
   129d0:	6a 42                	push   $0x42
   129d2:	68 14 49 01 00       	push   $0x14914
   129d7:	e8 06 08 00 00       	call   131e2 <pannic>
   129dc:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   129df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129e2:	83 c0 50             	add    $0x50,%eax
   129e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   129e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   129eb:	8b 40 50             	mov    0x50(%eax),%eax
   129ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
   129f1:	8b 52 38             	mov    0x38(%edx),%edx
   129f4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   129f7:	8b 49 24             	mov    0x24(%ecx),%ecx
   129fa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   129fd:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12a00:	8b 75 f0             	mov    -0x10(%ebp),%esi
   12a03:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   12a06:	50                   	push   %eax
   12a07:	52                   	push   %edx
   12a08:	51                   	push   %ecx
   12a09:	53                   	push   %ebx
   12a0a:	56                   	push   %esi
   12a0b:	cf                   	iret   

        
    );
}
   12a0c:	90                   	nop
   12a0d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12a10:	5b                   	pop    %ebx
   12a11:	5e                   	pop    %esi
   12a12:	5d                   	pop    %ebp
   12a13:	c3                   	ret    

00012a14 <init_main>:


void init_main(void) {
   12a14:	55                   	push   %ebp
   12a15:	89 e5                	mov    %esp,%ebp
   12a17:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   12a1a:	83 ec 0c             	sub    $0xc,%esp
   12a1d:	68 53 49 01 00       	push   $0x14953
   12a22:	e8 8a 14 00 00       	call   13eb1 <log_printf>
   12a27:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   12a2a:	83 ec 04             	sub    $0x4,%esp
   12a2d:	68 6b 49 01 00       	push   $0x1496b
   12a32:	68 71 49 01 00       	push   $0x14971
   12a37:	68 76 49 01 00       	push   $0x14976
   12a3c:	e8 70 14 00 00       	call   13eb1 <log_printf>
   12a41:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   12a44:	e8 6e ea ff ff       	call   114b7 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   12a49:	e8 62 ff ff ff       	call   129b0 <move_to_first_task>
   12a4e:	90                   	nop
   12a4f:	c9                   	leave  
   12a50:	c3                   	ret    

00012a51 <list_init>:
static inline void list_init(list_t *list) {
   12a51:	55                   	push   %ebp
   12a52:	89 e5                	mov    %esp,%ebp
   12a54:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12a57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a5b:	75 19                	jne    12a76 <list_init+0x25>
   12a5d:	68 ac 49 01 00       	push   $0x149ac
   12a62:	68 58 4a 01 00       	push   $0x14a58
   12a67:	6a 31                	push   $0x31
   12a69:	68 c0 49 01 00       	push   $0x149c0
   12a6e:	e8 6f 07 00 00       	call   131e2 <pannic>
   12a73:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12a76:	8b 45 08             	mov    0x8(%ebp),%eax
   12a79:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a80:	8b 45 08             	mov    0x8(%ebp),%eax
   12a83:	8b 50 04             	mov    0x4(%eax),%edx
   12a86:	8b 45 08             	mov    0x8(%ebp),%eax
   12a89:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12a95:	90                   	nop
   12a96:	c9                   	leave  
   12a97:	c3                   	ret    

00012a98 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12a98:	55                   	push   %ebp
   12a99:	89 e5                	mov    %esp,%ebp
   12a9b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12a9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12aa2:	75 19                	jne    12abd <list_is_empty+0x25>
   12aa4:	68 ac 49 01 00       	push   $0x149ac
   12aa9:	68 64 4a 01 00       	push   $0x14a64
   12aae:	6a 38                	push   $0x38
   12ab0:	68 c0 49 01 00       	push   $0x149c0
   12ab5:	e8 28 07 00 00       	call   131e2 <pannic>
   12aba:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12abd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac0:	8b 40 08             	mov    0x8(%eax),%eax
   12ac3:	85 c0                	test   %eax,%eax
   12ac5:	0f 94 c0             	sete   %al
   12ac8:	0f b6 c0             	movzbl %al,%eax
}
   12acb:	c9                   	leave  
   12acc:	c3                   	ret    

00012acd <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   12acd:	55                   	push   %ebp
   12ace:	89 e5                	mov    %esp,%ebp
   12ad0:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   12ad3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ad7:	75 19                	jne    12af2 <mutex_init+0x25>
   12ad9:	68 fe 49 01 00       	push   $0x149fe
   12ade:	68 4c 4a 01 00       	push   $0x14a4c
   12ae3:	6a 15                	push   $0x15
   12ae5:	68 14 4a 01 00       	push   $0x14a14
   12aea:	e8 f3 06 00 00       	call   131e2 <pannic>
   12aef:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   12af2:	8b 45 08             	mov    0x8(%ebp),%eax
   12af5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   12afc:	8b 45 08             	mov    0x8(%ebp),%eax
   12aff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   12b05:	8b 45 08             	mov    0x8(%ebp),%eax
   12b08:	83 c0 08             	add    $0x8,%eax
   12b0b:	83 ec 0c             	sub    $0xc,%esp
   12b0e:	50                   	push   %eax
   12b0f:	e8 3d ff ff ff       	call   12a51 <list_init>
   12b14:	83 c4 10             	add    $0x10,%esp
}
   12b17:	90                   	nop
   12b18:	c9                   	leave  
   12b19:	c3                   	ret    

00012b1a <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   12b1a:	55                   	push   %ebp
   12b1b:	89 e5                	mov    %esp,%ebp
   12b1d:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12b20:	e8 a3 fc ff ff       	call   127c8 <idt_enter_protection>
   12b25:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   12b28:	e8 4a eb ff ff       	call   11677 <task_current>
   12b2d:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   12b30:	8b 45 08             	mov    0x8(%ebp),%eax
   12b33:	8b 40 04             	mov    0x4(%eax),%eax
   12b36:	85 c0                	test   %eax,%eax
   12b38:	75 19                	jne    12b53 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   12b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3d:	8b 40 04             	mov    0x4(%eax),%eax
   12b40:	8d 50 01             	lea    0x1(%eax),%edx
   12b43:	8b 45 08             	mov    0x8(%ebp),%eax
   12b46:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   12b49:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12b4f:	89 10                	mov    %edx,(%eax)
   12b51:	eb 47                	jmp    12b9a <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   12b53:	8b 45 08             	mov    0x8(%ebp),%eax
   12b56:	8b 00                	mov    (%eax),%eax
   12b58:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12b5b:	75 11                	jne    12b6e <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   12b5d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b60:	8b 40 04             	mov    0x4(%eax),%eax
   12b63:	8d 50 01             	lea    0x1(%eax),%edx
   12b66:	8b 45 08             	mov    0x8(%ebp),%eax
   12b69:	89 50 04             	mov    %edx,0x4(%eax)
   12b6c:	eb 2c                	jmp    12b9a <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   12b6e:	83 ec 0c             	sub    $0xc,%esp
   12b71:	ff 75 f0             	push   -0x10(%ebp)
   12b74:	e8 85 ea ff ff       	call   115fe <task_set_unready>
   12b79:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   12b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b7f:	8d 50 48             	lea    0x48(%eax),%edx
   12b82:	8b 45 08             	mov    0x8(%ebp),%eax
   12b85:	83 c0 08             	add    $0x8,%eax
   12b88:	83 ec 08             	sub    $0x8,%esp
   12b8b:	52                   	push   %edx
   12b8c:	50                   	push   %eax
   12b8d:	e8 9b 0f 00 00       	call   13b2d <list_insert_last>
   12b92:	83 c4 10             	add    $0x10,%esp
    task_switch();
   12b95:	e8 e7 ea ff ff       	call   11681 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   12b9a:	83 ec 0c             	sub    $0xc,%esp
   12b9d:	ff 75 f4             	push   -0xc(%ebp)
   12ba0:	e8 3b fc ff ff       	call   127e0 <idt_leave_protection>
   12ba5:	83 c4 10             	add    $0x10,%esp
}
   12ba8:	90                   	nop
   12ba9:	c9                   	leave  
   12baa:	c3                   	ret    

00012bab <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   12bab:	55                   	push   %ebp
   12bac:	89 e5                	mov    %esp,%ebp
   12bae:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12bb1:	e8 12 fc ff ff       	call   127c8 <idt_enter_protection>
   12bb6:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   12bb9:	e8 b9 ea ff ff       	call   11677 <task_current>
   12bbe:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   12bc1:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc4:	8b 00                	mov    (%eax),%eax
   12bc6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12bc9:	0f 85 83 00 00 00    	jne    12c52 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   12bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd2:	8b 40 04             	mov    0x4(%eax),%eax
   12bd5:	8d 50 ff             	lea    -0x1(%eax),%edx
   12bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bdb:	89 50 04             	mov    %edx,0x4(%eax)
   12bde:	8b 45 08             	mov    0x8(%ebp),%eax
   12be1:	8b 40 04             	mov    0x4(%eax),%eax
   12be4:	85 c0                	test   %eax,%eax
   12be6:	75 6a                	jne    12c52 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   12be8:	8b 45 08             	mov    0x8(%ebp),%eax
   12beb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   12bf1:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf4:	83 c0 08             	add    $0x8,%eax
   12bf7:	83 ec 0c             	sub    $0xc,%esp
   12bfa:	50                   	push   %eax
   12bfb:	e8 98 fe ff ff       	call   12a98 <list_is_empty>
   12c00:	83 c4 10             	add    $0x10,%esp
   12c03:	85 c0                	test   %eax,%eax
   12c05:	75 4b                	jne    12c52 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   12c07:	8b 45 08             	mov    0x8(%ebp),%eax
   12c0a:	83 c0 08             	add    $0x8,%eax
   12c0d:	83 ec 0c             	sub    $0xc,%esp
   12c10:	50                   	push   %eax
   12c11:	e8 a6 0f 00 00       	call   13bbc <list_remove_first>
   12c16:	83 c4 10             	add    $0x10,%esp
   12c19:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   12c1c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12c20:	74 08                	je     12c2a <mutex_unlock+0x7f>
   12c22:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c25:	83 e8 48             	sub    $0x48,%eax
   12c28:	eb 05                	jmp    12c2f <mutex_unlock+0x84>
   12c2a:	b8 00 00 00 00       	mov    $0x0,%eax
   12c2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   12c32:	8b 45 08             	mov    0x8(%ebp),%eax
   12c35:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   12c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12c42:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   12c44:	83 ec 0c             	sub    $0xc,%esp
   12c47:	ff 75 e8             	push   -0x18(%ebp)
   12c4a:	e8 64 e9 ff ff       	call   115b3 <task_set_ready>
   12c4f:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   12c52:	83 ec 0c             	sub    $0xc,%esp
   12c55:	ff 75 f4             	push   -0xc(%ebp)
   12c58:	e8 83 fb ff ff       	call   127e0 <idt_leave_protection>
   12c5d:	83 c4 10             	add    $0x10,%esp
}
   12c60:	90                   	nop
   12c61:	c9                   	leave  
   12c62:	c3                   	ret    

00012c63 <list_init>:
static inline void list_init(list_t *list) {
   12c63:	55                   	push   %ebp
   12c64:	89 e5                	mov    %esp,%ebp
   12c66:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c6d:	75 19                	jne    12c88 <list_init+0x25>
   12c6f:	68 74 4a 01 00       	push   $0x14a74
   12c74:	68 18 4b 01 00       	push   $0x14b18
   12c79:	6a 31                	push   $0x31
   12c7b:	68 88 4a 01 00       	push   $0x14a88
   12c80:	e8 5d 05 00 00       	call   131e2 <pannic>
   12c85:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12c88:	8b 45 08             	mov    0x8(%ebp),%eax
   12c8b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c92:	8b 45 08             	mov    0x8(%ebp),%eax
   12c95:	8b 50 04             	mov    0x4(%eax),%edx
   12c98:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9b:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12ca7:	90                   	nop
   12ca8:	c9                   	leave  
   12ca9:	c3                   	ret    

00012caa <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12caa:	55                   	push   %ebp
   12cab:	89 e5                	mov    %esp,%ebp
   12cad:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12cb0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12cb4:	75 19                	jne    12ccf <list_is_empty+0x25>
   12cb6:	68 74 4a 01 00       	push   $0x14a74
   12cbb:	68 24 4b 01 00       	push   $0x14b24
   12cc0:	6a 38                	push   $0x38
   12cc2:	68 88 4a 01 00       	push   $0x14a88
   12cc7:	e8 16 05 00 00       	call   131e2 <pannic>
   12ccc:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd2:	8b 40 08             	mov    0x8(%eax),%eax
   12cd5:	85 c0                	test   %eax,%eax
   12cd7:	0f 94 c0             	sete   %al
   12cda:	0f b6 c0             	movzbl %al,%eax
}
   12cdd:	c9                   	leave  
   12cde:	c3                   	ret    

00012cdf <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   12cdf:	55                   	push   %ebp
   12ce0:	89 e5                	mov    %esp,%ebp
   12ce2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   12ce5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ce9:	75 19                	jne    12d04 <sem_init+0x25>
   12ceb:	68 c6 4a 01 00       	push   $0x14ac6
   12cf0:	68 0c 4b 01 00       	push   $0x14b0c
   12cf5:	6a 18                	push   $0x18
   12cf7:	68 d8 4a 01 00       	push   $0x14ad8
   12cfc:	e8 e1 04 00 00       	call   131e2 <pannic>
   12d01:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   12d04:	8b 45 08             	mov    0x8(%ebp),%eax
   12d07:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   12d0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d10:	83 c0 04             	add    $0x4,%eax
   12d13:	83 ec 0c             	sub    $0xc,%esp
   12d16:	50                   	push   %eax
   12d17:	e8 47 ff ff ff       	call   12c63 <list_init>
   12d1c:	83 c4 10             	add    $0x10,%esp
}
   12d1f:	90                   	nop
   12d20:	c9                   	leave  
   12d21:	c3                   	ret    

00012d22 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12d22:	55                   	push   %ebp
   12d23:	89 e5                	mov    %esp,%ebp
   12d25:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12d28:	e8 9b fa ff ff       	call   127c8 <idt_enter_protection>
   12d2d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12d30:	8b 45 08             	mov    0x8(%ebp),%eax
   12d33:	8b 00                	mov    (%eax),%eax
   12d35:	85 c0                	test   %eax,%eax
   12d37:	7e 0f                	jle    12d48 <sem_wait+0x26>
        --sem->count;   
   12d39:	8b 45 08             	mov    0x8(%ebp),%eax
   12d3c:	8b 00                	mov    (%eax),%eax
   12d3e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d41:	8b 45 08             	mov    0x8(%ebp),%eax
   12d44:	89 10                	mov    %edx,(%eax)
   12d46:	eb 34                	jmp    12d7c <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   12d48:	e8 2a e9 ff ff       	call   11677 <task_current>
   12d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   12d50:	83 ec 0c             	sub    $0xc,%esp
   12d53:	ff 75 f0             	push   -0x10(%ebp)
   12d56:	e8 a3 e8 ff ff       	call   115fe <task_set_unready>
   12d5b:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   12d5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12d61:	8d 50 48             	lea    0x48(%eax),%edx
   12d64:	8b 45 08             	mov    0x8(%ebp),%eax
   12d67:	83 c0 04             	add    $0x4,%eax
   12d6a:	83 ec 08             	sub    $0x8,%esp
   12d6d:	52                   	push   %edx
   12d6e:	50                   	push   %eax
   12d6f:	e8 b9 0d 00 00       	call   13b2d <list_insert_last>
   12d74:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   12d77:	e8 05 e9 ff ff       	call   11681 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   12d7c:	83 ec 0c             	sub    $0xc,%esp
   12d7f:	ff 75 f4             	push   -0xc(%ebp)
   12d82:	e8 59 fa ff ff       	call   127e0 <idt_leave_protection>
   12d87:	83 c4 10             	add    $0x10,%esp
}
   12d8a:	90                   	nop
   12d8b:	c9                   	leave  
   12d8c:	c3                   	ret    

00012d8d <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   12d8d:	55                   	push   %ebp
   12d8e:	89 e5                	mov    %esp,%ebp
   12d90:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12d93:	e8 30 fa ff ff       	call   127c8 <idt_enter_protection>
   12d98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   12d9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9e:	83 c0 04             	add    $0x4,%eax
   12da1:	83 ec 0c             	sub    $0xc,%esp
   12da4:	50                   	push   %eax
   12da5:	e8 00 ff ff ff       	call   12caa <list_is_empty>
   12daa:	83 c4 10             	add    $0x10,%esp
   12dad:	85 c0                	test   %eax,%eax
   12daf:	75 3b                	jne    12dec <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   12db1:	8b 45 08             	mov    0x8(%ebp),%eax
   12db4:	83 c0 04             	add    $0x4,%eax
   12db7:	83 ec 0c             	sub    $0xc,%esp
   12dba:	50                   	push   %eax
   12dbb:	e8 fc 0d 00 00       	call   13bbc <list_remove_first>
   12dc0:	83 c4 10             	add    $0x10,%esp
   12dc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   12dc6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12dca:	74 08                	je     12dd4 <sem_notify+0x47>
   12dcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12dcf:	83 e8 48             	sub    $0x48,%eax
   12dd2:	eb 05                	jmp    12dd9 <sem_notify+0x4c>
   12dd4:	b8 00 00 00 00       	mov    $0x0,%eax
   12dd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12ddc:	83 ec 0c             	sub    $0xc,%esp
   12ddf:	ff 75 ec             	push   -0x14(%ebp)
   12de2:	e8 cc e7 ff ff       	call   115b3 <task_set_ready>
   12de7:	83 c4 10             	add    $0x10,%esp
   12dea:	eb 0d                	jmp    12df9 <sem_notify+0x6c>
    } else {
        sem->count++;
   12dec:	8b 45 08             	mov    0x8(%ebp),%eax
   12def:	8b 00                	mov    (%eax),%eax
   12df1:	8d 50 01             	lea    0x1(%eax),%edx
   12df4:	8b 45 08             	mov    0x8(%ebp),%eax
   12df7:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   12df9:	83 ec 0c             	sub    $0xc,%esp
   12dfc:	ff 75 f4             	push   -0xc(%ebp)
   12dff:	e8 dc f9 ff ff       	call   127e0 <idt_leave_protection>
   12e04:	83 c4 10             	add    $0x10,%esp

}
   12e07:	90                   	nop
   12e08:	c9                   	leave  
   12e09:	c3                   	ret    

00012e0a <sem_count>:

int sem_count(sem_t *sem) {
   12e0a:	55                   	push   %ebp
   12e0b:	89 e5                	mov    %esp,%ebp
   12e0d:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12e10:	e8 b3 f9 ff ff       	call   127c8 <idt_enter_protection>
   12e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12e18:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1b:	8b 00                	mov    (%eax),%eax
   12e1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12e20:	83 ec 0c             	sub    $0xc,%esp
   12e23:	ff 75 f4             	push   -0xc(%ebp)
   12e26:	e8 b5 f9 ff ff       	call   127e0 <idt_leave_protection>
   12e2b:	83 c4 10             	add    $0x10,%esp

    return count;
   12e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e31:	c9                   	leave  
   12e32:	c3                   	ret    

00012e33 <list_init>:
static inline void list_init(list_t *list) {
   12e33:	55                   	push   %ebp
   12e34:	89 e5                	mov    %esp,%ebp
   12e36:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12e39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e3d:	75 19                	jne    12e58 <list_init+0x25>
   12e3f:	68 34 4b 01 00       	push   $0x14b34
   12e44:	68 38 4c 01 00       	push   $0x14c38
   12e49:	6a 31                	push   $0x31
   12e4b:	68 48 4b 01 00       	push   $0x14b48
   12e50:	e8 8d 03 00 00       	call   131e2 <pannic>
   12e55:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12e58:	8b 45 08             	mov    0x8(%ebp),%eax
   12e5b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e62:	8b 45 08             	mov    0x8(%ebp),%eax
   12e65:	8b 50 04             	mov    0x4(%eax),%edx
   12e68:	8b 45 08             	mov    0x8(%ebp),%eax
   12e6b:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e70:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12e77:	90                   	nop
   12e78:	c9                   	leave  
   12e79:	c3                   	ret    

00012e7a <list_get_size>:
static inline int list_get_size(list_t *list) {
   12e7a:	55                   	push   %ebp
   12e7b:	89 e5                	mov    %esp,%ebp
   12e7d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12e80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e84:	75 19                	jne    12e9f <list_get_size+0x25>
   12e86:	68 34 4b 01 00       	push   $0x14b34
   12e8b:	68 44 4c 01 00       	push   $0x14c44
   12e90:	6a 3e                	push   $0x3e
   12e92:	68 48 4b 01 00       	push   $0x14b48
   12e97:	e8 46 03 00 00       	call   131e2 <pannic>
   12e9c:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12e9f:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea2:	8b 40 08             	mov    0x8(%eax),%eax
}
   12ea5:	c9                   	leave  
   12ea6:	c3                   	ret    

00012ea7 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   12ea7:	55                   	push   %ebp
   12ea8:	89 e5                	mov    %esp,%ebp
   12eaa:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12ead:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12eb1:	75 19                	jne    12ecc <list_get_first+0x25>
   12eb3:	68 34 4b 01 00       	push   $0x14b34
   12eb8:	68 64 4c 01 00       	push   $0x14c64
   12ebd:	6a 44                	push   $0x44
   12ebf:	68 48 4b 01 00       	push   $0x14b48
   12ec4:	e8 19 03 00 00       	call   131e2 <pannic>
   12ec9:	83 c4 10             	add    $0x10,%esp
    return list->first;
   12ecc:	8b 45 08             	mov    0x8(%ebp),%eax
   12ecf:	8b 00                	mov    (%eax),%eax
}
   12ed1:	c9                   	leave  
   12ed2:	c3                   	ret    

00012ed3 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   12ed3:	55                   	push   %ebp
   12ed4:	89 e5                	mov    %esp,%ebp
   12ed6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12ed9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12edd:	75 19                	jne    12ef8 <list_get_last+0x25>
   12edf:	68 34 4b 01 00       	push   $0x14b34
   12ee4:	68 54 4c 01 00       	push   $0x14c54
   12ee9:	6a 4a                	push   $0x4a
   12eeb:	68 48 4b 01 00       	push   $0x14b48
   12ef0:	e8 ed 02 00 00       	call   131e2 <pannic>
   12ef5:	83 c4 10             	add    $0x10,%esp

    return list->last;
   12ef8:	8b 45 08             	mov    0x8(%ebp),%eax
   12efb:	8b 40 04             	mov    0x4(%eax),%eax
}
   12efe:	c9                   	leave  
   12eff:	c3                   	ret    

00012f00 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12f00:	55                   	push   %ebp
   12f01:	89 e5                	mov    %esp,%ebp
   12f03:	56                   	push   %esi
   12f04:	53                   	push   %ebx
   12f05:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   12f08:	83 ec 0c             	sub    $0xc,%esp
   12f0b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f0e:	50                   	push   %eax
   12f0f:	e8 1f ff ff ff       	call   12e33 <list_init>
   12f14:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12f17:	83 ec 0c             	sub    $0xc,%esp
   12f1a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f1d:	50                   	push   %eax
   12f1e:	e8 57 ff ff ff       	call   12e7a <list_get_size>
   12f23:	83 c4 10             	add    $0x10,%esp
   12f26:	89 c6                	mov    %eax,%esi
   12f28:	83 ec 0c             	sub    $0xc,%esp
   12f2b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f2e:	50                   	push   %eax
   12f2f:	e8 9f ff ff ff       	call   12ed3 <list_get_last>
   12f34:	83 c4 10             	add    $0x10,%esp
   12f37:	89 c3                	mov    %eax,%ebx
   12f39:	83 ec 0c             	sub    $0xc,%esp
   12f3c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f3f:	50                   	push   %eax
   12f40:	e8 62 ff ff ff       	call   12ea7 <list_get_first>
   12f45:	83 c4 10             	add    $0x10,%esp
   12f48:	56                   	push   %esi
   12f49:	53                   	push   %ebx
   12f4a:	50                   	push   %eax
   12f4b:	68 88 4b 01 00       	push   $0x14b88
   12f50:	e8 5c 0f 00 00       	call   13eb1 <log_printf>
   12f55:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   12f58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12f5f:	eb 3f                	jmp    12fa0 <list_test+0xa0>
        list_node_t *node = nodes + i;
   12f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f64:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12f6b:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12f6e:	01 d0                	add    %edx,%eax
   12f70:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   12f73:	8b 45 d0             	mov    -0x30(%ebp),%eax
   12f76:	83 ec 04             	sub    $0x4,%esp
   12f79:	50                   	push   %eax
   12f7a:	ff 75 f4             	push   -0xc(%ebp)
   12f7d:	68 b0 4b 01 00       	push   $0x14bb0
   12f82:	e8 2a 0f 00 00       	call   13eb1 <log_printf>
   12f87:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   12f8a:	83 ec 08             	sub    $0x8,%esp
   12f8d:	ff 75 d0             	push   -0x30(%ebp)
   12f90:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f93:	50                   	push   %eax
   12f94:	e8 09 0b 00 00       	call   13aa2 <list_insert_first>
   12f99:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12f9c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12fa0:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   12fa4:	7e bb                	jle    12f61 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12fa6:	83 ec 0c             	sub    $0xc,%esp
   12fa9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12fac:	50                   	push   %eax
   12fad:	e8 c8 fe ff ff       	call   12e7a <list_get_size>
   12fb2:	83 c4 10             	add    $0x10,%esp
   12fb5:	89 c6                	mov    %eax,%esi
   12fb7:	83 ec 0c             	sub    $0xc,%esp
   12fba:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12fbd:	50                   	push   %eax
   12fbe:	e8 10 ff ff ff       	call   12ed3 <list_get_last>
   12fc3:	83 c4 10             	add    $0x10,%esp
   12fc6:	89 c3                	mov    %eax,%ebx
   12fc8:	83 ec 0c             	sub    $0xc,%esp
   12fcb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12fce:	50                   	push   %eax
   12fcf:	e8 d3 fe ff ff       	call   12ea7 <list_get_first>
   12fd4:	83 c4 10             	add    $0x10,%esp
   12fd7:	56                   	push   %esi
   12fd8:	53                   	push   %ebx
   12fd9:	50                   	push   %eax
   12fda:	68 88 4b 01 00       	push   $0x14b88
   12fdf:	e8 cd 0e 00 00       	call   13eb1 <log_printf>
   12fe4:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   12fe7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12fee:	eb 2d                	jmp    1301d <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12ff0:	83 ec 0c             	sub    $0xc,%esp
   12ff3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ff6:	50                   	push   %eax
   12ff7:	e8 c0 0b 00 00       	call   13bbc <list_remove_first>
   12ffc:	83 c4 10             	add    $0x10,%esp
   12fff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   13002:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   13005:	83 ec 04             	sub    $0x4,%esp
   13008:	50                   	push   %eax
   13009:	ff 75 f0             	push   -0x10(%ebp)
   1300c:	68 cf 4b 01 00       	push   $0x14bcf
   13011:	e8 9b 0e 00 00       	call   13eb1 <log_printf>
   13016:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13019:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1301d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   13021:	7e cd                	jle    12ff0 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13023:	83 ec 0c             	sub    $0xc,%esp
   13026:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13029:	50                   	push   %eax
   1302a:	e8 4b fe ff ff       	call   12e7a <list_get_size>
   1302f:	83 c4 10             	add    $0x10,%esp
   13032:	89 c6                	mov    %eax,%esi
   13034:	83 ec 0c             	sub    $0xc,%esp
   13037:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1303a:	50                   	push   %eax
   1303b:	e8 93 fe ff ff       	call   12ed3 <list_get_last>
   13040:	83 c4 10             	add    $0x10,%esp
   13043:	89 c3                	mov    %eax,%ebx
   13045:	83 ec 0c             	sub    $0xc,%esp
   13048:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1304b:	50                   	push   %eax
   1304c:	e8 56 fe ff ff       	call   12ea7 <list_get_first>
   13051:	83 c4 10             	add    $0x10,%esp
   13054:	56                   	push   %esi
   13055:	53                   	push   %ebx
   13056:	50                   	push   %eax
   13057:	68 88 4b 01 00       	push   $0x14b88
   1305c:	e8 50 0e 00 00       	call   13eb1 <log_printf>
   13061:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   13064:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1306b:	eb 3f                	jmp    130ac <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1306d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13070:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13077:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1307a:	01 d0                	add    %edx,%eax
   1307c:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   1307f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13082:	83 ec 04             	sub    $0x4,%esp
   13085:	50                   	push   %eax
   13086:	ff 75 ec             	push   -0x14(%ebp)
   13089:	68 e6 4b 01 00       	push   $0x14be6
   1308e:	e8 1e 0e 00 00       	call   13eb1 <log_printf>
   13093:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   13096:	83 ec 08             	sub    $0x8,%esp
   13099:	ff 75 d8             	push   -0x28(%ebp)
   1309c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1309f:	50                   	push   %eax
   130a0:	e8 88 0a 00 00       	call   13b2d <list_insert_last>
   130a5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   130a8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   130ac:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   130b0:	7e bb                	jle    1306d <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   130b2:	83 ec 0c             	sub    $0xc,%esp
   130b5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   130b8:	50                   	push   %eax
   130b9:	e8 bc fd ff ff       	call   12e7a <list_get_size>
   130be:	83 c4 10             	add    $0x10,%esp
   130c1:	89 c6                	mov    %eax,%esi
   130c3:	83 ec 0c             	sub    $0xc,%esp
   130c6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   130c9:	50                   	push   %eax
   130ca:	e8 04 fe ff ff       	call   12ed3 <list_get_last>
   130cf:	83 c4 10             	add    $0x10,%esp
   130d2:	89 c3                	mov    %eax,%ebx
   130d4:	83 ec 0c             	sub    $0xc,%esp
   130d7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   130da:	50                   	push   %eax
   130db:	e8 c7 fd ff ff       	call   12ea7 <list_get_first>
   130e0:	83 c4 10             	add    $0x10,%esp
   130e3:	56                   	push   %esi
   130e4:	53                   	push   %ebx
   130e5:	50                   	push   %eax
   130e6:	68 88 4b 01 00       	push   $0x14b88
   130eb:	e8 c1 0d 00 00       	call   13eb1 <log_printf>
   130f0:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   130f3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   130fa:	eb 2d                	jmp    13129 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   130fc:	83 ec 0c             	sub    $0xc,%esp
   130ff:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13102:	50                   	push   %eax
   13103:	e8 65 0b 00 00       	call   13c6d <list_remove_last>
   13108:	83 c4 10             	add    $0x10,%esp
   1310b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1310e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13111:	83 ec 04             	sub    $0x4,%esp
   13114:	50                   	push   %eax
   13115:	ff 75 e8             	push   -0x18(%ebp)
   13118:	68 04 4c 01 00       	push   $0x14c04
   1311d:	e8 8f 0d 00 00       	call   13eb1 <log_printf>
   13122:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13125:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13129:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1312d:	7e cd                	jle    130fc <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1312f:	83 ec 0c             	sub    $0xc,%esp
   13132:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13135:	50                   	push   %eax
   13136:	e8 3f fd ff ff       	call   12e7a <list_get_size>
   1313b:	83 c4 10             	add    $0x10,%esp
   1313e:	89 c6                	mov    %eax,%esi
   13140:	83 ec 0c             	sub    $0xc,%esp
   13143:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13146:	50                   	push   %eax
   13147:	e8 87 fd ff ff       	call   12ed3 <list_get_last>
   1314c:	83 c4 10             	add    $0x10,%esp
   1314f:	89 c3                	mov    %eax,%ebx
   13151:	83 ec 0c             	sub    $0xc,%esp
   13154:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13157:	50                   	push   %eax
   13158:	e8 4a fd ff ff       	call   12ea7 <list_get_first>
   1315d:	83 c4 10             	add    $0x10,%esp
   13160:	56                   	push   %esi
   13161:	53                   	push   %ebx
   13162:	50                   	push   %eax
   13163:	68 88 4b 01 00       	push   $0x14b88
   13168:	e8 44 0d 00 00       	call   13eb1 <log_printf>
   1316d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   13170:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   13177:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   1317e:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   13185:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   1318c:	8d 45 90             	lea    -0x70(%ebp),%eax
   1318f:	83 c0 04             	add    $0x4,%eax
   13192:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   13195:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   13199:	74 08                	je     131a3 <list_test+0x2a3>
   1319b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1319e:	83 e8 04             	sub    $0x4,%eax
   131a1:	eb 05                	jmp    131a8 <list_test+0x2a8>
   131a3:	b8 00 00 00 00       	mov    $0x0,%eax
   131a8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   131ab:	8d 45 90             	lea    -0x70(%ebp),%eax
   131ae:	83 ec 08             	sub    $0x8,%esp
   131b1:	50                   	push   %eax
   131b2:	68 1a 4c 01 00       	push   $0x14c1a
   131b7:	e8 f5 0c 00 00       	call   13eb1 <log_printf>
   131bc:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   131bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
   131c2:	83 ec 08             	sub    $0x8,%esp
   131c5:	50                   	push   %eax
   131c6:	68 28 4c 01 00       	push   $0x14c28
   131cb:	e8 e1 0c 00 00       	call   13eb1 <log_printf>
   131d0:	83 c4 10             	add    $0x10,%esp

 }
   131d3:	90                   	nop
   131d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
   131d7:	5b                   	pop    %ebx
   131d8:	5e                   	pop    %esi
   131d9:	5d                   	pop    %ebp
   131da:	c3                   	ret    

000131db <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   131db:	55                   	push   %ebp
   131dc:	89 e5                	mov    %esp,%ebp
   131de:	f4                   	hlt    
   131df:	90                   	nop
   131e0:	5d                   	pop    %ebp
   131e1:	c3                   	ret    

000131e2 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   131e2:	55                   	push   %ebp
   131e3:	89 e5                	mov    %esp,%ebp
   131e5:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   131e8:	83 ec 08             	sub    $0x8,%esp
   131eb:	ff 75 14             	push   0x14(%ebp)
   131ee:	68 73 4c 01 00       	push   $0x14c73
   131f3:	e8 b9 0c 00 00       	call   13eb1 <log_printf>
   131f8:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   131fb:	ff 75 10             	push   0x10(%ebp)
   131fe:	ff 75 0c             	push   0xc(%ebp)
   13201:	ff 75 08             	push   0x8(%ebp)
   13204:	68 84 4c 01 00       	push   $0x14c84
   13209:	e8 a3 0c 00 00       	call   13eb1 <log_printf>
   1320e:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   13211:	e8 c5 ff ff ff       	call   131db <hlt>
   13216:	eb f9                	jmp    13211 <pannic+0x2f>

00013218 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   13218:	55                   	push   %ebp
   13219:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   1321b:	8b 45 08             	mov    0x8(%ebp),%eax
   1321e:	83 c0 07             	add    $0x7,%eax
   13221:	8d 50 07             	lea    0x7(%eax),%edx
   13224:	85 c0                	test   %eax,%eax
   13226:	0f 48 c2             	cmovs  %edx,%eax
   13229:	c1 f8 03             	sar    $0x3,%eax
}
   1322c:	5d                   	pop    %ebp
   1322d:	c3                   	ret    

0001322e <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   1322e:	55                   	push   %ebp
   1322f:	89 e5                	mov    %esp,%ebp
   13231:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13234:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13238:	75 19                	jne    13253 <bitmap_init+0x25>
   1323a:	68 a0 4c 01 00       	push   $0x14ca0
   1323f:	68 34 4d 01 00       	push   $0x14d34
   13244:	6a 24                	push   $0x24
   13246:	68 b8 4c 01 00       	push   $0x14cb8
   1324b:	e8 92 ff ff ff       	call   131e2 <pannic>
   13250:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   13253:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13257:	75 19                	jne    13272 <bitmap_init+0x44>
   13259:	68 f0 4c 01 00       	push   $0x14cf0
   1325e:	68 34 4d 01 00       	push   $0x14d34
   13263:	6a 25                	push   $0x25
   13265:	68 b8 4c 01 00       	push   $0x14cb8
   1326a:	e8 73 ff ff ff       	call   131e2 <pannic>
   1326f:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   13272:	8b 45 08             	mov    0x8(%ebp),%eax
   13275:	8b 55 10             	mov    0x10(%ebp),%edx
   13278:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1327a:	8b 45 08             	mov    0x8(%ebp),%eax
   1327d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13280:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   13283:	8b 45 08             	mov    0x8(%ebp),%eax
   13286:	8b 00                	mov    (%eax),%eax
   13288:	83 ec 0c             	sub    $0xc,%esp
   1328b:	50                   	push   %eax
   1328c:	e8 87 ff ff ff       	call   13218 <bitmap_byte_count>
   13291:	83 c4 10             	add    $0x10,%esp
   13294:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   13297:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1329b:	74 07                	je     132a4 <bitmap_init+0x76>
   1329d:	ba ff 00 00 00       	mov    $0xff,%edx
   132a2:	eb 05                	jmp    132a9 <bitmap_init+0x7b>
   132a4:	ba 00 00 00 00       	mov    $0x0,%edx
   132a9:	8b 45 08             	mov    0x8(%ebp),%eax
   132ac:	8b 40 04             	mov    0x4(%eax),%eax
   132af:	83 ec 04             	sub    $0x4,%esp
   132b2:	ff 75 f4             	push   -0xc(%ebp)
   132b5:	52                   	push   %edx
   132b6:	50                   	push   %eax
   132b7:	e8 28 04 00 00       	call   136e4 <kernel_memset>
   132bc:	83 c4 10             	add    $0x10,%esp

}
   132bf:	90                   	nop
   132c0:	c9                   	leave  
   132c1:	c3                   	ret    

000132c2 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   132c2:	55                   	push   %ebp
   132c3:	89 e5                	mov    %esp,%ebp
   132c5:	53                   	push   %ebx
   132c6:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   132c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132cd:	75 19                	jne    132e8 <bitmap_get_bit+0x26>
   132cf:	68 a0 4c 01 00       	push   $0x14ca0
   132d4:	68 40 4d 01 00       	push   $0x14d40
   132d9:	6a 39                	push   $0x39
   132db:	68 b8 4c 01 00       	push   $0x14cb8
   132e0:	e8 fd fe ff ff       	call   131e2 <pannic>
   132e5:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   132e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   132ec:	79 19                	jns    13307 <bitmap_get_bit+0x45>
   132ee:	68 04 4d 01 00       	push   $0x14d04
   132f3:	68 40 4d 01 00       	push   $0x14d40
   132f8:	6a 3a                	push   $0x3a
   132fa:	68 b8 4c 01 00       	push   $0x14cb8
   132ff:	e8 de fe ff ff       	call   131e2 <pannic>
   13304:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   13307:	8b 45 08             	mov    0x8(%ebp),%eax
   1330a:	8b 48 04             	mov    0x4(%eax),%ecx
   1330d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13310:	8d 50 07             	lea    0x7(%eax),%edx
   13313:	85 c0                	test   %eax,%eax
   13315:	0f 48 c2             	cmovs  %edx,%eax
   13318:	c1 f8 03             	sar    $0x3,%eax
   1331b:	01 c8                	add    %ecx,%eax
   1331d:	0f b6 00             	movzbl (%eax),%eax
   13320:	89 c3                	mov    %eax,%ebx
   13322:	8b 45 0c             	mov    0xc(%ebp),%eax
   13325:	83 e0 07             	and    $0x7,%eax
   13328:	ba 01 00 00 00       	mov    $0x1,%edx
   1332d:	89 c1                	mov    %eax,%ecx
   1332f:	d3 e2                	shl    %cl,%edx
   13331:	89 d0                	mov    %edx,%eax
   13333:	21 d8                	and    %ebx,%eax
}
   13335:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13338:	c9                   	leave  
   13339:	c3                   	ret    

0001333a <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   1333a:	55                   	push   %ebp
   1333b:	89 e5                	mov    %esp,%ebp
   1333d:	56                   	push   %esi
   1333e:	53                   	push   %ebx
   1333f:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13346:	75 19                	jne    13361 <bitmap_set_bit+0x27>
   13348:	68 a0 4c 01 00       	push   $0x14ca0
   1334d:	68 50 4d 01 00       	push   $0x14d50
   13352:	6a 48                	push   $0x48
   13354:	68 b8 4c 01 00       	push   $0x14cb8
   13359:	e8 84 fe ff ff       	call   131e2 <pannic>
   1335e:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   13361:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13365:	78 06                	js     1336d <bitmap_set_bit+0x33>
   13367:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1336b:	79 19                	jns    13386 <bitmap_set_bit+0x4c>
   1336d:	68 0f 4d 01 00       	push   $0x14d0f
   13372:	68 50 4d 01 00       	push   $0x14d50
   13377:	6a 49                	push   $0x49
   13379:	68 b8 4c 01 00       	push   $0x14cb8
   1337e:	e8 5f fe ff ff       	call   131e2 <pannic>
   13383:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   13386:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1338d:	e9 92 00 00 00       	jmp    13424 <bitmap_set_bit+0xea>
        if (bit) {
   13392:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13396:	74 42                	je     133da <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   13398:	8b 45 08             	mov    0x8(%ebp),%eax
   1339b:	8b 48 04             	mov    0x4(%eax),%ecx
   1339e:	8b 45 0c             	mov    0xc(%ebp),%eax
   133a1:	8d 50 07             	lea    0x7(%eax),%edx
   133a4:	85 c0                	test   %eax,%eax
   133a6:	0f 48 c2             	cmovs  %edx,%eax
   133a9:	c1 f8 03             	sar    $0x3,%eax
   133ac:	89 c2                	mov    %eax,%edx
   133ae:	89 d0                	mov    %edx,%eax
   133b0:	01 c8                	add    %ecx,%eax
   133b2:	0f b6 00             	movzbl (%eax),%eax
   133b5:	89 c6                	mov    %eax,%esi
   133b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   133ba:	83 e0 07             	and    $0x7,%eax
   133bd:	bb 01 00 00 00       	mov    $0x1,%ebx
   133c2:	89 c1                	mov    %eax,%ecx
   133c4:	d3 e3                	shl    %cl,%ebx
   133c6:	89 d8                	mov    %ebx,%eax
   133c8:	89 f1                	mov    %esi,%ecx
   133ca:	09 c1                	or     %eax,%ecx
   133cc:	8b 45 08             	mov    0x8(%ebp),%eax
   133cf:	8b 40 04             	mov    0x4(%eax),%eax
   133d2:	01 d0                	add    %edx,%eax
   133d4:	89 ca                	mov    %ecx,%edx
   133d6:	88 10                	mov    %dl,(%eax)
   133d8:	eb 42                	jmp    1341c <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   133da:	8b 45 08             	mov    0x8(%ebp),%eax
   133dd:	8b 48 04             	mov    0x4(%eax),%ecx
   133e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   133e3:	8d 50 07             	lea    0x7(%eax),%edx
   133e6:	85 c0                	test   %eax,%eax
   133e8:	0f 48 c2             	cmovs  %edx,%eax
   133eb:	c1 f8 03             	sar    $0x3,%eax
   133ee:	89 c2                	mov    %eax,%edx
   133f0:	89 d0                	mov    %edx,%eax
   133f2:	01 c8                	add    %ecx,%eax
   133f4:	0f b6 00             	movzbl (%eax),%eax
   133f7:	89 c6                	mov    %eax,%esi
   133f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   133fc:	83 e0 07             	and    $0x7,%eax
   133ff:	bb 01 00 00 00       	mov    $0x1,%ebx
   13404:	89 c1                	mov    %eax,%ecx
   13406:	d3 e3                	shl    %cl,%ebx
   13408:	89 d8                	mov    %ebx,%eax
   1340a:	f7 d0                	not    %eax
   1340c:	89 f1                	mov    %esi,%ecx
   1340e:	21 c1                	and    %eax,%ecx
   13410:	8b 45 08             	mov    0x8(%ebp),%eax
   13413:	8b 40 04             	mov    0x4(%eax),%eax
   13416:	01 d0                	add    %edx,%eax
   13418:	89 ca                	mov    %ecx,%edx
   1341a:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1341c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13420:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   13424:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13427:	3b 45 10             	cmp    0x10(%ebp),%eax
   1342a:	7d 0e                	jge    1343a <bitmap_set_bit+0x100>
   1342c:	8b 45 08             	mov    0x8(%ebp),%eax
   1342f:	8b 00                	mov    (%eax),%eax
   13431:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13434:	0f 8c 58 ff ff ff    	jl     13392 <bitmap_set_bit+0x58>
        }
    }
}
   1343a:	90                   	nop
   1343b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1343e:	5b                   	pop    %ebx
   1343f:	5e                   	pop    %esi
   13440:	5d                   	pop    %ebp
   13441:	c3                   	ret    

00013442 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   13442:	55                   	push   %ebp
   13443:	89 e5                	mov    %esp,%ebp
   13445:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   13448:	83 ec 08             	sub    $0x8,%esp
   1344b:	ff 75 0c             	push   0xc(%ebp)
   1344e:	ff 75 08             	push   0x8(%ebp)
   13451:	e8 6c fe ff ff       	call   132c2 <bitmap_get_bit>
   13456:	83 c4 10             	add    $0x10,%esp
   13459:	84 c0                	test   %al,%al
   1345b:	0f 95 c0             	setne  %al
   1345e:	0f b6 c0             	movzbl %al,%eax
}
   13461:	c9                   	leave  
   13462:	c3                   	ret    

00013463 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   13463:	55                   	push   %ebp
   13464:	89 e5                	mov    %esp,%ebp
   13466:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13469:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1346d:	75 19                	jne    13488 <bitmap_alloc_nbits+0x25>
   1346f:	68 a0 4c 01 00       	push   $0x14ca0
   13474:	68 60 4d 01 00       	push   $0x14d60
   13479:	6a 68                	push   $0x68
   1347b:	68 b8 4c 01 00       	push   $0x14cb8
   13480:	e8 5d fd ff ff       	call   131e2 <pannic>
   13485:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   13488:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1348c:	79 19                	jns    134a7 <bitmap_alloc_nbits+0x44>
   1348e:	68 28 4d 01 00       	push   $0x14d28
   13493:	68 60 4d 01 00       	push   $0x14d60
   13498:	6a 69                	push   $0x69
   1349a:	68 b8 4c 01 00       	push   $0x14cb8
   1349f:	e8 3e fd ff ff       	call   131e2 <pannic>
   134a4:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   134a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   134ae:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   134b5:	e9 8f 00 00 00       	jmp    13549 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   134ba:	83 ec 08             	sub    $0x8,%esp
   134bd:	ff 75 f4             	push   -0xc(%ebp)
   134c0:	ff 75 08             	push   0x8(%ebp)
   134c3:	e8 fa fd ff ff       	call   132c2 <bitmap_get_bit>
   134c8:	83 c4 10             	add    $0x10,%esp
   134cb:	0f b6 c0             	movzbl %al,%eax
   134ce:	39 45 0c             	cmp    %eax,0xc(%ebp)
   134d1:	74 06                	je     134d9 <bitmap_alloc_nbits+0x76>
            search_index++;
   134d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   134d7:	eb 70                	jmp    13549 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   134d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   134dc:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   134df:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   134e6:	eb 2d                	jmp    13515 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   134e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   134eb:	8d 50 01             	lea    0x1(%eax),%edx
   134ee:	89 55 f4             	mov    %edx,-0xc(%ebp)
   134f1:	83 ec 08             	sub    $0x8,%esp
   134f4:	50                   	push   %eax
   134f5:	ff 75 08             	push   0x8(%ebp)
   134f8:	e8 c5 fd ff ff       	call   132c2 <bitmap_get_bit>
   134fd:	83 c4 10             	add    $0x10,%esp
   13500:	0f b6 c0             	movzbl %al,%eax
   13503:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13506:	74 09                	je     13511 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   13508:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   1350f:	eb 16                	jmp    13527 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13511:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   13515:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13518:	3b 45 10             	cmp    0x10(%ebp),%eax
   1351b:	7d 0a                	jge    13527 <bitmap_alloc_nbits+0xc4>
   1351d:	8b 45 08             	mov    0x8(%ebp),%eax
   13520:	8b 00                	mov    (%eax),%eax
   13522:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13525:	7c c1                	jl     134e8 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   13527:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   1352b:	74 1c                	je     13549 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1352d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13530:	f7 d0                	not    %eax
   13532:	50                   	push   %eax
   13533:	ff 75 10             	push   0x10(%ebp)
   13536:	ff 75 f0             	push   -0x10(%ebp)
   13539:	ff 75 08             	push   0x8(%ebp)
   1353c:	e8 f9 fd ff ff       	call   1333a <bitmap_set_bit>
   13541:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   13544:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13547:	eb 13                	jmp    1355c <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   13549:	8b 45 08             	mov    0x8(%ebp),%eax
   1354c:	8b 00                	mov    (%eax),%eax
   1354e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13551:	0f 8c 63 ff ff ff    	jl     134ba <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   13557:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   1355c:	c9                   	leave  
   1355d:	c3                   	ret    

0001355e <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1355e:	55                   	push   %ebp
   1355f:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   13561:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13565:	74 3b                	je     135a2 <kernel_strcpy+0x44>
   13567:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1356b:	74 35                	je     135a2 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   1356d:	eb 17                	jmp    13586 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   1356f:	8b 55 0c             	mov    0xc(%ebp),%edx
   13572:	8d 42 01             	lea    0x1(%edx),%eax
   13575:	89 45 0c             	mov    %eax,0xc(%ebp)
   13578:	8b 45 08             	mov    0x8(%ebp),%eax
   1357b:	8d 48 01             	lea    0x1(%eax),%ecx
   1357e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13581:	0f b6 12             	movzbl (%edx),%edx
   13584:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   13586:	8b 45 08             	mov    0x8(%ebp),%eax
   13589:	0f b6 00             	movzbl (%eax),%eax
   1358c:	84 c0                	test   %al,%al
   1358e:	74 0a                	je     1359a <kernel_strcpy+0x3c>
   13590:	8b 45 0c             	mov    0xc(%ebp),%eax
   13593:	0f b6 00             	movzbl (%eax),%eax
   13596:	84 c0                	test   %al,%al
   13598:	75 d5                	jne    1356f <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   1359a:	8b 45 08             	mov    0x8(%ebp),%eax
   1359d:	c6 00 00             	movb   $0x0,(%eax)
   135a0:	eb 01                	jmp    135a3 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   135a2:	90                   	nop
    
}
   135a3:	5d                   	pop    %ebp
   135a4:	c3                   	ret    

000135a5 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   135a5:	55                   	push   %ebp
   135a6:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   135a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135ac:	74 45                	je     135f3 <kernel_strncpy+0x4e>
   135ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   135b2:	74 3f                	je     135f3 <kernel_strncpy+0x4e>
   135b4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   135b8:	74 39                	je     135f3 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   135ba:	eb 17                	jmp    135d3 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   135bc:	8b 55 0c             	mov    0xc(%ebp),%edx
   135bf:	8d 42 01             	lea    0x1(%edx),%eax
   135c2:	89 45 0c             	mov    %eax,0xc(%ebp)
   135c5:	8b 45 08             	mov    0x8(%ebp),%eax
   135c8:	8d 48 01             	lea    0x1(%eax),%ecx
   135cb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   135ce:	0f b6 12             	movzbl (%edx),%edx
   135d1:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   135d3:	8b 45 10             	mov    0x10(%ebp),%eax
   135d6:	8d 50 ff             	lea    -0x1(%eax),%edx
   135d9:	89 55 10             	mov    %edx,0x10(%ebp)
   135dc:	83 f8 01             	cmp    $0x1,%eax
   135df:	7e 0a                	jle    135eb <kernel_strncpy+0x46>
   135e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   135e4:	0f b6 00             	movzbl (%eax),%eax
   135e7:	84 c0                	test   %al,%al
   135e9:	75 d1                	jne    135bc <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   135eb:	8b 45 08             	mov    0x8(%ebp),%eax
   135ee:	c6 00 00             	movb   $0x0,(%eax)
   135f1:	eb 01                	jmp    135f4 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   135f3:	90                   	nop
}
   135f4:	5d                   	pop    %ebp
   135f5:	c3                   	ret    

000135f6 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   135f6:	55                   	push   %ebp
   135f7:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   135f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135fd:	74 06                	je     13605 <kernel_strncmp+0xf>
   135ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13603:	75 0f                	jne    13614 <kernel_strncmp+0x1e>
   13605:	b8 00 00 00 00       	mov    $0x0,%eax
   1360a:	eb 52                	jmp    1365e <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   1360c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   13610:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   13614:	8b 45 08             	mov    0x8(%ebp),%eax
   13617:	0f b6 00             	movzbl (%eax),%eax
   1361a:	84 c0                	test   %al,%al
   1361c:	74 24                	je     13642 <kernel_strncmp+0x4c>
   1361e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13621:	0f b6 00             	movzbl (%eax),%eax
   13624:	84 c0                	test   %al,%al
   13626:	74 1a                	je     13642 <kernel_strncmp+0x4c>
   13628:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1362c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13630:	74 10                	je     13642 <kernel_strncmp+0x4c>
   13632:	8b 45 08             	mov    0x8(%ebp),%eax
   13635:	0f b6 10             	movzbl (%eax),%edx
   13638:	8b 45 0c             	mov    0xc(%ebp),%eax
   1363b:	0f b6 00             	movzbl (%eax),%eax
   1363e:	38 c2                	cmp    %al,%dl
   13640:	74 ca                	je     1360c <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   13642:	8b 45 08             	mov    0x8(%ebp),%eax
   13645:	0f b6 10             	movzbl (%eax),%edx
   13648:	8b 45 0c             	mov    0xc(%ebp),%eax
   1364b:	0f b6 00             	movzbl (%eax),%eax
   1364e:	38 c2                	cmp    %al,%dl
   13650:	7e 07                	jle    13659 <kernel_strncmp+0x63>
   13652:	b8 01 00 00 00       	mov    $0x1,%eax
   13657:	eb 05                	jmp    1365e <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   13659:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   1365e:	5d                   	pop    %ebp
   1365f:	c3                   	ret    

00013660 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   13660:	55                   	push   %ebp
   13661:	89 e5                	mov    %esp,%ebp
   13663:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   13666:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1366a:	75 07                	jne    13673 <kernel_strlen+0x13>
   1366c:	b8 00 00 00 00       	mov    $0x0,%eax
   13671:	eb 20                	jmp    13693 <kernel_strlen+0x33>

    int len = 0;
   13673:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   1367a:	eb 04                	jmp    13680 <kernel_strlen+0x20>
   1367c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13680:	8b 45 08             	mov    0x8(%ebp),%eax
   13683:	8d 50 01             	lea    0x1(%eax),%edx
   13686:	89 55 08             	mov    %edx,0x8(%ebp)
   13689:	0f b6 00             	movzbl (%eax),%eax
   1368c:	84 c0                	test   %al,%al
   1368e:	75 ec                	jne    1367c <kernel_strlen+0x1c>

    return len;
   13690:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   13693:	c9                   	leave  
   13694:	c3                   	ret    

00013695 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   13695:	55                   	push   %ebp
   13696:	89 e5                	mov    %esp,%ebp
   13698:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   1369b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1369f:	74 40                	je     136e1 <kernel_memcpy+0x4c>
   136a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   136a5:	74 3a                	je     136e1 <kernel_memcpy+0x4c>
   136a7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   136ab:	74 34                	je     136e1 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   136ad:	8b 45 08             	mov    0x8(%ebp),%eax
   136b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   136b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   136b6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   136b9:	eb 17                	jmp    136d2 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   136bb:	8b 55 f8             	mov    -0x8(%ebp),%edx
   136be:	8d 42 01             	lea    0x1(%edx),%eax
   136c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   136c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   136c7:	8d 48 01             	lea    0x1(%eax),%ecx
   136ca:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   136cd:	0f b6 12             	movzbl (%edx),%edx
   136d0:	88 10                	mov    %dl,(%eax)
    while (size--) {
   136d2:	8b 45 10             	mov    0x10(%ebp),%eax
   136d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   136d8:	89 55 10             	mov    %edx,0x10(%ebp)
   136db:	85 c0                	test   %eax,%eax
   136dd:	75 dc                	jne    136bb <kernel_memcpy+0x26>
   136df:	eb 01                	jmp    136e2 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   136e1:	90                   	nop
    }
    
}
   136e2:	c9                   	leave  
   136e3:	c3                   	ret    

000136e4 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   136e4:	55                   	push   %ebp
   136e5:	89 e5                	mov    %esp,%ebp
   136e7:	83 ec 14             	sub    $0x14,%esp
   136ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   136ed:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   136f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   136f4:	74 2c                	je     13722 <kernel_memset+0x3e>
   136f6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   136fa:	74 26                	je     13722 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   136fc:	8b 45 08             	mov    0x8(%ebp),%eax
   136ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   13702:	eb 0f                	jmp    13713 <kernel_memset+0x2f>
        *(d++) = v;
   13704:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13707:	8d 50 01             	lea    0x1(%eax),%edx
   1370a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1370d:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13711:	88 10                	mov    %dl,(%eax)
    while (size--) {
   13713:	8b 45 10             	mov    0x10(%ebp),%eax
   13716:	8d 50 ff             	lea    -0x1(%eax),%edx
   13719:	89 55 10             	mov    %edx,0x10(%ebp)
   1371c:	85 c0                	test   %eax,%eax
   1371e:	75 e4                	jne    13704 <kernel_memset+0x20>
   13720:	eb 01                	jmp    13723 <kernel_memset+0x3f>
    if (!dest || !size) return;
   13722:	90                   	nop
    }
    
}
   13723:	c9                   	leave  
   13724:	c3                   	ret    

00013725 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   13725:	55                   	push   %ebp
   13726:	89 e5                	mov    %esp,%ebp
   13728:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   1372b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1372f:	74 0c                	je     1373d <kernel_memcmp+0x18>
   13731:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13735:	74 06                	je     1373d <kernel_memcmp+0x18>
   13737:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1373b:	75 07                	jne    13744 <kernel_memcmp+0x1f>
   1373d:	b8 00 00 00 00       	mov    $0x0,%eax
   13742:	eb 63                	jmp    137a7 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   13744:	8b 45 08             	mov    0x8(%ebp),%eax
   13747:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1374a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1374d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   13750:	eb 08                	jmp    1375a <kernel_memcmp+0x35>
        d1++;
   13752:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   13756:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   1375a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1375e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13762:	74 10                	je     13774 <kernel_memcmp+0x4f>
   13764:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13767:	0f b6 10             	movzbl (%eax),%edx
   1376a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1376d:	0f b6 00             	movzbl (%eax),%eax
   13770:	38 c2                	cmp    %al,%dl
   13772:	74 de                	je     13752 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   13774:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13777:	0f b6 10             	movzbl (%eax),%edx
   1377a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1377d:	0f b6 00             	movzbl (%eax),%eax
   13780:	38 c2                	cmp    %al,%dl
   13782:	76 07                	jbe    1378b <kernel_memcmp+0x66>
   13784:	b8 01 00 00 00       	mov    $0x1,%eax
   13789:	eb 1c                	jmp    137a7 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   1378b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1378e:	0f b6 10             	movzbl (%eax),%edx
   13791:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13794:	0f b6 00             	movzbl (%eax),%eax
   13797:	38 c2                	cmp    %al,%dl
   13799:	73 07                	jae    137a2 <kernel_memcmp+0x7d>
   1379b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   137a0:	eb 05                	jmp    137a7 <kernel_memcmp+0x82>
    else return 0;
   137a2:	b8 00 00 00 00       	mov    $0x0,%eax

}
   137a7:	c9                   	leave  
   137a8:	c3                   	ret    

000137a9 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   137a9:	55                   	push   %ebp
   137aa:	89 e5                	mov    %esp,%ebp
   137ac:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   137af:	8d 45 10             	lea    0x10(%ebp),%eax
   137b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   137b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137b8:	83 ec 04             	sub    $0x4,%esp
   137bb:	50                   	push   %eax
   137bc:	ff 75 0c             	push   0xc(%ebp)
   137bf:	ff 75 08             	push   0x8(%ebp)
   137c2:	e8 06 00 00 00       	call   137cd <kernel_vsprintf>
   137c7:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   137ca:	90                   	nop
   137cb:	c9                   	leave  
   137cc:	c3                   	ret    

000137cd <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   137cd:	55                   	push   %ebp
   137ce:	89 e5                	mov    %esp,%ebp
   137d0:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   137d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   137da:	8b 45 08             	mov    0x8(%ebp),%eax
   137dd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   137e0:	e9 68 01 00 00       	jmp    1394d <kernel_vsprintf+0x180>
        switch (state) {
   137e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   137e9:	74 0b                	je     137f6 <kernel_vsprintf+0x29>
   137eb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   137ef:	74 2b                	je     1381c <kernel_vsprintf+0x4f>
   137f1:	e9 56 01 00 00       	jmp    1394c <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   137f6:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   137fa:	75 0c                	jne    13808 <kernel_vsprintf+0x3b>
   137fc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   13803:	e9 45 01 00 00       	jmp    1394d <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   13808:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1380b:	8d 50 01             	lea    0x1(%eax),%edx
   1380e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13811:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   13815:	88 10                	mov    %dl,(%eax)
            break;
   13817:	e9 31 01 00 00       	jmp    1394d <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   1381c:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   13820:	75 47                	jne    13869 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   13822:	8b 45 10             	mov    0x10(%ebp),%eax
   13825:	8d 50 04             	lea    0x4(%eax),%edx
   13828:	89 55 10             	mov    %edx,0x10(%ebp)
   1382b:	8b 00                	mov    (%eax),%eax
   1382d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   13830:	ff 75 ec             	push   -0x14(%ebp)
   13833:	e8 28 fe ff ff       	call   13660 <kernel_strlen>
   13838:	83 c4 04             	add    $0x4,%esp
   1383b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   1383e:	eb 17                	jmp    13857 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   13840:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13843:	8d 42 01             	lea    0x1(%edx),%eax
   13846:	89 45 ec             	mov    %eax,-0x14(%ebp)
   13849:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1384c:	8d 48 01             	lea    0x1(%eax),%ecx
   1384f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   13852:	0f b6 12             	movzbl (%edx),%edx
   13855:	88 10                	mov    %dl,(%eax)
                while (len--) {
   13857:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1385a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1385d:	89 55 e8             	mov    %edx,-0x18(%ebp)
   13860:	85 c0                	test   %eax,%eax
   13862:	75 dc                	jne    13840 <kernel_vsprintf+0x73>
   13864:	e9 da 00 00 00       	jmp    13943 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   13869:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1386d:	75 37                	jne    138a6 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   1386f:	8b 45 10             	mov    0x10(%ebp),%eax
   13872:	8d 50 04             	lea    0x4(%eax),%edx
   13875:	89 55 10             	mov    %edx,0x10(%ebp)
   13878:	8b 00                	mov    (%eax),%eax
   1387a:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   1387d:	83 ec 04             	sub    $0x4,%esp
   13880:	6a 0a                	push   $0xa
   13882:	ff 75 d8             	push   -0x28(%ebp)
   13885:	ff 75 f0             	push   -0x10(%ebp)
   13888:	e8 dd 00 00 00       	call   1396a <kernel_itoa>
   1388d:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   13890:	83 ec 0c             	sub    $0xc,%esp
   13893:	ff 75 f0             	push   -0x10(%ebp)
   13896:	e8 c5 fd ff ff       	call   13660 <kernel_strlen>
   1389b:	83 c4 10             	add    $0x10,%esp
   1389e:	01 45 f0             	add    %eax,-0x10(%ebp)
   138a1:	e9 9d 00 00 00       	jmp    13943 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   138a6:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   138aa:	74 06                	je     138b2 <kernel_vsprintf+0xe5>
   138ac:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   138b0:	75 34                	jne    138e6 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   138b2:	8b 45 10             	mov    0x10(%ebp),%eax
   138b5:	8d 50 04             	lea    0x4(%eax),%edx
   138b8:	89 55 10             	mov    %edx,0x10(%ebp)
   138bb:	8b 00                	mov    (%eax),%eax
   138bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   138c0:	83 ec 04             	sub    $0x4,%esp
   138c3:	6a 10                	push   $0x10
   138c5:	ff 75 dc             	push   -0x24(%ebp)
   138c8:	ff 75 f0             	push   -0x10(%ebp)
   138cb:	e8 9a 00 00 00       	call   1396a <kernel_itoa>
   138d0:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   138d3:	83 ec 0c             	sub    $0xc,%esp
   138d6:	ff 75 f0             	push   -0x10(%ebp)
   138d9:	e8 82 fd ff ff       	call   13660 <kernel_strlen>
   138de:	83 c4 10             	add    $0x10,%esp
   138e1:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   138e4:	eb 5d                	jmp    13943 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   138e6:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   138ea:	75 34                	jne    13920 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   138ec:	8b 45 10             	mov    0x10(%ebp),%eax
   138ef:	8d 50 04             	lea    0x4(%eax),%edx
   138f2:	89 55 10             	mov    %edx,0x10(%ebp)
   138f5:	8b 00                	mov    (%eax),%eax
   138f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   138fa:	83 ec 04             	sub    $0x4,%esp
   138fd:	6a 02                	push   $0x2
   138ff:	ff 75 e0             	push   -0x20(%ebp)
   13902:	ff 75 f0             	push   -0x10(%ebp)
   13905:	e8 60 00 00 00       	call   1396a <kernel_itoa>
   1390a:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1390d:	83 ec 0c             	sub    $0xc,%esp
   13910:	ff 75 f0             	push   -0x10(%ebp)
   13913:	e8 48 fd ff ff       	call   13660 <kernel_strlen>
   13918:	83 c4 10             	add    $0x10,%esp
   1391b:	01 45 f0             	add    %eax,-0x10(%ebp)
   1391e:	eb 23                	jmp    13943 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   13920:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   13924:	75 1d                	jne    13943 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   13926:	8b 45 10             	mov    0x10(%ebp),%eax
   13929:	8d 50 04             	lea    0x4(%eax),%edx
   1392c:	89 55 10             	mov    %edx,0x10(%ebp)
   1392f:	8b 00                	mov    (%eax),%eax
   13931:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   13934:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13937:	8d 50 01             	lea    0x1(%eax),%edx
   1393a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1393d:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13941:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   13943:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1394a:	eb 01                	jmp    1394d <kernel_vsprintf+0x180>
        default:
            break;
   1394c:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   1394d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13950:	8d 50 01             	lea    0x1(%eax),%edx
   13953:	89 55 0c             	mov    %edx,0xc(%ebp)
   13956:	0f b6 00             	movzbl (%eax),%eax
   13959:	88 45 e7             	mov    %al,-0x19(%ebp)
   1395c:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   13960:	0f 85 7f fe ff ff    	jne    137e5 <kernel_vsprintf+0x18>
        }
    }
    

}
   13966:	90                   	nop
   13967:	90                   	nop
   13968:	c9                   	leave  
   13969:	c3                   	ret    

0001396a <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1396a:	55                   	push   %ebp
   1396b:	89 e5                	mov    %esp,%ebp
   1396d:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   13973:	8b 45 08             	mov    0x8(%ebp),%eax
   13976:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   13979:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1397d:	74 1d                	je     1399c <kernel_itoa+0x32>
   1397f:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   13983:	74 17                	je     1399c <kernel_itoa+0x32>
   13985:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13989:	74 11                	je     1399c <kernel_itoa+0x32>
   1398b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1398f:	74 0b                	je     1399c <kernel_itoa+0x32>
        *buf = '\0';
   13991:	8b 45 08             	mov    0x8(%ebp),%eax
   13994:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13997:	e9 a2 00 00 00       	jmp    13a3e <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   1399c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   139a0:	79 11                	jns    139b3 <kernel_itoa+0x49>
        *(p++) = '-';
   139a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   139a5:	8d 50 01             	lea    0x1(%eax),%edx
   139a8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   139ab:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   139ae:	f7 5d 0c             	negl   0xc(%ebp)
   139b1:	eb 1a                	jmp    139cd <kernel_itoa+0x63>
    } else if (num == 0) {
   139b3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   139b7:	75 14                	jne    139cd <kernel_itoa+0x63>
        *(p++) = '0';
   139b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   139bc:	8d 50 01             	lea    0x1(%eax),%edx
   139bf:	89 55 fc             	mov    %edx,-0x4(%ebp)
   139c2:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   139c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   139c8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   139cb:	eb 71                	jmp    13a3e <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   139cd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   139d4:	eb 2e                	jmp    13a04 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   139d6:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   139dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   139df:	99                   	cltd   
   139e0:	f7 7d 10             	idivl  0x10(%ebp)
   139e3:	89 d0                	mov    %edx,%eax
   139e5:	01 c1                	add    %eax,%ecx
   139e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   139ea:	8d 50 01             	lea    0x1(%eax),%edx
   139ed:	89 55 f8             	mov    %edx,-0x8(%ebp)
   139f0:	0f b6 11             	movzbl (%ecx),%edx
   139f3:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   139fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   139fd:	99                   	cltd   
   139fe:	f7 7d 10             	idivl  0x10(%ebp)
   13a01:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   13a04:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13a08:	7f cc                	jg     139d6 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   13a0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a0d:	83 e8 01             	sub    $0x1,%eax
   13a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13a13:	eb 1d                	jmp    13a32 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   13a15:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a18:	8d 50 01             	lea    0x1(%eax),%edx
   13a1b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13a1e:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   13a24:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13a27:	01 ca                	add    %ecx,%edx
   13a29:	0f b6 12             	movzbl (%edx),%edx
   13a2c:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   13a2e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   13a32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13a36:	79 dd                	jns    13a15 <kernel_itoa+0xab>
    }
    *p = '\0';
   13a38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a3b:	c6 00 00             	movb   $0x0,(%eax)
   13a3e:	c9                   	leave  
   13a3f:	c3                   	ret    

00013a40 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13a40:	55                   	push   %ebp
   13a41:	89 e5                	mov    %esp,%ebp
   13a43:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13a46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13a4a:	75 19                	jne    13a65 <list_is_empty+0x25>
   13a4c:	68 84 4d 01 00       	push   $0x14d84
   13a51:	68 68 4e 01 00       	push   $0x14e68
   13a56:	6a 38                	push   $0x38
   13a58:	68 98 4d 01 00       	push   $0x14d98
   13a5d:	e8 80 f7 ff ff       	call   131e2 <pannic>
   13a62:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   13a65:	8b 45 08             	mov    0x8(%ebp),%eax
   13a68:	8b 40 08             	mov    0x8(%eax),%eax
   13a6b:	85 c0                	test   %eax,%eax
   13a6d:	0f 94 c0             	sete   %al
   13a70:	0f b6 c0             	movzbl %al,%eax
}
   13a73:	c9                   	leave  
   13a74:	c3                   	ret    

00013a75 <list_get_size>:
static inline int list_get_size(list_t *list) {
   13a75:	55                   	push   %ebp
   13a76:	89 e5                	mov    %esp,%ebp
   13a78:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13a7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13a7f:	75 19                	jne    13a9a <list_get_size+0x25>
   13a81:	68 84 4d 01 00       	push   $0x14d84
   13a86:	68 a0 4e 01 00       	push   $0x14ea0
   13a8b:	6a 3e                	push   $0x3e
   13a8d:	68 98 4d 01 00       	push   $0x14d98
   13a92:	e8 4b f7 ff ff       	call   131e2 <pannic>
   13a97:	83 c4 10             	add    $0x10,%esp
    return list->size;
   13a9a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a9d:	8b 40 08             	mov    0x8(%eax),%eax
}
   13aa0:	c9                   	leave  
   13aa1:	c3                   	ret    

00013aa2 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   13aa2:	55                   	push   %ebp
   13aa3:	89 e5                	mov    %esp,%ebp
   13aa5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13aa8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13aac:	74 06                	je     13ab4 <list_insert_first+0x12>
   13aae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ab2:	75 19                	jne    13acd <list_insert_first+0x2b>
   13ab4:	68 d8 4d 01 00       	push   $0x14dd8
   13ab9:	68 54 4e 01 00       	push   $0x14e54
   13abe:	6a 0f                	push   $0xf
   13ac0:	68 08 4e 01 00       	push   $0x14e08
   13ac5:	e8 18 f7 ff ff       	call   131e2 <pannic>
   13aca:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   13acd:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad0:	8b 10                	mov    (%eax),%edx
   13ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ad5:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   13ad8:	8b 45 0c             	mov    0xc(%ebp),%eax
   13adb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13ae1:	83 ec 0c             	sub    $0xc,%esp
   13ae4:	ff 75 08             	push   0x8(%ebp)
   13ae7:	e8 54 ff ff ff       	call   13a40 <list_is_empty>
   13aec:	83 c4 10             	add    $0x10,%esp
   13aef:	85 c0                	test   %eax,%eax
   13af1:	74 16                	je     13b09 <list_insert_first+0x67>
        list->first = list->last = node;
   13af3:	8b 45 08             	mov    0x8(%ebp),%eax
   13af6:	8b 55 0c             	mov    0xc(%ebp),%edx
   13af9:	89 50 04             	mov    %edx,0x4(%eax)
   13afc:	8b 45 08             	mov    0x8(%ebp),%eax
   13aff:	8b 50 04             	mov    0x4(%eax),%edx
   13b02:	8b 45 08             	mov    0x8(%ebp),%eax
   13b05:	89 10                	mov    %edx,(%eax)
   13b07:	eb 12                	jmp    13b1b <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   13b09:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0c:	8b 00                	mov    (%eax),%eax
   13b0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b11:	89 10                	mov    %edx,(%eax)
        list->first = node;
   13b13:	8b 45 08             	mov    0x8(%ebp),%eax
   13b16:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b19:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   13b1b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1e:	8b 40 08             	mov    0x8(%eax),%eax
   13b21:	8d 50 01             	lea    0x1(%eax),%edx
   13b24:	8b 45 08             	mov    0x8(%ebp),%eax
   13b27:	89 50 08             	mov    %edx,0x8(%eax)
}
   13b2a:	90                   	nop
   13b2b:	c9                   	leave  
   13b2c:	c3                   	ret    

00013b2d <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   13b2d:	55                   	push   %ebp
   13b2e:	89 e5                	mov    %esp,%ebp
   13b30:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13b33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b37:	74 06                	je     13b3f <list_insert_last+0x12>
   13b39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b3d:	75 19                	jne    13b58 <list_insert_last+0x2b>
   13b3f:	68 d8 4d 01 00       	push   $0x14dd8
   13b44:	68 78 4e 01 00       	push   $0x14e78
   13b49:	6a 1f                	push   $0x1f
   13b4b:	68 08 4e 01 00       	push   $0x14e08
   13b50:	e8 8d f6 ff ff       	call   131e2 <pannic>
   13b55:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   13b58:	8b 45 08             	mov    0x8(%ebp),%eax
   13b5b:	8b 50 04             	mov    0x4(%eax),%edx
   13b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b61:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   13b63:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b66:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   13b6d:	83 ec 0c             	sub    $0xc,%esp
   13b70:	ff 75 08             	push   0x8(%ebp)
   13b73:	e8 c8 fe ff ff       	call   13a40 <list_is_empty>
   13b78:	83 c4 10             	add    $0x10,%esp
   13b7b:	85 c0                	test   %eax,%eax
   13b7d:	74 16                	je     13b95 <list_insert_last+0x68>
        list->first = list->last = node;
   13b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b82:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b85:	89 50 04             	mov    %edx,0x4(%eax)
   13b88:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8b:	8b 50 04             	mov    0x4(%eax),%edx
   13b8e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b91:	89 10                	mov    %edx,(%eax)
   13b93:	eb 15                	jmp    13baa <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   13b95:	8b 45 08             	mov    0x8(%ebp),%eax
   13b98:	8b 40 04             	mov    0x4(%eax),%eax
   13b9b:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b9e:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   13ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba4:	8b 55 0c             	mov    0xc(%ebp),%edx
   13ba7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   13baa:	8b 45 08             	mov    0x8(%ebp),%eax
   13bad:	8b 40 08             	mov    0x8(%eax),%eax
   13bb0:	8d 50 01             	lea    0x1(%eax),%edx
   13bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb6:	89 50 08             	mov    %edx,0x8(%eax)

}
   13bb9:	90                   	nop
   13bba:	c9                   	leave  
   13bbb:	c3                   	ret    

00013bbc <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   13bbc:	55                   	push   %ebp
   13bbd:	89 e5                	mov    %esp,%ebp
   13bbf:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   13bc2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13bc6:	75 19                	jne    13be1 <list_remove_first+0x25>
   13bc8:	68 3e 4e 01 00       	push   $0x14e3e
   13bcd:	68 8c 4e 01 00       	push   $0x14e8c
   13bd2:	6a 31                	push   $0x31
   13bd4:	68 08 4e 01 00       	push   $0x14e08
   13bd9:	e8 04 f6 ff ff       	call   131e2 <pannic>
   13bde:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   13be1:	83 ec 0c             	sub    $0xc,%esp
   13be4:	ff 75 08             	push   0x8(%ebp)
   13be7:	e8 54 fe ff ff       	call   13a40 <list_is_empty>
   13bec:	83 c4 10             	add    $0x10,%esp
   13bef:	85 c0                	test   %eax,%eax
   13bf1:	74 07                	je     13bfa <list_remove_first+0x3e>
        return (list_node_t*)0;
   13bf3:	b8 00 00 00 00       	mov    $0x0,%eax
   13bf8:	eb 71                	jmp    13c6b <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   13bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   13bfd:	8b 00                	mov    (%eax),%eax
   13bff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13c02:	83 ec 0c             	sub    $0xc,%esp
   13c05:	ff 75 08             	push   0x8(%ebp)
   13c08:	e8 68 fe ff ff       	call   13a75 <list_get_size>
   13c0d:	83 c4 10             	add    $0x10,%esp
   13c10:	83 f8 01             	cmp    $0x1,%eax
   13c13:	75 17                	jne    13c2c <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   13c15:	8b 45 08             	mov    0x8(%ebp),%eax
   13c18:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c22:	8b 50 04             	mov    0x4(%eax),%edx
   13c25:	8b 45 08             	mov    0x8(%ebp),%eax
   13c28:	89 10                	mov    %edx,(%eax)
   13c2a:	eb 18                	jmp    13c44 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   13c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c2f:	8b 00                	mov    (%eax),%eax
   13c31:	8b 50 04             	mov    0x4(%eax),%edx
   13c34:	8b 45 08             	mov    0x8(%ebp),%eax
   13c37:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   13c39:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3c:	8b 00                	mov    (%eax),%eax
   13c3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   13c44:	8b 45 08             	mov    0x8(%ebp),%eax
   13c47:	8b 40 08             	mov    0x8(%eax),%eax
   13c4a:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   13c50:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c56:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c60:	8b 50 04             	mov    0x4(%eax),%edx
   13c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c66:	89 10                	mov    %edx,(%eax)
    return ret;
   13c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   13c6b:	c9                   	leave  
   13c6c:	c3                   	ret    

00013c6d <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   13c6d:	55                   	push   %ebp
   13c6e:	89 e5                	mov    %esp,%ebp
   13c70:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   13c73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13c77:	75 19                	jne    13c92 <list_remove_last+0x25>
   13c79:	68 3e 4e 01 00       	push   $0x14e3e
   13c7e:	68 b0 4e 01 00       	push   $0x14eb0
   13c83:	6a 46                	push   $0x46
   13c85:	68 08 4e 01 00       	push   $0x14e08
   13c8a:	e8 53 f5 ff ff       	call   131e2 <pannic>
   13c8f:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   13c92:	83 ec 0c             	sub    $0xc,%esp
   13c95:	ff 75 08             	push   0x8(%ebp)
   13c98:	e8 a3 fd ff ff       	call   13a40 <list_is_empty>
   13c9d:	83 c4 10             	add    $0x10,%esp
   13ca0:	85 c0                	test   %eax,%eax
   13ca2:	74 07                	je     13cab <list_remove_last+0x3e>
        return (list_node_t*)0;
   13ca4:	b8 00 00 00 00       	mov    $0x0,%eax
   13ca9:	eb 75                	jmp    13d20 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   13cab:	8b 45 08             	mov    0x8(%ebp),%eax
   13cae:	8b 40 04             	mov    0x4(%eax),%eax
   13cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13cb4:	83 ec 0c             	sub    $0xc,%esp
   13cb7:	ff 75 08             	push   0x8(%ebp)
   13cba:	e8 b6 fd ff ff       	call   13a75 <list_get_size>
   13cbf:	83 c4 10             	add    $0x10,%esp
   13cc2:	83 f8 01             	cmp    $0x1,%eax
   13cc5:	75 17                	jne    13cde <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   13cc7:	8b 45 08             	mov    0x8(%ebp),%eax
   13cca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd4:	8b 50 04             	mov    0x4(%eax),%edx
   13cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   13cda:	89 10                	mov    %edx,(%eax)
   13cdc:	eb 1b                	jmp    13cf9 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   13cde:	8b 45 08             	mov    0x8(%ebp),%eax
   13ce1:	8b 40 04             	mov    0x4(%eax),%eax
   13ce4:	8b 10                	mov    (%eax),%edx
   13ce6:	8b 45 08             	mov    0x8(%ebp),%eax
   13ce9:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   13cec:	8b 45 08             	mov    0x8(%ebp),%eax
   13cef:	8b 40 04             	mov    0x4(%eax),%eax
   13cf2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   13cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   13cfc:	8b 40 08             	mov    0x8(%eax),%eax
   13cff:	8d 50 ff             	lea    -0x1(%eax),%edx
   13d02:	8b 45 08             	mov    0x8(%ebp),%eax
   13d05:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13d08:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d0b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d15:	8b 50 04             	mov    0x4(%eax),%edx
   13d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d1b:	89 10                	mov    %edx,(%eax)
    return ret;
   13d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13d20:	c9                   	leave  
   13d21:	c3                   	ret    

00013d22 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13d22:	55                   	push   %ebp
   13d23:	89 e5                	mov    %esp,%ebp
   13d25:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13d28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d2c:	74 06                	je     13d34 <list_remove+0x12>
   13d2e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13d32:	75 19                	jne    13d4d <list_remove+0x2b>
   13d34:	68 d8 4d 01 00       	push   $0x14dd8
   13d39:	68 c4 4e 01 00       	push   $0x14ec4
   13d3e:	6a 5b                	push   $0x5b
   13d40:	68 08 4e 01 00       	push   $0x14e08
   13d45:	e8 98 f4 ff ff       	call   131e2 <pannic>
   13d4a:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   13d4d:	83 ec 0c             	sub    $0xc,%esp
   13d50:	ff 75 08             	push   0x8(%ebp)
   13d53:	e8 e8 fc ff ff       	call   13a40 <list_is_empty>
   13d58:	83 c4 10             	add    $0x10,%esp
   13d5b:	85 c0                	test   %eax,%eax
   13d5d:	74 0a                	je     13d69 <list_remove+0x47>
        return (list_node_t*)0;
   13d5f:	b8 00 00 00 00       	mov    $0x0,%eax
   13d64:	e9 80 00 00 00       	jmp    13de9 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   13d69:	8b 45 08             	mov    0x8(%ebp),%eax
   13d6c:	8b 00                	mov    (%eax),%eax
   13d6e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13d71:	75 0b                	jne    13d7e <list_remove+0x5c>
   13d73:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d76:	8b 50 04             	mov    0x4(%eax),%edx
   13d79:	8b 45 08             	mov    0x8(%ebp),%eax
   13d7c:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   13d7e:	8b 45 08             	mov    0x8(%ebp),%eax
   13d81:	8b 40 04             	mov    0x4(%eax),%eax
   13d84:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13d87:	75 0b                	jne    13d94 <list_remove+0x72>
   13d89:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d8c:	8b 10                	mov    (%eax),%edx
   13d8e:	8b 45 08             	mov    0x8(%ebp),%eax
   13d91:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   13d94:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d97:	8b 00                	mov    (%eax),%eax
   13d99:	85 c0                	test   %eax,%eax
   13d9b:	74 0e                	je     13dab <list_remove+0x89>
   13d9d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13da0:	8b 00                	mov    (%eax),%eax
   13da2:	8b 55 0c             	mov    0xc(%ebp),%edx
   13da5:	8b 52 04             	mov    0x4(%edx),%edx
   13da8:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   13dab:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dae:	8b 40 04             	mov    0x4(%eax),%eax
   13db1:	85 c0                	test   %eax,%eax
   13db3:	74 0d                	je     13dc2 <list_remove+0xa0>
   13db5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13db8:	8b 40 04             	mov    0x4(%eax),%eax
   13dbb:	8b 55 0c             	mov    0xc(%ebp),%edx
   13dbe:	8b 12                	mov    (%edx),%edx
   13dc0:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   13dc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dc5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13dcc:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dcf:	8b 50 04             	mov    0x4(%eax),%edx
   13dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dd5:	89 10                	mov    %edx,(%eax)
    list->size--;
   13dd7:	8b 45 08             	mov    0x8(%ebp),%eax
   13dda:	8b 40 08             	mov    0x8(%eax),%eax
   13ddd:	8d 50 ff             	lea    -0x1(%eax),%edx
   13de0:	8b 45 08             	mov    0x8(%ebp),%eax
   13de3:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   13de6:	8b 45 0c             	mov    0xc(%ebp),%eax
   13de9:	c9                   	leave  
   13dea:	c3                   	ret    

00013deb <inb>:
static inline uint8_t inb(uint16_t port) {
   13deb:	55                   	push   %ebp
   13dec:	89 e5                	mov    %esp,%ebp
   13dee:	83 ec 14             	sub    $0x14,%esp
   13df1:	8b 45 08             	mov    0x8(%ebp),%eax
   13df4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13df8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13dfc:	89 c2                	mov    %eax,%edx
   13dfe:	ec                   	in     (%dx),%al
   13dff:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13e02:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13e06:	c9                   	leave  
   13e07:	c3                   	ret    

00013e08 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13e08:	55                   	push   %ebp
   13e09:	89 e5                	mov    %esp,%ebp
   13e0b:	83 ec 08             	sub    $0x8,%esp
   13e0e:	8b 45 08             	mov    0x8(%ebp),%eax
   13e11:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e14:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13e18:	89 d0                	mov    %edx,%eax
   13e1a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13e1d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13e21:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13e25:	ee                   	out    %al,(%dx)
}
   13e26:	90                   	nop
   13e27:	c9                   	leave  
   13e28:	c3                   	ret    

00013e29 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13e29:	55                   	push   %ebp
   13e2a:	89 e5                	mov    %esp,%ebp
   13e2c:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13e2f:	6a 00                	push   $0x0
   13e31:	68 f9 03 00 00       	push   $0x3f9
   13e36:	e8 cd ff ff ff       	call   13e08 <outb>
   13e3b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13e3e:	68 80 00 00 00       	push   $0x80
   13e43:	68 fb 03 00 00       	push   $0x3fb
   13e48:	e8 bb ff ff ff       	call   13e08 <outb>
   13e4d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13e50:	6a 03                	push   $0x3
   13e52:	68 f8 03 00 00       	push   $0x3f8
   13e57:	e8 ac ff ff ff       	call   13e08 <outb>
   13e5c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13e5f:	6a 00                	push   $0x0
   13e61:	68 f9 03 00 00       	push   $0x3f9
   13e66:	e8 9d ff ff ff       	call   13e08 <outb>
   13e6b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   13e6e:	6a 03                	push   $0x3
   13e70:	68 fb 03 00 00       	push   $0x3fb
   13e75:	e8 8e ff ff ff       	call   13e08 <outb>
   13e7a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   13e7d:	68 c7 00 00 00       	push   $0xc7
   13e82:	68 fa 03 00 00       	push   $0x3fa
   13e87:	e8 7c ff ff ff       	call   13e08 <outb>
   13e8c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   13e8f:	6a 0f                	push   $0xf
   13e91:	68 fc 03 00 00       	push   $0x3fc
   13e96:	e8 6d ff ff ff       	call   13e08 <outb>
   13e9b:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   13e9e:	83 ec 0c             	sub    $0xc,%esp
   13ea1:	68 04 7a 03 00       	push   $0x37a04
   13ea6:	e8 22 ec ff ff       	call   12acd <mutex_init>
   13eab:	83 c4 10             	add    $0x10,%esp
}
   13eae:	90                   	nop
   13eaf:	c9                   	leave  
   13eb0:	c3                   	ret    

00013eb1 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   13eb1:	55                   	push   %ebp
   13eb2:	89 e5                	mov    %esp,%ebp
   13eb4:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   13eba:	83 ec 04             	sub    $0x4,%esp
   13ebd:	68 80 00 00 00       	push   $0x80
   13ec2:	6a 00                	push   $0x0
   13ec4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13eca:	50                   	push   %eax
   13ecb:	e8 14 f8 ff ff       	call   136e4 <kernel_memset>
   13ed0:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   13ed3:	8d 45 0c             	lea    0xc(%ebp),%eax
   13ed6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   13edc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13ee2:	83 ec 04             	sub    $0x4,%esp
   13ee5:	50                   	push   %eax
   13ee6:	ff 75 08             	push   0x8(%ebp)
   13ee9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13eef:	50                   	push   %eax
   13ef0:	e8 d8 f8 ff ff       	call   137cd <kernel_vsprintf>
   13ef5:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   13ef8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13efe:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13f01:	83 ec 0c             	sub    $0xc,%esp
   13f04:	68 04 7a 03 00       	push   $0x37a04
   13f09:	e8 0c ec ff ff       	call   12b1a <mutex_lock>
   13f0e:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13f11:	eb 57                	jmp    13f6a <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13f13:	90                   	nop
   13f14:	83 ec 0c             	sub    $0xc,%esp
   13f17:	68 fd 03 00 00       	push   $0x3fd
   13f1c:	e8 ca fe ff ff       	call   13deb <inb>
   13f21:	83 c4 10             	add    $0x10,%esp
   13f24:	0f b6 c0             	movzbl %al,%eax
   13f27:	83 e0 40             	and    $0x40,%eax
   13f2a:	85 c0                	test   %eax,%eax
   13f2c:	74 e6                	je     13f14 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f31:	0f b6 00             	movzbl (%eax),%eax
   13f34:	3c 0a                	cmp    $0xa,%al
   13f36:	75 12                	jne    13f4a <log_printf+0x99>
   13f38:	83 ec 08             	sub    $0x8,%esp
   13f3b:	6a 0d                	push   $0xd
   13f3d:	68 f8 03 00 00       	push   $0x3f8
   13f42:	e8 c1 fe ff ff       	call   13e08 <outb>
   13f47:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   13f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f4d:	8d 50 01             	lea    0x1(%eax),%edx
   13f50:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13f53:	0f b6 00             	movzbl (%eax),%eax
   13f56:	0f b6 c0             	movzbl %al,%eax
   13f59:	83 ec 08             	sub    $0x8,%esp
   13f5c:	50                   	push   %eax
   13f5d:	68 f8 03 00 00       	push   $0x3f8
   13f62:	e8 a1 fe ff ff       	call   13e08 <outb>
   13f67:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f6d:	0f b6 00             	movzbl (%eax),%eax
   13f70:	84 c0                	test   %al,%al
   13f72:	75 9f                	jne    13f13 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   13f74:	83 ec 08             	sub    $0x8,%esp
   13f77:	6a 0d                	push   $0xd
   13f79:	68 f8 03 00 00       	push   $0x3f8
   13f7e:	e8 85 fe ff ff       	call   13e08 <outb>
   13f83:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   13f86:	83 ec 08             	sub    $0x8,%esp
   13f89:	6a 0a                	push   $0xa
   13f8b:	68 f8 03 00 00       	push   $0x3f8
   13f90:	e8 73 fe ff ff       	call   13e08 <outb>
   13f95:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   13f98:	83 ec 0c             	sub    $0xc,%esp
   13f9b:	68 04 7a 03 00       	push   $0x37a04
   13fa0:	e8 06 ec ff ff       	call   12bab <mutex_unlock>
   13fa5:	83 c4 10             	add    $0x10,%esp
   13fa8:	90                   	nop
   13fa9:	c9                   	leave  
   13faa:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 aa 00 00 00       	jmp    800000ba <first_main>

80000010 <sys_call>:
}syscall_args_t;




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
static inline int getpid(void) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000062:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000069:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000006c:	50                   	push   %eax
8000006d:	e8 9e ff ff ff       	call   80000010 <sys_call>
80000072:	83 c4 04             	add    $0x4,%esp
}
80000075:	c9                   	leave  
80000076:	c3                   	ret    

80000077 <print_msg>:

static inline void print_msg(const char *fmt, int arg) {
80000077:	55                   	push   %ebp
80000078:	89 e5                	mov    %esp,%ebp
8000007a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
8000007d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
80000084:	8b 45 08             	mov    0x8(%ebp),%eax
80000087:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
8000008a:	8b 45 0c             	mov    0xc(%ebp),%eax
8000008d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000090:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000093:	50                   	push   %eax
80000094:	e8 77 ff ff ff       	call   80000010 <sys_call>
80000099:	83 c4 04             	add    $0x4,%esp
}
8000009c:	90                   	nop
8000009d:	c9                   	leave  
8000009e:	c3                   	ret    

8000009f <fork>:

static inline int fork (void) {
8000009f:	55                   	push   %ebp
800000a0:	89 e5                	mov    %esp,%ebp
800000a2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000a5:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800000ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000af:	50                   	push   %eax
800000b0:	e8 5b ff ff ff       	call   80000010 <sys_call>
800000b5:	83 c4 04             	add    $0x4,%esp
}
800000b8:	c9                   	leave  
800000b9:	c3                   	ret    

800000ba <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
800000ba:	55                   	push   %ebp
800000bb:	89 e5                	mov    %esp,%ebp
800000bd:	83 ec 10             	sub    $0x10,%esp
    int count = 3;
800000c0:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
    //     //msleep(100);
    // }
    
    int pid;
    int i;
    for (i = 0; i < 1024; ++i) {
800000c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
800000ce:	eb 12                	jmp    800000e2 <first_main+0x28>
        pid = fork();
800000d0:	e8 ca ff ff ff       	call   8000009f <fork>
800000d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (pid == 0)
800000d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
800000dc:	74 0f                	je     800000ed <first_main+0x33>
    for (i = 0; i < 1024; ++i) {
800000de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
800000e2:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%ebp)
800000e9:	7e e5                	jle    800000d0 <first_main+0x16>
800000eb:	eb 01                	jmp    800000ee <first_main+0x34>
            break;
800000ed:	90                   	nop
    }

    print_msg("i = %d", i);
800000ee:	ff 75 fc             	push   -0x4(%ebp)
800000f1:	68 13 01 00 80       	push   $0x80000113
800000f6:	e8 7c ff ff ff       	call   80000077 <print_msg>
800000fb:	83 c4 08             	add    $0x8,%esp
    print_msg("pid = %d", getpid());
800000fe:	e8 59 ff ff ff       	call   8000005c <getpid>
80000103:	50                   	push   %eax
80000104:	68 1a 01 00 80       	push   $0x8000011a
80000109:	e8 69 ff ff ff       	call   80000077 <print_msg>
8000010e:	83 c4 08             	add    $0x8,%esp

    for (;;)
80000111:	eb fe                	jmp    80000111 <first_main+0x57>
80000113:	69 20 3d 20 25 64    	imul   $0x6425203d,(%eax),%esp
80000119:	00 70 69             	add    %dh,0x69(%eax)
8000011c:	64 20 3d 20 25 64 00 	and    %bh,%fs:0x642520
