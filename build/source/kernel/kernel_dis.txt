
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00004574 memsz 0x00004574 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x00017be0 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x0002d000 align 2**12
         filesz 0x00000044 memsz 0x00000044 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036b2  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ec0  000136b4  000136b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00016be0  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   00000044  80000000  0002d000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001ddb  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 000006d7  00000000  00000000  00008e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000052b2  00000000  00000000  000094f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001930  00000000  00000000  0000e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000220  00000000  00000000  000100d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000011e8  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  000114e0  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001480  00000000  00000000  0001150c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	00000017 up2
000102d1 l     F .text	0000000c write_cr3
000102dd l     F .text	0000000b pde_index
000102e8 l     F .text	00000010 pte_index
000102f8 l     F .text	00000027 pde_to_pt_addr
0001031f l     F .text	00000027 pte_to_pg_addr
00010346 l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
00010357 l     F .text	0000005d addr_alloc_init
000103b4 l     F .text	00000067 addr_alloc_page
0001041b l     F .text	00000061 addr_free_page
0001047c l     F .text	00000066 show_mem_info
000104e2 l     F .text	00000037 total_mem_size
000137fc l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
00013810 l     O .rodata	0000000c __func__.1
00010980 l     F .text	00000010 curr_page_dir
0001381c l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010a29 l     F .text	0000003d list_node_init
0001391c l     O .rodata	0000000f __func__.10
00010a66 l     F .text	0000002d list_node_next
0001398c l     O .rodata	0000000f __func__.3
00010a93 l     F .text	00000047 list_init
0001392c l     O .rodata	0000000a __func__.9
00010ada l     F .text	00000035 list_is_empty
0001399c l     O .rodata	0000000e __func__.2
00010b0f l     F .text	0000002d list_get_size
0001397c l     O .rodata	0000000e __func__.4
00010b3c l     F .text	0000002c list_get_first
0001396c l     O .rodata	0000000f __func__.5
00010b68 l     F .text	00000017 up2
00010b7f l     F .text	00000007 hlt
00010b86 l     F .text	0000000c write_cr3
00010b92 l     F .text	0000001a far_jump
00010bac l     F .text	00000017 write_tr
00010bc3 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	00000198 task_manager
00010bd4 l     F .text	0000001f switch_to_tss
00010c0e l     F .text	00000172 tss_init
00013910 l     O .rodata	0000000a __func__.11
000181a0 l     O .bss	00000200 empty_task_stack
00010e67 l     F .text	0000000a empty_task
00013938 l     O .rodata	00000010 __func__.8
00013948 l     O .rodata	0000000f __func__.7
00013958 l     O .rodata	00000011 __func__.6
000139ac l     O .rodata	0000000f __func__.1
000139bc l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
000113d6 l     F .text	00000028 lgdt
000183a0 l     O .bss	00010000 gdt_table
000283a0 l     O .bss	00002000 is_alloc
0002a3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000115e7 l     F .text	00000007 cli
000115ee l     F .text	00000007 sti
000115f5 l     F .text	00000007 hlt
000115fc l     F .text	0000001d inb
00011619 l     F .text	00000021 outb
0001163a l     F .text	00000028 lidt
00011662 l     F .text	00000011 read_cr2
00011673 l     F .text	00000010 read_eflags
00011683 l     F .text	0000000b write_eflags
0002a3c0 l     O .bss	00000800 idt_table
0001168e l     F .text	0000010f print_exception_fram
0001179d l     F .text	0000003e do_default_handler
00011b70 l     F .text	00000047 gate_desc_set
00011bf7 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011fa1 l     F .text	00000021 outb
0002abc0 l     O .bss	00000004 sys_tick
00011fea l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00014030 l     O .rodata	0000000c __func__.1
0001403c l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00012158 l     F .text	00000047 list_init
000140fc l     O .rodata	0000000a __func__.1
0001219f l     F .text	00000035 list_is_empty
00014108 l     O .rodata	0000000e __func__.0
000140f0 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
0001236a l     F .text	00000047 list_init
000141bc l     O .rodata	0000000a __func__.1
000123b1 l     F .text	00000035 list_is_empty
000141c8 l     O .rodata	0000000e __func__.0
000141b0 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
0001253a l     F .text	00000047 list_init
000142dc l     O .rodata	0000000a __func__.3
00012581 l     F .text	0000002d list_get_size
000142e8 l     O .rodata	0000000e __func__.2
000125ae l     F .text	0000002c list_get_first
00014308 l     O .rodata	0000000f __func__.0
000125da l     F .text	0000002d list_get_last
000142f8 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000128e2 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
000143d8 l     O .rodata	0000000c __func__.3
000143e4 l     O .rodata	0000000f __func__.2
000143f4 l     O .rodata	0000000f __func__.1
00014404 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00013147 l     F .text	00000035 list_is_empty
0001450c l     O .rodata	0000000e __func__.5
0001317c l     F .text	0000002d list_get_size
00014544 l     O .rodata	0000000e __func__.2
000144f8 l     O .rodata	00000012 __func__.6
0001451c l     O .rodata	00000011 __func__.4
00014530 l     O .rodata	00000012 __func__.3
00014554 l     O .rodata	00000011 __func__.1
00014568 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
000134f2 l     F .text	0000001d inb
0001350f l     F .text	00000021 outb
0002abc4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
000129c9 g     F .text	00000078 bitmap_get_bit
00012d9c g     F .text	0000004f kernel_memcpy
00011dfd g     F .text	00000098 idt_enable
000110f1 g     F .text	0000000a task_current
00013234 g     F .text	0000008f list_insert_last
00011163 g     F .text	00000061 sys_yield
0001190f g     F .text	0000001c do_handler_segment_not_present
0001102d g     F .text	0000004b task_set_ready
00012b49 g     F .text	00000021 bitmap_is_set
00011f34 g     F .text	0000000b idt_enable_global
00012deb g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00013530 g     F .text	00000088 log_init
0001211b g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012c65 g     F .text	00000047 kernel_strcpy
00011f29 g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
80000010 g     F .first_task	00000028 first_main
00011bb7 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011867 g     F .text	0000001c do_handler_overflow
00011ae4 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011947 g     F .text	000000b1 do_handler_general_protection
00011b54 g     F .text	0000001c do_handler_control_exception
00012511 g     F .text	00000029 sem_count
000117f7 g     F .text	0000001c do_handler_divider
00012a41 g     F .text	00000108 bitmap_set_bit
000118d7 g     F .text	0000001c do_handler_double_fault
000119f8 g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011f3f g     F .text	00000039 pic_send_eoi
00013374 g     F .text	000000b5 list_remove_last
00011023 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012429 g     F .text	0000006b sem_wait
0001093e g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000114bd g     F .text	0000008e gdt_init
00011b38 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011813 g     F .text	0000001c do_handler_debug
0002abe0 g     O .bss	00002000 stack
00011376 g     F .text	00000060 sys_sleep
00010990 g     F .text	00000099 memory_free_page
00012607 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0002d000 g       *ABS*	00000000 s_first_task
00010886 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00011c8a g     F .text	00000173 idt_init
00012494 g     F .text	0000007d sem_notify
000115c0 g     F .text	00000027 gdt_free
0001189f g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011ac8 g     F .text	0000001c do_handler_fpu_error
00010f41 g     F .text	000000e2 task_first_init
00011b00 g     F .text	0000001c do_handler_machine_check
000131a9 g     F .text	0000008b list_insert_first
0001132b g     F .text	0000004b task_set_wakeup
000110c3 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010708 g     F .text	00000085 memory_creat_uvm
00012cac g     F .text	00000051 kernel_strncpy
0002d044 g       *ABS*	00000000 mem_free_start
00012064 g     F .text	00000053 kernel_init
000123e6 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012ed4 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0002d000 g       .first_task	00000000 e_data
00012221 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000118f3 g     F .text	0000001c do_handler_invalid_tss
00011e95 g     F .text	00000094 idt_disable
0002d044 g       *ABS*	00000000 e_first_task
000112cf g     F .text	0000005c task_set_sleep
000105c9 g     F .text	0000009b memory_creat_map
0001182f g     F .text	0000001c do_handler_nmi
000121d4 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
0001291f g     F .text	00000016 bitmap_byte_count
000118bb g     F .text	0000001c do_handler_device_unavailable
00011f78 g     F .text	00000018 idt_enter_protection
00010664 g     F .text	000000a4 create_kernal_table
000111c4 g     F .text	0000010b task_slice_end
000120b7 g     F .text	00000064 move_to_first_task
00012e2c g     F .text	00000084 kernel_memcmp
00011b1c g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000117db g     F .text	0000001c do_handler_unknown
00010960 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00010bf3 g     F .text	0000001b task_switch_from_to
000122b2 g     F .text	000000b8 mutex_unlock
000110fb g     F .text	00000068 task_switch
00012d67 g     F .text	00000035 kernel_strlen
00011078 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000113fe g     F .text	000000bf segment_desc_set
00011883 g     F .text	0000001c do_handler_bound_range
000132c3 g     F .text	000000b1 list_remove_first
00014574 g       .rodata	00000000 e_text
00012cfd g     F .text	0000006a kernel_strncmp
00012935 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012b6a g     F .text	000000fb bitmap_alloc_nbits
00010e71 g     F .text	000000d0 task_manager_init
0001078d g     F .text	000000f9 memory_init
000128e9 g     F .text	00000036 pannic
0001192b g     F .text	0000001c do_handler_stack_segment_fault
0001184b g     F .text	0000001c do_handler_breakpoint
000135b8 g     F .text	000000fa log_printf
00010d80 g     F .text	000000e7 task_init
00012eb0 g     F .text	00000024 kernel_sprintf
0001154b g     F .text	00000075 gdt_alloc_desc
00013071 g     F .text	000000d6 kernel_itoa
00013429 g     F .text	000000c9 list_remove
00011f90 g     F .text	00000011 idt_leave_protection
00010519 g     F .text	000000b0 find_pte
00011fc2 g     F .text	00000028 do_handler_time
0001204c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 59 20 00 00       	call   12064 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc e0 cb 02 00       	mov    $0x2cbe0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 f1 20 00 00       	jmp    1211b <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 a0 17 00 00       	call   117db <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 9f 17 00 00       	call   117f7 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 9e 17 00 00       	call   11813 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 9d 17 00 00       	call   1182f <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 9c 17 00 00       	call   1184b <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 9b 17 00 00       	call   11867 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 9a 17 00 00       	call   11883 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 99 17 00 00       	call   1189f <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 98 17 00 00       	call   118bb <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 99 17 00 00       	call   118d7 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 9a 17 00 00       	call   118f3 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 9b 17 00 00       	call   1190f <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 9c 17 00 00       	call   1192b <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 9d 17 00 00       	call   11947 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 33 18 00 00       	call   119f8 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 e6 18 00 00       	call   11ac8 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 e7 18 00 00       	call   11ae4 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 e6 18 00 00       	call   11b00 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 e5 18 00 00       	call   11b1c <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 e4 18 00 00       	call   11b38 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 e5 18 00 00       	call   11b54 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 36 1d 00 00       	call   11fc2 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102bd:	8b 55 08             	mov    0x8(%ebp),%edx
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	01 d0                	add    %edx,%eax
   102c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cb:	f7 d8                	neg    %eax
   102cd:	21 d0                	and    %edx,%eax
}
   102cf:	5d                   	pop    %ebp
   102d0:	c3                   	ret    

000102d1 <write_cr3>:
/**
 * @brief  向cr3寄存器写入数据
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102d1:	55                   	push   %ebp
   102d2:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	0f 22 d8             	mov    %eax,%cr3
}
   102da:	90                   	nop
   102db:	5d                   	pop    %ebp
   102dc:	c3                   	ret    

000102dd <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102dd:	55                   	push   %ebp
   102de:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102e0:	8b 45 08             	mov    0x8(%ebp),%eax
   102e3:	c1 e8 16             	shr    $0x16,%eax
}
   102e6:	5d                   	pop    %ebp
   102e7:	c3                   	ret    

000102e8 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	c1 e8 0c             	shr    $0xc,%eax
   102f1:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret    

000102f8 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10302:	c0 ea 04             	shr    $0x4,%dl
   10305:	0f b6 ca             	movzbl %dl,%ecx
   10308:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1030c:	c1 e2 04             	shl    $0x4,%edx
   1030f:	09 ca                	or     %ecx,%edx
   10311:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10315:	c1 e0 0c             	shl    $0xc,%eax
   10318:	09 d0                	or     %edx,%eax
   1031a:	c1 e0 0c             	shl    $0xc,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10329:	c0 ea 04             	shr    $0x4,%dl
   1032c:	0f b6 ca             	movzbl %dl,%ecx
   1032f:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10333:	c1 e2 04             	shl    $0x4,%edx
   10336:	09 ca                	or     %ecx,%edx
   10338:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033c:	c1 e0 0c             	shl    $0xc,%eax
   1033f:	09 d0                	or     %edx,%eax
   10341:	c1 e0 0c             	shl    $0xc,%eax
}
   10344:	5d                   	pop    %ebp
   10345:	c3                   	ret    

00010346 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   10346:	55                   	push   %ebp
   10347:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10349:	ff 75 08             	push   0x8(%ebp)
   1034c:	e8 80 ff ff ff       	call   102d1 <write_cr3>
   10351:	83 c4 04             	add    $0x4,%esp
}
   10354:	90                   	nop
   10355:	c9                   	leave  
   10356:	c3                   	ret    

00010357 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
   1035a:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   1035d:	8b 45 08             	mov    0x8(%ebp),%eax
   10360:	83 ec 0c             	sub    $0xc,%esp
   10363:	50                   	push   %eax
   10364:	e8 6b 1e 00 00       	call   121d4 <mutex_init>
   10369:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   1036c:	8b 45 08             	mov    0x8(%ebp),%eax
   1036f:	8b 55 10             	mov    0x10(%ebp),%edx
   10372:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10375:	8b 45 08             	mov    0x8(%ebp),%eax
   10378:	8b 55 14             	mov    0x14(%ebp),%edx
   1037b:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   1037e:	8b 45 08             	mov    0x8(%ebp),%eax
   10381:	8b 55 18             	mov    0x18(%ebp),%edx
   10384:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10387:	8b 45 08             	mov    0x8(%ebp),%eax
   1038a:	8b 40 20             	mov    0x20(%eax),%eax
   1038d:	8b 55 08             	mov    0x8(%ebp),%edx
   10390:	8b 4a 24             	mov    0x24(%edx),%ecx
   10393:	ba 00 00 00 00       	mov    $0x0,%edx
   10398:	f7 f1                	div    %ecx
   1039a:	89 c2                	mov    %eax,%edx
   1039c:	8b 45 08             	mov    0x8(%ebp),%eax
   1039f:	83 c0 14             	add    $0x14,%eax
   103a2:	6a 00                	push   $0x0
   103a4:	52                   	push   %edx
   103a5:	ff 75 0c             	push   0xc(%ebp)
   103a8:	50                   	push   %eax
   103a9:	e8 87 25 00 00       	call   12935 <bitmap_init>
   103ae:	83 c4 10             	add    $0x10,%esp
}
   103b1:	90                   	nop
   103b2:	c9                   	leave  
   103b3:	c3                   	ret    

000103b4 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   103b4:	55                   	push   %ebp
   103b5:	89 e5                	mov    %esp,%ebp
   103b7:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   103ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   103c1:	8b 45 08             	mov    0x8(%ebp),%eax
   103c4:	83 ec 0c             	sub    $0xc,%esp
   103c7:	50                   	push   %eax
   103c8:	e8 54 1e 00 00       	call   12221 <mutex_lock>
   103cd:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103d0:	8b 45 08             	mov    0x8(%ebp),%eax
   103d3:	83 c0 14             	add    $0x14,%eax
   103d6:	83 ec 04             	sub    $0x4,%esp
   103d9:	ff 75 0c             	push   0xc(%ebp)
   103dc:	6a 00                	push   $0x0
   103de:	50                   	push   %eax
   103df:	e8 86 27 00 00       	call   12b6a <bitmap_alloc_nbits>
   103e4:	83 c4 10             	add    $0x10,%esp
   103e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   103ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   103ee:	78 17                	js     10407 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   103f0:	8b 45 08             	mov    0x8(%ebp),%eax
   103f3:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103f6:	8b 45 08             	mov    0x8(%ebp),%eax
   103f9:	8b 50 24             	mov    0x24(%eax),%edx
   103fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103ff:	0f af c2             	imul   %edx,%eax
   10402:	01 c8                	add    %ecx,%eax
   10404:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10407:	8b 45 08             	mov    0x8(%ebp),%eax
   1040a:	83 ec 0c             	sub    $0xc,%esp
   1040d:	50                   	push   %eax
   1040e:	e8 9f 1e 00 00       	call   122b2 <mutex_unlock>
   10413:	83 c4 10             	add    $0x10,%esp

  return addr;
   10416:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10419:	c9                   	leave  
   1041a:	c3                   	ret    

0001041b <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1041b:	55                   	push   %ebp
   1041c:	89 e5                	mov    %esp,%ebp
   1041e:	53                   	push   %ebx
   1041f:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10422:	8b 45 08             	mov    0x8(%ebp),%eax
   10425:	83 ec 0c             	sub    $0xc,%esp
   10428:	50                   	push   %eax
   10429:	e8 f3 1d 00 00       	call   12221 <mutex_lock>
   1042e:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10431:	8b 45 08             	mov    0x8(%ebp),%eax
   10434:	8b 50 1c             	mov    0x1c(%eax),%edx
   10437:	8b 45 0c             	mov    0xc(%ebp),%eax
   1043a:	29 d0                	sub    %edx,%eax
   1043c:	89 c1                	mov    %eax,%ecx
   1043e:	8b 45 08             	mov    0x8(%ebp),%eax
   10441:	8b 58 24             	mov    0x24(%eax),%ebx
   10444:	89 c8                	mov    %ecx,%eax
   10446:	ba 00 00 00 00       	mov    $0x0,%edx
   1044b:	f7 f3                	div    %ebx
   1044d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10450:	8b 45 08             	mov    0x8(%ebp),%eax
   10453:	83 c0 14             	add    $0x14,%eax
   10456:	6a 00                	push   $0x0
   10458:	ff 75 10             	push   0x10(%ebp)
   1045b:	ff 75 f4             	push   -0xc(%ebp)
   1045e:	50                   	push   %eax
   1045f:	e8 dd 25 00 00       	call   12a41 <bitmap_set_bit>
   10464:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	83 ec 0c             	sub    $0xc,%esp
   1046d:	50                   	push   %eax
   1046e:	e8 3f 1e 00 00       	call   122b2 <mutex_unlock>
   10473:	83 c4 10             	add    $0x10,%esp
}
   10476:	90                   	nop
   10477:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1047a:	c9                   	leave  
   1047b:	c3                   	ret    

0001047c <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1047c:	55                   	push   %ebp
   1047d:	89 e5                	mov    %esp,%ebp
   1047f:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10482:	83 ec 0c             	sub    $0xc,%esp
   10485:	68 b4 36 01 00       	push   $0x136b4
   1048a:	e8 29 31 00 00       	call   135b8 <log_printf>
   1048f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10492:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10499:	eb 29                	jmp    104c4 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   1049b:	8b 45 08             	mov    0x8(%ebp),%eax
   1049e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104a1:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104a5:	8b 45 08             	mov    0x8(%ebp),%eax
   104a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104ab:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104ae:	52                   	push   %edx
   104af:	50                   	push   %eax
   104b0:	ff 75 f4             	push   -0xc(%ebp)
   104b3:	68 c0 36 01 00       	push   $0x136c0
   104b8:	e8 fb 30 00 00       	call   135b8 <log_printf>
   104bd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104c4:	8b 45 08             	mov    0x8(%ebp),%eax
   104c7:	8b 40 50             	mov    0x50(%eax),%eax
   104ca:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104cd:	7c cc                	jl     1049b <show_mem_info+0x1f>
    }

    log_printf("");
   104cf:	83 ec 0c             	sub    $0xc,%esp
   104d2:	68 d2 36 01 00       	push   $0x136d2
   104d7:	e8 dc 30 00 00       	call   135b8 <log_printf>
   104dc:	83 c4 10             	add    $0x10,%esp
}
   104df:	90                   	nop
   104e0:	c9                   	leave  
   104e1:	c3                   	ret    

000104e2 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104e2:	55                   	push   %ebp
   104e3:	89 e5                	mov    %esp,%ebp
   104e5:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104ef:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104f6:	eb 11                	jmp    10509 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104fe:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10502:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10505:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10509:	8b 45 08             	mov    0x8(%ebp),%eax
   1050c:	8b 40 50             	mov    0x50(%eax),%eax
   1050f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10512:	7c e4                	jl     104f8 <total_mem_size+0x16>
    }

    return mem_size;
   10514:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10517:	c9                   	leave  
   10518:	c3                   	ret    

00010519 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10519:	55                   	push   %ebp
   1051a:	89 e5                	mov    %esp,%ebp
   1051c:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1051f:	ff 75 0c             	push   0xc(%ebp)
   10522:	e8 b6 fd ff ff       	call   102dd <pde_index>
   10527:	83 c4 04             	add    $0x4,%esp
   1052a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	01 d0                	add    %edx,%eax
   10536:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10539:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1053c:	0f b6 00             	movzbl (%eax),%eax
   1053f:	83 e0 01             	and    $0x1,%eax
   10542:	84 c0                	test   %al,%al
   10544:	74 10                	je     10556 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10546:	ff 75 f0             	push   -0x10(%ebp)
   10549:	e8 aa fd ff ff       	call   102f8 <pde_to_pt_addr>
   1054e:	83 c4 04             	add    $0x4,%esp
   10551:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10554:	eb 57                	jmp    105ad <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10556:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1055a:	75 07                	jne    10563 <find_pte+0x4a>
      return (pte_t*)0;
   1055c:	b8 00 00 00 00       	mov    $0x0,%eax
   10561:	eb 64                	jmp    105c7 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10563:	83 ec 08             	sub    $0x8,%esp
   10566:	6a 01                	push   $0x1
   10568:	68 00 60 01 00       	push   $0x16000
   1056d:	e8 42 fe ff ff       	call   103b4 <addr_alloc_page>
   10572:	83 c4 10             	add    $0x10,%esp
   10575:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10578:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1057c:	75 07                	jne    10585 <find_pte+0x6c>
      return (pte_t*)0;
   1057e:	b8 00 00 00 00       	mov    $0x0,%eax
   10583:	eb 42                	jmp    105c7 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10585:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10588:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1058b:	83 ec 04             	sub    $0x4,%esp
   1058e:	68 00 10 00 00       	push   $0x1000
   10593:	6a 00                	push   $0x0
   10595:	ff 75 f4             	push   -0xc(%ebp)
   10598:	e8 4e 28 00 00       	call   12deb <kernel_memset>
   1059d:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   105a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105a3:	83 c8 07             	or     $0x7,%eax
   105a6:	89 c2                	mov    %eax,%edx
   105a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105ab:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105ad:	83 ec 0c             	sub    $0xc,%esp
   105b0:	ff 75 0c             	push   0xc(%ebp)
   105b3:	e8 30 fd ff ff       	call   102e8 <pte_index>
   105b8:	83 c4 10             	add    $0x10,%esp
   105bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105c5:	01 d0                	add    %edx,%eax

}
   105c7:	c9                   	leave  
   105c8:	c3                   	ret    

000105c9 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105c9:	55                   	push   %ebp
   105ca:	89 e5                	mov    %esp,%ebp
   105cc:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105d6:	eb 7e                	jmp    10656 <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105d8:	83 ec 04             	sub    $0x4,%esp
   105db:	6a 01                	push   $0x1
   105dd:	ff 75 0c             	push   0xc(%ebp)
   105e0:	ff 75 08             	push   0x8(%ebp)
   105e3:	e8 31 ff ff ff       	call   10519 <find_pte>
   105e8:	83 c4 10             	add    $0x10,%esp
   105eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   105ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105f2:	75 17                	jne    1060b <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   105f4:	83 ec 0c             	sub    $0xc,%esp
   105f7:	68 d3 36 01 00       	push   $0x136d3
   105fc:	e8 b7 2f 00 00       	call   135b8 <log_printf>
   10601:	83 c4 10             	add    $0x10,%esp
      return -1;
   10604:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10609:	eb 57                	jmp    10662 <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060e:	0f b6 00             	movzbl (%eax),%eax
   10611:	83 e0 01             	and    $0x1,%eax
   10614:	84 c0                	test   %al,%al
   10616:	74 1c                	je     10634 <memory_creat_map+0x6b>
   10618:	68 ed 36 01 00       	push   $0x136ed
   1061d:	68 fc 37 01 00       	push   $0x137fc
   10622:	68 c1 00 00 00       	push   $0xc1
   10627:	68 00 37 01 00       	push   $0x13700
   1062c:	e8 b8 22 00 00       	call   128e9 <pannic>
   10631:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10634:	8b 45 10             	mov    0x10(%ebp),%eax
   10637:	0b 45 18             	or     0x18(%ebp),%eax
   1063a:	83 c8 01             	or     $0x1,%eax
   1063d:	89 c2                	mov    %eax,%edx
   1063f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10642:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10644:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1064b:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10652:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10656:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10659:	3b 45 14             	cmp    0x14(%ebp),%eax
   1065c:	0f 8c 76 ff ff ff    	jl     105d8 <memory_creat_map+0xf>

  }
 }
   10662:	c9                   	leave  
   10663:	c3                   	ret    

00010664 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   10664:	55                   	push   %ebp
   10665:	89 e5                	mov    %esp,%ebp
   10667:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1066a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10671:	e9 82 00 00 00       	jmp    106f8 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   10676:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10679:	c1 e0 04             	shl    $0x4,%eax
   1067c:	05 00 50 01 00       	add    $0x15000,%eax
   10681:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10684:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10687:	8b 00                	mov    (%eax),%eax
   10689:	68 00 10 00 00       	push   $0x1000
   1068e:	50                   	push   %eax
   1068f:	e8 19 fc ff ff       	call   102ad <down2>
   10694:	83 c4 08             	add    $0x8,%esp
   10697:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   1069a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069d:	8b 40 08             	mov    0x8(%eax),%eax
   106a0:	68 00 10 00 00       	push   $0x1000
   106a5:	50                   	push   %eax
   106a6:	e8 02 fc ff ff       	call   102ad <down2>
   106ab:	83 c4 08             	add    $0x8,%esp
   106ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b4:	8b 40 04             	mov    0x4(%eax),%eax
   106b7:	68 00 10 00 00       	push   $0x1000
   106bc:	50                   	push   %eax
   106bd:	e8 f8 fb ff ff       	call   102ba <up2>
   106c2:	83 c4 08             	add    $0x8,%esp
   106c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106cb:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106ce:	c1 e8 0c             	shr    $0xc,%eax
   106d1:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d7:	8b 40 0c             	mov    0xc(%eax),%eax
   106da:	83 ec 0c             	sub    $0xc,%esp
   106dd:	50                   	push   %eax
   106de:	ff 75 e0             	push   -0x20(%ebp)
   106e1:	ff 75 e8             	push   -0x18(%ebp)
   106e4:	ff 75 ec             	push   -0x14(%ebp)
   106e7:	68 00 70 01 00       	push   $0x17000
   106ec:	e8 d8 fe ff ff       	call   105c9 <memory_creat_map>
   106f1:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   106f4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106fb:	83 f8 03             	cmp    $0x3,%eax
   106fe:	0f 86 72 ff ff ff    	jbe    10676 <create_kernal_table+0x12>

  }
}
   10704:	90                   	nop
   10705:	90                   	nop
   10706:	c9                   	leave  
   10707:	c3                   	ret    

00010708 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10708:	55                   	push   %ebp
   10709:	89 e5                	mov    %esp,%ebp
   1070b:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   1070e:	83 ec 08             	sub    $0x8,%esp
   10711:	6a 01                	push   $0x1
   10713:	68 00 60 01 00       	push   $0x16000
   10718:	e8 97 fc ff ff       	call   103b4 <addr_alloc_page>
   1071d:	83 c4 10             	add    $0x10,%esp
   10720:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10723:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10727:	75 07                	jne    10730 <memory_creat_uvm+0x28>
   10729:	b8 00 00 00 00       	mov    $0x0,%eax
   1072e:	eb 5b                	jmp    1078b <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10730:	83 ec 04             	sub    $0x4,%esp
   10733:	68 00 10 00 00       	push   $0x1000
   10738:	6a 00                	push   $0x0
   1073a:	ff 75 f0             	push   -0x10(%ebp)
   1073d:	e8 a9 26 00 00       	call   12deb <kernel_memset>
   10742:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10745:	83 ec 0c             	sub    $0xc,%esp
   10748:	68 00 00 00 80       	push   $0x80000000
   1074d:	e8 8b fb ff ff       	call   102dd <pde_index>
   10752:	83 c4 10             	add    $0x10,%esp
   10755:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10758:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1075f:	eb 1f                	jmp    10780 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   10761:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10764:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1076b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076e:	01 c2                	add    %eax,%edx
   10770:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10773:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   1077a:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   1077c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10780:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10783:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10786:	77 d9                	ja     10761 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   10788:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1078b:	c9                   	leave  
   1078c:	c3                   	ret    

0001078d <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1078d:	55                   	push   %ebp
   1078e:	89 e5                	mov    %esp,%ebp
   10790:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10793:	83 ec 0c             	sub    $0xc,%esp
   10796:	68 37 37 01 00       	push   $0x13737
   1079b:	e8 18 2e 00 00       	call   135b8 <log_printf>
   107a0:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   107a3:	83 ec 08             	sub    $0x8,%esp
   107a6:	68 44 d0 02 00       	push   $0x2d044
   107ab:	68 43 37 01 00       	push   $0x13743
   107b0:	e8 03 2e 00 00       	call   135b8 <log_printf>
   107b5:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107b8:	83 ec 0c             	sub    $0xc,%esp
   107bb:	ff 75 08             	push   0x8(%ebp)
   107be:	e8 b9 fc ff ff       	call   1047c <show_mem_info>
   107c3:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107c6:	83 ec 0c             	sub    $0xc,%esp
   107c9:	ff 75 08             	push   0x8(%ebp)
   107cc:	e8 11 fd ff ff       	call   104e2 <total_mem_size>
   107d1:	83 c4 10             	add    $0x10,%esp
   107d4:	2d 00 00 10 00       	sub    $0x100000,%eax
   107d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107dc:	83 ec 08             	sub    $0x8,%esp
   107df:	68 00 10 00 00       	push   $0x1000
   107e4:	ff 75 f4             	push   -0xc(%ebp)
   107e7:	e8 c1 fa ff ff       	call   102ad <down2>
   107ec:	83 c4 10             	add    $0x10,%esp
   107ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   107f2:	83 ec 04             	sub    $0x4,%esp
   107f5:	ff 75 f4             	push   -0xc(%ebp)
   107f8:	68 00 00 10 00       	push   $0x100000
   107fd:	68 58 37 01 00       	push   $0x13758
   10802:	e8 b1 2d 00 00       	call   135b8 <log_printf>
   10807:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   1080a:	c7 45 f0 44 d0 02 00 	movl   $0x2d044,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10811:	83 ec 0c             	sub    $0xc,%esp
   10814:	68 00 10 00 00       	push   $0x1000
   10819:	ff 75 f4             	push   -0xc(%ebp)
   1081c:	68 00 00 10 00       	push   $0x100000
   10821:	ff 75 f0             	push   -0x10(%ebp)
   10824:	68 00 60 01 00       	push   $0x16000
   10829:	e8 29 fb ff ff       	call   10357 <addr_alloc_init>
   1082e:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10831:	a1 20 60 01 00       	mov    0x16020,%eax
   10836:	c1 e8 0c             	shr    $0xc,%eax
   10839:	83 ec 0c             	sub    $0xc,%esp
   1083c:	50                   	push   %eax
   1083d:	e8 dd 20 00 00       	call   1291f <bitmap_byte_count>
   10842:	83 c4 10             	add    $0x10,%esp
   10845:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10848:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   1084f:	76 1c                	jbe    1086d <memory_init+0xe0>
   10851:	68 78 37 01 00       	push   $0x13778
   10856:	68 10 38 01 00       	push   $0x13810
   1085b:	68 2e 01 00 00       	push   $0x12e
   10860:	68 00 37 01 00       	push   $0x13700
   10865:	e8 7f 20 00 00       	call   128e9 <pannic>
   1086a:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   1086d:	e8 f2 fd ff ff       	call   10664 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10872:	b8 00 70 01 00       	mov    $0x17000,%eax
   10877:	83 ec 0c             	sub    $0xc,%esp
   1087a:	50                   	push   %eax
   1087b:	e8 c6 fa ff ff       	call   10346 <mmu_set_page_dir>
   10880:	83 c4 10             	add    $0x10,%esp
}
   10883:	90                   	nop
   10884:	c9                   	leave  
   10885:	c3                   	ret    

00010886 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10886:	55                   	push   %ebp
   10887:	89 e5                	mov    %esp,%ebp
   10889:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   1088c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1088f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10892:	68 00 10 00 00       	push   $0x1000
   10897:	ff 75 10             	push   0x10(%ebp)
   1089a:	e8 1b fa ff ff       	call   102ba <up2>
   1089f:	83 c4 08             	add    $0x8,%esp
   108a2:	c1 e8 0c             	shr    $0xc,%eax
   108a5:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   108a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108af:	eb 7a                	jmp    1092b <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108b1:	83 ec 08             	sub    $0x8,%esp
   108b4:	6a 01                	push   $0x1
   108b6:	68 00 60 01 00       	push   $0x16000
   108bb:	e8 f4 fa ff ff       	call   103b4 <addr_alloc_page>
   108c0:	83 c4 10             	add    $0x10,%esp
   108c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   108c6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108ca:	75 17                	jne    108e3 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   108cc:	83 ec 0c             	sub    $0xc,%esp
   108cf:	68 9c 37 01 00       	push   $0x1379c
   108d4:	e8 df 2c 00 00       	call   135b8 <log_printf>
   108d9:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   108dc:	b8 00 00 00 00       	mov    $0x0,%eax
   108e1:	eb 59                	jmp    1093c <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   108e3:	8b 45 08             	mov    0x8(%ebp),%eax
   108e6:	83 ec 0c             	sub    $0xc,%esp
   108e9:	ff 75 14             	push   0x14(%ebp)
   108ec:	6a 01                	push   $0x1
   108ee:	ff 75 e8             	push   -0x18(%ebp)
   108f1:	ff 75 f4             	push   -0xc(%ebp)
   108f4:	50                   	push   %eax
   108f5:	e8 cf fc ff ff       	call   105c9 <memory_creat_map>
   108fa:	83 c4 20             	add    $0x20,%esp
   108fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10900:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10904:	79 1a                	jns    10920 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10906:	83 ec 08             	sub    $0x8,%esp
   10909:	ff 75 e4             	push   -0x1c(%ebp)
   1090c:	68 b8 37 01 00       	push   $0x137b8
   10911:	e8 a2 2c 00 00       	call   135b8 <log_printf>
   10916:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10919:	b8 00 00 00 00       	mov    $0x0,%eax
   1091e:	eb 1c                	jmp    1093c <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10920:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10927:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1092b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1092e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10931:	0f 8c 7a ff ff ff    	jl     108b1 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10937:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1093c:	c9                   	leave  
   1093d:	c3                   	ret    

0001093e <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   1093e:	55                   	push   %ebp
   1093f:	89 e5                	mov    %esp,%ebp
   10941:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10944:	e8 a8 07 00 00       	call   110f1 <task_current>
   10949:	8b 40 64             	mov    0x64(%eax),%eax
   1094c:	ff 75 10             	push   0x10(%ebp)
   1094f:	ff 75 0c             	push   0xc(%ebp)
   10952:	ff 75 08             	push   0x8(%ebp)
   10955:	50                   	push   %eax
   10956:	e8 2b ff ff ff       	call   10886 <memory_alloc_for_page_dir>
   1095b:	83 c4 10             	add    $0x10,%esp
}
   1095e:	c9                   	leave  
   1095f:	c3                   	ret    

00010960 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	6a 01                	push   $0x1
   1096b:	68 00 60 01 00       	push   $0x16000
   10970:	e8 3f fa ff ff       	call   103b4 <addr_alloc_page>
   10975:	83 c4 10             	add    $0x10,%esp
   10978:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   1097b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1097e:	c9                   	leave  
   1097f:	c3                   	ret    

00010980 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10980:	55                   	push   %ebp
   10981:	89 e5                	mov    %esp,%ebp
   10983:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10986:	e8 66 07 00 00       	call   110f1 <task_current>
   1098b:	8b 40 64             	mov    0x64(%eax),%eax
}
   1098e:	c9                   	leave  
   1098f:	c3                   	ret    

00010990 <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10990:	55                   	push   %ebp
   10991:	89 e5                	mov    %esp,%ebp
   10993:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10996:	8b 45 08             	mov    0x8(%ebp),%eax
   10999:	85 c0                	test   %eax,%eax
   1099b:	78 17                	js     109b4 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   1099d:	83 ec 04             	sub    $0x4,%esp
   109a0:	6a 01                	push   $0x1
   109a2:	ff 75 08             	push   0x8(%ebp)
   109a5:	68 00 60 01 00       	push   $0x16000
   109aa:	e8 6c fa ff ff       	call   1041b <addr_free_page>
   109af:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

   109b2:	eb 72                	jmp    10a26 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   109b4:	e8 c7 ff ff ff       	call   10980 <curr_page_dir>
   109b9:	83 ec 04             	sub    $0x4,%esp
   109bc:	6a 00                	push   $0x0
   109be:	ff 75 08             	push   0x8(%ebp)
   109c1:	50                   	push   %eax
   109c2:	e8 52 fb ff ff       	call   10519 <find_pte>
   109c7:	83 c4 10             	add    $0x10,%esp
   109ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   109cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109d1:	74 0d                	je     109e0 <memory_free_page+0x50>
   109d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d6:	0f b6 00             	movzbl (%eax),%eax
   109d9:	83 e0 01             	and    $0x1,%eax
   109dc:	84 c0                	test   %al,%al
   109de:	75 1c                	jne    109fc <memory_free_page+0x6c>
   109e0:	68 d8 37 01 00       	push   $0x137d8
   109e5:	68 1c 38 01 00       	push   $0x1381c
   109ea:	68 8c 01 00 00       	push   $0x18c
   109ef:	68 00 37 01 00       	push   $0x13700
   109f4:	e8 f0 1e 00 00       	call   128e9 <pannic>
   109f9:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   109fc:	83 ec 0c             	sub    $0xc,%esp
   109ff:	ff 75 f4             	push   -0xc(%ebp)
   10a02:	e8 18 f9 ff ff       	call   1031f <pte_to_pg_addr>
   10a07:	83 c4 10             	add    $0x10,%esp
   10a0a:	83 ec 04             	sub    $0x4,%esp
   10a0d:	6a 01                	push   $0x1
   10a0f:	50                   	push   %eax
   10a10:	68 00 60 01 00       	push   $0x16000
   10a15:	e8 01 fa ff ff       	call   1041b <addr_free_page>
   10a1a:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10a26:	90                   	nop
   10a27:	c9                   	leave  
   10a28:	c3                   	ret    

00010a29 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10a29:	55                   	push   %ebp
   10a2a:	89 e5                	mov    %esp,%ebp
   10a2c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a33:	75 19                	jne    10a4e <list_node_init+0x25>
   10a35:	68 30 38 01 00       	push   $0x13830
   10a3a:	68 1c 39 01 00       	push   $0x1391c
   10a3f:	6a 20                	push   $0x20
   10a41:	68 48 38 01 00       	push   $0x13848
   10a46:	e8 9e 1e 00 00       	call   128e9 <pannic>
   10a4b:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10a4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a51:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10a58:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5b:	8b 50 04             	mov    0x4(%eax),%edx
   10a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a61:	89 10                	mov    %edx,(%eax)
}
   10a63:	90                   	nop
   10a64:	c9                   	leave  
   10a65:	c3                   	ret    

00010a66 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10a66:	55                   	push   %ebp
   10a67:	89 e5                	mov    %esp,%ebp
   10a69:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a70:	75 19                	jne    10a8b <list_node_next+0x25>
   10a72:	68 30 38 01 00       	push   $0x13830
   10a77:	68 8c 39 01 00       	push   $0x1398c
   10a7c:	6a 2b                	push   $0x2b
   10a7e:	68 48 38 01 00       	push   $0x13848
   10a83:	e8 61 1e 00 00       	call   128e9 <pannic>
   10a88:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8e:	8b 40 04             	mov    0x4(%eax),%eax
}
   10a91:	c9                   	leave  
   10a92:	c3                   	ret    

00010a93 <list_init>:

static inline void list_init(list_t *list) {
   10a93:	55                   	push   %ebp
   10a94:	89 e5                	mov    %esp,%ebp
   10a96:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10a99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a9d:	75 19                	jne    10ab8 <list_init+0x25>
   10a9f:	68 86 38 01 00       	push   $0x13886
   10aa4:	68 2c 39 01 00       	push   $0x1392c
   10aa9:	6a 31                	push   $0x31
   10aab:	68 48 38 01 00       	push   $0x13848
   10ab0:	e8 34 1e 00 00       	call   128e9 <pannic>
   10ab5:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10ab8:	8b 45 08             	mov    0x8(%ebp),%eax
   10abb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ac2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac5:	8b 50 04             	mov    0x4(%eax),%edx
   10ac8:	8b 45 08             	mov    0x8(%ebp),%eax
   10acb:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10acd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10ad7:	90                   	nop
   10ad8:	c9                   	leave  
   10ad9:	c3                   	ret    

00010ada <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10ada:	55                   	push   %ebp
   10adb:	89 e5                	mov    %esp,%ebp
   10add:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10ae0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ae4:	75 19                	jne    10aff <list_is_empty+0x25>
   10ae6:	68 86 38 01 00       	push   $0x13886
   10aeb:	68 9c 39 01 00       	push   $0x1399c
   10af0:	6a 38                	push   $0x38
   10af2:	68 48 38 01 00       	push   $0x13848
   10af7:	e8 ed 1d 00 00       	call   128e9 <pannic>
   10afc:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10aff:	8b 45 08             	mov    0x8(%ebp),%eax
   10b02:	8b 40 08             	mov    0x8(%eax),%eax
   10b05:	85 c0                	test   %eax,%eax
   10b07:	0f 94 c0             	sete   %al
   10b0a:	0f b6 c0             	movzbl %al,%eax
}
   10b0d:	c9                   	leave  
   10b0e:	c3                   	ret    

00010b0f <list_get_size>:

static inline int list_get_size(list_t *list) {
   10b0f:	55                   	push   %ebp
   10b10:	89 e5                	mov    %esp,%ebp
   10b12:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b15:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b19:	75 19                	jne    10b34 <list_get_size+0x25>
   10b1b:	68 86 38 01 00       	push   $0x13886
   10b20:	68 7c 39 01 00       	push   $0x1397c
   10b25:	6a 3e                	push   $0x3e
   10b27:	68 48 38 01 00       	push   $0x13848
   10b2c:	e8 b8 1d 00 00       	call   128e9 <pannic>
   10b31:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10b34:	8b 45 08             	mov    0x8(%ebp),%eax
   10b37:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b3a:	c9                   	leave  
   10b3b:	c3                   	ret    

00010b3c <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10b3c:	55                   	push   %ebp
   10b3d:	89 e5                	mov    %esp,%ebp
   10b3f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b42:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b46:	75 19                	jne    10b61 <list_get_first+0x25>
   10b48:	68 86 38 01 00       	push   $0x13886
   10b4d:	68 6c 39 01 00       	push   $0x1396c
   10b52:	6a 44                	push   $0x44
   10b54:	68 48 38 01 00       	push   $0x13848
   10b59:	e8 8b 1d 00 00       	call   128e9 <pannic>
   10b5e:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10b61:	8b 45 08             	mov    0x8(%ebp),%eax
   10b64:	8b 00                	mov    (%eax),%eax
}
   10b66:	c9                   	leave  
   10b67:	c3                   	ret    

00010b68 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10b68:	55                   	push   %ebp
   10b69:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10b6b:	8b 55 08             	mov    0x8(%ebp),%edx
   10b6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b71:	01 d0                	add    %edx,%eax
   10b73:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b76:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b79:	f7 d8                	neg    %eax
   10b7b:	21 d0                	and    %edx,%eax
}
   10b7d:	5d                   	pop    %ebp
   10b7e:	c3                   	ret    

00010b7f <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10b7f:	55                   	push   %ebp
   10b80:	89 e5                	mov    %esp,%ebp
   10b82:	f4                   	hlt    
   10b83:	90                   	nop
   10b84:	5d                   	pop    %ebp
   10b85:	c3                   	ret    

00010b86 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10b86:	55                   	push   %ebp
   10b87:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10b89:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8c:	0f 22 d8             	mov    %eax,%cr3
}
   10b8f:	90                   	nop
   10b90:	5d                   	pop    %ebp
   10b91:	c3                   	ret    

00010b92 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10b92:	55                   	push   %ebp
   10b93:	89 e5                	mov    %esp,%ebp
   10b95:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10b98:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b9b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba1:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10ba4:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10ba7:	ff 28                	ljmp   *(%eax)
}
   10ba9:	90                   	nop
   10baa:	c9                   	leave  
   10bab:	c3                   	ret    

00010bac <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
   10baf:	83 ec 04             	sub    $0x4,%esp
   10bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10bb9:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bbd:	0f 00 d8             	ltr    %ax
}
   10bc0:	90                   	nop
   10bc1:	c9                   	leave  
   10bc2:	c3                   	ret    

00010bc3 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10bc3:	55                   	push   %ebp
   10bc4:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10bc6:	ff 75 08             	push   0x8(%ebp)
   10bc9:	e8 b8 ff ff ff       	call   10b86 <write_cr3>
   10bce:	83 c4 04             	add    $0x4,%esp
}
   10bd1:	90                   	nop
   10bd2:	c9                   	leave  
   10bd3:	c3                   	ret    

00010bd4 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10bd4:	55                   	push   %ebp
   10bd5:	89 e5                	mov    %esp,%ebp
   10bd7:	83 ec 04             	sub    $0x4,%esp
   10bda:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10be1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10be5:	6a 00                	push   $0x0
   10be7:	50                   	push   %eax
   10be8:	e8 a5 ff ff ff       	call   10b92 <far_jump>
   10bed:	83 c4 08             	add    $0x8,%esp
}
   10bf0:	90                   	nop
   10bf1:	c9                   	leave  
   10bf2:	c3                   	ret    

00010bf3 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10bf3:	55                   	push   %ebp
   10bf4:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bf9:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10bff:	0f b7 c0             	movzwl %ax,%eax
   10c02:	50                   	push   %eax
   10c03:	e8 cc ff ff ff       	call   10bd4 <switch_to_tss>
   10c08:	83 c4 04             	add    $0x4,%esp
}
   10c0b:	90                   	nop
   10c0c:	c9                   	leave  
   10c0d:	c3                   	ret    

00010c0e <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   10c0e:	55                   	push   %ebp
   10c0f:	89 e5                	mov    %esp,%ebp
   10c11:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10c14:	e8 32 09 00 00       	call   1154b <gdt_alloc_desc>
   10c19:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10c1c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1f:	83 c0 48             	add    $0x48,%eax
   10c22:	89 c2                	mov    %eax,%edx
   10c24:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c27:	0f b7 c0             	movzwl %ax,%eax
   10c2a:	68 89 00 00 00       	push   $0x89
   10c2f:	6a 68                	push   $0x68
   10c31:	52                   	push   %edx
   10c32:	50                   	push   %eax
   10c33:	e8 c6 07 00 00       	call   113fe <segment_desc_set>
   10c38:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3e:	83 c0 48             	add    $0x48,%eax
   10c41:	83 ec 04             	sub    $0x4,%esp
   10c44:	6a 68                	push   $0x68
   10c46:	6a 00                	push   $0x0
   10c48:	50                   	push   %eax
   10c49:	e8 9d 21 00 00       	call   12deb <kernel_memset>
   10c4e:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10c51:	8b 45 08             	mov    0x8(%ebp),%eax
   10c54:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c57:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   10c5d:	8b 45 14             	mov    0x14(%ebp),%eax
   10c60:	83 e0 01             	and    $0x1,%eax
   10c63:	85 c0                	test   %eax,%eax
   10c65:	74 10                	je     10c77 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   10c67:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   10c6e:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c75:	eb 16                	jmp    10c8d <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   10c77:	a1 90 81 01 00       	mov    0x18190,%eax
   10c7c:	83 c8 03             	or     $0x3,%eax
   10c7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   10c82:	a1 94 81 01 00       	mov    0x18194,%eax
   10c87:	83 c8 03             	or     $0x3,%eax
   10c8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c90:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c93:	89 50 68             	mov    %edx,0x68(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   10c96:	8b 45 08             	mov    0x8(%ebp),%eax
   10c99:	8b 55 10             	mov    0x10(%ebp),%edx
   10c9c:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   10ca2:	e8 b9 fc ff ff       	call   10960 <memory_alloc_page>
   10ca7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   10caa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10cae:	0f 84 9b 00 00 00    	je     10d4f <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   10cb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cb7:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc0:	89 50 4c             	mov    %edx,0x4c(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cc9:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   10ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd2:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdc:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cdf:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10ce5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce8:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10cee:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf1:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10cf7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cfa:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d00:	8b 45 08             	mov    0x8(%ebp),%eax
   10d03:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10d09:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0c:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d12:	8b 45 08             	mov    0x8(%ebp),%eax
   10d15:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d21:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10d27:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2a:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10d31:	e8 d2 f9 ff ff       	call   10708 <memory_creat_uvm>
   10d36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   10d39:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d3d:	74 13                	je     10d52 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   10d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d42:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d45:	89 50 64             	mov    %edx,0x64(%eax)
    
    return 0;
   10d48:	b8 00 00 00 00       	mov    $0x0,%eax
   10d4d:	eb 2f                	jmp    10d7e <tss_init+0x170>
        goto tss_init_failed;   
   10d4f:	90                   	nop
   10d50:	eb 01                	jmp    10d53 <tss_init+0x145>
        goto tss_init_failed;
   10d52:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   10d53:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d56:	0f b7 c0             	movzwl %ax,%eax
   10d59:	83 ec 0c             	sub    $0xc,%esp
   10d5c:	50                   	push   %eax
   10d5d:	e8 5e 08 00 00       	call   115c0 <gdt_free>
   10d62:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   10d65:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d69:	74 0e                	je     10d79 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   10d6b:	83 ec 0c             	sub    $0xc,%esp
   10d6e:	ff 75 e8             	push   -0x18(%ebp)
   10d71:	e8 1a fc ff ff       	call   10990 <memory_free_page>
   10d76:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d7e:	c9                   	leave  
   10d7f:	c3                   	ret    

00010d80 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   10d80:	55                   	push   %ebp
   10d81:	89 e5                	mov    %esp,%ebp
   10d83:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10d86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d8a:	75 1c                	jne    10da8 <task_init+0x28>
   10d8c:	68 99 38 01 00       	push   $0x13899
   10d91:	68 10 39 01 00       	push   $0x13910
   10d96:	68 86 00 00 00       	push   $0x86
   10d9b:	68 ac 38 01 00       	push   $0x138ac
   10da0:	e8 44 1b 00 00       	call   128e9 <pannic>
   10da5:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp, flag);
   10da8:	ff 75 18             	push   0x18(%ebp)
   10dab:	ff 75 14             	push   0x14(%ebp)
   10dae:	ff 75 10             	push   0x10(%ebp)
   10db1:	ff 75 08             	push   0x8(%ebp)
   10db4:	e8 55 fe ff ff       	call   10c0e <tss_init>
   10db9:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10dbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbf:	83 c0 10             	add    $0x10,%eax
   10dc2:	83 ec 04             	sub    $0x4,%esp
   10dc5:	6a 20                	push   $0x20
   10dc7:	ff 75 0c             	push   0xc(%ebp)
   10dca:	50                   	push   %eax
   10dcb:	e8 dc 1e 00 00       	call   12cac <kernel_strncpy>
   10dd0:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd6:	83 c0 30             	add    $0x30,%eax
   10dd9:	83 ec 0c             	sub    $0xc,%esp
   10ddc:	50                   	push   %eax
   10ddd:	e8 47 fc ff ff       	call   10a29 <list_node_init>
   10de2:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10de5:	8b 45 08             	mov    0x8(%ebp),%eax
   10de8:	83 c0 38             	add    $0x38,%eax
   10deb:	83 ec 0c             	sub    $0xc,%esp
   10dee:	50                   	push   %eax
   10def:	e8 35 fc ff ff       	call   10a29 <list_node_init>
   10df4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10df7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfa:	83 c0 40             	add    $0x40,%eax
   10dfd:	83 ec 0c             	sub    $0xc,%esp
   10e00:	50                   	push   %eax
   10e01:	e8 23 fc ff ff       	call   10a29 <list_node_init>
   10e06:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10e09:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0c:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10e13:	8b 45 08             	mov    0x8(%ebp),%eax
   10e16:	8b 50 08             	mov    0x8(%eax),%edx
   10e19:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1c:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10e1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e22:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10e29:	e8 4a 11 00 00       	call   11f78 <idt_enter_protection>
   10e2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10e31:	8b 45 08             	mov    0x8(%ebp),%eax
   10e34:	83 c0 38             	add    $0x38,%eax
   10e37:	83 ec 08             	sub    $0x8,%esp
   10e3a:	50                   	push   %eax
   10e3b:	68 10 80 01 00       	push   $0x18010
   10e40:	e8 ef 23 00 00       	call   13234 <list_insert_last>
   10e45:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10e48:	83 ec 0c             	sub    $0xc,%esp
   10e4b:	ff 75 08             	push   0x8(%ebp)
   10e4e:	e8 da 01 00 00       	call   1102d <task_set_ready>
   10e53:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10e56:	83 ec 0c             	sub    $0xc,%esp
   10e59:	ff 75 f4             	push   -0xc(%ebp)
   10e5c:	e8 2f 11 00 00       	call   11f90 <idt_leave_protection>
   10e61:	83 c4 10             	add    $0x10,%esp
}
   10e64:	90                   	nop
   10e65:	c9                   	leave  
   10e66:	c3                   	ret    

00010e67 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10e67:	55                   	push   %ebp
   10e68:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10e6a:	e8 10 fd ff ff       	call   10b7f <hlt>
   10e6f:	eb f9                	jmp    10e6a <empty_task+0x3>

00010e71 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10e71:	55                   	push   %ebp
   10e72:	89 e5                	mov    %esp,%ebp
   10e74:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   10e77:	e8 cf 06 00 00       	call   1154b <gdt_alloc_desc>
   10e7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   10e7f:	e8 c7 06 00 00       	call   1154b <gdt_alloc_desc>
   10e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e8a:	0f b7 c0             	movzwl %ax,%eax
   10e8d:	68 f2 40 00 00       	push   $0x40f2
   10e92:	6a ff                	push   $0xffffffff
   10e94:	6a 00                	push   $0x0
   10e96:	50                   	push   %eax
   10e97:	e8 62 05 00 00       	call   113fe <segment_desc_set>
   10e9c:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10e9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ea2:	0f b7 c0             	movzwl %ax,%eax
   10ea5:	68 fa 40 00 00       	push   $0x40fa
   10eaa:	6a ff                	push   $0xffffffff
   10eac:	6a 00                	push   $0x0
   10eae:	50                   	push   %eax
   10eaf:	e8 4a 05 00 00       	call   113fe <segment_desc_set>
   10eb4:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   10eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10eba:	a3 90 81 01 00       	mov    %eax,0x18190
    task_manager.app_data_selector = data_selector;
   10ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ec2:	a3 94 81 01 00       	mov    %eax,0x18194
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10ec7:	83 ec 0c             	sub    $0xc,%esp
   10eca:	68 04 80 01 00       	push   $0x18004
   10ecf:	e8 bf fb ff ff       	call   10a93 <list_init>
   10ed4:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10ed7:	83 ec 0c             	sub    $0xc,%esp
   10eda:	68 10 80 01 00       	push   $0x18010
   10edf:	e8 af fb ff ff       	call   10a93 <list_init>
   10ee4:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10ee7:	83 ec 0c             	sub    $0xc,%esp
   10eea:	68 1c 80 01 00       	push   $0x1801c
   10eef:	e8 9f fb ff ff       	call   10a93 <list_init>
   10ef4:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10ef7:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10efe:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10f01:	ba a0 83 01 00       	mov    $0x183a0,%edx
   10f06:	b8 67 0e 01 00       	mov    $0x10e67,%eax
   10f0b:	83 ec 0c             	sub    $0xc,%esp
   10f0e:	6a 01                	push   $0x1
   10f10:	52                   	push   %edx
   10f11:	50                   	push   %eax
   10f12:	68 e1 38 01 00       	push   $0x138e1
   10f17:	68 dc 80 01 00       	push   $0x180dc
   10f1c:	e8 5f fe ff ff       	call   10d80 <task_init>
   10f21:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 

    //5.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10f24:	83 ec 0c             	sub    $0xc,%esp
   10f27:	68 dc 80 01 00       	push   $0x180dc
   10f2c:	e8 47 01 00 00       	call   11078 <task_set_unready>
   10f31:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10f34:	c7 05 dc 80 01 00 00 	movl   $0x0,0x180dc
   10f3b:	00 00 00 

  
}
   10f3e:	90                   	nop
   10f3f:	c9                   	leave  
   10f40:	c3                   	ret    

00010f41 <task_first_init>:
 * -------------------
 *      data段
 *      bss段
 * -------------------
 */
void task_first_init(void) {
   10f41:	55                   	push   %ebp
   10f42:	89 e5                	mov    %esp,%ebp
   10f44:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   10f47:	b8 44 d0 02 00       	mov    $0x2d044,%eax
   10f4c:	2d 00 d0 02 00       	sub    $0x2d000,%eax
   10f51:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   10f54:	68 00 10 00 00       	push   $0x1000
   10f59:	ff 75 f4             	push   -0xc(%ebp)
   10f5c:	e8 07 fc ff ff       	call   10b68 <up2>
   10f61:	83 c4 08             	add    $0x8,%esp
   10f64:	05 00 a0 00 00       	add    $0xa000,%eax
   10f69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f6f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10f72:	72 1c                	jb     10f90 <task_first_init+0x4f>
   10f74:	68 ec 38 01 00       	push   $0x138ec
   10f79:	68 38 39 01 00       	push   $0x13938
   10f7e:	68 02 01 00 00       	push   $0x102
   10f83:	68 ac 38 01 00       	push   $0x138ac
   10f88:	e8 5c 19 00 00       	call   128e9 <pannic>
   10f8d:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start = (uint32_t)first_task_entry;
   10f90:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start, task_start + alloc_size, TASK_FLAGS_USER);
   10f97:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9d:	01 d0                	add    %edx,%eax
   10f9f:	83 ec 0c             	sub    $0xc,%esp
   10fa2:	6a 00                	push   $0x0
   10fa4:	50                   	push   %eax
   10fa5:	ff 75 ec             	push   -0x14(%ebp)
   10fa8:	68 03 39 01 00       	push   $0x13903
   10fad:	68 28 80 01 00       	push   $0x18028
   10fb2:	e8 c9 fd ff ff       	call   10d80 <task_init>
   10fb7:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   10fba:	a1 d8 80 01 00       	mov    0x180d8,%eax
   10fbf:	0f b7 c0             	movzwl %ax,%eax
   10fc2:	83 ec 0c             	sub    $0xc,%esp
   10fc5:	50                   	push   %eax
   10fc6:	e8 e1 fb ff ff       	call   10bac <write_tr>
   10fcb:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   10fce:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   10fd5:	80 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10fd8:	a1 8c 80 01 00       	mov    0x1808c,%eax
   10fdd:	83 ec 0c             	sub    $0xc,%esp
   10fe0:	50                   	push   %eax
   10fe1:	e8 dd fb ff ff       	call   10bc3 <mmu_set_page_dir>
   10fe6:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   10fe9:	a1 00 80 01 00       	mov    0x18000,%eax
   10fee:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10ff4:	83 ec 04             	sub    $0x4,%esp
   10ff7:	6a 07                	push   $0x7
   10ff9:	ff 75 f0             	push   -0x10(%ebp)
   10ffc:	ff 75 ec             	push   -0x14(%ebp)
   10fff:	e8 3a f9 ff ff       	call   1093e <memory_alloc_page_for>
   11004:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   11007:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1100a:	83 ec 04             	sub    $0x4,%esp
   1100d:	50                   	push   %eax
   1100e:	68 00 d0 02 00       	push   $0x2d000
   11013:	68 00 00 00 80       	push   $0x80000000
   11018:	e8 7f 1d 00 00       	call   12d9c <kernel_memcpy>
   1101d:	83 c4 10             	add    $0x10,%esp
}
   11020:	90                   	nop
   11021:	c9                   	leave  
   11022:	c3                   	ret    

00011023 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   11023:	55                   	push   %ebp
   11024:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11026:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   1102b:	5d                   	pop    %ebp
   1102c:	c3                   	ret    

0001102d <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   1102d:	55                   	push   %ebp
   1102e:	89 e5                	mov    %esp,%ebp
   11030:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11033:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11037:	75 1c                	jne    11055 <task_set_ready+0x28>
   11039:	68 99 38 01 00       	push   $0x13899
   1103e:	68 48 39 01 00       	push   $0x13948
   11043:	68 2c 01 00 00       	push   $0x12c
   11048:	68 ac 38 01 00       	push   $0x138ac
   1104d:	e8 97 18 00 00       	call   128e9 <pannic>
   11052:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   11055:	8b 45 08             	mov    0x8(%ebp),%eax
   11058:	83 c0 30             	add    $0x30,%eax
   1105b:	83 ec 08             	sub    $0x8,%esp
   1105e:	50                   	push   %eax
   1105f:	68 04 80 01 00       	push   $0x18004
   11064:	e8 cb 21 00 00       	call   13234 <list_insert_last>
   11069:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1106c:	8b 45 08             	mov    0x8(%ebp),%eax
   1106f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11075:	90                   	nop
   11076:	c9                   	leave  
   11077:	c3                   	ret    

00011078 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11078:	55                   	push   %ebp
   11079:	89 e5                	mov    %esp,%ebp
   1107b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1107e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11082:	75 1c                	jne    110a0 <task_set_unready+0x28>
   11084:	68 99 38 01 00       	push   $0x13899
   11089:	68 58 39 01 00       	push   $0x13958
   1108e:	68 3b 01 00 00       	push   $0x13b
   11093:	68 ac 38 01 00       	push   $0x138ac
   11098:	e8 4c 18 00 00       	call   128e9 <pannic>
   1109d:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   110a0:	8b 45 08             	mov    0x8(%ebp),%eax
   110a3:	83 c0 30             	add    $0x30,%eax
   110a6:	83 ec 08             	sub    $0x8,%esp
   110a9:	50                   	push   %eax
   110aa:	68 04 80 01 00       	push   $0x18004
   110af:	e8 75 23 00 00       	call   13429 <list_remove>
   110b4:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   110b7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   110c0:	90                   	nop
   110c1:	c9                   	leave  
   110c2:	c3                   	ret    

000110c3 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   110c3:	55                   	push   %ebp
   110c4:	89 e5                	mov    %esp,%ebp
   110c6:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   110c9:	83 ec 0c             	sub    $0xc,%esp
   110cc:	68 04 80 01 00       	push   $0x18004
   110d1:	e8 66 fa ff ff       	call   10b3c <list_get_first>
   110d6:	83 c4 10             	add    $0x10,%esp
   110d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   110dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   110e0:	74 08                	je     110ea <task_ready_first+0x27>
   110e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110e5:	83 e8 30             	sub    $0x30,%eax
   110e8:	eb 05                	jmp    110ef <task_ready_first+0x2c>
   110ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110ef:	c9                   	leave  
   110f0:	c3                   	ret    

000110f1 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   110f1:	55                   	push   %ebp
   110f2:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   110f4:	a1 00 80 01 00       	mov    0x18000,%eax
}
   110f9:	5d                   	pop    %ebp
   110fa:	c3                   	ret    

000110fb <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   110fb:	55                   	push   %ebp
   110fc:	89 e5                	mov    %esp,%ebp
   110fe:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11101:	e8 72 0e 00 00       	call   11f78 <idt_enter_protection>
   11106:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   11109:	e8 b5 ff ff ff       	call   110c3 <task_ready_first>
   1110e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   11111:	a1 00 80 01 00       	mov    0x18000,%eax
   11116:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11119:	74 37                	je     11152 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   1111b:	a1 00 80 01 00       	mov    0x18000,%eax
   11120:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   11123:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11127:	75 07                	jne    11130 <task_switch+0x35>
            to = &task_manager.empty_task;
   11129:	c7 45 f4 dc 80 01 00 	movl   $0x180dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   11130:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11133:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   11139:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1113c:	a3 00 80 01 00       	mov    %eax,0x18000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   11141:	83 ec 08             	sub    $0x8,%esp
   11144:	ff 75 f4             	push   -0xc(%ebp)
   11147:	ff 75 ec             	push   -0x14(%ebp)
   1114a:	e8 a4 fa ff ff       	call   10bf3 <task_switch_from_to>
   1114f:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   11152:	83 ec 0c             	sub    $0xc,%esp
   11155:	ff 75 f0             	push   -0x10(%ebp)
   11158:	e8 33 0e 00 00       	call   11f90 <idt_leave_protection>
   1115d:	83 c4 10             	add    $0x10,%esp
}
   11160:	90                   	nop
   11161:	c9                   	leave  
   11162:	c3                   	ret    

00011163 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11163:	55                   	push   %ebp
   11164:	89 e5                	mov    %esp,%ebp
   11166:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11169:	e8 0a 0e 00 00       	call   11f78 <idt_enter_protection>
   1116e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11171:	83 ec 0c             	sub    $0xc,%esp
   11174:	68 04 80 01 00       	push   $0x18004
   11179:	e8 91 f9 ff ff       	call   10b0f <list_get_size>
   1117e:	83 c4 10             	add    $0x10,%esp
   11181:	83 f8 01             	cmp    $0x1,%eax
   11184:	7e 29                	jle    111af <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11186:	e8 66 ff ff ff       	call   110f1 <task_current>
   1118b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1118e:	83 ec 0c             	sub    $0xc,%esp
   11191:	ff 75 f0             	push   -0x10(%ebp)
   11194:	e8 df fe ff ff       	call   11078 <task_set_unready>
   11199:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1119c:	83 ec 0c             	sub    $0xc,%esp
   1119f:	ff 75 f0             	push   -0x10(%ebp)
   111a2:	e8 86 fe ff ff       	call   1102d <task_set_ready>
   111a7:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   111aa:	e8 4c ff ff ff       	call   110fb <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   111af:	83 ec 0c             	sub    $0xc,%esp
   111b2:	ff 75 f4             	push   -0xc(%ebp)
   111b5:	e8 d6 0d 00 00       	call   11f90 <idt_leave_protection>
   111ba:	83 c4 10             	add    $0x10,%esp
    return 0;
   111bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111c2:	c9                   	leave  
   111c3:	c3                   	ret    

000111c4 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   111c4:	55                   	push   %ebp
   111c5:	89 e5                	mov    %esp,%ebp
   111c7:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   111ca:	83 ec 0c             	sub    $0xc,%esp
   111cd:	68 1c 80 01 00       	push   $0x1801c
   111d2:	e8 65 f9 ff ff       	call   10b3c <list_get_first>
   111d7:	83 c4 10             	add    $0x10,%esp
   111da:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   111dd:	eb 62                	jmp    11241 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   111df:	83 ec 0c             	sub    $0xc,%esp
   111e2:	ff 75 f4             	push   -0xc(%ebp)
   111e5:	e8 7c f8 ff ff       	call   10a66 <list_node_next>
   111ea:	83 c4 10             	add    $0x10,%esp
   111ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   111f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111f4:	74 08                	je     111fe <task_slice_end+0x3a>
   111f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111f9:	83 e8 30             	sub    $0x30,%eax
   111fc:	eb 05                	jmp    11203 <task_slice_end+0x3f>
   111fe:	b8 00 00 00 00       	mov    $0x0,%eax
   11203:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11206:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11209:	8b 40 0c             	mov    0xc(%eax),%eax
   1120c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1120f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11212:	89 50 0c             	mov    %edx,0xc(%eax)
   11215:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11218:	8b 40 0c             	mov    0xc(%eax),%eax
   1121b:	85 c0                	test   %eax,%eax
   1121d:	75 1c                	jne    1123b <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   1121f:	83 ec 0c             	sub    $0xc,%esp
   11222:	ff 75 e8             	push   -0x18(%ebp)
   11225:	e8 01 01 00 00       	call   1132b <task_set_wakeup>
   1122a:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   1122d:	83 ec 0c             	sub    $0xc,%esp
   11230:	ff 75 e8             	push   -0x18(%ebp)
   11233:	e8 f5 fd ff ff       	call   1102d <task_set_ready>
   11238:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1123b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1123e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11241:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11245:	75 98                	jne    111df <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11247:	e8 a5 fe ff ff       	call   110f1 <task_current>
   1124c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   1124f:	81 7d f0 dc 80 01 00 	cmpl   $0x180dc,-0x10(%ebp)
   11256:	75 23                	jne    1127b <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11258:	83 ec 0c             	sub    $0xc,%esp
   1125b:	68 04 80 01 00       	push   $0x18004
   11260:	e8 75 f8 ff ff       	call   10ada <list_is_empty>
   11265:	83 c4 10             	add    $0x10,%esp
   11268:	85 c0                	test   %eax,%eax
   1126a:	75 60                	jne    112cc <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1126c:	c7 05 dc 80 01 00 00 	movl   $0x0,0x180dc
   11273:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11276:	e8 80 fe ff ff       	call   110fb <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   1127b:	81 7d f0 dc 80 01 00 	cmpl   $0x180dc,-0x10(%ebp)
   11282:	74 49                	je     112cd <task_slice_end+0x109>
   11284:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11287:	8b 40 08             	mov    0x8(%eax),%eax
   1128a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1128d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11290:	89 50 08             	mov    %edx,0x8(%eax)
   11293:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11296:	8b 40 08             	mov    0x8(%eax),%eax
   11299:	85 c0                	test   %eax,%eax
   1129b:	75 30                	jne    112cd <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1129d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112a0:	8b 50 04             	mov    0x4(%eax),%edx
   112a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112a6:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   112a9:	83 ec 0c             	sub    $0xc,%esp
   112ac:	ff 75 f0             	push   -0x10(%ebp)
   112af:	e8 c4 fd ff ff       	call   11078 <task_set_unready>
   112b4:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   112b7:	83 ec 0c             	sub    $0xc,%esp
   112ba:	ff 75 f0             	push   -0x10(%ebp)
   112bd:	e8 6b fd ff ff       	call   1102d <task_set_ready>
   112c2:	83 c4 10             	add    $0x10,%esp
        task_switch();
   112c5:	e8 31 fe ff ff       	call   110fb <task_switch>
   112ca:	eb 01                	jmp    112cd <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   112cc:	90                   	nop
    }
}
   112cd:	c9                   	leave  
   112ce:	c3                   	ret    

000112cf <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   112cf:	55                   	push   %ebp
   112d0:	89 e5                	mov    %esp,%ebp
   112d2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   112d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112d9:	75 1c                	jne    112f7 <task_set_sleep+0x28>
   112db:	68 99 38 01 00       	push   $0x13899
   112e0:	68 ac 39 01 00       	push   $0x139ac
   112e5:	68 c9 01 00 00       	push   $0x1c9
   112ea:	68 ac 38 01 00       	push   $0x138ac
   112ef:	e8 f5 15 00 00       	call   128e9 <pannic>
   112f4:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   112f7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112fb:	74 2b                	je     11328 <task_set_sleep+0x59>

    task->sleep = slice;
   112fd:	8b 55 0c             	mov    0xc(%ebp),%edx
   11300:	8b 45 08             	mov    0x8(%ebp),%eax
   11303:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   11306:	8b 45 08             	mov    0x8(%ebp),%eax
   11309:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   1130f:	8b 45 08             	mov    0x8(%ebp),%eax
   11312:	83 c0 30             	add    $0x30,%eax
   11315:	83 ec 08             	sub    $0x8,%esp
   11318:	50                   	push   %eax
   11319:	68 1c 80 01 00       	push   $0x1801c
   1131e:	e8 11 1f 00 00       	call   13234 <list_insert_last>
   11323:	83 c4 10             	add    $0x10,%esp
   11326:	eb 01                	jmp    11329 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11328:	90                   	nop
}
   11329:	c9                   	leave  
   1132a:	c3                   	ret    

0001132b <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   1132b:	55                   	push   %ebp
   1132c:	89 e5                	mov    %esp,%ebp
   1132e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11331:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11335:	75 1c                	jne    11353 <task_set_wakeup+0x28>
   11337:	68 99 38 01 00       	push   $0x13899
   1133c:	68 bc 39 01 00       	push   $0x139bc
   11341:	68 d7 01 00 00       	push   $0x1d7
   11346:	68 ac 38 01 00       	push   $0x138ac
   1134b:	e8 99 15 00 00       	call   128e9 <pannic>
   11350:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11353:	8b 45 08             	mov    0x8(%ebp),%eax
   11356:	83 c0 30             	add    $0x30,%eax
   11359:	83 ec 08             	sub    $0x8,%esp
   1135c:	50                   	push   %eax
   1135d:	68 1c 80 01 00       	push   $0x1801c
   11362:	e8 c2 20 00 00       	call   13429 <list_remove>
   11367:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1136a:	8b 45 08             	mov    0x8(%ebp),%eax
   1136d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11373:	90                   	nop
   11374:	c9                   	leave  
   11375:	c3                   	ret    

00011376 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11376:	55                   	push   %ebp
   11377:	89 e5                	mov    %esp,%ebp
   11379:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1137c:	e8 f7 0b 00 00       	call   11f78 <idt_enter_protection>
   11381:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11384:	e8 68 fd ff ff       	call   110f1 <task_current>
   11389:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   1138c:	83 ec 0c             	sub    $0xc,%esp
   1138f:	ff 75 f0             	push   -0x10(%ebp)
   11392:	e8 e1 fc ff ff       	call   11078 <task_set_unready>
   11397:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   1139a:	8b 45 08             	mov    0x8(%ebp),%eax
   1139d:	83 c0 09             	add    $0x9,%eax
   113a0:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   113a5:	f7 e2                	mul    %edx
   113a7:	89 d0                	mov    %edx,%eax
   113a9:	c1 e8 03             	shr    $0x3,%eax
   113ac:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   113af:	83 ec 08             	sub    $0x8,%esp
   113b2:	ff 75 ec             	push   -0x14(%ebp)
   113b5:	ff 75 f0             	push   -0x10(%ebp)
   113b8:	e8 12 ff ff ff       	call   112cf <task_set_sleep>
   113bd:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   113c0:	e8 36 fd ff ff       	call   110fb <task_switch>

    idt_leave_protection(state); //TODO:解锁
   113c5:	83 ec 0c             	sub    $0xc,%esp
   113c8:	ff 75 f4             	push   -0xc(%ebp)
   113cb:	e8 c0 0b 00 00       	call   11f90 <idt_leave_protection>
   113d0:	83 c4 10             	add    $0x10,%esp
   113d3:	90                   	nop
   113d4:	c9                   	leave  
   113d5:	c3                   	ret    

000113d6 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   113d6:	55                   	push   %ebp
   113d7:	89 e5                	mov    %esp,%ebp
   113d9:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   113dc:	8b 45 08             	mov    0x8(%ebp),%eax
   113df:	c1 e8 10             	shr    $0x10,%eax
   113e2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   113e6:	8b 45 08             	mov    0x8(%ebp),%eax
   113e9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   113ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   113f0:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   113f3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   113f7:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   113fb:	90                   	nop
   113fc:	c9                   	leave  
   113fd:	c3                   	ret    

000113fe <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   113fe:	55                   	push   %ebp
   113ff:	89 e5                	mov    %esp,%ebp
   11401:	83 ec 18             	sub    $0x18,%esp
   11404:	8b 55 08             	mov    0x8(%ebp),%edx
   11407:	8b 45 14             	mov    0x14(%ebp),%eax
   1140a:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1140e:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11412:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11416:	66 c1 e8 03          	shr    $0x3,%ax
   1141a:	0f b7 c0             	movzwl %ax,%eax
   1141d:	c1 e0 03             	shl    $0x3,%eax
   11420:	05 a0 83 01 00       	add    $0x183a0,%eax
   11425:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   11428:	8b 45 0c             	mov    0xc(%ebp),%eax
   1142b:	89 c2                	mov    %eax,%edx
   1142d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11430:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   11434:	8b 45 0c             	mov    0xc(%ebp),%eax
   11437:	c1 e8 10             	shr    $0x10,%eax
   1143a:	89 c2                	mov    %eax,%edx
   1143c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1143f:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   11442:	8b 45 0c             	mov    0xc(%ebp),%eax
   11445:	c1 e8 18             	shr    $0x18,%eax
   11448:	89 c2                	mov    %eax,%edx
   1144a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1144d:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   11450:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11457:	76 1d                	jbe    11476 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   11459:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1145c:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11460:	66 0d 00 80          	or     $0x8000,%ax
   11464:	89 c2                	mov    %eax,%edx
   11466:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11469:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1146d:	8b 45 10             	mov    0x10(%ebp),%eax
   11470:	c1 e8 0c             	shr    $0xc,%eax
   11473:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   11476:	8b 45 10             	mov    0x10(%ebp),%eax
   11479:	89 c2                	mov    %eax,%edx
   1147b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1147e:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   11481:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11484:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11488:	89 c2                	mov    %eax,%edx
   1148a:	8b 45 10             	mov    0x10(%ebp),%eax
   1148d:	c1 e8 08             	shr    $0x8,%eax
   11490:	66 25 00 0f          	and    $0xf00,%ax
   11494:	09 d0                	or     %edx,%eax
   11496:	89 c2                	mov    %eax,%edx
   11498:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1149b:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1149f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114a2:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114a6:	89 c2                	mov    %eax,%edx
   114a8:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   114ac:	80 e4 f0             	and    $0xf0,%ah
   114af:	09 d0                	or     %edx,%eax
   114b1:	89 c2                	mov    %eax,%edx
   114b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b6:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   114ba:	90                   	nop
   114bb:	c9                   	leave  
   114bc:	c3                   	ret    

000114bd <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   114bd:	55                   	push   %ebp
   114be:	89 e5                	mov    %esp,%ebp
   114c0:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   114c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   114ca:	eb 1c                	jmp    114e8 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   114cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114cf:	c1 e0 03             	shl    $0x3,%eax
   114d2:	0f b7 c0             	movzwl %ax,%eax
   114d5:	6a 00                	push   $0x0
   114d7:	6a 00                	push   $0x0
   114d9:	6a 00                	push   $0x0
   114db:	50                   	push   %eax
   114dc:	e8 1d ff ff ff       	call   113fe <segment_desc_set>
   114e1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   114e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   114e8:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   114ef:	7e db                	jle    114cc <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   114f1:	68 92 40 00 00       	push   $0x4092
   114f6:	6a ff                	push   $0xffffffff
   114f8:	6a 00                	push   $0x0
   114fa:	6a 10                	push   $0x10
   114fc:	e8 fd fe ff ff       	call   113fe <segment_desc_set>
   11501:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   11504:	c6 05 a2 83 02 00 01 	movb   $0x1,0x283a2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   1150b:	68 9a 40 00 00       	push   $0x409a
   11510:	6a ff                	push   $0xffffffff
   11512:	6a 00                	push   $0x0
   11514:	6a 08                	push   $0x8
   11516:	e8 e3 fe ff ff       	call   113fe <segment_desc_set>
   1151b:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   1151e:	c6 05 a1 83 02 00 01 	movb   $0x1,0x283a1
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11525:	b8 a0 83 01 00       	mov    $0x183a0,%eax
   1152a:	68 00 00 01 00       	push   $0x10000
   1152f:	50                   	push   %eax
   11530:	e8 a1 fe ff ff       	call   113d6 <lgdt>
   11535:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   11538:	83 ec 0c             	sub    $0xc,%esp
   1153b:	68 a0 a3 02 00       	push   $0x2a3a0
   11540:	e8 8f 0c 00 00       	call   121d4 <mutex_init>
   11545:	83 c4 10             	add    $0x10,%esp
}
   11548:	90                   	nop
   11549:	c9                   	leave  
   1154a:	c3                   	ret    

0001154b <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   1154b:	55                   	push   %ebp
   1154c:	89 e5                	mov    %esp,%ebp
   1154e:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   11551:	83 ec 0c             	sub    $0xc,%esp
   11554:	68 a0 a3 02 00       	push   $0x2a3a0
   11559:	e8 c3 0c 00 00       	call   12221 <mutex_lock>
   1155e:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11561:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11568:	eb 36                	jmp    115a0 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   1156a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1156d:	05 a0 83 02 00       	add    $0x283a0,%eax
   11572:	0f b6 00             	movzbl (%eax),%eax
   11575:	84 c0                	test   %al,%al
   11577:	75 23                	jne    1159c <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   11579:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1157c:	05 a0 83 02 00       	add    $0x283a0,%eax
   11581:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   11584:	83 ec 0c             	sub    $0xc,%esp
   11587:	68 a0 a3 02 00       	push   $0x2a3a0
   1158c:	e8 21 0d 00 00       	call   122b2 <mutex_unlock>
   11591:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   11594:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11597:	c1 e0 03             	shl    $0x3,%eax
   1159a:	eb 22                	jmp    115be <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1159c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   115a0:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   115a7:	7e c1                	jle    1156a <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   115a9:	83 ec 0c             	sub    $0xc,%esp
   115ac:	68 a0 a3 02 00       	push   $0x2a3a0
   115b1:	e8 fc 0c 00 00       	call   122b2 <mutex_unlock>
   115b6:	83 c4 10             	add    $0x10,%esp
    return -1;
   115b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   115be:	c9                   	leave  
   115bf:	c3                   	ret    

000115c0 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   115c0:	55                   	push   %ebp
   115c1:	89 e5                	mov    %esp,%ebp
   115c3:	83 ec 14             	sub    $0x14,%esp
   115c6:	8b 45 08             	mov    0x8(%ebp),%eax
   115c9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   115cd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   115d1:	66 c1 e8 03          	shr    $0x3,%ax
   115d5:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   115d9:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   115dd:	c6 80 a0 83 02 00 00 	movb   $0x0,0x283a0(%eax)
}
   115e4:	90                   	nop
   115e5:	c9                   	leave  
   115e6:	c3                   	ret    

000115e7 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   115e7:	55                   	push   %ebp
   115e8:	89 e5                	mov    %esp,%ebp
   115ea:	fa                   	cli    
   115eb:	90                   	nop
   115ec:	5d                   	pop    %ebp
   115ed:	c3                   	ret    

000115ee <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   115ee:	55                   	push   %ebp
   115ef:	89 e5                	mov    %esp,%ebp
   115f1:	fb                   	sti    
   115f2:	90                   	nop
   115f3:	5d                   	pop    %ebp
   115f4:	c3                   	ret    

000115f5 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   115f5:	55                   	push   %ebp
   115f6:	89 e5                	mov    %esp,%ebp
   115f8:	f4                   	hlt    
   115f9:	90                   	nop
   115fa:	5d                   	pop    %ebp
   115fb:	c3                   	ret    

000115fc <inb>:
static inline uint8_t inb(uint16_t port) {
   115fc:	55                   	push   %ebp
   115fd:	89 e5                	mov    %esp,%ebp
   115ff:	83 ec 14             	sub    $0x14,%esp
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11609:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1160d:	89 c2                	mov    %eax,%edx
   1160f:	ec                   	in     (%dx),%al
   11610:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11613:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11617:	c9                   	leave  
   11618:	c3                   	ret    

00011619 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11619:	55                   	push   %ebp
   1161a:	89 e5                	mov    %esp,%ebp
   1161c:	83 ec 08             	sub    $0x8,%esp
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	8b 55 0c             	mov    0xc(%ebp),%edx
   11625:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11629:	89 d0                	mov    %edx,%eax
   1162b:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1162e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11632:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11636:	ee                   	out    %al,(%dx)
}
   11637:	90                   	nop
   11638:	c9                   	leave  
   11639:	c3                   	ret    

0001163a <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1163a:	55                   	push   %ebp
   1163b:	89 e5                	mov    %esp,%ebp
   1163d:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   11640:	8b 45 08             	mov    0x8(%ebp),%eax
   11643:	c1 e8 10             	shr    $0x10,%eax
   11646:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   1164a:	8b 45 08             	mov    0x8(%ebp),%eax
   1164d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11651:	8b 45 0c             	mov    0xc(%ebp),%eax
   11654:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11657:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1165b:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1165f:	90                   	nop
   11660:	c9                   	leave  
   11661:	c3                   	ret    

00011662 <read_cr2>:
static inline uint32_t read_cr2(void) {
   11662:	55                   	push   %ebp
   11663:	89 e5                	mov    %esp,%ebp
   11665:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   11668:	0f 20 d0             	mov    %cr2,%eax
   1166b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   1166e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11671:	c9                   	leave  
   11672:	c3                   	ret    

00011673 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   11673:	55                   	push   %ebp
   11674:	89 e5                	mov    %esp,%ebp
   11676:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11679:	9c                   	pushf  
   1167a:	58                   	pop    %eax
   1167b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   1167e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11681:	c9                   	leave  
   11682:	c3                   	ret    

00011683 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   11683:	55                   	push   %ebp
   11684:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   11686:	8b 45 08             	mov    0x8(%ebp),%eax
   11689:	50                   	push   %eax
   1168a:	9d                   	popf   
}
   1168b:	90                   	nop
   1168c:	5d                   	pop    %ebp
   1168d:	c3                   	ret    

0001168e <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   1168e:	55                   	push   %ebp
   1168f:	89 e5                	mov    %esp,%ebp
   11691:	57                   	push   %edi
   11692:	56                   	push   %esi
   11693:	53                   	push   %ebx
   11694:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11697:	8b 45 08             	mov    0x8(%ebp),%eax
   1169a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1169d:	83 e0 03             	and    $0x3,%eax
   116a0:	85 c0                	test   %eax,%eax
   116a2:	74 14                	je     116b8 <print_exception_fram+0x2a>
    ss = frame->ss3;
   116a4:	8b 45 08             	mov    0x8(%ebp),%eax
   116a7:	8b 40 48             	mov    0x48(%eax),%eax
   116aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 40 44             	mov    0x44(%eax),%eax
   116b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
   116b6:	eb 12                	jmp    116ca <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   116b8:	8b 45 08             	mov    0x8(%ebp),%eax
   116bb:	8b 40 0c             	mov    0xc(%eax),%eax
   116be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   116c1:	8b 45 08             	mov    0x8(%ebp),%eax
   116c4:	8b 40 1c             	mov    0x1c(%eax),%eax
   116c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   116ca:	83 ec 0c             	sub    $0xc,%esp
   116cd:	68 cc 39 01 00       	push   $0x139cc
   116d2:	e8 e1 1e 00 00       	call   135b8 <log_printf>
   116d7:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   116da:	8b 45 08             	mov    0x8(%ebp),%eax
   116dd:	8b 50 34             	mov    0x34(%eax),%edx
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	8b 40 30             	mov    0x30(%eax),%eax
   116e6:	83 ec 04             	sub    $0x4,%esp
   116e9:	52                   	push   %edx
   116ea:	50                   	push   %eax
   116eb:	68 0a 3a 01 00       	push   $0x13a0a
   116f0:	e8 c3 1e 00 00       	call   135b8 <log_printf>
   116f5:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   116f8:	8b 45 08             	mov    0x8(%ebp),%eax
   116fb:	8b 30                	mov    (%eax),%esi
   116fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11700:	8b 58 04             	mov    0x4(%eax),%ebx
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	8b 48 08             	mov    0x8(%eax),%ecx
   11709:	8b 45 08             	mov    0x8(%ebp),%eax
   1170c:	8b 50 0c             	mov    0xc(%eax),%edx
   1170f:	8b 45 08             	mov    0x8(%ebp),%eax
   11712:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11715:	83 ec 04             	sub    $0x4,%esp
   11718:	56                   	push   %esi
   11719:	53                   	push   %ebx
   1171a:	51                   	push   %ecx
   1171b:	ff 75 e4             	push   -0x1c(%ebp)
   1171e:	52                   	push   %edx
   1171f:	50                   	push   %eax
   11720:	68 24 3a 01 00       	push   $0x13a24
   11725:	e8 8e 1e 00 00       	call   135b8 <log_printf>
   1172a:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   1172d:	8b 45 08             	mov    0x8(%ebp),%eax
   11730:	8b 40 18             	mov    0x18(%eax),%eax
   11733:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   11736:	8b 45 08             	mov    0x8(%ebp),%eax
   11739:	8b 78 10             	mov    0x10(%eax),%edi
   1173c:	8b 45 08             	mov    0x8(%ebp),%eax
   1173f:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11742:	8b 45 08             	mov    0x8(%ebp),%eax
   11745:	8b 58 24             	mov    0x24(%eax),%ebx
   11748:	8b 45 08             	mov    0x8(%ebp),%eax
   1174b:	8b 48 28             	mov    0x28(%eax),%ecx
   1174e:	8b 45 08             	mov    0x8(%ebp),%eax
   11751:	8b 50 20             	mov    0x20(%eax),%edx
   11754:	8b 45 08             	mov    0x8(%ebp),%eax
   11757:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   1175a:	83 ec 0c             	sub    $0xc,%esp
   1175d:	ff 75 e0             	push   -0x20(%ebp)
   11760:	ff 75 d4             	push   -0x2c(%ebp)
   11763:	57                   	push   %edi
   11764:	56                   	push   %esi
   11765:	53                   	push   %ebx
   11766:	51                   	push   %ecx
   11767:	52                   	push   %edx
   11768:	50                   	push   %eax
   11769:	68 54 3a 01 00       	push   $0x13a54
   1176e:	e8 45 1e 00 00       	call   135b8 <log_printf>
   11773:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11776:	8b 45 08             	mov    0x8(%ebp),%eax
   11779:	8b 50 40             	mov    0x40(%eax),%edx
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	8b 40 38             	mov    0x38(%eax),%eax
   11782:	83 ec 04             	sub    $0x4,%esp
   11785:	52                   	push   %edx
   11786:	50                   	push   %eax
   11787:	68 ac 3a 01 00       	push   $0x13aac
   1178c:	e8 27 1e 00 00       	call   135b8 <log_printf>
   11791:	83 c4 10             	add    $0x10,%esp
}
   11794:	90                   	nop
   11795:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11798:	5b                   	pop    %ebx
   11799:	5e                   	pop    %esi
   1179a:	5f                   	pop    %edi
   1179b:	5d                   	pop    %ebp
   1179c:	c3                   	ret    

0001179d <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1179d:	55                   	push   %ebp
   1179e:	89 e5                	mov    %esp,%ebp
   117a0:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   117a3:	83 ec 0c             	sub    $0xc,%esp
   117a6:	68 c8 3a 01 00       	push   $0x13ac8
   117ab:	e8 08 1e 00 00       	call   135b8 <log_printf>
   117b0:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   117b3:	83 ec 08             	sub    $0x8,%esp
   117b6:	ff 75 0c             	push   0xc(%ebp)
   117b9:	68 fc 3a 01 00       	push   $0x13afc
   117be:	e8 f5 1d 00 00       	call   135b8 <log_printf>
   117c3:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   117c6:	83 ec 0c             	sub    $0xc,%esp
   117c9:	ff 75 08             	push   0x8(%ebp)
   117cc:	e8 bd fe ff ff       	call   1168e <print_exception_fram>
   117d1:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   117d4:	e8 1c fe ff ff       	call   115f5 <hlt>
   117d9:	eb f9                	jmp    117d4 <do_default_handler+0x37>

000117db <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   117db:	55                   	push   %ebp
   117dc:	89 e5                	mov    %esp,%ebp
   117de:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   117e1:	83 ec 08             	sub    $0x8,%esp
   117e4:	68 16 3b 01 00       	push   $0x13b16
   117e9:	ff 75 08             	push   0x8(%ebp)
   117ec:	e8 ac ff ff ff       	call   1179d <do_default_handler>
   117f1:	83 c4 10             	add    $0x10,%esp
}
   117f4:	90                   	nop
   117f5:	c9                   	leave  
   117f6:	c3                   	ret    

000117f7 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   117f7:	55                   	push   %ebp
   117f8:	89 e5                	mov    %esp,%ebp
   117fa:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   117fd:	83 ec 08             	sub    $0x8,%esp
   11800:	68 28 3b 01 00       	push   $0x13b28
   11805:	ff 75 08             	push   0x8(%ebp)
   11808:	e8 90 ff ff ff       	call   1179d <do_default_handler>
   1180d:	83 c4 10             	add    $0x10,%esp
}
   11810:	90                   	nop
   11811:	c9                   	leave  
   11812:	c3                   	ret    

00011813 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11813:	55                   	push   %ebp
   11814:	89 e5                	mov    %esp,%ebp
   11816:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11819:	83 ec 08             	sub    $0x8,%esp
   1181c:	68 3a 3b 01 00       	push   $0x13b3a
   11821:	ff 75 08             	push   0x8(%ebp)
   11824:	e8 74 ff ff ff       	call   1179d <do_default_handler>
   11829:	83 c4 10             	add    $0x10,%esp
}
   1182c:	90                   	nop
   1182d:	c9                   	leave  
   1182e:	c3                   	ret    

0001182f <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   1182f:	55                   	push   %ebp
   11830:	89 e5                	mov    %esp,%ebp
   11832:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   11835:	83 ec 08             	sub    $0x8,%esp
   11838:	68 4a 3b 01 00       	push   $0x13b4a
   1183d:	ff 75 08             	push   0x8(%ebp)
   11840:	e8 58 ff ff ff       	call   1179d <do_default_handler>
   11845:	83 c4 10             	add    $0x10,%esp
}
   11848:	90                   	nop
   11849:	c9                   	leave  
   1184a:	c3                   	ret    

0001184b <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   1184b:	55                   	push   %ebp
   1184c:	89 e5                	mov    %esp,%ebp
   1184e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11851:	83 ec 08             	sub    $0x8,%esp
   11854:	68 58 3b 01 00       	push   $0x13b58
   11859:	ff 75 08             	push   0x8(%ebp)
   1185c:	e8 3c ff ff ff       	call   1179d <do_default_handler>
   11861:	83 c4 10             	add    $0x10,%esp
}
   11864:	90                   	nop
   11865:	c9                   	leave  
   11866:	c3                   	ret    

00011867 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11867:	55                   	push   %ebp
   11868:	89 e5                	mov    %esp,%ebp
   1186a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1186d:	83 ec 08             	sub    $0x8,%esp
   11870:	68 6d 3b 01 00       	push   $0x13b6d
   11875:	ff 75 08             	push   0x8(%ebp)
   11878:	e8 20 ff ff ff       	call   1179d <do_default_handler>
   1187d:	83 c4 10             	add    $0x10,%esp
}
   11880:	90                   	nop
   11881:	c9                   	leave  
   11882:	c3                   	ret    

00011883 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11883:	55                   	push   %ebp
   11884:	89 e5                	mov    %esp,%ebp
   11886:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11889:	83 ec 08             	sub    $0x8,%esp
   1188c:	68 80 3b 01 00       	push   $0x13b80
   11891:	ff 75 08             	push   0x8(%ebp)
   11894:	e8 04 ff ff ff       	call   1179d <do_default_handler>
   11899:	83 c4 10             	add    $0x10,%esp
}
   1189c:	90                   	nop
   1189d:	c9                   	leave  
   1189e:	c3                   	ret    

0001189f <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1189f:	55                   	push   %ebp
   118a0:	89 e5                	mov    %esp,%ebp
   118a2:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   118a5:	83 ec 08             	sub    $0x8,%esp
   118a8:	68 96 3b 01 00       	push   $0x13b96
   118ad:	ff 75 08             	push   0x8(%ebp)
   118b0:	e8 e8 fe ff ff       	call   1179d <do_default_handler>
   118b5:	83 c4 10             	add    $0x10,%esp
}
   118b8:	90                   	nop
   118b9:	c9                   	leave  
   118ba:	c3                   	ret    

000118bb <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   118bb:	55                   	push   %ebp
   118bc:	89 e5                	mov    %esp,%ebp
   118be:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   118c1:	83 ec 08             	sub    $0x8,%esp
   118c4:	68 af 3b 01 00       	push   $0x13baf
   118c9:	ff 75 08             	push   0x8(%ebp)
   118cc:	e8 cc fe ff ff       	call   1179d <do_default_handler>
   118d1:	83 c4 10             	add    $0x10,%esp
}
   118d4:	90                   	nop
   118d5:	c9                   	leave  
   118d6:	c3                   	ret    

000118d7 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   118d7:	55                   	push   %ebp
   118d8:	89 e5                	mov    %esp,%ebp
   118da:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   118dd:	83 ec 08             	sub    $0x8,%esp
   118e0:	68 cc 3b 01 00       	push   $0x13bcc
   118e5:	ff 75 08             	push   0x8(%ebp)
   118e8:	e8 b0 fe ff ff       	call   1179d <do_default_handler>
   118ed:	83 c4 10             	add    $0x10,%esp
}
   118f0:	90                   	nop
   118f1:	c9                   	leave  
   118f2:	c3                   	ret    

000118f3 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   118f3:	55                   	push   %ebp
   118f4:	89 e5                	mov    %esp,%ebp
   118f6:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   118f9:	83 ec 08             	sub    $0x8,%esp
   118fc:	68 e3 3b 01 00       	push   $0x13be3
   11901:	ff 75 08             	push   0x8(%ebp)
   11904:	e8 94 fe ff ff       	call   1179d <do_default_handler>
   11909:	83 c4 10             	add    $0x10,%esp
}
   1190c:	90                   	nop
   1190d:	c9                   	leave  
   1190e:	c3                   	ret    

0001190f <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   1190f:	55                   	push   %ebp
   11910:	89 e5                	mov    %esp,%ebp
   11912:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11915:	83 ec 08             	sub    $0x8,%esp
   11918:	68 f9 3b 01 00       	push   $0x13bf9
   1191d:	ff 75 08             	push   0x8(%ebp)
   11920:	e8 78 fe ff ff       	call   1179d <do_default_handler>
   11925:	83 c4 10             	add    $0x10,%esp
}
   11928:	90                   	nop
   11929:	c9                   	leave  
   1192a:	c3                   	ret    

0001192b <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   1192b:	55                   	push   %ebp
   1192c:	89 e5                	mov    %esp,%ebp
   1192e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   11931:	83 ec 08             	sub    $0x8,%esp
   11934:	68 17 3c 01 00       	push   $0x13c17
   11939:	ff 75 08             	push   0x8(%ebp)
   1193c:	e8 5c fe ff ff       	call   1179d <do_default_handler>
   11941:	83 c4 10             	add    $0x10,%esp
}
   11944:	90                   	nop
   11945:	c9                   	leave  
   11946:	c3                   	ret    

00011947 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11947:	55                   	push   %ebp
   11948:	89 e5                	mov    %esp,%ebp
   1194a:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1194d:	83 ec 0c             	sub    $0xc,%esp
   11950:	68 38 3c 01 00       	push   $0x13c38
   11955:	e8 5e 1c 00 00       	call   135b8 <log_printf>
   1195a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   1195d:	83 ec 0c             	sub    $0xc,%esp
   11960:	68 5c 3c 01 00       	push   $0x13c5c
   11965:	e8 4e 1c 00 00       	call   135b8 <log_printf>
   1196a:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   1196d:	8b 45 08             	mov    0x8(%ebp),%eax
   11970:	8b 40 34             	mov    0x34(%eax),%eax
   11973:	83 e0 01             	and    $0x1,%eax
   11976:	85 c0                	test   %eax,%eax
   11978:	74 12                	je     1198c <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   1197a:	83 ec 0c             	sub    $0xc,%esp
   1197d:	68 88 3c 01 00       	push   $0x13c88
   11982:	e8 31 1c 00 00       	call   135b8 <log_printf>
   11987:	83 c4 10             	add    $0x10,%esp
   1198a:	eb 10                	jmp    1199c <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   1198c:	83 ec 0c             	sub    $0xc,%esp
   1198f:	68 04 3d 01 00       	push   $0x13d04
   11994:	e8 1f 1c 00 00       	call   135b8 <log_printf>
   11999:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   1199c:	8b 45 08             	mov    0x8(%ebp),%eax
   1199f:	8b 40 34             	mov    0x34(%eax),%eax
   119a2:	83 e0 02             	and    $0x2,%eax
   119a5:	85 c0                	test   %eax,%eax
   119a7:	74 12                	je     119bb <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   119a9:	83 ec 0c             	sub    $0xc,%esp
   119ac:	68 5c 3d 01 00       	push   $0x13d5c
   119b1:	e8 02 1c 00 00       	call   135b8 <log_printf>
   119b6:	83 c4 10             	add    $0x10,%esp
   119b9:	eb 10                	jmp    119cb <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   119bb:	83 ec 0c             	sub    $0xc,%esp
   119be:	68 a8 3d 01 00       	push   $0x13da8
   119c3:	e8 f0 1b 00 00       	call   135b8 <log_printf>
   119c8:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   119cb:	8b 45 08             	mov    0x8(%ebp),%eax
   119ce:	8b 40 34             	mov    0x34(%eax),%eax
   119d1:	25 f8 ff 00 00       	and    $0xfff8,%eax
   119d6:	83 ec 08             	sub    $0x8,%esp
   119d9:	50                   	push   %eax
   119da:	68 d4 3d 01 00       	push   $0x13dd4
   119df:	e8 d4 1b 00 00       	call   135b8 <log_printf>
   119e4:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   119e7:	83 ec 0c             	sub    $0xc,%esp
   119ea:	ff 75 08             	push   0x8(%ebp)
   119ed:	e8 9c fc ff ff       	call   1168e <print_exception_fram>
   119f2:	83 c4 10             	add    $0x10,%esp
}
   119f5:	90                   	nop
   119f6:	c9                   	leave  
   119f7:	c3                   	ret    

000119f8 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   119f8:	55                   	push   %ebp
   119f9:	89 e5                	mov    %esp,%ebp
   119fb:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   119fe:	83 ec 0c             	sub    $0xc,%esp
   11a01:	68 38 3c 01 00       	push   $0x13c38
   11a06:	e8 ad 1b 00 00       	call   135b8 <log_printf>
   11a0b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11a0e:	83 ec 0c             	sub    $0xc,%esp
   11a11:	68 e8 3d 01 00       	push   $0x13de8
   11a16:	e8 9d 1b 00 00       	call   135b8 <log_printf>
   11a1b:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   11a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a21:	8b 40 34             	mov    0x34(%eax),%eax
   11a24:	83 e0 01             	and    $0x1,%eax
   11a27:	85 c0                	test   %eax,%eax
   11a29:	74 18                	je     11a43 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   11a2b:	e8 32 fc ff ff       	call   11662 <read_cr2>
   11a30:	83 ec 08             	sub    $0x8,%esp
   11a33:	50                   	push   %eax
   11a34:	68 0c 3e 01 00       	push   $0x13e0c
   11a39:	e8 7a 1b 00 00       	call   135b8 <log_printf>
   11a3e:	83 c4 10             	add    $0x10,%esp
   11a41:	eb 16                	jmp    11a59 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   11a43:	e8 1a fc ff ff       	call   11662 <read_cr2>
   11a48:	83 ec 08             	sub    $0x8,%esp
   11a4b:	50                   	push   %eax
   11a4c:	68 33 3e 01 00       	push   $0x13e33
   11a51:	e8 62 1b 00 00       	call   135b8 <log_printf>
   11a56:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11a59:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5c:	8b 40 34             	mov    0x34(%eax),%eax
   11a5f:	83 e0 02             	and    $0x2,%eax
   11a62:	85 c0                	test   %eax,%eax
   11a64:	74 12                	je     11a78 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   11a66:	83 ec 0c             	sub    $0xc,%esp
   11a69:	68 50 3e 01 00       	push   $0x13e50
   11a6e:	e8 45 1b 00 00       	call   135b8 <log_printf>
   11a73:	83 c4 10             	add    $0x10,%esp
   11a76:	eb 10                	jmp    11a88 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   11a78:	83 ec 0c             	sub    $0xc,%esp
   11a7b:	68 7c 3e 01 00       	push   $0x13e7c
   11a80:	e8 33 1b 00 00       	call   135b8 <log_printf>
   11a85:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11a88:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8b:	8b 40 34             	mov    0x34(%eax),%eax
   11a8e:	83 e0 04             	and    $0x4,%eax
   11a91:	85 c0                	test   %eax,%eax
   11a93:	74 12                	je     11aa7 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   11a95:	83 ec 0c             	sub    $0xc,%esp
   11a98:	68 a8 3e 01 00       	push   $0x13ea8
   11a9d:	e8 16 1b 00 00       	call   135b8 <log_printf>
   11aa2:	83 c4 10             	add    $0x10,%esp
   11aa5:	eb 10                	jmp    11ab7 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   11aa7:	83 ec 0c             	sub    $0xc,%esp
   11aaa:	68 d0 3e 01 00       	push   $0x13ed0
   11aaf:	e8 04 1b 00 00       	call   135b8 <log_printf>
   11ab4:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   11ab7:	83 ec 0c             	sub    $0xc,%esp
   11aba:	ff 75 08             	push   0x8(%ebp)
   11abd:	e8 cc fb ff ff       	call   1168e <print_exception_fram>
   11ac2:	83 c4 10             	add    $0x10,%esp
}
   11ac5:	90                   	nop
   11ac6:	c9                   	leave  
   11ac7:	c3                   	ret    

00011ac8 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   11ac8:	55                   	push   %ebp
   11ac9:	89 e5                	mov    %esp,%ebp
   11acb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11ace:	83 ec 08             	sub    $0x8,%esp
   11ad1:	68 fb 3e 01 00       	push   $0x13efb
   11ad6:	ff 75 08             	push   0x8(%ebp)
   11ad9:	e8 bf fc ff ff       	call   1179d <do_default_handler>
   11ade:	83 c4 10             	add    $0x10,%esp
}
   11ae1:	90                   	nop
   11ae2:	c9                   	leave  
   11ae3:	c3                   	ret    

00011ae4 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11ae4:	55                   	push   %ebp
   11ae5:	89 e5                	mov    %esp,%ebp
   11ae7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11aea:	83 ec 08             	sub    $0x8,%esp
   11aed:	68 0f 3f 01 00       	push   $0x13f0f
   11af2:	ff 75 08             	push   0x8(%ebp)
   11af5:	e8 a3 fc ff ff       	call   1179d <do_default_handler>
   11afa:	83 c4 10             	add    $0x10,%esp
}
   11afd:	90                   	nop
   11afe:	c9                   	leave  
   11aff:	c3                   	ret    

00011b00 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11b00:	55                   	push   %ebp
   11b01:	89 e5                	mov    %esp,%ebp
   11b03:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11b06:	83 ec 08             	sub    $0x8,%esp
   11b09:	68 29 3f 01 00       	push   $0x13f29
   11b0e:	ff 75 08             	push   0x8(%ebp)
   11b11:	e8 87 fc ff ff       	call   1179d <do_default_handler>
   11b16:	83 c4 10             	add    $0x10,%esp
}
   11b19:	90                   	nop
   11b1a:	c9                   	leave  
   11b1b:	c3                   	ret    

00011b1c <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11b1c:	55                   	push   %ebp
   11b1d:	89 e5                	mov    %esp,%ebp
   11b1f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11b22:	83 ec 08             	sub    $0x8,%esp
   11b25:	68 41 3f 01 00       	push   $0x13f41
   11b2a:	ff 75 08             	push   0x8(%ebp)
   11b2d:	e8 6b fc ff ff       	call   1179d <do_default_handler>
   11b32:	83 c4 10             	add    $0x10,%esp
}
   11b35:	90                   	nop
   11b36:	c9                   	leave  
   11b37:	c3                   	ret    

00011b38 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11b38:	55                   	push   %ebp
   11b39:	89 e5                	mov    %esp,%ebp
   11b3b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11b3e:	83 ec 08             	sub    $0x8,%esp
   11b41:	68 59 3f 01 00       	push   $0x13f59
   11b46:	ff 75 08             	push   0x8(%ebp)
   11b49:	e8 4f fc ff ff       	call   1179d <do_default_handler>
   11b4e:	83 c4 10             	add    $0x10,%esp
}
   11b51:	90                   	nop
   11b52:	c9                   	leave  
   11b53:	c3                   	ret    

00011b54 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11b54:	55                   	push   %ebp
   11b55:	89 e5                	mov    %esp,%ebp
   11b57:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11b5a:	83 ec 08             	sub    $0x8,%esp
   11b5d:	68 75 3f 01 00       	push   $0x13f75
   11b62:	ff 75 08             	push   0x8(%ebp)
   11b65:	e8 33 fc ff ff       	call   1179d <do_default_handler>
   11b6a:	83 c4 10             	add    $0x10,%esp
}
   11b6d:	90                   	nop
   11b6e:	c9                   	leave  
   11b6f:	c3                   	ret    

00011b70 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11b70:	55                   	push   %ebp
   11b71:	89 e5                	mov    %esp,%ebp
   11b73:	83 ec 08             	sub    $0x8,%esp
   11b76:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b79:	8b 45 14             	mov    0x14(%ebp),%eax
   11b7c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11b80:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11b84:	8b 45 10             	mov    0x10(%ebp),%eax
   11b87:	89 c2                	mov    %eax,%edx
   11b89:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11b8f:	8b 45 10             	mov    0x10(%ebp),%eax
   11b92:	c1 e8 10             	shr    $0x10,%eax
   11b95:	89 c2                	mov    %eax,%edx
   11b97:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11ba5:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bac:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11bb0:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11bb4:	90                   	nop
   11bb5:	c9                   	leave  
   11bb6:	c3                   	ret    

00011bb7 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11bb7:	55                   	push   %ebp
   11bb8:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11bba:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11bc1:	7f 06                	jg     11bc9 <idt_install+0x12>
   11bc3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bc7:	79 07                	jns    11bd0 <idt_install+0x19>
   11bc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bce:	eb 25                	jmp    11bf5 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11bd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bd3:	8b 55 08             	mov    0x8(%ebp),%edx
   11bd6:	c1 e2 03             	shl    $0x3,%edx
   11bd9:	81 c2 c0 a3 02 00    	add    $0x2a3c0,%edx
   11bdf:	68 00 8e 00 00       	push   $0x8e00
   11be4:	50                   	push   %eax
   11be5:	6a 08                	push   $0x8
   11be7:	52                   	push   %edx
   11be8:	e8 83 ff ff ff       	call   11b70 <gate_desc_set>
   11bed:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11bf0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11bf5:	c9                   	leave  
   11bf6:	c3                   	ret    

00011bf7 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11bf7:	55                   	push   %ebp
   11bf8:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11bfa:	6a 11                	push   $0x11
   11bfc:	6a 20                	push   $0x20
   11bfe:	e8 16 fa ff ff       	call   11619 <outb>
   11c03:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11c06:	6a 20                	push   $0x20
   11c08:	6a 21                	push   $0x21
   11c0a:	e8 0a fa ff ff       	call   11619 <outb>
   11c0f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11c12:	6a 04                	push   $0x4
   11c14:	6a 21                	push   $0x21
   11c16:	e8 fe f9 ff ff       	call   11619 <outb>
   11c1b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11c1e:	6a 01                	push   $0x1
   11c20:	6a 21                	push   $0x21
   11c22:	e8 f2 f9 ff ff       	call   11619 <outb>
   11c27:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11c2a:	6a 11                	push   $0x11
   11c2c:	68 a0 00 00 00       	push   $0xa0
   11c31:	e8 e3 f9 ff ff       	call   11619 <outb>
   11c36:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11c39:	6a 28                	push   $0x28
   11c3b:	68 a1 00 00 00       	push   $0xa1
   11c40:	e8 d4 f9 ff ff       	call   11619 <outb>
   11c45:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11c48:	6a 02                	push   $0x2
   11c4a:	68 a1 00 00 00       	push   $0xa1
   11c4f:	e8 c5 f9 ff ff       	call   11619 <outb>
   11c54:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11c57:	6a 01                	push   $0x1
   11c59:	68 a1 00 00 00       	push   $0xa1
   11c5e:	e8 b6 f9 ff ff       	call   11619 <outb>
   11c63:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11c66:	68 fb 00 00 00       	push   $0xfb
   11c6b:	6a 21                	push   $0x21
   11c6d:	e8 a7 f9 ff ff       	call   11619 <outb>
   11c72:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11c75:	68 ff 00 00 00       	push   $0xff
   11c7a:	68 a1 00 00 00       	push   $0xa1
   11c7f:	e8 95 f9 ff ff       	call   11619 <outb>
   11c84:	83 c4 08             	add    $0x8,%esp


}
   11c87:	90                   	nop
   11c88:	c9                   	leave  
   11c89:	c3                   	ret    

00011c8a <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11c8a:	55                   	push   %ebp
   11c8b:	89 e5                	mov    %esp,%ebp
   11c8d:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11c90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11c97:	eb 14                	jmp    11cad <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11c99:	68 2a 00 01 00       	push   $0x1002a
   11c9e:	ff 75 fc             	push   -0x4(%ebp)
   11ca1:	e8 11 ff ff ff       	call   11bb7 <idt_install>
   11ca6:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11ca9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11cad:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11cb4:	7e e3                	jle    11c99 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11cb6:	68 47 00 01 00       	push   $0x10047
   11cbb:	6a 00                	push   $0x0
   11cbd:	e8 f5 fe ff ff       	call   11bb7 <idt_install>
   11cc2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11cc5:	68 64 00 01 00       	push   $0x10064
   11cca:	6a 01                	push   $0x1
   11ccc:	e8 e6 fe ff ff       	call   11bb7 <idt_install>
   11cd1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11cd4:	68 81 00 01 00       	push   $0x10081
   11cd9:	6a 02                	push   $0x2
   11cdb:	e8 d7 fe ff ff       	call   11bb7 <idt_install>
   11ce0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11ce3:	68 9e 00 01 00       	push   $0x1009e
   11ce8:	6a 03                	push   $0x3
   11cea:	e8 c8 fe ff ff       	call   11bb7 <idt_install>
   11cef:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11cf2:	68 bb 00 01 00       	push   $0x100bb
   11cf7:	6a 04                	push   $0x4
   11cf9:	e8 b9 fe ff ff       	call   11bb7 <idt_install>
   11cfe:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11d01:	68 d8 00 01 00       	push   $0x100d8
   11d06:	6a 05                	push   $0x5
   11d08:	e8 aa fe ff ff       	call   11bb7 <idt_install>
   11d0d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11d10:	68 f5 00 01 00       	push   $0x100f5
   11d15:	6a 06                	push   $0x6
   11d17:	e8 9b fe ff ff       	call   11bb7 <idt_install>
   11d1c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11d1f:	68 12 01 01 00       	push   $0x10112
   11d24:	6a 07                	push   $0x7
   11d26:	e8 8c fe ff ff       	call   11bb7 <idt_install>
   11d2b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11d2e:	68 2f 01 01 00       	push   $0x1012f
   11d33:	6a 08                	push   $0x8
   11d35:	e8 7d fe ff ff       	call   11bb7 <idt_install>
   11d3a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11d3d:	68 4a 01 01 00       	push   $0x1014a
   11d42:	6a 0a                	push   $0xa
   11d44:	e8 6e fe ff ff       	call   11bb7 <idt_install>
   11d49:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11d4c:	68 65 01 01 00       	push   $0x10165
   11d51:	6a 0b                	push   $0xb
   11d53:	e8 5f fe ff ff       	call   11bb7 <idt_install>
   11d58:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11d5b:	68 80 01 01 00       	push   $0x10180
   11d60:	6a 0c                	push   $0xc
   11d62:	e8 50 fe ff ff       	call   11bb7 <idt_install>
   11d67:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11d6a:	68 9b 01 01 00       	push   $0x1019b
   11d6f:	6a 0d                	push   $0xd
   11d71:	e8 41 fe ff ff       	call   11bb7 <idt_install>
   11d76:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11d79:	68 b6 01 01 00       	push   $0x101b6
   11d7e:	6a 0e                	push   $0xe
   11d80:	e8 32 fe ff ff       	call   11bb7 <idt_install>
   11d85:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11d88:	68 d1 01 01 00       	push   $0x101d1
   11d8d:	6a 10                	push   $0x10
   11d8f:	e8 23 fe ff ff       	call   11bb7 <idt_install>
   11d94:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11d97:	68 ee 01 01 00       	push   $0x101ee
   11d9c:	6a 11                	push   $0x11
   11d9e:	e8 14 fe ff ff       	call   11bb7 <idt_install>
   11da3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11da6:	68 09 02 01 00       	push   $0x10209
   11dab:	6a 12                	push   $0x12
   11dad:	e8 05 fe ff ff       	call   11bb7 <idt_install>
   11db2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11db5:	68 26 02 01 00       	push   $0x10226
   11dba:	6a 13                	push   $0x13
   11dbc:	e8 f6 fd ff ff       	call   11bb7 <idt_install>
   11dc1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11dc4:	68 43 02 01 00       	push   $0x10243
   11dc9:	6a 14                	push   $0x14
   11dcb:	e8 e7 fd ff ff       	call   11bb7 <idt_install>
   11dd0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11dd3:	68 60 02 01 00       	push   $0x10260
   11dd8:	6a 15                	push   $0x15
   11dda:	e8 d8 fd ff ff       	call   11bb7 <idt_install>
   11ddf:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11de2:	b8 c0 a3 02 00       	mov    $0x2a3c0,%eax
   11de7:	68 00 08 00 00       	push   $0x800
   11dec:	50                   	push   %eax
   11ded:	e8 48 f8 ff ff       	call   1163a <lidt>
   11df2:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11df5:	e8 fd fd ff ff       	call   11bf7 <init_pic>
}
   11dfa:	90                   	nop
   11dfb:	c9                   	leave  
   11dfc:	c3                   	ret    

00011dfd <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11dfd:	55                   	push   %ebp
   11dfe:	89 e5                	mov    %esp,%ebp
   11e00:	53                   	push   %ebx
   11e01:	83 ec 14             	sub    $0x14,%esp
   11e04:	8b 45 08             	mov    0x8(%ebp),%eax
   11e07:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11e0a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11e0e:	76 7f                	jbe    11e8f <idt_enable+0x92>
   11e10:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11e14:	77 79                	ja     11e8f <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11e16:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11e1a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11e1e:	77 33                	ja     11e53 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11e20:	6a 21                	push   $0x21
   11e22:	e8 d5 f7 ff ff       	call   115fc <inb>
   11e27:	83 c4 04             	add    $0x4,%esp
   11e2a:	89 c3                	mov    %eax,%ebx
   11e2c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11e30:	ba 01 00 00 00       	mov    $0x1,%edx
   11e35:	89 c1                	mov    %eax,%ecx
   11e37:	d3 e2                	shl    %cl,%edx
   11e39:	89 d0                	mov    %edx,%eax
   11e3b:	f7 d0                	not    %eax
   11e3d:	21 d8                	and    %ebx,%eax
   11e3f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11e42:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e46:	50                   	push   %eax
   11e47:	6a 21                	push   $0x21
   11e49:	e8 cb f7 ff ff       	call   11619 <outb>
   11e4e:	83 c4 08             	add    $0x8,%esp
   11e51:	eb 3d                	jmp    11e90 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11e53:	68 a1 00 00 00       	push   $0xa1
   11e58:	e8 9f f7 ff ff       	call   115fc <inb>
   11e5d:	83 c4 04             	add    $0x4,%esp
   11e60:	89 c3                	mov    %eax,%ebx
   11e62:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11e66:	83 e8 08             	sub    $0x8,%eax
   11e69:	ba 01 00 00 00       	mov    $0x1,%edx
   11e6e:	89 c1                	mov    %eax,%ecx
   11e70:	d3 e2                	shl    %cl,%edx
   11e72:	89 d0                	mov    %edx,%eax
   11e74:	f7 d0                	not    %eax
   11e76:	21 d8                	and    %ebx,%eax
   11e78:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11e7b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11e7f:	50                   	push   %eax
   11e80:	68 a1 00 00 00       	push   $0xa1
   11e85:	e8 8f f7 ff ff       	call   11619 <outb>
   11e8a:	83 c4 08             	add    $0x8,%esp
   11e8d:	eb 01                	jmp    11e90 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11e8f:	90                   	nop
  }
  
}
   11e90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e93:	c9                   	leave  
   11e94:	c3                   	ret    

00011e95 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11e95:	55                   	push   %ebp
   11e96:	89 e5                	mov    %esp,%ebp
   11e98:	53                   	push   %ebx
   11e99:	83 ec 14             	sub    $0x14,%esp
   11e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11ea2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11ea6:	76 7b                	jbe    11f23 <idt_disable+0x8e>
   11ea8:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11eac:	77 75                	ja     11f23 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11eae:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11eb2:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11eb6:	77 31                	ja     11ee9 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11eb8:	6a 21                	push   $0x21
   11eba:	e8 3d f7 ff ff       	call   115fc <inb>
   11ebf:	83 c4 04             	add    $0x4,%esp
   11ec2:	89 c3                	mov    %eax,%ebx
   11ec4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11ec8:	ba 01 00 00 00       	mov    $0x1,%edx
   11ecd:	89 c1                	mov    %eax,%ecx
   11ecf:	d3 e2                	shl    %cl,%edx
   11ed1:	89 d0                	mov    %edx,%eax
   11ed3:	09 d8                	or     %ebx,%eax
   11ed5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11ed8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11edc:	50                   	push   %eax
   11edd:	6a 21                	push   $0x21
   11edf:	e8 35 f7 ff ff       	call   11619 <outb>
   11ee4:	83 c4 08             	add    $0x8,%esp
   11ee7:	eb 3b                	jmp    11f24 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11ee9:	68 a1 00 00 00       	push   $0xa1
   11eee:	e8 09 f7 ff ff       	call   115fc <inb>
   11ef3:	83 c4 04             	add    $0x4,%esp
   11ef6:	89 c3                	mov    %eax,%ebx
   11ef8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11efc:	83 e8 08             	sub    $0x8,%eax
   11eff:	ba 01 00 00 00       	mov    $0x1,%edx
   11f04:	89 c1                	mov    %eax,%ecx
   11f06:	d3 e2                	shl    %cl,%edx
   11f08:	89 d0                	mov    %edx,%eax
   11f0a:	09 d8                	or     %ebx,%eax
   11f0c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11f0f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11f13:	50                   	push   %eax
   11f14:	68 a1 00 00 00       	push   $0xa1
   11f19:	e8 fb f6 ff ff       	call   11619 <outb>
   11f1e:	83 c4 08             	add    $0x8,%esp
   11f21:	eb 01                	jmp    11f24 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11f23:	90                   	nop
  }
  
}
   11f24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f27:	c9                   	leave  
   11f28:	c3                   	ret    

00011f29 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11f29:	55                   	push   %ebp
   11f2a:	89 e5                	mov    %esp,%ebp
  cli();
   11f2c:	e8 b6 f6 ff ff       	call   115e7 <cli>
}
   11f31:	90                   	nop
   11f32:	5d                   	pop    %ebp
   11f33:	c3                   	ret    

00011f34 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11f34:	55                   	push   %ebp
   11f35:	89 e5                	mov    %esp,%ebp
  sti();
   11f37:	e8 b2 f6 ff ff       	call   115ee <sti>
}
   11f3c:	90                   	nop
   11f3d:	5d                   	pop    %ebp
   11f3e:	c3                   	ret    

00011f3f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11f3f:	55                   	push   %ebp
   11f40:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11f42:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11f46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f4a:	78 29                	js     11f75 <pic_send_eoi+0x36>
   11f4c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11f50:	7f 23                	jg     11f75 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11f52:	6a 20                	push   $0x20
   11f54:	6a 20                	push   $0x20
   11f56:	e8 be f6 ff ff       	call   11619 <outb>
   11f5b:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11f5e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11f62:	7e 12                	jle    11f76 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11f64:	6a 20                	push   $0x20
   11f66:	68 a0 00 00 00       	push   $0xa0
   11f6b:	e8 a9 f6 ff ff       	call   11619 <outb>
   11f70:	83 c4 08             	add    $0x8,%esp
   11f73:	eb 01                	jmp    11f76 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11f75:	90                   	nop
  }

}
   11f76:	c9                   	leave  
   11f77:	c3                   	ret    

00011f78 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11f78:	55                   	push   %ebp
   11f79:	89 e5                	mov    %esp,%ebp
   11f7b:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11f7e:	e8 f0 f6 ff ff       	call   11673 <read_eflags>
   11f83:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11f86:	e8 9e ff ff ff       	call   11f29 <idt_disable_global>
  return state;;
   11f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11f8e:	c9                   	leave  
   11f8f:	c3                   	ret    

00011f90 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11f90:	55                   	push   %ebp
   11f91:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11f93:	ff 75 08             	push   0x8(%ebp)
   11f96:	e8 e8 f6 ff ff       	call   11683 <write_eflags>
   11f9b:	83 c4 04             	add    $0x4,%esp
}
   11f9e:	90                   	nop
   11f9f:	c9                   	leave  
   11fa0:	c3                   	ret    

00011fa1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11fa1:	55                   	push   %ebp
   11fa2:	89 e5                	mov    %esp,%ebp
   11fa4:	83 ec 08             	sub    $0x8,%esp
   11fa7:	8b 45 08             	mov    0x8(%ebp),%eax
   11faa:	8b 55 0c             	mov    0xc(%ebp),%edx
   11fad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11fb1:	89 d0                	mov    %edx,%eax
   11fb3:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11fb6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11fba:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11fbe:	ee                   	out    %al,(%dx)
}
   11fbf:	90                   	nop
   11fc0:	c9                   	leave  
   11fc1:	c3                   	ret    

00011fc2 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11fc2:	55                   	push   %ebp
   11fc3:	89 e5                	mov    %esp,%ebp
   11fc5:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11fc8:	a1 c0 ab 02 00       	mov    0x2abc0,%eax
   11fcd:	83 c0 01             	add    $0x1,%eax
   11fd0:	a3 c0 ab 02 00       	mov    %eax,0x2abc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11fd5:	83 ec 0c             	sub    $0xc,%esp
   11fd8:	6a 20                	push   $0x20
   11fda:	e8 60 ff ff ff       	call   11f3f <pic_send_eoi>
   11fdf:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11fe2:	e8 dd f1 ff ff       	call   111c4 <task_slice_end>
}
   11fe7:	90                   	nop
   11fe8:	c9                   	leave  
   11fe9:	c3                   	ret    

00011fea <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11fea:	55                   	push   %ebp
   11feb:	89 e5                	mov    %esp,%ebp
   11fed:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11ff0:	6a 36                	push   $0x36
   11ff2:	6a 43                	push   $0x43
   11ff4:	e8 a8 ff ff ff       	call   11fa1 <outb>
   11ff9:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11ffc:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   12002:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12006:	0f b6 c0             	movzbl %al,%eax
   12009:	50                   	push   %eax
   1200a:	6a 40                	push   $0x40
   1200c:	e8 90 ff ff ff       	call   11fa1 <outb>
   12011:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   12014:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12018:	66 c1 e8 08          	shr    $0x8,%ax
   1201c:	0f b6 c0             	movzbl %al,%eax
   1201f:	50                   	push   %eax
   12020:	6a 40                	push   $0x40
   12022:	e8 7a ff ff ff       	call   11fa1 <outb>
   12027:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1202a:	83 ec 08             	sub    $0x8,%esp
   1202d:	68 7b 02 01 00       	push   $0x1027b
   12032:	6a 20                	push   $0x20
   12034:	e8 7e fb ff ff       	call   11bb7 <idt_install>
   12039:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1203c:	83 ec 0c             	sub    $0xc,%esp
   1203f:	6a 20                	push   $0x20
   12041:	e8 b7 fd ff ff       	call   11dfd <idt_enable>
   12046:	83 c4 10             	add    $0x10,%esp

}
   12049:	90                   	nop
   1204a:	c9                   	leave  
   1204b:	c3                   	ret    

0001204c <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1204c:	55                   	push   %ebp
   1204d:	89 e5                	mov    %esp,%ebp
   1204f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12052:	c7 05 c0 ab 02 00 00 	movl   $0x0,0x2abc0
   12059:	00 00 00 
    init_pit();
   1205c:	e8 89 ff ff ff       	call   11fea <init_pit>
   12061:	90                   	nop
   12062:	c9                   	leave  
   12063:	c3                   	ret    

00012064 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   12064:	55                   	push   %ebp
   12065:	89 e5                	mov    %esp,%ebp
   12067:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   1206a:	8b 45 08             	mov    0x8(%ebp),%eax
   1206d:	8b 40 50             	mov    0x50(%eax),%eax
   12070:	85 c0                	test   %eax,%eax
   12072:	75 19                	jne    1208d <kernel_init+0x29>
   12074:	68 94 3f 01 00       	push   $0x13f94
   12079:	68 30 40 01 00       	push   $0x14030
   1207e:	6a 22                	push   $0x22
   12080:	68 b8 3f 01 00       	push   $0x13fb8
   12085:	e8 5f 08 00 00       	call   128e9 <pannic>
   1208a:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   1208d:	e8 9e 14 00 00       	call   13530 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   12092:	83 ec 0c             	sub    $0xc,%esp
   12095:	ff 75 08             	push   0x8(%ebp)
   12098:	e8 f0 e6 ff ff       	call   1078d <memory_init>
   1209d:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   120a0:	e8 18 f4 ff ff       	call   114bd <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   120a5:	e8 e0 fb ff ff       	call   11c8a <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   120aa:	e8 9d ff ff ff       	call   1204c <time_init>

    //7.初始化任务管理器
    task_manager_init();
   120af:	e8 bd ed ff ff       	call   10e71 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   120b4:	90                   	nop
   120b5:	c9                   	leave  
   120b6:	c3                   	ret    

000120b7 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   120b7:	55                   	push   %ebp
   120b8:	89 e5                	mov    %esp,%ebp
   120ba:	56                   	push   %esi
   120bb:	53                   	push   %ebx
   120bc:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   120bf:	e8 2d f0 ff ff       	call   110f1 <task_current>
   120c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   120c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   120cb:	75 19                	jne    120e6 <move_to_first_task+0x2f>
   120cd:	68 ed 3f 01 00       	push   $0x13fed
   120d2:	68 3c 40 01 00       	push   $0x1403c
   120d7:	6a 42                	push   $0x42
   120d9:	68 b8 3f 01 00       	push   $0x13fb8
   120de:	e8 06 08 00 00       	call   128e9 <pannic>
   120e3:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   120e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120e9:	83 c0 48             	add    $0x48,%eax
   120ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   120ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120f2:	8b 40 50             	mov    0x50(%eax),%eax
   120f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   120f8:	8b 52 38             	mov    0x38(%edx),%edx
   120fb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   120fe:	8b 49 24             	mov    0x24(%ecx),%ecx
   12101:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   12104:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12107:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1210a:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   1210d:	50                   	push   %eax
   1210e:	52                   	push   %edx
   1210f:	51                   	push   %ecx
   12110:	53                   	push   %ebx
   12111:	56                   	push   %esi
   12112:	cf                   	iret   

        
    );
}
   12113:	90                   	nop
   12114:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12117:	5b                   	pop    %ebx
   12118:	5e                   	pop    %esi
   12119:	5d                   	pop    %ebp
   1211a:	c3                   	ret    

0001211b <init_main>:


void init_main(void) {
   1211b:	55                   	push   %ebp
   1211c:	89 e5                	mov    %esp,%ebp
   1211e:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   12121:	83 ec 0c             	sub    $0xc,%esp
   12124:	68 f7 3f 01 00       	push   $0x13ff7
   12129:	e8 8a 14 00 00       	call   135b8 <log_printf>
   1212e:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   12131:	83 ec 04             	sub    $0x4,%esp
   12134:	68 0f 40 01 00       	push   $0x1400f
   12139:	68 15 40 01 00       	push   $0x14015
   1213e:	68 1a 40 01 00       	push   $0x1401a
   12143:	e8 70 14 00 00       	call   135b8 <log_printf>
   12148:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   1214b:	e8 f1 ed ff ff       	call   10f41 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   12150:	e8 62 ff ff ff       	call   120b7 <move_to_first_task>
   12155:	90                   	nop
   12156:	c9                   	leave  
   12157:	c3                   	ret    

00012158 <list_init>:
static inline void list_init(list_t *list) {
   12158:	55                   	push   %ebp
   12159:	89 e5                	mov    %esp,%ebp
   1215b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1215e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12162:	75 19                	jne    1217d <list_init+0x25>
   12164:	68 50 40 01 00       	push   $0x14050
   12169:	68 fc 40 01 00       	push   $0x140fc
   1216e:	6a 31                	push   $0x31
   12170:	68 64 40 01 00       	push   $0x14064
   12175:	e8 6f 07 00 00       	call   128e9 <pannic>
   1217a:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1217d:	8b 45 08             	mov    0x8(%ebp),%eax
   12180:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12187:	8b 45 08             	mov    0x8(%ebp),%eax
   1218a:	8b 50 04             	mov    0x4(%eax),%edx
   1218d:	8b 45 08             	mov    0x8(%ebp),%eax
   12190:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12192:	8b 45 08             	mov    0x8(%ebp),%eax
   12195:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1219c:	90                   	nop
   1219d:	c9                   	leave  
   1219e:	c3                   	ret    

0001219f <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1219f:	55                   	push   %ebp
   121a0:	89 e5                	mov    %esp,%ebp
   121a2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   121a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121a9:	75 19                	jne    121c4 <list_is_empty+0x25>
   121ab:	68 50 40 01 00       	push   $0x14050
   121b0:	68 08 41 01 00       	push   $0x14108
   121b5:	6a 38                	push   $0x38
   121b7:	68 64 40 01 00       	push   $0x14064
   121bc:	e8 28 07 00 00       	call   128e9 <pannic>
   121c1:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   121c4:	8b 45 08             	mov    0x8(%ebp),%eax
   121c7:	8b 40 08             	mov    0x8(%eax),%eax
   121ca:	85 c0                	test   %eax,%eax
   121cc:	0f 94 c0             	sete   %al
   121cf:	0f b6 c0             	movzbl %al,%eax
}
   121d2:	c9                   	leave  
   121d3:	c3                   	ret    

000121d4 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   121d4:	55                   	push   %ebp
   121d5:	89 e5                	mov    %esp,%ebp
   121d7:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   121da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121de:	75 19                	jne    121f9 <mutex_init+0x25>
   121e0:	68 a2 40 01 00       	push   $0x140a2
   121e5:	68 f0 40 01 00       	push   $0x140f0
   121ea:	6a 15                	push   $0x15
   121ec:	68 b8 40 01 00       	push   $0x140b8
   121f1:	e8 f3 06 00 00       	call   128e9 <pannic>
   121f6:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   121f9:	8b 45 08             	mov    0x8(%ebp),%eax
   121fc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   12203:	8b 45 08             	mov    0x8(%ebp),%eax
   12206:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1220c:	8b 45 08             	mov    0x8(%ebp),%eax
   1220f:	83 c0 08             	add    $0x8,%eax
   12212:	83 ec 0c             	sub    $0xc,%esp
   12215:	50                   	push   %eax
   12216:	e8 3d ff ff ff       	call   12158 <list_init>
   1221b:	83 c4 10             	add    $0x10,%esp
}
   1221e:	90                   	nop
   1221f:	c9                   	leave  
   12220:	c3                   	ret    

00012221 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   12221:	55                   	push   %ebp
   12222:	89 e5                	mov    %esp,%ebp
   12224:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12227:	e8 4c fd ff ff       	call   11f78 <idt_enter_protection>
   1222c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   1222f:	e8 bd ee ff ff       	call   110f1 <task_current>
   12234:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   12237:	8b 45 08             	mov    0x8(%ebp),%eax
   1223a:	8b 40 04             	mov    0x4(%eax),%eax
   1223d:	85 c0                	test   %eax,%eax
   1223f:	75 19                	jne    1225a <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   12241:	8b 45 08             	mov    0x8(%ebp),%eax
   12244:	8b 40 04             	mov    0x4(%eax),%eax
   12247:	8d 50 01             	lea    0x1(%eax),%edx
   1224a:	8b 45 08             	mov    0x8(%ebp),%eax
   1224d:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   12250:	8b 45 08             	mov    0x8(%ebp),%eax
   12253:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12256:	89 10                	mov    %edx,(%eax)
   12258:	eb 47                	jmp    122a1 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   1225a:	8b 45 08             	mov    0x8(%ebp),%eax
   1225d:	8b 00                	mov    (%eax),%eax
   1225f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12262:	75 11                	jne    12275 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   12264:	8b 45 08             	mov    0x8(%ebp),%eax
   12267:	8b 40 04             	mov    0x4(%eax),%eax
   1226a:	8d 50 01             	lea    0x1(%eax),%edx
   1226d:	8b 45 08             	mov    0x8(%ebp),%eax
   12270:	89 50 04             	mov    %edx,0x4(%eax)
   12273:	eb 2c                	jmp    122a1 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   12275:	83 ec 0c             	sub    $0xc,%esp
   12278:	ff 75 f0             	push   -0x10(%ebp)
   1227b:	e8 f8 ed ff ff       	call   11078 <task_set_unready>
   12280:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   12283:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12286:	8d 50 40             	lea    0x40(%eax),%edx
   12289:	8b 45 08             	mov    0x8(%ebp),%eax
   1228c:	83 c0 08             	add    $0x8,%eax
   1228f:	83 ec 08             	sub    $0x8,%esp
   12292:	52                   	push   %edx
   12293:	50                   	push   %eax
   12294:	e8 9b 0f 00 00       	call   13234 <list_insert_last>
   12299:	83 c4 10             	add    $0x10,%esp
    task_switch();
   1229c:	e8 5a ee ff ff       	call   110fb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   122a1:	83 ec 0c             	sub    $0xc,%esp
   122a4:	ff 75 f4             	push   -0xc(%ebp)
   122a7:	e8 e4 fc ff ff       	call   11f90 <idt_leave_protection>
   122ac:	83 c4 10             	add    $0x10,%esp
}
   122af:	90                   	nop
   122b0:	c9                   	leave  
   122b1:	c3                   	ret    

000122b2 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   122b2:	55                   	push   %ebp
   122b3:	89 e5                	mov    %esp,%ebp
   122b5:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   122b8:	e8 bb fc ff ff       	call   11f78 <idt_enter_protection>
   122bd:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   122c0:	e8 2c ee ff ff       	call   110f1 <task_current>
   122c5:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   122c8:	8b 45 08             	mov    0x8(%ebp),%eax
   122cb:	8b 00                	mov    (%eax),%eax
   122cd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122d0:	0f 85 83 00 00 00    	jne    12359 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   122d6:	8b 45 08             	mov    0x8(%ebp),%eax
   122d9:	8b 40 04             	mov    0x4(%eax),%eax
   122dc:	8d 50 ff             	lea    -0x1(%eax),%edx
   122df:	8b 45 08             	mov    0x8(%ebp),%eax
   122e2:	89 50 04             	mov    %edx,0x4(%eax)
   122e5:	8b 45 08             	mov    0x8(%ebp),%eax
   122e8:	8b 40 04             	mov    0x4(%eax),%eax
   122eb:	85 c0                	test   %eax,%eax
   122ed:	75 6a                	jne    12359 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   122ef:	8b 45 08             	mov    0x8(%ebp),%eax
   122f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   122f8:	8b 45 08             	mov    0x8(%ebp),%eax
   122fb:	83 c0 08             	add    $0x8,%eax
   122fe:	83 ec 0c             	sub    $0xc,%esp
   12301:	50                   	push   %eax
   12302:	e8 98 fe ff ff       	call   1219f <list_is_empty>
   12307:	83 c4 10             	add    $0x10,%esp
   1230a:	85 c0                	test   %eax,%eax
   1230c:	75 4b                	jne    12359 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1230e:	8b 45 08             	mov    0x8(%ebp),%eax
   12311:	83 c0 08             	add    $0x8,%eax
   12314:	83 ec 0c             	sub    $0xc,%esp
   12317:	50                   	push   %eax
   12318:	e8 a6 0f 00 00       	call   132c3 <list_remove_first>
   1231d:	83 c4 10             	add    $0x10,%esp
   12320:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   12323:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12327:	74 08                	je     12331 <mutex_unlock+0x7f>
   12329:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1232c:	83 e8 40             	sub    $0x40,%eax
   1232f:	eb 05                	jmp    12336 <mutex_unlock+0x84>
   12331:	b8 00 00 00 00       	mov    $0x0,%eax
   12336:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   12339:	8b 45 08             	mov    0x8(%ebp),%eax
   1233c:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   12343:	8b 45 08             	mov    0x8(%ebp),%eax
   12346:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12349:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   1234b:	83 ec 0c             	sub    $0xc,%esp
   1234e:	ff 75 e8             	push   -0x18(%ebp)
   12351:	e8 d7 ec ff ff       	call   1102d <task_set_ready>
   12356:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   12359:	83 ec 0c             	sub    $0xc,%esp
   1235c:	ff 75 f4             	push   -0xc(%ebp)
   1235f:	e8 2c fc ff ff       	call   11f90 <idt_leave_protection>
   12364:	83 c4 10             	add    $0x10,%esp
}
   12367:	90                   	nop
   12368:	c9                   	leave  
   12369:	c3                   	ret    

0001236a <list_init>:
static inline void list_init(list_t *list) {
   1236a:	55                   	push   %ebp
   1236b:	89 e5                	mov    %esp,%ebp
   1236d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12370:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12374:	75 19                	jne    1238f <list_init+0x25>
   12376:	68 18 41 01 00       	push   $0x14118
   1237b:	68 bc 41 01 00       	push   $0x141bc
   12380:	6a 31                	push   $0x31
   12382:	68 2c 41 01 00       	push   $0x1412c
   12387:	e8 5d 05 00 00       	call   128e9 <pannic>
   1238c:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1238f:	8b 45 08             	mov    0x8(%ebp),%eax
   12392:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12399:	8b 45 08             	mov    0x8(%ebp),%eax
   1239c:	8b 50 04             	mov    0x4(%eax),%edx
   1239f:	8b 45 08             	mov    0x8(%ebp),%eax
   123a2:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   123a4:	8b 45 08             	mov    0x8(%ebp),%eax
   123a7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   123ae:	90                   	nop
   123af:	c9                   	leave  
   123b0:	c3                   	ret    

000123b1 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   123b1:	55                   	push   %ebp
   123b2:	89 e5                	mov    %esp,%ebp
   123b4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   123b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123bb:	75 19                	jne    123d6 <list_is_empty+0x25>
   123bd:	68 18 41 01 00       	push   $0x14118
   123c2:	68 c8 41 01 00       	push   $0x141c8
   123c7:	6a 38                	push   $0x38
   123c9:	68 2c 41 01 00       	push   $0x1412c
   123ce:	e8 16 05 00 00       	call   128e9 <pannic>
   123d3:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   123d6:	8b 45 08             	mov    0x8(%ebp),%eax
   123d9:	8b 40 08             	mov    0x8(%eax),%eax
   123dc:	85 c0                	test   %eax,%eax
   123de:	0f 94 c0             	sete   %al
   123e1:	0f b6 c0             	movzbl %al,%eax
}
   123e4:	c9                   	leave  
   123e5:	c3                   	ret    

000123e6 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   123e6:	55                   	push   %ebp
   123e7:	89 e5                	mov    %esp,%ebp
   123e9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   123ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123f0:	75 19                	jne    1240b <sem_init+0x25>
   123f2:	68 6a 41 01 00       	push   $0x1416a
   123f7:	68 b0 41 01 00       	push   $0x141b0
   123fc:	6a 18                	push   $0x18
   123fe:	68 7c 41 01 00       	push   $0x1417c
   12403:	e8 e1 04 00 00       	call   128e9 <pannic>
   12408:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   1240b:	8b 45 08             	mov    0x8(%ebp),%eax
   1240e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   12414:	8b 45 08             	mov    0x8(%ebp),%eax
   12417:	83 c0 04             	add    $0x4,%eax
   1241a:	83 ec 0c             	sub    $0xc,%esp
   1241d:	50                   	push   %eax
   1241e:	e8 47 ff ff ff       	call   1236a <list_init>
   12423:	83 c4 10             	add    $0x10,%esp
}
   12426:	90                   	nop
   12427:	c9                   	leave  
   12428:	c3                   	ret    

00012429 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12429:	55                   	push   %ebp
   1242a:	89 e5                	mov    %esp,%ebp
   1242c:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1242f:	e8 44 fb ff ff       	call   11f78 <idt_enter_protection>
   12434:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12437:	8b 45 08             	mov    0x8(%ebp),%eax
   1243a:	8b 00                	mov    (%eax),%eax
   1243c:	85 c0                	test   %eax,%eax
   1243e:	7e 0f                	jle    1244f <sem_wait+0x26>
        --sem->count;   
   12440:	8b 45 08             	mov    0x8(%ebp),%eax
   12443:	8b 00                	mov    (%eax),%eax
   12445:	8d 50 ff             	lea    -0x1(%eax),%edx
   12448:	8b 45 08             	mov    0x8(%ebp),%eax
   1244b:	89 10                	mov    %edx,(%eax)
   1244d:	eb 34                	jmp    12483 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   1244f:	e8 9d ec ff ff       	call   110f1 <task_current>
   12454:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   12457:	83 ec 0c             	sub    $0xc,%esp
   1245a:	ff 75 f0             	push   -0x10(%ebp)
   1245d:	e8 16 ec ff ff       	call   11078 <task_set_unready>
   12462:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   12465:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12468:	8d 50 40             	lea    0x40(%eax),%edx
   1246b:	8b 45 08             	mov    0x8(%ebp),%eax
   1246e:	83 c0 04             	add    $0x4,%eax
   12471:	83 ec 08             	sub    $0x8,%esp
   12474:	52                   	push   %edx
   12475:	50                   	push   %eax
   12476:	e8 b9 0d 00 00       	call   13234 <list_insert_last>
   1247b:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   1247e:	e8 78 ec ff ff       	call   110fb <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   12483:	83 ec 0c             	sub    $0xc,%esp
   12486:	ff 75 f4             	push   -0xc(%ebp)
   12489:	e8 02 fb ff ff       	call   11f90 <idt_leave_protection>
   1248e:	83 c4 10             	add    $0x10,%esp
}
   12491:	90                   	nop
   12492:	c9                   	leave  
   12493:	c3                   	ret    

00012494 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   12494:	55                   	push   %ebp
   12495:	89 e5                	mov    %esp,%ebp
   12497:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1249a:	e8 d9 fa ff ff       	call   11f78 <idt_enter_protection>
   1249f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   124a2:	8b 45 08             	mov    0x8(%ebp),%eax
   124a5:	83 c0 04             	add    $0x4,%eax
   124a8:	83 ec 0c             	sub    $0xc,%esp
   124ab:	50                   	push   %eax
   124ac:	e8 00 ff ff ff       	call   123b1 <list_is_empty>
   124b1:	83 c4 10             	add    $0x10,%esp
   124b4:	85 c0                	test   %eax,%eax
   124b6:	75 3b                	jne    124f3 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   124b8:	8b 45 08             	mov    0x8(%ebp),%eax
   124bb:	83 c0 04             	add    $0x4,%eax
   124be:	83 ec 0c             	sub    $0xc,%esp
   124c1:	50                   	push   %eax
   124c2:	e8 fc 0d 00 00       	call   132c3 <list_remove_first>
   124c7:	83 c4 10             	add    $0x10,%esp
   124ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   124cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124d1:	74 08                	je     124db <sem_notify+0x47>
   124d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124d6:	83 e8 40             	sub    $0x40,%eax
   124d9:	eb 05                	jmp    124e0 <sem_notify+0x4c>
   124db:	b8 00 00 00 00       	mov    $0x0,%eax
   124e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   124e3:	83 ec 0c             	sub    $0xc,%esp
   124e6:	ff 75 ec             	push   -0x14(%ebp)
   124e9:	e8 3f eb ff ff       	call   1102d <task_set_ready>
   124ee:	83 c4 10             	add    $0x10,%esp
   124f1:	eb 0d                	jmp    12500 <sem_notify+0x6c>
    } else {
        sem->count++;
   124f3:	8b 45 08             	mov    0x8(%ebp),%eax
   124f6:	8b 00                	mov    (%eax),%eax
   124f8:	8d 50 01             	lea    0x1(%eax),%edx
   124fb:	8b 45 08             	mov    0x8(%ebp),%eax
   124fe:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   12500:	83 ec 0c             	sub    $0xc,%esp
   12503:	ff 75 f4             	push   -0xc(%ebp)
   12506:	e8 85 fa ff ff       	call   11f90 <idt_leave_protection>
   1250b:	83 c4 10             	add    $0x10,%esp

}
   1250e:	90                   	nop
   1250f:	c9                   	leave  
   12510:	c3                   	ret    

00012511 <sem_count>:

int sem_count(sem_t *sem) {
   12511:	55                   	push   %ebp
   12512:	89 e5                	mov    %esp,%ebp
   12514:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12517:	e8 5c fa ff ff       	call   11f78 <idt_enter_protection>
   1251c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1251f:	8b 45 08             	mov    0x8(%ebp),%eax
   12522:	8b 00                	mov    (%eax),%eax
   12524:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12527:	83 ec 0c             	sub    $0xc,%esp
   1252a:	ff 75 f4             	push   -0xc(%ebp)
   1252d:	e8 5e fa ff ff       	call   11f90 <idt_leave_protection>
   12532:	83 c4 10             	add    $0x10,%esp

    return count;
   12535:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12538:	c9                   	leave  
   12539:	c3                   	ret    

0001253a <list_init>:
static inline void list_init(list_t *list) {
   1253a:	55                   	push   %ebp
   1253b:	89 e5                	mov    %esp,%ebp
   1253d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12540:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12544:	75 19                	jne    1255f <list_init+0x25>
   12546:	68 d8 41 01 00       	push   $0x141d8
   1254b:	68 dc 42 01 00       	push   $0x142dc
   12550:	6a 31                	push   $0x31
   12552:	68 ec 41 01 00       	push   $0x141ec
   12557:	e8 8d 03 00 00       	call   128e9 <pannic>
   1255c:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1255f:	8b 45 08             	mov    0x8(%ebp),%eax
   12562:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12569:	8b 45 08             	mov    0x8(%ebp),%eax
   1256c:	8b 50 04             	mov    0x4(%eax),%edx
   1256f:	8b 45 08             	mov    0x8(%ebp),%eax
   12572:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12574:	8b 45 08             	mov    0x8(%ebp),%eax
   12577:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1257e:	90                   	nop
   1257f:	c9                   	leave  
   12580:	c3                   	ret    

00012581 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12581:	55                   	push   %ebp
   12582:	89 e5                	mov    %esp,%ebp
   12584:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12587:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1258b:	75 19                	jne    125a6 <list_get_size+0x25>
   1258d:	68 d8 41 01 00       	push   $0x141d8
   12592:	68 e8 42 01 00       	push   $0x142e8
   12597:	6a 3e                	push   $0x3e
   12599:	68 ec 41 01 00       	push   $0x141ec
   1259e:	e8 46 03 00 00       	call   128e9 <pannic>
   125a3:	83 c4 10             	add    $0x10,%esp
    return list->size;
   125a6:	8b 45 08             	mov    0x8(%ebp),%eax
   125a9:	8b 40 08             	mov    0x8(%eax),%eax
}
   125ac:	c9                   	leave  
   125ad:	c3                   	ret    

000125ae <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   125ae:	55                   	push   %ebp
   125af:	89 e5                	mov    %esp,%ebp
   125b1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   125b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125b8:	75 19                	jne    125d3 <list_get_first+0x25>
   125ba:	68 d8 41 01 00       	push   $0x141d8
   125bf:	68 08 43 01 00       	push   $0x14308
   125c4:	6a 44                	push   $0x44
   125c6:	68 ec 41 01 00       	push   $0x141ec
   125cb:	e8 19 03 00 00       	call   128e9 <pannic>
   125d0:	83 c4 10             	add    $0x10,%esp
    return list->first;
   125d3:	8b 45 08             	mov    0x8(%ebp),%eax
   125d6:	8b 00                	mov    (%eax),%eax
}
   125d8:	c9                   	leave  
   125d9:	c3                   	ret    

000125da <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   125da:	55                   	push   %ebp
   125db:	89 e5                	mov    %esp,%ebp
   125dd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   125e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125e4:	75 19                	jne    125ff <list_get_last+0x25>
   125e6:	68 d8 41 01 00       	push   $0x141d8
   125eb:	68 f8 42 01 00       	push   $0x142f8
   125f0:	6a 4a                	push   $0x4a
   125f2:	68 ec 41 01 00       	push   $0x141ec
   125f7:	e8 ed 02 00 00       	call   128e9 <pannic>
   125fc:	83 c4 10             	add    $0x10,%esp

    return list->last;
   125ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12602:	8b 40 04             	mov    0x4(%eax),%eax
}
   12605:	c9                   	leave  
   12606:	c3                   	ret    

00012607 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12607:	55                   	push   %ebp
   12608:	89 e5                	mov    %esp,%ebp
   1260a:	56                   	push   %esi
   1260b:	53                   	push   %ebx
   1260c:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1260f:	83 ec 0c             	sub    $0xc,%esp
   12612:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12615:	50                   	push   %eax
   12616:	e8 1f ff ff ff       	call   1253a <list_init>
   1261b:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1261e:	83 ec 0c             	sub    $0xc,%esp
   12621:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12624:	50                   	push   %eax
   12625:	e8 57 ff ff ff       	call   12581 <list_get_size>
   1262a:	83 c4 10             	add    $0x10,%esp
   1262d:	89 c6                	mov    %eax,%esi
   1262f:	83 ec 0c             	sub    $0xc,%esp
   12632:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12635:	50                   	push   %eax
   12636:	e8 9f ff ff ff       	call   125da <list_get_last>
   1263b:	83 c4 10             	add    $0x10,%esp
   1263e:	89 c3                	mov    %eax,%ebx
   12640:	83 ec 0c             	sub    $0xc,%esp
   12643:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12646:	50                   	push   %eax
   12647:	e8 62 ff ff ff       	call   125ae <list_get_first>
   1264c:	83 c4 10             	add    $0x10,%esp
   1264f:	56                   	push   %esi
   12650:	53                   	push   %ebx
   12651:	50                   	push   %eax
   12652:	68 2c 42 01 00       	push   $0x1422c
   12657:	e8 5c 0f 00 00       	call   135b8 <log_printf>
   1265c:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   1265f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12666:	eb 3f                	jmp    126a7 <list_test+0xa0>
        list_node_t *node = nodes + i;
   12668:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1266b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12672:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12675:	01 d0                	add    %edx,%eax
   12677:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1267a:	8b 45 d0             	mov    -0x30(%ebp),%eax
   1267d:	83 ec 04             	sub    $0x4,%esp
   12680:	50                   	push   %eax
   12681:	ff 75 f4             	push   -0xc(%ebp)
   12684:	68 54 42 01 00       	push   $0x14254
   12689:	e8 2a 0f 00 00       	call   135b8 <log_printf>
   1268e:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   12691:	83 ec 08             	sub    $0x8,%esp
   12694:	ff 75 d0             	push   -0x30(%ebp)
   12697:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1269a:	50                   	push   %eax
   1269b:	e8 09 0b 00 00       	call   131a9 <list_insert_first>
   126a0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   126a3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   126a7:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   126ab:	7e bb                	jle    12668 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   126ad:	83 ec 0c             	sub    $0xc,%esp
   126b0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   126b3:	50                   	push   %eax
   126b4:	e8 c8 fe ff ff       	call   12581 <list_get_size>
   126b9:	83 c4 10             	add    $0x10,%esp
   126bc:	89 c6                	mov    %eax,%esi
   126be:	83 ec 0c             	sub    $0xc,%esp
   126c1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   126c4:	50                   	push   %eax
   126c5:	e8 10 ff ff ff       	call   125da <list_get_last>
   126ca:	83 c4 10             	add    $0x10,%esp
   126cd:	89 c3                	mov    %eax,%ebx
   126cf:	83 ec 0c             	sub    $0xc,%esp
   126d2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   126d5:	50                   	push   %eax
   126d6:	e8 d3 fe ff ff       	call   125ae <list_get_first>
   126db:	83 c4 10             	add    $0x10,%esp
   126de:	56                   	push   %esi
   126df:	53                   	push   %ebx
   126e0:	50                   	push   %eax
   126e1:	68 2c 42 01 00       	push   $0x1422c
   126e6:	e8 cd 0e 00 00       	call   135b8 <log_printf>
   126eb:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   126ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   126f5:	eb 2d                	jmp    12724 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   126f7:	83 ec 0c             	sub    $0xc,%esp
   126fa:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   126fd:	50                   	push   %eax
   126fe:	e8 c0 0b 00 00       	call   132c3 <list_remove_first>
   12703:	83 c4 10             	add    $0x10,%esp
   12706:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12709:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1270c:	83 ec 04             	sub    $0x4,%esp
   1270f:	50                   	push   %eax
   12710:	ff 75 f0             	push   -0x10(%ebp)
   12713:	68 73 42 01 00       	push   $0x14273
   12718:	e8 9b 0e 00 00       	call   135b8 <log_printf>
   1271d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12720:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12724:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12728:	7e cd                	jle    126f7 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1272a:	83 ec 0c             	sub    $0xc,%esp
   1272d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12730:	50                   	push   %eax
   12731:	e8 4b fe ff ff       	call   12581 <list_get_size>
   12736:	83 c4 10             	add    $0x10,%esp
   12739:	89 c6                	mov    %eax,%esi
   1273b:	83 ec 0c             	sub    $0xc,%esp
   1273e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12741:	50                   	push   %eax
   12742:	e8 93 fe ff ff       	call   125da <list_get_last>
   12747:	83 c4 10             	add    $0x10,%esp
   1274a:	89 c3                	mov    %eax,%ebx
   1274c:	83 ec 0c             	sub    $0xc,%esp
   1274f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12752:	50                   	push   %eax
   12753:	e8 56 fe ff ff       	call   125ae <list_get_first>
   12758:	83 c4 10             	add    $0x10,%esp
   1275b:	56                   	push   %esi
   1275c:	53                   	push   %ebx
   1275d:	50                   	push   %eax
   1275e:	68 2c 42 01 00       	push   $0x1422c
   12763:	e8 50 0e 00 00       	call   135b8 <log_printf>
   12768:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   1276b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12772:	eb 3f                	jmp    127b3 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12774:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12777:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1277e:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12781:	01 d0                	add    %edx,%eax
   12783:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12786:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12789:	83 ec 04             	sub    $0x4,%esp
   1278c:	50                   	push   %eax
   1278d:	ff 75 ec             	push   -0x14(%ebp)
   12790:	68 8a 42 01 00       	push   $0x1428a
   12795:	e8 1e 0e 00 00       	call   135b8 <log_printf>
   1279a:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1279d:	83 ec 08             	sub    $0x8,%esp
   127a0:	ff 75 d8             	push   -0x28(%ebp)
   127a3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127a6:	50                   	push   %eax
   127a7:	e8 88 0a 00 00       	call   13234 <list_insert_last>
   127ac:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   127af:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   127b3:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   127b7:	7e bb                	jle    12774 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   127b9:	83 ec 0c             	sub    $0xc,%esp
   127bc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127bf:	50                   	push   %eax
   127c0:	e8 bc fd ff ff       	call   12581 <list_get_size>
   127c5:	83 c4 10             	add    $0x10,%esp
   127c8:	89 c6                	mov    %eax,%esi
   127ca:	83 ec 0c             	sub    $0xc,%esp
   127cd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127d0:	50                   	push   %eax
   127d1:	e8 04 fe ff ff       	call   125da <list_get_last>
   127d6:	83 c4 10             	add    $0x10,%esp
   127d9:	89 c3                	mov    %eax,%ebx
   127db:	83 ec 0c             	sub    $0xc,%esp
   127de:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127e1:	50                   	push   %eax
   127e2:	e8 c7 fd ff ff       	call   125ae <list_get_first>
   127e7:	83 c4 10             	add    $0x10,%esp
   127ea:	56                   	push   %esi
   127eb:	53                   	push   %ebx
   127ec:	50                   	push   %eax
   127ed:	68 2c 42 01 00       	push   $0x1422c
   127f2:	e8 c1 0d 00 00       	call   135b8 <log_printf>
   127f7:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   127fa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12801:	eb 2d                	jmp    12830 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12803:	83 ec 0c             	sub    $0xc,%esp
   12806:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12809:	50                   	push   %eax
   1280a:	e8 65 0b 00 00       	call   13374 <list_remove_last>
   1280f:	83 c4 10             	add    $0x10,%esp
   12812:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12815:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12818:	83 ec 04             	sub    $0x4,%esp
   1281b:	50                   	push   %eax
   1281c:	ff 75 e8             	push   -0x18(%ebp)
   1281f:	68 a8 42 01 00       	push   $0x142a8
   12824:	e8 8f 0d 00 00       	call   135b8 <log_printf>
   12829:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1282c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12830:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12834:	7e cd                	jle    12803 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12836:	83 ec 0c             	sub    $0xc,%esp
   12839:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1283c:	50                   	push   %eax
   1283d:	e8 3f fd ff ff       	call   12581 <list_get_size>
   12842:	83 c4 10             	add    $0x10,%esp
   12845:	89 c6                	mov    %eax,%esi
   12847:	83 ec 0c             	sub    $0xc,%esp
   1284a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1284d:	50                   	push   %eax
   1284e:	e8 87 fd ff ff       	call   125da <list_get_last>
   12853:	83 c4 10             	add    $0x10,%esp
   12856:	89 c3                	mov    %eax,%ebx
   12858:	83 ec 0c             	sub    $0xc,%esp
   1285b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1285e:	50                   	push   %eax
   1285f:	e8 4a fd ff ff       	call   125ae <list_get_first>
   12864:	83 c4 10             	add    $0x10,%esp
   12867:	56                   	push   %esi
   12868:	53                   	push   %ebx
   12869:	50                   	push   %eax
   1286a:	68 2c 42 01 00       	push   $0x1422c
   1286f:	e8 44 0d 00 00       	call   135b8 <log_printf>
   12874:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12877:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   1287e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12885:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   1288c:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12893:	8d 45 90             	lea    -0x70(%ebp),%eax
   12896:	83 c0 04             	add    $0x4,%eax
   12899:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   1289c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   128a0:	74 08                	je     128aa <list_test+0x2a3>
   128a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   128a5:	83 e8 04             	sub    $0x4,%eax
   128a8:	eb 05                	jmp    128af <list_test+0x2a8>
   128aa:	b8 00 00 00 00       	mov    $0x0,%eax
   128af:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   128b2:	8d 45 90             	lea    -0x70(%ebp),%eax
   128b5:	83 ec 08             	sub    $0x8,%esp
   128b8:	50                   	push   %eax
   128b9:	68 be 42 01 00       	push   $0x142be
   128be:	e8 f5 0c 00 00       	call   135b8 <log_printf>
   128c3:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   128c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
   128c9:	83 ec 08             	sub    $0x8,%esp
   128cc:	50                   	push   %eax
   128cd:	68 cc 42 01 00       	push   $0x142cc
   128d2:	e8 e1 0c 00 00       	call   135b8 <log_printf>
   128d7:	83 c4 10             	add    $0x10,%esp

 }
   128da:	90                   	nop
   128db:	8d 65 f8             	lea    -0x8(%ebp),%esp
   128de:	5b                   	pop    %ebx
   128df:	5e                   	pop    %esi
   128e0:	5d                   	pop    %ebp
   128e1:	c3                   	ret    

000128e2 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   128e2:	55                   	push   %ebp
   128e3:	89 e5                	mov    %esp,%ebp
   128e5:	f4                   	hlt    
   128e6:	90                   	nop
   128e7:	5d                   	pop    %ebp
   128e8:	c3                   	ret    

000128e9 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   128e9:	55                   	push   %ebp
   128ea:	89 e5                	mov    %esp,%ebp
   128ec:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   128ef:	83 ec 08             	sub    $0x8,%esp
   128f2:	ff 75 14             	push   0x14(%ebp)
   128f5:	68 17 43 01 00       	push   $0x14317
   128fa:	e8 b9 0c 00 00       	call   135b8 <log_printf>
   128ff:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12902:	ff 75 10             	push   0x10(%ebp)
   12905:	ff 75 0c             	push   0xc(%ebp)
   12908:	ff 75 08             	push   0x8(%ebp)
   1290b:	68 28 43 01 00       	push   $0x14328
   12910:	e8 a3 0c 00 00       	call   135b8 <log_printf>
   12915:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12918:	e8 c5 ff ff ff       	call   128e2 <hlt>
   1291d:	eb f9                	jmp    12918 <pannic+0x2f>

0001291f <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   1291f:	55                   	push   %ebp
   12920:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12922:	8b 45 08             	mov    0x8(%ebp),%eax
   12925:	83 c0 07             	add    $0x7,%eax
   12928:	8d 50 07             	lea    0x7(%eax),%edx
   1292b:	85 c0                	test   %eax,%eax
   1292d:	0f 48 c2             	cmovs  %edx,%eax
   12930:	c1 f8 03             	sar    $0x3,%eax
}
   12933:	5d                   	pop    %ebp
   12934:	c3                   	ret    

00012935 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12935:	55                   	push   %ebp
   12936:	89 e5                	mov    %esp,%ebp
   12938:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1293b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1293f:	75 19                	jne    1295a <bitmap_init+0x25>
   12941:	68 44 43 01 00       	push   $0x14344
   12946:	68 d8 43 01 00       	push   $0x143d8
   1294b:	6a 24                	push   $0x24
   1294d:	68 5c 43 01 00       	push   $0x1435c
   12952:	e8 92 ff ff ff       	call   128e9 <pannic>
   12957:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   1295a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1295e:	75 19                	jne    12979 <bitmap_init+0x44>
   12960:	68 94 43 01 00       	push   $0x14394
   12965:	68 d8 43 01 00       	push   $0x143d8
   1296a:	6a 25                	push   $0x25
   1296c:	68 5c 43 01 00       	push   $0x1435c
   12971:	e8 73 ff ff ff       	call   128e9 <pannic>
   12976:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12979:	8b 45 08             	mov    0x8(%ebp),%eax
   1297c:	8b 55 10             	mov    0x10(%ebp),%edx
   1297f:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12981:	8b 45 08             	mov    0x8(%ebp),%eax
   12984:	8b 55 0c             	mov    0xc(%ebp),%edx
   12987:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1298a:	8b 45 08             	mov    0x8(%ebp),%eax
   1298d:	8b 00                	mov    (%eax),%eax
   1298f:	83 ec 0c             	sub    $0xc,%esp
   12992:	50                   	push   %eax
   12993:	e8 87 ff ff ff       	call   1291f <bitmap_byte_count>
   12998:	83 c4 10             	add    $0x10,%esp
   1299b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1299e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   129a2:	74 07                	je     129ab <bitmap_init+0x76>
   129a4:	ba ff 00 00 00       	mov    $0xff,%edx
   129a9:	eb 05                	jmp    129b0 <bitmap_init+0x7b>
   129ab:	ba 00 00 00 00       	mov    $0x0,%edx
   129b0:	8b 45 08             	mov    0x8(%ebp),%eax
   129b3:	8b 40 04             	mov    0x4(%eax),%eax
   129b6:	83 ec 04             	sub    $0x4,%esp
   129b9:	ff 75 f4             	push   -0xc(%ebp)
   129bc:	52                   	push   %edx
   129bd:	50                   	push   %eax
   129be:	e8 28 04 00 00       	call   12deb <kernel_memset>
   129c3:	83 c4 10             	add    $0x10,%esp

}
   129c6:	90                   	nop
   129c7:	c9                   	leave  
   129c8:	c3                   	ret    

000129c9 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   129c9:	55                   	push   %ebp
   129ca:	89 e5                	mov    %esp,%ebp
   129cc:	53                   	push   %ebx
   129cd:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   129d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129d4:	75 19                	jne    129ef <bitmap_get_bit+0x26>
   129d6:	68 44 43 01 00       	push   $0x14344
   129db:	68 e4 43 01 00       	push   $0x143e4
   129e0:	6a 39                	push   $0x39
   129e2:	68 5c 43 01 00       	push   $0x1435c
   129e7:	e8 fd fe ff ff       	call   128e9 <pannic>
   129ec:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   129ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129f3:	79 19                	jns    12a0e <bitmap_get_bit+0x45>
   129f5:	68 a8 43 01 00       	push   $0x143a8
   129fa:	68 e4 43 01 00       	push   $0x143e4
   129ff:	6a 3a                	push   $0x3a
   12a01:	68 5c 43 01 00       	push   $0x1435c
   12a06:	e8 de fe ff ff       	call   128e9 <pannic>
   12a0b:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a11:	8b 48 04             	mov    0x4(%eax),%ecx
   12a14:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a17:	8d 50 07             	lea    0x7(%eax),%edx
   12a1a:	85 c0                	test   %eax,%eax
   12a1c:	0f 48 c2             	cmovs  %edx,%eax
   12a1f:	c1 f8 03             	sar    $0x3,%eax
   12a22:	01 c8                	add    %ecx,%eax
   12a24:	0f b6 00             	movzbl (%eax),%eax
   12a27:	89 c3                	mov    %eax,%ebx
   12a29:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a2c:	83 e0 07             	and    $0x7,%eax
   12a2f:	ba 01 00 00 00       	mov    $0x1,%edx
   12a34:	89 c1                	mov    %eax,%ecx
   12a36:	d3 e2                	shl    %cl,%edx
   12a38:	89 d0                	mov    %edx,%eax
   12a3a:	21 d8                	and    %ebx,%eax
}
   12a3c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12a3f:	c9                   	leave  
   12a40:	c3                   	ret    

00012a41 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12a41:	55                   	push   %ebp
   12a42:	89 e5                	mov    %esp,%ebp
   12a44:	56                   	push   %esi
   12a45:	53                   	push   %ebx
   12a46:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12a49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a4d:	75 19                	jne    12a68 <bitmap_set_bit+0x27>
   12a4f:	68 44 43 01 00       	push   $0x14344
   12a54:	68 f4 43 01 00       	push   $0x143f4
   12a59:	6a 48                	push   $0x48
   12a5b:	68 5c 43 01 00       	push   $0x1435c
   12a60:	e8 84 fe ff ff       	call   128e9 <pannic>
   12a65:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12a68:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a6c:	78 06                	js     12a74 <bitmap_set_bit+0x33>
   12a6e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a72:	79 19                	jns    12a8d <bitmap_set_bit+0x4c>
   12a74:	68 b3 43 01 00       	push   $0x143b3
   12a79:	68 f4 43 01 00       	push   $0x143f4
   12a7e:	6a 49                	push   $0x49
   12a80:	68 5c 43 01 00       	push   $0x1435c
   12a85:	e8 5f fe ff ff       	call   128e9 <pannic>
   12a8a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12a8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12a94:	e9 92 00 00 00       	jmp    12b2b <bitmap_set_bit+0xea>
        if (bit) {
   12a99:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12a9d:	74 42                	je     12ae1 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12a9f:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa2:	8b 48 04             	mov    0x4(%eax),%ecx
   12aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12aa8:	8d 50 07             	lea    0x7(%eax),%edx
   12aab:	85 c0                	test   %eax,%eax
   12aad:	0f 48 c2             	cmovs  %edx,%eax
   12ab0:	c1 f8 03             	sar    $0x3,%eax
   12ab3:	89 c2                	mov    %eax,%edx
   12ab5:	89 d0                	mov    %edx,%eax
   12ab7:	01 c8                	add    %ecx,%eax
   12ab9:	0f b6 00             	movzbl (%eax),%eax
   12abc:	89 c6                	mov    %eax,%esi
   12abe:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ac1:	83 e0 07             	and    $0x7,%eax
   12ac4:	bb 01 00 00 00       	mov    $0x1,%ebx
   12ac9:	89 c1                	mov    %eax,%ecx
   12acb:	d3 e3                	shl    %cl,%ebx
   12acd:	89 d8                	mov    %ebx,%eax
   12acf:	89 f1                	mov    %esi,%ecx
   12ad1:	09 c1                	or     %eax,%ecx
   12ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad6:	8b 40 04             	mov    0x4(%eax),%eax
   12ad9:	01 d0                	add    %edx,%eax
   12adb:	89 ca                	mov    %ecx,%edx
   12add:	88 10                	mov    %dl,(%eax)
   12adf:	eb 42                	jmp    12b23 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12ae1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae4:	8b 48 04             	mov    0x4(%eax),%ecx
   12ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12aea:	8d 50 07             	lea    0x7(%eax),%edx
   12aed:	85 c0                	test   %eax,%eax
   12aef:	0f 48 c2             	cmovs  %edx,%eax
   12af2:	c1 f8 03             	sar    $0x3,%eax
   12af5:	89 c2                	mov    %eax,%edx
   12af7:	89 d0                	mov    %edx,%eax
   12af9:	01 c8                	add    %ecx,%eax
   12afb:	0f b6 00             	movzbl (%eax),%eax
   12afe:	89 c6                	mov    %eax,%esi
   12b00:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b03:	83 e0 07             	and    $0x7,%eax
   12b06:	bb 01 00 00 00       	mov    $0x1,%ebx
   12b0b:	89 c1                	mov    %eax,%ecx
   12b0d:	d3 e3                	shl    %cl,%ebx
   12b0f:	89 d8                	mov    %ebx,%eax
   12b11:	f7 d0                	not    %eax
   12b13:	89 f1                	mov    %esi,%ecx
   12b15:	21 c1                	and    %eax,%ecx
   12b17:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1a:	8b 40 04             	mov    0x4(%eax),%eax
   12b1d:	01 d0                	add    %edx,%eax
   12b1f:	89 ca                	mov    %ecx,%edx
   12b21:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12b23:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12b27:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b2e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12b31:	7d 0e                	jge    12b41 <bitmap_set_bit+0x100>
   12b33:	8b 45 08             	mov    0x8(%ebp),%eax
   12b36:	8b 00                	mov    (%eax),%eax
   12b38:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12b3b:	0f 8c 58 ff ff ff    	jl     12a99 <bitmap_set_bit+0x58>
        }
    }
}
   12b41:	90                   	nop
   12b42:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12b45:	5b                   	pop    %ebx
   12b46:	5e                   	pop    %esi
   12b47:	5d                   	pop    %ebp
   12b48:	c3                   	ret    

00012b49 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12b49:	55                   	push   %ebp
   12b4a:	89 e5                	mov    %esp,%ebp
   12b4c:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12b4f:	83 ec 08             	sub    $0x8,%esp
   12b52:	ff 75 0c             	push   0xc(%ebp)
   12b55:	ff 75 08             	push   0x8(%ebp)
   12b58:	e8 6c fe ff ff       	call   129c9 <bitmap_get_bit>
   12b5d:	83 c4 10             	add    $0x10,%esp
   12b60:	84 c0                	test   %al,%al
   12b62:	0f 95 c0             	setne  %al
   12b65:	0f b6 c0             	movzbl %al,%eax
}
   12b68:	c9                   	leave  
   12b69:	c3                   	ret    

00012b6a <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12b6a:	55                   	push   %ebp
   12b6b:	89 e5                	mov    %esp,%ebp
   12b6d:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12b70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b74:	75 19                	jne    12b8f <bitmap_alloc_nbits+0x25>
   12b76:	68 44 43 01 00       	push   $0x14344
   12b7b:	68 04 44 01 00       	push   $0x14404
   12b80:	6a 68                	push   $0x68
   12b82:	68 5c 43 01 00       	push   $0x1435c
   12b87:	e8 5d fd ff ff       	call   128e9 <pannic>
   12b8c:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12b8f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12b93:	79 19                	jns    12bae <bitmap_alloc_nbits+0x44>
   12b95:	68 cc 43 01 00       	push   $0x143cc
   12b9a:	68 04 44 01 00       	push   $0x14404
   12b9f:	6a 69                	push   $0x69
   12ba1:	68 5c 43 01 00       	push   $0x1435c
   12ba6:	e8 3e fd ff ff       	call   128e9 <pannic>
   12bab:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12bae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12bb5:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12bbc:	e9 8f 00 00 00       	jmp    12c50 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12bc1:	83 ec 08             	sub    $0x8,%esp
   12bc4:	ff 75 f4             	push   -0xc(%ebp)
   12bc7:	ff 75 08             	push   0x8(%ebp)
   12bca:	e8 fa fd ff ff       	call   129c9 <bitmap_get_bit>
   12bcf:	83 c4 10             	add    $0x10,%esp
   12bd2:	0f b6 c0             	movzbl %al,%eax
   12bd5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12bd8:	74 06                	je     12be0 <bitmap_alloc_nbits+0x76>
            search_index++;
   12bda:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12bde:	eb 70                	jmp    12c50 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12be3:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12be6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12bed:	eb 2d                	jmp    12c1c <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bf2:	8d 50 01             	lea    0x1(%eax),%edx
   12bf5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12bf8:	83 ec 08             	sub    $0x8,%esp
   12bfb:	50                   	push   %eax
   12bfc:	ff 75 08             	push   0x8(%ebp)
   12bff:	e8 c5 fd ff ff       	call   129c9 <bitmap_get_bit>
   12c04:	83 c4 10             	add    $0x10,%esp
   12c07:	0f b6 c0             	movzbl %al,%eax
   12c0a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c0d:	74 09                	je     12c18 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12c0f:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12c16:	eb 16                	jmp    12c2e <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12c18:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12c1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c1f:	3b 45 10             	cmp    0x10(%ebp),%eax
   12c22:	7d 0a                	jge    12c2e <bitmap_alloc_nbits+0xc4>
   12c24:	8b 45 08             	mov    0x8(%ebp),%eax
   12c27:	8b 00                	mov    (%eax),%eax
   12c29:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12c2c:	7c c1                	jl     12bef <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12c2e:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12c32:	74 1c                	je     12c50 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12c34:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c37:	f7 d0                	not    %eax
   12c39:	50                   	push   %eax
   12c3a:	ff 75 10             	push   0x10(%ebp)
   12c3d:	ff 75 f0             	push   -0x10(%ebp)
   12c40:	ff 75 08             	push   0x8(%ebp)
   12c43:	e8 f9 fd ff ff       	call   12a41 <bitmap_set_bit>
   12c48:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12c4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c4e:	eb 13                	jmp    12c63 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12c50:	8b 45 08             	mov    0x8(%ebp),%eax
   12c53:	8b 00                	mov    (%eax),%eax
   12c55:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12c58:	0f 8c 63 ff ff ff    	jl     12bc1 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12c5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12c63:	c9                   	leave  
   12c64:	c3                   	ret    

00012c65 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12c65:	55                   	push   %ebp
   12c66:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12c68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c6c:	74 3b                	je     12ca9 <kernel_strcpy+0x44>
   12c6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c72:	74 35                	je     12ca9 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12c74:	eb 17                	jmp    12c8d <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12c76:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c79:	8d 42 01             	lea    0x1(%edx),%eax
   12c7c:	89 45 0c             	mov    %eax,0xc(%ebp)
   12c7f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c82:	8d 48 01             	lea    0x1(%eax),%ecx
   12c85:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12c88:	0f b6 12             	movzbl (%edx),%edx
   12c8b:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c90:	0f b6 00             	movzbl (%eax),%eax
   12c93:	84 c0                	test   %al,%al
   12c95:	74 0a                	je     12ca1 <kernel_strcpy+0x3c>
   12c97:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c9a:	0f b6 00             	movzbl (%eax),%eax
   12c9d:	84 c0                	test   %al,%al
   12c9f:	75 d5                	jne    12c76 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12ca1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca4:	c6 00 00             	movb   $0x0,(%eax)
   12ca7:	eb 01                	jmp    12caa <kernel_strcpy+0x45>
    if (!dest || !src) return;
   12ca9:	90                   	nop
    
}
   12caa:	5d                   	pop    %ebp
   12cab:	c3                   	ret    

00012cac <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12cac:	55                   	push   %ebp
   12cad:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12caf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12cb3:	74 45                	je     12cfa <kernel_strncpy+0x4e>
   12cb5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12cb9:	74 3f                	je     12cfa <kernel_strncpy+0x4e>
   12cbb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12cbf:	74 39                	je     12cfa <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   12cc1:	eb 17                	jmp    12cda <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12cc3:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cc6:	8d 42 01             	lea    0x1(%edx),%eax
   12cc9:	89 45 0c             	mov    %eax,0xc(%ebp)
   12ccc:	8b 45 08             	mov    0x8(%ebp),%eax
   12ccf:	8d 48 01             	lea    0x1(%eax),%ecx
   12cd2:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12cd5:	0f b6 12             	movzbl (%edx),%edx
   12cd8:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   12cda:	8b 45 10             	mov    0x10(%ebp),%eax
   12cdd:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ce0:	89 55 10             	mov    %edx,0x10(%ebp)
   12ce3:	83 f8 01             	cmp    $0x1,%eax
   12ce6:	7e 0a                	jle    12cf2 <kernel_strncpy+0x46>
   12ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ceb:	0f b6 00             	movzbl (%eax),%eax
   12cee:	84 c0                	test   %al,%al
   12cf0:	75 d1                	jne    12cc3 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12cf2:	8b 45 08             	mov    0x8(%ebp),%eax
   12cf5:	c6 00 00             	movb   $0x0,(%eax)
   12cf8:	eb 01                	jmp    12cfb <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   12cfa:	90                   	nop
}
   12cfb:	5d                   	pop    %ebp
   12cfc:	c3                   	ret    

00012cfd <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   12cfd:	55                   	push   %ebp
   12cfe:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12d00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d04:	74 06                	je     12d0c <kernel_strncmp+0xf>
   12d06:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d0a:	75 0f                	jne    12d1b <kernel_strncmp+0x1e>
   12d0c:	b8 00 00 00 00       	mov    $0x0,%eax
   12d11:	eb 52                	jmp    12d65 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12d13:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12d17:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   12d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1e:	0f b6 00             	movzbl (%eax),%eax
   12d21:	84 c0                	test   %al,%al
   12d23:	74 24                	je     12d49 <kernel_strncmp+0x4c>
   12d25:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d28:	0f b6 00             	movzbl (%eax),%eax
   12d2b:	84 c0                	test   %al,%al
   12d2d:	74 1a                	je     12d49 <kernel_strncmp+0x4c>
   12d2f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12d33:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12d37:	74 10                	je     12d49 <kernel_strncmp+0x4c>
   12d39:	8b 45 08             	mov    0x8(%ebp),%eax
   12d3c:	0f b6 10             	movzbl (%eax),%edx
   12d3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d42:	0f b6 00             	movzbl (%eax),%eax
   12d45:	38 c2                	cmp    %al,%dl
   12d47:	74 ca                	je     12d13 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12d49:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4c:	0f b6 10             	movzbl (%eax),%edx
   12d4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d52:	0f b6 00             	movzbl (%eax),%eax
   12d55:	38 c2                	cmp    %al,%dl
   12d57:	7e 07                	jle    12d60 <kernel_strncmp+0x63>
   12d59:	b8 01 00 00 00       	mov    $0x1,%eax
   12d5e:	eb 05                	jmp    12d65 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12d60:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12d65:	5d                   	pop    %ebp
   12d66:	c3                   	ret    

00012d67 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12d67:	55                   	push   %ebp
   12d68:	89 e5                	mov    %esp,%ebp
   12d6a:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   12d6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d71:	75 07                	jne    12d7a <kernel_strlen+0x13>
   12d73:	b8 00 00 00 00       	mov    $0x0,%eax
   12d78:	eb 20                	jmp    12d9a <kernel_strlen+0x33>

    int len = 0;
   12d7a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12d81:	eb 04                	jmp    12d87 <kernel_strlen+0x20>
   12d83:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12d87:	8b 45 08             	mov    0x8(%ebp),%eax
   12d8a:	8d 50 01             	lea    0x1(%eax),%edx
   12d8d:	89 55 08             	mov    %edx,0x8(%ebp)
   12d90:	0f b6 00             	movzbl (%eax),%eax
   12d93:	84 c0                	test   %al,%al
   12d95:	75 ec                	jne    12d83 <kernel_strlen+0x1c>

    return len;
   12d97:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   12d9a:	c9                   	leave  
   12d9b:	c3                   	ret    

00012d9c <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12d9c:	55                   	push   %ebp
   12d9d:	89 e5                	mov    %esp,%ebp
   12d9f:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12da2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12da6:	74 40                	je     12de8 <kernel_memcpy+0x4c>
   12da8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12dac:	74 3a                	je     12de8 <kernel_memcpy+0x4c>
   12dae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12db2:	74 34                	je     12de8 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12db4:	8b 45 08             	mov    0x8(%ebp),%eax
   12db7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   12dba:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dbd:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12dc0:	eb 17                	jmp    12dd9 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12dc2:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12dc5:	8d 42 01             	lea    0x1(%edx),%eax
   12dc8:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12dcb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12dce:	8d 48 01             	lea    0x1(%eax),%ecx
   12dd1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12dd4:	0f b6 12             	movzbl (%edx),%edx
   12dd7:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12dd9:	8b 45 10             	mov    0x10(%ebp),%eax
   12ddc:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ddf:	89 55 10             	mov    %edx,0x10(%ebp)
   12de2:	85 c0                	test   %eax,%eax
   12de4:	75 dc                	jne    12dc2 <kernel_memcpy+0x26>
   12de6:	eb 01                	jmp    12de9 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12de8:	90                   	nop
    }
    
}
   12de9:	c9                   	leave  
   12dea:	c3                   	ret    

00012deb <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12deb:	55                   	push   %ebp
   12dec:	89 e5                	mov    %esp,%ebp
   12dee:	83 ec 14             	sub    $0x14,%esp
   12df1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12df4:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12dfb:	74 2c                	je     12e29 <kernel_memset+0x3e>
   12dfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e01:	74 26                	je     12e29 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12e03:	8b 45 08             	mov    0x8(%ebp),%eax
   12e06:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12e09:	eb 0f                	jmp    12e1a <kernel_memset+0x2f>
        *(d++) = v;
   12e0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e0e:	8d 50 01             	lea    0x1(%eax),%edx
   12e11:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12e14:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12e18:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12e1a:	8b 45 10             	mov    0x10(%ebp),%eax
   12e1d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e20:	89 55 10             	mov    %edx,0x10(%ebp)
   12e23:	85 c0                	test   %eax,%eax
   12e25:	75 e4                	jne    12e0b <kernel_memset+0x20>
   12e27:	eb 01                	jmp    12e2a <kernel_memset+0x3f>
    if (!dest || !size) return;
   12e29:	90                   	nop
    }
    
}
   12e2a:	c9                   	leave  
   12e2b:	c3                   	ret    

00012e2c <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   12e2c:	55                   	push   %ebp
   12e2d:	89 e5                	mov    %esp,%ebp
   12e2f:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12e32:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e36:	74 0c                	je     12e44 <kernel_memcmp+0x18>
   12e38:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12e3c:	74 06                	je     12e44 <kernel_memcmp+0x18>
   12e3e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e42:	75 07                	jne    12e4b <kernel_memcmp+0x1f>
   12e44:	b8 00 00 00 00       	mov    $0x0,%eax
   12e49:	eb 63                	jmp    12eae <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12e4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12e51:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e54:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12e57:	eb 08                	jmp    12e61 <kernel_memcmp+0x35>
        d1++;
   12e59:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12e5d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12e61:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12e65:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e69:	74 10                	je     12e7b <kernel_memcmp+0x4f>
   12e6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e6e:	0f b6 10             	movzbl (%eax),%edx
   12e71:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12e74:	0f b6 00             	movzbl (%eax),%eax
   12e77:	38 c2                	cmp    %al,%dl
   12e79:	74 de                	je     12e59 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12e7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e7e:	0f b6 10             	movzbl (%eax),%edx
   12e81:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12e84:	0f b6 00             	movzbl (%eax),%eax
   12e87:	38 c2                	cmp    %al,%dl
   12e89:	76 07                	jbe    12e92 <kernel_memcmp+0x66>
   12e8b:	b8 01 00 00 00       	mov    $0x1,%eax
   12e90:	eb 1c                	jmp    12eae <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12e92:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e95:	0f b6 10             	movzbl (%eax),%edx
   12e98:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12e9b:	0f b6 00             	movzbl (%eax),%eax
   12e9e:	38 c2                	cmp    %al,%dl
   12ea0:	73 07                	jae    12ea9 <kernel_memcmp+0x7d>
   12ea2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12ea7:	eb 05                	jmp    12eae <kernel_memcmp+0x82>
    else return 0;
   12ea9:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12eae:	c9                   	leave  
   12eaf:	c3                   	ret    

00012eb0 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12eb0:	55                   	push   %ebp
   12eb1:	89 e5                	mov    %esp,%ebp
   12eb3:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12eb6:	8d 45 10             	lea    0x10(%ebp),%eax
   12eb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ebf:	83 ec 04             	sub    $0x4,%esp
   12ec2:	50                   	push   %eax
   12ec3:	ff 75 0c             	push   0xc(%ebp)
   12ec6:	ff 75 08             	push   0x8(%ebp)
   12ec9:	e8 06 00 00 00       	call   12ed4 <kernel_vsprintf>
   12ece:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12ed1:	90                   	nop
   12ed2:	c9                   	leave  
   12ed3:	c3                   	ret    

00012ed4 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12ed4:	55                   	push   %ebp
   12ed5:	89 e5                	mov    %esp,%ebp
   12ed7:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12eda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12ee1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12ee7:	e9 68 01 00 00       	jmp    13054 <kernel_vsprintf+0x180>
        switch (state) {
   12eec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12ef0:	74 0b                	je     12efd <kernel_vsprintf+0x29>
   12ef2:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12ef6:	74 2b                	je     12f23 <kernel_vsprintf+0x4f>
   12ef8:	e9 56 01 00 00       	jmp    13053 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12efd:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12f01:	75 0c                	jne    12f0f <kernel_vsprintf+0x3b>
   12f03:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12f0a:	e9 45 01 00 00       	jmp    13054 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12f12:	8d 50 01             	lea    0x1(%eax),%edx
   12f15:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12f18:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12f1c:	88 10                	mov    %dl,(%eax)
            break;
   12f1e:	e9 31 01 00 00       	jmp    13054 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12f23:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12f27:	75 47                	jne    12f70 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12f29:	8b 45 10             	mov    0x10(%ebp),%eax
   12f2c:	8d 50 04             	lea    0x4(%eax),%edx
   12f2f:	89 55 10             	mov    %edx,0x10(%ebp)
   12f32:	8b 00                	mov    (%eax),%eax
   12f34:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12f37:	ff 75 ec             	push   -0x14(%ebp)
   12f3a:	e8 28 fe ff ff       	call   12d67 <kernel_strlen>
   12f3f:	83 c4 04             	add    $0x4,%esp
   12f42:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12f45:	eb 17                	jmp    12f5e <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12f47:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12f4a:	8d 42 01             	lea    0x1(%edx),%eax
   12f4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12f50:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12f53:	8d 48 01             	lea    0x1(%eax),%ecx
   12f56:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12f59:	0f b6 12             	movzbl (%edx),%edx
   12f5c:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12f5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12f61:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f64:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12f67:	85 c0                	test   %eax,%eax
   12f69:	75 dc                	jne    12f47 <kernel_vsprintf+0x73>
   12f6b:	e9 da 00 00 00       	jmp    1304a <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12f70:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12f74:	75 37                	jne    12fad <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12f76:	8b 45 10             	mov    0x10(%ebp),%eax
   12f79:	8d 50 04             	lea    0x4(%eax),%edx
   12f7c:	89 55 10             	mov    %edx,0x10(%ebp)
   12f7f:	8b 00                	mov    (%eax),%eax
   12f81:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12f84:	83 ec 04             	sub    $0x4,%esp
   12f87:	6a 0a                	push   $0xa
   12f89:	ff 75 d8             	push   -0x28(%ebp)
   12f8c:	ff 75 f0             	push   -0x10(%ebp)
   12f8f:	e8 dd 00 00 00       	call   13071 <kernel_itoa>
   12f94:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   12f97:	83 ec 0c             	sub    $0xc,%esp
   12f9a:	ff 75 f0             	push   -0x10(%ebp)
   12f9d:	e8 c5 fd ff ff       	call   12d67 <kernel_strlen>
   12fa2:	83 c4 10             	add    $0x10,%esp
   12fa5:	01 45 f0             	add    %eax,-0x10(%ebp)
   12fa8:	e9 9d 00 00 00       	jmp    1304a <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12fad:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12fb1:	74 06                	je     12fb9 <kernel_vsprintf+0xe5>
   12fb3:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12fb7:	75 34                	jne    12fed <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   12fb9:	8b 45 10             	mov    0x10(%ebp),%eax
   12fbc:	8d 50 04             	lea    0x4(%eax),%edx
   12fbf:	89 55 10             	mov    %edx,0x10(%ebp)
   12fc2:	8b 00                	mov    (%eax),%eax
   12fc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12fc7:	83 ec 04             	sub    $0x4,%esp
   12fca:	6a 10                	push   $0x10
   12fcc:	ff 75 dc             	push   -0x24(%ebp)
   12fcf:	ff 75 f0             	push   -0x10(%ebp)
   12fd2:	e8 9a 00 00 00       	call   13071 <kernel_itoa>
   12fd7:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12fda:	83 ec 0c             	sub    $0xc,%esp
   12fdd:	ff 75 f0             	push   -0x10(%ebp)
   12fe0:	e8 82 fd ff ff       	call   12d67 <kernel_strlen>
   12fe5:	83 c4 10             	add    $0x10,%esp
   12fe8:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12feb:	eb 5d                	jmp    1304a <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12fed:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12ff1:	75 34                	jne    13027 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12ff3:	8b 45 10             	mov    0x10(%ebp),%eax
   12ff6:	8d 50 04             	lea    0x4(%eax),%edx
   12ff9:	89 55 10             	mov    %edx,0x10(%ebp)
   12ffc:	8b 00                	mov    (%eax),%eax
   12ffe:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   13001:	83 ec 04             	sub    $0x4,%esp
   13004:	6a 02                	push   $0x2
   13006:	ff 75 e0             	push   -0x20(%ebp)
   13009:	ff 75 f0             	push   -0x10(%ebp)
   1300c:	e8 60 00 00 00       	call   13071 <kernel_itoa>
   13011:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   13014:	83 ec 0c             	sub    $0xc,%esp
   13017:	ff 75 f0             	push   -0x10(%ebp)
   1301a:	e8 48 fd ff ff       	call   12d67 <kernel_strlen>
   1301f:	83 c4 10             	add    $0x10,%esp
   13022:	01 45 f0             	add    %eax,-0x10(%ebp)
   13025:	eb 23                	jmp    1304a <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   13027:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1302b:	75 1d                	jne    1304a <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1302d:	8b 45 10             	mov    0x10(%ebp),%eax
   13030:	8d 50 04             	lea    0x4(%eax),%edx
   13033:	89 55 10             	mov    %edx,0x10(%ebp)
   13036:	8b 00                	mov    (%eax),%eax
   13038:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   1303b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1303e:	8d 50 01             	lea    0x1(%eax),%edx
   13041:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13044:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13048:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   1304a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   13051:	eb 01                	jmp    13054 <kernel_vsprintf+0x180>
        default:
            break;
   13053:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   13054:	8b 45 0c             	mov    0xc(%ebp),%eax
   13057:	8d 50 01             	lea    0x1(%eax),%edx
   1305a:	89 55 0c             	mov    %edx,0xc(%ebp)
   1305d:	0f b6 00             	movzbl (%eax),%eax
   13060:	88 45 e7             	mov    %al,-0x19(%ebp)
   13063:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   13067:	0f 85 7f fe ff ff    	jne    12eec <kernel_vsprintf+0x18>
        }
    }
    

}
   1306d:	90                   	nop
   1306e:	90                   	nop
   1306f:	c9                   	leave  
   13070:	c3                   	ret    

00013071 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   13071:	55                   	push   %ebp
   13072:	89 e5                	mov    %esp,%ebp
   13074:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   1307a:	8b 45 08             	mov    0x8(%ebp),%eax
   1307d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   13080:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   13084:	74 1d                	je     130a3 <kernel_itoa+0x32>
   13086:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1308a:	74 17                	je     130a3 <kernel_itoa+0x32>
   1308c:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13090:	74 11                	je     130a3 <kernel_itoa+0x32>
   13092:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   13096:	74 0b                	je     130a3 <kernel_itoa+0x32>
        *buf = '\0';
   13098:	8b 45 08             	mov    0x8(%ebp),%eax
   1309b:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1309e:	e9 a2 00 00 00       	jmp    13145 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   130a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   130a7:	79 11                	jns    130ba <kernel_itoa+0x49>
        *(p++) = '-';
   130a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   130ac:	8d 50 01             	lea    0x1(%eax),%edx
   130af:	89 55 fc             	mov    %edx,-0x4(%ebp)
   130b2:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   130b5:	f7 5d 0c             	negl   0xc(%ebp)
   130b8:	eb 1a                	jmp    130d4 <kernel_itoa+0x63>
    } else if (num == 0) {
   130ba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   130be:	75 14                	jne    130d4 <kernel_itoa+0x63>
        *(p++) = '0';
   130c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   130c3:	8d 50 01             	lea    0x1(%eax),%edx
   130c6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   130c9:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   130cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   130cf:	c6 00 00             	movb   $0x0,(%eax)
        return;
   130d2:	eb 71                	jmp    13145 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   130d4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   130db:	eb 2e                	jmp    1310b <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   130dd:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   130e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   130e6:	99                   	cltd   
   130e7:	f7 7d 10             	idivl  0x10(%ebp)
   130ea:	89 d0                	mov    %edx,%eax
   130ec:	01 c1                	add    %eax,%ecx
   130ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   130f1:	8d 50 01             	lea    0x1(%eax),%edx
   130f4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   130f7:	0f b6 11             	movzbl (%ecx),%edx
   130fa:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   13101:	8b 45 0c             	mov    0xc(%ebp),%eax
   13104:	99                   	cltd   
   13105:	f7 7d 10             	idivl  0x10(%ebp)
   13108:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1310b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1310f:	7f cc                	jg     130dd <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   13111:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13114:	83 e8 01             	sub    $0x1,%eax
   13117:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1311a:	eb 1d                	jmp    13139 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1311c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1311f:	8d 50 01             	lea    0x1(%eax),%edx
   13122:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13125:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   1312b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1312e:	01 ca                	add    %ecx,%edx
   13130:	0f b6 12             	movzbl (%edx),%edx
   13133:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   13135:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   13139:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1313d:	79 dd                	jns    1311c <kernel_itoa+0xab>
    }
    *p = '\0';
   1313f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13142:	c6 00 00             	movb   $0x0,(%eax)
   13145:	c9                   	leave  
   13146:	c3                   	ret    

00013147 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13147:	55                   	push   %ebp
   13148:	89 e5                	mov    %esp,%ebp
   1314a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1314d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13151:	75 19                	jne    1316c <list_is_empty+0x25>
   13153:	68 28 44 01 00       	push   $0x14428
   13158:	68 0c 45 01 00       	push   $0x1450c
   1315d:	6a 38                	push   $0x38
   1315f:	68 3c 44 01 00       	push   $0x1443c
   13164:	e8 80 f7 ff ff       	call   128e9 <pannic>
   13169:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1316c:	8b 45 08             	mov    0x8(%ebp),%eax
   1316f:	8b 40 08             	mov    0x8(%eax),%eax
   13172:	85 c0                	test   %eax,%eax
   13174:	0f 94 c0             	sete   %al
   13177:	0f b6 c0             	movzbl %al,%eax
}
   1317a:	c9                   	leave  
   1317b:	c3                   	ret    

0001317c <list_get_size>:
static inline int list_get_size(list_t *list) {
   1317c:	55                   	push   %ebp
   1317d:	89 e5                	mov    %esp,%ebp
   1317f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13182:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13186:	75 19                	jne    131a1 <list_get_size+0x25>
   13188:	68 28 44 01 00       	push   $0x14428
   1318d:	68 44 45 01 00       	push   $0x14544
   13192:	6a 3e                	push   $0x3e
   13194:	68 3c 44 01 00       	push   $0x1443c
   13199:	e8 4b f7 ff ff       	call   128e9 <pannic>
   1319e:	83 c4 10             	add    $0x10,%esp
    return list->size;
   131a1:	8b 45 08             	mov    0x8(%ebp),%eax
   131a4:	8b 40 08             	mov    0x8(%eax),%eax
}
   131a7:	c9                   	leave  
   131a8:	c3                   	ret    

000131a9 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   131a9:	55                   	push   %ebp
   131aa:	89 e5                	mov    %esp,%ebp
   131ac:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   131af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   131b3:	74 06                	je     131bb <list_insert_first+0x12>
   131b5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   131b9:	75 19                	jne    131d4 <list_insert_first+0x2b>
   131bb:	68 7c 44 01 00       	push   $0x1447c
   131c0:	68 f8 44 01 00       	push   $0x144f8
   131c5:	6a 0f                	push   $0xf
   131c7:	68 ac 44 01 00       	push   $0x144ac
   131cc:	e8 18 f7 ff ff       	call   128e9 <pannic>
   131d1:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   131d4:	8b 45 08             	mov    0x8(%ebp),%eax
   131d7:	8b 10                	mov    (%eax),%edx
   131d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   131dc:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   131df:	8b 45 0c             	mov    0xc(%ebp),%eax
   131e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   131e8:	83 ec 0c             	sub    $0xc,%esp
   131eb:	ff 75 08             	push   0x8(%ebp)
   131ee:	e8 54 ff ff ff       	call   13147 <list_is_empty>
   131f3:	83 c4 10             	add    $0x10,%esp
   131f6:	85 c0                	test   %eax,%eax
   131f8:	74 16                	je     13210 <list_insert_first+0x67>
        list->first = list->last = node;
   131fa:	8b 45 08             	mov    0x8(%ebp),%eax
   131fd:	8b 55 0c             	mov    0xc(%ebp),%edx
   13200:	89 50 04             	mov    %edx,0x4(%eax)
   13203:	8b 45 08             	mov    0x8(%ebp),%eax
   13206:	8b 50 04             	mov    0x4(%eax),%edx
   13209:	8b 45 08             	mov    0x8(%ebp),%eax
   1320c:	89 10                	mov    %edx,(%eax)
   1320e:	eb 12                	jmp    13222 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   13210:	8b 45 08             	mov    0x8(%ebp),%eax
   13213:	8b 00                	mov    (%eax),%eax
   13215:	8b 55 0c             	mov    0xc(%ebp),%edx
   13218:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1321a:	8b 45 08             	mov    0x8(%ebp),%eax
   1321d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13220:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   13222:	8b 45 08             	mov    0x8(%ebp),%eax
   13225:	8b 40 08             	mov    0x8(%eax),%eax
   13228:	8d 50 01             	lea    0x1(%eax),%edx
   1322b:	8b 45 08             	mov    0x8(%ebp),%eax
   1322e:	89 50 08             	mov    %edx,0x8(%eax)
}
   13231:	90                   	nop
   13232:	c9                   	leave  
   13233:	c3                   	ret    

00013234 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   13234:	55                   	push   %ebp
   13235:	89 e5                	mov    %esp,%ebp
   13237:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1323a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1323e:	74 06                	je     13246 <list_insert_last+0x12>
   13240:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13244:	75 19                	jne    1325f <list_insert_last+0x2b>
   13246:	68 7c 44 01 00       	push   $0x1447c
   1324b:	68 1c 45 01 00       	push   $0x1451c
   13250:	6a 1f                	push   $0x1f
   13252:	68 ac 44 01 00       	push   $0x144ac
   13257:	e8 8d f6 ff ff       	call   128e9 <pannic>
   1325c:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   1325f:	8b 45 08             	mov    0x8(%ebp),%eax
   13262:	8b 50 04             	mov    0x4(%eax),%edx
   13265:	8b 45 0c             	mov    0xc(%ebp),%eax
   13268:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1326a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1326d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   13274:	83 ec 0c             	sub    $0xc,%esp
   13277:	ff 75 08             	push   0x8(%ebp)
   1327a:	e8 c8 fe ff ff       	call   13147 <list_is_empty>
   1327f:	83 c4 10             	add    $0x10,%esp
   13282:	85 c0                	test   %eax,%eax
   13284:	74 16                	je     1329c <list_insert_last+0x68>
        list->first = list->last = node;
   13286:	8b 45 08             	mov    0x8(%ebp),%eax
   13289:	8b 55 0c             	mov    0xc(%ebp),%edx
   1328c:	89 50 04             	mov    %edx,0x4(%eax)
   1328f:	8b 45 08             	mov    0x8(%ebp),%eax
   13292:	8b 50 04             	mov    0x4(%eax),%edx
   13295:	8b 45 08             	mov    0x8(%ebp),%eax
   13298:	89 10                	mov    %edx,(%eax)
   1329a:	eb 15                	jmp    132b1 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   1329c:	8b 45 08             	mov    0x8(%ebp),%eax
   1329f:	8b 40 04             	mov    0x4(%eax),%eax
   132a2:	8b 55 0c             	mov    0xc(%ebp),%edx
   132a5:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   132a8:	8b 45 08             	mov    0x8(%ebp),%eax
   132ab:	8b 55 0c             	mov    0xc(%ebp),%edx
   132ae:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   132b1:	8b 45 08             	mov    0x8(%ebp),%eax
   132b4:	8b 40 08             	mov    0x8(%eax),%eax
   132b7:	8d 50 01             	lea    0x1(%eax),%edx
   132ba:	8b 45 08             	mov    0x8(%ebp),%eax
   132bd:	89 50 08             	mov    %edx,0x8(%eax)

}
   132c0:	90                   	nop
   132c1:	c9                   	leave  
   132c2:	c3                   	ret    

000132c3 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   132c3:	55                   	push   %ebp
   132c4:	89 e5                	mov    %esp,%ebp
   132c6:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   132c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132cd:	75 19                	jne    132e8 <list_remove_first+0x25>
   132cf:	68 e2 44 01 00       	push   $0x144e2
   132d4:	68 30 45 01 00       	push   $0x14530
   132d9:	6a 31                	push   $0x31
   132db:	68 ac 44 01 00       	push   $0x144ac
   132e0:	e8 04 f6 ff ff       	call   128e9 <pannic>
   132e5:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   132e8:	83 ec 0c             	sub    $0xc,%esp
   132eb:	ff 75 08             	push   0x8(%ebp)
   132ee:	e8 54 fe ff ff       	call   13147 <list_is_empty>
   132f3:	83 c4 10             	add    $0x10,%esp
   132f6:	85 c0                	test   %eax,%eax
   132f8:	74 07                	je     13301 <list_remove_first+0x3e>
        return (list_node_t*)0;
   132fa:	b8 00 00 00 00       	mov    $0x0,%eax
   132ff:	eb 71                	jmp    13372 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   13301:	8b 45 08             	mov    0x8(%ebp),%eax
   13304:	8b 00                	mov    (%eax),%eax
   13306:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13309:	83 ec 0c             	sub    $0xc,%esp
   1330c:	ff 75 08             	push   0x8(%ebp)
   1330f:	e8 68 fe ff ff       	call   1317c <list_get_size>
   13314:	83 c4 10             	add    $0x10,%esp
   13317:	83 f8 01             	cmp    $0x1,%eax
   1331a:	75 17                	jne    13333 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1331c:	8b 45 08             	mov    0x8(%ebp),%eax
   1331f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13326:	8b 45 08             	mov    0x8(%ebp),%eax
   13329:	8b 50 04             	mov    0x4(%eax),%edx
   1332c:	8b 45 08             	mov    0x8(%ebp),%eax
   1332f:	89 10                	mov    %edx,(%eax)
   13331:	eb 18                	jmp    1334b <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   13333:	8b 45 08             	mov    0x8(%ebp),%eax
   13336:	8b 00                	mov    (%eax),%eax
   13338:	8b 50 04             	mov    0x4(%eax),%edx
   1333b:	8b 45 08             	mov    0x8(%ebp),%eax
   1333e:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   13340:	8b 45 08             	mov    0x8(%ebp),%eax
   13343:	8b 00                	mov    (%eax),%eax
   13345:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1334b:	8b 45 08             	mov    0x8(%ebp),%eax
   1334e:	8b 40 08             	mov    0x8(%eax),%eax
   13351:	8d 50 ff             	lea    -0x1(%eax),%edx
   13354:	8b 45 08             	mov    0x8(%ebp),%eax
   13357:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1335a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1335d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13364:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13367:	8b 50 04             	mov    0x4(%eax),%edx
   1336a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1336d:	89 10                	mov    %edx,(%eax)
    return ret;
   1336f:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   13372:	c9                   	leave  
   13373:	c3                   	ret    

00013374 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   13374:	55                   	push   %ebp
   13375:	89 e5                	mov    %esp,%ebp
   13377:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1337a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1337e:	75 19                	jne    13399 <list_remove_last+0x25>
   13380:	68 e2 44 01 00       	push   $0x144e2
   13385:	68 54 45 01 00       	push   $0x14554
   1338a:	6a 46                	push   $0x46
   1338c:	68 ac 44 01 00       	push   $0x144ac
   13391:	e8 53 f5 ff ff       	call   128e9 <pannic>
   13396:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   13399:	83 ec 0c             	sub    $0xc,%esp
   1339c:	ff 75 08             	push   0x8(%ebp)
   1339f:	e8 a3 fd ff ff       	call   13147 <list_is_empty>
   133a4:	83 c4 10             	add    $0x10,%esp
   133a7:	85 c0                	test   %eax,%eax
   133a9:	74 07                	je     133b2 <list_remove_last+0x3e>
        return (list_node_t*)0;
   133ab:	b8 00 00 00 00       	mov    $0x0,%eax
   133b0:	eb 75                	jmp    13427 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   133b2:	8b 45 08             	mov    0x8(%ebp),%eax
   133b5:	8b 40 04             	mov    0x4(%eax),%eax
   133b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   133bb:	83 ec 0c             	sub    $0xc,%esp
   133be:	ff 75 08             	push   0x8(%ebp)
   133c1:	e8 b6 fd ff ff       	call   1317c <list_get_size>
   133c6:	83 c4 10             	add    $0x10,%esp
   133c9:	83 f8 01             	cmp    $0x1,%eax
   133cc:	75 17                	jne    133e5 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   133ce:	8b 45 08             	mov    0x8(%ebp),%eax
   133d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   133d8:	8b 45 08             	mov    0x8(%ebp),%eax
   133db:	8b 50 04             	mov    0x4(%eax),%edx
   133de:	8b 45 08             	mov    0x8(%ebp),%eax
   133e1:	89 10                	mov    %edx,(%eax)
   133e3:	eb 1b                	jmp    13400 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   133e5:	8b 45 08             	mov    0x8(%ebp),%eax
   133e8:	8b 40 04             	mov    0x4(%eax),%eax
   133eb:	8b 10                	mov    (%eax),%edx
   133ed:	8b 45 08             	mov    0x8(%ebp),%eax
   133f0:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   133f3:	8b 45 08             	mov    0x8(%ebp),%eax
   133f6:	8b 40 04             	mov    0x4(%eax),%eax
   133f9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   13400:	8b 45 08             	mov    0x8(%ebp),%eax
   13403:	8b 40 08             	mov    0x8(%eax),%eax
   13406:	8d 50 ff             	lea    -0x1(%eax),%edx
   13409:	8b 45 08             	mov    0x8(%ebp),%eax
   1340c:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1340f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13412:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13419:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1341c:	8b 50 04             	mov    0x4(%eax),%edx
   1341f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13422:	89 10                	mov    %edx,(%eax)
    return ret;
   13424:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13427:	c9                   	leave  
   13428:	c3                   	ret    

00013429 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13429:	55                   	push   %ebp
   1342a:	89 e5                	mov    %esp,%ebp
   1342c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1342f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13433:	74 06                	je     1343b <list_remove+0x12>
   13435:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13439:	75 19                	jne    13454 <list_remove+0x2b>
   1343b:	68 7c 44 01 00       	push   $0x1447c
   13440:	68 68 45 01 00       	push   $0x14568
   13445:	6a 5b                	push   $0x5b
   13447:	68 ac 44 01 00       	push   $0x144ac
   1344c:	e8 98 f4 ff ff       	call   128e9 <pannic>
   13451:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   13454:	83 ec 0c             	sub    $0xc,%esp
   13457:	ff 75 08             	push   0x8(%ebp)
   1345a:	e8 e8 fc ff ff       	call   13147 <list_is_empty>
   1345f:	83 c4 10             	add    $0x10,%esp
   13462:	85 c0                	test   %eax,%eax
   13464:	74 0a                	je     13470 <list_remove+0x47>
        return (list_node_t*)0;
   13466:	b8 00 00 00 00       	mov    $0x0,%eax
   1346b:	e9 80 00 00 00       	jmp    134f0 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   13470:	8b 45 08             	mov    0x8(%ebp),%eax
   13473:	8b 00                	mov    (%eax),%eax
   13475:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13478:	75 0b                	jne    13485 <list_remove+0x5c>
   1347a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1347d:	8b 50 04             	mov    0x4(%eax),%edx
   13480:	8b 45 08             	mov    0x8(%ebp),%eax
   13483:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   13485:	8b 45 08             	mov    0x8(%ebp),%eax
   13488:	8b 40 04             	mov    0x4(%eax),%eax
   1348b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1348e:	75 0b                	jne    1349b <list_remove+0x72>
   13490:	8b 45 0c             	mov    0xc(%ebp),%eax
   13493:	8b 10                	mov    (%eax),%edx
   13495:	8b 45 08             	mov    0x8(%ebp),%eax
   13498:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   1349b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1349e:	8b 00                	mov    (%eax),%eax
   134a0:	85 c0                	test   %eax,%eax
   134a2:	74 0e                	je     134b2 <list_remove+0x89>
   134a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   134a7:	8b 00                	mov    (%eax),%eax
   134a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   134ac:	8b 52 04             	mov    0x4(%edx),%edx
   134af:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   134b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   134b5:	8b 40 04             	mov    0x4(%eax),%eax
   134b8:	85 c0                	test   %eax,%eax
   134ba:	74 0d                	je     134c9 <list_remove+0xa0>
   134bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   134bf:	8b 40 04             	mov    0x4(%eax),%eax
   134c2:	8b 55 0c             	mov    0xc(%ebp),%edx
   134c5:	8b 12                	mov    (%edx),%edx
   134c7:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   134c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   134cc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   134d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   134d6:	8b 50 04             	mov    0x4(%eax),%edx
   134d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   134dc:	89 10                	mov    %edx,(%eax)
    list->size--;
   134de:	8b 45 08             	mov    0x8(%ebp),%eax
   134e1:	8b 40 08             	mov    0x8(%eax),%eax
   134e4:	8d 50 ff             	lea    -0x1(%eax),%edx
   134e7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ea:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   134ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   134f0:	c9                   	leave  
   134f1:	c3                   	ret    

000134f2 <inb>:
static inline uint8_t inb(uint16_t port) {
   134f2:	55                   	push   %ebp
   134f3:	89 e5                	mov    %esp,%ebp
   134f5:	83 ec 14             	sub    $0x14,%esp
   134f8:	8b 45 08             	mov    0x8(%ebp),%eax
   134fb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   134ff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13503:	89 c2                	mov    %eax,%edx
   13505:	ec                   	in     (%dx),%al
   13506:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13509:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1350d:	c9                   	leave  
   1350e:	c3                   	ret    

0001350f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1350f:	55                   	push   %ebp
   13510:	89 e5                	mov    %esp,%ebp
   13512:	83 ec 08             	sub    $0x8,%esp
   13515:	8b 45 08             	mov    0x8(%ebp),%eax
   13518:	8b 55 0c             	mov    0xc(%ebp),%edx
   1351b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1351f:	89 d0                	mov    %edx,%eax
   13521:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13524:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13528:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1352c:	ee                   	out    %al,(%dx)
}
   1352d:	90                   	nop
   1352e:	c9                   	leave  
   1352f:	c3                   	ret    

00013530 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13530:	55                   	push   %ebp
   13531:	89 e5                	mov    %esp,%ebp
   13533:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13536:	6a 00                	push   $0x0
   13538:	68 f9 03 00 00       	push   $0x3f9
   1353d:	e8 cd ff ff ff       	call   1350f <outb>
   13542:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13545:	68 80 00 00 00       	push   $0x80
   1354a:	68 fb 03 00 00       	push   $0x3fb
   1354f:	e8 bb ff ff ff       	call   1350f <outb>
   13554:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13557:	6a 03                	push   $0x3
   13559:	68 f8 03 00 00       	push   $0x3f8
   1355e:	e8 ac ff ff ff       	call   1350f <outb>
   13563:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13566:	6a 00                	push   $0x0
   13568:	68 f9 03 00 00       	push   $0x3f9
   1356d:	e8 9d ff ff ff       	call   1350f <outb>
   13572:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   13575:	6a 03                	push   $0x3
   13577:	68 fb 03 00 00       	push   $0x3fb
   1357c:	e8 8e ff ff ff       	call   1350f <outb>
   13581:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   13584:	68 c7 00 00 00       	push   $0xc7
   13589:	68 fa 03 00 00       	push   $0x3fa
   1358e:	e8 7c ff ff ff       	call   1350f <outb>
   13593:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   13596:	6a 0f                	push   $0xf
   13598:	68 fc 03 00 00       	push   $0x3fc
   1359d:	e8 6d ff ff ff       	call   1350f <outb>
   135a2:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   135a5:	83 ec 0c             	sub    $0xc,%esp
   135a8:	68 c4 ab 02 00       	push   $0x2abc4
   135ad:	e8 22 ec ff ff       	call   121d4 <mutex_init>
   135b2:	83 c4 10             	add    $0x10,%esp
}
   135b5:	90                   	nop
   135b6:	c9                   	leave  
   135b7:	c3                   	ret    

000135b8 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   135b8:	55                   	push   %ebp
   135b9:	89 e5                	mov    %esp,%ebp
   135bb:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   135c1:	83 ec 04             	sub    $0x4,%esp
   135c4:	68 80 00 00 00       	push   $0x80
   135c9:	6a 00                	push   $0x0
   135cb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   135d1:	50                   	push   %eax
   135d2:	e8 14 f8 ff ff       	call   12deb <kernel_memset>
   135d7:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   135da:	8d 45 0c             	lea    0xc(%ebp),%eax
   135dd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   135e3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   135e9:	83 ec 04             	sub    $0x4,%esp
   135ec:	50                   	push   %eax
   135ed:	ff 75 08             	push   0x8(%ebp)
   135f0:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   135f6:	50                   	push   %eax
   135f7:	e8 d8 f8 ff ff       	call   12ed4 <kernel_vsprintf>
   135fc:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   135ff:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13605:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13608:	83 ec 0c             	sub    $0xc,%esp
   1360b:	68 c4 ab 02 00       	push   $0x2abc4
   13610:	e8 0c ec ff ff       	call   12221 <mutex_lock>
   13615:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13618:	eb 57                	jmp    13671 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1361a:	90                   	nop
   1361b:	83 ec 0c             	sub    $0xc,%esp
   1361e:	68 fd 03 00 00       	push   $0x3fd
   13623:	e8 ca fe ff ff       	call   134f2 <inb>
   13628:	83 c4 10             	add    $0x10,%esp
   1362b:	0f b6 c0             	movzbl %al,%eax
   1362e:	83 e0 40             	and    $0x40,%eax
   13631:	85 c0                	test   %eax,%eax
   13633:	74 e6                	je     1361b <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13635:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13638:	0f b6 00             	movzbl (%eax),%eax
   1363b:	3c 0a                	cmp    $0xa,%al
   1363d:	75 12                	jne    13651 <log_printf+0x99>
   1363f:	83 ec 08             	sub    $0x8,%esp
   13642:	6a 0d                	push   $0xd
   13644:	68 f8 03 00 00       	push   $0x3f8
   13649:	e8 c1 fe ff ff       	call   1350f <outb>
   1364e:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   13651:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13654:	8d 50 01             	lea    0x1(%eax),%edx
   13657:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1365a:	0f b6 00             	movzbl (%eax),%eax
   1365d:	0f b6 c0             	movzbl %al,%eax
   13660:	83 ec 08             	sub    $0x8,%esp
   13663:	50                   	push   %eax
   13664:	68 f8 03 00 00       	push   $0x3f8
   13669:	e8 a1 fe ff ff       	call   1350f <outb>
   1366e:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13671:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13674:	0f b6 00             	movzbl (%eax),%eax
   13677:	84 c0                	test   %al,%al
   13679:	75 9f                	jne    1361a <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   1367b:	83 ec 08             	sub    $0x8,%esp
   1367e:	6a 0d                	push   $0xd
   13680:	68 f8 03 00 00       	push   $0x3f8
   13685:	e8 85 fe ff ff       	call   1350f <outb>
   1368a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1368d:	83 ec 08             	sub    $0x8,%esp
   13690:	6a 0a                	push   $0xa
   13692:	68 f8 03 00 00       	push   $0x3f8
   13697:	e8 73 fe ff ff       	call   1350f <outb>
   1369c:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   1369f:	83 ec 0c             	sub    $0xc,%esp
   136a2:	68 c4 ab 02 00       	push   $0x2abc4
   136a7:	e8 06 ec ff ff       	call   122b2 <mutex_unlock>
   136ac:	83 c4 10             	add    $0x10,%esp
   136af:	90                   	nop
   136b0:	c9                   	leave  
   136b1:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
 */

#include "tools/log.h"
#include "core/task.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 08             	sub    $0x8,%esp
    for (;;) {
        log_printf("first task.");
80000016:	83 ec 0c             	sub    $0xc,%esp
80000019:	68 38 00 00 80       	push   $0x80000038
8000001e:	e8 95 35 01 80       	call   135b8 <log_printf>
80000023:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000026:	83 ec 0c             	sub    $0xc,%esp
80000029:	68 e8 03 00 00       	push   $0x3e8
8000002e:	e8 43 13 01 80       	call   11376 <sys_sleep>
80000033:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000036:	eb de                	jmp    80000016 <first_main+0x6>
80000038:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
8000003e:	74 61                	je     800000a1 <first_main+0x91>
80000040:	73 6b                	jae    800000ad <first_main+0x9d>
80000042:	2e                   	cs
	...
