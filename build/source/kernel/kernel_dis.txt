
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000a214 memsz 0x0000a214 flags r-x
    LOAD off    0x0000c000 vaddr 0x0001b000 paddr 0x0001b000 align 2**12
         filesz 0x00000170 memsz 0x0005de30 flags rw-
    LOAD off    0x0000d000 vaddr 0x80000000 paddr 0x00079000 align 2**12
         filesz 0x00000397 memsz 0x00000397 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008843  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000019b4  00018860  00018860  00009860  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000170  0001b000  0001b000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005ce30  0001c000  0001c000  0000c170  2**12
                  ALLOC
  4 .first_task   00000397  80000000  00079000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00004a99  00000000  00000000  0000d397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000bca  00000000  00000000  00011e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000105f3  00000000  00000000  000129fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000038b0  00000000  00000000  00022fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000003a0  00000000  00000000  000268a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000026f1  00000000  00000000  00026c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 000000a9  00000000  00000000  00029331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  000293da  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002ba4  00000000  00000000  00029408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010301 l     F .text	0000000d down2
0001030e l     F .text	00000017 up2
00010325 l     F .text	0000000c write_cr3
00010331 l     F .text	0000000b pde_index
0001033c l     F .text	00000010 pte_index
0001034c l     F .text	00000027 pde_to_pt_addr
00010373 l     F .text	00000027 pte_to_pg_addr
0001039a l     F .text	0000000f get_pte_privilege
000103a9 l     F .text	00000011 mmu_set_page_dir
0001c000 l     O .bss	00007e88 paddr_alloc
00024000 l     O .bss	00001000 kernel_page_dir
000103ba l     F .text	00000025 page_index
000103df l     F .text	00000056 page_ref_add
00010435 l     F .text	00000068 page_ref_sub
0001049d l     F .text	0000004e get_page_ref
000104eb l     F .text	00000051 clear_page_ref
0001053c l     F .text	00000087 addr_alloc_init
000105c3 l     F .text	00000067 addr_alloc_page
0001062a l     F .text	0000009c addr_free_page
000106c6 l     F .text	00000066 show_mem_info
0001072c l     F .text	00000037 total_mem_size
000189fc l     O .rodata	00000011 __func__.4
0001b000 l     O .data	00000050 kernal_map.3
00018a10 l     O .rodata	0000000c __func__.2
00010e49 l     F .text	00000010 curr_page_dir
00018a1c l     O .rodata	00000011 __func__.1
00018a30 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
0001110e l     F .text	0000003d list_node_init
00018bf8 l     O .rodata	0000000f __func__.11
0001114b l     F .text	0000002d list_node_next
00018c58 l     O .rodata	0000000f __func__.5
00011178 l     F .text	00000047 list_init
00018c08 l     O .rodata	0000000a __func__.10
000111bf l     F .text	00000035 list_is_empty
00018c68 l     O .rodata	0000000e __func__.4
000111f4 l     F .text	0000002d list_get_size
00018c98 l     O .rodata	0000000e __func__.1
00011221 l     F .text	0000002c list_get_first
00018c48 l     O .rodata	0000000f __func__.6
0001124d l     F .text	00000007 hlt
00011254 l     F .text	0000000c write_cr3
00011260 l     F .text	0000001a far_jump
0001127a l     F .text	00000017 write_tr
00011291 l     F .text	00000011 mmu_set_page_dir
000112a2 l     F .text	00000017 up2
00025000 l     O .bss	000005c0 task_manager
000255c0 l     O .bss	00016400 task_table
0003b9c0 l     O .bss	00000014 task_table_lock
00011364 l     F .text	0000001f switch_to_tss
0001139e l     F .text	00000175 tss_init
00018bec l     O .rodata	0000000a __func__.12
00011c3d l     F .text	00000033 free_task
0003b9e0 l     O .bss	00000200 empty_task_stack
00011708 l     F .text	0000000a empty_task
00018c14 l     O .rodata	00000010 __func__.9
00018c24 l     O .rodata	0000000f __func__.8
00018c34 l     O .rodata	00000011 __func__.7
00018c78 l     O .rodata	0000000f __func__.3
00018c88 l     O .rodata	00000010 __func__.2
00011bd5 l     F .text	00000068 alloc_task
00011cdd l     F .text	00000059 copy_opened_files
00011f20 l     F .text	00000114 load_phdr
00012034 l     F .text	00000213 load_elf_file
00012247 l     F .text	000000f1 copy_args
00018ca8 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
0001275f l     F .text	00000028 lgdt
0003bbe0 l     O .bss	00010000 gdt_table
0004bbe0 l     O .bss	00002000 is_alloc
0004dbe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00012995 l     F .text	00000007 cli
0001299c l     F .text	00000007 sti
000129a3 l     F .text	00000007 hlt
000129aa l     F .text	0000001d inb
000129c7 l     F .text	00000021 outb
000129e8 l     F .text	00000028 lidt
00012a10 l     F .text	00000011 read_cr2
00012a21 l     F .text	00000010 read_eflags
00012a31 l     F .text	0000000b write_eflags
0004dc00 l     O .bss	00000800 idt_table
00012a3c l     F .text	0000010f print_exception_fram
00012b4b l     F .text	0000003e do_default_handler
00012f61 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
000192a0 l     O .rodata	000000fc sys_table
00000000 l    df *ABS*	00000000 console.c
000133f6 l     F .text	0000001d inb
00013413 l     F .text	00000021 outb
0004e400 l     O .bss	00000340 console_table
0004e740 l     O .bss	00000004 curr_console_index
00013434 l     F .text	00000074 read_cursor_pos
000134a8 l     F .text	000000a6 update_cursor_pos
0001354e l     F .text	0000006d erase_rows
000135bb l     F .text	00000094 scroll_up
0001364f l     F .text	00000010 move_to_col0
0001365f l     F .text	00000038 move_to_next_line
00013697 l     F .text	00000077 move_forward
0001370e l     F .text	00000095 show_char
000137a3 l     F .text	00000078 move_backword
0001381b l     F .text	0000003a erase_backword
00013855 l     F .text	00000087 clear_display
000138dc l     F .text	00000051 print_table
00013a38 l     F .text	000000b2 write_normal
00013aea l     F .text	0000001e save_cursor
00013b08 l     F .text	0000001e restore_cursor
00013b26 l     F .text	00000029 clear_esc_param
00013b4f l     F .text	0000007e write_esc
00013bcd l     F .text	0000009a set_font_style
00019420 l     O .rodata	00000020 color_table.0
00013c67 l     F .text	0000004f erase_in_display
00013cb6 l     F .text	00000022 move_cursor
00013cd8 l     F .text	00000039 move_left
00013d11 l     F .text	00000045 move_right
00013d56 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001b050 l     O .data	0000000c dev_des_table
0004e760 l     O .bss	00000a00 dev_table
0001403a l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 disk.c
0001433f l     F .text	0000001d inb
0001435c l     F .text	00000021 outb
0001437d l     F .text	00000021 outw
0001439e l     F .text	0000001f inw
0004f160 l     O .bss	00000250 disk_table
0004f3b0 l     O .bss	00000014 mutex
0004f3c4 l     O .bss	00000010 op_sem
0004f3d4 l     O .bss	00000001 task_on_op
000143bd l     F .text	00000130 disk_send_cmd
000144ed l     F .text	00000051 disk_read_data
0001453e l     F .text	00000051 disk_write_data
0001458f l     F .text	0000004f disk_wait_data
000145de l     F .text	00000115 detect_part_info
000146f3 l     F .text	00000129 identify_disk
0001481c l     F .text	000000c8 print_disk_info
00000000 l    df *ABS*	00000000 keyboard.c
00014d94 l     F .text	0000001d inb
000195a0 l     O .rodata	00000200 map_table
0004f3d8 l     O .bss	00000004 kbd_state
00014db1 l     F .text	0000001a is_make_code
00014dcb l     F .text	00000015 get_key
00014de0 l     F .text	00000043 do_fx_key
00014e23 l     F .text	000001e0 do_normal_key
00015003 l     F .text	0000008e do_e0_key
0004f3dc l     O .bss	00000001 is_inited.1
0004f3e0 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
000151a9 l     F .text	00000021 outb
0004f3e4 l     O .bss	00000004 sys_tick
000151f2 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004f400 l     O .bss	000022a0 tty_table
000516a0 l     O .bss	00000004 curr_tty_index
0001526c l     F .text	0000004f get_tty
000152bb l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 devfs.c
0001b0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
0001596a l     F .text	0000002a cluster_is_valid
00015994 l     F .text	0000005b cache_read_sector
000159ef l     F .text	000000be cluster_get_next
00015aad l     F .text	00000083 move_file_pos
00015b8d l     F .text	00000063 read_from_diritem
00015bf0 l     F .text	000000b5 diritem_get_name
00015ca5 l     F .text	00000036 diritem_name_match
00015cdb l     F .text	00000085 read_dir_entry
00000000 l    df *ABS*	00000000 file.c
000516c0 l     O .bss	00024000 file_table
000756c0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
0001648e l     F .text	0000002d list_node_next
00019c00 l     O .rodata	0000000f __func__.3
000164bb l     F .text	00000047 list_init
00019c1c l     O .rodata	0000000a __func__.1
00016502 l     F .text	0000002c list_get_first
00019bf0 l     O .rodata	0000000f __func__.4
000756e0 l     O .bss	0000000c mounted_list
00075700 l     O .bss	000016f8 fs_table
00076df8 l     O .bss	0000000c free_list
00076e04 l     O .bss	00000004 root_fs
00076e08 l     O .bss	00000004 temp_pos
0001652e l     F .text	0000001d is_fd_bad
0001654b l     F .text	00000021 is_path_valid
00016663 l     F .text	0000002b fs_protect
0001668e l     F .text	0000002b fs_unprotect
00019c10 l     O .rodata	0000000a __func__.2
00016eda l     F .text	00000060 mount_list_init
00016f3a l     F .text	00000026 get_fs_op
00016f60 l     F .text	000001b7 mount
00019c28 l     O .rodata	00000008 __func__.0
00000000 l    df *ABS*	00000000 init.c
00019ccc l     O .rodata	0000000c __func__.1
00019cd8 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
0001729b l     F .text	00000047 list_init
00019d98 l     O .rodata	0000000a __func__.1
000172e2 l     F .text	00000035 list_is_empty
00019da4 l     O .rodata	0000000e __func__.0
00019d8c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000174da l     F .text	00000047 list_init
00019e58 l     O .rodata	0000000a __func__.1
00017521 l     F .text	00000035 list_is_empty
00019e64 l     O .rodata	0000000e __func__.0
00019e4c l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
000176e0 l     F .text	00000047 list_init
00019f78 l     O .rodata	0000000a __func__.3
00017727 l     F .text	0000002d list_get_size
00019f84 l     O .rodata	0000000e __func__.2
00017754 l     F .text	0000002c list_get_first
00019fa4 l     O .rodata	0000000f __func__.0
00017780 l     F .text	0000002d list_get_last
00019f94 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00017a88 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001a078 l     O .rodata	0000000c __func__.3
0001a084 l     O .rodata	0000000f __func__.2
0001a094 l     O .rodata	0000000f __func__.1
0001a0a4 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001b16c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000183cb l     F .text	00000035 list_is_empty
0001a1ac l     O .rodata	0000000e __func__.5
00018400 l     F .text	0000002d list_get_size
0001a1e4 l     O .rodata	0000000e __func__.2
0001a198 l     O .rodata	00000012 __func__.6
0001a1bc l     O .rodata	00000011 __func__.4
0001a1d0 l     O .rodata	00000012 __func__.3
0001a1f4 l     O .rodata	00000011 __func__.1
0001a208 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00076e0c l     O .bss	00000014 mutex
00076e20 l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
00015b30 g     F .text	0000005d diritem_get_type
00017b6f g     F .text	00000078 bitmap_get_bit
00017f59 g     F .text	0000004f kernel_memcpy
00016b1c g     F .text	00000109 sys_close
000131a9 g     F .text	00000098 idt_enable
000119b1 g     F .text	0000000a task_current
00016613 g     F .text	00000050 path_begin_with
800001e0 g     F .first_task	0000001b yield
000184b8 g     F .text	0000008f list_insert_last
000112b9 g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fe8 g     F .text	00000126 sys_sbrk
00011ebf g     F .text	00000061 sys_yield
00012cbd g     F .text	0000001c do_handler_segment_not_present
000118ff g     F .text	00000042 task_set_ready
00017cef g     F .text	00000021 bitmap_is_set
000132e0 g     F .text	0000000b idt_enable_global
00017fa8 g     F .text	00000041 kernel_memset
00014224 g     F .text	0000004c dev_write
00016a6a g     F .text	000000b2 sys_lseek
00015091 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00014d8e g     F .text	00000006 disk_close
00013367 g     F .text	0000008f do_handler_syscall
00018358 g     F .text	0000002d strings_count
00018776 g     F .text	0000002f log_init
0001626b g     F .text	000000e4 fatfs_readdir
00011d36 g     F .text	00000189 sys_fork
00017263 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00014d53 g     F .text	0000000a disk_control
0001334d g     F .text	0000001a sys_print_msg
0001b140 g     O .data	0000002c fatfs_op
00017e0b g     F .text	00000047 kernel_strcpy
000132d5 g     F .text	0000000b idt_disable_global
0001b000 g       .data	00000000 s_data
80000010 g     F .first_task	000000af first_main
00012f1e g     F .text	00000043 idt_install
800001b3 g     F .first_task	0000002d execve
80000155 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012c15 g     F .text	0000001c do_handler_overflow
00012e92 g     F .text	0000001c do_handler_alignment_check
000168a9 g     F .text	000000fd sys_read
0001656c g     F .text	00000058 path_next_child
00016234 g     F .text	0000000a fatfs_write
00013f6a g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012cf5 g     F .text	000000b1 do_handler_general_protection
00012f02 g     F .text	0000001c do_handler_control_exception
000176b7 g     F .text	00000029 sem_count
00012ba5 g     F .text	0000001c do_handler_divider
00017be7 g     F .text	00000108 bitmap_set_bit
00012c85 g     F .text	0000001c do_handler_double_fault
0001634f g     F .text	0000000a fatfs_closedir
00012da6 g     F .text	000000d0 do_handler_page_fault
00015d60 g     F .text	00000234 fatfs_mount
800002ca g     F .first_task	00000021 isatty
0001608e g     F .text	000001a6 fatfs_read
0001012f g       .text	00000000 exception_handler_double_fault
000132eb g     F .text	00000039 pic_send_eoi
000185f8 g     F .text	000000b5 list_remove_last
000118f5 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00017598 g     F .text	00000080 sem_wait
00010e27 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00016c25 g     F .text	000000b6 sys_fstat
000141d8 g     F .text	0000004c dev_read
00016244 g     F .text	0000000a fatfs_seek
00012846 g     F .text	000000b3 gdt_init
0001623e g     F .text	00000006 fatfs_close
00012ee6 g     F .text	0000001c do_handler_virtual_exception
00015960 g     F .text	0000000a devfs_stat
000100bb g       .text	00000000 exception_handler_overflow
000102d2 g       .text	00000000 simple_switch
00015f94 g     F .text	0000003c fatfs_unmount
00014d5d g     F .text	00000031 do_handler_primary_disk
8000029d g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012bc1 g     F .text	0000001c do_handler_debug
00076e30 g     O .bss	00002000 stack
00011c70 g     F .text	00000060 sys_sleep
000148e4 g     F .text	000000f9 disk_init
00017117 g     F .text	00000090 fs_init
00016456 g     F .text	00000038 file_inc_ref
00010e79 g     F .text	00000099 memory_free_page
000177ad g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00079000 g       *ABS*	00000000 s_first_task
0001133c g     F .text	00000028 task_remove_fd
0001570c g     F .text	0000000a tty_control
0001392d g     F .text	0000010b console_init
000155f0 g     F .text	0000011c tty_read
00011678 g     F .text	00000090 task_uninit
00010d6f g     F .text	000000b8 memory_alloc_for_page_dir
0001538a g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
0001571c g     F .text	00000066 tty_in
00012ff4 g     F .text	000001b5 idt_init
00017618 g     F .text	0000009f sem_notify
00010f65 g     F .text	00000083 memory_copy_uvm_data
00014270 g     F .text	0000004c dev_control
000150df g     F .text	000000ca do_handler_kbd
0001296e g     F .text	00000027 gdt_free
00012c4d g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00016e37 g     F .text	00000053 sys_readdir
00012e76 g     F .text	0000001c do_handler_fpu_error
000117ef g     F .text	00000106 task_first_init
00012eae g     F .text	0000001c do_handler_machine_check
8000024f g     F .first_task	0000002d write
000166b9 g     F .text	000001f0 sys_open
800002eb g     F .first_task	00000027 fstat
00016cdb g     F .text	0000006b sys_isatty
0001842d g     F .text	0000008b list_insert_first
0001408e g     F .text	0000014a dev_open
000165c4 g     F .text	0000004f path_to_num
00011b8a g     F .text	0000004b task_set_wakeup
00011983 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
0001b060 g     O .data	0000002c dev_disk_desc
800000df g     F .first_task	0000004c sys_call
0001097d g     F .text	00000085 memory_creat_uvm
00017e52 g     F .text	00000051 kernel_strncpy
000169a6 g     F .text	000000c4 sys_write
80000376 g     F .first_task	00000021 wait
00079397 g       *ABS*	00000000 mem_free_start
000171a7 g     F .text	00000058 kernel_init
00017556 g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
00018091 g     F .text	0000019d kernel_vsprintf
00018385 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
000142bc g     F .text	00000083 dev_close
00079000 g       .first_task	00000000 e_data
80000222 g     F .first_task	0000002d read
00017364 g     F .text	000000a6 mutex_lock
00016e8a g     F .text	00000050 sys_closedir
000112e9 g     F .text	00000053 task_alloc_fd
00015956 g     F .text	0000000a devfs_seek
00010209 g       .text	00000000 exception_handler_machine_check
00015500 g     F .text	000000f0 tty_write
00012ca1 g     F .text	0000001c do_handler_invalid_tss
000152f2 g     F .text	00000098 tty_fifo_put
000102b5 g       .text	00000000 exception_handler_primary_disk
00013241 g     F .text	00000094 idt_disable
00079397 g       *ABS*	00000000 e_first_task
00011b2e g     F .text	0000005c task_set_sleep
00016d46 g     F .text	0000009e sys_dup
00010813 g     F .text	000000b6 memory_creat_map
000157ab g     F .text	0000001b devfs_mount
00012bdd g     F .text	0000001c do_handler_nmi
00015417 g     F .text	000000e9 tty_open
80000198 g     F .first_task	0000001b fork
00017317 g     F .text	0000004d mutex_init
80000312 g     F .first_task	00000021 sbrk
0001b100 g     O .data	0000002c devfs_op
000157cc g     F .text	00000127 devfs_open
00010226 g       .text	00000000 exception_handler_smd_exception
00010b8f g     F .text	000000e7 memory_destroy_uvm
00017ac5 g     F .text	00000016 bitmap_byte_count
00012c69 g     F .text	0000001c do_handler_device_unavailable
00013324 g     F .text	00000018 idt_enter_protection
00016258 g     F .text	00000013 fatfs_opendir
000108c9 g     F .text	000000b4 create_kernal_table
00011a23 g     F .text	0000010b task_slice_end
00010a02 g     F .text	0000018d memory_copy_uvm
00015716 g     F .text	00000006 tty_close
00015917 g     F .text	00000024 devfs_write
000171ff g     F .text	00000064 move_to_first_task
0001593b g     F .text	0000001b devfs_close
00013e5a g     F .text	0000010a console_write
80000333 g     F .first_task	00000021 dup
00017fe9 g     F .text	00000084 kernel_memcmp
00012eca g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012b89 g     F .text	0000001c do_handler_unknown
00010e59 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011383 g     F .text	0000001b task_switch_from_to
0001740a g     F .text	000000d0 mutex_unlock
00016359 g     F .text	00000030 file_table_init
00016414 g     F .text	00000042 file_free
000119bb g     F .text	00000068 task_switch
80000170 g     F .first_task	00000028 print_msg
00017f24 g     F .text	00000035 kernel_strlen
00011941 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00012787 g     F .text	000000bf segment_desc_set
00012c31 g     F .text	0000001c do_handler_bound_range
000102e7 g       .text	00000000 exception_handler_syscall
000149dd g     F .text	000000ee disk_open
00015fd0 g     F .text	000000be fatfs_open
00018547 g     F .text	000000b1 list_remove_first
0001a214 g       .rodata	00000000 e_text
00017ea3 g     F .text	00000081 kernel_strncmp
00016de4 g     F .text	00000053 sys_opendir
00017adb g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
0001624e g     F .text	0000000a fatfs_stat
00017d10 g     F .text	000000fb bitmap_alloc_nbits
00016389 g     F .text	0000008b file_alloc
00011712 g     F .text	000000dd task_manager_init
00011513 g     F .text	00000036 task_start
00010c76 g     F .text	000000f9 memory_init
00012338 g     F .text	000001af sys_execve
00014c0f g     F .text	00000144 disk_write
00012636 g     F .text	000000e2 sys_wait
000124e7 g     F .text	0000014f sys_exit
00017a8f g     F .text	00000036 pannic
00015782 g     F .text	00000029 tty_select
00013f64 g     F .text	00000006 console_close
00010f12 g     F .text	00000053 memory_get_paddr
00012cd9 g     F .text	0000001c do_handler_stack_segment_fault
00012bf9 g     F .text	0000001c do_handler_breakpoint
000157c6 g     F .text	00000006 devfs_unmount
80000354 g     F .first_task	00000022 _exit
000158f3 g     F .text	00000024 devfs_read
000187a5 g     F .text	0000009e log_printf
00011549 g     F .text	0000012f task_init
00014acb g     F .text	00000144 disk_read
800001fb g     F .first_task	00000027 open
0001806d g     F .text	00000024 kernel_sprintf
00011cd0 g     F .text	0000000d sys_getpid
000128f9 g     F .text	00000075 gdt_alloc_desc
0001822e g     F .text	0000012a kernel_itoa
000186ad g     F .text	000000c9 list_remove
00012718 g     F .text	00000047 gate_desc_set
8000012b g     F .first_task	0000002a msleep
0001333c g     F .text	00000011 idt_leave_protection
8000027c g     F .first_task	00000021 close
00010763 g     F .text	000000b0 find_pte
000151ca g     F .text	00000028 do_handler_time
00015254 g     F .text	00000018 time_init
0001b0a0 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 9c 71 00 00       	call   171a7 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 30 8e 07 00       	mov    $0x78e30,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 39 72 00 00       	jmp    17263 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 4e 2b 00 00       	call   12b89 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 4d 2b 00 00       	call   12ba5 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 4c 2b 00 00       	call   12bc1 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 4b 2b 00 00       	call   12bdd <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 4a 2b 00 00       	call   12bf9 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 49 2b 00 00       	call   12c15 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 48 2b 00 00       	call   12c31 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 47 2b 00 00       	call   12c4d <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 46 2b 00 00       	call   12c69 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 47 2b 00 00       	call   12c85 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 48 2b 00 00       	call   12ca1 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 49 2b 00 00       	call   12cbd <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 4a 2b 00 00       	call   12cd9 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 4b 2b 00 00       	call   12cf5 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 e1 2b 00 00       	call   12da6 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 94 2c 00 00       	call   12e76 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 95 2c 00 00       	call   12e92 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 94 2c 00 00       	call   12eae <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 93 2c 00 00       	call   12eca <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 92 2c 00 00       	call   12ee6 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 93 2c 00 00       	call   12f02 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 3e 4f 00 00       	call   151ca <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                  0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 36 4e 00 00       	call   150df <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <exception_handler_primary_disk>:
//磁盘的中断处理函数
exception_handler primary_disk          0x2E, 0
   102b5:	6a 00                	push   $0x0
   102b7:	6a 2e                	push   $0x2e
   102b9:	60                   	pusha  
   102ba:	1e                   	push   %ds
   102bb:	06                   	push   %es
   102bc:	0f a0                	push   %fs
   102be:	0f a8                	push   %gs
   102c0:	54                   	push   %esp
   102c1:	e8 97 4a 00 00       	call   14d5d <do_handler_primary_disk>
   102c6:	5c                   	pop    %esp
   102c7:	0f a9                	pop    %gs
   102c9:	0f a1                	pop    %fs
   102cb:	07                   	pop    %es
   102cc:	1f                   	pop    %ds
   102cd:	61                   	popa   
   102ce:	83 c4 08             	add    $0x8,%esp
   102d1:	cf                   	iret   

000102d2 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102d2:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102d6:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102da:	55                   	push   %ebp
    push %ebx
   102db:	53                   	push   %ebx
    push %esi
   102dc:	56                   	push   %esi
    push %edi
   102dd:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102de:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102e0:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102e2:	5f                   	pop    %edi
    pop %esi
   102e3:	5e                   	pop    %esi
    pop %ebx
   102e4:	5b                   	pop    %ebx
    pop %ebp
   102e5:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102e6:	c3                   	ret    

000102e7 <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102e7:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102e8:	1e                   	push   %ds
    push %es
   102e9:	06                   	push   %es
    push %fs
   102ea:	0f a0                	push   %fs
    push %gs
   102ec:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102ee:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102ef:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102f0:	e8 72 30 00 00       	call   13367 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102f5:	5c                   	pop    %esp
    popf
   102f6:	9d                   	popf   
    pop %gs
   102f7:	0f a9                	pop    %gs
    pop %fs
   102f9:	0f a1                	pop    %fs
    pop %es
   102fb:	07                   	pop    %es
    pop %ds
   102fc:	1f                   	pop    %ds
    popa
   102fd:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102fe:	ca 14 00             	lret   $0x14

00010301 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   10301:	55                   	push   %ebp
   10302:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   10304:	8b 45 0c             	mov    0xc(%ebp),%eax
   10307:	f7 d8                	neg    %eax
   10309:	23 45 08             	and    0x8(%ebp),%eax
}
   1030c:	5d                   	pop    %ebp
   1030d:	c3                   	ret    

0001030e <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   1030e:	55                   	push   %ebp
   1030f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10311:	8b 55 08             	mov    0x8(%ebp),%edx
   10314:	8b 45 0c             	mov    0xc(%ebp),%eax
   10317:	01 d0                	add    %edx,%eax
   10319:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	21 d0                	and    %edx,%eax
}
   10323:	5d                   	pop    %ebp
   10324:	c3                   	ret    

00010325 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10325:	55                   	push   %ebp
   10326:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10328:	8b 45 08             	mov    0x8(%ebp),%eax
   1032b:	0f 22 d8             	mov    %eax,%cr3
}
   1032e:	90                   	nop
   1032f:	5d                   	pop    %ebp
   10330:	c3                   	ret    

00010331 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10331:	55                   	push   %ebp
   10332:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10334:	8b 45 08             	mov    0x8(%ebp),%eax
   10337:	c1 e8 16             	shr    $0x16,%eax
}
   1033a:	5d                   	pop    %ebp
   1033b:	c3                   	ret    

0001033c <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1033c:	55                   	push   %ebp
   1033d:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   1033f:	8b 45 08             	mov    0x8(%ebp),%eax
   10342:	c1 e8 0c             	shr    $0xc,%eax
   10345:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1034a:	5d                   	pop    %ebp
   1034b:	c3                   	ret    

0001034c <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1034c:	55                   	push   %ebp
   1034d:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   1034f:	8b 45 08             	mov    0x8(%ebp),%eax
   10352:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10356:	c0 ea 04             	shr    $0x4,%dl
   10359:	0f b6 ca             	movzbl %dl,%ecx
   1035c:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10360:	c1 e2 04             	shl    $0x4,%edx
   10363:	09 ca                	or     %ecx,%edx
   10365:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10369:	c1 e0 0c             	shl    $0xc,%eax
   1036c:	09 d0                	or     %edx,%eax
   1036e:	c1 e0 0c             	shl    $0xc,%eax
}
   10371:	5d                   	pop    %ebp
   10372:	c3                   	ret    

00010373 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10373:	55                   	push   %ebp
   10374:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1037d:	c0 ea 04             	shr    $0x4,%dl
   10380:	0f b6 ca             	movzbl %dl,%ecx
   10383:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10387:	c1 e2 04             	shl    $0x4,%edx
   1038a:	09 ca                	or     %ecx,%edx
   1038c:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10390:	c1 e0 0c             	shl    $0xc,%eax
   10393:	09 d0                	or     %edx,%eax
   10395:	c1 e0 0c             	shl    $0xc,%eax
}
   10398:	5d                   	pop    %ebp
   10399:	c3                   	ret    

0001039a <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1039a:	55                   	push   %ebp
   1039b:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 00                	mov    (%eax),%eax
   103a2:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103a7:	5d                   	pop    %ebp
   103a8:	c3                   	ret    

000103a9 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   103a9:	55                   	push   %ebp
   103aa:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   103ac:	ff 75 08             	push   0x8(%ebp)
   103af:	e8 71 ff ff ff       	call   10325 <write_cr3>
   103b4:	83 c4 04             	add    $0x4,%esp
}
   103b7:	90                   	nop
   103b8:	c9                   	leave  
   103b9:	c3                   	ret    

000103ba <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   103ba:	55                   	push   %ebp
   103bb:	89 e5                	mov    %esp,%ebp
   103bd:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 50 1c             	mov    0x1c(%eax),%edx
   103c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103c7:	29 d0                	sub    %edx,%eax
   103c9:	89 c1                	mov    %eax,%ecx
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	8b 58 24             	mov    0x24(%eax),%ebx
   103d1:	89 c8                	mov    %ecx,%eax
   103d3:	ba 00 00 00 00       	mov    $0x0,%edx
   103d8:	f7 f3                	div    %ebx
}
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103e5:	ff 75 0c             	push   0xc(%ebp)
   103e8:	ff 75 08             	push   0x8(%ebp)
   103eb:	e8 ca ff ff ff       	call   103ba <page_index>
   103f0:	83 c4 08             	add    $0x8,%esp
   103f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103f6:	8b 45 08             	mov    0x8(%ebp),%eax
   103f9:	83 ec 0c             	sub    $0xc,%esp
   103fc:	50                   	push   %eax
   103fd:	e8 62 6f 00 00       	call   17364 <mutex_lock>
   10402:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   10405:	8b 55 08             	mov    0x8(%ebp),%edx
   10408:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1040b:	01 d0                	add    %edx,%eax
   1040d:	83 c0 28             	add    $0x28,%eax
   10410:	0f b6 00             	movzbl (%eax),%eax
   10413:	8d 50 01             	lea    0x1(%eax),%edx
   10416:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10419:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	83 c0 28             	add    $0x28,%eax
   10421:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	83 ec 0c             	sub    $0xc,%esp
   10429:	50                   	push   %eax
   1042a:	e8 db 6f 00 00       	call   1740a <mutex_unlock>
   1042f:	83 c4 10             	add    $0x10,%esp
 }
   10432:	90                   	nop
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1043b:	ff 75 0c             	push   0xc(%ebp)
   1043e:	ff 75 08             	push   0x8(%ebp)
   10441:	e8 74 ff ff ff       	call   103ba <page_index>
   10446:	83 c4 08             	add    $0x8,%esp
   10449:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1044c:	8b 45 08             	mov    0x8(%ebp),%eax
   1044f:	83 ec 0c             	sub    $0xc,%esp
   10452:	50                   	push   %eax
   10453:	e8 0c 6f 00 00       	call   17364 <mutex_lock>
   10458:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1045b:	8b 55 08             	mov    0x8(%ebp),%edx
   1045e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10461:	01 d0                	add    %edx,%eax
   10463:	83 c0 28             	add    $0x28,%eax
   10466:	0f b6 00             	movzbl (%eax),%eax
   10469:	84 c0                	test   %al,%al
   1046b:	74 1e                	je     1048b <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   1046d:	8b 55 08             	mov    0x8(%ebp),%edx
   10470:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10473:	01 d0                	add    %edx,%eax
   10475:	83 c0 28             	add    $0x28,%eax
   10478:	0f b6 00             	movzbl (%eax),%eax
   1047b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1047e:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10481:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10484:	01 c8                	add    %ecx,%eax
   10486:	83 c0 28             	add    $0x28,%eax
   10489:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	83 ec 0c             	sub    $0xc,%esp
   10491:	50                   	push   %eax
   10492:	e8 73 6f 00 00       	call   1740a <mutex_unlock>
   10497:	83 c4 10             	add    $0x10,%esp
 }
   1049a:	90                   	nop
   1049b:	c9                   	leave  
   1049c:	c3                   	ret    

0001049d <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   1049d:	55                   	push   %ebp
   1049e:	89 e5                	mov    %esp,%ebp
   104a0:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   104a3:	ff 75 0c             	push   0xc(%ebp)
   104a6:	ff 75 08             	push   0x8(%ebp)
   104a9:	e8 0c ff ff ff       	call   103ba <page_index>
   104ae:	83 c4 08             	add    $0x8,%esp
   104b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   104b4:	8b 45 08             	mov    0x8(%ebp),%eax
   104b7:	83 ec 0c             	sub    $0xc,%esp
   104ba:	50                   	push   %eax
   104bb:	e8 a4 6e 00 00       	call   17364 <mutex_lock>
   104c0:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104c3:	8b 55 08             	mov    0x8(%ebp),%edx
   104c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c9:	01 d0                	add    %edx,%eax
   104cb:	83 c0 28             	add    $0x28,%eax
   104ce:	0f b6 00             	movzbl (%eax),%eax
   104d1:	0f b6 c0             	movzbl %al,%eax
   104d4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104d7:	8b 45 08             	mov    0x8(%ebp),%eax
   104da:	83 ec 0c             	sub    $0xc,%esp
   104dd:	50                   	push   %eax
   104de:	e8 27 6f 00 00       	call   1740a <mutex_unlock>
   104e3:	83 c4 10             	add    $0x10,%esp

  return ref;
   104e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104e9:	c9                   	leave  
   104ea:	c3                   	ret    

000104eb <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104eb:	55                   	push   %ebp
   104ec:	89 e5                	mov    %esp,%ebp
   104ee:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104f1:	8b 45 08             	mov    0x8(%ebp),%eax
   104f4:	83 ec 0c             	sub    $0xc,%esp
   104f7:	50                   	push   %eax
   104f8:	e8 67 6e 00 00       	call   17364 <mutex_lock>
   104fd:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   10500:	8b 45 08             	mov    0x8(%ebp),%eax
   10503:	8b 40 20             	mov    0x20(%eax),%eax
   10506:	8b 55 08             	mov    0x8(%ebp),%edx
   10509:	8b 4a 24             	mov    0x24(%edx),%ecx
   1050c:	ba 00 00 00 00       	mov    $0x0,%edx
   10511:	f7 f1                	div    %ecx
   10513:	89 c2                	mov    %eax,%edx
   10515:	8b 45 08             	mov    0x8(%ebp),%eax
   10518:	83 c0 28             	add    $0x28,%eax
   1051b:	83 ec 04             	sub    $0x4,%esp
   1051e:	52                   	push   %edx
   1051f:	6a 00                	push   $0x0
   10521:	50                   	push   %eax
   10522:	e8 81 7a 00 00       	call   17fa8 <kernel_memset>
   10527:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1052a:	8b 45 08             	mov    0x8(%ebp),%eax
   1052d:	83 ec 0c             	sub    $0xc,%esp
   10530:	50                   	push   %eax
   10531:	e8 d4 6e 00 00       	call   1740a <mutex_unlock>
   10536:	83 c4 10             	add    $0x10,%esp
}
   10539:	90                   	nop
   1053a:	c9                   	leave  
   1053b:	c3                   	ret    

0001053c <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1053c:	55                   	push   %ebp
   1053d:	89 e5                	mov    %esp,%ebp
   1053f:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	83 ec 0c             	sub    $0xc,%esp
   10548:	50                   	push   %eax
   10549:	e8 c9 6d 00 00       	call   17317 <mutex_init>
   1054e:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10551:	8b 45 08             	mov    0x8(%ebp),%eax
   10554:	8b 55 10             	mov    0x10(%ebp),%edx
   10557:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 55 14             	mov    0x14(%ebp),%edx
   10560:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10563:	8b 45 08             	mov    0x8(%ebp),%eax
   10566:	8b 55 18             	mov    0x18(%ebp),%edx
   10569:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1056c:	8b 45 08             	mov    0x8(%ebp),%eax
   1056f:	8b 40 20             	mov    0x20(%eax),%eax
   10572:	8b 55 08             	mov    0x8(%ebp),%edx
   10575:	8b 4a 24             	mov    0x24(%edx),%ecx
   10578:	ba 00 00 00 00       	mov    $0x0,%edx
   1057d:	f7 f1                	div    %ecx
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 08             	mov    0x8(%ebp),%eax
   10584:	83 c0 14             	add    $0x14,%eax
   10587:	6a 00                	push   $0x0
   10589:	52                   	push   %edx
   1058a:	ff 75 0c             	push   0xc(%ebp)
   1058d:	50                   	push   %eax
   1058e:	e8 48 75 00 00       	call   17adb <bitmap_init>
   10593:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	8b 40 20             	mov    0x20(%eax),%eax
   1059c:	8b 55 08             	mov    0x8(%ebp),%edx
   1059f:	8b 4a 24             	mov    0x24(%edx),%ecx
   105a2:	ba 00 00 00 00       	mov    $0x0,%edx
   105a7:	f7 f1                	div    %ecx
   105a9:	89 c2                	mov    %eax,%edx
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	83 c0 28             	add    $0x28,%eax
   105b1:	83 ec 04             	sub    $0x4,%esp
   105b4:	52                   	push   %edx
   105b5:	6a 00                	push   $0x0
   105b7:	50                   	push   %eax
   105b8:	e8 eb 79 00 00       	call   17fa8 <kernel_memset>
   105bd:	83 c4 10             	add    $0x10,%esp
}
   105c0:	90                   	nop
   105c1:	c9                   	leave  
   105c2:	c3                   	ret    

000105c3 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105c3:	55                   	push   %ebp
   105c4:	89 e5                	mov    %esp,%ebp
   105c6:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105d0:	8b 45 08             	mov    0x8(%ebp),%eax
   105d3:	83 ec 0c             	sub    $0xc,%esp
   105d6:	50                   	push   %eax
   105d7:	e8 88 6d 00 00       	call   17364 <mutex_lock>
   105dc:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	83 c0 14             	add    $0x14,%eax
   105e5:	83 ec 04             	sub    $0x4,%esp
   105e8:	ff 75 0c             	push   0xc(%ebp)
   105eb:	6a 00                	push   $0x0
   105ed:	50                   	push   %eax
   105ee:	e8 1d 77 00 00       	call   17d10 <bitmap_alloc_nbits>
   105f3:	83 c4 10             	add    $0x10,%esp
   105f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105fd:	78 17                	js     10616 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	8b 50 24             	mov    0x24(%eax),%edx
   1060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060e:	0f af c2             	imul   %edx,%eax
   10611:	01 c8                	add    %ecx,%eax
   10613:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	83 ec 0c             	sub    $0xc,%esp
   1061c:	50                   	push   %eax
   1061d:	e8 e8 6d 00 00       	call   1740a <mutex_unlock>
   10622:	83 c4 10             	add    $0x10,%esp

  return addr;
   10625:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10628:	c9                   	leave  
   10629:	c3                   	ret    

0001062a <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1062a:	55                   	push   %ebp
   1062b:	89 e5                	mov    %esp,%ebp
   1062d:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10630:	8b 45 08             	mov    0x8(%ebp),%eax
   10633:	83 ec 0c             	sub    $0xc,%esp
   10636:	50                   	push   %eax
   10637:	e8 28 6d 00 00       	call   17364 <mutex_lock>
   1063c:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   1063f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10646:	eb 64                	jmp    106ac <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   10648:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1064b:	c1 e0 0c             	shl    $0xc,%eax
   1064e:	89 c2                	mov    %eax,%edx
   10650:	8b 45 0c             	mov    0xc(%ebp),%eax
   10653:	01 d0                	add    %edx,%eax
   10655:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   10658:	83 ec 08             	sub    $0x8,%esp
   1065b:	ff 75 f0             	push   -0x10(%ebp)
   1065e:	ff 75 08             	push   0x8(%ebp)
   10661:	e8 cf fd ff ff       	call   10435 <page_ref_sub>
   10666:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   10669:	83 ec 08             	sub    $0x8,%esp
   1066c:	ff 75 f0             	push   -0x10(%ebp)
   1066f:	ff 75 08             	push   0x8(%ebp)
   10672:	e8 26 fe ff ff       	call   1049d <get_page_ref>
   10677:	83 c4 10             	add    $0x10,%esp
   1067a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   1067d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10681:	75 25                	jne    106a8 <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10683:	83 ec 08             	sub    $0x8,%esp
   10686:	ff 75 f0             	push   -0x10(%ebp)
   10689:	ff 75 08             	push   0x8(%ebp)
   1068c:	e8 29 fd ff ff       	call   103ba <page_index>
   10691:	83 c4 10             	add    $0x10,%esp
   10694:	8b 55 08             	mov    0x8(%ebp),%edx
   10697:	83 c2 14             	add    $0x14,%edx
   1069a:	6a 00                	push   $0x0
   1069c:	6a 01                	push   $0x1
   1069e:	50                   	push   %eax
   1069f:	52                   	push   %edx
   106a0:	e8 42 75 00 00       	call   17be7 <bitmap_set_bit>
   106a5:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   106a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106af:	3b 45 10             	cmp    0x10(%ebp),%eax
   106b2:	7c 94                	jl     10648 <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	83 ec 0c             	sub    $0xc,%esp
   106ba:	50                   	push   %eax
   106bb:	e8 4a 6d 00 00       	call   1740a <mutex_unlock>
   106c0:	83 c4 10             	add    $0x10,%esp
}
   106c3:	90                   	nop
   106c4:	c9                   	leave  
   106c5:	c3                   	ret    

000106c6 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106c6:	55                   	push   %ebp
   106c7:	89 e5                	mov    %esp,%ebp
   106c9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106cc:	83 ec 0c             	sub    $0xc,%esp
   106cf:	68 60 88 01 00       	push   $0x18860
   106d4:	e8 cc 80 00 00       	call   187a5 <log_printf>
   106d9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106e3:	eb 29                	jmp    1070e <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106e5:	8b 45 08             	mov    0x8(%ebp),%eax
   106e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106eb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106ef:	8b 45 08             	mov    0x8(%ebp),%eax
   106f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106f5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106f8:	52                   	push   %edx
   106f9:	50                   	push   %eax
   106fa:	ff 75 f4             	push   -0xc(%ebp)
   106fd:	68 6d 88 01 00       	push   $0x1886d
   10702:	e8 9e 80 00 00       	call   187a5 <log_printf>
   10707:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1070a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1070e:	8b 45 08             	mov    0x8(%ebp),%eax
   10711:	8b 40 50             	mov    0x50(%eax),%eax
   10714:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10717:	7c cc                	jl     106e5 <show_mem_info+0x1f>
    }

    log_printf("\n");
   10719:	83 ec 0c             	sub    $0xc,%esp
   1071c:	68 80 88 01 00       	push   $0x18880
   10721:	e8 7f 80 00 00       	call   187a5 <log_printf>
   10726:	83 c4 10             	add    $0x10,%esp
}
   10729:	90                   	nop
   1072a:	c9                   	leave  
   1072b:	c3                   	ret    

0001072c <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1072c:	55                   	push   %ebp
   1072d:	89 e5                	mov    %esp,%ebp
   1072f:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10732:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10739:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10740:	eb 11                	jmp    10753 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10742:	8b 45 08             	mov    0x8(%ebp),%eax
   10745:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10748:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1074c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1074f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10753:	8b 45 08             	mov    0x8(%ebp),%eax
   10756:	8b 40 50             	mov    0x50(%eax),%eax
   10759:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1075c:	7c e4                	jl     10742 <total_mem_size+0x16>
    }

    return mem_size;
   1075e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10761:	c9                   	leave  
   10762:	c3                   	ret    

00010763 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10763:	55                   	push   %ebp
   10764:	89 e5                	mov    %esp,%ebp
   10766:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10769:	ff 75 0c             	push   0xc(%ebp)
   1076c:	e8 c0 fb ff ff       	call   10331 <pde_index>
   10771:	83 c4 04             	add    $0x4,%esp
   10774:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	01 d0                	add    %edx,%eax
   10780:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10783:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10786:	0f b6 00             	movzbl (%eax),%eax
   10789:	83 e0 01             	and    $0x1,%eax
   1078c:	84 c0                	test   %al,%al
   1078e:	74 10                	je     107a0 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10790:	ff 75 f0             	push   -0x10(%ebp)
   10793:	e8 b4 fb ff ff       	call   1034c <pde_to_pt_addr>
   10798:	83 c4 04             	add    $0x4,%esp
   1079b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1079e:	eb 57                	jmp    107f7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   107a0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   107a4:	75 07                	jne    107ad <find_pte+0x4a>
      return (pte_t*)0;
   107a6:	b8 00 00 00 00       	mov    $0x0,%eax
   107ab:	eb 64                	jmp    10811 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   107ad:	83 ec 08             	sub    $0x8,%esp
   107b0:	6a 01                	push   $0x1
   107b2:	68 00 c0 01 00       	push   $0x1c000
   107b7:	e8 07 fe ff ff       	call   105c3 <addr_alloc_page>
   107bc:	83 c4 10             	add    $0x10,%esp
   107bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107c6:	75 07                	jne    107cf <find_pte+0x6c>
      return (pte_t*)0;
   107c8:	b8 00 00 00 00       	mov    $0x0,%eax
   107cd:	eb 42                	jmp    10811 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107d5:	83 ec 04             	sub    $0x4,%esp
   107d8:	68 00 10 00 00       	push   $0x1000
   107dd:	6a 00                	push   $0x0
   107df:	ff 75 f4             	push   -0xc(%ebp)
   107e2:	e8 c1 77 00 00       	call   17fa8 <kernel_memset>
   107e7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ed:	83 c8 07             	or     $0x7,%eax
   107f0:	89 c2                	mov    %eax,%edx
   107f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107f7:	83 ec 0c             	sub    $0xc,%esp
   107fa:	ff 75 0c             	push   0xc(%ebp)
   107fd:	e8 3a fb ff ff       	call   1033c <pte_index>
   10802:	83 c4 10             	add    $0x10,%esp
   10805:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1080c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080f:	01 d0                	add    %edx,%eax

}
   10811:	c9                   	leave  
   10812:	c3                   	ret    

00010813 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   10813:	55                   	push   %ebp
   10814:	89 e5                	mov    %esp,%ebp
   10816:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   10819:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10820:	e9 91 00 00 00       	jmp    108b6 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10825:	83 ec 04             	sub    $0x4,%esp
   10828:	6a 01                	push   $0x1
   1082a:	ff 75 0c             	push   0xc(%ebp)
   1082d:	ff 75 08             	push   0x8(%ebp)
   10830:	e8 2e ff ff ff       	call   10763 <find_pte>
   10835:	83 c4 10             	add    $0x10,%esp
   10838:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1083b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1083f:	75 17                	jne    10858 <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10841:	83 ec 0c             	sub    $0xc,%esp
   10844:	68 82 88 01 00       	push   $0x18882
   10849:	e8 57 7f 00 00       	call   187a5 <log_printf>
   1084e:	83 c4 10             	add    $0x10,%esp
      return -1;
   10851:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10856:	eb 6f                	jmp    108c7 <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085b:	0f b6 00             	movzbl (%eax),%eax
   1085e:	83 e0 01             	and    $0x1,%eax
   10861:	84 c0                	test   %al,%al
   10863:	74 1c                	je     10881 <memory_creat_map+0x6e>
   10865:	68 9d 88 01 00       	push   $0x1889d
   1086a:	68 fc 89 01 00       	push   $0x189fc
   1086f:	68 1d 01 00 00       	push   $0x11d
   10874:	68 b0 88 01 00       	push   $0x188b0
   10879:	e8 11 72 00 00       	call   17a8f <pannic>
   1087e:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10881:	8b 45 10             	mov    0x10(%ebp),%eax
   10884:	0b 45 18             	or     0x18(%ebp),%eax
   10887:	83 c8 01             	or     $0x1,%eax
   1088a:	89 c2                	mov    %eax,%edx
   1088c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088f:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10891:	83 ec 08             	sub    $0x8,%esp
   10894:	ff 75 10             	push   0x10(%ebp)
   10897:	68 00 c0 01 00       	push   $0x1c000
   1089c:	e8 3e fb ff ff       	call   103df <page_ref_add>
   108a1:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   108a4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   108ab:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   108b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108b9:	3b 45 14             	cmp    0x14(%ebp),%eax
   108bc:	0f 8c 63 ff ff ff    	jl     10825 <memory_creat_map+0x12>

  }

  return 1;
   108c2:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108c7:	c9                   	leave  
   108c8:	c3                   	ret    

000108c9 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108d6:	e9 92 00 00 00       	jmp    1096d <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108de:	c1 e0 04             	shl    $0x4,%eax
   108e1:	05 00 b0 01 00       	add    $0x1b000,%eax
   108e6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108ec:	8b 00                	mov    (%eax),%eax
   108ee:	68 00 10 00 00       	push   $0x1000
   108f3:	50                   	push   %eax
   108f4:	e8 08 fa ff ff       	call   10301 <down2>
   108f9:	83 c4 08             	add    $0x8,%esp
   108fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 08             	mov    0x8(%eax),%eax
   10905:	68 00 10 00 00       	push   $0x1000
   1090a:	50                   	push   %eax
   1090b:	e8 f1 f9 ff ff       	call   10301 <down2>
   10910:	83 c4 08             	add    $0x8,%esp
   10913:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10916:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10919:	8b 40 04             	mov    0x4(%eax),%eax
   1091c:	68 00 10 00 00       	push   $0x1000
   10921:	50                   	push   %eax
   10922:	e8 e7 f9 ff ff       	call   1030e <up2>
   10927:	83 c4 08             	add    $0x8,%esp
   1092a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1092d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10930:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10933:	c1 e8 0c             	shr    $0xc,%eax
   10936:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   10939:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1093c:	8b 40 0c             	mov    0xc(%eax),%eax
   1093f:	83 ec 0c             	sub    $0xc,%esp
   10942:	50                   	push   %eax
   10943:	ff 75 e0             	push   -0x20(%ebp)
   10946:	ff 75 e8             	push   -0x18(%ebp)
   10949:	ff 75 ec             	push   -0x14(%ebp)
   1094c:	68 00 40 02 00       	push   $0x24000
   10951:	e8 bd fe ff ff       	call   10813 <memory_creat_map>
   10956:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   10959:	83 ec 0c             	sub    $0xc,%esp
   1095c:	68 00 c0 01 00       	push   $0x1c000
   10961:	e8 85 fb ff ff       	call   104eb <clear_page_ref>
   10966:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10969:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1096d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10970:	83 f8 04             	cmp    $0x4,%eax
   10973:	0f 86 62 ff ff ff    	jbe    108db <create_kernal_table+0x12>

  }
}
   10979:	90                   	nop
   1097a:	90                   	nop
   1097b:	c9                   	leave  
   1097c:	c3                   	ret    

0001097d <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   1097d:	55                   	push   %ebp
   1097e:	89 e5                	mov    %esp,%ebp
   10980:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10983:	83 ec 08             	sub    $0x8,%esp
   10986:	6a 01                	push   $0x1
   10988:	68 00 c0 01 00       	push   $0x1c000
   1098d:	e8 31 fc ff ff       	call   105c3 <addr_alloc_page>
   10992:	83 c4 10             	add    $0x10,%esp
   10995:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10998:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1099c:	75 07                	jne    109a5 <memory_creat_uvm+0x28>
   1099e:	b8 00 00 00 00       	mov    $0x0,%eax
   109a3:	eb 5b                	jmp    10a00 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   109a5:	83 ec 04             	sub    $0x4,%esp
   109a8:	68 00 10 00 00       	push   $0x1000
   109ad:	6a 00                	push   $0x0
   109af:	ff 75 f0             	push   -0x10(%ebp)
   109b2:	e8 f1 75 00 00       	call   17fa8 <kernel_memset>
   109b7:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ba:	83 ec 0c             	sub    $0xc,%esp
   109bd:	68 00 00 00 80       	push   $0x80000000
   109c2:	e8 6a f9 ff ff       	call   10331 <pde_index>
   109c7:	83 c4 10             	add    $0x10,%esp
   109ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109d4:	eb 1f                	jmp    109f5 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109e3:	01 c2                	add    %eax,%edx
   109e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109e8:	8b 04 85 00 40 02 00 	mov    0x24000(,%eax,4),%eax
   109ef:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109fb:	77 d9                	ja     109d6 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10a00:	c9                   	leave  
   10a01:	c3                   	ret    

00010a02 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   10a02:	55                   	push   %ebp
   10a03:	89 e5                	mov    %esp,%ebp
   10a05:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10a08:	68 00 00 00 80       	push   $0x80000000
   10a0d:	e8 1f f9 ff ff       	call   10331 <pde_index>
   10a12:	83 c4 04             	add    $0x4,%esp
   10a15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   10a18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a22:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a25:	01 d0                	add    %edx,%eax
   10a27:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a30:	e9 2a 01 00 00       	jmp    10b5f <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a38:	0f b6 00             	movzbl (%eax),%eax
   10a3b:	83 e0 01             	and    $0x1,%eax
   10a3e:	84 c0                	test   %al,%al
   10a40:	0f 84 10 01 00 00    	je     10b56 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a46:	ff 75 f4             	push   -0xc(%ebp)
   10a49:	e8 fe f8 ff ff       	call   1034c <pde_to_pt_addr>
   10a4e:	83 c4 04             	add    $0x4,%esp
   10a51:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a54:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a5b:	e9 e7 00 00 00       	jmp    10b47 <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a63:	0f b6 00             	movzbl (%eax),%eax
   10a66:	83 e0 01             	and    $0x1,%eax
   10a69:	84 c0                	test   %al,%al
   10a6b:	0f 84 cd 00 00 00    	je     10b3e <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a74:	c1 e0 16             	shl    $0x16,%eax
   10a77:	89 c2                	mov    %eax,%edx
   10a79:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a7c:	c1 e0 0c             	shl    $0xc,%eax
   10a7f:	09 d0                	or     %edx,%eax
   10a81:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a87:	8b 00                	mov    (%eax),%eax
   10a89:	83 e0 02             	and    $0x2,%eax
   10a8c:	85 c0                	test   %eax,%eax
   10a8e:	74 6c                	je     10afc <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	6a 01                	push   $0x1
   10a95:	68 00 c0 01 00       	push   $0x1c000
   10a9a:	e8 24 fb ff ff       	call   105c3 <addr_alloc_page>
   10a9f:	83 c4 10             	add    $0x10,%esp
   10aa2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10aa5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10aa9:	0f 84 c4 00 00 00    	je     10b73 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10aaf:	83 ec 0c             	sub    $0xc,%esp
   10ab2:	ff 75 ec             	push   -0x14(%ebp)
   10ab5:	e8 e0 f8 ff ff       	call   1039a <get_pte_privilege>
   10aba:	83 c4 10             	add    $0x10,%esp
   10abd:	8b 55 08             	mov    0x8(%ebp),%edx
   10ac0:	83 ec 0c             	sub    $0xc,%esp
   10ac3:	50                   	push   %eax
   10ac4:	6a 01                	push   $0x1
   10ac6:	ff 75 d4             	push   -0x2c(%ebp)
   10ac9:	ff 75 e0             	push   -0x20(%ebp)
   10acc:	52                   	push   %edx
   10acd:	e8 41 fd ff ff       	call   10813 <memory_creat_map>
   10ad2:	83 c4 20             	add    $0x20,%esp
   10ad5:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10ad8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10adc:	0f 88 94 00 00 00    	js     10b76 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ae2:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10ae8:	83 ec 04             	sub    $0x4,%esp
   10aeb:	68 00 10 00 00       	push   $0x1000
   10af0:	52                   	push   %edx
   10af1:	50                   	push   %eax
   10af2:	e8 62 74 00 00       	call   17f59 <kernel_memcpy>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	eb 43                	jmp    10b3f <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10afc:	83 ec 0c             	sub    $0xc,%esp
   10aff:	ff 75 ec             	push   -0x14(%ebp)
   10b02:	e8 6c f8 ff ff       	call   10373 <pte_to_pg_addr>
   10b07:	83 c4 10             	add    $0x10,%esp
   10b0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10b0d:	83 ec 0c             	sub    $0xc,%esp
   10b10:	ff 75 ec             	push   -0x14(%ebp)
   10b13:	e8 82 f8 ff ff       	call   1039a <get_pte_privilege>
   10b18:	83 c4 10             	add    $0x10,%esp
   10b1b:	8b 55 08             	mov    0x8(%ebp),%edx
   10b1e:	83 ec 0c             	sub    $0xc,%esp
   10b21:	50                   	push   %eax
   10b22:	6a 01                	push   $0x1
   10b24:	ff 75 dc             	push   -0x24(%ebp)
   10b27:	ff 75 e0             	push   -0x20(%ebp)
   10b2a:	52                   	push   %edx
   10b2b:	e8 e3 fc ff ff       	call   10813 <memory_creat_map>
   10b30:	83 c4 20             	add    $0x20,%esp
   10b33:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b36:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b3a:	78 3d                	js     10b79 <memory_copy_uvm+0x177>
   10b3c:	eb 01                	jmp    10b3f <memory_copy_uvm+0x13d>
        continue;
   10b3e:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b3f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b43:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b47:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b4e:	0f 8e 0c ff ff ff    	jle    10a60 <memory_copy_uvm+0x5e>
   10b54:	eb 01                	jmp    10b57 <memory_copy_uvm+0x155>
      continue;
   10b56:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b57:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b5b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b5f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b66:	0f 8e c9 fe ff ff    	jle    10a35 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b6c:	b8 01 00 00 00       	mov    $0x1,%eax
   10b71:	eb 1a                	jmp    10b8d <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b73:	90                   	nop
   10b74:	eb 04                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b76:	90                   	nop
   10b77:	eb 01                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b79:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b7a:	83 ec 0c             	sub    $0xc,%esp
   10b7d:	ff 75 08             	push   0x8(%ebp)
   10b80:	e8 0a 00 00 00       	call   10b8f <memory_destroy_uvm>
   10b85:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b8d:	c9                   	leave  
   10b8e:	c3                   	ret    

00010b8f <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b8f:	55                   	push   %ebp
   10b90:	89 e5                	mov    %esp,%ebp
   10b92:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b95:	68 00 00 00 80       	push   $0x80000000
   10b9a:	e8 92 f7 ff ff       	call   10331 <pde_index>
   10b9f:	83 c4 04             	add    $0x4,%esp
   10ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10ba5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ba8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	01 d0                	add    %edx,%eax
   10bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10bb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10bba:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10bbd:	e9 8f 00 00 00       	jmp    10c51 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc5:	0f b6 00             	movzbl (%eax),%eax
   10bc8:	83 e0 01             	and    $0x1,%eax
   10bcb:	84 c0                	test   %al,%al
   10bcd:	74 79                	je     10c48 <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bcf:	ff 75 f4             	push   -0xc(%ebp)
   10bd2:	e8 75 f7 ff ff       	call   1034c <pde_to_pt_addr>
   10bd7:	83 c4 04             	add    $0x4,%esp
   10bda:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bdd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10be4:	eb 36                	jmp    10c1c <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10be6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10be9:	0f b6 00             	movzbl (%eax),%eax
   10bec:	83 e0 01             	and    $0x1,%eax
   10bef:	84 c0                	test   %al,%al
   10bf1:	74 20                	je     10c13 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bf3:	ff 75 ec             	push   -0x14(%ebp)
   10bf6:	e8 78 f7 ff ff       	call   10373 <pte_to_pg_addr>
   10bfb:	83 c4 04             	add    $0x4,%esp
   10bfe:	83 ec 04             	sub    $0x4,%esp
   10c01:	6a 01                	push   $0x1
   10c03:	50                   	push   %eax
   10c04:	68 00 c0 01 00       	push   $0x1c000
   10c09:	e8 1c fa ff ff       	call   1062a <addr_free_page>
   10c0e:	83 c4 10             	add    $0x10,%esp
   10c11:	eb 01                	jmp    10c14 <memory_destroy_uvm+0x85>
        continue;
   10c13:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10c14:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10c18:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10c1c:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c23:	7e c1                	jle    10be6 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c25:	83 ec 0c             	sub    $0xc,%esp
   10c28:	ff 75 f4             	push   -0xc(%ebp)
   10c2b:	e8 1c f7 ff ff       	call   1034c <pde_to_pt_addr>
   10c30:	83 c4 10             	add    $0x10,%esp
   10c33:	83 ec 04             	sub    $0x4,%esp
   10c36:	6a 01                	push   $0x1
   10c38:	50                   	push   %eax
   10c39:	68 00 c0 01 00       	push   $0x1c000
   10c3e:	e8 e7 f9 ff ff       	call   1062a <addr_free_page>
   10c43:	83 c4 10             	add    $0x10,%esp
   10c46:	eb 01                	jmp    10c49 <memory_destroy_uvm+0xba>
        continue;
   10c48:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c49:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c4d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c51:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c58:	0f 8e 64 ff ff ff    	jle    10bc2 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c5e:	83 ec 04             	sub    $0x4,%esp
   10c61:	6a 01                	push   $0x1
   10c63:	ff 75 08             	push   0x8(%ebp)
   10c66:	68 00 c0 01 00       	push   $0x1c000
   10c6b:	e8 ba f9 ff ff       	call   1062a <addr_free_page>
   10c70:	83 c4 10             	add    $0x10,%esp
}
   10c73:	90                   	nop
   10c74:	c9                   	leave  
   10c75:	c3                   	ret    

00010c76 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c76:	55                   	push   %ebp
   10c77:	89 e5                	mov    %esp,%ebp
   10c79:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c7c:	83 ec 0c             	sub    $0xc,%esp
   10c7f:	68 e7 88 01 00       	push   $0x188e7
   10c84:	e8 1c 7b 00 00       	call   187a5 <log_printf>
   10c89:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c8c:	83 ec 08             	sub    $0x8,%esp
   10c8f:	68 97 93 07 00       	push   $0x79397
   10c94:	68 f4 88 01 00       	push   $0x188f4
   10c99:	e8 07 7b 00 00       	call   187a5 <log_printf>
   10c9e:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	ff 75 08             	push   0x8(%ebp)
   10ca7:	e8 1a fa ff ff       	call   106c6 <show_mem_info>
   10cac:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10caf:	83 ec 0c             	sub    $0xc,%esp
   10cb2:	ff 75 08             	push   0x8(%ebp)
   10cb5:	e8 72 fa ff ff       	call   1072c <total_mem_size>
   10cba:	83 c4 10             	add    $0x10,%esp
   10cbd:	2d 00 00 10 00       	sub    $0x100000,%eax
   10cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10cc5:	83 ec 08             	sub    $0x8,%esp
   10cc8:	68 00 10 00 00       	push   $0x1000
   10ccd:	ff 75 f4             	push   -0xc(%ebp)
   10cd0:	e8 2c f6 ff ff       	call   10301 <down2>
   10cd5:	83 c4 10             	add    $0x10,%esp
   10cd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cdb:	83 ec 04             	sub    $0x4,%esp
   10cde:	ff 75 f4             	push   -0xc(%ebp)
   10ce1:	68 00 00 10 00       	push   $0x100000
   10ce6:	68 0c 89 01 00       	push   $0x1890c
   10ceb:	e8 b5 7a 00 00       	call   187a5 <log_printf>
   10cf0:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cf3:	c7 45 f0 97 93 07 00 	movl   $0x79397,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cfa:	83 ec 0c             	sub    $0xc,%esp
   10cfd:	68 00 10 00 00       	push   $0x1000
   10d02:	ff 75 f4             	push   -0xc(%ebp)
   10d05:	68 00 00 10 00       	push   $0x100000
   10d0a:	ff 75 f0             	push   -0x10(%ebp)
   10d0d:	68 00 c0 01 00       	push   $0x1c000
   10d12:	e8 25 f8 ff ff       	call   1053c <addr_alloc_init>
   10d17:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10d1a:	a1 20 c0 01 00       	mov    0x1c020,%eax
   10d1f:	c1 e8 0c             	shr    $0xc,%eax
   10d22:	83 ec 0c             	sub    $0xc,%esp
   10d25:	50                   	push   %eax
   10d26:	e8 9a 6d 00 00       	call   17ac5 <bitmap_byte_count>
   10d2b:	83 c4 10             	add    $0x10,%esp
   10d2e:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d31:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d38:	76 1c                	jbe    10d56 <memory_init+0xe0>
   10d3a:	68 2c 89 01 00       	push   $0x1892c
   10d3f:	68 10 8a 01 00       	push   $0x18a10
   10d44:	68 f8 01 00 00       	push   $0x1f8
   10d49:	68 b0 88 01 00       	push   $0x188b0
   10d4e:	e8 3c 6d 00 00       	call   17a8f <pannic>
   10d53:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d56:	e8 6e fb ff ff       	call   108c9 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d5b:	b8 00 40 02 00       	mov    $0x24000,%eax
   10d60:	83 ec 0c             	sub    $0xc,%esp
   10d63:	50                   	push   %eax
   10d64:	e8 40 f6 ff ff       	call   103a9 <mmu_set_page_dir>
   10d69:	83 c4 10             	add    $0x10,%esp
}
   10d6c:	90                   	nop
   10d6d:	c9                   	leave  
   10d6e:	c3                   	ret    

00010d6f <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d6f:	55                   	push   %ebp
   10d70:	89 e5                	mov    %esp,%ebp
   10d72:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d75:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d7b:	68 00 10 00 00       	push   $0x1000
   10d80:	ff 75 10             	push   0x10(%ebp)
   10d83:	e8 86 f5 ff ff       	call   1030e <up2>
   10d88:	83 c4 08             	add    $0x8,%esp
   10d8b:	c1 e8 0c             	shr    $0xc,%eax
   10d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d98:	eb 7a                	jmp    10e14 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d9a:	83 ec 08             	sub    $0x8,%esp
   10d9d:	6a 01                	push   $0x1
   10d9f:	68 00 c0 01 00       	push   $0x1c000
   10da4:	e8 1a f8 ff ff       	call   105c3 <addr_alloc_page>
   10da9:	83 c4 10             	add    $0x10,%esp
   10dac:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10daf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10db3:	75 17                	jne    10dcc <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10db5:	83 ec 0c             	sub    $0xc,%esp
   10db8:	68 50 89 01 00       	push   $0x18950
   10dbd:	e8 e3 79 00 00       	call   187a5 <log_printf>
   10dc2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dca:	eb 59                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcf:	83 ec 0c             	sub    $0xc,%esp
   10dd2:	ff 75 14             	push   0x14(%ebp)
   10dd5:	6a 01                	push   $0x1
   10dd7:	ff 75 e8             	push   -0x18(%ebp)
   10dda:	ff 75 f4             	push   -0xc(%ebp)
   10ddd:	50                   	push   %eax
   10dde:	e8 30 fa ff ff       	call   10813 <memory_creat_map>
   10de3:	83 c4 20             	add    $0x20,%esp
   10de6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10de9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10ded:	79 1a                	jns    10e09 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10def:	83 ec 08             	sub    $0x8,%esp
   10df2:	ff 75 e4             	push   -0x1c(%ebp)
   10df5:	68 70 89 01 00       	push   $0x18970
   10dfa:	e8 a6 79 00 00       	call   187a5 <log_printf>
   10dff:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10e02:	b8 00 00 00 00       	mov    $0x0,%eax
   10e07:	eb 1c                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10e09:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10e10:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e17:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10e1a:	0f 8c 7a ff ff ff    	jl     10d9a <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e25:	c9                   	leave  
   10e26:	c3                   	ret    

00010e27 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e27:	55                   	push   %ebp
   10e28:	89 e5                	mov    %esp,%ebp
   10e2a:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e2d:	e8 7f 0b 00 00       	call   119b1 <task_current>
   10e32:	8b 40 78             	mov    0x78(%eax),%eax
   10e35:	ff 75 10             	push   0x10(%ebp)
   10e38:	ff 75 0c             	push   0xc(%ebp)
   10e3b:	ff 75 08             	push   0x8(%ebp)
   10e3e:	50                   	push   %eax
   10e3f:	e8 2b ff ff ff       	call   10d6f <memory_alloc_for_page_dir>
   10e44:	83 c4 10             	add    $0x10,%esp
}
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp
   10e4c:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e4f:	e8 5d 0b 00 00       	call   119b1 <task_current>
   10e54:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e57:	c9                   	leave  
   10e58:	c3                   	ret    

00010e59 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e59:	55                   	push   %ebp
   10e5a:	89 e5                	mov    %esp,%ebp
   10e5c:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e5f:	83 ec 08             	sub    $0x8,%esp
   10e62:	6a 01                	push   $0x1
   10e64:	68 00 c0 01 00       	push   $0x1c000
   10e69:	e8 55 f7 ff ff       	call   105c3 <addr_alloc_page>
   10e6e:	83 c4 10             	add    $0x10,%esp
   10e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e77:	c9                   	leave  
   10e78:	c3                   	ret    

00010e79 <memory_free_page>:
/**
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */
void memory_free_page(uint32_t addr) {
   10e79:	55                   	push   %ebp
   10e7a:	89 e5                	mov    %esp,%ebp
   10e7c:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e82:	85 c0                	test   %eax,%eax
   10e84:	78 17                	js     10e9d <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e86:	83 ec 04             	sub    $0x4,%esp
   10e89:	6a 01                	push   $0x1
   10e8b:	ff 75 08             	push   0x8(%ebp)
   10e8e:	68 00 c0 01 00       	push   $0x1c000
   10e93:	e8 92 f7 ff ff       	call   1062a <addr_free_page>
   10e98:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e9b:	eb 72                	jmp    10f0f <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e9d:	e8 a7 ff ff ff       	call   10e49 <curr_page_dir>
   10ea2:	83 ec 04             	sub    $0x4,%esp
   10ea5:	6a 00                	push   $0x0
   10ea7:	ff 75 08             	push   0x8(%ebp)
   10eaa:	50                   	push   %eax
   10eab:	e8 b3 f8 ff ff       	call   10763 <find_pte>
   10eb0:	83 c4 10             	add    $0x10,%esp
   10eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10eb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10eba:	74 0d                	je     10ec9 <memory_free_page+0x50>
   10ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ebf:	0f b6 00             	movzbl (%eax),%eax
   10ec2:	83 e0 01             	and    $0x1,%eax
   10ec5:	84 c0                	test   %al,%al
   10ec7:	75 1c                	jne    10ee5 <memory_free_page+0x6c>
   10ec9:	68 90 89 01 00       	push   $0x18990
   10ece:	68 1c 8a 01 00       	push   $0x18a1c
   10ed3:	68 59 02 00 00       	push   $0x259
   10ed8:	68 b0 88 01 00       	push   $0x188b0
   10edd:	e8 ad 6b 00 00       	call   17a8f <pannic>
   10ee2:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ee5:	83 ec 0c             	sub    $0xc,%esp
   10ee8:	ff 75 f4             	push   -0xc(%ebp)
   10eeb:	e8 83 f4 ff ff       	call   10373 <pte_to_pg_addr>
   10ef0:	83 c4 10             	add    $0x10,%esp
   10ef3:	83 ec 04             	sub    $0x4,%esp
   10ef6:	6a 01                	push   $0x1
   10ef8:	50                   	push   %eax
   10ef9:	68 00 c0 01 00       	push   $0x1c000
   10efe:	e8 27 f7 ff ff       	call   1062a <addr_free_page>
   10f03:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10f0f:	90                   	nop
   10f10:	c9                   	leave  
   10f11:	c3                   	ret    

00010f12 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10f12:	55                   	push   %ebp
   10f13:	89 e5                	mov    %esp,%ebp
   10f15:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10f18:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1b:	83 ec 04             	sub    $0x4,%esp
   10f1e:	6a 00                	push   $0x0
   10f20:	ff 75 0c             	push   0xc(%ebp)
   10f23:	50                   	push   %eax
   10f24:	e8 3a f8 ff ff       	call   10763 <find_pte>
   10f29:	83 c4 10             	add    $0x10,%esp
   10f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f33:	74 0d                	je     10f42 <memory_get_paddr+0x30>
   10f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f38:	0f b6 00             	movzbl (%eax),%eax
   10f3b:	83 e0 01             	and    $0x1,%eax
   10f3e:	84 c0                	test   %al,%al
   10f40:	75 07                	jne    10f49 <memory_get_paddr+0x37>
    return 0;
   10f42:	b8 00 00 00 00       	mov    $0x0,%eax
   10f47:	eb 1a                	jmp    10f63 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f49:	83 ec 0c             	sub    $0xc,%esp
   10f4c:	ff 75 f4             	push   -0xc(%ebp)
   10f4f:	e8 1f f4 ff ff       	call   10373 <pte_to_pg_addr>
   10f54:	83 c4 10             	add    $0x10,%esp
   10f57:	89 c2                	mov    %eax,%edx
   10f59:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f5c:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f61:	09 d0                	or     %edx,%eax

}
   10f63:	c9                   	leave  
   10f64:	c3                   	ret    

00010f65 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f65:	55                   	push   %ebp
   10f66:	89 e5                	mov    %esp,%ebp
   10f68:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f6b:	eb 6e                	jmp    10fdb <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f6d:	83 ec 08             	sub    $0x8,%esp
   10f70:	ff 75 08             	push   0x8(%ebp)
   10f73:	ff 75 0c             	push   0xc(%ebp)
   10f76:	e8 97 ff ff ff       	call   10f12 <memory_get_paddr>
   10f7b:	83 c4 10             	add    $0x10,%esp
   10f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f85:	75 07                	jne    10f8e <memory_copy_uvm_data+0x29>
      return -1;
   10f87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f8c:	eb 58                	jmp    10fe6 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f91:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f96:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f99:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f9e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10fa4:	8b 45 14             	mov    0x14(%ebp),%eax
   10fa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10faa:	73 06                	jae    10fb2 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10fac:	8b 45 14             	mov    0x14(%ebp),%eax
   10faf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10fb2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10fb5:	8b 55 10             	mov    0x10(%ebp),%edx
   10fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fbb:	83 ec 04             	sub    $0x4,%esp
   10fbe:	51                   	push   %ecx
   10fbf:	52                   	push   %edx
   10fc0:	50                   	push   %eax
   10fc1:	e8 93 6f 00 00       	call   17f59 <kernel_memcpy>
   10fc6:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcc:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd2:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd8:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fdb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fdf:	75 8c                	jne    10f6d <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fe1:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fe6:	c9                   	leave  
   10fe7:	c3                   	ret    

00010fe8 <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fe8:	55                   	push   %ebp
   10fe9:	89 e5                	mov    %esp,%ebp
   10feb:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff2:	79 1c                	jns    11010 <sys_sbrk+0x28>
   10ff4:	68 b1 89 01 00       	push   $0x189b1
   10ff9:	68 30 8a 01 00       	push   $0x18a30
   10ffe:	68 a8 02 00 00       	push   $0x2a8
   11003:	68 b0 88 01 00       	push   $0x188b0
   11008:	e8 82 6a 00 00       	call   17a8f <pannic>
   1100d:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   11010:	e8 9c 09 00 00       	call   119b1 <task_current>
   11015:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   11018:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1101b:	8b 40 14             	mov    0x14(%eax),%eax
   1101e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11021:	8b 45 08             	mov    0x8(%ebp),%eax
   11024:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   11027:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1102b:	75 1b                	jne    11048 <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   1102d:	83 ec 08             	sub    $0x8,%esp
   11030:	ff 75 ec             	push   -0x14(%ebp)
   11033:	68 bb 89 01 00       	push   $0x189bb
   11038:	e8 68 77 00 00       	call   187a5 <log_printf>
   1103d:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11040:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11043:	e9 c4 00 00 00       	jmp    1110c <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   11048:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1104b:	8b 40 14             	mov    0x14(%eax),%eax
   1104e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11051:	8b 55 08             	mov    0x8(%ebp),%edx
   11054:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11057:	01 d0                	add    %edx,%eax
   11059:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1105f:	25 ff 0f 00 00       	and    $0xfff,%eax
   11064:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   11067:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1106b:	74 3b                	je     110a8 <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   1106d:	8b 55 08             	mov    0x8(%ebp),%edx
   11070:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11073:	01 d0                	add    %edx,%eax
   11075:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1107a:	77 12                	ja     1108e <sys_sbrk+0xa6>
      task->heap_end = end; 
   1107c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1107f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11082:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11085:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1108c:	eb 1a                	jmp    110a8 <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   1108e:	b8 00 10 00 00       	mov    $0x1000,%eax
   11093:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11096:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   11099:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1109c:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   1109f:	8b 45 08             	mov    0x8(%ebp),%eax
   110a2:	2b 45 dc             	sub    -0x24(%ebp),%eax
   110a5:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   110a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ac:	74 3c                	je     110ea <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   110ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110b1:	2b 45 f4             	sub    -0xc(%ebp),%eax
   110b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   110b7:	83 ec 04             	sub    $0x4,%esp
   110ba:	6a 07                	push   $0x7
   110bc:	ff 75 d8             	push   -0x28(%ebp)
   110bf:	ff 75 f4             	push   -0xc(%ebp)
   110c2:	e8 60 fd ff ff       	call   10e27 <memory_alloc_page_for>
   110c7:	83 c4 10             	add    $0x10,%esp
   110ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110cd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110d1:	79 17                	jns    110ea <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110d3:	83 ec 0c             	sub    $0xc,%esp
   110d6:	68 ce 89 01 00       	push   $0x189ce
   110db:	e8 c5 76 00 00       	call   187a5 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110e8:	eb 22                	jmp    1110c <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110ea:	83 ec 04             	sub    $0x4,%esp
   110ed:	ff 75 e4             	push   -0x1c(%ebp)
   110f0:	ff 75 e8             	push   -0x18(%ebp)
   110f3:	68 e7 89 01 00       	push   $0x189e7
   110f8:	e8 a8 76 00 00       	call   187a5 <log_printf>
   110fd:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   11100:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11106:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)pre_heap_end;
   11109:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1110c:	c9                   	leave  
   1110d:	c3                   	ret    

0001110e <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1110e:	55                   	push   %ebp
   1110f:	89 e5                	mov    %esp,%ebp
   11111:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11114:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11118:	75 19                	jne    11133 <list_node_init+0x25>
   1111a:	68 3c 8a 01 00       	push   $0x18a3c
   1111f:	68 f8 8b 01 00       	push   $0x18bf8
   11124:	6a 20                	push   $0x20
   11126:	68 54 8a 01 00       	push   $0x18a54
   1112b:	e8 5f 69 00 00       	call   17a8f <pannic>
   11130:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11133:	8b 45 08             	mov    0x8(%ebp),%eax
   11136:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	8b 50 04             	mov    0x4(%eax),%edx
   11143:	8b 45 08             	mov    0x8(%ebp),%eax
   11146:	89 10                	mov    %edx,(%eax)
}
   11148:	90                   	nop
   11149:	c9                   	leave  
   1114a:	c3                   	ret    

0001114b <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1114b:	55                   	push   %ebp
   1114c:	89 e5                	mov    %esp,%ebp
   1114e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11151:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11155:	75 19                	jne    11170 <list_node_next+0x25>
   11157:	68 3c 8a 01 00       	push   $0x18a3c
   1115c:	68 58 8c 01 00       	push   $0x18c58
   11161:	6a 2b                	push   $0x2b
   11163:	68 54 8a 01 00       	push   $0x18a54
   11168:	e8 22 69 00 00       	call   17a8f <pannic>
   1116d:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11170:	8b 45 08             	mov    0x8(%ebp),%eax
   11173:	8b 40 04             	mov    0x4(%eax),%eax
}
   11176:	c9                   	leave  
   11177:	c3                   	ret    

00011178 <list_init>:

static inline void list_init(list_t *list) {
   11178:	55                   	push   %ebp
   11179:	89 e5                	mov    %esp,%ebp
   1117b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1117e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11182:	75 19                	jne    1119d <list_init+0x25>
   11184:	68 92 8a 01 00       	push   $0x18a92
   11189:	68 08 8c 01 00       	push   $0x18c08
   1118e:	6a 31                	push   $0x31
   11190:	68 54 8a 01 00       	push   $0x18a54
   11195:	e8 f5 68 00 00       	call   17a8f <pannic>
   1119a:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   111a7:	8b 45 08             	mov    0x8(%ebp),%eax
   111aa:	8b 50 04             	mov    0x4(%eax),%edx
   111ad:	8b 45 08             	mov    0x8(%ebp),%eax
   111b0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   111b2:	8b 45 08             	mov    0x8(%ebp),%eax
   111b5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   111bc:	90                   	nop
   111bd:	c9                   	leave  
   111be:	c3                   	ret    

000111bf <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111bf:	55                   	push   %ebp
   111c0:	89 e5                	mov    %esp,%ebp
   111c2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111c9:	75 19                	jne    111e4 <list_is_empty+0x25>
   111cb:	68 92 8a 01 00       	push   $0x18a92
   111d0:	68 68 8c 01 00       	push   $0x18c68
   111d5:	6a 38                	push   $0x38
   111d7:	68 54 8a 01 00       	push   $0x18a54
   111dc:	e8 ae 68 00 00       	call   17a8f <pannic>
   111e1:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111e4:	8b 45 08             	mov    0x8(%ebp),%eax
   111e7:	8b 40 08             	mov    0x8(%eax),%eax
   111ea:	85 c0                	test   %eax,%eax
   111ec:	0f 94 c0             	sete   %al
   111ef:	0f b6 c0             	movzbl %al,%eax
}
   111f2:	c9                   	leave  
   111f3:	c3                   	ret    

000111f4 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111f4:	55                   	push   %ebp
   111f5:	89 e5                	mov    %esp,%ebp
   111f7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111fe:	75 19                	jne    11219 <list_get_size+0x25>
   11200:	68 92 8a 01 00       	push   $0x18a92
   11205:	68 98 8c 01 00       	push   $0x18c98
   1120a:	6a 3e                	push   $0x3e
   1120c:	68 54 8a 01 00       	push   $0x18a54
   11211:	e8 79 68 00 00       	call   17a8f <pannic>
   11216:	83 c4 10             	add    $0x10,%esp

    return list->size;
   11219:	8b 45 08             	mov    0x8(%ebp),%eax
   1121c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1121f:	c9                   	leave  
   11220:	c3                   	ret    

00011221 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11221:	55                   	push   %ebp
   11222:	89 e5                	mov    %esp,%ebp
   11224:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11227:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1122b:	75 19                	jne    11246 <list_get_first+0x25>
   1122d:	68 92 8a 01 00       	push   $0x18a92
   11232:	68 48 8c 01 00       	push   $0x18c48
   11237:	6a 44                	push   $0x44
   11239:	68 54 8a 01 00       	push   $0x18a54
   1123e:	e8 4c 68 00 00       	call   17a8f <pannic>
   11243:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11246:	8b 45 08             	mov    0x8(%ebp),%eax
   11249:	8b 00                	mov    (%eax),%eax
}
   1124b:	c9                   	leave  
   1124c:	c3                   	ret    

0001124d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1124d:	55                   	push   %ebp
   1124e:	89 e5                	mov    %esp,%ebp
   11250:	f4                   	hlt    
   11251:	90                   	nop
   11252:	5d                   	pop    %ebp
   11253:	c3                   	ret    

00011254 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	0f 22 d8             	mov    %eax,%cr3
}
   1125d:	90                   	nop
   1125e:	5d                   	pop    %ebp
   1125f:	c3                   	ret    

00011260 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11260:	55                   	push   %ebp
   11261:	89 e5                	mov    %esp,%ebp
   11263:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11266:	8b 45 0c             	mov    0xc(%ebp),%eax
   11269:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1126c:	8b 45 08             	mov    0x8(%ebp),%eax
   1126f:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11272:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11275:	ff 28                	ljmp   *(%eax)
}
   11277:	90                   	nop
   11278:	c9                   	leave  
   11279:	c3                   	ret    

0001127a <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1127a:	55                   	push   %ebp
   1127b:	89 e5                	mov    %esp,%ebp
   1127d:	83 ec 04             	sub    $0x4,%esp
   11280:	8b 45 08             	mov    0x8(%ebp),%eax
   11283:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11287:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1128b:	0f 00 d8             	ltr    %ax
}
   1128e:	90                   	nop
   1128f:	c9                   	leave  
   11290:	c3                   	ret    

00011291 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11291:	55                   	push   %ebp
   11292:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11294:	ff 75 08             	push   0x8(%ebp)
   11297:	e8 b8 ff ff ff       	call   11254 <write_cr3>
   1129c:	83 c4 04             	add    $0x4,%esp
}
   1129f:	90                   	nop
   112a0:	c9                   	leave  
   112a1:	c3                   	ret    

000112a2 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   112a2:	55                   	push   %ebp
   112a3:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   112a5:	8b 55 08             	mov    0x8(%ebp),%edx
   112a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ab:	01 d0                	add    %edx,%eax
   112ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b3:	f7 d8                	neg    %eax
   112b5:	21 d0                	and    %edx,%eax
}
   112b7:	5d                   	pop    %ebp
   112b8:	c3                   	ret    

000112b9 <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   112b9:	55                   	push   %ebp
   112ba:	89 e5                	mov    %esp,%ebp
   112bc:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ca:	78 18                	js     112e4 <task_file+0x2b>
   112cc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112d0:	7f 12                	jg     112e4 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112d2:	e8 da 06 00 00       	call   119b1 <task_current>
   112d7:	8b 55 08             	mov    0x8(%ebp),%edx
   112da:	83 c2 30             	add    $0x30,%edx
   112dd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112e7:	c9                   	leave  
   112e8:	c3                   	ret    

000112e9 <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112e9:	55                   	push   %ebp
   112ea:	89 e5                	mov    %esp,%ebp
   112ec:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112ef:	e8 bd 06 00 00       	call   119b1 <task_current>
   112f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112fe:	eb 2f                	jmp    1132f <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   11300:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11303:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11306:	83 c2 30             	add    $0x30,%edx
   11309:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1130d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   11310:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11314:	75 15                	jne    1132b <task_alloc_fd+0x42>
      task->file_table[i] = file;
   11316:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11319:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1131c:	8d 4a 30             	lea    0x30(%edx),%ecx
   1131f:	8b 55 08             	mov    0x8(%ebp),%edx
   11322:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11326:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11329:	eb 0f                	jmp    1133a <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1132b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1132f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11333:	7e cb                	jle    11300 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11335:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1133a:	c9                   	leave  
   1133b:	c3                   	ret    

0001133c <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1133c:	55                   	push   %ebp
   1133d:	89 e5                	mov    %esp,%ebp
   1133f:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11346:	78 19                	js     11361 <task_remove_fd+0x25>
   11348:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1134c:	7f 13                	jg     11361 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   1134e:	e8 5e 06 00 00       	call   119b1 <task_current>
   11353:	8b 55 08             	mov    0x8(%ebp),%edx
   11356:	83 c2 30             	add    $0x30,%edx
   11359:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11360:	00 
  }
}
   11361:	90                   	nop
   11362:	c9                   	leave  
   11363:	c3                   	ret    

00011364 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11364:	55                   	push   %ebp
   11365:	89 e5                	mov    %esp,%ebp
   11367:	83 ec 04             	sub    $0x4,%esp
   1136a:	8b 45 08             	mov    0x8(%ebp),%eax
   1136d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11371:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11375:	6a 00                	push   $0x0
   11377:	50                   	push   %eax
   11378:	e8 e3 fe ff ff       	call   11260 <far_jump>
   1137d:	83 c4 08             	add    $0x8,%esp
}
   11380:	90                   	nop
   11381:	c9                   	leave  
   11382:	c3                   	ret    

00011383 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11383:	55                   	push   %ebp
   11384:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11386:	8b 45 0c             	mov    0xc(%ebp),%eax
   11389:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1138f:	0f b7 c0             	movzwl %ax,%eax
   11392:	50                   	push   %eax
   11393:	e8 cc ff ff ff       	call   11364 <switch_to_tss>
   11398:	83 c4 04             	add    $0x4,%esp
}
   1139b:	90                   	nop
   1139c:	c9                   	leave  
   1139d:	c3                   	ret    

0001139e <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   1139e:	55                   	push   %ebp
   1139f:	89 e5                	mov    %esp,%ebp
   113a1:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   113a4:	e8 50 15 00 00       	call   128f9 <gdt_alloc_desc>
   113a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   113ac:	8b 45 08             	mov    0x8(%ebp),%eax
   113af:	83 c0 5c             	add    $0x5c,%eax
   113b2:	89 c2                	mov    %eax,%edx
   113b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113b7:	0f b7 c0             	movzwl %ax,%eax
   113ba:	68 89 00 00 00       	push   $0x89
   113bf:	6a 68                	push   $0x68
   113c1:	52                   	push   %edx
   113c2:	50                   	push   %eax
   113c3:	e8 bf 13 00 00       	call   12787 <segment_desc_set>
   113c8:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113cb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ce:	83 c0 5c             	add    $0x5c,%eax
   113d1:	83 ec 04             	sub    $0x4,%esp
   113d4:	6a 68                	push   $0x68
   113d6:	6a 00                	push   $0x0
   113d8:	50                   	push   %eax
   113d9:	e8 ca 6b 00 00       	call   17fa8 <kernel_memset>
   113de:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113e1:	8b 45 08             	mov    0x8(%ebp),%eax
   113e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113e7:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113ed:	8b 45 14             	mov    0x14(%ebp),%eax
   113f0:	83 e0 01             	and    $0x1,%eax
   113f3:	85 c0                	test   %eax,%eax
   113f5:	74 10                	je     11407 <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113f7:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113fe:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11405:	eb 16                	jmp    1141d <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   11407:	a1 b8 55 02 00       	mov    0x255b8,%eax
   1140c:	83 c8 03             	or     $0x3,%eax
   1140f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   11412:	a1 bc 55 02 00       	mov    0x255bc,%eax
   11417:	83 c8 03             	or     $0x3,%eax
   1141a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   1141d:	8b 45 08             	mov    0x8(%ebp),%eax
   11420:	8b 55 0c             	mov    0xc(%ebp),%edx
   11423:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	8b 55 10             	mov    0x10(%ebp),%edx
   1142c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11432:	e8 22 fa ff ff       	call   10e59 <memory_alloc_page>
   11437:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1143a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1143e:	0f 84 9e 00 00 00    	je     114e2 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11444:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11447:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1144d:	8b 45 08             	mov    0x8(%ebp),%eax
   11450:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11453:	8b 45 08             	mov    0x8(%ebp),%eax
   11456:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11459:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   1145f:	8b 45 08             	mov    0x8(%ebp),%eax
   11462:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11469:	8b 45 08             	mov    0x8(%ebp),%eax
   1146c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1146f:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11475:	8b 45 08             	mov    0x8(%ebp),%eax
   11478:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   1147e:	8b 45 08             	mov    0x8(%ebp),%eax
   11481:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   11487:	8b 45 08             	mov    0x8(%ebp),%eax
   1148a:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11490:	8b 45 08             	mov    0x8(%ebp),%eax
   11493:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   11499:	8b 45 08             	mov    0x8(%ebp),%eax
   1149c:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   114a2:	8b 45 08             	mov    0x8(%ebp),%eax
   114a5:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   114ab:	8b 45 08             	mov    0x8(%ebp),%eax
   114ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114b1:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   114b7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ba:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114c1:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114c4:	e8 b4 f4 ff ff       	call   1097d <memory_creat_uvm>
   114c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114d0:	74 13                	je     114e5 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114d2:	8b 45 08             	mov    0x8(%ebp),%eax
   114d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114d8:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114db:	b8 00 00 00 00       	mov    $0x0,%eax
   114e0:	eb 2f                	jmp    11511 <tss_init+0x173>
    goto tss_init_failed;
   114e2:	90                   	nop
   114e3:	eb 01                	jmp    114e6 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114e5:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114e9:	0f b7 c0             	movzwl %ax,%eax
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	50                   	push   %eax
   114f0:	e8 79 14 00 00       	call   1296e <gdt_free>
   114f5:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114fc:	74 0e                	je     1150c <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114fe:	83 ec 0c             	sub    $0xc,%esp
   11501:	ff 75 e8             	push   -0x18(%ebp)
   11504:	e8 70 f9 ff ff       	call   10e79 <memory_free_page>
   11509:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   1150c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11511:	c9                   	leave  
   11512:	c3                   	ret    

00011513 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   11513:	55                   	push   %ebp
   11514:	89 e5                	mov    %esp,%ebp
   11516:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11519:	e8 06 1e 00 00       	call   13324 <idt_enter_protection>
   1151e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11521:	83 ec 0c             	sub    $0xc,%esp
   11524:	ff 75 08             	push   0x8(%ebp)
   11527:	e8 d3 03 00 00       	call   118ff <task_set_ready>
   1152c:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   1152f:	8b 45 08             	mov    0x8(%ebp),%eax
   11532:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   11538:	83 ec 0c             	sub    $0xc,%esp
   1153b:	ff 75 f4             	push   -0xc(%ebp)
   1153e:	e8 f9 1d 00 00       	call   1333c <idt_leave_protection>
   11543:	83 c4 10             	add    $0x10,%esp
}
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   1154f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11553:	75 1c                	jne    11571 <task_init+0x28>
   11555:	68 a5 8a 01 00       	push   $0x18aa5
   1155a:	68 ec 8b 01 00       	push   $0x18bec
   1155f:	68 ca 00 00 00       	push   $0xca
   11564:	68 bc 8a 01 00       	push   $0x18abc
   11569:	e8 21 65 00 00       	call   17a8f <pannic>
   1156e:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11571:	ff 75 18             	push   0x18(%ebp)
   11574:	ff 75 14             	push   0x14(%ebp)
   11577:	ff 75 10             	push   0x10(%ebp)
   1157a:	ff 75 08             	push   0x8(%ebp)
   1157d:	e8 1c fe ff ff       	call   1139e <tss_init>
   11582:	83 c4 10             	add    $0x10,%esp
   11585:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   11588:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1158c:	75 08                	jne    11596 <task_init+0x4d>
   1158e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11591:	e9 e0 00 00 00       	jmp    11676 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11596:	8b 45 08             	mov    0x8(%ebp),%eax
   11599:	83 c0 24             	add    $0x24,%eax
   1159c:	83 ec 04             	sub    $0x4,%esp
   1159f:	6a 20                	push   $0x20
   115a1:	ff 75 0c             	push   0xc(%ebp)
   115a4:	50                   	push   %eax
   115a5:	e8 a8 68 00 00       	call   17e52 <kernel_strncpy>
   115aa:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   115ad:	8b 45 08             	mov    0x8(%ebp),%eax
   115b0:	83 c0 44             	add    $0x44,%eax
   115b3:	83 ec 0c             	sub    $0xc,%esp
   115b6:	50                   	push   %eax
   115b7:	e8 52 fb ff ff       	call   1110e <list_node_init>
   115bc:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115bf:	8b 45 08             	mov    0x8(%ebp),%eax
   115c2:	83 c0 4c             	add    $0x4c,%eax
   115c5:	83 ec 0c             	sub    $0xc,%esp
   115c8:	50                   	push   %eax
   115c9:	e8 40 fb ff ff       	call   1110e <list_node_init>
   115ce:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115d1:	8b 45 08             	mov    0x8(%ebp),%eax
   115d4:	83 c0 54             	add    $0x54,%eax
   115d7:	83 ec 0c             	sub    $0xc,%esp
   115da:	50                   	push   %eax
   115db:	e8 2e fb ff ff       	call   1110e <list_node_init>
   115e0:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115e3:	8b 45 08             	mov    0x8(%ebp),%eax
   115e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115ec:	8b 45 08             	mov    0x8(%ebp),%eax
   115ef:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115f6:	8b 45 08             	mov    0x8(%ebp),%eax
   115f9:	8b 50 1c             	mov    0x1c(%eax),%edx
   115fc:	8b 45 08             	mov    0x8(%ebp),%eax
   115ff:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   1160c:	8b 55 08             	mov    0x8(%ebp),%edx
   1160f:	8b 45 08             	mov    0x8(%ebp),%eax
   11612:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   11615:	8b 45 08             	mov    0x8(%ebp),%eax
   11618:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   11629:	8b 45 08             	mov    0x8(%ebp),%eax
   1162c:	8b 50 14             	mov    0x14(%eax),%edx
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   1163f:	8b 45 08             	mov    0x8(%ebp),%eax
   11642:	05 c8 00 00 00       	add    $0xc8,%eax
   11647:	83 ec 04             	sub    $0x4,%esp
   1164a:	68 00 02 00 00       	push   $0x200
   1164f:	6a 00                	push   $0x0
   11651:	50                   	push   %eax
   11652:	e8 51 69 00 00       	call   17fa8 <kernel_memset>
   11657:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1165a:	8b 45 08             	mov    0x8(%ebp),%eax
   1165d:	83 c0 4c             	add    $0x4c,%eax
   11660:	83 ec 08             	sub    $0x8,%esp
   11663:	50                   	push   %eax
   11664:	68 10 50 02 00       	push   $0x25010
   11669:	e8 4a 6e 00 00       	call   184b8 <list_insert_last>
   1166e:	83 c4 10             	add    $0x10,%esp

  return 1;
   11671:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11676:	c9                   	leave  
   11677:	c3                   	ret    

00011678 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   11678:	55                   	push   %ebp
   11679:	89 e5                	mov    %esp,%ebp
   1167b:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   1167e:	8b 45 08             	mov    0x8(%ebp),%eax
   11681:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11687:	85 c0                	test   %eax,%eax
   11689:	74 18                	je     116a3 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1168b:	8b 45 08             	mov    0x8(%ebp),%eax
   1168e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11694:	0f b7 c0             	movzwl %ax,%eax
   11697:	83 ec 0c             	sub    $0xc,%esp
   1169a:	50                   	push   %eax
   1169b:	e8 ce 12 00 00       	call   1296e <gdt_free>
   116a0:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   116a3:	8b 45 08             	mov    0x8(%ebp),%eax
   116a6:	8b 40 60             	mov    0x60(%eax),%eax
   116a9:	85 c0                	test   %eax,%eax
   116ab:	74 17                	je     116c4 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 40 60             	mov    0x60(%eax),%eax
   116b3:	2d 00 10 00 00       	sub    $0x1000,%eax
   116b8:	83 ec 0c             	sub    $0xc,%esp
   116bb:	50                   	push   %eax
   116bc:	e8 b8 f7 ff ff       	call   10e79 <memory_free_page>
   116c1:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	8b 40 78             	mov    0x78(%eax),%eax
   116ca:	85 c0                	test   %eax,%eax
   116cc:	74 12                	je     116e0 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116ce:	8b 45 08             	mov    0x8(%ebp),%eax
   116d1:	8b 40 78             	mov    0x78(%eax),%eax
   116d4:	83 ec 0c             	sub    $0xc,%esp
   116d7:	50                   	push   %eax
   116d8:	e8 b2 f4 ff ff       	call   10b8f <memory_destroy_uvm>
   116dd:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	83 c0 4c             	add    $0x4c,%eax
   116e6:	83 ec 08             	sub    $0x8,%esp
   116e9:	50                   	push   %eax
   116ea:	68 10 50 02 00       	push   $0x25010
   116ef:	e8 b9 6f 00 00       	call   186ad <list_remove>
   116f4:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116f7:	83 ec 0c             	sub    $0xc,%esp
   116fa:	ff 75 08             	push   0x8(%ebp)
   116fd:	e8 3b 05 00 00       	call   11c3d <free_task>
   11702:	83 c4 10             	add    $0x10,%esp
}
   11705:	90                   	nop
   11706:	c9                   	leave  
   11707:	c3                   	ret    

00011708 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   11708:	55                   	push   %ebp
   11709:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   1170b:	e8 3d fb ff ff       	call   1124d <hlt>
   11710:	eb f9                	jmp    1170b <empty_task+0x3>

00011712 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   11712:	55                   	push   %ebp
   11713:	89 e5                	mov    %esp,%ebp
   11715:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   11718:	e8 dc 11 00 00       	call   128f9 <gdt_alloc_desc>
   1171d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11720:	e8 d4 11 00 00       	call   128f9 <gdt_alloc_desc>
   11725:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   11728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1172b:	0f b7 c0             	movzwl %ax,%eax
   1172e:	68 f2 40 00 00       	push   $0x40f2
   11733:	6a ff                	push   $0xffffffff
   11735:	6a 00                	push   $0x0
   11737:	50                   	push   %eax
   11738:	e8 4a 10 00 00       	call   12787 <segment_desc_set>
   1173d:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11740:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11743:	0f b7 c0             	movzwl %ax,%eax
   11746:	68 fa 40 00 00       	push   $0x40fa
   1174b:	6a ff                	push   $0xffffffff
   1174d:	6a 00                	push   $0x0
   1174f:	50                   	push   %eax
   11750:	e8 32 10 00 00       	call   12787 <segment_desc_set>
   11755:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   11758:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1175b:	a3 b8 55 02 00       	mov    %eax,0x255b8
  task_manager.app_data_selector = data_selector;
   11760:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11763:	a3 bc 55 02 00       	mov    %eax,0x255bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   11768:	83 ec 0c             	sub    $0xc,%esp
   1176b:	68 04 50 02 00       	push   $0x25004
   11770:	e8 03 fa ff ff       	call   11178 <list_init>
   11775:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   11778:	83 ec 0c             	sub    $0xc,%esp
   1177b:	68 10 50 02 00       	push   $0x25010
   11780:	e8 f3 f9 ff ff       	call   11178 <list_init>
   11785:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   11788:	83 ec 0c             	sub    $0xc,%esp
   1178b:	68 1c 50 02 00       	push   $0x2501c
   11790:	e8 e3 f9 ff ff       	call   11178 <list_init>
   11795:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   11798:	c7 05 00 50 02 00 00 	movl   $0x0,0x25000
   1179f:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   117a2:	ba e0 bb 03 00       	mov    $0x3bbe0,%edx
   117a7:	b8 08 17 01 00       	mov    $0x11708,%eax
   117ac:	83 ec 0c             	sub    $0xc,%esp
   117af:	6a 01                	push   $0x1
   117b1:	52                   	push   %edx
   117b2:	50                   	push   %eax
   117b3:	68 f1 8a 01 00       	push   $0x18af1
   117b8:	68 f0 52 02 00       	push   $0x252f0
   117bd:	e8 87 fd ff ff       	call   11549 <task_init>
   117c2:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117c5:	83 ec 04             	sub    $0x4,%esp
   117c8:	68 00 64 01 00       	push   $0x16400
   117cd:	6a 00                	push   $0x0
   117cf:	68 c0 55 02 00       	push   $0x255c0
   117d4:	e8 cf 67 00 00       	call   17fa8 <kernel_memset>
   117d9:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117dc:	83 ec 0c             	sub    $0xc,%esp
   117df:	68 c0 b9 03 00       	push   $0x3b9c0
   117e4:	e8 2e 5b 00 00       	call   17317 <mutex_init>
   117e9:	83 c4 10             	add    $0x10,%esp
}
   117ec:	90                   	nop
   117ed:	c9                   	leave  
   117ee:	c3                   	ret    

000117ef <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117ef:	55                   	push   %ebp
   117f0:	89 e5                	mov    %esp,%ebp
   117f2:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117f5:	b8 97 93 07 00       	mov    $0x79397,%eax
   117fa:	2d 00 90 07 00       	sub    $0x79000,%eax
  uint32_t copy_size =
   117ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   11802:	68 00 10 00 00       	push   $0x1000
   11807:	ff 75 f4             	push   -0xc(%ebp)
   1180a:	e8 93 fa ff ff       	call   112a2 <up2>
   1180f:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   11812:	05 00 a0 00 00       	add    $0xa000,%eax
   11817:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   1181a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1181d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11820:	72 1c                	jb     1183e <task_first_init+0x4f>
   11822:	68 fc 8a 01 00       	push   $0x18afc
   11827:	68 14 8c 01 00       	push   $0x18c14
   1182c:	68 6e 01 00 00       	push   $0x16e
   11831:	68 bc 8a 01 00       	push   $0x18abc
   11836:	e8 54 62 00 00       	call   17a8f <pannic>
   1183b:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   1183e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11845:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11848:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1184b:	01 d0                	add    %edx,%eax
   1184d:	83 ec 0c             	sub    $0xc,%esp
   11850:	6a 00                	push   $0x0
   11852:	50                   	push   %eax
   11853:	ff 75 ec             	push   -0x14(%ebp)
   11856:	68 13 8b 01 00       	push   $0x18b13
   1185b:	68 28 50 02 00       	push   $0x25028
   11860:	e8 e4 fc ff ff       	call   11549 <task_init>
   11865:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   11868:	b8 97 93 07 00       	mov    $0x79397,%eax
  task_manager.first_task.heap_start =
   1186d:	a3 38 50 02 00       	mov    %eax,0x25038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11872:	b8 97 93 07 00       	mov    $0x79397,%eax
   11877:	a3 3c 50 02 00       	mov    %eax,0x2503c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1187c:	a1 ec 50 02 00       	mov    0x250ec,%eax
   11881:	0f b7 c0             	movzwl %ax,%eax
   11884:	83 ec 0c             	sub    $0xc,%esp
   11887:	50                   	push   %eax
   11888:	e8 ed f9 ff ff       	call   1127a <write_tr>
   1188d:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11890:	c7 05 00 50 02 00 28 	movl   $0x25028,0x25000
   11897:	50 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1189a:	a1 a0 50 02 00       	mov    0x250a0,%eax
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	50                   	push   %eax
   118a3:	e8 e9 f9 ff ff       	call   11291 <mmu_set_page_dir>
   118a8:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   118ab:	a1 00 50 02 00       	mov    0x25000,%eax
   118b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   118b6:	83 ec 04             	sub    $0x4,%esp
   118b9:	6a 07                	push   $0x7
   118bb:	ff 75 f0             	push   -0x10(%ebp)
   118be:	ff 75 ec             	push   -0x14(%ebp)
   118c1:	e8 61 f5 ff ff       	call   10e27 <memory_alloc_page_for>
   118c6:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118cc:	83 ec 04             	sub    $0x4,%esp
   118cf:	50                   	push   %eax
   118d0:	68 00 90 07 00       	push   $0x79000
   118d5:	68 00 00 00 80       	push   $0x80000000
   118da:	e8 7a 66 00 00       	call   17f59 <kernel_memcpy>
   118df:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118e2:	83 ec 0c             	sub    $0xc,%esp
   118e5:	68 28 50 02 00       	push   $0x25028
   118ea:	e8 24 fc ff ff       	call   11513 <task_start>
   118ef:	83 c4 10             	add    $0x10,%esp
}
   118f2:	90                   	nop
   118f3:	c9                   	leave  
   118f4:	c3                   	ret    

000118f5 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	b8 28 50 02 00       	mov    $0x25028,%eax
   118fd:	5d                   	pop    %ebp
   118fe:	c3                   	ret    

000118ff <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118ff:	55                   	push   %ebp
   11900:	89 e5                	mov    %esp,%ebp
   11902:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11905:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11909:	75 1c                	jne    11927 <task_set_ready+0x28>
   1190b:	68 a5 8a 01 00       	push   $0x18aa5
   11910:	68 24 8c 01 00       	push   $0x18c24
   11915:	68 a0 01 00 00       	push   $0x1a0
   1191a:	68 bc 8a 01 00       	push   $0x18abc
   1191f:	e8 6b 61 00 00       	call   17a8f <pannic>
   11924:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   11927:	8b 45 08             	mov    0x8(%ebp),%eax
   1192a:	83 c0 44             	add    $0x44,%eax
   1192d:	83 ec 08             	sub    $0x8,%esp
   11930:	50                   	push   %eax
   11931:	68 04 50 02 00       	push   $0x25004
   11936:	e8 7d 6b 00 00       	call   184b8 <list_insert_last>
   1193b:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   1193e:	90                   	nop
   1193f:	c9                   	leave  
   11940:	c3                   	ret    

00011941 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11941:	55                   	push   %ebp
   11942:	89 e5                	mov    %esp,%ebp
   11944:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1194b:	75 1c                	jne    11969 <task_set_unready+0x28>
   1194d:	68 a5 8a 01 00       	push   $0x18aa5
   11952:	68 34 8c 01 00       	push   $0x18c34
   11957:	68 af 01 00 00       	push   $0x1af
   1195c:	68 bc 8a 01 00       	push   $0x18abc
   11961:	e8 29 61 00 00       	call   17a8f <pannic>
   11966:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   11969:	8b 45 08             	mov    0x8(%ebp),%eax
   1196c:	83 c0 44             	add    $0x44,%eax
   1196f:	83 ec 08             	sub    $0x8,%esp
   11972:	50                   	push   %eax
   11973:	68 04 50 02 00       	push   $0x25004
   11978:	e8 30 6d 00 00       	call   186ad <list_remove>
   1197d:	83 c4 10             	add    $0x10,%esp
}
   11980:	90                   	nop
   11981:	c9                   	leave  
   11982:	c3                   	ret    

00011983 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11983:	55                   	push   %ebp
   11984:	89 e5                	mov    %esp,%ebp
   11986:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11989:	83 ec 0c             	sub    $0xc,%esp
   1198c:	68 04 50 02 00       	push   $0x25004
   11991:	e8 8b f8 ff ff       	call   11221 <list_get_first>
   11996:	83 c4 10             	add    $0x10,%esp
   11999:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1199c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119a0:	74 08                	je     119aa <task_ready_first+0x27>
   119a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119a5:	83 e8 44             	sub    $0x44,%eax
   119a8:	eb 05                	jmp    119af <task_ready_first+0x2c>
   119aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119af:	c9                   	leave  
   119b0:	c3                   	ret    

000119b1 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   119b1:	55                   	push   %ebp
   119b2:	89 e5                	mov    %esp,%ebp
   119b4:	a1 00 50 02 00       	mov    0x25000,%eax
   119b9:	5d                   	pop    %ebp
   119ba:	c3                   	ret    

000119bb <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   119bb:	55                   	push   %ebp
   119bc:	89 e5                	mov    %esp,%ebp
   119be:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119c1:	e8 5e 19 00 00       	call   13324 <idt_enter_protection>
   119c6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119c9:	e8 b5 ff ff ff       	call   11983 <task_ready_first>
   119ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119d1:	a1 00 50 02 00       	mov    0x25000,%eax
   119d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119d9:	74 37                	je     11a12 <task_switch+0x57>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119db:	a1 00 50 02 00       	mov    0x25000,%eax
   119e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119e7:	75 07                	jne    119f0 <task_switch+0x35>
      to = &task_manager.empty_task;
   119e9:	c7 45 f4 f0 52 02 00 	movl   $0x252f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    task_manager.curr_task = to;
   119f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119fc:	a3 00 50 02 00       	mov    %eax,0x25000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   11a01:	83 ec 08             	sub    $0x8,%esp
   11a04:	ff 75 f4             	push   -0xc(%ebp)
   11a07:	ff 75 ec             	push   -0x14(%ebp)
   11a0a:	e8 74 f9 ff ff       	call   11383 <task_switch_from_to>
   11a0f:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   11a12:	83 ec 0c             	sub    $0xc,%esp
   11a15:	ff 75 f0             	push   -0x10(%ebp)
   11a18:	e8 1f 19 00 00       	call   1333c <idt_leave_protection>
   11a1d:	83 c4 10             	add    $0x10,%esp
}
   11a20:	90                   	nop
   11a21:	c9                   	leave  
   11a22:	c3                   	ret    

00011a23 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a23:	55                   	push   %ebp
   11a24:	89 e5                	mov    %esp,%ebp
   11a26:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a29:	83 ec 0c             	sub    $0xc,%esp
   11a2c:	68 1c 50 02 00       	push   $0x2501c
   11a31:	e8 eb f7 ff ff       	call   11221 <list_get_first>
   11a36:	83 c4 10             	add    $0x10,%esp
   11a39:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a3c:	eb 62                	jmp    11aa0 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a3e:	83 ec 0c             	sub    $0xc,%esp
   11a41:	ff 75 f4             	push   -0xc(%ebp)
   11a44:	e8 02 f7 ff ff       	call   1114b <list_node_next>
   11a49:	83 c4 10             	add    $0x10,%esp
   11a4c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a53:	74 08                	je     11a5d <task_slice_end+0x3a>
   11a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a58:	83 e8 44             	sub    $0x44,%eax
   11a5b:	eb 05                	jmp    11a62 <task_slice_end+0x3f>
   11a5d:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a62:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a65:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a68:	8b 40 20             	mov    0x20(%eax),%eax
   11a6b:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a71:	89 50 20             	mov    %edx,0x20(%eax)
   11a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a77:	8b 40 20             	mov    0x20(%eax),%eax
   11a7a:	85 c0                	test   %eax,%eax
   11a7c:	75 1c                	jne    11a9a <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a7e:	83 ec 0c             	sub    $0xc,%esp
   11a81:	ff 75 e8             	push   -0x18(%ebp)
   11a84:	e8 01 01 00 00       	call   11b8a <task_set_wakeup>
   11a89:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a8c:	83 ec 0c             	sub    $0xc,%esp
   11a8f:	ff 75 e8             	push   -0x18(%ebp)
   11a92:	e8 68 fe ff ff       	call   118ff <task_set_ready>
   11a97:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11a9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11aa0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11aa4:	75 98                	jne    11a3e <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11aa6:	e8 06 ff ff ff       	call   119b1 <task_current>
   11aab:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11aae:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11ab5:	75 23                	jne    11ada <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11ab7:	83 ec 0c             	sub    $0xc,%esp
   11aba:	68 04 50 02 00       	push   $0x25004
   11abf:	e8 fb f6 ff ff       	call   111bf <list_is_empty>
   11ac4:	83 c4 10             	add    $0x10,%esp
   11ac7:	85 c0                	test   %eax,%eax
   11ac9:	75 60                	jne    11b2b <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11acb:	c7 05 f0 52 02 00 00 	movl   $0x0,0x252f0
   11ad2:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ad5:	e8 e1 fe ff ff       	call   119bb <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11ada:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11ae1:	74 49                	je     11b2c <task_slice_end+0x109>
   11ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae6:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ae9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aef:	89 50 1c             	mov    %edx,0x1c(%eax)
   11af2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11af5:	8b 40 1c             	mov    0x1c(%eax),%eax
   11af8:	85 c0                	test   %eax,%eax
   11afa:	75 30                	jne    11b2c <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aff:	8b 50 18             	mov    0x18(%eax),%edx
   11b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b05:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11b08:	83 ec 0c             	sub    $0xc,%esp
   11b0b:	ff 75 f0             	push   -0x10(%ebp)
   11b0e:	e8 2e fe ff ff       	call   11941 <task_set_unready>
   11b13:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11b16:	83 ec 0c             	sub    $0xc,%esp
   11b19:	ff 75 f0             	push   -0x10(%ebp)
   11b1c:	e8 de fd ff ff       	call   118ff <task_set_ready>
   11b21:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b24:	e8 92 fe ff ff       	call   119bb <task_switch>
   11b29:	eb 01                	jmp    11b2c <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b2b:	90                   	nop
  }
}
   11b2c:	c9                   	leave  
   11b2d:	c3                   	ret    

00011b2e <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b2e:	55                   	push   %ebp
   11b2f:	89 e5                	mov    %esp,%ebp
   11b31:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b38:	75 1c                	jne    11b56 <task_set_sleep+0x28>
   11b3a:	68 a5 8a 01 00       	push   $0x18aa5
   11b3f:	68 78 8c 01 00       	push   $0x18c78
   11b44:	68 18 02 00 00       	push   $0x218
   11b49:	68 bc 8a 01 00       	push   $0x18abc
   11b4e:	e8 3c 5f 00 00       	call   17a8f <pannic>
   11b53:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b5a:	74 2b                	je     11b87 <task_set_sleep+0x59>

  task->sleep = slice;
   11b5c:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b62:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b65:	8b 45 08             	mov    0x8(%ebp),%eax
   11b68:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b71:	83 c0 44             	add    $0x44,%eax
   11b74:	83 ec 08             	sub    $0x8,%esp
   11b77:	50                   	push   %eax
   11b78:	68 1c 50 02 00       	push   $0x2501c
   11b7d:	e8 36 69 00 00       	call   184b8 <list_insert_last>
   11b82:	83 c4 10             	add    $0x10,%esp
   11b85:	eb 01                	jmp    11b88 <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b87:	90                   	nop
}
   11b88:	c9                   	leave  
   11b89:	c3                   	ret    

00011b8a <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b8a:	55                   	push   %ebp
   11b8b:	89 e5                	mov    %esp,%ebp
   11b8d:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b94:	75 1c                	jne    11bb2 <task_set_wakeup+0x28>
   11b96:	68 a5 8a 01 00       	push   $0x18aa5
   11b9b:	68 88 8c 01 00       	push   $0x18c88
   11ba0:	68 26 02 00 00       	push   $0x226
   11ba5:	68 bc 8a 01 00       	push   $0x18abc
   11baa:	e8 e0 5e 00 00       	call   17a8f <pannic>
   11baf:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb5:	83 c0 44             	add    $0x44,%eax
   11bb8:	83 ec 08             	sub    $0x8,%esp
   11bbb:	50                   	push   %eax
   11bbc:	68 1c 50 02 00       	push   $0x2501c
   11bc1:	e8 e7 6a 00 00       	call   186ad <list_remove>
   11bc6:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bc9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bcc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11bd2:	90                   	nop
   11bd3:	c9                   	leave  
   11bd4:	c3                   	ret    

00011bd5 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11bd5:	55                   	push   %ebp
   11bd6:	89 e5                	mov    %esp,%ebp
   11bd8:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11be2:	83 ec 0c             	sub    $0xc,%esp
   11be5:	68 c0 b9 03 00       	push   $0x3b9c0
   11bea:	e8 75 57 00 00       	call   17364 <mutex_lock>
   11bef:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11bf2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bf9:	eb 27                	jmp    11c22 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11bfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bfe:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11c04:	05 c0 55 02 00       	add    $0x255c0,%eax
   11c09:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11c0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c0f:	8b 40 08             	mov    0x8(%eax),%eax
   11c12:	85 c0                	test   %eax,%eax
   11c14:	75 08                	jne    11c1e <alloc_task+0x49>
      task = curr;
   11c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c19:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11c1c:	eb 0a                	jmp    11c28 <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c1e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c22:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c26:	7e d3                	jle    11bfb <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c28:	83 ec 0c             	sub    $0xc,%esp
   11c2b:	68 c0 b9 03 00       	push   $0x3b9c0
   11c30:	e8 d5 57 00 00       	call   1740a <mutex_unlock>
   11c35:	83 c4 10             	add    $0x10,%esp

  return task;
   11c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c3b:	c9                   	leave  
   11c3c:	c3                   	ret    

00011c3d <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c3d:	55                   	push   %ebp
   11c3e:	89 e5                	mov    %esp,%ebp
   11c40:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c43:	83 ec 0c             	sub    $0xc,%esp
   11c46:	68 c0 b9 03 00       	push   $0x3b9c0
   11c4b:	e8 14 57 00 00       	call   17364 <mutex_lock>
   11c50:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c53:	8b 45 08             	mov    0x8(%ebp),%eax
   11c56:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c5d:	83 ec 0c             	sub    $0xc,%esp
   11c60:	68 c0 b9 03 00       	push   $0x3b9c0
   11c65:	e8 a0 57 00 00       	call   1740a <mutex_unlock>
   11c6a:	83 c4 10             	add    $0x10,%esp
}
   11c6d:	90                   	nop
   11c6e:	c9                   	leave  
   11c6f:	c3                   	ret    

00011c70 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c70:	55                   	push   %ebp
   11c71:	89 e5                	mov    %esp,%ebp
   11c73:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c76:	e8 a9 16 00 00       	call   13324 <idt_enter_protection>
   11c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c7e:	e8 2e fd ff ff       	call   119b1 <task_current>
   11c83:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11c86:	83 ec 0c             	sub    $0xc,%esp
   11c89:	ff 75 f0             	push   -0x10(%ebp)
   11c8c:	e8 b0 fc ff ff       	call   11941 <task_set_unready>
   11c91:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11c94:	8b 45 08             	mov    0x8(%ebp),%eax
   11c97:	83 c0 09             	add    $0x9,%eax
   11c9a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11c9f:	f7 e2                	mul    %edx
   11ca1:	89 d0                	mov    %edx,%eax
   11ca3:	c1 e8 03             	shr    $0x3,%eax
   11ca6:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11ca9:	83 ec 08             	sub    $0x8,%esp
   11cac:	ff 75 ec             	push   -0x14(%ebp)
   11caf:	ff 75 f0             	push   -0x10(%ebp)
   11cb2:	e8 77 fe ff ff       	call   11b2e <task_set_sleep>
   11cb7:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11cba:	e8 fc fc ff ff       	call   119bb <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11cbf:	83 ec 0c             	sub    $0xc,%esp
   11cc2:	ff 75 f4             	push   -0xc(%ebp)
   11cc5:	e8 72 16 00 00       	call   1333c <idt_leave_protection>
   11cca:	83 c4 10             	add    $0x10,%esp
}
   11ccd:	90                   	nop
   11cce:	c9                   	leave  
   11ccf:	c3                   	ret    

00011cd0 <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cd0:	55                   	push   %ebp
   11cd1:	89 e5                	mov    %esp,%ebp
   11cd3:	e8 d9 fc ff ff       	call   119b1 <task_current>
   11cd8:	8b 40 08             	mov    0x8(%eax),%eax
   11cdb:	5d                   	pop    %ebp
   11cdc:	c3                   	ret    

00011cdd <copy_opened_files>:
/**
 * @brief 将当前进程的打开文件表复制给传入进程
 * 
 * @param child_task 
 */
static void copy_opened_files(task_t *child_task) {
   11cdd:	55                   	push   %ebp
   11cde:	89 e5                	mov    %esp,%ebp
   11ce0:	83 ec 18             	sub    $0x18,%esp
  task_t *parent = task_current();
   11ce3:	e8 c9 fc ff ff       	call   119b1 <task_current>
   11ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cf2:	eb 38                	jmp    11d2c <copy_opened_files+0x4f>
    file_t *file = parent->file_table[i];
   11cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfa:	83 c2 30             	add    $0x30,%edx
   11cfd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file) {
   11d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d08:	74 1e                	je     11d28 <copy_opened_files+0x4b>
      file_inc_ref(file);
   11d0a:	83 ec 0c             	sub    $0xc,%esp
   11d0d:	ff 75 ec             	push   -0x14(%ebp)
   11d10:	e8 41 47 00 00       	call   16456 <file_inc_ref>
   11d15:	83 c4 10             	add    $0x10,%esp
      child_task->file_table[i] = file;
   11d18:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d1e:	8d 4a 30             	lea    0x30(%edx),%ecx
   11d21:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11d24:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11d28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d2c:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11d30:	7e c2                	jle    11cf4 <copy_opened_files+0x17>
    }
  }
}
   11d32:	90                   	nop
   11d33:	90                   	nop
   11d34:	c9                   	leave  
   11d35:	c3                   	ret    

00011d36 <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11d36:	55                   	push   %ebp
   11d37:	89 e5                	mov    %esp,%ebp
   11d39:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11d3c:	e8 70 fc ff ff       	call   119b1 <task_current>
   11d41:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11d44:	e8 8c fe ff ff       	call   11bd5 <alloc_task>
   11d49:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11d4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d50:	0f 84 39 01 00 00    	je     11e8f <sys_fork+0x159>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d59:	8b 40 60             	mov    0x60(%eax),%eax
   11d5c:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11d5f:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11d62:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d65:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11d68:	8d 48 14             	lea    0x14(%eax),%ecx
   11d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d6e:	8b 40 34             	mov    0x34(%eax),%eax
   11d71:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d74:	83 c2 24             	add    $0x24,%edx
   11d77:	83 ec 0c             	sub    $0xc,%esp
   11d7a:	6a 00                	push   $0x0
   11d7c:	51                   	push   %ecx
   11d7d:	50                   	push   %eax
   11d7e:	52                   	push   %edx
   11d7f:	ff 75 f0             	push   -0x10(%ebp)
   11d82:	e8 c2 f7 ff ff       	call   11549 <task_init>
   11d87:	83 c4 20             	add    $0x20,%esp
   11d8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d91:	0f 88 fb 00 00 00    	js     11e92 <sys_fork+0x15c>

  //让子进程继承父进程的打开文件表
  copy_opened_files(child_task);
   11d97:	83 ec 0c             	sub    $0xc,%esp
   11d9a:	ff 75 f0             	push   -0x10(%ebp)
   11d9d:	e8 3b ff ff ff       	call   11cdd <copy_opened_files>
   11da2:	83 c4 10             	add    $0x10,%esp


  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11da5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11da8:	83 c0 5c             	add    $0x5c,%eax
   11dab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11dae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11db8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dbb:	8b 50 24             	mov    0x24(%eax),%edx
   11dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dc1:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dc7:	8b 50 2c             	mov    0x2c(%eax),%edx
   11dca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dcd:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11dd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dd3:	8b 50 28             	mov    0x28(%eax),%edx
   11dd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dd9:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11ddc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ddf:	8b 50 14             	mov    0x14(%eax),%edx
   11de2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11de5:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11de8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11deb:	8b 50 18             	mov    0x18(%eax),%edx
   11dee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11df1:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11df4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11df7:	8b 10                	mov    (%eax),%edx
   11df9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dfc:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11dff:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e02:	8b 50 1c             	mov    0x1c(%eax),%edx
   11e05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e08:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e0e:	8b 50 38             	mov    0x38(%eax),%edx
   11e11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e14:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11e17:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e1a:	8b 50 10             	mov    0x10(%eax),%edx
   11e1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e20:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e26:	8b 50 0c             	mov    0xc(%eax),%edx
   11e29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e2c:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e32:	8b 50 08             	mov    0x8(%eax),%edx
   11e35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e38:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11e3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e3e:	8b 50 04             	mov    0x4(%eax),%edx
   11e41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e44:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e4a:	8b 50 54             	mov    0x54(%eax),%edx
   11e4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e50:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e59:	89 50 04             	mov    %edx,0x4(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e5f:	8b 50 78             	mov    0x78(%eax),%edx
   11e62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e65:	8b 40 1c             	mov    0x1c(%eax),%eax
   11e68:	83 ec 08             	sub    $0x8,%esp
   11e6b:	52                   	push   %edx
   11e6c:	50                   	push   %eax
   11e6d:	e8 90 eb ff ff       	call   10a02 <memory_copy_uvm>
   11e72:	83 c4 10             	add    $0x10,%esp
   11e75:	85 c0                	test   %eax,%eax
   11e77:	78 1c                	js     11e95 <sys_fork+0x15f>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11e79:	83 ec 0c             	sub    $0xc,%esp
   11e7c:	ff 75 f0             	push   -0x10(%ebp)
   11e7f:	e8 8f f6 ff ff       	call   11513 <task_start>
   11e84:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e8a:	8b 40 08             	mov    0x8(%eax),%eax
   11e8d:	eb 2e                	jmp    11ebd <sys_fork+0x187>
  if (child_task == (task_t *)0) goto fork_failed;
   11e8f:	90                   	nop
   11e90:	eb 04                	jmp    11e96 <sys_fork+0x160>
  if (err < 0) goto fork_failed;
   11e92:	90                   	nop
   11e93:	eb 01                	jmp    11e96 <sys_fork+0x160>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e95:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11e96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e9a:	74 1c                	je     11eb8 <sys_fork+0x182>
    task_uninit(child_task);
   11e9c:	83 ec 0c             	sub    $0xc,%esp
   11e9f:	ff 75 f0             	push   -0x10(%ebp)
   11ea2:	e8 d1 f7 ff ff       	call   11678 <task_uninit>
   11ea7:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11eaa:	83 ec 0c             	sub    $0xc,%esp
   11ead:	ff 75 f0             	push   -0x10(%ebp)
   11eb0:	e8 88 fd ff ff       	call   11c3d <free_task>
   11eb5:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11eb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11ebd:	c9                   	leave  
   11ebe:	c3                   	ret    

00011ebf <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11ebf:	55                   	push   %ebp
   11ec0:	89 e5                	mov    %esp,%ebp
   11ec2:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11ec5:	e8 5a 14 00 00       	call   13324 <idt_enter_protection>
   11eca:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11ecd:	83 ec 0c             	sub    $0xc,%esp
   11ed0:	68 04 50 02 00       	push   $0x25004
   11ed5:	e8 1a f3 ff ff       	call   111f4 <list_get_size>
   11eda:	83 c4 10             	add    $0x10,%esp
   11edd:	83 f8 01             	cmp    $0x1,%eax
   11ee0:	7e 29                	jle    11f0b <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11ee2:	e8 ca fa ff ff       	call   119b1 <task_current>
   11ee7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11eea:	83 ec 0c             	sub    $0xc,%esp
   11eed:	ff 75 f0             	push   -0x10(%ebp)
   11ef0:	e8 4c fa ff ff       	call   11941 <task_set_unready>
   11ef5:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11ef8:	83 ec 0c             	sub    $0xc,%esp
   11efb:	ff 75 f0             	push   -0x10(%ebp)
   11efe:	e8 fc f9 ff ff       	call   118ff <task_set_ready>
   11f03:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11f06:	e8 b0 fa ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11f0b:	83 ec 0c             	sub    $0xc,%esp
   11f0e:	ff 75 f4             	push   -0xc(%ebp)
   11f11:	e8 26 14 00 00       	call   1333c <idt_leave_protection>
   11f16:	83 c4 10             	add    $0x10,%esp
  return 0;
   11f19:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f1e:	c9                   	leave  
   11f1f:	c3                   	ret    

00011f20 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11f20:	55                   	push   %ebp
   11f21:	89 e5                	mov    %esp,%ebp
   11f23:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11f26:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f30:	8b 40 18             	mov    0x18(%eax),%eax
   11f33:	83 e0 02             	and    $0x2,%eax
   11f36:	85 c0                	test   %eax,%eax
   11f38:	74 04                	je     11f3e <load_phdr+0x1e>
    privilege |= PTE_W;
   11f3a:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f41:	8b 50 14             	mov    0x14(%eax),%edx
   11f44:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f47:	8b 40 08             	mov    0x8(%eax),%eax
   11f4a:	ff 75 f4             	push   -0xc(%ebp)
   11f4d:	52                   	push   %edx
   11f4e:	50                   	push   %eax
   11f4f:	ff 75 10             	push   0x10(%ebp)
   11f52:	e8 18 ee ff ff       	call   10d6f <memory_alloc_for_page_dir>
   11f57:	83 c4 10             	add    $0x10,%esp
   11f5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11f5d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f61:	79 1a                	jns    11f7d <load_phdr+0x5d>
    log_printf("no memory\n");
   11f63:	83 ec 0c             	sub    $0xc,%esp
   11f66:	68 1e 8b 01 00       	push   $0x18b1e
   11f6b:	e8 35 68 00 00       	call   187a5 <log_printf>
   11f70:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f78:	e9 b5 00 00 00       	jmp    12032 <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f80:	8b 40 04             	mov    0x4(%eax),%eax
   11f83:	83 ec 04             	sub    $0x4,%esp
   11f86:	6a 00                	push   $0x0
   11f88:	50                   	push   %eax
   11f89:	ff 75 08             	push   0x8(%ebp)
   11f8c:	e8 d9 4a 00 00       	call   16a6a <sys_lseek>
   11f91:	83 c4 10             	add    $0x10,%esp
   11f94:	85 c0                	test   %eax,%eax
   11f96:	79 1a                	jns    11fb2 <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11f98:	83 ec 0c             	sub    $0xc,%esp
   11f9b:	68 29 8b 01 00       	push   $0x18b29
   11fa0:	e8 00 68 00 00       	call   187a5 <log_printf>
   11fa5:	83 c4 10             	add    $0x10,%esp
    return -1;
   11fa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11fad:	e9 80 00 00 00       	jmp    12032 <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11fb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fb5:	8b 40 08             	mov    0x8(%eax),%eax
   11fb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fbe:	8b 40 10             	mov    0x10(%eax),%eax
   11fc1:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11fc4:	eb 61                	jmp    12027 <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11fc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fc9:	ba 00 10 00 00       	mov    $0x1000,%edx
   11fce:	39 d0                	cmp    %edx,%eax
   11fd0:	0f 47 c2             	cmova  %edx,%eax
   11fd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11fd6:	83 ec 08             	sub    $0x8,%esp
   11fd9:	ff 75 f0             	push   -0x10(%ebp)
   11fdc:	ff 75 10             	push   0x10(%ebp)
   11fdf:	e8 2e ef ff ff       	call   10f12 <memory_get_paddr>
   11fe4:	83 c4 10             	add    $0x10,%esp
   11fe7:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   11fea:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11fed:	83 ec 04             	sub    $0x4,%esp
   11ff0:	ff 75 e4             	push   -0x1c(%ebp)
   11ff3:	50                   	push   %eax
   11ff4:	ff 75 08             	push   0x8(%ebp)
   11ff7:	e8 ad 48 00 00       	call   168a9 <sys_read>
   11ffc:	83 c4 10             	add    $0x10,%esp
   11fff:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   12002:	7e 17                	jle    1201b <load_phdr+0xfb>
      log_printf("read file failed\n");
   12004:	83 ec 0c             	sub    $0xc,%esp
   12007:	68 3c 8b 01 00       	push   $0x18b3c
   1200c:	e8 94 67 00 00       	call   187a5 <log_printf>
   12011:	83 c4 10             	add    $0x10,%esp
      return -1;
   12014:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12019:	eb 17                	jmp    12032 <load_phdr+0x112>
    }

    size -= curr_size;
   1201b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1201e:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   12021:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12024:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   12027:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1202b:	75 99                	jne    11fc6 <load_phdr+0xa6>
  }

  return 0;
   1202d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12032:	c9                   	leave  
   12033:	c3                   	ret    

00012034 <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   12034:	55                   	push   %ebp
   12035:	89 e5                	mov    %esp,%ebp
   12037:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   1203a:	83 ec 08             	sub    $0x8,%esp
   1203d:	6a 00                	push   $0x0
   1203f:	ff 75 0c             	push   0xc(%ebp)
   12042:	e8 72 46 00 00       	call   166b9 <sys_open>
   12047:	83 c4 10             	add    $0x10,%esp
   1204a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   1204d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12051:	79 18                	jns    1206b <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   12053:	83 ec 08             	sub    $0x8,%esp
   12056:	ff 75 0c             	push   0xc(%ebp)
   12059:	68 4e 8b 01 00       	push   $0x18b4e
   1205e:	e8 42 67 00 00       	call   187a5 <log_printf>
   12063:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12066:	e9 c1 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   1206b:	83 ec 04             	sub    $0x4,%esp
   1206e:	6a 34                	push   $0x34
   12070:	8d 45 b0             	lea    -0x50(%ebp),%eax
   12073:	50                   	push   %eax
   12074:	ff 75 ec             	push   -0x14(%ebp)
   12077:	e8 2d 48 00 00       	call   168a9 <sys_read>
   1207c:	83 c4 10             	add    $0x10,%esp
   1207f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   12082:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12085:	83 f8 33             	cmp    $0x33,%eax
   12088:	77 18                	ja     120a2 <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   1208a:	83 ec 08             	sub    $0x8,%esp
   1208d:	ff 75 e8             	push   -0x18(%ebp)
   12090:	68 5e 8b 01 00       	push   $0x18b5e
   12095:	e8 0b 67 00 00       	call   187a5 <log_printf>
   1209a:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1209d:	e9 8a 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120a2:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   120a6:	3c 7f                	cmp    $0x7f,%al
   120a8:	75 18                	jne    120c2 <load_elf_file+0x8e>
   120aa:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   120ae:	3c 45                	cmp    $0x45,%al
   120b0:	75 10                	jne    120c2 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120b2:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120b6:	3c 4c                	cmp    $0x4c,%al
   120b8:	75 08                	jne    120c2 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120ba:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   120be:	3c 46                	cmp    $0x46,%al
   120c0:	74 15                	je     120d7 <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   120c2:	83 ec 0c             	sub    $0xc,%esp
   120c5:	68 7a 8b 01 00       	push   $0x18b7a
   120ca:	e8 d6 66 00 00       	call   187a5 <log_printf>
   120cf:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120d2:	e9 55 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120d7:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   120db:	66 83 f8 02          	cmp    $0x2,%ax
   120df:	75 11                	jne    120f2 <load_elf_file+0xbe>
   120e1:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   120e5:	66 83 f8 03          	cmp    $0x3,%ax
   120e9:	75 07                	jne    120f2 <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   120eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120ee:	85 c0                	test   %eax,%eax
   120f0:	75 15                	jne    12107 <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   120f2:	83 ec 0c             	sub    $0xc,%esp
   120f5:	68 94 8b 01 00       	push   $0x18b94
   120fa:	e8 a6 66 00 00       	call   187a5 <log_printf>
   120ff:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12102:	e9 25 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   12107:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   1210b:	66 85 c0             	test   %ax,%ax
   1210e:	74 07                	je     12117 <load_elf_file+0xe3>
   12110:	8b 45 cc             	mov    -0x34(%ebp),%eax
   12113:	85 c0                	test   %eax,%eax
   12115:	75 15                	jne    1212c <load_elf_file+0xf8>
    log_printf("none programe header\n");
   12117:	83 ec 0c             	sub    $0xc,%esp
   1211a:	68 b5 8b 01 00       	push   $0x18bb5
   1211f:	e8 81 66 00 00       	call   187a5 <log_printf>
   12124:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12127:	e9 00 01 00 00       	jmp    1222c <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   1212c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1212f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12132:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12139:	e9 cb 00 00 00       	jmp    12209 <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   1213e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12141:	83 ec 04             	sub    $0x4,%esp
   12144:	6a 00                	push   $0x0
   12146:	50                   	push   %eax
   12147:	ff 75 ec             	push   -0x14(%ebp)
   1214a:	e8 1b 49 00 00       	call   16a6a <sys_lseek>
   1214f:	83 c4 10             	add    $0x10,%esp
   12152:	85 c0                	test   %eax,%eax
   12154:	79 15                	jns    1216b <load_elf_file+0x137>
      log_printf("read file failed\n");
   12156:	83 ec 0c             	sub    $0xc,%esp
   12159:	68 3c 8b 01 00       	push   $0x18b3c
   1215e:	e8 42 66 00 00       	call   187a5 <log_printf>
   12163:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12166:	e9 c1 00 00 00       	jmp    1222c <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   1216b:	83 ec 04             	sub    $0x4,%esp
   1216e:	6a 20                	push   $0x20
   12170:	8d 45 90             	lea    -0x70(%ebp),%eax
   12173:	50                   	push   %eax
   12174:	ff 75 ec             	push   -0x14(%ebp)
   12177:	e8 2d 47 00 00       	call   168a9 <sys_read>
   1217c:	83 c4 10             	add    $0x10,%esp
   1217f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   12182:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12185:	83 f8 1f             	cmp    $0x1f,%eax
   12188:	77 15                	ja     1219f <load_elf_file+0x16b>
      log_printf("read file failed\n");
   1218a:	83 ec 0c             	sub    $0xc,%esp
   1218d:	68 3c 8b 01 00       	push   $0x18b3c
   12192:	e8 0e 66 00 00       	call   187a5 <log_printf>
   12197:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   1219a:	e9 8d 00 00 00       	jmp    1222c <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   1219f:	8b 45 90             	mov    -0x70(%ebp),%eax
   121a2:	83 f8 01             	cmp    $0x1,%eax
   121a5:	75 53                	jne    121fa <load_elf_file+0x1c6>
   121a7:	8b 45 98             	mov    -0x68(%ebp),%eax
   121aa:	85 c0                	test   %eax,%eax
   121ac:	79 4c                	jns    121fa <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   121ae:	83 ec 04             	sub    $0x4,%esp
   121b1:	ff 75 10             	push   0x10(%ebp)
   121b4:	8d 45 90             	lea    -0x70(%ebp),%eax
   121b7:	50                   	push   %eax
   121b8:	ff 75 ec             	push   -0x14(%ebp)
   121bb:	e8 60 fd ff ff       	call   11f20 <load_phdr>
   121c0:	83 c4 10             	add    $0x10,%esp
   121c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   121c6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   121ca:	79 12                	jns    121de <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   121cc:	83 ec 0c             	sub    $0xc,%esp
   121cf:	68 cb 8b 01 00       	push   $0x18bcb
   121d4:	e8 cc 65 00 00       	call   187a5 <log_printf>
   121d9:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   121dc:	eb 4e                	jmp    1222c <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   121de:	8b 55 98             	mov    -0x68(%ebp),%edx
   121e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   121e4:	01 c2                	add    %eax,%edx
   121e6:	8b 45 08             	mov    0x8(%ebp),%eax
   121e9:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   121ec:	8b 45 08             	mov    0x8(%ebp),%eax
   121ef:	8b 50 10             	mov    0x10(%eax),%edx
   121f2:	8b 45 08             	mov    0x8(%ebp),%eax
   121f5:	89 50 14             	mov    %edx,0x14(%eax)
   121f8:	eb 01                	jmp    121fb <load_elf_file+0x1c7>
      continue;
   121fa:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   121fb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121ff:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12203:	0f b7 c0             	movzwl %ax,%eax
   12206:	01 45 f4             	add    %eax,-0xc(%ebp)
   12209:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   1220d:	0f b7 c0             	movzwl %ax,%eax
   12210:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12213:	0f 8c 25 ff ff ff    	jl     1213e <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   12219:	83 ec 0c             	sub    $0xc,%esp
   1221c:	ff 75 ec             	push   -0x14(%ebp)
   1221f:	e8 f8 48 00 00       	call   16b1c <sys_close>
   12224:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   12227:	8b 45 c8             	mov    -0x38(%ebp),%eax
   1222a:	eb 19                	jmp    12245 <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   1222c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12230:	78 0e                	js     12240 <load_elf_file+0x20c>
    sys_close(file);
   12232:	83 ec 0c             	sub    $0xc,%esp
   12235:	ff 75 ec             	push   -0x14(%ebp)
   12238:	e8 df 48 00 00       	call   16b1c <sys_close>
   1223d:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   12240:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12245:	c9                   	leave  
   12246:	c3                   	ret    

00012247 <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   12247:	55                   	push   %ebp
   12248:	89 e5                	mov    %esp,%ebp
   1224a:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   1224d:	8b 45 14             	mov    0x14(%ebp),%eax
   12250:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   12253:	8b 45 0c             	mov    0xc(%ebp),%eax
   12256:	83 c0 0c             	add    $0xc,%eax
   12259:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **to_argv_paddr =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   1225c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1225f:	83 ec 08             	sub    $0x8,%esp
   12262:	50                   	push   %eax
   12263:	ff 75 08             	push   0x8(%ebp)
   12266:	e8 a7 ec ff ff       	call   10f12 <memory_get_paddr>
   1226b:	83 c4 10             	add    $0x10,%esp
  char **to_argv_paddr =
   1226e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小，
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * argc;
   12271:	8b 45 14             	mov    0x14(%ebp),%eax
   12274:	83 c0 03             	add    $0x3,%eax
   12277:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1227e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12281:	01 d0                	add    %edx,%eax
   12283:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   12286:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1228d:	e9 82 00 00 00       	jmp    12314 <copy_args+0xcd>
    char *from = argv[i];
   12292:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12295:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1229c:	8b 45 10             	mov    0x10(%ebp),%eax
   1229f:	01 d0                	add    %edx,%eax
   122a1:	8b 00                	mov    (%eax),%eax
   122a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   122a6:	83 ec 0c             	sub    $0xc,%esp
   122a9:	ff 75 e8             	push   -0x18(%ebp)
   122ac:	e8 73 5c 00 00       	call   17f24 <kernel_strlen>
   122b1:	83 c4 10             	add    $0x10,%esp
   122b4:	83 c0 01             	add    $0x1,%eax
   122b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   122ba:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   122bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122c3:	51                   	push   %ecx
   122c4:	52                   	push   %edx
   122c5:	ff 75 08             	push   0x8(%ebp)
   122c8:	50                   	push   %eax
   122c9:	e8 97 ec ff ff       	call   10f65 <memory_copy_uvm_data>
   122ce:	83 c4 10             	add    $0x10,%esp
   122d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   122d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   122d8:	79 1c                	jns    122f6 <copy_args+0xaf>
   122da:	68 e0 8b 01 00       	push   $0x18be0
   122df:	68 a8 8c 01 00       	push   $0x18ca8
   122e4:	68 96 03 00 00       	push   $0x396
   122e9:	68 bc 8a 01 00       	push   $0x18abc
   122ee:	e8 9c 57 00 00       	call   17a8f <pannic>
   122f3:	83 c4 10             	add    $0x10,%esp
    to_argv_paddr[i] = dest_arg;
   122f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12300:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12303:	01 c2                	add    %eax,%edx
   12305:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12308:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   1230a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1230d:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   12310:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12314:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12317:	3b 45 14             	cmp    0x14(%ebp),%eax
   1231a:	0f 8c 72 ff ff ff    	jl     12292 <copy_args+0x4b>
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   12320:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   12323:	8b 45 0c             	mov    0xc(%ebp),%eax
   12326:	6a 0c                	push   $0xc
   12328:	52                   	push   %edx
   12329:	ff 75 08             	push   0x8(%ebp)
   1232c:	50                   	push   %eax
   1232d:	e8 33 ec ff ff       	call   10f65 <memory_copy_uvm_data>
   12332:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   12335:	90                   	nop
   12336:	c9                   	leave  
   12337:	c3                   	ret    

00012338 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   12338:	55                   	push   %ebp
   12339:	89 e5                	mov    %esp,%ebp
   1233b:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   1233e:	e8 6e f6 ff ff       	call   119b1 <task_current>
   12343:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   12346:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12349:	8b 40 78             	mov    0x78(%eax),%eax
   1234c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   1234f:	e8 29 e6 ff ff       	call   1097d <memory_creat_uvm>
   12354:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   12357:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1235b:	0f 84 4a 01 00 00    	je     124ab <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   12361:	83 ec 04             	sub    $0x4,%esp
   12364:	ff 75 ec             	push   -0x14(%ebp)
   12367:	ff 75 08             	push   0x8(%ebp)
   1236a:	ff 75 f4             	push   -0xc(%ebp)
   1236d:	e8 c2 fc ff ff       	call   12034 <load_elf_file>
   12372:	83 c4 10             	add    $0x10,%esp
   12375:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   12378:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1237c:	0f 84 2c 01 00 00    	je     124ae <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   12382:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   12389:	6a 07                	push   $0x7
   1238b:	68 00 20 03 00       	push   $0x32000
   12390:	68 00 e0 fc df       	push   $0xdffce000
   12395:	ff 75 ec             	push   -0x14(%ebp)
   12398:	e8 d2 e9 ff ff       	call   10d6f <memory_alloc_for_page_dir>
   1239d:	83 c4 10             	add    $0x10,%esp
   123a0:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   123a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123a7:	0f 88 04 01 00 00    	js     124b1 <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   123ad:	83 ec 0c             	sub    $0xc,%esp
   123b0:	ff 75 0c             	push   0xc(%ebp)
   123b3:	e8 a0 5f 00 00       	call   18358 <strings_count>
   123b8:	83 c4 10             	add    $0x10,%esp
   123bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   123be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123c1:	ff 75 dc             	push   -0x24(%ebp)
   123c4:	ff 75 0c             	push   0xc(%ebp)
   123c7:	50                   	push   %eax
   123c8:	ff 75 ec             	push   -0x14(%ebp)
   123cb:	e8 77 fe ff ff       	call   12247 <copy_args>
   123d0:	83 c4 10             	add    $0x10,%esp
   123d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   123d6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123da:	0f 88 d4 00 00 00    	js     124b4 <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   123e0:	e8 cc f5 ff ff       	call   119b1 <task_current>
   123e5:	8b 40 60             	mov    0x60(%eax),%eax
   123e8:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   123eb:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   123ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123f1:	8d 50 ec             	lea    -0x14(%eax),%edx
   123f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123f7:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   123fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123fd:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12400:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   12403:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12406:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1240d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12410:	8b 50 28             	mov    0x28(%eax),%edx
   12413:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12416:	89 50 2c             	mov    %edx,0x2c(%eax)
   12419:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1241c:	8b 50 2c             	mov    0x2c(%eax),%edx
   1241f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12422:	89 50 24             	mov    %edx,0x24(%eax)
   12425:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12428:	8b 50 24             	mov    0x24(%eax),%edx
   1242b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1242e:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   12431:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12434:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   1243b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1243e:	8b 50 1c             	mov    0x1c(%eax),%edx
   12441:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12444:	89 50 14             	mov    %edx,0x14(%eax)
   12447:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1244a:	8b 50 14             	mov    0x14(%eax),%edx
   1244d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12450:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   12453:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12456:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   1245c:	83 ec 0c             	sub    $0xc,%esp
   1245f:	ff 75 08             	push   0x8(%ebp)
   12462:	e8 1e 5f 00 00       	call   18385 <get_file_name>
   12467:	83 c4 10             	add    $0x10,%esp
   1246a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1246d:	83 c2 24             	add    $0x24,%edx
   12470:	83 ec 04             	sub    $0x4,%esp
   12473:	6a 20                	push   $0x20
   12475:	50                   	push   %eax
   12476:	52                   	push   %edx
   12477:	e8 d6 59 00 00       	call   17e52 <kernel_strncpy>
   1247c:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   1247f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12482:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12485:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   12488:	83 ec 0c             	sub    $0xc,%esp
   1248b:	ff 75 ec             	push   -0x14(%ebp)
   1248e:	e8 fe ed ff ff       	call   11291 <mmu_set_page_dir>
   12493:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   12496:	83 ec 0c             	sub    $0xc,%esp
   12499:	ff 75 f0             	push   -0x10(%ebp)
   1249c:	e8 ee e6 ff ff       	call   10b8f <memory_destroy_uvm>
   124a1:	83 c4 10             	add    $0x10,%esp
  return 0;
   124a4:	b8 00 00 00 00       	mov    $0x0,%eax
   124a9:	eb 3a                	jmp    124e5 <sys_execve+0x1ad>
    goto exec_failed;
   124ab:	90                   	nop
   124ac:	eb 07                	jmp    124b5 <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   124ae:	90                   	nop
   124af:	eb 04                	jmp    124b5 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124b1:	90                   	nop
   124b2:	eb 01                	jmp    124b5 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124b4:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   124b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   124b9:	74 25                	je     124e0 <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   124bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124be:	8b 55 f0             	mov    -0x10(%ebp),%edx
   124c1:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   124c4:	83 ec 0c             	sub    $0xc,%esp
   124c7:	ff 75 f0             	push   -0x10(%ebp)
   124ca:	e8 c2 ed ff ff       	call   11291 <mmu_set_page_dir>
   124cf:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   124d2:	83 ec 0c             	sub    $0xc,%esp
   124d5:	ff 75 ec             	push   -0x14(%ebp)
   124d8:	e8 b2 e6 ff ff       	call   10b8f <memory_destroy_uvm>
   124dd:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   124e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   124e5:	c9                   	leave  
   124e6:	c3                   	ret    

000124e7 <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   124e7:	55                   	push   %ebp
   124e8:	89 e5                	mov    %esp,%ebp
   124ea:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   124ed:	e8 bf f4 ff ff       	call   119b1 <task_current>
   124f2:	89 45 e8             	mov    %eax,-0x18(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   124f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   124fc:	eb 39                	jmp    12537 <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   124fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12501:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12504:	83 c2 30             	add    $0x30,%edx
   12507:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1250b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (file) {
   1250e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   12512:	74 1f                	je     12533 <sys_exit+0x4c>
      sys_close(fd);
   12514:	83 ec 0c             	sub    $0xc,%esp
   12517:	ff 75 f4             	push   -0xc(%ebp)
   1251a:	e8 fd 45 00 00       	call   16b1c <sys_close>
   1251f:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   12522:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12525:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12528:	83 c2 30             	add    $0x30,%edx
   1252b:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   12532:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12533:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12537:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1253b:	7e c1                	jle    124fe <sys_exit+0x17>
    }
  }

  //3.将该进程的子进程的父进程设为first_task，由其进行统一回收
  int move_child = 0; //标志位，判断是否当前进程已有子进程进入僵尸态
   1253d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  //TODO:加锁
  mutex_lock(&task_table_lock);
   12544:	83 ec 0c             	sub    $0xc,%esp
   12547:	68 c0 b9 03 00       	push   $0x3b9c0
   1254c:	e8 13 4e 00 00       	call   17364 <mutex_lock>
   12551:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < TASK_COUNT; ++i) {
   12554:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1255b:	eb 3b                	jmp    12598 <sys_exit+0xb1>
    task_t *task = task_table + i;
   1255d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12560:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12566:	05 c0 55 02 00       	add    $0x255c0,%eax
   1256b:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (task->parent == curr_task) {
   1256e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12571:	8b 40 04             	mov    0x4(%eax),%eax
   12574:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   12577:	75 1b                	jne    12594 <sys_exit+0xad>
      task->parent = &task_manager.first_task;
   12579:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1257c:	c7 40 04 28 50 02 00 	movl   $0x25028,0x4(%eax)
      if (task->state == TASK_ZOMBIE) { //已有子进程提前退出进入僵尸态，则设置标志位
   12583:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12586:	8b 00                	mov    (%eax),%eax
   12588:	83 f8 06             	cmp    $0x6,%eax
   1258b:	75 07                	jne    12594 <sys_exit+0xad>
        move_child = 1;
   1258d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  for (int i = 0; i < TASK_COUNT; ++i) {
   12594:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12598:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   1259c:	7e bf                	jle    1255d <sys_exit+0x76>
      }
    }
  }
  //TODO:解锁
  mutex_unlock(&task_table_lock);
   1259e:	83 ec 0c             	sub    $0xc,%esp
   125a1:	68 c0 b9 03 00       	push   $0x3b9c0
   125a6:	e8 5f 4e 00 00       	call   1740a <mutex_unlock>
   125ab:	83 c4 10             	add    $0x10,%esp
 

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   125ae:	e8 71 0d 00 00       	call   13324 <idt_enter_protection>
   125b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)


  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   125b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125b9:	8b 40 04             	mov    0x4(%eax),%eax
   125bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  if (move_child && (parent != &task_manager.first_task)) {  
   125bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125c3:	74 23                	je     125e8 <sys_exit+0x101>
   125c5:	81 7d e0 28 50 02 00 	cmpl   $0x25028,-0x20(%ebp)
   125cc:	74 1a                	je     125e8 <sys_exit+0x101>
    //当前进程的父进程不是first_task,
    //需要对first_task进行唤醒，以使first_task
    //对当前进程的提前死亡的子进程进行资源回收
    if (task_manager.first_task.state == TASK_WAITTING) {
   125ce:	a1 28 50 02 00       	mov    0x25028,%eax
   125d3:	83 f8 04             	cmp    $0x4,%eax
   125d6:	75 10                	jne    125e8 <sys_exit+0x101>
      task_set_ready(&task_manager.first_task);
   125d8:	83 ec 0c             	sub    $0xc,%esp
   125db:	68 28 50 02 00       	push   $0x25028
   125e0:	e8 1a f3 ff ff       	call   118ff <task_set_ready>
   125e5:	83 c4 10             	add    $0x10,%esp
    }

  }
  

  if (parent->state ==
   125e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
   125eb:	8b 00                	mov    (%eax),%eax
   125ed:	83 f8 04             	cmp    $0x4,%eax
   125f0:	75 0e                	jne    12600 <sys_exit+0x119>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   125f2:	83 ec 0c             	sub    $0xc,%esp
   125f5:	ff 75 e0             	push   -0x20(%ebp)
   125f8:	e8 02 f3 ff ff       	call   118ff <task_set_ready>
   125fd:	83 c4 10             	add    $0x10,%esp
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   12600:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12603:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   12609:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1260c:	8b 55 08             	mov    0x8(%ebp),%edx
   1260f:	89 50 0c             	mov    %edx,0xc(%eax)

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   12612:	83 ec 0c             	sub    $0xc,%esp
   12615:	ff 75 e8             	push   -0x18(%ebp)
   12618:	e8 24 f3 ff ff       	call   11941 <task_set_unready>
   1261d:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   12620:	e8 96 f3 ff ff       	call   119bb <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   12625:	83 ec 0c             	sub    $0xc,%esp
   12628:	ff 75 e4             	push   -0x1c(%ebp)
   1262b:	e8 0c 0d 00 00       	call   1333c <idt_leave_protection>
   12630:	83 c4 10             	add    $0x10,%esp
}
   12633:	90                   	nop
   12634:	c9                   	leave  
   12635:	c3                   	ret    

00012636 <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   12636:	55                   	push   %ebp
   12637:	89 e5                	mov    %esp,%ebp
   12639:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   1263c:	e8 70 f3 ff ff       	call   119b1 <task_current>
   12641:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   12644:	83 ec 0c             	sub    $0xc,%esp
   12647:	68 c0 b9 03 00       	push   $0x3b9c0
   1264c:	e8 13 4d 00 00       	call   17364 <mutex_lock>
   12651:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   12654:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1265b:	eb 6c                	jmp    126c9 <sys_wait+0x93>
      task_t *task = task_table + i;
   1265d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12660:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12666:	05 c0 55 02 00       	add    $0x255c0,%eax
   1266b:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->pid != 0 && task->parent != curr_task) {
   1266e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12671:	8b 40 08             	mov    0x8(%eax),%eax
   12674:	85 c0                	test   %eax,%eax
   12676:	74 0b                	je     12683 <sys_wait+0x4d>
   12678:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1267b:	8b 40 04             	mov    0x4(%eax),%eax
   1267e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12681:	75 41                	jne    126c4 <sys_wait+0x8e>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   12683:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12686:	8b 00                	mov    (%eax),%eax
   12688:	83 f8 06             	cmp    $0x6,%eax
   1268b:	75 38                	jne    126c5 <sys_wait+0x8f>
        int pid = task->pid;
   1268d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12690:	8b 40 08             	mov    0x8(%eax),%eax
   12693:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   12696:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12699:	8b 50 0c             	mov    0xc(%eax),%edx
   1269c:	8b 45 08             	mov    0x8(%ebp),%eax
   1269f:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   126a1:	83 ec 0c             	sub    $0xc,%esp
   126a4:	ff 75 e8             	push   -0x18(%ebp)
   126a7:	e8 cc ef ff ff       	call   11678 <task_uninit>
   126ac:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   126af:	83 ec 0c             	sub    $0xc,%esp
   126b2:	68 c0 b9 03 00       	push   $0x3b9c0
   126b7:	e8 4e 4d 00 00       	call   1740a <mutex_unlock>
   126bc:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   126bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   126c2:	eb 52                	jmp    12716 <sys_wait+0xe0>
        continue;
   126c4:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   126c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   126c9:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   126cd:	7e 8e                	jle    1265d <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   126cf:	83 ec 0c             	sub    $0xc,%esp
   126d2:	68 c0 b9 03 00       	push   $0x3b9c0
   126d7:	e8 2e 4d 00 00       	call   1740a <mutex_unlock>
   126dc:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   126df:	e8 40 0c 00 00       	call   13324 <idt_enter_protection>
   126e4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   126e7:	83 ec 0c             	sub    $0xc,%esp
   126ea:	ff 75 f0             	push   -0x10(%ebp)
   126ed:	e8 4f f2 ff ff       	call   11941 <task_set_unready>
   126f2:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   126f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126f8:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   126fe:	e8 b8 f2 ff ff       	call   119bb <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   12703:	83 ec 0c             	sub    $0xc,%esp
   12706:	ff 75 ec             	push   -0x14(%ebp)
   12709:	e8 2e 0c 00 00       	call   1333c <idt_leave_protection>
   1270e:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   12711:	e9 2e ff ff ff       	jmp    12644 <sys_wait+0xe>
  }
  return 0;
   12716:	c9                   	leave  
   12717:	c3                   	ret    

00012718 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   12718:	55                   	push   %ebp
   12719:	89 e5                	mov    %esp,%ebp
   1271b:	83 ec 08             	sub    $0x8,%esp
   1271e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12721:	8b 45 14             	mov    0x14(%ebp),%eax
   12724:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12728:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   1272c:	8b 45 10             	mov    0x10(%ebp),%eax
   1272f:	89 c2                	mov    %eax,%edx
   12731:	8b 45 08             	mov    0x8(%ebp),%eax
   12734:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   12737:	8b 45 10             	mov    0x10(%ebp),%eax
   1273a:	c1 e8 10             	shr    $0x10,%eax
   1273d:	89 c2                	mov    %eax,%edx
   1273f:	8b 45 08             	mov    0x8(%ebp),%eax
   12742:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   12746:	8b 45 08             	mov    0x8(%ebp),%eax
   12749:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1274d:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12751:	8b 45 08             	mov    0x8(%ebp),%eax
   12754:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12758:	66 89 50 04          	mov    %dx,0x4(%eax)
   1275c:	90                   	nop
   1275d:	c9                   	leave  
   1275e:	c3                   	ret    

0001275f <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1275f:	55                   	push   %ebp
   12760:	89 e5                	mov    %esp,%ebp
   12762:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   12765:	8b 45 08             	mov    0x8(%ebp),%eax
   12768:	c1 e8 10             	shr    $0x10,%eax
   1276b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1276f:	8b 45 08             	mov    0x8(%ebp),%eax
   12772:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12776:	8b 45 0c             	mov    0xc(%ebp),%eax
   12779:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   1277c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12780:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12784:	90                   	nop
   12785:	c9                   	leave  
   12786:	c3                   	ret    

00012787 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   12787:	55                   	push   %ebp
   12788:	89 e5                	mov    %esp,%ebp
   1278a:	83 ec 18             	sub    $0x18,%esp
   1278d:	8b 55 08             	mov    0x8(%ebp),%edx
   12790:	8b 45 14             	mov    0x14(%ebp),%eax
   12793:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   12797:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   1279b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1279f:	66 c1 e8 03          	shr    $0x3,%ax
   127a3:	0f b7 c0             	movzwl %ax,%eax
   127a6:	c1 e0 03             	shl    $0x3,%eax
   127a9:	05 e0 bb 03 00       	add    $0x3bbe0,%eax
   127ae:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   127b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   127b4:	89 c2                	mov    %eax,%edx
   127b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127b9:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   127bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   127c0:	c1 e8 10             	shr    $0x10,%eax
   127c3:	89 c2                	mov    %eax,%edx
   127c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127c8:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   127cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   127ce:	c1 e8 18             	shr    $0x18,%eax
   127d1:	89 c2                	mov    %eax,%edx
   127d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127d6:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   127d9:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   127e0:	76 1d                	jbe    127ff <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   127e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127e5:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   127e9:	66 0d 00 80          	or     $0x8000,%ax
   127ed:	89 c2                	mov    %eax,%edx
   127ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127f2:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   127f6:	8b 45 10             	mov    0x10(%ebp),%eax
   127f9:	c1 e8 0c             	shr    $0xc,%eax
   127fc:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   127ff:	8b 45 10             	mov    0x10(%ebp),%eax
   12802:	89 c2                	mov    %eax,%edx
   12804:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12807:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   1280a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12811:	89 c2                	mov    %eax,%edx
   12813:	8b 45 10             	mov    0x10(%ebp),%eax
   12816:	c1 e8 08             	shr    $0x8,%eax
   12819:	66 25 00 0f          	and    $0xf00,%ax
   1281d:	09 d0                	or     %edx,%eax
   1281f:	89 c2                	mov    %eax,%edx
   12821:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12824:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   12828:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1282b:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1282f:	89 c2                	mov    %eax,%edx
   12831:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   12835:	80 e4 f0             	and    $0xf0,%ah
   12838:	09 d0                	or     %edx,%eax
   1283a:	89 c2                	mov    %eax,%edx
   1283c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1283f:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   12843:	90                   	nop
   12844:	c9                   	leave  
   12845:	c3                   	ret    

00012846 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   12846:	55                   	push   %ebp
   12847:	89 e5                	mov    %esp,%ebp
   12849:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1284c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12853:	eb 1c                	jmp    12871 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   12855:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12858:	c1 e0 03             	shl    $0x3,%eax
   1285b:	0f b7 c0             	movzwl %ax,%eax
   1285e:	6a 00                	push   $0x0
   12860:	6a 00                	push   $0x0
   12862:	6a 00                	push   $0x0
   12864:	50                   	push   %eax
   12865:	e8 1d ff ff ff       	call   12787 <segment_desc_set>
   1286a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1286d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12871:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   12878:	7e db                	jle    12855 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   1287a:	68 92 40 00 00       	push   $0x4092
   1287f:	6a ff                	push   $0xffffffff
   12881:	6a 00                	push   $0x0
   12883:	6a 10                	push   $0x10
   12885:	e8 fd fe ff ff       	call   12787 <segment_desc_set>
   1288a:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   1288d:	c6 05 e2 bb 04 00 01 	movb   $0x1,0x4bbe2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   12894:	68 9a 40 00 00       	push   $0x409a
   12899:	6a ff                	push   $0xffffffff
   1289b:	6a 00                	push   $0x0
   1289d:	6a 08                	push   $0x8
   1289f:	e8 e3 fe ff ff       	call   12787 <segment_desc_set>
   128a4:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   128a7:	c6 05 e1 bb 04 00 01 	movb   $0x1,0x4bbe1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   128ae:	ba e7 02 01 00       	mov    $0x102e7,%edx
   128b3:	b8 f8 bb 03 00       	mov    $0x3bbf8,%eax
   128b8:	68 05 ec 00 00       	push   $0xec05
   128bd:	52                   	push   %edx
   128be:	6a 08                	push   $0x8
   128c0:	50                   	push   %eax
   128c1:	e8 52 fe ff ff       	call   12718 <gate_desc_set>
   128c6:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   128c9:	c6 05 e3 bb 04 00 01 	movb   $0x1,0x4bbe3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   128d0:	b8 e0 bb 03 00       	mov    $0x3bbe0,%eax
   128d5:	83 ec 08             	sub    $0x8,%esp
   128d8:	68 00 00 01 00       	push   $0x10000
   128dd:	50                   	push   %eax
   128de:	e8 7c fe ff ff       	call   1275f <lgdt>
   128e3:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   128e6:	83 ec 0c             	sub    $0xc,%esp
   128e9:	68 e0 db 04 00       	push   $0x4dbe0
   128ee:	e8 24 4a 00 00       	call   17317 <mutex_init>
   128f3:	83 c4 10             	add    $0x10,%esp
}
   128f6:	90                   	nop
   128f7:	c9                   	leave  
   128f8:	c3                   	ret    

000128f9 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   128f9:	55                   	push   %ebp
   128fa:	89 e5                	mov    %esp,%ebp
   128fc:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   128ff:	83 ec 0c             	sub    $0xc,%esp
   12902:	68 e0 db 04 00       	push   $0x4dbe0
   12907:	e8 58 4a 00 00       	call   17364 <mutex_lock>
   1290c:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1290f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12916:	eb 36                	jmp    1294e <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   12918:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1291b:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   12920:	0f b6 00             	movzbl (%eax),%eax
   12923:	84 c0                	test   %al,%al
   12925:	75 23                	jne    1294a <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   12927:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1292a:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   1292f:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   12932:	83 ec 0c             	sub    $0xc,%esp
   12935:	68 e0 db 04 00       	push   $0x4dbe0
   1293a:	e8 cb 4a 00 00       	call   1740a <mutex_unlock>
   1293f:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   12942:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12945:	c1 e0 03             	shl    $0x3,%eax
   12948:	eb 22                	jmp    1296c <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1294a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1294e:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   12955:	7e c1                	jle    12918 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   12957:	83 ec 0c             	sub    $0xc,%esp
   1295a:	68 e0 db 04 00       	push   $0x4dbe0
   1295f:	e8 a6 4a 00 00       	call   1740a <mutex_unlock>
   12964:	83 c4 10             	add    $0x10,%esp
    return -1;
   12967:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1296c:	c9                   	leave  
   1296d:	c3                   	ret    

0001296e <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   1296e:	55                   	push   %ebp
   1296f:	89 e5                	mov    %esp,%ebp
   12971:	83 ec 14             	sub    $0x14,%esp
   12974:	8b 45 08             	mov    0x8(%ebp),%eax
   12977:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   1297b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1297f:	66 c1 e8 03          	shr    $0x3,%ax
   12983:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   12987:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   1298b:	c6 80 e0 bb 04 00 00 	movb   $0x0,0x4bbe0(%eax)
}
   12992:	90                   	nop
   12993:	c9                   	leave  
   12994:	c3                   	ret    

00012995 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   12995:	55                   	push   %ebp
   12996:	89 e5                	mov    %esp,%ebp
   12998:	fa                   	cli    
   12999:	90                   	nop
   1299a:	5d                   	pop    %ebp
   1299b:	c3                   	ret    

0001299c <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1299c:	55                   	push   %ebp
   1299d:	89 e5                	mov    %esp,%ebp
   1299f:	fb                   	sti    
   129a0:	90                   	nop
   129a1:	5d                   	pop    %ebp
   129a2:	c3                   	ret    

000129a3 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   129a3:	55                   	push   %ebp
   129a4:	89 e5                	mov    %esp,%ebp
   129a6:	f4                   	hlt    
   129a7:	90                   	nop
   129a8:	5d                   	pop    %ebp
   129a9:	c3                   	ret    

000129aa <inb>:
static inline uint8_t inb(uint16_t port) {
   129aa:	55                   	push   %ebp
   129ab:	89 e5                	mov    %esp,%ebp
   129ad:	83 ec 14             	sub    $0x14,%esp
   129b0:	8b 45 08             	mov    0x8(%ebp),%eax
   129b3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   129b7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129bb:	89 c2                	mov    %eax,%edx
   129bd:	ec                   	in     (%dx),%al
   129be:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   129c1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   129c5:	c9                   	leave  
   129c6:	c3                   	ret    

000129c7 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   129c7:	55                   	push   %ebp
   129c8:	89 e5                	mov    %esp,%ebp
   129ca:	83 ec 08             	sub    $0x8,%esp
   129cd:	8b 45 08             	mov    0x8(%ebp),%eax
   129d0:	8b 55 0c             	mov    0xc(%ebp),%edx
   129d3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   129d7:	89 d0                	mov    %edx,%eax
   129d9:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   129dc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   129e0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   129e4:	ee                   	out    %al,(%dx)
}
   129e5:	90                   	nop
   129e6:	c9                   	leave  
   129e7:	c3                   	ret    

000129e8 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   129e8:	55                   	push   %ebp
   129e9:	89 e5                	mov    %esp,%ebp
   129eb:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   129ee:	8b 45 08             	mov    0x8(%ebp),%eax
   129f1:	c1 e8 10             	shr    $0x10,%eax
   129f4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   129f8:	8b 45 08             	mov    0x8(%ebp),%eax
   129fb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   129ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a02:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12a05:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12a09:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12a0d:	90                   	nop
   12a0e:	c9                   	leave  
   12a0f:	c3                   	ret    

00012a10 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12a10:	55                   	push   %ebp
   12a11:	89 e5                	mov    %esp,%ebp
   12a13:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12a16:	0f 20 d0             	mov    %cr2,%eax
   12a19:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12a1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a1f:	c9                   	leave  
   12a20:	c3                   	ret    

00012a21 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12a21:	55                   	push   %ebp
   12a22:	89 e5                	mov    %esp,%ebp
   12a24:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12a27:	9c                   	pushf  
   12a28:	58                   	pop    %eax
   12a29:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12a2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a2f:	c9                   	leave  
   12a30:	c3                   	ret    

00012a31 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12a31:	55                   	push   %ebp
   12a32:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12a34:	8b 45 08             	mov    0x8(%ebp),%eax
   12a37:	50                   	push   %eax
   12a38:	9d                   	popf   
}
   12a39:	90                   	nop
   12a3a:	5d                   	pop    %ebp
   12a3b:	c3                   	ret    

00012a3c <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12a3c:	55                   	push   %ebp
   12a3d:	89 e5                	mov    %esp,%ebp
   12a3f:	57                   	push   %edi
   12a40:	56                   	push   %esi
   12a41:	53                   	push   %ebx
   12a42:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   12a45:	8b 45 08             	mov    0x8(%ebp),%eax
   12a48:	8b 40 3c             	mov    0x3c(%eax),%eax
   12a4b:	83 e0 03             	and    $0x3,%eax
   12a4e:	85 c0                	test   %eax,%eax
   12a50:	74 14                	je     12a66 <print_exception_fram+0x2a>
    ss = frame->ss3;
   12a52:	8b 45 08             	mov    0x8(%ebp),%eax
   12a55:	8b 40 48             	mov    0x48(%eax),%eax
   12a58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12a5b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5e:	8b 40 44             	mov    0x44(%eax),%eax
   12a61:	89 45 e0             	mov    %eax,-0x20(%ebp)
   12a64:	eb 12                	jmp    12a78 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   12a66:	8b 45 08             	mov    0x8(%ebp),%eax
   12a69:	8b 40 0c             	mov    0xc(%eax),%eax
   12a6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12a6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a72:	8b 40 1c             	mov    0x1c(%eax),%eax
   12a75:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   12a78:	83 ec 0c             	sub    $0xc,%esp
   12a7b:	68 b4 8c 01 00       	push   $0x18cb4
   12a80:	e8 20 5d 00 00       	call   187a5 <log_printf>
   12a85:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12a88:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8b:	8b 50 34             	mov    0x34(%eax),%edx
   12a8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a91:	8b 40 30             	mov    0x30(%eax),%eax
   12a94:	83 ec 04             	sub    $0x4,%esp
   12a97:	52                   	push   %edx
   12a98:	50                   	push   %eax
   12a99:	68 f3 8c 01 00       	push   $0x18cf3
   12a9e:	e8 02 5d 00 00       	call   187a5 <log_printf>
   12aa3:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa9:	8b 30                	mov    (%eax),%esi
   12aab:	8b 45 08             	mov    0x8(%ebp),%eax
   12aae:	8b 58 04             	mov    0x4(%eax),%ebx
   12ab1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab4:	8b 48 08             	mov    0x8(%eax),%ecx
   12ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aba:	8b 50 0c             	mov    0xc(%eax),%edx
   12abd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac0:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
   12ac3:	83 ec 04             	sub    $0x4,%esp
   12ac6:	56                   	push   %esi
   12ac7:	53                   	push   %ebx
   12ac8:	51                   	push   %ecx
   12ac9:	ff 75 e4             	push   -0x1c(%ebp)
   12acc:	52                   	push   %edx
   12acd:	50                   	push   %eax
   12ace:	68 0c 8d 01 00       	push   $0x18d0c
   12ad3:	e8 cd 5c 00 00       	call   187a5 <log_printf>
   12ad8:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12adb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ade:	8b 40 18             	mov    0x18(%eax),%eax
   12ae1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae7:	8b 78 10             	mov    0x10(%eax),%edi
   12aea:	8b 45 08             	mov    0x8(%ebp),%eax
   12aed:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12af0:	8b 45 08             	mov    0x8(%ebp),%eax
   12af3:	8b 58 24             	mov    0x24(%eax),%ebx
   12af6:	8b 45 08             	mov    0x8(%ebp),%eax
   12af9:	8b 48 28             	mov    0x28(%eax),%ecx
   12afc:	8b 45 08             	mov    0x8(%ebp),%eax
   12aff:	8b 50 20             	mov    0x20(%eax),%edx
   12b02:	8b 45 08             	mov    0x8(%ebp),%eax
   12b05:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12b08:	83 ec 0c             	sub    $0xc,%esp
   12b0b:	ff 75 e0             	push   -0x20(%ebp)
   12b0e:	ff 75 d4             	push   -0x2c(%ebp)
   12b11:	57                   	push   %edi
   12b12:	56                   	push   %esi
   12b13:	53                   	push   %ebx
   12b14:	51                   	push   %ecx
   12b15:	52                   	push   %edx
   12b16:	50                   	push   %eax
   12b17:	68 40 8d 01 00       	push   $0x18d40
   12b1c:	e8 84 5c 00 00       	call   187a5 <log_printf>
   12b21:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12b24:	8b 45 08             	mov    0x8(%ebp),%eax
   12b27:	8b 50 40             	mov    0x40(%eax),%edx
   12b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2d:	8b 40 38             	mov    0x38(%eax),%eax
   12b30:	83 ec 04             	sub    $0x4,%esp
   12b33:	52                   	push   %edx
   12b34:	50                   	push   %eax
   12b35:	68 99 8d 01 00       	push   $0x18d99
   12b3a:	e8 66 5c 00 00       	call   187a5 <log_printf>
   12b3f:	83 c4 10             	add    $0x10,%esp
}
   12b42:	90                   	nop
   12b43:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12b46:	5b                   	pop    %ebx
   12b47:	5e                   	pop    %esi
   12b48:	5f                   	pop    %edi
   12b49:	5d                   	pop    %ebp
   12b4a:	c3                   	ret    

00012b4b <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12b4b:	55                   	push   %ebp
   12b4c:	89 e5                	mov    %esp,%ebp
   12b4e:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12b51:	83 ec 0c             	sub    $0xc,%esp
   12b54:	68 b4 8d 01 00       	push   $0x18db4
   12b59:	e8 47 5c 00 00       	call   187a5 <log_printf>
   12b5e:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12b61:	83 ec 08             	sub    $0x8,%esp
   12b64:	ff 75 0c             	push   0xc(%ebp)
   12b67:	68 e9 8d 01 00       	push   $0x18de9
   12b6c:	e8 34 5c 00 00       	call   187a5 <log_printf>
   12b71:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12b74:	83 ec 0c             	sub    $0xc,%esp
   12b77:	ff 75 08             	push   0x8(%ebp)
   12b7a:	e8 bd fe ff ff       	call   12a3c <print_exception_fram>
   12b7f:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   12b82:	e8 1c fe ff ff       	call   129a3 <hlt>
   12b87:	eb f9                	jmp    12b82 <do_default_handler+0x37>

00012b89 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12b89:	55                   	push   %ebp
   12b8a:	89 e5                	mov    %esp,%ebp
   12b8c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12b8f:	83 ec 08             	sub    $0x8,%esp
   12b92:	68 04 8e 01 00       	push   $0x18e04
   12b97:	ff 75 08             	push   0x8(%ebp)
   12b9a:	e8 ac ff ff ff       	call   12b4b <do_default_handler>
   12b9f:	83 c4 10             	add    $0x10,%esp
}
   12ba2:	90                   	nop
   12ba3:	c9                   	leave  
   12ba4:	c3                   	ret    

00012ba5 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12ba5:	55                   	push   %ebp
   12ba6:	89 e5                	mov    %esp,%ebp
   12ba8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12bab:	83 ec 08             	sub    $0x8,%esp
   12bae:	68 16 8e 01 00       	push   $0x18e16
   12bb3:	ff 75 08             	push   0x8(%ebp)
   12bb6:	e8 90 ff ff ff       	call   12b4b <do_default_handler>
   12bbb:	83 c4 10             	add    $0x10,%esp
}
   12bbe:	90                   	nop
   12bbf:	c9                   	leave  
   12bc0:	c3                   	ret    

00012bc1 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12bc1:	55                   	push   %ebp
   12bc2:	89 e5                	mov    %esp,%ebp
   12bc4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12bc7:	83 ec 08             	sub    $0x8,%esp
   12bca:	68 28 8e 01 00       	push   $0x18e28
   12bcf:	ff 75 08             	push   0x8(%ebp)
   12bd2:	e8 74 ff ff ff       	call   12b4b <do_default_handler>
   12bd7:	83 c4 10             	add    $0x10,%esp
}
   12bda:	90                   	nop
   12bdb:	c9                   	leave  
   12bdc:	c3                   	ret    

00012bdd <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12bdd:	55                   	push   %ebp
   12bde:	89 e5                	mov    %esp,%ebp
   12be0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12be3:	83 ec 08             	sub    $0x8,%esp
   12be6:	68 38 8e 01 00       	push   $0x18e38
   12beb:	ff 75 08             	push   0x8(%ebp)
   12bee:	e8 58 ff ff ff       	call   12b4b <do_default_handler>
   12bf3:	83 c4 10             	add    $0x10,%esp
}
   12bf6:	90                   	nop
   12bf7:	c9                   	leave  
   12bf8:	c3                   	ret    

00012bf9 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12bf9:	55                   	push   %ebp
   12bfa:	89 e5                	mov    %esp,%ebp
   12bfc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12bff:	83 ec 08             	sub    $0x8,%esp
   12c02:	68 46 8e 01 00       	push   $0x18e46
   12c07:	ff 75 08             	push   0x8(%ebp)
   12c0a:	e8 3c ff ff ff       	call   12b4b <do_default_handler>
   12c0f:	83 c4 10             	add    $0x10,%esp
}
   12c12:	90                   	nop
   12c13:	c9                   	leave  
   12c14:	c3                   	ret    

00012c15 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12c15:	55                   	push   %ebp
   12c16:	89 e5                	mov    %esp,%ebp
   12c18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12c1b:	83 ec 08             	sub    $0x8,%esp
   12c1e:	68 5b 8e 01 00       	push   $0x18e5b
   12c23:	ff 75 08             	push   0x8(%ebp)
   12c26:	e8 20 ff ff ff       	call   12b4b <do_default_handler>
   12c2b:	83 c4 10             	add    $0x10,%esp
}
   12c2e:	90                   	nop
   12c2f:	c9                   	leave  
   12c30:	c3                   	ret    

00012c31 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12c31:	55                   	push   %ebp
   12c32:	89 e5                	mov    %esp,%ebp
   12c34:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12c37:	83 ec 08             	sub    $0x8,%esp
   12c3a:	68 6e 8e 01 00       	push   $0x18e6e
   12c3f:	ff 75 08             	push   0x8(%ebp)
   12c42:	e8 04 ff ff ff       	call   12b4b <do_default_handler>
   12c47:	83 c4 10             	add    $0x10,%esp
}
   12c4a:	90                   	nop
   12c4b:	c9                   	leave  
   12c4c:	c3                   	ret    

00012c4d <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12c4d:	55                   	push   %ebp
   12c4e:	89 e5                	mov    %esp,%ebp
   12c50:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12c53:	83 ec 08             	sub    $0x8,%esp
   12c56:	68 84 8e 01 00       	push   $0x18e84
   12c5b:	ff 75 08             	push   0x8(%ebp)
   12c5e:	e8 e8 fe ff ff       	call   12b4b <do_default_handler>
   12c63:	83 c4 10             	add    $0x10,%esp
}
   12c66:	90                   	nop
   12c67:	c9                   	leave  
   12c68:	c3                   	ret    

00012c69 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12c69:	55                   	push   %ebp
   12c6a:	89 e5                	mov    %esp,%ebp
   12c6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12c6f:	83 ec 08             	sub    $0x8,%esp
   12c72:	68 9d 8e 01 00       	push   $0x18e9d
   12c77:	ff 75 08             	push   0x8(%ebp)
   12c7a:	e8 cc fe ff ff       	call   12b4b <do_default_handler>
   12c7f:	83 c4 10             	add    $0x10,%esp
}
   12c82:	90                   	nop
   12c83:	c9                   	leave  
   12c84:	c3                   	ret    

00012c85 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12c85:	55                   	push   %ebp
   12c86:	89 e5                	mov    %esp,%ebp
   12c88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12c8b:	83 ec 08             	sub    $0x8,%esp
   12c8e:	68 ba 8e 01 00       	push   $0x18eba
   12c93:	ff 75 08             	push   0x8(%ebp)
   12c96:	e8 b0 fe ff ff       	call   12b4b <do_default_handler>
   12c9b:	83 c4 10             	add    $0x10,%esp
}
   12c9e:	90                   	nop
   12c9f:	c9                   	leave  
   12ca0:	c3                   	ret    

00012ca1 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12ca1:	55                   	push   %ebp
   12ca2:	89 e5                	mov    %esp,%ebp
   12ca4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12ca7:	83 ec 08             	sub    $0x8,%esp
   12caa:	68 d1 8e 01 00       	push   $0x18ed1
   12caf:	ff 75 08             	push   0x8(%ebp)
   12cb2:	e8 94 fe ff ff       	call   12b4b <do_default_handler>
   12cb7:	83 c4 10             	add    $0x10,%esp
}
   12cba:	90                   	nop
   12cbb:	c9                   	leave  
   12cbc:	c3                   	ret    

00012cbd <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12cbd:	55                   	push   %ebp
   12cbe:	89 e5                	mov    %esp,%ebp
   12cc0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12cc3:	83 ec 08             	sub    $0x8,%esp
   12cc6:	68 e7 8e 01 00       	push   $0x18ee7
   12ccb:	ff 75 08             	push   0x8(%ebp)
   12cce:	e8 78 fe ff ff       	call   12b4b <do_default_handler>
   12cd3:	83 c4 10             	add    $0x10,%esp
}
   12cd6:	90                   	nop
   12cd7:	c9                   	leave  
   12cd8:	c3                   	ret    

00012cd9 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12cd9:	55                   	push   %ebp
   12cda:	89 e5                	mov    %esp,%ebp
   12cdc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12cdf:	83 ec 08             	sub    $0x8,%esp
   12ce2:	68 05 8f 01 00       	push   $0x18f05
   12ce7:	ff 75 08             	push   0x8(%ebp)
   12cea:	e8 5c fe ff ff       	call   12b4b <do_default_handler>
   12cef:	83 c4 10             	add    $0x10,%esp
}
   12cf2:	90                   	nop
   12cf3:	c9                   	leave  
   12cf4:	c3                   	ret    

00012cf5 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12cf5:	55                   	push   %ebp
   12cf6:	89 e5                	mov    %esp,%ebp
   12cf8:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12cfb:	83 ec 0c             	sub    $0xc,%esp
   12cfe:	68 24 8f 01 00       	push   $0x18f24
   12d03:	e8 9d 5a 00 00       	call   187a5 <log_printf>
   12d08:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12d0b:	83 ec 0c             	sub    $0xc,%esp
   12d0e:	68 48 8f 01 00       	push   $0x18f48
   12d13:	e8 8d 5a 00 00       	call   187a5 <log_printf>
   12d18:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1e:	8b 40 34             	mov    0x34(%eax),%eax
   12d21:	83 e0 01             	and    $0x1,%eax
   12d24:	85 c0                	test   %eax,%eax
   12d26:	74 12                	je     12d3a <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12d28:	83 ec 0c             	sub    $0xc,%esp
   12d2b:	68 74 8f 01 00       	push   $0x18f74
   12d30:	e8 70 5a 00 00       	call   187a5 <log_printf>
   12d35:	83 c4 10             	add    $0x10,%esp
   12d38:	eb 10                	jmp    12d4a <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12d3a:	83 ec 0c             	sub    $0xc,%esp
   12d3d:	68 f0 8f 01 00       	push   $0x18ff0
   12d42:	e8 5e 5a 00 00       	call   187a5 <log_printf>
   12d47:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4d:	8b 40 34             	mov    0x34(%eax),%eax
   12d50:	83 e0 02             	and    $0x2,%eax
   12d53:	85 c0                	test   %eax,%eax
   12d55:	74 12                	je     12d69 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12d57:	83 ec 0c             	sub    $0xc,%esp
   12d5a:	68 48 90 01 00       	push   $0x19048
   12d5f:	e8 41 5a 00 00       	call   187a5 <log_printf>
   12d64:	83 c4 10             	add    $0x10,%esp
   12d67:	eb 10                	jmp    12d79 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12d69:	83 ec 0c             	sub    $0xc,%esp
   12d6c:	68 94 90 01 00       	push   $0x19094
   12d71:	e8 2f 5a 00 00       	call   187a5 <log_printf>
   12d76:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12d79:	8b 45 08             	mov    0x8(%ebp),%eax
   12d7c:	8b 40 34             	mov    0x34(%eax),%eax
   12d7f:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12d84:	83 ec 08             	sub    $0x8,%esp
   12d87:	50                   	push   %eax
   12d88:	68 c1 90 01 00       	push   $0x190c1
   12d8d:	e8 13 5a 00 00       	call   187a5 <log_printf>
   12d92:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12d95:	83 ec 0c             	sub    $0xc,%esp
   12d98:	ff 75 08             	push   0x8(%ebp)
   12d9b:	e8 9c fc ff ff       	call   12a3c <print_exception_fram>
   12da0:	83 c4 10             	add    $0x10,%esp
}
   12da3:	90                   	nop
   12da4:	c9                   	leave  
   12da5:	c3                   	ret    

00012da6 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12da6:	55                   	push   %ebp
   12da7:	89 e5                	mov    %esp,%ebp
   12da9:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12dac:	83 ec 0c             	sub    $0xc,%esp
   12daf:	68 24 8f 01 00       	push   $0x18f24
   12db4:	e8 ec 59 00 00       	call   187a5 <log_printf>
   12db9:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12dbc:	83 ec 0c             	sub    $0xc,%esp
   12dbf:	68 d4 90 01 00       	push   $0x190d4
   12dc4:	e8 dc 59 00 00       	call   187a5 <log_printf>
   12dc9:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   12dcf:	8b 40 34             	mov    0x34(%eax),%eax
   12dd2:	83 e0 01             	and    $0x1,%eax
   12dd5:	85 c0                	test   %eax,%eax
   12dd7:	74 18                	je     12df1 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12dd9:	e8 32 fc ff ff       	call   12a10 <read_cr2>
   12dde:	83 ec 08             	sub    $0x8,%esp
   12de1:	50                   	push   %eax
   12de2:	68 f8 90 01 00       	push   $0x190f8
   12de7:	e8 b9 59 00 00       	call   187a5 <log_printf>
   12dec:	83 c4 10             	add    $0x10,%esp
   12def:	eb 16                	jmp    12e07 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12df1:	e8 1a fc ff ff       	call   12a10 <read_cr2>
   12df6:	83 ec 08             	sub    $0x8,%esp
   12df9:	50                   	push   %eax
   12dfa:	68 20 91 01 00       	push   $0x19120
   12dff:	e8 a1 59 00 00       	call   187a5 <log_printf>
   12e04:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12e07:	8b 45 08             	mov    0x8(%ebp),%eax
   12e0a:	8b 40 34             	mov    0x34(%eax),%eax
   12e0d:	83 e0 02             	and    $0x2,%eax
   12e10:	85 c0                	test   %eax,%eax
   12e12:	74 12                	je     12e26 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12e14:	83 ec 0c             	sub    $0xc,%esp
   12e17:	68 3c 91 01 00       	push   $0x1913c
   12e1c:	e8 84 59 00 00       	call   187a5 <log_printf>
   12e21:	83 c4 10             	add    $0x10,%esp
   12e24:	eb 10                	jmp    12e36 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12e26:	83 ec 0c             	sub    $0xc,%esp
   12e29:	68 68 91 01 00       	push   $0x19168
   12e2e:	e8 72 59 00 00       	call   187a5 <log_printf>
   12e33:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12e36:	8b 45 08             	mov    0x8(%ebp),%eax
   12e39:	8b 40 34             	mov    0x34(%eax),%eax
   12e3c:	83 e0 04             	and    $0x4,%eax
   12e3f:	85 c0                	test   %eax,%eax
   12e41:	74 12                	je     12e55 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12e43:	83 ec 0c             	sub    $0xc,%esp
   12e46:	68 94 91 01 00       	push   $0x19194
   12e4b:	e8 55 59 00 00       	call   187a5 <log_printf>
   12e50:	83 c4 10             	add    $0x10,%esp
   12e53:	eb 10                	jmp    12e65 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12e55:	83 ec 0c             	sub    $0xc,%esp
   12e58:	68 bc 91 01 00       	push   $0x191bc
   12e5d:	e8 43 59 00 00       	call   187a5 <log_printf>
   12e62:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12e65:	83 ec 0c             	sub    $0xc,%esp
   12e68:	ff 75 08             	push   0x8(%ebp)
   12e6b:	e8 cc fb ff ff       	call   12a3c <print_exception_fram>
   12e70:	83 c4 10             	add    $0x10,%esp
}
   12e73:	90                   	nop
   12e74:	c9                   	leave  
   12e75:	c3                   	ret    

00012e76 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12e76:	55                   	push   %ebp
   12e77:	89 e5                	mov    %esp,%ebp
   12e79:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12e7c:	83 ec 08             	sub    $0x8,%esp
   12e7f:	68 e8 91 01 00       	push   $0x191e8
   12e84:	ff 75 08             	push   0x8(%ebp)
   12e87:	e8 bf fc ff ff       	call   12b4b <do_default_handler>
   12e8c:	83 c4 10             	add    $0x10,%esp
}
   12e8f:	90                   	nop
   12e90:	c9                   	leave  
   12e91:	c3                   	ret    

00012e92 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12e92:	55                   	push   %ebp
   12e93:	89 e5                	mov    %esp,%ebp
   12e95:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12e98:	83 ec 08             	sub    $0x8,%esp
   12e9b:	68 fd 91 01 00       	push   $0x191fd
   12ea0:	ff 75 08             	push   0x8(%ebp)
   12ea3:	e8 a3 fc ff ff       	call   12b4b <do_default_handler>
   12ea8:	83 c4 10             	add    $0x10,%esp
}
   12eab:	90                   	nop
   12eac:	c9                   	leave  
   12ead:	c3                   	ret    

00012eae <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12eae:	55                   	push   %ebp
   12eaf:	89 e5                	mov    %esp,%ebp
   12eb1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12eb4:	83 ec 08             	sub    $0x8,%esp
   12eb7:	68 18 92 01 00       	push   $0x19218
   12ebc:	ff 75 08             	push   0x8(%ebp)
   12ebf:	e8 87 fc ff ff       	call   12b4b <do_default_handler>
   12ec4:	83 c4 10             	add    $0x10,%esp
}
   12ec7:	90                   	nop
   12ec8:	c9                   	leave  
   12ec9:	c3                   	ret    

00012eca <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12eca:	55                   	push   %ebp
   12ecb:	89 e5                	mov    %esp,%ebp
   12ecd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12ed0:	83 ec 08             	sub    $0x8,%esp
   12ed3:	68 31 92 01 00       	push   $0x19231
   12ed8:	ff 75 08             	push   0x8(%ebp)
   12edb:	e8 6b fc ff ff       	call   12b4b <do_default_handler>
   12ee0:	83 c4 10             	add    $0x10,%esp
}
   12ee3:	90                   	nop
   12ee4:	c9                   	leave  
   12ee5:	c3                   	ret    

00012ee6 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12ee6:	55                   	push   %ebp
   12ee7:	89 e5                	mov    %esp,%ebp
   12ee9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12eec:	83 ec 08             	sub    $0x8,%esp
   12eef:	68 4a 92 01 00       	push   $0x1924a
   12ef4:	ff 75 08             	push   0x8(%ebp)
   12ef7:	e8 4f fc ff ff       	call   12b4b <do_default_handler>
   12efc:	83 c4 10             	add    $0x10,%esp
}
   12eff:	90                   	nop
   12f00:	c9                   	leave  
   12f01:	c3                   	ret    

00012f02 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12f02:	55                   	push   %ebp
   12f03:	89 e5                	mov    %esp,%ebp
   12f05:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12f08:	83 ec 08             	sub    $0x8,%esp
   12f0b:	68 67 92 01 00       	push   $0x19267
   12f10:	ff 75 08             	push   0x8(%ebp)
   12f13:	e8 33 fc ff ff       	call   12b4b <do_default_handler>
   12f18:	83 c4 10             	add    $0x10,%esp
}
   12f1b:	90                   	nop
   12f1c:	c9                   	leave  
   12f1d:	c3                   	ret    

00012f1e <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12f1e:	55                   	push   %ebp
   12f1f:	89 e5                	mov    %esp,%ebp
   12f21:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12f24:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12f2b:	7f 06                	jg     12f33 <idt_install+0x15>
   12f2d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f31:	79 07                	jns    12f3a <idt_install+0x1c>
   12f33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12f38:	eb 25                	jmp    12f5f <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f3d:	8b 55 08             	mov    0x8(%ebp),%edx
   12f40:	c1 e2 03             	shl    $0x3,%edx
   12f43:	81 c2 00 dc 04 00    	add    $0x4dc00,%edx
   12f49:	68 00 8e 00 00       	push   $0x8e00
   12f4e:	50                   	push   %eax
   12f4f:	6a 08                	push   $0x8
   12f51:	52                   	push   %edx
   12f52:	e8 c1 f7 ff ff       	call   12718 <gate_desc_set>
   12f57:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12f5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12f5f:	c9                   	leave  
   12f60:	c3                   	ret    

00012f61 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12f61:	55                   	push   %ebp
   12f62:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12f64:	6a 11                	push   $0x11
   12f66:	6a 20                	push   $0x20
   12f68:	e8 5a fa ff ff       	call   129c7 <outb>
   12f6d:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12f70:	6a 20                	push   $0x20
   12f72:	6a 21                	push   $0x21
   12f74:	e8 4e fa ff ff       	call   129c7 <outb>
   12f79:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12f7c:	6a 04                	push   $0x4
   12f7e:	6a 21                	push   $0x21
   12f80:	e8 42 fa ff ff       	call   129c7 <outb>
   12f85:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12f88:	6a 01                	push   $0x1
   12f8a:	6a 21                	push   $0x21
   12f8c:	e8 36 fa ff ff       	call   129c7 <outb>
   12f91:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12f94:	6a 11                	push   $0x11
   12f96:	68 a0 00 00 00       	push   $0xa0
   12f9b:	e8 27 fa ff ff       	call   129c7 <outb>
   12fa0:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12fa3:	6a 28                	push   $0x28
   12fa5:	68 a1 00 00 00       	push   $0xa1
   12faa:	e8 18 fa ff ff       	call   129c7 <outb>
   12faf:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12fb2:	6a 02                	push   $0x2
   12fb4:	68 a1 00 00 00       	push   $0xa1
   12fb9:	e8 09 fa ff ff       	call   129c7 <outb>
   12fbe:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12fc1:	6a 01                	push   $0x1
   12fc3:	68 a1 00 00 00       	push   $0xa1
   12fc8:	e8 fa f9 ff ff       	call   129c7 <outb>
   12fcd:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12fd0:	68 fb 00 00 00       	push   $0xfb
   12fd5:	6a 21                	push   $0x21
   12fd7:	e8 eb f9 ff ff       	call   129c7 <outb>
   12fdc:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12fdf:	68 ff 00 00 00       	push   $0xff
   12fe4:	68 a1 00 00 00       	push   $0xa1
   12fe9:	e8 d9 f9 ff ff       	call   129c7 <outb>
   12fee:	83 c4 08             	add    $0x8,%esp


}
   12ff1:	90                   	nop
   12ff2:	c9                   	leave  
   12ff3:	c3                   	ret    

00012ff4 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12ff4:	55                   	push   %ebp
   12ff5:	89 e5                	mov    %esp,%ebp
   12ff7:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12ffa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13001:	eb 17                	jmp    1301a <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   13003:	83 ec 08             	sub    $0x8,%esp
   13006:	68 2a 00 01 00       	push   $0x1002a
   1300b:	ff 75 f4             	push   -0xc(%ebp)
   1300e:	e8 0b ff ff ff       	call   12f1e <idt_install>
   13013:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   13016:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1301a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   13021:	7e e0                	jle    13003 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   13023:	83 ec 08             	sub    $0x8,%esp
   13026:	68 47 00 01 00       	push   $0x10047
   1302b:	6a 00                	push   $0x0
   1302d:	e8 ec fe ff ff       	call   12f1e <idt_install>
   13032:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   13035:	83 ec 08             	sub    $0x8,%esp
   13038:	68 64 00 01 00       	push   $0x10064
   1303d:	6a 01                	push   $0x1
   1303f:	e8 da fe ff ff       	call   12f1e <idt_install>
   13044:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   13047:	83 ec 08             	sub    $0x8,%esp
   1304a:	68 81 00 01 00       	push   $0x10081
   1304f:	6a 02                	push   $0x2
   13051:	e8 c8 fe ff ff       	call   12f1e <idt_install>
   13056:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   13059:	83 ec 08             	sub    $0x8,%esp
   1305c:	68 9e 00 01 00       	push   $0x1009e
   13061:	6a 03                	push   $0x3
   13063:	e8 b6 fe ff ff       	call   12f1e <idt_install>
   13068:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1306b:	83 ec 08             	sub    $0x8,%esp
   1306e:	68 bb 00 01 00       	push   $0x100bb
   13073:	6a 04                	push   $0x4
   13075:	e8 a4 fe ff ff       	call   12f1e <idt_install>
   1307a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   1307d:	83 ec 08             	sub    $0x8,%esp
   13080:	68 d8 00 01 00       	push   $0x100d8
   13085:	6a 05                	push   $0x5
   13087:	e8 92 fe ff ff       	call   12f1e <idt_install>
   1308c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   1308f:	83 ec 08             	sub    $0x8,%esp
   13092:	68 f5 00 01 00       	push   $0x100f5
   13097:	6a 06                	push   $0x6
   13099:	e8 80 fe ff ff       	call   12f1e <idt_install>
   1309e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   130a1:	83 ec 08             	sub    $0x8,%esp
   130a4:	68 12 01 01 00       	push   $0x10112
   130a9:	6a 07                	push   $0x7
   130ab:	e8 6e fe ff ff       	call   12f1e <idt_install>
   130b0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   130b3:	83 ec 08             	sub    $0x8,%esp
   130b6:	68 2f 01 01 00       	push   $0x1012f
   130bb:	6a 08                	push   $0x8
   130bd:	e8 5c fe ff ff       	call   12f1e <idt_install>
   130c2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   130c5:	83 ec 08             	sub    $0x8,%esp
   130c8:	68 4a 01 01 00       	push   $0x1014a
   130cd:	6a 0a                	push   $0xa
   130cf:	e8 4a fe ff ff       	call   12f1e <idt_install>
   130d4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   130d7:	83 ec 08             	sub    $0x8,%esp
   130da:	68 65 01 01 00       	push   $0x10165
   130df:	6a 0b                	push   $0xb
   130e1:	e8 38 fe ff ff       	call   12f1e <idt_install>
   130e6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   130e9:	83 ec 08             	sub    $0x8,%esp
   130ec:	68 80 01 01 00       	push   $0x10180
   130f1:	6a 0c                	push   $0xc
   130f3:	e8 26 fe ff ff       	call   12f1e <idt_install>
   130f8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   130fb:	83 ec 08             	sub    $0x8,%esp
   130fe:	68 9b 01 01 00       	push   $0x1019b
   13103:	6a 0d                	push   $0xd
   13105:	e8 14 fe ff ff       	call   12f1e <idt_install>
   1310a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1310d:	83 ec 08             	sub    $0x8,%esp
   13110:	68 b6 01 01 00       	push   $0x101b6
   13115:	6a 0e                	push   $0xe
   13117:	e8 02 fe ff ff       	call   12f1e <idt_install>
   1311c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1311f:	83 ec 08             	sub    $0x8,%esp
   13122:	68 d1 01 01 00       	push   $0x101d1
   13127:	6a 10                	push   $0x10
   13129:	e8 f0 fd ff ff       	call   12f1e <idt_install>
   1312e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   13131:	83 ec 08             	sub    $0x8,%esp
   13134:	68 ee 01 01 00       	push   $0x101ee
   13139:	6a 11                	push   $0x11
   1313b:	e8 de fd ff ff       	call   12f1e <idt_install>
   13140:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   13143:	83 ec 08             	sub    $0x8,%esp
   13146:	68 09 02 01 00       	push   $0x10209
   1314b:	6a 12                	push   $0x12
   1314d:	e8 cc fd ff ff       	call   12f1e <idt_install>
   13152:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   13155:	83 ec 08             	sub    $0x8,%esp
   13158:	68 26 02 01 00       	push   $0x10226
   1315d:	6a 13                	push   $0x13
   1315f:	e8 ba fd ff ff       	call   12f1e <idt_install>
   13164:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   13167:	83 ec 08             	sub    $0x8,%esp
   1316a:	68 43 02 01 00       	push   $0x10243
   1316f:	6a 14                	push   $0x14
   13171:	e8 a8 fd ff ff       	call   12f1e <idt_install>
   13176:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   13179:	83 ec 08             	sub    $0x8,%esp
   1317c:	68 60 02 01 00       	push   $0x10260
   13181:	6a 15                	push   $0x15
   13183:	e8 96 fd ff ff       	call   12f1e <idt_install>
   13188:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1318b:	b8 00 dc 04 00       	mov    $0x4dc00,%eax
   13190:	83 ec 08             	sub    $0x8,%esp
   13193:	68 00 08 00 00       	push   $0x800
   13198:	50                   	push   %eax
   13199:	e8 4a f8 ff ff       	call   129e8 <lidt>
   1319e:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   131a1:	e8 bb fd ff ff       	call   12f61 <init_pic>
}
   131a6:	90                   	nop
   131a7:	c9                   	leave  
   131a8:	c3                   	ret    

000131a9 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   131a9:	55                   	push   %ebp
   131aa:	89 e5                	mov    %esp,%ebp
   131ac:	53                   	push   %ebx
   131ad:	83 ec 14             	sub    $0x14,%esp
   131b0:	8b 45 08             	mov    0x8(%ebp),%eax
   131b3:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   131b6:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   131ba:	76 7f                	jbe    1323b <idt_enable+0x92>
   131bc:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   131c0:	77 79                	ja     1323b <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   131c2:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   131c6:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   131ca:	77 33                	ja     131ff <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   131cc:	6a 21                	push   $0x21
   131ce:	e8 d7 f7 ff ff       	call   129aa <inb>
   131d3:	83 c4 04             	add    $0x4,%esp
   131d6:	89 c3                	mov    %eax,%ebx
   131d8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   131dc:	ba 01 00 00 00       	mov    $0x1,%edx
   131e1:	89 c1                	mov    %eax,%ecx
   131e3:	d3 e2                	shl    %cl,%edx
   131e5:	89 d0                	mov    %edx,%eax
   131e7:	f7 d0                	not    %eax
   131e9:	21 d8                	and    %ebx,%eax
   131eb:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   131ee:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   131f2:	50                   	push   %eax
   131f3:	6a 21                	push   $0x21
   131f5:	e8 cd f7 ff ff       	call   129c7 <outb>
   131fa:	83 c4 08             	add    $0x8,%esp
   131fd:	eb 3d                	jmp    1323c <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   131ff:	68 a1 00 00 00       	push   $0xa1
   13204:	e8 a1 f7 ff ff       	call   129aa <inb>
   13209:	83 c4 04             	add    $0x4,%esp
   1320c:	89 c3                	mov    %eax,%ebx
   1320e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13212:	83 e8 08             	sub    $0x8,%eax
   13215:	ba 01 00 00 00       	mov    $0x1,%edx
   1321a:	89 c1                	mov    %eax,%ecx
   1321c:	d3 e2                	shl    %cl,%edx
   1321e:	89 d0                	mov    %edx,%eax
   13220:	f7 d0                	not    %eax
   13222:	21 d8                	and    %ebx,%eax
   13224:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   13227:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1322b:	50                   	push   %eax
   1322c:	68 a1 00 00 00       	push   $0xa1
   13231:	e8 91 f7 ff ff       	call   129c7 <outb>
   13236:	83 c4 08             	add    $0x8,%esp
   13239:	eb 01                	jmp    1323c <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1323b:	90                   	nop
  }
  
}
   1323c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1323f:	c9                   	leave  
   13240:	c3                   	ret    

00013241 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   13241:	55                   	push   %ebp
   13242:	89 e5                	mov    %esp,%ebp
   13244:	53                   	push   %ebx
   13245:	83 ec 14             	sub    $0x14,%esp
   13248:	8b 45 08             	mov    0x8(%ebp),%eax
   1324b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1324e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   13252:	76 7b                	jbe    132cf <idt_disable+0x8e>
   13254:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   13258:	77 75                	ja     132cf <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1325a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1325e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   13262:	77 31                	ja     13295 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   13264:	6a 21                	push   $0x21
   13266:	e8 3f f7 ff ff       	call   129aa <inb>
   1326b:	83 c4 04             	add    $0x4,%esp
   1326e:	89 c3                	mov    %eax,%ebx
   13270:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13274:	ba 01 00 00 00       	mov    $0x1,%edx
   13279:	89 c1                	mov    %eax,%ecx
   1327b:	d3 e2                	shl    %cl,%edx
   1327d:	89 d0                	mov    %edx,%eax
   1327f:	09 d8                	or     %ebx,%eax
   13281:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   13284:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13288:	50                   	push   %eax
   13289:	6a 21                	push   $0x21
   1328b:	e8 37 f7 ff ff       	call   129c7 <outb>
   13290:	83 c4 08             	add    $0x8,%esp
   13293:	eb 3b                	jmp    132d0 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   13295:	68 a1 00 00 00       	push   $0xa1
   1329a:	e8 0b f7 ff ff       	call   129aa <inb>
   1329f:	83 c4 04             	add    $0x4,%esp
   132a2:	89 c3                	mov    %eax,%ebx
   132a4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   132a8:	83 e8 08             	sub    $0x8,%eax
   132ab:	ba 01 00 00 00       	mov    $0x1,%edx
   132b0:	89 c1                	mov    %eax,%ecx
   132b2:	d3 e2                	shl    %cl,%edx
   132b4:	89 d0                	mov    %edx,%eax
   132b6:	09 d8                	or     %ebx,%eax
   132b8:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   132bb:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   132bf:	50                   	push   %eax
   132c0:	68 a1 00 00 00       	push   $0xa1
   132c5:	e8 fd f6 ff ff       	call   129c7 <outb>
   132ca:	83 c4 08             	add    $0x8,%esp
   132cd:	eb 01                	jmp    132d0 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   132cf:	90                   	nop
  }
  
}
   132d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   132d3:	c9                   	leave  
   132d4:	c3                   	ret    

000132d5 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   132d5:	55                   	push   %ebp
   132d6:	89 e5                	mov    %esp,%ebp
  cli();
   132d8:	e8 b8 f6 ff ff       	call   12995 <cli>
}
   132dd:	90                   	nop
   132de:	5d                   	pop    %ebp
   132df:	c3                   	ret    

000132e0 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   132e0:	55                   	push   %ebp
   132e1:	89 e5                	mov    %esp,%ebp
  sti();
   132e3:	e8 b4 f6 ff ff       	call   1299c <sti>
}
   132e8:	90                   	nop
   132e9:	5d                   	pop    %ebp
   132ea:	c3                   	ret    

000132eb <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   132eb:	55                   	push   %ebp
   132ec:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   132ee:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   132f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132f6:	78 29                	js     13321 <pic_send_eoi+0x36>
   132f8:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   132fc:	7f 23                	jg     13321 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   132fe:	6a 20                	push   $0x20
   13300:	6a 20                	push   $0x20
   13302:	e8 c0 f6 ff ff       	call   129c7 <outb>
   13307:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1330a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1330e:	7e 12                	jle    13322 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   13310:	6a 20                	push   $0x20
   13312:	68 a0 00 00 00       	push   $0xa0
   13317:	e8 ab f6 ff ff       	call   129c7 <outb>
   1331c:	83 c4 08             	add    $0x8,%esp
   1331f:	eb 01                	jmp    13322 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   13321:	90                   	nop
  }

}
   13322:	c9                   	leave  
   13323:	c3                   	ret    

00013324 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   13324:	55                   	push   %ebp
   13325:	89 e5                	mov    %esp,%ebp
   13327:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1332a:	e8 f2 f6 ff ff       	call   12a21 <read_eflags>
   1332f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   13332:	e8 9e ff ff ff       	call   132d5 <idt_disable_global>
  return state;;
   13337:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1333a:	c9                   	leave  
   1333b:	c3                   	ret    

0001333c <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   1333c:	55                   	push   %ebp
   1333d:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   1333f:	ff 75 08             	push   0x8(%ebp)
   13342:	e8 ea f6 ff ff       	call   12a31 <write_eflags>
   13347:	83 c4 04             	add    $0x4,%esp
}
   1334a:	90                   	nop
   1334b:	c9                   	leave  
   1334c:	c3                   	ret    

0001334d <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   1334d:	55                   	push   %ebp
   1334e:	89 e5                	mov    %esp,%ebp
   13350:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   13353:	83 ec 08             	sub    $0x8,%esp
   13356:	ff 75 0c             	push   0xc(%ebp)
   13359:	ff 75 08             	push   0x8(%ebp)
   1335c:	e8 44 54 00 00       	call   187a5 <log_printf>
   13361:	83 c4 10             	add    $0x10,%esp
}
   13364:	90                   	nop
   13365:	c9                   	leave  
   13366:	c3                   	ret    

00013367 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   13367:	55                   	push   %ebp
   13368:	89 e5                	mov    %esp,%ebp
   1336a:	53                   	push   %ebx
   1336b:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   1336e:	8b 45 08             	mov    0x8(%ebp),%eax
   13371:	8b 40 3c             	mov    0x3c(%eax),%eax
   13374:	83 f8 3e             	cmp    $0x3e,%eax
   13377:	77 48                	ja     133c1 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   13379:	8b 45 08             	mov    0x8(%ebp),%eax
   1337c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1337f:	8b 04 85 a0 92 01 00 	mov    0x192a0(,%eax,4),%eax
   13386:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   13389:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1338d:	74 32                	je     133c1 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   1338f:	8b 45 08             	mov    0x8(%ebp),%eax
   13392:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13395:	8b 45 08             	mov    0x8(%ebp),%eax
   13398:	8b 48 48             	mov    0x48(%eax),%ecx
   1339b:	8b 45 08             	mov    0x8(%ebp),%eax
   1339e:	8b 50 44             	mov    0x44(%eax),%edx
   133a1:	8b 45 08             	mov    0x8(%ebp),%eax
   133a4:	8b 40 40             	mov    0x40(%eax),%eax
   133a7:	53                   	push   %ebx
   133a8:	51                   	push   %ecx
   133a9:	52                   	push   %edx
   133aa:	50                   	push   %eax
   133ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133ae:	ff d0                	call   *%eax
   133b0:	83 c4 10             	add    $0x10,%esp
   133b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   133b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   133b9:	8b 45 08             	mov    0x8(%ebp),%eax
   133bc:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   133bf:	eb 30                	jmp    133f1 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   133c1:	e8 eb e5 ff ff       	call   119b1 <task_current>
   133c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   133c9:	8b 45 08             	mov    0x8(%ebp),%eax
   133cc:	8b 40 3c             	mov    0x3c(%eax),%eax
   133cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
   133d2:	83 c2 24             	add    $0x24,%edx
   133d5:	83 ec 04             	sub    $0x4,%esp
   133d8:	50                   	push   %eax
   133d9:	52                   	push   %edx
   133da:	68 9c 93 01 00       	push   $0x1939c
   133df:	e8 c1 53 00 00       	call   187a5 <log_printf>
   133e4:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   133e7:	8b 45 08             	mov    0x8(%ebp),%eax
   133ea:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   133f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   133f4:	c9                   	leave  
   133f5:	c3                   	ret    

000133f6 <inb>:
static inline uint8_t inb(uint16_t port) {
   133f6:	55                   	push   %ebp
   133f7:	89 e5                	mov    %esp,%ebp
   133f9:	83 ec 14             	sub    $0x14,%esp
   133fc:	8b 45 08             	mov    0x8(%ebp),%eax
   133ff:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13403:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13407:	89 c2                	mov    %eax,%edx
   13409:	ec                   	in     (%dx),%al
   1340a:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1340d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13411:	c9                   	leave  
   13412:	c3                   	ret    

00013413 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13413:	55                   	push   %ebp
   13414:	89 e5                	mov    %esp,%ebp
   13416:	83 ec 08             	sub    $0x8,%esp
   13419:	8b 45 08             	mov    0x8(%ebp),%eax
   1341c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1341f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13423:	89 d0                	mov    %edx,%eax
   13425:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13428:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1342c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13430:	ee                   	out    %al,(%dx)
}
   13431:	90                   	nop
   13432:	c9                   	leave  
   13433:	c3                   	ret    

00013434 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   13434:	55                   	push   %ebp
   13435:	89 e5                	mov    %esp,%ebp
   13437:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   1343a:	e8 e5 fe ff ff       	call   13324 <idt_enter_protection>
   1343f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13442:	83 ec 08             	sub    $0x8,%esp
   13445:	6a 0f                	push   $0xf
   13447:	68 d4 03 00 00       	push   $0x3d4
   1344c:	e8 c2 ff ff ff       	call   13413 <outb>
   13451:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   13454:	83 ec 0c             	sub    $0xc,%esp
   13457:	68 d5 03 00 00       	push   $0x3d5
   1345c:	e8 95 ff ff ff       	call   133f6 <inb>
   13461:	83 c4 10             	add    $0x10,%esp
   13464:	0f b6 c0             	movzbl %al,%eax
   13467:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   1346a:	83 ec 08             	sub    $0x8,%esp
   1346d:	6a 0e                	push   $0xe
   1346f:	68 d4 03 00 00       	push   $0x3d4
   13474:	e8 9a ff ff ff       	call   13413 <outb>
   13479:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   1347c:	83 ec 0c             	sub    $0xc,%esp
   1347f:	68 d5 03 00 00       	push   $0x3d5
   13484:	e8 6d ff ff ff       	call   133f6 <inb>
   13489:	83 c4 10             	add    $0x10,%esp
   1348c:	0f b6 c0             	movzbl %al,%eax
   1348f:	c1 e0 08             	shl    $0x8,%eax
   13492:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   13495:	83 ec 0c             	sub    $0xc,%esp
   13498:	ff 75 f4             	push   -0xc(%ebp)
   1349b:	e8 9c fe ff ff       	call   1333c <idt_leave_protection>
   134a0:	83 c4 10             	add    $0x10,%esp
  return pos;
   134a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   134a6:	c9                   	leave  
   134a7:	c3                   	ret    

000134a8 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   134a8:	55                   	push   %ebp
   134a9:	89 e5                	mov    %esp,%ebp
   134ab:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   134ae:	e8 71 fe ff ff       	call   13324 <idt_enter_protection>
   134b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   134b6:	8b 45 08             	mov    0x8(%ebp),%eax
   134b9:	8b 40 10             	mov    0x10(%eax),%eax
   134bc:	89 c2                	mov    %eax,%edx
   134be:	8b 45 08             	mov    0x8(%ebp),%eax
   134c1:	8b 40 0c             	mov    0xc(%eax),%eax
   134c4:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   134c7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ca:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   134cd:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   134cf:	8b 45 08             	mov    0x8(%ebp),%eax
   134d2:	8b 40 04             	mov    0x4(%eax),%eax
   134d5:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   134da:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   134dc:	01 d0                	add    %edx,%eax
   134de:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   134e2:	83 ec 08             	sub    $0x8,%esp
   134e5:	6a 0f                	push   $0xf
   134e7:	68 d4 03 00 00       	push   $0x3d4
   134ec:	e8 22 ff ff ff       	call   13413 <outb>
   134f1:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   134f4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   134f8:	0f b6 c0             	movzbl %al,%eax
   134fb:	83 ec 08             	sub    $0x8,%esp
   134fe:	50                   	push   %eax
   134ff:	68 d5 03 00 00       	push   $0x3d5
   13504:	e8 0a ff ff ff       	call   13413 <outb>
   13509:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   1350c:	83 ec 08             	sub    $0x8,%esp
   1350f:	6a 0e                	push   $0xe
   13511:	68 d4 03 00 00       	push   $0x3d4
   13516:	e8 f8 fe ff ff       	call   13413 <outb>
   1351b:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   1351e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13522:	66 c1 e8 08          	shr    $0x8,%ax
   13526:	0f b6 c0             	movzbl %al,%eax
   13529:	83 ec 08             	sub    $0x8,%esp
   1352c:	50                   	push   %eax
   1352d:	68 d5 03 00 00       	push   $0x3d5
   13532:	e8 dc fe ff ff       	call   13413 <outb>
   13537:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   1353a:	83 ec 0c             	sub    $0xc,%esp
   1353d:	ff 75 f4             	push   -0xc(%ebp)
   13540:	e8 f7 fd ff ff       	call   1333c <idt_leave_protection>
   13545:	83 c4 10             	add    $0x10,%esp
  return pos;
   13548:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   1354c:	c9                   	leave  
   1354d:	c3                   	ret    

0001354e <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   1354e:	55                   	push   %ebp
   1354f:	89 e5                	mov    %esp,%ebp
   13551:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   13554:	8b 45 08             	mov    0x8(%ebp),%eax
   13557:	8b 48 04             	mov    0x4(%eax),%ecx
   1355a:	8b 45 08             	mov    0x8(%ebp),%eax
   1355d:	8b 50 0c             	mov    0xc(%eax),%edx
   13560:	8b 45 0c             	mov    0xc(%ebp),%eax
   13563:	0f af c2             	imul   %edx,%eax
   13566:	01 c0                	add    %eax,%eax
   13568:	01 c8                	add    %ecx,%eax
   1356a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   1356d:	8b 45 08             	mov    0x8(%ebp),%eax
   13570:	8b 48 04             	mov    0x4(%eax),%ecx
   13573:	8b 45 08             	mov    0x8(%ebp),%eax
   13576:	8b 40 0c             	mov    0xc(%eax),%eax
   13579:	8b 55 10             	mov    0x10(%ebp),%edx
   1357c:	83 c2 01             	add    $0x1,%edx
   1357f:	0f af c2             	imul   %edx,%eax
   13582:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   13584:	01 c8                	add    %ecx,%eax
   13586:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   13589:	eb 24                	jmp    135af <erase_rows+0x61>
    disp_start->c = ' ';
   1358b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1358e:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = COLOR_White;
   13591:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13594:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13598:	83 ca 0f             	or     $0xf,%edx
   1359b:	88 50 01             	mov    %dl,0x1(%eax)
    disp_start->background = COLOR_Black;
   1359e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   135a1:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   135a5:	83 e2 8f             	and    $0xffffff8f,%edx
   135a8:	88 50 01             	mov    %dl,0x1(%eax)

    disp_start++;
   135ab:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   135af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   135b2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   135b5:	72 d4                	jb     1358b <erase_rows+0x3d>
  }
}
   135b7:	90                   	nop
   135b8:	90                   	nop
   135b9:	c9                   	leave  
   135ba:	c3                   	ret    

000135bb <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   135bb:	55                   	push   %ebp
   135bc:	89 e5                	mov    %esp,%ebp
   135be:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   135c1:	8b 45 08             	mov    0x8(%ebp),%eax
   135c4:	8b 40 04             	mov    0x4(%eax),%eax
   135c7:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   135ca:	8b 45 08             	mov    0x8(%ebp),%eax
   135cd:	8b 48 04             	mov    0x4(%eax),%ecx
   135d0:	8b 45 08             	mov    0x8(%ebp),%eax
   135d3:	8b 50 0c             	mov    0xc(%eax),%edx
   135d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   135d9:	0f af c2             	imul   %edx,%eax
   135dc:	01 c0                	add    %eax,%eax
   135de:	01 c8                	add    %ecx,%eax
   135e0:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   135e3:	8b 45 08             	mov    0x8(%ebp),%eax
   135e6:	8b 40 08             	mov    0x8(%eax),%eax
   135e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   135ec:	29 c8                	sub    %ecx,%eax
   135ee:	89 c2                	mov    %eax,%edx
   135f0:	8b 45 08             	mov    0x8(%ebp),%eax
   135f3:	8b 40 0c             	mov    0xc(%eax),%eax
   135f6:	0f af c2             	imul   %edx,%eax
   135f9:	01 c0                	add    %eax,%eax
   135fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   135fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13601:	83 ec 04             	sub    $0x4,%esp
   13604:	50                   	push   %eax
   13605:	ff 75 f0             	push   -0x10(%ebp)
   13608:	ff 75 f4             	push   -0xc(%ebp)
   1360b:	e8 49 49 00 00       	call   17f59 <kernel_memcpy>
   13610:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13613:	8b 45 08             	mov    0x8(%ebp),%eax
   13616:	8b 40 08             	mov    0x8(%eax),%eax
   13619:	83 e8 01             	sub    $0x1,%eax
   1361c:	89 c2                	mov    %eax,%edx
   1361e:	8b 45 08             	mov    0x8(%ebp),%eax
   13621:	8b 40 08             	mov    0x8(%eax),%eax
   13624:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13627:	29 c8                	sub    %ecx,%eax
   13629:	83 ec 04             	sub    $0x4,%esp
   1362c:	52                   	push   %edx
   1362d:	50                   	push   %eax
   1362e:	ff 75 08             	push   0x8(%ebp)
   13631:	e8 18 ff ff ff       	call   1354e <erase_rows>
   13636:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   13639:	8b 45 08             	mov    0x8(%ebp),%eax
   1363c:	8b 40 10             	mov    0x10(%eax),%eax
   1363f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13642:	29 c8                	sub    %ecx,%eax
   13644:	89 c2                	mov    %eax,%edx
   13646:	8b 45 08             	mov    0x8(%ebp),%eax
   13649:	89 50 10             	mov    %edx,0x10(%eax)
}
   1364c:	90                   	nop
   1364d:	c9                   	leave  
   1364e:	c3                   	ret    

0001364f <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   1364f:	55                   	push   %ebp
   13650:	89 e5                	mov    %esp,%ebp
   13652:	8b 45 08             	mov    0x8(%ebp),%eax
   13655:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   1365c:	90                   	nop
   1365d:	5d                   	pop    %ebp
   1365e:	c3                   	ret    

0001365f <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   1365f:	55                   	push   %ebp
   13660:	89 e5                	mov    %esp,%ebp
   13662:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   13665:	8b 45 08             	mov    0x8(%ebp),%eax
   13668:	8b 40 10             	mov    0x10(%eax),%eax
   1366b:	8d 50 01             	lea    0x1(%eax),%edx
   1366e:	8b 45 08             	mov    0x8(%ebp),%eax
   13671:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   13674:	8b 45 08             	mov    0x8(%ebp),%eax
   13677:	8b 50 10             	mov    0x10(%eax),%edx
   1367a:	8b 45 08             	mov    0x8(%ebp),%eax
   1367d:	8b 40 08             	mov    0x8(%eax),%eax
   13680:	39 c2                	cmp    %eax,%edx
   13682:	72 10                	jb     13694 <move_to_next_line+0x35>
    scroll_up(console, 1);
   13684:	83 ec 08             	sub    $0x8,%esp
   13687:	6a 01                	push   $0x1
   13689:	ff 75 08             	push   0x8(%ebp)
   1368c:	e8 2a ff ff ff       	call   135bb <scroll_up>
   13691:	83 c4 10             	add    $0x10,%esp
  }
}
   13694:	90                   	nop
   13695:	c9                   	leave  
   13696:	c3                   	ret    

00013697 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   13697:	55                   	push   %ebp
   13698:	89 e5                	mov    %esp,%ebp
   1369a:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   1369d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   136a4:	eb 5c                	jmp    13702 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   136a6:	8b 45 08             	mov    0x8(%ebp),%eax
   136a9:	8b 40 14             	mov    0x14(%eax),%eax
   136ac:	8d 50 01             	lea    0x1(%eax),%edx
   136af:	8b 45 08             	mov    0x8(%ebp),%eax
   136b2:	89 50 14             	mov    %edx,0x14(%eax)
   136b5:	8b 45 08             	mov    0x8(%ebp),%eax
   136b8:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   136bb:	8b 45 08             	mov    0x8(%ebp),%eax
   136be:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   136c1:	39 c2                	cmp    %eax,%edx
   136c3:	72 39                	jb     136fe <move_forward+0x67>
      console->cursor_row++;
   136c5:	8b 45 08             	mov    0x8(%ebp),%eax
   136c8:	8b 40 10             	mov    0x10(%eax),%eax
   136cb:	8d 50 01             	lea    0x1(%eax),%edx
   136ce:	8b 45 08             	mov    0x8(%ebp),%eax
   136d1:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   136d4:	8b 45 08             	mov    0x8(%ebp),%eax
   136d7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   136de:	8b 45 08             	mov    0x8(%ebp),%eax
   136e1:	8b 50 10             	mov    0x10(%eax),%edx
   136e4:	8b 45 08             	mov    0x8(%ebp),%eax
   136e7:	8b 40 08             	mov    0x8(%eax),%eax
   136ea:	39 c2                	cmp    %eax,%edx
   136ec:	72 10                	jb     136fe <move_forward+0x67>
        scroll_up(console, 1);
   136ee:	83 ec 08             	sub    $0x8,%esp
   136f1:	6a 01                	push   $0x1
   136f3:	ff 75 08             	push   0x8(%ebp)
   136f6:	e8 c0 fe ff ff       	call   135bb <scroll_up>
   136fb:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   136fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13702:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13705:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13708:	7c 9c                	jl     136a6 <move_forward+0xf>
      }
    }
  }
}
   1370a:	90                   	nop
   1370b:	90                   	nop
   1370c:	c9                   	leave  
   1370d:	c3                   	ret    

0001370e <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   1370e:	55                   	push   %ebp
   1370f:	89 e5                	mov    %esp,%ebp
   13711:	83 ec 28             	sub    $0x28,%esp
   13714:	8b 45 0c             	mov    0xc(%ebp),%eax
   13717:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   1371a:	8b 45 08             	mov    0x8(%ebp),%eax
   1371d:	8b 48 14             	mov    0x14(%eax),%ecx
   13720:	8b 45 08             	mov    0x8(%ebp),%eax
   13723:	8b 50 10             	mov    0x10(%eax),%edx
   13726:	8b 45 08             	mov    0x8(%ebp),%eax
   13729:	8b 40 0c             	mov    0xc(%eax),%eax
   1372c:	0f af c2             	imul   %edx,%eax
   1372f:	01 c8                	add    %ecx,%eax
  int offset =
   13731:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   13734:	8b 45 08             	mov    0x8(%ebp),%eax
   13737:	8b 50 04             	mov    0x4(%eax),%edx
   1373a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1373d:	01 c0                	add    %eax,%eax
   1373f:	01 d0                	add    %edx,%eax
   13741:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   13744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13747:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   1374b:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   1374d:	8b 45 08             	mov    0x8(%ebp),%eax
   13750:	8b 40 18             	mov    0x18(%eax),%eax
   13753:	c1 e0 04             	shl    $0x4,%eax
   13756:	c0 f8 04             	sar    $0x4,%al
   13759:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1375c:	83 e0 0f             	and    $0xf,%eax
   1375f:	89 c1                	mov    %eax,%ecx
   13761:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13765:	83 e0 f0             	and    $0xfffffff0,%eax
   13768:	09 c8                	or     %ecx,%eax
   1376a:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   1376d:	8b 45 08             	mov    0x8(%ebp),%eax
   13770:	8b 40 1c             	mov    0x1c(%eax),%eax
   13773:	c1 e0 05             	shl    $0x5,%eax
   13776:	c0 f8 05             	sar    $0x5,%al
   13779:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1377c:	83 e0 07             	and    $0x7,%eax
   1377f:	c1 e0 04             	shl    $0x4,%eax
   13782:	89 c1                	mov    %eax,%ecx
   13784:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13788:	83 e0 8f             	and    $0xffffff8f,%eax
   1378b:	09 c8                	or     %ecx,%eax
   1378d:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   13790:	83 ec 08             	sub    $0x8,%esp
   13793:	6a 01                	push   $0x1
   13795:	ff 75 08             	push   0x8(%ebp)
   13798:	e8 fa fe ff ff       	call   13697 <move_forward>
   1379d:	83 c4 10             	add    $0x10,%esp
}
   137a0:	90                   	nop
   137a1:	c9                   	leave  
   137a2:	c3                   	ret    

000137a3 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   137a3:	55                   	push   %ebp
   137a4:	89 e5                	mov    %esp,%ebp
   137a6:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   137a9:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   137b0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   137b7:	eb 55                	jmp    1380e <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   137b9:	8b 45 08             	mov    0x8(%ebp),%eax
   137bc:	8b 40 14             	mov    0x14(%eax),%eax
   137bf:	85 c0                	test   %eax,%eax
   137c1:	74 18                	je     137db <move_backword+0x38>
      console->cursor_col--;
   137c3:	8b 45 08             	mov    0x8(%ebp),%eax
   137c6:	8b 40 14             	mov    0x14(%eax),%eax
   137c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   137cc:	8b 45 08             	mov    0x8(%ebp),%eax
   137cf:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   137d2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   137d9:	eb 2f                	jmp    1380a <move_backword+0x67>
    } else if (console->cursor_row >
   137db:	8b 45 08             	mov    0x8(%ebp),%eax
   137de:	8b 40 10             	mov    0x10(%eax),%eax
   137e1:	85 c0                	test   %eax,%eax
   137e3:	74 25                	je     1380a <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   137e5:	8b 45 08             	mov    0x8(%ebp),%eax
   137e8:	8b 40 10             	mov    0x10(%eax),%eax
   137eb:	8d 50 ff             	lea    -0x1(%eax),%edx
   137ee:	8b 45 08             	mov    0x8(%ebp),%eax
   137f1:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   137f4:	8b 45 08             	mov    0x8(%ebp),%eax
   137f7:	8b 40 0c             	mov    0xc(%eax),%eax
   137fa:	8d 50 ff             	lea    -0x1(%eax),%edx
   137fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13800:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13803:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1380a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1380e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13811:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13814:	7c a3                	jl     137b9 <move_backword+0x16>
    }
  }

  return status;
   13816:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13819:	c9                   	leave  
   1381a:	c3                   	ret    

0001381b <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   1381b:	55                   	push   %ebp
   1381c:	89 e5                	mov    %esp,%ebp
   1381e:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   13821:	6a 01                	push   $0x1
   13823:	ff 75 08             	push   0x8(%ebp)
   13826:	e8 78 ff ff ff       	call   137a3 <move_backword>
   1382b:	83 c4 08             	add    $0x8,%esp
   1382e:	85 c0                	test   %eax,%eax
   13830:	75 20                	jne    13852 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   13832:	83 ec 08             	sub    $0x8,%esp
   13835:	6a 20                	push   $0x20
   13837:	ff 75 08             	push   0x8(%ebp)
   1383a:	e8 cf fe ff ff       	call   1370e <show_char>
   1383f:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   13842:	83 ec 08             	sub    $0x8,%esp
   13845:	6a 01                	push   $0x1
   13847:	ff 75 08             	push   0x8(%ebp)
   1384a:	e8 54 ff ff ff       	call   137a3 <move_backword>
   1384f:	83 c4 10             	add    $0x10,%esp
  }
}
   13852:	90                   	nop
   13853:	c9                   	leave  
   13854:	c3                   	ret    

00013855 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   13855:	55                   	push   %ebp
   13856:	89 e5                	mov    %esp,%ebp
   13858:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   1385b:	8b 45 08             	mov    0x8(%ebp),%eax
   1385e:	8b 50 0c             	mov    0xc(%eax),%edx
   13861:	8b 45 08             	mov    0x8(%ebp),%eax
   13864:	8b 40 08             	mov    0x8(%eax),%eax
   13867:	0f af c2             	imul   %edx,%eax
   1386a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   1386d:	8b 45 08             	mov    0x8(%ebp),%eax
   13870:	8b 40 04             	mov    0x4(%eax),%eax
   13873:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   13876:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1387d:	eb 51                	jmp    138d0 <clear_display+0x7b>
    start->c = ' ';
   1387f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13882:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   13885:	8b 45 08             	mov    0x8(%ebp),%eax
   13888:	8b 40 18             	mov    0x18(%eax),%eax
   1388b:	c1 e0 04             	shl    $0x4,%eax
   1388e:	c0 f8 04             	sar    $0x4,%al
   13891:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13894:	83 e0 0f             	and    $0xf,%eax
   13897:	89 c1                	mov    %eax,%ecx
   13899:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1389d:	83 e0 f0             	and    $0xfffffff0,%eax
   138a0:	09 c8                	or     %ecx,%eax
   138a2:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   138a5:	8b 45 08             	mov    0x8(%ebp),%eax
   138a8:	8b 40 1c             	mov    0x1c(%eax),%eax
   138ab:	c1 e0 05             	shl    $0x5,%eax
   138ae:	c0 f8 05             	sar    $0x5,%al
   138b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
   138b4:	83 e0 07             	and    $0x7,%eax
   138b7:	c1 e0 04             	shl    $0x4,%eax
   138ba:	89 c1                	mov    %eax,%ecx
   138bc:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   138c0:	83 e0 8f             	and    $0xffffff8f,%eax
   138c3:	09 c8                	or     %ecx,%eax
   138c5:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   138c8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   138cc:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   138d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   138d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   138d6:	7c a7                	jl     1387f <clear_display+0x2a>
  }
}
   138d8:	90                   	nop
   138d9:	90                   	nop
   138da:	c9                   	leave  
   138db:	c3                   	ret    

000138dc <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   138dc:	55                   	push   %ebp
   138dd:	89 e5                	mov    %esp,%ebp
   138df:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   138e2:	8b 45 08             	mov    0x8(%ebp),%eax
   138e5:	8b 40 14             	mov    0x14(%eax),%eax
   138e8:	83 e0 03             	and    $0x3,%eax
   138eb:	89 c2                	mov    %eax,%edx
   138ed:	b8 04 00 00 00       	mov    $0x4,%eax
   138f2:	29 d0                	sub    %edx,%eax
   138f4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   138f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   138fe:	eb 14                	jmp    13914 <print_table+0x38>
    show_char(console, ' ');
   13900:	83 ec 08             	sub    $0x8,%esp
   13903:	6a 20                	push   $0x20
   13905:	ff 75 08             	push   0x8(%ebp)
   13908:	e8 01 fe ff ff       	call   1370e <show_char>
   1390d:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   13910:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13914:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13917:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1391a:	7c e4                	jl     13900 <print_table+0x24>
  }

  update_cursor_pos(console);
   1391c:	83 ec 0c             	sub    $0xc,%esp
   1391f:	ff 75 08             	push   0x8(%ebp)
   13922:	e8 81 fb ff ff       	call   134a8 <update_cursor_pos>
   13927:	83 c4 10             	add    $0x10,%esp
}
   1392a:	90                   	nop
   1392b:	c9                   	leave  
   1392c:	c3                   	ret    

0001392d <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   1392d:	55                   	push   %ebp
   1392e:	89 e5                	mov    %esp,%ebp
   13930:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   13933:	8b 45 08             	mov    0x8(%ebp),%eax
   13936:	6b c0 68             	imul   $0x68,%eax,%eax
   13939:	05 00 e4 04 00       	add    $0x4e400,%eax
   1393e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   13941:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13944:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   1394b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1394e:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   13955:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13958:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   1395f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13962:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   13969:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1396d:	75 38                	jne    139a7 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   1396f:	e8 c0 fa ff ff       	call   13434 <read_cursor_pos>
   13974:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   13977:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1397a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1397d:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13980:	ba 00 00 00 00       	mov    $0x0,%edx
   13985:	f7 f1                	div    %ecx
   13987:	89 c2                	mov    %eax,%edx
   13989:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1398c:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   1398f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13992:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13995:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13998:	ba 00 00 00 00       	mov    $0x0,%edx
   1399d:	f7 f1                	div    %ecx
   1399f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139a2:	89 50 14             	mov    %edx,0x14(%eax)
   139a5:	eb 22                	jmp    139c9 <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   139a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139aa:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   139b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139b4:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   139bb:	83 ec 0c             	sub    $0xc,%esp
   139be:	ff 75 f4             	push   -0xc(%ebp)
   139c1:	e8 8f fe ff ff       	call   13855 <clear_display>
   139c6:	83 c4 10             	add    $0x10,%esp
    //update_cursor_pos(console);
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   139c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139cc:	8b 50 14             	mov    0x14(%eax),%edx
   139cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139d2:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   139d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139d8:	8b 50 10             	mov    0x10(%eax),%edx
   139db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139de:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   139e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139e4:	83 c0 28             	add    $0x28,%eax
   139e7:	83 ec 04             	sub    $0x4,%esp
   139ea:	6a 28                	push   $0x28
   139ec:	6a 00                	push   $0x0
   139ee:	50                   	push   %eax
   139ef:	e8 b4 45 00 00       	call   17fa8 <kernel_memset>
   139f4:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   139f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139fa:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   13a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a0d:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13a13:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13a19:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a1c:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  //初始化终端互斥锁
  mutex_init(&console->mutex);
   13a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a22:	83 c0 54             	add    $0x54,%eax
   13a25:	83 ec 0c             	sub    $0xc,%esp
   13a28:	50                   	push   %eax
   13a29:	e8 e9 38 00 00       	call   17317 <mutex_init>
   13a2e:	83 c4 10             	add    $0x10,%esp
  return 0;
   13a31:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13a36:	c9                   	leave  
   13a37:	c3                   	ret    

00013a38 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13a38:	55                   	push   %ebp
   13a39:	89 e5                	mov    %esp,%ebp
   13a3b:	83 ec 18             	sub    $0x18,%esp
   13a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a41:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13a44:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a48:	83 f8 1b             	cmp    $0x1b,%eax
   13a4b:	7f 16                	jg     13a63 <write_normal+0x2b>
   13a4d:	83 f8 08             	cmp    $0x8,%eax
   13a50:	7c 75                	jl     13ac7 <write_normal+0x8f>
   13a52:	83 e8 08             	sub    $0x8,%eax
   13a55:	83 f8 13             	cmp    $0x13,%eax
   13a58:	77 6d                	ja     13ac7 <write_normal+0x8f>
   13a5a:	8b 04 85 c0 93 01 00 	mov    0x193c0(,%eax,4),%eax
   13a61:	ff e0                	jmp    *%eax
   13a63:	83 f8 7f             	cmp    $0x7f,%eax
   13a66:	74 0d                	je     13a75 <write_normal+0x3d>
   13a68:	eb 5d                	jmp    13ac7 <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   13a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a6d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13a73:	eb 72                	jmp    13ae7 <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   13a75:	83 ec 0c             	sub    $0xc,%esp
   13a78:	ff 75 08             	push   0x8(%ebp)
   13a7b:	e8 9b fd ff ff       	call   1381b <erase_backword>
   13a80:	83 c4 10             	add    $0x10,%esp
      break;
   13a83:	eb 62                	jmp    13ae7 <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13a85:	83 ec 08             	sub    $0x8,%esp
   13a88:	6a 01                	push   $0x1
   13a8a:	ff 75 08             	push   0x8(%ebp)
   13a8d:	e8 11 fd ff ff       	call   137a3 <move_backword>
   13a92:	83 c4 10             	add    $0x10,%esp
      break;
   13a95:	eb 50                	jmp    13ae7 <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13a97:	83 ec 0c             	sub    $0xc,%esp
   13a9a:	ff 75 08             	push   0x8(%ebp)
   13a9d:	e8 3a fe ff ff       	call   138dc <print_table>
   13aa2:	83 c4 10             	add    $0x10,%esp
      break;
   13aa5:	eb 40                	jmp    13ae7 <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13aa7:	83 ec 0c             	sub    $0xc,%esp
   13aaa:	ff 75 08             	push   0x8(%ebp)
   13aad:	e8 9d fb ff ff       	call   1364f <move_to_col0>
   13ab2:	83 c4 10             	add    $0x10,%esp
      break;
   13ab5:	eb 30                	jmp    13ae7 <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   13ab7:	83 ec 0c             	sub    $0xc,%esp
   13aba:	ff 75 08             	push   0x8(%ebp)
   13abd:	e8 9d fb ff ff       	call   1365f <move_to_next_line>
   13ac2:	83 c4 10             	add    $0x10,%esp
      break;
   13ac5:	eb 20                	jmp    13ae7 <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   13ac7:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13acb:	7e 19                	jle    13ae6 <write_normal+0xae>
   13acd:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13ad1:	74 13                	je     13ae6 <write_normal+0xae>
        show_char(console, c);
   13ad3:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13ad7:	83 ec 08             	sub    $0x8,%esp
   13ada:	50                   	push   %eax
   13adb:	ff 75 08             	push   0x8(%ebp)
   13ade:	e8 2b fc ff ff       	call   1370e <show_char>
   13ae3:	83 c4 10             	add    $0x10,%esp
      }
      break;
   13ae6:	90                   	nop
  }
}
   13ae7:	90                   	nop
   13ae8:	c9                   	leave  
   13ae9:	c3                   	ret    

00013aea <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   13aea:	55                   	push   %ebp
   13aeb:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   13aed:	8b 45 08             	mov    0x8(%ebp),%eax
   13af0:	8b 50 14             	mov    0x14(%eax),%edx
   13af3:	8b 45 08             	mov    0x8(%ebp),%eax
   13af6:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13af9:	8b 45 08             	mov    0x8(%ebp),%eax
   13afc:	8b 50 10             	mov    0x10(%eax),%edx
   13aff:	8b 45 08             	mov    0x8(%ebp),%eax
   13b02:	89 50 24             	mov    %edx,0x24(%eax)
}
   13b05:	90                   	nop
   13b06:	5d                   	pop    %ebp
   13b07:	c3                   	ret    

00013b08 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13b08:	55                   	push   %ebp
   13b09:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13b0b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0e:	8b 50 20             	mov    0x20(%eax),%edx
   13b11:	8b 45 08             	mov    0x8(%ebp),%eax
   13b14:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13b17:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1a:	8b 50 24             	mov    0x24(%eax),%edx
   13b1d:	8b 45 08             	mov    0x8(%ebp),%eax
   13b20:	89 50 10             	mov    %edx,0x10(%eax)
}
   13b23:	90                   	nop
   13b24:	5d                   	pop    %ebp
   13b25:	c3                   	ret    

00013b26 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13b26:	55                   	push   %ebp
   13b27:	89 e5                	mov    %esp,%ebp
   13b29:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b2f:	83 c0 28             	add    $0x28,%eax
   13b32:	83 ec 04             	sub    $0x4,%esp
   13b35:	6a 28                	push   $0x28
   13b37:	6a 00                	push   $0x0
   13b39:	50                   	push   %eax
   13b3a:	e8 69 44 00 00       	call   17fa8 <kernel_memset>
   13b3f:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13b42:	8b 45 08             	mov    0x8(%ebp),%eax
   13b45:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13b4c:	90                   	nop
   13b4d:	c9                   	leave  
   13b4e:	c3                   	ret    

00013b4f <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13b4f:	55                   	push   %ebp
   13b50:	89 e5                	mov    %esp,%ebp
   13b52:	83 ec 18             	sub    $0x18,%esp
   13b55:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b58:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13b5b:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13b5f:	83 f8 5b             	cmp    $0x5b,%eax
   13b62:	74 11                	je     13b75 <write_esc+0x26>
   13b64:	83 f8 5b             	cmp    $0x5b,%eax
   13b67:	7f 57                	jg     13bc0 <write_esc+0x71>
   13b69:	83 f8 37             	cmp    $0x37,%eax
   13b6c:	74 20                	je     13b8e <write_esc+0x3f>
   13b6e:	83 f8 38             	cmp    $0x38,%eax
   13b71:	74 34                	je     13ba7 <write_esc+0x58>
   13b73:	eb 4b                	jmp    13bc0 <write_esc+0x71>
    case '[':
      clear_esc_param(console);
   13b75:	83 ec 0c             	sub    $0xc,%esp
   13b78:	ff 75 08             	push   0x8(%ebp)
   13b7b:	e8 a6 ff ff ff       	call   13b26 <clear_esc_param>
   13b80:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13b83:	8b 45 08             	mov    0x8(%ebp),%eax
   13b86:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13b8c:	eb 3c                	jmp    13bca <write_esc+0x7b>
    case '7':
      save_cursor(console);
   13b8e:	83 ec 0c             	sub    $0xc,%esp
   13b91:	ff 75 08             	push   0x8(%ebp)
   13b94:	e8 51 ff ff ff       	call   13aea <save_cursor>
   13b99:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13ba5:	eb 23                	jmp    13bca <write_esc+0x7b>
    case '8':
      restore_cursor(console);
   13ba7:	83 ec 0c             	sub    $0xc,%esp
   13baa:	ff 75 08             	push   0x8(%ebp)
   13bad:	e8 56 ff ff ff       	call   13b08 <restore_cursor>
   13bb2:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13bbe:	eb 0a                	jmp    13bca <write_esc+0x7b>
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13bc9:	90                   	nop
  }
}
   13bca:	90                   	nop
   13bcb:	c9                   	leave  
   13bcc:	c3                   	ret    

00013bcd <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13bcd:	55                   	push   %ebp
   13bce:	89 e5                	mov    %esp,%ebp
   13bd0:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13bd3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13bda:	eb 78                	jmp    13c54 <set_font_style+0x87>
    int param = console->esc_param[i];
   13bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   13bdf:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13be2:	83 c2 08             	add    $0x8,%edx
   13be5:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13be9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13bec:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13bf0:	7e 1b                	jle    13c0d <set_font_style+0x40>
   13bf2:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13bf6:	7f 15                	jg     13c0d <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13bf8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bfb:	83 e8 1e             	sub    $0x1e,%eax
   13bfe:	8b 14 85 20 94 01 00 	mov    0x19420(,%eax,4),%edx
   13c05:	8b 45 08             	mov    0x8(%ebp),%eax
   13c08:	89 50 18             	mov    %edx,0x18(%eax)
   13c0b:	eb 43                	jmp    13c50 <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13c0d:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13c11:	7e 1b                	jle    13c2e <set_font_style+0x61>
   13c13:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13c17:	7f 15                	jg     13c2e <set_font_style+0x61>
      console->background = color_table[param - 40];
   13c19:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c1c:	83 e8 28             	sub    $0x28,%eax
   13c1f:	8b 14 85 20 94 01 00 	mov    0x19420(,%eax,4),%edx
   13c26:	8b 45 08             	mov    0x8(%ebp),%eax
   13c29:	89 50 1c             	mov    %edx,0x1c(%eax)
   13c2c:	eb 22                	jmp    13c50 <set_font_style+0x83>
    } else if (param == 39) {
   13c2e:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13c32:	75 0c                	jne    13c40 <set_font_style+0x73>
      console->foreground = COLOR_White;
   13c34:	8b 45 08             	mov    0x8(%ebp),%eax
   13c37:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13c3e:	eb 10                	jmp    13c50 <set_font_style+0x83>
    } else if (param == 49) {
   13c40:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13c44:	75 0a                	jne    13c50 <set_font_style+0x83>
      console->background = COLOR_Black;
   13c46:	8b 45 08             	mov    0x8(%ebp),%eax
   13c49:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13c50:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13c54:	8b 45 08             	mov    0x8(%ebp),%eax
   13c57:	8b 40 50             	mov    0x50(%eax),%eax
   13c5a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13c5d:	0f 8e 79 ff ff ff    	jle    13bdc <set_font_style+0xf>
    }
  }
}
   13c63:	90                   	nop
   13c64:	90                   	nop
   13c65:	c9                   	leave  
   13c66:	c3                   	ret    

00013c67 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13c67:	55                   	push   %ebp
   13c68:	89 e5                	mov    %esp,%ebp
   13c6a:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13c6d:	8b 45 08             	mov    0x8(%ebp),%eax
   13c70:	8b 40 50             	mov    0x50(%eax),%eax
   13c73:	85 c0                	test   %eax,%eax
   13c75:	78 3c                	js     13cb3 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13c77:	8b 45 08             	mov    0x8(%ebp),%eax
   13c7a:	8b 40 28             	mov    0x28(%eax),%eax
   13c7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13c80:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13c84:	75 2e                	jne    13cb4 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13c86:	8b 45 08             	mov    0x8(%ebp),%eax
   13c89:	8b 40 08             	mov    0x8(%eax),%eax
   13c8c:	83 e8 01             	sub    $0x1,%eax
   13c8f:	50                   	push   %eax
   13c90:	6a 00                	push   $0x0
   13c92:	ff 75 08             	push   0x8(%ebp)
   13c95:	e8 b4 f8 ff ff       	call   1354e <erase_rows>
   13c9a:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   13ca0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   13caa:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13cb1:	eb 01                	jmp    13cb4 <erase_in_display+0x4d>
    return;
   13cb3:	90                   	nop
  }
}
   13cb4:	c9                   	leave  
   13cb5:	c3                   	ret    

00013cb6 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13cb6:	55                   	push   %ebp
   13cb7:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   13cbc:	8b 40 28             	mov    0x28(%eax),%eax
   13cbf:	89 c2                	mov    %eax,%edx
   13cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc4:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13cc7:	8b 45 08             	mov    0x8(%ebp),%eax
   13cca:	8b 40 2c             	mov    0x2c(%eax),%eax
   13ccd:	89 c2                	mov    %eax,%edx
   13ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd2:	89 50 14             	mov    %edx,0x14(%eax)
}
   13cd5:	90                   	nop
   13cd6:	5d                   	pop    %ebp
   13cd7:	c3                   	ret    

00013cd8 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13cd8:	55                   	push   %ebp
   13cd9:	89 e5                	mov    %esp,%ebp
   13cdb:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13cde:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ce2:	75 07                	jne    13ceb <move_left+0x13>
    n = 1;
   13ce4:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   13cee:	8b 40 14             	mov    0x14(%eax),%eax
   13cf1:	8b 55 0c             	mov    0xc(%ebp),%edx
   13cf4:	29 d0                	sub    %edx,%eax
   13cf6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13cf9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13cfc:	ba 00 00 00 00       	mov    $0x0,%edx
   13d01:	85 c0                	test   %eax,%eax
   13d03:	0f 48 c2             	cmovs  %edx,%eax
   13d06:	89 c2                	mov    %eax,%edx
   13d08:	8b 45 08             	mov    0x8(%ebp),%eax
   13d0b:	89 50 14             	mov    %edx,0x14(%eax)
}
   13d0e:	90                   	nop
   13d0f:	c9                   	leave  
   13d10:	c3                   	ret    

00013d11 <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13d11:	55                   	push   %ebp
   13d12:	89 e5                	mov    %esp,%ebp
   13d14:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13d17:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13d1b:	75 07                	jne    13d24 <move_right+0x13>
    n = 1;
   13d1d:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13d24:	8b 45 08             	mov    0x8(%ebp),%eax
   13d27:	8b 50 14             	mov    0x14(%eax),%edx
   13d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d2d:	01 d0                	add    %edx,%eax
   13d2f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13d32:	8b 45 08             	mov    0x8(%ebp),%eax
   13d35:	8b 50 0c             	mov    0xc(%eax),%edx
   13d38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d3b:	39 c2                	cmp    %eax,%edx
   13d3d:	77 0b                	ja     13d4a <move_right+0x39>
   13d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   13d42:	8b 40 0c             	mov    0xc(%eax),%eax
   13d45:	83 e8 01             	sub    $0x1,%eax
   13d48:	eb 03                	jmp    13d4d <move_right+0x3c>
   13d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13d4d:	8b 55 08             	mov    0x8(%ebp),%edx
   13d50:	89 42 14             	mov    %eax,0x14(%edx)
}
   13d53:	90                   	nop
   13d54:	c9                   	leave  
   13d55:	c3                   	ret    

00013d56 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13d56:	55                   	push   %ebp
   13d57:	89 e5                	mov    %esp,%ebp
   13d59:	83 ec 14             	sub    $0x14,%esp
   13d5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d5f:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13d62:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13d66:	7e 44                	jle    13dac <write_esc_square+0x56>
   13d68:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13d6c:	7f 3e                	jg     13dac <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13d6e:	8b 45 08             	mov    0x8(%ebp),%eax
   13d71:	8b 40 50             	mov    0x50(%eax),%eax
   13d74:	83 c0 08             	add    $0x8,%eax
   13d77:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13d7e:	8b 45 08             	mov    0x8(%ebp),%eax
   13d81:	01 d0                	add    %edx,%eax
   13d83:	83 c0 08             	add    $0x8,%eax
   13d86:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13d89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d8c:	8b 10                	mov    (%eax),%edx
   13d8e:	89 d0                	mov    %edx,%eax
   13d90:	c1 e0 02             	shl    $0x2,%eax
   13d93:	01 d0                	add    %edx,%eax
   13d95:	01 c0                	add    %eax,%eax
   13d97:	89 c2                	mov    %eax,%edx
   13d99:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13d9d:	01 d0                	add    %edx,%eax
   13d9f:	8d 50 d0             	lea    -0x30(%eax),%edx
   13da2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13da5:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13da7:	e9 ab 00 00 00       	jmp    13e57 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13dac:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13db0:	75 1f                	jne    13dd1 <write_esc_square+0x7b>
   13db2:	8b 45 08             	mov    0x8(%ebp),%eax
   13db5:	8b 40 50             	mov    0x50(%eax),%eax
   13db8:	83 f8 09             	cmp    $0x9,%eax
   13dbb:	7f 14                	jg     13dd1 <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13dbd:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc0:	8b 40 50             	mov    0x50(%eax),%eax
   13dc3:	8d 50 01             	lea    0x1(%eax),%edx
   13dc6:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc9:	89 50 50             	mov    %edx,0x50(%eax)
   13dcc:	e9 86 00 00 00       	jmp    13e57 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13dd1:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13dd5:	83 f8 6d             	cmp    $0x6d,%eax
   13dd8:	74 25                	je     13dff <write_esc_square+0xa9>
   13dda:	83 f8 6d             	cmp    $0x6d,%eax
   13ddd:	7f 6d                	jg     13e4c <write_esc_square+0xf6>
   13ddf:	83 f8 4a             	cmp    $0x4a,%eax
   13de2:	74 5d                	je     13e41 <write_esc_square+0xeb>
   13de4:	83 f8 4a             	cmp    $0x4a,%eax
   13de7:	7f 63                	jg     13e4c <write_esc_square+0xf6>
   13de9:	83 f8 48             	cmp    $0x48,%eax
   13dec:	74 46                	je     13e34 <write_esc_square+0xde>
   13dee:	83 f8 48             	cmp    $0x48,%eax
   13df1:	7f 59                	jg     13e4c <write_esc_square+0xf6>
   13df3:	83 f8 43             	cmp    $0x43,%eax
   13df6:	74 28                	je     13e20 <write_esc_square+0xca>
   13df8:	83 f8 44             	cmp    $0x44,%eax
   13dfb:	74 0f                	je     13e0c <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13dfd:	eb 4d                	jmp    13e4c <write_esc_square+0xf6>
        set_font_style(console);
   13dff:	ff 75 08             	push   0x8(%ebp)
   13e02:	e8 c6 fd ff ff       	call   13bcd <set_font_style>
   13e07:	83 c4 04             	add    $0x4,%esp
        break;
   13e0a:	eb 41                	jmp    13e4d <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13e0c:	8b 45 08             	mov    0x8(%ebp),%eax
   13e0f:	8b 40 28             	mov    0x28(%eax),%eax
   13e12:	50                   	push   %eax
   13e13:	ff 75 08             	push   0x8(%ebp)
   13e16:	e8 bd fe ff ff       	call   13cd8 <move_left>
   13e1b:	83 c4 08             	add    $0x8,%esp
        break;
   13e1e:	eb 2d                	jmp    13e4d <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13e20:	8b 45 08             	mov    0x8(%ebp),%eax
   13e23:	8b 40 28             	mov    0x28(%eax),%eax
   13e26:	50                   	push   %eax
   13e27:	ff 75 08             	push   0x8(%ebp)
   13e2a:	e8 e2 fe ff ff       	call   13d11 <move_right>
   13e2f:	83 c4 08             	add    $0x8,%esp
        break;
   13e32:	eb 19                	jmp    13e4d <write_esc_square+0xf7>
        move_cursor(console);
   13e34:	ff 75 08             	push   0x8(%ebp)
   13e37:	e8 7a fe ff ff       	call   13cb6 <move_cursor>
   13e3c:	83 c4 04             	add    $0x4,%esp
        break;
   13e3f:	eb 0c                	jmp    13e4d <write_esc_square+0xf7>
        erase_in_display(console);
   13e41:	ff 75 08             	push   0x8(%ebp)
   13e44:	e8 1e fe ff ff       	call   13c67 <erase_in_display>
   13e49:	83 c4 04             	add    $0x4,%esp
        break;
   13e4c:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13e56:	90                   	nop
   13e57:	90                   	nop
   13e58:	c9                   	leave  
   13e59:	c3                   	ret    

00013e5a <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13e5a:	55                   	push   %ebp
   13e5b:	89 e5                	mov    %esp,%ebp
   13e5d:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13e60:	8b 45 08             	mov    0x8(%ebp),%eax
   13e63:	8b 40 08             	mov    0x8(%eax),%eax
   13e66:	6b c0 68             	imul   $0x68,%eax,%eax
   13e69:	05 00 e4 04 00       	add    $0x4e400,%eax
   13e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13e71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&console->mutex);
   13e78:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e7b:	83 c0 54             	add    $0x54,%eax
   13e7e:	83 ec 0c             	sub    $0xc,%esp
   13e81:	50                   	push   %eax
   13e82:	e8 dd 34 00 00       	call   17364 <mutex_lock>
   13e87:	83 c4 10             	add    $0x10,%esp

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13e8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13e8d:	8d 50 0c             	lea    0xc(%eax),%edx
   13e90:	83 ec 08             	sub    $0x8,%esp
   13e93:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13e96:	50                   	push   %eax
   13e97:	52                   	push   %edx
   13e98:	e8 ed 14 00 00       	call   1538a <tty_fifo_get>
   13e9d:	83 c4 10             	add    $0x10,%esp
   13ea0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13ea3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13ea7:	79 2a                	jns    13ed3 <console_write+0x79>
    len++;
  } while (1);


  //TODO:解锁
  mutex_unlock(&console->mutex);
   13ea9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13eac:	83 c0 54             	add    $0x54,%eax
   13eaf:	83 ec 0c             	sub    $0xc,%esp
   13eb2:	50                   	push   %eax
   13eb3:	e8 52 35 00 00       	call   1740a <mutex_unlock>
   13eb8:	83 c4 10             	add    $0x10,%esp

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   13ebe:	8b 50 08             	mov    0x8(%eax),%edx
   13ec1:	a1 40 e7 04 00       	mov    0x4e740,%eax
   13ec6:	39 c2                	cmp    %eax,%edx
   13ec8:	0f 84 83 00 00 00    	je     13f51 <console_write+0xf7>
   13ece:	e9 8c 00 00 00       	jmp    13f5f <console_write+0x105>
    sem_notify(&tty->out_sem);
   13ed3:	8b 45 08             	mov    0x8(%ebp),%eax
   13ed6:	83 c0 34             	add    $0x34,%eax
   13ed9:	83 ec 0c             	sub    $0xc,%esp
   13edc:	50                   	push   %eax
   13edd:	e8 36 37 00 00       	call   17618 <sem_notify>
   13ee2:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13ee8:	8b 00                	mov    (%eax),%eax
   13eea:	83 f8 02             	cmp    $0x2,%eax
   13eed:	74 40                	je     13f2f <console_write+0xd5>
   13eef:	83 f8 02             	cmp    $0x2,%eax
   13ef2:	77 53                	ja     13f47 <console_write+0xed>
   13ef4:	85 c0                	test   %eax,%eax
   13ef6:	74 07                	je     13eff <console_write+0xa5>
   13ef8:	83 f8 01             	cmp    $0x1,%eax
   13efb:	74 1a                	je     13f17 <console_write+0xbd>
        break;
   13efd:	eb 48                	jmp    13f47 <console_write+0xed>
        write_normal(console, c);
   13eff:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f03:	0f be c0             	movsbl %al,%eax
   13f06:	83 ec 08             	sub    $0x8,%esp
   13f09:	50                   	push   %eax
   13f0a:	ff 75 f0             	push   -0x10(%ebp)
   13f0d:	e8 26 fb ff ff       	call   13a38 <write_normal>
   13f12:	83 c4 10             	add    $0x10,%esp
        break;
   13f15:	eb 31                	jmp    13f48 <console_write+0xee>
        write_esc(console, c);
   13f17:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f1b:	0f be c0             	movsbl %al,%eax
   13f1e:	83 ec 08             	sub    $0x8,%esp
   13f21:	50                   	push   %eax
   13f22:	ff 75 f0             	push   -0x10(%ebp)
   13f25:	e8 25 fc ff ff       	call   13b4f <write_esc>
   13f2a:	83 c4 10             	add    $0x10,%esp
        break;
   13f2d:	eb 19                	jmp    13f48 <console_write+0xee>
        write_esc_square(console, c);
   13f2f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f33:	0f be c0             	movsbl %al,%eax
   13f36:	83 ec 08             	sub    $0x8,%esp
   13f39:	50                   	push   %eax
   13f3a:	ff 75 f0             	push   -0x10(%ebp)
   13f3d:	e8 14 fe ff ff       	call   13d56 <write_esc_square>
   13f42:	83 c4 10             	add    $0x10,%esp
        break;
   13f45:	eb 01                	jmp    13f48 <console_write+0xee>
        break;
   13f47:	90                   	nop
    len++;
   13f48:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13f4c:	e9 39 ff ff ff       	jmp    13e8a <console_write+0x30>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13f51:	83 ec 0c             	sub    $0xc,%esp
   13f54:	ff 75 f0             	push   -0x10(%ebp)
   13f57:	e8 4c f5 ff ff       	call   134a8 <update_cursor_pos>
   13f5c:	83 c4 10             	add    $0x10,%esp
  }


  return len;
   13f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13f62:	c9                   	leave  
   13f63:	c3                   	ret    

00013f64 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13f64:	55                   	push   %ebp
   13f65:	89 e5                	mov    %esp,%ebp
   13f67:	90                   	nop
   13f68:	5d                   	pop    %ebp
   13f69:	c3                   	ret    

00013f6a <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13f6a:	55                   	push   %ebp
   13f6b:	89 e5                	mov    %esp,%ebp
   13f6d:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13f70:	8b 45 08             	mov    0x8(%ebp),%eax
   13f73:	6b c0 68             	imul   $0x68,%eax,%eax
   13f76:	05 00 e4 04 00       	add    $0x4e400,%eax
   13f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   13f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f81:	8b 40 04             	mov    0x4(%eax),%eax
   13f84:	85 c0                	test   %eax,%eax
   13f86:	75 0e                	jne    13f96 <console_select+0x2c>
      console_init(console_index);
   13f88:	83 ec 0c             	sub    $0xc,%esp
   13f8b:	ff 75 08             	push   0x8(%ebp)
   13f8e:	e8 9a f9 ff ff       	call   1392d <console_init>
   13f93:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   13f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f99:	8b 40 08             	mov    0x8(%eax),%eax
   13f9c:	89 c2                	mov    %eax,%edx
   13f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   13fa1:	0f af d0             	imul   %eax,%edx
   13fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fa7:	8b 40 0c             	mov    0xc(%eax),%eax
   13faa:	0f af c2             	imul   %edx,%eax
   13fad:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   13fb1:	83 ec 08             	sub    $0x8,%esp
   13fb4:	6a 0c                	push   $0xc
   13fb6:	68 d4 03 00 00       	push   $0x3d4
   13fbb:	e8 53 f4 ff ff       	call   13413 <outb>
   13fc0:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   13fc3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13fc7:	66 c1 e8 08          	shr    $0x8,%ax
   13fcb:	0f b6 c0             	movzbl %al,%eax
   13fce:	83 ec 08             	sub    $0x8,%esp
   13fd1:	50                   	push   %eax
   13fd2:	68 d5 03 00 00       	push   $0x3d5
   13fd7:	e8 37 f4 ff ff       	call   13413 <outb>
   13fdc:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   13fdf:	83 ec 08             	sub    $0x8,%esp
   13fe2:	6a 0d                	push   $0xd
   13fe4:	68 d4 03 00 00       	push   $0x3d4
   13fe9:	e8 25 f4 ff ff       	call   13413 <outb>
   13fee:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   13ff1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13ff5:	0f b6 c0             	movzbl %al,%eax
   13ff8:	83 ec 08             	sub    $0x8,%esp
   13ffb:	50                   	push   %eax
   13ffc:	68 d5 03 00 00       	push   $0x3d5
   14001:	e8 0d f4 ff ff       	call   13413 <outb>
   14006:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   14009:	8b 45 08             	mov    0x8(%ebp),%eax
   1400c:	a3 40 e7 04 00       	mov    %eax,0x4e740

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   14011:	8b 45 08             	mov    0x8(%ebp),%eax
   14014:	83 c0 30             	add    $0x30,%eax
   14017:	0f be c0             	movsbl %al,%eax
   1401a:	83 ec 08             	sub    $0x8,%esp
   1401d:	50                   	push   %eax
   1401e:	ff 75 f4             	push   -0xc(%ebp)
   14021:	e8 e8 f6 ff ff       	call   1370e <show_char>
   14026:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   14029:	83 ec 0c             	sub    $0xc,%esp
   1402c:	ff 75 f4             	push   -0xc(%ebp)
   1402f:	e8 74 f4 ff ff       	call   134a8 <update_cursor_pos>
   14034:	83 c4 10             	add    $0x10,%esp

   

   14037:	90                   	nop
   14038:	c9                   	leave  
   14039:	c3                   	ret    

0001403a <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   1403a:	55                   	push   %ebp
   1403b:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   1403d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14041:	78 06                	js     14049 <is_dev_exist+0xf>
   14043:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   14047:	7e 07                	jle    14050 <is_dev_exist+0x16>
        return 0;
   14049:	b8 00 00 00 00       	mov    $0x0,%eax
   1404e:	eb 3c                	jmp    1408c <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   14050:	8b 55 08             	mov    0x8(%ebp),%edx
   14053:	89 d0                	mov    %edx,%eax
   14055:	c1 e0 02             	shl    $0x2,%eax
   14058:	01 d0                	add    %edx,%eax
   1405a:	c1 e0 02             	shl    $0x2,%eax
   1405d:	05 70 e7 04 00       	add    $0x4e770,%eax
   14062:	8b 00                	mov    (%eax),%eax
   14064:	85 c0                	test   %eax,%eax
   14066:	74 18                	je     14080 <is_dev_exist+0x46>
   14068:	8b 55 08             	mov    0x8(%ebp),%edx
   1406b:	89 d0                	mov    %edx,%eax
   1406d:	c1 e0 02             	shl    $0x2,%eax
   14070:	01 d0                	add    %edx,%eax
   14072:	c1 e0 02             	shl    $0x2,%eax
   14075:	05 60 e7 04 00       	add    $0x4e760,%eax
   1407a:	8b 00                	mov    (%eax),%eax
   1407c:	85 c0                	test   %eax,%eax
   1407e:	75 07                	jne    14087 <is_dev_exist+0x4d>
        return 0;
   14080:	b8 00 00 00 00       	mov    $0x0,%eax
   14085:	eb 05                	jmp    1408c <is_dev_exist+0x52>
    }

    return 1;
   14087:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1408c:	5d                   	pop    %ebp
   1408d:	c3                   	ret    

0001408e <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   1408e:	55                   	push   %ebp
   1408f:	89 e5                	mov    %esp,%ebp
   14091:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   14094:	e8 8b f2 ff ff       	call   13324 <idt_enter_protection>
   14099:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   1409c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   140a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   140aa:	eb 68                	jmp    14114 <dev_open+0x86>
        device_t *dev = dev_table + i;
   140ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
   140af:	89 d0                	mov    %edx,%eax
   140b1:	c1 e0 02             	shl    $0x2,%eax
   140b4:	01 d0                	add    %edx,%eax
   140b6:	c1 e0 02             	shl    $0x2,%eax
   140b9:	05 60 e7 04 00       	add    $0x4e760,%eax
   140be:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   140c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140c4:	8b 40 10             	mov    0x10(%eax),%eax
   140c7:	85 c0                	test   %eax,%eax
   140c9:	75 08                	jne    140d3 <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   140cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   140d1:	eb 49                	jmp    1411c <dev_open+0x8e>
        } else if (dev->desc->dev_type == dev_type && dev->dev_index == dev_index) {
   140d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140d6:	8b 00                	mov    (%eax),%eax
   140d8:	8b 40 14             	mov    0x14(%eax),%eax
   140db:	39 45 08             	cmp    %eax,0x8(%ebp)
   140de:	75 30                	jne    14110 <dev_open+0x82>
   140e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140e3:	8b 40 08             	mov    0x8(%eax),%eax
   140e6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   140e9:	75 25                	jne    14110 <dev_open+0x82>
            //设备已打开过,增加打开次数
            dev->open_count++;
   140eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140ee:	8b 40 10             	mov    0x10(%eax),%eax
   140f1:	8d 50 01             	lea    0x1(%eax),%edx
   140f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140f7:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   140fa:	83 ec 0c             	sub    $0xc,%esp
   140fd:	ff 75 e4             	push   -0x1c(%ebp)
   14100:	e8 37 f2 ff ff       	call   1333c <idt_leave_protection>
   14105:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   14108:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1410b:	e9 c6 00 00 00       	jmp    141d6 <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14110:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14114:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14117:	83 f8 7f             	cmp    $0x7f,%eax
   1411a:	76 90                	jbe    140ac <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   1411c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   14123:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1412a:	eb 24                	jmp    14150 <dev_open+0xc2>
        dev_desc_t *d = dev_des_table[i];
   1412c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1412f:	8b 04 85 50 b0 01 00 	mov    0x1b050(,%eax,4),%eax
   14136:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   14139:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1413c:	8b 40 14             	mov    0x14(%eax),%eax
   1413f:	39 45 08             	cmp    %eax,0x8(%ebp)
   14142:	75 08                	jne    1414c <dev_open+0xbe>
            desc = d;
   14144:	8b 45 dc             	mov    -0x24(%ebp),%eax
   14147:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   1414a:	eb 0c                	jmp    14158 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   1414c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   14150:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14153:	83 f8 02             	cmp    $0x2,%eax
   14156:	76 d4                	jbe    1412c <dev_open+0x9e>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   14158:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1415c:	74 65                	je     141c3 <dev_open+0x135>
   1415e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14162:	74 5f                	je     141c3 <dev_open+0x135>
        free_dev->desc = desc;
   14164:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14167:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1416a:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   1416c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1416f:	8b 55 10             	mov    0x10(%ebp),%edx
   14172:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   14175:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14178:	8b 55 0c             	mov    0xc(%ebp),%edx
   1417b:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   1417e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14181:	8b 40 18             	mov    0x18(%eax),%eax
   14184:	83 ec 0c             	sub    $0xc,%esp
   14187:	ff 75 f4             	push   -0xc(%ebp)
   1418a:	ff d0                	call   *%eax
   1418c:	83 c4 10             	add    $0x10,%esp
   1418f:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   14192:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   14196:	75 2b                	jne    141c3 <dev_open+0x135>
            free_dev->open_count = 1;
   14198:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1419b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   141a2:	83 ec 0c             	sub    $0xc,%esp
   141a5:	ff 75 e4             	push   -0x1c(%ebp)
   141a8:	e8 8f f1 ff ff       	call   1333c <idt_leave_protection>
   141ad:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   141b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141b3:	2d 60 e7 04 00       	sub    $0x4e760,%eax
   141b8:	c1 f8 02             	sar    $0x2,%eax
   141bb:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   141c1:	eb 13                	jmp    141d6 <dev_open+0x148>

        }
    }

    idt_leave_protection(state);
   141c3:	83 ec 0c             	sub    $0xc,%esp
   141c6:	ff 75 e4             	push   -0x1c(%ebp)
   141c9:	e8 6e f1 ff ff       	call   1333c <idt_leave_protection>
   141ce:	83 c4 10             	add    $0x10,%esp
    return -1;
   141d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   141d6:	c9                   	leave  
   141d7:	c3                   	ret    

000141d8 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   141d8:	55                   	push   %ebp
   141d9:	89 e5                	mov    %esp,%ebp
   141db:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   141de:	ff 75 08             	push   0x8(%ebp)
   141e1:	e8 54 fe ff ff       	call   1403a <is_dev_exist>
   141e6:	83 c4 04             	add    $0x4,%esp
   141e9:	85 c0                	test   %eax,%eax
   141eb:	75 07                	jne    141f4 <dev_read+0x1c>
        return -1;
   141ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141f2:	eb 2e                	jmp    14222 <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   141f4:	8b 55 08             	mov    0x8(%ebp),%edx
   141f7:	89 d0                	mov    %edx,%eax
   141f9:	c1 e0 02             	shl    $0x2,%eax
   141fc:	01 d0                	add    %edx,%eax
   141fe:	c1 e0 02             	shl    $0x2,%eax
   14201:	05 60 e7 04 00       	add    $0x4e760,%eax
   14206:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14209:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1420c:	8b 00                	mov    (%eax),%eax
   1420e:	8b 40 1c             	mov    0x1c(%eax),%eax
   14211:	ff 75 14             	push   0x14(%ebp)
   14214:	ff 75 10             	push   0x10(%ebp)
   14217:	ff 75 0c             	push   0xc(%ebp)
   1421a:	ff 75 f4             	push   -0xc(%ebp)
   1421d:	ff d0                	call   *%eax
   1421f:	83 c4 10             	add    $0x10,%esp
}
   14222:	c9                   	leave  
   14223:	c3                   	ret    

00014224 <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   14224:	55                   	push   %ebp
   14225:	89 e5                	mov    %esp,%ebp
   14227:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1422a:	ff 75 08             	push   0x8(%ebp)
   1422d:	e8 08 fe ff ff       	call   1403a <is_dev_exist>
   14232:	83 c4 04             	add    $0x4,%esp
   14235:	85 c0                	test   %eax,%eax
   14237:	75 07                	jne    14240 <dev_write+0x1c>
        return -1;
   14239:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1423e:	eb 2e                	jmp    1426e <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   14240:	8b 55 08             	mov    0x8(%ebp),%edx
   14243:	89 d0                	mov    %edx,%eax
   14245:	c1 e0 02             	shl    $0x2,%eax
   14248:	01 d0                	add    %edx,%eax
   1424a:	c1 e0 02             	shl    $0x2,%eax
   1424d:	05 60 e7 04 00       	add    $0x4e760,%eax
   14252:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   14255:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14258:	8b 00                	mov    (%eax),%eax
   1425a:	8b 40 20             	mov    0x20(%eax),%eax
   1425d:	ff 75 14             	push   0x14(%ebp)
   14260:	ff 75 10             	push   0x10(%ebp)
   14263:	ff 75 0c             	push   0xc(%ebp)
   14266:	ff 75 f4             	push   -0xc(%ebp)
   14269:	ff d0                	call   *%eax
   1426b:	83 c4 10             	add    $0x10,%esp
}
   1426e:	c9                   	leave  
   1426f:	c3                   	ret    

00014270 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   14270:	55                   	push   %ebp
   14271:	89 e5                	mov    %esp,%ebp
   14273:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14276:	ff 75 08             	push   0x8(%ebp)
   14279:	e8 bc fd ff ff       	call   1403a <is_dev_exist>
   1427e:	83 c4 04             	add    $0x4,%esp
   14281:	85 c0                	test   %eax,%eax
   14283:	75 07                	jne    1428c <dev_control+0x1c>
        return -1;
   14285:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1428a:	eb 2e                	jmp    142ba <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   1428c:	8b 55 08             	mov    0x8(%ebp),%edx
   1428f:	89 d0                	mov    %edx,%eax
   14291:	c1 e0 02             	shl    $0x2,%eax
   14294:	01 d0                	add    %edx,%eax
   14296:	c1 e0 02             	shl    $0x2,%eax
   14299:	05 60 e7 04 00       	add    $0x4e760,%eax
   1429e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   142a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142a4:	8b 00                	mov    (%eax),%eax
   142a6:	8b 40 24             	mov    0x24(%eax),%eax
   142a9:	ff 75 14             	push   0x14(%ebp)
   142ac:	ff 75 10             	push   0x10(%ebp)
   142af:	ff 75 0c             	push   0xc(%ebp)
   142b2:	ff 75 f4             	push   -0xc(%ebp)
   142b5:	ff d0                	call   *%eax
   142b7:	83 c4 10             	add    $0x10,%esp
}
   142ba:	c9                   	leave  
   142bb:	c3                   	ret    

000142bc <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   142bc:	55                   	push   %ebp
   142bd:	89 e5                	mov    %esp,%ebp
   142bf:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   142c2:	ff 75 08             	push   0x8(%ebp)
   142c5:	e8 70 fd ff ff       	call   1403a <is_dev_exist>
   142ca:	83 c4 04             	add    $0x4,%esp
   142cd:	85 c0                	test   %eax,%eax
   142cf:	74 6b                	je     1433c <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   142d1:	8b 55 08             	mov    0x8(%ebp),%edx
   142d4:	89 d0                	mov    %edx,%eax
   142d6:	c1 e0 02             	shl    $0x2,%eax
   142d9:	01 d0                	add    %edx,%eax
   142db:	c1 e0 02             	shl    $0x2,%eax
   142de:	05 60 e7 04 00       	add    $0x4e760,%eax
   142e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   142e6:	e8 39 f0 ff ff       	call   13324 <idt_enter_protection>
   142eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   142ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142f1:	8b 40 10             	mov    0x10(%eax),%eax
   142f4:	8d 50 ff             	lea    -0x1(%eax),%edx
   142f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142fa:	89 50 10             	mov    %edx,0x10(%eax)
   142fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14300:	8b 40 10             	mov    0x10(%eax),%eax
   14303:	85 c0                	test   %eax,%eax
   14305:	75 25                	jne    1432c <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   14307:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1430a:	8b 00                	mov    (%eax),%eax
   1430c:	8b 40 28             	mov    0x28(%eax),%eax
   1430f:	83 ec 0c             	sub    $0xc,%esp
   14312:	ff 75 f4             	push   -0xc(%ebp)
   14315:	ff d0                	call   *%eax
   14317:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   1431a:	83 ec 04             	sub    $0x4,%esp
   1431d:	6a 14                	push   $0x14
   1431f:	6a 00                	push   $0x0
   14321:	ff 75 f4             	push   -0xc(%ebp)
   14324:	e8 7f 3c 00 00       	call   17fa8 <kernel_memset>
   14329:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   1432c:	83 ec 0c             	sub    $0xc,%esp
   1432f:	ff 75 f0             	push   -0x10(%ebp)
   14332:	e8 05 f0 ff ff       	call   1333c <idt_leave_protection>
   14337:	83 c4 10             	add    $0x10,%esp
   1433a:	eb 01                	jmp    1433d <dev_close+0x81>
        return;
   1433c:	90                   	nop
}
   1433d:	c9                   	leave  
   1433e:	c3                   	ret    

0001433f <inb>:
static inline uint8_t inb(uint16_t port) {
   1433f:	55                   	push   %ebp
   14340:	89 e5                	mov    %esp,%ebp
   14342:	83 ec 14             	sub    $0x14,%esp
   14345:	8b 45 08             	mov    0x8(%ebp),%eax
   14348:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1434c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14350:	89 c2                	mov    %eax,%edx
   14352:	ec                   	in     (%dx),%al
   14353:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14356:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1435a:	c9                   	leave  
   1435b:	c3                   	ret    

0001435c <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1435c:	55                   	push   %ebp
   1435d:	89 e5                	mov    %esp,%ebp
   1435f:	83 ec 08             	sub    $0x8,%esp
   14362:	8b 45 08             	mov    0x8(%ebp),%eax
   14365:	8b 55 0c             	mov    0xc(%ebp),%edx
   14368:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1436c:	89 d0                	mov    %edx,%eax
   1436e:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14371:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14375:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14379:	ee                   	out    %al,(%dx)
}
   1437a:	90                   	nop
   1437b:	c9                   	leave  
   1437c:	c3                   	ret    

0001437d <outw>:
static inline void outw(uint16_t port, uint8_t data) {
   1437d:	55                   	push   %ebp
   1437e:	89 e5                	mov    %esp,%ebp
   14380:	83 ec 08             	sub    $0x8,%esp
   14383:	8b 45 08             	mov    0x8(%ebp),%eax
   14386:	8b 55 0c             	mov    0xc(%ebp),%edx
   14389:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1438d:	89 d0                	mov    %edx,%eax
   1438f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14392:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14396:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1439a:	ee                   	out    %al,(%dx)
}
   1439b:	90                   	nop
   1439c:	c9                   	leave  
   1439d:	c3                   	ret    

0001439e <inw>:
static inline uint16_t inw(uint16_t port) {
   1439e:	55                   	push   %ebp
   1439f:	89 e5                	mov    %esp,%ebp
   143a1:	83 ec 14             	sub    $0x14,%esp
   143a4:	8b 45 08             	mov    0x8(%ebp),%eax
   143a7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   143ab:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   143af:	89 c2                	mov    %eax,%edx
   143b1:	66 ed                	in     (%dx),%ax
   143b3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   143b7:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   143bb:	c9                   	leave  
   143bc:	c3                   	ret    

000143bd <disk_send_cmd>:
 * @param start_sector
 * @param sector_count
 * @param cmd
 */
static void disk_send_cmd(disk_t *disk, uint32_t start_sector,
                          uint32_t sector_count, int cmd) {
   143bd:	55                   	push   %ebp
   143be:	89 e5                	mov    %esp,%ebp
  // 1.LBA模式下指定磁盘的驱动器号，即master或者slave
  outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);
   143c0:	8b 45 08             	mov    0x8(%ebp),%eax
   143c3:	8b 40 20             	mov    0x20(%eax),%eax
   143c6:	83 c8 e0             	or     $0xffffffe0,%eax
   143c9:	0f b6 d0             	movzbl %al,%edx
   143cc:	8b 45 08             	mov    0x8(%ebp),%eax
   143cf:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143d3:	83 c0 06             	add    $0x6,%eax
   143d6:	0f b7 c0             	movzwl %ax,%eax
   143d9:	52                   	push   %edx
   143da:	50                   	push   %eax
   143db:	e8 7c ff ff ff       	call   1435c <outb>
   143e0:	83 c4 08             	add    $0x8,%esp

  // 2.指定扇区数的高八位和起始扇区即LBA值的高24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 8));
   143e3:	8b 45 10             	mov    0x10(%ebp),%eax
   143e6:	c1 e8 08             	shr    $0x8,%eax
   143e9:	0f b6 d0             	movzbl %al,%edx
   143ec:	8b 45 08             	mov    0x8(%ebp),%eax
   143ef:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143f3:	83 c0 02             	add    $0x2,%eax
   143f6:	0f b7 c0             	movzwl %ax,%eax
   143f9:	52                   	push   %edx
   143fa:	50                   	push   %eax
   143fb:	e8 5c ff ff ff       	call   1435c <outb>
   14400:	83 c4 08             	add    $0x8,%esp
  // 6字节LBA值，先初始化第456个字节
  // 暂时只用到了4个字节的LBA值, 所以第5, 6个字节置0即可
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 24));  // LBA4
   14403:	8b 45 0c             	mov    0xc(%ebp),%eax
   14406:	c1 e8 18             	shr    $0x18,%eax
   14409:	0f b6 d0             	movzbl %al,%edx
   1440c:	8b 45 08             	mov    0x8(%ebp),%eax
   1440f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14413:	83 c0 03             	add    $0x3,%eax
   14416:	0f b7 c0             	movzwl %ax,%eax
   14419:	52                   	push   %edx
   1441a:	50                   	push   %eax
   1441b:	e8 3c ff ff ff       	call   1435c <outb>
   14420:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), 0x00);                          // LBA5
   14423:	8b 45 08             	mov    0x8(%ebp),%eax
   14426:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1442a:	83 c0 04             	add    $0x4,%eax
   1442d:	0f b7 c0             	movzwl %ax,%eax
   14430:	6a 00                	push   $0x0
   14432:	50                   	push   %eax
   14433:	e8 24 ff ff ff       	call   1435c <outb>
   14438:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), 0x00);                           // LBA6
   1443b:	8b 45 08             	mov    0x8(%ebp),%eax
   1443e:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14442:	83 c0 05             	add    $0x5,%eax
   14445:	0f b7 c0             	movzwl %ax,%eax
   14448:	6a 00                	push   $0x0
   1444a:	50                   	push   %eax
   1444b:	e8 0c ff ff ff       	call   1435c <outb>
   14450:	83 c4 08             	add    $0x8,%esp

  // 3.指定读取扇区的低8位和起始扇区即LBA值的低24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 0));
   14453:	8b 45 10             	mov    0x10(%ebp),%eax
   14456:	0f b6 d0             	movzbl %al,%edx
   14459:	8b 45 08             	mov    0x8(%ebp),%eax
   1445c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14460:	83 c0 02             	add    $0x2,%eax
   14463:	0f b7 c0             	movzwl %ax,%eax
   14466:	52                   	push   %edx
   14467:	50                   	push   %eax
   14468:	e8 ef fe ff ff       	call   1435c <outb>
   1446d:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 0));   // LBA1
   14470:	8b 45 0c             	mov    0xc(%ebp),%eax
   14473:	0f b6 d0             	movzbl %al,%edx
   14476:	8b 45 08             	mov    0x8(%ebp),%eax
   14479:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1447d:	83 c0 03             	add    $0x3,%eax
   14480:	0f b7 c0             	movzwl %ax,%eax
   14483:	52                   	push   %edx
   14484:	50                   	push   %eax
   14485:	e8 d2 fe ff ff       	call   1435c <outb>
   1448a:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), (uint8_t)(start_sector >> 8));  // LBA2
   1448d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14490:	c1 e8 08             	shr    $0x8,%eax
   14493:	0f b6 d0             	movzbl %al,%edx
   14496:	8b 45 08             	mov    0x8(%ebp),%eax
   14499:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1449d:	83 c0 04             	add    $0x4,%eax
   144a0:	0f b7 c0             	movzwl %ax,%eax
   144a3:	52                   	push   %edx
   144a4:	50                   	push   %eax
   144a5:	e8 b2 fe ff ff       	call   1435c <outb>
   144aa:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), (uint8_t)(start_sector >> 16));  // LBA3
   144ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   144b0:	c1 e8 10             	shr    $0x10,%eax
   144b3:	0f b6 d0             	movzbl %al,%edx
   144b6:	8b 45 08             	mov    0x8(%ebp),%eax
   144b9:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144bd:	83 c0 05             	add    $0x5,%eax
   144c0:	0f b7 c0             	movzwl %ax,%eax
   144c3:	52                   	push   %edx
   144c4:	50                   	push   %eax
   144c5:	e8 92 fe ff ff       	call   1435c <outb>
   144ca:	83 c4 08             	add    $0x8,%esp

  // 4.对指定的区域执行cmd指令操作
  outb(DISK_CMD(disk), cmd);
   144cd:	8b 45 14             	mov    0x14(%ebp),%eax
   144d0:	0f b6 d0             	movzbl %al,%edx
   144d3:	8b 45 08             	mov    0x8(%ebp),%eax
   144d6:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144da:	83 c0 07             	add    $0x7,%eax
   144dd:	0f b7 c0             	movzwl %ax,%eax
   144e0:	52                   	push   %edx
   144e1:	50                   	push   %eax
   144e2:	e8 75 fe ff ff       	call   1435c <outb>
   144e7:	83 c4 08             	add    $0x8,%esp
}
   144ea:	90                   	nop
   144eb:	c9                   	leave  
   144ec:	c3                   	ret    

000144ed <disk_read_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_read_data(disk_t *disk, void *buf, int size) {
   144ed:	55                   	push   %ebp
   144ee:	89 e5                	mov    %esp,%ebp
   144f0:	53                   	push   %ebx
   144f1:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   144f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   144f7:	89 45 f8             	mov    %eax,-0x8(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   144fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14501:	eb 23                	jmp    14526 <disk_read_data+0x39>
    *(c++) = inw(DISK_DATA(disk));
   14503:	8b 45 08             	mov    0x8(%ebp),%eax
   14506:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1450a:	0f b7 c0             	movzwl %ax,%eax
   1450d:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14510:	8d 53 02             	lea    0x2(%ebx),%edx
   14513:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14516:	50                   	push   %eax
   14517:	e8 82 fe ff ff       	call   1439e <inw>
   1451c:	83 c4 04             	add    $0x4,%esp
   1451f:	66 89 03             	mov    %ax,(%ebx)
  for (int i = 0; i < size / 2; ++i) {
   14522:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14526:	8b 45 10             	mov    0x10(%ebp),%eax
   14529:	89 c2                	mov    %eax,%edx
   1452b:	c1 ea 1f             	shr    $0x1f,%edx
   1452e:	01 d0                	add    %edx,%eax
   14530:	d1 f8                	sar    %eax
   14532:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   14535:	7c cc                	jl     14503 <disk_read_data+0x16>
  }
}
   14537:	90                   	nop
   14538:	90                   	nop
   14539:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1453c:	c9                   	leave  
   1453d:	c3                   	ret    

0001453e <disk_write_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_write_data(disk_t *disk, void *buf, int size) {
   1453e:	55                   	push   %ebp
   1453f:	89 e5                	mov    %esp,%ebp
   14541:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   14544:	8b 45 0c             	mov    0xc(%ebp),%eax
   14547:	89 45 fc             	mov    %eax,-0x4(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   1454a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   14551:	eb 27                	jmp    1457a <disk_write_data+0x3c>
    outw(DISK_DATA(disk), *(c++));
   14553:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14556:	8d 50 02             	lea    0x2(%eax),%edx
   14559:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1455c:	0f b7 00             	movzwl (%eax),%eax
   1455f:	0f b6 d0             	movzbl %al,%edx
   14562:	8b 45 08             	mov    0x8(%ebp),%eax
   14565:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14569:	0f b7 c0             	movzwl %ax,%eax
   1456c:	52                   	push   %edx
   1456d:	50                   	push   %eax
   1456e:	e8 0a fe ff ff       	call   1437d <outw>
   14573:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < size / 2; ++i) {
   14576:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1457a:	8b 45 10             	mov    0x10(%ebp),%eax
   1457d:	89 c2                	mov    %eax,%edx
   1457f:	c1 ea 1f             	shr    $0x1f,%edx
   14582:	01 d0                	add    %edx,%eax
   14584:	d1 f8                	sar    %eax
   14586:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   14589:	7c c8                	jl     14553 <disk_write_data+0x15>
  }
}
   1458b:	90                   	nop
   1458c:	90                   	nop
   1458d:	c9                   	leave  
   1458e:	c3                   	ret    

0001458f <disk_wait_data>:
 *        并检测磁盘是否发生错误
 * 
 * @param disk 
 * @return int 
 */
static int disk_wait_data(disk_t *disk) {
   1458f:	55                   	push   %ebp
   14590:	89 e5                	mov    %esp,%ebp
   14592:	83 ec 10             	sub    $0x10,%esp
  uint8_t status = 0;
   14595:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
  do {

    //轮询状态寄存器
    //若磁盘空闲则进行下一步操作
    //若磁盘忙碌 但有数据就绪又或者有错误发生，则进行下一步操作
    status = inb(DISK_STATUS(disk));
   14599:	8b 45 08             	mov    0x8(%ebp),%eax
   1459c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   145a0:	83 c0 07             	add    $0x7,%eax
   145a3:	0f b7 c0             	movzwl %ax,%eax
   145a6:	50                   	push   %eax
   145a7:	e8 93 fd ff ff       	call   1433f <inb>
   145ac:	83 c4 04             	add    $0x4,%esp
   145af:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((status & ( DISK_STATUS_BUSY 
   145b2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   145b6:	25 89 00 00 00       	and    $0x89,%eax
   145bb:	3d 80 00 00 00       	cmp    $0x80,%eax
   145c0:	75 02                	jne    145c4 <disk_wait_data+0x35>
    status = inb(DISK_STATUS(disk));
   145c2:	eb d5                	jmp    14599 <disk_wait_data+0xa>
                    | DISK_STATUS_DRQ 
                    | DISK_STATUS_ERR)) 
                    != DISK_STATUS_BUSY) {

        break;
   145c4:	90                   	nop
    }
  } while (1);


  return (status & DISK_STATUS_ERR) ? -1 : 0;
   145c5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   145c9:	83 e0 01             	and    $0x1,%eax
   145cc:	85 c0                	test   %eax,%eax
   145ce:	74 07                	je     145d7 <disk_wait_data+0x48>
   145d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   145d5:	eb 05                	jmp    145dc <disk_wait_data+0x4d>
   145d7:	b8 00 00 00 00       	mov    $0x0,%eax
  
}
   145dc:	c9                   	leave  
   145dd:	c3                   	ret    

000145de <detect_part_info>:
 * @brief 检测磁盘disk的分区表信息
 * 
 * @param disk 
 * @return int 
 */
static int detect_part_info(disk_t *disk) {
   145de:	55                   	push   %ebp
   145df:	89 e5                	mov    %esp,%ebp
   145e1:	81 ec 18 02 00 00    	sub    $0x218,%esp
  mbr_t mbr;
  //1.发送读取指令
  disk_send_cmd(disk, 0, 1, DISK_CMD_READ);
   145e7:	6a 24                	push   $0x24
   145e9:	6a 01                	push   $0x1
   145eb:	6a 00                	push   $0x0
   145ed:	ff 75 08             	push   0x8(%ebp)
   145f0:	e8 c8 fd ff ff       	call   143bd <disk_send_cmd>
   145f5:	83 c4 10             	add    $0x10,%esp
  //2.等待磁盘数据就绪
  int err = disk_wait_data(disk);
   145f8:	ff 75 08             	push   0x8(%ebp)
   145fb:	e8 8f ff ff ff       	call   1458f <disk_wait_data>
   14600:	83 c4 04             	add    $0x4,%esp
   14603:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (err < 0) {
   14606:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1460a:	79 18                	jns    14624 <detect_part_info+0x46>
    log_printf("read mbr failed!\n");
   1460c:	83 ec 0c             	sub    $0xc,%esp
   1460f:	68 40 94 01 00       	push   $0x19440
   14614:	e8 8c 41 00 00       	call   187a5 <log_printf>
   14619:	83 c4 10             	add    $0x10,%esp
    return err;
   1461c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1461f:	e9 cd 00 00 00       	jmp    146f1 <detect_part_info+0x113>
  }

  //3.读取0扇区的mbr,并将由bios检测并填充的分区表信息
  //读取到disk的partinfo结构中
  disk_read_data(disk, &mbr, sizeof(mbr));
   14624:	83 ec 04             	sub    $0x4,%esp
   14627:	68 00 02 00 00       	push   $0x200
   1462c:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14632:	50                   	push   %eax
   14633:	ff 75 08             	push   0x8(%ebp)
   14636:	e8 b2 fe ff ff       	call   144ed <disk_read_data>
   1463b:	83 c4 10             	add    $0x10,%esp
  part_item_t *item = mbr.part_item;
   1463e:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14644:	05 be 01 00 00       	add    $0x1be,%eax
   14649:	89 45 f4             	mov    %eax,-0xc(%ebp)
  partinfo_t *part_info = disk->partinfo + 1;
   1464c:	8b 45 08             	mov    0x8(%ebp),%eax
   1464f:	83 c0 30             	add    $0x30,%eax
   14652:	83 c0 30             	add    $0x30,%eax
   14655:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   14658:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1465f:	e9 83 00 00 00       	jmp    146e7 <detect_part_info+0x109>
    part_info->type = item->system_id;
   14664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14667:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1466b:	0f b6 d0             	movzbl %al,%edx
   1466e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14671:	89 50 24             	mov    %edx,0x24(%eax)
    if (part_info->type == FS_INVALID) {  //无效分区，不使用
   14674:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14677:	8b 40 24             	mov    0x24(%eax),%eax
   1467a:	85 c0                	test   %eax,%eax
   1467c:	75 20                	jne    1469e <detect_part_info+0xc0>
      part_info->total_sectors = 0;
   1467e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14681:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
      part_info->start_sector = 0;
   14688:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1468b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
      part_info->disk = (disk_t *)0;
   14692:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14695:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   1469c:	eb 3d                	jmp    146db <detect_part_info+0xfd>
    } else {  //分区有效，记录分区信息
      kernel_sprintf(part_info->name, "%s%d", disk->name, i);
   1469e:	8b 55 08             	mov    0x8(%ebp),%edx
   146a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146a4:	ff 75 ec             	push   -0x14(%ebp)
   146a7:	52                   	push   %edx
   146a8:	68 52 94 01 00       	push   $0x19452
   146ad:	50                   	push   %eax
   146ae:	e8 ba 39 00 00       	call   1806d <kernel_sprintf>
   146b3:	83 c4 10             	add    $0x10,%esp
      part_info->disk = disk;
   146b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146b9:	8b 55 08             	mov    0x8(%ebp),%edx
   146bc:	89 50 20             	mov    %edx,0x20(%eax)
      part_info->start_sector = item->relative_sector;
   146bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146c2:	8b 40 08             	mov    0x8(%eax),%eax
   146c5:	89 c2                	mov    %eax,%edx
   146c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ca:	89 50 28             	mov    %edx,0x28(%eax)
      part_info->total_sectors = item->total_sectors;
   146cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146d0:	8b 40 0c             	mov    0xc(%eax),%eax
   146d3:	89 c2                	mov    %eax,%edx
   146d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146d8:	89 50 2c             	mov    %edx,0x2c(%eax)
  for (int i = 0; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   146db:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   146df:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   146e3:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   146e7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   146eb:	0f 8e 73 ff ff ff    	jle    14664 <detect_part_info+0x86>
    }
  }
}
   146f1:	c9                   	leave  
   146f2:	c3                   	ret    

000146f3 <identify_disk>:
 * @brief 检测磁盘
 * 
 * @param disk 
 * @return int 
 */
static int identify_disk(disk_t *disk) {
   146f3:	55                   	push   %ebp
   146f4:	89 e5                	mov    %esp,%ebp
   146f6:	81 ec 18 02 00 00    	sub    $0x218,%esp
    //将扇区数量和起始扇区即LBA lo,mid,hi 寄存器都设为0，并发送检测指令
    disk_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   146fc:	68 ec 00 00 00       	push   $0xec
   14701:	6a 00                	push   $0x0
   14703:	6a 00                	push   $0x0
   14705:	ff 75 08             	push   0x8(%ebp)
   14708:	e8 b0 fc ff ff       	call   143bd <disk_send_cmd>
   1470d:	83 c4 10             	add    $0x10,%esp

    //读取状态寄存器判断是否出错，不出错则存在磁盘
    int err = inb(DISK_STATUS(disk));
   14710:	8b 45 08             	mov    0x8(%ebp),%eax
   14713:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14717:	83 c0 07             	add    $0x7,%eax
   1471a:	0f b7 c0             	movzwl %ax,%eax
   1471d:	50                   	push   %eax
   1471e:	e8 1c fc ff ff       	call   1433f <inb>
   14723:	83 c4 04             	add    $0x4,%esp
   14726:	0f b6 c0             	movzbl %al,%eax
   14729:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   1472c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14730:	75 1e                	jne    14750 <identify_disk+0x5d>
        log_printf("%s doesn't exist", disk->name);
   14732:	8b 45 08             	mov    0x8(%ebp),%eax
   14735:	83 ec 08             	sub    $0x8,%esp
   14738:	50                   	push   %eax
   14739:	68 57 94 01 00       	push   $0x19457
   1473e:	e8 62 40 00 00       	call   187a5 <log_printf>
   14743:	83 c4 10             	add    $0x10,%esp
        return -1;
   14746:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1474b:	e9 ca 00 00 00       	jmp    1481a <identify_disk+0x127>
    }

    //等待磁盘数据就绪
    err = disk_wait_data(disk);
   14750:	83 ec 0c             	sub    $0xc,%esp
   14753:	ff 75 08             	push   0x8(%ebp)
   14756:	e8 34 fe ff ff       	call   1458f <disk_wait_data>
   1475b:	83 c4 10             	add    $0x10,%esp
   1475e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   14761:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14765:	79 1e                	jns    14785 <identify_disk+0x92>
        log_printf("disk[%s]: read failed", disk->name);
   14767:	8b 45 08             	mov    0x8(%ebp),%eax
   1476a:	83 ec 08             	sub    $0x8,%esp
   1476d:	50                   	push   %eax
   1476e:	68 68 94 01 00       	push   $0x19468
   14773:	e8 2d 40 00 00       	call   187a5 <log_printf>
   14778:	83 c4 10             	add    $0x10,%esp
        return -1;
   1477b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14780:	e9 95 00 00 00       	jmp    1481a <identify_disk+0x127>
    }

    //读取就绪的一个扇区的数据, 一共256个16位数据，其中包含了该磁盘的信息
    uint16_t buf[256];
    disk_read_data(disk, buf, sizeof(buf));
   14785:	83 ec 04             	sub    $0x4,%esp
   14788:	68 00 02 00 00       	push   $0x200
   1478d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14793:	50                   	push   %eax
   14794:	ff 75 08             	push   0x8(%ebp)
   14797:	e8 51 fd ff ff       	call   144ed <disk_read_data>
   1479c:	83 c4 10             	add    $0x10,%esp

    //第100 到 103个数据，一共64位，保存了该磁盘的扇区总数量
    disk->sector_count = *(uint32_t *)(buf + 100);
   1479f:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   147a5:	05 c8 00 00 00       	add    $0xc8,%eax
   147aa:	8b 00                	mov    (%eax),%eax
   147ac:	89 c2                	mov    %eax,%edx
   147ae:	8b 45 08             	mov    0x8(%ebp),%eax
   147b1:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;
   147b4:	8b 45 08             	mov    0x8(%ebp),%eax
   147b7:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    //初始化磁盘分区信息
    //用partinfo将整个磁盘视为一个大分区
    partinfo_t *part_info = disk->partinfo + 0;
   147be:	8b 45 08             	mov    0x8(%ebp),%eax
   147c1:	83 c0 30             	add    $0x30,%eax
   147c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part_info->disk = disk;
   147c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147ca:	8b 55 08             	mov    0x8(%ebp),%edx
   147cd:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part_info->name, "%s%d", disk->name, 0);
   147d0:	8b 55 08             	mov    0x8(%ebp),%edx
   147d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147d6:	6a 00                	push   $0x0
   147d8:	52                   	push   %edx
   147d9:	68 52 94 01 00       	push   $0x19452
   147de:	50                   	push   %eax
   147df:	e8 89 38 00 00       	call   1806d <kernel_sprintf>
   147e4:	83 c4 10             	add    $0x10,%esp
    part_info->start_sector = 0;
   147e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147ea:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part_info->total_sectors = disk->sector_count;
   147f1:	8b 45 08             	mov    0x8(%ebp),%eax
   147f4:	8b 50 2c             	mov    0x2c(%eax),%edx
   147f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147fa:	89 50 2c             	mov    %edx,0x2c(%eax)
    part_info->type = FS_INVALID;
   147fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14800:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    //读取并检测磁盘的分区表信息
    detect_part_info(disk);
   14807:	83 ec 0c             	sub    $0xc,%esp
   1480a:	ff 75 08             	push   0x8(%ebp)
   1480d:	e8 cc fd ff ff       	call   145de <detect_part_info>
   14812:	83 c4 10             	add    $0x10,%esp

    return 0;
   14815:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1481a:	c9                   	leave  
   1481b:	c3                   	ret    

0001481c <print_disk_info>:
/**
 * @brief 打印磁盘相关信息
 * 
 * @param disk 
 */
static void print_disk_info(disk_t *disk) {
   1481c:	55                   	push   %ebp
   1481d:	89 e5                	mov    %esp,%ebp
   1481f:	53                   	push   %ebx
   14820:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s\n", disk->name);
   14823:	8b 45 08             	mov    0x8(%ebp),%eax
   14826:	83 ec 08             	sub    $0x8,%esp
   14829:	50                   	push   %eax
   1482a:	68 7e 94 01 00       	push   $0x1947e
   1482f:	e8 71 3f 00 00       	call   187a5 <log_printf>
   14834:	83 c4 10             	add    $0x10,%esp
    log_printf("\tport base: %x\n", disk->port_base);
   14837:	8b 45 08             	mov    0x8(%ebp),%eax
   1483a:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1483e:	0f b7 c0             	movzwl %ax,%eax
   14841:	83 ec 08             	sub    $0x8,%esp
   14844:	50                   	push   %eax
   14845:	68 82 94 01 00       	push   $0x19482
   1484a:	e8 56 3f 00 00       	call   187a5 <log_printf>
   1484f:	83 c4 10             	add    $0x10,%esp
    log_printf("\ttotal size: %d m\n", disk->sector_count * disk->sector_size / (1024*1024));
   14852:	8b 45 08             	mov    0x8(%ebp),%eax
   14855:	8b 50 2c             	mov    0x2c(%eax),%edx
   14858:	8b 45 08             	mov    0x8(%ebp),%eax
   1485b:	8b 40 28             	mov    0x28(%eax),%eax
   1485e:	0f af c2             	imul   %edx,%eax
   14861:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   14867:	85 c0                	test   %eax,%eax
   14869:	0f 48 c2             	cmovs  %edx,%eax
   1486c:	c1 f8 14             	sar    $0x14,%eax
   1486f:	83 ec 08             	sub    $0x8,%esp
   14872:	50                   	push   %eax
   14873:	68 92 94 01 00       	push   $0x19492
   14878:	e8 28 3f 00 00       	call   187a5 <log_printf>
   1487d:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   14880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14887:	eb 4e                	jmp    148d7 <print_disk_info+0xbb>
      partinfo_t *part_info = disk->partinfo + i;
   14889:	8b 45 08             	mov    0x8(%ebp),%eax
   1488c:	8d 48 30             	lea    0x30(%eax),%ecx
   1488f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14892:	89 d0                	mov    %edx,%eax
   14894:	01 c0                	add    %eax,%eax
   14896:	01 d0                	add    %edx,%eax
   14898:	c1 e0 04             	shl    $0x4,%eax
   1489b:	01 c8                	add    %ecx,%eax
   1489d:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if (part_info->type != FS_INVALID) {
   148a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148a3:	8b 40 24             	mov    0x24(%eax),%eax
   148a6:	85 c0                	test   %eax,%eax
   148a8:	74 29                	je     148d3 <print_disk_info+0xb7>
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   148aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148ad:	8b 58 2c             	mov    0x2c(%eax),%ebx
   148b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148b3:	8b 48 28             	mov    0x28(%eax),%ecx
            part_info->name, part_info->type, part_info->start_sector, 
   148b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148b9:	8b 50 24             	mov    0x24(%eax),%edx
   148bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   148bf:	83 ec 0c             	sub    $0xc,%esp
   148c2:	53                   	push   %ebx
   148c3:	51                   	push   %ecx
   148c4:	52                   	push   %edx
   148c5:	50                   	push   %eax
   148c6:	68 a8 94 01 00       	push   $0x194a8
   148cb:	e8 d5 3e 00 00       	call   187a5 <log_printf>
   148d0:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   148d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   148d7:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   148db:	7e ac                	jle    14889 <print_disk_info+0x6d>
            part_info->total_sectors);
      }
    }
}
   148dd:	90                   	nop
   148de:	90                   	nop
   148df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   148e2:	c9                   	leave  
   148e3:	c3                   	ret    

000148e4 <disk_init>:

/**
 * @brief 初始化系统磁盘信息
 *
 */
void disk_init(void) {
   148e4:	55                   	push   %ebp
   148e5:	89 e5                	mov    %esp,%ebp
   148e7:	83 ec 18             	sub    $0x18,%esp
  log_printf("Check disk...\n");
   148ea:	83 ec 0c             	sub    $0xc,%esp
   148ed:	68 db 94 01 00       	push   $0x194db
   148f2:	e8 ae 3e 00 00       	call   187a5 <log_printf>
   148f7:	83 c4 10             	add    $0x10,%esp

  kernel_memset(disk_table, 0, sizeof(disk_table));
   148fa:	83 ec 04             	sub    $0x4,%esp
   148fd:	68 50 02 00 00       	push   $0x250
   14902:	6a 00                	push   $0x0
   14904:	68 60 f1 04 00       	push   $0x4f160
   14909:	e8 9a 36 00 00       	call   17fa8 <kernel_memset>
   1490e:	83 c4 10             	add    $0x10,%esp

  //初始化磁盘锁与操作信号量
  mutex_init(&mutex);
   14911:	83 ec 0c             	sub    $0xc,%esp
   14914:	68 b0 f3 04 00       	push   $0x4f3b0
   14919:	e8 f9 29 00 00       	call   17317 <mutex_init>
   1491e:	83 c4 10             	add    $0x10,%esp
  sem_init(&op_sem, 0);
   14921:	83 ec 08             	sub    $0x8,%esp
   14924:	6a 00                	push   $0x0
   14926:	68 c4 f3 04 00       	push   $0x4f3c4
   1492b:	e8 26 2c 00 00       	call   17556 <sem_init>
   14930:	83 c4 10             	add    $0x10,%esp

  // 遍历并初始化化primary信道上的磁盘信息
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   14933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1493a:	e9 90 00 00 00       	jmp    149cf <disk_init+0xeb>
    disk_t *disk = disk_table + i;
   1493f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14942:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14948:	05 60 f1 04 00       	add    $0x4f160,%eax
   1494d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kernel_sprintf(disk->name, "sd%c", i + 'a');
   14950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14953:	8d 50 61             	lea    0x61(%eax),%edx
   14956:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14959:	83 ec 04             	sub    $0x4,%esp
   1495c:	52                   	push   %edx
   1495d:	68 ea 94 01 00       	push   $0x194ea
   14962:	50                   	push   %eax
   14963:	e8 05 37 00 00       	call   1806d <kernel_sprintf>
   14968:	83 c4 10             	add    $0x10,%esp
    disk->drive = i == 0 ? DISK_MASTER : DISK_SLAVE;
   1496b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1496f:	75 07                	jne    14978 <disk_init+0x94>
   14971:	ba 00 00 00 00       	mov    $0x0,%edx
   14976:	eb 05                	jmp    1497d <disk_init+0x99>
   14978:	ba 10 00 00 00       	mov    $0x10,%edx
   1497d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14980:	89 50 20             	mov    %edx,0x20(%eax)
    disk->port_base = IOBASE_PRIMARY;
   14983:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14986:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
    disk->mutex = &mutex;
   1498c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1498f:	c7 80 20 01 00 00 b0 	movl   $0x4f3b0,0x120(%eax)
   14996:	f3 04 00 
    disk->op_sem = &op_sem;
   14999:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1499c:	c7 80 24 01 00 00 c4 	movl   $0x4f3c4,0x124(%eax)
   149a3:	f3 04 00 

    int err = identify_disk(disk);
   149a6:	83 ec 0c             	sub    $0xc,%esp
   149a9:	ff 75 f0             	push   -0x10(%ebp)
   149ac:	e8 42 fd ff ff       	call   146f3 <identify_disk>
   149b1:	83 c4 10             	add    $0x10,%esp
   149b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err == 0) {
   149b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   149bb:	75 0e                	jne    149cb <disk_init+0xe7>
      print_disk_info(disk);
   149bd:	83 ec 0c             	sub    $0xc,%esp
   149c0:	ff 75 f0             	push   -0x10(%ebp)
   149c3:	e8 54 fe ff ff       	call   1481c <print_disk_info>
   149c8:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   149cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   149cf:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   149d3:	0f 8e 66 ff ff ff    	jle    1493f <disk_init+0x5b>
    }
  }
}
   149d9:	90                   	nop
   149da:	90                   	nop
   149db:	c9                   	leave  
   149dc:	c3                   	ret    

000149dd <disk_open>:
 * @brief 打开磁盘设备
 * 
 * @param dev 
 * @return int 
 */
int disk_open (device_t *dev) {
   149dd:	55                   	push   %ebp
   149de:	89 e5                	mov    %esp,%ebp
   149e0:	83 ec 18             	sub    $0x18,%esp
  //对磁盘的编号为 a , b
  //对扇区的编号为0, 1, 2, 3, 4, 0分区包含整个磁盘
  //设备索引编号0xa0表示 a磁盘上的0分区

  //获取磁盘在系统磁盘表中的索引
  int disk_index = (dev->dev_index >> 4) - 0xa;   
   149e3:	8b 45 08             	mov    0x8(%ebp),%eax
   149e6:	8b 40 08             	mov    0x8(%eax),%eax
   149e9:	c1 f8 04             	sar    $0x4,%eax
   149ec:	83 e8 0a             	sub    $0xa,%eax
   149ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //获取分区的索引
  int part_index = dev->dev_index & 0xf;
   149f2:	8b 45 08             	mov    0x8(%ebp),%eax
   149f5:	8b 40 08             	mov    0x8(%eax),%eax
   149f8:	83 e0 0f             	and    $0xf,%eax
   149fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (disk_index >= DISK_CNT || part_index >= DISK_PRIMARY_PART_CNT) {
   149fe:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a02:	7f 06                	jg     14a0a <disk_open+0x2d>
   14a04:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14a08:	7e 21                	jle    14a2b <disk_open+0x4e>
      log_printf("device index error: %d\n", dev->dev_index);
   14a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   14a0d:	8b 40 08             	mov    0x8(%eax),%eax
   14a10:	83 ec 08             	sub    $0x8,%esp
   14a13:	50                   	push   %eax
   14a14:	68 ef 94 01 00       	push   $0x194ef
   14a19:	e8 87 3d 00 00       	call   187a5 <log_printf>
   14a1e:	83 c4 10             	add    $0x10,%esp
      return -1;
   14a21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a26:	e9 9e 00 00 00       	jmp    14ac9 <disk_open+0xec>
  }

  //获取磁盘对象
  disk_t *disk = disk_table + disk_index;
   14a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a2e:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14a34:	05 60 f1 04 00       	add    $0x4f160,%eax
   14a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk->sector_count == 0) {
   14a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a3f:	8b 40 2c             	mov    0x2c(%eax),%eax
   14a42:	85 c0                	test   %eax,%eax
   14a44:	75 1e                	jne    14a64 <disk_open+0x87>
    log_printf("disk not exist, device: sd%d", dev->dev_index);
   14a46:	8b 45 08             	mov    0x8(%ebp),%eax
   14a49:	8b 40 08             	mov    0x8(%eax),%eax
   14a4c:	83 ec 08             	sub    $0x8,%esp
   14a4f:	50                   	push   %eax
   14a50:	68 07 95 01 00       	push   $0x19507
   14a55:	e8 4b 3d 00 00       	call   187a5 <log_printf>
   14a5a:	83 c4 10             	add    $0x10,%esp
    return -1;
   14a5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a62:	eb 65                	jmp    14ac9 <disk_open+0xec>
  }

  //获取分区对象
  partinfo_t *part_info = disk->partinfo + part_index;
   14a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a67:	8d 48 30             	lea    0x30(%eax),%ecx
   14a6a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14a6d:	89 d0                	mov    %edx,%eax
   14a6f:	01 c0                	add    %eax,%eax
   14a71:	01 d0                	add    %edx,%eax
   14a73:	c1 e0 04             	shl    $0x4,%eax
   14a76:	01 c8                	add    %ecx,%eax
   14a78:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (part_info->total_sectors == 0) {
   14a7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14a7e:	8b 40 2c             	mov    0x2c(%eax),%eax
   14a81:	85 c0                	test   %eax,%eax
   14a83:	75 17                	jne    14a9c <disk_open+0xbf>
    log_printf("part not exist\n");
   14a85:	83 ec 0c             	sub    $0xc,%esp
   14a88:	68 24 95 01 00       	push   $0x19524
   14a8d:	e8 13 3d 00 00       	call   187a5 <log_printf>
   14a92:	83 c4 10             	add    $0x10,%esp
    return -1;
   14a95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a9a:	eb 2d                	jmp    14ac9 <disk_open+0xec>
  }

  //记录分区信息
  dev->data = (void *)part_info;
   14a9c:	8b 45 08             	mov    0x8(%ebp),%eax
   14a9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14aa2:	89 50 0c             	mov    %edx,0xc(%eax)

  //注册中断处理程序,并开启中断
  idt_install(IRQ14_HARDDISK_PRIMARY, (idt_handler_t)exception_handler_primary_disk);
   14aa5:	83 ec 08             	sub    $0x8,%esp
   14aa8:	68 b5 02 01 00       	push   $0x102b5
   14aad:	6a 2e                	push   $0x2e
   14aaf:	e8 6a e4 ff ff       	call   12f1e <idt_install>
   14ab4:	83 c4 10             	add    $0x10,%esp
  idt_enable(IRQ14_HARDDISK_PRIMARY);
   14ab7:	83 ec 0c             	sub    $0xc,%esp
   14aba:	6a 2e                	push   $0x2e
   14abc:	e8 e8 e6 ff ff       	call   131a9 <idt_enable>
   14ac1:	83 c4 10             	add    $0x10,%esp

  return 0;
   14ac4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14ac9:	c9                   	leave  
   14aca:	c3                   	ret    

00014acb <disk_read>:
 * @param addr 读取的起始扇区相对于dev指定分区的偏移量
 * @param buf 读取缓冲区
 * @param size 读取扇区数
 * @return * int 
 */
int disk_read(device_t *dev, int addr, char *buf, int size) {
   14acb:	55                   	push   %ebp
   14acc:	89 e5                	mov    %esp,%ebp
   14ace:	83 ec 18             	sub    $0x18,%esp

  //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14ad1:	8b 45 08             	mov    0x8(%ebp),%eax
   14ad4:	8b 40 0c             	mov    0xc(%eax),%eax
   14ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14ada:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ade:	75 21                	jne    14b01 <disk_read+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   14ae3:	8b 40 08             	mov    0x8(%eax),%eax
   14ae6:	83 ec 08             	sub    $0x8,%esp
   14ae9:	50                   	push   %eax
   14aea:	68 34 95 01 00       	push   $0x19534
   14aef:	e8 b1 3c 00 00       	call   187a5 <log_printf>
   14af4:	83 c4 10             	add    $0x10,%esp
    return -1;
   14af7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14afc:	e9 0c 01 00 00       	jmp    14c0d <disk_read+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14b01:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b04:	8b 40 20             	mov    0x20(%eax),%eax
   14b07:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14b0a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14b0e:	75 21                	jne    14b31 <disk_read+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14b10:	8b 45 08             	mov    0x8(%ebp),%eax
   14b13:	8b 40 08             	mov    0x8(%eax),%eax
   14b16:	83 ec 08             	sub    $0x8,%esp
   14b19:	50                   	push   %eax
   14b1a:	68 55 95 01 00       	push   $0x19555
   14b1f:	e8 81 3c 00 00       	call   187a5 <log_printf>
   14b24:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b2c:	e9 dc 00 00 00       	jmp    14c0d <disk_read+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b34:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14b3a:	83 ec 0c             	sub    $0xc,%esp
   14b3d:	50                   	push   %eax
   14b3e:	e8 21 28 00 00       	call   17364 <mutex_lock>
   14b43:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14b46:	e8 66 ce ff ff       	call   119b1 <task_current>
   14b4b:	85 c0                	test   %eax,%eax
   14b4d:	74 07                	je     14b56 <disk_read+0x8b>
    task_on_op = 1; //将标志位置1，表示内核在执行磁盘操作
   14b4f:	c6 05 d4 f3 04 00 01 	movb   $0x1,0x4f3d4
  }

  //发送读取指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_READ);
   14b56:	8b 45 14             	mov    0x14(%ebp),%eax
   14b59:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14b5c:	8b 4a 28             	mov    0x28(%edx),%ecx
   14b5f:	8b 55 0c             	mov    0xc(%ebp),%edx
   14b62:	01 ca                	add    %ecx,%edx
   14b64:	6a 24                	push   $0x24
   14b66:	50                   	push   %eax
   14b67:	52                   	push   %edx
   14b68:	ff 75 ec             	push   -0x14(%ebp)
   14b6b:	e8 4d f8 ff ff       	call   143bd <disk_send_cmd>
   14b70:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14b73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14b7a:	eb 71                	jmp    14bed <disk_read+0x122>
    //等待磁盘的中断，代表准备就绪
    sem_wait(disk->op_sem);
   14b7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b7f:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14b85:	83 ec 0c             	sub    $0xc,%esp
   14b88:	50                   	push   %eax
   14b89:	e8 0a 2a 00 00       	call   17598 <sem_wait>
   14b8e:	83 c4 10             	add    $0x10,%esp

    //因为信号量已经让进程等待了，所以此处只是检测是否发生错误
    int err = disk_wait_data(disk);
   14b91:	83 ec 0c             	sub    $0xc,%esp
   14b94:	ff 75 ec             	push   -0x14(%ebp)
   14b97:	e8 f3 f9 ff ff       	call   1458f <disk_wait_data>
   14b9c:	83 c4 10             	add    $0x10,%esp
   14b9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14ba2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14ba6:	79 20                	jns    14bc8 <disk_read+0xfd>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14bab:	ff 75 14             	push   0x14(%ebp)
   14bae:	ff 75 0c             	push   0xc(%ebp)
   14bb1:	50                   	push   %eax
   14bb2:	68 6c 95 01 00       	push   $0x1956c
   14bb7:	e8 e9 3b 00 00       	call   187a5 <log_printf>
   14bbc:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14bbf:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14bc6:	eb 2d                	jmp    14bf5 <disk_read+0x12a>
    }

    //磁盘每次读取都是按一个扇区的大小进行读取
    disk_read_data(disk, buf, disk->sector_size);
   14bc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bcb:	8b 40 28             	mov    0x28(%eax),%eax
   14bce:	83 ec 04             	sub    $0x4,%esp
   14bd1:	50                   	push   %eax
   14bd2:	ff 75 10             	push   0x10(%ebp)
   14bd5:	ff 75 ec             	push   -0x14(%ebp)
   14bd8:	e8 10 f9 ff ff       	call   144ed <disk_read_data>
   14bdd:	83 c4 10             	add    $0x10,%esp
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14be0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14be4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14be7:	8b 40 28             	mov    0x28(%eax),%eax
   14bea:	01 45 10             	add    %eax,0x10(%ebp)
   14bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bf0:	3b 45 14             	cmp    0x14(%ebp),%eax
   14bf3:	7c 87                	jl     14b7c <disk_read+0xb1>
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14bf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bf8:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14bfe:	83 ec 0c             	sub    $0xc,%esp
   14c01:	50                   	push   %eax
   14c02:	e8 03 28 00 00       	call   1740a <mutex_unlock>
   14c07:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14c0d:	c9                   	leave  
   14c0e:	c3                   	ret    

00014c0f <disk_write>:
 * @param addr 
 * @param buf 
 * @param size 
 * @return int 
 */
int disk_write(device_t *dev, int addr, char *buf, int size) {
   14c0f:	55                   	push   %ebp
   14c10:	89 e5                	mov    %esp,%ebp
   14c12:	83 ec 18             	sub    $0x18,%esp

   //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14c15:	8b 45 08             	mov    0x8(%ebp),%eax
   14c18:	8b 40 0c             	mov    0xc(%eax),%eax
   14c1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14c1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14c22:	75 21                	jne    14c45 <disk_write+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14c24:	8b 45 08             	mov    0x8(%ebp),%eax
   14c27:	8b 40 08             	mov    0x8(%eax),%eax
   14c2a:	83 ec 08             	sub    $0x8,%esp
   14c2d:	50                   	push   %eax
   14c2e:	68 34 95 01 00       	push   $0x19534
   14c33:	e8 6d 3b 00 00       	call   187a5 <log_printf>
   14c38:	83 c4 10             	add    $0x10,%esp
    return -1;
   14c3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14c40:	e9 0c 01 00 00       	jmp    14d51 <disk_write+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14c45:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14c48:	8b 40 20             	mov    0x20(%eax),%eax
   14c4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14c4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14c52:	75 21                	jne    14c75 <disk_write+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14c54:	8b 45 08             	mov    0x8(%ebp),%eax
   14c57:	8b 40 08             	mov    0x8(%eax),%eax
   14c5a:	83 ec 08             	sub    $0x8,%esp
   14c5d:	50                   	push   %eax
   14c5e:	68 55 95 01 00       	push   $0x19555
   14c63:	e8 3d 3b 00 00       	call   187a5 <log_printf>
   14c68:	83 c4 10             	add    $0x10,%esp
    return -1;
   14c6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14c70:	e9 dc 00 00 00       	jmp    14d51 <disk_write+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14c75:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c78:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14c7e:	83 ec 0c             	sub    $0xc,%esp
   14c81:	50                   	push   %eax
   14c82:	e8 dd 26 00 00       	call   17364 <mutex_lock>
   14c87:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14c8a:	e8 22 cd ff ff       	call   119b1 <task_current>
   14c8f:	85 c0                	test   %eax,%eax
   14c91:	74 07                	je     14c9a <disk_write+0x8b>
    task_on_op = 1; //将标志位置1，表示用户进程在执行磁盘操作
   14c93:	c6 05 d4 f3 04 00 01 	movb   $0x1,0x4f3d4
  }

  //发送读取指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_WRITE);
   14c9a:	8b 45 14             	mov    0x14(%ebp),%eax
   14c9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14ca0:	8b 4a 28             	mov    0x28(%edx),%ecx
   14ca3:	8b 55 0c             	mov    0xc(%ebp),%edx
   14ca6:	01 ca                	add    %ecx,%edx
   14ca8:	6a 34                	push   $0x34
   14caa:	50                   	push   %eax
   14cab:	52                   	push   %edx
   14cac:	ff 75 ec             	push   -0x14(%ebp)
   14caf:	e8 09 f7 ff ff       	call   143bd <disk_send_cmd>
   14cb4:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14cb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14cbe:	eb 71                	jmp    14d31 <disk_write+0x122>
    //磁盘每次写入都是按一个扇区的大小进行写入
    disk_write_data(disk, buf, disk->sector_size);
   14cc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14cc3:	8b 40 28             	mov    0x28(%eax),%eax
   14cc6:	83 ec 04             	sub    $0x4,%esp
   14cc9:	50                   	push   %eax
   14cca:	ff 75 10             	push   0x10(%ebp)
   14ccd:	ff 75 ec             	push   -0x14(%ebp)
   14cd0:	e8 69 f8 ff ff       	call   1453e <disk_write_data>
   14cd5:	83 c4 10             	add    $0x10,%esp
    //等待磁盘的中断，代表写入完成
    sem_wait(disk->op_sem);
   14cd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14cdb:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14ce1:	83 ec 0c             	sub    $0xc,%esp
   14ce4:	50                   	push   %eax
   14ce5:	e8 ae 28 00 00       	call   17598 <sem_wait>
   14cea:	83 c4 10             	add    $0x10,%esp
    

    //检测是否发生错误
    int err = disk_wait_data(disk);
   14ced:	83 ec 0c             	sub    $0xc,%esp
   14cf0:	ff 75 ec             	push   -0x14(%ebp)
   14cf3:	e8 97 f8 ff ff       	call   1458f <disk_wait_data>
   14cf8:	83 c4 10             	add    $0x10,%esp
   14cfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14cfe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14d02:	79 20                	jns    14d24 <disk_write+0x115>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14d07:	ff 75 14             	push   0x14(%ebp)
   14d0a:	ff 75 0c             	push   0xc(%ebp)
   14d0d:	50                   	push   %eax
   14d0e:	68 6c 95 01 00       	push   $0x1956c
   14d13:	e8 8d 3a 00 00       	call   187a5 <log_printf>
   14d18:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14d1b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14d22:	eb 15                	jmp    14d39 <disk_write+0x12a>
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14d24:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14d28:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d2b:	8b 40 28             	mov    0x28(%eax),%eax
   14d2e:	01 45 10             	add    %eax,0x10(%ebp)
   14d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14d34:	3b 45 14             	cmp    0x14(%ebp),%eax
   14d37:	7c 87                	jl     14cc0 <disk_write+0xb1>
    } 
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14d39:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d3c:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14d42:	83 ec 0c             	sub    $0xc,%esp
   14d45:	50                   	push   %eax
   14d46:	e8 bf 26 00 00       	call   1740a <mutex_unlock>
   14d4b:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14d51:	c9                   	leave  
   14d52:	c3                   	ret    

00014d53 <disk_control>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int disk_control(device_t *dev, int cmd, int arg0, int arg1) {
   14d53:	55                   	push   %ebp
   14d54:	89 e5                	mov    %esp,%ebp

  return -1;
   14d56:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14d5b:	5d                   	pop    %ebp
   14d5c:	c3                   	ret    

00014d5d <do_handler_primary_disk>:
 * @brief 磁盘的中断处理函数
 *        磁盘执行完读操作或写操作后会触发中断
 * 
 * @param frame 
 */
void do_handler_primary_disk(exception_frame_t *frame) {
   14d5d:	55                   	push   %ebp
   14d5e:	89 e5                	mov    %esp,%ebp
   14d60:	83 ec 08             	sub    $0x8,%esp
  //中断抢占成功，发送eoi信号，清除中断请求
  pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14d63:	83 ec 0c             	sub    $0xc,%esp
   14d66:	6a 2e                	push   $0x2e
   14d68:	e8 7e e5 ff ff       	call   132eb <pic_send_eoi>
   14d6d:	83 c4 10             	add    $0x10,%esp

  //当用户程序触发磁盘中断时，唤醒等待进程
  if (task_on_op) {
   14d70:	0f b6 05 d4 f3 04 00 	movzbl 0x4f3d4,%eax
   14d77:	84 c0                	test   %al,%al
   14d79:	74 10                	je     14d8b <do_handler_primary_disk+0x2e>
    //磁盘数据准备就绪或磁盘写入完成，唤醒等待进程
    sem_notify(&op_sem);
   14d7b:	83 ec 0c             	sub    $0xc,%esp
   14d7e:	68 c4 f3 04 00       	push   $0x4f3c4
   14d83:	e8 90 28 00 00       	call   17618 <sem_notify>
   14d88:	83 c4 10             	add    $0x10,%esp
  }
}
   14d8b:	90                   	nop
   14d8c:	c9                   	leave  
   14d8d:	c3                   	ret    

00014d8e <disk_close>:
/**
 * @brief 关闭磁盘
 * 
 * @param dev 
 */
void disk_close(device_t *dev) {
   14d8e:	55                   	push   %ebp
   14d8f:	89 e5                	mov    %esp,%ebp

}
   14d91:	90                   	nop
   14d92:	5d                   	pop    %ebp
   14d93:	c3                   	ret    

00014d94 <inb>:
static inline uint8_t inb(uint16_t port) {
   14d94:	55                   	push   %ebp
   14d95:	89 e5                	mov    %esp,%ebp
   14d97:	83 ec 14             	sub    $0x14,%esp
   14d9a:	8b 45 08             	mov    0x8(%ebp),%eax
   14d9d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14da1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14da5:	89 c2                	mov    %eax,%edx
   14da7:	ec                   	in     (%dx),%al
   14da8:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14dab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14daf:	c9                   	leave  
   14db0:	c3                   	ret    

00014db1 <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   14db1:	55                   	push   %ebp
   14db2:	89 e5                	mov    %esp,%ebp
   14db4:	83 ec 04             	sub    $0x4,%esp
   14db7:	8b 45 08             	mov    0x8(%ebp),%eax
   14dba:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14dbd:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14dc1:	f7 d0                	not    %eax
   14dc3:	c0 e8 07             	shr    $0x7,%al
   14dc6:	0f b6 c0             	movzbl %al,%eax
}
   14dc9:	c9                   	leave  
   14dca:	c3                   	ret    

00014dcb <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   14dcb:	55                   	push   %ebp
   14dcc:	89 e5                	mov    %esp,%ebp
   14dce:	83 ec 04             	sub    $0x4,%esp
   14dd1:	8b 45 08             	mov    0x8(%ebp),%eax
   14dd4:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   14dd7:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14ddb:	83 e0 7f             	and    $0x7f,%eax
}
   14dde:	c9                   	leave  
   14ddf:	c3                   	ret    

00014de0 <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   14de0:	55                   	push   %ebp
   14de1:	89 e5                	mov    %esp,%ebp
   14de3:	83 ec 28             	sub    $0x28,%esp
   14de6:	8b 45 08             	mov    0x8(%ebp),%eax
   14de9:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14dec:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14df0:	83 e8 3b             	sub    $0x3b,%eax
   14df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14df6:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14dfd:	83 e0 20             	and    $0x20,%eax
   14e00:	84 c0                	test   %al,%al
   14e02:	75 0e                	jne    14e12 <do_fx_key+0x32>
   14e04:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14e0b:	83 e0 40             	and    $0x40,%eax
   14e0e:	84 c0                	test   %al,%al
   14e10:	74 0e                	je     14e20 <do_fx_key+0x40>
        tty_select(index);
   14e12:	83 ec 0c             	sub    $0xc,%esp
   14e15:	ff 75 f4             	push   -0xc(%ebp)
   14e18:	e8 65 09 00 00       	call   15782 <tty_select>
   14e1d:	83 c4 10             	add    $0x10,%esp
    }
}
   14e20:	90                   	nop
   14e21:	c9                   	leave  
   14e22:	c3                   	ret    

00014e23 <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   14e23:	55                   	push   %ebp
   14e24:	89 e5                	mov    %esp,%ebp
   14e26:	83 ec 28             	sub    $0x28,%esp
   14e29:	8b 45 08             	mov    0x8(%ebp),%eax
   14e2c:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   14e2f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14e33:	50                   	push   %eax
   14e34:	e8 92 ff ff ff       	call   14dcb <get_key>
   14e39:	83 c4 04             	add    $0x4,%esp
   14e3c:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   14e3f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14e43:	50                   	push   %eax
   14e44:	e8 68 ff ff ff       	call   14db1 <is_make_code>
   14e49:	83 c4 04             	add    $0x4,%esp
   14e4c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   14e4f:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14e53:	83 e8 1d             	sub    $0x1d,%eax
   14e56:	83 f8 3b             	cmp    $0x3b,%eax
   14e59:	0f 87 06 01 00 00    	ja     14f65 <do_normal_key+0x142>
   14e5f:	8b 04 85 a0 97 01 00 	mov    0x197a0(,%eax,4),%eax
   14e66:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   14e68:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14e6c:	0f 95 c0             	setne  %al
   14e6f:	c1 e0 07             	shl    $0x7,%eax
   14e72:	c0 f8 07             	sar    $0x7,%al
   14e75:	83 e0 01             	and    $0x1,%eax
   14e78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14e7f:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14e86:	83 e0 fb             	and    $0xfffffffb,%eax
   14e89:	09 d0                	or     %edx,%eax
   14e8b:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;
   14e90:	e9 6b 01 00 00       	jmp    15000 <do_normal_key+0x1dd>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14e95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14e99:	0f 95 c0             	setne  %al
   14e9c:	c1 e0 07             	shl    $0x7,%eax
   14e9f:	c0 f8 07             	sar    $0x7,%al
   14ea2:	83 e0 01             	and    $0x1,%eax
   14ea5:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14ea8:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14eaf:	83 e0 fd             	and    $0xfffffffd,%eax
   14eb2:	09 d0                	or     %edx,%eax
   14eb4:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;  
   14eb9:	e9 42 01 00 00       	jmp    15000 <do_normal_key+0x1dd>
        case KEY_CAPS:
            if (is_make) {
   14ebe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ec2:	0f 84 34 01 00 00    	je     14ffc <do_normal_key+0x1d9>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   14ec8:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14ecf:	c1 e0 07             	shl    $0x7,%eax
   14ed2:	c0 f8 07             	sar    $0x7,%al
   14ed5:	f7 d0                	not    %eax
   14ed7:	c1 e0 07             	shl    $0x7,%eax
   14eda:	c0 f8 07             	sar    $0x7,%al
   14edd:	83 e0 01             	and    $0x1,%eax
   14ee0:	89 c2                	mov    %eax,%edx
   14ee2:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14ee9:	83 e0 fe             	and    $0xfffffffe,%eax
   14eec:	09 d0                	or     %edx,%eax
   14eee:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            }
            break;
   14ef3:	e9 04 01 00 00       	jmp    14ffc <do_normal_key+0x1d9>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   14ef8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14efc:	0f 95 c0             	setne  %al
   14eff:	c1 e0 07             	shl    $0x7,%eax
   14f02:	c0 f8 07             	sar    $0x7,%al
   14f05:	83 e0 01             	and    $0x1,%eax
   14f08:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14f0f:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f16:	83 e0 f7             	and    $0xfffffff7,%eax
   14f19:	09 d0                	or     %edx,%eax
   14f1b:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;
   14f20:	e9 db 00 00 00       	jmp    15000 <do_normal_key+0x1dd>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   14f25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f29:	0f 95 c0             	setne  %al
   14f2c:	c1 e0 07             	shl    $0x7,%eax
   14f2f:	c0 f8 07             	sar    $0x7,%al
   14f32:	83 e0 01             	and    $0x1,%eax
   14f35:	c1 e0 05             	shl    $0x5,%eax
   14f38:	89 c2                	mov    %eax,%edx
   14f3a:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f41:	83 e0 df             	and    $0xffffffdf,%eax
   14f44:	09 d0                	or     %edx,%eax
   14f46:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
            break;
   14f4b:	e9 b0 00 00 00       	jmp    15000 <do_normal_key+0x1dd>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   14f50:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f54:	83 ec 0c             	sub    $0xc,%esp
   14f57:	50                   	push   %eax
   14f58:	e8 83 fe ff ff       	call   14de0 <do_fx_key>
   14f5d:	83 c4 10             	add    $0x10,%esp
            break;
   14f60:	e9 9b 00 00 00       	jmp    15000 <do_normal_key+0x1dd>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   14f65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f69:	0f 84 90 00 00 00    	je     14fff <do_normal_key+0x1dc>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14f6f:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f76:	83 e0 04             	and    $0x4,%eax
   14f79:	84 c0                	test   %al,%al
   14f7b:	75 0e                	jne    14f8b <do_normal_key+0x168>
   14f7d:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14f84:	83 e0 02             	and    $0x2,%eax
   14f87:	84 c0                	test   %al,%al
   14f89:	74 11                	je     14f9c <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   14f8b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f8f:	0f b6 84 00 a1 95 01 	movzbl 0x195a1(%eax,%eax,1),%eax
   14f96:	00 
   14f97:	88 45 f7             	mov    %al,-0x9(%ebp)
   14f9a:	eb 0f                	jmp    14fab <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   14f9c:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14fa0:	0f b6 84 00 a0 95 01 	movzbl 0x195a0(%eax,%eax,1),%eax
   14fa7:	00 
   14fa8:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   14fab:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   14fb2:	83 e0 01             	and    $0x1,%eax
   14fb5:	84 c0                	test   %al,%al
   14fb7:	74 2e                	je     14fe7 <do_normal_key+0x1c4>
                        if ((key >= 'A' && key <= 'Z')) {
   14fb9:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14fbd:	7e 12                	jle    14fd1 <do_normal_key+0x1ae>
   14fbf:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14fc3:	7f 0c                	jg     14fd1 <do_normal_key+0x1ae>
                            key = key - 'A' + 'a';
   14fc5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14fc9:	83 c0 20             	add    $0x20,%eax
   14fcc:	88 45 f7             	mov    %al,-0x9(%ebp)
   14fcf:	eb 16                	jmp    14fe7 <do_normal_key+0x1c4>
                        } else if (key >= 'a' && key <= 'z') {
   14fd1:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14fd5:	7e 10                	jle    14fe7 <do_normal_key+0x1c4>
   14fd7:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14fdb:	7f 0a                	jg     14fe7 <do_normal_key+0x1c4>
                            key = key -'a' + 'A';
   14fdd:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14fe1:	83 e8 20             	sub    $0x20,%eax
   14fe4:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                // log_printf("key: %c\n", key);
                // log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
                //将读取的键值放入tty设备的输入缓冲区
                tty_in(key);
   14fe7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14feb:	83 ec 0c             	sub    $0xc,%esp
   14fee:	50                   	push   %eax
   14fef:	e8 28 07 00 00       	call   1571c <tty_in>
   14ff4:	83 c4 10             	add    $0x10,%esp
            }
            break;
   14ff7:	eb 06                	jmp    14fff <do_normal_key+0x1dc>
            break;
   14ff9:	90                   	nop
   14ffa:	eb 04                	jmp    15000 <do_normal_key+0x1dd>
            break;
   14ffc:	90                   	nop
   14ffd:	eb 01                	jmp    15000 <do_normal_key+0x1dd>
            break;
   14fff:	90                   	nop
    }
}
   15000:	90                   	nop
   15001:	c9                   	leave  
   15002:	c3                   	ret    

00015003 <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   15003:	55                   	push   %ebp
   15004:	89 e5                	mov    %esp,%ebp
   15006:	83 ec 14             	sub    $0x14,%esp
   15009:	8b 45 08             	mov    0x8(%ebp),%eax
   1500c:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   1500f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   15013:	50                   	push   %eax
   15014:	e8 b2 fd ff ff       	call   14dcb <get_key>
   15019:	83 c4 04             	add    $0x4,%esp
   1501c:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   1501f:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   15023:	50                   	push   %eax
   15024:	e8 88 fd ff ff       	call   14db1 <is_make_code>
   15029:	83 c4 04             	add    $0x4,%esp
   1502c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   1502f:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   15033:	83 f8 1d             	cmp    $0x1d,%eax
   15036:	74 07                	je     1503f <do_e0_key+0x3c>
   15038:	83 f8 38             	cmp    $0x38,%eax
   1503b:	74 2a                	je     15067 <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   1503d:	eb 4f                	jmp    1508e <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   1503f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   15043:	0f 95 c0             	setne  %al
   15046:	c1 e0 07             	shl    $0x7,%eax
   15049:	c0 f8 07             	sar    $0x7,%al
   1504c:	83 e0 01             	and    $0x1,%eax
   1504f:	c1 e0 06             	shl    $0x6,%eax
   15052:	89 c2                	mov    %eax,%edx
   15054:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   1505b:	83 e0 bf             	and    $0xffffffbf,%eax
   1505e:	09 d0                	or     %edx,%eax
   15060:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
        break;
   15065:	eb 27                	jmp    1508e <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   15067:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   1506b:	0f 95 c0             	setne  %al
   1506e:	c1 e0 07             	shl    $0x7,%eax
   15071:	c0 f8 07             	sar    $0x7,%al
   15074:	83 e0 01             	and    $0x1,%eax
   15077:	c1 e0 04             	shl    $0x4,%eax
   1507a:	89 c2                	mov    %eax,%edx
   1507c:	0f b6 05 d8 f3 04 00 	movzbl 0x4f3d8,%eax
   15083:	83 e0 ef             	and    $0xffffffef,%eax
   15086:	09 d0                	or     %edx,%eax
   15088:	a2 d8 f3 04 00       	mov    %al,0x4f3d8
        break;
   1508d:	90                   	nop
    }
}
   1508e:	90                   	nop
   1508f:	c9                   	leave  
   15090:	c3                   	ret    

00015091 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   15091:	55                   	push   %ebp
   15092:	89 e5                	mov    %esp,%ebp
   15094:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   15097:	0f b6 05 dc f3 04 00 	movzbl 0x4f3dc,%eax
   1509e:	84 c0                	test   %al,%al
   150a0:	75 3a                	jne    150dc <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   150a2:	83 ec 08             	sub    $0x8,%esp
   150a5:	68 98 02 01 00       	push   $0x10298
   150aa:	6a 21                	push   $0x21
   150ac:	e8 6d de ff ff       	call   12f1e <idt_install>
   150b1:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   150b4:	83 ec 0c             	sub    $0xc,%esp
   150b7:	6a 21                	push   $0x21
   150b9:	e8 eb e0 ff ff       	call   131a9 <idt_enable>
   150be:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   150c1:	83 ec 04             	sub    $0x4,%esp
   150c4:	6a 04                	push   $0x4
   150c6:	6a 00                	push   $0x0
   150c8:	68 d8 f3 04 00       	push   $0x4f3d8
   150cd:	e8 d6 2e 00 00       	call   17fa8 <kernel_memset>
   150d2:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   150d5:	c6 05 dc f3 04 00 01 	movb   $0x1,0x4f3dc
    }
}
   150dc:	90                   	nop
   150dd:	c9                   	leave  
   150de:	c3                   	ret    

000150df <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   150df:	55                   	push   %ebp
   150e0:	89 e5                	mov    %esp,%ebp
   150e2:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   150e5:	6a 64                	push   $0x64
   150e7:	e8 a8 fc ff ff       	call   14d94 <inb>
   150ec:	83 c4 04             	add    $0x4,%esp
   150ef:	0f b6 c0             	movzbl %al,%eax
   150f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   150f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   150f8:	83 e0 01             	and    $0x1,%eax
   150fb:	85 c0                	test   %eax,%eax
   150fd:	75 12                	jne    15111 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   150ff:	83 ec 0c             	sub    $0xc,%esp
   15102:	6a 21                	push   $0x21
   15104:	e8 e2 e1 ff ff       	call   132eb <pic_send_eoi>
   15109:	83 c4 10             	add    $0x10,%esp
        return;
   1510c:	e9 96 00 00 00       	jmp    151a7 <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   15111:	83 ec 0c             	sub    $0xc,%esp
   15114:	6a 60                	push   $0x60
   15116:	e8 79 fc ff ff       	call   14d94 <inb>
   1511b:	83 c4 10             	add    $0x10,%esp
   1511e:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   15121:	83 ec 0c             	sub    $0xc,%esp
   15124:	6a 21                	push   $0x21
   15126:	e8 c0 e1 ff ff       	call   132eb <pic_send_eoi>
   1512b:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   1512e:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   15132:	75 0c                	jne    15140 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   15134:	c7 05 e0 f3 04 00 01 	movl   $0x1,0x4f3e0
   1513b:	00 00 00 
   1513e:	eb 67                	jmp    151a7 <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   15140:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   15144:	75 0c                	jne    15152 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   15146:	c7 05 e0 f3 04 00 02 	movl   $0x2,0x4f3e0
   1514d:	00 00 00 
   15150:	eb 55                	jmp    151a7 <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   15152:	a1 e0 f3 04 00       	mov    0x4f3e0,%eax
   15157:	83 f8 02             	cmp    $0x2,%eax
   1515a:	74 3e                	je     1519a <do_handler_kbd+0xbb>
   1515c:	83 f8 02             	cmp    $0x2,%eax
   1515f:	77 45                	ja     151a6 <do_handler_kbd+0xc7>
   15161:	85 c0                	test   %eax,%eax
   15163:	74 07                	je     1516c <do_handler_kbd+0x8d>
   15165:	83 f8 01             	cmp    $0x1,%eax
   15168:	74 14                	je     1517e <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   1516a:	eb 3a                	jmp    151a6 <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   1516c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15170:	83 ec 0c             	sub    $0xc,%esp
   15173:	50                   	push   %eax
   15174:	e8 aa fc ff ff       	call   14e23 <do_normal_key>
   15179:	83 c4 10             	add    $0x10,%esp
                break;
   1517c:	eb 29                	jmp    151a7 <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   1517e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15182:	83 ec 0c             	sub    $0xc,%esp
   15185:	50                   	push   %eax
   15186:	e8 78 fe ff ff       	call   15003 <do_e0_key>
   1518b:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   1518e:	c7 05 e0 f3 04 00 00 	movl   $0x0,0x4f3e0
   15195:	00 00 00 
                break;
   15198:	eb 0d                	jmp    151a7 <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   1519a:	c7 05 e0 f3 04 00 00 	movl   $0x0,0x4f3e0
   151a1:	00 00 00 
                break;
   151a4:	eb 01                	jmp    151a7 <do_handler_kbd+0xc8>
                break;
   151a6:	90                   	nop
        }
    }

   151a7:	c9                   	leave  
   151a8:	c3                   	ret    

000151a9 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   151a9:	55                   	push   %ebp
   151aa:	89 e5                	mov    %esp,%ebp
   151ac:	83 ec 08             	sub    $0x8,%esp
   151af:	8b 45 08             	mov    0x8(%ebp),%eax
   151b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   151b5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   151b9:	89 d0                	mov    %edx,%eax
   151bb:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   151be:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   151c2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   151c6:	ee                   	out    %al,(%dx)
}
   151c7:	90                   	nop
   151c8:	c9                   	leave  
   151c9:	c3                   	ret    

000151ca <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   151ca:	55                   	push   %ebp
   151cb:	89 e5                	mov    %esp,%ebp
   151cd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   151d0:	a1 e4 f3 04 00       	mov    0x4f3e4,%eax
   151d5:	83 c0 01             	add    $0x1,%eax
   151d8:	a3 e4 f3 04 00       	mov    %eax,0x4f3e4

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   151dd:	83 ec 0c             	sub    $0xc,%esp
   151e0:	6a 20                	push   $0x20
   151e2:	e8 04 e1 ff ff       	call   132eb <pic_send_eoi>
   151e7:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   151ea:	e8 34 c8 ff ff       	call   11a23 <task_slice_end>
}
   151ef:	90                   	nop
   151f0:	c9                   	leave  
   151f1:	c3                   	ret    

000151f2 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   151f2:	55                   	push   %ebp
   151f3:	89 e5                	mov    %esp,%ebp
   151f5:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   151f8:	6a 36                	push   $0x36
   151fa:	6a 43                	push   $0x43
   151fc:	e8 a8 ff ff ff       	call   151a9 <outb>
   15201:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   15204:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1520a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1520e:	0f b6 c0             	movzbl %al,%eax
   15211:	50                   	push   %eax
   15212:	6a 40                	push   $0x40
   15214:	e8 90 ff ff ff       	call   151a9 <outb>
   15219:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1521c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15220:	66 c1 e8 08          	shr    $0x8,%ax
   15224:	0f b6 c0             	movzbl %al,%eax
   15227:	50                   	push   %eax
   15228:	6a 40                	push   $0x40
   1522a:	e8 7a ff ff ff       	call   151a9 <outb>
   1522f:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   15232:	83 ec 08             	sub    $0x8,%esp
   15235:	68 7b 02 01 00       	push   $0x1027b
   1523a:	6a 20                	push   $0x20
   1523c:	e8 dd dc ff ff       	call   12f1e <idt_install>
   15241:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   15244:	83 ec 0c             	sub    $0xc,%esp
   15247:	6a 20                	push   $0x20
   15249:	e8 5b df ff ff       	call   131a9 <idt_enable>
   1524e:	83 c4 10             	add    $0x10,%esp

}
   15251:	90                   	nop
   15252:	c9                   	leave  
   15253:	c3                   	ret    

00015254 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   15254:	55                   	push   %ebp
   15255:	89 e5                	mov    %esp,%ebp
   15257:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1525a:	c7 05 e4 f3 04 00 00 	movl   $0x0,0x4f3e4
   15261:	00 00 00 
    init_pit();
   15264:	e8 89 ff ff ff       	call   151f2 <init_pit>
   15269:	90                   	nop
   1526a:	c9                   	leave  
   1526b:	c3                   	ret    

0001526c <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   1526c:	55                   	push   %ebp
   1526d:	89 e5                	mov    %esp,%ebp
   1526f:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   15272:	8b 45 08             	mov    0x8(%ebp),%eax
   15275:	8b 40 08             	mov    0x8(%eax),%eax
   15278:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   1527b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1527f:	78 10                	js     15291 <get_tty+0x25>
   15281:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   15285:	7f 0a                	jg     15291 <get_tty+0x25>
   15287:	8b 45 08             	mov    0x8(%ebp),%eax
   1528a:	8b 40 10             	mov    0x10(%eax),%eax
   1528d:	85 c0                	test   %eax,%eax
   1528f:	75 1a                	jne    152ab <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   15291:	83 ec 08             	sub    $0x8,%esp
   15294:	ff 75 f4             	push   -0xc(%ebp)
   15297:	68 90 98 01 00       	push   $0x19890
   1529c:	e8 04 35 00 00       	call   187a5 <log_printf>
   152a1:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   152a4:	b8 00 00 00 00       	mov    $0x0,%eax
   152a9:	eb 0e                	jmp    152b9 <get_tty+0x4d>
    }

    return tty_table + tty_index;
   152ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   152ae:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   152b4:	05 00 f4 04 00       	add    $0x4f400,%eax
}
   152b9:	c9                   	leave  
   152ba:	c3                   	ret    

000152bb <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   152bb:	55                   	push   %ebp
   152bc:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   152be:	8b 45 08             	mov    0x8(%ebp),%eax
   152c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   152c4:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   152c6:	8b 45 08             	mov    0x8(%ebp),%eax
   152c9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   152d0:	8b 45 08             	mov    0x8(%ebp),%eax
   152d3:	8b 55 10             	mov    0x10(%ebp),%edx
   152d6:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   152d9:	8b 45 08             	mov    0x8(%ebp),%eax
   152dc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   152e3:	8b 45 08             	mov    0x8(%ebp),%eax
   152e6:	8b 50 0c             	mov    0xc(%eax),%edx
   152e9:	8b 45 08             	mov    0x8(%ebp),%eax
   152ec:	89 50 08             	mov    %edx,0x8(%eax)
}
   152ef:	90                   	nop
   152f0:	5d                   	pop    %ebp
   152f1:	c3                   	ret    

000152f2 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   152f2:	55                   	push   %ebp
   152f3:	89 e5                	mov    %esp,%ebp
   152f5:	53                   	push   %ebx
   152f6:	83 ec 24             	sub    $0x24,%esp
   152f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   152fc:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   152ff:	e8 20 e0 ff ff       	call   13324 <idt_enter_protection>
   15304:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   15307:	8b 45 08             	mov    0x8(%ebp),%eax
   1530a:	8b 50 10             	mov    0x10(%eax),%edx
   1530d:	8b 45 08             	mov    0x8(%ebp),%eax
   15310:	8b 40 04             	mov    0x4(%eax),%eax
   15313:	39 c2                	cmp    %eax,%edx
   15315:	7c 15                	jl     1532c <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   15317:	83 ec 0c             	sub    $0xc,%esp
   1531a:	ff 75 f4             	push   -0xc(%ebp)
   1531d:	e8 1a e0 ff ff       	call   1333c <idt_leave_protection>
   15322:	83 c4 10             	add    $0x10,%esp
        return -1;
   15325:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1532a:	eb 59                	jmp    15385 <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   1532c:	8b 45 08             	mov    0x8(%ebp),%eax
   1532f:	8b 18                	mov    (%eax),%ebx
   15331:	8b 45 08             	mov    0x8(%ebp),%eax
   15334:	8b 40 0c             	mov    0xc(%eax),%eax
   15337:	8d 48 01             	lea    0x1(%eax),%ecx
   1533a:	8b 55 08             	mov    0x8(%ebp),%edx
   1533d:	89 4a 0c             	mov    %ecx,0xc(%edx)
   15340:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   15343:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   15347:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   15349:	8b 45 08             	mov    0x8(%ebp),%eax
   1534c:	8b 50 0c             	mov    0xc(%eax),%edx
   1534f:	8b 45 08             	mov    0x8(%ebp),%eax
   15352:	8b 40 04             	mov    0x4(%eax),%eax
   15355:	39 c2                	cmp    %eax,%edx
   15357:	7c 0a                	jl     15363 <tty_fifo_put+0x71>
        fifo->write = 0;
   15359:	8b 45 08             	mov    0x8(%ebp),%eax
   1535c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   15363:	8b 45 08             	mov    0x8(%ebp),%eax
   15366:	8b 40 10             	mov    0x10(%eax),%eax
   15369:	8d 50 01             	lea    0x1(%eax),%edx
   1536c:	8b 45 08             	mov    0x8(%ebp),%eax
   1536f:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   15372:	83 ec 0c             	sub    $0xc,%esp
   15375:	ff 75 f4             	push   -0xc(%ebp)
   15378:	e8 bf df ff ff       	call   1333c <idt_leave_protection>
   1537d:	83 c4 10             	add    $0x10,%esp
    return 0;
   15380:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15385:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15388:	c9                   	leave  
   15389:	c3                   	ret    

0001538a <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   1538a:	55                   	push   %ebp
   1538b:	89 e5                	mov    %esp,%ebp
   1538d:	53                   	push   %ebx
   1538e:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   15391:	e8 8e df ff ff       	call   13324 <idt_enter_protection>
   15396:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   15399:	8b 45 08             	mov    0x8(%ebp),%eax
   1539c:	8b 40 10             	mov    0x10(%eax),%eax
   1539f:	85 c0                	test   %eax,%eax
   153a1:	7f 15                	jg     153b8 <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   153a3:	83 ec 0c             	sub    $0xc,%esp
   153a6:	ff 75 f4             	push   -0xc(%ebp)
   153a9:	e8 8e df ff ff       	call   1333c <idt_leave_protection>
   153ae:	83 c4 10             	add    $0x10,%esp
        return -1;
   153b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   153b6:	eb 5a                	jmp    15412 <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   153b8:	8b 45 08             	mov    0x8(%ebp),%eax
   153bb:	8b 18                	mov    (%eax),%ebx
   153bd:	8b 45 08             	mov    0x8(%ebp),%eax
   153c0:	8b 40 08             	mov    0x8(%eax),%eax
   153c3:	8d 48 01             	lea    0x1(%eax),%ecx
   153c6:	8b 55 08             	mov    0x8(%ebp),%edx
   153c9:	89 4a 08             	mov    %ecx,0x8(%edx)
   153cc:	01 d8                	add    %ebx,%eax
   153ce:	0f b6 10             	movzbl (%eax),%edx
   153d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   153d4:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   153d6:	8b 45 08             	mov    0x8(%ebp),%eax
   153d9:	8b 50 08             	mov    0x8(%eax),%edx
   153dc:	8b 45 08             	mov    0x8(%ebp),%eax
   153df:	8b 40 04             	mov    0x4(%eax),%eax
   153e2:	39 c2                	cmp    %eax,%edx
   153e4:	7c 0a                	jl     153f0 <tty_fifo_get+0x66>
        fifo->read = 0;
   153e6:	8b 45 08             	mov    0x8(%ebp),%eax
   153e9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   153f0:	8b 45 08             	mov    0x8(%ebp),%eax
   153f3:	8b 40 10             	mov    0x10(%eax),%eax
   153f6:	8d 50 ff             	lea    -0x1(%eax),%edx
   153f9:	8b 45 08             	mov    0x8(%ebp),%eax
   153fc:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   153ff:	83 ec 0c             	sub    $0xc,%esp
   15402:	ff 75 f4             	push   -0xc(%ebp)
   15405:	e8 32 df ff ff       	call   1333c <idt_leave_protection>
   1540a:	83 c4 10             	add    $0x10,%esp
    return 0;
   1540d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15412:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15415:	c9                   	leave  
   15416:	c3                   	ret    

00015417 <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   15417:	55                   	push   %ebp
   15418:	89 e5                	mov    %esp,%ebp
   1541a:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   1541d:	8b 45 08             	mov    0x8(%ebp),%eax
   15420:	8b 40 08             	mov    0x8(%eax),%eax
   15423:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   15426:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1542a:	78 06                	js     15432 <tty_open+0x1b>
   1542c:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   15430:	7e 1d                	jle    1544f <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   15432:	83 ec 08             	sub    $0x8,%esp
   15435:	ff 75 f4             	push   -0xc(%ebp)
   15438:	68 b0 98 01 00       	push   $0x198b0
   1543d:	e8 63 33 00 00       	call   187a5 <log_printf>
   15442:	83 c4 10             	add    $0x10,%esp
        return -1;
   15445:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1544a:	e9 af 00 00 00       	jmp    154fe <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   1544f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15452:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15458:	05 00 f4 04 00       	add    $0x4f400,%eax
   1545d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   15460:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15463:	8d 50 54             	lea    0x54(%eax),%edx
   15466:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15469:	83 c0 0c             	add    $0xc,%eax
   1546c:	83 ec 04             	sub    $0x4,%esp
   1546f:	68 00 02 00 00       	push   $0x200
   15474:	52                   	push   %edx
   15475:	50                   	push   %eax
   15476:	e8 40 fe ff ff       	call   152bb <tty_fifo_init>
   1547b:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   1547e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15481:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   15487:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1548a:	83 c0 20             	add    $0x20,%eax
   1548d:	83 ec 04             	sub    $0x4,%esp
   15490:	68 00 02 00 00       	push   $0x200
   15495:	52                   	push   %edx
   15496:	50                   	push   %eax
   15497:	e8 1f fe ff ff       	call   152bb <tty_fifo_init>
   1549c:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   1549f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154a2:	83 c0 34             	add    $0x34,%eax
   154a5:	83 ec 08             	sub    $0x8,%esp
   154a8:	68 00 02 00 00       	push   $0x200
   154ad:	50                   	push   %eax
   154ae:	e8 a3 20 00 00       	call   17556 <sem_init>
   154b3:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   154b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154b9:	83 c0 44             	add    $0x44,%eax
   154bc:	83 ec 08             	sub    $0x8,%esp
   154bf:	6a 00                	push   $0x0
   154c1:	50                   	push   %eax
   154c2:	e8 8f 20 00 00       	call   17556 <sem_init>
   154c7:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   154ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   154d0:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   154d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154d6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   154dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154df:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   154e6:	e8 a6 fb ff ff       	call   15091 <kbd_init>
    console_init(index);
   154eb:	83 ec 0c             	sub    $0xc,%esp
   154ee:	ff 75 f4             	push   -0xc(%ebp)
   154f1:	e8 37 e4 ff ff       	call   1392d <console_init>
   154f6:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   154f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   154fe:	c9                   	leave  
   154ff:	c3                   	ret    

00015500 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   15500:	55                   	push   %ebp
   15501:	89 e5                	mov    %esp,%ebp
   15503:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   15506:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1550a:	79 0a                	jns    15516 <tty_write+0x16>
        return -1;
   1550c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15511:	e9 d8 00 00 00       	jmp    155ee <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   15516:	83 ec 0c             	sub    $0xc,%esp
   15519:	ff 75 08             	push   0x8(%ebp)
   1551c:	e8 4b fd ff ff       	call   1526c <get_tty>
   15521:	83 c4 10             	add    $0x10,%esp
   15524:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   15527:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1552b:	75 0a                	jne    15537 <tty_write+0x37>
        return -1;
   1552d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15532:	e9 b7 00 00 00       	jmp    155ee <tty_write+0xee>
    }

    int len = 0;
   15537:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   1553e:	e9 98 00 00 00       	jmp    155db <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   15543:	8b 45 10             	mov    0x10(%ebp),%eax
   15546:	8d 50 01             	lea    0x1(%eax),%edx
   15549:	89 55 10             	mov    %edx,0x10(%ebp)
   1554c:	0f b6 00             	movzbl (%eax),%eax
   1554f:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   15552:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   15556:	75 3b                	jne    15593 <tty_write+0x93>
   15558:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1555b:	8b 00                	mov    (%eax),%eax
   1555d:	83 e0 01             	and    $0x1,%eax
   15560:	85 c0                	test   %eax,%eax
   15562:	74 2f                	je     15593 <tty_write+0x93>
            sem_wait(&tty->out_sem);
   15564:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15567:	83 c0 34             	add    $0x34,%eax
   1556a:	83 ec 0c             	sub    $0xc,%esp
   1556d:	50                   	push   %eax
   1556e:	e8 25 20 00 00       	call   17598 <sem_wait>
   15573:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   15576:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15579:	83 c0 0c             	add    $0xc,%eax
   1557c:	83 ec 08             	sub    $0x8,%esp
   1557f:	6a 0d                	push   $0xd
   15581:	50                   	push   %eax
   15582:	e8 6b fd ff ff       	call   152f2 <tty_fifo_put>
   15587:	83 c4 10             	add    $0x10,%esp
   1558a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   1558d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15591:	78 54                	js     155e7 <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   15593:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15596:	83 c0 34             	add    $0x34,%eax
   15599:	83 ec 0c             	sub    $0xc,%esp
   1559c:	50                   	push   %eax
   1559d:	e8 f6 1f 00 00       	call   17598 <sem_wait>
   155a2:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   155a5:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   155a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   155ac:	83 c2 0c             	add    $0xc,%edx
   155af:	83 ec 08             	sub    $0x8,%esp
   155b2:	50                   	push   %eax
   155b3:	52                   	push   %edx
   155b4:	e8 39 fd ff ff       	call   152f2 <tty_fifo_put>
   155b9:	83 c4 10             	add    $0x10,%esp
   155bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   155bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   155c3:	78 25                	js     155ea <tty_write+0xea>
            break;
        }

        len++;
   155c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   155c9:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   155cd:	83 ec 0c             	sub    $0xc,%esp
   155d0:	ff 75 f0             	push   -0x10(%ebp)
   155d3:	e8 82 e8 ff ff       	call   13e5a <console_write>
   155d8:	83 c4 10             	add    $0x10,%esp
    while (size) {
   155db:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   155df:	0f 85 5e ff ff ff    	jne    15543 <tty_write+0x43>
   155e5:	eb 04                	jmp    155eb <tty_write+0xeb>
                break;
   155e7:	90                   	nop
   155e8:	eb 01                	jmp    155eb <tty_write+0xeb>
            break;
   155ea:	90                   	nop
    }
    


    return len;
   155eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   155ee:	c9                   	leave  
   155ef:	c3                   	ret    

000155f0 <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   155f0:	55                   	push   %ebp
   155f1:	89 e5                	mov    %esp,%ebp
   155f3:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   155f6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   155fa:	79 0a                	jns    15606 <tty_read+0x16>
        return -1;
   155fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15601:	e9 04 01 00 00       	jmp    1570a <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   15606:	83 ec 0c             	sub    $0xc,%esp
   15609:	ff 75 08             	push   0x8(%ebp)
   1560c:	e8 5b fc ff ff       	call   1526c <get_tty>
   15611:	83 c4 10             	add    $0x10,%esp
   15614:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   15617:	8b 45 10             	mov    0x10(%ebp),%eax
   1561a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   1561d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   15624:	e9 d2 00 00 00       	jmp    156fb <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   15629:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1562c:	83 c0 44             	add    $0x44,%eax
   1562f:	83 ec 0c             	sub    $0xc,%esp
   15632:	50                   	push   %eax
   15633:	e8 60 1f 00 00       	call   17598 <sem_wait>
   15638:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   1563b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1563e:	8d 50 20             	lea    0x20(%eax),%edx
   15641:	83 ec 08             	sub    $0x8,%esp
   15644:	8d 45 eb             	lea    -0x15(%ebp),%eax
   15647:	50                   	push   %eax
   15648:	52                   	push   %edx
   15649:	e8 3c fd ff ff       	call   1538a <tty_fifo_get>
   1564e:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   15651:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15655:	0f be c0             	movsbl %al,%eax
   15658:	83 f8 0a             	cmp    $0xa,%eax
   1565b:	74 20                	je     1567d <tty_read+0x8d>
   1565d:	83 f8 7f             	cmp    $0x7f,%eax
   15660:	75 55                	jne    156b7 <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   15662:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15666:	75 05                	jne    1566d <tty_read+0x7d>
   15668:	e9 8e 00 00 00       	jmp    156fb <tty_read+0x10b>
                continue;
            } else {
                len--;
   1566d:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   15671:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   15675:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15678:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   1567b:	eb 4e                	jmp    156cb <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   1567d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15680:	8b 40 04             	mov    0x4(%eax),%eax
   15683:	83 e0 01             	and    $0x1,%eax
   15686:	85 c0                	test   %eax,%eax
   15688:	74 1b                	je     156a5 <tty_read+0xb5>
   1568a:	8b 45 14             	mov    0x14(%ebp),%eax
   1568d:	83 e8 01             	sub    $0x1,%eax
   15690:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15693:	7d 10                	jge    156a5 <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   15695:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15698:	8d 50 01             	lea    0x1(%eax),%edx
   1569b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1569e:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   156a1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   156a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156a8:	8d 50 01             	lea    0x1(%eax),%edx
   156ab:	89 55 f4             	mov    %edx,-0xc(%ebp)
   156ae:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   156b1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   156b5:	eb 14                	jmp    156cb <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   156b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156ba:	8d 50 01             	lea    0x1(%eax),%edx
   156bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
   156c0:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   156c4:	88 10                	mov    %dl,(%eax)
            len++;
   156c6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   156ca:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   156cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   156ce:	8b 40 04             	mov    0x4(%eax),%eax
   156d1:	83 e0 02             	and    $0x2,%eax
   156d4:	85 c0                	test   %eax,%eax
   156d6:	74 13                	je     156eb <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   156d8:	6a 01                	push   $0x1
   156da:	8d 45 eb             	lea    -0x15(%ebp),%eax
   156dd:	50                   	push   %eax
   156de:	6a 00                	push   $0x0
   156e0:	ff 75 08             	push   0x8(%ebp)
   156e3:	e8 18 fe ff ff       	call   15500 <tty_write>
   156e8:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   156eb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   156ef:	3c 0a                	cmp    $0xa,%al
   156f1:	74 14                	je     15707 <tty_read+0x117>
   156f3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   156f7:	3c 0d                	cmp    $0xd,%al
   156f9:	74 0c                	je     15707 <tty_read+0x117>
    while (len < size) {
   156fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   156fe:	3b 45 14             	cmp    0x14(%ebp),%eax
   15701:	0f 8c 22 ff ff ff    	jl     15629 <tty_read+0x39>
            break;
        }

    }

    return len;
   15707:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1570a:	c9                   	leave  
   1570b:	c3                   	ret    

0001570c <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   1570c:	55                   	push   %ebp
   1570d:	89 e5                	mov    %esp,%ebp

    return 0;
   1570f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15714:	5d                   	pop    %ebp
   15715:	c3                   	ret    

00015716 <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   15716:	55                   	push   %ebp
   15717:	89 e5                	mov    %esp,%ebp

}
   15719:	90                   	nop
   1571a:	5d                   	pop    %ebp
   1571b:	c3                   	ret    

0001571c <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   1571c:	55                   	push   %ebp
   1571d:	89 e5                	mov    %esp,%ebp
   1571f:	83 ec 28             	sub    $0x28,%esp
   15722:	8b 45 08             	mov    0x8(%ebp),%eax
   15725:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   15728:	a1 a0 16 05 00       	mov    0x516a0,%eax
   1572d:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15733:	05 00 f4 04 00       	add    $0x4f400,%eax
   15738:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   1573b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1573e:	83 c0 44             	add    $0x44,%eax
   15741:	83 ec 0c             	sub    $0xc,%esp
   15744:	50                   	push   %eax
   15745:	e8 6d 1f 00 00       	call   176b7 <sem_count>
   1574a:	83 c4 10             	add    $0x10,%esp
   1574d:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15752:	7f 2b                	jg     1577f <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   15754:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   15758:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1575b:	83 c2 20             	add    $0x20,%edx
   1575e:	83 ec 08             	sub    $0x8,%esp
   15761:	50                   	push   %eax
   15762:	52                   	push   %edx
   15763:	e8 8a fb ff ff       	call   152f2 <tty_fifo_put>
   15768:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   1576b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1576e:	83 c0 44             	add    $0x44,%eax
   15771:	83 ec 0c             	sub    $0xc,%esp
   15774:	50                   	push   %eax
   15775:	e8 9e 1e 00 00       	call   17618 <sem_notify>
   1577a:	83 c4 10             	add    $0x10,%esp
   1577d:	eb 01                	jmp    15780 <tty_in+0x64>
        return;
   1577f:	90                   	nop
}
   15780:	c9                   	leave  
   15781:	c3                   	ret    

00015782 <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   15782:	55                   	push   %ebp
   15783:	89 e5                	mov    %esp,%ebp
   15785:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   15788:	a1 a0 16 05 00       	mov    0x516a0,%eax
   1578d:	39 45 08             	cmp    %eax,0x8(%ebp)
   15790:	74 16                	je     157a8 <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   15792:	83 ec 0c             	sub    $0xc,%esp
   15795:	ff 75 08             	push   0x8(%ebp)
   15798:	e8 cd e7 ff ff       	call   13f6a <console_select>
   1579d:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   157a0:	8b 45 08             	mov    0x8(%ebp),%eax
   157a3:	a3 a0 16 05 00       	mov    %eax,0x516a0
    }
}
   157a8:	90                   	nop
   157a9:	c9                   	leave  
   157aa:	c3                   	ret    

000157ab <devfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int devfs_mount(struct _fs_t *fs, int major, int minor) {
   157ab:	55                   	push   %ebp
   157ac:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   157ae:	8b 45 08             	mov    0x8(%ebp),%eax
   157b1:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   157b8:	00 00 00 
    return fs->type;
   157bb:	8b 45 08             	mov    0x8(%ebp),%eax
   157be:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
}
   157c4:	5d                   	pop    %ebp
   157c5:	c3                   	ret    

000157c6 <devfs_unmount>:
/**
 * @brief 卸载设备文件系统
 * 
 * @param fs 
 */
void devfs_unmount(struct _fs_t *fs) {
   157c6:	55                   	push   %ebp
   157c7:	89 e5                	mov    %esp,%ebp
} 
   157c9:	90                   	nop
   157ca:	5d                   	pop    %ebp
   157cb:	c3                   	ret    

000157cc <devfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int devfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   157cc:	55                   	push   %ebp
   157cd:	89 e5                	mov    %esp,%ebp
   157cf:	83 ec 28             	sub    $0x28,%esp
    //遍历设备类型表，获取需要打开的设备的信息
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   157d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   157d9:	e9 04 01 00 00       	jmp    158e2 <devfs_open+0x116>
        devfs_type_t *type = devfs_type_list + i;
   157de:	8b 55 f4             	mov    -0xc(%ebp),%edx
   157e1:	89 d0                	mov    %edx,%eax
   157e3:	01 c0                	add    %eax,%eax
   157e5:	01 d0                	add    %edx,%eax
   157e7:	c1 e0 02             	shl    $0x2,%eax
   157ea:	05 e0 b0 01 00       	add    $0x1b0e0,%eax
   157ef:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int type_name_len = kernel_strlen(type->name);
   157f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157f5:	8b 00                	mov    (%eax),%eax
   157f7:	83 ec 0c             	sub    $0xc,%esp
   157fa:	50                   	push   %eax
   157fb:	e8 24 27 00 00       	call   17f24 <kernel_strlen>
   15800:	83 c4 10             	add    $0x10,%esp
   15803:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   15806:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15809:	8b 00                	mov    (%eax),%eax
   1580b:	83 ec 04             	sub    $0x4,%esp
   1580e:	ff 75 ec             	push   -0x14(%ebp)
   15811:	50                   	push   %eax
   15812:	ff 75 0c             	push   0xc(%ebp)
   15815:	e8 89 26 00 00       	call   17ea3 <kernel_strncmp>
   1581a:	83 c4 10             	add    $0x10,%esp
   1581d:	85 c0                	test   %eax,%eax
   1581f:	0f 85 b9 00 00 00    	jne    158de <devfs_open+0x112>
            int minor;
            //判断路径是否正确并读取路径中的设备号
            if (kernel_strlen(path) > type_name_len && path_to_num(path + type_name_len, &minor) < 0) {
   15825:	83 ec 0c             	sub    $0xc,%esp
   15828:	ff 75 0c             	push   0xc(%ebp)
   1582b:	e8 f4 26 00 00       	call   17f24 <kernel_strlen>
   15830:	83 c4 10             	add    $0x10,%esp
   15833:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15836:	7d 34                	jge    1586c <devfs_open+0xa0>
   15838:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1583b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1583e:	01 c2                	add    %eax,%edx
   15840:	83 ec 08             	sub    $0x8,%esp
   15843:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   15846:	50                   	push   %eax
   15847:	52                   	push   %edx
   15848:	e8 77 0d 00 00       	call   165c4 <path_to_num>
   1584d:	83 c4 10             	add    $0x10,%esp
   15850:	85 c0                	test   %eax,%eax
   15852:	79 18                	jns    1586c <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   15854:	83 ec 08             	sub    $0x8,%esp
   15857:	ff 75 0c             	push   0xc(%ebp)
   1585a:	68 dd 98 01 00       	push   $0x198dd
   1585f:	e8 41 2f 00 00       	call   187a5 <log_printf>
   15864:	83 c4 10             	add    $0x10,%esp
                break;
   15867:	e9 80 00 00 00       	jmp    158ec <devfs_open+0x120>
            }

            //打开设备
            int dev_id = dev_open(type->dev_type, minor, (void*)0);
   1586c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1586f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15872:	8b 40 04             	mov    0x4(%eax),%eax
   15875:	83 ec 04             	sub    $0x4,%esp
   15878:	6a 00                	push   $0x0
   1587a:	52                   	push   %edx
   1587b:	50                   	push   %eax
   1587c:	e8 0d e8 ff ff       	call   1408e <dev_open>
   15881:	83 c4 10             	add    $0x10,%esp
   15884:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   15887:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1588b:	79 15                	jns    158a2 <devfs_open+0xd6>
                log_printf("open device failed: %s", path);
   1588d:	83 ec 08             	sub    $0x8,%esp
   15890:	ff 75 0c             	push   0xc(%ebp)
   15893:	68 f7 98 01 00       	push   $0x198f7
   15898:	e8 08 2f 00 00       	call   187a5 <log_printf>
   1589d:	83 c4 10             	add    $0x10,%esp
                break;
   158a0:	eb 4a                	jmp    158ec <devfs_open+0x120>
            }

            //打开成功，初始化file结构，用file记录文件信息
            file->dev_id = dev_id;
   158a2:	8b 45 10             	mov    0x10(%ebp),%eax
   158a5:	8b 55 e8             	mov    -0x18(%ebp),%edx
   158a8:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->pos = 0;
   158ab:	8b 45 10             	mov    0x10(%ebp),%eax
   158ae:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   158b5:	8b 45 10             	mov    0x10(%ebp),%eax
   158b8:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
            file->type = type->file_type;
   158bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   158c2:	8b 40 08             	mov    0x8(%eax),%eax
   158c5:	89 c2                	mov    %eax,%edx
   158c7:	8b 45 10             	mov    0x10(%ebp),%eax
   158ca:	89 50 20             	mov    %edx,0x20(%eax)
            file->ref = 1;
   158cd:	8b 45 10             	mov    0x10(%ebp),%eax
   158d0:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)

            return 0;
   158d7:	b8 00 00 00 00       	mov    $0x0,%eax
   158dc:	eb 13                	jmp    158f1 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   158de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   158e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   158e6:	0f 84 f2 fe ff ff    	je     157de <devfs_open+0x12>
        }
    }

    return 0;
   158ec:	b8 00 00 00 00       	mov    $0x0,%eax
};
   158f1:	c9                   	leave  
   158f2:	c3                   	ret    

000158f3 <devfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_read(char *buf, int size, file_t *file) {
   158f3:	55                   	push   %ebp
   158f4:	89 e5                	mov    %esp,%ebp
   158f6:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   158f9:	8b 45 10             	mov    0x10(%ebp),%eax
   158fc:	8b 50 30             	mov    0x30(%eax),%edx
   158ff:	8b 45 10             	mov    0x10(%ebp),%eax
   15902:	8b 40 2c             	mov    0x2c(%eax),%eax
   15905:	ff 75 0c             	push   0xc(%ebp)
   15908:	ff 75 08             	push   0x8(%ebp)
   1590b:	52                   	push   %edx
   1590c:	50                   	push   %eax
   1590d:	e8 c6 e8 ff ff       	call   141d8 <dev_read>
   15912:	83 c4 10             	add    $0x10,%esp
}
   15915:	c9                   	leave  
   15916:	c3                   	ret    

00015917 <devfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_write(char *buf, int size, file_t *file) {
   15917:	55                   	push   %ebp
   15918:	89 e5                	mov    %esp,%ebp
   1591a:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   1591d:	8b 45 10             	mov    0x10(%ebp),%eax
   15920:	8b 50 30             	mov    0x30(%eax),%edx
   15923:	8b 45 10             	mov    0x10(%ebp),%eax
   15926:	8b 40 2c             	mov    0x2c(%eax),%eax
   15929:	ff 75 0c             	push   0xc(%ebp)
   1592c:	ff 75 08             	push   0x8(%ebp)
   1592f:	52                   	push   %edx
   15930:	50                   	push   %eax
   15931:	e8 ee e8 ff ff       	call   14224 <dev_write>
   15936:	83 c4 10             	add    $0x10,%esp
}
   15939:	c9                   	leave  
   1593a:	c3                   	ret    

0001593b <devfs_close>:
/**
 * @brief 关闭设备文件系统
 * 
 * @param file 
 */
void devfs_close(file_t *file) {
   1593b:	55                   	push   %ebp
   1593c:	89 e5                	mov    %esp,%ebp
   1593e:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   15941:	8b 45 08             	mov    0x8(%ebp),%eax
   15944:	8b 40 2c             	mov    0x2c(%eax),%eax
   15947:	83 ec 0c             	sub    $0xc,%esp
   1594a:	50                   	push   %eax
   1594b:	e8 6c e9 ff ff       	call   142bc <dev_close>
   15950:	83 c4 10             	add    $0x10,%esp
}
   15953:	90                   	nop
   15954:	c9                   	leave  
   15955:	c3                   	ret    

00015956 <devfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int devfs_seek(file_t *file, uint32_t offset, int dir) {
   15956:	55                   	push   %ebp
   15957:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持偏移调用，直接返回-1;
    return -1;
   15959:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1595e:	5d                   	pop    %ebp
   1595f:	c3                   	ret    

00015960 <devfs_stat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int devfs_stat(file_t *file, struct stat *st) {
   15960:	55                   	push   %ebp
   15961:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持该调用
    return -1;
   15963:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15968:	5d                   	pop    %ebp
   15969:	c3                   	ret    

0001596a <cluster_is_valid>:
 * @brief 判断簇号是否有效
 * 
 * @param cluster 
 * @return int 
 */
static int cluster_is_valid(cluster_t cluster) {
   1596a:	55                   	push   %ebp
   1596b:	89 e5                	mov    %esp,%ebp
   1596d:	83 ec 04             	sub    $0x4,%esp
   15970:	8b 45 08             	mov    0x8(%ebp),%eax
   15973:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < FAT_CLUSTER_INVALID) && (cluster >= 0x2);
   15977:	66 81 7d fc f7 0f    	cmpw   $0xff7,-0x4(%ebp)
   1597d:	77 0e                	ja     1598d <cluster_is_valid+0x23>
   1597f:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15984:	76 07                	jbe    1598d <cluster_is_valid+0x23>
   15986:	b8 01 00 00 00       	mov    $0x1,%eax
   1598b:	eb 05                	jmp    15992 <cluster_is_valid+0x28>
   1598d:	b8 00 00 00 00       	mov    $0x0,%eax
} 
   15992:	c9                   	leave  
   15993:	c3                   	ret    

00015994 <cache_read_sector>:
 * 
 * @param fat 
 * @param sector 
 * @return int 
 */
static int cache_read_sector(fat_t *fat, int sector) {
   15994:	55                   	push   %ebp
   15995:	89 e5                	mov    %esp,%ebp
   15997:	83 ec 18             	sub    $0x18,%esp
    //要读扇区已被缓存，直接返回即可
    if (sector == fat->curr_sector) {
   1599a:	8b 45 08             	mov    0x8(%ebp),%eax
   1599d:	8b 50 24             	mov    0x24(%eax),%edx
   159a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   159a3:	39 c2                	cmp    %eax,%edx
   159a5:	75 07                	jne    159ae <cache_read_sector+0x1a>
        return 0;
   159a7:	b8 00 00 00 00       	mov    $0x0,%eax
   159ac:	eb 3f                	jmp    159ed <cache_read_sector+0x59>
    }

    //读取信的扇区，并记录扇区号
    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   159ae:	8b 45 08             	mov    0x8(%ebp),%eax
   159b1:	8b 50 28             	mov    0x28(%eax),%edx
   159b4:	8b 45 08             	mov    0x8(%ebp),%eax
   159b7:	8b 40 2c             	mov    0x2c(%eax),%eax
   159ba:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   159c0:	6a 01                	push   $0x1
   159c2:	52                   	push   %edx
   159c3:	ff 75 0c             	push   0xc(%ebp)
   159c6:	50                   	push   %eax
   159c7:	e8 0c e8 ff ff       	call   141d8 <dev_read>
   159cc:	83 c4 10             	add    $0x10,%esp
   159cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   159d2:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   159d6:	75 10                	jne    159e8 <cache_read_sector+0x54>
        fat->curr_sector = sector;
   159d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   159db:	8b 45 08             	mov    0x8(%ebp),%eax
   159de:	89 50 24             	mov    %edx,0x24(%eax)
        return 0;
   159e1:	b8 00 00 00 00       	mov    $0x0,%eax
   159e6:	eb 05                	jmp    159ed <cache_read_sector+0x59>
    }

    return -1;
   159e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159ed:	c9                   	leave  
   159ee:	c3                   	ret    

000159ef <cluster_get_next>:
 * 
 * @param fat 
 * @param cblk 
 * @return int 
 */
static int cluster_get_next(fat_t *fat, cluster_t cblk) {
   159ef:	55                   	push   %ebp
   159f0:	89 e5                	mov    %esp,%ebp
   159f2:	83 ec 28             	sub    $0x28,%esp
   159f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   159f8:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    //簇号无效
    if (!cluster_is_valid(cblk)) {
   159fc:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a00:	50                   	push   %eax
   15a01:	e8 64 ff ff ff       	call   1596a <cluster_is_valid>
   15a06:	83 c4 04             	add    $0x4,%esp
   15a09:	85 c0                	test   %eax,%eax
   15a0b:	75 0a                	jne    15a17 <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15a0d:	b8 f8 0f 00 00       	mov    $0xff8,%eax
   15a12:	e9 94 00 00 00       	jmp    15aab <cluster_get_next+0xbc>
    }

    //计算当前簇cblk在对应分区中的扇区号
    //fat表保存了簇链关系，
    int offset = cblk * sizeof(cluster_t);
   15a17:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a1b:	01 c0                	add    %eax,%eax
   15a1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sector;
   15a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a23:	8b 55 08             	mov    0x8(%ebp),%edx
   15a26:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a29:	ba 00 00 00 00       	mov    $0x0,%edx
   15a2e:	f7 f1                	div    %ecx
   15a30:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //计算该簇在扇区中的偏移量
    int off_in_sector = offset % fat->bytes_per_sector;
   15a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a36:	8b 55 08             	mov    0x8(%ebp),%edx
   15a39:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a3c:	ba 00 00 00 00       	mov    $0x0,%edx
   15a41:	f7 f1                	div    %ecx
   15a43:	89 d0                	mov    %edx,%eax
   15a45:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if (sector >= fat->tbl_sectors) {
   15a48:	8b 45 08             	mov    0x8(%ebp),%eax
   15a4b:	8b 50 08             	mov    0x8(%eax),%edx
   15a4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a51:	39 c2                	cmp    %eax,%edx
   15a53:	77 1c                	ja     15a71 <cluster_get_next+0x82>
        log_printf("cluster too big: %d\n", cblk);
   15a55:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a59:	83 ec 08             	sub    $0x8,%esp
   15a5c:	50                   	push   %eax
   15a5d:	68 10 99 01 00       	push   $0x19910
   15a62:	e8 3e 2d 00 00       	call   187a5 <log_printf>
   15a67:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15a6a:	b8 f8 0f 00 00       	mov    $0xff8,%eax
   15a6f:	eb 3a                	jmp    15aab <cluster_get_next+0xbc>
    }

    int err = cache_read_sector(fat, fat->tbl_start_sector + sector);
   15a71:	8b 45 08             	mov    0x8(%ebp),%eax
   15a74:	8b 10                	mov    (%eax),%edx
   15a76:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a79:	01 d0                	add    %edx,%eax
   15a7b:	83 ec 08             	sub    $0x8,%esp
   15a7e:	50                   	push   %eax
   15a7f:	ff 75 08             	push   0x8(%ebp)
   15a82:	e8 0d ff ff ff       	call   15994 <cache_read_sector>
   15a87:	83 c4 10             	add    $0x10,%esp
   15a8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15a8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15a91:	79 07                	jns    15a9a <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15a93:	b8 f8 0f 00 00       	mov    $0xff8,%eax
   15a98:	eb 11                	jmp    15aab <cluster_get_next+0xbc>
    }

    return *(cluster_t *)(fat->fat_buffer + off_in_sector);
   15a9a:	8b 45 08             	mov    0x8(%ebp),%eax
   15a9d:	8b 50 28             	mov    0x28(%eax),%edx
   15aa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15aa3:	01 d0                	add    %edx,%eax
   15aa5:	0f b7 00             	movzwl (%eax),%eax
   15aa8:	0f b7 c0             	movzwl %ax,%eax
}
   15aab:	c9                   	leave  
   15aac:	c3                   	ret    

00015aad <move_file_pos>:
 * @param move_bytes 
 * @param expand 
 * @return int 
 */
static int move_file_pos(file_t *file, 
    fat_t *fat, uint32_t move_bytes, int expand) {
   15aad:	55                   	push   %ebp
   15aae:	89 e5                	mov    %esp,%ebp
   15ab0:	83 ec 18             	sub    $0x18,%esp
        //判断移动pos后是否当前读取簇号是否需要更改
        uint32_t c_offset = file->pos % fat->cluster_bytes_size;
   15ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   15ab6:	8b 40 30             	mov    0x30(%eax),%eax
   15ab9:	89 c2                	mov    %eax,%edx
   15abb:	8b 45 0c             	mov    0xc(%ebp),%eax
   15abe:	8b 48 20             	mov    0x20(%eax),%ecx
   15ac1:	89 d0                	mov    %edx,%eax
   15ac3:	ba 00 00 00 00       	mov    $0x0,%edx
   15ac8:	f7 f1                	div    %ecx
   15aca:	89 55 f4             	mov    %edx,-0xc(%ebp)
        if (c_offset + move_bytes >= fat->cluster_bytes_size) {
   15acd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15ad0:	8b 45 10             	mov    0x10(%ebp),%eax
   15ad3:	01 c2                	add    %eax,%edx
   15ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ad8:	8b 40 20             	mov    0x20(%eax),%eax
   15adb:	39 c2                	cmp    %eax,%edx
   15add:	72 35                	jb     15b14 <move_file_pos+0x67>
            //当前簇已读取完毕需更改当前簇号
            //通过fat的簇链获取当前簇的下一个簇
            cluster_t next = cluster_get_next(fat, file->cblk);
   15adf:	8b 45 08             	mov    0x8(%ebp),%eax
   15ae2:	8b 40 40             	mov    0x40(%eax),%eax
   15ae5:	0f b7 c0             	movzwl %ax,%eax
   15ae8:	83 ec 08             	sub    $0x8,%esp
   15aeb:	50                   	push   %eax
   15aec:	ff 75 0c             	push   0xc(%ebp)
   15aef:	e8 fb fe ff ff       	call   159ef <cluster_get_next>
   15af4:	83 c4 10             	add    $0x10,%esp
   15af7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            if (next == FAT_CLUSTER_INVALID) {  //簇号无效
   15afb:	66 81 7d f2 f8 0f    	cmpw   $0xff8,-0xe(%ebp)
   15b01:	75 07                	jne    15b0a <move_file_pos+0x5d>
                return -1;
   15b03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b08:	eb 24                	jmp    15b2e <move_file_pos+0x81>
            }
            file->cblk = next;
   15b0a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
   15b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b11:	89 50 40             	mov    %edx,0x40(%eax)
        }

        file->pos += move_bytes;
   15b14:	8b 45 08             	mov    0x8(%ebp),%eax
   15b17:	8b 40 30             	mov    0x30(%eax),%eax
   15b1a:	89 c2                	mov    %eax,%edx
   15b1c:	8b 45 10             	mov    0x10(%ebp),%eax
   15b1f:	01 d0                	add    %edx,%eax
   15b21:	89 c2                	mov    %eax,%edx
   15b23:	8b 45 08             	mov    0x8(%ebp),%eax
   15b26:	89 50 30             	mov    %edx,0x30(%eax)
        return 0;
   15b29:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15b2e:	c9                   	leave  
   15b2f:	c3                   	ret    

00015b30 <diritem_get_type>:
 * @brief 从根目录项中获取该项的文件类型
 * 
 * @param diritem 
 * @return file_type_t 
 */
file_type_t diritem_get_type(diritem_t *diritem) {
   15b30:	55                   	push   %ebp
   15b31:	89 e5                	mov    %esp,%ebp
   15b33:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15b36:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (diritem->DIR_Attr & 
   15b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   15b40:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15b44:	0f b6 c0             	movzbl %al,%eax
   15b47:	83 e0 0e             	and    $0xe,%eax
   15b4a:	85 c0                	test   %eax,%eax
   15b4c:	74 07                	je     15b55 <diritem_get_type+0x25>
    (DIRITEM_ATTR_VOLUME_ID 
    | DIRITEM_ATTR_SYSTEM 
    | DIRITEM_ATTR_HIDDEN)) {   //该项是卷标，隐藏或系统文件时直接跳过
        return FILE_UNKNOWN;
   15b4e:	b8 00 00 00 00       	mov    $0x0,%eax
   15b53:	eb 36                	jmp    15b8b <diritem_get_type+0x5b>
    }

    //该项为LONG_NAME项时也跳过
    if ((diritem->DIR_Attr & DIRITEM_ATTR_LONG_NAME) == DIRITEM_ATTR_LONG_NAME) {
   15b55:	8b 45 08             	mov    0x8(%ebp),%eax
   15b58:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15b5c:	0f b6 c0             	movzbl %al,%eax
   15b5f:	83 e0 0f             	and    $0xf,%eax
   15b62:	83 f8 0f             	cmp    $0xf,%eax
   15b65:	75 07                	jne    15b6e <diritem_get_type+0x3e>
        return FILE_UNKNOWN;
   15b67:	b8 00 00 00 00       	mov    $0x0,%eax
   15b6c:	eb 1d                	jmp    15b8b <diritem_get_type+0x5b>

    }


    return diritem->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   15b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b71:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15b75:	0f b6 c0             	movzbl %al,%eax
   15b78:	83 e0 10             	and    $0x10,%eax
   15b7b:	85 c0                	test   %eax,%eax
   15b7d:	74 07                	je     15b86 <diritem_get_type+0x56>
   15b7f:	b8 02 00 00 00       	mov    $0x2,%eax
   15b84:	eb 05                	jmp    15b8b <diritem_get_type+0x5b>
   15b86:	b8 03 00 00 00       	mov    $0x3,%eax
}
   15b8b:	c9                   	leave  
   15b8c:	c3                   	ret    

00015b8d <read_from_diritem>:
 * @param file
 * @param file_item 
 * @param p_index 
 */
static void read_from_diritem(fat_t *fat, 
    file_t *file, diritem_t *item, int index) {
   15b8d:	55                   	push   %ebp
   15b8e:	89 e5                	mov    %esp,%ebp
        file->type = diritem_get_type(item);
   15b90:	ff 75 10             	push   0x10(%ebp)
   15b93:	e8 98 ff ff ff       	call   15b30 <diritem_get_type>
   15b98:	83 c4 04             	add    $0x4,%esp
   15b9b:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b9e:	89 42 20             	mov    %eax,0x20(%edx)
        file->size = item->DIR_FileSize;
   15ba1:	8b 45 10             	mov    0x10(%ebp),%eax
   15ba4:	8b 50 1c             	mov    0x1c(%eax),%edx
   15ba7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15baa:	89 50 38             	mov    %edx,0x38(%eax)
        file->pos = 0;
   15bad:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bb0:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->p_index = index;
   15bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bba:	8b 55 14             	mov    0x14(%ebp),%edx
   15bbd:	89 50 44             	mov    %edx,0x44(%eax)
        file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusLo;
   15bc0:	8b 45 10             	mov    0x10(%ebp),%eax
   15bc3:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   15bc7:	0f b7 c0             	movzwl %ax,%eax
   15bca:	c1 e0 10             	shl    $0x10,%eax
   15bcd:	89 c2                	mov    %eax,%edx
   15bcf:	8b 45 10             	mov    0x10(%ebp),%eax
   15bd2:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   15bd6:	0f b7 c0             	movzwl %ax,%eax
   15bd9:	09 c2                	or     %eax,%edx
   15bdb:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bde:	89 50 3c             	mov    %edx,0x3c(%eax)
        file->cblk = file->sblk;
   15be1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15be4:	8b 50 3c             	mov    0x3c(%eax),%edx
   15be7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bea:	89 50 40             	mov    %edx,0x40(%eax)
}
   15bed:	90                   	nop
   15bee:	c9                   	leave  
   15bef:	c3                   	ret    

00015bf0 <diritem_get_name>:
 * @brief 从当前目录项中获取文件名到dest中
 * 
 * @param diritem 
 * @param dest
 */
static void diritem_get_name(diritem_t *diritem, char *dest) {
   15bf0:	55                   	push   %ebp
   15bf1:	89 e5                	mov    %esp,%ebp
   15bf3:	83 ec 18             	sub    $0x18,%esp
    //file.c 存储在目录项中的形式为 "FILE    C  "
    //8字节的文件名，三字节的拓展名
    char *c = dest;
   15bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *ext = (char*)0;
   15bfc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    //8字节文件名 + '.' + 3字节拓展名，一共最大12字节空间
    kernel_memset(dest, 0, 12);
   15c03:	83 ec 04             	sub    $0x4,%esp
   15c06:	6a 0c                	push   $0xc
   15c08:	6a 00                	push   $0x0
   15c0a:	ff 75 0c             	push   0xc(%ebp)
   15c0d:	e8 96 23 00 00       	call   17fa8 <kernel_memset>
   15c12:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; ++i) {
   15c15:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15c1c:	eb 65                	jmp    15c83 <diritem_get_name+0x93>
        if (diritem->DIR_Name[i] != ' ') {
   15c1e:	8b 55 08             	mov    0x8(%ebp),%edx
   15c21:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15c24:	01 d0                	add    %edx,%eax
   15c26:	0f b6 00             	movzbl (%eax),%eax
   15c29:	3c 20                	cmp    $0x20,%al
   15c2b:	74 3a                	je     15c67 <diritem_get_name+0x77>
            *c = diritem->DIR_Name[i];
   15c2d:	8b 55 08             	mov    0x8(%ebp),%edx
   15c30:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15c33:	01 d0                	add    %edx,%eax
   15c35:	0f b6 00             	movzbl (%eax),%eax
   15c38:	89 c2                	mov    %eax,%edx
   15c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c3d:	88 10                	mov    %dl,(%eax)
            if (*c >= 'A' && *c <= 'Z') {
   15c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c42:	0f b6 00             	movzbl (%eax),%eax
   15c45:	3c 40                	cmp    $0x40,%al
   15c47:	7e 1a                	jle    15c63 <diritem_get_name+0x73>
   15c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c4c:	0f b6 00             	movzbl (%eax),%eax
   15c4f:	3c 5a                	cmp    $0x5a,%al
   15c51:	7f 10                	jg     15c63 <diritem_get_name+0x73>
                *c -= ('A' - 'a');
   15c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c56:	0f b6 00             	movzbl (%eax),%eax
   15c59:	83 c0 20             	add    $0x20,%eax
   15c5c:	89 c2                	mov    %eax,%edx
   15c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c61:	88 10                	mov    %dl,(%eax)
            }
            c++;
   15c63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        }

        //读完8字节的文件名，用ext记录".拓展名""
        if (i == 7) {
   15c67:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15c6b:	75 12                	jne    15c7f <diritem_get_name+0x8f>
            ext = c;
   15c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *(c++) = '.';
   15c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c76:	8d 50 01             	lea    0x1(%eax),%edx
   15c79:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15c7c:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; ++i) {
   15c7f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15c83:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15c87:	7e 95                	jle    15c1e <diritem_get_name+0x2e>
        }
    }

    //文件无拓展名，将之前写入的'.'设置为'\0'
    if (ext && (ext[1] == '\0')) {
   15c89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15c8d:	74 13                	je     15ca2 <diritem_get_name+0xb2>
   15c8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15c92:	83 c0 01             	add    $0x1,%eax
   15c95:	0f b6 00             	movzbl (%eax),%eax
   15c98:	84 c0                	test   %al,%al
   15c9a:	75 06                	jne    15ca2 <diritem_get_name+0xb2>
        ext[0] = '\0';
   15c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15c9f:	c6 00 00             	movb   $0x0,(%eax)
    }

}
   15ca2:	90                   	nop
   15ca3:	c9                   	leave  
   15ca4:	c3                   	ret    

00015ca5 <diritem_name_match>:
 * 
 * @param item 
 * @param dest 
 * @return int 
 */
static int diritem_name_match(diritem_t *item, const char *dest) {
   15ca5:	55                   	push   %ebp
   15ca6:	89 e5                	mov    %esp,%ebp
   15ca8:	83 ec 18             	sub    $0x18,%esp
    char buf[12];
    diritem_get_name(item, buf);
   15cab:	83 ec 08             	sub    $0x8,%esp
   15cae:	8d 45 ec             	lea    -0x14(%ebp),%eax
   15cb1:	50                   	push   %eax
   15cb2:	ff 75 08             	push   0x8(%ebp)
   15cb5:	e8 36 ff ff ff       	call   15bf0 <diritem_get_name>
   15cba:	83 c4 10             	add    $0x10,%esp
    return kernel_strncmp(buf, dest, 11) == 0;
   15cbd:	83 ec 04             	sub    $0x4,%esp
   15cc0:	6a 0b                	push   $0xb
   15cc2:	ff 75 0c             	push   0xc(%ebp)
   15cc5:	8d 45 ec             	lea    -0x14(%ebp),%eax
   15cc8:	50                   	push   %eax
   15cc9:	e8 d5 21 00 00       	call   17ea3 <kernel_strncmp>
   15cce:	83 c4 10             	add    $0x10,%esp
   15cd1:	85 c0                	test   %eax,%eax
   15cd3:	0f 94 c0             	sete   %al
   15cd6:	0f b6 c0             	movzbl %al,%eax
}
   15cd9:	c9                   	leave  
   15cda:	c3                   	ret    

00015cdb <read_dir_entry>:
 * 
 * @param fat 
 * @param dir_index 
 * @return diritem_t* 
 */
static diritem_t * read_dir_entry(fat_t *fat, int dir_index) {
   15cdb:	55                   	push   %ebp
   15cdc:	89 e5                	mov    %esp,%ebp
   15cde:	53                   	push   %ebx
   15cdf:	83 ec 14             	sub    $0x14,%esp
    if (dir_index < 0 || dir_index >= fat->root_ent_cnt) {
   15ce2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15ce6:	78 0d                	js     15cf5 <read_dir_entry+0x1a>
   15ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   15ceb:	8b 50 18             	mov    0x18(%eax),%edx
   15cee:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cf1:	39 c2                	cmp    %eax,%edx
   15cf3:	77 07                	ja     15cfc <read_dir_entry+0x21>
        return (diritem_t*)0;
   15cf5:	b8 00 00 00 00       	mov    $0x0,%eax
   15cfa:	eb 5f                	jmp    15d5b <read_dir_entry+0x80>
    }

    //计算该目录项所在根目录区的扇区的扇区号
    int offset = dir_index * sizeof(diritem_t);
   15cfc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cff:	c1 e0 05             	shl    $0x5,%eax
   15d02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start_sector + offset / fat->bytes_per_sector;
   15d05:	8b 45 08             	mov    0x8(%ebp),%eax
   15d08:	8b 48 14             	mov    0x14(%eax),%ecx
   15d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d0e:	8b 55 08             	mov    0x8(%ebp),%edx
   15d11:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15d14:	ba 00 00 00 00       	mov    $0x0,%edx
   15d19:	f7 f3                	div    %ebx
   15d1b:	01 c8                	add    %ecx,%eax
   15d1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = cache_read_sector(fat, sector);
   15d20:	83 ec 08             	sub    $0x8,%esp
   15d23:	ff 75 f0             	push   -0x10(%ebp)
   15d26:	ff 75 08             	push   0x8(%ebp)
   15d29:	e8 66 fc ff ff       	call   15994 <cache_read_sector>
   15d2e:	83 c4 10             	add    $0x10,%esp
   15d31:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   15d34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15d38:	79 07                	jns    15d41 <read_dir_entry+0x66>
        return (diritem_t*)0;
   15d3a:	b8 00 00 00 00       	mov    $0x0,%eax
   15d3f:	eb 1a                	jmp    15d5b <read_dir_entry+0x80>
    }

    //计算出该目录项的起始地址并返回
    return (diritem_t*)(fat->fat_buffer + offset % fat->bytes_per_sector);
   15d41:	8b 45 08             	mov    0x8(%ebp),%eax
   15d44:	8b 58 28             	mov    0x28(%eax),%ebx
   15d47:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d4a:	8b 55 08             	mov    0x8(%ebp),%edx
   15d4d:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15d50:	ba 00 00 00 00       	mov    $0x0,%edx
   15d55:	f7 f1                	div    %ecx
   15d57:	89 d0                	mov    %edx,%eax
   15d59:	01 d8                	add    %ebx,%eax
}
   15d5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15d5e:	c9                   	leave  
   15d5f:	c3                   	ret    

00015d60 <fatfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int fatfs_mount(struct _fs_t *fs, int major, int minor) {
   15d60:	55                   	push   %ebp
   15d61:	89 e5                	mov    %esp,%ebp
   15d63:	56                   	push   %esi
   15d64:	53                   	push   %ebx
   15d65:	83 ec 10             	sub    $0x10,%esp

    //打开对应设备 即对应磁盘的对应分区
    int dev_id = dev_open(major, minor, (void *)0);
   15d68:	83 ec 04             	sub    $0x4,%esp
   15d6b:	6a 00                	push   $0x0
   15d6d:	ff 75 10             	push   0x10(%ebp)
   15d70:	ff 75 0c             	push   0xc(%ebp)
   15d73:	e8 16 e3 ff ff       	call   1408e <dev_open>
   15d78:	83 c4 10             	add    $0x10,%esp
   15d7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev_id < 0) {
   15d7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15d82:	79 1b                	jns    15d9f <fatfs_mount+0x3f>
        log_printf("open disk failed, major: %x, minor: %x\n", major, minor);
   15d84:	83 ec 04             	sub    $0x4,%esp
   15d87:	ff 75 10             	push   0x10(%ebp)
   15d8a:	ff 75 0c             	push   0xc(%ebp)
   15d8d:	68 28 99 01 00       	push   $0x19928
   15d92:	e8 0e 2a 00 00       	call   187a5 <log_printf>
   15d97:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15d9a:	e9 c6 01 00 00       	jmp    15f65 <fatfs_mount+0x205>
    }

    //分配一页来作为dbr区域的缓冲区
    dbr_t *dbr = (dbr_t *)memory_alloc_page();
   15d9f:	e8 b5 b0 ff ff       	call   10e59 <memory_alloc_page>
   15da4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!dbr) {
   15da7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15dab:	75 15                	jne    15dc2 <fatfs_mount+0x62>
        log_printf("mount failed: can't alloc buf\n");
   15dad:	83 ec 0c             	sub    $0xc,%esp
   15db0:	68 50 99 01 00       	push   $0x19950
   15db5:	e8 eb 29 00 00       	call   187a5 <log_printf>
   15dba:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15dbd:	e9 a3 01 00 00       	jmp    15f65 <fatfs_mount+0x205>
    }


    //读取该分区的0号扇区，获取dbr的信息
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   15dc2:	6a 01                	push   $0x1
   15dc4:	ff 75 f4             	push   -0xc(%ebp)
   15dc7:	6a 00                	push   $0x0
   15dc9:	ff 75 f0             	push   -0x10(%ebp)
   15dcc:	e8 07 e4 ff ff       	call   141d8 <dev_read>
   15dd1:	83 c4 10             	add    $0x10,%esp
   15dd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   15dd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15ddb:	7f 15                	jg     15df2 <fatfs_mount+0x92>
        log_printf("read dbr failed\n");
   15ddd:	83 ec 0c             	sub    $0xc,%esp
   15de0:	68 6f 99 01 00       	push   $0x1996f
   15de5:	e8 bb 29 00 00       	call   187a5 <log_printf>
   15dea:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15ded:	e9 73 01 00 00       	jmp    15f65 <fatfs_mount+0x205>
    }

    //解析fat表的信息到文件系统中
    fat_t *fat = &fs->fat_data;
   15df2:	8b 45 08             	mov    0x8(%ebp),%eax
   15df5:	05 1c 02 00 00       	add    $0x21c,%eax
   15dfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->bytes_per_sector = dbr->BPB_BytsPerSec;
   15dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e00:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15e04:	0f b7 d0             	movzwl %ax,%edx
   15e07:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e0a:	89 50 0c             	mov    %edx,0xc(%eax)
    //因为保留区dbr从0扇区开始，且fat表紧邻dbr区
    //所以fat表的起始扇区，也就是保留区dbr的扇区总数
    fat->tbl_start_sector = dbr->BPB_RsvdSecCnt;
   15e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e10:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15e14:	0f b7 d0             	movzwl %ax,%edx
   15e17:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e1a:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   15e1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e1f:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   15e23:	0f b7 d0             	movzwl %ax,%edx
   15e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e29:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   15e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e2f:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   15e33:	0f b6 d0             	movzbl %al,%edx
   15e36:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e39:	89 50 04             	mov    %edx,0x4(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   15e3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e3f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   15e43:	0f b6 d0             	movzbl %al,%edx
   15e46:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e49:	89 50 10             	mov    %edx,0x10(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   15e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e4f:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   15e53:	0f b7 d0             	movzwl %ax,%edx
   15e56:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e59:	89 50 18             	mov    %edx,0x18(%eax)
    fat->root_start_sector = fat->tbl_start_sector + fat->tbl_sectors * fat->tbl_cnt;
   15e5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e5f:	8b 08                	mov    (%eax),%ecx
   15e61:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e64:	8b 50 08             	mov    0x8(%eax),%edx
   15e67:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e6a:	8b 40 04             	mov    0x4(%eax),%eax
   15e6d:	0f af c2             	imul   %edx,%eax
   15e70:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   15e73:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e76:	89 50 14             	mov    %edx,0x14(%eax)
    fat->data_start_sector = fat->root_start_sector + fat->root_ent_cnt * 32 / dbr->BPB_BytsPerSec;
   15e79:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e7c:	8b 58 14             	mov    0x14(%eax),%ebx
   15e7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e82:	8b 40 18             	mov    0x18(%eax),%eax
   15e85:	c1 e0 05             	shl    $0x5,%eax
   15e88:	89 c1                	mov    %eax,%ecx
   15e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e8d:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15e91:	0f b7 f0             	movzwl %ax,%esi
   15e94:	89 c8                	mov    %ecx,%eax
   15e96:	ba 00 00 00 00       	mov    $0x0,%edx
   15e9b:	f7 f6                	div    %esi
   15e9d:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   15ea0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ea3:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->cluster_bytes_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   15ea6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ea9:	8b 50 10             	mov    0x10(%eax),%edx
   15eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15eaf:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15eb3:	0f b7 c0             	movzwl %ax,%eax
   15eb6:	0f af d0             	imul   %eax,%edx
   15eb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ebc:	89 50 20             	mov    %edx,0x20(%eax)
    fat->fat_buffer = (uint8_t*)dbr;
   15ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ec2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15ec5:	89 50 28             	mov    %edx,0x28(%eax)
    fat->fs = fs;
   15ec8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ecb:	8b 55 08             	mov    0x8(%ebp),%edx
   15ece:	89 50 2c             	mov    %edx,0x2c(%eax)
    fat->curr_sector = -1;
   15ed1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ed4:	c7 40 24 ff ff ff ff 	movl   $0xffffffff,0x24(%eax)

    if (fat->tbl_cnt != 2) {    //fat表数量一般为2， 不为2则出错
   15edb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ede:	8b 40 04             	mov    0x4(%eax),%eax
   15ee1:	83 f8 02             	cmp    $0x2,%eax
   15ee4:	74 18                	je     15efe <fatfs_mount+0x19e>
        log_printf("%s: fat table error: major: %x, minor: %x\n", major, minor);
   15ee6:	83 ec 04             	sub    $0x4,%esp
   15ee9:	ff 75 10             	push   0x10(%ebp)
   15eec:	ff 75 0c             	push   0xc(%ebp)
   15eef:	68 80 99 01 00       	push   $0x19980
   15ef4:	e8 ac 28 00 00       	call   187a5 <log_printf>
   15ef9:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15efc:	eb 67                	jmp    15f65 <fatfs_mount+0x205>
    }

    if (kernel_strncmp((char*)(dbr->BS_FilSysType), "FAT16", 5) != 0) { //不是FAT16文件系统，出错
   15efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f01:	83 c0 36             	add    $0x36,%eax
   15f04:	83 ec 04             	sub    $0x4,%esp
   15f07:	6a 05                	push   $0x5
   15f09:	68 ab 99 01 00       	push   $0x199ab
   15f0e:	50                   	push   %eax
   15f0f:	e8 8f 1f 00 00       	call   17ea3 <kernel_strncmp>
   15f14:	83 c4 10             	add    $0x10,%esp
   15f17:	85 c0                	test   %eax,%eax
   15f19:	74 18                	je     15f33 <fatfs_mount+0x1d3>
        log_printf("not a fat filesystem: major: %x, minor: %x\n", major, minor);
   15f1b:	83 ec 04             	sub    $0x4,%esp
   15f1e:	ff 75 10             	push   0x10(%ebp)
   15f21:	ff 75 0c             	push   0xc(%ebp)
   15f24:	68 b4 99 01 00       	push   $0x199b4
   15f29:	e8 77 28 00 00       	call   187a5 <log_printf>
   15f2e:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15f31:	eb 32                	jmp    15f65 <fatfs_mount+0x205>

    }

    fs->type = FS_FAT16;
   15f33:	8b 45 08             	mov    0x8(%ebp),%eax
   15f36:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   15f3d:	00 00 00 
    fs->data = &fs->fat_data;
   15f40:	8b 45 08             	mov    0x8(%ebp),%eax
   15f43:	8d 90 1c 02 00 00    	lea    0x21c(%eax),%edx
   15f49:	8b 45 08             	mov    0x8(%ebp),%eax
   15f4c:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   15f52:	8b 45 08             	mov    0x8(%ebp),%eax
   15f55:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15f58:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)

    return 0;
   15f5e:	b8 00 00 00 00       	mov    $0x0,%eax
   15f63:	eb 28                	jmp    15f8d <fatfs_mount+0x22d>

mount_failed:
    if (dbr) {
   15f65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15f69:	74 0f                	je     15f7a <fatfs_mount+0x21a>
        memory_free_page((uint32_t)dbr);
   15f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f6e:	83 ec 0c             	sub    $0xc,%esp
   15f71:	50                   	push   %eax
   15f72:	e8 02 af ff ff       	call   10e79 <memory_free_page>
   15f77:	83 c4 10             	add    $0x10,%esp
    }

    dev_close(dev_id);
   15f7a:	83 ec 0c             	sub    $0xc,%esp
   15f7d:	ff 75 f0             	push   -0x10(%ebp)
   15f80:	e8 37 e3 ff ff       	call   142bc <dev_close>
   15f85:	83 c4 10             	add    $0x10,%esp

    return -1;
   15f88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

} 
   15f8d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15f90:	5b                   	pop    %ebx
   15f91:	5e                   	pop    %esi
   15f92:	5d                   	pop    %ebp
   15f93:	c3                   	ret    

00015f94 <fatfs_unmount>:
/**
 * @brief 卸载fat文件系统
 * 
 * @param fs 
 */
void fatfs_unmount(struct _fs_t *fs) {
   15f94:	55                   	push   %ebp
   15f95:	89 e5                	mov    %esp,%ebp
   15f97:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   15f9a:	8b 45 08             	mov    0x8(%ebp),%eax
   15f9d:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   15fa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dev_close(fs->dev_id);
   15fa6:	8b 45 08             	mov    0x8(%ebp),%eax
   15fa9:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   15faf:	83 ec 0c             	sub    $0xc,%esp
   15fb2:	50                   	push   %eax
   15fb3:	e8 04 e3 ff ff       	call   142bc <dev_close>
   15fb8:	83 c4 10             	add    $0x10,%esp

    memory_free_page((uint32_t)fat->fat_buffer);
   15fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15fbe:	8b 40 28             	mov    0x28(%eax),%eax
   15fc1:	83 ec 0c             	sub    $0xc,%esp
   15fc4:	50                   	push   %eax
   15fc5:	e8 af ae ff ff       	call   10e79 <memory_free_page>
   15fca:	83 c4 10             	add    $0x10,%esp
}
   15fcd:	90                   	nop
   15fce:	c9                   	leave  
   15fcf:	c3                   	ret    

00015fd0 <fatfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int fatfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   15fd0:	55                   	push   %ebp
   15fd1:	89 e5                	mov    %esp,%ebp
   15fd3:	83 ec 28             	sub    $0x28,%esp
    //获取fat表信息
    fat_t *fat = (fat_t*)fs->data;
   15fd6:	8b 45 08             	mov    0x8(%ebp),%eax
   15fd9:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   15fdf:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //遍历读取根目录区的目录项,按路径path匹配对应目录项
    diritem_t *file_item = (diritem_t*)0;
   15fe2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;   //记录匹配到的目录项的索引
   15fe9:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   15ff0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15ff7:	eb 5d                	jmp    16056 <fatfs_open+0x86>
        diritem_t * item = read_dir_entry(fat, i);
   15ff9:	83 ec 08             	sub    $0x8,%esp
   15ffc:	ff 75 ec             	push   -0x14(%ebp)
   15fff:	ff 75 e8             	push   -0x18(%ebp)
   16002:	e8 d4 fc ff ff       	call   15cdb <read_dir_entry>
   16007:	83 c4 10             	add    $0x10,%esp
   1600a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   1600d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16011:	75 07                	jne    1601a <fatfs_open+0x4a>
            return -1;
   16013:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16018:	eb 72                	jmp    1608c <fatfs_open+0xbc>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   1601a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1601d:	0f b6 00             	movzbl (%eax),%eax
   16020:	84 c0                	test   %al,%al
   16022:	74 41                	je     16065 <fatfs_open+0x95>
            break;
        }

        if (item->DIR_Name[0] == DIRITEM_NAEM_FREE) {
   16024:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16027:	0f b6 00             	movzbl (%eax),%eax
   1602a:	3c e5                	cmp    $0xe5,%al
   1602c:	74 23                	je     16051 <fatfs_open+0x81>
            continue;
        }

        //进行路径匹配
        if (diritem_name_match(item, path)) {
   1602e:	83 ec 08             	sub    $0x8,%esp
   16031:	ff 75 0c             	push   0xc(%ebp)
   16034:	ff 75 e4             	push   -0x1c(%ebp)
   16037:	e8 69 fc ff ff       	call   15ca5 <diritem_name_match>
   1603c:	83 c4 10             	add    $0x10,%esp
   1603f:	85 c0                	test   %eax,%eax
   16041:	74 0f                	je     16052 <fatfs_open+0x82>
            file_item = item;
   16043:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16046:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   16049:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1604c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   1604f:	eb 15                	jmp    16066 <fatfs_open+0x96>
            continue;
   16051:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16052:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16056:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16059:	8b 50 18             	mov    0x18(%eax),%edx
   1605c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1605f:	39 c2                	cmp    %eax,%edx
   16061:	77 96                	ja     15ff9 <fatfs_open+0x29>
   16063:	eb 01                	jmp    16066 <fatfs_open+0x96>
            break;
   16065:	90                   	nop
        }
    }

    //从目录项中读取文件信息到file结构中
    if (file_item) {
   16066:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1606a:	74 1b                	je     16087 <fatfs_open+0xb7>
        read_from_diritem(fat, file, file_item, p_index);
   1606c:	ff 75 f0             	push   -0x10(%ebp)
   1606f:	ff 75 f4             	push   -0xc(%ebp)
   16072:	ff 75 10             	push   0x10(%ebp)
   16075:	ff 75 e8             	push   -0x18(%ebp)
   16078:	e8 10 fb ff ff       	call   15b8d <read_from_diritem>
   1607d:	83 c4 10             	add    $0x10,%esp
        return 0;
   16080:	b8 00 00 00 00       	mov    $0x0,%eax
   16085:	eb 05                	jmp    1608c <fatfs_open+0xbc>
    }

    return -1;
   16087:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1608c:	c9                   	leave  
   1608d:	c3                   	ret    

0001608e <fatfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int fatfs_read(char *buf, int size, file_t *file) {
   1608e:	55                   	push   %ebp
   1608f:	89 e5                	mov    %esp,%ebp
   16091:	53                   	push   %ebx
   16092:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t*)file->fs->data;
   16095:	8b 45 10             	mov    0x10(%ebp),%eax
   16098:	8b 40 28             	mov    0x28(%eax),%eax
   1609b:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   160a1:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //修正读取字节数
    uint32_t nbytes = size;
   160a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   160a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   160aa:	8b 45 10             	mov    0x10(%ebp),%eax
   160ad:	8b 40 30             	mov    0x30(%eax),%eax
   160b0:	89 c2                	mov    %eax,%edx
   160b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160b5:	01 c2                	add    %eax,%edx
   160b7:	8b 45 10             	mov    0x10(%ebp),%eax
   160ba:	8b 40 38             	mov    0x38(%eax),%eax
   160bd:	39 c2                	cmp    %eax,%edx
   160bf:	76 15                	jbe    160d6 <fatfs_read+0x48>
        nbytes = file->size - file->pos;
   160c1:	8b 45 10             	mov    0x10(%ebp),%eax
   160c4:	8b 50 38             	mov    0x38(%eax),%edx
   160c7:	8b 45 10             	mov    0x10(%ebp),%eax
   160ca:	8b 40 30             	mov    0x30(%eax),%eax
   160cd:	89 c1                	mov    %eax,%ecx
   160cf:	89 d0                	mov    %edx,%eax
   160d1:	29 c8                	sub    %ecx,%eax
   160d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   160d6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  
    //读取nbytes个字节到buf中
    while (nbytes > 0) {
   160dd:	e9 40 01 00 00       	jmp    16222 <fatfs_read+0x194>
        //记录每次循环读取的字节数
        uint32_t curr_read = nbytes;
   160e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //计算当前读取位置pos在当前读取的簇中的偏移量
        uint32_t cluster_offset = file->pos % fat->cluster_bytes_size;
   160e8:	8b 45 10             	mov    0x10(%ebp),%eax
   160eb:	8b 40 30             	mov    0x30(%eax),%eax
   160ee:	89 c2                	mov    %eax,%edx
   160f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   160f3:	8b 48 20             	mov    0x20(%eax),%ecx
   160f6:	89 d0                	mov    %edx,%eax
   160f8:	ba 00 00 00 00       	mov    $0x0,%edx
   160fd:	f7 f1                	div    %ecx
   160ff:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //计算文件在该分区中的起始扇区号
        //fat文件系统中，在分区的文件数据区中，簇号从2开始编号
        //[2],[3],[4]
        uint32_t start_sector = fat->data_start_sector + (file->cblk - 2) * fat->sec_per_cluster;
   16102:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16105:	8b 50 1c             	mov    0x1c(%eax),%edx
   16108:	8b 45 10             	mov    0x10(%ebp),%eax
   1610b:	8b 40 40             	mov    0x40(%eax),%eax
   1610e:	83 e8 02             	sub    $0x2,%eax
   16111:	89 c1                	mov    %eax,%ecx
   16113:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16116:	8b 40 10             	mov    0x10(%eax),%eax
   16119:	0f af c1             	imul   %ecx,%eax
   1611c:	01 d0                	add    %edx,%eax
   1611e:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //当前读取位置刚好在簇的开头，且读取大小为一个簇，直接进行整簇读取即可
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16121:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16125:	75 4c                	jne    16173 <fatfs_read+0xe5>
   16127:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1612a:	8b 40 20             	mov    0x20(%eax),%eax
   1612d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16130:	75 41                	jne    16173 <fatfs_read+0xe5>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16132:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16135:	8b 40 10             	mov    0x10(%eax),%eax
   16138:	89 c1                	mov    %eax,%ecx
   1613a:	8b 55 e0             	mov    -0x20(%ebp),%edx
   1613d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16140:	8b 40 2c             	mov    0x2c(%eax),%eax
   16143:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16149:	51                   	push   %ecx
   1614a:	ff 75 08             	push   0x8(%ebp)
   1614d:	52                   	push   %edx
   1614e:	50                   	push   %eax
   1614f:	e8 84 e0 ff ff       	call   141d8 <dev_read>
   16154:	83 c4 10             	add    $0x10,%esp
   16157:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   1615a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   1615e:	79 08                	jns    16168 <fatfs_read+0xda>
                return total_read;
   16160:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16163:	e9 c7 00 00 00       	jmp    1622f <fatfs_read+0x1a1>
            }

            curr_read = fat->cluster_bytes_size;
   16168:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1616b:	8b 40 20             	mov    0x20(%eax),%eax
   1616e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16171:	eb 7c                	jmp    161ef <fatfs_read+0x161>
        } else {//当前读取内容需要进行跨簇读取
            if (cluster_offset + curr_read > fat->cluster_bytes_size) {
   16173:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16176:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16179:	01 c2                	add    %eax,%edx
   1617b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1617e:	8b 40 20             	mov    0x20(%eax),%eax
   16181:	39 c2                	cmp    %eax,%edx
   16183:	76 0c                	jbe    16191 <fatfs_read+0x103>
                curr_read = fat->cluster_bytes_size - cluster_offset;
   16185:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16188:	8b 40 20             	mov    0x20(%eax),%eax
   1618b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   1618e:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            //先将当前簇中的内容读取到fat_buffer中
            fat->curr_sector = start_sector;
   16191:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16194:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16197:	89 50 24             	mov    %edx,0x24(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   1619a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1619d:	8b 40 10             	mov    0x10(%eax),%eax
   161a0:	89 c3                	mov    %eax,%ebx
   161a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   161a5:	8b 48 28             	mov    0x28(%eax),%ecx
   161a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   161ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
   161ae:	8b 40 2c             	mov    0x2c(%eax),%eax
   161b1:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   161b7:	53                   	push   %ebx
   161b8:	51                   	push   %ecx
   161b9:	52                   	push   %edx
   161ba:	50                   	push   %eax
   161bb:	e8 18 e0 ff ff       	call   141d8 <dev_read>
   161c0:	83 c4 10             	add    $0x10,%esp
   161c3:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   161c6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   161ca:	79 05                	jns    161d1 <fatfs_read+0x143>
                return total_read;
   161cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   161cf:	eb 5e                	jmp    1622f <fatfs_read+0x1a1>
            }
            //再从fat_buffer中读取文件相关部分到buf中
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   161d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   161d4:	8b 55 e8             	mov    -0x18(%ebp),%edx
   161d7:	8b 4a 28             	mov    0x28(%edx),%ecx
   161da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   161dd:	01 ca                	add    %ecx,%edx
   161df:	83 ec 04             	sub    $0x4,%esp
   161e2:	50                   	push   %eax
   161e3:	52                   	push   %edx
   161e4:	ff 75 08             	push   0x8(%ebp)
   161e7:	e8 6d 1d 00 00       	call   17f59 <kernel_memcpy>
   161ec:	83 c4 10             	add    $0x10,%esp
        }
        buf += curr_read;
   161ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   161f2:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   161f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   161f8:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   161fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   161fe:	01 45 f0             	add    %eax,-0x10(%ebp)

        //移动文件的读取位置file->pos
        int err = move_file_pos(file, fat, curr_read, 0);
   16201:	6a 00                	push   $0x0
   16203:	ff 75 ec             	push   -0x14(%ebp)
   16206:	ff 75 e8             	push   -0x18(%ebp)
   16209:	ff 75 10             	push   0x10(%ebp)
   1620c:	e8 9c f8 ff ff       	call   15aad <move_file_pos>
   16211:	83 c4 10             	add    $0x10,%esp
   16214:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   16217:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   1621b:	79 05                	jns    16222 <fatfs_read+0x194>
            return total_read;
   1621d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16220:	eb 0d                	jmp    1622f <fatfs_read+0x1a1>
    while (nbytes > 0) {
   16222:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16226:	0f 85 b6 fe ff ff    	jne    160e2 <fatfs_read+0x54>
        }
    
    }
    

    return total_read;
   1622c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1622f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16232:	c9                   	leave  
   16233:	c3                   	ret    

00016234 <fatfs_write>:


int fatfs_write(char *buf, int size, file_t *file) {
   16234:	55                   	push   %ebp
   16235:	89 e5                	mov    %esp,%ebp
    return 0;
   16237:	b8 00 00 00 00       	mov    $0x0,%eax

}
   1623c:	5d                   	pop    %ebp
   1623d:	c3                   	ret    

0001623e <fatfs_close>:
void fatfs_close(file_t *file) {
   1623e:	55                   	push   %ebp
   1623f:	89 e5                	mov    %esp,%ebp

}
   16241:	90                   	nop
   16242:	5d                   	pop    %ebp
   16243:	c3                   	ret    

00016244 <fatfs_seek>:
int fatfs_seek(file_t *file, uint32_t offset, int dir) {
   16244:	55                   	push   %ebp
   16245:	89 e5                	mov    %esp,%ebp
    return 0;
   16247:	b8 00 00 00 00       	mov    $0x0,%eax

}
   1624c:	5d                   	pop    %ebp
   1624d:	c3                   	ret    

0001624e <fatfs_stat>:
int fatfs_stat(file_t *file, struct stat *st) {
   1624e:	55                   	push   %ebp
   1624f:	89 e5                	mov    %esp,%ebp
    return 0;
   16251:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16256:	5d                   	pop    %ebp
   16257:	c3                   	ret    

00016258 <fatfs_opendir>:
 * @param fs 
 * @param name 
 * @param dir 
 * @return int 
 */
int fatfs_opendir(struct _fs_t *fs, const char *name, DIR *dir) {
   16258:	55                   	push   %ebp
   16259:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   1625b:	8b 45 10             	mov    0x10(%ebp),%eax
   1625e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16264:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16269:	5d                   	pop    %ebp
   1626a:	c3                   	ret    

0001626b <fatfs_readdir>:
 * @param fs 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int fatfs_readdir(struct _fs_t *fs, DIR *dir, struct dirent *dirent) {
   1626b:	55                   	push   %ebp
   1626c:	89 e5                	mov    %esp,%ebp
   1626e:	83 ec 18             	sub    $0x18,%esp
    //获取当前fat文件系统的fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16271:	8b 45 08             	mov    0x8(%ebp),%eax
   16274:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1627a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (dir->index < fat->root_ent_cnt) {
   1627d:	e9 ae 00 00 00       	jmp    16330 <fatfs_readdir+0xc5>
        diritem_t *item = read_dir_entry(fat, dir->index);
   16282:	8b 45 0c             	mov    0xc(%ebp),%eax
   16285:	8b 00                	mov    (%eax),%eax
   16287:	83 ec 08             	sub    $0x8,%esp
   1628a:	50                   	push   %eax
   1628b:	ff 75 f4             	push   -0xc(%ebp)
   1628e:	e8 48 fa ff ff       	call   15cdb <read_dir_entry>
   16293:	83 c4 10             	add    $0x10,%esp
   16296:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16299:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1629d:	75 0a                	jne    162a9 <fatfs_readdir+0x3e>
            return -1;
   1629f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   162a4:	e9 a4 00 00 00       	jmp    1634d <fatfs_readdir+0xe2>
        }

        //已经遍历到末尾项
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   162a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162ac:	0f b6 00             	movzbl (%eax),%eax
   162af:	84 c0                	test   %al,%al
   162b1:	0f 84 90 00 00 00    	je     16347 <fatfs_readdir+0xdc>
            break;
        }

        //该目录项有效,获取目录项信息到dirent中
        if (item->DIR_Name[0] != DIRITEM_NAEM_FREE) {
   162b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162ba:	0f b6 00             	movzbl (%eax),%eax
   162bd:	3c e5                	cmp    $0xe5,%al
   162bf:	74 62                	je     16323 <fatfs_readdir+0xb8>
            file_type_t type = diritem_get_type(item);
   162c1:	83 ec 0c             	sub    $0xc,%esp
   162c4:	ff 75 f0             	push   -0x10(%ebp)
   162c7:	e8 64 f8 ff ff       	call   15b30 <diritem_get_type>
   162cc:	83 c4 10             	add    $0x10,%esp
   162cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   162d2:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   162d6:	74 06                	je     162de <fatfs_readdir+0x73>
   162d8:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   162dc:	75 45                	jne    16323 <fatfs_readdir+0xb8>
                dirent->size = item->DIR_FileSize;
   162de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162e1:	8b 40 1c             	mov    0x1c(%eax),%eax
   162e4:	89 c2                	mov    %eax,%edx
   162e6:	8b 45 10             	mov    0x10(%ebp),%eax
   162e9:	89 50 18             	mov    %edx,0x18(%eax)
                dirent->type = type;
   162ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
   162ef:	8b 45 10             	mov    0x10(%ebp),%eax
   162f2:	89 50 04             	mov    %edx,0x4(%eax)
                diritem_get_name(item, dirent->name);
   162f5:	8b 45 10             	mov    0x10(%ebp),%eax
   162f8:	83 c0 08             	add    $0x8,%eax
   162fb:	83 ec 08             	sub    $0x8,%esp
   162fe:	50                   	push   %eax
   162ff:	ff 75 f0             	push   -0x10(%ebp)
   16302:	e8 e9 f8 ff ff       	call   15bf0 <diritem_get_name>
   16307:	83 c4 10             	add    $0x10,%esp

                //记录目录项在该目录中的索引
                dirent->index = dir->index++;
   1630a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1630d:	8b 00                	mov    (%eax),%eax
   1630f:	8d 48 01             	lea    0x1(%eax),%ecx
   16312:	8b 55 0c             	mov    0xc(%ebp),%edx
   16315:	89 0a                	mov    %ecx,(%edx)
   16317:	8b 55 10             	mov    0x10(%ebp),%edx
   1631a:	89 02                	mov    %eax,(%edx)
                return 0;
   1631c:	b8 00 00 00 00       	mov    $0x0,%eax
   16321:	eb 2a                	jmp    1634d <fatfs_readdir+0xe2>
            }
        }

        //该目录项无效，继续获取下一个目录项
        dir->index++;
   16323:	8b 45 0c             	mov    0xc(%ebp),%eax
   16326:	8b 00                	mov    (%eax),%eax
   16328:	8d 50 01             	lea    0x1(%eax),%edx
   1632b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1632e:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16330:	8b 45 0c             	mov    0xc(%ebp),%eax
   16333:	8b 00                	mov    (%eax),%eax
   16335:	89 c2                	mov    %eax,%edx
   16337:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1633a:	8b 40 18             	mov    0x18(%eax),%eax
   1633d:	39 c2                	cmp    %eax,%edx
   1633f:	0f 82 3d ff ff ff    	jb     16282 <fatfs_readdir+0x17>
   16345:	eb 01                	jmp    16348 <fatfs_readdir+0xdd>
            break;
   16347:	90                   	nop
    }


    return -1;
   16348:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1634d:	c9                   	leave  
   1634e:	c3                   	ret    

0001634f <fatfs_closedir>:
 * 
 * @param fs 
 * @param dir 
 * @return int 
 */
int fatfs_closedir(struct _fs_t *fs, DIR *dir) {
   1634f:	55                   	push   %ebp
   16350:	89 e5                	mov    %esp,%ebp
 return 0;
   16352:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16357:	5d                   	pop    %ebp
   16358:	c3                   	ret    

00016359 <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   16359:	55                   	push   %ebp
   1635a:	89 e5                	mov    %esp,%ebp
   1635c:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   1635f:	83 ec 0c             	sub    $0xc,%esp
   16362:	68 c0 56 07 00       	push   $0x756c0
   16367:	e8 ab 0f 00 00       	call   17317 <mutex_init>
   1636c:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   1636f:	83 ec 04             	sub    $0x4,%esp
   16372:	68 00 40 02 00       	push   $0x24000
   16377:	6a 00                	push   $0x0
   16379:	68 c0 16 05 00       	push   $0x516c0
   1637e:	e8 25 1c 00 00       	call   17fa8 <kernel_memset>
   16383:	83 c4 10             	add    $0x10,%esp
}
   16386:	90                   	nop
   16387:	c9                   	leave  
   16388:	c3                   	ret    

00016389 <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   16389:	55                   	push   %ebp
   1638a:	89 e5                	mov    %esp,%ebp
   1638c:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   1638f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   16396:	83 ec 0c             	sub    $0xc,%esp
   16399:	68 c0 56 07 00       	push   $0x756c0
   1639e:	e8 c1 0f 00 00       	call   17364 <mutex_lock>
   163a3:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   163a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   163ad:	eb 47                	jmp    163f6 <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   163af:	8b 55 f0             	mov    -0x10(%ebp),%edx
   163b2:	89 d0                	mov    %edx,%eax
   163b4:	c1 e0 03             	shl    $0x3,%eax
   163b7:	01 d0                	add    %edx,%eax
   163b9:	c1 e0 03             	shl    $0x3,%eax
   163bc:	05 c0 16 05 00       	add    $0x516c0,%eax
   163c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   163c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   163c7:	8b 40 24             	mov    0x24(%eax),%eax
   163ca:	85 c0                	test   %eax,%eax
   163cc:	75 24                	jne    163f2 <file_alloc+0x69>
            kernel_memset(p_file, 0, sizeof(file_t));
   163ce:	83 ec 04             	sub    $0x4,%esp
   163d1:	6a 48                	push   $0x48
   163d3:	6a 00                	push   $0x0
   163d5:	ff 75 ec             	push   -0x14(%ebp)
   163d8:	e8 cb 1b 00 00       	call   17fa8 <kernel_memset>
   163dd:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   163e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   163e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
            file = p_file;
   163ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   163ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   163f0:	eb 0d                	jmp    163ff <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   163f2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   163f6:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   163fd:	7e b0                	jle    163af <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   163ff:	83 ec 0c             	sub    $0xc,%esp
   16402:	68 c0 56 07 00       	push   $0x756c0
   16407:	e8 fe 0f 00 00       	call   1740a <mutex_unlock>
   1640c:	83 c4 10             	add    $0x10,%esp
    return file;
   1640f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16412:	c9                   	leave  
   16413:	c3                   	ret    

00016414 <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   16414:	55                   	push   %ebp
   16415:	89 e5                	mov    %esp,%ebp
   16417:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   1641a:	83 ec 0c             	sub    $0xc,%esp
   1641d:	68 c0 56 07 00       	push   $0x756c0
   16422:	e8 3d 0f 00 00       	call   17364 <mutex_lock>
   16427:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   1642a:	8b 45 08             	mov    0x8(%ebp),%eax
   1642d:	8b 40 24             	mov    0x24(%eax),%eax
   16430:	85 c0                	test   %eax,%eax
   16432:	7e 0f                	jle    16443 <file_free+0x2f>
        file->ref--;
   16434:	8b 45 08             	mov    0x8(%ebp),%eax
   16437:	8b 40 24             	mov    0x24(%eax),%eax
   1643a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1643d:	8b 45 08             	mov    0x8(%ebp),%eax
   16440:	89 50 24             	mov    %edx,0x24(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   16443:	83 ec 0c             	sub    $0xc,%esp
   16446:	68 c0 56 07 00       	push   $0x756c0
   1644b:	e8 ba 0f 00 00       	call   1740a <mutex_unlock>
   16450:	83 c4 10             	add    $0x10,%esp
}
   16453:	90                   	nop
   16454:	c9                   	leave  
   16455:	c3                   	ret    

00016456 <file_inc_ref>:
/**
 * @brief 增加文件file的引用计数
 * 
 * @param file 
 */
void file_inc_ref(file_t *file) {
   16456:	55                   	push   %ebp
   16457:	89 e5                	mov    %esp,%ebp
   16459:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   1645c:	83 ec 0c             	sub    $0xc,%esp
   1645f:	68 c0 56 07 00       	push   $0x756c0
   16464:	e8 fb 0e 00 00       	call   17364 <mutex_lock>
   16469:	83 c4 10             	add    $0x10,%esp
    
    file->ref++;
   1646c:	8b 45 08             	mov    0x8(%ebp),%eax
   1646f:	8b 40 24             	mov    0x24(%eax),%eax
   16472:	8d 50 01             	lea    0x1(%eax),%edx
   16475:	8b 45 08             	mov    0x8(%ebp),%eax
   16478:	89 50 24             	mov    %edx,0x24(%eax)

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   1647b:	83 ec 0c             	sub    $0xc,%esp
   1647e:	68 c0 56 07 00       	push   $0x756c0
   16483:	e8 82 0f 00 00       	call   1740a <mutex_unlock>
   16488:	83 c4 10             	add    $0x10,%esp
   1648b:	90                   	nop
   1648c:	c9                   	leave  
   1648d:	c3                   	ret    

0001648e <list_node_next>:
static inline list_node_t *list_node_next(list_node_t *node) {
   1648e:	55                   	push   %ebp
   1648f:	89 e5                	mov    %esp,%ebp
   16491:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   16494:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16498:	75 19                	jne    164b3 <list_node_next+0x25>
   1649a:	68 e0 99 01 00       	push   $0x199e0
   1649f:	68 00 9c 01 00       	push   $0x19c00
   164a4:	6a 2b                	push   $0x2b
   164a6:	68 f8 99 01 00       	push   $0x199f8
   164ab:	e8 df 15 00 00       	call   17a8f <pannic>
   164b0:	83 c4 10             	add    $0x10,%esp
    return node->next;
   164b3:	8b 45 08             	mov    0x8(%ebp),%eax
   164b6:	8b 40 04             	mov    0x4(%eax),%eax
}
   164b9:	c9                   	leave  
   164ba:	c3                   	ret    

000164bb <list_init>:
static inline void list_init(list_t *list) {
   164bb:	55                   	push   %ebp
   164bc:	89 e5                	mov    %esp,%ebp
   164be:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   164c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   164c5:	75 19                	jne    164e0 <list_init+0x25>
   164c7:	68 36 9a 01 00       	push   $0x19a36
   164cc:	68 1c 9c 01 00       	push   $0x19c1c
   164d1:	6a 31                	push   $0x31
   164d3:	68 f8 99 01 00       	push   $0x199f8
   164d8:	e8 b2 15 00 00       	call   17a8f <pannic>
   164dd:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   164e0:	8b 45 08             	mov    0x8(%ebp),%eax
   164e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   164ea:	8b 45 08             	mov    0x8(%ebp),%eax
   164ed:	8b 50 04             	mov    0x4(%eax),%edx
   164f0:	8b 45 08             	mov    0x8(%ebp),%eax
   164f3:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   164f5:	8b 45 08             	mov    0x8(%ebp),%eax
   164f8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   164ff:	90                   	nop
   16500:	c9                   	leave  
   16501:	c3                   	ret    

00016502 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   16502:	55                   	push   %ebp
   16503:	89 e5                	mov    %esp,%ebp
   16505:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16508:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1650c:	75 19                	jne    16527 <list_get_first+0x25>
   1650e:	68 36 9a 01 00       	push   $0x19a36
   16513:	68 f0 9b 01 00       	push   $0x19bf0
   16518:	6a 44                	push   $0x44
   1651a:	68 f8 99 01 00       	push   $0x199f8
   1651f:	e8 6b 15 00 00       	call   17a8f <pannic>
   16524:	83 c4 10             	add    $0x10,%esp
    return list->first;
   16527:	8b 45 08             	mov    0x8(%ebp),%eax
   1652a:	8b 00                	mov    (%eax),%eax
}
   1652c:	c9                   	leave  
   1652d:	c3                   	ret    

0001652e <is_fd_bad>:
 * @brief 检验文件描述符fd是否有效
 *
 * @param fd
 * @return int
 */
static int is_fd_bad(int fd) {
   1652e:	55                   	push   %ebp
   1652f:	89 e5                	mov    %esp,%ebp
  if (fd < 0 && fd >= TASK_OFILE_SIZE) {
   16531:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16535:	79 0d                	jns    16544 <is_fd_bad+0x16>
   16537:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1653b:	7e 07                	jle    16544 <is_fd_bad+0x16>
    return 1;
   1653d:	b8 01 00 00 00       	mov    $0x1,%eax
   16542:	eb 05                	jmp    16549 <is_fd_bad+0x1b>
  }

  return 0;
   16544:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16549:	5d                   	pop    %ebp
   1654a:	c3                   	ret    

0001654b <is_path_valid>:
 * @brief 判断文件路径是否有效
 *
 * @param path
 * @return int
 */
static int is_path_valid(const char *path) {
   1654b:	55                   	push   %ebp
   1654c:	89 e5                	mov    %esp,%ebp
  if (path == (const char *)0 || path[0] == '\0') {  // 路径无效
   1654e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16552:	74 0a                	je     1655e <is_path_valid+0x13>
   16554:	8b 45 08             	mov    0x8(%ebp),%eax
   16557:	0f b6 00             	movzbl (%eax),%eax
   1655a:	84 c0                	test   %al,%al
   1655c:	75 07                	jne    16565 <is_path_valid+0x1a>
    return 0;
   1655e:	b8 00 00 00 00       	mov    $0x0,%eax
   16563:	eb 05                	jmp    1656a <is_path_valid+0x1f>
  }

  return 1;
   16565:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1656a:	5d                   	pop    %ebp
   1656b:	c3                   	ret    

0001656c <path_next_child>:
 * @brief 获取路径path下一级路径
 *
 * @param path
 * @return const char*
 */
const char *path_next_child(const char *path) {
   1656c:	55                   	push   %ebp
   1656d:	89 e5                	mov    %esp,%ebp
   1656f:	83 ec 10             	sub    $0x10,%esp
  const char *c = path;
   16572:	8b 45 08             	mov    0x8(%ebp),%eax
   16575:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*c && (*(c++) == '/')) {
   16578:	90                   	nop
   16579:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1657c:	0f b6 00             	movzbl (%eax),%eax
   1657f:	84 c0                	test   %al,%al
   16581:	74 10                	je     16593 <path_next_child+0x27>
   16583:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16586:	8d 50 01             	lea    0x1(%eax),%edx
   16589:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1658c:	0f b6 00             	movzbl (%eax),%eax
   1658f:	3c 2f                	cmp    $0x2f,%al
   16591:	74 e6                	je     16579 <path_next_child+0xd>
  };  // 跳过第一个'/'
  while (*c && (*(c++) != '/')) {
   16593:	90                   	nop
   16594:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16597:	0f b6 00             	movzbl (%eax),%eax
   1659a:	84 c0                	test   %al,%al
   1659c:	74 10                	je     165ae <path_next_child+0x42>
   1659e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   165a1:	8d 50 01             	lea    0x1(%eax),%edx
   165a4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   165a7:	0f b6 00             	movzbl (%eax),%eax
   165aa:	3c 2f                	cmp    $0x2f,%al
   165ac:	75 e6                	jne    16594 <path_next_child+0x28>
  };  // 跳过一级目录到下一个'/'

  return *c ? c : (const char *)0;  // 返回第二个'/'后的部分
   165ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   165b1:	0f b6 00             	movzbl (%eax),%eax
   165b4:	84 c0                	test   %al,%al
   165b6:	74 05                	je     165bd <path_next_child+0x51>
   165b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   165bb:	eb 05                	jmp    165c2 <path_next_child+0x56>
   165bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   165c2:	c9                   	leave  
   165c3:	c3                   	ret    

000165c4 <path_to_num>:
 *
 * @param path
 * @param num
 * @return int
 */
int path_to_num(const char *path, int *num) {
   165c4:	55                   	push   %ebp
   165c5:	89 e5                	mov    %esp,%ebp
   165c7:	83 ec 10             	sub    $0x10,%esp
  int n = 0;
   165ca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  const char *c = path;
   165d1:	8b 45 08             	mov    0x8(%ebp),%eax
   165d4:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (*c) {
   165d7:	eb 23                	jmp    165fc <path_to_num+0x38>
    n = n * 10 + *c - '0';
   165d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
   165dc:	89 d0                	mov    %edx,%eax
   165de:	c1 e0 02             	shl    $0x2,%eax
   165e1:	01 d0                	add    %edx,%eax
   165e3:	01 c0                	add    %eax,%eax
   165e5:	89 c2                	mov    %eax,%edx
   165e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   165ea:	0f b6 00             	movzbl (%eax),%eax
   165ed:	0f be c0             	movsbl %al,%eax
   165f0:	01 d0                	add    %edx,%eax
   165f2:	83 e8 30             	sub    $0x30,%eax
   165f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    c++;
   165f8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*c) {
   165fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   165ff:	0f b6 00             	movzbl (%eax),%eax
   16602:	84 c0                	test   %al,%al
   16604:	75 d3                	jne    165d9 <path_to_num+0x15>
  }

  *num = n;
   16606:	8b 45 0c             	mov    0xc(%ebp),%eax
   16609:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1660c:	89 10                	mov    %edx,(%eax)

  return n;
   1660e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   16611:	c9                   	leave  
   16612:	c3                   	ret    

00016613 <path_begin_with>:
 *
 * @param path
 * @param str
 * @return int
 */
int path_begin_with(const char *path, const char *str) {
   16613:	55                   	push   %ebp
   16614:	89 e5                	mov    %esp,%ebp
   16616:	83 ec 10             	sub    $0x10,%esp
  const char *s1 = path, *s2 = str;
   16619:	8b 45 08             	mov    0x8(%ebp),%eax
   1661c:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1661f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16622:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   16625:	eb 08                	jmp    1662f <path_begin_with+0x1c>
    s1++;
   16627:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    s2++;
   1662b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   1662f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16632:	0f b6 00             	movzbl (%eax),%eax
   16635:	84 c0                	test   %al,%al
   16637:	74 1a                	je     16653 <path_begin_with+0x40>
   16639:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1663c:	0f b6 00             	movzbl (%eax),%eax
   1663f:	84 c0                	test   %al,%al
   16641:	74 10                	je     16653 <path_begin_with+0x40>
   16643:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16646:	0f b6 10             	movzbl (%eax),%edx
   16649:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1664c:	0f b6 00             	movzbl (%eax),%eax
   1664f:	38 c2                	cmp    %al,%dl
   16651:	74 d4                	je     16627 <path_begin_with+0x14>
  }

  return *s2 == '\0';
   16653:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16656:	0f b6 00             	movzbl (%eax),%eax
   16659:	84 c0                	test   %al,%al
   1665b:	0f 94 c0             	sete   %al
   1665e:	0f b6 c0             	movzbl %al,%eax
}
   16661:	c9                   	leave  
   16662:	c3                   	ret    

00016663 <fs_protect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_protect(fs_t *fs) {
   16663:	55                   	push   %ebp
   16664:	89 e5                	mov    %esp,%ebp
   16666:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   16669:	8b 45 08             	mov    0x8(%ebp),%eax
   1666c:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16672:	85 c0                	test   %eax,%eax
   16674:	74 15                	je     1668b <fs_protect+0x28>
    mutex_lock(fs->mutex);
   16676:	8b 45 08             	mov    0x8(%ebp),%eax
   16679:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   1667f:	83 ec 0c             	sub    $0xc,%esp
   16682:	50                   	push   %eax
   16683:	e8 dc 0c 00 00       	call   17364 <mutex_lock>
   16688:	83 c4 10             	add    $0x10,%esp
  }
}
   1668b:	90                   	nop
   1668c:	c9                   	leave  
   1668d:	c3                   	ret    

0001668e <fs_unprotect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_unprotect(fs_t *fs) {
   1668e:	55                   	push   %ebp
   1668f:	89 e5                	mov    %esp,%ebp
   16691:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   16694:	8b 45 08             	mov    0x8(%ebp),%eax
   16697:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   1669d:	85 c0                	test   %eax,%eax
   1669f:	74 15                	je     166b6 <fs_unprotect+0x28>
    mutex_unlock(fs->mutex);
   166a1:	8b 45 08             	mov    0x8(%ebp),%eax
   166a4:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   166aa:	83 ec 0c             	sub    $0xc,%esp
   166ad:	50                   	push   %eax
   166ae:	e8 57 0d 00 00       	call   1740a <mutex_unlock>
   166b3:	83 c4 10             	add    $0x10,%esp
  }
}
   166b6:	90                   	nop
   166b7:	c9                   	leave  
   166b8:	c3                   	ret    

000166b9 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ...
 * @return int 文件描述符
 */
int sys_open(const char *name, int flags, ...) {
   166b9:	55                   	push   %ebp
   166ba:	89 e5                	mov    %esp,%ebp
   166bc:	83 ec 28             	sub    $0x28,%esp
  // 1.判断路径是否有效
  if (!is_path_valid(name)) {  // 文件路径无效
   166bf:	ff 75 08             	push   0x8(%ebp)
   166c2:	e8 84 fe ff ff       	call   1654b <is_path_valid>
   166c7:	83 c4 04             	add    $0x4,%esp
   166ca:	85 c0                	test   %eax,%eax
   166cc:	75 1a                	jne    166e8 <sys_open+0x2f>
    log_printf("path is not valid\n");
   166ce:	83 ec 0c             	sub    $0xc,%esp
   166d1:	68 49 9a 01 00       	push   $0x19a49
   166d6:	e8 ca 20 00 00       	call   187a5 <log_printf>
   166db:	83 c4 10             	add    $0x10,%esp
    return -1;
   166de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   166e3:	e9 bf 01 00 00       	jmp    168a7 <sys_open+0x1ee>
  }

  if (kernel_strncmp(name, "/shell.elf", 10) == 0) {
   166e8:	83 ec 04             	sub    $0x4,%esp
   166eb:	6a 0a                	push   $0xa
   166ed:	68 5c 9a 01 00       	push   $0x19a5c
   166f2:	ff 75 08             	push   0x8(%ebp)
   166f5:	e8 a9 17 00 00       	call   17ea3 <kernel_strncmp>
   166fa:	83 c4 10             	add    $0x10,%esp
   166fd:	85 c0                	test   %eax,%eax
   166ff:	75 42                	jne    16743 <sys_open+0x8a>
    int dev_id = dev_open(DEV_DISK, 0xa0, (void*)0);
   16701:	83 ec 04             	sub    $0x4,%esp
   16704:	6a 00                	push   $0x0
   16706:	68 a0 00 00 00       	push   $0xa0
   1670b:	6a 02                	push   $0x2
   1670d:	e8 7c d9 ff ff       	call   1408e <dev_open>
   16712:	83 c4 10             	add    $0x10,%esp
   16715:	89 45 dc             	mov    %eax,-0x24(%ebp)
    dev_read(dev_id, 5000, (uint8_t *)TEMP_ADDR, 80);
   16718:	6a 50                	push   $0x50
   1671a:	68 00 00 80 07       	push   $0x7800000
   1671f:	68 88 13 00 00       	push   $0x1388
   16724:	ff 75 dc             	push   -0x24(%ebp)
   16727:	e8 ac da ff ff       	call   141d8 <dev_read>
   1672c:	83 c4 10             	add    $0x10,%esp
    temp_pos = (uint8_t *)TEMP_ADDR;
   1672f:	c7 05 08 6e 07 00 00 	movl   $0x7800000,0x76e08
   16736:	00 80 07 
    return TEMP_FILE_ID;
   16739:	b8 64 00 00 00       	mov    $0x64,%eax
   1673e:	e9 64 01 00 00       	jmp    168a7 <sys_open+0x1ee>
  }

  // 2.从系统file_table中分配一个文件结构
  file_t *file = file_alloc();
   16743:	e8 41 fc ff ff       	call   16389 <file_alloc>
   16748:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!file) {
   1674b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1674f:	75 0a                	jne    1675b <sys_open+0xa2>
    return -1;
   16751:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16756:	e9 4c 01 00 00       	jmp    168a7 <sys_open+0x1ee>
  }
  // 3.将文件结构放入当前进程的打开文件表中并得到文件描述符
  int fd = task_alloc_fd(file);
   1675b:	83 ec 0c             	sub    $0xc,%esp
   1675e:	ff 75 ec             	push   -0x14(%ebp)
   16761:	e8 83 ab ff ff       	call   112e9 <task_alloc_fd>
   16766:	83 c4 10             	add    $0x10,%esp
   16769:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (fd < 0) {  // 放入失败
   1676c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   16770:	0f 88 09 01 00 00    	js     1687f <sys_open+0x1c6>
    goto sys_open_failed;
  }

  // 遍历文件系统挂载链表mounted_list,寻找需要打开的文件对应的文件系统
  fs_t *fs = (fs_t *)0;
   16776:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  list_node_t *node = list_get_first(&mounted_list);
   1677d:	83 ec 0c             	sub    $0xc,%esp
   16780:	68 e0 56 07 00       	push   $0x756e0
   16785:	e8 78 fd ff ff       	call   16502 <list_get_first>
   1678a:	83 c4 10             	add    $0x10,%esp
   1678d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   16790:	eb 47                	jmp    167d9 <sys_open+0x120>
    fs_t *curr = list_node_parent(node, fs_t, node);
   16792:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16796:	74 0a                	je     167a2 <sys_open+0xe9>
   16798:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1679b:	2d 10 02 00 00       	sub    $0x210,%eax
   167a0:	eb 05                	jmp    167a7 <sys_open+0xee>
   167a2:	b8 00 00 00 00       	mov    $0x0,%eax
   167a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (path_begin_with(name,
                        curr->mount_point)) {  // 该文件属于curr这个文件系统
   167aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    if (path_begin_with(name,
   167ad:	83 ec 08             	sub    $0x8,%esp
   167b0:	50                   	push   %eax
   167b1:	ff 75 08             	push   0x8(%ebp)
   167b4:	e8 5a fe ff ff       	call   16613 <path_begin_with>
   167b9:	83 c4 10             	add    $0x10,%esp
   167bc:	85 c0                	test   %eax,%eax
   167be:	74 08                	je     167c8 <sys_open+0x10f>
      fs = curr;
   167c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   167c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   167c6:	eb 17                	jmp    167df <sys_open+0x126>
    }

    node = list_node_next(node);
   167c8:	83 ec 0c             	sub    $0xc,%esp
   167cb:	ff 75 f0             	push   -0x10(%ebp)
   167ce:	e8 bb fc ff ff       	call   1648e <list_node_next>
   167d3:	83 c4 10             	add    $0x10,%esp
   167d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   167d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   167dd:	75 b3                	jne    16792 <sys_open+0xd9>
  }

  if (fs) {  // 找到对应的文件系统
   167df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   167e3:	74 13                	je     167f8 <sys_open+0x13f>
    // 获取下一级路径
    name = path_next_child(name);
   167e5:	83 ec 0c             	sub    $0xc,%esp
   167e8:	ff 75 08             	push   0x8(%ebp)
   167eb:	e8 7c fd ff ff       	call   1656c <path_next_child>
   167f0:	83 c4 10             	add    $0x10,%esp
   167f3:	89 45 08             	mov    %eax,0x8(%ebp)
   167f6:	eb 08                	jmp    16800 <sys_open+0x147>
  } else {  // 未找到对应文件系统，使用默认的根文件系统
    fs = root_fs;
   167f8:	a1 04 6e 07 00       	mov    0x76e04,%eax
   167fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  // 为文件绑定模式参数和文件系统
  file->mode = flags;
   16800:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16803:	8b 55 0c             	mov    0xc(%ebp),%edx
   16806:	89 50 34             	mov    %edx,0x34(%eax)
  file->fs = fs;
   16809:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1680c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1680f:	89 50 28             	mov    %edx,0x28(%eax)
  kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   16812:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16815:	83 ec 04             	sub    $0x4,%esp
   16818:	6a 20                	push   $0x20
   1681a:	ff 75 08             	push   0x8(%ebp)
   1681d:	50                   	push   %eax
   1681e:	e8 2f 16 00 00       	call   17e52 <kernel_strncpy>
   16823:	83 c4 10             	add    $0x10,%esp

  // 使用该文件系统打开该文件
  fs_protect(fs);
   16826:	83 ec 0c             	sub    $0xc,%esp
   16829:	ff 75 f4             	push   -0xc(%ebp)
   1682c:	e8 32 fe ff ff       	call   16663 <fs_protect>
   16831:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->open(fs, name, file);
   16834:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16837:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1683d:	8b 40 08             	mov    0x8(%eax),%eax
   16840:	83 ec 04             	sub    $0x4,%esp
   16843:	ff 75 ec             	push   -0x14(%ebp)
   16846:	ff 75 08             	push   0x8(%ebp)
   16849:	ff 75 f4             	push   -0xc(%ebp)
   1684c:	ff d0                	call   *%eax
   1684e:	83 c4 10             	add    $0x10,%esp
   16851:	89 45 e0             	mov    %eax,-0x20(%ebp)
  fs_unprotect(fs);
   16854:	83 ec 0c             	sub    $0xc,%esp
   16857:	ff 75 f4             	push   -0xc(%ebp)
   1685a:	e8 2f fe ff ff       	call   1668e <fs_unprotect>
   1685f:	83 c4 10             	add    $0x10,%esp

  if (err < 0) {
   16862:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16866:	79 12                	jns    1687a <sys_open+0x1c1>
    log_printf("open failed!");
   16868:	83 ec 0c             	sub    $0xc,%esp
   1686b:	68 67 9a 01 00       	push   $0x19a67
   16870:	e8 30 1f 00 00       	call   187a5 <log_printf>
   16875:	83 c4 10             	add    $0x10,%esp
    goto sys_open_failed;
   16878:	eb 06                	jmp    16880 <sys_open+0x1c7>
  }

  // 6.返回文件描述符
  return fd;
   1687a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1687d:	eb 28                	jmp    168a7 <sys_open+0x1ee>
    goto sys_open_failed;
   1687f:	90                   	nop

// 打开失败，回收资源
sys_open_failed:
  // 释放掉已分配的file
  file_free(file);
   16880:	83 ec 0c             	sub    $0xc,%esp
   16883:	ff 75 ec             	push   -0x14(%ebp)
   16886:	e8 89 fb ff ff       	call   16414 <file_free>
   1688b:	83 c4 10             	add    $0x10,%esp
  if (fd >= 0) {  // 释放掉已分配的打开文件表的资源
   1688e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   16892:	78 0e                	js     168a2 <sys_open+0x1e9>
    task_remove_fd(fd);
   16894:	83 ec 0c             	sub    $0xc,%esp
   16897:	ff 75 e8             	push   -0x18(%ebp)
   1689a:	e8 9d aa ff ff       	call   1133c <task_remove_fd>
   1689f:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   168a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   168a7:	c9                   	leave  
   168a8:	c3                   	ret    

000168a9 <sys_read>:
 * @param fd 文件描述符
 * @param buf 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int fd, char *buf, int len) {
   168a9:	55                   	push   %ebp
   168aa:	89 e5                	mov    %esp,%ebp
   168ac:	83 ec 18             	sub    $0x18,%esp
  if (fd == TEMP_FILE_ID) {
   168af:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   168b3:	75 2f                	jne    168e4 <sys_read+0x3b>
    kernel_memcpy(buf, temp_pos, len);
   168b5:	a1 08 6e 07 00       	mov    0x76e08,%eax
   168ba:	83 ec 04             	sub    $0x4,%esp
   168bd:	ff 75 10             	push   0x10(%ebp)
   168c0:	50                   	push   %eax
   168c1:	ff 75 0c             	push   0xc(%ebp)
   168c4:	e8 90 16 00 00       	call   17f59 <kernel_memcpy>
   168c9:	83 c4 10             	add    $0x10,%esp
    temp_pos += len;
   168cc:	8b 15 08 6e 07 00    	mov    0x76e08,%edx
   168d2:	8b 45 10             	mov    0x10(%ebp),%eax
   168d5:	01 d0                	add    %edx,%eax
   168d7:	a3 08 6e 07 00       	mov    %eax,0x76e08
    return len;
   168dc:	8b 45 10             	mov    0x10(%ebp),%eax
   168df:	e9 c0 00 00 00       	jmp    169a4 <sys_read+0xfb>
  }

  if (is_fd_bad(fd) || !buf || !len) {
   168e4:	83 ec 0c             	sub    $0xc,%esp
   168e7:	ff 75 08             	push   0x8(%ebp)
   168ea:	e8 3f fc ff ff       	call   1652e <is_fd_bad>
   168ef:	83 c4 10             	add    $0x10,%esp
   168f2:	85 c0                	test   %eax,%eax
   168f4:	75 0c                	jne    16902 <sys_read+0x59>
   168f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   168fa:	74 06                	je     16902 <sys_read+0x59>
   168fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16900:	75 0a                	jne    1690c <sys_read+0x63>
    return -1;
   16902:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16907:	e9 98 00 00 00       	jmp    169a4 <sys_read+0xfb>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   1690c:	83 ec 0c             	sub    $0xc,%esp
   1690f:	ff 75 08             	push   0x8(%ebp)
   16912:	e8 a2 a9 ff ff       	call   112b9 <task_file>
   16917:	83 c4 10             	add    $0x10,%esp
   1691a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   1691d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16921:	75 17                	jne    1693a <sys_read+0x91>
    log_printf("file not opened!\n");
   16923:	83 ec 0c             	sub    $0xc,%esp
   16926:	68 74 9a 01 00       	push   $0x19a74
   1692b:	e8 75 1e 00 00       	call   187a5 <log_printf>
   16930:	83 c4 10             	add    $0x10,%esp
    return -1;
   16933:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16938:	eb 6a                	jmp    169a4 <sys_read+0xfb>
  }

  //2.判断文件的读写模式
  if (file->mode == O_WRONLY) { //文件只写，不可读
   1693a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1693d:	8b 40 34             	mov    0x34(%eax),%eax
   16940:	83 f8 01             	cmp    $0x1,%eax
   16943:	75 17                	jne    1695c <sys_read+0xb3>
    log_printf("file is write only!\n");
   16945:	83 ec 0c             	sub    $0xc,%esp
   16948:	68 86 9a 01 00       	push   $0x19a86
   1694d:	e8 53 1e 00 00       	call   187a5 <log_printf>
   16952:	83 c4 10             	add    $0x10,%esp
    return -1;
   16955:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1695a:	eb 48                	jmp    169a4 <sys_read+0xfb>
  }

  //3.获取文件对应的文件系统，并执行读操作
  fs_t *fs = file->fs;
   1695c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1695f:	8b 40 28             	mov    0x28(%eax),%eax
   16962:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   16965:	83 ec 0c             	sub    $0xc,%esp
   16968:	ff 75 f0             	push   -0x10(%ebp)
   1696b:	e8 f3 fc ff ff       	call   16663 <fs_protect>
   16970:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->read(buf, len, file);
   16973:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16976:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1697c:	8b 40 0c             	mov    0xc(%eax),%eax
   1697f:	83 ec 04             	sub    $0x4,%esp
   16982:	ff 75 f4             	push   -0xc(%ebp)
   16985:	ff 75 10             	push   0x10(%ebp)
   16988:	ff 75 0c             	push   0xc(%ebp)
   1698b:	ff d0                	call   *%eax
   1698d:	83 c4 10             	add    $0x10,%esp
   16990:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16993:	83 ec 0c             	sub    $0xc,%esp
   16996:	ff 75 f0             	push   -0x10(%ebp)
   16999:	e8 f0 fc ff ff       	call   1668e <fs_unprotect>
   1699e:	83 c4 10             	add    $0x10,%esp

  return err;
   169a1:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
   169a4:	c9                   	leave  
   169a5:	c3                   	ret    

000169a6 <sys_write>:
 * @param fd 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int fd, char *buf, int len) {
   169a6:	55                   	push   %ebp
   169a7:	89 e5                	mov    %esp,%ebp
   169a9:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd) || !buf || !len) {
   169ac:	ff 75 08             	push   0x8(%ebp)
   169af:	e8 7a fb ff ff       	call   1652e <is_fd_bad>
   169b4:	83 c4 04             	add    $0x4,%esp
   169b7:	85 c0                	test   %eax,%eax
   169b9:	75 0c                	jne    169c7 <sys_write+0x21>
   169bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   169bf:	74 06                	je     169c7 <sys_write+0x21>
   169c1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   169c5:	75 0a                	jne    169d1 <sys_write+0x2b>
    return -1;
   169c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   169cc:	e9 97 00 00 00       	jmp    16a68 <sys_write+0xc2>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   169d1:	83 ec 0c             	sub    $0xc,%esp
   169d4:	ff 75 08             	push   0x8(%ebp)
   169d7:	e8 dd a8 ff ff       	call   112b9 <task_file>
   169dc:	83 c4 10             	add    $0x10,%esp
   169df:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   169e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   169e6:	75 17                	jne    169ff <sys_write+0x59>
    log_printf("file not opened!\n");
   169e8:	83 ec 0c             	sub    $0xc,%esp
   169eb:	68 74 9a 01 00       	push   $0x19a74
   169f0:	e8 b0 1d 00 00       	call   187a5 <log_printf>
   169f5:	83 c4 10             	add    $0x10,%esp
    return -1;
   169f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   169fd:	eb 69                	jmp    16a68 <sys_write+0xc2>
  }

  //2.判断文件的读写模式
  if (file->mode == O_RDONLY) { //文件只读，不可写
   169ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16a02:	8b 40 34             	mov    0x34(%eax),%eax
   16a05:	85 c0                	test   %eax,%eax
   16a07:	75 17                	jne    16a20 <sys_write+0x7a>
    log_printf("file is read only!\n");
   16a09:	83 ec 0c             	sub    $0xc,%esp
   16a0c:	68 9b 9a 01 00       	push   $0x19a9b
   16a11:	e8 8f 1d 00 00       	call   187a5 <log_printf>
   16a16:	83 c4 10             	add    $0x10,%esp
    return -1;
   16a19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16a1e:	eb 48                	jmp    16a68 <sys_write+0xc2>
  }

  //3.获取文件对应的文件系统，并执行写操作
  fs_t *fs = file->fs;
   16a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16a23:	8b 40 28             	mov    0x28(%eax),%eax
   16a26:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   16a29:	83 ec 0c             	sub    $0xc,%esp
   16a2c:	ff 75 f0             	push   -0x10(%ebp)
   16a2f:	e8 2f fc ff ff       	call   16663 <fs_protect>
   16a34:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->write(buf, len, file);
   16a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a3a:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16a40:	8b 40 10             	mov    0x10(%eax),%eax
   16a43:	83 ec 04             	sub    $0x4,%esp
   16a46:	ff 75 f4             	push   -0xc(%ebp)
   16a49:	ff 75 10             	push   0x10(%ebp)
   16a4c:	ff 75 0c             	push   0xc(%ebp)
   16a4f:	ff d0                	call   *%eax
   16a51:	83 c4 10             	add    $0x10,%esp
   16a54:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16a57:	83 ec 0c             	sub    $0xc,%esp
   16a5a:	ff 75 f0             	push   -0x10(%ebp)
   16a5d:	e8 2c fc ff ff       	call   1668e <fs_unprotect>
   16a62:	83 c4 10             	add    $0x10,%esp
  
  return err;
   16a65:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   16a68:	c9                   	leave  
   16a69:	c3                   	ret    

00016a6a <sys_lseek>:
 * @param fd
 * @param offset
 * @param pos
 * @return int
 */
int sys_lseek(int fd, int offset, int dir) {
   16a6a:	55                   	push   %ebp
   16a6b:	89 e5                	mov    %esp,%ebp
   16a6d:	83 ec 18             	sub    $0x18,%esp
  if (fd == TEMP_FILE_ID) {
   16a70:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   16a74:	75 17                	jne    16a8d <sys_lseek+0x23>
    temp_pos = (uint8_t *)(TEMP_ADDR + offset);
   16a76:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a79:	05 00 00 80 07       	add    $0x7800000,%eax
   16a7e:	a3 08 6e 07 00       	mov    %eax,0x76e08
    return 0;
   16a83:	b8 00 00 00 00       	mov    $0x0,%eax
   16a88:	e9 8d 00 00 00       	jmp    16b1a <sys_lseek+0xb0>
  }

  if (is_fd_bad(fd)) {
   16a8d:	ff 75 08             	push   0x8(%ebp)
   16a90:	e8 99 fa ff ff       	call   1652e <is_fd_bad>
   16a95:	83 c4 04             	add    $0x4,%esp
   16a98:	85 c0                	test   %eax,%eax
   16a9a:	74 07                	je     16aa3 <sys_lseek+0x39>
    return -1;
   16a9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16aa1:	eb 77                	jmp    16b1a <sys_lseek+0xb0>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   16aa3:	83 ec 0c             	sub    $0xc,%esp
   16aa6:	ff 75 08             	push   0x8(%ebp)
   16aa9:	e8 0b a8 ff ff       	call   112b9 <task_file>
   16aae:	83 c4 10             	add    $0x10,%esp
   16ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   16ab4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16ab8:	75 17                	jne    16ad1 <sys_lseek+0x67>
    log_printf("file not opened!\n");
   16aba:	83 ec 0c             	sub    $0xc,%esp
   16abd:	68 74 9a 01 00       	push   $0x19a74
   16ac2:	e8 de 1c 00 00       	call   187a5 <log_printf>
   16ac7:	83 c4 10             	add    $0x10,%esp
    return -1;
   16aca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16acf:	eb 49                	jmp    16b1a <sys_lseek+0xb0>
  }


  //2.获取文件对应的文件系统，并执行偏移操作
  fs_t *fs = file->fs;
   16ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16ad4:	8b 40 28             	mov    0x28(%eax),%eax
   16ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   16ada:	83 ec 0c             	sub    $0xc,%esp
   16add:	ff 75 f0             	push   -0x10(%ebp)
   16ae0:	e8 7e fb ff ff       	call   16663 <fs_protect>
   16ae5:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->seek(file, offset, dir);
   16ae8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16aeb:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16af1:	8b 40 18             	mov    0x18(%eax),%eax
   16af4:	8b 55 0c             	mov    0xc(%ebp),%edx
   16af7:	83 ec 04             	sub    $0x4,%esp
   16afa:	ff 75 10             	push   0x10(%ebp)
   16afd:	52                   	push   %edx
   16afe:	ff 75 f4             	push   -0xc(%ebp)
   16b01:	ff d0                	call   *%eax
   16b03:	83 c4 10             	add    $0x10,%esp
   16b06:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16b09:	83 ec 0c             	sub    $0xc,%esp
   16b0c:	ff 75 f0             	push   -0x10(%ebp)
   16b0f:	e8 7a fb ff ff       	call   1668e <fs_unprotect>
   16b14:	83 c4 10             	add    $0x10,%esp
  
  return err;
   16b17:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   16b1a:	c9                   	leave  
   16b1b:	c3                   	ret    

00016b1c <sys_close>:
 * @brief 关闭文件
 *
 * @param fd
 * @return int
 */
int sys_close(int fd) {
   16b1c:	55                   	push   %ebp
   16b1d:	89 e5                	mov    %esp,%ebp
   16b1f:	83 ec 18             	sub    $0x18,%esp

  if (fd == TEMP_FILE_ID) {
   16b22:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   16b26:	75 0a                	jne    16b32 <sys_close+0x16>
    return 0;
   16b28:	b8 00 00 00 00       	mov    $0x0,%eax
   16b2d:	e9 f1 00 00 00       	jmp    16c23 <sys_close+0x107>
  }


  if (is_fd_bad(fd)) {
   16b32:	ff 75 08             	push   0x8(%ebp)
   16b35:	e8 f4 f9 ff ff       	call   1652e <is_fd_bad>
   16b3a:	83 c4 04             	add    $0x4,%esp
   16b3d:	85 c0                	test   %eax,%eax
   16b3f:	74 1a                	je     16b5b <sys_close+0x3f>
    log_printf("file error");
   16b41:	83 ec 0c             	sub    $0xc,%esp
   16b44:	68 af 9a 01 00       	push   $0x19aaf
   16b49:	e8 57 1c 00 00       	call   187a5 <log_printf>
   16b4e:	83 c4 10             	add    $0x10,%esp
    return -1;
   16b51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b56:	e9 c8 00 00 00       	jmp    16c23 <sys_close+0x107>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   16b5b:	83 ec 0c             	sub    $0xc,%esp
   16b5e:	ff 75 08             	push   0x8(%ebp)
   16b61:	e8 53 a7 ff ff       	call   112b9 <task_file>
   16b66:	83 c4 10             	add    $0x10,%esp
   16b69:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16b70:	75 1a                	jne    16b8c <sys_close+0x70>
    log_printf("file not opened!\n");
   16b72:	83 ec 0c             	sub    $0xc,%esp
   16b75:	68 74 9a 01 00       	push   $0x19a74
   16b7a:	e8 26 1c 00 00       	call   187a5 <log_printf>
   16b7f:	83 c4 10             	add    $0x10,%esp
    return -1;
   16b82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b87:	e9 97 00 00 00       	jmp    16c23 <sys_close+0x107>
  }

  ASSERT(file->ref > 0);  //文件必须为打开状态
   16b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16b8f:	8b 40 24             	mov    0x24(%eax),%eax
   16b92:	85 c0                	test   %eax,%eax
   16b94:	7f 1c                	jg     16bb2 <sys_close+0x96>
   16b96:	68 ba 9a 01 00       	push   $0x19aba
   16b9b:	68 10 9c 01 00       	push   $0x19c10
   16ba0:	68 73 01 00 00       	push   $0x173
   16ba5:	68 c8 9a 01 00       	push   $0x19ac8
   16baa:	e8 e0 0e 00 00       	call   17a8f <pannic>
   16baf:	83 c4 10             	add    $0x10,%esp

  //2.若当前文件只被一个进程引用则获取对应文件系统并执行关闭操作
  if (file->ref-- == 1) {
   16bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16bb5:	8b 40 24             	mov    0x24(%eax),%eax
   16bb8:	8d 48 ff             	lea    -0x1(%eax),%ecx
   16bbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   16bbe:	89 4a 24             	mov    %ecx,0x24(%edx)
   16bc1:	83 f8 01             	cmp    $0x1,%eax
   16bc4:	75 4a                	jne    16c10 <sys_close+0xf4>
    fs_t *fs = file->fs;
   16bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16bc9:	8b 40 28             	mov    0x28(%eax),%eax
   16bcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   16bcf:	83 ec 0c             	sub    $0xc,%esp
   16bd2:	ff 75 f0             	push   -0x10(%ebp)
   16bd5:	e8 89 fa ff ff       	call   16663 <fs_protect>
   16bda:	83 c4 10             	add    $0x10,%esp
    fs->op->close(file);
   16bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16be0:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16be6:	8b 40 14             	mov    0x14(%eax),%eax
   16be9:	83 ec 0c             	sub    $0xc,%esp
   16bec:	ff 75 f4             	push   -0xc(%ebp)
   16bef:	ff d0                	call   *%eax
   16bf1:	83 c4 10             	add    $0x10,%esp
    fs_protect(fs);
   16bf4:	83 ec 0c             	sub    $0xc,%esp
   16bf7:	ff 75 f0             	push   -0x10(%ebp)
   16bfa:	e8 64 fa ff ff       	call   16663 <fs_protect>
   16bff:	83 c4 10             	add    $0x10,%esp

    //关闭文件后释放文件结构
    file_free(file);
   16c02:	83 ec 0c             	sub    $0xc,%esp
   16c05:	ff 75 f4             	push   -0xc(%ebp)
   16c08:	e8 07 f8 ff ff       	call   16414 <file_free>
   16c0d:	83 c4 10             	add    $0x10,%esp
  }

  //3.当前文件还被其它进程所引用，只在当前进程的打开文件表中释放该文件即可
  task_remove_fd(fd);
   16c10:	83 ec 0c             	sub    $0xc,%esp
   16c13:	ff 75 08             	push   0x8(%ebp)
   16c16:	e8 21 a7 ff ff       	call   1133c <task_remove_fd>
   16c1b:	83 c4 10             	add    $0x10,%esp

  return 0;
   16c1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16c23:	c9                   	leave  
   16c24:	c3                   	ret    

00016c25 <sys_fstat>:
 *
 * @param fd
 * @param st
 * @return int
 */
int sys_fstat(int fd, struct stat *st) { 
   16c25:	55                   	push   %ebp
   16c26:	89 e5                	mov    %esp,%ebp
   16c28:	83 ec 18             	sub    $0x18,%esp
  
   if (is_fd_bad(fd)) {
   16c2b:	ff 75 08             	push   0x8(%ebp)
   16c2e:	e8 fb f8 ff ff       	call   1652e <is_fd_bad>
   16c33:	83 c4 04             	add    $0x4,%esp
   16c36:	85 c0                	test   %eax,%eax
   16c38:	74 1a                	je     16c54 <sys_fstat+0x2f>
    log_printf("file error");
   16c3a:	83 ec 0c             	sub    $0xc,%esp
   16c3d:	68 af 9a 01 00       	push   $0x19aaf
   16c42:	e8 5e 1b 00 00       	call   187a5 <log_printf>
   16c47:	83 c4 10             	add    $0x10,%esp
    return -1;
   16c4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c4f:	e9 85 00 00 00       	jmp    16cd9 <sys_fstat+0xb4>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   16c54:	83 ec 0c             	sub    $0xc,%esp
   16c57:	ff 75 08             	push   0x8(%ebp)
   16c5a:	e8 5a a6 ff ff       	call   112b9 <task_file>
   16c5f:	83 c4 10             	add    $0x10,%esp
   16c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16c65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16c69:	75 17                	jne    16c82 <sys_fstat+0x5d>
    log_printf("file not opened!\n");
   16c6b:	83 ec 0c             	sub    $0xc,%esp
   16c6e:	68 74 9a 01 00       	push   $0x19a74
   16c73:	e8 2d 1b 00 00       	call   187a5 <log_printf>
   16c78:	83 c4 10             	add    $0x10,%esp
    return -1;
   16c7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c80:	eb 57                	jmp    16cd9 <sys_fstat+0xb4>
  }

  //2.获取对应文件系统进行状态获取操作
  fs_t *fs = file->fs;
   16c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16c85:	8b 40 28             	mov    0x28(%eax),%eax
   16c88:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kernel_memset(st, 0, sizeof(struct stat));
   16c8b:	83 ec 04             	sub    $0x4,%esp
   16c8e:	6a 48                	push   $0x48
   16c90:	6a 00                	push   $0x0
   16c92:	ff 75 0c             	push   0xc(%ebp)
   16c95:	e8 0e 13 00 00       	call   17fa8 <kernel_memset>
   16c9a:	83 c4 10             	add    $0x10,%esp
  fs_protect(fs);
   16c9d:	83 ec 0c             	sub    $0xc,%esp
   16ca0:	ff 75 f0             	push   -0x10(%ebp)
   16ca3:	e8 bb f9 ff ff       	call   16663 <fs_protect>
   16ca8:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->stat(file, st);
   16cab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16cae:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16cb4:	8b 40 1c             	mov    0x1c(%eax),%eax
   16cb7:	83 ec 08             	sub    $0x8,%esp
   16cba:	ff 75 0c             	push   0xc(%ebp)
   16cbd:	ff 75 f4             	push   -0xc(%ebp)
   16cc0:	ff d0                	call   *%eax
   16cc2:	83 c4 10             	add    $0x10,%esp
   16cc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   16cc8:	83 ec 0c             	sub    $0xc,%esp
   16ccb:	ff 75 f0             	push   -0x10(%ebp)
   16cce:	e8 bb f9 ff ff       	call   1668e <fs_unprotect>
   16cd3:	83 c4 10             	add    $0x10,%esp


  return err;
   16cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   16cd9:	c9                   	leave  
   16cda:	c3                   	ret    

00016cdb <sys_isatty>:
 * @brief
 *
 * @param fd
 * @return int
 */
int sys_isatty(int fd) { 
   16cdb:	55                   	push   %ebp
   16cdc:	89 e5                	mov    %esp,%ebp
   16cde:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   16ce1:	ff 75 08             	push   0x8(%ebp)
   16ce4:	e8 45 f8 ff ff       	call   1652e <is_fd_bad>
   16ce9:	83 c4 04             	add    $0x4,%esp
   16cec:	85 c0                	test   %eax,%eax
   16cee:	74 17                	je     16d07 <sys_isatty+0x2c>
    log_printf("file error");
   16cf0:	83 ec 0c             	sub    $0xc,%esp
   16cf3:	68 af 9a 01 00       	push   $0x19aaf
   16cf8:	e8 a8 1a 00 00       	call   187a5 <log_printf>
   16cfd:	83 c4 10             	add    $0x10,%esp
    return -1;
   16d00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d05:	eb 3d                	jmp    16d44 <sys_isatty+0x69>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   16d07:	83 ec 0c             	sub    $0xc,%esp
   16d0a:	ff 75 08             	push   0x8(%ebp)
   16d0d:	e8 a7 a5 ff ff       	call   112b9 <task_file>
   16d12:	83 c4 10             	add    $0x10,%esp
   16d15:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16d18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16d1c:	75 17                	jne    16d35 <sys_isatty+0x5a>
    log_printf("file not opened!\n");
   16d1e:	83 ec 0c             	sub    $0xc,%esp
   16d21:	68 74 9a 01 00       	push   $0x19a74
   16d26:	e8 7a 1a 00 00       	call   187a5 <log_printf>
   16d2b:	83 c4 10             	add    $0x10,%esp
    return -1;
   16d2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d33:	eb 0f                	jmp    16d44 <sys_isatty+0x69>
  }

  return file->type == FILE_TTY;
   16d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16d38:	8b 40 20             	mov    0x20(%eax),%eax
   16d3b:	83 f8 01             	cmp    $0x1,%eax
   16d3e:	0f 94 c0             	sete   %al
   16d41:	0f b6 c0             	movzbl %al,%eax
}
   16d44:	c9                   	leave  
   16d45:	c3                   	ret    

00016d46 <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 *
 * @param fd 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int fd) {
   16d46:	55                   	push   %ebp
   16d47:	89 e5                	mov    %esp,%ebp
   16d49:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   16d4c:	ff 75 08             	push   0x8(%ebp)
   16d4f:	e8 da f7 ff ff       	call   1652e <is_fd_bad>
   16d54:	83 c4 04             	add    $0x4,%esp
   16d57:	85 c0                	test   %eax,%eax
   16d59:	74 1a                	je     16d75 <sys_dup+0x2f>
    log_printf("fd %d is not valid.", fd);
   16d5b:	83 ec 08             	sub    $0x8,%esp
   16d5e:	ff 75 08             	push   0x8(%ebp)
   16d61:	68 f9 9a 01 00       	push   $0x19af9
   16d66:	e8 3a 1a 00 00       	call   187a5 <log_printf>
   16d6b:	83 c4 10             	add    $0x10,%esp
    return -1;
   16d6e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d73:	eb 6d                	jmp    16de2 <sys_dup+0x9c>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   16d75:	83 ec 0c             	sub    $0xc,%esp
   16d78:	ff 75 08             	push   0x8(%ebp)
   16d7b:	e8 39 a5 ff ff       	call   112b9 <task_file>
   16d80:	83 c4 10             	add    $0x10,%esp
   16d83:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   16d86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16d8a:	75 17                	jne    16da3 <sys_dup+0x5d>
    log_printf("file not opend!\n");
   16d8c:	83 ec 0c             	sub    $0xc,%esp
   16d8f:	68 0d 9b 01 00       	push   $0x19b0d
   16d94:	e8 0c 1a 00 00       	call   187a5 <log_printf>
   16d99:	83 c4 10             	add    $0x10,%esp
    return -1;
   16d9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16da1:	eb 3f                	jmp    16de2 <sys_dup+0x9c>
  }

  // 2.在打开文件表中新分配一项给该文件指针
  int new_fd = task_alloc_fd(file);
   16da3:	83 ec 0c             	sub    $0xc,%esp
   16da6:	ff 75 f4             	push   -0xc(%ebp)
   16da9:	e8 3b a5 ff ff       	call   112e9 <task_alloc_fd>
   16dae:	83 c4 10             	add    $0x10,%esp
   16db1:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (new_fd < 0) {
   16db4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16db8:	79 17                	jns    16dd1 <sys_dup+0x8b>
    log_printf("no task file avaliable\n");
   16dba:	83 ec 0c             	sub    $0xc,%esp
   16dbd:	68 1e 9b 01 00       	push   $0x19b1e
   16dc2:	e8 de 19 00 00       	call   187a5 <log_printf>
   16dc7:	83 c4 10             	add    $0x10,%esp
    return -1;
   16dca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16dcf:	eb 11                	jmp    16de2 <sys_dup+0x9c>
  }

  file_inc_ref(file);  // 分配成功，该文件引用次数加一
   16dd1:	83 ec 0c             	sub    $0xc,%esp
   16dd4:	ff 75 f4             	push   -0xc(%ebp)
   16dd7:	e8 7a f6 ff ff       	call   16456 <file_inc_ref>
   16ddc:	83 c4 10             	add    $0x10,%esp
  return fd;
   16ddf:	8b 45 08             	mov    0x8(%ebp),%eax
}
   16de2:	c9                   	leave  
   16de3:	c3                   	ret    

00016de4 <sys_opendir>:
 * 
 * @param path 
 * @param dir 
 * @return int 
 */
int sys_opendir(const char *path, DIR *dir) {
   16de4:	55                   	push   %ebp
   16de5:	89 e5                	mov    %esp,%ebp
   16de7:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统打开该目录
  fs_protect(root_fs);
   16dea:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16def:	83 ec 0c             	sub    $0xc,%esp
   16df2:	50                   	push   %eax
   16df3:	e8 6b f8 ff ff       	call   16663 <fs_protect>
   16df8:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->opendir(root_fs, path, dir);
   16dfb:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16e00:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16e06:	8b 40 20             	mov    0x20(%eax),%eax
   16e09:	8b 15 04 6e 07 00    	mov    0x76e04,%edx
   16e0f:	83 ec 04             	sub    $0x4,%esp
   16e12:	ff 75 0c             	push   0xc(%ebp)
   16e15:	ff 75 08             	push   0x8(%ebp)
   16e18:	52                   	push   %edx
   16e19:	ff d0                	call   *%eax
   16e1b:	83 c4 10             	add    $0x10,%esp
   16e1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   16e21:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16e26:	83 ec 0c             	sub    $0xc,%esp
   16e29:	50                   	push   %eax
   16e2a:	e8 5f f8 ff ff       	call   1668e <fs_unprotect>
   16e2f:	83 c4 10             	add    $0x10,%esp
  return err;
   16e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16e35:	c9                   	leave  
   16e36:	c3                   	ret    

00016e37 <sys_readdir>:
 * 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int sys_readdir(DIR *dir, struct dirent *dirent) {
   16e37:	55                   	push   %ebp
   16e38:	89 e5                	mov    %esp,%ebp
   16e3a:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统遍历该目录
  fs_protect(root_fs);
   16e3d:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16e42:	83 ec 0c             	sub    $0xc,%esp
   16e45:	50                   	push   %eax
   16e46:	e8 18 f8 ff ff       	call   16663 <fs_protect>
   16e4b:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->readdir(root_fs, dir, dirent);
   16e4e:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16e53:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16e59:	8b 40 24             	mov    0x24(%eax),%eax
   16e5c:	8b 15 04 6e 07 00    	mov    0x76e04,%edx
   16e62:	83 ec 04             	sub    $0x4,%esp
   16e65:	ff 75 0c             	push   0xc(%ebp)
   16e68:	ff 75 08             	push   0x8(%ebp)
   16e6b:	52                   	push   %edx
   16e6c:	ff d0                	call   *%eax
   16e6e:	83 c4 10             	add    $0x10,%esp
   16e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   16e74:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16e79:	83 ec 0c             	sub    $0xc,%esp
   16e7c:	50                   	push   %eax
   16e7d:	e8 0c f8 ff ff       	call   1668e <fs_unprotect>
   16e82:	83 c4 10             	add    $0x10,%esp
  return err;
   16e85:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16e88:	c9                   	leave  
   16e89:	c3                   	ret    

00016e8a <sys_closedir>:
 * @brief 关闭目录
 * 
 * @param dir 
 * @return int 
 */
int sys_closedir(DIR *dir) {
   16e8a:	55                   	push   %ebp
   16e8b:	89 e5                	mov    %esp,%ebp
   16e8d:	83 ec 18             	sub    $0x18,%esp
  // 使用该文件系统关闭该目录
  fs_protect(root_fs);
   16e90:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16e95:	83 ec 0c             	sub    $0xc,%esp
   16e98:	50                   	push   %eax
   16e99:	e8 c5 f7 ff ff       	call   16663 <fs_protect>
   16e9e:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->closedir(root_fs, dir);
   16ea1:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16ea6:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   16eac:	8b 40 28             	mov    0x28(%eax),%eax
   16eaf:	8b 15 04 6e 07 00    	mov    0x76e04,%edx
   16eb5:	83 ec 08             	sub    $0x8,%esp
   16eb8:	ff 75 08             	push   0x8(%ebp)
   16ebb:	52                   	push   %edx
   16ebc:	ff d0                	call   *%eax
   16ebe:	83 c4 10             	add    $0x10,%esp
   16ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   16ec4:	a1 04 6e 07 00       	mov    0x76e04,%eax
   16ec9:	83 ec 0c             	sub    $0xc,%esp
   16ecc:	50                   	push   %eax
   16ecd:	e8 bc f7 ff ff       	call   1668e <fs_unprotect>
   16ed2:	83 c4 10             	add    $0x10,%esp
  return err;
   16ed5:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
   16ed8:	c9                   	leave  
   16ed9:	c3                   	ret    

00016eda <mount_list_init>:

/**
 * @brief 初始化free_list和mount_list
 *
 */
static void mount_list_init(void) {
   16eda:	55                   	push   %ebp
   16edb:	89 e5                	mov    %esp,%ebp
   16edd:	83 ec 18             	sub    $0x18,%esp
  list_init(&free_list);
   16ee0:	83 ec 0c             	sub    $0xc,%esp
   16ee3:	68 f8 6d 07 00       	push   $0x76df8
   16ee8:	e8 ce f5 ff ff       	call   164bb <list_init>
   16eed:	83 c4 10             	add    $0x10,%esp
  // 将全局文件系统加入到free_list，等待被挂载
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   16ef0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16ef7:	eb 28                	jmp    16f21 <mount_list_init+0x47>
    list_insert_first(&free_list, &(fs_table[i].node));
   16ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16efc:	69 c0 4c 02 00 00    	imul   $0x24c,%eax,%eax
   16f02:	05 10 02 00 00       	add    $0x210,%eax
   16f07:	05 00 57 07 00       	add    $0x75700,%eax
   16f0c:	83 ec 08             	sub    $0x8,%esp
   16f0f:	50                   	push   %eax
   16f10:	68 f8 6d 07 00       	push   $0x76df8
   16f15:	e8 13 15 00 00       	call   1842d <list_insert_first>
   16f1a:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   16f1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16f21:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   16f25:	7e d2                	jle    16ef9 <mount_list_init+0x1f>
  }

  list_init(&mounted_list);
   16f27:	83 ec 0c             	sub    $0xc,%esp
   16f2a:	68 e0 56 07 00       	push   $0x756e0
   16f2f:	e8 87 f5 ff ff       	call   164bb <list_init>
   16f34:	83 c4 10             	add    $0x10,%esp
}
   16f37:	90                   	nop
   16f38:	c9                   	leave  
   16f39:	c3                   	ret    

00016f3a <get_fs_op>:
 *
 * @param type
 * @param major
 * @return fs_op_t*
 */
static fs_op_t *get_fs_op(fs_type_t type, int major) {
   16f3a:	55                   	push   %ebp
   16f3b:	89 e5                	mov    %esp,%ebp
  switch (type) {
   16f3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16f41:	74 08                	je     16f4b <get_fs_op+0x11>
   16f43:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   16f47:	74 09                	je     16f52 <get_fs_op+0x18>
   16f49:	eb 0e                	jmp    16f59 <get_fs_op+0x1f>
    case FS_DEVFS:
      return &devfs_op;
   16f4b:	b8 00 b1 01 00       	mov    $0x1b100,%eax
   16f50:	eb 0c                	jmp    16f5e <get_fs_op+0x24>
      break;
    case FS_FAT16:
      return &fatfs_op;
   16f52:	b8 40 b1 01 00       	mov    $0x1b140,%eax
   16f57:	eb 05                	jmp    16f5e <get_fs_op+0x24>
      break;
    default:
      return 0;
   16f59:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
}
   16f5e:	5d                   	pop    %ebp
   16f5f:	c3                   	ret    

00016f60 <mount>:
 * @param dev_major 具体文件的主设备号
 * @param dev_minor 具体文件的次设备号
 * @return fs_t*
 */
static fs_t *mount(fs_type_t type, const char *mount_point, int dev_major,
                   int dev_minor) {
   16f60:	55                   	push   %ebp
   16f61:	89 e5                	mov    %esp,%ebp
   16f63:	83 ec 28             	sub    $0x28,%esp
  fs_t *fs = (fs_t *)0;
   16f66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  log_printf("mount file system, name: %s, dev: %x\n", mount_point, dev_major);
   16f6d:	83 ec 04             	sub    $0x4,%esp
   16f70:	ff 75 10             	push   0x10(%ebp)
   16f73:	ff 75 0c             	push   0xc(%ebp)
   16f76:	68 38 9b 01 00       	push   $0x19b38
   16f7b:	e8 25 18 00 00       	call   187a5 <log_printf>
   16f80:	83 c4 10             	add    $0x10,%esp

  // 1.检查当前文件系统是否已被挂载
  list_node_t *curr = list_get_first(&mounted_list);
   16f83:	83 ec 0c             	sub    $0xc,%esp
   16f86:	68 e0 56 07 00       	push   $0x756e0
   16f8b:	e8 72 f5 ff ff       	call   16502 <list_get_first>
   16f90:	83 c4 10             	add    $0x10,%esp
   16f93:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   16f96:	eb 59                	jmp    16ff1 <mount+0x91>
    fs_t *fs = list_node_parent(curr, fs_t, node);
   16f98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16f9c:	74 0a                	je     16fa8 <mount+0x48>
   16f9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16fa1:	2d 10 02 00 00       	sub    $0x210,%eax
   16fa6:	eb 05                	jmp    16fad <mount+0x4d>
   16fa8:	b8 00 00 00 00       	mov    $0x0,%eax
   16fad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE) ==
   16fb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16fb3:	83 ec 04             	sub    $0x4,%esp
   16fb6:	68 00 02 00 00       	push   $0x200
   16fbb:	ff 75 0c             	push   0xc(%ebp)
   16fbe:	50                   	push   %eax
   16fbf:	e8 df 0e 00 00       	call   17ea3 <kernel_strncmp>
   16fc4:	83 c4 10             	add    $0x10,%esp
   16fc7:	85 c0                	test   %eax,%eax
   16fc9:	75 15                	jne    16fe0 <mount+0x80>
        0) {
      log_printf("fs already mounted!\n");
   16fcb:	83 ec 0c             	sub    $0xc,%esp
   16fce:	68 5e 9b 01 00       	push   $0x19b5e
   16fd3:	e8 cd 17 00 00       	call   187a5 <log_printf>
   16fd8:	83 c4 10             	add    $0x10,%esp
      goto mount_failed;
   16fdb:	e9 11 01 00 00       	jmp    170f1 <mount+0x191>
    }

    curr = list_node_next(curr);
   16fe0:	83 ec 0c             	sub    $0xc,%esp
   16fe3:	ff 75 f0             	push   -0x10(%ebp)
   16fe6:	e8 a3 f4 ff ff       	call   1648e <list_node_next>
   16feb:	83 c4 10             	add    $0x10,%esp
   16fee:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   16ff1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16ff5:	75 a1                	jne    16f98 <mount+0x38>
  }

  // 2.从空闲链表中取下一个待挂载的fs对象进行挂载
  list_node_t *free_node = list_remove_first(&free_list);
   16ff7:	83 ec 0c             	sub    $0xc,%esp
   16ffa:	68 f8 6d 07 00       	push   $0x76df8
   16fff:	e8 43 15 00 00       	call   18547 <list_remove_first>
   17004:	83 c4 10             	add    $0x10,%esp
   17007:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!free_node) {
   1700a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1700e:	75 15                	jne    17025 <mount+0xc5>
    log_printf("no free fs, mount failed!\n");
   17010:	83 ec 0c             	sub    $0xc,%esp
   17013:	68 73 9b 01 00       	push   $0x19b73
   17018:	e8 88 17 00 00       	call   187a5 <log_printf>
   1701d:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17020:	e9 cc 00 00 00       	jmp    170f1 <mount+0x191>
  }
  fs = list_node_parent(free_node, fs_t, node);
   17025:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17029:	74 0a                	je     17035 <mount+0xd5>
   1702b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1702e:	2d 10 02 00 00       	sub    $0x210,%eax
   17033:	eb 05                	jmp    1703a <mount+0xda>
   17035:	b8 00 00 00 00       	mov    $0x0,%eax
   1703a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_memset(fs, 0, sizeof(fs_t));
   1703d:	83 ec 04             	sub    $0x4,%esp
   17040:	68 4c 02 00 00       	push   $0x24c
   17045:	6a 00                	push   $0x0
   17047:	ff 75 f4             	push   -0xc(%ebp)
   1704a:	e8 59 0f 00 00       	call   17fa8 <kernel_memset>
   1704f:	83 c4 10             	add    $0x10,%esp
  kernel_strncpy(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE);
   17052:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17055:	83 ec 04             	sub    $0x4,%esp
   17058:	68 00 02 00 00       	push   $0x200
   1705d:	ff 75 0c             	push   0xc(%ebp)
   17060:	50                   	push   %eax
   17061:	e8 ec 0d 00 00       	call   17e52 <kernel_strncpy>
   17066:	83 c4 10             	add    $0x10,%esp

  // 3.获取该fs对象的操作函数表并交给该对象
  fs_op_t *op = get_fs_op(type, dev_major);
   17069:	83 ec 08             	sub    $0x8,%esp
   1706c:	ff 75 10             	push   0x10(%ebp)
   1706f:	ff 75 08             	push   0x8(%ebp)
   17072:	e8 c3 fe ff ff       	call   16f3a <get_fs_op>
   17077:	83 c4 10             	add    $0x10,%esp
   1707a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (!op) {
   1707d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17081:	75 15                	jne    17098 <mount+0x138>
    log_printf("unsupported fs type: %du\n", type);
   17083:	83 ec 08             	sub    $0x8,%esp
   17086:	ff 75 08             	push   0x8(%ebp)
   17089:	68 8e 9b 01 00       	push   $0x19b8e
   1708e:	e8 12 17 00 00       	call   187a5 <log_printf>
   17093:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17096:	eb 59                	jmp    170f1 <mount+0x191>
  }
  fs->op = op;
   17098:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1709b:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1709e:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)

  // 4.挂载该文件系统类型下具体的设备
  if (op->mount(fs, dev_major, dev_minor) < 0) {
   170a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   170a7:	8b 00                	mov    (%eax),%eax
   170a9:	83 ec 04             	sub    $0x4,%esp
   170ac:	ff 75 14             	push   0x14(%ebp)
   170af:	ff 75 10             	push   0x10(%ebp)
   170b2:	ff 75 f4             	push   -0xc(%ebp)
   170b5:	ff d0                	call   *%eax
   170b7:	83 c4 10             	add    $0x10,%esp
   170ba:	85 c0                	test   %eax,%eax
   170bc:	79 15                	jns    170d3 <mount+0x173>
    log_printf("mount fs %s failed!\n", mount_point);
   170be:	83 ec 08             	sub    $0x8,%esp
   170c1:	ff 75 0c             	push   0xc(%ebp)
   170c4:	68 a8 9b 01 00       	push   $0x19ba8
   170c9:	e8 d7 16 00 00       	call   187a5 <log_printf>
   170ce:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   170d1:	eb 1e                	jmp    170f1 <mount+0x191>
  }

  // 5.将该文件系统挂载到mounted_list上
  list_insert_last(&mounted_list, &fs->node);
   170d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170d6:	05 10 02 00 00       	add    $0x210,%eax
   170db:	83 ec 08             	sub    $0x8,%esp
   170de:	50                   	push   %eax
   170df:	68 e0 56 07 00       	push   $0x756e0
   170e4:	e8 cf 13 00 00       	call   184b8 <list_insert_last>
   170e9:	83 c4 10             	add    $0x10,%esp

  return fs;
   170ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170ef:	eb 24                	jmp    17115 <mount+0x1b5>

// 挂载失败的异常处理
mount_failed:
  // fs不为空，证明已从free_list上取下，需要将其插回去
  if (fs) {
   170f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   170f5:	74 19                	je     17110 <mount+0x1b0>
    list_insert_last(&free_list, &fs->node);
   170f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170fa:	05 10 02 00 00       	add    $0x210,%eax
   170ff:	83 ec 08             	sub    $0x8,%esp
   17102:	50                   	push   %eax
   17103:	68 f8 6d 07 00       	push   $0x76df8
   17108:	e8 ab 13 00 00       	call   184b8 <list_insert_last>
   1710d:	83 c4 10             	add    $0x10,%esp
  }
  return (fs_t *)0;
   17110:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17115:	c9                   	leave  
   17116:	c3                   	ret    

00017117 <fs_init>:

/**
 * @brief 初始化文件系统
 *
 */
void fs_init(void) {
   17117:	55                   	push   %ebp
   17118:	89 e5                	mov    %esp,%ebp
   1711a:	83 ec 18             	sub    $0x18,%esp
  mount_list_init();
   1711d:	e8 b8 fd ff ff       	call   16eda <mount_list_init>
  file_table_init();
   17122:	e8 32 f2 ff ff       	call   16359 <file_table_init>

  disk_init();
   17127:	e8 b8 d7 ff ff       	call   148e4 <disk_init>

  fs_t *fs = mount(FS_DEVFS, "/dev", 0, 0);
   1712c:	6a 00                	push   $0x0
   1712e:	6a 00                	push   $0x0
   17130:	68 bd 9b 01 00       	push   $0x19bbd
   17135:	6a 00                	push   $0x0
   17137:	e8 24 fe ff ff       	call   16f60 <mount>
   1713c:	83 c4 10             	add    $0x10,%esp
   1713f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT(fs != (fs_t *)0);
   17142:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17146:	75 1c                	jne    17164 <fs_init+0x4d>
   17148:	68 c2 9b 01 00       	push   $0x19bc2
   1714d:	68 28 9c 01 00       	push   $0x19c28
   17152:	68 78 02 00 00       	push   $0x278
   17157:	68 c8 9a 01 00       	push   $0x19ac8
   1715c:	e8 2e 09 00 00       	call   17a8f <pannic>
   17161:	83 c4 10             	add    $0x10,%esp

  root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   17164:	68 b1 00 00 00       	push   $0xb1
   17169:	6a 02                	push   $0x2
   1716b:	68 d2 9b 01 00       	push   $0x19bd2
   17170:	6a 01                	push   $0x1
   17172:	e8 e9 fd ff ff       	call   16f60 <mount>
   17177:	83 c4 10             	add    $0x10,%esp
   1717a:	a3 04 6e 07 00       	mov    %eax,0x76e04
  ASSERT(root_fs != (fs_t *)0);
   1717f:	a1 04 6e 07 00       	mov    0x76e04,%eax
   17184:	85 c0                	test   %eax,%eax
   17186:	75 1c                	jne    171a4 <fs_init+0x8d>
   17188:	68 d8 9b 01 00       	push   $0x19bd8
   1718d:	68 28 9c 01 00       	push   $0x19c28
   17192:	68 7b 02 00 00       	push   $0x27b
   17197:	68 c8 9a 01 00       	push   $0x19ac8
   1719c:	e8 ee 08 00 00       	call   17a8f <pannic>
   171a1:	83 c4 10             	add    $0x10,%esp
}
   171a4:	90                   	nop
   171a5:	c9                   	leave  
   171a6:	c3                   	ret    

000171a7 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   171a7:	55                   	push   %ebp
   171a8:	89 e5                	mov    %esp,%ebp
   171aa:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   171ad:	8b 45 08             	mov    0x8(%ebp),%eax
   171b0:	8b 40 50             	mov    0x50(%eax),%eax
   171b3:	85 c0                	test   %eax,%eax
   171b5:	75 19                	jne    171d0 <kernel_init+0x29>
   171b7:	68 30 9c 01 00       	push   $0x19c30
   171bc:	68 cc 9c 01 00       	push   $0x19ccc
   171c1:	6a 25                	push   $0x25
   171c3:	68 54 9c 01 00       	push   $0x19c54
   171c8:	e8 c2 08 00 00       	call   17a8f <pannic>
   171cd:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   171d0:	e8 71 b6 ff ff       	call   12846 <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   171d5:	e8 1a be ff ff       	call   12ff4 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   171da:	e8 97 15 00 00       	call   18776 <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   171df:	83 ec 0c             	sub    $0xc,%esp
   171e2:	ff 75 08             	push   0x8(%ebp)
   171e5:	e8 8c 9a ff ff       	call   10c76 <memory_init>
   171ea:	83 c4 10             	add    $0x10,%esp
    
    //6.初始化文件系统
    fs_init();
   171ed:	e8 25 ff ff ff       	call   17117 <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   171f2:	e8 5d e0 ff ff       	call   15254 <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   171f7:	e8 16 a5 ff ff       	call   11712 <task_manager_init>
    
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   171fc:	90                   	nop
   171fd:	c9                   	leave  
   171fe:	c3                   	ret    

000171ff <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   171ff:	55                   	push   %ebp
   17200:	89 e5                	mov    %esp,%ebp
   17202:	56                   	push   %esi
   17203:	53                   	push   %ebx
   17204:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   17207:	e8 a5 a7 ff ff       	call   119b1 <task_current>
   1720c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1720f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17213:	75 19                	jne    1722e <move_to_first_task+0x2f>
   17215:	68 89 9c 01 00       	push   $0x19c89
   1721a:	68 d8 9c 01 00       	push   $0x19cd8
   1721f:	6a 49                	push   $0x49
   17221:	68 54 9c 01 00       	push   $0x19c54
   17226:	e8 64 08 00 00       	call   17a8f <pannic>
   1722b:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   1722e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17231:	83 c0 5c             	add    $0x5c,%eax
   17234:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   17237:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1723a:	8b 40 50             	mov    0x50(%eax),%eax
   1723d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17240:	8b 52 38             	mov    0x38(%edx),%edx
   17243:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17246:	8b 49 24             	mov    0x24(%ecx),%ecx
   17249:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1724c:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1724f:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17252:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   17255:	50                   	push   %eax
   17256:	52                   	push   %edx
   17257:	51                   	push   %ecx
   17258:	53                   	push   %ebx
   17259:	56                   	push   %esi
   1725a:	cf                   	iret   

        
    );
}
   1725b:	90                   	nop
   1725c:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1725f:	5b                   	pop    %ebx
   17260:	5e                   	pop    %esi
   17261:	5d                   	pop    %ebp
   17262:	c3                   	ret    

00017263 <init_main>:


void init_main(void) {
   17263:	55                   	push   %ebp
   17264:	89 e5                	mov    %esp,%ebp
   17266:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   17269:	83 ec 0c             	sub    $0xc,%esp
   1726c:	68 93 9c 01 00       	push   $0x19c93
   17271:	e8 2f 15 00 00       	call   187a5 <log_printf>
   17276:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: kbOS, Version: %s\n", OS_VERSION);
   17279:	83 ec 08             	sub    $0x8,%esp
   1727c:	68 ac 9c 01 00       	push   $0x19cac
   17281:	68 b2 9c 01 00       	push   $0x19cb2
   17286:	e8 1a 15 00 00       	call   187a5 <log_printf>
   1728b:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   1728e:	e8 5c a5 ff ff       	call   117ef <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   17293:	e8 67 ff ff ff       	call   171ff <move_to_first_task>
   17298:	90                   	nop
   17299:	c9                   	leave  
   1729a:	c3                   	ret    

0001729b <list_init>:
static inline void list_init(list_t *list) {
   1729b:	55                   	push   %ebp
   1729c:	89 e5                	mov    %esp,%ebp
   1729e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   172a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   172a5:	75 19                	jne    172c0 <list_init+0x25>
   172a7:	68 ec 9c 01 00       	push   $0x19cec
   172ac:	68 98 9d 01 00       	push   $0x19d98
   172b1:	6a 31                	push   $0x31
   172b3:	68 00 9d 01 00       	push   $0x19d00
   172b8:	e8 d2 07 00 00       	call   17a8f <pannic>
   172bd:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   172c0:	8b 45 08             	mov    0x8(%ebp),%eax
   172c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   172ca:	8b 45 08             	mov    0x8(%ebp),%eax
   172cd:	8b 50 04             	mov    0x4(%eax),%edx
   172d0:	8b 45 08             	mov    0x8(%ebp),%eax
   172d3:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   172d5:	8b 45 08             	mov    0x8(%ebp),%eax
   172d8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   172df:	90                   	nop
   172e0:	c9                   	leave  
   172e1:	c3                   	ret    

000172e2 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   172e2:	55                   	push   %ebp
   172e3:	89 e5                	mov    %esp,%ebp
   172e5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   172e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   172ec:	75 19                	jne    17307 <list_is_empty+0x25>
   172ee:	68 ec 9c 01 00       	push   $0x19cec
   172f3:	68 a4 9d 01 00       	push   $0x19da4
   172f8:	6a 38                	push   $0x38
   172fa:	68 00 9d 01 00       	push   $0x19d00
   172ff:	e8 8b 07 00 00       	call   17a8f <pannic>
   17304:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   17307:	8b 45 08             	mov    0x8(%ebp),%eax
   1730a:	8b 40 08             	mov    0x8(%eax),%eax
   1730d:	85 c0                	test   %eax,%eax
   1730f:	0f 94 c0             	sete   %al
   17312:	0f b6 c0             	movzbl %al,%eax
}
   17315:	c9                   	leave  
   17316:	c3                   	ret    

00017317 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   17317:	55                   	push   %ebp
   17318:	89 e5                	mov    %esp,%ebp
   1731a:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1731d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17321:	75 19                	jne    1733c <mutex_init+0x25>
   17323:	68 3e 9d 01 00       	push   $0x19d3e
   17328:	68 8c 9d 01 00       	push   $0x19d8c
   1732d:	6a 15                	push   $0x15
   1732f:	68 54 9d 01 00       	push   $0x19d54
   17334:	e8 56 07 00 00       	call   17a8f <pannic>
   17339:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   1733c:	8b 45 08             	mov    0x8(%ebp),%eax
   1733f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   17346:	8b 45 08             	mov    0x8(%ebp),%eax
   17349:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1734f:	8b 45 08             	mov    0x8(%ebp),%eax
   17352:	83 c0 08             	add    $0x8,%eax
   17355:	83 ec 0c             	sub    $0xc,%esp
   17358:	50                   	push   %eax
   17359:	e8 3d ff ff ff       	call   1729b <list_init>
   1735e:	83 c4 10             	add    $0x10,%esp
}
   17361:	90                   	nop
   17362:	c9                   	leave  
   17363:	c3                   	ret    

00017364 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   17364:	55                   	push   %ebp
   17365:	89 e5                	mov    %esp,%ebp
   17367:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1736a:	e8 b5 bf ff ff       	call   13324 <idt_enter_protection>
   1736f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   17372:	e8 3a a6 ff ff       	call   119b1 <task_current>
   17377:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   1737a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1737e:	75 10                	jne    17390 <mutex_lock+0x2c>
    idt_leave_protection(state);  // TODO:解锁
   17380:	83 ec 0c             	sub    $0xc,%esp
   17383:	ff 75 f4             	push   -0xc(%ebp)
   17386:	e8 b1 bf ff ff       	call   1333c <idt_leave_protection>
   1738b:	83 c4 10             	add    $0x10,%esp
    return;
   1738e:	eb 78                	jmp    17408 <mutex_lock+0xa4>
  }

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   17390:	8b 45 08             	mov    0x8(%ebp),%eax
   17393:	8b 40 04             	mov    0x4(%eax),%eax
   17396:	85 c0                	test   %eax,%eax
   17398:	75 19                	jne    173b3 <mutex_lock+0x4f>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   1739a:	8b 45 08             	mov    0x8(%ebp),%eax
   1739d:	8b 40 04             	mov    0x4(%eax),%eax
   173a0:	8d 50 01             	lea    0x1(%eax),%edx
   173a3:	8b 45 08             	mov    0x8(%ebp),%eax
   173a6:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   173a9:	8b 45 08             	mov    0x8(%ebp),%eax
   173ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
   173af:	89 10                	mov    %edx,(%eax)
   173b1:	eb 47                	jmp    173fa <mutex_lock+0x96>
  } else if (mutex->owner == curr) {
   173b3:	8b 45 08             	mov    0x8(%ebp),%eax
   173b6:	8b 00                	mov    (%eax),%eax
   173b8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   173bb:	75 11                	jne    173ce <mutex_lock+0x6a>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   173bd:	8b 45 08             	mov    0x8(%ebp),%eax
   173c0:	8b 40 04             	mov    0x4(%eax),%eax
   173c3:	8d 50 01             	lea    0x1(%eax),%edx
   173c6:	8b 45 08             	mov    0x8(%ebp),%eax
   173c9:	89 50 04             	mov    %edx,0x4(%eax)
   173cc:	eb 2c                	jmp    173fa <mutex_lock+0x96>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   173ce:	83 ec 0c             	sub    $0xc,%esp
   173d1:	ff 75 f0             	push   -0x10(%ebp)
   173d4:	e8 68 a5 ff ff       	call   11941 <task_set_unready>
   173d9:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   173dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   173df:	8d 50 54             	lea    0x54(%eax),%edx
   173e2:	8b 45 08             	mov    0x8(%ebp),%eax
   173e5:	83 c0 08             	add    $0x8,%eax
   173e8:	83 ec 08             	sub    $0x8,%esp
   173eb:	52                   	push   %edx
   173ec:	50                   	push   %eax
   173ed:	e8 c6 10 00 00       	call   184b8 <list_insert_last>
   173f2:	83 c4 10             	add    $0x10,%esp
    task_switch();
   173f5:	e8 c1 a5 ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   173fa:	83 ec 0c             	sub    $0xc,%esp
   173fd:	ff 75 f4             	push   -0xc(%ebp)
   17400:	e8 37 bf ff ff       	call   1333c <idt_leave_protection>
   17405:	83 c4 10             	add    $0x10,%esp
}
   17408:	c9                   	leave  
   17409:	c3                   	ret    

0001740a <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   1740a:	55                   	push   %ebp
   1740b:	89 e5                	mov    %esp,%ebp
   1740d:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   17410:	e8 0f bf ff ff       	call   13324 <idt_enter_protection>
   17415:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   17418:	e8 94 a5 ff ff       	call   119b1 <task_current>
   1741d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   17420:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17424:	75 13                	jne    17439 <mutex_unlock+0x2f>
    idt_leave_protection(state);  // TODO:解锁
   17426:	83 ec 0c             	sub    $0xc,%esp
   17429:	ff 75 f4             	push   -0xc(%ebp)
   1742c:	e8 0b bf ff ff       	call   1333c <idt_leave_protection>
   17431:	83 c4 10             	add    $0x10,%esp
    return;
   17434:	e9 9f 00 00 00       	jmp    174d8 <mutex_unlock+0xce>
  }

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   17439:	8b 45 08             	mov    0x8(%ebp),%eax
   1743c:	8b 00                	mov    (%eax),%eax
   1743e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17441:	0f 85 83 00 00 00    	jne    174ca <mutex_unlock+0xc0>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   17447:	8b 45 08             	mov    0x8(%ebp),%eax
   1744a:	8b 40 04             	mov    0x4(%eax),%eax
   1744d:	8d 50 ff             	lea    -0x1(%eax),%edx
   17450:	8b 45 08             	mov    0x8(%ebp),%eax
   17453:	89 50 04             	mov    %edx,0x4(%eax)
   17456:	8b 45 08             	mov    0x8(%ebp),%eax
   17459:	8b 40 04             	mov    0x4(%eax),%eax
   1745c:	85 c0                	test   %eax,%eax
   1745e:	75 6a                	jne    174ca <mutex_unlock+0xc0>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   17460:	8b 45 08             	mov    0x8(%ebp),%eax
   17463:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   17469:	8b 45 08             	mov    0x8(%ebp),%eax
   1746c:	83 c0 08             	add    $0x8,%eax
   1746f:	83 ec 0c             	sub    $0xc,%esp
   17472:	50                   	push   %eax
   17473:	e8 6a fe ff ff       	call   172e2 <list_is_empty>
   17478:	83 c4 10             	add    $0x10,%esp
   1747b:	85 c0                	test   %eax,%eax
   1747d:	75 4b                	jne    174ca <mutex_unlock+0xc0>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1747f:	8b 45 08             	mov    0x8(%ebp),%eax
   17482:	83 c0 08             	add    $0x8,%eax
   17485:	83 ec 0c             	sub    $0xc,%esp
   17488:	50                   	push   %eax
   17489:	e8 b9 10 00 00       	call   18547 <list_remove_first>
   1748e:	83 c4 10             	add    $0x10,%esp
   17491:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   17494:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17498:	74 08                	je     174a2 <mutex_unlock+0x98>
   1749a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1749d:	83 e8 54             	sub    $0x54,%eax
   174a0:	eb 05                	jmp    174a7 <mutex_unlock+0x9d>
   174a2:	b8 00 00 00 00       	mov    $0x0,%eax
   174a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   174aa:	8b 45 08             	mov    0x8(%ebp),%eax
   174ad:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   174b4:	8b 45 08             	mov    0x8(%ebp),%eax
   174b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
   174ba:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   174bc:	83 ec 0c             	sub    $0xc,%esp
   174bf:	ff 75 e8             	push   -0x18(%ebp)
   174c2:	e8 38 a4 ff ff       	call   118ff <task_set_ready>
   174c7:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   174ca:	83 ec 0c             	sub    $0xc,%esp
   174cd:	ff 75 f4             	push   -0xc(%ebp)
   174d0:	e8 67 be ff ff       	call   1333c <idt_leave_protection>
   174d5:	83 c4 10             	add    $0x10,%esp
}
   174d8:	c9                   	leave  
   174d9:	c3                   	ret    

000174da <list_init>:
static inline void list_init(list_t *list) {
   174da:	55                   	push   %ebp
   174db:	89 e5                	mov    %esp,%ebp
   174dd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   174e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   174e4:	75 19                	jne    174ff <list_init+0x25>
   174e6:	68 b4 9d 01 00       	push   $0x19db4
   174eb:	68 58 9e 01 00       	push   $0x19e58
   174f0:	6a 31                	push   $0x31
   174f2:	68 c8 9d 01 00       	push   $0x19dc8
   174f7:	e8 93 05 00 00       	call   17a8f <pannic>
   174fc:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   174ff:	8b 45 08             	mov    0x8(%ebp),%eax
   17502:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   17509:	8b 45 08             	mov    0x8(%ebp),%eax
   1750c:	8b 50 04             	mov    0x4(%eax),%edx
   1750f:	8b 45 08             	mov    0x8(%ebp),%eax
   17512:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   17514:	8b 45 08             	mov    0x8(%ebp),%eax
   17517:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1751e:	90                   	nop
   1751f:	c9                   	leave  
   17520:	c3                   	ret    

00017521 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   17521:	55                   	push   %ebp
   17522:	89 e5                	mov    %esp,%ebp
   17524:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17527:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1752b:	75 19                	jne    17546 <list_is_empty+0x25>
   1752d:	68 b4 9d 01 00       	push   $0x19db4
   17532:	68 64 9e 01 00       	push   $0x19e64
   17537:	6a 38                	push   $0x38
   17539:	68 c8 9d 01 00       	push   $0x19dc8
   1753e:	e8 4c 05 00 00       	call   17a8f <pannic>
   17543:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   17546:	8b 45 08             	mov    0x8(%ebp),%eax
   17549:	8b 40 08             	mov    0x8(%eax),%eax
   1754c:	85 c0                	test   %eax,%eax
   1754e:	0f 94 c0             	sete   %al
   17551:	0f b6 c0             	movzbl %al,%eax
}
   17554:	c9                   	leave  
   17555:	c3                   	ret    

00017556 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   17556:	55                   	push   %ebp
   17557:	89 e5                	mov    %esp,%ebp
   17559:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   1755c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17560:	75 19                	jne    1757b <sem_init+0x25>
   17562:	68 06 9e 01 00       	push   $0x19e06
   17567:	68 4c 9e 01 00       	push   $0x19e4c
   1756c:	6a 18                	push   $0x18
   1756e:	68 18 9e 01 00       	push   $0x19e18
   17573:	e8 17 05 00 00       	call   17a8f <pannic>
   17578:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   1757b:	8b 45 08             	mov    0x8(%ebp),%eax
   1757e:	8b 55 0c             	mov    0xc(%ebp),%edx
   17581:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17583:	8b 45 08             	mov    0x8(%ebp),%eax
   17586:	83 c0 04             	add    $0x4,%eax
   17589:	83 ec 0c             	sub    $0xc,%esp
   1758c:	50                   	push   %eax
   1758d:	e8 48 ff ff ff       	call   174da <list_init>
   17592:	83 c4 10             	add    $0x10,%esp
}
   17595:	90                   	nop
   17596:	c9                   	leave  
   17597:	c3                   	ret    

00017598 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   17598:	55                   	push   %ebp
   17599:	89 e5                	mov    %esp,%ebp
   1759b:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1759e:	e8 81 bd ff ff       	call   13324 <idt_enter_protection>
   175a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   175a6:	e8 06 a4 ff ff       	call   119b1 <task_current>
   175ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   175ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   175b2:	75 10                	jne    175c4 <sem_wait+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   175b4:	83 ec 0c             	sub    $0xc,%esp
   175b7:	ff 75 f4             	push   -0xc(%ebp)
   175ba:	e8 7d bd ff ff       	call   1333c <idt_leave_protection>
   175bf:	83 c4 10             	add    $0x10,%esp
        return;
   175c2:	eb 52                	jmp    17616 <sem_wait+0x7e>
    }

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   175c4:	8b 45 08             	mov    0x8(%ebp),%eax
   175c7:	8b 00                	mov    (%eax),%eax
   175c9:	85 c0                	test   %eax,%eax
   175cb:	7e 0f                	jle    175dc <sem_wait+0x44>
        --sem->count;   
   175cd:	8b 45 08             	mov    0x8(%ebp),%eax
   175d0:	8b 00                	mov    (%eax),%eax
   175d2:	8d 50 ff             	lea    -0x1(%eax),%edx
   175d5:	8b 45 08             	mov    0x8(%ebp),%eax
   175d8:	89 10                	mov    %edx,(%eax)
   175da:	eb 2c                	jmp    17608 <sem_wait+0x70>
    } else {//没有剩余，任务进入延时队列等待信号量
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   175dc:	83 ec 0c             	sub    $0xc,%esp
   175df:	ff 75 f0             	push   -0x10(%ebp)
   175e2:	e8 5a a3 ff ff       	call   11941 <task_set_unready>
   175e7:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   175ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   175ed:	8d 50 54             	lea    0x54(%eax),%edx
   175f0:	8b 45 08             	mov    0x8(%ebp),%eax
   175f3:	83 c0 04             	add    $0x4,%eax
   175f6:	83 ec 08             	sub    $0x8,%esp
   175f9:	52                   	push   %edx
   175fa:	50                   	push   %eax
   175fb:	e8 b8 0e 00 00       	call   184b8 <list_insert_last>
   17600:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   17603:	e8 b3 a3 ff ff       	call   119bb <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   17608:	83 ec 0c             	sub    $0xc,%esp
   1760b:	ff 75 f4             	push   -0xc(%ebp)
   1760e:	e8 29 bd ff ff       	call   1333c <idt_leave_protection>
   17613:	83 c4 10             	add    $0x10,%esp
}
   17616:	c9                   	leave  
   17617:	c3                   	ret    

00017618 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   17618:	55                   	push   %ebp
   17619:	89 e5                	mov    %esp,%ebp
   1761b:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1761e:	e8 01 bd ff ff       	call   13324 <idt_enter_protection>
   17623:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   17626:	e8 86 a3 ff ff       	call   119b1 <task_current>
   1762b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   1762e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17632:	75 10                	jne    17644 <sem_notify+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   17634:	83 ec 0c             	sub    $0xc,%esp
   17637:	ff 75 f4             	push   -0xc(%ebp)
   1763a:	e8 fd bc ff ff       	call   1333c <idt_leave_protection>
   1763f:	83 c4 10             	add    $0x10,%esp
        return;
   17642:	eb 71                	jmp    176b5 <sem_notify+0x9d>
    }

    if (!list_is_empty(&sem->wait_list)) {
   17644:	8b 45 08             	mov    0x8(%ebp),%eax
   17647:	83 c0 04             	add    $0x4,%eax
   1764a:	83 ec 0c             	sub    $0xc,%esp
   1764d:	50                   	push   %eax
   1764e:	e8 ce fe ff ff       	call   17521 <list_is_empty>
   17653:	83 c4 10             	add    $0x10,%esp
   17656:	85 c0                	test   %eax,%eax
   17658:	75 40                	jne    1769a <sem_notify+0x82>
        list_node_t *node = list_remove_first(&sem->wait_list);
   1765a:	8b 45 08             	mov    0x8(%ebp),%eax
   1765d:	83 c0 04             	add    $0x4,%eax
   17660:	83 ec 0c             	sub    $0xc,%esp
   17663:	50                   	push   %eax
   17664:	e8 de 0e 00 00       	call   18547 <list_remove_first>
   17669:	83 c4 10             	add    $0x10,%esp
   1766c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   1766f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17673:	74 08                	je     1767d <sem_notify+0x65>
   17675:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17678:	83 e8 54             	sub    $0x54,%eax
   1767b:	eb 05                	jmp    17682 <sem_notify+0x6a>
   1767d:	b8 00 00 00 00       	mov    $0x0,%eax
   17682:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_set_ready(task);
   17685:	83 ec 0c             	sub    $0xc,%esp
   17688:	ff 75 e8             	push   -0x18(%ebp)
   1768b:	e8 6f a2 ff ff       	call   118ff <task_set_ready>
   17690:	83 c4 10             	add    $0x10,%esp
        task_switch();
   17693:	e8 23 a3 ff ff       	call   119bb <task_switch>
   17698:	eb 0d                	jmp    176a7 <sem_notify+0x8f>
    } else {
        sem->count++;
   1769a:	8b 45 08             	mov    0x8(%ebp),%eax
   1769d:	8b 00                	mov    (%eax),%eax
   1769f:	8d 50 01             	lea    0x1(%eax),%edx
   176a2:	8b 45 08             	mov    0x8(%ebp),%eax
   176a5:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   176a7:	83 ec 0c             	sub    $0xc,%esp
   176aa:	ff 75 f4             	push   -0xc(%ebp)
   176ad:	e8 8a bc ff ff       	call   1333c <idt_leave_protection>
   176b2:	83 c4 10             	add    $0x10,%esp

}
   176b5:	c9                   	leave  
   176b6:	c3                   	ret    

000176b7 <sem_count>:

int sem_count(sem_t *sem) {
   176b7:	55                   	push   %ebp
   176b8:	89 e5                	mov    %esp,%ebp
   176ba:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   176bd:	e8 62 bc ff ff       	call   13324 <idt_enter_protection>
   176c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   176c5:	8b 45 08             	mov    0x8(%ebp),%eax
   176c8:	8b 00                	mov    (%eax),%eax
   176ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   176cd:	83 ec 0c             	sub    $0xc,%esp
   176d0:	ff 75 f4             	push   -0xc(%ebp)
   176d3:	e8 64 bc ff ff       	call   1333c <idt_leave_protection>
   176d8:	83 c4 10             	add    $0x10,%esp

    return count;
   176db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176de:	c9                   	leave  
   176df:	c3                   	ret    

000176e0 <list_init>:
static inline void list_init(list_t *list) {
   176e0:	55                   	push   %ebp
   176e1:	89 e5                	mov    %esp,%ebp
   176e3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   176e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   176ea:	75 19                	jne    17705 <list_init+0x25>
   176ec:	68 74 9e 01 00       	push   $0x19e74
   176f1:	68 78 9f 01 00       	push   $0x19f78
   176f6:	6a 31                	push   $0x31
   176f8:	68 88 9e 01 00       	push   $0x19e88
   176fd:	e8 8d 03 00 00       	call   17a8f <pannic>
   17702:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   17705:	8b 45 08             	mov    0x8(%ebp),%eax
   17708:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1770f:	8b 45 08             	mov    0x8(%ebp),%eax
   17712:	8b 50 04             	mov    0x4(%eax),%edx
   17715:	8b 45 08             	mov    0x8(%ebp),%eax
   17718:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1771a:	8b 45 08             	mov    0x8(%ebp),%eax
   1771d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   17724:	90                   	nop
   17725:	c9                   	leave  
   17726:	c3                   	ret    

00017727 <list_get_size>:
static inline int list_get_size(list_t *list) {
   17727:	55                   	push   %ebp
   17728:	89 e5                	mov    %esp,%ebp
   1772a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1772d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17731:	75 19                	jne    1774c <list_get_size+0x25>
   17733:	68 74 9e 01 00       	push   $0x19e74
   17738:	68 84 9f 01 00       	push   $0x19f84
   1773d:	6a 3e                	push   $0x3e
   1773f:	68 88 9e 01 00       	push   $0x19e88
   17744:	e8 46 03 00 00       	call   17a8f <pannic>
   17749:	83 c4 10             	add    $0x10,%esp
    return list->size;
   1774c:	8b 45 08             	mov    0x8(%ebp),%eax
   1774f:	8b 40 08             	mov    0x8(%eax),%eax
}
   17752:	c9                   	leave  
   17753:	c3                   	ret    

00017754 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   17754:	55                   	push   %ebp
   17755:	89 e5                	mov    %esp,%ebp
   17757:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1775a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1775e:	75 19                	jne    17779 <list_get_first+0x25>
   17760:	68 74 9e 01 00       	push   $0x19e74
   17765:	68 a4 9f 01 00       	push   $0x19fa4
   1776a:	6a 44                	push   $0x44
   1776c:	68 88 9e 01 00       	push   $0x19e88
   17771:	e8 19 03 00 00       	call   17a8f <pannic>
   17776:	83 c4 10             	add    $0x10,%esp
    return list->first;
   17779:	8b 45 08             	mov    0x8(%ebp),%eax
   1777c:	8b 00                	mov    (%eax),%eax
}
   1777e:	c9                   	leave  
   1777f:	c3                   	ret    

00017780 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   17780:	55                   	push   %ebp
   17781:	89 e5                	mov    %esp,%ebp
   17783:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17786:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1778a:	75 19                	jne    177a5 <list_get_last+0x25>
   1778c:	68 74 9e 01 00       	push   $0x19e74
   17791:	68 94 9f 01 00       	push   $0x19f94
   17796:	6a 4a                	push   $0x4a
   17798:	68 88 9e 01 00       	push   $0x19e88
   1779d:	e8 ed 02 00 00       	call   17a8f <pannic>
   177a2:	83 c4 10             	add    $0x10,%esp

    return list->last;
   177a5:	8b 45 08             	mov    0x8(%ebp),%eax
   177a8:	8b 40 04             	mov    0x4(%eax),%eax
}
   177ab:	c9                   	leave  
   177ac:	c3                   	ret    

000177ad <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   177ad:	55                   	push   %ebp
   177ae:	89 e5                	mov    %esp,%ebp
   177b0:	56                   	push   %esi
   177b1:	53                   	push   %ebx
   177b2:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   177b5:	83 ec 0c             	sub    $0xc,%esp
   177b8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   177bb:	50                   	push   %eax
   177bc:	e8 1f ff ff ff       	call   176e0 <list_init>
   177c1:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   177c4:	83 ec 0c             	sub    $0xc,%esp
   177c7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   177ca:	50                   	push   %eax
   177cb:	e8 57 ff ff ff       	call   17727 <list_get_size>
   177d0:	83 c4 10             	add    $0x10,%esp
   177d3:	89 c6                	mov    %eax,%esi
   177d5:	83 ec 0c             	sub    $0xc,%esp
   177d8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   177db:	50                   	push   %eax
   177dc:	e8 9f ff ff ff       	call   17780 <list_get_last>
   177e1:	83 c4 10             	add    $0x10,%esp
   177e4:	89 c3                	mov    %eax,%ebx
   177e6:	83 ec 0c             	sub    $0xc,%esp
   177e9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   177ec:	50                   	push   %eax
   177ed:	e8 62 ff ff ff       	call   17754 <list_get_first>
   177f2:	83 c4 10             	add    $0x10,%esp
   177f5:	56                   	push   %esi
   177f6:	53                   	push   %ebx
   177f7:	50                   	push   %eax
   177f8:	68 c8 9e 01 00       	push   $0x19ec8
   177fd:	e8 a3 0f 00 00       	call   187a5 <log_printf>
   17802:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   17805:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1780c:	eb 3f                	jmp    1784d <list_test+0xa0>
        list_node_t *node = nodes + i;
   1780e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17811:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   17818:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1781b:	01 d0                	add    %edx,%eax
   1781d:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   17820:	8b 45 d0             	mov    -0x30(%ebp),%eax
   17823:	83 ec 04             	sub    $0x4,%esp
   17826:	50                   	push   %eax
   17827:	ff 75 f4             	push   -0xc(%ebp)
   1782a:	68 f0 9e 01 00       	push   $0x19ef0
   1782f:	e8 71 0f 00 00       	call   187a5 <log_printf>
   17834:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   17837:	83 ec 08             	sub    $0x8,%esp
   1783a:	ff 75 d0             	push   -0x30(%ebp)
   1783d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17840:	50                   	push   %eax
   17841:	e8 e7 0b 00 00       	call   1842d <list_insert_first>
   17846:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   17849:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1784d:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   17851:	7e bb                	jle    1780e <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   17853:	83 ec 0c             	sub    $0xc,%esp
   17856:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17859:	50                   	push   %eax
   1785a:	e8 c8 fe ff ff       	call   17727 <list_get_size>
   1785f:	83 c4 10             	add    $0x10,%esp
   17862:	89 c6                	mov    %eax,%esi
   17864:	83 ec 0c             	sub    $0xc,%esp
   17867:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1786a:	50                   	push   %eax
   1786b:	e8 10 ff ff ff       	call   17780 <list_get_last>
   17870:	83 c4 10             	add    $0x10,%esp
   17873:	89 c3                	mov    %eax,%ebx
   17875:	83 ec 0c             	sub    $0xc,%esp
   17878:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1787b:	50                   	push   %eax
   1787c:	e8 d3 fe ff ff       	call   17754 <list_get_first>
   17881:	83 c4 10             	add    $0x10,%esp
   17884:	56                   	push   %esi
   17885:	53                   	push   %ebx
   17886:	50                   	push   %eax
   17887:	68 c8 9e 01 00       	push   $0x19ec8
   1788c:	e8 14 0f 00 00       	call   187a5 <log_printf>
   17891:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   17894:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1789b:	eb 2d                	jmp    178ca <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   1789d:	83 ec 0c             	sub    $0xc,%esp
   178a0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   178a3:	50                   	push   %eax
   178a4:	e8 9e 0c 00 00       	call   18547 <list_remove_first>
   178a9:	83 c4 10             	add    $0x10,%esp
   178ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   178af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   178b2:	83 ec 04             	sub    $0x4,%esp
   178b5:	50                   	push   %eax
   178b6:	ff 75 f0             	push   -0x10(%ebp)
   178b9:	68 0f 9f 01 00       	push   $0x19f0f
   178be:	e8 e2 0e 00 00       	call   187a5 <log_printf>
   178c3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   178c6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   178ca:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   178ce:	7e cd                	jle    1789d <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   178d0:	83 ec 0c             	sub    $0xc,%esp
   178d3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   178d6:	50                   	push   %eax
   178d7:	e8 4b fe ff ff       	call   17727 <list_get_size>
   178dc:	83 c4 10             	add    $0x10,%esp
   178df:	89 c6                	mov    %eax,%esi
   178e1:	83 ec 0c             	sub    $0xc,%esp
   178e4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   178e7:	50                   	push   %eax
   178e8:	e8 93 fe ff ff       	call   17780 <list_get_last>
   178ed:	83 c4 10             	add    $0x10,%esp
   178f0:	89 c3                	mov    %eax,%ebx
   178f2:	83 ec 0c             	sub    $0xc,%esp
   178f5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   178f8:	50                   	push   %eax
   178f9:	e8 56 fe ff ff       	call   17754 <list_get_first>
   178fe:	83 c4 10             	add    $0x10,%esp
   17901:	56                   	push   %esi
   17902:	53                   	push   %ebx
   17903:	50                   	push   %eax
   17904:	68 c8 9e 01 00       	push   $0x19ec8
   17909:	e8 97 0e 00 00       	call   187a5 <log_printf>
   1790e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   17911:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   17918:	eb 3f                	jmp    17959 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1791a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1791d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   17924:	8d 45 9c             	lea    -0x64(%ebp),%eax
   17927:	01 d0                	add    %edx,%eax
   17929:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   1792c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1792f:	83 ec 04             	sub    $0x4,%esp
   17932:	50                   	push   %eax
   17933:	ff 75 ec             	push   -0x14(%ebp)
   17936:	68 26 9f 01 00       	push   $0x19f26
   1793b:	e8 65 0e 00 00       	call   187a5 <log_printf>
   17940:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   17943:	83 ec 08             	sub    $0x8,%esp
   17946:	ff 75 d8             	push   -0x28(%ebp)
   17949:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1794c:	50                   	push   %eax
   1794d:	e8 66 0b 00 00       	call   184b8 <list_insert_last>
   17952:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   17955:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   17959:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1795d:	7e bb                	jle    1791a <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1795f:	83 ec 0c             	sub    $0xc,%esp
   17962:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17965:	50                   	push   %eax
   17966:	e8 bc fd ff ff       	call   17727 <list_get_size>
   1796b:	83 c4 10             	add    $0x10,%esp
   1796e:	89 c6                	mov    %eax,%esi
   17970:	83 ec 0c             	sub    $0xc,%esp
   17973:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17976:	50                   	push   %eax
   17977:	e8 04 fe ff ff       	call   17780 <list_get_last>
   1797c:	83 c4 10             	add    $0x10,%esp
   1797f:	89 c3                	mov    %eax,%ebx
   17981:	83 ec 0c             	sub    $0xc,%esp
   17984:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17987:	50                   	push   %eax
   17988:	e8 c7 fd ff ff       	call   17754 <list_get_first>
   1798d:	83 c4 10             	add    $0x10,%esp
   17990:	56                   	push   %esi
   17991:	53                   	push   %ebx
   17992:	50                   	push   %eax
   17993:	68 c8 9e 01 00       	push   $0x19ec8
   17998:	e8 08 0e 00 00       	call   187a5 <log_printf>
   1799d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   179a0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   179a7:	eb 2d                	jmp    179d6 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   179a9:	83 ec 0c             	sub    $0xc,%esp
   179ac:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   179af:	50                   	push   %eax
   179b0:	e8 43 0c 00 00       	call   185f8 <list_remove_last>
   179b5:	83 c4 10             	add    $0x10,%esp
   179b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   179bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
   179be:	83 ec 04             	sub    $0x4,%esp
   179c1:	50                   	push   %eax
   179c2:	ff 75 e8             	push   -0x18(%ebp)
   179c5:	68 44 9f 01 00       	push   $0x19f44
   179ca:	e8 d6 0d 00 00       	call   187a5 <log_printf>
   179cf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   179d2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   179d6:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   179da:	7e cd                	jle    179a9 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   179dc:	83 ec 0c             	sub    $0xc,%esp
   179df:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   179e2:	50                   	push   %eax
   179e3:	e8 3f fd ff ff       	call   17727 <list_get_size>
   179e8:	83 c4 10             	add    $0x10,%esp
   179eb:	89 c6                	mov    %eax,%esi
   179ed:	83 ec 0c             	sub    $0xc,%esp
   179f0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   179f3:	50                   	push   %eax
   179f4:	e8 87 fd ff ff       	call   17780 <list_get_last>
   179f9:	83 c4 10             	add    $0x10,%esp
   179fc:	89 c3                	mov    %eax,%ebx
   179fe:	83 ec 0c             	sub    $0xc,%esp
   17a01:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   17a04:	50                   	push   %eax
   17a05:	e8 4a fd ff ff       	call   17754 <list_get_first>
   17a0a:	83 c4 10             	add    $0x10,%esp
   17a0d:	56                   	push   %esi
   17a0e:	53                   	push   %ebx
   17a0f:	50                   	push   %eax
   17a10:	68 c8 9e 01 00       	push   $0x19ec8
   17a15:	e8 8b 0d 00 00       	call   187a5 <log_printf>
   17a1a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   17a1d:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   17a24:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   17a2b:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   17a32:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   17a39:	8d 45 90             	lea    -0x70(%ebp),%eax
   17a3c:	83 c0 04             	add    $0x4,%eax
   17a3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   17a42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   17a46:	74 08                	je     17a50 <list_test+0x2a3>
   17a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17a4b:	83 e8 04             	sub    $0x4,%eax
   17a4e:	eb 05                	jmp    17a55 <list_test+0x2a8>
   17a50:	b8 00 00 00 00       	mov    $0x0,%eax
   17a55:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   17a58:	8d 45 90             	lea    -0x70(%ebp),%eax
   17a5b:	83 ec 08             	sub    $0x8,%esp
   17a5e:	50                   	push   %eax
   17a5f:	68 5a 9f 01 00       	push   $0x19f5a
   17a64:	e8 3c 0d 00 00       	call   187a5 <log_printf>
   17a69:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   17a6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   17a6f:	83 ec 08             	sub    $0x8,%esp
   17a72:	50                   	push   %eax
   17a73:	68 68 9f 01 00       	push   $0x19f68
   17a78:	e8 28 0d 00 00       	call   187a5 <log_printf>
   17a7d:	83 c4 10             	add    $0x10,%esp

 }
   17a80:	90                   	nop
   17a81:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17a84:	5b                   	pop    %ebx
   17a85:	5e                   	pop    %esi
   17a86:	5d                   	pop    %ebp
   17a87:	c3                   	ret    

00017a88 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   17a88:	55                   	push   %ebp
   17a89:	89 e5                	mov    %esp,%ebp
   17a8b:	f4                   	hlt    
   17a8c:	90                   	nop
   17a8d:	5d                   	pop    %ebp
   17a8e:	c3                   	ret    

00017a8f <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   17a8f:	55                   	push   %ebp
   17a90:	89 e5                	mov    %esp,%ebp
   17a92:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   17a95:	83 ec 08             	sub    $0x8,%esp
   17a98:	ff 75 14             	push   0x14(%ebp)
   17a9b:	68 b3 9f 01 00       	push   $0x19fb3
   17aa0:	e8 00 0d 00 00       	call   187a5 <log_printf>
   17aa5:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   17aa8:	ff 75 10             	push   0x10(%ebp)
   17aab:	ff 75 0c             	push   0xc(%ebp)
   17aae:	ff 75 08             	push   0x8(%ebp)
   17ab1:	68 c5 9f 01 00       	push   $0x19fc5
   17ab6:	e8 ea 0c 00 00       	call   187a5 <log_printf>
   17abb:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   17abe:	e8 c5 ff ff ff       	call   17a88 <hlt>
   17ac3:	eb f9                	jmp    17abe <pannic+0x2f>

00017ac5 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   17ac5:	55                   	push   %ebp
   17ac6:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   17ac8:	8b 45 08             	mov    0x8(%ebp),%eax
   17acb:	83 c0 07             	add    $0x7,%eax
   17ace:	8d 50 07             	lea    0x7(%eax),%edx
   17ad1:	85 c0                	test   %eax,%eax
   17ad3:	0f 48 c2             	cmovs  %edx,%eax
   17ad6:	c1 f8 03             	sar    $0x3,%eax
}
   17ad9:	5d                   	pop    %ebp
   17ada:	c3                   	ret    

00017adb <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   17adb:	55                   	push   %ebp
   17adc:	89 e5                	mov    %esp,%ebp
   17ade:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17ae1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17ae5:	75 19                	jne    17b00 <bitmap_init+0x25>
   17ae7:	68 e4 9f 01 00       	push   $0x19fe4
   17aec:	68 78 a0 01 00       	push   $0x1a078
   17af1:	6a 24                	push   $0x24
   17af3:	68 fc 9f 01 00       	push   $0x19ffc
   17af8:	e8 92 ff ff ff       	call   17a8f <pannic>
   17afd:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   17b00:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17b04:	75 19                	jne    17b1f <bitmap_init+0x44>
   17b06:	68 34 a0 01 00       	push   $0x1a034
   17b0b:	68 78 a0 01 00       	push   $0x1a078
   17b10:	6a 25                	push   $0x25
   17b12:	68 fc 9f 01 00       	push   $0x19ffc
   17b17:	e8 73 ff ff ff       	call   17a8f <pannic>
   17b1c:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   17b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   17b22:	8b 55 10             	mov    0x10(%ebp),%edx
   17b25:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   17b27:	8b 45 08             	mov    0x8(%ebp),%eax
   17b2a:	8b 55 0c             	mov    0xc(%ebp),%edx
   17b2d:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   17b30:	8b 45 08             	mov    0x8(%ebp),%eax
   17b33:	8b 00                	mov    (%eax),%eax
   17b35:	83 ec 0c             	sub    $0xc,%esp
   17b38:	50                   	push   %eax
   17b39:	e8 87 ff ff ff       	call   17ac5 <bitmap_byte_count>
   17b3e:	83 c4 10             	add    $0x10,%esp
   17b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   17b44:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17b48:	74 07                	je     17b51 <bitmap_init+0x76>
   17b4a:	ba ff 00 00 00       	mov    $0xff,%edx
   17b4f:	eb 05                	jmp    17b56 <bitmap_init+0x7b>
   17b51:	ba 00 00 00 00       	mov    $0x0,%edx
   17b56:	8b 45 08             	mov    0x8(%ebp),%eax
   17b59:	8b 40 04             	mov    0x4(%eax),%eax
   17b5c:	83 ec 04             	sub    $0x4,%esp
   17b5f:	ff 75 f4             	push   -0xc(%ebp)
   17b62:	52                   	push   %edx
   17b63:	50                   	push   %eax
   17b64:	e8 3f 04 00 00       	call   17fa8 <kernel_memset>
   17b69:	83 c4 10             	add    $0x10,%esp

}
   17b6c:	90                   	nop
   17b6d:	c9                   	leave  
   17b6e:	c3                   	ret    

00017b6f <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   17b6f:	55                   	push   %ebp
   17b70:	89 e5                	mov    %esp,%ebp
   17b72:	53                   	push   %ebx
   17b73:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17b76:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17b7a:	75 19                	jne    17b95 <bitmap_get_bit+0x26>
   17b7c:	68 e4 9f 01 00       	push   $0x19fe4
   17b81:	68 84 a0 01 00       	push   $0x1a084
   17b86:	6a 39                	push   $0x39
   17b88:	68 fc 9f 01 00       	push   $0x19ffc
   17b8d:	e8 fd fe ff ff       	call   17a8f <pannic>
   17b92:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   17b95:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17b99:	79 19                	jns    17bb4 <bitmap_get_bit+0x45>
   17b9b:	68 48 a0 01 00       	push   $0x1a048
   17ba0:	68 84 a0 01 00       	push   $0x1a084
   17ba5:	6a 3a                	push   $0x3a
   17ba7:	68 fc 9f 01 00       	push   $0x19ffc
   17bac:	e8 de fe ff ff       	call   17a8f <pannic>
   17bb1:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   17bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   17bb7:	8b 48 04             	mov    0x4(%eax),%ecx
   17bba:	8b 45 0c             	mov    0xc(%ebp),%eax
   17bbd:	8d 50 07             	lea    0x7(%eax),%edx
   17bc0:	85 c0                	test   %eax,%eax
   17bc2:	0f 48 c2             	cmovs  %edx,%eax
   17bc5:	c1 f8 03             	sar    $0x3,%eax
   17bc8:	01 c8                	add    %ecx,%eax
   17bca:	0f b6 00             	movzbl (%eax),%eax
   17bcd:	89 c3                	mov    %eax,%ebx
   17bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   17bd2:	83 e0 07             	and    $0x7,%eax
   17bd5:	ba 01 00 00 00       	mov    $0x1,%edx
   17bda:	89 c1                	mov    %eax,%ecx
   17bdc:	d3 e2                	shl    %cl,%edx
   17bde:	89 d0                	mov    %edx,%eax
   17be0:	21 d8                	and    %ebx,%eax
}
   17be2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   17be5:	c9                   	leave  
   17be6:	c3                   	ret    

00017be7 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   17be7:	55                   	push   %ebp
   17be8:	89 e5                	mov    %esp,%ebp
   17bea:	56                   	push   %esi
   17beb:	53                   	push   %ebx
   17bec:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17bef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17bf3:	75 19                	jne    17c0e <bitmap_set_bit+0x27>
   17bf5:	68 e4 9f 01 00       	push   $0x19fe4
   17bfa:	68 94 a0 01 00       	push   $0x1a094
   17bff:	6a 48                	push   $0x48
   17c01:	68 fc 9f 01 00       	push   $0x19ffc
   17c06:	e8 84 fe ff ff       	call   17a8f <pannic>
   17c0b:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   17c0e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17c12:	78 06                	js     17c1a <bitmap_set_bit+0x33>
   17c14:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17c18:	79 19                	jns    17c33 <bitmap_set_bit+0x4c>
   17c1a:	68 53 a0 01 00       	push   $0x1a053
   17c1f:	68 94 a0 01 00       	push   $0x1a094
   17c24:	6a 49                	push   $0x49
   17c26:	68 fc 9f 01 00       	push   $0x19ffc
   17c2b:	e8 5f fe ff ff       	call   17a8f <pannic>
   17c30:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   17c33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17c3a:	e9 92 00 00 00       	jmp    17cd1 <bitmap_set_bit+0xea>
        if (bit) {
   17c3f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17c43:	74 42                	je     17c87 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   17c45:	8b 45 08             	mov    0x8(%ebp),%eax
   17c48:	8b 48 04             	mov    0x4(%eax),%ecx
   17c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   17c4e:	8d 50 07             	lea    0x7(%eax),%edx
   17c51:	85 c0                	test   %eax,%eax
   17c53:	0f 48 c2             	cmovs  %edx,%eax
   17c56:	c1 f8 03             	sar    $0x3,%eax
   17c59:	89 c2                	mov    %eax,%edx
   17c5b:	89 d0                	mov    %edx,%eax
   17c5d:	01 c8                	add    %ecx,%eax
   17c5f:	0f b6 00             	movzbl (%eax),%eax
   17c62:	89 c6                	mov    %eax,%esi
   17c64:	8b 45 0c             	mov    0xc(%ebp),%eax
   17c67:	83 e0 07             	and    $0x7,%eax
   17c6a:	bb 01 00 00 00       	mov    $0x1,%ebx
   17c6f:	89 c1                	mov    %eax,%ecx
   17c71:	d3 e3                	shl    %cl,%ebx
   17c73:	89 d8                	mov    %ebx,%eax
   17c75:	89 f1                	mov    %esi,%ecx
   17c77:	09 c1                	or     %eax,%ecx
   17c79:	8b 45 08             	mov    0x8(%ebp),%eax
   17c7c:	8b 40 04             	mov    0x4(%eax),%eax
   17c7f:	01 d0                	add    %edx,%eax
   17c81:	89 ca                	mov    %ecx,%edx
   17c83:	88 10                	mov    %dl,(%eax)
   17c85:	eb 42                	jmp    17cc9 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   17c87:	8b 45 08             	mov    0x8(%ebp),%eax
   17c8a:	8b 48 04             	mov    0x4(%eax),%ecx
   17c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   17c90:	8d 50 07             	lea    0x7(%eax),%edx
   17c93:	85 c0                	test   %eax,%eax
   17c95:	0f 48 c2             	cmovs  %edx,%eax
   17c98:	c1 f8 03             	sar    $0x3,%eax
   17c9b:	89 c2                	mov    %eax,%edx
   17c9d:	89 d0                	mov    %edx,%eax
   17c9f:	01 c8                	add    %ecx,%eax
   17ca1:	0f b6 00             	movzbl (%eax),%eax
   17ca4:	89 c6                	mov    %eax,%esi
   17ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
   17ca9:	83 e0 07             	and    $0x7,%eax
   17cac:	bb 01 00 00 00       	mov    $0x1,%ebx
   17cb1:	89 c1                	mov    %eax,%ecx
   17cb3:	d3 e3                	shl    %cl,%ebx
   17cb5:	89 d8                	mov    %ebx,%eax
   17cb7:	f7 d0                	not    %eax
   17cb9:	89 f1                	mov    %esi,%ecx
   17cbb:	21 c1                	and    %eax,%ecx
   17cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   17cc0:	8b 40 04             	mov    0x4(%eax),%eax
   17cc3:	01 d0                	add    %edx,%eax
   17cc5:	89 ca                	mov    %ecx,%edx
   17cc7:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   17cc9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17ccd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   17cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17cd4:	3b 45 10             	cmp    0x10(%ebp),%eax
   17cd7:	7d 0e                	jge    17ce7 <bitmap_set_bit+0x100>
   17cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   17cdc:	8b 00                	mov    (%eax),%eax
   17cde:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17ce1:	0f 8c 58 ff ff ff    	jl     17c3f <bitmap_set_bit+0x58>
        }
    }
}
   17ce7:	90                   	nop
   17ce8:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17ceb:	5b                   	pop    %ebx
   17cec:	5e                   	pop    %esi
   17ced:	5d                   	pop    %ebp
   17cee:	c3                   	ret    

00017cef <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   17cef:	55                   	push   %ebp
   17cf0:	89 e5                	mov    %esp,%ebp
   17cf2:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   17cf5:	83 ec 08             	sub    $0x8,%esp
   17cf8:	ff 75 0c             	push   0xc(%ebp)
   17cfb:	ff 75 08             	push   0x8(%ebp)
   17cfe:	e8 6c fe ff ff       	call   17b6f <bitmap_get_bit>
   17d03:	83 c4 10             	add    $0x10,%esp
   17d06:	84 c0                	test   %al,%al
   17d08:	0f 95 c0             	setne  %al
   17d0b:	0f b6 c0             	movzbl %al,%eax
}
   17d0e:	c9                   	leave  
   17d0f:	c3                   	ret    

00017d10 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   17d10:	55                   	push   %ebp
   17d11:	89 e5                	mov    %esp,%ebp
   17d13:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   17d16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17d1a:	75 19                	jne    17d35 <bitmap_alloc_nbits+0x25>
   17d1c:	68 e4 9f 01 00       	push   $0x19fe4
   17d21:	68 a4 a0 01 00       	push   $0x1a0a4
   17d26:	6a 68                	push   $0x68
   17d28:	68 fc 9f 01 00       	push   $0x19ffc
   17d2d:	e8 5d fd ff ff       	call   17a8f <pannic>
   17d32:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   17d35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17d39:	79 19                	jns    17d54 <bitmap_alloc_nbits+0x44>
   17d3b:	68 6c a0 01 00       	push   $0x1a06c
   17d40:	68 a4 a0 01 00       	push   $0x1a0a4
   17d45:	6a 69                	push   $0x69
   17d47:	68 fc 9f 01 00       	push   $0x19ffc
   17d4c:	e8 3e fd ff ff       	call   17a8f <pannic>
   17d51:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   17d54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   17d5b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   17d62:	e9 8f 00 00 00       	jmp    17df6 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   17d67:	83 ec 08             	sub    $0x8,%esp
   17d6a:	ff 75 f4             	push   -0xc(%ebp)
   17d6d:	ff 75 08             	push   0x8(%ebp)
   17d70:	e8 fa fd ff ff       	call   17b6f <bitmap_get_bit>
   17d75:	83 c4 10             	add    $0x10,%esp
   17d78:	0f b6 c0             	movzbl %al,%eax
   17d7b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17d7e:	74 06                	je     17d86 <bitmap_alloc_nbits+0x76>
            search_index++;
   17d80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   17d84:	eb 70                	jmp    17df6 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   17d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17d89:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   17d8c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   17d93:	eb 2d                	jmp    17dc2 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   17d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17d98:	8d 50 01             	lea    0x1(%eax),%edx
   17d9b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   17d9e:	83 ec 08             	sub    $0x8,%esp
   17da1:	50                   	push   %eax
   17da2:	ff 75 08             	push   0x8(%ebp)
   17da5:	e8 c5 fd ff ff       	call   17b6f <bitmap_get_bit>
   17daa:	83 c4 10             	add    $0x10,%esp
   17dad:	0f b6 c0             	movzbl %al,%eax
   17db0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17db3:	74 09                	je     17dbe <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   17db5:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   17dbc:	eb 16                	jmp    17dd4 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   17dbe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   17dc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17dc5:	3b 45 10             	cmp    0x10(%ebp),%eax
   17dc8:	7d 0a                	jge    17dd4 <bitmap_alloc_nbits+0xc4>
   17dca:	8b 45 08             	mov    0x8(%ebp),%eax
   17dcd:	8b 00                	mov    (%eax),%eax
   17dcf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   17dd2:	7c c1                	jl     17d95 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   17dd4:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   17dd8:	74 1c                	je     17df6 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   17dda:	8b 45 0c             	mov    0xc(%ebp),%eax
   17ddd:	f7 d0                	not    %eax
   17ddf:	50                   	push   %eax
   17de0:	ff 75 10             	push   0x10(%ebp)
   17de3:	ff 75 f0             	push   -0x10(%ebp)
   17de6:	ff 75 08             	push   0x8(%ebp)
   17de9:	e8 f9 fd ff ff       	call   17be7 <bitmap_set_bit>
   17dee:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   17df1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17df4:	eb 13                	jmp    17e09 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   17df6:	8b 45 08             	mov    0x8(%ebp),%eax
   17df9:	8b 00                	mov    (%eax),%eax
   17dfb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   17dfe:	0f 8c 63 ff ff ff    	jl     17d67 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   17e04:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   17e09:	c9                   	leave  
   17e0a:	c3                   	ret    

00017e0b <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   17e0b:	55                   	push   %ebp
   17e0c:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   17e0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17e12:	74 3b                	je     17e4f <kernel_strcpy+0x44>
   17e14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17e18:	74 35                	je     17e4f <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   17e1a:	eb 17                	jmp    17e33 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   17e1c:	8b 55 0c             	mov    0xc(%ebp),%edx
   17e1f:	8d 42 01             	lea    0x1(%edx),%eax
   17e22:	89 45 0c             	mov    %eax,0xc(%ebp)
   17e25:	8b 45 08             	mov    0x8(%ebp),%eax
   17e28:	8d 48 01             	lea    0x1(%eax),%ecx
   17e2b:	89 4d 08             	mov    %ecx,0x8(%ebp)
   17e2e:	0f b6 12             	movzbl (%edx),%edx
   17e31:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   17e33:	8b 45 08             	mov    0x8(%ebp),%eax
   17e36:	0f b6 00             	movzbl (%eax),%eax
   17e39:	84 c0                	test   %al,%al
   17e3b:	74 0a                	je     17e47 <kernel_strcpy+0x3c>
   17e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   17e40:	0f b6 00             	movzbl (%eax),%eax
   17e43:	84 c0                	test   %al,%al
   17e45:	75 d5                	jne    17e1c <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   17e47:	8b 45 08             	mov    0x8(%ebp),%eax
   17e4a:	c6 00 00             	movb   $0x0,(%eax)
   17e4d:	eb 01                	jmp    17e50 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   17e4f:	90                   	nop
}
   17e50:	5d                   	pop    %ebp
   17e51:	c3                   	ret    

00017e52 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   17e52:	55                   	push   %ebp
   17e53:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   17e55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17e59:	74 45                	je     17ea0 <kernel_strncpy+0x4e>
   17e5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17e5f:	74 3f                	je     17ea0 <kernel_strncpy+0x4e>
   17e61:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17e65:	74 39                	je     17ea0 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   17e67:	eb 17                	jmp    17e80 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   17e69:	8b 55 0c             	mov    0xc(%ebp),%edx
   17e6c:	8d 42 01             	lea    0x1(%edx),%eax
   17e6f:	89 45 0c             	mov    %eax,0xc(%ebp)
   17e72:	8b 45 08             	mov    0x8(%ebp),%eax
   17e75:	8d 48 01             	lea    0x1(%eax),%ecx
   17e78:	89 4d 08             	mov    %ecx,0x8(%ebp)
   17e7b:	0f b6 12             	movzbl (%edx),%edx
   17e7e:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   17e80:	8b 45 10             	mov    0x10(%ebp),%eax
   17e83:	8d 50 ff             	lea    -0x1(%eax),%edx
   17e86:	89 55 10             	mov    %edx,0x10(%ebp)
   17e89:	83 f8 01             	cmp    $0x1,%eax
   17e8c:	7e 0a                	jle    17e98 <kernel_strncpy+0x46>
   17e8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   17e91:	0f b6 00             	movzbl (%eax),%eax
   17e94:	84 c0                	test   %al,%al
   17e96:	75 d1                	jne    17e69 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   17e98:	8b 45 08             	mov    0x8(%ebp),%eax
   17e9b:	c6 00 00             	movb   $0x0,(%eax)
   17e9e:	eb 01                	jmp    17ea1 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   17ea0:	90                   	nop
}
   17ea1:	5d                   	pop    %ebp
   17ea2:	c3                   	ret    

00017ea3 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   17ea3:	55                   	push   %ebp
   17ea4:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   17ea6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17eaa:	74 06                	je     17eb2 <kernel_strncmp+0xf>
   17eac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17eb0:	75 0f                	jne    17ec1 <kernel_strncmp+0x1e>
   17eb2:	b8 00 00 00 00       	mov    $0x0,%eax
   17eb7:	eb 69                	jmp    17f22 <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   17eb9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   17ebd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   17ec1:	8b 45 08             	mov    0x8(%ebp),%eax
   17ec4:	0f b6 00             	movzbl (%eax),%eax
   17ec7:	84 c0                	test   %al,%al
   17ec9:	74 24                	je     17eef <kernel_strncmp+0x4c>
   17ecb:	8b 45 0c             	mov    0xc(%ebp),%eax
   17ece:	0f b6 00             	movzbl (%eax),%eax
   17ed1:	84 c0                	test   %al,%al
   17ed3:	74 1a                	je     17eef <kernel_strncmp+0x4c>
   17ed5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   17ed9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17edd:	74 10                	je     17eef <kernel_strncmp+0x4c>
   17edf:	8b 45 08             	mov    0x8(%ebp),%eax
   17ee2:	0f b6 10             	movzbl (%eax),%edx
   17ee5:	8b 45 0c             	mov    0xc(%ebp),%eax
   17ee8:	0f b6 00             	movzbl (%eax),%eax
   17eeb:	38 c2                	cmp    %al,%dl
   17eed:	74 ca                	je     17eb9 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   17eef:	8b 45 08             	mov    0x8(%ebp),%eax
   17ef2:	0f b6 10             	movzbl (%eax),%edx
   17ef5:	8b 45 0c             	mov    0xc(%ebp),%eax
   17ef8:	0f b6 00             	movzbl (%eax),%eax
   17efb:	38 c2                	cmp    %al,%dl
   17efd:	7e 07                	jle    17f06 <kernel_strncmp+0x63>
    return 1;
   17eff:	b8 01 00 00 00       	mov    $0x1,%eax
   17f04:	eb 1c                	jmp    17f22 <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   17f06:	8b 45 08             	mov    0x8(%ebp),%eax
   17f09:	0f b6 10             	movzbl (%eax),%edx
   17f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f0f:	0f b6 00             	movzbl (%eax),%eax
   17f12:	38 c2                	cmp    %al,%dl
   17f14:	7d 07                	jge    17f1d <kernel_strncmp+0x7a>
    return -1;
   17f16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17f1b:	eb 05                	jmp    17f22 <kernel_strncmp+0x7f>
  } else {
    return 0;
   17f1d:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   17f22:	5d                   	pop    %ebp
   17f23:	c3                   	ret    

00017f24 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   17f24:	55                   	push   %ebp
   17f25:	89 e5                	mov    %esp,%ebp
   17f27:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   17f2a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17f2e:	75 07                	jne    17f37 <kernel_strlen+0x13>
   17f30:	b8 00 00 00 00       	mov    $0x0,%eax
   17f35:	eb 20                	jmp    17f57 <kernel_strlen+0x33>

  int len = 0;
   17f37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   17f3e:	eb 04                	jmp    17f44 <kernel_strlen+0x20>
   17f40:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   17f44:	8b 45 08             	mov    0x8(%ebp),%eax
   17f47:	8d 50 01             	lea    0x1(%eax),%edx
   17f4a:	89 55 08             	mov    %edx,0x8(%ebp)
   17f4d:	0f b6 00             	movzbl (%eax),%eax
   17f50:	84 c0                	test   %al,%al
   17f52:	75 ec                	jne    17f40 <kernel_strlen+0x1c>

  return len;
   17f54:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   17f57:	c9                   	leave  
   17f58:	c3                   	ret    

00017f59 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   17f59:	55                   	push   %ebp
   17f5a:	89 e5                	mov    %esp,%ebp
   17f5c:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   17f5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17f63:	74 40                	je     17fa5 <kernel_memcpy+0x4c>
   17f65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17f69:	74 3a                	je     17fa5 <kernel_memcpy+0x4c>
   17f6b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17f6f:	74 34                	je     17fa5 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   17f71:	8b 45 08             	mov    0x8(%ebp),%eax
   17f74:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   17f77:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f7a:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   17f7d:	eb 17                	jmp    17f96 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   17f7f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   17f82:	8d 42 01             	lea    0x1(%edx),%eax
   17f85:	89 45 f8             	mov    %eax,-0x8(%ebp)
   17f88:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17f8b:	8d 48 01             	lea    0x1(%eax),%ecx
   17f8e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   17f91:	0f b6 12             	movzbl (%edx),%edx
   17f94:	88 10                	mov    %dl,(%eax)
  while (size--) {
   17f96:	8b 45 10             	mov    0x10(%ebp),%eax
   17f99:	8d 50 ff             	lea    -0x1(%eax),%edx
   17f9c:	89 55 10             	mov    %edx,0x10(%ebp)
   17f9f:	85 c0                	test   %eax,%eax
   17fa1:	75 dc                	jne    17f7f <kernel_memcpy+0x26>
   17fa3:	eb 01                	jmp    17fa6 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   17fa5:	90                   	nop
  }
}
   17fa6:	c9                   	leave  
   17fa7:	c3                   	ret    

00017fa8 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   17fa8:	55                   	push   %ebp
   17fa9:	89 e5                	mov    %esp,%ebp
   17fab:	83 ec 14             	sub    $0x14,%esp
   17fae:	8b 45 0c             	mov    0xc(%ebp),%eax
   17fb1:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   17fb4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17fb8:	74 2c                	je     17fe6 <kernel_memset+0x3e>
   17fba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17fbe:	74 26                	je     17fe6 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   17fc0:	8b 45 08             	mov    0x8(%ebp),%eax
   17fc3:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   17fc6:	eb 0f                	jmp    17fd7 <kernel_memset+0x2f>
    *(d++) = v;
   17fc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17fcb:	8d 50 01             	lea    0x1(%eax),%edx
   17fce:	89 55 fc             	mov    %edx,-0x4(%ebp)
   17fd1:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   17fd5:	88 10                	mov    %dl,(%eax)
  while (size--) {
   17fd7:	8b 45 10             	mov    0x10(%ebp),%eax
   17fda:	8d 50 ff             	lea    -0x1(%eax),%edx
   17fdd:	89 55 10             	mov    %edx,0x10(%ebp)
   17fe0:	85 c0                	test   %eax,%eax
   17fe2:	75 e4                	jne    17fc8 <kernel_memset+0x20>
   17fe4:	eb 01                	jmp    17fe7 <kernel_memset+0x3f>
  if (!dest || !size) return;
   17fe6:	90                   	nop
  }
}
   17fe7:	c9                   	leave  
   17fe8:	c3                   	ret    

00017fe9 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   17fe9:	55                   	push   %ebp
   17fea:	89 e5                	mov    %esp,%ebp
   17fec:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   17fef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17ff3:	74 0c                	je     18001 <kernel_memcmp+0x18>
   17ff5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17ff9:	74 06                	je     18001 <kernel_memcmp+0x18>
   17ffb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17fff:	75 07                	jne    18008 <kernel_memcmp+0x1f>
   18001:	b8 00 00 00 00       	mov    $0x0,%eax
   18006:	eb 63                	jmp    1806b <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   18008:	8b 45 08             	mov    0x8(%ebp),%eax
   1800b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   1800e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18011:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   18014:	eb 08                	jmp    1801e <kernel_memcmp+0x35>
    d1++;
   18016:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   1801a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   1801e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   18022:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18026:	74 10                	je     18038 <kernel_memcmp+0x4f>
   18028:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1802b:	0f b6 10             	movzbl (%eax),%edx
   1802e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18031:	0f b6 00             	movzbl (%eax),%eax
   18034:	38 c2                	cmp    %al,%dl
   18036:	74 de                	je     18016 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   18038:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1803b:	0f b6 10             	movzbl (%eax),%edx
   1803e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18041:	0f b6 00             	movzbl (%eax),%eax
   18044:	38 c2                	cmp    %al,%dl
   18046:	76 07                	jbe    1804f <kernel_memcmp+0x66>
    return 1;
   18048:	b8 01 00 00 00       	mov    $0x1,%eax
   1804d:	eb 1c                	jmp    1806b <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   1804f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18052:	0f b6 10             	movzbl (%eax),%edx
   18055:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18058:	0f b6 00             	movzbl (%eax),%eax
   1805b:	38 c2                	cmp    %al,%dl
   1805d:	73 07                	jae    18066 <kernel_memcmp+0x7d>
    return -1;
   1805f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18064:	eb 05                	jmp    1806b <kernel_memcmp+0x82>
  else
    return 0;
   18066:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1806b:	c9                   	leave  
   1806c:	c3                   	ret    

0001806d <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   1806d:	55                   	push   %ebp
   1806e:	89 e5                	mov    %esp,%ebp
   18070:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   18073:	8d 45 10             	lea    0x10(%ebp),%eax
   18076:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   18079:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1807c:	83 ec 04             	sub    $0x4,%esp
   1807f:	50                   	push   %eax
   18080:	ff 75 0c             	push   0xc(%ebp)
   18083:	ff 75 08             	push   0x8(%ebp)
   18086:	e8 06 00 00 00       	call   18091 <kernel_vsprintf>
   1808b:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   1808e:	90                   	nop
   1808f:	c9                   	leave  
   18090:	c3                   	ret    

00018091 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   18091:	55                   	push   %ebp
   18092:	89 e5                	mov    %esp,%ebp
   18094:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   18097:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   1809e:	8b 45 08             	mov    0x8(%ebp),%eax
   180a1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   180a4:	e9 68 01 00 00       	jmp    18211 <kernel_vsprintf+0x180>
    switch (state) {
   180a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   180ad:	74 0b                	je     180ba <kernel_vsprintf+0x29>
   180af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   180b3:	74 2b                	je     180e0 <kernel_vsprintf+0x4f>
   180b5:	e9 56 01 00 00       	jmp    18210 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   180ba:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   180be:	75 0c                	jne    180cc <kernel_vsprintf+0x3b>
          state = READ_FMT;
   180c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   180c7:	e9 45 01 00 00       	jmp    18211 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   180cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   180cf:	8d 50 01             	lea    0x1(%eax),%edx
   180d2:	89 55 f0             	mov    %edx,-0x10(%ebp)
   180d5:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   180d9:	88 10                	mov    %dl,(%eax)
        break;
   180db:	e9 31 01 00 00       	jmp    18211 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   180e0:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   180e4:	75 47                	jne    1812d <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   180e6:	8b 45 10             	mov    0x10(%ebp),%eax
   180e9:	8d 50 04             	lea    0x4(%eax),%edx
   180ec:	89 55 10             	mov    %edx,0x10(%ebp)
   180ef:	8b 00                	mov    (%eax),%eax
   180f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   180f4:	ff 75 ec             	push   -0x14(%ebp)
   180f7:	e8 28 fe ff ff       	call   17f24 <kernel_strlen>
   180fc:	83 c4 04             	add    $0x4,%esp
   180ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   18102:	eb 17                	jmp    1811b <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   18104:	8b 55 ec             	mov    -0x14(%ebp),%edx
   18107:	8d 42 01             	lea    0x1(%edx),%eax
   1810a:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1810d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18110:	8d 48 01             	lea    0x1(%eax),%ecx
   18113:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   18116:	0f b6 12             	movzbl (%edx),%edx
   18119:	88 10                	mov    %dl,(%eax)
          while (len--) {
   1811b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1811e:	8d 50 ff             	lea    -0x1(%eax),%edx
   18121:	89 55 e8             	mov    %edx,-0x18(%ebp)
   18124:	85 c0                	test   %eax,%eax
   18126:	75 dc                	jne    18104 <kernel_vsprintf+0x73>
   18128:	e9 da 00 00 00       	jmp    18207 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   1812d:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   18131:	75 37                	jne    1816a <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   18133:	8b 45 10             	mov    0x10(%ebp),%eax
   18136:	8d 50 04             	lea    0x4(%eax),%edx
   18139:	89 55 10             	mov    %edx,0x10(%ebp)
   1813c:	8b 00                	mov    (%eax),%eax
   1813e:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   18141:	83 ec 04             	sub    $0x4,%esp
   18144:	6a 0a                	push   $0xa
   18146:	ff 75 d8             	push   -0x28(%ebp)
   18149:	ff 75 f0             	push   -0x10(%ebp)
   1814c:	e8 dd 00 00 00       	call   1822e <kernel_itoa>
   18151:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18154:	83 ec 0c             	sub    $0xc,%esp
   18157:	ff 75 f0             	push   -0x10(%ebp)
   1815a:	e8 c5 fd ff ff       	call   17f24 <kernel_strlen>
   1815f:	83 c4 10             	add    $0x10,%esp
   18162:	01 45 f0             	add    %eax,-0x10(%ebp)
   18165:	e9 9d 00 00 00       	jmp    18207 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   1816a:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   1816e:	74 06                	je     18176 <kernel_vsprintf+0xe5>
   18170:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   18174:	75 34                	jne    181aa <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   18176:	8b 45 10             	mov    0x10(%ebp),%eax
   18179:	8d 50 04             	lea    0x4(%eax),%edx
   1817c:	89 55 10             	mov    %edx,0x10(%ebp)
   1817f:	8b 00                	mov    (%eax),%eax
   18181:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   18184:	83 ec 04             	sub    $0x4,%esp
   18187:	6a 10                	push   $0x10
   18189:	ff 75 dc             	push   -0x24(%ebp)
   1818c:	ff 75 f0             	push   -0x10(%ebp)
   1818f:	e8 9a 00 00 00       	call   1822e <kernel_itoa>
   18194:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18197:	83 ec 0c             	sub    $0xc,%esp
   1819a:	ff 75 f0             	push   -0x10(%ebp)
   1819d:	e8 82 fd ff ff       	call   17f24 <kernel_strlen>
   181a2:	83 c4 10             	add    $0x10,%esp
   181a5:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   181a8:	eb 5d                	jmp    18207 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   181aa:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   181ae:	75 34                	jne    181e4 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   181b0:	8b 45 10             	mov    0x10(%ebp),%eax
   181b3:	8d 50 04             	lea    0x4(%eax),%edx
   181b6:	89 55 10             	mov    %edx,0x10(%ebp)
   181b9:	8b 00                	mov    (%eax),%eax
   181bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   181be:	83 ec 04             	sub    $0x4,%esp
   181c1:	6a 02                	push   $0x2
   181c3:	ff 75 e0             	push   -0x20(%ebp)
   181c6:	ff 75 f0             	push   -0x10(%ebp)
   181c9:	e8 60 00 00 00       	call   1822e <kernel_itoa>
   181ce:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   181d1:	83 ec 0c             	sub    $0xc,%esp
   181d4:	ff 75 f0             	push   -0x10(%ebp)
   181d7:	e8 48 fd ff ff       	call   17f24 <kernel_strlen>
   181dc:	83 c4 10             	add    $0x10,%esp
   181df:	01 45 f0             	add    %eax,-0x10(%ebp)
   181e2:	eb 23                	jmp    18207 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   181e4:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   181e8:	75 1d                	jne    18207 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   181ea:	8b 45 10             	mov    0x10(%ebp),%eax
   181ed:	8d 50 04             	lea    0x4(%eax),%edx
   181f0:	89 55 10             	mov    %edx,0x10(%ebp)
   181f3:	8b 00                	mov    (%eax),%eax
   181f5:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   181f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   181fb:	8d 50 01             	lea    0x1(%eax),%edx
   181fe:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18201:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   18205:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   18207:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   1820e:	eb 01                	jmp    18211 <kernel_vsprintf+0x180>
      default:
        break;
   18210:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   18211:	8b 45 0c             	mov    0xc(%ebp),%eax
   18214:	8d 50 01             	lea    0x1(%eax),%edx
   18217:	89 55 0c             	mov    %edx,0xc(%ebp)
   1821a:	0f b6 00             	movzbl (%eax),%eax
   1821d:	88 45 e7             	mov    %al,-0x19(%ebp)
   18220:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   18224:	0f 85 7f fe ff ff    	jne    180a9 <kernel_vsprintf+0x18>
    }
  }
}
   1822a:	90                   	nop
   1822b:	90                   	nop
   1822c:	c9                   	leave  
   1822d:	c3                   	ret    

0001822e <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1822e:	55                   	push   %ebp
   1822f:	89 e5                	mov    %esp,%ebp
   18231:	53                   	push   %ebx
   18232:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   18238:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1823c:	74 1d                	je     1825b <kernel_itoa+0x2d>
   1823e:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   18242:	74 17                	je     1825b <kernel_itoa+0x2d>
   18244:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18248:	74 11                	je     1825b <kernel_itoa+0x2d>
   1824a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1824e:	74 0b                	je     1825b <kernel_itoa+0x2d>
    *buf = '\0';
   18250:	8b 45 08             	mov    0x8(%ebp),%eax
   18253:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18256:	e9 f8 00 00 00       	jmp    18353 <kernel_itoa+0x125>
  }

  if (num == 0) {
   1825b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1825e:	85 c0                	test   %eax,%eax
   18260:	75 17                	jne    18279 <kernel_itoa+0x4b>
    *(buf++) = '0';
   18262:	8b 45 08             	mov    0x8(%ebp),%eax
   18265:	8d 50 01             	lea    0x1(%eax),%edx
   18268:	89 55 08             	mov    %edx,0x8(%ebp)
   1826b:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   1826e:	8b 45 08             	mov    0x8(%ebp),%eax
   18271:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18274:	e9 da 00 00 00       	jmp    18353 <kernel_itoa+0x125>
  }

  char *p = buf;
   18279:	8b 45 08             	mov    0x8(%ebp),%eax
   1827c:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   1827f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   18286:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1828a:	75 41                	jne    182cd <kernel_itoa+0x9f>
    u_num = num;
   1828c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1828f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   18292:	8b 45 0c             	mov    0xc(%ebp),%eax
   18295:	85 c0                	test   %eax,%eax
   18297:	79 16                	jns    182af <kernel_itoa+0x81>
      *(p++) = '-';
   18299:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1829c:	8d 50 01             	lea    0x1(%eax),%edx
   1829f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   182a2:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   182a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   182a8:	f7 d8                	neg    %eax
   182aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
   182ad:	eb 26                	jmp    182d5 <kernel_itoa+0xa7>
    } else if (num == 0) {
   182af:	8b 45 0c             	mov    0xc(%ebp),%eax
   182b2:	85 c0                	test   %eax,%eax
   182b4:	75 1f                	jne    182d5 <kernel_itoa+0xa7>
      *(p++) = '0';
   182b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   182b9:	8d 50 01             	lea    0x1(%eax),%edx
   182bc:	89 55 f8             	mov    %edx,-0x8(%ebp)
   182bf:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   182c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   182c5:	c6 00 00             	movb   $0x0,(%eax)
      return;
   182c8:	e9 86 00 00 00       	jmp    18353 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   182cd:	8d 45 0c             	lea    0xc(%ebp),%eax
   182d0:	8b 00                	mov    (%eax),%eax
   182d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   182d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   182dc:	eb 3b                	jmp    18319 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   182de:	8b 1d 6c b1 01 00    	mov    0x1b16c,%ebx
   182e4:	8b 4d 10             	mov    0x10(%ebp),%ecx
   182e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   182ea:	ba 00 00 00 00       	mov    $0x0,%edx
   182ef:	f7 f1                	div    %ecx
   182f1:	89 d0                	mov    %edx,%eax
   182f3:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   182f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   182f9:	8d 50 01             	lea    0x1(%eax),%edx
   182fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
   182ff:	0f b6 11             	movzbl (%ecx),%edx
   18302:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   18309:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1830c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1830f:	ba 00 00 00 00       	mov    $0x0,%edx
   18314:	f7 f3                	div    %ebx
   18316:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   18319:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1831d:	75 bf                	jne    182de <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   1831f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18322:	83 e8 01             	sub    $0x1,%eax
   18325:	89 45 ec             	mov    %eax,-0x14(%ebp)
   18328:	eb 1d                	jmp    18347 <kernel_itoa+0x119>
    *(p++) = arr[i];
   1832a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1832d:	8d 50 01             	lea    0x1(%eax),%edx
   18330:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18333:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   18339:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1833c:	01 ca                	add    %ecx,%edx
   1833e:	0f b6 12             	movzbl (%edx),%edx
   18341:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   18343:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   18347:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1834b:	79 dd                	jns    1832a <kernel_itoa+0xfc>
  }
  *p = '\0';
   1834d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18350:	c6 00 00             	movb   $0x0,(%eax)
}
   18353:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   18356:	c9                   	leave  
   18357:	c3                   	ret    

00018358 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   18358:	55                   	push   %ebp
   18359:	89 e5                	mov    %esp,%ebp
   1835b:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   1835e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   18365:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18369:	74 15                	je     18380 <strings_count+0x28>
    while (*(strs++)) {
   1836b:	eb 04                	jmp    18371 <strings_count+0x19>
      count++;
   1836d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   18371:	8b 45 08             	mov    0x8(%ebp),%eax
   18374:	8d 50 04             	lea    0x4(%eax),%edx
   18377:	89 55 08             	mov    %edx,0x8(%ebp)
   1837a:	8b 00                	mov    (%eax),%eax
   1837c:	85 c0                	test   %eax,%eax
   1837e:	75 ed                	jne    1836d <strings_count+0x15>
    }
  }

  return count;
   18380:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18383:	c9                   	leave  
   18384:	c3                   	ret    

00018385 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   18385:	55                   	push   %ebp
   18386:	89 e5                	mov    %esp,%ebp
   18388:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   1838b:	8b 45 08             	mov    0x8(%ebp),%eax
   1838e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   18391:	eb 04                	jmp    18397 <get_file_name+0x12>
    s++;
   18393:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   18397:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1839a:	0f b6 00             	movzbl (%eax),%eax
   1839d:	84 c0                	test   %al,%al
   1839f:	75 f2                	jne    18393 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   183a1:	eb 04                	jmp    183a7 <get_file_name+0x22>
    s--;
   183a3:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   183a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183aa:	0f b6 00             	movzbl (%eax),%eax
   183ad:	3c 2f                	cmp    $0x2f,%al
   183af:	74 12                	je     183c3 <get_file_name+0x3e>
   183b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183b4:	0f b6 00             	movzbl (%eax),%eax
   183b7:	3c 5c                	cmp    $0x5c,%al
   183b9:	74 08                	je     183c3 <get_file_name+0x3e>
   183bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183be:	3b 45 08             	cmp    0x8(%ebp),%eax
   183c1:	73 e0                	jae    183a3 <get_file_name+0x1e>
  }

  return s + 1;
   183c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183c6:	83 c0 01             	add    $0x1,%eax
   183c9:	c9                   	leave  
   183ca:	c3                   	ret    

000183cb <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   183cb:	55                   	push   %ebp
   183cc:	89 e5                	mov    %esp,%ebp
   183ce:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   183d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   183d5:	75 19                	jne    183f0 <list_is_empty+0x25>
   183d7:	68 c8 a0 01 00       	push   $0x1a0c8
   183dc:	68 ac a1 01 00       	push   $0x1a1ac
   183e1:	6a 38                	push   $0x38
   183e3:	68 dc a0 01 00       	push   $0x1a0dc
   183e8:	e8 a2 f6 ff ff       	call   17a8f <pannic>
   183ed:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   183f0:	8b 45 08             	mov    0x8(%ebp),%eax
   183f3:	8b 40 08             	mov    0x8(%eax),%eax
   183f6:	85 c0                	test   %eax,%eax
   183f8:	0f 94 c0             	sete   %al
   183fb:	0f b6 c0             	movzbl %al,%eax
}
   183fe:	c9                   	leave  
   183ff:	c3                   	ret    

00018400 <list_get_size>:
static inline int list_get_size(list_t *list) {
   18400:	55                   	push   %ebp
   18401:	89 e5                	mov    %esp,%ebp
   18403:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18406:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1840a:	75 19                	jne    18425 <list_get_size+0x25>
   1840c:	68 c8 a0 01 00       	push   $0x1a0c8
   18411:	68 e4 a1 01 00       	push   $0x1a1e4
   18416:	6a 3e                	push   $0x3e
   18418:	68 dc a0 01 00       	push   $0x1a0dc
   1841d:	e8 6d f6 ff ff       	call   17a8f <pannic>
   18422:	83 c4 10             	add    $0x10,%esp
    return list->size;
   18425:	8b 45 08             	mov    0x8(%ebp),%eax
   18428:	8b 40 08             	mov    0x8(%eax),%eax
}
   1842b:	c9                   	leave  
   1842c:	c3                   	ret    

0001842d <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   1842d:	55                   	push   %ebp
   1842e:	89 e5                	mov    %esp,%ebp
   18430:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   18433:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18437:	74 06                	je     1843f <list_insert_first+0x12>
   18439:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1843d:	75 19                	jne    18458 <list_insert_first+0x2b>
   1843f:	68 1c a1 01 00       	push   $0x1a11c
   18444:	68 98 a1 01 00       	push   $0x1a198
   18449:	6a 0f                	push   $0xf
   1844b:	68 4c a1 01 00       	push   $0x1a14c
   18450:	e8 3a f6 ff ff       	call   17a8f <pannic>
   18455:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   18458:	8b 45 08             	mov    0x8(%ebp),%eax
   1845b:	8b 10                	mov    (%eax),%edx
   1845d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18460:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   18463:	8b 45 0c             	mov    0xc(%ebp),%eax
   18466:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1846c:	83 ec 0c             	sub    $0xc,%esp
   1846f:	ff 75 08             	push   0x8(%ebp)
   18472:	e8 54 ff ff ff       	call   183cb <list_is_empty>
   18477:	83 c4 10             	add    $0x10,%esp
   1847a:	85 c0                	test   %eax,%eax
   1847c:	74 16                	je     18494 <list_insert_first+0x67>
        list->first = list->last = node;
   1847e:	8b 45 08             	mov    0x8(%ebp),%eax
   18481:	8b 55 0c             	mov    0xc(%ebp),%edx
   18484:	89 50 04             	mov    %edx,0x4(%eax)
   18487:	8b 45 08             	mov    0x8(%ebp),%eax
   1848a:	8b 50 04             	mov    0x4(%eax),%edx
   1848d:	8b 45 08             	mov    0x8(%ebp),%eax
   18490:	89 10                	mov    %edx,(%eax)
   18492:	eb 12                	jmp    184a6 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   18494:	8b 45 08             	mov    0x8(%ebp),%eax
   18497:	8b 00                	mov    (%eax),%eax
   18499:	8b 55 0c             	mov    0xc(%ebp),%edx
   1849c:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1849e:	8b 45 08             	mov    0x8(%ebp),%eax
   184a1:	8b 55 0c             	mov    0xc(%ebp),%edx
   184a4:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   184a6:	8b 45 08             	mov    0x8(%ebp),%eax
   184a9:	8b 40 08             	mov    0x8(%eax),%eax
   184ac:	8d 50 01             	lea    0x1(%eax),%edx
   184af:	8b 45 08             	mov    0x8(%ebp),%eax
   184b2:	89 50 08             	mov    %edx,0x8(%eax)
}
   184b5:	90                   	nop
   184b6:	c9                   	leave  
   184b7:	c3                   	ret    

000184b8 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   184b8:	55                   	push   %ebp
   184b9:	89 e5                	mov    %esp,%ebp
   184bb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   184be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184c2:	74 06                	je     184ca <list_insert_last+0x12>
   184c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   184c8:	75 19                	jne    184e3 <list_insert_last+0x2b>
   184ca:	68 1c a1 01 00       	push   $0x1a11c
   184cf:	68 bc a1 01 00       	push   $0x1a1bc
   184d4:	6a 21                	push   $0x21
   184d6:	68 4c a1 01 00       	push   $0x1a14c
   184db:	e8 af f5 ff ff       	call   17a8f <pannic>
   184e0:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   184e3:	8b 45 08             	mov    0x8(%ebp),%eax
   184e6:	8b 50 04             	mov    0x4(%eax),%edx
   184e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   184ec:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   184ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   184f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   184f8:	83 ec 0c             	sub    $0xc,%esp
   184fb:	ff 75 08             	push   0x8(%ebp)
   184fe:	e8 c8 fe ff ff       	call   183cb <list_is_empty>
   18503:	83 c4 10             	add    $0x10,%esp
   18506:	85 c0                	test   %eax,%eax
   18508:	74 16                	je     18520 <list_insert_last+0x68>
        list->first = list->last = node;
   1850a:	8b 45 08             	mov    0x8(%ebp),%eax
   1850d:	8b 55 0c             	mov    0xc(%ebp),%edx
   18510:	89 50 04             	mov    %edx,0x4(%eax)
   18513:	8b 45 08             	mov    0x8(%ebp),%eax
   18516:	8b 50 04             	mov    0x4(%eax),%edx
   18519:	8b 45 08             	mov    0x8(%ebp),%eax
   1851c:	89 10                	mov    %edx,(%eax)
   1851e:	eb 15                	jmp    18535 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   18520:	8b 45 08             	mov    0x8(%ebp),%eax
   18523:	8b 40 04             	mov    0x4(%eax),%eax
   18526:	8b 55 0c             	mov    0xc(%ebp),%edx
   18529:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1852c:	8b 45 08             	mov    0x8(%ebp),%eax
   1852f:	8b 55 0c             	mov    0xc(%ebp),%edx
   18532:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   18535:	8b 45 08             	mov    0x8(%ebp),%eax
   18538:	8b 40 08             	mov    0x8(%eax),%eax
   1853b:	8d 50 01             	lea    0x1(%eax),%edx
   1853e:	8b 45 08             	mov    0x8(%ebp),%eax
   18541:	89 50 08             	mov    %edx,0x8(%eax)

}
   18544:	90                   	nop
   18545:	c9                   	leave  
   18546:	c3                   	ret    

00018547 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   18547:	55                   	push   %ebp
   18548:	89 e5                	mov    %esp,%ebp
   1854a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1854d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18551:	75 19                	jne    1856c <list_remove_first+0x25>
   18553:	68 82 a1 01 00       	push   $0x1a182
   18558:	68 d0 a1 01 00       	push   $0x1a1d0
   1855d:	6a 34                	push   $0x34
   1855f:	68 4c a1 01 00       	push   $0x1a14c
   18564:	e8 26 f5 ff ff       	call   17a8f <pannic>
   18569:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   1856c:	83 ec 0c             	sub    $0xc,%esp
   1856f:	ff 75 08             	push   0x8(%ebp)
   18572:	e8 54 fe ff ff       	call   183cb <list_is_empty>
   18577:	83 c4 10             	add    $0x10,%esp
   1857a:	85 c0                	test   %eax,%eax
   1857c:	74 07                	je     18585 <list_remove_first+0x3e>
        return (list_node_t*)0;
   1857e:	b8 00 00 00 00       	mov    $0x0,%eax
   18583:	eb 71                	jmp    185f6 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   18585:	8b 45 08             	mov    0x8(%ebp),%eax
   18588:	8b 00                	mov    (%eax),%eax
   1858a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1858d:	83 ec 0c             	sub    $0xc,%esp
   18590:	ff 75 08             	push   0x8(%ebp)
   18593:	e8 68 fe ff ff       	call   18400 <list_get_size>
   18598:	83 c4 10             	add    $0x10,%esp
   1859b:	83 f8 01             	cmp    $0x1,%eax
   1859e:	75 17                	jne    185b7 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   185a0:	8b 45 08             	mov    0x8(%ebp),%eax
   185a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   185aa:	8b 45 08             	mov    0x8(%ebp),%eax
   185ad:	8b 50 04             	mov    0x4(%eax),%edx
   185b0:	8b 45 08             	mov    0x8(%ebp),%eax
   185b3:	89 10                	mov    %edx,(%eax)
   185b5:	eb 18                	jmp    185cf <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   185b7:	8b 45 08             	mov    0x8(%ebp),%eax
   185ba:	8b 00                	mov    (%eax),%eax
   185bc:	8b 50 04             	mov    0x4(%eax),%edx
   185bf:	8b 45 08             	mov    0x8(%ebp),%eax
   185c2:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   185c4:	8b 45 08             	mov    0x8(%ebp),%eax
   185c7:	8b 00                	mov    (%eax),%eax
   185c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   185cf:	8b 45 08             	mov    0x8(%ebp),%eax
   185d2:	8b 40 08             	mov    0x8(%eax),%eax
   185d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   185d8:	8b 45 08             	mov    0x8(%ebp),%eax
   185db:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   185de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   185e1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   185e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   185eb:	8b 50 04             	mov    0x4(%eax),%edx
   185ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   185f1:	89 10                	mov    %edx,(%eax)
    return ret;
   185f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   185f6:	c9                   	leave  
   185f7:	c3                   	ret    

000185f8 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   185f8:	55                   	push   %ebp
   185f9:	89 e5                	mov    %esp,%ebp
   185fb:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   185fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18602:	75 19                	jne    1861d <list_remove_last+0x25>
   18604:	68 82 a1 01 00       	push   $0x1a182
   18609:	68 f4 a1 01 00       	push   $0x1a1f4
   1860e:	6a 4a                	push   $0x4a
   18610:	68 4c a1 01 00       	push   $0x1a14c
   18615:	e8 75 f4 ff ff       	call   17a8f <pannic>
   1861a:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   1861d:	83 ec 0c             	sub    $0xc,%esp
   18620:	ff 75 08             	push   0x8(%ebp)
   18623:	e8 a3 fd ff ff       	call   183cb <list_is_empty>
   18628:	83 c4 10             	add    $0x10,%esp
   1862b:	85 c0                	test   %eax,%eax
   1862d:	74 07                	je     18636 <list_remove_last+0x3e>
        return (list_node_t*)0;
   1862f:	b8 00 00 00 00       	mov    $0x0,%eax
   18634:	eb 75                	jmp    186ab <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   18636:	8b 45 08             	mov    0x8(%ebp),%eax
   18639:	8b 40 04             	mov    0x4(%eax),%eax
   1863c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1863f:	83 ec 0c             	sub    $0xc,%esp
   18642:	ff 75 08             	push   0x8(%ebp)
   18645:	e8 b6 fd ff ff       	call   18400 <list_get_size>
   1864a:	83 c4 10             	add    $0x10,%esp
   1864d:	83 f8 01             	cmp    $0x1,%eax
   18650:	75 17                	jne    18669 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   18652:	8b 45 08             	mov    0x8(%ebp),%eax
   18655:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1865c:	8b 45 08             	mov    0x8(%ebp),%eax
   1865f:	8b 50 04             	mov    0x4(%eax),%edx
   18662:	8b 45 08             	mov    0x8(%ebp),%eax
   18665:	89 10                	mov    %edx,(%eax)
   18667:	eb 1b                	jmp    18684 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   18669:	8b 45 08             	mov    0x8(%ebp),%eax
   1866c:	8b 40 04             	mov    0x4(%eax),%eax
   1866f:	8b 10                	mov    (%eax),%edx
   18671:	8b 45 08             	mov    0x8(%ebp),%eax
   18674:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   18677:	8b 45 08             	mov    0x8(%ebp),%eax
   1867a:	8b 40 04             	mov    0x4(%eax),%eax
   1867d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   18684:	8b 45 08             	mov    0x8(%ebp),%eax
   18687:	8b 40 08             	mov    0x8(%eax),%eax
   1868a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1868d:	8b 45 08             	mov    0x8(%ebp),%eax
   18690:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   18693:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18696:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1869d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   186a0:	8b 50 04             	mov    0x4(%eax),%edx
   186a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   186a6:	89 10                	mov    %edx,(%eax)
    return ret;
   186a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   186ab:	c9                   	leave  
   186ac:	c3                   	ret    

000186ad <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   186ad:	55                   	push   %ebp
   186ae:	89 e5                	mov    %esp,%ebp
   186b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   186b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   186b7:	74 06                	je     186bf <list_remove+0x12>
   186b9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   186bd:	75 19                	jne    186d8 <list_remove+0x2b>
   186bf:	68 1c a1 01 00       	push   $0x1a11c
   186c4:	68 08 a2 01 00       	push   $0x1a208
   186c9:	6a 60                	push   $0x60
   186cb:	68 4c a1 01 00       	push   $0x1a14c
   186d0:	e8 ba f3 ff ff       	call   17a8f <pannic>
   186d5:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   186d8:	83 ec 0c             	sub    $0xc,%esp
   186db:	ff 75 08             	push   0x8(%ebp)
   186de:	e8 e8 fc ff ff       	call   183cb <list_is_empty>
   186e3:	83 c4 10             	add    $0x10,%esp
   186e6:	85 c0                	test   %eax,%eax
   186e8:	74 0a                	je     186f4 <list_remove+0x47>
        return (list_node_t*)0;
   186ea:	b8 00 00 00 00       	mov    $0x0,%eax
   186ef:	e9 80 00 00 00       	jmp    18774 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   186f4:	8b 45 08             	mov    0x8(%ebp),%eax
   186f7:	8b 00                	mov    (%eax),%eax
   186f9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   186fc:	75 0b                	jne    18709 <list_remove+0x5c>
   186fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   18701:	8b 50 04             	mov    0x4(%eax),%edx
   18704:	8b 45 08             	mov    0x8(%ebp),%eax
   18707:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   18709:	8b 45 08             	mov    0x8(%ebp),%eax
   1870c:	8b 40 04             	mov    0x4(%eax),%eax
   1870f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18712:	75 0b                	jne    1871f <list_remove+0x72>
   18714:	8b 45 0c             	mov    0xc(%ebp),%eax
   18717:	8b 10                	mov    (%eax),%edx
   18719:	8b 45 08             	mov    0x8(%ebp),%eax
   1871c:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   1871f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18722:	8b 00                	mov    (%eax),%eax
   18724:	85 c0                	test   %eax,%eax
   18726:	74 0e                	je     18736 <list_remove+0x89>
   18728:	8b 45 0c             	mov    0xc(%ebp),%eax
   1872b:	8b 00                	mov    (%eax),%eax
   1872d:	8b 55 0c             	mov    0xc(%ebp),%edx
   18730:	8b 52 04             	mov    0x4(%edx),%edx
   18733:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   18736:	8b 45 0c             	mov    0xc(%ebp),%eax
   18739:	8b 40 04             	mov    0x4(%eax),%eax
   1873c:	85 c0                	test   %eax,%eax
   1873e:	74 0d                	je     1874d <list_remove+0xa0>
   18740:	8b 45 0c             	mov    0xc(%ebp),%eax
   18743:	8b 40 04             	mov    0x4(%eax),%eax
   18746:	8b 55 0c             	mov    0xc(%ebp),%edx
   18749:	8b 12                	mov    (%edx),%edx
   1874b:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   1874d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18750:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18757:	8b 45 0c             	mov    0xc(%ebp),%eax
   1875a:	8b 50 04             	mov    0x4(%eax),%edx
   1875d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18760:	89 10                	mov    %edx,(%eax)
    list->size--;
   18762:	8b 45 08             	mov    0x8(%ebp),%eax
   18765:	8b 40 08             	mov    0x8(%eax),%eax
   18768:	8d 50 ff             	lea    -0x1(%eax),%edx
   1876b:	8b 45 08             	mov    0x8(%ebp),%eax
   1876e:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   18771:	8b 45 0c             	mov    0xc(%ebp),%eax
   18774:	c9                   	leave  
   18775:	c3                   	ret    

00018776 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   18776:	55                   	push   %ebp
   18777:	89 e5                	mov    %esp,%ebp
   18779:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   1877c:	83 ec 0c             	sub    $0xc,%esp
   1877f:	68 0c 6e 07 00       	push   $0x76e0c
   18784:	e8 8e eb ff ff       	call   17317 <mutex_init>
   18789:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   1878c:	83 ec 04             	sub    $0x4,%esp
   1878f:	6a 00                	push   $0x0
   18791:	6a 00                	push   $0x0
   18793:	6a 01                	push   $0x1
   18795:	e8 f4 b8 ff ff       	call   1408e <dev_open>
   1879a:	83 c4 10             	add    $0x10,%esp
   1879d:	a3 20 6e 07 00       	mov    %eax,0x76e20
}
   187a2:	90                   	nop
   187a3:	c9                   	leave  
   187a4:	c3                   	ret    

000187a5 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   187a5:	55                   	push   %ebp
   187a6:	89 e5                	mov    %esp,%ebp
   187a8:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   187ae:	83 ec 04             	sub    $0x4,%esp
   187b1:	68 80 00 00 00       	push   $0x80
   187b6:	6a 00                	push   $0x0
   187b8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   187be:	50                   	push   %eax
   187bf:	e8 e4 f7 ff ff       	call   17fa8 <kernel_memset>
   187c4:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   187c7:	8d 45 0c             	lea    0xc(%ebp),%eax
   187ca:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   187d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   187d6:	83 ec 04             	sub    $0x4,%esp
   187d9:	50                   	push   %eax
   187da:	ff 75 08             	push   0x8(%ebp)
   187dd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   187e3:	50                   	push   %eax
   187e4:	e8 a8 f8 ff ff       	call   18091 <kernel_vsprintf>
   187e9:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   187ec:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   187f2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   187f5:	83 ec 0c             	sub    $0xc,%esp
   187f8:	68 0c 6e 07 00       	push   $0x76e0c
   187fd:	e8 62 eb ff ff       	call   17364 <mutex_lock>
   18802:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   18805:	83 ec 0c             	sub    $0xc,%esp
   18808:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1880e:	50                   	push   %eax
   1880f:	e8 10 f7 ff ff       	call   17f24 <kernel_strlen>
   18814:	83 c4 10             	add    $0x10,%esp
   18817:	8b 15 20 6e 07 00    	mov    0x76e20,%edx
   1881d:	50                   	push   %eax
   1881e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   18824:	50                   	push   %eax
   18825:	6a 00                	push   $0x0
   18827:	52                   	push   %edx
   18828:	e8 f7 b9 ff ff       	call   14224 <dev_write>
   1882d:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   18830:	83 ec 0c             	sub    $0xc,%esp
   18833:	68 0c 6e 07 00       	push   $0x76e0c
   18838:	e8 cd eb ff ff       	call   1740a <mutex_unlock>
   1883d:	83 c4 10             	add    $0x10,%esp
   18840:	90                   	nop
   18841:	c9                   	leave  
   18842:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < 1; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 7e                	jmp    8000009d <first_main+0x8d>
        int pid = fork();
8000001f:	e8 74 01 00 00       	call   80000198 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 bf 00 00 80       	push   $0x800000bf
80000037:	e8 34 01 00 00       	call   80000170 <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 66                	jmp    800000a7 <first_main+0x97>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 52                	jne    80000099 <first_main+0x89>
            char tty_num[] = "/dev/tty?";
80000047:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
8000004e:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000055:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8000005e:	83 c0 30             	add    $0x30,%eax
80000061:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * const argv[] = {tty_num, 0};
80000064:	8d 45 e6             	lea    -0x1a(%ebp),%eax
80000067:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("/shell.elf", argv, 0);
80000071:	83 ec 04             	sub    $0x4,%esp
80000074:	6a 00                	push   $0x0
80000076:	8d 45 dc             	lea    -0x24(%ebp),%eax
80000079:	50                   	push   %eax
8000007a:	68 d4 00 00 80       	push   $0x800000d4
8000007f:	e8 2f 01 00 00       	call   800001b3 <execve>
80000084:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
80000087:	83 ec 0c             	sub    $0xc,%esp
8000008a:	68 e8 03 00 00       	push   $0x3e8
8000008f:	e8 97 00 00 00       	call   8000012b <msleep>
80000094:	83 c4 10             	add    $0x10,%esp
80000097:	eb ee                	jmp    80000087 <first_main+0x77>
    for (int i = 0; i < 1; ++i) {
80000099:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8000009d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
800000a1:	0f 8e 78 ff ff ff    	jle    8000001f <first_main+0xf>
        }
    }    

    for (;;) {
        //回收所有孤儿进程
        int status = 0;
800000a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        wait(&status);
800000ae:	83 ec 0c             	sub    $0xc,%esp
800000b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000b4:	50                   	push   %eax
800000b5:	e8 bc 02 00 00       	call   80000376 <wait>
800000ba:	83 c4 10             	add    $0x10,%esp
    for (;;) {
800000bd:	eb e8                	jmp    800000a7 <first_main+0x97>
800000bf:	63 72 65             	arpl   %si,0x65(%edx)
800000c2:	61                   	popa   
800000c3:	74 65                	je     8000012a <sys_call+0x4b>
800000c5:	20 73 68             	and    %dh,0x68(%ebx)
800000c8:	65 6c                	gs insb (%dx),%es:(%edi)
800000ca:	6c                   	insb   (%dx),%es:(%edi)
800000cb:	20 66 61             	and    %ah,0x61(%esi)
800000ce:	69 6c 65 64 2e 00 2f 	imul   $0x732f002e,0x64(%ebp,%eiz,2),%ebp
800000d5:	73 
800000d6:	68 65 6c 6c 2e       	push   $0x2e6c6c65
800000db:	65 6c                	gs insb (%dx),%es:(%edi)
800000dd:	66                   	data16
	...

800000df <sys_call>:
#include    "os_cfg.h"
#include    "applib/lib_syscall.h"
#include    <stdlib.h>


int sys_call(syscall_args_t *args) {
800000df:	55                   	push   %ebp
800000e0:	89 e5                	mov    %esp,%ebp
800000e2:	57                   	push   %edi
800000e3:	56                   	push   %esi
800000e4:	53                   	push   %ebx
800000e5:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000e8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000ef:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000f6:	8b 45 08             	mov    0x8(%ebp),%eax
800000f9:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000fc:	8b 55 08             	mov    0x8(%ebp),%edx
800000ff:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000102:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000105:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000108:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000010b:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000010e:	8b 75 08             	mov    0x8(%ebp),%esi
80000111:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000113:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000116:	50                   	push   %eax
80000117:	52                   	push   %edx
80000118:	51                   	push   %ecx
80000119:	53                   	push   %ebx
8000011a:	56                   	push   %esi
8000011b:	ff 1f                	lcall  *(%edi)
8000011d:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000120:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000123:	83 c4 10             	add    $0x10,%esp
80000126:	5b                   	pop    %ebx
80000127:	5e                   	pop    %esi
80000128:	5f                   	pop    %edi
80000129:	5d                   	pop    %ebp
8000012a:	c3                   	ret    

8000012b <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8000012b:	55                   	push   %ebp
8000012c:	89 e5                	mov    %esp,%ebp
8000012e:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000131:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000135:	7e 1b                	jle    80000152 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000137:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000013e:	8b 45 08             	mov    0x8(%ebp),%eax
80000141:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000144:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000147:	50                   	push   %eax
80000148:	e8 92 ff ff ff       	call   800000df <sys_call>
8000014d:	83 c4 04             	add    $0x4,%esp
80000150:	eb 01                	jmp    80000153 <msleep+0x28>
    if (ms <= 0) return;
80000152:	90                   	nop

}
80000153:	c9                   	leave  
80000154:	c3                   	ret    

80000155 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000155:	55                   	push   %ebp
80000156:	89 e5                	mov    %esp,%ebp
80000158:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000015b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000162:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000165:	50                   	push   %eax
80000166:	e8 74 ff ff ff       	call   800000df <sys_call>
8000016b:	83 c4 04             	add    $0x4,%esp
}
8000016e:	c9                   	leave  
8000016f:	c3                   	ret    

80000170 <print_msg>:

void print_msg(const char *fmt, int arg) {
80000170:	55                   	push   %ebp
80000171:	89 e5                	mov    %esp,%ebp
80000173:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000176:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000017d:	8b 45 08             	mov    0x8(%ebp),%eax
80000180:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000183:	8b 45 0c             	mov    0xc(%ebp),%eax
80000186:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000189:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000018c:	50                   	push   %eax
8000018d:	e8 4d ff ff ff       	call   800000df <sys_call>
80000192:	83 c4 04             	add    $0x4,%esp
}
80000195:	90                   	nop
80000196:	c9                   	leave  
80000197:	c3                   	ret    

80000198 <fork>:

int fork (void) {
80000198:	55                   	push   %ebp
80000199:	89 e5                	mov    %esp,%ebp
8000019b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000019e:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800001a5:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001a8:	50                   	push   %eax
800001a9:	e8 31 ff ff ff       	call   800000df <sys_call>
800001ae:	83 c4 04             	add    $0x4,%esp
}
800001b1:	c9                   	leave  
800001b2:	c3                   	ret    

800001b3 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001b3:	55                   	push   %ebp
800001b4:	89 e5                	mov    %esp,%ebp
800001b6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001b9:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001c0:	8b 45 08             	mov    0x8(%ebp),%eax
800001c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001c6:	8b 45 0c             	mov    0xc(%ebp),%eax
800001c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001cc:	8b 45 10             	mov    0x10(%ebp),%eax
800001cf:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001d2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d5:	50                   	push   %eax
800001d6:	e8 04 ff ff ff       	call   800000df <sys_call>
800001db:	83 c4 04             	add    $0x4,%esp
}
800001de:	c9                   	leave  
800001df:	c3                   	ret    

800001e0 <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001e0:	55                   	push   %ebp
800001e1:	89 e5                	mov    %esp,%ebp
800001e3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001e6:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001ed:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001f0:	50                   	push   %eax
800001f1:	e8 e9 fe ff ff       	call   800000df <sys_call>
800001f6:	83 c4 04             	add    $0x4,%esp
}
800001f9:	c9                   	leave  
800001fa:	c3                   	ret    

800001fb <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001fb:	55                   	push   %ebp
800001fc:	89 e5                	mov    %esp,%ebp
800001fe:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
80000201:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000208:	8b 45 08             	mov    0x8(%ebp),%eax
8000020b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8000020e:	8b 45 0c             	mov    0xc(%ebp),%eax
80000211:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000214:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000217:	50                   	push   %eax
80000218:	e8 c2 fe ff ff       	call   800000df <sys_call>
8000021d:	83 c4 04             	add    $0x4,%esp
}
80000220:	c9                   	leave  
80000221:	c3                   	ret    

80000222 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000222:	55                   	push   %ebp
80000223:	89 e5                	mov    %esp,%ebp
80000225:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000228:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000022f:	8b 45 08             	mov    0x8(%ebp),%eax
80000232:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000235:	8b 45 0c             	mov    0xc(%ebp),%eax
80000238:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000023b:	8b 45 10             	mov    0x10(%ebp),%eax
8000023e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000241:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000244:	50                   	push   %eax
80000245:	e8 95 fe ff ff       	call   800000df <sys_call>
8000024a:	83 c4 04             	add    $0x4,%esp
}
8000024d:	c9                   	leave  
8000024e:	c3                   	ret    

8000024f <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000024f:	55                   	push   %ebp
80000250:	89 e5                	mov    %esp,%ebp
80000252:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000255:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000025c:	8b 45 08             	mov    0x8(%ebp),%eax
8000025f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000262:	8b 45 0c             	mov    0xc(%ebp),%eax
80000265:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000268:	8b 45 10             	mov    0x10(%ebp),%eax
8000026b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000026e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000271:	50                   	push   %eax
80000272:	e8 68 fe ff ff       	call   800000df <sys_call>
80000277:	83 c4 04             	add    $0x4,%esp
}
8000027a:	c9                   	leave  
8000027b:	c3                   	ret    

8000027c <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000027c:	55                   	push   %ebp
8000027d:	89 e5                	mov    %esp,%ebp
8000027f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000282:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000289:	8b 45 08             	mov    0x8(%ebp),%eax
8000028c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000028f:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000292:	50                   	push   %eax
80000293:	e8 47 fe ff ff       	call   800000df <sys_call>
80000298:	83 c4 04             	add    $0x4,%esp
}
8000029b:	c9                   	leave  
8000029c:	c3                   	ret    

8000029d <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000029d:	55                   	push   %ebp
8000029e:	89 e5                	mov    %esp,%ebp
800002a0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002a3:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
800002aa:	8b 45 08             	mov    0x8(%ebp),%eax
800002ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002b0:	8b 45 0c             	mov    0xc(%ebp),%eax
800002b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002b6:	8b 45 10             	mov    0x10(%ebp),%eax
800002b9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002bc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002bf:	50                   	push   %eax
800002c0:	e8 1a fe ff ff       	call   800000df <sys_call>
800002c5:	83 c4 04             	add    $0x4,%esp
}
800002c8:	c9                   	leave  
800002c9:	c3                   	ret    

800002ca <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002ca:	55                   	push   %ebp
800002cb:	89 e5                	mov    %esp,%ebp
800002cd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002d0:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002d7:	8b 45 08             	mov    0x8(%ebp),%eax
800002da:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002e0:	50                   	push   %eax
800002e1:	e8 f9 fd ff ff       	call   800000df <sys_call>
800002e6:	83 c4 04             	add    $0x4,%esp
}
800002e9:	c9                   	leave  
800002ea:	c3                   	ret    

800002eb <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002eb:	55                   	push   %ebp
800002ec:	89 e5                	mov    %esp,%ebp
800002ee:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002f1:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002f8:	8b 45 08             	mov    0x8(%ebp),%eax
800002fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002fe:	8b 45 0c             	mov    0xc(%ebp),%eax
80000301:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000304:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000307:	50                   	push   %eax
80000308:	e8 d2 fd ff ff       	call   800000df <sys_call>
8000030d:	83 c4 04             	add    $0x4,%esp
}
80000310:	c9                   	leave  
80000311:	c3                   	ret    

80000312 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000312:	55                   	push   %ebp
80000313:	89 e5                	mov    %esp,%ebp
80000315:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000318:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = (int)incr;
8000031f:	8b 45 08             	mov    0x8(%ebp),%eax
80000322:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000325:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000328:	50                   	push   %eax
80000329:	e8 b1 fd ff ff       	call   800000df <sys_call>
8000032e:	83 c4 04             	add    $0x4,%esp
}
80000331:	c9                   	leave  
80000332:	c3                   	ret    

80000333 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000333:	55                   	push   %ebp
80000334:	89 e5                	mov    %esp,%ebp
80000336:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000339:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = file;
80000340:	8b 45 08             	mov    0x8(%ebp),%eax
80000343:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000346:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000349:	50                   	push   %eax
8000034a:	e8 90 fd ff ff       	call   800000df <sys_call>
8000034f:	83 c4 04             	add    $0x4,%esp
}
80000352:	c9                   	leave  
80000353:	c3                   	ret    

80000354 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000354:	55                   	push   %ebp
80000355:	89 e5                	mov    %esp,%ebp
80000357:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
8000035a:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
80000361:	8b 45 08             	mov    0x8(%ebp),%eax
80000364:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
80000367:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000036a:	50                   	push   %eax
8000036b:	e8 6f fd ff ff       	call   800000df <sys_call>
80000370:	83 c4 04             	add    $0x4,%esp
}
80000373:	90                   	nop
80000374:	c9                   	leave  
80000375:	c3                   	ret    

80000376 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000376:	55                   	push   %ebp
80000377:	89 e5                	mov    %esp,%ebp
80000379:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
8000037c:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000383:	8b 45 08             	mov    0x8(%ebp),%eax
80000386:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
80000389:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000038c:	50                   	push   %eax
8000038d:	e8 4d fd ff ff       	call   800000df <sys_call>
80000392:	83 c4 04             	add    $0x4,%esp
}
80000395:	c9                   	leave  
80000396:	c3                   	ret    
