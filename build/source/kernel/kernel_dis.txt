
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003a70 memsz 0x00020850 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f03  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000b68  00012f04  00012f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00013a6c  00013a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cdd0  00013a80  00013a80  00004a70  2**5
                  ALLOC
  4 .debug_line   00001990  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000650  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004a31  00000000  00000000  00006a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000016ce  00000000  00000000  0000b481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000fa2  00000000  00000000  0000cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000dcd2  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000011f4  00000000  00000000  0000dd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
00013a80 l     O .bss	00000028 paddr_alloc
000102ba l     F .text	0000005d addr_alloc_init
00010317 l     F .text	00000067 addr_alloc_page
0001037e l     F .text	00000061 addr_free_page
000103df l     F .text	00000066 show_mem_info
00010445 l     F .text	00000037 total_mem_size
00012fbc l     O .rodata	0000000c __func__.0
00013aa8 l     O .bss	00000000 kernal_map.1
00000000 l    df *ABS*	00000000 task.c
0001057b l     F .text	0000003d list_node_init
0001309c l     O .rodata	0000000f __func__.9
000105b8 l     F .text	0000002d list_node_next
000130fc l     O .rodata	0000000f __func__.3
000105e5 l     F .text	00000047 list_init
000130ac l     O .rodata	0000000a __func__.8
0001062c l     F .text	00000035 list_is_empty
0001310c l     O .rodata	0000000e __func__.2
00010661 l     F .text	0000002d list_get_size
000130ec l     O .rodata	0000000e __func__.4
0001068e l     F .text	0000002c list_get_first
000130dc l     O .rodata	0000000f __func__.5
000106ba l     F .text	00000007 hlt
000106c1 l     F .text	0000001a far_jump
000106db l     F .text	00000017 write_tr
00013ac0 l     O .bss	00000190 task_manager
000106f2 l     F .text	0000001f switch_to_tss
0001072c l     F .text	000000e5 tss_init
00013090 l     O .rodata	0000000a __func__.10
00013c60 l     O .bss	00000200 empty_task_stack
000108f5 l     F .text	0000000a empty_task
000130b8 l     O .rodata	0000000f __func__.7
000130c8 l     O .rodata	00000011 __func__.6
0001311c l     O .rodata	0000000f __func__.1
0001312c l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010d75 l     F .text	00000028 lgdt
00013e60 l     O .bss	00010000 gdt_table
00023e60 l     O .bss	00008000 is_alloc
0002be60 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010f67 l     F .text	00000007 cli
00010f6e l     F .text	00000007 sti
00010f75 l     F .text	00000007 hlt
00010f7c l     F .text	0000001d inb
00010f99 l     F .text	00000021 outb
00010fba l     F .text	00000028 lidt
00010fe2 l     F .text	00000010 read_eflags
00010ff2 l     F .text	0000000b write_eflags
0002be80 l     O .bss	00000800 idt_table
00010ffd l     F .text	000000e9 print_exception_fram
000110e6 l     F .text	0000003e do_default_handler
00011370 l     F .text	00000047 gate_desc_set
000113f7 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000117a1 l     F .text	00000021 outb
0002c680 l     O .bss	00000004 sys_tick
000117ea l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011864 l     F .text	00000007 sti
0001353c l     O .rodata	0000000c __func__.0
0002c6a0 l     O .bss	000000b4 task_test_task_1
0002c760 l     O .bss	000000b4 task_test_task_2
0002c820 l     O .bss	00001000 test_task_1_stack
0002d820 l     O .bss	00001000 test_task_2_stack
0002e820 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
000119a9 l     F .text	00000047 list_init
000135f4 l     O .rodata	0000000a __func__.1
000119f0 l     F .text	00000035 list_is_empty
00013600 l     O .rodata	0000000e __func__.0
000135e8 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011bbb l     F .text	00000047 list_init
000136b4 l     O .rodata	0000000a __func__.1
00011c02 l     F .text	00000035 list_is_empty
000136c0 l     O .rodata	0000000e __func__.0
000136a8 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011d8b l     F .text	00000047 list_init
000137d4 l     O .rodata	0000000a __func__.3
00011dd2 l     F .text	0000002d list_get_size
000137e0 l     O .rodata	0000000e __func__.2
00011dff l     F .text	0000002c list_get_first
00013800 l     O .rodata	0000000f __func__.0
00011e2b l     F .text	0000002d list_get_last
000137f0 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012133 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
000138d0 l     O .rodata	0000000c __func__.3
000138dc l     O .rodata	0000000f __func__.2
000138ec l     O .rodata	0000000f __func__.1
000138fc l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00013a6c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012998 l     F .text	00000035 list_is_empty
00013a04 l     O .rodata	0000000e __func__.5
000129cd l     F .text	0000002d list_get_size
00013a3c l     O .rodata	0000000e __func__.2
000139f0 l     O .rodata	00000012 __func__.6
00013a14 l     O .rodata	00000011 __func__.4
00013a28 l     O .rodata	00000012 __func__.3
00013a4c l     O .rodata	00000011 __func__.1
00013a60 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012d43 l     F .text	0000001d inb
00012d60 l     F .text	00000021 outb
0002e830 l     O .bss	00000014 mutex
0001221a g     F .text	00000078 bitmap_get_bit
000125ed g     F .text	0000004f kernel_memcpy
000115fd g     F .text	00000098 idt_enable
00010a90 g     F .text	0000000a task_current
00012a85 g     F .text	0000008f list_insert_last
00010b02 g     F .text	00000061 sys_yield
00011258 g     F .text	0000001c do_handler_segment_not_present
000109cc g     F .text	0000004b task_set_ready
0001239a g     F .text	00000021 bitmap_is_set
00011734 g     F .text	0000000b idt_enable_global
0001263c g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012d81 g     F .text	00000088 log_init
00011910 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000124b6 g     F .text	00000047 kernel_strcpy
00011729 g     F .text	0000000b idt_disable_global
000113b7 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000111b0 g     F .text	0000001c do_handler_overflow
000112e4 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011290 g     F .text	0000001c do_handler_general_protection
00011354 g     F .text	0000001c do_handler_control_exception
00011d62 g     F .text	00000029 sem_count
00011140 g     F .text	0000001c do_handler_divider
00012292 g     F .text	00000108 bitmap_set_bit
00011220 g     F .text	0000001c do_handler_double_fault
000112ac g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
0001173f g     F .text	00000039 pic_send_eoi
00012bc5 g     F .text	000000b5 list_remove_last
000109c2 g     F .text	0000000a task_first_task
00011c7a g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010e5c g     F .text	00000094 gdt_init
00011338 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
0001115c g     F .text	0000001c do_handler_debug
0002e850 g     O .bss	00002000 stack
00010d15 g     F .text	00000060 sys_sleep
000118e7 g     F .text	00000029 test_task_2
00011e58 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
0001148a g     F .text	00000173 idt_init
00011ce5 g     F .text	0000007d sem_notify
000111e8 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000112c8 g     F .text	0000001c do_handler_fpu_error
0001097a g     F .text	00000048 task_first_init
00011300 g     F .text	0000001c do_handler_machine_check
000129fa g     F .text	0000008b list_insert_first
00010cca g     F .text	0000004b task_set_wakeup
00010a62 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000124fd g     F .text	00000051 kernel_strncpy
00030850 g       .bss	00000000 mem_free_start
0001186b g     F .text	00000053 kernel_init
00011c37 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012725 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011a72 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
0001123c g     F .text	0000001c do_handler_invalid_tss
00011695 g     F .text	00000094 idt_disable
00010c6e g     F .text	0000005c task_set_sleep
00011178 g     F .text	0000001c do_handler_nmi
00011a25 g     F .text	0000004d mutex_init
000118be g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00012170 g     F .text	00000016 bitmap_byte_count
00011204 g     F .text	0000001c do_handler_device_unavailable
00011778 g     F .text	00000018 idt_enter_protection
0001047c g     F .text	00000011 create_kernal_table
00010b63 g     F .text	0000010b task_slice_end
0001267d g     F .text	00000084 kernel_memcmp
0001131c g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011124 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010711 g     F .text	0000001b task_switch_from_to
00011b03 g     F .text	000000b8 mutex_unlock
00010a9a g     F .text	00000068 task_switch
000125b8 g     F .text	00000035 kernel_strlen
00010a17 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010d9d g     F .text	000000bf segment_desc_set
000111cc g     F .text	0000001c do_handler_bound_range
00012b14 g     F .text	000000b1 list_remove_first
0001254e g     F .text	0000006a kernel_strncmp
00012186 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
000123bb g     F .text	000000fb bitmap_alloc_nbits
000108ff g     F .text	0000007b task_manager_init
0001048d g     F .text	000000ee memory_init
0001213a g     F .text	00000036 pannic
00011274 g     F .text	0000001c do_handler_stack_segment_fault
00011194 g     F .text	0000001c do_handler_breakpoint
00012e09 g     F .text	000000fa log_printf
00010811 g     F .text	000000e4 task_init
00012701 g     F .text	00000024 kernel_sprintf
00010ef0 g     F .text	00000077 gdt_alloc_desc
000128c2 g     F .text	000000d6 kernel_itoa
00012c7a g     F .text	000000c9 list_remove
00011790 g     F .text	00000011 idt_leave_protection
000117c2 g     F .text	00000028 do_handler_time
0001184c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 60 18 00 00       	call   1186b <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 50 08 03 00       	mov    $0x30850,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 e6 18 00 00       	jmp    11910 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 e9 10 00 00       	call   11124 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 e8 10 00 00       	call   11140 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 e7 10 00 00       	call   1115c <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 e6 10 00 00       	call   11178 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 e5 10 00 00       	call   11194 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 e4 10 00 00       	call   111b0 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 e3 10 00 00       	call   111cc <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 e2 10 00 00       	call   111e8 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 e1 10 00 00       	call   11204 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 e2 10 00 00       	call   11220 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 e3 10 00 00       	call   1123c <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 e4 10 00 00       	call   11258 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 e5 10 00 00       	call   11274 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 e6 10 00 00       	call   11290 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 e7 10 00 00       	call   112ac <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 e6 10 00 00       	call   112c8 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 e7 10 00 00       	call   112e4 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 e6 10 00 00       	call   11300 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 e5 10 00 00       	call   1131c <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 e4 10 00 00       	call   11338 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 e5 10 00 00       	call   11354 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 36 15 00 00       	call   117c2 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	83 ec 0c             	sub    $0xc,%esp
   102c6:	50                   	push   %eax
   102c7:	e8 59 17 00 00       	call   11a25 <mutex_init>
   102cc:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   102cf:	8b 45 08             	mov    0x8(%ebp),%eax
   102d2:	8b 55 10             	mov    0x10(%ebp),%edx
   102d5:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   102d8:	8b 45 08             	mov    0x8(%ebp),%eax
   102db:	8b 55 14             	mov    0x14(%ebp),%edx
   102de:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   102e1:	8b 45 08             	mov    0x8(%ebp),%eax
   102e4:	8b 55 18             	mov    0x18(%ebp),%edx
   102e7:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   102ea:	8b 45 08             	mov    0x8(%ebp),%eax
   102ed:	8b 40 20             	mov    0x20(%eax),%eax
   102f0:	8b 55 08             	mov    0x8(%ebp),%edx
   102f3:	8b 4a 24             	mov    0x24(%edx),%ecx
   102f6:	ba 00 00 00 00       	mov    $0x0,%edx
   102fb:	f7 f1                	div    %ecx
   102fd:	89 c2                	mov    %eax,%edx
   102ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10302:	83 c0 14             	add    $0x14,%eax
   10305:	6a 00                	push   $0x0
   10307:	52                   	push   %edx
   10308:	ff 75 0c             	push   0xc(%ebp)
   1030b:	50                   	push   %eax
   1030c:	e8 75 1e 00 00       	call   12186 <bitmap_init>
   10311:	83 c4 10             	add    $0x10,%esp
}
   10314:	90                   	nop
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1031d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	83 ec 0c             	sub    $0xc,%esp
   1032a:	50                   	push   %eax
   1032b:	e8 42 17 00 00       	call   11a72 <mutex_lock>
   10330:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	83 c0 14             	add    $0x14,%eax
   10339:	83 ec 04             	sub    $0x4,%esp
   1033c:	ff 75 0c             	push   0xc(%ebp)
   1033f:	6a 00                	push   $0x0
   10341:	50                   	push   %eax
   10342:	e8 74 20 00 00       	call   123bb <bitmap_alloc_nbits>
   10347:	83 c4 10             	add    $0x10,%esp
   1034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   1034d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10351:	78 17                	js     1036a <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	8b 50 24             	mov    0x24(%eax),%edx
   1035f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10362:	0f af c2             	imul   %edx,%eax
   10365:	01 c8                	add    %ecx,%eax
   10367:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	83 ec 0c             	sub    $0xc,%esp
   10370:	50                   	push   %eax
   10371:	e8 8d 17 00 00       	call   11b03 <mutex_unlock>
   10376:	83 c4 10             	add    $0x10,%esp

  return addr;
   10379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1037c:	c9                   	leave  
   1037d:	c3                   	ret    

0001037e <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1037e:	55                   	push   %ebp
   1037f:	89 e5                	mov    %esp,%ebp
   10381:	53                   	push   %ebx
   10382:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	83 ec 0c             	sub    $0xc,%esp
   1038b:	50                   	push   %eax
   1038c:	e8 e1 16 00 00       	call   11a72 <mutex_lock>
   10391:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 50 1c             	mov    0x1c(%eax),%edx
   1039a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1039d:	29 d0                	sub    %edx,%eax
   1039f:	89 c1                	mov    %eax,%ecx
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 58 24             	mov    0x24(%eax),%ebx
   103a7:	89 c8                	mov    %ecx,%eax
   103a9:	ba 00 00 00 00       	mov    $0x0,%edx
   103ae:	f7 f3                	div    %ebx
   103b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   103b3:	8b 45 08             	mov    0x8(%ebp),%eax
   103b6:	83 c0 14             	add    $0x14,%eax
   103b9:	6a 00                	push   $0x0
   103bb:	ff 75 10             	push   0x10(%ebp)
   103be:	ff 75 f4             	push   -0xc(%ebp)
   103c1:	50                   	push   %eax
   103c2:	e8 cb 1e 00 00       	call   12292 <bitmap_set_bit>
   103c7:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 ec 0c             	sub    $0xc,%esp
   103d0:	50                   	push   %eax
   103d1:	e8 2d 17 00 00       	call   11b03 <mutex_unlock>
   103d6:	83 c4 10             	add    $0x10,%esp
}
   103d9:	90                   	nop
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   103e5:	83 ec 0c             	sub    $0xc,%esp
   103e8:	68 04 2f 01 00       	push   $0x12f04
   103ed:	e8 17 2a 00 00       	call   12e09 <log_printf>
   103f2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   103f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   103fc:	eb 29                	jmp    10427 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10404:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1040e:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10411:	52                   	push   %edx
   10412:	50                   	push   %eax
   10413:	ff 75 f4             	push   -0xc(%ebp)
   10416:	68 10 2f 01 00       	push   $0x12f10
   1041b:	e8 e9 29 00 00       	call   12e09 <log_printf>
   10420:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10423:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	8b 40 50             	mov    0x50(%eax),%eax
   1042d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10430:	7c cc                	jl     103fe <show_mem_info+0x1f>
    }

    log_printf("");
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	68 22 2f 01 00       	push   $0x12f22
   1043a:	e8 ca 29 00 00       	call   12e09 <log_printf>
   1043f:	83 c4 10             	add    $0x10,%esp
}
   10442:	90                   	nop
   10443:	c9                   	leave  
   10444:	c3                   	ret    

00010445 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   10445:	55                   	push   %ebp
   10446:	89 e5                	mov    %esp,%ebp
   10448:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   1044b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10459:	eb 11                	jmp    1046c <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   1045b:	8b 45 08             	mov    0x8(%ebp),%eax
   1045e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10461:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10465:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10468:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	8b 40 50             	mov    0x50(%eax),%eax
   10472:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10475:	7c e4                	jl     1045b <total_mem_size+0x16>
    }

    return mem_size;
   10477:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1047a:	c9                   	leave  
   1047b:	c3                   	ret    

0001047c <create_kernal_table>:


void create_kernal_table(void) {
   1047c:	55                   	push   %ebp
   1047d:	89 e5                	mov    %esp,%ebp
   1047f:	83 ec 10             	sub    $0x10,%esp
  static memory_map_t kernal_map[] = {

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10482:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10489:	90                   	nop
    memory_map_t *map = kernal_map + i;

    // uint32_t vstart = down2(map)
  }
}
   1048a:	90                   	nop
   1048b:	c9                   	leave  
   1048c:	c3                   	ret    

0001048d <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1048d:	55                   	push   %ebp
   1048e:	89 e5                	mov    %esp,%ebp
   10490:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10493:	83 ec 0c             	sub    $0xc,%esp
   10496:	68 23 2f 01 00       	push   $0x12f23
   1049b:	e8 69 29 00 00       	call   12e09 <log_printf>
   104a0:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: %d", mem_free_start);
   104a3:	0f b6 05 50 08 03 00 	movzbl 0x30850,%eax
   104aa:	0f be c0             	movsbl %al,%eax
   104ad:	83 ec 08             	sub    $0x8,%esp
   104b0:	50                   	push   %eax
   104b1:	68 2f 2f 01 00       	push   $0x12f2f
   104b6:	e8 4e 29 00 00       	call   12e09 <log_printf>
   104bb:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   104be:	83 ec 0c             	sub    $0xc,%esp
   104c1:	ff 75 08             	push   0x8(%ebp)
   104c4:	e8 16 ff ff ff       	call   103df <show_mem_info>
   104c9:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   104cc:	83 ec 0c             	sub    $0xc,%esp
   104cf:	ff 75 08             	push   0x8(%ebp)
   104d2:	e8 6e ff ff ff       	call   10445 <total_mem_size>
   104d7:	83 c4 10             	add    $0x10,%esp
   104da:	2d 00 00 10 00       	sub    $0x100000,%eax
   104df:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   104e2:	83 ec 08             	sub    $0x8,%esp
   104e5:	68 00 10 00 00       	push   $0x1000
   104ea:	ff 75 f4             	push   -0xc(%ebp)
   104ed:	e8 bb fd ff ff       	call   102ad <down2>
   104f2:	83 c4 10             	add    $0x10,%esp
   104f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   104f8:	83 ec 04             	sub    $0x4,%esp
   104fb:	ff 75 f4             	push   -0xc(%ebp)
   104fe:	68 00 00 10 00       	push   $0x100000
   10503:	68 42 2f 01 00       	push   $0x12f42
   10508:	e8 fc 28 00 00       	call   12e09 <log_printf>
   1050d:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10510:	c7 45 f0 50 08 03 00 	movl   $0x30850,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10517:	83 ec 0c             	sub    $0xc,%esp
   1051a:	68 00 10 00 00       	push   $0x1000
   1051f:	ff 75 f4             	push   -0xc(%ebp)
   10522:	68 00 00 10 00       	push   $0x100000
   10527:	ff 75 f0             	push   -0x10(%ebp)
   1052a:	68 80 3a 01 00       	push   $0x13a80
   1052f:	e8 86 fd ff ff       	call   102ba <addr_alloc_init>
   10534:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10537:	a1 a0 3a 01 00       	mov    0x13aa0,%eax
   1053c:	c1 e8 0c             	shr    $0xc,%eax
   1053f:	83 ec 0c             	sub    $0xc,%esp
   10542:	50                   	push   %eax
   10543:	e8 28 1c 00 00       	call   12170 <bitmap_byte_count>
   10548:	83 c4 10             	add    $0x10,%esp
   1054b:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   1054e:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10555:	76 1c                	jbe    10573 <memory_init+0xe6>
   10557:	68 60 2f 01 00       	push   $0x12f60
   1055c:	68 bc 2f 01 00       	push   $0x12fbc
   10561:	68 9e 00 00 00       	push   $0x9e
   10566:	68 84 2f 01 00       	push   $0x12f84
   1056b:	e8 ca 1b 00 00       	call   1213a <pannic>
   10570:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10573:	e8 04 ff ff ff       	call   1047c <create_kernal_table>
   10578:	90                   	nop
   10579:	c9                   	leave  
   1057a:	c3                   	ret    

0001057b <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1057b:	55                   	push   %ebp
   1057c:	89 e5                	mov    %esp,%ebp
   1057e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10581:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10585:	75 19                	jne    105a0 <list_node_init+0x25>
   10587:	68 c8 2f 01 00       	push   $0x12fc8
   1058c:	68 9c 30 01 00       	push   $0x1309c
   10591:	6a 20                	push   $0x20
   10593:	68 e0 2f 01 00       	push   $0x12fe0
   10598:	e8 9d 1b 00 00       	call   1213a <pannic>
   1059d:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   105a0:	8b 45 08             	mov    0x8(%ebp),%eax
   105a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   105aa:	8b 45 08             	mov    0x8(%ebp),%eax
   105ad:	8b 50 04             	mov    0x4(%eax),%edx
   105b0:	8b 45 08             	mov    0x8(%ebp),%eax
   105b3:	89 10                	mov    %edx,(%eax)
}
   105b5:	90                   	nop
   105b6:	c9                   	leave  
   105b7:	c3                   	ret    

000105b8 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   105b8:	55                   	push   %ebp
   105b9:	89 e5                	mov    %esp,%ebp
   105bb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   105be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105c2:	75 19                	jne    105dd <list_node_next+0x25>
   105c4:	68 c8 2f 01 00       	push   $0x12fc8
   105c9:	68 fc 30 01 00       	push   $0x130fc
   105ce:	6a 2b                	push   $0x2b
   105d0:	68 e0 2f 01 00       	push   $0x12fe0
   105d5:	e8 60 1b 00 00       	call   1213a <pannic>
   105da:	83 c4 10             	add    $0x10,%esp

    return node->next;
   105dd:	8b 45 08             	mov    0x8(%ebp),%eax
   105e0:	8b 40 04             	mov    0x4(%eax),%eax
}
   105e3:	c9                   	leave  
   105e4:	c3                   	ret    

000105e5 <list_init>:

static inline void list_init(list_t *list) {
   105e5:	55                   	push   %ebp
   105e6:	89 e5                	mov    %esp,%ebp
   105e8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   105eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105ef:	75 19                	jne    1060a <list_init+0x25>
   105f1:	68 1e 30 01 00       	push   $0x1301e
   105f6:	68 ac 30 01 00       	push   $0x130ac
   105fb:	6a 31                	push   $0x31
   105fd:	68 e0 2f 01 00       	push   $0x12fe0
   10602:	e8 33 1b 00 00       	call   1213a <pannic>
   10607:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1060a:	8b 45 08             	mov    0x8(%ebp),%eax
   1060d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10614:	8b 45 08             	mov    0x8(%ebp),%eax
   10617:	8b 50 04             	mov    0x4(%eax),%edx
   1061a:	8b 45 08             	mov    0x8(%ebp),%eax
   1061d:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1061f:	8b 45 08             	mov    0x8(%ebp),%eax
   10622:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10629:	90                   	nop
   1062a:	c9                   	leave  
   1062b:	c3                   	ret    

0001062c <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   1062c:	55                   	push   %ebp
   1062d:	89 e5                	mov    %esp,%ebp
   1062f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10632:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10636:	75 19                	jne    10651 <list_is_empty+0x25>
   10638:	68 1e 30 01 00       	push   $0x1301e
   1063d:	68 0c 31 01 00       	push   $0x1310c
   10642:	6a 38                	push   $0x38
   10644:	68 e0 2f 01 00       	push   $0x12fe0
   10649:	e8 ec 1a 00 00       	call   1213a <pannic>
   1064e:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10651:	8b 45 08             	mov    0x8(%ebp),%eax
   10654:	8b 40 08             	mov    0x8(%eax),%eax
   10657:	85 c0                	test   %eax,%eax
   10659:	0f 94 c0             	sete   %al
   1065c:	0f b6 c0             	movzbl %al,%eax
}
   1065f:	c9                   	leave  
   10660:	c3                   	ret    

00010661 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10661:	55                   	push   %ebp
   10662:	89 e5                	mov    %esp,%ebp
   10664:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10667:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1066b:	75 19                	jne    10686 <list_get_size+0x25>
   1066d:	68 1e 30 01 00       	push   $0x1301e
   10672:	68 ec 30 01 00       	push   $0x130ec
   10677:	6a 3e                	push   $0x3e
   10679:	68 e0 2f 01 00       	push   $0x12fe0
   1067e:	e8 b7 1a 00 00       	call   1213a <pannic>
   10683:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10686:	8b 45 08             	mov    0x8(%ebp),%eax
   10689:	8b 40 08             	mov    0x8(%eax),%eax
}
   1068c:	c9                   	leave  
   1068d:	c3                   	ret    

0001068e <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   1068e:	55                   	push   %ebp
   1068f:	89 e5                	mov    %esp,%ebp
   10691:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10694:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10698:	75 19                	jne    106b3 <list_get_first+0x25>
   1069a:	68 1e 30 01 00       	push   $0x1301e
   1069f:	68 dc 30 01 00       	push   $0x130dc
   106a4:	6a 44                	push   $0x44
   106a6:	68 e0 2f 01 00       	push   $0x12fe0
   106ab:	e8 8a 1a 00 00       	call   1213a <pannic>
   106b0:	83 c4 10             	add    $0x10,%esp

    return list->first;
   106b3:	8b 45 08             	mov    0x8(%ebp),%eax
   106b6:	8b 00                	mov    (%eax),%eax
}
   106b8:	c9                   	leave  
   106b9:	c3                   	ret    

000106ba <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   106ba:	55                   	push   %ebp
   106bb:	89 e5                	mov    %esp,%ebp
   106bd:	f4                   	hlt    
   106be:	90                   	nop
   106bf:	5d                   	pop    %ebp
   106c0:	c3                   	ret    

000106c1 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   106c1:	55                   	push   %ebp
   106c2:	89 e5                	mov    %esp,%ebp
   106c4:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   106c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   106ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
   106cd:	8b 45 08             	mov    0x8(%ebp),%eax
   106d0:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   106d3:	8d 45 f8             	lea    -0x8(%ebp),%eax
   106d6:	ff 28                	ljmp   *(%eax)
}
   106d8:	90                   	nop
   106d9:	c9                   	leave  
   106da:	c3                   	ret    

000106db <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   106db:	55                   	push   %ebp
   106dc:	89 e5                	mov    %esp,%ebp
   106de:	83 ec 04             	sub    $0x4,%esp
   106e1:	8b 45 08             	mov    0x8(%ebp),%eax
   106e4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   106e8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   106ec:	0f 00 d8             	ltr    %ax
}
   106ef:	90                   	nop
   106f0:	c9                   	leave  
   106f1:	c3                   	ret    

000106f2 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   106f2:	55                   	push   %ebp
   106f3:	89 e5                	mov    %esp,%ebp
   106f5:	83 ec 04             	sub    $0x4,%esp
   106f8:	8b 45 08             	mov    0x8(%ebp),%eax
   106fb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   106ff:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10703:	6a 00                	push   $0x0
   10705:	50                   	push   %eax
   10706:	e8 b6 ff ff ff       	call   106c1 <far_jump>
   1070b:	83 c4 08             	add    $0x8,%esp
}
   1070e:	90                   	nop
   1070f:	c9                   	leave  
   10710:	c3                   	ret    

00010711 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10711:	55                   	push   %ebp
   10712:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10714:	8b 45 0c             	mov    0xc(%ebp),%eax
   10717:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   1071d:	0f b7 c0             	movzwl %ax,%eax
   10720:	50                   	push   %eax
   10721:	e8 cc ff ff ff       	call   106f2 <switch_to_tss>
   10726:	83 c4 04             	add    $0x4,%esp
}
   10729:	90                   	nop
   1072a:	c9                   	leave  
   1072b:	c3                   	ret    

0001072c <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   1072c:	55                   	push   %ebp
   1072d:	89 e5                	mov    %esp,%ebp
   1072f:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10732:	8b 45 08             	mov    0x8(%ebp),%eax
   10735:	83 c0 48             	add    $0x48,%eax
   10738:	83 ec 04             	sub    $0x4,%esp
   1073b:	6a 68                	push   $0x68
   1073d:	6a 00                	push   $0x0
   1073f:	50                   	push   %eax
   10740:	e8 f7 1e 00 00       	call   1263c <kernel_memset>
   10745:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10748:	8b 45 08             	mov    0x8(%ebp),%eax
   1074b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1074e:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10751:	8b 45 08             	mov    0x8(%ebp),%eax
   10754:	8b 55 10             	mov    0x10(%ebp),%edx
   10757:	89 50 4c             	mov    %edx,0x4c(%eax)
   1075a:	8b 45 08             	mov    0x8(%ebp),%eax
   1075d:	8b 50 4c             	mov    0x4c(%eax),%edx
   10760:	8b 45 08             	mov    0x8(%ebp),%eax
   10763:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10769:	8b 45 08             	mov    0x8(%ebp),%eax
   1076c:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10773:	8b 45 08             	mov    0x8(%ebp),%eax
   10776:	8b 50 50             	mov    0x50(%eax),%edx
   10779:	8b 45 08             	mov    0x8(%ebp),%eax
   1077c:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10782:	8b 45 08             	mov    0x8(%ebp),%eax
   10785:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   1078c:	00 00 00 
   1078f:	8b 45 08             	mov    0x8(%ebp),%eax
   10792:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10798:	8b 45 08             	mov    0x8(%ebp),%eax
   1079b:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   107a1:	8b 45 08             	mov    0x8(%ebp),%eax
   107a4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   107aa:	8b 45 08             	mov    0x8(%ebp),%eax
   107ad:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   107b3:	8b 45 08             	mov    0x8(%ebp),%eax
   107b6:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   107bc:	8b 45 08             	mov    0x8(%ebp),%eax
   107bf:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   107c5:	8b 45 08             	mov    0x8(%ebp),%eax
   107c8:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   107cf:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   107d2:	8b 45 08             	mov    0x8(%ebp),%eax
   107d5:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   107dc:	e8 0f 07 00 00       	call   10ef0 <gdt_alloc_desc>
   107e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   107e4:	8b 45 08             	mov    0x8(%ebp),%eax
   107e7:	83 c0 48             	add    $0x48,%eax
   107ea:	89 c2                	mov    %eax,%edx
   107ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107ef:	0f b7 c0             	movzwl %ax,%eax
   107f2:	68 89 00 00 00       	push   $0x89
   107f7:	6a 68                	push   $0x68
   107f9:	52                   	push   %edx
   107fa:	50                   	push   %eax
   107fb:	e8 9d 05 00 00       	call   10d9d <segment_desc_set>
   10800:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10803:	8b 45 08             	mov    0x8(%ebp),%eax
   10806:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10809:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   1080f:	c9                   	leave  
   10810:	c3                   	ret    

00010811 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10811:	55                   	push   %ebp
   10812:	89 e5                	mov    %esp,%ebp
   10814:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10817:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1081b:	75 19                	jne    10836 <task_init+0x25>
   1081d:	68 31 30 01 00       	push   $0x13031
   10822:	68 90 30 01 00       	push   $0x13090
   10827:	6a 60                	push   $0x60
   10829:	68 44 30 01 00       	push   $0x13044
   1082e:	e8 07 19 00 00       	call   1213a <pannic>
   10833:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10836:	83 ec 04             	sub    $0x4,%esp
   10839:	ff 75 14             	push   0x14(%ebp)
   1083c:	ff 75 10             	push   0x10(%ebp)
   1083f:	ff 75 08             	push   0x8(%ebp)
   10842:	e8 e5 fe ff ff       	call   1072c <tss_init>
   10847:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1084a:	8b 45 08             	mov    0x8(%ebp),%eax
   1084d:	83 c0 10             	add    $0x10,%eax
   10850:	83 ec 04             	sub    $0x4,%esp
   10853:	6a 20                	push   $0x20
   10855:	ff 75 0c             	push   0xc(%ebp)
   10858:	50                   	push   %eax
   10859:	e8 9f 1c 00 00       	call   124fd <kernel_strncpy>
   1085e:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10861:	8b 45 08             	mov    0x8(%ebp),%eax
   10864:	83 c0 30             	add    $0x30,%eax
   10867:	83 ec 0c             	sub    $0xc,%esp
   1086a:	50                   	push   %eax
   1086b:	e8 0b fd ff ff       	call   1057b <list_node_init>
   10870:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10873:	8b 45 08             	mov    0x8(%ebp),%eax
   10876:	83 c0 38             	add    $0x38,%eax
   10879:	83 ec 0c             	sub    $0xc,%esp
   1087c:	50                   	push   %eax
   1087d:	e8 f9 fc ff ff       	call   1057b <list_node_init>
   10882:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10885:	8b 45 08             	mov    0x8(%ebp),%eax
   10888:	83 c0 40             	add    $0x40,%eax
   1088b:	83 ec 0c             	sub    $0xc,%esp
   1088e:	50                   	push   %eax
   1088f:	e8 e7 fc ff ff       	call   1057b <list_node_init>
   10894:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10897:	8b 45 08             	mov    0x8(%ebp),%eax
   1089a:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   108a1:	8b 45 08             	mov    0x8(%ebp),%eax
   108a4:	8b 50 08             	mov    0x8(%eax),%edx
   108a7:	8b 45 08             	mov    0x8(%ebp),%eax
   108aa:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   108ad:	8b 45 08             	mov    0x8(%ebp),%eax
   108b0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   108b7:	e8 bc 0e 00 00       	call   11778 <idt_enter_protection>
   108bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   108bf:	8b 45 08             	mov    0x8(%ebp),%eax
   108c2:	83 c0 38             	add    $0x38,%eax
   108c5:	83 ec 08             	sub    $0x8,%esp
   108c8:	50                   	push   %eax
   108c9:	68 d0 3a 01 00       	push   $0x13ad0
   108ce:	e8 b2 21 00 00       	call   12a85 <list_insert_last>
   108d3:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   108d6:	83 ec 0c             	sub    $0xc,%esp
   108d9:	ff 75 08             	push   0x8(%ebp)
   108dc:	e8 eb 00 00 00       	call   109cc <task_set_ready>
   108e1:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   108e4:	83 ec 0c             	sub    $0xc,%esp
   108e7:	ff 75 f4             	push   -0xc(%ebp)
   108ea:	e8 a1 0e 00 00       	call   11790 <idt_leave_protection>
   108ef:	83 c4 10             	add    $0x10,%esp
}
   108f2:	90                   	nop
   108f3:	c9                   	leave  
   108f4:	c3                   	ret    

000108f5 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   108f5:	55                   	push   %ebp
   108f6:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   108f8:	e8 bd fd ff ff       	call   106ba <hlt>
   108fd:	eb f9                	jmp    108f8 <empty_task+0x3>

000108ff <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   108ff:	55                   	push   %ebp
   10900:	89 e5                	mov    %esp,%ebp
   10902:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	68 c4 3a 01 00       	push   $0x13ac4
   1090d:	e8 d3 fc ff ff       	call   105e5 <list_init>
   10912:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10915:	83 ec 0c             	sub    $0xc,%esp
   10918:	68 d0 3a 01 00       	push   $0x13ad0
   1091d:	e8 c3 fc ff ff       	call   105e5 <list_init>
   10922:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10925:	83 ec 0c             	sub    $0xc,%esp
   10928:	68 dc 3a 01 00       	push   $0x13adc
   1092d:	e8 b3 fc ff ff       	call   105e5 <list_init>
   10932:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10935:	c7 05 c0 3a 01 00 00 	movl   $0x0,0x13ac0
   1093c:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1093f:	ba 60 3e 01 00       	mov    $0x13e60,%edx
   10944:	b8 f5 08 01 00       	mov    $0x108f5,%eax
   10949:	52                   	push   %edx
   1094a:	50                   	push   %eax
   1094b:	68 79 30 01 00       	push   $0x13079
   10950:	68 9c 3b 01 00       	push   $0x13b9c
   10955:	e8 b7 fe ff ff       	call   10811 <task_init>
   1095a:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   1095d:	83 ec 0c             	sub    $0xc,%esp
   10960:	68 9c 3b 01 00       	push   $0x13b9c
   10965:	e8 ad 00 00 00       	call   10a17 <task_set_unready>
   1096a:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   1096d:	c7 05 9c 3b 01 00 00 	movl   $0x0,0x13b9c
   10974:	00 00 00 
}
   10977:	90                   	nop
   10978:	c9                   	leave  
   10979:	c3                   	ret    

0001097a <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   1097a:	55                   	push   %ebp
   1097b:	89 e5                	mov    %esp,%ebp
   1097d:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   10980:	6a 00                	push   $0x0
   10982:	6a 00                	push   $0x0
   10984:	68 84 30 01 00       	push   $0x13084
   10989:	68 e8 3a 01 00       	push   $0x13ae8
   1098e:	e8 7e fe ff ff       	call   10811 <task_init>
   10993:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   10996:	a1 98 3b 01 00       	mov    0x13b98,%eax
   1099b:	0f b7 c0             	movzwl %ax,%eax
   1099e:	83 ec 0c             	sub    $0xc,%esp
   109a1:	50                   	push   %eax
   109a2:	e8 34 fd ff ff       	call   106db <write_tr>
   109a7:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   109aa:	c7 05 c0 3a 01 00 e8 	movl   $0x13ae8,0x13ac0
   109b1:	3a 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   109b4:	a1 c0 3a 01 00       	mov    0x13ac0,%eax
   109b9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   109bf:	90                   	nop
   109c0:	c9                   	leave  
   109c1:	c3                   	ret    

000109c2 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   109c2:	55                   	push   %ebp
   109c3:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   109c5:	b8 e8 3a 01 00       	mov    $0x13ae8,%eax
}
   109ca:	5d                   	pop    %ebp
   109cb:	c3                   	ret    

000109cc <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   109cc:	55                   	push   %ebp
   109cd:	89 e5                	mov    %esp,%ebp
   109cf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   109d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109d6:	75 1c                	jne    109f4 <task_set_ready+0x28>
   109d8:	68 31 30 01 00       	push   $0x13031
   109dd:	68 b8 30 01 00       	push   $0x130b8
   109e2:	68 c9 00 00 00       	push   $0xc9
   109e7:	68 44 30 01 00       	push   $0x13044
   109ec:	e8 49 17 00 00       	call   1213a <pannic>
   109f1:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   109f4:	8b 45 08             	mov    0x8(%ebp),%eax
   109f7:	83 c0 30             	add    $0x30,%eax
   109fa:	83 ec 08             	sub    $0x8,%esp
   109fd:	50                   	push   %eax
   109fe:	68 c4 3a 01 00       	push   $0x13ac4
   10a03:	e8 7d 20 00 00       	call   12a85 <list_insert_last>
   10a08:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10a0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10a14:	90                   	nop
   10a15:	c9                   	leave  
   10a16:	c3                   	ret    

00010a17 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10a17:	55                   	push   %ebp
   10a18:	89 e5                	mov    %esp,%ebp
   10a1a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10a1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a21:	75 1c                	jne    10a3f <task_set_unready+0x28>
   10a23:	68 31 30 01 00       	push   $0x13031
   10a28:	68 c8 30 01 00       	push   $0x130c8
   10a2d:	68 d8 00 00 00       	push   $0xd8
   10a32:	68 44 30 01 00       	push   $0x13044
   10a37:	e8 fe 16 00 00       	call   1213a <pannic>
   10a3c:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a42:	83 c0 30             	add    $0x30,%eax
   10a45:	83 ec 08             	sub    $0x8,%esp
   10a48:	50                   	push   %eax
   10a49:	68 c4 3a 01 00       	push   $0x13ac4
   10a4e:	e8 27 22 00 00       	call   12c7a <list_remove>
   10a53:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10a56:	8b 45 08             	mov    0x8(%ebp),%eax
   10a59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10a5f:	90                   	nop
   10a60:	c9                   	leave  
   10a61:	c3                   	ret    

00010a62 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10a62:	55                   	push   %ebp
   10a63:	89 e5                	mov    %esp,%ebp
   10a65:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10a68:	83 ec 0c             	sub    $0xc,%esp
   10a6b:	68 c4 3a 01 00       	push   $0x13ac4
   10a70:	e8 19 fc ff ff       	call   1068e <list_get_first>
   10a75:	83 c4 10             	add    $0x10,%esp
   10a78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10a7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a7f:	74 08                	je     10a89 <task_ready_first+0x27>
   10a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a84:	83 e8 30             	sub    $0x30,%eax
   10a87:	eb 05                	jmp    10a8e <task_ready_first+0x2c>
   10a89:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a8e:	c9                   	leave  
   10a8f:	c3                   	ret    

00010a90 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10a90:	55                   	push   %ebp
   10a91:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10a93:	a1 c0 3a 01 00       	mov    0x13ac0,%eax
}
   10a98:	5d                   	pop    %ebp
   10a99:	c3                   	ret    

00010a9a <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10a9a:	55                   	push   %ebp
   10a9b:	89 e5                	mov    %esp,%ebp
   10a9d:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10aa0:	e8 d3 0c 00 00       	call   11778 <idt_enter_protection>
   10aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10aa8:	e8 b5 ff ff ff       	call   10a62 <task_ready_first>
   10aad:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10ab0:	a1 c0 3a 01 00       	mov    0x13ac0,%eax
   10ab5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10ab8:	74 37                	je     10af1 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10aba:	a1 c0 3a 01 00       	mov    0x13ac0,%eax
   10abf:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10ac2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ac6:	75 07                	jne    10acf <task_switch+0x35>
            to = &task_manager.empty_task;
   10ac8:	c7 45 f4 9c 3b 01 00 	movl   $0x13b9c,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ad2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10adb:	a3 c0 3a 01 00       	mov    %eax,0x13ac0
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10ae0:	83 ec 08             	sub    $0x8,%esp
   10ae3:	ff 75 f4             	push   -0xc(%ebp)
   10ae6:	ff 75 ec             	push   -0x14(%ebp)
   10ae9:	e8 23 fc ff ff       	call   10711 <task_switch_from_to>
   10aee:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10af1:	83 ec 0c             	sub    $0xc,%esp
   10af4:	ff 75 f0             	push   -0x10(%ebp)
   10af7:	e8 94 0c 00 00       	call   11790 <idt_leave_protection>
   10afc:	83 c4 10             	add    $0x10,%esp
}
   10aff:	90                   	nop
   10b00:	c9                   	leave  
   10b01:	c3                   	ret    

00010b02 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10b02:	55                   	push   %ebp
   10b03:	89 e5                	mov    %esp,%ebp
   10b05:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10b08:	e8 6b 0c 00 00       	call   11778 <idt_enter_protection>
   10b0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10b10:	83 ec 0c             	sub    $0xc,%esp
   10b13:	68 c4 3a 01 00       	push   $0x13ac4
   10b18:	e8 44 fb ff ff       	call   10661 <list_get_size>
   10b1d:	83 c4 10             	add    $0x10,%esp
   10b20:	83 f8 01             	cmp    $0x1,%eax
   10b23:	7e 29                	jle    10b4e <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10b25:	e8 66 ff ff ff       	call   10a90 <task_current>
   10b2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10b2d:	83 ec 0c             	sub    $0xc,%esp
   10b30:	ff 75 f0             	push   -0x10(%ebp)
   10b33:	e8 df fe ff ff       	call   10a17 <task_set_unready>
   10b38:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10b3b:	83 ec 0c             	sub    $0xc,%esp
   10b3e:	ff 75 f0             	push   -0x10(%ebp)
   10b41:	e8 86 fe ff ff       	call   109cc <task_set_ready>
   10b46:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10b49:	e8 4c ff ff ff       	call   10a9a <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10b4e:	83 ec 0c             	sub    $0xc,%esp
   10b51:	ff 75 f4             	push   -0xc(%ebp)
   10b54:	e8 37 0c 00 00       	call   11790 <idt_leave_protection>
   10b59:	83 c4 10             	add    $0x10,%esp
    return 0;
   10b5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b61:	c9                   	leave  
   10b62:	c3                   	ret    

00010b63 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10b63:	55                   	push   %ebp
   10b64:	89 e5                	mov    %esp,%ebp
   10b66:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10b69:	83 ec 0c             	sub    $0xc,%esp
   10b6c:	68 dc 3a 01 00       	push   $0x13adc
   10b71:	e8 18 fb ff ff       	call   1068e <list_get_first>
   10b76:	83 c4 10             	add    $0x10,%esp
   10b79:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10b7c:	eb 62                	jmp    10be0 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10b7e:	83 ec 0c             	sub    $0xc,%esp
   10b81:	ff 75 f4             	push   -0xc(%ebp)
   10b84:	e8 2f fa ff ff       	call   105b8 <list_node_next>
   10b89:	83 c4 10             	add    $0x10,%esp
   10b8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10b8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b93:	74 08                	je     10b9d <task_slice_end+0x3a>
   10b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b98:	83 e8 30             	sub    $0x30,%eax
   10b9b:	eb 05                	jmp    10ba2 <task_slice_end+0x3f>
   10b9d:	b8 00 00 00 00       	mov    $0x0,%eax
   10ba2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10ba5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10ba8:	8b 40 0c             	mov    0xc(%eax),%eax
   10bab:	8d 50 ff             	lea    -0x1(%eax),%edx
   10bae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10bb1:	89 50 0c             	mov    %edx,0xc(%eax)
   10bb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10bb7:	8b 40 0c             	mov    0xc(%eax),%eax
   10bba:	85 c0                	test   %eax,%eax
   10bbc:	75 1c                	jne    10bda <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10bbe:	83 ec 0c             	sub    $0xc,%esp
   10bc1:	ff 75 e8             	push   -0x18(%ebp)
   10bc4:	e8 01 01 00 00       	call   10cca <task_set_wakeup>
   10bc9:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10bcc:	83 ec 0c             	sub    $0xc,%esp
   10bcf:	ff 75 e8             	push   -0x18(%ebp)
   10bd2:	e8 f5 fd ff ff       	call   109cc <task_set_ready>
   10bd7:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10bda:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10be0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10be4:	75 98                	jne    10b7e <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10be6:	e8 a5 fe ff ff       	call   10a90 <task_current>
   10beb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10bee:	81 7d f0 9c 3b 01 00 	cmpl   $0x13b9c,-0x10(%ebp)
   10bf5:	75 23                	jne    10c1a <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10bf7:	83 ec 0c             	sub    $0xc,%esp
   10bfa:	68 c4 3a 01 00       	push   $0x13ac4
   10bff:	e8 28 fa ff ff       	call   1062c <list_is_empty>
   10c04:	83 c4 10             	add    $0x10,%esp
   10c07:	85 c0                	test   %eax,%eax
   10c09:	75 60                	jne    10c6b <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10c0b:	c7 05 9c 3b 01 00 00 	movl   $0x0,0x13b9c
   10c12:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10c15:	e8 80 fe ff ff       	call   10a9a <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10c1a:	81 7d f0 9c 3b 01 00 	cmpl   $0x13b9c,-0x10(%ebp)
   10c21:	74 49                	je     10c6c <task_slice_end+0x109>
   10c23:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c26:	8b 40 08             	mov    0x8(%eax),%eax
   10c29:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c2f:	89 50 08             	mov    %edx,0x8(%eax)
   10c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c35:	8b 40 08             	mov    0x8(%eax),%eax
   10c38:	85 c0                	test   %eax,%eax
   10c3a:	75 30                	jne    10c6c <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10c3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c3f:	8b 50 04             	mov    0x4(%eax),%edx
   10c42:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c45:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10c48:	83 ec 0c             	sub    $0xc,%esp
   10c4b:	ff 75 f0             	push   -0x10(%ebp)
   10c4e:	e8 c4 fd ff ff       	call   10a17 <task_set_unready>
   10c53:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10c56:	83 ec 0c             	sub    $0xc,%esp
   10c59:	ff 75 f0             	push   -0x10(%ebp)
   10c5c:	e8 6b fd ff ff       	call   109cc <task_set_ready>
   10c61:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10c64:	e8 31 fe ff ff       	call   10a9a <task_switch>
   10c69:	eb 01                	jmp    10c6c <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10c6b:	90                   	nop
    }
}
   10c6c:	c9                   	leave  
   10c6d:	c3                   	ret    

00010c6e <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10c6e:	55                   	push   %ebp
   10c6f:	89 e5                	mov    %esp,%ebp
   10c71:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c78:	75 1c                	jne    10c96 <task_set_sleep+0x28>
   10c7a:	68 31 30 01 00       	push   $0x13031
   10c7f:	68 1c 31 01 00       	push   $0x1311c
   10c84:	68 66 01 00 00       	push   $0x166
   10c89:	68 44 30 01 00       	push   $0x13044
   10c8e:	e8 a7 14 00 00       	call   1213a <pannic>
   10c93:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10c96:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10c9a:	74 2b                	je     10cc7 <task_set_sleep+0x59>

    task->sleep = slice;
   10c9c:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca2:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10ca5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10cae:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb1:	83 c0 30             	add    $0x30,%eax
   10cb4:	83 ec 08             	sub    $0x8,%esp
   10cb7:	50                   	push   %eax
   10cb8:	68 dc 3a 01 00       	push   $0x13adc
   10cbd:	e8 c3 1d 00 00       	call   12a85 <list_insert_last>
   10cc2:	83 c4 10             	add    $0x10,%esp
   10cc5:	eb 01                	jmp    10cc8 <task_set_sleep+0x5a>
    if (slice == 0) return;
   10cc7:	90                   	nop
}
   10cc8:	c9                   	leave  
   10cc9:	c3                   	ret    

00010cca <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10cca:	55                   	push   %ebp
   10ccb:	89 e5                	mov    %esp,%ebp
   10ccd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10cd0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cd4:	75 1c                	jne    10cf2 <task_set_wakeup+0x28>
   10cd6:	68 31 30 01 00       	push   $0x13031
   10cdb:	68 2c 31 01 00       	push   $0x1312c
   10ce0:	68 74 01 00 00       	push   $0x174
   10ce5:	68 44 30 01 00       	push   $0x13044
   10cea:	e8 4b 14 00 00       	call   1213a <pannic>
   10cef:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10cf2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf5:	83 c0 30             	add    $0x30,%eax
   10cf8:	83 ec 08             	sub    $0x8,%esp
   10cfb:	50                   	push   %eax
   10cfc:	68 dc 3a 01 00       	push   $0x13adc
   10d01:	e8 74 1f 00 00       	call   12c7a <list_remove>
   10d06:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10d09:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d12:	90                   	nop
   10d13:	c9                   	leave  
   10d14:	c3                   	ret    

00010d15 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10d15:	55                   	push   %ebp
   10d16:	89 e5                	mov    %esp,%ebp
   10d18:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10d1b:	e8 58 0a 00 00       	call   11778 <idt_enter_protection>
   10d20:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10d23:	e8 68 fd ff ff       	call   10a90 <task_current>
   10d28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10d2b:	83 ec 0c             	sub    $0xc,%esp
   10d2e:	ff 75 f0             	push   -0x10(%ebp)
   10d31:	e8 e1 fc ff ff       	call   10a17 <task_set_unready>
   10d36:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10d39:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3c:	83 c0 09             	add    $0x9,%eax
   10d3f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10d44:	f7 e2                	mul    %edx
   10d46:	89 d0                	mov    %edx,%eax
   10d48:	c1 e8 03             	shr    $0x3,%eax
   10d4b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10d4e:	83 ec 08             	sub    $0x8,%esp
   10d51:	ff 75 ec             	push   -0x14(%ebp)
   10d54:	ff 75 f0             	push   -0x10(%ebp)
   10d57:	e8 12 ff ff ff       	call   10c6e <task_set_sleep>
   10d5c:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10d5f:	e8 36 fd ff ff       	call   10a9a <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10d64:	83 ec 0c             	sub    $0xc,%esp
   10d67:	ff 75 f4             	push   -0xc(%ebp)
   10d6a:	e8 21 0a 00 00       	call   11790 <idt_leave_protection>
   10d6f:	83 c4 10             	add    $0x10,%esp
   10d72:	90                   	nop
   10d73:	c9                   	leave  
   10d74:	c3                   	ret    

00010d75 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10d75:	55                   	push   %ebp
   10d76:	89 e5                	mov    %esp,%ebp
   10d78:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10d7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7e:	c1 e8 10             	shr    $0x10,%eax
   10d81:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10d85:	8b 45 08             	mov    0x8(%ebp),%eax
   10d88:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d8f:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10d92:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10d96:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10d9a:	90                   	nop
   10d9b:	c9                   	leave  
   10d9c:	c3                   	ret    

00010d9d <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10d9d:	55                   	push   %ebp
   10d9e:	89 e5                	mov    %esp,%ebp
   10da0:	83 ec 18             	sub    $0x18,%esp
   10da3:	8b 55 08             	mov    0x8(%ebp),%edx
   10da6:	8b 45 14             	mov    0x14(%ebp),%eax
   10da9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10dad:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10db1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10db5:	66 c1 e8 03          	shr    $0x3,%ax
   10db9:	0f b7 c0             	movzwl %ax,%eax
   10dbc:	c1 e0 03             	shl    $0x3,%eax
   10dbf:	05 60 3e 01 00       	add    $0x13e60,%eax
   10dc4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10dc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dca:	89 c2                	mov    %eax,%edx
   10dcc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dcf:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10dd3:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dd6:	c1 e8 10             	shr    $0x10,%eax
   10dd9:	89 c2                	mov    %eax,%edx
   10ddb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dde:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10de1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10de4:	c1 e8 18             	shr    $0x18,%eax
   10de7:	89 c2                	mov    %eax,%edx
   10de9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dec:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10def:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10df6:	76 1d                	jbe    10e15 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10df8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dfb:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10dff:	66 0d 00 80          	or     $0x8000,%ax
   10e03:	89 c2                	mov    %eax,%edx
   10e05:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e08:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10e0c:	8b 45 10             	mov    0x10(%ebp),%eax
   10e0f:	c1 e8 0c             	shr    $0xc,%eax
   10e12:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10e15:	8b 45 10             	mov    0x10(%ebp),%eax
   10e18:	89 c2                	mov    %eax,%edx
   10e1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e1d:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10e20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e23:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e27:	89 c2                	mov    %eax,%edx
   10e29:	8b 45 10             	mov    0x10(%ebp),%eax
   10e2c:	c1 e8 08             	shr    $0x8,%eax
   10e2f:	66 25 00 0f          	and    $0xf00,%ax
   10e33:	09 d0                	or     %edx,%eax
   10e35:	89 c2                	mov    %eax,%edx
   10e37:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e3a:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10e3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e41:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e45:	89 c2                	mov    %eax,%edx
   10e47:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10e4b:	80 e4 f0             	and    $0xf0,%ah
   10e4e:	09 d0                	or     %edx,%eax
   10e50:	89 c2                	mov    %eax,%edx
   10e52:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e55:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10e59:	90                   	nop
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp
   10e5f:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10e62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10e69:	eb 1c                	jmp    10e87 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e6e:	c1 e0 03             	shl    $0x3,%eax
   10e71:	0f b7 c0             	movzwl %ax,%eax
   10e74:	6a 00                	push   $0x0
   10e76:	6a 00                	push   $0x0
   10e78:	6a 00                	push   $0x0
   10e7a:	50                   	push   %eax
   10e7b:	e8 1d ff ff ff       	call   10d9d <segment_desc_set>
   10e80:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10e83:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10e87:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10e8e:	7e db                	jle    10e6b <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10e90:	68 92 40 00 00       	push   $0x4092
   10e95:	6a ff                	push   $0xffffffff
   10e97:	6a 00                	push   $0x0
   10e99:	6a 10                	push   $0x10
   10e9b:	e8 fd fe ff ff       	call   10d9d <segment_desc_set>
   10ea0:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10ea3:	c7 05 68 3e 02 00 01 	movl   $0x1,0x23e68
   10eaa:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10ead:	68 9a 40 00 00       	push   $0x409a
   10eb2:	6a ff                	push   $0xffffffff
   10eb4:	6a 00                	push   $0x0
   10eb6:	6a 08                	push   $0x8
   10eb8:	e8 e0 fe ff ff       	call   10d9d <segment_desc_set>
   10ebd:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10ec0:	c7 05 64 3e 02 00 01 	movl   $0x1,0x23e64
   10ec7:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10eca:	b8 60 3e 01 00       	mov    $0x13e60,%eax
   10ecf:	68 00 00 01 00       	push   $0x10000
   10ed4:	50                   	push   %eax
   10ed5:	e8 9b fe ff ff       	call   10d75 <lgdt>
   10eda:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10edd:	83 ec 0c             	sub    $0xc,%esp
   10ee0:	68 60 be 02 00       	push   $0x2be60
   10ee5:	e8 3b 0b 00 00       	call   11a25 <mutex_init>
   10eea:	83 c4 10             	add    $0x10,%esp
}
   10eed:	90                   	nop
   10eee:	c9                   	leave  
   10eef:	c3                   	ret    

00010ef0 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10ef0:	55                   	push   %ebp
   10ef1:	89 e5                	mov    %esp,%ebp
   10ef3:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10ef6:	83 ec 0c             	sub    $0xc,%esp
   10ef9:	68 60 be 02 00       	push   $0x2be60
   10efe:	e8 6f 0b 00 00       	call   11a72 <mutex_lock>
   10f03:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10f06:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10f0d:	eb 38                	jmp    10f47 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10f0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f12:	8b 04 85 60 3e 02 00 	mov    0x23e60(,%eax,4),%eax
   10f19:	85 c0                	test   %eax,%eax
   10f1b:	75 26                	jne    10f43 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f20:	c7 04 85 60 3e 02 00 	movl   $0x1,0x23e60(,%eax,4)
   10f27:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10f2b:	83 ec 0c             	sub    $0xc,%esp
   10f2e:	68 60 be 02 00       	push   $0x2be60
   10f33:	e8 cb 0b 00 00       	call   11b03 <mutex_unlock>
   10f38:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f3e:	c1 e0 03             	shl    $0x3,%eax
   10f41:	eb 22                	jmp    10f65 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10f43:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f47:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10f4e:	7e bf                	jle    10f0f <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10f50:	83 ec 0c             	sub    $0xc,%esp
   10f53:	68 60 be 02 00       	push   $0x2be60
   10f58:	e8 a6 0b 00 00       	call   11b03 <mutex_unlock>
   10f5d:	83 c4 10             	add    $0x10,%esp
    return -1;
   10f60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10f65:	c9                   	leave  
   10f66:	c3                   	ret    

00010f67 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10f67:	55                   	push   %ebp
   10f68:	89 e5                	mov    %esp,%ebp
   10f6a:	fa                   	cli    
   10f6b:	90                   	nop
   10f6c:	5d                   	pop    %ebp
   10f6d:	c3                   	ret    

00010f6e <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10f6e:	55                   	push   %ebp
   10f6f:	89 e5                	mov    %esp,%ebp
   10f71:	fb                   	sti    
   10f72:	90                   	nop
   10f73:	5d                   	pop    %ebp
   10f74:	c3                   	ret    

00010f75 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10f75:	55                   	push   %ebp
   10f76:	89 e5                	mov    %esp,%ebp
   10f78:	f4                   	hlt    
   10f79:	90                   	nop
   10f7a:	5d                   	pop    %ebp
   10f7b:	c3                   	ret    

00010f7c <inb>:
static inline uint8_t inb(uint16_t port) {
   10f7c:	55                   	push   %ebp
   10f7d:	89 e5                	mov    %esp,%ebp
   10f7f:	83 ec 14             	sub    $0x14,%esp
   10f82:	8b 45 08             	mov    0x8(%ebp),%eax
   10f85:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10f89:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10f8d:	89 c2                	mov    %eax,%edx
   10f8f:	ec                   	in     (%dx),%al
   10f90:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10f93:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10f97:	c9                   	leave  
   10f98:	c3                   	ret    

00010f99 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10f99:	55                   	push   %ebp
   10f9a:	89 e5                	mov    %esp,%ebp
   10f9c:	83 ec 08             	sub    $0x8,%esp
   10f9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa2:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fa5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10fa9:	89 d0                	mov    %edx,%eax
   10fab:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10fae:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10fb2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10fb6:	ee                   	out    %al,(%dx)
}
   10fb7:	90                   	nop
   10fb8:	c9                   	leave  
   10fb9:	c3                   	ret    

00010fba <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10fba:	55                   	push   %ebp
   10fbb:	89 e5                	mov    %esp,%ebp
   10fbd:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10fc0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc3:	c1 e8 10             	shr    $0x10,%eax
   10fc6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10fca:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10fd1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fd4:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10fd7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10fdb:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10fdf:	90                   	nop
   10fe0:	c9                   	leave  
   10fe1:	c3                   	ret    

00010fe2 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10fe2:	55                   	push   %ebp
   10fe3:	89 e5                	mov    %esp,%ebp
   10fe5:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10fe8:	9c                   	pushf  
   10fe9:	58                   	pop    %eax
   10fea:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10fed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10ff0:	c9                   	leave  
   10ff1:	c3                   	ret    

00010ff2 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10ff2:	55                   	push   %ebp
   10ff3:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10ff5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff8:	50                   	push   %eax
   10ff9:	9d                   	popf   
}
   10ffa:	90                   	nop
   10ffb:	5d                   	pop    %ebp
   10ffc:	c3                   	ret    

00010ffd <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10ffd:	55                   	push   %ebp
   10ffe:	89 e5                	mov    %esp,%ebp
   11000:	57                   	push   %edi
   11001:	56                   	push   %esi
   11002:	53                   	push   %ebx
   11003:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   11006:	83 ec 0c             	sub    $0xc,%esp
   11009:	68 3c 31 01 00       	push   $0x1313c
   1100e:	e8 f6 1d 00 00       	call   12e09 <log_printf>
   11013:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11016:	8b 45 08             	mov    0x8(%ebp),%eax
   11019:	8b 50 34             	mov    0x34(%eax),%edx
   1101c:	8b 45 08             	mov    0x8(%ebp),%eax
   1101f:	8b 40 30             	mov    0x30(%eax),%eax
   11022:	83 ec 04             	sub    $0x4,%esp
   11025:	52                   	push   %edx
   11026:	50                   	push   %eax
   11027:	68 7a 31 01 00       	push   $0x1317a
   1102c:	e8 d8 1d 00 00       	call   12e09 <log_printf>
   11031:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   11034:	8b 45 08             	mov    0x8(%ebp),%eax
   11037:	8b 38                	mov    (%eax),%edi
   11039:	8b 45 08             	mov    0x8(%ebp),%eax
   1103c:	8b 70 04             	mov    0x4(%eax),%esi
   1103f:	8b 45 08             	mov    0x8(%ebp),%eax
   11042:	8b 58 08             	mov    0x8(%eax),%ebx
   11045:	8b 45 08             	mov    0x8(%ebp),%eax
   11048:	8b 48 0c             	mov    0xc(%eax),%ecx
   1104b:	8b 45 08             	mov    0x8(%ebp),%eax
   1104e:	8b 50 0c             	mov    0xc(%eax),%edx
   11051:	8b 45 08             	mov    0x8(%ebp),%eax
   11054:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11057:	83 ec 04             	sub    $0x4,%esp
   1105a:	57                   	push   %edi
   1105b:	56                   	push   %esi
   1105c:	53                   	push   %ebx
   1105d:	51                   	push   %ecx
   1105e:	52                   	push   %edx
   1105f:	50                   	push   %eax
   11060:	68 94 31 01 00       	push   $0x13194
   11065:	e8 9f 1d 00 00       	call   12e09 <log_printf>
   1106a:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   1106d:	8b 45 08             	mov    0x8(%ebp),%eax
   11070:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11073:	8b 45 08             	mov    0x8(%ebp),%eax
   11076:	8b 40 18             	mov    0x18(%eax),%eax
   11079:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1107c:	8b 45 08             	mov    0x8(%ebp),%eax
   1107f:	8b 58 10             	mov    0x10(%eax),%ebx
   11082:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   11085:	8b 45 08             	mov    0x8(%ebp),%eax
   11088:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   1108b:	8b 45 08             	mov    0x8(%ebp),%eax
   1108e:	8b 70 24             	mov    0x24(%eax),%esi
   11091:	8b 45 08             	mov    0x8(%ebp),%eax
   11094:	8b 58 28             	mov    0x28(%eax),%ebx
   11097:	8b 45 08             	mov    0x8(%ebp),%eax
   1109a:	8b 50 20             	mov    0x20(%eax),%edx
   1109d:	8b 45 08             	mov    0x8(%ebp),%eax
   110a0:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   110a3:	83 ec 0c             	sub    $0xc,%esp
   110a6:	51                   	push   %ecx
   110a7:	ff 75 e4             	push   -0x1c(%ebp)
   110aa:	ff 75 e0             	push   -0x20(%ebp)
   110ad:	57                   	push   %edi
   110ae:	56                   	push   %esi
   110af:	53                   	push   %ebx
   110b0:	52                   	push   %edx
   110b1:	50                   	push   %eax
   110b2:	68 c4 31 01 00       	push   $0x131c4
   110b7:	e8 4d 1d 00 00       	call   12e09 <log_printf>
   110bc:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   110bf:	8b 45 08             	mov    0x8(%ebp),%eax
   110c2:	8b 50 40             	mov    0x40(%eax),%edx
   110c5:	8b 45 08             	mov    0x8(%ebp),%eax
   110c8:	8b 40 38             	mov    0x38(%eax),%eax
   110cb:	83 ec 04             	sub    $0x4,%esp
   110ce:	52                   	push   %edx
   110cf:	50                   	push   %eax
   110d0:	68 1c 32 01 00       	push   $0x1321c
   110d5:	e8 2f 1d 00 00       	call   12e09 <log_printf>
   110da:	83 c4 10             	add    $0x10,%esp
}
   110dd:	90                   	nop
   110de:	8d 65 f4             	lea    -0xc(%ebp),%esp
   110e1:	5b                   	pop    %ebx
   110e2:	5e                   	pop    %esi
   110e3:	5f                   	pop    %edi
   110e4:	5d                   	pop    %ebp
   110e5:	c3                   	ret    

000110e6 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   110e6:	55                   	push   %ebp
   110e7:	89 e5                	mov    %esp,%ebp
   110e9:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   110ec:	83 ec 0c             	sub    $0xc,%esp
   110ef:	68 38 32 01 00       	push   $0x13238
   110f4:	e8 10 1d 00 00       	call   12e09 <log_printf>
   110f9:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   110fc:	83 ec 08             	sub    $0x8,%esp
   110ff:	ff 75 0c             	push   0xc(%ebp)
   11102:	68 6c 32 01 00       	push   $0x1326c
   11107:	e8 fd 1c 00 00       	call   12e09 <log_printf>
   1110c:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   1110f:	83 ec 0c             	sub    $0xc,%esp
   11112:	ff 75 08             	push   0x8(%ebp)
   11115:	e8 e3 fe ff ff       	call   10ffd <print_exception_fram>
   1111a:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   1111d:	e8 53 fe ff ff       	call   10f75 <hlt>
   11122:	eb f9                	jmp    1111d <do_default_handler+0x37>

00011124 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11124:	55                   	push   %ebp
   11125:	89 e5                	mov    %esp,%ebp
   11127:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1112a:	83 ec 08             	sub    $0x8,%esp
   1112d:	68 86 32 01 00       	push   $0x13286
   11132:	ff 75 08             	push   0x8(%ebp)
   11135:	e8 ac ff ff ff       	call   110e6 <do_default_handler>
   1113a:	83 c4 10             	add    $0x10,%esp
}
   1113d:	90                   	nop
   1113e:	c9                   	leave  
   1113f:	c3                   	ret    

00011140 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11140:	55                   	push   %ebp
   11141:	89 e5                	mov    %esp,%ebp
   11143:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11146:	83 ec 08             	sub    $0x8,%esp
   11149:	68 98 32 01 00       	push   $0x13298
   1114e:	ff 75 08             	push   0x8(%ebp)
   11151:	e8 90 ff ff ff       	call   110e6 <do_default_handler>
   11156:	83 c4 10             	add    $0x10,%esp
}
   11159:	90                   	nop
   1115a:	c9                   	leave  
   1115b:	c3                   	ret    

0001115c <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   1115c:	55                   	push   %ebp
   1115d:	89 e5                	mov    %esp,%ebp
   1115f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11162:	83 ec 08             	sub    $0x8,%esp
   11165:	68 aa 32 01 00       	push   $0x132aa
   1116a:	ff 75 08             	push   0x8(%ebp)
   1116d:	e8 74 ff ff ff       	call   110e6 <do_default_handler>
   11172:	83 c4 10             	add    $0x10,%esp
}
   11175:	90                   	nop
   11176:	c9                   	leave  
   11177:	c3                   	ret    

00011178 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11178:	55                   	push   %ebp
   11179:	89 e5                	mov    %esp,%ebp
   1117b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1117e:	83 ec 08             	sub    $0x8,%esp
   11181:	68 ba 32 01 00       	push   $0x132ba
   11186:	ff 75 08             	push   0x8(%ebp)
   11189:	e8 58 ff ff ff       	call   110e6 <do_default_handler>
   1118e:	83 c4 10             	add    $0x10,%esp
}
   11191:	90                   	nop
   11192:	c9                   	leave  
   11193:	c3                   	ret    

00011194 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11194:	55                   	push   %ebp
   11195:	89 e5                	mov    %esp,%ebp
   11197:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   1119a:	83 ec 08             	sub    $0x8,%esp
   1119d:	68 c8 32 01 00       	push   $0x132c8
   111a2:	ff 75 08             	push   0x8(%ebp)
   111a5:	e8 3c ff ff ff       	call   110e6 <do_default_handler>
   111aa:	83 c4 10             	add    $0x10,%esp
}
   111ad:	90                   	nop
   111ae:	c9                   	leave  
   111af:	c3                   	ret    

000111b0 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   111b0:	55                   	push   %ebp
   111b1:	89 e5                	mov    %esp,%ebp
   111b3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   111b6:	83 ec 08             	sub    $0x8,%esp
   111b9:	68 dd 32 01 00       	push   $0x132dd
   111be:	ff 75 08             	push   0x8(%ebp)
   111c1:	e8 20 ff ff ff       	call   110e6 <do_default_handler>
   111c6:	83 c4 10             	add    $0x10,%esp
}
   111c9:	90                   	nop
   111ca:	c9                   	leave  
   111cb:	c3                   	ret    

000111cc <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   111cc:	55                   	push   %ebp
   111cd:	89 e5                	mov    %esp,%ebp
   111cf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   111d2:	83 ec 08             	sub    $0x8,%esp
   111d5:	68 f0 32 01 00       	push   $0x132f0
   111da:	ff 75 08             	push   0x8(%ebp)
   111dd:	e8 04 ff ff ff       	call   110e6 <do_default_handler>
   111e2:	83 c4 10             	add    $0x10,%esp
}
   111e5:	90                   	nop
   111e6:	c9                   	leave  
   111e7:	c3                   	ret    

000111e8 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   111e8:	55                   	push   %ebp
   111e9:	89 e5                	mov    %esp,%ebp
   111eb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   111ee:	83 ec 08             	sub    $0x8,%esp
   111f1:	68 06 33 01 00       	push   $0x13306
   111f6:	ff 75 08             	push   0x8(%ebp)
   111f9:	e8 e8 fe ff ff       	call   110e6 <do_default_handler>
   111fe:	83 c4 10             	add    $0x10,%esp
}
   11201:	90                   	nop
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1120a:	83 ec 08             	sub    $0x8,%esp
   1120d:	68 1f 33 01 00       	push   $0x1331f
   11212:	ff 75 08             	push   0x8(%ebp)
   11215:	e8 cc fe ff ff       	call   110e6 <do_default_handler>
   1121a:	83 c4 10             	add    $0x10,%esp
}
   1121d:	90                   	nop
   1121e:	c9                   	leave  
   1121f:	c3                   	ret    

00011220 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11220:	55                   	push   %ebp
   11221:	89 e5                	mov    %esp,%ebp
   11223:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11226:	83 ec 08             	sub    $0x8,%esp
   11229:	68 3c 33 01 00       	push   $0x1333c
   1122e:	ff 75 08             	push   0x8(%ebp)
   11231:	e8 b0 fe ff ff       	call   110e6 <do_default_handler>
   11236:	83 c4 10             	add    $0x10,%esp
}
   11239:	90                   	nop
   1123a:	c9                   	leave  
   1123b:	c3                   	ret    

0001123c <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   1123c:	55                   	push   %ebp
   1123d:	89 e5                	mov    %esp,%ebp
   1123f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11242:	83 ec 08             	sub    $0x8,%esp
   11245:	68 53 33 01 00       	push   $0x13353
   1124a:	ff 75 08             	push   0x8(%ebp)
   1124d:	e8 94 fe ff ff       	call   110e6 <do_default_handler>
   11252:	83 c4 10             	add    $0x10,%esp
}
   11255:	90                   	nop
   11256:	c9                   	leave  
   11257:	c3                   	ret    

00011258 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11258:	55                   	push   %ebp
   11259:	89 e5                	mov    %esp,%ebp
   1125b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   1125e:	83 ec 08             	sub    $0x8,%esp
   11261:	68 69 33 01 00       	push   $0x13369
   11266:	ff 75 08             	push   0x8(%ebp)
   11269:	e8 78 fe ff ff       	call   110e6 <do_default_handler>
   1126e:	83 c4 10             	add    $0x10,%esp
}
   11271:	90                   	nop
   11272:	c9                   	leave  
   11273:	c3                   	ret    

00011274 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
   11277:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1127a:	83 ec 08             	sub    $0x8,%esp
   1127d:	68 87 33 01 00       	push   $0x13387
   11282:	ff 75 08             	push   0x8(%ebp)
   11285:	e8 5c fe ff ff       	call   110e6 <do_default_handler>
   1128a:	83 c4 10             	add    $0x10,%esp
}
   1128d:	90                   	nop
   1128e:	c9                   	leave  
   1128f:	c3                   	ret    

00011290 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11290:	55                   	push   %ebp
   11291:	89 e5                	mov    %esp,%ebp
   11293:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   11296:	83 ec 08             	sub    $0x8,%esp
   11299:	68 a5 33 01 00       	push   $0x133a5
   1129e:	ff 75 08             	push   0x8(%ebp)
   112a1:	e8 40 fe ff ff       	call   110e6 <do_default_handler>
   112a6:	83 c4 10             	add    $0x10,%esp
}
   112a9:	90                   	nop
   112aa:	c9                   	leave  
   112ab:	c3                   	ret    

000112ac <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   112ac:	55                   	push   %ebp
   112ad:	89 e5                	mov    %esp,%ebp
   112af:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   112b2:	83 ec 08             	sub    $0x8,%esp
   112b5:	68 c2 33 01 00       	push   $0x133c2
   112ba:	ff 75 08             	push   0x8(%ebp)
   112bd:	e8 24 fe ff ff       	call   110e6 <do_default_handler>
   112c2:	83 c4 10             	add    $0x10,%esp
}
   112c5:	90                   	nop
   112c6:	c9                   	leave  
   112c7:	c3                   	ret    

000112c8 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   112c8:	55                   	push   %ebp
   112c9:	89 e5                	mov    %esp,%ebp
   112cb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   112ce:	83 ec 08             	sub    $0x8,%esp
   112d1:	68 d7 33 01 00       	push   $0x133d7
   112d6:	ff 75 08             	push   0x8(%ebp)
   112d9:	e8 08 fe ff ff       	call   110e6 <do_default_handler>
   112de:	83 c4 10             	add    $0x10,%esp
}
   112e1:	90                   	nop
   112e2:	c9                   	leave  
   112e3:	c3                   	ret    

000112e4 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   112e4:	55                   	push   %ebp
   112e5:	89 e5                	mov    %esp,%ebp
   112e7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   112ea:	83 ec 08             	sub    $0x8,%esp
   112ed:	68 eb 33 01 00       	push   $0x133eb
   112f2:	ff 75 08             	push   0x8(%ebp)
   112f5:	e8 ec fd ff ff       	call   110e6 <do_default_handler>
   112fa:	83 c4 10             	add    $0x10,%esp
}
   112fd:	90                   	nop
   112fe:	c9                   	leave  
   112ff:	c3                   	ret    

00011300 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11300:	55                   	push   %ebp
   11301:	89 e5                	mov    %esp,%ebp
   11303:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11306:	83 ec 08             	sub    $0x8,%esp
   11309:	68 05 34 01 00       	push   $0x13405
   1130e:	ff 75 08             	push   0x8(%ebp)
   11311:	e8 d0 fd ff ff       	call   110e6 <do_default_handler>
   11316:	83 c4 10             	add    $0x10,%esp
}
   11319:	90                   	nop
   1131a:	c9                   	leave  
   1131b:	c3                   	ret    

0001131c <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1131c:	55                   	push   %ebp
   1131d:	89 e5                	mov    %esp,%ebp
   1131f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11322:	83 ec 08             	sub    $0x8,%esp
   11325:	68 1d 34 01 00       	push   $0x1341d
   1132a:	ff 75 08             	push   0x8(%ebp)
   1132d:	e8 b4 fd ff ff       	call   110e6 <do_default_handler>
   11332:	83 c4 10             	add    $0x10,%esp
}
   11335:	90                   	nop
   11336:	c9                   	leave  
   11337:	c3                   	ret    

00011338 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11338:	55                   	push   %ebp
   11339:	89 e5                	mov    %esp,%ebp
   1133b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   1133e:	83 ec 08             	sub    $0x8,%esp
   11341:	68 35 34 01 00       	push   $0x13435
   11346:	ff 75 08             	push   0x8(%ebp)
   11349:	e8 98 fd ff ff       	call   110e6 <do_default_handler>
   1134e:	83 c4 10             	add    $0x10,%esp
}
   11351:	90                   	nop
   11352:	c9                   	leave  
   11353:	c3                   	ret    

00011354 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11354:	55                   	push   %ebp
   11355:	89 e5                	mov    %esp,%ebp
   11357:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1135a:	83 ec 08             	sub    $0x8,%esp
   1135d:	68 51 34 01 00       	push   $0x13451
   11362:	ff 75 08             	push   0x8(%ebp)
   11365:	e8 7c fd ff ff       	call   110e6 <do_default_handler>
   1136a:	83 c4 10             	add    $0x10,%esp
}
   1136d:	90                   	nop
   1136e:	c9                   	leave  
   1136f:	c3                   	ret    

00011370 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11370:	55                   	push   %ebp
   11371:	89 e5                	mov    %esp,%ebp
   11373:	83 ec 08             	sub    $0x8,%esp
   11376:	8b 55 0c             	mov    0xc(%ebp),%edx
   11379:	8b 45 14             	mov    0x14(%ebp),%eax
   1137c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11380:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11384:	8b 45 10             	mov    0x10(%ebp),%eax
   11387:	89 c2                	mov    %eax,%edx
   11389:	8b 45 08             	mov    0x8(%ebp),%eax
   1138c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1138f:	8b 45 10             	mov    0x10(%ebp),%eax
   11392:	c1 e8 10             	shr    $0x10,%eax
   11395:	89 c2                	mov    %eax,%edx
   11397:	8b 45 08             	mov    0x8(%ebp),%eax
   1139a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1139e:	8b 45 08             	mov    0x8(%ebp),%eax
   113a1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113a5:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   113a9:	8b 45 08             	mov    0x8(%ebp),%eax
   113ac:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   113b0:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   113b4:	90                   	nop
   113b5:	c9                   	leave  
   113b6:	c3                   	ret    

000113b7 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   113b7:	55                   	push   %ebp
   113b8:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   113ba:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   113c1:	7f 06                	jg     113c9 <idt_install+0x12>
   113c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113c7:	79 07                	jns    113d0 <idt_install+0x19>
   113c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   113ce:	eb 25                	jmp    113f5 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   113d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d3:	8b 55 08             	mov    0x8(%ebp),%edx
   113d6:	c1 e2 03             	shl    $0x3,%edx
   113d9:	81 c2 80 be 02 00    	add    $0x2be80,%edx
   113df:	68 00 8e 00 00       	push   $0x8e00
   113e4:	50                   	push   %eax
   113e5:	6a 08                	push   $0x8
   113e7:	52                   	push   %edx
   113e8:	e8 83 ff ff ff       	call   11370 <gate_desc_set>
   113ed:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   113f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113f5:	c9                   	leave  
   113f6:	c3                   	ret    

000113f7 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   113f7:	55                   	push   %ebp
   113f8:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   113fa:	6a 11                	push   $0x11
   113fc:	6a 20                	push   $0x20
   113fe:	e8 96 fb ff ff       	call   10f99 <outb>
   11403:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11406:	6a 20                	push   $0x20
   11408:	6a 21                	push   $0x21
   1140a:	e8 8a fb ff ff       	call   10f99 <outb>
   1140f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11412:	6a 04                	push   $0x4
   11414:	6a 21                	push   $0x21
   11416:	e8 7e fb ff ff       	call   10f99 <outb>
   1141b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   1141e:	6a 01                	push   $0x1
   11420:	6a 21                	push   $0x21
   11422:	e8 72 fb ff ff       	call   10f99 <outb>
   11427:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1142a:	6a 11                	push   $0x11
   1142c:	68 a0 00 00 00       	push   $0xa0
   11431:	e8 63 fb ff ff       	call   10f99 <outb>
   11436:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11439:	6a 28                	push   $0x28
   1143b:	68 a1 00 00 00       	push   $0xa1
   11440:	e8 54 fb ff ff       	call   10f99 <outb>
   11445:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11448:	6a 02                	push   $0x2
   1144a:	68 a1 00 00 00       	push   $0xa1
   1144f:	e8 45 fb ff ff       	call   10f99 <outb>
   11454:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11457:	6a 01                	push   $0x1
   11459:	68 a1 00 00 00       	push   $0xa1
   1145e:	e8 36 fb ff ff       	call   10f99 <outb>
   11463:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11466:	68 fb 00 00 00       	push   $0xfb
   1146b:	6a 21                	push   $0x21
   1146d:	e8 27 fb ff ff       	call   10f99 <outb>
   11472:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11475:	68 ff 00 00 00       	push   $0xff
   1147a:	68 a1 00 00 00       	push   $0xa1
   1147f:	e8 15 fb ff ff       	call   10f99 <outb>
   11484:	83 c4 08             	add    $0x8,%esp


}
   11487:	90                   	nop
   11488:	c9                   	leave  
   11489:	c3                   	ret    

0001148a <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1148a:	55                   	push   %ebp
   1148b:	89 e5                	mov    %esp,%ebp
   1148d:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11490:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11497:	eb 14                	jmp    114ad <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11499:	68 2a 00 01 00       	push   $0x1002a
   1149e:	ff 75 fc             	push   -0x4(%ebp)
   114a1:	e8 11 ff ff ff       	call   113b7 <idt_install>
   114a6:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   114a9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   114ad:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   114b4:	7e e3                	jle    11499 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   114b6:	68 47 00 01 00       	push   $0x10047
   114bb:	6a 00                	push   $0x0
   114bd:	e8 f5 fe ff ff       	call   113b7 <idt_install>
   114c2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   114c5:	68 64 00 01 00       	push   $0x10064
   114ca:	6a 01                	push   $0x1
   114cc:	e8 e6 fe ff ff       	call   113b7 <idt_install>
   114d1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   114d4:	68 81 00 01 00       	push   $0x10081
   114d9:	6a 02                	push   $0x2
   114db:	e8 d7 fe ff ff       	call   113b7 <idt_install>
   114e0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   114e3:	68 9e 00 01 00       	push   $0x1009e
   114e8:	6a 03                	push   $0x3
   114ea:	e8 c8 fe ff ff       	call   113b7 <idt_install>
   114ef:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   114f2:	68 bb 00 01 00       	push   $0x100bb
   114f7:	6a 04                	push   $0x4
   114f9:	e8 b9 fe ff ff       	call   113b7 <idt_install>
   114fe:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11501:	68 d8 00 01 00       	push   $0x100d8
   11506:	6a 05                	push   $0x5
   11508:	e8 aa fe ff ff       	call   113b7 <idt_install>
   1150d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11510:	68 f5 00 01 00       	push   $0x100f5
   11515:	6a 06                	push   $0x6
   11517:	e8 9b fe ff ff       	call   113b7 <idt_install>
   1151c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   1151f:	68 12 01 01 00       	push   $0x10112
   11524:	6a 07                	push   $0x7
   11526:	e8 8c fe ff ff       	call   113b7 <idt_install>
   1152b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1152e:	68 2f 01 01 00       	push   $0x1012f
   11533:	6a 08                	push   $0x8
   11535:	e8 7d fe ff ff       	call   113b7 <idt_install>
   1153a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   1153d:	68 4a 01 01 00       	push   $0x1014a
   11542:	6a 0a                	push   $0xa
   11544:	e8 6e fe ff ff       	call   113b7 <idt_install>
   11549:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1154c:	68 65 01 01 00       	push   $0x10165
   11551:	6a 0b                	push   $0xb
   11553:	e8 5f fe ff ff       	call   113b7 <idt_install>
   11558:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1155b:	68 80 01 01 00       	push   $0x10180
   11560:	6a 0c                	push   $0xc
   11562:	e8 50 fe ff ff       	call   113b7 <idt_install>
   11567:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1156a:	68 9b 01 01 00       	push   $0x1019b
   1156f:	6a 0d                	push   $0xd
   11571:	e8 41 fe ff ff       	call   113b7 <idt_install>
   11576:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11579:	68 b6 01 01 00       	push   $0x101b6
   1157e:	6a 0e                	push   $0xe
   11580:	e8 32 fe ff ff       	call   113b7 <idt_install>
   11585:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11588:	68 d1 01 01 00       	push   $0x101d1
   1158d:	6a 10                	push   $0x10
   1158f:	e8 23 fe ff ff       	call   113b7 <idt_install>
   11594:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11597:	68 ee 01 01 00       	push   $0x101ee
   1159c:	6a 11                	push   $0x11
   1159e:	e8 14 fe ff ff       	call   113b7 <idt_install>
   115a3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   115a6:	68 09 02 01 00       	push   $0x10209
   115ab:	6a 12                	push   $0x12
   115ad:	e8 05 fe ff ff       	call   113b7 <idt_install>
   115b2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   115b5:	68 26 02 01 00       	push   $0x10226
   115ba:	6a 13                	push   $0x13
   115bc:	e8 f6 fd ff ff       	call   113b7 <idt_install>
   115c1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   115c4:	68 43 02 01 00       	push   $0x10243
   115c9:	6a 14                	push   $0x14
   115cb:	e8 e7 fd ff ff       	call   113b7 <idt_install>
   115d0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   115d3:	68 60 02 01 00       	push   $0x10260
   115d8:	6a 15                	push   $0x15
   115da:	e8 d8 fd ff ff       	call   113b7 <idt_install>
   115df:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   115e2:	b8 80 be 02 00       	mov    $0x2be80,%eax
   115e7:	68 00 08 00 00       	push   $0x800
   115ec:	50                   	push   %eax
   115ed:	e8 c8 f9 ff ff       	call   10fba <lidt>
   115f2:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   115f5:	e8 fd fd ff ff       	call   113f7 <init_pic>
}
   115fa:	90                   	nop
   115fb:	c9                   	leave  
   115fc:	c3                   	ret    

000115fd <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   115fd:	55                   	push   %ebp
   115fe:	89 e5                	mov    %esp,%ebp
   11600:	53                   	push   %ebx
   11601:	83 ec 14             	sub    $0x14,%esp
   11604:	8b 45 08             	mov    0x8(%ebp),%eax
   11607:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1160a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1160e:	76 7f                	jbe    1168f <idt_enable+0x92>
   11610:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11614:	77 79                	ja     1168f <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11616:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1161a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1161e:	77 33                	ja     11653 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11620:	6a 21                	push   $0x21
   11622:	e8 55 f9 ff ff       	call   10f7c <inb>
   11627:	83 c4 04             	add    $0x4,%esp
   1162a:	89 c3                	mov    %eax,%ebx
   1162c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11630:	ba 01 00 00 00       	mov    $0x1,%edx
   11635:	89 c1                	mov    %eax,%ecx
   11637:	d3 e2                	shl    %cl,%edx
   11639:	89 d0                	mov    %edx,%eax
   1163b:	f7 d0                	not    %eax
   1163d:	21 d8                	and    %ebx,%eax
   1163f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11642:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11646:	50                   	push   %eax
   11647:	6a 21                	push   $0x21
   11649:	e8 4b f9 ff ff       	call   10f99 <outb>
   1164e:	83 c4 08             	add    $0x8,%esp
   11651:	eb 3d                	jmp    11690 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11653:	68 a1 00 00 00       	push   $0xa1
   11658:	e8 1f f9 ff ff       	call   10f7c <inb>
   1165d:	83 c4 04             	add    $0x4,%esp
   11660:	89 c3                	mov    %eax,%ebx
   11662:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11666:	83 e8 08             	sub    $0x8,%eax
   11669:	ba 01 00 00 00       	mov    $0x1,%edx
   1166e:	89 c1                	mov    %eax,%ecx
   11670:	d3 e2                	shl    %cl,%edx
   11672:	89 d0                	mov    %edx,%eax
   11674:	f7 d0                	not    %eax
   11676:	21 d8                	and    %ebx,%eax
   11678:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1167b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1167f:	50                   	push   %eax
   11680:	68 a1 00 00 00       	push   $0xa1
   11685:	e8 0f f9 ff ff       	call   10f99 <outb>
   1168a:	83 c4 08             	add    $0x8,%esp
   1168d:	eb 01                	jmp    11690 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1168f:	90                   	nop
  }
  
}
   11690:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11693:	c9                   	leave  
   11694:	c3                   	ret    

00011695 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11695:	55                   	push   %ebp
   11696:	89 e5                	mov    %esp,%ebp
   11698:	53                   	push   %ebx
   11699:	83 ec 14             	sub    $0x14,%esp
   1169c:	8b 45 08             	mov    0x8(%ebp),%eax
   1169f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   116a2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   116a6:	76 7b                	jbe    11723 <idt_disable+0x8e>
   116a8:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   116ac:	77 75                	ja     11723 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   116ae:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   116b2:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   116b6:	77 31                	ja     116e9 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   116b8:	6a 21                	push   $0x21
   116ba:	e8 bd f8 ff ff       	call   10f7c <inb>
   116bf:	83 c4 04             	add    $0x4,%esp
   116c2:	89 c3                	mov    %eax,%ebx
   116c4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   116c8:	ba 01 00 00 00       	mov    $0x1,%edx
   116cd:	89 c1                	mov    %eax,%ecx
   116cf:	d3 e2                	shl    %cl,%edx
   116d1:	89 d0                	mov    %edx,%eax
   116d3:	09 d8                	or     %ebx,%eax
   116d5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   116d8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   116dc:	50                   	push   %eax
   116dd:	6a 21                	push   $0x21
   116df:	e8 b5 f8 ff ff       	call   10f99 <outb>
   116e4:	83 c4 08             	add    $0x8,%esp
   116e7:	eb 3b                	jmp    11724 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   116e9:	68 a1 00 00 00       	push   $0xa1
   116ee:	e8 89 f8 ff ff       	call   10f7c <inb>
   116f3:	83 c4 04             	add    $0x4,%esp
   116f6:	89 c3                	mov    %eax,%ebx
   116f8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   116fc:	83 e8 08             	sub    $0x8,%eax
   116ff:	ba 01 00 00 00       	mov    $0x1,%edx
   11704:	89 c1                	mov    %eax,%ecx
   11706:	d3 e2                	shl    %cl,%edx
   11708:	89 d0                	mov    %edx,%eax
   1170a:	09 d8                	or     %ebx,%eax
   1170c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1170f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11713:	50                   	push   %eax
   11714:	68 a1 00 00 00       	push   $0xa1
   11719:	e8 7b f8 ff ff       	call   10f99 <outb>
   1171e:	83 c4 08             	add    $0x8,%esp
   11721:	eb 01                	jmp    11724 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11723:	90                   	nop
  }
  
}
   11724:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11727:	c9                   	leave  
   11728:	c3                   	ret    

00011729 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11729:	55                   	push   %ebp
   1172a:	89 e5                	mov    %esp,%ebp
  cli();
   1172c:	e8 36 f8 ff ff       	call   10f67 <cli>
}
   11731:	90                   	nop
   11732:	5d                   	pop    %ebp
   11733:	c3                   	ret    

00011734 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11734:	55                   	push   %ebp
   11735:	89 e5                	mov    %esp,%ebp
  sti();
   11737:	e8 32 f8 ff ff       	call   10f6e <sti>
}
   1173c:	90                   	nop
   1173d:	5d                   	pop    %ebp
   1173e:	c3                   	ret    

0001173f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   1173f:	55                   	push   %ebp
   11740:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11742:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1174a:	78 29                	js     11775 <pic_send_eoi+0x36>
   1174c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11750:	7f 23                	jg     11775 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11752:	6a 20                	push   $0x20
   11754:	6a 20                	push   $0x20
   11756:	e8 3e f8 ff ff       	call   10f99 <outb>
   1175b:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1175e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11762:	7e 12                	jle    11776 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11764:	6a 20                	push   $0x20
   11766:	68 a0 00 00 00       	push   $0xa0
   1176b:	e8 29 f8 ff ff       	call   10f99 <outb>
   11770:	83 c4 08             	add    $0x8,%esp
   11773:	eb 01                	jmp    11776 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11775:	90                   	nop
  }

}
   11776:	c9                   	leave  
   11777:	c3                   	ret    

00011778 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11778:	55                   	push   %ebp
   11779:	89 e5                	mov    %esp,%ebp
   1177b:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1177e:	e8 5f f8 ff ff       	call   10fe2 <read_eflags>
   11783:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11786:	e8 9e ff ff ff       	call   11729 <idt_disable_global>
  return state;;
   1178b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1178e:	c9                   	leave  
   1178f:	c3                   	ret    

00011790 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11790:	55                   	push   %ebp
   11791:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11793:	ff 75 08             	push   0x8(%ebp)
   11796:	e8 57 f8 ff ff       	call   10ff2 <write_eflags>
   1179b:	83 c4 04             	add    $0x4,%esp
}
   1179e:	90                   	nop
   1179f:	c9                   	leave  
   117a0:	c3                   	ret    

000117a1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   117a1:	55                   	push   %ebp
   117a2:	89 e5                	mov    %esp,%ebp
   117a4:	83 ec 08             	sub    $0x8,%esp
   117a7:	8b 45 08             	mov    0x8(%ebp),%eax
   117aa:	8b 55 0c             	mov    0xc(%ebp),%edx
   117ad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   117b1:	89 d0                	mov    %edx,%eax
   117b3:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   117b6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   117ba:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   117be:	ee                   	out    %al,(%dx)
}
   117bf:	90                   	nop
   117c0:	c9                   	leave  
   117c1:	c3                   	ret    

000117c2 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   117c2:	55                   	push   %ebp
   117c3:	89 e5                	mov    %esp,%ebp
   117c5:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   117c8:	a1 80 c6 02 00       	mov    0x2c680,%eax
   117cd:	83 c0 01             	add    $0x1,%eax
   117d0:	a3 80 c6 02 00       	mov    %eax,0x2c680

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   117d5:	83 ec 0c             	sub    $0xc,%esp
   117d8:	6a 20                	push   $0x20
   117da:	e8 60 ff ff ff       	call   1173f <pic_send_eoi>
   117df:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   117e2:	e8 7c f3 ff ff       	call   10b63 <task_slice_end>
}
   117e7:	90                   	nop
   117e8:	c9                   	leave  
   117e9:	c3                   	ret    

000117ea <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   117ea:	55                   	push   %ebp
   117eb:	89 e5                	mov    %esp,%ebp
   117ed:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   117f0:	6a 36                	push   $0x36
   117f2:	6a 43                	push   $0x43
   117f4:	e8 a8 ff ff ff       	call   117a1 <outb>
   117f9:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   117fc:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11802:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11806:	0f b6 c0             	movzbl %al,%eax
   11809:	50                   	push   %eax
   1180a:	6a 40                	push   $0x40
   1180c:	e8 90 ff ff ff       	call   117a1 <outb>
   11811:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11814:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11818:	66 c1 e8 08          	shr    $0x8,%ax
   1181c:	0f b6 c0             	movzbl %al,%eax
   1181f:	50                   	push   %eax
   11820:	6a 40                	push   $0x40
   11822:	e8 7a ff ff ff       	call   117a1 <outb>
   11827:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1182a:	83 ec 08             	sub    $0x8,%esp
   1182d:	68 7b 02 01 00       	push   $0x1027b
   11832:	6a 20                	push   $0x20
   11834:	e8 7e fb ff ff       	call   113b7 <idt_install>
   11839:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1183c:	83 ec 0c             	sub    $0xc,%esp
   1183f:	6a 20                	push   $0x20
   11841:	e8 b7 fd ff ff       	call   115fd <idt_enable>
   11846:	83 c4 10             	add    $0x10,%esp

}
   11849:	90                   	nop
   1184a:	c9                   	leave  
   1184b:	c3                   	ret    

0001184c <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1184c:	55                   	push   %ebp
   1184d:	89 e5                	mov    %esp,%ebp
   1184f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11852:	c7 05 80 c6 02 00 00 	movl   $0x0,0x2c680
   11859:	00 00 00 
    init_pit();
   1185c:	e8 89 ff ff ff       	call   117ea <init_pit>
   11861:	90                   	nop
   11862:	c9                   	leave  
   11863:	c3                   	ret    

00011864 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11864:	55                   	push   %ebp
   11865:	89 e5                	mov    %esp,%ebp
   11867:	fb                   	sti    
   11868:	90                   	nop
   11869:	5d                   	pop    %ebp
   1186a:	c3                   	ret    

0001186b <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1186b:	55                   	push   %ebp
   1186c:	89 e5                	mov    %esp,%ebp
   1186e:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11871:	8b 45 08             	mov    0x8(%ebp),%eax
   11874:	8b 40 50             	mov    0x50(%eax),%eax
   11877:	85 c0                	test   %eax,%eax
   11879:	75 19                	jne    11894 <kernel_init+0x29>
   1187b:	68 70 34 01 00       	push   $0x13470
   11880:	68 3c 35 01 00       	push   $0x1353c
   11885:	6a 22                	push   $0x22
   11887:	68 94 34 01 00       	push   $0x13494
   1188c:	e8 a9 08 00 00       	call   1213a <pannic>
   11891:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11894:	e8 e8 14 00 00       	call   12d81 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11899:	83 ec 0c             	sub    $0xc,%esp
   1189c:	ff 75 08             	push   0x8(%ebp)
   1189f:	e8 e9 eb ff ff       	call   1048d <memory_init>
   118a4:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   118a7:	e8 b0 f5 ff ff       	call   10e5c <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   118ac:	e8 d9 fb ff ff       	call   1148a <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   118b1:	e8 96 ff ff ff       	call   1184c <time_init>

    //7.初始化任务管理器
    task_manager_init();
   118b6:	e8 44 f0 ff ff       	call   108ff <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   118bb:	90                   	nop
   118bc:	c9                   	leave  
   118bd:	c3                   	ret    

000118be <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   118be:	55                   	push   %ebp
   118bf:	89 e5                	mov    %esp,%ebp
   118c1:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   118c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   118cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118ce:	8d 50 01             	lea    0x1(%eax),%edx
   118d1:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118d4:	83 ec 08             	sub    $0x8,%esp
   118d7:	50                   	push   %eax
   118d8:	68 c9 34 01 00       	push   $0x134c9
   118dd:	e8 27 15 00 00       	call   12e09 <log_printf>
   118e2:	83 c4 10             	add    $0x10,%esp
   118e5:	eb e4                	jmp    118cb <test_task_1+0xd>

000118e7 <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   118e7:	55                   	push   %ebp
   118e8:	89 e5                	mov    %esp,%ebp
   118ea:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   118ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   118f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118f7:	8d 50 01             	lea    0x1(%eax),%edx
   118fa:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118fd:	83 ec 08             	sub    $0x8,%esp
   11900:	50                   	push   %eax
   11901:	68 d4 34 01 00       	push   $0x134d4
   11906:	e8 fe 14 00 00       	call   12e09 <log_printf>
   1190b:	83 c4 10             	add    $0x10,%esp
   1190e:	eb e4                	jmp    118f4 <test_task_2+0xd>

00011910 <init_main>:
     }
}



void init_main(void) {
   11910:	55                   	push   %ebp
   11911:	89 e5                	mov    %esp,%ebp
   11913:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   11916:	83 ec 0c             	sub    $0xc,%esp
   11919:	68 df 34 01 00       	push   $0x134df
   1191e:	e8 e6 14 00 00       	call   12e09 <log_printf>
   11923:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11926:	83 ec 04             	sub    $0x4,%esp
   11929:	68 f7 34 01 00       	push   $0x134f7
   1192e:	68 fd 34 01 00       	push   $0x134fd
   11933:	68 02 35 01 00       	push   $0x13502
   11938:	e8 cc 14 00 00       	call   12e09 <log_printf>
   1193d:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11940:	e8 35 f0 ff ff       	call   1097a <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11945:	ba 20 d8 02 00       	mov    $0x2d820,%edx
   1194a:	b8 be 18 01 00       	mov    $0x118be,%eax
   1194f:	52                   	push   %edx
   11950:	50                   	push   %eax
   11951:	68 18 35 01 00       	push   $0x13518
   11956:	68 a0 c6 02 00       	push   $0x2c6a0
   1195b:	e8 b1 ee ff ff       	call   10811 <task_init>
   11960:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11963:	ba 20 e8 02 00       	mov    $0x2e820,%edx
   11968:	b8 e7 18 01 00       	mov    $0x118e7,%eax
   1196d:	52                   	push   %edx
   1196e:	50                   	push   %eax
   1196f:	68 24 35 01 00       	push   $0x13524
   11974:	68 60 c7 02 00       	push   $0x2c760
   11979:	e8 93 ee ff ff       	call   10811 <task_init>
   1197e:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   11981:	e8 de fe ff ff       	call   11864 <sti>

    int count = 0;
   11986:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   1198d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11990:	8d 50 01             	lea    0x1(%eax),%edx
   11993:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11996:	83 ec 08             	sub    $0x8,%esp
   11999:	50                   	push   %eax
   1199a:	68 30 35 01 00       	push   $0x13530
   1199f:	e8 65 14 00 00       	call   12e09 <log_printf>
   119a4:	83 c4 10             	add    $0x10,%esp
   119a7:	eb e4                	jmp    1198d <init_main+0x7d>

000119a9 <list_init>:
static inline void list_init(list_t *list) {
   119a9:	55                   	push   %ebp
   119aa:	89 e5                	mov    %esp,%ebp
   119ac:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   119af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119b3:	75 19                	jne    119ce <list_init+0x25>
   119b5:	68 48 35 01 00       	push   $0x13548
   119ba:	68 f4 35 01 00       	push   $0x135f4
   119bf:	6a 31                	push   $0x31
   119c1:	68 5c 35 01 00       	push   $0x1355c
   119c6:	e8 6f 07 00 00       	call   1213a <pannic>
   119cb:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   119ce:	8b 45 08             	mov    0x8(%ebp),%eax
   119d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   119d8:	8b 45 08             	mov    0x8(%ebp),%eax
   119db:	8b 50 04             	mov    0x4(%eax),%edx
   119de:	8b 45 08             	mov    0x8(%ebp),%eax
   119e1:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   119e3:	8b 45 08             	mov    0x8(%ebp),%eax
   119e6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   119ed:	90                   	nop
   119ee:	c9                   	leave  
   119ef:	c3                   	ret    

000119f0 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   119f0:	55                   	push   %ebp
   119f1:	89 e5                	mov    %esp,%ebp
   119f3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   119f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119fa:	75 19                	jne    11a15 <list_is_empty+0x25>
   119fc:	68 48 35 01 00       	push   $0x13548
   11a01:	68 00 36 01 00       	push   $0x13600
   11a06:	6a 38                	push   $0x38
   11a08:	68 5c 35 01 00       	push   $0x1355c
   11a0d:	e8 28 07 00 00       	call   1213a <pannic>
   11a12:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11a15:	8b 45 08             	mov    0x8(%ebp),%eax
   11a18:	8b 40 08             	mov    0x8(%eax),%eax
   11a1b:	85 c0                	test   %eax,%eax
   11a1d:	0f 94 c0             	sete   %al
   11a20:	0f b6 c0             	movzbl %al,%eax
}
   11a23:	c9                   	leave  
   11a24:	c3                   	ret    

00011a25 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11a25:	55                   	push   %ebp
   11a26:	89 e5                	mov    %esp,%ebp
   11a28:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11a2b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a2f:	75 19                	jne    11a4a <mutex_init+0x25>
   11a31:	68 9a 35 01 00       	push   $0x1359a
   11a36:	68 e8 35 01 00       	push   $0x135e8
   11a3b:	6a 15                	push   $0x15
   11a3d:	68 b0 35 01 00       	push   $0x135b0
   11a42:	e8 f3 06 00 00       	call   1213a <pannic>
   11a47:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11a4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11a54:	8b 45 08             	mov    0x8(%ebp),%eax
   11a57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11a5d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a60:	83 c0 08             	add    $0x8,%eax
   11a63:	83 ec 0c             	sub    $0xc,%esp
   11a66:	50                   	push   %eax
   11a67:	e8 3d ff ff ff       	call   119a9 <list_init>
   11a6c:	83 c4 10             	add    $0x10,%esp
}
   11a6f:	90                   	nop
   11a70:	c9                   	leave  
   11a71:	c3                   	ret    

00011a72 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11a72:	55                   	push   %ebp
   11a73:	89 e5                	mov    %esp,%ebp
   11a75:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11a78:	e8 fb fc ff ff       	call   11778 <idt_enter_protection>
   11a7d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11a80:	e8 0b f0 ff ff       	call   10a90 <task_current>
   11a85:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11a88:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8b:	8b 40 04             	mov    0x4(%eax),%eax
   11a8e:	85 c0                	test   %eax,%eax
   11a90:	75 19                	jne    11aab <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11a92:	8b 45 08             	mov    0x8(%ebp),%eax
   11a95:	8b 40 04             	mov    0x4(%eax),%eax
   11a98:	8d 50 01             	lea    0x1(%eax),%edx
   11a9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9e:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11aa1:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11aa7:	89 10                	mov    %edx,(%eax)
   11aa9:	eb 47                	jmp    11af2 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11aab:	8b 45 08             	mov    0x8(%ebp),%eax
   11aae:	8b 00                	mov    (%eax),%eax
   11ab0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11ab3:	75 11                	jne    11ac6 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab8:	8b 40 04             	mov    0x4(%eax),%eax
   11abb:	8d 50 01             	lea    0x1(%eax),%edx
   11abe:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac1:	89 50 04             	mov    %edx,0x4(%eax)
   11ac4:	eb 2c                	jmp    11af2 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11ac6:	83 ec 0c             	sub    $0xc,%esp
   11ac9:	ff 75 f0             	push   -0x10(%ebp)
   11acc:	e8 46 ef ff ff       	call   10a17 <task_set_unready>
   11ad1:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad7:	8d 50 40             	lea    0x40(%eax),%edx
   11ada:	8b 45 08             	mov    0x8(%ebp),%eax
   11add:	83 c0 08             	add    $0x8,%eax
   11ae0:	83 ec 08             	sub    $0x8,%esp
   11ae3:	52                   	push   %edx
   11ae4:	50                   	push   %eax
   11ae5:	e8 9b 0f 00 00       	call   12a85 <list_insert_last>
   11aea:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11aed:	e8 a8 ef ff ff       	call   10a9a <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11af2:	83 ec 0c             	sub    $0xc,%esp
   11af5:	ff 75 f4             	push   -0xc(%ebp)
   11af8:	e8 93 fc ff ff       	call   11790 <idt_leave_protection>
   11afd:	83 c4 10             	add    $0x10,%esp
}
   11b00:	90                   	nop
   11b01:	c9                   	leave  
   11b02:	c3                   	ret    

00011b03 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11b03:	55                   	push   %ebp
   11b04:	89 e5                	mov    %esp,%ebp
   11b06:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11b09:	e8 6a fc ff ff       	call   11778 <idt_enter_protection>
   11b0e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11b11:	e8 7a ef ff ff       	call   10a90 <task_current>
   11b16:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11b19:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1c:	8b 00                	mov    (%eax),%eax
   11b1e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11b21:	0f 85 83 00 00 00    	jne    11baa <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11b27:	8b 45 08             	mov    0x8(%ebp),%eax
   11b2a:	8b 40 04             	mov    0x4(%eax),%eax
   11b2d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b30:	8b 45 08             	mov    0x8(%ebp),%eax
   11b33:	89 50 04             	mov    %edx,0x4(%eax)
   11b36:	8b 45 08             	mov    0x8(%ebp),%eax
   11b39:	8b 40 04             	mov    0x4(%eax),%eax
   11b3c:	85 c0                	test   %eax,%eax
   11b3e:	75 6a                	jne    11baa <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11b40:	8b 45 08             	mov    0x8(%ebp),%eax
   11b43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11b49:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4c:	83 c0 08             	add    $0x8,%eax
   11b4f:	83 ec 0c             	sub    $0xc,%esp
   11b52:	50                   	push   %eax
   11b53:	e8 98 fe ff ff       	call   119f0 <list_is_empty>
   11b58:	83 c4 10             	add    $0x10,%esp
   11b5b:	85 c0                	test   %eax,%eax
   11b5d:	75 4b                	jne    11baa <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b62:	83 c0 08             	add    $0x8,%eax
   11b65:	83 ec 0c             	sub    $0xc,%esp
   11b68:	50                   	push   %eax
   11b69:	e8 a6 0f 00 00       	call   12b14 <list_remove_first>
   11b6e:	83 c4 10             	add    $0x10,%esp
   11b71:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11b74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11b78:	74 08                	je     11b82 <mutex_unlock+0x7f>
   11b7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b7d:	83 e8 40             	sub    $0x40,%eax
   11b80:	eb 05                	jmp    11b87 <mutex_unlock+0x84>
   11b82:	b8 00 00 00 00       	mov    $0x0,%eax
   11b87:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11b94:	8b 45 08             	mov    0x8(%ebp),%eax
   11b97:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11b9a:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11b9c:	83 ec 0c             	sub    $0xc,%esp
   11b9f:	ff 75 e8             	push   -0x18(%ebp)
   11ba2:	e8 25 ee ff ff       	call   109cc <task_set_ready>
   11ba7:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11baa:	83 ec 0c             	sub    $0xc,%esp
   11bad:	ff 75 f4             	push   -0xc(%ebp)
   11bb0:	e8 db fb ff ff       	call   11790 <idt_leave_protection>
   11bb5:	83 c4 10             	add    $0x10,%esp
}
   11bb8:	90                   	nop
   11bb9:	c9                   	leave  
   11bba:	c3                   	ret    

00011bbb <list_init>:
static inline void list_init(list_t *list) {
   11bbb:	55                   	push   %ebp
   11bbc:	89 e5                	mov    %esp,%ebp
   11bbe:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11bc1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bc5:	75 19                	jne    11be0 <list_init+0x25>
   11bc7:	68 10 36 01 00       	push   $0x13610
   11bcc:	68 b4 36 01 00       	push   $0x136b4
   11bd1:	6a 31                	push   $0x31
   11bd3:	68 24 36 01 00       	push   $0x13624
   11bd8:	e8 5d 05 00 00       	call   1213a <pannic>
   11bdd:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11be0:	8b 45 08             	mov    0x8(%ebp),%eax
   11be3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11bea:	8b 45 08             	mov    0x8(%ebp),%eax
   11bed:	8b 50 04             	mov    0x4(%eax),%edx
   11bf0:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf3:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11bff:	90                   	nop
   11c00:	c9                   	leave  
   11c01:	c3                   	ret    

00011c02 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11c02:	55                   	push   %ebp
   11c03:	89 e5                	mov    %esp,%ebp
   11c05:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11c08:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c0c:	75 19                	jne    11c27 <list_is_empty+0x25>
   11c0e:	68 10 36 01 00       	push   $0x13610
   11c13:	68 c0 36 01 00       	push   $0x136c0
   11c18:	6a 38                	push   $0x38
   11c1a:	68 24 36 01 00       	push   $0x13624
   11c1f:	e8 16 05 00 00       	call   1213a <pannic>
   11c24:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11c27:	8b 45 08             	mov    0x8(%ebp),%eax
   11c2a:	8b 40 08             	mov    0x8(%eax),%eax
   11c2d:	85 c0                	test   %eax,%eax
   11c2f:	0f 94 c0             	sete   %al
   11c32:	0f b6 c0             	movzbl %al,%eax
}
   11c35:	c9                   	leave  
   11c36:	c3                   	ret    

00011c37 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11c37:	55                   	push   %ebp
   11c38:	89 e5                	mov    %esp,%ebp
   11c3a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11c3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c41:	75 19                	jne    11c5c <sem_init+0x25>
   11c43:	68 62 36 01 00       	push   $0x13662
   11c48:	68 a8 36 01 00       	push   $0x136a8
   11c4d:	6a 18                	push   $0x18
   11c4f:	68 74 36 01 00       	push   $0x13674
   11c54:	e8 e1 04 00 00       	call   1213a <pannic>
   11c59:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11c5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11c65:	8b 45 08             	mov    0x8(%ebp),%eax
   11c68:	83 c0 04             	add    $0x4,%eax
   11c6b:	83 ec 0c             	sub    $0xc,%esp
   11c6e:	50                   	push   %eax
   11c6f:	e8 47 ff ff ff       	call   11bbb <list_init>
   11c74:	83 c4 10             	add    $0x10,%esp
}
   11c77:	90                   	nop
   11c78:	c9                   	leave  
   11c79:	c3                   	ret    

00011c7a <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11c7a:	55                   	push   %ebp
   11c7b:	89 e5                	mov    %esp,%ebp
   11c7d:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c80:	e8 f3 fa ff ff       	call   11778 <idt_enter_protection>
   11c85:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11c88:	8b 45 08             	mov    0x8(%ebp),%eax
   11c8b:	8b 00                	mov    (%eax),%eax
   11c8d:	85 c0                	test   %eax,%eax
   11c8f:	7e 0f                	jle    11ca0 <sem_wait+0x26>
        --sem->count;   
   11c91:	8b 45 08             	mov    0x8(%ebp),%eax
   11c94:	8b 00                	mov    (%eax),%eax
   11c96:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c99:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9c:	89 10                	mov    %edx,(%eax)
   11c9e:	eb 34                	jmp    11cd4 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11ca0:	e8 eb ed ff ff       	call   10a90 <task_current>
   11ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11ca8:	83 ec 0c             	sub    $0xc,%esp
   11cab:	ff 75 f0             	push   -0x10(%ebp)
   11cae:	e8 64 ed ff ff       	call   10a17 <task_set_unready>
   11cb3:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11cb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cb9:	8d 50 40             	lea    0x40(%eax),%edx
   11cbc:	8b 45 08             	mov    0x8(%ebp),%eax
   11cbf:	83 c0 04             	add    $0x4,%eax
   11cc2:	83 ec 08             	sub    $0x8,%esp
   11cc5:	52                   	push   %edx
   11cc6:	50                   	push   %eax
   11cc7:	e8 b9 0d 00 00       	call   12a85 <list_insert_last>
   11ccc:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11ccf:	e8 c6 ed ff ff       	call   10a9a <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11cd4:	83 ec 0c             	sub    $0xc,%esp
   11cd7:	ff 75 f4             	push   -0xc(%ebp)
   11cda:	e8 b1 fa ff ff       	call   11790 <idt_leave_protection>
   11cdf:	83 c4 10             	add    $0x10,%esp
}
   11ce2:	90                   	nop
   11ce3:	c9                   	leave  
   11ce4:	c3                   	ret    

00011ce5 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11ce5:	55                   	push   %ebp
   11ce6:	89 e5                	mov    %esp,%ebp
   11ce8:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11ceb:	e8 88 fa ff ff       	call   11778 <idt_enter_protection>
   11cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf6:	83 c0 04             	add    $0x4,%eax
   11cf9:	83 ec 0c             	sub    $0xc,%esp
   11cfc:	50                   	push   %eax
   11cfd:	e8 00 ff ff ff       	call   11c02 <list_is_empty>
   11d02:	83 c4 10             	add    $0x10,%esp
   11d05:	85 c0                	test   %eax,%eax
   11d07:	75 3b                	jne    11d44 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11d09:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0c:	83 c0 04             	add    $0x4,%eax
   11d0f:	83 ec 0c             	sub    $0xc,%esp
   11d12:	50                   	push   %eax
   11d13:	e8 fc 0d 00 00       	call   12b14 <list_remove_first>
   11d18:	83 c4 10             	add    $0x10,%esp
   11d1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11d1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d22:	74 08                	je     11d2c <sem_notify+0x47>
   11d24:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d27:	83 e8 40             	sub    $0x40,%eax
   11d2a:	eb 05                	jmp    11d31 <sem_notify+0x4c>
   11d2c:	b8 00 00 00 00       	mov    $0x0,%eax
   11d31:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11d34:	83 ec 0c             	sub    $0xc,%esp
   11d37:	ff 75 ec             	push   -0x14(%ebp)
   11d3a:	e8 8d ec ff ff       	call   109cc <task_set_ready>
   11d3f:	83 c4 10             	add    $0x10,%esp
   11d42:	eb 0d                	jmp    11d51 <sem_notify+0x6c>
    } else {
        sem->count++;
   11d44:	8b 45 08             	mov    0x8(%ebp),%eax
   11d47:	8b 00                	mov    (%eax),%eax
   11d49:	8d 50 01             	lea    0x1(%eax),%edx
   11d4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4f:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11d51:	83 ec 0c             	sub    $0xc,%esp
   11d54:	ff 75 f4             	push   -0xc(%ebp)
   11d57:	e8 34 fa ff ff       	call   11790 <idt_leave_protection>
   11d5c:	83 c4 10             	add    $0x10,%esp

}
   11d5f:	90                   	nop
   11d60:	c9                   	leave  
   11d61:	c3                   	ret    

00011d62 <sem_count>:

int sem_count(sem_t *sem) {
   11d62:	55                   	push   %ebp
   11d63:	89 e5                	mov    %esp,%ebp
   11d65:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11d68:	e8 0b fa ff ff       	call   11778 <idt_enter_protection>
   11d6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11d70:	8b 45 08             	mov    0x8(%ebp),%eax
   11d73:	8b 00                	mov    (%eax),%eax
   11d75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11d78:	83 ec 0c             	sub    $0xc,%esp
   11d7b:	ff 75 f4             	push   -0xc(%ebp)
   11d7e:	e8 0d fa ff ff       	call   11790 <idt_leave_protection>
   11d83:	83 c4 10             	add    $0x10,%esp

    return count;
   11d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d89:	c9                   	leave  
   11d8a:	c3                   	ret    

00011d8b <list_init>:
static inline void list_init(list_t *list) {
   11d8b:	55                   	push   %ebp
   11d8c:	89 e5                	mov    %esp,%ebp
   11d8e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d95:	75 19                	jne    11db0 <list_init+0x25>
   11d97:	68 d0 36 01 00       	push   $0x136d0
   11d9c:	68 d4 37 01 00       	push   $0x137d4
   11da1:	6a 31                	push   $0x31
   11da3:	68 e4 36 01 00       	push   $0x136e4
   11da8:	e8 8d 03 00 00       	call   1213a <pannic>
   11dad:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11db0:	8b 45 08             	mov    0x8(%ebp),%eax
   11db3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11dba:	8b 45 08             	mov    0x8(%ebp),%eax
   11dbd:	8b 50 04             	mov    0x4(%eax),%edx
   11dc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc3:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11dc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11dcf:	90                   	nop
   11dd0:	c9                   	leave  
   11dd1:	c3                   	ret    

00011dd2 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11dd2:	55                   	push   %ebp
   11dd3:	89 e5                	mov    %esp,%ebp
   11dd5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11dd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ddc:	75 19                	jne    11df7 <list_get_size+0x25>
   11dde:	68 d0 36 01 00       	push   $0x136d0
   11de3:	68 e0 37 01 00       	push   $0x137e0
   11de8:	6a 3e                	push   $0x3e
   11dea:	68 e4 36 01 00       	push   $0x136e4
   11def:	e8 46 03 00 00       	call   1213a <pannic>
   11df4:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11df7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfa:	8b 40 08             	mov    0x8(%eax),%eax
}
   11dfd:	c9                   	leave  
   11dfe:	c3                   	ret    

00011dff <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11dff:	55                   	push   %ebp
   11e00:	89 e5                	mov    %esp,%ebp
   11e02:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e09:	75 19                	jne    11e24 <list_get_first+0x25>
   11e0b:	68 d0 36 01 00       	push   $0x136d0
   11e10:	68 00 38 01 00       	push   $0x13800
   11e15:	6a 44                	push   $0x44
   11e17:	68 e4 36 01 00       	push   $0x136e4
   11e1c:	e8 19 03 00 00       	call   1213a <pannic>
   11e21:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11e24:	8b 45 08             	mov    0x8(%ebp),%eax
   11e27:	8b 00                	mov    (%eax),%eax
}
   11e29:	c9                   	leave  
   11e2a:	c3                   	ret    

00011e2b <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11e2b:	55                   	push   %ebp
   11e2c:	89 e5                	mov    %esp,%ebp
   11e2e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e35:	75 19                	jne    11e50 <list_get_last+0x25>
   11e37:	68 d0 36 01 00       	push   $0x136d0
   11e3c:	68 f0 37 01 00       	push   $0x137f0
   11e41:	6a 4a                	push   $0x4a
   11e43:	68 e4 36 01 00       	push   $0x136e4
   11e48:	e8 ed 02 00 00       	call   1213a <pannic>
   11e4d:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11e50:	8b 45 08             	mov    0x8(%ebp),%eax
   11e53:	8b 40 04             	mov    0x4(%eax),%eax
}
   11e56:	c9                   	leave  
   11e57:	c3                   	ret    

00011e58 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11e58:	55                   	push   %ebp
   11e59:	89 e5                	mov    %esp,%ebp
   11e5b:	56                   	push   %esi
   11e5c:	53                   	push   %ebx
   11e5d:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11e60:	83 ec 0c             	sub    $0xc,%esp
   11e63:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e66:	50                   	push   %eax
   11e67:	e8 1f ff ff ff       	call   11d8b <list_init>
   11e6c:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11e6f:	83 ec 0c             	sub    $0xc,%esp
   11e72:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e75:	50                   	push   %eax
   11e76:	e8 57 ff ff ff       	call   11dd2 <list_get_size>
   11e7b:	83 c4 10             	add    $0x10,%esp
   11e7e:	89 c6                	mov    %eax,%esi
   11e80:	83 ec 0c             	sub    $0xc,%esp
   11e83:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e86:	50                   	push   %eax
   11e87:	e8 9f ff ff ff       	call   11e2b <list_get_last>
   11e8c:	83 c4 10             	add    $0x10,%esp
   11e8f:	89 c3                	mov    %eax,%ebx
   11e91:	83 ec 0c             	sub    $0xc,%esp
   11e94:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e97:	50                   	push   %eax
   11e98:	e8 62 ff ff ff       	call   11dff <list_get_first>
   11e9d:	83 c4 10             	add    $0x10,%esp
   11ea0:	56                   	push   %esi
   11ea1:	53                   	push   %ebx
   11ea2:	50                   	push   %eax
   11ea3:	68 24 37 01 00       	push   $0x13724
   11ea8:	e8 5c 0f 00 00       	call   12e09 <log_printf>
   11ead:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11eb7:	eb 3f                	jmp    11ef8 <list_test+0xa0>
        list_node_t *node = nodes + i;
   11eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ebc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11ec3:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11ec6:	01 d0                	add    %edx,%eax
   11ec8:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11ecb:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11ece:	83 ec 04             	sub    $0x4,%esp
   11ed1:	50                   	push   %eax
   11ed2:	ff 75 f4             	push   -0xc(%ebp)
   11ed5:	68 4c 37 01 00       	push   $0x1374c
   11eda:	e8 2a 0f 00 00       	call   12e09 <log_printf>
   11edf:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11ee2:	83 ec 08             	sub    $0x8,%esp
   11ee5:	ff 75 d0             	push   -0x30(%ebp)
   11ee8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11eeb:	50                   	push   %eax
   11eec:	e8 09 0b 00 00       	call   129fa <list_insert_first>
   11ef1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11ef4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ef8:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11efc:	7e bb                	jle    11eb9 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11efe:	83 ec 0c             	sub    $0xc,%esp
   11f01:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f04:	50                   	push   %eax
   11f05:	e8 c8 fe ff ff       	call   11dd2 <list_get_size>
   11f0a:	83 c4 10             	add    $0x10,%esp
   11f0d:	89 c6                	mov    %eax,%esi
   11f0f:	83 ec 0c             	sub    $0xc,%esp
   11f12:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f15:	50                   	push   %eax
   11f16:	e8 10 ff ff ff       	call   11e2b <list_get_last>
   11f1b:	83 c4 10             	add    $0x10,%esp
   11f1e:	89 c3                	mov    %eax,%ebx
   11f20:	83 ec 0c             	sub    $0xc,%esp
   11f23:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f26:	50                   	push   %eax
   11f27:	e8 d3 fe ff ff       	call   11dff <list_get_first>
   11f2c:	83 c4 10             	add    $0x10,%esp
   11f2f:	56                   	push   %esi
   11f30:	53                   	push   %ebx
   11f31:	50                   	push   %eax
   11f32:	68 24 37 01 00       	push   $0x13724
   11f37:	e8 cd 0e 00 00       	call   12e09 <log_printf>
   11f3c:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11f3f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f46:	eb 2d                	jmp    11f75 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11f48:	83 ec 0c             	sub    $0xc,%esp
   11f4b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f4e:	50                   	push   %eax
   11f4f:	e8 c0 0b 00 00       	call   12b14 <list_remove_first>
   11f54:	83 c4 10             	add    $0x10,%esp
   11f57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11f5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11f5d:	83 ec 04             	sub    $0x4,%esp
   11f60:	50                   	push   %eax
   11f61:	ff 75 f0             	push   -0x10(%ebp)
   11f64:	68 6b 37 01 00       	push   $0x1376b
   11f69:	e8 9b 0e 00 00       	call   12e09 <log_printf>
   11f6e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11f71:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f75:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11f79:	7e cd                	jle    11f48 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11f7b:	83 ec 0c             	sub    $0xc,%esp
   11f7e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f81:	50                   	push   %eax
   11f82:	e8 4b fe ff ff       	call   11dd2 <list_get_size>
   11f87:	83 c4 10             	add    $0x10,%esp
   11f8a:	89 c6                	mov    %eax,%esi
   11f8c:	83 ec 0c             	sub    $0xc,%esp
   11f8f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f92:	50                   	push   %eax
   11f93:	e8 93 fe ff ff       	call   11e2b <list_get_last>
   11f98:	83 c4 10             	add    $0x10,%esp
   11f9b:	89 c3                	mov    %eax,%ebx
   11f9d:	83 ec 0c             	sub    $0xc,%esp
   11fa0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fa3:	50                   	push   %eax
   11fa4:	e8 56 fe ff ff       	call   11dff <list_get_first>
   11fa9:	83 c4 10             	add    $0x10,%esp
   11fac:	56                   	push   %esi
   11fad:	53                   	push   %ebx
   11fae:	50                   	push   %eax
   11faf:	68 24 37 01 00       	push   $0x13724
   11fb4:	e8 50 0e 00 00       	call   12e09 <log_printf>
   11fb9:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11fbc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11fc3:	eb 3f                	jmp    12004 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11fc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fc8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11fcf:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11fd2:	01 d0                	add    %edx,%eax
   11fd4:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11fd7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11fda:	83 ec 04             	sub    $0x4,%esp
   11fdd:	50                   	push   %eax
   11fde:	ff 75 ec             	push   -0x14(%ebp)
   11fe1:	68 82 37 01 00       	push   $0x13782
   11fe6:	e8 1e 0e 00 00       	call   12e09 <log_printf>
   11feb:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11fee:	83 ec 08             	sub    $0x8,%esp
   11ff1:	ff 75 d8             	push   -0x28(%ebp)
   11ff4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ff7:	50                   	push   %eax
   11ff8:	e8 88 0a 00 00       	call   12a85 <list_insert_last>
   11ffd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12000:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12004:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12008:	7e bb                	jle    11fc5 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1200a:	83 ec 0c             	sub    $0xc,%esp
   1200d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12010:	50                   	push   %eax
   12011:	e8 bc fd ff ff       	call   11dd2 <list_get_size>
   12016:	83 c4 10             	add    $0x10,%esp
   12019:	89 c6                	mov    %eax,%esi
   1201b:	83 ec 0c             	sub    $0xc,%esp
   1201e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12021:	50                   	push   %eax
   12022:	e8 04 fe ff ff       	call   11e2b <list_get_last>
   12027:	83 c4 10             	add    $0x10,%esp
   1202a:	89 c3                	mov    %eax,%ebx
   1202c:	83 ec 0c             	sub    $0xc,%esp
   1202f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12032:	50                   	push   %eax
   12033:	e8 c7 fd ff ff       	call   11dff <list_get_first>
   12038:	83 c4 10             	add    $0x10,%esp
   1203b:	56                   	push   %esi
   1203c:	53                   	push   %ebx
   1203d:	50                   	push   %eax
   1203e:	68 24 37 01 00       	push   $0x13724
   12043:	e8 c1 0d 00 00       	call   12e09 <log_printf>
   12048:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   1204b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12052:	eb 2d                	jmp    12081 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12054:	83 ec 0c             	sub    $0xc,%esp
   12057:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1205a:	50                   	push   %eax
   1205b:	e8 65 0b 00 00       	call   12bc5 <list_remove_last>
   12060:	83 c4 10             	add    $0x10,%esp
   12063:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12066:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12069:	83 ec 04             	sub    $0x4,%esp
   1206c:	50                   	push   %eax
   1206d:	ff 75 e8             	push   -0x18(%ebp)
   12070:	68 a0 37 01 00       	push   $0x137a0
   12075:	e8 8f 0d 00 00       	call   12e09 <log_printf>
   1207a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1207d:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12081:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12085:	7e cd                	jle    12054 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12087:	83 ec 0c             	sub    $0xc,%esp
   1208a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1208d:	50                   	push   %eax
   1208e:	e8 3f fd ff ff       	call   11dd2 <list_get_size>
   12093:	83 c4 10             	add    $0x10,%esp
   12096:	89 c6                	mov    %eax,%esi
   12098:	83 ec 0c             	sub    $0xc,%esp
   1209b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1209e:	50                   	push   %eax
   1209f:	e8 87 fd ff ff       	call   11e2b <list_get_last>
   120a4:	83 c4 10             	add    $0x10,%esp
   120a7:	89 c3                	mov    %eax,%ebx
   120a9:	83 ec 0c             	sub    $0xc,%esp
   120ac:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   120af:	50                   	push   %eax
   120b0:	e8 4a fd ff ff       	call   11dff <list_get_first>
   120b5:	83 c4 10             	add    $0x10,%esp
   120b8:	56                   	push   %esi
   120b9:	53                   	push   %ebx
   120ba:	50                   	push   %eax
   120bb:	68 24 37 01 00       	push   $0x13724
   120c0:	e8 44 0d 00 00       	call   12e09 <log_printf>
   120c5:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   120c8:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   120cf:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   120d6:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   120dd:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   120e4:	8d 45 90             	lea    -0x70(%ebp),%eax
   120e7:	83 c0 04             	add    $0x4,%eax
   120ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   120ed:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   120f1:	74 08                	je     120fb <list_test+0x2a3>
   120f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   120f6:	83 e8 04             	sub    $0x4,%eax
   120f9:	eb 05                	jmp    12100 <list_test+0x2a8>
   120fb:	b8 00 00 00 00       	mov    $0x0,%eax
   12100:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12103:	8d 45 90             	lea    -0x70(%ebp),%eax
   12106:	83 ec 08             	sub    $0x8,%esp
   12109:	50                   	push   %eax
   1210a:	68 b6 37 01 00       	push   $0x137b6
   1210f:	e8 f5 0c 00 00       	call   12e09 <log_printf>
   12114:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12117:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1211a:	83 ec 08             	sub    $0x8,%esp
   1211d:	50                   	push   %eax
   1211e:	68 c4 37 01 00       	push   $0x137c4
   12123:	e8 e1 0c 00 00       	call   12e09 <log_printf>
   12128:	83 c4 10             	add    $0x10,%esp

 }
   1212b:	90                   	nop
   1212c:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1212f:	5b                   	pop    %ebx
   12130:	5e                   	pop    %esi
   12131:	5d                   	pop    %ebp
   12132:	c3                   	ret    

00012133 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12133:	55                   	push   %ebp
   12134:	89 e5                	mov    %esp,%ebp
   12136:	f4                   	hlt    
   12137:	90                   	nop
   12138:	5d                   	pop    %ebp
   12139:	c3                   	ret    

0001213a <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1213a:	55                   	push   %ebp
   1213b:	89 e5                	mov    %esp,%ebp
   1213d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12140:	83 ec 08             	sub    $0x8,%esp
   12143:	ff 75 14             	push   0x14(%ebp)
   12146:	68 0f 38 01 00       	push   $0x1380f
   1214b:	e8 b9 0c 00 00       	call   12e09 <log_printf>
   12150:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12153:	ff 75 10             	push   0x10(%ebp)
   12156:	ff 75 0c             	push   0xc(%ebp)
   12159:	ff 75 08             	push   0x8(%ebp)
   1215c:	68 20 38 01 00       	push   $0x13820
   12161:	e8 a3 0c 00 00       	call   12e09 <log_printf>
   12166:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12169:	e8 c5 ff ff ff       	call   12133 <hlt>
   1216e:	eb f9                	jmp    12169 <pannic+0x2f>

00012170 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12170:	55                   	push   %ebp
   12171:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12173:	8b 45 08             	mov    0x8(%ebp),%eax
   12176:	83 c0 07             	add    $0x7,%eax
   12179:	8d 50 07             	lea    0x7(%eax),%edx
   1217c:	85 c0                	test   %eax,%eax
   1217e:	0f 48 c2             	cmovs  %edx,%eax
   12181:	c1 f8 03             	sar    $0x3,%eax
}
   12184:	5d                   	pop    %ebp
   12185:	c3                   	ret    

00012186 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12186:	55                   	push   %ebp
   12187:	89 e5                	mov    %esp,%ebp
   12189:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1218c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12190:	75 19                	jne    121ab <bitmap_init+0x25>
   12192:	68 3c 38 01 00       	push   $0x1383c
   12197:	68 d0 38 01 00       	push   $0x138d0
   1219c:	6a 24                	push   $0x24
   1219e:	68 54 38 01 00       	push   $0x13854
   121a3:	e8 92 ff ff ff       	call   1213a <pannic>
   121a8:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   121ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121af:	75 19                	jne    121ca <bitmap_init+0x44>
   121b1:	68 8c 38 01 00       	push   $0x1388c
   121b6:	68 d0 38 01 00       	push   $0x138d0
   121bb:	6a 25                	push   $0x25
   121bd:	68 54 38 01 00       	push   $0x13854
   121c2:	e8 73 ff ff ff       	call   1213a <pannic>
   121c7:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   121ca:	8b 45 08             	mov    0x8(%ebp),%eax
   121cd:	8b 55 10             	mov    0x10(%ebp),%edx
   121d0:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   121d2:	8b 45 08             	mov    0x8(%ebp),%eax
   121d5:	8b 55 0c             	mov    0xc(%ebp),%edx
   121d8:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   121db:	8b 45 08             	mov    0x8(%ebp),%eax
   121de:	8b 00                	mov    (%eax),%eax
   121e0:	83 ec 0c             	sub    $0xc,%esp
   121e3:	50                   	push   %eax
   121e4:	e8 87 ff ff ff       	call   12170 <bitmap_byte_count>
   121e9:	83 c4 10             	add    $0x10,%esp
   121ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   121ef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   121f3:	74 07                	je     121fc <bitmap_init+0x76>
   121f5:	ba ff 00 00 00       	mov    $0xff,%edx
   121fa:	eb 05                	jmp    12201 <bitmap_init+0x7b>
   121fc:	ba 00 00 00 00       	mov    $0x0,%edx
   12201:	8b 45 08             	mov    0x8(%ebp),%eax
   12204:	8b 40 04             	mov    0x4(%eax),%eax
   12207:	83 ec 04             	sub    $0x4,%esp
   1220a:	ff 75 f4             	push   -0xc(%ebp)
   1220d:	52                   	push   %edx
   1220e:	50                   	push   %eax
   1220f:	e8 28 04 00 00       	call   1263c <kernel_memset>
   12214:	83 c4 10             	add    $0x10,%esp

}
   12217:	90                   	nop
   12218:	c9                   	leave  
   12219:	c3                   	ret    

0001221a <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1221a:	55                   	push   %ebp
   1221b:	89 e5                	mov    %esp,%ebp
   1221d:	53                   	push   %ebx
   1221e:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12221:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12225:	75 19                	jne    12240 <bitmap_get_bit+0x26>
   12227:	68 3c 38 01 00       	push   $0x1383c
   1222c:	68 dc 38 01 00       	push   $0x138dc
   12231:	6a 39                	push   $0x39
   12233:	68 54 38 01 00       	push   $0x13854
   12238:	e8 fd fe ff ff       	call   1213a <pannic>
   1223d:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12240:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12244:	79 19                	jns    1225f <bitmap_get_bit+0x45>
   12246:	68 a0 38 01 00       	push   $0x138a0
   1224b:	68 dc 38 01 00       	push   $0x138dc
   12250:	6a 3a                	push   $0x3a
   12252:	68 54 38 01 00       	push   $0x13854
   12257:	e8 de fe ff ff       	call   1213a <pannic>
   1225c:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   1225f:	8b 45 08             	mov    0x8(%ebp),%eax
   12262:	8b 48 04             	mov    0x4(%eax),%ecx
   12265:	8b 45 0c             	mov    0xc(%ebp),%eax
   12268:	8d 50 07             	lea    0x7(%eax),%edx
   1226b:	85 c0                	test   %eax,%eax
   1226d:	0f 48 c2             	cmovs  %edx,%eax
   12270:	c1 f8 03             	sar    $0x3,%eax
   12273:	01 c8                	add    %ecx,%eax
   12275:	0f b6 00             	movzbl (%eax),%eax
   12278:	89 c3                	mov    %eax,%ebx
   1227a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1227d:	83 e0 07             	and    $0x7,%eax
   12280:	ba 01 00 00 00       	mov    $0x1,%edx
   12285:	89 c1                	mov    %eax,%ecx
   12287:	d3 e2                	shl    %cl,%edx
   12289:	89 d0                	mov    %edx,%eax
   1228b:	21 d8                	and    %ebx,%eax
}
   1228d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12290:	c9                   	leave  
   12291:	c3                   	ret    

00012292 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12292:	55                   	push   %ebp
   12293:	89 e5                	mov    %esp,%ebp
   12295:	56                   	push   %esi
   12296:	53                   	push   %ebx
   12297:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1229a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1229e:	75 19                	jne    122b9 <bitmap_set_bit+0x27>
   122a0:	68 3c 38 01 00       	push   $0x1383c
   122a5:	68 ec 38 01 00       	push   $0x138ec
   122aa:	6a 48                	push   $0x48
   122ac:	68 54 38 01 00       	push   $0x13854
   122b1:	e8 84 fe ff ff       	call   1213a <pannic>
   122b6:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   122b9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122bd:	78 06                	js     122c5 <bitmap_set_bit+0x33>
   122bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122c3:	79 19                	jns    122de <bitmap_set_bit+0x4c>
   122c5:	68 ab 38 01 00       	push   $0x138ab
   122ca:	68 ec 38 01 00       	push   $0x138ec
   122cf:	6a 49                	push   $0x49
   122d1:	68 54 38 01 00       	push   $0x13854
   122d6:	e8 5f fe ff ff       	call   1213a <pannic>
   122db:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   122de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122e5:	e9 92 00 00 00       	jmp    1237c <bitmap_set_bit+0xea>
        if (bit) {
   122ea:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   122ee:	74 42                	je     12332 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   122f0:	8b 45 08             	mov    0x8(%ebp),%eax
   122f3:	8b 48 04             	mov    0x4(%eax),%ecx
   122f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   122f9:	8d 50 07             	lea    0x7(%eax),%edx
   122fc:	85 c0                	test   %eax,%eax
   122fe:	0f 48 c2             	cmovs  %edx,%eax
   12301:	c1 f8 03             	sar    $0x3,%eax
   12304:	89 c2                	mov    %eax,%edx
   12306:	89 d0                	mov    %edx,%eax
   12308:	01 c8                	add    %ecx,%eax
   1230a:	0f b6 00             	movzbl (%eax),%eax
   1230d:	89 c6                	mov    %eax,%esi
   1230f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12312:	83 e0 07             	and    $0x7,%eax
   12315:	bb 01 00 00 00       	mov    $0x1,%ebx
   1231a:	89 c1                	mov    %eax,%ecx
   1231c:	d3 e3                	shl    %cl,%ebx
   1231e:	89 d8                	mov    %ebx,%eax
   12320:	89 f1                	mov    %esi,%ecx
   12322:	09 c1                	or     %eax,%ecx
   12324:	8b 45 08             	mov    0x8(%ebp),%eax
   12327:	8b 40 04             	mov    0x4(%eax),%eax
   1232a:	01 d0                	add    %edx,%eax
   1232c:	89 ca                	mov    %ecx,%edx
   1232e:	88 10                	mov    %dl,(%eax)
   12330:	eb 42                	jmp    12374 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12332:	8b 45 08             	mov    0x8(%ebp),%eax
   12335:	8b 48 04             	mov    0x4(%eax),%ecx
   12338:	8b 45 0c             	mov    0xc(%ebp),%eax
   1233b:	8d 50 07             	lea    0x7(%eax),%edx
   1233e:	85 c0                	test   %eax,%eax
   12340:	0f 48 c2             	cmovs  %edx,%eax
   12343:	c1 f8 03             	sar    $0x3,%eax
   12346:	89 c2                	mov    %eax,%edx
   12348:	89 d0                	mov    %edx,%eax
   1234a:	01 c8                	add    %ecx,%eax
   1234c:	0f b6 00             	movzbl (%eax),%eax
   1234f:	89 c6                	mov    %eax,%esi
   12351:	8b 45 0c             	mov    0xc(%ebp),%eax
   12354:	83 e0 07             	and    $0x7,%eax
   12357:	bb 01 00 00 00       	mov    $0x1,%ebx
   1235c:	89 c1                	mov    %eax,%ecx
   1235e:	d3 e3                	shl    %cl,%ebx
   12360:	89 d8                	mov    %ebx,%eax
   12362:	f7 d0                	not    %eax
   12364:	89 f1                	mov    %esi,%ecx
   12366:	21 c1                	and    %eax,%ecx
   12368:	8b 45 08             	mov    0x8(%ebp),%eax
   1236b:	8b 40 04             	mov    0x4(%eax),%eax
   1236e:	01 d0                	add    %edx,%eax
   12370:	89 ca                	mov    %ecx,%edx
   12372:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12374:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12378:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1237c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1237f:	3b 45 10             	cmp    0x10(%ebp),%eax
   12382:	7d 0e                	jge    12392 <bitmap_set_bit+0x100>
   12384:	8b 45 08             	mov    0x8(%ebp),%eax
   12387:	8b 00                	mov    (%eax),%eax
   12389:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1238c:	0f 8c 58 ff ff ff    	jl     122ea <bitmap_set_bit+0x58>
        }
    }
}
   12392:	90                   	nop
   12393:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12396:	5b                   	pop    %ebx
   12397:	5e                   	pop    %esi
   12398:	5d                   	pop    %ebp
   12399:	c3                   	ret    

0001239a <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1239a:	55                   	push   %ebp
   1239b:	89 e5                	mov    %esp,%ebp
   1239d:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   123a0:	83 ec 08             	sub    $0x8,%esp
   123a3:	ff 75 0c             	push   0xc(%ebp)
   123a6:	ff 75 08             	push   0x8(%ebp)
   123a9:	e8 6c fe ff ff       	call   1221a <bitmap_get_bit>
   123ae:	83 c4 10             	add    $0x10,%esp
   123b1:	84 c0                	test   %al,%al
   123b3:	0f 95 c0             	setne  %al
   123b6:	0f b6 c0             	movzbl %al,%eax
}
   123b9:	c9                   	leave  
   123ba:	c3                   	ret    

000123bb <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   123bb:	55                   	push   %ebp
   123bc:	89 e5                	mov    %esp,%ebp
   123be:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   123c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123c5:	75 19                	jne    123e0 <bitmap_alloc_nbits+0x25>
   123c7:	68 3c 38 01 00       	push   $0x1383c
   123cc:	68 fc 38 01 00       	push   $0x138fc
   123d1:	6a 68                	push   $0x68
   123d3:	68 54 38 01 00       	push   $0x13854
   123d8:	e8 5d fd ff ff       	call   1213a <pannic>
   123dd:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   123e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123e4:	79 19                	jns    123ff <bitmap_alloc_nbits+0x44>
   123e6:	68 c4 38 01 00       	push   $0x138c4
   123eb:	68 fc 38 01 00       	push   $0x138fc
   123f0:	6a 69                	push   $0x69
   123f2:	68 54 38 01 00       	push   $0x13854
   123f7:	e8 3e fd ff ff       	call   1213a <pannic>
   123fc:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   123ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12406:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   1240d:	e9 8f 00 00 00       	jmp    124a1 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12412:	83 ec 08             	sub    $0x8,%esp
   12415:	ff 75 f4             	push   -0xc(%ebp)
   12418:	ff 75 08             	push   0x8(%ebp)
   1241b:	e8 fa fd ff ff       	call   1221a <bitmap_get_bit>
   12420:	83 c4 10             	add    $0x10,%esp
   12423:	0f b6 c0             	movzbl %al,%eax
   12426:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12429:	74 06                	je     12431 <bitmap_alloc_nbits+0x76>
            search_index++;
   1242b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   1242f:	eb 70                	jmp    124a1 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12431:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12434:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12437:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   1243e:	eb 2d                	jmp    1246d <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12440:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12443:	8d 50 01             	lea    0x1(%eax),%edx
   12446:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12449:	83 ec 08             	sub    $0x8,%esp
   1244c:	50                   	push   %eax
   1244d:	ff 75 08             	push   0x8(%ebp)
   12450:	e8 c5 fd ff ff       	call   1221a <bitmap_get_bit>
   12455:	83 c4 10             	add    $0x10,%esp
   12458:	0f b6 c0             	movzbl %al,%eax
   1245b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1245e:	74 09                	je     12469 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12460:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12467:	eb 16                	jmp    1247f <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12469:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1246d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12470:	3b 45 10             	cmp    0x10(%ebp),%eax
   12473:	7d 0a                	jge    1247f <bitmap_alloc_nbits+0xc4>
   12475:	8b 45 08             	mov    0x8(%ebp),%eax
   12478:	8b 00                	mov    (%eax),%eax
   1247a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1247d:	7c c1                	jl     12440 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   1247f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12483:	74 1c                	je     124a1 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12485:	8b 45 0c             	mov    0xc(%ebp),%eax
   12488:	f7 d0                	not    %eax
   1248a:	50                   	push   %eax
   1248b:	ff 75 10             	push   0x10(%ebp)
   1248e:	ff 75 f0             	push   -0x10(%ebp)
   12491:	ff 75 08             	push   0x8(%ebp)
   12494:	e8 f9 fd ff ff       	call   12292 <bitmap_set_bit>
   12499:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1249c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1249f:	eb 13                	jmp    124b4 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   124a1:	8b 45 08             	mov    0x8(%ebp),%eax
   124a4:	8b 00                	mov    (%eax),%eax
   124a6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   124a9:	0f 8c 63 ff ff ff    	jl     12412 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   124af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   124b4:	c9                   	leave  
   124b5:	c3                   	ret    

000124b6 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   124b6:	55                   	push   %ebp
   124b7:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   124b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124bd:	74 3b                	je     124fa <kernel_strcpy+0x44>
   124bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124c3:	74 35                	je     124fa <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   124c5:	eb 17                	jmp    124de <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   124c7:	8b 55 0c             	mov    0xc(%ebp),%edx
   124ca:	8d 42 01             	lea    0x1(%edx),%eax
   124cd:	89 45 0c             	mov    %eax,0xc(%ebp)
   124d0:	8b 45 08             	mov    0x8(%ebp),%eax
   124d3:	8d 48 01             	lea    0x1(%eax),%ecx
   124d6:	89 4d 08             	mov    %ecx,0x8(%ebp)
   124d9:	0f b6 12             	movzbl (%edx),%edx
   124dc:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   124de:	8b 45 08             	mov    0x8(%ebp),%eax
   124e1:	0f b6 00             	movzbl (%eax),%eax
   124e4:	84 c0                	test   %al,%al
   124e6:	74 0a                	je     124f2 <kernel_strcpy+0x3c>
   124e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   124eb:	0f b6 00             	movzbl (%eax),%eax
   124ee:	84 c0                	test   %al,%al
   124f0:	75 d5                	jne    124c7 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   124f2:	8b 45 08             	mov    0x8(%ebp),%eax
   124f5:	c6 00 00             	movb   $0x0,(%eax)
   124f8:	eb 01                	jmp    124fb <kernel_strcpy+0x45>
    if (!dest || !src) return;
   124fa:	90                   	nop
    
}
   124fb:	5d                   	pop    %ebp
   124fc:	c3                   	ret    

000124fd <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   124fd:	55                   	push   %ebp
   124fe:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12500:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12504:	74 45                	je     1254b <kernel_strncpy+0x4e>
   12506:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1250a:	74 3f                	je     1254b <kernel_strncpy+0x4e>
   1250c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12510:	74 39                	je     1254b <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   12512:	eb 17                	jmp    1252b <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12514:	8b 55 0c             	mov    0xc(%ebp),%edx
   12517:	8d 42 01             	lea    0x1(%edx),%eax
   1251a:	89 45 0c             	mov    %eax,0xc(%ebp)
   1251d:	8b 45 08             	mov    0x8(%ebp),%eax
   12520:	8d 48 01             	lea    0x1(%eax),%ecx
   12523:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12526:	0f b6 12             	movzbl (%edx),%edx
   12529:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   1252b:	8b 45 10             	mov    0x10(%ebp),%eax
   1252e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12531:	89 55 10             	mov    %edx,0x10(%ebp)
   12534:	83 f8 01             	cmp    $0x1,%eax
   12537:	7e 0a                	jle    12543 <kernel_strncpy+0x46>
   12539:	8b 45 0c             	mov    0xc(%ebp),%eax
   1253c:	0f b6 00             	movzbl (%eax),%eax
   1253f:	84 c0                	test   %al,%al
   12541:	75 d1                	jne    12514 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12543:	8b 45 08             	mov    0x8(%ebp),%eax
   12546:	c6 00 00             	movb   $0x0,(%eax)
   12549:	eb 01                	jmp    1254c <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   1254b:	90                   	nop
}
   1254c:	5d                   	pop    %ebp
   1254d:	c3                   	ret    

0001254e <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1254e:	55                   	push   %ebp
   1254f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12551:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12555:	74 06                	je     1255d <kernel_strncmp+0xf>
   12557:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1255b:	75 0f                	jne    1256c <kernel_strncmp+0x1e>
   1255d:	b8 00 00 00 00       	mov    $0x0,%eax
   12562:	eb 52                	jmp    125b6 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12564:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12568:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1256c:	8b 45 08             	mov    0x8(%ebp),%eax
   1256f:	0f b6 00             	movzbl (%eax),%eax
   12572:	84 c0                	test   %al,%al
   12574:	74 24                	je     1259a <kernel_strncmp+0x4c>
   12576:	8b 45 0c             	mov    0xc(%ebp),%eax
   12579:	0f b6 00             	movzbl (%eax),%eax
   1257c:	84 c0                	test   %al,%al
   1257e:	74 1a                	je     1259a <kernel_strncmp+0x4c>
   12580:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12584:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12588:	74 10                	je     1259a <kernel_strncmp+0x4c>
   1258a:	8b 45 08             	mov    0x8(%ebp),%eax
   1258d:	0f b6 10             	movzbl (%eax),%edx
   12590:	8b 45 0c             	mov    0xc(%ebp),%eax
   12593:	0f b6 00             	movzbl (%eax),%eax
   12596:	38 c2                	cmp    %al,%dl
   12598:	74 ca                	je     12564 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   1259a:	8b 45 08             	mov    0x8(%ebp),%eax
   1259d:	0f b6 10             	movzbl (%eax),%edx
   125a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a3:	0f b6 00             	movzbl (%eax),%eax
   125a6:	38 c2                	cmp    %al,%dl
   125a8:	7e 07                	jle    125b1 <kernel_strncmp+0x63>
   125aa:	b8 01 00 00 00       	mov    $0x1,%eax
   125af:	eb 05                	jmp    125b6 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   125b1:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   125b6:	5d                   	pop    %ebp
   125b7:	c3                   	ret    

000125b8 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   125b8:	55                   	push   %ebp
   125b9:	89 e5                	mov    %esp,%ebp
   125bb:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   125be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125c2:	75 07                	jne    125cb <kernel_strlen+0x13>
   125c4:	b8 00 00 00 00       	mov    $0x0,%eax
   125c9:	eb 20                	jmp    125eb <kernel_strlen+0x33>

    int len = 0;
   125cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   125d2:	eb 04                	jmp    125d8 <kernel_strlen+0x20>
   125d4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   125d8:	8b 45 08             	mov    0x8(%ebp),%eax
   125db:	8d 50 01             	lea    0x1(%eax),%edx
   125de:	89 55 08             	mov    %edx,0x8(%ebp)
   125e1:	0f b6 00             	movzbl (%eax),%eax
   125e4:	84 c0                	test   %al,%al
   125e6:	75 ec                	jne    125d4 <kernel_strlen+0x1c>

    return len;
   125e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   125eb:	c9                   	leave  
   125ec:	c3                   	ret    

000125ed <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   125ed:	55                   	push   %ebp
   125ee:	89 e5                	mov    %esp,%ebp
   125f0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   125f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125f7:	74 40                	je     12639 <kernel_memcpy+0x4c>
   125f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125fd:	74 3a                	je     12639 <kernel_memcpy+0x4c>
   125ff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12603:	74 34                	je     12639 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12605:	8b 45 08             	mov    0x8(%ebp),%eax
   12608:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   1260b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12611:	eb 17                	jmp    1262a <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12613:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12616:	8d 42 01             	lea    0x1(%edx),%eax
   12619:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1261c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1261f:	8d 48 01             	lea    0x1(%eax),%ecx
   12622:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12625:	0f b6 12             	movzbl (%edx),%edx
   12628:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1262a:	8b 45 10             	mov    0x10(%ebp),%eax
   1262d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12630:	89 55 10             	mov    %edx,0x10(%ebp)
   12633:	85 c0                	test   %eax,%eax
   12635:	75 dc                	jne    12613 <kernel_memcpy+0x26>
   12637:	eb 01                	jmp    1263a <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12639:	90                   	nop
    }
    
}
   1263a:	c9                   	leave  
   1263b:	c3                   	ret    

0001263c <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1263c:	55                   	push   %ebp
   1263d:	89 e5                	mov    %esp,%ebp
   1263f:	83 ec 14             	sub    $0x14,%esp
   12642:	8b 45 0c             	mov    0xc(%ebp),%eax
   12645:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12648:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1264c:	74 2c                	je     1267a <kernel_memset+0x3e>
   1264e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12652:	74 26                	je     1267a <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12654:	8b 45 08             	mov    0x8(%ebp),%eax
   12657:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   1265a:	eb 0f                	jmp    1266b <kernel_memset+0x2f>
        *(d++) = v;
   1265c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1265f:	8d 50 01             	lea    0x1(%eax),%edx
   12662:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12665:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12669:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1266b:	8b 45 10             	mov    0x10(%ebp),%eax
   1266e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12671:	89 55 10             	mov    %edx,0x10(%ebp)
   12674:	85 c0                	test   %eax,%eax
   12676:	75 e4                	jne    1265c <kernel_memset+0x20>
   12678:	eb 01                	jmp    1267b <kernel_memset+0x3f>
    if (!dest || !size) return;
   1267a:	90                   	nop
    }
    
}
   1267b:	c9                   	leave  
   1267c:	c3                   	ret    

0001267d <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1267d:	55                   	push   %ebp
   1267e:	89 e5                	mov    %esp,%ebp
   12680:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12683:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12687:	74 0c                	je     12695 <kernel_memcmp+0x18>
   12689:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1268d:	74 06                	je     12695 <kernel_memcmp+0x18>
   1268f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12693:	75 07                	jne    1269c <kernel_memcmp+0x1f>
   12695:	b8 00 00 00 00       	mov    $0x0,%eax
   1269a:	eb 63                	jmp    126ff <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1269c:	8b 45 08             	mov    0x8(%ebp),%eax
   1269f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   126a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   126a5:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   126a8:	eb 08                	jmp    126b2 <kernel_memcmp+0x35>
        d1++;
   126aa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   126ae:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   126b2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   126b6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126ba:	74 10                	je     126cc <kernel_memcmp+0x4f>
   126bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126bf:	0f b6 10             	movzbl (%eax),%edx
   126c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126c5:	0f b6 00             	movzbl (%eax),%eax
   126c8:	38 c2                	cmp    %al,%dl
   126ca:	74 de                	je     126aa <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   126cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126cf:	0f b6 10             	movzbl (%eax),%edx
   126d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126d5:	0f b6 00             	movzbl (%eax),%eax
   126d8:	38 c2                	cmp    %al,%dl
   126da:	76 07                	jbe    126e3 <kernel_memcmp+0x66>
   126dc:	b8 01 00 00 00       	mov    $0x1,%eax
   126e1:	eb 1c                	jmp    126ff <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   126e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126e6:	0f b6 10             	movzbl (%eax),%edx
   126e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126ec:	0f b6 00             	movzbl (%eax),%eax
   126ef:	38 c2                	cmp    %al,%dl
   126f1:	73 07                	jae    126fa <kernel_memcmp+0x7d>
   126f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126f8:	eb 05                	jmp    126ff <kernel_memcmp+0x82>
    else return 0;
   126fa:	b8 00 00 00 00       	mov    $0x0,%eax

}
   126ff:	c9                   	leave  
   12700:	c3                   	ret    

00012701 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12701:	55                   	push   %ebp
   12702:	89 e5                	mov    %esp,%ebp
   12704:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12707:	8d 45 10             	lea    0x10(%ebp),%eax
   1270a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   1270d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12710:	83 ec 04             	sub    $0x4,%esp
   12713:	50                   	push   %eax
   12714:	ff 75 0c             	push   0xc(%ebp)
   12717:	ff 75 08             	push   0x8(%ebp)
   1271a:	e8 06 00 00 00       	call   12725 <kernel_vsprintf>
   1271f:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12722:	90                   	nop
   12723:	c9                   	leave  
   12724:	c3                   	ret    

00012725 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12725:	55                   	push   %ebp
   12726:	89 e5                	mov    %esp,%ebp
   12728:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   1272b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12732:	8b 45 08             	mov    0x8(%ebp),%eax
   12735:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12738:	e9 68 01 00 00       	jmp    128a5 <kernel_vsprintf+0x180>
        switch (state) {
   1273d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12741:	74 0b                	je     1274e <kernel_vsprintf+0x29>
   12743:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12747:	74 2b                	je     12774 <kernel_vsprintf+0x4f>
   12749:	e9 56 01 00 00       	jmp    128a4 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1274e:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12752:	75 0c                	jne    12760 <kernel_vsprintf+0x3b>
   12754:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1275b:	e9 45 01 00 00       	jmp    128a5 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12760:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12763:	8d 50 01             	lea    0x1(%eax),%edx
   12766:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12769:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1276d:	88 10                	mov    %dl,(%eax)
            break;
   1276f:	e9 31 01 00 00       	jmp    128a5 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12774:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12778:	75 47                	jne    127c1 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   1277a:	8b 45 10             	mov    0x10(%ebp),%eax
   1277d:	8d 50 04             	lea    0x4(%eax),%edx
   12780:	89 55 10             	mov    %edx,0x10(%ebp)
   12783:	8b 00                	mov    (%eax),%eax
   12785:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12788:	ff 75 ec             	push   -0x14(%ebp)
   1278b:	e8 28 fe ff ff       	call   125b8 <kernel_strlen>
   12790:	83 c4 04             	add    $0x4,%esp
   12793:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12796:	eb 17                	jmp    127af <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12798:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1279b:	8d 42 01             	lea    0x1(%edx),%eax
   1279e:	89 45 ec             	mov    %eax,-0x14(%ebp)
   127a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127a4:	8d 48 01             	lea    0x1(%eax),%ecx
   127a7:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   127aa:	0f b6 12             	movzbl (%edx),%edx
   127ad:	88 10                	mov    %dl,(%eax)
                while (len--) {
   127af:	8b 45 e8             	mov    -0x18(%ebp),%eax
   127b2:	8d 50 ff             	lea    -0x1(%eax),%edx
   127b5:	89 55 e8             	mov    %edx,-0x18(%ebp)
   127b8:	85 c0                	test   %eax,%eax
   127ba:	75 dc                	jne    12798 <kernel_vsprintf+0x73>
   127bc:	e9 da 00 00 00       	jmp    1289b <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   127c1:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   127c5:	75 37                	jne    127fe <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   127c7:	8b 45 10             	mov    0x10(%ebp),%eax
   127ca:	8d 50 04             	lea    0x4(%eax),%edx
   127cd:	89 55 10             	mov    %edx,0x10(%ebp)
   127d0:	8b 00                	mov    (%eax),%eax
   127d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   127d5:	83 ec 04             	sub    $0x4,%esp
   127d8:	6a 0a                	push   $0xa
   127da:	ff 75 d8             	push   -0x28(%ebp)
   127dd:	ff 75 f0             	push   -0x10(%ebp)
   127e0:	e8 dd 00 00 00       	call   128c2 <kernel_itoa>
   127e5:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   127e8:	83 ec 0c             	sub    $0xc,%esp
   127eb:	ff 75 f0             	push   -0x10(%ebp)
   127ee:	e8 c5 fd ff ff       	call   125b8 <kernel_strlen>
   127f3:	83 c4 10             	add    $0x10,%esp
   127f6:	01 45 f0             	add    %eax,-0x10(%ebp)
   127f9:	e9 9d 00 00 00       	jmp    1289b <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   127fe:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12802:	74 06                	je     1280a <kernel_vsprintf+0xe5>
   12804:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12808:	75 34                	jne    1283e <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   1280a:	8b 45 10             	mov    0x10(%ebp),%eax
   1280d:	8d 50 04             	lea    0x4(%eax),%edx
   12810:	89 55 10             	mov    %edx,0x10(%ebp)
   12813:	8b 00                	mov    (%eax),%eax
   12815:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12818:	83 ec 04             	sub    $0x4,%esp
   1281b:	6a 10                	push   $0x10
   1281d:	ff 75 dc             	push   -0x24(%ebp)
   12820:	ff 75 f0             	push   -0x10(%ebp)
   12823:	e8 9a 00 00 00       	call   128c2 <kernel_itoa>
   12828:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1282b:	83 ec 0c             	sub    $0xc,%esp
   1282e:	ff 75 f0             	push   -0x10(%ebp)
   12831:	e8 82 fd ff ff       	call   125b8 <kernel_strlen>
   12836:	83 c4 10             	add    $0x10,%esp
   12839:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   1283c:	eb 5d                	jmp    1289b <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1283e:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12842:	75 34                	jne    12878 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12844:	8b 45 10             	mov    0x10(%ebp),%eax
   12847:	8d 50 04             	lea    0x4(%eax),%edx
   1284a:	89 55 10             	mov    %edx,0x10(%ebp)
   1284d:	8b 00                	mov    (%eax),%eax
   1284f:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12852:	83 ec 04             	sub    $0x4,%esp
   12855:	6a 02                	push   $0x2
   12857:	ff 75 e0             	push   -0x20(%ebp)
   1285a:	ff 75 f0             	push   -0x10(%ebp)
   1285d:	e8 60 00 00 00       	call   128c2 <kernel_itoa>
   12862:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12865:	83 ec 0c             	sub    $0xc,%esp
   12868:	ff 75 f0             	push   -0x10(%ebp)
   1286b:	e8 48 fd ff ff       	call   125b8 <kernel_strlen>
   12870:	83 c4 10             	add    $0x10,%esp
   12873:	01 45 f0             	add    %eax,-0x10(%ebp)
   12876:	eb 23                	jmp    1289b <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12878:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1287c:	75 1d                	jne    1289b <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1287e:	8b 45 10             	mov    0x10(%ebp),%eax
   12881:	8d 50 04             	lea    0x4(%eax),%edx
   12884:	89 55 10             	mov    %edx,0x10(%ebp)
   12887:	8b 00                	mov    (%eax),%eax
   12889:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   1288c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1288f:	8d 50 01             	lea    0x1(%eax),%edx
   12892:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12895:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12899:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   1289b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   128a2:	eb 01                	jmp    128a5 <kernel_vsprintf+0x180>
        default:
            break;
   128a4:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   128a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   128a8:	8d 50 01             	lea    0x1(%eax),%edx
   128ab:	89 55 0c             	mov    %edx,0xc(%ebp)
   128ae:	0f b6 00             	movzbl (%eax),%eax
   128b1:	88 45 e7             	mov    %al,-0x19(%ebp)
   128b4:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   128b8:	0f 85 7f fe ff ff    	jne    1273d <kernel_vsprintf+0x18>
        }
    }
    

}
   128be:	90                   	nop
   128bf:	90                   	nop
   128c0:	c9                   	leave  
   128c1:	c3                   	ret    

000128c2 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   128c2:	55                   	push   %ebp
   128c3:	89 e5                	mov    %esp,%ebp
   128c5:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   128cb:	8b 45 08             	mov    0x8(%ebp),%eax
   128ce:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   128d1:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   128d5:	74 1d                	je     128f4 <kernel_itoa+0x32>
   128d7:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   128db:	74 17                	je     128f4 <kernel_itoa+0x32>
   128dd:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128e1:	74 11                	je     128f4 <kernel_itoa+0x32>
   128e3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128e7:	74 0b                	je     128f4 <kernel_itoa+0x32>
        *buf = '\0';
   128e9:	8b 45 08             	mov    0x8(%ebp),%eax
   128ec:	c6 00 00             	movb   $0x0,(%eax)
        return;
   128ef:	e9 a2 00 00 00       	jmp    12996 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   128f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128f8:	79 11                	jns    1290b <kernel_itoa+0x49>
        *(p++) = '-';
   128fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128fd:	8d 50 01             	lea    0x1(%eax),%edx
   12900:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12903:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12906:	f7 5d 0c             	negl   0xc(%ebp)
   12909:	eb 1a                	jmp    12925 <kernel_itoa+0x63>
    } else if (num == 0) {
   1290b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1290f:	75 14                	jne    12925 <kernel_itoa+0x63>
        *(p++) = '0';
   12911:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12914:	8d 50 01             	lea    0x1(%eax),%edx
   12917:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1291a:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   1291d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12920:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12923:	eb 71                	jmp    12996 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12925:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   1292c:	eb 2e                	jmp    1295c <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   1292e:	8b 0d 6c 3a 01 00    	mov    0x13a6c,%ecx
   12934:	8b 45 0c             	mov    0xc(%ebp),%eax
   12937:	99                   	cltd   
   12938:	f7 7d 10             	idivl  0x10(%ebp)
   1293b:	89 d0                	mov    %edx,%eax
   1293d:	01 c1                	add    %eax,%ecx
   1293f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12942:	8d 50 01             	lea    0x1(%eax),%edx
   12945:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12948:	0f b6 11             	movzbl (%ecx),%edx
   1294b:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12952:	8b 45 0c             	mov    0xc(%ebp),%eax
   12955:	99                   	cltd   
   12956:	f7 7d 10             	idivl  0x10(%ebp)
   12959:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1295c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12960:	7f cc                	jg     1292e <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12962:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12965:	83 e8 01             	sub    $0x1,%eax
   12968:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1296b:	eb 1d                	jmp    1298a <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1296d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12970:	8d 50 01             	lea    0x1(%eax),%edx
   12973:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12976:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   1297c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1297f:	01 ca                	add    %ecx,%edx
   12981:	0f b6 12             	movzbl (%edx),%edx
   12984:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12986:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   1298a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1298e:	79 dd                	jns    1296d <kernel_itoa+0xab>
    }
    *p = '\0';
   12990:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12993:	c6 00 00             	movb   $0x0,(%eax)
   12996:	c9                   	leave  
   12997:	c3                   	ret    

00012998 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12998:	55                   	push   %ebp
   12999:	89 e5                	mov    %esp,%ebp
   1299b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1299e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129a2:	75 19                	jne    129bd <list_is_empty+0x25>
   129a4:	68 20 39 01 00       	push   $0x13920
   129a9:	68 04 3a 01 00       	push   $0x13a04
   129ae:	6a 38                	push   $0x38
   129b0:	68 34 39 01 00       	push   $0x13934
   129b5:	e8 80 f7 ff ff       	call   1213a <pannic>
   129ba:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   129bd:	8b 45 08             	mov    0x8(%ebp),%eax
   129c0:	8b 40 08             	mov    0x8(%eax),%eax
   129c3:	85 c0                	test   %eax,%eax
   129c5:	0f 94 c0             	sete   %al
   129c8:	0f b6 c0             	movzbl %al,%eax
}
   129cb:	c9                   	leave  
   129cc:	c3                   	ret    

000129cd <list_get_size>:
static inline int list_get_size(list_t *list) {
   129cd:	55                   	push   %ebp
   129ce:	89 e5                	mov    %esp,%ebp
   129d0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   129d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129d7:	75 19                	jne    129f2 <list_get_size+0x25>
   129d9:	68 20 39 01 00       	push   $0x13920
   129de:	68 3c 3a 01 00       	push   $0x13a3c
   129e3:	6a 3e                	push   $0x3e
   129e5:	68 34 39 01 00       	push   $0x13934
   129ea:	e8 4b f7 ff ff       	call   1213a <pannic>
   129ef:	83 c4 10             	add    $0x10,%esp
    return list->size;
   129f2:	8b 45 08             	mov    0x8(%ebp),%eax
   129f5:	8b 40 08             	mov    0x8(%eax),%eax
}
   129f8:	c9                   	leave  
   129f9:	c3                   	ret    

000129fa <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   129fa:	55                   	push   %ebp
   129fb:	89 e5                	mov    %esp,%ebp
   129fd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12a00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a04:	74 06                	je     12a0c <list_insert_first+0x12>
   12a06:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a0a:	75 19                	jne    12a25 <list_insert_first+0x2b>
   12a0c:	68 74 39 01 00       	push   $0x13974
   12a11:	68 f0 39 01 00       	push   $0x139f0
   12a16:	6a 0f                	push   $0xf
   12a18:	68 a4 39 01 00       	push   $0x139a4
   12a1d:	e8 18 f7 ff ff       	call   1213a <pannic>
   12a22:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12a25:	8b 45 08             	mov    0x8(%ebp),%eax
   12a28:	8b 10                	mov    (%eax),%edx
   12a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a2d:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12a30:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12a39:	83 ec 0c             	sub    $0xc,%esp
   12a3c:	ff 75 08             	push   0x8(%ebp)
   12a3f:	e8 54 ff ff ff       	call   12998 <list_is_empty>
   12a44:	83 c4 10             	add    $0x10,%esp
   12a47:	85 c0                	test   %eax,%eax
   12a49:	74 16                	je     12a61 <list_insert_first+0x67>
        list->first = list->last = node;
   12a4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a51:	89 50 04             	mov    %edx,0x4(%eax)
   12a54:	8b 45 08             	mov    0x8(%ebp),%eax
   12a57:	8b 50 04             	mov    0x4(%eax),%edx
   12a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5d:	89 10                	mov    %edx,(%eax)
   12a5f:	eb 12                	jmp    12a73 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12a61:	8b 45 08             	mov    0x8(%ebp),%eax
   12a64:	8b 00                	mov    (%eax),%eax
   12a66:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a69:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12a6b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a71:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12a73:	8b 45 08             	mov    0x8(%ebp),%eax
   12a76:	8b 40 08             	mov    0x8(%eax),%eax
   12a79:	8d 50 01             	lea    0x1(%eax),%edx
   12a7c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7f:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a82:	90                   	nop
   12a83:	c9                   	leave  
   12a84:	c3                   	ret    

00012a85 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12a85:	55                   	push   %ebp
   12a86:	89 e5                	mov    %esp,%ebp
   12a88:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12a8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a8f:	74 06                	je     12a97 <list_insert_last+0x12>
   12a91:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a95:	75 19                	jne    12ab0 <list_insert_last+0x2b>
   12a97:	68 74 39 01 00       	push   $0x13974
   12a9c:	68 14 3a 01 00       	push   $0x13a14
   12aa1:	6a 1f                	push   $0x1f
   12aa3:	68 a4 39 01 00       	push   $0x139a4
   12aa8:	e8 8d f6 ff ff       	call   1213a <pannic>
   12aad:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab3:	8b 50 04             	mov    0x4(%eax),%edx
   12ab6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ab9:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12abb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12abe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12ac5:	83 ec 0c             	sub    $0xc,%esp
   12ac8:	ff 75 08             	push   0x8(%ebp)
   12acb:	e8 c8 fe ff ff       	call   12998 <list_is_empty>
   12ad0:	83 c4 10             	add    $0x10,%esp
   12ad3:	85 c0                	test   %eax,%eax
   12ad5:	74 16                	je     12aed <list_insert_last+0x68>
        list->first = list->last = node;
   12ad7:	8b 45 08             	mov    0x8(%ebp),%eax
   12ada:	8b 55 0c             	mov    0xc(%ebp),%edx
   12add:	89 50 04             	mov    %edx,0x4(%eax)
   12ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae3:	8b 50 04             	mov    0x4(%eax),%edx
   12ae6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae9:	89 10                	mov    %edx,(%eax)
   12aeb:	eb 15                	jmp    12b02 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12aed:	8b 45 08             	mov    0x8(%ebp),%eax
   12af0:	8b 40 04             	mov    0x4(%eax),%eax
   12af3:	8b 55 0c             	mov    0xc(%ebp),%edx
   12af6:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12af9:	8b 45 08             	mov    0x8(%ebp),%eax
   12afc:	8b 55 0c             	mov    0xc(%ebp),%edx
   12aff:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12b02:	8b 45 08             	mov    0x8(%ebp),%eax
   12b05:	8b 40 08             	mov    0x8(%eax),%eax
   12b08:	8d 50 01             	lea    0x1(%eax),%edx
   12b0b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0e:	89 50 08             	mov    %edx,0x8(%eax)

}
   12b11:	90                   	nop
   12b12:	c9                   	leave  
   12b13:	c3                   	ret    

00012b14 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12b14:	55                   	push   %ebp
   12b15:	89 e5                	mov    %esp,%ebp
   12b17:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12b1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b1e:	75 19                	jne    12b39 <list_remove_first+0x25>
   12b20:	68 da 39 01 00       	push   $0x139da
   12b25:	68 28 3a 01 00       	push   $0x13a28
   12b2a:	6a 31                	push   $0x31
   12b2c:	68 a4 39 01 00       	push   $0x139a4
   12b31:	e8 04 f6 ff ff       	call   1213a <pannic>
   12b36:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12b39:	83 ec 0c             	sub    $0xc,%esp
   12b3c:	ff 75 08             	push   0x8(%ebp)
   12b3f:	e8 54 fe ff ff       	call   12998 <list_is_empty>
   12b44:	83 c4 10             	add    $0x10,%esp
   12b47:	85 c0                	test   %eax,%eax
   12b49:	74 07                	je     12b52 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12b4b:	b8 00 00 00 00       	mov    $0x0,%eax
   12b50:	eb 71                	jmp    12bc3 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12b52:	8b 45 08             	mov    0x8(%ebp),%eax
   12b55:	8b 00                	mov    (%eax),%eax
   12b57:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12b5a:	83 ec 0c             	sub    $0xc,%esp
   12b5d:	ff 75 08             	push   0x8(%ebp)
   12b60:	e8 68 fe ff ff       	call   129cd <list_get_size>
   12b65:	83 c4 10             	add    $0x10,%esp
   12b68:	83 f8 01             	cmp    $0x1,%eax
   12b6b:	75 17                	jne    12b84 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b70:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b77:	8b 45 08             	mov    0x8(%ebp),%eax
   12b7a:	8b 50 04             	mov    0x4(%eax),%edx
   12b7d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b80:	89 10                	mov    %edx,(%eax)
   12b82:	eb 18                	jmp    12b9c <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12b84:	8b 45 08             	mov    0x8(%ebp),%eax
   12b87:	8b 00                	mov    (%eax),%eax
   12b89:	8b 50 04             	mov    0x4(%eax),%edx
   12b8c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8f:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12b91:	8b 45 08             	mov    0x8(%ebp),%eax
   12b94:	8b 00                	mov    (%eax),%eax
   12b96:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9f:	8b 40 08             	mov    0x8(%eax),%eax
   12ba2:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ba5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba8:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bb8:	8b 50 04             	mov    0x4(%eax),%edx
   12bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bbe:	89 10                	mov    %edx,(%eax)
    return ret;
   12bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12bc3:	c9                   	leave  
   12bc4:	c3                   	ret    

00012bc5 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12bc5:	55                   	push   %ebp
   12bc6:	89 e5                	mov    %esp,%ebp
   12bc8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12bcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12bcf:	75 19                	jne    12bea <list_remove_last+0x25>
   12bd1:	68 da 39 01 00       	push   $0x139da
   12bd6:	68 4c 3a 01 00       	push   $0x13a4c
   12bdb:	6a 46                	push   $0x46
   12bdd:	68 a4 39 01 00       	push   $0x139a4
   12be2:	e8 53 f5 ff ff       	call   1213a <pannic>
   12be7:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12bea:	83 ec 0c             	sub    $0xc,%esp
   12bed:	ff 75 08             	push   0x8(%ebp)
   12bf0:	e8 a3 fd ff ff       	call   12998 <list_is_empty>
   12bf5:	83 c4 10             	add    $0x10,%esp
   12bf8:	85 c0                	test   %eax,%eax
   12bfa:	74 07                	je     12c03 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12bfc:	b8 00 00 00 00       	mov    $0x0,%eax
   12c01:	eb 75                	jmp    12c78 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12c03:	8b 45 08             	mov    0x8(%ebp),%eax
   12c06:	8b 40 04             	mov    0x4(%eax),%eax
   12c09:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12c0c:	83 ec 0c             	sub    $0xc,%esp
   12c0f:	ff 75 08             	push   0x8(%ebp)
   12c12:	e8 b6 fd ff ff       	call   129cd <list_get_size>
   12c17:	83 c4 10             	add    $0x10,%esp
   12c1a:	83 f8 01             	cmp    $0x1,%eax
   12c1d:	75 17                	jne    12c36 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c22:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c29:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2c:	8b 50 04             	mov    0x4(%eax),%edx
   12c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c32:	89 10                	mov    %edx,(%eax)
   12c34:	eb 1b                	jmp    12c51 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12c36:	8b 45 08             	mov    0x8(%ebp),%eax
   12c39:	8b 40 04             	mov    0x4(%eax),%eax
   12c3c:	8b 10                	mov    (%eax),%edx
   12c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c41:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12c44:	8b 45 08             	mov    0x8(%ebp),%eax
   12c47:	8b 40 04             	mov    0x4(%eax),%eax
   12c4a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12c51:	8b 45 08             	mov    0x8(%ebp),%eax
   12c54:	8b 40 08             	mov    0x8(%eax),%eax
   12c57:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5d:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12c60:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c63:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c6d:	8b 50 04             	mov    0x4(%eax),%edx
   12c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c73:	89 10                	mov    %edx,(%eax)
    return ret;
   12c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12c78:	c9                   	leave  
   12c79:	c3                   	ret    

00012c7a <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12c7a:	55                   	push   %ebp
   12c7b:	89 e5                	mov    %esp,%ebp
   12c7d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12c80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c84:	74 06                	je     12c8c <list_remove+0x12>
   12c86:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c8a:	75 19                	jne    12ca5 <list_remove+0x2b>
   12c8c:	68 74 39 01 00       	push   $0x13974
   12c91:	68 60 3a 01 00       	push   $0x13a60
   12c96:	6a 5b                	push   $0x5b
   12c98:	68 a4 39 01 00       	push   $0x139a4
   12c9d:	e8 98 f4 ff ff       	call   1213a <pannic>
   12ca2:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12ca5:	83 ec 0c             	sub    $0xc,%esp
   12ca8:	ff 75 08             	push   0x8(%ebp)
   12cab:	e8 e8 fc ff ff       	call   12998 <list_is_empty>
   12cb0:	83 c4 10             	add    $0x10,%esp
   12cb3:	85 c0                	test   %eax,%eax
   12cb5:	74 0a                	je     12cc1 <list_remove+0x47>
        return (list_node_t*)0;
   12cb7:	b8 00 00 00 00       	mov    $0x0,%eax
   12cbc:	e9 80 00 00 00       	jmp    12d41 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc4:	8b 00                	mov    (%eax),%eax
   12cc6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12cc9:	75 0b                	jne    12cd6 <list_remove+0x5c>
   12ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cce:	8b 50 04             	mov    0x4(%eax),%edx
   12cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd4:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12cd6:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd9:	8b 40 04             	mov    0x4(%eax),%eax
   12cdc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12cdf:	75 0b                	jne    12cec <list_remove+0x72>
   12ce1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ce4:	8b 10                	mov    (%eax),%edx
   12ce6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ce9:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12cec:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cef:	8b 00                	mov    (%eax),%eax
   12cf1:	85 c0                	test   %eax,%eax
   12cf3:	74 0e                	je     12d03 <list_remove+0x89>
   12cf5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cf8:	8b 00                	mov    (%eax),%eax
   12cfa:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cfd:	8b 52 04             	mov    0x4(%edx),%edx
   12d00:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12d03:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d06:	8b 40 04             	mov    0x4(%eax),%eax
   12d09:	85 c0                	test   %eax,%eax
   12d0b:	74 0d                	je     12d1a <list_remove+0xa0>
   12d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d10:	8b 40 04             	mov    0x4(%eax),%eax
   12d13:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d16:	8b 12                	mov    (%edx),%edx
   12d18:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d1d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12d24:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d27:	8b 50 04             	mov    0x4(%eax),%edx
   12d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d2d:	89 10                	mov    %edx,(%eax)
    list->size--;
   12d2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d32:	8b 40 08             	mov    0x8(%eax),%eax
   12d35:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d38:	8b 45 08             	mov    0x8(%ebp),%eax
   12d3b:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12d3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d41:	c9                   	leave  
   12d42:	c3                   	ret    

00012d43 <inb>:
static inline uint8_t inb(uint16_t port) {
   12d43:	55                   	push   %ebp
   12d44:	89 e5                	mov    %esp,%ebp
   12d46:	83 ec 14             	sub    $0x14,%esp
   12d49:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12d50:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d54:	89 c2                	mov    %eax,%edx
   12d56:	ec                   	in     (%dx),%al
   12d57:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12d5a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d5e:	c9                   	leave  
   12d5f:	c3                   	ret    

00012d60 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12d60:	55                   	push   %ebp
   12d61:	89 e5                	mov    %esp,%ebp
   12d63:	83 ec 08             	sub    $0x8,%esp
   12d66:	8b 45 08             	mov    0x8(%ebp),%eax
   12d69:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d6c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12d70:	89 d0                	mov    %edx,%eax
   12d72:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12d75:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d79:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d7d:	ee                   	out    %al,(%dx)
}
   12d7e:	90                   	nop
   12d7f:	c9                   	leave  
   12d80:	c3                   	ret    

00012d81 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12d81:	55                   	push   %ebp
   12d82:	89 e5                	mov    %esp,%ebp
   12d84:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12d87:	6a 00                	push   $0x0
   12d89:	68 f9 03 00 00       	push   $0x3f9
   12d8e:	e8 cd ff ff ff       	call   12d60 <outb>
   12d93:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12d96:	68 80 00 00 00       	push   $0x80
   12d9b:	68 fb 03 00 00       	push   $0x3fb
   12da0:	e8 bb ff ff ff       	call   12d60 <outb>
   12da5:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12da8:	6a 03                	push   $0x3
   12daa:	68 f8 03 00 00       	push   $0x3f8
   12daf:	e8 ac ff ff ff       	call   12d60 <outb>
   12db4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12db7:	6a 00                	push   $0x0
   12db9:	68 f9 03 00 00       	push   $0x3f9
   12dbe:	e8 9d ff ff ff       	call   12d60 <outb>
   12dc3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12dc6:	6a 03                	push   $0x3
   12dc8:	68 fb 03 00 00       	push   $0x3fb
   12dcd:	e8 8e ff ff ff       	call   12d60 <outb>
   12dd2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12dd5:	68 c7 00 00 00       	push   $0xc7
   12dda:	68 fa 03 00 00       	push   $0x3fa
   12ddf:	e8 7c ff ff ff       	call   12d60 <outb>
   12de4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   12de7:	6a 0f                	push   $0xf
   12de9:	68 fc 03 00 00       	push   $0x3fc
   12dee:	e8 6d ff ff ff       	call   12d60 <outb>
   12df3:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   12df6:	83 ec 0c             	sub    $0xc,%esp
   12df9:	68 30 e8 02 00       	push   $0x2e830
   12dfe:	e8 22 ec ff ff       	call   11a25 <mutex_init>
   12e03:	83 c4 10             	add    $0x10,%esp
}
   12e06:	90                   	nop
   12e07:	c9                   	leave  
   12e08:	c3                   	ret    

00012e09 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   12e09:	55                   	push   %ebp
   12e0a:	89 e5                	mov    %esp,%ebp
   12e0c:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12e12:	83 ec 04             	sub    $0x4,%esp
   12e15:	68 80 00 00 00       	push   $0x80
   12e1a:	6a 00                	push   $0x0
   12e1c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e22:	50                   	push   %eax
   12e23:	e8 14 f8 ff ff       	call   1263c <kernel_memset>
   12e28:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12e2b:	8d 45 0c             	lea    0xc(%ebp),%eax
   12e2e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12e34:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12e3a:	83 ec 04             	sub    $0x4,%esp
   12e3d:	50                   	push   %eax
   12e3e:	ff 75 08             	push   0x8(%ebp)
   12e41:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e47:	50                   	push   %eax
   12e48:	e8 d8 f8 ff ff       	call   12725 <kernel_vsprintf>
   12e4d:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12e50:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e56:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12e59:	83 ec 0c             	sub    $0xc,%esp
   12e5c:	68 30 e8 02 00       	push   $0x2e830
   12e61:	e8 0c ec ff ff       	call   11a72 <mutex_lock>
   12e66:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12e69:	eb 57                	jmp    12ec2 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12e6b:	90                   	nop
   12e6c:	83 ec 0c             	sub    $0xc,%esp
   12e6f:	68 fd 03 00 00       	push   $0x3fd
   12e74:	e8 ca fe ff ff       	call   12d43 <inb>
   12e79:	83 c4 10             	add    $0x10,%esp
   12e7c:	0f b6 c0             	movzbl %al,%eax
   12e7f:	83 e0 40             	and    $0x40,%eax
   12e82:	85 c0                	test   %eax,%eax
   12e84:	74 e6                	je     12e6c <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e89:	0f b6 00             	movzbl (%eax),%eax
   12e8c:	3c 0a                	cmp    $0xa,%al
   12e8e:	75 12                	jne    12ea2 <log_printf+0x99>
   12e90:	83 ec 08             	sub    $0x8,%esp
   12e93:	6a 0d                	push   $0xd
   12e95:	68 f8 03 00 00       	push   $0x3f8
   12e9a:	e8 c1 fe ff ff       	call   12d60 <outb>
   12e9f:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ea5:	8d 50 01             	lea    0x1(%eax),%edx
   12ea8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12eab:	0f b6 00             	movzbl (%eax),%eax
   12eae:	0f b6 c0             	movzbl %al,%eax
   12eb1:	83 ec 08             	sub    $0x8,%esp
   12eb4:	50                   	push   %eax
   12eb5:	68 f8 03 00 00       	push   $0x3f8
   12eba:	e8 a1 fe ff ff       	call   12d60 <outb>
   12ebf:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ec5:	0f b6 00             	movzbl (%eax),%eax
   12ec8:	84 c0                	test   %al,%al
   12eca:	75 9f                	jne    12e6b <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12ecc:	83 ec 08             	sub    $0x8,%esp
   12ecf:	6a 0d                	push   $0xd
   12ed1:	68 f8 03 00 00       	push   $0x3f8
   12ed6:	e8 85 fe ff ff       	call   12d60 <outb>
   12edb:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12ede:	83 ec 08             	sub    $0x8,%esp
   12ee1:	6a 0a                	push   $0xa
   12ee3:	68 f8 03 00 00       	push   $0x3f8
   12ee8:	e8 73 fe ff ff       	call   12d60 <outb>
   12eed:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   12ef0:	83 ec 0c             	sub    $0xc,%esp
   12ef3:	68 30 e8 02 00       	push   $0x2e830
   12ef8:	e8 06 ec ff ff       	call   11b03 <mutex_unlock>
   12efd:	83 c4 10             	add    $0x10,%esp
   12f00:	90                   	nop
   12f01:	c9                   	leave  
   12f02:	c3                   	ret    
