
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00007308 memsz 0x00007308 flags r-x
    LOAD off    0x00009000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000090 memsz 0x00027d40 flags rw-
    LOAD off    0x0000a000 vaddr 0x80000000 paddr 0x00040000 align 2**12
         filesz 0x000002ee memsz 0x000002ee flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e58  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000014a8  00015e60  00015e60  00006e60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000090  00018000  00018000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00026d40  00019000  00019000  00009090  2**12
                  ALLOC
  4 .first_task   000002ee  80000000  00040000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000033b6  00000000  00000000  0000a2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000a28  00000000  00000000  0000d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000918e  00000000  00000000  0000e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000281c  00000000  00000000  0001725a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000320  00000000  00000000  00019a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001d91  00000000  00000000  00019d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000007c  00000000  00000000  0001bb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002d  00000000  00000000  0001bba5  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002180  00000000  00000000  0001bbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e4 l     F .text	0000000d down2
000102f1 l     F .text	00000017 up2
00010308 l     F .text	0000000c write_cr3
00010314 l     F .text	0000000b pde_index
0001031f l     F .text	00000010 pte_index
0001032f l     F .text	00000027 pde_to_pt_addr
00010356 l     F .text	00000027 pte_to_pg_addr
0001037d l     F .text	0000000f get_pte_privilege
0001038c l     F .text	00000011 mmu_set_page_dir
00019000 l     O .bss	00007e88 paddr_alloc
00021000 l     O .bss	00001000 kernel_page_dir
0001039d l     F .text	00000025 page_index
000103c2 l     F .text	00000056 page_ref_add
00010418 l     F .text	00000068 page_ref_sub
00010480 l     F .text	0000004e get_page_ref
000104ce l     F .text	00000051 clear_page_ref
0001051f l     F .text	00000087 addr_alloc_init
000105a6 l     F .text	00000067 addr_alloc_page
0001060d l     F .text	0000009c addr_free_page
000106a9 l     F .text	00000066 show_mem_info
0001070f l     F .text	00000037 total_mem_size
00015ffc l     O .rodata	00000011 __func__.4
00018000 l     O .data	00000050 kernal_map.3
00016010 l     O .rodata	0000000c __func__.2
00010e2c l     F .text	00000010 curr_page_dir
0001601c l     O .rodata	00000011 __func__.1
00016030 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
000110f1 l     F .text	0000003d list_node_init
000161f4 l     O .rodata	0000000f __func__.11
0001112e l     F .text	0000002d list_node_next
00016254 l     O .rodata	0000000f __func__.5
0001115b l     F .text	00000047 list_init
00016204 l     O .rodata	0000000a __func__.10
000111a2 l     F .text	00000035 list_is_empty
00016264 l     O .rodata	0000000e __func__.4
000111d7 l     F .text	0000002d list_get_size
00016294 l     O .rodata	0000000e __func__.1
00011204 l     F .text	0000002c list_get_first
00016244 l     O .rodata	0000000f __func__.6
00011230 l     F .text	00000017 up2
00011247 l     F .text	00000007 hlt
0001124e l     F .text	0000000c write_cr3
0001125a l     F .text	0000001a far_jump
00011274 l     F .text	00000017 write_tr
0001128b l     F .text	00000011 mmu_set_page_dir
00022000 l     O .bss	000001b8 task_manager
000221c0 l     O .bss	00006200 task_table
000283c0 l     O .bss	00000014 task_table_lock
0001129c l     F .text	0000001f switch_to_tss
000112d6 l     F .text	00000172 tss_init
000161e8 l     O .rodata	0000000a __func__.12
000283e0 l     O .bss	00000200 empty_task_stack
000115ff l     F .text	0000000a empty_task
00016210 l     O .rodata	00000010 __func__.9
00016220 l     O .rodata	0000000f __func__.8
00016230 l     O .rodata	00000011 __func__.7
00016274 l     O .rodata	0000000f __func__.3
00016284 l     O .rodata	00000010 __func__.2
00011ade l     F .text	00000068 alloc_task
00011b46 l     F .text	00000033 free_task
00011dc2 l     F .text	00000114 load_phdr
00011ed6 l     F .text	00000213 load_elf_file
000120e9 l     F .text	000000f1 copy_args
000162a4 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
000123d0 l     F .text	00000028 lgdt
000285e0 l     O .bss	00010000 gdt_table
000385e0 l     O .bss	00002000 is_alloc
0003a5e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00012606 l     F .text	00000007 cli
0001260d l     F .text	00000007 sti
00012614 l     F .text	00000007 hlt
0001261b l     F .text	0000001d inb
00012638 l     F .text	00000021 outb
00012659 l     F .text	00000028 lidt
00012681 l     F .text	00000011 read_cr2
00012692 l     F .text	00000010 read_eflags
000126a2 l     F .text	0000000b write_eflags
0003a600 l     O .bss	00000800 idt_table
000126ad l     F .text	0000010f print_exception_fram
000127bc l     F .text	0000003e do_default_handler
00012bd2 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00016880 l     O .rodata	000000e8 sys_table
00000000 l    df *ABS*	00000000 console.c
00013067 l     F .text	0000001d inb
00013084 l     F .text	00000021 outb
0003ae00 l     O .bss	000002a0 console_buf
000130a5 l     F .text	00000052 read_cursor_pos
000130f7 l     F .text	00000084 update_cursor_pos
0001317b l     F .text	00000096 erase_rows
00013211 l     F .text	00000094 scroll_up
000132a5 l     F .text	00000010 move_to_col0
000132b5 l     F .text	00000038 move_to_next_line
000132ed l     F .text	00000077 move_forward
00013364 l     F .text	00000095 show_char
000133f9 l     F .text	00000078 move_backword
00013471 l     F .text	0000003a erase_backword
000134ab l     F .text	00000087 clear_display
00013633 l     F .text	000000b8 write_normal
000136eb l     F .text	0000001e save_cursor
00013709 l     F .text	0000001e restore_cursor
00013727 l     F .text	00000029 clear_esc_param
00013750 l     F .text	0000007c write_esc
000137cc l     F .text	0000009a set_font_style
000169a0 l     O .rodata	00000020 color_table.0
00013866 l     F .text	0000004f erase_in_display
000138b5 l     F .text	00000022 move_cursor
000138d7 l     F .text	00000039 move_left
00013910 l     F .text	00000045 move_right
00013955 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00018050 l     O .data	00000008 dev_des_table
0003b0a0 l     O .bss	00000a00 dev_table
00013b2e l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 keyboard.c
00013e28 l     F .text	0000001d inb
000169c0 l     O .rodata	00000200 map_table
0003baa0 l     O .bss	00000004 kbd_state
00013e45 l     F .text	0000001a is_make_code
00013e5f l     F .text	00000015 get_key
00013e74 l     F .text	000001e2 do_normal_key
00014056 l     F .text	0000008e do_e0_key
0003baa4 l     O .bss	00000001 is_inited.1
0003baa8 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
000141fc l     F .text	00000021 outb
0003baac l     O .bss	00000004 sys_tick
00014245 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0003bac0 l     O .bss	00002260 tty_table
000142bf l     F .text	0000004f get_tty
0001430e l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 fs.c
000145ad l     F .text	0000001d inb
000145ca l     F .text	00000021 outb
000145eb l     F .text	0000001f inw
0003dd20 l     O .bss	00000004 temp_pos
0001460a l     F .text	0000013d read_disk
00000000 l    df *ABS*	00000000 init.c
00016dc0 l     O .rodata	0000000c __func__.1
00016dcc l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00014926 l     F .text	00000047 list_init
00016e8c l     O .rodata	0000000a __func__.1
0001496d l     F .text	00000035 list_is_empty
00016e98 l     O .rodata	0000000e __func__.0
00016e80 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00014b38 l     F .text	00000047 list_init
00016f4c l     O .rodata	0000000a __func__.1
00014b7f l     F .text	00000035 list_is_empty
00016f58 l     O .rodata	0000000e __func__.0
00016f40 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00014d0c l     F .text	00000047 list_init
0001706c l     O .rodata	0000000a __func__.3
00014d53 l     F .text	0000002d list_get_size
00017078 l     O .rodata	0000000e __func__.2
00014d80 l     F .text	0000002c list_get_first
00017098 l     O .rodata	0000000f __func__.0
00014dac l     F .text	0000002d list_get_last
00017088 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000150b4 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001716c l     O .rodata	0000000c __func__.3
00017178 l     O .rodata	0000000f __func__.2
00017188 l     O .rodata	0000000f __func__.1
00017198 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001808c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000159e0 l     F .text	00000035 list_is_empty
000172a0 l     O .rodata	0000000e __func__.5
00015a15 l     F .text	0000002d list_get_size
000172d8 l     O .rodata	0000000e __func__.2
0001728c l     O .rodata	00000012 __func__.6
000172b0 l     O .rodata	00000011 __func__.4
000172c4 l     O .rodata	00000012 __func__.3
000172e8 l     O .rodata	00000011 __func__.1
000172fc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0003dd24 l     O .bss	00000014 mutex
0003dd38 l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
0001519b g     F .text	00000078 bitmap_get_bit
0001556e g     F .text	0000004f kernel_memcpy
00014814 g     F .text	0000000a sys_close
00012e1a g     F .text	00000098 idt_enable
000118ba g     F .text	0000000a task_current
8000019b g     F .first_task	0000001b yield
00015acd g     F .text	0000008f list_insert_last
00010298 g       .text	00000000 exception_handler_kbd
00010fcb g     F .text	00000126 sys_sbrk
00011d61 g     F .text	00000061 sys_yield
0001292e g     F .text	0000001c do_handler_segment_not_present
000117f6 g     F .text	0000004b task_set_ready
0001531b g     F .text	00000021 bitmap_is_set
00012f51 g     F .text	0000000b idt_enable_global
000155bd g     F .text	00000041 kernel_memset
00013d0d g     F .text	0000004c dev_write
000147f0 g     F .text	00000024 sys_lseek
000140e4 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012fd8 g     F .text	0000008f do_handler_syscall
0001596d g     F .text	0000002d strings_count
00015d8b g     F .text	0000002f log_init
00011be6 g     F .text	0000017b sys_fork
000148e9 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012fbe g     F .text	0000001a sys_print_msg
00015437 g     F .text	00000047 kernel_strcpy
00012f46 g     F .text	0000000b idt_disable_global
00018000 g       .data	00000000 s_data
80000010 g     F .first_task	0000006b first_main
00012b8f g     F .text	00000043 idt_install
8000016e g     F .first_task	0000002d execve
80000110 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012886 g     F .text	0000001c do_handler_overflow
00012b03 g     F .text	0000001c do_handler_alignment_check
00014780 g     F .text	0000003f sys_read
0001019b g       .text	00000000 exception_handler_general_protection
00012966 g     F .text	000000b1 do_handler_general_protection
00012b73 g     F .text	0000001c do_handler_control_exception
00014ce3 g     F .text	00000029 sem_count
00012816 g     F .text	0000001c do_handler_divider
00015213 g     F .text	00000108 bitmap_set_bit
000128f6 g     F .text	0000001c do_handler_double_fault
00012a17 g     F .text	000000d0 do_handler_page_fault
80000285 g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
00012f5c g     F .text	00000039 pic_send_eoi
00015c0d g     F .text	000000b5 list_remove_last
000117ec g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00014bf6 g     F .text	0000006b sem_wait
00010e0a g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00014828 g     F .text	0000000a sys_fstat
00013cc1 g     F .text	0000004c dev_read
000124b7 g     F .text	000000b3 gdt_init
00012b57 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
000102b5 g       .text	00000000 simple_switch
80000258 g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012832 g     F .text	0000001c do_handler_debug
0003dd40 g     O .bss	00002000 stack
00011b79 g     F .text	00000060 sys_sleep
00010e5c g     F .text	00000099 memory_free_page
00014dd9 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00040000 g       *ABS*	00000000 s_first_task
0001459d g     F .text	0000000a tty_control
00013532 g     F .text	00000101 console_init
000144ef g     F .text	0000000a tty_read
0001157f g     F .text	00000080 task_uninit
00010d52 g     F .text	000000b8 memory_alloc_for_page_dir
000143b9 g     F .text	00000066 tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00012c65 g     F .text	000001b5 idt_init
00014c61 g     F .text	00000082 sem_notify
00010f48 g     F .text	00000083 memory_copy_uvm_data
00013d59 g     F .text	0000004c dev_control
00014132 g     F .text	000000ca do_handler_kbd
000125df g     F .text	00000027 gdt_free
000128be g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00012ae7 g     F .text	0000001c do_handler_fpu_error
000116e6 g     F .text	00000106 task_first_init
00012b1f g     F .text	0000001c do_handler_machine_check
8000020a g     F .first_task	0000002d write
00014747 g     F .text	00000039 sys_open
800002a6 g     F .first_task	00000027 fstat
0001481e g     F .text	0000000a sys_isatty
00015a42 g     F .text	0000008b list_insert_first
00013b82 g     F .text	0000013f dev_open
00011a93 g     F .text	0000004b task_set_wakeup
0001188c g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
8000009a g     F .first_task	0000004c sys_call
00010960 g     F .text	00000085 memory_creat_uvm
0001547e g     F .text	00000051 kernel_strncpy
000147bf g     F .text	00000031 sys_write
000402ee g       *ABS*	00000000 mem_free_start
00014832 g     F .text	00000053 kernel_init
00014bb4 g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
000156a6 g     F .text	0000019d kernel_vsprintf
0001599a g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00013da5 g     F .text	00000083 dev_close
00040000 g       .first_task	00000000 e_data
800001dd g     F .first_task	0000002d read
000149ef g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000144f9 g     F .text	000000a4 tty_write
00012912 g     F .text	0000001c do_handler_invalid_tss
00014345 g     F .text	00000074 tty_fifo_put
00012eb2 g     F .text	00000094 idt_disable
000402ee g       *ABS*	00000000 e_first_task
00011a37 g     F .text	0000005c task_set_sleep
000107f6 g     F .text	000000b6 memory_creat_map
0001284e g     F .text	0000001c do_handler_nmi
0001441f g     F .text	000000d0 tty_open
80000153 g     F .first_task	0000001b fork
000149a2 g     F .text	0000004d mutex_init
800002cd g     F .first_task	00000021 sbrk
00010226 g       .text	00000000 exception_handler_smd_exception
00010b72 g     F .text	000000e7 memory_destroy_uvm
000150f1 g     F .text	00000016 bitmap_byte_count
000128da g     F .text	0000001c do_handler_device_unavailable
00012f95 g     F .text	00000018 idt_enter_protection
000108ac g     F .text	000000b4 create_kernal_table
0001192c g     F .text	0000010b task_slice_end
000109e5 g     F .text	0000018d memory_copy_uvm
000145a7 g     F .text	00000006 tty_close
00014885 g     F .text	00000064 move_to_first_task
00013a59 g     F .text	000000cf console_write
000155fe g     F .text	00000084 kernel_memcmp
00012b3b g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000127fa g     F .text	0000001c do_handler_unknown
00010e3c g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
000112bb g     F .text	0000001b task_switch_from_to
00014a80 g     F .text	000000b8 mutex_unlock
000118c4 g     F .text	00000068 task_switch
8000012b g     F .first_task	00000028 print_msg
00015539 g     F .text	00000035 kernel_strlen
00011841 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000123f8 g     F .text	000000bf segment_desc_set
000128a2 g     F .text	0000001c do_handler_bound_range
000102ca g       .text	00000000 exception_handler_syscall
00015b5c g     F .text	000000b1 list_remove_first
00017308 g       .rodata	00000000 e_text
000154cf g     F .text	0000006a kernel_strncmp
00015107 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
0001533c g     F .text	000000fb bitmap_alloc_nbits
00011609 g     F .text	000000dd task_manager_init
00011448 g     F .text	00000044 task_start
00010c59 g     F .text	000000f9 memory_init
000121da g     F .text	000001af sys_execve
000150bb g     F .text	00000036 pannic
00013b28 g     F .text	00000006 console_close
00010ef5 g     F .text	00000053 memory_get_paddr
0001294a g     F .text	0000001c do_handler_stack_segment_fault
0001286a g     F .text	0000001c do_handler_breakpoint
00015dba g     F .text	0000009e log_printf
0001148c g     F .text	000000f3 task_init
800001b6 g     F .first_task	00000027 open
00015682 g     F .text	00000024 kernel_sprintf
00011bd9 g     F .text	0000000d sys_getpid
0001256a g     F .text	00000075 gdt_alloc_desc
00015843 g     F .text	0000012a kernel_itoa
00015cc2 g     F .text	000000c9 list_remove
00012389 g     F .text	00000047 gate_desc_set
800000e6 g     F .first_task	0000002a msleep
00012fad g     F .text	00000011 idt_leave_protection
80000237 g     F .first_task	00000021 close
00010746 g     F .text	000000b0 find_pte
0001421d g     F .text	00000028 do_handler_time
000142a7 g     F .text	00000018 time_init
00018060 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 27 48 00 00       	call   14832 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 fd 03 00       	mov    $0x3fd40,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 bf 48 00 00       	jmp    148e9 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 bf 27 00 00       	call   127fa <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 be 27 00 00       	call   12816 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 bd 27 00 00       	call   12832 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 bc 27 00 00       	call   1284e <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 bb 27 00 00       	call   1286a <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 ba 27 00 00       	call   12886 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 b9 27 00 00       	call   128a2 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 b8 27 00 00       	call   128be <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 b7 27 00 00       	call   128da <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 b8 27 00 00       	call   128f6 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 b9 27 00 00       	call   12912 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 ba 27 00 00       	call   1292e <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 bb 27 00 00       	call   1294a <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 bc 27 00 00       	call   12966 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 52 28 00 00       	call   12a17 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 05 29 00 00       	call   12ae7 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 06 29 00 00       	call   12b03 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 05 29 00 00       	call   12b1f <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 04 29 00 00       	call   12b3b <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 03 29 00 00       	call   12b57 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 04 29 00 00       	call   12b73 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 91 3f 00 00       	call   1421d <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                 0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 89 3e 00 00       	call   14132 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102b5:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102b9:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102bd:	55                   	push   %ebp
    push %ebx
   102be:	53                   	push   %ebx
    push %esi
   102bf:	56                   	push   %esi
    push %edi
   102c0:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102c1:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102c3:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102c5:	5f                   	pop    %edi
    pop %esi
   102c6:	5e                   	pop    %esi
    pop %ebx
   102c7:	5b                   	pop    %ebx
    pop %ebp
   102c8:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102c9:	c3                   	ret    

000102ca <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ca:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102cb:	1e                   	push   %ds
    push %es
   102cc:	06                   	push   %es
    push %fs
   102cd:	0f a0                	push   %fs
    push %gs
   102cf:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102d1:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102d2:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102d3:	e8 00 2d 00 00       	call   12fd8 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102d8:	5c                   	pop    %esp
    popf
   102d9:	9d                   	popf   
    pop %gs
   102da:	0f a9                	pop    %gs
    pop %fs
   102dc:	0f a1                	pop    %fs
    pop %es
   102de:	07                   	pop    %es
    pop %ds
   102df:	1f                   	pop    %ds
    popa
   102e0:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102e1:	ca 14 00             	lret   $0x14

000102e4 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102e4:	55                   	push   %ebp
   102e5:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ea:	f7 d8                	neg    %eax
   102ec:	23 45 08             	and    0x8(%ebp),%eax
}
   102ef:	5d                   	pop    %ebp
   102f0:	c3                   	ret    

000102f1 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102f1:	55                   	push   %ebp
   102f2:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f4:	8b 55 08             	mov    0x8(%ebp),%edx
   102f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fa:	01 d0                	add    %edx,%eax
   102fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10302:	f7 d8                	neg    %eax
   10304:	21 d0                	and    %edx,%eax
}
   10306:	5d                   	pop    %ebp
   10307:	c3                   	ret    

00010308 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10308:	55                   	push   %ebp
   10309:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1030b:	8b 45 08             	mov    0x8(%ebp),%eax
   1030e:	0f 22 d8             	mov    %eax,%cr3
}
   10311:	90                   	nop
   10312:	5d                   	pop    %ebp
   10313:	c3                   	ret    

00010314 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10314:	55                   	push   %ebp
   10315:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	c1 e8 16             	shr    $0x16,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	c1 e8 0c             	shr    $0xc,%eax
   10328:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032d:	5d                   	pop    %ebp
   1032e:	c3                   	ret    

0001032f <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10339:	c0 ea 04             	shr    $0x4,%dl
   1033c:	0f b6 ca             	movzbl %dl,%ecx
   1033f:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10343:	c1 e2 04             	shl    $0x4,%edx
   10346:	09 ca                	or     %ecx,%edx
   10348:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1034c:	c1 e0 0c             	shl    $0xc,%eax
   1034f:	09 d0                	or     %edx,%eax
   10351:	c1 e0 0c             	shl    $0xc,%eax
}
   10354:	5d                   	pop    %ebp
   10355:	c3                   	ret    

00010356 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10356:	55                   	push   %ebp
   10357:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10360:	c0 ea 04             	shr    $0x4,%dl
   10363:	0f b6 ca             	movzbl %dl,%ecx
   10366:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1036a:	c1 e2 04             	shl    $0x4,%edx
   1036d:	09 ca                	or     %ecx,%edx
   1036f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10373:	c1 e0 0c             	shl    $0xc,%eax
   10376:	09 d0                	or     %edx,%eax
   10378:	c1 e0 0c             	shl    $0xc,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	8b 00                	mov    (%eax),%eax
   10385:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1038f:	ff 75 08             	push   0x8(%ebp)
   10392:	e8 71 ff ff ff       	call   10308 <write_cr3>
   10397:	83 c4 04             	add    $0x4,%esp
}
   1039a:	90                   	nop
   1039b:	c9                   	leave  
   1039c:	c3                   	ret    

0001039d <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   1039d:	55                   	push   %ebp
   1039e:	89 e5                	mov    %esp,%ebp
   103a0:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 50 1c             	mov    0x1c(%eax),%edx
   103a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103aa:	29 d0                	sub    %edx,%eax
   103ac:	89 c1                	mov    %eax,%ecx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	8b 58 24             	mov    0x24(%eax),%ebx
   103b4:	89 c8                	mov    %ecx,%eax
   103b6:	ba 00 00 00 00       	mov    $0x0,%edx
   103bb:	f7 f3                	div    %ebx
}
   103bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c0:	c9                   	leave  
   103c1:	c3                   	ret    

000103c2 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
   103c5:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103c8:	ff 75 0c             	push   0xc(%ebp)
   103cb:	ff 75 08             	push   0x8(%ebp)
   103ce:	e8 ca ff ff ff       	call   1039d <page_index>
   103d3:	83 c4 08             	add    $0x8,%esp
   103d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	83 ec 0c             	sub    $0xc,%esp
   103df:	50                   	push   %eax
   103e0:	e8 0a 46 00 00       	call   149ef <mutex_lock>
   103e5:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103e8:	8b 55 08             	mov    0x8(%ebp),%edx
   103eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ee:	01 d0                	add    %edx,%eax
   103f0:	83 c0 28             	add    $0x28,%eax
   103f3:	0f b6 00             	movzbl (%eax),%eax
   103f6:	8d 50 01             	lea    0x1(%eax),%edx
   103f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ff:	01 c8                	add    %ecx,%eax
   10401:	83 c0 28             	add    $0x28,%eax
   10404:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 6e 46 00 00       	call   14a80 <mutex_unlock>
   10412:	83 c4 10             	add    $0x10,%esp
 }
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1041e:	ff 75 0c             	push   0xc(%ebp)
   10421:	ff 75 08             	push   0x8(%ebp)
   10424:	e8 74 ff ff ff       	call   1039d <page_index>
   10429:	83 c4 08             	add    $0x8,%esp
   1042c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	50                   	push   %eax
   10436:	e8 b4 45 00 00       	call   149ef <mutex_lock>
   1043b:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1043e:	8b 55 08             	mov    0x8(%ebp),%edx
   10441:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10444:	01 d0                	add    %edx,%eax
   10446:	83 c0 28             	add    $0x28,%eax
   10449:	0f b6 00             	movzbl (%eax),%eax
   1044c:	84 c0                	test   %al,%al
   1044e:	74 1e                	je     1046e <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10450:	8b 55 08             	mov    0x8(%ebp),%edx
   10453:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10456:	01 d0                	add    %edx,%eax
   10458:	83 c0 28             	add    $0x28,%eax
   1045b:	0f b6 00             	movzbl (%eax),%eax
   1045e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10461:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10464:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10467:	01 c8                	add    %ecx,%eax
   10469:	83 c0 28             	add    $0x28,%eax
   1046c:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1046e:	8b 45 08             	mov    0x8(%ebp),%eax
   10471:	83 ec 0c             	sub    $0xc,%esp
   10474:	50                   	push   %eax
   10475:	e8 06 46 00 00       	call   14a80 <mutex_unlock>
   1047a:	83 c4 10             	add    $0x10,%esp
 }
   1047d:	90                   	nop
   1047e:	c9                   	leave  
   1047f:	c3                   	ret    

00010480 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10480:	55                   	push   %ebp
   10481:	89 e5                	mov    %esp,%ebp
   10483:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10486:	ff 75 0c             	push   0xc(%ebp)
   10489:	ff 75 08             	push   0x8(%ebp)
   1048c:	e8 0c ff ff ff       	call   1039d <page_index>
   10491:	83 c4 08             	add    $0x8,%esp
   10494:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	83 ec 0c             	sub    $0xc,%esp
   1049d:	50                   	push   %eax
   1049e:	e8 4c 45 00 00       	call   149ef <mutex_lock>
   104a3:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104a6:	8b 55 08             	mov    0x8(%ebp),%edx
   104a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ac:	01 d0                	add    %edx,%eax
   104ae:	83 c0 28             	add    $0x28,%eax
   104b1:	0f b6 00             	movzbl (%eax),%eax
   104b4:	0f b6 c0             	movzbl %al,%eax
   104b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	50                   	push   %eax
   104c1:	e8 ba 45 00 00       	call   14a80 <mutex_unlock>
   104c6:	83 c4 10             	add    $0x10,%esp

  return ref;
   104c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	83 ec 0c             	sub    $0xc,%esp
   104da:	50                   	push   %eax
   104db:	e8 0f 45 00 00       	call   149ef <mutex_lock>
   104e0:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	8b 40 20             	mov    0x20(%eax),%eax
   104e9:	8b 55 08             	mov    0x8(%ebp),%edx
   104ec:	8b 4a 24             	mov    0x24(%edx),%ecx
   104ef:	ba 00 00 00 00       	mov    $0x0,%edx
   104f4:	f7 f1                	div    %ecx
   104f6:	89 c2                	mov    %eax,%edx
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	83 c0 28             	add    $0x28,%eax
   104fe:	83 ec 04             	sub    $0x4,%esp
   10501:	52                   	push   %edx
   10502:	6a 00                	push   $0x0
   10504:	50                   	push   %eax
   10505:	e8 b3 50 00 00       	call   155bd <kernel_memset>
   1050a:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	50                   	push   %eax
   10514:	e8 67 45 00 00       	call   14a80 <mutex_unlock>
   10519:	83 c4 10             	add    $0x10,%esp
}
   1051c:	90                   	nop
   1051d:	c9                   	leave  
   1051e:	c3                   	ret    

0001051f <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1051f:	55                   	push   %ebp
   10520:	89 e5                	mov    %esp,%ebp
   10522:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10525:	8b 45 08             	mov    0x8(%ebp),%eax
   10528:	83 ec 0c             	sub    $0xc,%esp
   1052b:	50                   	push   %eax
   1052c:	e8 71 44 00 00       	call   149a2 <mutex_init>
   10531:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	8b 55 10             	mov    0x10(%ebp),%edx
   1053a:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	8b 55 14             	mov    0x14(%ebp),%edx
   10543:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10546:	8b 45 08             	mov    0x8(%ebp),%eax
   10549:	8b 55 18             	mov    0x18(%ebp),%edx
   1054c:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 20             	mov    0x20(%eax),%eax
   10555:	8b 55 08             	mov    0x8(%ebp),%edx
   10558:	8b 4a 24             	mov    0x24(%edx),%ecx
   1055b:	ba 00 00 00 00       	mov    $0x0,%edx
   10560:	f7 f1                	div    %ecx
   10562:	89 c2                	mov    %eax,%edx
   10564:	8b 45 08             	mov    0x8(%ebp),%eax
   10567:	83 c0 14             	add    $0x14,%eax
   1056a:	6a 00                	push   $0x0
   1056c:	52                   	push   %edx
   1056d:	ff 75 0c             	push   0xc(%ebp)
   10570:	50                   	push   %eax
   10571:	e8 91 4b 00 00       	call   15107 <bitmap_init>
   10576:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10579:	8b 45 08             	mov    0x8(%ebp),%eax
   1057c:	8b 40 20             	mov    0x20(%eax),%eax
   1057f:	8b 55 08             	mov    0x8(%ebp),%edx
   10582:	8b 4a 24             	mov    0x24(%edx),%ecx
   10585:	ba 00 00 00 00       	mov    $0x0,%edx
   1058a:	f7 f1                	div    %ecx
   1058c:	89 c2                	mov    %eax,%edx
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 28             	add    $0x28,%eax
   10594:	83 ec 04             	sub    $0x4,%esp
   10597:	52                   	push   %edx
   10598:	6a 00                	push   $0x0
   1059a:	50                   	push   %eax
   1059b:	e8 1d 50 00 00       	call   155bd <kernel_memset>
   105a0:	83 c4 10             	add    $0x10,%esp
}
   105a3:	90                   	nop
   105a4:	c9                   	leave  
   105a5:	c3                   	ret    

000105a6 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105a6:	55                   	push   %ebp
   105a7:	89 e5                	mov    %esp,%ebp
   105a9:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105b3:	8b 45 08             	mov    0x8(%ebp),%eax
   105b6:	83 ec 0c             	sub    $0xc,%esp
   105b9:	50                   	push   %eax
   105ba:	e8 30 44 00 00       	call   149ef <mutex_lock>
   105bf:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	83 c0 14             	add    $0x14,%eax
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	ff 75 0c             	push   0xc(%ebp)
   105ce:	6a 00                	push   $0x0
   105d0:	50                   	push   %eax
   105d1:	e8 66 4d 00 00       	call   1533c <bitmap_alloc_nbits>
   105d6:	83 c4 10             	add    $0x10,%esp
   105d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105e0:	78 17                	js     105f9 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105e2:	8b 45 08             	mov    0x8(%ebp),%eax
   105e5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	8b 50 24             	mov    0x24(%eax),%edx
   105ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f1:	0f af c2             	imul   %edx,%eax
   105f4:	01 c8                	add    %ecx,%eax
   105f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	83 ec 0c             	sub    $0xc,%esp
   105ff:	50                   	push   %eax
   10600:	e8 7b 44 00 00       	call   14a80 <mutex_unlock>
   10605:	83 c4 10             	add    $0x10,%esp

  return addr;
   10608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1060b:	c9                   	leave  
   1060c:	c3                   	ret    

0001060d <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
   10610:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10613:	8b 45 08             	mov    0x8(%ebp),%eax
   10616:	83 ec 0c             	sub    $0xc,%esp
   10619:	50                   	push   %eax
   1061a:	e8 d0 43 00 00       	call   149ef <mutex_lock>
   1061f:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10622:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10629:	eb 64                	jmp    1068f <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1062b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062e:	c1 e0 0c             	shl    $0xc,%eax
   10631:	89 c2                	mov    %eax,%edx
   10633:	8b 45 0c             	mov    0xc(%ebp),%eax
   10636:	01 d0                	add    %edx,%eax
   10638:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1063b:	83 ec 08             	sub    $0x8,%esp
   1063e:	ff 75 f0             	push   -0x10(%ebp)
   10641:	ff 75 08             	push   0x8(%ebp)
   10644:	e8 cf fd ff ff       	call   10418 <page_ref_sub>
   10649:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1064c:	83 ec 08             	sub    $0x8,%esp
   1064f:	ff 75 f0             	push   -0x10(%ebp)
   10652:	ff 75 08             	push   0x8(%ebp)
   10655:	e8 26 fe ff ff       	call   10480 <get_page_ref>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10660:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10664:	75 25                	jne    1068b <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10666:	83 ec 08             	sub    $0x8,%esp
   10669:	ff 75 f0             	push   -0x10(%ebp)
   1066c:	ff 75 08             	push   0x8(%ebp)
   1066f:	e8 29 fd ff ff       	call   1039d <page_index>
   10674:	83 c4 10             	add    $0x10,%esp
   10677:	8b 55 08             	mov    0x8(%ebp),%edx
   1067a:	83 c2 14             	add    $0x14,%edx
   1067d:	6a 00                	push   $0x0
   1067f:	6a 01                	push   $0x1
   10681:	50                   	push   %eax
   10682:	52                   	push   %edx
   10683:	e8 8b 4b 00 00       	call   15213 <bitmap_set_bit>
   10688:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1068b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1068f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10692:	3b 45 10             	cmp    0x10(%ebp),%eax
   10695:	7c 94                	jl     1062b <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   10697:	8b 45 08             	mov    0x8(%ebp),%eax
   1069a:	83 ec 0c             	sub    $0xc,%esp
   1069d:	50                   	push   %eax
   1069e:	e8 dd 43 00 00       	call   14a80 <mutex_unlock>
   106a3:	83 c4 10             	add    $0x10,%esp
}
   106a6:	90                   	nop
   106a7:	c9                   	leave  
   106a8:	c3                   	ret    

000106a9 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106a9:	55                   	push   %ebp
   106aa:	89 e5                	mov    %esp,%ebp
   106ac:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106af:	83 ec 0c             	sub    $0xc,%esp
   106b2:	68 60 5e 01 00       	push   $0x15e60
   106b7:	e8 fe 56 00 00       	call   15dba <log_printf>
   106bc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106c6:	eb 29                	jmp    106f1 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106ce:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106d2:	8b 45 08             	mov    0x8(%ebp),%eax
   106d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106d8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106db:	52                   	push   %edx
   106dc:	50                   	push   %eax
   106dd:	ff 75 f4             	push   -0xc(%ebp)
   106e0:	68 6d 5e 01 00       	push   $0x15e6d
   106e5:	e8 d0 56 00 00       	call   15dba <log_printf>
   106ea:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f1:	8b 45 08             	mov    0x8(%ebp),%eax
   106f4:	8b 40 50             	mov    0x50(%eax),%eax
   106f7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106fa:	7c cc                	jl     106c8 <show_mem_info+0x1f>
    }

    log_printf("\n");
   106fc:	83 ec 0c             	sub    $0xc,%esp
   106ff:	68 80 5e 01 00       	push   $0x15e80
   10704:	e8 b1 56 00 00       	call   15dba <log_printf>
   10709:	83 c4 10             	add    $0x10,%esp
}
   1070c:	90                   	nop
   1070d:	c9                   	leave  
   1070e:	c3                   	ret    

0001070f <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1070f:	55                   	push   %ebp
   10710:	89 e5                	mov    %esp,%ebp
   10712:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10715:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1071c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10723:	eb 11                	jmp    10736 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10725:	8b 45 08             	mov    0x8(%ebp),%eax
   10728:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1072b:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1072f:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10732:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 40 50             	mov    0x50(%eax),%eax
   1073c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1073f:	7c e4                	jl     10725 <total_mem_size+0x16>
    }

    return mem_size;
   10741:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10744:	c9                   	leave  
   10745:	c3                   	ret    

00010746 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10746:	55                   	push   %ebp
   10747:	89 e5                	mov    %esp,%ebp
   10749:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1074c:	ff 75 0c             	push   0xc(%ebp)
   1074f:	e8 c0 fb ff ff       	call   10314 <pde_index>
   10754:	83 c4 04             	add    $0x4,%esp
   10757:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1075e:	8b 45 08             	mov    0x8(%ebp),%eax
   10761:	01 d0                	add    %edx,%eax
   10763:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	0f b6 00             	movzbl (%eax),%eax
   1076c:	83 e0 01             	and    $0x1,%eax
   1076f:	84 c0                	test   %al,%al
   10771:	74 10                	je     10783 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10773:	ff 75 f0             	push   -0x10(%ebp)
   10776:	e8 b4 fb ff ff       	call   1032f <pde_to_pt_addr>
   1077b:	83 c4 04             	add    $0x4,%esp
   1077e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10781:	eb 57                	jmp    107da <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10783:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10787:	75 07                	jne    10790 <find_pte+0x4a>
      return (pte_t*)0;
   10789:	b8 00 00 00 00       	mov    $0x0,%eax
   1078e:	eb 64                	jmp    107f4 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	6a 01                	push   $0x1
   10795:	68 00 90 01 00       	push   $0x19000
   1079a:	e8 07 fe ff ff       	call   105a6 <addr_alloc_page>
   1079f:	83 c4 10             	add    $0x10,%esp
   107a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107a9:	75 07                	jne    107b2 <find_pte+0x6c>
      return (pte_t*)0;
   107ab:	b8 00 00 00 00       	mov    $0x0,%eax
   107b0:	eb 42                	jmp    107f4 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107b8:	83 ec 04             	sub    $0x4,%esp
   107bb:	68 00 10 00 00       	push   $0x1000
   107c0:	6a 00                	push   $0x0
   107c2:	ff 75 f4             	push   -0xc(%ebp)
   107c5:	e8 f3 4d 00 00       	call   155bd <kernel_memset>
   107ca:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d0:	83 c8 07             	or     $0x7,%eax
   107d3:	89 c2                	mov    %eax,%edx
   107d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d8:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107da:	83 ec 0c             	sub    $0xc,%esp
   107dd:	ff 75 0c             	push   0xc(%ebp)
   107e0:	e8 3a fb ff ff       	call   1031f <pte_index>
   107e5:	83 c4 10             	add    $0x10,%esp
   107e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	01 d0                	add    %edx,%eax

}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10803:	e9 91 00 00 00       	jmp    10899 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10808:	83 ec 04             	sub    $0x4,%esp
   1080b:	6a 01                	push   $0x1
   1080d:	ff 75 0c             	push   0xc(%ebp)
   10810:	ff 75 08             	push   0x8(%ebp)
   10813:	e8 2e ff ff ff       	call   10746 <find_pte>
   10818:	83 c4 10             	add    $0x10,%esp
   1081b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1081e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10822:	75 17                	jne    1083b <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10824:	83 ec 0c             	sub    $0xc,%esp
   10827:	68 82 5e 01 00       	push   $0x15e82
   1082c:	e8 89 55 00 00       	call   15dba <log_printf>
   10831:	83 c4 10             	add    $0x10,%esp
      return -1;
   10834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10839:	eb 6f                	jmp    108aa <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083e:	0f b6 00             	movzbl (%eax),%eax
   10841:	83 e0 01             	and    $0x1,%eax
   10844:	84 c0                	test   %al,%al
   10846:	74 1c                	je     10864 <memory_creat_map+0x6e>
   10848:	68 9d 5e 01 00       	push   $0x15e9d
   1084d:	68 fc 5f 01 00       	push   $0x15ffc
   10852:	68 1d 01 00 00       	push   $0x11d
   10857:	68 b0 5e 01 00       	push   $0x15eb0
   1085c:	e8 5a 48 00 00       	call   150bb <pannic>
   10861:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10864:	8b 45 10             	mov    0x10(%ebp),%eax
   10867:	0b 45 18             	or     0x18(%ebp),%eax
   1086a:	83 c8 01             	or     $0x1,%eax
   1086d:	89 c2                	mov    %eax,%edx
   1086f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10872:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10874:	83 ec 08             	sub    $0x8,%esp
   10877:	ff 75 10             	push   0x10(%ebp)
   1087a:	68 00 90 01 00       	push   $0x19000
   1087f:	e8 3e fb ff ff       	call   103c2 <page_ref_add>
   10884:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10887:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1088e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10895:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10899:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1089f:	0f 8c 63 ff ff ff    	jl     10808 <memory_creat_map+0x12>

  }

  return 1;
   108a5:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108b9:	e9 92 00 00 00       	jmp    10950 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c1:	c1 e0 04             	shl    $0x4,%eax
   108c4:	05 00 80 01 00       	add    $0x18000,%eax
   108c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108cf:	8b 00                	mov    (%eax),%eax
   108d1:	68 00 10 00 00       	push   $0x1000
   108d6:	50                   	push   %eax
   108d7:	e8 08 fa ff ff       	call   102e4 <down2>
   108dc:	83 c4 08             	add    $0x8,%esp
   108df:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108e5:	8b 40 08             	mov    0x8(%eax),%eax
   108e8:	68 00 10 00 00       	push   $0x1000
   108ed:	50                   	push   %eax
   108ee:	e8 f1 f9 ff ff       	call   102e4 <down2>
   108f3:	83 c4 08             	add    $0x8,%esp
   108f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108fc:	8b 40 04             	mov    0x4(%eax),%eax
   108ff:	68 00 10 00 00       	push   $0x1000
   10904:	50                   	push   %eax
   10905:	e8 e7 f9 ff ff       	call   102f1 <up2>
   1090a:	83 c4 08             	add    $0x8,%esp
   1090d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10913:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10916:	c1 e8 0c             	shr    $0xc,%eax
   10919:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   1091c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1091f:	8b 40 0c             	mov    0xc(%eax),%eax
   10922:	83 ec 0c             	sub    $0xc,%esp
   10925:	50                   	push   %eax
   10926:	ff 75 e0             	push   -0x20(%ebp)
   10929:	ff 75 e8             	push   -0x18(%ebp)
   1092c:	ff 75 ec             	push   -0x14(%ebp)
   1092f:	68 00 10 02 00       	push   $0x21000
   10934:	e8 bd fe ff ff       	call   107f6 <memory_creat_map>
   10939:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	68 00 90 01 00       	push   $0x19000
   10944:	e8 85 fb ff ff       	call   104ce <clear_page_ref>
   10949:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1094c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10953:	83 f8 04             	cmp    $0x4,%eax
   10956:	0f 86 62 ff ff ff    	jbe    108be <create_kernal_table+0x12>

  }
}
   1095c:	90                   	nop
   1095d:	90                   	nop
   1095e:	c9                   	leave  
   1095f:	c3                   	ret    

00010960 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	6a 01                	push   $0x1
   1096b:	68 00 90 01 00       	push   $0x19000
   10970:	e8 31 fc ff ff       	call   105a6 <addr_alloc_page>
   10975:	83 c4 10             	add    $0x10,%esp
   10978:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1097b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1097f:	75 07                	jne    10988 <memory_creat_uvm+0x28>
   10981:	b8 00 00 00 00       	mov    $0x0,%eax
   10986:	eb 5b                	jmp    109e3 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10988:	83 ec 04             	sub    $0x4,%esp
   1098b:	68 00 10 00 00       	push   $0x1000
   10990:	6a 00                	push   $0x0
   10992:	ff 75 f0             	push   -0x10(%ebp)
   10995:	e8 23 4c 00 00       	call   155bd <kernel_memset>
   1099a:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1099d:	83 ec 0c             	sub    $0xc,%esp
   109a0:	68 00 00 00 80       	push   $0x80000000
   109a5:	e8 6a f9 ff ff       	call   10314 <pde_index>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109b7:	eb 1f                	jmp    109d8 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109c6:	01 c2                	add    %eax,%edx
   109c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109cb:	8b 04 85 00 10 02 00 	mov    0x21000(,%eax,4),%eax
   109d2:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109db:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109de:	77 d9                	ja     109b9 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109e3:	c9                   	leave  
   109e4:	c3                   	ret    

000109e5 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109e5:	55                   	push   %ebp
   109e6:	89 e5                	mov    %esp,%ebp
   109e8:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109eb:	68 00 00 00 80       	push   $0x80000000
   109f0:	e8 1f f9 ff ff       	call   10314 <pde_index>
   109f5:	83 c4 04             	add    $0x4,%esp
   109f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a08:	01 d0                	add    %edx,%eax
   10a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a13:	e9 2a 01 00 00       	jmp    10b42 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a1b:	0f b6 00             	movzbl (%eax),%eax
   10a1e:	83 e0 01             	and    $0x1,%eax
   10a21:	84 c0                	test   %al,%al
   10a23:	0f 84 10 01 00 00    	je     10b39 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a29:	ff 75 f4             	push   -0xc(%ebp)
   10a2c:	e8 fe f8 ff ff       	call   1032f <pde_to_pt_addr>
   10a31:	83 c4 04             	add    $0x4,%esp
   10a34:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a37:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a3e:	e9 e7 00 00 00       	jmp    10b2a <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a46:	0f b6 00             	movzbl (%eax),%eax
   10a49:	83 e0 01             	and    $0x1,%eax
   10a4c:	84 c0                	test   %al,%al
   10a4e:	0f 84 cd 00 00 00    	je     10b21 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a57:	c1 e0 16             	shl    $0x16,%eax
   10a5a:	89 c2                	mov    %eax,%edx
   10a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a5f:	c1 e0 0c             	shl    $0xc,%eax
   10a62:	09 d0                	or     %edx,%eax
   10a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a6a:	8b 00                	mov    (%eax),%eax
   10a6c:	83 e0 02             	and    $0x2,%eax
   10a6f:	85 c0                	test   %eax,%eax
   10a71:	74 6c                	je     10adf <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a73:	83 ec 08             	sub    $0x8,%esp
   10a76:	6a 01                	push   $0x1
   10a78:	68 00 90 01 00       	push   $0x19000
   10a7d:	e8 24 fb ff ff       	call   105a6 <addr_alloc_page>
   10a82:	83 c4 10             	add    $0x10,%esp
   10a85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a88:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a8c:	0f 84 c4 00 00 00    	je     10b56 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a92:	83 ec 0c             	sub    $0xc,%esp
   10a95:	ff 75 ec             	push   -0x14(%ebp)
   10a98:	e8 e0 f8 ff ff       	call   1037d <get_pte_privilege>
   10a9d:	83 c4 10             	add    $0x10,%esp
   10aa0:	8b 55 08             	mov    0x8(%ebp),%edx
   10aa3:	83 ec 0c             	sub    $0xc,%esp
   10aa6:	50                   	push   %eax
   10aa7:	6a 01                	push   $0x1
   10aa9:	ff 75 d4             	push   -0x2c(%ebp)
   10aac:	ff 75 e0             	push   -0x20(%ebp)
   10aaf:	52                   	push   %edx
   10ab0:	e8 41 fd ff ff       	call   107f6 <memory_creat_map>
   10ab5:	83 c4 20             	add    $0x20,%esp
   10ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10abb:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10abf:	0f 88 94 00 00 00    	js     10b59 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ac5:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ac8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10acb:	83 ec 04             	sub    $0x4,%esp
   10ace:	68 00 10 00 00       	push   $0x1000
   10ad3:	52                   	push   %edx
   10ad4:	50                   	push   %eax
   10ad5:	e8 94 4a 00 00       	call   1556e <kernel_memcpy>
   10ada:	83 c4 10             	add    $0x10,%esp
   10add:	eb 43                	jmp    10b22 <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10adf:	83 ec 0c             	sub    $0xc,%esp
   10ae2:	ff 75 ec             	push   -0x14(%ebp)
   10ae5:	e8 6c f8 ff ff       	call   10356 <pte_to_pg_addr>
   10aea:	83 c4 10             	add    $0x10,%esp
   10aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10af0:	83 ec 0c             	sub    $0xc,%esp
   10af3:	ff 75 ec             	push   -0x14(%ebp)
   10af6:	e8 82 f8 ff ff       	call   1037d <get_pte_privilege>
   10afb:	83 c4 10             	add    $0x10,%esp
   10afe:	8b 55 08             	mov    0x8(%ebp),%edx
   10b01:	83 ec 0c             	sub    $0xc,%esp
   10b04:	50                   	push   %eax
   10b05:	6a 01                	push   $0x1
   10b07:	ff 75 dc             	push   -0x24(%ebp)
   10b0a:	ff 75 e0             	push   -0x20(%ebp)
   10b0d:	52                   	push   %edx
   10b0e:	e8 e3 fc ff ff       	call   107f6 <memory_creat_map>
   10b13:	83 c4 20             	add    $0x20,%esp
   10b16:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b19:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b1d:	78 3d                	js     10b5c <memory_copy_uvm+0x177>
   10b1f:	eb 01                	jmp    10b22 <memory_copy_uvm+0x13d>
        continue;
   10b21:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b22:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b26:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b2a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b31:	0f 8e 0c ff ff ff    	jle    10a43 <memory_copy_uvm+0x5e>
   10b37:	eb 01                	jmp    10b3a <memory_copy_uvm+0x155>
      continue;
   10b39:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b3a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b3e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b42:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b49:	0f 8e c9 fe ff ff    	jle    10a18 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b4f:	b8 01 00 00 00       	mov    $0x1,%eax
   10b54:	eb 1a                	jmp    10b70 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b56:	90                   	nop
   10b57:	eb 04                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b59:	90                   	nop
   10b5a:	eb 01                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b5c:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b5d:	83 ec 0c             	sub    $0xc,%esp
   10b60:	ff 75 08             	push   0x8(%ebp)
   10b63:	e8 0a 00 00 00       	call   10b72 <memory_destroy_uvm>
   10b68:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b70:	c9                   	leave  
   10b71:	c3                   	ret    

00010b72 <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b72:	55                   	push   %ebp
   10b73:	89 e5                	mov    %esp,%ebp
   10b75:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b78:	68 00 00 00 80       	push   $0x80000000
   10b7d:	e8 92 f7 ff ff       	call   10314 <pde_index>
   10b82:	83 c4 04             	add    $0x4,%esp
   10b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b92:	8b 45 08             	mov    0x8(%ebp),%eax
   10b95:	01 d0                	add    %edx,%eax
   10b97:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10ba0:	e9 8f 00 00 00       	jmp    10c34 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ba8:	0f b6 00             	movzbl (%eax),%eax
   10bab:	83 e0 01             	and    $0x1,%eax
   10bae:	84 c0                	test   %al,%al
   10bb0:	74 79                	je     10c2b <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bb2:	ff 75 f4             	push   -0xc(%ebp)
   10bb5:	e8 75 f7 ff ff       	call   1032f <pde_to_pt_addr>
   10bba:	83 c4 04             	add    $0x4,%esp
   10bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bc0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10bc7:	eb 36                	jmp    10bff <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bcc:	0f b6 00             	movzbl (%eax),%eax
   10bcf:	83 e0 01             	and    $0x1,%eax
   10bd2:	84 c0                	test   %al,%al
   10bd4:	74 20                	je     10bf6 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bd6:	ff 75 ec             	push   -0x14(%ebp)
   10bd9:	e8 78 f7 ff ff       	call   10356 <pte_to_pg_addr>
   10bde:	83 c4 04             	add    $0x4,%esp
   10be1:	83 ec 04             	sub    $0x4,%esp
   10be4:	6a 01                	push   $0x1
   10be6:	50                   	push   %eax
   10be7:	68 00 90 01 00       	push   $0x19000
   10bec:	e8 1c fa ff ff       	call   1060d <addr_free_page>
   10bf1:	83 c4 10             	add    $0x10,%esp
   10bf4:	eb 01                	jmp    10bf7 <memory_destroy_uvm+0x85>
        continue;
   10bf6:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bf7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bfb:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10bff:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c06:	7e c1                	jle    10bc9 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c08:	83 ec 0c             	sub    $0xc,%esp
   10c0b:	ff 75 f4             	push   -0xc(%ebp)
   10c0e:	e8 1c f7 ff ff       	call   1032f <pde_to_pt_addr>
   10c13:	83 c4 10             	add    $0x10,%esp
   10c16:	83 ec 04             	sub    $0x4,%esp
   10c19:	6a 01                	push   $0x1
   10c1b:	50                   	push   %eax
   10c1c:	68 00 90 01 00       	push   $0x19000
   10c21:	e8 e7 f9 ff ff       	call   1060d <addr_free_page>
   10c26:	83 c4 10             	add    $0x10,%esp
   10c29:	eb 01                	jmp    10c2c <memory_destroy_uvm+0xba>
        continue;
   10c2b:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c2c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c30:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c34:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c3b:	0f 8e 64 ff ff ff    	jle    10ba5 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c41:	83 ec 04             	sub    $0x4,%esp
   10c44:	6a 01                	push   $0x1
   10c46:	ff 75 08             	push   0x8(%ebp)
   10c49:	68 00 90 01 00       	push   $0x19000
   10c4e:	e8 ba f9 ff ff       	call   1060d <addr_free_page>
   10c53:	83 c4 10             	add    $0x10,%esp
}
   10c56:	90                   	nop
   10c57:	c9                   	leave  
   10c58:	c3                   	ret    

00010c59 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c59:	55                   	push   %ebp
   10c5a:	89 e5                	mov    %esp,%ebp
   10c5c:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c5f:	83 ec 0c             	sub    $0xc,%esp
   10c62:	68 e7 5e 01 00       	push   $0x15ee7
   10c67:	e8 4e 51 00 00       	call   15dba <log_printf>
   10c6c:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c6f:	83 ec 08             	sub    $0x8,%esp
   10c72:	68 ee 02 04 00       	push   $0x402ee
   10c77:	68 f4 5e 01 00       	push   $0x15ef4
   10c7c:	e8 39 51 00 00       	call   15dba <log_printf>
   10c81:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c84:	83 ec 0c             	sub    $0xc,%esp
   10c87:	ff 75 08             	push   0x8(%ebp)
   10c8a:	e8 1a fa ff ff       	call   106a9 <show_mem_info>
   10c8f:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c92:	83 ec 0c             	sub    $0xc,%esp
   10c95:	ff 75 08             	push   0x8(%ebp)
   10c98:	e8 72 fa ff ff       	call   1070f <total_mem_size>
   10c9d:	83 c4 10             	add    $0x10,%esp
   10ca0:	2d 00 00 10 00       	sub    $0x100000,%eax
   10ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	68 00 10 00 00       	push   $0x1000
   10cb0:	ff 75 f4             	push   -0xc(%ebp)
   10cb3:	e8 2c f6 ff ff       	call   102e4 <down2>
   10cb8:	83 c4 10             	add    $0x10,%esp
   10cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cbe:	83 ec 04             	sub    $0x4,%esp
   10cc1:	ff 75 f4             	push   -0xc(%ebp)
   10cc4:	68 00 00 10 00       	push   $0x100000
   10cc9:	68 0c 5f 01 00       	push   $0x15f0c
   10cce:	e8 e7 50 00 00       	call   15dba <log_printf>
   10cd3:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cd6:	c7 45 f0 ee 02 04 00 	movl   $0x402ee,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cdd:	83 ec 0c             	sub    $0xc,%esp
   10ce0:	68 00 10 00 00       	push   $0x1000
   10ce5:	ff 75 f4             	push   -0xc(%ebp)
   10ce8:	68 00 00 10 00       	push   $0x100000
   10ced:	ff 75 f0             	push   -0x10(%ebp)
   10cf0:	68 00 90 01 00       	push   $0x19000
   10cf5:	e8 25 f8 ff ff       	call   1051f <addr_alloc_init>
   10cfa:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10cfd:	a1 20 90 01 00       	mov    0x19020,%eax
   10d02:	c1 e8 0c             	shr    $0xc,%eax
   10d05:	83 ec 0c             	sub    $0xc,%esp
   10d08:	50                   	push   %eax
   10d09:	e8 e3 43 00 00       	call   150f1 <bitmap_byte_count>
   10d0e:	83 c4 10             	add    $0x10,%esp
   10d11:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d14:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d1b:	76 1c                	jbe    10d39 <memory_init+0xe0>
   10d1d:	68 2c 5f 01 00       	push   $0x15f2c
   10d22:	68 10 60 01 00       	push   $0x16010
   10d27:	68 f8 01 00 00       	push   $0x1f8
   10d2c:	68 b0 5e 01 00       	push   $0x15eb0
   10d31:	e8 85 43 00 00       	call   150bb <pannic>
   10d36:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d39:	e8 6e fb ff ff       	call   108ac <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d3e:	b8 00 10 02 00       	mov    $0x21000,%eax
   10d43:	83 ec 0c             	sub    $0xc,%esp
   10d46:	50                   	push   %eax
   10d47:	e8 40 f6 ff ff       	call   1038c <mmu_set_page_dir>
   10d4c:	83 c4 10             	add    $0x10,%esp
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d5e:	68 00 10 00 00       	push   $0x1000
   10d63:	ff 75 10             	push   0x10(%ebp)
   10d66:	e8 86 f5 ff ff       	call   102f1 <up2>
   10d6b:	83 c4 08             	add    $0x8,%esp
   10d6e:	c1 e8 0c             	shr    $0xc,%eax
   10d71:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d7b:	eb 7a                	jmp    10df7 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d7d:	83 ec 08             	sub    $0x8,%esp
   10d80:	6a 01                	push   $0x1
   10d82:	68 00 90 01 00       	push   $0x19000
   10d87:	e8 1a f8 ff ff       	call   105a6 <addr_alloc_page>
   10d8c:	83 c4 10             	add    $0x10,%esp
   10d8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d96:	75 17                	jne    10daf <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10d98:	83 ec 0c             	sub    $0xc,%esp
   10d9b:	68 50 5f 01 00       	push   $0x15f50
   10da0:	e8 15 50 00 00       	call   15dba <log_printf>
   10da5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10da8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dad:	eb 59                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	83 ec 0c             	sub    $0xc,%esp
   10db5:	ff 75 14             	push   0x14(%ebp)
   10db8:	6a 01                	push   $0x1
   10dba:	ff 75 e8             	push   -0x18(%ebp)
   10dbd:	ff 75 f4             	push   -0xc(%ebp)
   10dc0:	50                   	push   %eax
   10dc1:	e8 30 fa ff ff       	call   107f6 <memory_creat_map>
   10dc6:	83 c4 20             	add    $0x20,%esp
   10dc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10dcc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dd0:	79 1a                	jns    10dec <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10dd2:	83 ec 08             	sub    $0x8,%esp
   10dd5:	ff 75 e4             	push   -0x1c(%ebp)
   10dd8:	68 70 5f 01 00       	push   $0x15f70
   10ddd:	e8 d8 4f 00 00       	call   15dba <log_printf>
   10de2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10de5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dea:	eb 1c                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dec:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10df3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10dfd:	0f 8c 7a ff ff ff    	jl     10d7d <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e08:	c9                   	leave  
   10e09:	c3                   	ret    

00010e0a <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e10:	e8 a5 0a 00 00       	call   118ba <task_current>
   10e15:	8b 40 74             	mov    0x74(%eax),%eax
   10e18:	ff 75 10             	push   0x10(%ebp)
   10e1b:	ff 75 0c             	push   0xc(%ebp)
   10e1e:	ff 75 08             	push   0x8(%ebp)
   10e21:	50                   	push   %eax
   10e22:	e8 2b ff ff ff       	call   10d52 <memory_alloc_for_page_dir>
   10e27:	83 c4 10             	add    $0x10,%esp
}
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e32:	e8 83 0a 00 00       	call   118ba <task_current>
   10e37:	8b 40 74             	mov    0x74(%eax),%eax
}
   10e3a:	c9                   	leave  
   10e3b:	c3                   	ret    

00010e3c <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e42:	83 ec 08             	sub    $0x8,%esp
   10e45:	6a 01                	push   $0x1
   10e47:	68 00 90 01 00       	push   $0x19000
   10e4c:	e8 55 f7 ff ff       	call   105a6 <addr_alloc_page>
   10e51:	83 c4 10             	add    $0x10,%esp
   10e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp
   10e5f:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	85 c0                	test   %eax,%eax
   10e67:	78 17                	js     10e80 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e69:	83 ec 04             	sub    $0x4,%esp
   10e6c:	6a 01                	push   $0x1
   10e6e:	ff 75 08             	push   0x8(%ebp)
   10e71:	68 00 90 01 00       	push   $0x19000
   10e76:	e8 92 f7 ff ff       	call   1060d <addr_free_page>
   10e7b:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e7e:	eb 72                	jmp    10ef2 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e80:	e8 a7 ff ff ff       	call   10e2c <curr_page_dir>
   10e85:	83 ec 04             	sub    $0x4,%esp
   10e88:	6a 00                	push   $0x0
   10e8a:	ff 75 08             	push   0x8(%ebp)
   10e8d:	50                   	push   %eax
   10e8e:	e8 b3 f8 ff ff       	call   10746 <find_pte>
   10e93:	83 c4 10             	add    $0x10,%esp
   10e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9d:	74 0d                	je     10eac <memory_free_page+0x50>
   10e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ea2:	0f b6 00             	movzbl (%eax),%eax
   10ea5:	83 e0 01             	and    $0x1,%eax
   10ea8:	84 c0                	test   %al,%al
   10eaa:	75 1c                	jne    10ec8 <memory_free_page+0x6c>
   10eac:	68 90 5f 01 00       	push   $0x15f90
   10eb1:	68 1c 60 01 00       	push   $0x1601c
   10eb6:	68 5a 02 00 00       	push   $0x25a
   10ebb:	68 b0 5e 01 00       	push   $0x15eb0
   10ec0:	e8 f6 41 00 00       	call   150bb <pannic>
   10ec5:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	ff 75 f4             	push   -0xc(%ebp)
   10ece:	e8 83 f4 ff ff       	call   10356 <pte_to_pg_addr>
   10ed3:	83 c4 10             	add    $0x10,%esp
   10ed6:	83 ec 04             	sub    $0x4,%esp
   10ed9:	6a 01                	push   $0x1
   10edb:	50                   	push   %eax
   10edc:	68 00 90 01 00       	push   $0x19000
   10ee1:	e8 27 f7 ff ff       	call   1060d <addr_free_page>
   10ee6:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10efb:	8b 45 08             	mov    0x8(%ebp),%eax
   10efe:	83 ec 04             	sub    $0x4,%esp
   10f01:	6a 00                	push   $0x0
   10f03:	ff 75 0c             	push   0xc(%ebp)
   10f06:	50                   	push   %eax
   10f07:	e8 3a f8 ff ff       	call   10746 <find_pte>
   10f0c:	83 c4 10             	add    $0x10,%esp
   10f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f16:	74 0d                	je     10f25 <memory_get_paddr+0x30>
   10f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f1b:	0f b6 00             	movzbl (%eax),%eax
   10f1e:	83 e0 01             	and    $0x1,%eax
   10f21:	84 c0                	test   %al,%al
   10f23:	75 07                	jne    10f2c <memory_get_paddr+0x37>
    return 0;
   10f25:	b8 00 00 00 00       	mov    $0x0,%eax
   10f2a:	eb 1a                	jmp    10f46 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f2c:	83 ec 0c             	sub    $0xc,%esp
   10f2f:	ff 75 f4             	push   -0xc(%ebp)
   10f32:	e8 1f f4 ff ff       	call   10356 <pte_to_pg_addr>
   10f37:	83 c4 10             	add    $0x10,%esp
   10f3a:	89 c2                	mov    %eax,%edx
   10f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3f:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f44:	09 d0                	or     %edx,%eax

}
   10f46:	c9                   	leave  
   10f47:	c3                   	ret    

00010f48 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f48:	55                   	push   %ebp
   10f49:	89 e5                	mov    %esp,%ebp
   10f4b:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f4e:	eb 6e                	jmp    10fbe <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f50:	83 ec 08             	sub    $0x8,%esp
   10f53:	ff 75 08             	push   0x8(%ebp)
   10f56:	ff 75 0c             	push   0xc(%ebp)
   10f59:	e8 97 ff ff ff       	call   10ef5 <memory_get_paddr>
   10f5e:	83 c4 10             	add    $0x10,%esp
   10f61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f68:	75 07                	jne    10f71 <memory_copy_uvm_data+0x29>
      return -1;
   10f6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f6f:	eb 58                	jmp    10fc9 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f74:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f81:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f87:	8b 45 14             	mov    0x14(%ebp),%eax
   10f8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f8d:	73 06                	jae    10f95 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f8f:	8b 45 14             	mov    0x14(%ebp),%eax
   10f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f98:	8b 55 10             	mov    0x10(%ebp),%edx
   10f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9e:	83 ec 04             	sub    $0x4,%esp
   10fa1:	51                   	push   %ecx
   10fa2:	52                   	push   %edx
   10fa3:	50                   	push   %eax
   10fa4:	e8 c5 45 00 00       	call   1556e <kernel_memcpy>
   10fa9:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10faf:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fb5:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fbb:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fbe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fc2:	75 8c                	jne    10f50 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fc4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fc9:	c9                   	leave  
   10fca:	c3                   	ret    

00010fcb <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fcb:	55                   	push   %ebp
   10fcc:	89 e5                	mov    %esp,%ebp
   10fce:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fd5:	79 1c                	jns    10ff3 <sys_sbrk+0x28>
   10fd7:	68 b1 5f 01 00       	push   $0x15fb1
   10fdc:	68 30 60 01 00       	push   $0x16030
   10fe1:	68 a9 02 00 00       	push   $0x2a9
   10fe6:	68 b0 5e 01 00       	push   $0x15eb0
   10feb:	e8 cb 40 00 00       	call   150bb <pannic>
   10ff0:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   10ff3:	e8 c2 08 00 00       	call   118ba <task_current>
   10ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   10ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffe:	8b 40 10             	mov    0x10(%eax),%eax
   11001:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   1100a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100e:	75 1b                	jne    1102b <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   11010:	83 ec 08             	sub    $0x8,%esp
   11013:	ff 75 ec             	push   -0x14(%ebp)
   11016:	68 bb 5f 01 00       	push   $0x15fbb
   1101b:	e8 9a 4d 00 00       	call   15dba <log_printf>
   11020:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11023:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11026:	e9 c4 00 00 00       	jmp    110ef <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   1102b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102e:	8b 40 10             	mov    0x10(%eax),%eax
   11031:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11034:	8b 55 08             	mov    0x8(%ebp),%edx
   11037:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1103a:	01 d0                	add    %edx,%eax
   1103c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1103f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11042:	25 ff 0f 00 00       	and    $0xfff,%eax
   11047:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   1104a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1104e:	74 3b                	je     1108b <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   11050:	8b 55 08             	mov    0x8(%ebp),%edx
   11053:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11056:	01 d0                	add    %edx,%eax
   11058:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1105d:	77 12                	ja     11071 <sys_sbrk+0xa6>
      task->heap_end = end; 
   1105f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11062:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11065:	89 50 10             	mov    %edx,0x10(%eax)
      incr = 0;
   11068:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1106f:	eb 1a                	jmp    1108b <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   11071:	b8 00 10 00 00       	mov    $0x1000,%eax
   11076:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11079:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   1107c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1107f:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	2b 45 dc             	sub    -0x24(%ebp),%eax
   11088:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   1108b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1108f:	74 3c                	je     110cd <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   11091:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11094:	2b 45 f4             	sub    -0xc(%ebp),%eax
   11097:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   1109a:	83 ec 04             	sub    $0x4,%esp
   1109d:	6a 07                	push   $0x7
   1109f:	ff 75 d8             	push   -0x28(%ebp)
   110a2:	ff 75 f4             	push   -0xc(%ebp)
   110a5:	e8 60 fd ff ff       	call   10e0a <memory_alloc_page_for>
   110aa:	83 c4 10             	add    $0x10,%esp
   110ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110b0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110b4:	79 17                	jns    110cd <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110b6:	83 ec 0c             	sub    $0xc,%esp
   110b9:	68 ce 5f 01 00       	push   $0x15fce
   110be:	e8 f7 4c 00 00       	call   15dba <log_printf>
   110c3:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110cb:	eb 22                	jmp    110ef <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110cd:	83 ec 04             	sub    $0x4,%esp
   110d0:	ff 75 e4             	push   -0x1c(%ebp)
   110d3:	ff 75 e8             	push   -0x18(%ebp)
   110d6:	68 e7 5f 01 00       	push   $0x15fe7
   110db:	e8 da 4c 00 00       	call   15dba <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   110e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   110e9:	89 50 10             	mov    %edx,0x10(%eax)

  return (char*)end;
   110ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110ef:	c9                   	leave  
   110f0:	c3                   	ret    

000110f1 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   110f1:	55                   	push   %ebp
   110f2:	89 e5                	mov    %esp,%ebp
   110f4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   110f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110fb:	75 19                	jne    11116 <list_node_init+0x25>
   110fd:	68 3c 60 01 00       	push   $0x1603c
   11102:	68 f4 61 01 00       	push   $0x161f4
   11107:	6a 20                	push   $0x20
   11109:	68 54 60 01 00       	push   $0x16054
   1110e:	e8 a8 3f 00 00       	call   150bb <pannic>
   11113:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	8b 50 04             	mov    0x4(%eax),%edx
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	89 10                	mov    %edx,(%eax)
}
   1112b:	90                   	nop
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
   11131:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11138:	75 19                	jne    11153 <list_node_next+0x25>
   1113a:	68 3c 60 01 00       	push   $0x1603c
   1113f:	68 54 62 01 00       	push   $0x16254
   11144:	6a 2b                	push   $0x2b
   11146:	68 54 60 01 00       	push   $0x16054
   1114b:	e8 6b 3f 00 00       	call   150bb <pannic>
   11150:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11153:	8b 45 08             	mov    0x8(%ebp),%eax
   11156:	8b 40 04             	mov    0x4(%eax),%eax
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <list_init>:

static inline void list_init(list_t *list) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11165:	75 19                	jne    11180 <list_init+0x25>
   11167:	68 92 60 01 00       	push   $0x16092
   1116c:	68 04 62 01 00       	push   $0x16204
   11171:	6a 31                	push   $0x31
   11173:	68 54 60 01 00       	push   $0x16054
   11178:	e8 3e 3f 00 00       	call   150bb <pannic>
   1117d:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11180:	8b 45 08             	mov    0x8(%ebp),%eax
   11183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	8b 50 04             	mov    0x4(%eax),%edx
   11190:	8b 45 08             	mov    0x8(%ebp),%eax
   11193:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1119f:	90                   	nop
   111a0:	c9                   	leave  
   111a1:	c3                   	ret    

000111a2 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111a2:	55                   	push   %ebp
   111a3:	89 e5                	mov    %esp,%ebp
   111a5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ac:	75 19                	jne    111c7 <list_is_empty+0x25>
   111ae:	68 92 60 01 00       	push   $0x16092
   111b3:	68 64 62 01 00       	push   $0x16264
   111b8:	6a 38                	push   $0x38
   111ba:	68 54 60 01 00       	push   $0x16054
   111bf:	e8 f7 3e 00 00       	call   150bb <pannic>
   111c4:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111c7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ca:	8b 40 08             	mov    0x8(%eax),%eax
   111cd:	85 c0                	test   %eax,%eax
   111cf:	0f 94 c0             	sete   %al
   111d2:	0f b6 c0             	movzbl %al,%eax
}
   111d5:	c9                   	leave  
   111d6:	c3                   	ret    

000111d7 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111d7:	55                   	push   %ebp
   111d8:	89 e5                	mov    %esp,%ebp
   111da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e1:	75 19                	jne    111fc <list_get_size+0x25>
   111e3:	68 92 60 01 00       	push   $0x16092
   111e8:	68 94 62 01 00       	push   $0x16294
   111ed:	6a 3e                	push   $0x3e
   111ef:	68 54 60 01 00       	push   $0x16054
   111f4:	e8 c2 3e 00 00       	call   150bb <pannic>
   111f9:	83 c4 10             	add    $0x10,%esp

    return list->size;
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	8b 40 08             	mov    0x8(%eax),%eax
}
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1120a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1120e:	75 19                	jne    11229 <list_get_first+0x25>
   11210:	68 92 60 01 00       	push   $0x16092
   11215:	68 44 62 01 00       	push   $0x16244
   1121a:	6a 44                	push   $0x44
   1121c:	68 54 60 01 00       	push   $0x16054
   11221:	e8 95 3e 00 00       	call   150bb <pannic>
   11226:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11229:	8b 45 08             	mov    0x8(%ebp),%eax
   1122c:	8b 00                	mov    (%eax),%eax
}
   1122e:	c9                   	leave  
   1122f:	c3                   	ret    

00011230 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11230:	55                   	push   %ebp
   11231:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   11233:	8b 55 08             	mov    0x8(%ebp),%edx
   11236:	8b 45 0c             	mov    0xc(%ebp),%eax
   11239:	01 d0                	add    %edx,%eax
   1123b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1123e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11241:	f7 d8                	neg    %eax
   11243:	21 d0                	and    %edx,%eax
}
   11245:	5d                   	pop    %ebp
   11246:	c3                   	ret    

00011247 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11247:	55                   	push   %ebp
   11248:	89 e5                	mov    %esp,%ebp
   1124a:	f4                   	hlt    
   1124b:	90                   	nop
   1124c:	5d                   	pop    %ebp
   1124d:	c3                   	ret    

0001124e <write_cr3>:
static inline void write_cr3(uint32_t data) {
   1124e:	55                   	push   %ebp
   1124f:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11251:	8b 45 08             	mov    0x8(%ebp),%eax
   11254:	0f 22 d8             	mov    %eax,%cr3
}
   11257:	90                   	nop
   11258:	5d                   	pop    %ebp
   11259:	c3                   	ret    

0001125a <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1125a:	55                   	push   %ebp
   1125b:	89 e5                	mov    %esp,%ebp
   1125d:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11260:	8b 45 0c             	mov    0xc(%ebp),%eax
   11263:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11266:	8b 45 08             	mov    0x8(%ebp),%eax
   11269:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1126c:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1126f:	ff 28                	ljmp   *(%eax)
}
   11271:	90                   	nop
   11272:	c9                   	leave  
   11273:	c3                   	ret    

00011274 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
   11277:	83 ec 04             	sub    $0x4,%esp
   1127a:	8b 45 08             	mov    0x8(%ebp),%eax
   1127d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11281:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11285:	0f 00 d8             	ltr    %ax
}
   11288:	90                   	nop
   11289:	c9                   	leave  
   1128a:	c3                   	ret    

0001128b <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   1128b:	55                   	push   %ebp
   1128c:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1128e:	ff 75 08             	push   0x8(%ebp)
   11291:	e8 b8 ff ff ff       	call   1124e <write_cr3>
   11296:	83 c4 04             	add    $0x4,%esp
}
   11299:	90                   	nop
   1129a:	c9                   	leave  
   1129b:	c3                   	ret    

0001129c <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   1129c:	55                   	push   %ebp
   1129d:	89 e5                	mov    %esp,%ebp
   1129f:	83 ec 04             	sub    $0x4,%esp
   112a2:	8b 45 08             	mov    0x8(%ebp),%eax
   112a5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   112a9:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   112ad:	6a 00                	push   $0x0
   112af:	50                   	push   %eax
   112b0:	e8 a5 ff ff ff       	call   1125a <far_jump>
   112b5:	83 c4 08             	add    $0x8,%esp
}
   112b8:	90                   	nop
   112b9:	c9                   	leave  
   112ba:	c3                   	ret    

000112bb <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   112bb:	55                   	push   %ebp
   112bc:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   112be:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c1:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   112c7:	0f b7 c0             	movzwl %ax,%eax
   112ca:	50                   	push   %eax
   112cb:	e8 cc ff ff ff       	call   1129c <switch_to_tss>
   112d0:	83 c4 04             	add    $0x4,%esp
}
   112d3:	90                   	nop
   112d4:	c9                   	leave  
   112d5:	c3                   	ret    

000112d6 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   112d6:	55                   	push   %ebp
   112d7:	89 e5                	mov    %esp,%ebp
   112d9:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   112dc:	e8 89 12 00 00       	call   1256a <gdt_alloc_desc>
   112e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!\n");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   112e4:	8b 45 08             	mov    0x8(%ebp),%eax
   112e7:	83 c0 58             	add    $0x58,%eax
   112ea:	89 c2                	mov    %eax,%edx
   112ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112ef:	0f b7 c0             	movzwl %ax,%eax
   112f2:	68 89 00 00 00       	push   $0x89
   112f7:	6a 68                	push   $0x68
   112f9:	52                   	push   %edx
   112fa:	50                   	push   %eax
   112fb:	e8 f8 10 00 00       	call   123f8 <segment_desc_set>
   11300:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   11303:	8b 45 08             	mov    0x8(%ebp),%eax
   11306:	83 c0 58             	add    $0x58,%eax
   11309:	83 ec 04             	sub    $0x4,%esp
   1130c:	6a 68                	push   $0x68
   1130e:	6a 00                	push   $0x0
   11310:	50                   	push   %eax
   11311:	e8 a7 42 00 00       	call   155bd <kernel_memset>
   11316:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   11319:	8b 45 08             	mov    0x8(%ebp),%eax
   1131c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1131f:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   11325:	8b 45 14             	mov    0x14(%ebp),%eax
   11328:	83 e0 01             	and    $0x1,%eax
   1132b:	85 c0                	test   %eax,%eax
   1132d:	74 10                	je     1133f <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   1132f:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   11336:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   1133d:	eb 16                	jmp    11355 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   1133f:	a1 b0 21 02 00       	mov    0x221b0,%eax
   11344:	83 c8 03             	or     $0x3,%eax
   11347:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   1134a:	a1 b4 21 02 00       	mov    0x221b4,%eax
   1134f:	83 c8 03             	or     $0x3,%eax
   11352:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   11355:	8b 45 08             	mov    0x8(%ebp),%eax
   11358:	8b 55 0c             	mov    0xc(%ebp),%edx
   1135b:	89 50 78             	mov    %edx,0x78(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   1135e:	8b 45 08             	mov    0x8(%ebp),%eax
   11361:	8b 55 10             	mov    0x10(%ebp),%edx
   11364:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   1136a:	e8 cd fa ff ff       	call   10e3c <memory_alloc_page>
   1136f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   11372:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11376:	0f 84 9b 00 00 00    	je     11417 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   1137c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1137f:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11385:	8b 45 08             	mov    0x8(%ebp),%eax
   11388:	89 50 5c             	mov    %edx,0x5c(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   1138b:	8b 45 08             	mov    0x8(%ebp),%eax
   1138e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11391:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   11397:	8b 45 08             	mov    0x8(%ebp),%eax
   1139a:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   113a1:	8b 45 08             	mov    0x8(%ebp),%eax
   113a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   113a7:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   113ad:	8b 45 08             	mov    0x8(%ebp),%eax
   113b0:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   113b6:	8b 45 08             	mov    0x8(%ebp),%eax
   113b9:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   113bf:	8b 45 08             	mov    0x8(%ebp),%eax
   113c2:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   113c8:	8b 45 08             	mov    0x8(%ebp),%eax
   113cb:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   113d1:	8b 45 08             	mov    0x8(%ebp),%eax
   113d4:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   113da:	8b 45 08             	mov    0x8(%ebp),%eax
   113dd:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   113e3:	8b 45 08             	mov    0x8(%ebp),%eax
   113e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113e9:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   113ef:	8b 45 08             	mov    0x8(%ebp),%eax
   113f2:	c7 40 7c 02 02 00 00 	movl   $0x202,0x7c(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   113f9:	e8 62 f5 ff ff       	call   10960 <memory_creat_uvm>
   113fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   11401:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11405:	74 13                	je     1141a <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   11407:	8b 45 08             	mov    0x8(%ebp),%eax
   1140a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1140d:	89 50 74             	mov    %edx,0x74(%eax)
    
    return 0;
   11410:	b8 00 00 00 00       	mov    $0x0,%eax
   11415:	eb 2f                	jmp    11446 <tss_init+0x170>
        goto tss_init_failed;   
   11417:	90                   	nop
   11418:	eb 01                	jmp    1141b <tss_init+0x145>
        goto tss_init_failed;
   1141a:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   1141b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1141e:	0f b7 c0             	movzwl %ax,%eax
   11421:	83 ec 0c             	sub    $0xc,%esp
   11424:	50                   	push   %eax
   11425:	e8 b5 11 00 00       	call   125df <gdt_free>
   1142a:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   1142d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11431:	74 0e                	je     11441 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   11433:	83 ec 0c             	sub    $0xc,%esp
   11436:	ff 75 e8             	push   -0x18(%ebp)
   11439:	e8 1e fa ff ff       	call   10e5c <memory_free_page>
   1143e:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11441:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11446:	c9                   	leave  
   11447:	c3                   	ret    

00011448 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   11448:	55                   	push   %ebp
   11449:	89 e5                	mov    %esp,%ebp
   1144b:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1144e:	e8 42 1b 00 00       	call   12f95 <idt_enter_protection>
   11453:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   11456:	8b 45 08             	mov    0x8(%ebp),%eax
   11459:	83 c0 48             	add    $0x48,%eax
   1145c:	83 ec 08             	sub    $0x8,%esp
   1145f:	50                   	push   %eax
   11460:	68 10 20 02 00       	push   $0x22010
   11465:	e8 63 46 00 00       	call   15acd <list_insert_last>
   1146a:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   1146d:	83 ec 0c             	sub    $0xc,%esp
   11470:	ff 75 08             	push   0x8(%ebp)
   11473:	e8 7e 03 00 00       	call   117f6 <task_set_ready>
   11478:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   1147b:	83 ec 0c             	sub    $0xc,%esp
   1147e:	ff 75 f4             	push   -0xc(%ebp)
   11481:	e8 27 1b 00 00       	call   12fad <idt_leave_protection>
   11486:	83 c4 10             	add    $0x10,%esp
}
   11489:	90                   	nop
   1148a:	c9                   	leave  
   1148b:	c3                   	ret    

0001148c <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   1148c:	55                   	push   %ebp
   1148d:	89 e5                	mov    %esp,%ebp
   1148f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   11492:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11496:	75 1c                	jne    114b4 <task_init+0x28>
   11498:	68 a5 60 01 00       	push   $0x160a5
   1149d:	68 e8 61 01 00       	push   $0x161e8
   114a2:	68 9f 00 00 00       	push   $0x9f
   114a7:	68 b8 60 01 00       	push   $0x160b8
   114ac:	e8 0a 3c 00 00       	call   150bb <pannic>
   114b1:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   114b4:	ff 75 18             	push   0x18(%ebp)
   114b7:	ff 75 14             	push   0x14(%ebp)
   114ba:	ff 75 10             	push   0x10(%ebp)
   114bd:	ff 75 08             	push   0x8(%ebp)
   114c0:	e8 11 fe ff ff       	call   112d6 <tss_init>
   114c5:	83 c4 10             	add    $0x10,%esp
   114c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   114cb:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   114cf:	75 08                	jne    114d9 <task_init+0x4d>
        return err;
   114d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114d4:	e9 a4 00 00 00       	jmp    1157d <task_init+0xf1>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   114d9:	8b 45 08             	mov    0x8(%ebp),%eax
   114dc:	83 c0 20             	add    $0x20,%eax
   114df:	83 ec 04             	sub    $0x4,%esp
   114e2:	6a 20                	push   $0x20
   114e4:	ff 75 0c             	push   0xc(%ebp)
   114e7:	50                   	push   %eax
   114e8:	e8 91 3f 00 00       	call   1547e <kernel_strncpy>
   114ed:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   114f0:	8b 45 08             	mov    0x8(%ebp),%eax
   114f3:	83 c0 40             	add    $0x40,%eax
   114f6:	83 ec 0c             	sub    $0xc,%esp
   114f9:	50                   	push   %eax
   114fa:	e8 f2 fb ff ff       	call   110f1 <list_node_init>
   114ff:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   11502:	8b 45 08             	mov    0x8(%ebp),%eax
   11505:	83 c0 48             	add    $0x48,%eax
   11508:	83 ec 0c             	sub    $0xc,%esp
   1150b:	50                   	push   %eax
   1150c:	e8 e0 fb ff ff       	call   110f1 <list_node_init>
   11511:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   11514:	8b 45 08             	mov    0x8(%ebp),%eax
   11517:	83 c0 50             	add    $0x50,%eax
   1151a:	83 ec 0c             	sub    $0xc,%esp
   1151d:	50                   	push   %eax
   1151e:	e8 ce fb ff ff       	call   110f1 <list_node_init>
   11523:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   11526:	8b 45 08             	mov    0x8(%ebp),%eax
   11529:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   1152f:	8b 45 08             	mov    0x8(%ebp),%eax
   11532:	c7 40 18 0a 00 00 00 	movl   $0xa,0x18(%eax)
   11539:	8b 45 08             	mov    0x8(%ebp),%eax
   1153c:	8b 50 18             	mov    0x18(%eax),%edx
   1153f:	8b 45 08             	mov    0x8(%ebp),%eax
   11542:	89 50 14             	mov    %edx,0x14(%eax)
    task->sleep = 0;
   11545:	8b 45 08             	mov    0x8(%ebp),%eax
   11548:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    task->pid = (uint32_t)task;
   1154f:	8b 55 08             	mov    0x8(%ebp),%edx
   11552:	8b 45 08             	mov    0x8(%ebp),%eax
   11555:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   11558:	8b 45 08             	mov    0x8(%ebp),%eax
   1155b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->heap_start = task->heap_end = 0;
   11562:	8b 45 08             	mov    0x8(%ebp),%eax
   11565:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   1156c:	8b 45 08             	mov    0x8(%ebp),%eax
   1156f:	8b 50 10             	mov    0x10(%eax),%edx
   11572:	8b 45 08             	mov    0x8(%ebp),%eax
   11575:	89 50 0c             	mov    %edx,0xc(%eax)
   

    return 1;
   11578:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1157d:	c9                   	leave  
   1157e:	c3                   	ret    

0001157f <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   1157f:	55                   	push   %ebp
   11580:	89 e5                	mov    %esp,%ebp
   11582:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   11585:	8b 45 08             	mov    0x8(%ebp),%eax
   11588:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   1158e:	85 c0                	test   %eax,%eax
   11590:	74 18                	je     115aa <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11592:	8b 45 08             	mov    0x8(%ebp),%eax
   11595:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   1159b:	0f b7 c0             	movzwl %ax,%eax
   1159e:	83 ec 0c             	sub    $0xc,%esp
   115a1:	50                   	push   %eax
   115a2:	e8 38 10 00 00       	call   125df <gdt_free>
   115a7:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   115aa:	8b 45 08             	mov    0x8(%ebp),%eax
   115ad:	8b 40 5c             	mov    0x5c(%eax),%eax
   115b0:	85 c0                	test   %eax,%eax
   115b2:	74 17                	je     115cb <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   115b4:	8b 45 08             	mov    0x8(%ebp),%eax
   115b7:	8b 40 5c             	mov    0x5c(%eax),%eax
   115ba:	2d 00 10 00 00       	sub    $0x1000,%eax
   115bf:	83 ec 0c             	sub    $0xc,%esp
   115c2:	50                   	push   %eax
   115c3:	e8 94 f8 ff ff       	call   10e5c <memory_free_page>
   115c8:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   115cb:	8b 45 08             	mov    0x8(%ebp),%eax
   115ce:	8b 40 74             	mov    0x74(%eax),%eax
   115d1:	85 c0                	test   %eax,%eax
   115d3:	74 12                	je     115e7 <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   115d5:	8b 45 08             	mov    0x8(%ebp),%eax
   115d8:	8b 40 74             	mov    0x74(%eax),%eax
   115db:	83 ec 0c             	sub    $0xc,%esp
   115de:	50                   	push   %eax
   115df:	e8 8e f5 ff ff       	call   10b72 <memory_destroy_uvm>
   115e4:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   115e7:	83 ec 04             	sub    $0x4,%esp
   115ea:	68 c4 00 00 00       	push   $0xc4
   115ef:	6a 00                	push   $0x0
   115f1:	ff 75 08             	push   0x8(%ebp)
   115f4:	e8 c4 3f 00 00       	call   155bd <kernel_memset>
   115f9:	83 c4 10             	add    $0x10,%esp
}
   115fc:	90                   	nop
   115fd:	c9                   	leave  
   115fe:	c3                   	ret    

000115ff <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   115ff:	55                   	push   %ebp
   11600:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   11602:	e8 40 fc ff ff       	call   11247 <hlt>
   11607:	eb f9                	jmp    11602 <empty_task+0x3>

00011609 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   11609:	55                   	push   %ebp
   1160a:	89 e5                	mov    %esp,%ebp
   1160c:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   1160f:	e8 56 0f 00 00       	call   1256a <gdt_alloc_desc>
   11614:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   11617:	e8 4e 0f 00 00       	call   1256a <gdt_alloc_desc>
   1161c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   1161f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11622:	0f b7 c0             	movzwl %ax,%eax
   11625:	68 f2 40 00 00       	push   $0x40f2
   1162a:	6a ff                	push   $0xffffffff
   1162c:	6a 00                	push   $0x0
   1162e:	50                   	push   %eax
   1162f:	e8 c4 0d 00 00       	call   123f8 <segment_desc_set>
   11634:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   11637:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1163a:	0f b7 c0             	movzwl %ax,%eax
   1163d:	68 fa 40 00 00       	push   $0x40fa
   11642:	6a ff                	push   $0xffffffff
   11644:	6a 00                	push   $0x0
   11646:	50                   	push   %eax
   11647:	e8 ac 0d 00 00       	call   123f8 <segment_desc_set>
   1164c:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   1164f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11652:	a3 b0 21 02 00       	mov    %eax,0x221b0
    task_manager.app_data_selector = data_selector;
   11657:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1165a:	a3 b4 21 02 00       	mov    %eax,0x221b4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   1165f:	83 ec 0c             	sub    $0xc,%esp
   11662:	68 04 20 02 00       	push   $0x22004
   11667:	e8 ef fa ff ff       	call   1115b <list_init>
   1166c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1166f:	83 ec 0c             	sub    $0xc,%esp
   11672:	68 10 20 02 00       	push   $0x22010
   11677:	e8 df fa ff ff       	call   1115b <list_init>
   1167c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1167f:	83 ec 0c             	sub    $0xc,%esp
   11682:	68 1c 20 02 00       	push   $0x2201c
   11687:	e8 cf fa ff ff       	call   1115b <list_init>
   1168c:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   1168f:	c7 05 00 20 02 00 00 	movl   $0x0,0x22000
   11696:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   11699:	ba e0 85 02 00       	mov    $0x285e0,%edx
   1169e:	b8 ff 15 01 00       	mov    $0x115ff,%eax
   116a3:	83 ec 0c             	sub    $0xc,%esp
   116a6:	6a 01                	push   $0x1
   116a8:	52                   	push   %edx
   116a9:	50                   	push   %eax
   116aa:	68 ed 60 01 00       	push   $0x160ed
   116af:	68 ec 20 02 00       	push   $0x220ec
   116b4:	e8 d3 fd ff ff       	call   1148c <task_init>
   116b9:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   116bc:	83 ec 04             	sub    $0x4,%esp
   116bf:	68 00 62 00 00       	push   $0x6200
   116c4:	6a 00                	push   $0x0
   116c6:	68 c0 21 02 00       	push   $0x221c0
   116cb:	e8 ed 3e 00 00       	call   155bd <kernel_memset>
   116d0:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   116d3:	83 ec 0c             	sub    $0xc,%esp
   116d6:	68 c0 83 02 00       	push   $0x283c0
   116db:	e8 c2 32 00 00       	call   149a2 <mutex_init>
   116e0:	83 c4 10             	add    $0x10,%esp
  
}
   116e3:	90                   	nop
   116e4:	c9                   	leave  
   116e5:	c3                   	ret    

000116e6 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   116e6:	55                   	push   %ebp
   116e7:	89 e5                	mov    %esp,%ebp
   116e9:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task[], e_first_task[];
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);   //进程所需空间大小
   116ec:	b8 ee 02 04 00       	mov    $0x402ee,%eax
   116f1:	2d 00 00 04 00       	sub    $0x40000,%eax
   116f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   116f9:	68 00 10 00 00       	push   $0x1000
   116fe:	ff 75 f4             	push   -0xc(%ebp)
   11701:	e8 2a fb ff ff       	call   11230 <up2>
   11706:	83 c4 08             	add    $0x8,%esp
   11709:	05 00 a0 00 00       	add    $0xa000,%eax
   1170e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11711:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11714:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11717:	72 1c                	jb     11735 <task_first_init+0x4f>
   11719:	68 f8 60 01 00       	push   $0x160f8
   1171e:	68 10 62 01 00       	push   $0x16210
   11723:	68 35 01 00 00       	push   $0x135
   11728:	68 b8 60 01 00       	push   $0x160b8
   1172d:	e8 89 39 00 00       	call   150bb <pannic>
   11732:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   11735:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   1173c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1173f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11742:	01 d0                	add    %edx,%eax
   11744:	83 ec 0c             	sub    $0xc,%esp
   11747:	6a 00                	push   $0x0
   11749:	50                   	push   %eax
   1174a:	ff 75 ec             	push   -0x14(%ebp)
   1174d:	68 0f 61 01 00       	push   $0x1610f
   11752:	68 28 20 02 00       	push   $0x22028
   11757:	e8 30 fd ff ff       	call   1148c <task_init>
   1175c:	83 c4 20             	add    $0x20,%esp
    
    //4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
    task_manager.first_task.heap_start = (uint32_t)e_first_task;    //堆起始地址紧靠程序bss段之后
   1175f:	b8 ee 02 04 00       	mov    $0x402ee,%eax
   11764:	a3 34 20 02 00       	mov    %eax,0x22034
    task_manager.first_task.heap_end = (uint32_t)e_first_task;      //堆大小初始为0
   11769:	b8 ee 02 04 00       	mov    $0x402ee,%eax
   1176e:	a3 38 20 02 00       	mov    %eax,0x22038

    //5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   11773:	a1 e8 20 02 00       	mov    0x220e8,%eax
   11778:	0f b7 c0             	movzwl %ax,%eax
   1177b:	83 ec 0c             	sub    $0xc,%esp
   1177e:	50                   	push   %eax
   1177f:	e8 f0 fa ff ff       	call   11274 <write_tr>
   11784:	83 c4 10             	add    $0x10,%esp

    //6.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   11787:	c7 05 00 20 02 00 28 	movl   $0x22028,0x22000
   1178e:	20 02 00 

    //7.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11791:	a1 9c 20 02 00       	mov    0x2209c,%eax
   11796:	83 ec 0c             	sub    $0xc,%esp
   11799:	50                   	push   %eax
   1179a:	e8 ec fa ff ff       	call   1128b <mmu_set_page_dir>
   1179f:	83 c4 10             	add    $0x10,%esp

    //8.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   117a2:	a1 00 20 02 00       	mov    0x22000,%eax
   117a7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   117ad:	83 ec 04             	sub    $0x4,%esp
   117b0:	6a 07                	push   $0x7
   117b2:	ff 75 f0             	push   -0x10(%ebp)
   117b5:	ff 75 ec             	push   -0x14(%ebp)
   117b8:	e8 4d f6 ff ff       	call   10e0a <memory_alloc_page_for>
   117bd:	83 c4 10             	add    $0x10,%esp

    //10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   117c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117c3:	83 ec 04             	sub    $0x4,%esp
   117c6:	50                   	push   %eax
   117c7:	68 00 00 04 00       	push   $0x40000
   117cc:	68 00 00 00 80       	push   $0x80000000
   117d1:	e8 98 3d 00 00       	call   1556e <kernel_memcpy>
   117d6:	83 c4 10             	add    $0x10,%esp

    //11.将任务设为可被调度
    task_start(&task_manager.first_task);
   117d9:	83 ec 0c             	sub    $0xc,%esp
   117dc:	68 28 20 02 00       	push   $0x22028
   117e1:	e8 62 fc ff ff       	call   11448 <task_start>
   117e6:	83 c4 10             	add    $0x10,%esp
}
   117e9:	90                   	nop
   117ea:	c9                   	leave  
   117eb:	c3                   	ret    

000117ec <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   117ec:	55                   	push   %ebp
   117ed:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   117ef:	b8 28 20 02 00       	mov    $0x22028,%eax
}
   117f4:	5d                   	pop    %ebp
   117f5:	c3                   	ret    

000117f6 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   117f6:	55                   	push   %ebp
   117f7:	89 e5                	mov    %esp,%ebp
   117f9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   117fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11800:	75 1c                	jne    1181e <task_set_ready+0x28>
   11802:	68 a5 60 01 00       	push   $0x160a5
   11807:	68 20 62 01 00       	push   $0x16220
   1180c:	68 66 01 00 00       	push   $0x166
   11811:	68 b8 60 01 00       	push   $0x160b8
   11816:	e8 a0 38 00 00       	call   150bb <pannic>
   1181b:	83 c4 10             	add    $0x10,%esp
    // if (task == (task_t*)0) return;
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   1181e:	8b 45 08             	mov    0x8(%ebp),%eax
   11821:	83 c0 40             	add    $0x40,%eax
   11824:	83 ec 08             	sub    $0x8,%esp
   11827:	50                   	push   %eax
   11828:	68 04 20 02 00       	push   $0x22004
   1182d:	e8 9b 42 00 00       	call   15acd <list_insert_last>
   11832:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   11835:	8b 45 08             	mov    0x8(%ebp),%eax
   11838:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   1183e:	90                   	nop
   1183f:	c9                   	leave  
   11840:	c3                   	ret    

00011841 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11841:	55                   	push   %ebp
   11842:	89 e5                	mov    %esp,%ebp
   11844:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11847:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1184b:	75 1c                	jne    11869 <task_set_unready+0x28>
   1184d:	68 a5 60 01 00       	push   $0x160a5
   11852:	68 30 62 01 00       	push   $0x16230
   11857:	68 76 01 00 00       	push   $0x176
   1185c:	68 b8 60 01 00       	push   $0x160b8
   11861:	e8 55 38 00 00       	call   150bb <pannic>
   11866:	83 c4 10             	add    $0x10,%esp
    // if (task == (task_t*)0) return;
    list_remove(&task_manager.ready_list, &task->ready_node);
   11869:	8b 45 08             	mov    0x8(%ebp),%eax
   1186c:	83 c0 40             	add    $0x40,%eax
   1186f:	83 ec 08             	sub    $0x8,%esp
   11872:	50                   	push   %eax
   11873:	68 04 20 02 00       	push   $0x22004
   11878:	e8 45 44 00 00       	call   15cc2 <list_remove>
   1187d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11880:	8b 45 08             	mov    0x8(%ebp),%eax
   11883:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11889:	90                   	nop
   1188a:	c9                   	leave  
   1188b:	c3                   	ret    

0001188c <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   1188c:	55                   	push   %ebp
   1188d:	89 e5                	mov    %esp,%ebp
   1188f:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11892:	83 ec 0c             	sub    $0xc,%esp
   11895:	68 04 20 02 00       	push   $0x22004
   1189a:	e8 65 f9 ff ff       	call   11204 <list_get_first>
   1189f:	83 c4 10             	add    $0x10,%esp
   118a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   118a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118a9:	74 08                	je     118b3 <task_ready_first+0x27>
   118ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118ae:	83 e8 40             	sub    $0x40,%eax
   118b1:	eb 05                	jmp    118b8 <task_ready_first+0x2c>
   118b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   118b8:	c9                   	leave  
   118b9:	c3                   	ret    

000118ba <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   118ba:	55                   	push   %ebp
   118bb:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   118bd:	a1 00 20 02 00       	mov    0x22000,%eax
}
   118c2:	5d                   	pop    %ebp
   118c3:	c3                   	ret    

000118c4 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   118c4:	55                   	push   %ebp
   118c5:	89 e5                	mov    %esp,%ebp
   118c7:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   118ca:	e8 c6 16 00 00       	call   12f95 <idt_enter_protection>
   118cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   118d2:	e8 b5 ff ff ff       	call   1188c <task_ready_first>
   118d7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   118da:	a1 00 20 02 00       	mov    0x22000,%eax
   118df:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   118e2:	74 37                	je     1191b <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   118e4:	a1 00 20 02 00       	mov    0x22000,%eax
   118e9:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   118ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118f0:	75 07                	jne    118f9 <task_switch+0x35>
            to = &task_manager.empty_task;
   118f2:	c7 45 f4 ec 20 02 00 	movl   $0x220ec,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   118f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118fc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   11902:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11905:	a3 00 20 02 00       	mov    %eax,0x22000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   1190a:	83 ec 08             	sub    $0x8,%esp
   1190d:	ff 75 f4             	push   -0xc(%ebp)
   11910:	ff 75 ec             	push   -0x14(%ebp)
   11913:	e8 a3 f9 ff ff       	call   112bb <task_switch_from_to>
   11918:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   1191b:	83 ec 0c             	sub    $0xc,%esp
   1191e:	ff 75 f0             	push   -0x10(%ebp)
   11921:	e8 87 16 00 00       	call   12fad <idt_leave_protection>
   11926:	83 c4 10             	add    $0x10,%esp
}
   11929:	90                   	nop
   1192a:	c9                   	leave  
   1192b:	c3                   	ret    

0001192c <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   1192c:	55                   	push   %ebp
   1192d:	89 e5                	mov    %esp,%ebp
   1192f:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11932:	83 ec 0c             	sub    $0xc,%esp
   11935:	68 1c 20 02 00       	push   $0x2201c
   1193a:	e8 c5 f8 ff ff       	call   11204 <list_get_first>
   1193f:	83 c4 10             	add    $0x10,%esp
   11942:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   11945:	eb 62                	jmp    119a9 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11947:	83 ec 0c             	sub    $0xc,%esp
   1194a:	ff 75 f4             	push   -0xc(%ebp)
   1194d:	e8 dc f7 ff ff       	call   1112e <list_node_next>
   11952:	83 c4 10             	add    $0x10,%esp
   11955:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   11958:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1195c:	74 08                	je     11966 <task_slice_end+0x3a>
   1195e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11961:	83 e8 40             	sub    $0x40,%eax
   11964:	eb 05                	jmp    1196b <task_slice_end+0x3f>
   11966:	b8 00 00 00 00       	mov    $0x0,%eax
   1196b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   1196e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11971:	8b 40 1c             	mov    0x1c(%eax),%eax
   11974:	8d 50 ff             	lea    -0x1(%eax),%edx
   11977:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1197a:	89 50 1c             	mov    %edx,0x1c(%eax)
   1197d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11980:	8b 40 1c             	mov    0x1c(%eax),%eax
   11983:	85 c0                	test   %eax,%eax
   11985:	75 1c                	jne    119a3 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11987:	83 ec 0c             	sub    $0xc,%esp
   1198a:	ff 75 e8             	push   -0x18(%ebp)
   1198d:	e8 01 01 00 00       	call   11a93 <task_set_wakeup>
   11992:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11995:	83 ec 0c             	sub    $0xc,%esp
   11998:	ff 75 e8             	push   -0x18(%ebp)
   1199b:	e8 56 fe ff ff       	call   117f6 <task_set_ready>
   119a0:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   119a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   119a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119ad:	75 98                	jne    11947 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   119af:	e8 06 ff ff ff       	call   118ba <task_current>
   119b4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   119b7:	81 7d f0 ec 20 02 00 	cmpl   $0x220ec,-0x10(%ebp)
   119be:	75 23                	jne    119e3 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   119c0:	83 ec 0c             	sub    $0xc,%esp
   119c3:	68 04 20 02 00       	push   $0x22004
   119c8:	e8 d5 f7 ff ff       	call   111a2 <list_is_empty>
   119cd:	83 c4 10             	add    $0x10,%esp
   119d0:	85 c0                	test   %eax,%eax
   119d2:	75 60                	jne    11a34 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   119d4:	c7 05 ec 20 02 00 00 	movl   $0x0,0x220ec
   119db:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   119de:	e8 e1 fe ff ff       	call   118c4 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   119e3:	81 7d f0 ec 20 02 00 	cmpl   $0x220ec,-0x10(%ebp)
   119ea:	74 49                	je     11a35 <task_slice_end+0x109>
   119ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119ef:	8b 40 18             	mov    0x18(%eax),%eax
   119f2:	8d 50 ff             	lea    -0x1(%eax),%edx
   119f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119f8:	89 50 18             	mov    %edx,0x18(%eax)
   119fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119fe:	8b 40 18             	mov    0x18(%eax),%eax
   11a01:	85 c0                	test   %eax,%eax
   11a03:	75 30                	jne    11a35 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   11a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a08:	8b 50 14             	mov    0x14(%eax),%edx
   11a0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a0e:	89 50 18             	mov    %edx,0x18(%eax)
        task_set_unready(curr_task);
   11a11:	83 ec 0c             	sub    $0xc,%esp
   11a14:	ff 75 f0             	push   -0x10(%ebp)
   11a17:	e8 25 fe ff ff       	call   11841 <task_set_unready>
   11a1c:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11a1f:	83 ec 0c             	sub    $0xc,%esp
   11a22:	ff 75 f0             	push   -0x10(%ebp)
   11a25:	e8 cc fd ff ff       	call   117f6 <task_set_ready>
   11a2a:	83 c4 10             	add    $0x10,%esp
        task_switch();
   11a2d:	e8 92 fe ff ff       	call   118c4 <task_switch>
   11a32:	eb 01                	jmp    11a35 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   11a34:	90                   	nop
    }
}
   11a35:	c9                   	leave  
   11a36:	c3                   	ret    

00011a37 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11a37:	55                   	push   %ebp
   11a38:	89 e5                	mov    %esp,%ebp
   11a3a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11a3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a41:	75 1c                	jne    11a5f <task_set_sleep+0x28>
   11a43:	68 a5 60 01 00       	push   $0x160a5
   11a48:	68 74 62 01 00       	push   $0x16274
   11a4d:	68 ec 01 00 00       	push   $0x1ec
   11a52:	68 b8 60 01 00       	push   $0x160b8
   11a57:	e8 5f 36 00 00       	call   150bb <pannic>
   11a5c:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   11a5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a63:	74 2b                	je     11a90 <task_set_sleep+0x59>

    task->sleep = slice;
   11a65:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a68:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6b:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->state = TASK_SLEEP;
   11a6e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a71:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11a77:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7a:	83 c0 40             	add    $0x40,%eax
   11a7d:	83 ec 08             	sub    $0x8,%esp
   11a80:	50                   	push   %eax
   11a81:	68 1c 20 02 00       	push   $0x2201c
   11a86:	e8 42 40 00 00       	call   15acd <list_insert_last>
   11a8b:	83 c4 10             	add    $0x10,%esp
   11a8e:	eb 01                	jmp    11a91 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11a90:	90                   	nop
}
   11a91:	c9                   	leave  
   11a92:	c3                   	ret    

00011a93 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11a93:	55                   	push   %ebp
   11a94:	89 e5                	mov    %esp,%ebp
   11a96:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11a99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a9d:	75 1c                	jne    11abb <task_set_wakeup+0x28>
   11a9f:	68 a5 60 01 00       	push   $0x160a5
   11aa4:	68 84 62 01 00       	push   $0x16284
   11aa9:	68 fa 01 00 00       	push   $0x1fa
   11aae:	68 b8 60 01 00       	push   $0x160b8
   11ab3:	e8 03 36 00 00       	call   150bb <pannic>
   11ab8:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11abb:	8b 45 08             	mov    0x8(%ebp),%eax
   11abe:	83 c0 40             	add    $0x40,%eax
   11ac1:	83 ec 08             	sub    $0x8,%esp
   11ac4:	50                   	push   %eax
   11ac5:	68 1c 20 02 00       	push   $0x2201c
   11aca:	e8 f3 41 00 00       	call   15cc2 <list_remove>
   11acf:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11adb:	90                   	nop
   11adc:	c9                   	leave  
   11add:	c3                   	ret    

00011ade <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   11ade:	55                   	push   %ebp
   11adf:	89 e5                	mov    %esp,%ebp
   11ae1:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   11ae4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   11aeb:	83 ec 0c             	sub    $0xc,%esp
   11aee:	68 c0 83 02 00       	push   $0x283c0
   11af3:	e8 f7 2e 00 00       	call   149ef <mutex_lock>
   11af8:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   11afb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11b02:	eb 27                	jmp    11b2b <alloc_task+0x4d>
        task_t *curr = task_table + i;
   11b04:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b07:	69 c0 c4 00 00 00    	imul   $0xc4,%eax,%eax
   11b0d:	05 c0 21 02 00       	add    $0x221c0,%eax
   11b12:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   11b15:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b18:	8b 40 08             	mov    0x8(%eax),%eax
   11b1b:	85 c0                	test   %eax,%eax
   11b1d:	75 08                	jne    11b27 <alloc_task+0x49>
            task = curr;
   11b1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b22:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11b25:	eb 0a                	jmp    11b31 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   11b27:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11b2b:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11b2f:	7e d3                	jle    11b04 <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   11b31:	83 ec 0c             	sub    $0xc,%esp
   11b34:	68 c0 83 02 00       	push   $0x283c0
   11b39:	e8 42 2f 00 00       	call   14a80 <mutex_unlock>
   11b3e:	83 c4 10             	add    $0x10,%esp

    return task;
   11b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11b44:	c9                   	leave  
   11b45:	c3                   	ret    

00011b46 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   11b46:	55                   	push   %ebp
   11b47:	89 e5                	mov    %esp,%ebp
   11b49:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   11b4c:	83 ec 0c             	sub    $0xc,%esp
   11b4f:	68 c0 83 02 00       	push   $0x283c0
   11b54:	e8 96 2e 00 00       	call   149ef <mutex_lock>
   11b59:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   11b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   11b66:	83 ec 0c             	sub    $0xc,%esp
   11b69:	68 c0 83 02 00       	push   $0x283c0
   11b6e:	e8 0d 2f 00 00       	call   14a80 <mutex_unlock>
   11b73:	83 c4 10             	add    $0x10,%esp
}
   11b76:	90                   	nop
   11b77:	c9                   	leave  
   11b78:	c3                   	ret    

00011b79 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11b79:	55                   	push   %ebp
   11b7a:	89 e5                	mov    %esp,%ebp
   11b7c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11b7f:	e8 11 14 00 00       	call   12f95 <idt_enter_protection>
   11b84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11b87:	e8 2e fd ff ff       	call   118ba <task_current>
   11b8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11b8f:	83 ec 0c             	sub    $0xc,%esp
   11b92:	ff 75 f0             	push   -0x10(%ebp)
   11b95:	e8 a7 fc ff ff       	call   11841 <task_set_unready>
   11b9a:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba0:	83 c0 09             	add    $0x9,%eax
   11ba3:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11ba8:	f7 e2                	mul    %edx
   11baa:	89 d0                	mov    %edx,%eax
   11bac:	c1 e8 03             	shr    $0x3,%eax
   11baf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11bb2:	83 ec 08             	sub    $0x8,%esp
   11bb5:	ff 75 ec             	push   -0x14(%ebp)
   11bb8:	ff 75 f0             	push   -0x10(%ebp)
   11bbb:	e8 77 fe ff ff       	call   11a37 <task_set_sleep>
   11bc0:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11bc3:	e8 fc fc ff ff       	call   118c4 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11bc8:	83 ec 0c             	sub    $0xc,%esp
   11bcb:	ff 75 f4             	push   -0xc(%ebp)
   11bce:	e8 da 13 00 00       	call   12fad <idt_leave_protection>
   11bd3:	83 c4 10             	add    $0x10,%esp
}
   11bd6:	90                   	nop
   11bd7:	c9                   	leave  
   11bd8:	c3                   	ret    

00011bd9 <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11bd9:	55                   	push   %ebp
   11bda:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11bdc:	e8 d9 fc ff ff       	call   118ba <task_current>
   11be1:	8b 40 08             	mov    0x8(%eax),%eax
}
   11be4:	5d                   	pop    %ebp
   11be5:	c3                   	ret    

00011be6 <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11be6:	55                   	push   %ebp
   11be7:	89 e5                	mov    %esp,%ebp
   11be9:	83 ec 28             	sub    $0x28,%esp

    //1.获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   11bec:	e8 c9 fc ff ff       	call   118ba <task_current>
   11bf1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.分配子进程控制块
    task_t *child_task = alloc_task();
   11bf4:	e8 e5 fe ff ff       	call   11ade <alloc_task>
   11bf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   11bfc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c00:	0f 84 2b 01 00 00    	je     11d31 <sys_fork+0x14b>
        goto fork_failed;

    //3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c09:	8b 40 5c             	mov    0x5c(%eax),%eax
   11c0c:	83 e8 58             	sub    $0x58,%eax
   11c0f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   11c12:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c15:	8b 40 50             	mov    0x50(%eax),%eax
   11c18:	8d 48 14             	lea    0x14(%eax),%ecx
   11c1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c1e:	8b 40 34             	mov    0x34(%eax),%eax
   11c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11c24:	83 c2 20             	add    $0x20,%edx
   11c27:	83 ec 0c             	sub    $0xc,%esp
   11c2a:	6a 00                	push   $0x0
   11c2c:	51                   	push   %ecx
   11c2d:	50                   	push   %eax
   11c2e:	52                   	push   %edx
   11c2f:	ff 75 f0             	push   -0x10(%ebp)
   11c32:	e8 55 f8 ff ff       	call   1148c <task_init>
   11c37:	83 c4 20             	add    $0x20,%esp
   11c3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11c3d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11c41:	0f 88 ed 00 00 00    	js     11d34 <sys_fork+0x14e>
        goto fork_failed;

    //5.恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11c47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c4a:	83 c0 58             	add    $0x58,%eax
   11c4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11c50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c53:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11c5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c5d:	8b 50 24             	mov    0x24(%eax),%edx
   11c60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c63:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c69:	8b 50 2c             	mov    0x2c(%eax),%edx
   11c6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c6f:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11c72:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c75:	8b 50 28             	mov    0x28(%eax),%edx
   11c78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c7b:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c81:	8b 50 14             	mov    0x14(%eax),%edx
   11c84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c87:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c8d:	8b 50 18             	mov    0x18(%eax),%edx
   11c90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c93:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11c96:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c99:	8b 10                	mov    (%eax),%edx
   11c9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c9e:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11ca1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ca4:	8b 50 1c             	mov    0x1c(%eax),%edx
   11ca7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11caa:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11cad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cb0:	8b 50 38             	mov    0x38(%eax),%edx
   11cb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cb6:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cbc:	8b 50 10             	mov    0x10(%eax),%edx
   11cbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cc2:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11cc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cc8:	8b 50 0c             	mov    0xc(%eax),%edx
   11ccb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cce:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11cd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cd4:	8b 50 08             	mov    0x8(%eax),%edx
   11cd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cda:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11cdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ce0:	8b 50 04             	mov    0x4(%eax),%edx
   11ce3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ce6:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   11ce9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cec:	8b 50 54             	mov    0x54(%eax),%edx
   11cef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cf2:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   11cf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfb:	89 50 04             	mov    %edx,0x4(%eax)

    //7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d01:	8b 50 74             	mov    0x74(%eax),%edx
   11d04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d07:	8b 40 1c             	mov    0x1c(%eax),%eax
   11d0a:	83 ec 08             	sub    $0x8,%esp
   11d0d:	52                   	push   %edx
   11d0e:	50                   	push   %eax
   11d0f:	e8 d1 ec ff ff       	call   109e5 <memory_copy_uvm>
   11d14:	83 c4 10             	add    $0x10,%esp
   11d17:	85 c0                	test   %eax,%eax
   11d19:	78 1c                	js     11d37 <sys_fork+0x151>
        goto fork_failed;

    //8.子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   11d1b:	83 ec 0c             	sub    $0xc,%esp
   11d1e:	ff 75 f0             	push   -0x10(%ebp)
   11d21:	e8 22 f7 ff ff       	call   11448 <task_start>
   11d26:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   11d29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d2c:	8b 40 08             	mov    0x8(%eax),%eax
   11d2f:	eb 2e                	jmp    11d5f <sys_fork+0x179>
        goto fork_failed;
   11d31:	90                   	nop
   11d32:	eb 04                	jmp    11d38 <sys_fork+0x152>
        goto fork_failed;
   11d34:	90                   	nop
   11d35:	eb 01                	jmp    11d38 <sys_fork+0x152>
        goto fork_failed;
   11d37:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   11d38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d3c:	74 1c                	je     11d5a <sys_fork+0x174>
        task_uninit(child_task);
   11d3e:	83 ec 0c             	sub    $0xc,%esp
   11d41:	ff 75 f0             	push   -0x10(%ebp)
   11d44:	e8 36 f8 ff ff       	call   1157f <task_uninit>
   11d49:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11d4c:	83 ec 0c             	sub    $0xc,%esp
   11d4f:	ff 75 f0             	push   -0x10(%ebp)
   11d52:	e8 ef fd ff ff       	call   11b46 <free_task>
   11d57:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   11d5a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11d5f:	c9                   	leave  
   11d60:	c3                   	ret    

00011d61 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11d61:	55                   	push   %ebp
   11d62:	89 e5                	mov    %esp,%ebp
   11d64:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11d67:	e8 29 12 00 00       	call   12f95 <idt_enter_protection>
   11d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11d6f:	83 ec 0c             	sub    $0xc,%esp
   11d72:	68 04 20 02 00       	push   $0x22004
   11d77:	e8 5b f4 ff ff       	call   111d7 <list_get_size>
   11d7c:	83 c4 10             	add    $0x10,%esp
   11d7f:	83 f8 01             	cmp    $0x1,%eax
   11d82:	7e 29                	jle    11dad <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11d84:	e8 31 fb ff ff       	call   118ba <task_current>
   11d89:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   11d8c:	83 ec 0c             	sub    $0xc,%esp
   11d8f:	ff 75 f0             	push   -0x10(%ebp)
   11d92:	e8 aa fa ff ff       	call   11841 <task_set_unready>
   11d97:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   11d9a:	83 ec 0c             	sub    $0xc,%esp
   11d9d:	ff 75 f0             	push   -0x10(%ebp)
   11da0:	e8 51 fa ff ff       	call   117f6 <task_set_ready>
   11da5:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11da8:	e8 17 fb ff ff       	call   118c4 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11dad:	83 ec 0c             	sub    $0xc,%esp
   11db0:	ff 75 f4             	push   -0xc(%ebp)
   11db3:	e8 f5 11 00 00       	call   12fad <idt_leave_protection>
   11db8:	83 c4 10             	add    $0x10,%esp
    return 0;
   11dbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11dc0:	c9                   	leave  
   11dc1:	c3                   	ret    

00011dc2 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int 
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11dc2:	55                   	push   %ebp
   11dc3:	89 e5                	mov    %esp,%ebp
   11dc5:	83 ec 28             	sub    $0x28,%esp
    //获取该段的权限
    uint32_t privilege = PTE_P | PTE_U;
   11dc8:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
    if (elf_phdr->p_flags & PT_W) { //该段具有写权限
   11dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dd2:	8b 40 18             	mov    0x18(%eax),%eax
   11dd5:	83 e0 02             	and    $0x2,%eax
   11dd8:	85 c0                	test   %eax,%eax
   11dda:	74 04                	je     11de0 <load_phdr+0x1e>
        privilege |= PTE_W;
   11ddc:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
    }

    //为该段分配页空间并创建映射关系
    int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr, elf_phdr->p_memsz, privilege);
   11de0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11de3:	8b 50 14             	mov    0x14(%eax),%edx
   11de6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11de9:	8b 40 08             	mov    0x8(%eax),%eax
   11dec:	ff 75 f4             	push   -0xc(%ebp)
   11def:	52                   	push   %edx
   11df0:	50                   	push   %eax
   11df1:	ff 75 10             	push   0x10(%ebp)
   11df4:	e8 59 ef ff ff       	call   10d52 <memory_alloc_for_page_dir>
   11df9:	83 c4 10             	add    $0x10,%esp
   11dfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11dff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11e03:	79 1a                	jns    11e1f <load_phdr+0x5d>
        log_printf("no memory\n");
   11e05:	83 ec 0c             	sub    $0xc,%esp
   11e08:	68 1a 61 01 00       	push   $0x1611a
   11e0d:	e8 a8 3f 00 00       	call   15dba <log_printf>
   11e12:	83 c4 10             	add    $0x10,%esp
        return -1;
   11e15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e1a:	e9 b5 00 00 00       	jmp    11ed4 <load_phdr+0x112>
    }

    //使文件的读取位置偏移到该程序段的起始位置
    if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e22:	8b 40 04             	mov    0x4(%eax),%eax
   11e25:	83 ec 04             	sub    $0x4,%esp
   11e28:	6a 00                	push   $0x0
   11e2a:	50                   	push   %eax
   11e2b:	ff 75 08             	push   0x8(%ebp)
   11e2e:	e8 bd 29 00 00       	call   147f0 <sys_lseek>
   11e33:	83 c4 10             	add    $0x10,%esp
   11e36:	85 c0                	test   %eax,%eax
   11e38:	79 1a                	jns    11e54 <load_phdr+0x92>
        log_printf("lseek file failed\n");
   11e3a:	83 ec 0c             	sub    $0xc,%esp
   11e3d:	68 25 61 01 00       	push   $0x16125
   11e42:	e8 73 3f 00 00       	call   15dba <log_printf>
   11e47:	83 c4 10             	add    $0x10,%esp
        return -1;
   11e4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e4f:	e9 80 00 00 00       	jmp    11ed4 <load_phdr+0x112>
    }

    //获取该程序段的起始虚拟地址和段在文件中的大小
    uint32_t vaddr = elf_phdr->p_vaddr;
   11e54:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e57:	8b 40 08             	mov    0x8(%eax),%eax
   11e5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = elf_phdr->p_filesz;
   11e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e60:	8b 40 10             	mov    0x10(%eax),%eax
   11e63:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (size > 0) {  //按页读取并拷贝
   11e66:	eb 61                	jmp    11ec9 <load_phdr+0x107>
        //获取需要拷贝的空间大小
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e6b:	ba 00 10 00 00       	mov    $0x1000,%edx
   11e70:	39 d0                	cmp    %edx,%eax
   11e72:	0f 47 c2             	cmova  %edx,%eax
   11e75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //获取vaddr在page_dir中关联的物理页的物理地址
        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11e78:	83 ec 08             	sub    $0x8,%esp
   11e7b:	ff 75 f0             	push   -0x10(%ebp)
   11e7e:	ff 75 10             	push   0x10(%ebp)
   11e81:	e8 6f f0 ff ff       	call   10ef5 <memory_get_paddr>
   11e86:	83 c4 10             	add    $0x10,%esp
   11e89:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //拷贝curr_size大小的内容到paddr对应的页中
        if (sys_read(file, (char*)paddr, curr_size) < curr_size) {
   11e8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11e8f:	83 ec 04             	sub    $0x4,%esp
   11e92:	ff 75 e4             	push   -0x1c(%ebp)
   11e95:	50                   	push   %eax
   11e96:	ff 75 08             	push   0x8(%ebp)
   11e99:	e8 e2 28 00 00       	call   14780 <sys_read>
   11e9e:	83 c4 10             	add    $0x10,%esp
   11ea1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11ea4:	7e 17                	jle    11ebd <load_phdr+0xfb>
            log_printf("read file failed\n");
   11ea6:	83 ec 0c             	sub    $0xc,%esp
   11ea9:	68 38 61 01 00       	push   $0x16138
   11eae:	e8 07 3f 00 00       	call   15dba <log_printf>
   11eb3:	83 c4 10             	add    $0x10,%esp
            return -1;
   11eb6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ebb:	eb 17                	jmp    11ed4 <load_phdr+0x112>
        }

        size -= curr_size;
   11ebd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ec0:	29 45 ec             	sub    %eax,-0x14(%ebp)
        vaddr += curr_size;
   11ec3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ec6:	01 45 f0             	add    %eax,-0x10(%ebp)
    while (size > 0) {  //按页读取并拷贝
   11ec9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ecd:	75 99                	jne    11e68 <load_phdr+0xa6>
    }

    return 0;
   11ecf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ed4:	c9                   	leave  
   11ed5:	c3                   	ret    

00011ed6 <load_elf_file>:
 * @param task 
 * @param name 
 * @param page_dir 
 * @return uint32_t 
 */
static uint32_t load_elf_file(task_t *task, const char * name, uint32_t page_dir) {
   11ed6:	55                   	push   %ebp
   11ed7:	89 e5                	mov    %esp,%ebp
   11ed9:	83 ec 78             	sub    $0x78,%esp
    //1.定义elf文件头对象,和程序段表项对象
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    //2.打开文件
    int file = sys_open(name, 0);
   11edc:	83 ec 08             	sub    $0x8,%esp
   11edf:	6a 00                	push   $0x0
   11ee1:	ff 75 0c             	push   0xc(%ebp)
   11ee4:	e8 5e 28 00 00       	call   14747 <sys_open>
   11ee9:	83 c4 10             	add    $0x10,%esp
   11eec:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11eef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ef3:	79 18                	jns    11f0d <load_elf_file+0x37>
        log_printf("open failed %s\n", name);
   11ef5:	83 ec 08             	sub    $0x8,%esp
   11ef8:	ff 75 0c             	push   0xc(%ebp)
   11efb:	68 4a 61 01 00       	push   $0x1614a
   11f00:	e8 b5 3e 00 00       	call   15dba <log_printf>
   11f05:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11f08:	e9 c1 01 00 00       	jmp    120ce <load_elf_file+0x1f8>
    }

    //3.读取elf文件的elf头部分
    int cnt = sys_read(file, (char*)&elf_hdr, sizeof(Elf32_Ehdr));
   11f0d:	83 ec 04             	sub    $0x4,%esp
   11f10:	6a 34                	push   $0x34
   11f12:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11f15:	50                   	push   %eax
   11f16:	ff 75 ec             	push   -0x14(%ebp)
   11f19:	e8 62 28 00 00       	call   14780 <sys_read>
   11f1e:	83 c4 10             	add    $0x10,%esp
   11f21:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11f24:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11f27:	83 f8 33             	cmp    $0x33,%eax
   11f2a:	77 18                	ja     11f44 <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d\n", cnt);
   11f2c:	83 ec 08             	sub    $0x8,%esp
   11f2f:	ff 75 e8             	push   -0x18(%ebp)
   11f32:	68 5a 61 01 00       	push   $0x1615a
   11f37:	e8 7e 3e 00 00       	call   15dba <log_printf>
   11f3c:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11f3f:	e9 8a 01 00 00       	jmp    120ce <load_elf_file+0x1f8>
    }

    //4.判断是否为ELF文件
    if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' 
   11f44:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11f48:	3c 7f                	cmp    $0x7f,%al
   11f4a:	75 18                	jne    11f64 <load_elf_file+0x8e>
   11f4c:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11f50:	3c 45                	cmp    $0x45,%al
   11f52:	75 10                	jne    11f64 <load_elf_file+0x8e>
        || elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   11f54:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11f58:	3c 4c                	cmp    $0x4c,%al
   11f5a:	75 08                	jne    11f64 <load_elf_file+0x8e>
   11f5c:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11f60:	3c 46                	cmp    $0x46,%al
   11f62:	74 15                	je     11f79 <load_elf_file+0xa3>
            log_printf("check elf ident failed.\n");
   11f64:	83 ec 0c             	sub    $0xc,%esp
   11f67:	68 76 61 01 00       	push   $0x16176
   11f6c:	e8 49 3e 00 00       	call   15dba <log_printf>
   11f71:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f74:	e9 55 01 00 00       	jmp    120ce <load_elf_file+0x1f8>
    }

    
    //5.必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) || (elf_hdr.e_entry == 0)) {
   11f79:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11f7d:	66 83 f8 02          	cmp    $0x2,%ax
   11f81:	75 11                	jne    11f94 <load_elf_file+0xbe>
   11f83:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11f87:	66 83 f8 03          	cmp    $0x3,%ax
   11f8b:	75 07                	jne    11f94 <load_elf_file+0xbe>
   11f8d:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f90:	85 c0                	test   %eax,%eax
   11f92:	75 15                	jne    11fa9 <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.\n");
   11f94:	83 ec 0c             	sub    $0xc,%esp
   11f97:	68 90 61 01 00       	push   $0x16190
   11f9c:	e8 19 3e 00 00       	call   15dba <log_printf>
   11fa1:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11fa4:	e9 25 01 00 00       	jmp    120ce <load_elf_file+0x1f8>
    }

    //6.必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11fa9:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11fad:	66 85 c0             	test   %ax,%ax
   11fb0:	74 07                	je     11fb9 <load_elf_file+0xe3>
   11fb2:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11fb5:	85 c0                	test   %eax,%eax
   11fb7:	75 15                	jne    11fce <load_elf_file+0xf8>
        log_printf("none programe header\n");
   11fb9:	83 ec 0c             	sub    $0xc,%esp
   11fbc:	68 b1 61 01 00       	push   $0x161b1
   11fc1:	e8 f4 3d 00 00       	call   15dba <log_printf>
   11fc6:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11fc9:	e9 00 01 00 00       	jmp    120ce <load_elf_file+0x1f8>
    }

    //7.遍历elf文件的程序段，加载可加载段到内存中对应位置
    uint32_t e_phoff = elf_hdr.e_phoff; //获取程序段表的偏移地址
   11fce:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11fd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   11fd4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fdb:	e9 cb 00 00 00       	jmp    120ab <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fe3:	83 ec 04             	sub    $0x4,%esp
   11fe6:	6a 00                	push   $0x0
   11fe8:	50                   	push   %eax
   11fe9:	ff 75 ec             	push   -0x14(%ebp)
   11fec:	e8 ff 27 00 00       	call   147f0 <sys_lseek>
   11ff1:	83 c4 10             	add    $0x10,%esp
   11ff4:	85 c0                	test   %eax,%eax
   11ff6:	79 15                	jns    1200d <load_elf_file+0x137>
            log_printf("read file failed\n");
   11ff8:	83 ec 0c             	sub    $0xc,%esp
   11ffb:	68 38 61 01 00       	push   $0x16138
   12000:	e8 b5 3d 00 00       	call   15dba <log_printf>
   12005:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   12008:	e9 c1 00 00 00       	jmp    120ce <load_elf_file+0x1f8>
        }

        cnt = sys_read(file, (char*)&elf_phdr, sizeof(Elf32_Phdr));
   1200d:	83 ec 04             	sub    $0x4,%esp
   12010:	6a 20                	push   $0x20
   12012:	8d 45 90             	lea    -0x70(%ebp),%eax
   12015:	50                   	push   %eax
   12016:	ff 75 ec             	push   -0x14(%ebp)
   12019:	e8 62 27 00 00       	call   14780 <sys_read>
   1201e:	83 c4 10             	add    $0x10,%esp
   12021:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   12024:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12027:	83 f8 1f             	cmp    $0x1f,%eax
   1202a:	77 15                	ja     12041 <load_elf_file+0x16b>
            log_printf("read file failed\n");
   1202c:	83 ec 0c             	sub    $0xc,%esp
   1202f:	68 38 61 01 00       	push   $0x16138
   12034:	e8 81 3d 00 00       	call   15dba <log_printf>
   12039:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   1203c:	e9 8d 00 00 00       	jmp    120ce <load_elf_file+0x1f8>
        }

        //若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
        if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   12041:	8b 45 90             	mov    -0x70(%ebp),%eax
   12044:	83 f8 01             	cmp    $0x1,%eax
   12047:	75 53                	jne    1209c <load_elf_file+0x1c6>
   12049:	8b 45 98             	mov    -0x68(%ebp),%eax
   1204c:	85 c0                	test   %eax,%eax
   1204e:	79 4c                	jns    1209c <load_elf_file+0x1c6>
            continue;
        }

        //加载该程序段
        int err = load_phdr(file, &elf_phdr, page_dir);
   12050:	83 ec 04             	sub    $0x4,%esp
   12053:	ff 75 10             	push   0x10(%ebp)
   12056:	8d 45 90             	lea    -0x70(%ebp),%eax
   12059:	50                   	push   %eax
   1205a:	ff 75 ec             	push   -0x14(%ebp)
   1205d:	e8 60 fd ff ff       	call   11dc2 <load_phdr>
   12062:	83 c4 10             	add    $0x10,%esp
   12065:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   12068:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1206c:	79 12                	jns    12080 <load_elf_file+0x1aa>
            log_printf("load program failed\n");
   1206e:	83 ec 0c             	sub    $0xc,%esp
   12071:	68 c7 61 01 00       	push   $0x161c7
   12076:	e8 3f 3d 00 00       	call   15dba <log_printf>
   1207b:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   1207e:	eb 4e                	jmp    120ce <load_elf_file+0x1f8>
        }

        //更新堆空间的位置，紧靠最后一个可加载段
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   12080:	8b 55 98             	mov    -0x68(%ebp),%edx
   12083:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   12086:	01 c2                	add    %eax,%edx
   12088:	8b 45 08             	mov    0x8(%ebp),%eax
   1208b:	89 50 0c             	mov    %edx,0xc(%eax)
        task->heap_end = task->heap_start;
   1208e:	8b 45 08             	mov    0x8(%ebp),%eax
   12091:	8b 50 0c             	mov    0xc(%eax),%edx
   12094:	8b 45 08             	mov    0x8(%ebp),%eax
   12097:	89 50 10             	mov    %edx,0x10(%eax)
   1209a:	eb 01                	jmp    1209d <load_elf_file+0x1c7>
            continue;
   1209c:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   1209d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   120a1:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   120a5:	0f b7 c0             	movzwl %ax,%eax
   120a8:	01 45 f4             	add    %eax,-0xc(%ebp)
   120ab:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   120af:	0f b7 c0             	movzwl %ax,%eax
   120b2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   120b5:	0f 8c 25 ff ff ff    	jl     11fe0 <load_elf_file+0x10a>
    }

    //成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
    sys_close(file);
   120bb:	83 ec 0c             	sub    $0xc,%esp
   120be:	ff 75 ec             	push   -0x14(%ebp)
   120c1:	e8 4e 27 00 00       	call   14814 <sys_close>
   120c6:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   120c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
   120cc:	eb 19                	jmp    120e7 <load_elf_file+0x211>

//错误处理
load_failed:
    if (file >= 0) {    //文件已被打开，则关闭该文件
   120ce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120d2:	78 0e                	js     120e2 <load_elf_file+0x20c>
        sys_close(file);
   120d4:	83 ec 0c             	sub    $0xc,%esp
   120d7:	ff 75 ec             	push   -0x14(%ebp)
   120da:	e8 35 27 00 00       	call   14814 <sys_close>
   120df:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   120e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   120e7:	c9                   	leave  
   120e8:	c3                   	ret    

000120e9 <copy_args>:
 * @param stack_top 新任务的栈顶地址
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int 
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char * const *argv, int argc) {
   120e9:	55                   	push   %ebp
   120ea:	89 e5                	mov    %esp,%ebp
   120ec:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   120ef:	8b 45 14             	mov    0x14(%ebp),%eax
   120f2:	89 45 d8             	mov    %eax,-0x28(%ebp)


    //1.获取char*数组在目标虚拟空间中的的虚拟地址
    //char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
    //即指向了该字符串数组第一个char*的地址
    task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   120f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   120f8:	83 c0 0c             	add    $0xc,%eax
   120fb:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //2.获取char*数组对应的虚拟空间关联的物理地址
    char **to_argv_paddr = (char**)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);  
   120fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12101:	83 ec 08             	sub    $0x8,%esp
   12104:	50                   	push   %eax
   12105:	ff 75 08             	push   0x8(%ebp)
   12108:	e8 e8 ed ff ff       	call   10ef5 <memory_get_paddr>
   1210d:	83 c4 10             	add    $0x10,%esp
   12110:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //3.获取参数的存储地址, 偏移量为 task_args 加上 argc个参数的字符串指针的大小，
    char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char*) * argc;
   12113:	8b 45 14             	mov    0x14(%ebp),%eax
   12116:	83 c0 03             	add    $0x3,%eax
   12119:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12120:	8b 45 0c             	mov    0xc(%ebp),%eax
   12123:	01 d0                	add    %edx,%eax
   12125:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
    for (int i = 0; i < argc; ++i) {
   12128:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1212f:	e9 82 00 00 00       	jmp    121b6 <copy_args+0xcd>
        char *from = argv[i];
   12134:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12137:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1213e:	8b 45 10             	mov    0x10(%ebp),%eax
   12141:	01 d0                	add    %edx,%eax
   12143:	8b 00                	mov    (%eax),%eax
   12145:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kernel_strlen(from) + 1;
   12148:	83 ec 0c             	sub    $0xc,%esp
   1214b:	ff 75 e8             	push   -0x18(%ebp)
   1214e:	e8 e6 33 00 00       	call   15539 <kernel_strlen>
   12153:	83 c4 10             	add    $0x10,%esp
   12156:	83 c0 01             	add    $0x1,%eax
   12159:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir, (uint32_t)from, len);
   1215c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   1215f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12162:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12165:	51                   	push   %ecx
   12166:	52                   	push   %edx
   12167:	ff 75 08             	push   0x8(%ebp)
   1216a:	50                   	push   %eax
   1216b:	e8 d8 ed ff ff       	call   10f48 <memory_copy_uvm_data>
   12170:	83 c4 10             	add    $0x10,%esp
   12173:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   12176:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1217a:	79 1c                	jns    12198 <copy_args+0xaf>
   1217c:	68 dc 61 01 00       	push   $0x161dc
   12181:	68 a4 62 01 00       	push   $0x162a4
   12186:	68 52 03 00 00       	push   $0x352
   1218b:	68 b8 60 01 00       	push   $0x160b8
   12190:	e8 26 2f 00 00       	call   150bb <pannic>
   12195:	83 c4 10             	add    $0x10,%esp
        to_argv_paddr[i] = dest_arg;
   12198:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1219b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   121a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   121a5:	01 c2                	add    %eax,%edx
   121a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121aa:	89 02                	mov    %eax,(%edx)
        dest_arg += len;
   121ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   121af:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; ++i) {
   121b2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121b9:	3b 45 14             	cmp    0x14(%ebp),%eax
   121bc:	0f 8c 72 ff ff ff    	jl     12134 <copy_args+0x4b>
    }


    //4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
    memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args, sizeof(task_args_t)); 
   121c2:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   121c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c8:	6a 0c                	push   $0xc
   121ca:	52                   	push   %edx
   121cb:	ff 75 08             	push   0x8(%ebp)
   121ce:	50                   	push   %eax
   121cf:	e8 74 ed ff ff       	call   10f48 <memory_copy_uvm_data>
   121d4:	83 c4 10             	add    $0x10,%esp
}
   121d7:	90                   	nop
   121d8:	c9                   	leave  
   121d9:	c3                   	ret    

000121da <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   121da:	55                   	push   %ebp
   121db:	89 e5                	mov    %esp,%ebp
   121dd:	83 ec 28             	sub    $0x28,%esp
        //1.获取当前任务进程
        task_t *task = task_current();
   121e0:	e8 d5 f6 ff ff       	call   118ba <task_current>
   121e5:	89 45 f4             	mov    %eax,-0xc(%ebp)

        //2.获取当前任务的页目录表
        uint32_t old_page_dir = task->tss.cr3;
   121e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121eb:	8b 40 74             	mov    0x74(%eax),%eax
   121ee:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.创建一个新的页目录表
        uint32_t new_page_dir = memory_creat_uvm();
   121f1:	e8 6a e7 ff ff       	call   10960 <memory_creat_uvm>
   121f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (new_page_dir == 0)  //创建失败
   121f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   121fd:	0f 84 4a 01 00 00    	je     1234d <sys_execve+0x173>
            goto exec_failed;

        //4.加载elf文件，替换当前任务
        uint32_t entry = load_elf_file(task, name, new_page_dir);
   12203:	83 ec 04             	sub    $0x4,%esp
   12206:	ff 75 ec             	push   -0x14(%ebp)
   12209:	ff 75 08             	push   0x8(%ebp)
   1220c:	ff 75 f4             	push   -0xc(%ebp)
   1220f:	e8 c2 fc ff ff       	call   11ed6 <load_elf_file>
   12214:	83 c4 10             	add    $0x10,%esp
   12217:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (entry == 0)
   1221a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1221e:	0f 84 2c 01 00 00    	je     12350 <sys_execve+0x176>
            goto exec_failed;

        
        //5.为新进程分配用户栈空间
        uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   12224:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
        int err = memory_alloc_for_page_dir(new_page_dir, 
   1222b:	6a 07                	push   $0x7
   1222d:	68 00 20 03 00       	push   $0x32000
   12232:	68 00 e0 fc df       	push   $0xdffce000
   12237:	ff 75 ec             	push   -0x14(%ebp)
   1223a:	e8 13 eb ff ff       	call   10d52 <memory_alloc_for_page_dir>
   1223f:	83 c4 10             	add    $0x10,%esp
   12242:	89 45 e0             	mov    %eax,-0x20(%ebp)
            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, 
            MEM_TASK_STACK_SIZE, 
            PTE_P | PTE_U | PTE_W);

        if (err < 0) 
   12245:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12249:	0f 88 04 01 00 00    	js     12353 <sys_execve+0x179>
            goto exec_failed;

        //6.将被执行任务的入口参数拷贝到栈上方对应内存空间
        int argc = strings_count(argv);
   1224f:	83 ec 0c             	sub    $0xc,%esp
   12252:	ff 75 0c             	push   0xc(%ebp)
   12255:	e8 13 37 00 00       	call   1596d <strings_count>
   1225a:	83 c4 10             	add    $0x10,%esp
   1225d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   12260:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12263:	ff 75 dc             	push   -0x24(%ebp)
   12266:	ff 75 0c             	push   0xc(%ebp)
   12269:	50                   	push   %eax
   1226a:	ff 75 ec             	push   -0x14(%ebp)
   1226d:	e8 77 fe ff ff       	call   120e9 <copy_args>
   12272:	83 c4 10             	add    $0x10,%esp
   12275:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   12278:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1227c:	0f 88 d4 00 00 00    	js     12356 <sys_execve+0x17c>

      

        //7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
        //所以用最高地址减去大小即可获得该帧的起始地址
        syscall_frame_t *frame = (syscall_frame_t*)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   12282:	e8 33 f6 ff ff       	call   118ba <task_current>
   12287:	8b 40 5c             	mov    0x5c(%eax),%eax
   1228a:	83 e8 58             	sub    $0x58,%eax
   1228d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        
        //8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
        frame->esp = stack_top - 5 * 4;
   12290:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12293:	8d 50 ec             	lea    -0x14(%eax),%edx
   12296:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12299:	89 50 50             	mov    %edx,0x50(%eax)
        frame->eip = entry;
   1229c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1229f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122a2:	89 50 34             	mov    %edx,0x34(%eax)

        //9.让进程更清爽的运行，清空通用寄存器的值
        frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   122a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122a8:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   122af:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122b2:	8b 50 28             	mov    0x28(%eax),%edx
   122b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122b8:	89 50 2c             	mov    %edx,0x2c(%eax)
   122bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122be:	8b 50 2c             	mov    0x2c(%eax),%edx
   122c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122c4:	89 50 24             	mov    %edx,0x24(%eax)
   122c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122ca:	8b 50 24             	mov    0x24(%eax),%edx
   122cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122d0:	89 50 30             	mov    %edx,0x30(%eax)
        frame->esi = frame->edi = frame->ebp = 0;
   122d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122d6:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   122dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122e0:	8b 50 1c             	mov    0x1c(%eax),%edx
   122e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122e6:	89 50 14             	mov    %edx,0x14(%eax)
   122e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122ec:	8b 50 14             	mov    0x14(%eax),%edx
   122ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122f2:	89 50 18             	mov    %edx,0x18(%eax)
        frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   122f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122f8:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

        //10.修改当前任务名为被执行任务名
        kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   122fe:	83 ec 0c             	sub    $0xc,%esp
   12301:	ff 75 08             	push   0x8(%ebp)
   12304:	e8 91 36 00 00       	call   1599a <get_file_name>
   12309:	83 c4 10             	add    $0x10,%esp
   1230c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1230f:	83 c2 20             	add    $0x20,%edx
   12312:	83 ec 04             	sub    $0x4,%esp
   12315:	6a 20                	push   $0x20
   12317:	50                   	push   %eax
   12318:	52                   	push   %edx
   12319:	e8 60 31 00 00       	call   1547e <kernel_strncpy>
   1231e:	83 c4 10             	add    $0x10,%esp
        
        //11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
        task->tss.cr3 = new_page_dir;
   12321:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12324:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12327:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(new_page_dir);
   1232a:	83 ec 0c             	sub    $0xc,%esp
   1232d:	ff 75 ec             	push   -0x14(%ebp)
   12330:	e8 56 ef ff ff       	call   1128b <mmu_set_page_dir>
   12335:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(old_page_dir);
   12338:	83 ec 0c             	sub    $0xc,%esp
   1233b:	ff 75 f0             	push   -0x10(%ebp)
   1233e:	e8 2f e8 ff ff       	call   10b72 <memory_destroy_uvm>
   12343:	83 c4 10             	add    $0x10,%esp
    return 0;
   12346:	b8 00 00 00 00       	mov    $0x0,%eax
   1234b:	eb 3a                	jmp    12387 <sys_execve+0x1ad>
            goto exec_failed;
   1234d:	90                   	nop
   1234e:	eb 07                	jmp    12357 <sys_execve+0x17d>
            goto exec_failed;
   12350:	90                   	nop
   12351:	eb 04                	jmp    12357 <sys_execve+0x17d>
            goto exec_failed;
   12353:	90                   	nop
   12354:	eb 01                	jmp    12357 <sys_execve+0x17d>
            goto exec_failed;
   12356:	90                   	nop

exec_failed:
    // 执行失败，释放资源并恢复到原进程状态
    if (new_page_dir) {
   12357:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1235b:	74 25                	je     12382 <sys_execve+0x1a8>
        task->tss.cr3 = old_page_dir;
   1235d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12360:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12363:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(old_page_dir);
   12366:	83 ec 0c             	sub    $0xc,%esp
   12369:	ff 75 f0             	push   -0x10(%ebp)
   1236c:	e8 1a ef ff ff       	call   1128b <mmu_set_page_dir>
   12371:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   12374:	83 ec 0c             	sub    $0xc,%esp
   12377:	ff 75 ec             	push   -0x14(%ebp)
   1237a:	e8 f3 e7 ff ff       	call   10b72 <memory_destroy_uvm>
   1237f:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   12382:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12387:	c9                   	leave  
   12388:	c3                   	ret    

00012389 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   12389:	55                   	push   %ebp
   1238a:	89 e5                	mov    %esp,%ebp
   1238c:	83 ec 08             	sub    $0x8,%esp
   1238f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12392:	8b 45 14             	mov    0x14(%ebp),%eax
   12395:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12399:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   1239d:	8b 45 10             	mov    0x10(%ebp),%eax
   123a0:	89 c2                	mov    %eax,%edx
   123a2:	8b 45 08             	mov    0x8(%ebp),%eax
   123a5:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   123a8:	8b 45 10             	mov    0x10(%ebp),%eax
   123ab:	c1 e8 10             	shr    $0x10,%eax
   123ae:	89 c2                	mov    %eax,%edx
   123b0:	8b 45 08             	mov    0x8(%ebp),%eax
   123b3:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   123b7:	8b 45 08             	mov    0x8(%ebp),%eax
   123ba:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   123be:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   123c2:	8b 45 08             	mov    0x8(%ebp),%eax
   123c5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   123c9:	66 89 50 04          	mov    %dx,0x4(%eax)
   123cd:	90                   	nop
   123ce:	c9                   	leave  
   123cf:	c3                   	ret    

000123d0 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   123d0:	55                   	push   %ebp
   123d1:	89 e5                	mov    %esp,%ebp
   123d3:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   123d6:	8b 45 08             	mov    0x8(%ebp),%eax
   123d9:	c1 e8 10             	shr    $0x10,%eax
   123dc:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   123e0:	8b 45 08             	mov    0x8(%ebp),%eax
   123e3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   123e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   123ea:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   123ed:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   123f1:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   123f5:	90                   	nop
   123f6:	c9                   	leave  
   123f7:	c3                   	ret    

000123f8 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   123f8:	55                   	push   %ebp
   123f9:	89 e5                	mov    %esp,%ebp
   123fb:	83 ec 18             	sub    $0x18,%esp
   123fe:	8b 55 08             	mov    0x8(%ebp),%edx
   12401:	8b 45 14             	mov    0x14(%ebp),%eax
   12404:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   12408:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   1240c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12410:	66 c1 e8 03          	shr    $0x3,%ax
   12414:	0f b7 c0             	movzwl %ax,%eax
   12417:	c1 e0 03             	shl    $0x3,%eax
   1241a:	05 e0 85 02 00       	add    $0x285e0,%eax
   1241f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   12422:	8b 45 0c             	mov    0xc(%ebp),%eax
   12425:	89 c2                	mov    %eax,%edx
   12427:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1242a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   1242e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12431:	c1 e8 10             	shr    $0x10,%eax
   12434:	89 c2                	mov    %eax,%edx
   12436:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12439:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   1243c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1243f:	c1 e8 18             	shr    $0x18,%eax
   12442:	89 c2                	mov    %eax,%edx
   12444:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12447:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   1244a:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12451:	76 1d                	jbe    12470 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   12453:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12456:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1245a:	66 0d 00 80          	or     $0x8000,%ax
   1245e:	89 c2                	mov    %eax,%edx
   12460:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12463:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   12467:	8b 45 10             	mov    0x10(%ebp),%eax
   1246a:	c1 e8 0c             	shr    $0xc,%eax
   1246d:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12470:	8b 45 10             	mov    0x10(%ebp),%eax
   12473:	89 c2                	mov    %eax,%edx
   12475:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12478:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   1247b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1247e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12482:	89 c2                	mov    %eax,%edx
   12484:	8b 45 10             	mov    0x10(%ebp),%eax
   12487:	c1 e8 08             	shr    $0x8,%eax
   1248a:	66 25 00 0f          	and    $0xf00,%ax
   1248e:	09 d0                	or     %edx,%eax
   12490:	89 c2                	mov    %eax,%edx
   12492:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12495:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   12499:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1249c:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   124a0:	89 c2                	mov    %eax,%edx
   124a2:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   124a6:	80 e4 f0             	and    $0xf0,%ah
   124a9:	09 d0                	or     %edx,%eax
   124ab:	89 c2                	mov    %eax,%edx
   124ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124b0:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   124b4:	90                   	nop
   124b5:	c9                   	leave  
   124b6:	c3                   	ret    

000124b7 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   124b7:	55                   	push   %ebp
   124b8:	89 e5                	mov    %esp,%ebp
   124ba:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   124bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   124c4:	eb 1c                	jmp    124e2 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   124c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124c9:	c1 e0 03             	shl    $0x3,%eax
   124cc:	0f b7 c0             	movzwl %ax,%eax
   124cf:	6a 00                	push   $0x0
   124d1:	6a 00                	push   $0x0
   124d3:	6a 00                	push   $0x0
   124d5:	50                   	push   %eax
   124d6:	e8 1d ff ff ff       	call   123f8 <segment_desc_set>
   124db:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   124de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124e2:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   124e9:	7e db                	jle    124c6 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   124eb:	68 92 40 00 00       	push   $0x4092
   124f0:	6a ff                	push   $0xffffffff
   124f2:	6a 00                	push   $0x0
   124f4:	6a 10                	push   $0x10
   124f6:	e8 fd fe ff ff       	call   123f8 <segment_desc_set>
   124fb:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   124fe:	c6 05 e2 85 03 00 01 	movb   $0x1,0x385e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   12505:	68 9a 40 00 00       	push   $0x409a
   1250a:	6a ff                	push   $0xffffffff
   1250c:	6a 00                	push   $0x0
   1250e:	6a 08                	push   $0x8
   12510:	e8 e3 fe ff ff       	call   123f8 <segment_desc_set>
   12515:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   12518:	c6 05 e1 85 03 00 01 	movb   $0x1,0x385e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   1251f:	ba ca 02 01 00       	mov    $0x102ca,%edx
   12524:	b8 f8 85 02 00       	mov    $0x285f8,%eax
   12529:	68 05 ec 00 00       	push   $0xec05
   1252e:	52                   	push   %edx
   1252f:	6a 08                	push   $0x8
   12531:	50                   	push   %eax
   12532:	e8 52 fe ff ff       	call   12389 <gate_desc_set>
   12537:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   1253a:	c6 05 e3 85 03 00 01 	movb   $0x1,0x385e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12541:	b8 e0 85 02 00       	mov    $0x285e0,%eax
   12546:	83 ec 08             	sub    $0x8,%esp
   12549:	68 00 00 01 00       	push   $0x10000
   1254e:	50                   	push   %eax
   1254f:	e8 7c fe ff ff       	call   123d0 <lgdt>
   12554:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   12557:	83 ec 0c             	sub    $0xc,%esp
   1255a:	68 e0 a5 03 00       	push   $0x3a5e0
   1255f:	e8 3e 24 00 00       	call   149a2 <mutex_init>
   12564:	83 c4 10             	add    $0x10,%esp
}
   12567:	90                   	nop
   12568:	c9                   	leave  
   12569:	c3                   	ret    

0001256a <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   1256a:	55                   	push   %ebp
   1256b:	89 e5                	mov    %esp,%ebp
   1256d:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12570:	83 ec 0c             	sub    $0xc,%esp
   12573:	68 e0 a5 03 00       	push   $0x3a5e0
   12578:	e8 72 24 00 00       	call   149ef <mutex_lock>
   1257d:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12580:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12587:	eb 36                	jmp    125bf <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   12589:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1258c:	05 e0 85 03 00       	add    $0x385e0,%eax
   12591:	0f b6 00             	movzbl (%eax),%eax
   12594:	84 c0                	test   %al,%al
   12596:	75 23                	jne    125bb <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   12598:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1259b:	05 e0 85 03 00       	add    $0x385e0,%eax
   125a0:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   125a3:	83 ec 0c             	sub    $0xc,%esp
   125a6:	68 e0 a5 03 00       	push   $0x3a5e0
   125ab:	e8 d0 24 00 00       	call   14a80 <mutex_unlock>
   125b0:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   125b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125b6:	c1 e0 03             	shl    $0x3,%eax
   125b9:	eb 22                	jmp    125dd <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   125bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   125bf:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   125c6:	7e c1                	jle    12589 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   125c8:	83 ec 0c             	sub    $0xc,%esp
   125cb:	68 e0 a5 03 00       	push   $0x3a5e0
   125d0:	e8 ab 24 00 00       	call   14a80 <mutex_unlock>
   125d5:	83 c4 10             	add    $0x10,%esp
    return -1;
   125d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   125dd:	c9                   	leave  
   125de:	c3                   	ret    

000125df <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   125df:	55                   	push   %ebp
   125e0:	89 e5                	mov    %esp,%ebp
   125e2:	83 ec 14             	sub    $0x14,%esp
   125e5:	8b 45 08             	mov    0x8(%ebp),%eax
   125e8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   125ec:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   125f0:	66 c1 e8 03          	shr    $0x3,%ax
   125f4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   125f8:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   125fc:	c6 80 e0 85 03 00 00 	movb   $0x0,0x385e0(%eax)
}
   12603:	90                   	nop
   12604:	c9                   	leave  
   12605:	c3                   	ret    

00012606 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   12606:	55                   	push   %ebp
   12607:	89 e5                	mov    %esp,%ebp
   12609:	fa                   	cli    
   1260a:	90                   	nop
   1260b:	5d                   	pop    %ebp
   1260c:	c3                   	ret    

0001260d <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1260d:	55                   	push   %ebp
   1260e:	89 e5                	mov    %esp,%ebp
   12610:	fb                   	sti    
   12611:	90                   	nop
   12612:	5d                   	pop    %ebp
   12613:	c3                   	ret    

00012614 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12614:	55                   	push   %ebp
   12615:	89 e5                	mov    %esp,%ebp
   12617:	f4                   	hlt    
   12618:	90                   	nop
   12619:	5d                   	pop    %ebp
   1261a:	c3                   	ret    

0001261b <inb>:
static inline uint8_t inb(uint16_t port) {
   1261b:	55                   	push   %ebp
   1261c:	89 e5                	mov    %esp,%ebp
   1261e:	83 ec 14             	sub    $0x14,%esp
   12621:	8b 45 08             	mov    0x8(%ebp),%eax
   12624:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12628:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1262c:	89 c2                	mov    %eax,%edx
   1262e:	ec                   	in     (%dx),%al
   1262f:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12632:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12636:	c9                   	leave  
   12637:	c3                   	ret    

00012638 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12638:	55                   	push   %ebp
   12639:	89 e5                	mov    %esp,%ebp
   1263b:	83 ec 08             	sub    $0x8,%esp
   1263e:	8b 45 08             	mov    0x8(%ebp),%eax
   12641:	8b 55 0c             	mov    0xc(%ebp),%edx
   12644:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12648:	89 d0                	mov    %edx,%eax
   1264a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1264d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12651:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12655:	ee                   	out    %al,(%dx)
}
   12656:	90                   	nop
   12657:	c9                   	leave  
   12658:	c3                   	ret    

00012659 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12659:	55                   	push   %ebp
   1265a:	89 e5                	mov    %esp,%ebp
   1265c:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   1265f:	8b 45 08             	mov    0x8(%ebp),%eax
   12662:	c1 e8 10             	shr    $0x10,%eax
   12665:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   12669:	8b 45 08             	mov    0x8(%ebp),%eax
   1266c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12670:	8b 45 0c             	mov    0xc(%ebp),%eax
   12673:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12676:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1267a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1267e:	90                   	nop
   1267f:	c9                   	leave  
   12680:	c3                   	ret    

00012681 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12681:	55                   	push   %ebp
   12682:	89 e5                	mov    %esp,%ebp
   12684:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12687:	0f 20 d0             	mov    %cr2,%eax
   1268a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   1268d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12690:	c9                   	leave  
   12691:	c3                   	ret    

00012692 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12692:	55                   	push   %ebp
   12693:	89 e5                	mov    %esp,%ebp
   12695:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12698:	9c                   	pushf  
   12699:	58                   	pop    %eax
   1269a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   1269d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   126a0:	c9                   	leave  
   126a1:	c3                   	ret    

000126a2 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   126a2:	55                   	push   %ebp
   126a3:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   126a5:	8b 45 08             	mov    0x8(%ebp),%eax
   126a8:	50                   	push   %eax
   126a9:	9d                   	popf   
}
   126aa:	90                   	nop
   126ab:	5d                   	pop    %ebp
   126ac:	c3                   	ret    

000126ad <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   126ad:	55                   	push   %ebp
   126ae:	89 e5                	mov    %esp,%ebp
   126b0:	57                   	push   %edi
   126b1:	56                   	push   %esi
   126b2:	53                   	push   %ebx
   126b3:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   126b6:	8b 45 08             	mov    0x8(%ebp),%eax
   126b9:	8b 40 3c             	mov    0x3c(%eax),%eax
   126bc:	83 e0 03             	and    $0x3,%eax
   126bf:	85 c0                	test   %eax,%eax
   126c1:	74 14                	je     126d7 <print_exception_fram+0x2a>
    ss = frame->ss3;
   126c3:	8b 45 08             	mov    0x8(%ebp),%eax
   126c6:	8b 40 48             	mov    0x48(%eax),%eax
   126c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   126cc:	8b 45 08             	mov    0x8(%ebp),%eax
   126cf:	8b 40 44             	mov    0x44(%eax),%eax
   126d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
   126d5:	eb 12                	jmp    126e9 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   126d7:	8b 45 08             	mov    0x8(%ebp),%eax
   126da:	8b 40 0c             	mov    0xc(%eax),%eax
   126dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   126e0:	8b 45 08             	mov    0x8(%ebp),%eax
   126e3:	8b 40 1c             	mov    0x1c(%eax),%eax
   126e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   126e9:	83 ec 0c             	sub    $0xc,%esp
   126ec:	68 b0 62 01 00       	push   $0x162b0
   126f1:	e8 c4 36 00 00       	call   15dba <log_printf>
   126f6:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   126f9:	8b 45 08             	mov    0x8(%ebp),%eax
   126fc:	8b 50 34             	mov    0x34(%eax),%edx
   126ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12702:	8b 40 30             	mov    0x30(%eax),%eax
   12705:	83 ec 04             	sub    $0x4,%esp
   12708:	52                   	push   %edx
   12709:	50                   	push   %eax
   1270a:	68 ef 62 01 00       	push   $0x162ef
   1270f:	e8 a6 36 00 00       	call   15dba <log_printf>
   12714:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12717:	8b 45 08             	mov    0x8(%ebp),%eax
   1271a:	8b 30                	mov    (%eax),%esi
   1271c:	8b 45 08             	mov    0x8(%ebp),%eax
   1271f:	8b 58 04             	mov    0x4(%eax),%ebx
   12722:	8b 45 08             	mov    0x8(%ebp),%eax
   12725:	8b 48 08             	mov    0x8(%eax),%ecx
   12728:	8b 45 08             	mov    0x8(%ebp),%eax
   1272b:	8b 50 0c             	mov    0xc(%eax),%edx
   1272e:	8b 45 08             	mov    0x8(%ebp),%eax
   12731:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
   12734:	83 ec 04             	sub    $0x4,%esp
   12737:	56                   	push   %esi
   12738:	53                   	push   %ebx
   12739:	51                   	push   %ecx
   1273a:	ff 75 e4             	push   -0x1c(%ebp)
   1273d:	52                   	push   %edx
   1273e:	50                   	push   %eax
   1273f:	68 08 63 01 00       	push   $0x16308
   12744:	e8 71 36 00 00       	call   15dba <log_printf>
   12749:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   1274c:	8b 45 08             	mov    0x8(%ebp),%eax
   1274f:	8b 40 18             	mov    0x18(%eax),%eax
   12752:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12755:	8b 45 08             	mov    0x8(%ebp),%eax
   12758:	8b 78 10             	mov    0x10(%eax),%edi
   1275b:	8b 45 08             	mov    0x8(%ebp),%eax
   1275e:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12761:	8b 45 08             	mov    0x8(%ebp),%eax
   12764:	8b 58 24             	mov    0x24(%eax),%ebx
   12767:	8b 45 08             	mov    0x8(%ebp),%eax
   1276a:	8b 48 28             	mov    0x28(%eax),%ecx
   1276d:	8b 45 08             	mov    0x8(%ebp),%eax
   12770:	8b 50 20             	mov    0x20(%eax),%edx
   12773:	8b 45 08             	mov    0x8(%ebp),%eax
   12776:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12779:	83 ec 0c             	sub    $0xc,%esp
   1277c:	ff 75 e0             	push   -0x20(%ebp)
   1277f:	ff 75 d4             	push   -0x2c(%ebp)
   12782:	57                   	push   %edi
   12783:	56                   	push   %esi
   12784:	53                   	push   %ebx
   12785:	51                   	push   %ecx
   12786:	52                   	push   %edx
   12787:	50                   	push   %eax
   12788:	68 3c 63 01 00       	push   $0x1633c
   1278d:	e8 28 36 00 00       	call   15dba <log_printf>
   12792:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12795:	8b 45 08             	mov    0x8(%ebp),%eax
   12798:	8b 50 40             	mov    0x40(%eax),%edx
   1279b:	8b 45 08             	mov    0x8(%ebp),%eax
   1279e:	8b 40 38             	mov    0x38(%eax),%eax
   127a1:	83 ec 04             	sub    $0x4,%esp
   127a4:	52                   	push   %edx
   127a5:	50                   	push   %eax
   127a6:	68 95 63 01 00       	push   $0x16395
   127ab:	e8 0a 36 00 00       	call   15dba <log_printf>
   127b0:	83 c4 10             	add    $0x10,%esp
}
   127b3:	90                   	nop
   127b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
   127b7:	5b                   	pop    %ebx
   127b8:	5e                   	pop    %esi
   127b9:	5f                   	pop    %edi
   127ba:	5d                   	pop    %ebp
   127bb:	c3                   	ret    

000127bc <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   127bc:	55                   	push   %ebp
   127bd:	89 e5                	mov    %esp,%ebp
   127bf:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   127c2:	83 ec 0c             	sub    $0xc,%esp
   127c5:	68 b0 63 01 00       	push   $0x163b0
   127ca:	e8 eb 35 00 00       	call   15dba <log_printf>
   127cf:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   127d2:	83 ec 08             	sub    $0x8,%esp
   127d5:	ff 75 0c             	push   0xc(%ebp)
   127d8:	68 e5 63 01 00       	push   $0x163e5
   127dd:	e8 d8 35 00 00       	call   15dba <log_printf>
   127e2:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   127e5:	83 ec 0c             	sub    $0xc,%esp
   127e8:	ff 75 08             	push   0x8(%ebp)
   127eb:	e8 bd fe ff ff       	call   126ad <print_exception_fram>
   127f0:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   127f3:	e8 1c fe ff ff       	call   12614 <hlt>
   127f8:	eb f9                	jmp    127f3 <do_default_handler+0x37>

000127fa <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   127fa:	55                   	push   %ebp
   127fb:	89 e5                	mov    %esp,%ebp
   127fd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12800:	83 ec 08             	sub    $0x8,%esp
   12803:	68 00 64 01 00       	push   $0x16400
   12808:	ff 75 08             	push   0x8(%ebp)
   1280b:	e8 ac ff ff ff       	call   127bc <do_default_handler>
   12810:	83 c4 10             	add    $0x10,%esp
}
   12813:	90                   	nop
   12814:	c9                   	leave  
   12815:	c3                   	ret    

00012816 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12816:	55                   	push   %ebp
   12817:	89 e5                	mov    %esp,%ebp
   12819:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1281c:	83 ec 08             	sub    $0x8,%esp
   1281f:	68 12 64 01 00       	push   $0x16412
   12824:	ff 75 08             	push   0x8(%ebp)
   12827:	e8 90 ff ff ff       	call   127bc <do_default_handler>
   1282c:	83 c4 10             	add    $0x10,%esp
}
   1282f:	90                   	nop
   12830:	c9                   	leave  
   12831:	c3                   	ret    

00012832 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12832:	55                   	push   %ebp
   12833:	89 e5                	mov    %esp,%ebp
   12835:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12838:	83 ec 08             	sub    $0x8,%esp
   1283b:	68 24 64 01 00       	push   $0x16424
   12840:	ff 75 08             	push   0x8(%ebp)
   12843:	e8 74 ff ff ff       	call   127bc <do_default_handler>
   12848:	83 c4 10             	add    $0x10,%esp
}
   1284b:	90                   	nop
   1284c:	c9                   	leave  
   1284d:	c3                   	ret    

0001284e <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   1284e:	55                   	push   %ebp
   1284f:	89 e5                	mov    %esp,%ebp
   12851:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12854:	83 ec 08             	sub    $0x8,%esp
   12857:	68 34 64 01 00       	push   $0x16434
   1285c:	ff 75 08             	push   0x8(%ebp)
   1285f:	e8 58 ff ff ff       	call   127bc <do_default_handler>
   12864:	83 c4 10             	add    $0x10,%esp
}
   12867:	90                   	nop
   12868:	c9                   	leave  
   12869:	c3                   	ret    

0001286a <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   1286a:	55                   	push   %ebp
   1286b:	89 e5                	mov    %esp,%ebp
   1286d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12870:	83 ec 08             	sub    $0x8,%esp
   12873:	68 42 64 01 00       	push   $0x16442
   12878:	ff 75 08             	push   0x8(%ebp)
   1287b:	e8 3c ff ff ff       	call   127bc <do_default_handler>
   12880:	83 c4 10             	add    $0x10,%esp
}
   12883:	90                   	nop
   12884:	c9                   	leave  
   12885:	c3                   	ret    

00012886 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12886:	55                   	push   %ebp
   12887:	89 e5                	mov    %esp,%ebp
   12889:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1288c:	83 ec 08             	sub    $0x8,%esp
   1288f:	68 57 64 01 00       	push   $0x16457
   12894:	ff 75 08             	push   0x8(%ebp)
   12897:	e8 20 ff ff ff       	call   127bc <do_default_handler>
   1289c:	83 c4 10             	add    $0x10,%esp
}
   1289f:	90                   	nop
   128a0:	c9                   	leave  
   128a1:	c3                   	ret    

000128a2 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   128a2:	55                   	push   %ebp
   128a3:	89 e5                	mov    %esp,%ebp
   128a5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   128a8:	83 ec 08             	sub    $0x8,%esp
   128ab:	68 6a 64 01 00       	push   $0x1646a
   128b0:	ff 75 08             	push   0x8(%ebp)
   128b3:	e8 04 ff ff ff       	call   127bc <do_default_handler>
   128b8:	83 c4 10             	add    $0x10,%esp
}
   128bb:	90                   	nop
   128bc:	c9                   	leave  
   128bd:	c3                   	ret    

000128be <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   128be:	55                   	push   %ebp
   128bf:	89 e5                	mov    %esp,%ebp
   128c1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   128c4:	83 ec 08             	sub    $0x8,%esp
   128c7:	68 80 64 01 00       	push   $0x16480
   128cc:	ff 75 08             	push   0x8(%ebp)
   128cf:	e8 e8 fe ff ff       	call   127bc <do_default_handler>
   128d4:	83 c4 10             	add    $0x10,%esp
}
   128d7:	90                   	nop
   128d8:	c9                   	leave  
   128d9:	c3                   	ret    

000128da <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   128da:	55                   	push   %ebp
   128db:	89 e5                	mov    %esp,%ebp
   128dd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   128e0:	83 ec 08             	sub    $0x8,%esp
   128e3:	68 99 64 01 00       	push   $0x16499
   128e8:	ff 75 08             	push   0x8(%ebp)
   128eb:	e8 cc fe ff ff       	call   127bc <do_default_handler>
   128f0:	83 c4 10             	add    $0x10,%esp
}
   128f3:	90                   	nop
   128f4:	c9                   	leave  
   128f5:	c3                   	ret    

000128f6 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   128f6:	55                   	push   %ebp
   128f7:	89 e5                	mov    %esp,%ebp
   128f9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   128fc:	83 ec 08             	sub    $0x8,%esp
   128ff:	68 b6 64 01 00       	push   $0x164b6
   12904:	ff 75 08             	push   0x8(%ebp)
   12907:	e8 b0 fe ff ff       	call   127bc <do_default_handler>
   1290c:	83 c4 10             	add    $0x10,%esp
}
   1290f:	90                   	nop
   12910:	c9                   	leave  
   12911:	c3                   	ret    

00012912 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12912:	55                   	push   %ebp
   12913:	89 e5                	mov    %esp,%ebp
   12915:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12918:	83 ec 08             	sub    $0x8,%esp
   1291b:	68 cd 64 01 00       	push   $0x164cd
   12920:	ff 75 08             	push   0x8(%ebp)
   12923:	e8 94 fe ff ff       	call   127bc <do_default_handler>
   12928:	83 c4 10             	add    $0x10,%esp
}
   1292b:	90                   	nop
   1292c:	c9                   	leave  
   1292d:	c3                   	ret    

0001292e <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   1292e:	55                   	push   %ebp
   1292f:	89 e5                	mov    %esp,%ebp
   12931:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12934:	83 ec 08             	sub    $0x8,%esp
   12937:	68 e3 64 01 00       	push   $0x164e3
   1293c:	ff 75 08             	push   0x8(%ebp)
   1293f:	e8 78 fe ff ff       	call   127bc <do_default_handler>
   12944:	83 c4 10             	add    $0x10,%esp
}
   12947:	90                   	nop
   12948:	c9                   	leave  
   12949:	c3                   	ret    

0001294a <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   1294a:	55                   	push   %ebp
   1294b:	89 e5                	mov    %esp,%ebp
   1294d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12950:	83 ec 08             	sub    $0x8,%esp
   12953:	68 01 65 01 00       	push   $0x16501
   12958:	ff 75 08             	push   0x8(%ebp)
   1295b:	e8 5c fe ff ff       	call   127bc <do_default_handler>
   12960:	83 c4 10             	add    $0x10,%esp
}
   12963:	90                   	nop
   12964:	c9                   	leave  
   12965:	c3                   	ret    

00012966 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12966:	55                   	push   %ebp
   12967:	89 e5                	mov    %esp,%ebp
   12969:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   1296c:	83 ec 0c             	sub    $0xc,%esp
   1296f:	68 20 65 01 00       	push   $0x16520
   12974:	e8 41 34 00 00       	call   15dba <log_printf>
   12979:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   1297c:	83 ec 0c             	sub    $0xc,%esp
   1297f:	68 44 65 01 00       	push   $0x16544
   12984:	e8 31 34 00 00       	call   15dba <log_printf>
   12989:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   1298c:	8b 45 08             	mov    0x8(%ebp),%eax
   1298f:	8b 40 34             	mov    0x34(%eax),%eax
   12992:	83 e0 01             	and    $0x1,%eax
   12995:	85 c0                	test   %eax,%eax
   12997:	74 12                	je     129ab <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12999:	83 ec 0c             	sub    $0xc,%esp
   1299c:	68 70 65 01 00       	push   $0x16570
   129a1:	e8 14 34 00 00       	call   15dba <log_printf>
   129a6:	83 c4 10             	add    $0x10,%esp
   129a9:	eb 10                	jmp    129bb <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   129ab:	83 ec 0c             	sub    $0xc,%esp
   129ae:	68 ec 65 01 00       	push   $0x165ec
   129b3:	e8 02 34 00 00       	call   15dba <log_printf>
   129b8:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   129bb:	8b 45 08             	mov    0x8(%ebp),%eax
   129be:	8b 40 34             	mov    0x34(%eax),%eax
   129c1:	83 e0 02             	and    $0x2,%eax
   129c4:	85 c0                	test   %eax,%eax
   129c6:	74 12                	je     129da <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   129c8:	83 ec 0c             	sub    $0xc,%esp
   129cb:	68 44 66 01 00       	push   $0x16644
   129d0:	e8 e5 33 00 00       	call   15dba <log_printf>
   129d5:	83 c4 10             	add    $0x10,%esp
   129d8:	eb 10                	jmp    129ea <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   129da:	83 ec 0c             	sub    $0xc,%esp
   129dd:	68 90 66 01 00       	push   $0x16690
   129e2:	e8 d3 33 00 00       	call   15dba <log_printf>
   129e7:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   129ea:	8b 45 08             	mov    0x8(%ebp),%eax
   129ed:	8b 40 34             	mov    0x34(%eax),%eax
   129f0:	25 f8 ff 00 00       	and    $0xfff8,%eax
   129f5:	83 ec 08             	sub    $0x8,%esp
   129f8:	50                   	push   %eax
   129f9:	68 bd 66 01 00       	push   $0x166bd
   129fe:	e8 b7 33 00 00       	call   15dba <log_printf>
   12a03:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12a06:	83 ec 0c             	sub    $0xc,%esp
   12a09:	ff 75 08             	push   0x8(%ebp)
   12a0c:	e8 9c fc ff ff       	call   126ad <print_exception_fram>
   12a11:	83 c4 10             	add    $0x10,%esp
}
   12a14:	90                   	nop
   12a15:	c9                   	leave  
   12a16:	c3                   	ret    

00012a17 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12a17:	55                   	push   %ebp
   12a18:	89 e5                	mov    %esp,%ebp
   12a1a:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12a1d:	83 ec 0c             	sub    $0xc,%esp
   12a20:	68 20 65 01 00       	push   $0x16520
   12a25:	e8 90 33 00 00       	call   15dba <log_printf>
   12a2a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12a2d:	83 ec 0c             	sub    $0xc,%esp
   12a30:	68 d0 66 01 00       	push   $0x166d0
   12a35:	e8 80 33 00 00       	call   15dba <log_printf>
   12a3a:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12a3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12a40:	8b 40 34             	mov    0x34(%eax),%eax
   12a43:	83 e0 01             	and    $0x1,%eax
   12a46:	85 c0                	test   %eax,%eax
   12a48:	74 18                	je     12a62 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12a4a:	e8 32 fc ff ff       	call   12681 <read_cr2>
   12a4f:	83 ec 08             	sub    $0x8,%esp
   12a52:	50                   	push   %eax
   12a53:	68 f4 66 01 00       	push   $0x166f4
   12a58:	e8 5d 33 00 00       	call   15dba <log_printf>
   12a5d:	83 c4 10             	add    $0x10,%esp
   12a60:	eb 16                	jmp    12a78 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12a62:	e8 1a fc ff ff       	call   12681 <read_cr2>
   12a67:	83 ec 08             	sub    $0x8,%esp
   12a6a:	50                   	push   %eax
   12a6b:	68 1c 67 01 00       	push   $0x1671c
   12a70:	e8 45 33 00 00       	call   15dba <log_printf>
   12a75:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12a78:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7b:	8b 40 34             	mov    0x34(%eax),%eax
   12a7e:	83 e0 02             	and    $0x2,%eax
   12a81:	85 c0                	test   %eax,%eax
   12a83:	74 12                	je     12a97 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12a85:	83 ec 0c             	sub    $0xc,%esp
   12a88:	68 38 67 01 00       	push   $0x16738
   12a8d:	e8 28 33 00 00       	call   15dba <log_printf>
   12a92:	83 c4 10             	add    $0x10,%esp
   12a95:	eb 10                	jmp    12aa7 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12a97:	83 ec 0c             	sub    $0xc,%esp
   12a9a:	68 64 67 01 00       	push   $0x16764
   12a9f:	e8 16 33 00 00       	call   15dba <log_printf>
   12aa4:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aaa:	8b 40 34             	mov    0x34(%eax),%eax
   12aad:	83 e0 04             	and    $0x4,%eax
   12ab0:	85 c0                	test   %eax,%eax
   12ab2:	74 12                	je     12ac6 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12ab4:	83 ec 0c             	sub    $0xc,%esp
   12ab7:	68 90 67 01 00       	push   $0x16790
   12abc:	e8 f9 32 00 00       	call   15dba <log_printf>
   12ac1:	83 c4 10             	add    $0x10,%esp
   12ac4:	eb 10                	jmp    12ad6 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12ac6:	83 ec 0c             	sub    $0xc,%esp
   12ac9:	68 b8 67 01 00       	push   $0x167b8
   12ace:	e8 e7 32 00 00       	call   15dba <log_printf>
   12ad3:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12ad6:	83 ec 0c             	sub    $0xc,%esp
   12ad9:	ff 75 08             	push   0x8(%ebp)
   12adc:	e8 cc fb ff ff       	call   126ad <print_exception_fram>
   12ae1:	83 c4 10             	add    $0x10,%esp
}
   12ae4:	90                   	nop
   12ae5:	c9                   	leave  
   12ae6:	c3                   	ret    

00012ae7 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12ae7:	55                   	push   %ebp
   12ae8:	89 e5                	mov    %esp,%ebp
   12aea:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12aed:	83 ec 08             	sub    $0x8,%esp
   12af0:	68 e4 67 01 00       	push   $0x167e4
   12af5:	ff 75 08             	push   0x8(%ebp)
   12af8:	e8 bf fc ff ff       	call   127bc <do_default_handler>
   12afd:	83 c4 10             	add    $0x10,%esp
}
   12b00:	90                   	nop
   12b01:	c9                   	leave  
   12b02:	c3                   	ret    

00012b03 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12b03:	55                   	push   %ebp
   12b04:	89 e5                	mov    %esp,%ebp
   12b06:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12b09:	83 ec 08             	sub    $0x8,%esp
   12b0c:	68 f9 67 01 00       	push   $0x167f9
   12b11:	ff 75 08             	push   0x8(%ebp)
   12b14:	e8 a3 fc ff ff       	call   127bc <do_default_handler>
   12b19:	83 c4 10             	add    $0x10,%esp
}
   12b1c:	90                   	nop
   12b1d:	c9                   	leave  
   12b1e:	c3                   	ret    

00012b1f <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12b1f:	55                   	push   %ebp
   12b20:	89 e5                	mov    %esp,%ebp
   12b22:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12b25:	83 ec 08             	sub    $0x8,%esp
   12b28:	68 14 68 01 00       	push   $0x16814
   12b2d:	ff 75 08             	push   0x8(%ebp)
   12b30:	e8 87 fc ff ff       	call   127bc <do_default_handler>
   12b35:	83 c4 10             	add    $0x10,%esp
}
   12b38:	90                   	nop
   12b39:	c9                   	leave  
   12b3a:	c3                   	ret    

00012b3b <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12b3b:	55                   	push   %ebp
   12b3c:	89 e5                	mov    %esp,%ebp
   12b3e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12b41:	83 ec 08             	sub    $0x8,%esp
   12b44:	68 2d 68 01 00       	push   $0x1682d
   12b49:	ff 75 08             	push   0x8(%ebp)
   12b4c:	e8 6b fc ff ff       	call   127bc <do_default_handler>
   12b51:	83 c4 10             	add    $0x10,%esp
}
   12b54:	90                   	nop
   12b55:	c9                   	leave  
   12b56:	c3                   	ret    

00012b57 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12b57:	55                   	push   %ebp
   12b58:	89 e5                	mov    %esp,%ebp
   12b5a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12b5d:	83 ec 08             	sub    $0x8,%esp
   12b60:	68 46 68 01 00       	push   $0x16846
   12b65:	ff 75 08             	push   0x8(%ebp)
   12b68:	e8 4f fc ff ff       	call   127bc <do_default_handler>
   12b6d:	83 c4 10             	add    $0x10,%esp
}
   12b70:	90                   	nop
   12b71:	c9                   	leave  
   12b72:	c3                   	ret    

00012b73 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12b73:	55                   	push   %ebp
   12b74:	89 e5                	mov    %esp,%ebp
   12b76:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12b79:	83 ec 08             	sub    $0x8,%esp
   12b7c:	68 63 68 01 00       	push   $0x16863
   12b81:	ff 75 08             	push   0x8(%ebp)
   12b84:	e8 33 fc ff ff       	call   127bc <do_default_handler>
   12b89:	83 c4 10             	add    $0x10,%esp
}
   12b8c:	90                   	nop
   12b8d:	c9                   	leave  
   12b8e:	c3                   	ret    

00012b8f <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12b8f:	55                   	push   %ebp
   12b90:	89 e5                	mov    %esp,%ebp
   12b92:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12b95:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12b9c:	7f 06                	jg     12ba4 <idt_install+0x15>
   12b9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ba2:	79 07                	jns    12bab <idt_install+0x1c>
   12ba4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12ba9:	eb 25                	jmp    12bd0 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12bab:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bae:	8b 55 08             	mov    0x8(%ebp),%edx
   12bb1:	c1 e2 03             	shl    $0x3,%edx
   12bb4:	81 c2 00 a6 03 00    	add    $0x3a600,%edx
   12bba:	68 00 8e 00 00       	push   $0x8e00
   12bbf:	50                   	push   %eax
   12bc0:	6a 08                	push   $0x8
   12bc2:	52                   	push   %edx
   12bc3:	e8 c1 f7 ff ff       	call   12389 <gate_desc_set>
   12bc8:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12bcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12bd0:	c9                   	leave  
   12bd1:	c3                   	ret    

00012bd2 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12bd2:	55                   	push   %ebp
   12bd3:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12bd5:	6a 11                	push   $0x11
   12bd7:	6a 20                	push   $0x20
   12bd9:	e8 5a fa ff ff       	call   12638 <outb>
   12bde:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12be1:	6a 20                	push   $0x20
   12be3:	6a 21                	push   $0x21
   12be5:	e8 4e fa ff ff       	call   12638 <outb>
   12bea:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12bed:	6a 04                	push   $0x4
   12bef:	6a 21                	push   $0x21
   12bf1:	e8 42 fa ff ff       	call   12638 <outb>
   12bf6:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12bf9:	6a 01                	push   $0x1
   12bfb:	6a 21                	push   $0x21
   12bfd:	e8 36 fa ff ff       	call   12638 <outb>
   12c02:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12c05:	6a 11                	push   $0x11
   12c07:	68 a0 00 00 00       	push   $0xa0
   12c0c:	e8 27 fa ff ff       	call   12638 <outb>
   12c11:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12c14:	6a 28                	push   $0x28
   12c16:	68 a1 00 00 00       	push   $0xa1
   12c1b:	e8 18 fa ff ff       	call   12638 <outb>
   12c20:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12c23:	6a 02                	push   $0x2
   12c25:	68 a1 00 00 00       	push   $0xa1
   12c2a:	e8 09 fa ff ff       	call   12638 <outb>
   12c2f:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12c32:	6a 01                	push   $0x1
   12c34:	68 a1 00 00 00       	push   $0xa1
   12c39:	e8 fa f9 ff ff       	call   12638 <outb>
   12c3e:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12c41:	68 fb 00 00 00       	push   $0xfb
   12c46:	6a 21                	push   $0x21
   12c48:	e8 eb f9 ff ff       	call   12638 <outb>
   12c4d:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12c50:	68 ff 00 00 00       	push   $0xff
   12c55:	68 a1 00 00 00       	push   $0xa1
   12c5a:	e8 d9 f9 ff ff       	call   12638 <outb>
   12c5f:	83 c4 08             	add    $0x8,%esp


}
   12c62:	90                   	nop
   12c63:	c9                   	leave  
   12c64:	c3                   	ret    

00012c65 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12c65:	55                   	push   %ebp
   12c66:	89 e5                	mov    %esp,%ebp
   12c68:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12c6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12c72:	eb 17                	jmp    12c8b <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12c74:	83 ec 08             	sub    $0x8,%esp
   12c77:	68 2a 00 01 00       	push   $0x1002a
   12c7c:	ff 75 f4             	push   -0xc(%ebp)
   12c7f:	e8 0b ff ff ff       	call   12b8f <idt_install>
   12c84:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12c87:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12c8b:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12c92:	7e e0                	jle    12c74 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12c94:	83 ec 08             	sub    $0x8,%esp
   12c97:	68 47 00 01 00       	push   $0x10047
   12c9c:	6a 00                	push   $0x0
   12c9e:	e8 ec fe ff ff       	call   12b8f <idt_install>
   12ca3:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12ca6:	83 ec 08             	sub    $0x8,%esp
   12ca9:	68 64 00 01 00       	push   $0x10064
   12cae:	6a 01                	push   $0x1
   12cb0:	e8 da fe ff ff       	call   12b8f <idt_install>
   12cb5:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12cb8:	83 ec 08             	sub    $0x8,%esp
   12cbb:	68 81 00 01 00       	push   $0x10081
   12cc0:	6a 02                	push   $0x2
   12cc2:	e8 c8 fe ff ff       	call   12b8f <idt_install>
   12cc7:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12cca:	83 ec 08             	sub    $0x8,%esp
   12ccd:	68 9e 00 01 00       	push   $0x1009e
   12cd2:	6a 03                	push   $0x3
   12cd4:	e8 b6 fe ff ff       	call   12b8f <idt_install>
   12cd9:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12cdc:	83 ec 08             	sub    $0x8,%esp
   12cdf:	68 bb 00 01 00       	push   $0x100bb
   12ce4:	6a 04                	push   $0x4
   12ce6:	e8 a4 fe ff ff       	call   12b8f <idt_install>
   12ceb:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12cee:	83 ec 08             	sub    $0x8,%esp
   12cf1:	68 d8 00 01 00       	push   $0x100d8
   12cf6:	6a 05                	push   $0x5
   12cf8:	e8 92 fe ff ff       	call   12b8f <idt_install>
   12cfd:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12d00:	83 ec 08             	sub    $0x8,%esp
   12d03:	68 f5 00 01 00       	push   $0x100f5
   12d08:	6a 06                	push   $0x6
   12d0a:	e8 80 fe ff ff       	call   12b8f <idt_install>
   12d0f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12d12:	83 ec 08             	sub    $0x8,%esp
   12d15:	68 12 01 01 00       	push   $0x10112
   12d1a:	6a 07                	push   $0x7
   12d1c:	e8 6e fe ff ff       	call   12b8f <idt_install>
   12d21:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12d24:	83 ec 08             	sub    $0x8,%esp
   12d27:	68 2f 01 01 00       	push   $0x1012f
   12d2c:	6a 08                	push   $0x8
   12d2e:	e8 5c fe ff ff       	call   12b8f <idt_install>
   12d33:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12d36:	83 ec 08             	sub    $0x8,%esp
   12d39:	68 4a 01 01 00       	push   $0x1014a
   12d3e:	6a 0a                	push   $0xa
   12d40:	e8 4a fe ff ff       	call   12b8f <idt_install>
   12d45:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12d48:	83 ec 08             	sub    $0x8,%esp
   12d4b:	68 65 01 01 00       	push   $0x10165
   12d50:	6a 0b                	push   $0xb
   12d52:	e8 38 fe ff ff       	call   12b8f <idt_install>
   12d57:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12d5a:	83 ec 08             	sub    $0x8,%esp
   12d5d:	68 80 01 01 00       	push   $0x10180
   12d62:	6a 0c                	push   $0xc
   12d64:	e8 26 fe ff ff       	call   12b8f <idt_install>
   12d69:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   12d6c:	83 ec 08             	sub    $0x8,%esp
   12d6f:	68 9b 01 01 00       	push   $0x1019b
   12d74:	6a 0d                	push   $0xd
   12d76:	e8 14 fe ff ff       	call   12b8f <idt_install>
   12d7b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12d7e:	83 ec 08             	sub    $0x8,%esp
   12d81:	68 b6 01 01 00       	push   $0x101b6
   12d86:	6a 0e                	push   $0xe
   12d88:	e8 02 fe ff ff       	call   12b8f <idt_install>
   12d8d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   12d90:	83 ec 08             	sub    $0x8,%esp
   12d93:	68 d1 01 01 00       	push   $0x101d1
   12d98:	6a 10                	push   $0x10
   12d9a:	e8 f0 fd ff ff       	call   12b8f <idt_install>
   12d9f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   12da2:	83 ec 08             	sub    $0x8,%esp
   12da5:	68 ee 01 01 00       	push   $0x101ee
   12daa:	6a 11                	push   $0x11
   12dac:	e8 de fd ff ff       	call   12b8f <idt_install>
   12db1:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   12db4:	83 ec 08             	sub    $0x8,%esp
   12db7:	68 09 02 01 00       	push   $0x10209
   12dbc:	6a 12                	push   $0x12
   12dbe:	e8 cc fd ff ff       	call   12b8f <idt_install>
   12dc3:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   12dc6:	83 ec 08             	sub    $0x8,%esp
   12dc9:	68 26 02 01 00       	push   $0x10226
   12dce:	6a 13                	push   $0x13
   12dd0:	e8 ba fd ff ff       	call   12b8f <idt_install>
   12dd5:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12dd8:	83 ec 08             	sub    $0x8,%esp
   12ddb:	68 43 02 01 00       	push   $0x10243
   12de0:	6a 14                	push   $0x14
   12de2:	e8 a8 fd ff ff       	call   12b8f <idt_install>
   12de7:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12dea:	83 ec 08             	sub    $0x8,%esp
   12ded:	68 60 02 01 00       	push   $0x10260
   12df2:	6a 15                	push   $0x15
   12df4:	e8 96 fd ff ff       	call   12b8f <idt_install>
   12df9:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12dfc:	b8 00 a6 03 00       	mov    $0x3a600,%eax
   12e01:	83 ec 08             	sub    $0x8,%esp
   12e04:	68 00 08 00 00       	push   $0x800
   12e09:	50                   	push   %eax
   12e0a:	e8 4a f8 ff ff       	call   12659 <lidt>
   12e0f:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12e12:	e8 bb fd ff ff       	call   12bd2 <init_pic>
}
   12e17:	90                   	nop
   12e18:	c9                   	leave  
   12e19:	c3                   	ret    

00012e1a <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12e1a:	55                   	push   %ebp
   12e1b:	89 e5                	mov    %esp,%ebp
   12e1d:	53                   	push   %ebx
   12e1e:	83 ec 14             	sub    $0x14,%esp
   12e21:	8b 45 08             	mov    0x8(%ebp),%eax
   12e24:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12e27:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12e2b:	76 7f                	jbe    12eac <idt_enable+0x92>
   12e2d:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12e31:	77 79                	ja     12eac <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12e33:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12e37:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12e3b:	77 33                	ja     12e70 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12e3d:	6a 21                	push   $0x21
   12e3f:	e8 d7 f7 ff ff       	call   1261b <inb>
   12e44:	83 c4 04             	add    $0x4,%esp
   12e47:	89 c3                	mov    %eax,%ebx
   12e49:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12e4d:	ba 01 00 00 00       	mov    $0x1,%edx
   12e52:	89 c1                	mov    %eax,%ecx
   12e54:	d3 e2                	shl    %cl,%edx
   12e56:	89 d0                	mov    %edx,%eax
   12e58:	f7 d0                	not    %eax
   12e5a:	21 d8                	and    %ebx,%eax
   12e5c:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12e5f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12e63:	50                   	push   %eax
   12e64:	6a 21                	push   $0x21
   12e66:	e8 cd f7 ff ff       	call   12638 <outb>
   12e6b:	83 c4 08             	add    $0x8,%esp
   12e6e:	eb 3d                	jmp    12ead <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   12e70:	68 a1 00 00 00       	push   $0xa1
   12e75:	e8 a1 f7 ff ff       	call   1261b <inb>
   12e7a:	83 c4 04             	add    $0x4,%esp
   12e7d:	89 c3                	mov    %eax,%ebx
   12e7f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12e83:	83 e8 08             	sub    $0x8,%eax
   12e86:	ba 01 00 00 00       	mov    $0x1,%edx
   12e8b:	89 c1                	mov    %eax,%ecx
   12e8d:	d3 e2                	shl    %cl,%edx
   12e8f:	89 d0                	mov    %edx,%eax
   12e91:	f7 d0                	not    %eax
   12e93:	21 d8                	and    %ebx,%eax
   12e95:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12e98:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12e9c:	50                   	push   %eax
   12e9d:	68 a1 00 00 00       	push   $0xa1
   12ea2:	e8 91 f7 ff ff       	call   12638 <outb>
   12ea7:	83 c4 08             	add    $0x8,%esp
   12eaa:	eb 01                	jmp    12ead <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12eac:	90                   	nop
  }
  
}
   12ead:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12eb0:	c9                   	leave  
   12eb1:	c3                   	ret    

00012eb2 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   12eb2:	55                   	push   %ebp
   12eb3:	89 e5                	mov    %esp,%ebp
   12eb5:	53                   	push   %ebx
   12eb6:	83 ec 14             	sub    $0x14,%esp
   12eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ebc:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12ebf:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12ec3:	76 7b                	jbe    12f40 <idt_disable+0x8e>
   12ec5:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12ec9:	77 75                	ja     12f40 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12ecb:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12ecf:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12ed3:	77 31                	ja     12f06 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12ed5:	6a 21                	push   $0x21
   12ed7:	e8 3f f7 ff ff       	call   1261b <inb>
   12edc:	83 c4 04             	add    $0x4,%esp
   12edf:	89 c3                	mov    %eax,%ebx
   12ee1:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12ee5:	ba 01 00 00 00       	mov    $0x1,%edx
   12eea:	89 c1                	mov    %eax,%ecx
   12eec:	d3 e2                	shl    %cl,%edx
   12eee:	89 d0                	mov    %edx,%eax
   12ef0:	09 d8                	or     %ebx,%eax
   12ef2:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12ef5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12ef9:	50                   	push   %eax
   12efa:	6a 21                	push   $0x21
   12efc:	e8 37 f7 ff ff       	call   12638 <outb>
   12f01:	83 c4 08             	add    $0x8,%esp
   12f04:	eb 3b                	jmp    12f41 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12f06:	68 a1 00 00 00       	push   $0xa1
   12f0b:	e8 0b f7 ff ff       	call   1261b <inb>
   12f10:	83 c4 04             	add    $0x4,%esp
   12f13:	89 c3                	mov    %eax,%ebx
   12f15:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12f19:	83 e8 08             	sub    $0x8,%eax
   12f1c:	ba 01 00 00 00       	mov    $0x1,%edx
   12f21:	89 c1                	mov    %eax,%ecx
   12f23:	d3 e2                	shl    %cl,%edx
   12f25:	89 d0                	mov    %edx,%eax
   12f27:	09 d8                	or     %ebx,%eax
   12f29:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12f2c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12f30:	50                   	push   %eax
   12f31:	68 a1 00 00 00       	push   $0xa1
   12f36:	e8 fd f6 ff ff       	call   12638 <outb>
   12f3b:	83 c4 08             	add    $0x8,%esp
   12f3e:	eb 01                	jmp    12f41 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12f40:	90                   	nop
  }
  
}
   12f41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12f44:	c9                   	leave  
   12f45:	c3                   	ret    

00012f46 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   12f46:	55                   	push   %ebp
   12f47:	89 e5                	mov    %esp,%ebp
  cli();
   12f49:	e8 b8 f6 ff ff       	call   12606 <cli>
}
   12f4e:	90                   	nop
   12f4f:	5d                   	pop    %ebp
   12f50:	c3                   	ret    

00012f51 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   12f51:	55                   	push   %ebp
   12f52:	89 e5                	mov    %esp,%ebp
  sti();
   12f54:	e8 b4 f6 ff ff       	call   1260d <sti>
}
   12f59:	90                   	nop
   12f5a:	5d                   	pop    %ebp
   12f5b:	c3                   	ret    

00012f5c <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   12f5c:	55                   	push   %ebp
   12f5d:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   12f5f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   12f63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f67:	78 29                	js     12f92 <pic_send_eoi+0x36>
   12f69:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   12f6d:	7f 23                	jg     12f92 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   12f6f:	6a 20                	push   $0x20
   12f71:	6a 20                	push   $0x20
   12f73:	e8 c0 f6 ff ff       	call   12638 <outb>
   12f78:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   12f7b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12f7f:	7e 12                	jle    12f93 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   12f81:	6a 20                	push   $0x20
   12f83:	68 a0 00 00 00       	push   $0xa0
   12f88:	e8 ab f6 ff ff       	call   12638 <outb>
   12f8d:	83 c4 08             	add    $0x8,%esp
   12f90:	eb 01                	jmp    12f93 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   12f92:	90                   	nop
  }

}
   12f93:	c9                   	leave  
   12f94:	c3                   	ret    

00012f95 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   12f95:	55                   	push   %ebp
   12f96:	89 e5                	mov    %esp,%ebp
   12f98:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   12f9b:	e8 f2 f6 ff ff       	call   12692 <read_eflags>
   12fa0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   12fa3:	e8 9e ff ff ff       	call   12f46 <idt_disable_global>
  return state;;
   12fa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12fab:	c9                   	leave  
   12fac:	c3                   	ret    

00012fad <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   12fad:	55                   	push   %ebp
   12fae:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   12fb0:	ff 75 08             	push   0x8(%ebp)
   12fb3:	e8 ea f6 ff ff       	call   126a2 <write_eflags>
   12fb8:	83 c4 04             	add    $0x4,%esp
}
   12fbb:	90                   	nop
   12fbc:	c9                   	leave  
   12fbd:	c3                   	ret    

00012fbe <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   12fbe:	55                   	push   %ebp
   12fbf:	89 e5                	mov    %esp,%ebp
   12fc1:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   12fc4:	83 ec 08             	sub    $0x8,%esp
   12fc7:	ff 75 0c             	push   0xc(%ebp)
   12fca:	ff 75 08             	push   0x8(%ebp)
   12fcd:	e8 e8 2d 00 00       	call   15dba <log_printf>
   12fd2:	83 c4 10             	add    $0x10,%esp
}
   12fd5:	90                   	nop
   12fd6:	c9                   	leave  
   12fd7:	c3                   	ret    

00012fd8 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   12fd8:	55                   	push   %ebp
   12fd9:	89 e5                	mov    %esp,%ebp
   12fdb:	53                   	push   %ebx
   12fdc:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12fdf:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe2:	8b 40 3c             	mov    0x3c(%eax),%eax
   12fe5:	83 f8 39             	cmp    $0x39,%eax
   12fe8:	77 48                	ja     13032 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   12fea:	8b 45 08             	mov    0x8(%ebp),%eax
   12fed:	8b 40 3c             	mov    0x3c(%eax),%eax
   12ff0:	8b 04 85 80 68 01 00 	mov    0x16880(,%eax,4),%eax
   12ff7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   12ffa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12ffe:	74 32                	je     13032 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   13000:	8b 45 08             	mov    0x8(%ebp),%eax
   13003:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13006:	8b 45 08             	mov    0x8(%ebp),%eax
   13009:	8b 48 48             	mov    0x48(%eax),%ecx
   1300c:	8b 45 08             	mov    0x8(%ebp),%eax
   1300f:	8b 50 44             	mov    0x44(%eax),%edx
   13012:	8b 45 08             	mov    0x8(%ebp),%eax
   13015:	8b 40 40             	mov    0x40(%eax),%eax
   13018:	53                   	push   %ebx
   13019:	51                   	push   %ecx
   1301a:	52                   	push   %edx
   1301b:	50                   	push   %eax
   1301c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1301f:	ff d0                	call   *%eax
   13021:	83 c4 10             	add    $0x10,%esp
   13024:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   13027:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1302a:	8b 45 08             	mov    0x8(%ebp),%eax
   1302d:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   13030:	eb 30                	jmp    13062 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   13032:	e8 83 e8 ff ff       	call   118ba <task_current>
   13037:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   1303a:	8b 45 08             	mov    0x8(%ebp),%eax
   1303d:	8b 40 3c             	mov    0x3c(%eax),%eax
   13040:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13043:	83 c2 20             	add    $0x20,%edx
   13046:	83 ec 04             	sub    $0x4,%esp
   13049:	50                   	push   %eax
   1304a:	52                   	push   %edx
   1304b:	68 68 69 01 00       	push   $0x16968
   13050:	e8 65 2d 00 00       	call   15dba <log_printf>
   13055:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   13058:	8b 45 08             	mov    0x8(%ebp),%eax
   1305b:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   13062:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13065:	c9                   	leave  
   13066:	c3                   	ret    

00013067 <inb>:
static inline uint8_t inb(uint16_t port) {
   13067:	55                   	push   %ebp
   13068:	89 e5                	mov    %esp,%ebp
   1306a:	83 ec 14             	sub    $0x14,%esp
   1306d:	8b 45 08             	mov    0x8(%ebp),%eax
   13070:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13074:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13078:	89 c2                	mov    %eax,%edx
   1307a:	ec                   	in     (%dx),%al
   1307b:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1307e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13082:	c9                   	leave  
   13083:	c3                   	ret    

00013084 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13084:	55                   	push   %ebp
   13085:	89 e5                	mov    %esp,%ebp
   13087:	83 ec 08             	sub    $0x8,%esp
   1308a:	8b 45 08             	mov    0x8(%ebp),%eax
   1308d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13090:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13094:	89 d0                	mov    %edx,%eax
   13096:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13099:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1309d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   130a1:	ee                   	out    %al,(%dx)
}
   130a2:	90                   	nop
   130a3:	c9                   	leave  
   130a4:	c3                   	ret    

000130a5 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   130a5:	55                   	push   %ebp
   130a6:	89 e5                	mov    %esp,%ebp
   130a8:	83 ec 10             	sub    $0x10,%esp
  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   130ab:	6a 0f                	push   $0xf
   130ad:	68 d4 03 00 00       	push   $0x3d4
   130b2:	e8 cd ff ff ff       	call   13084 <outb>
   130b7:	83 c4 08             	add    $0x8,%esp
  pos = inb(0x3d5);
   130ba:	68 d5 03 00 00       	push   $0x3d5
   130bf:	e8 a3 ff ff ff       	call   13067 <inb>
   130c4:	83 c4 04             	add    $0x4,%esp
   130c7:	0f b6 c0             	movzbl %al,%eax
   130ca:	89 45 fc             	mov    %eax,-0x4(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   130cd:	6a 0e                	push   $0xe
   130cf:	68 d4 03 00 00       	push   $0x3d4
   130d4:	e8 ab ff ff ff       	call   13084 <outb>
   130d9:	83 c4 08             	add    $0x8,%esp
  pos |= inb(0x3d5) << 8;
   130dc:	68 d5 03 00 00       	push   $0x3d5
   130e1:	e8 81 ff ff ff       	call   13067 <inb>
   130e6:	83 c4 04             	add    $0x4,%esp
   130e9:	0f b6 c0             	movzbl %al,%eax
   130ec:	c1 e0 08             	shl    $0x8,%eax
   130ef:	09 45 fc             	or     %eax,-0x4(%ebp)

  return pos;
   130f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   130f5:	c9                   	leave  
   130f6:	c3                   	ret    

000130f7 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   130f7:	55                   	push   %ebp
   130f8:	89 e5                	mov    %esp,%ebp
   130fa:	83 ec 10             	sub    $0x10,%esp
  uint16_t pos = console->cursor_row * console->display_cols +
   130fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13100:	8b 40 10             	mov    0x10(%eax),%eax
   13103:	89 c2                	mov    %eax,%edx
   13105:	8b 45 08             	mov    0x8(%ebp),%eax
   13108:	8b 40 0c             	mov    0xc(%eax),%eax
   1310b:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   1310e:	8b 45 08             	mov    0x8(%ebp),%eax
   13111:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13114:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   13116:	8b 45 08             	mov    0x8(%ebp),%eax
   13119:	8b 40 04             	mov    0x4(%eax),%eax
   1311c:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   13121:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13123:	01 d0                	add    %edx,%eax
   13125:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13129:	6a 0f                	push   $0xf
   1312b:	68 d4 03 00 00       	push   $0x3d4
   13130:	e8 4f ff ff ff       	call   13084 <outb>
   13135:	83 c4 08             	add    $0x8,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   13138:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   1313c:	0f b6 c0             	movzbl %al,%eax
   1313f:	50                   	push   %eax
   13140:	68 d5 03 00 00       	push   $0x3d5
   13145:	e8 3a ff ff ff       	call   13084 <outb>
   1314a:	83 c4 08             	add    $0x8,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   1314d:	6a 0e                	push   $0xe
   1314f:	68 d4 03 00 00       	push   $0x3d4
   13154:	e8 2b ff ff ff       	call   13084 <outb>
   13159:	83 c4 08             	add    $0x8,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   1315c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   13160:	66 c1 e8 08          	shr    $0x8,%ax
   13164:	0f b6 c0             	movzbl %al,%eax
   13167:	50                   	push   %eax
   13168:	68 d5 03 00 00       	push   $0x3d5
   1316d:	e8 12 ff ff ff       	call   13084 <outb>
   13172:	83 c4 08             	add    $0x8,%esp

  return pos;
   13175:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   13179:	c9                   	leave  
   1317a:	c3                   	ret    

0001317b <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   1317b:	55                   	push   %ebp
   1317c:	89 e5                	mov    %esp,%ebp
   1317e:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   13181:	8b 45 08             	mov    0x8(%ebp),%eax
   13184:	8b 48 04             	mov    0x4(%eax),%ecx
   13187:	8b 45 08             	mov    0x8(%ebp),%eax
   1318a:	8b 50 0c             	mov    0xc(%eax),%edx
   1318d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13190:	0f af c2             	imul   %edx,%eax
   13193:	01 c0                	add    %eax,%eax
   13195:	01 c8                	add    %ecx,%eax
   13197:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   1319a:	8b 45 08             	mov    0x8(%ebp),%eax
   1319d:	8b 48 04             	mov    0x4(%eax),%ecx
   131a0:	8b 45 08             	mov    0x8(%ebp),%eax
   131a3:	8b 40 0c             	mov    0xc(%eax),%eax
   131a6:	8b 55 10             	mov    0x10(%ebp),%edx
   131a9:	83 c2 01             	add    $0x1,%edx
   131ac:	0f af c2             	imul   %edx,%eax
   131af:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   131b1:	01 c8                	add    %ecx,%eax
   131b3:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   131b6:	eb 4d                	jmp    13205 <erase_rows+0x8a>
    disp_start->c = ' ';
   131b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131bb:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = console->foreground;
   131be:	8b 45 08             	mov    0x8(%ebp),%eax
   131c1:	8b 40 18             	mov    0x18(%eax),%eax
   131c4:	c1 e0 04             	shl    $0x4,%eax
   131c7:	c0 f8 04             	sar    $0x4,%al
   131ca:	8b 55 fc             	mov    -0x4(%ebp),%edx
   131cd:	83 e0 0f             	and    $0xf,%eax
   131d0:	89 c1                	mov    %eax,%ecx
   131d2:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   131d6:	83 e0 f0             	and    $0xfffffff0,%eax
   131d9:	09 c8                	or     %ecx,%eax
   131db:	88 42 01             	mov    %al,0x1(%edx)
    disp_start->background = console->background;
   131de:	8b 45 08             	mov    0x8(%ebp),%eax
   131e1:	8b 40 1c             	mov    0x1c(%eax),%eax
   131e4:	c1 e0 05             	shl    $0x5,%eax
   131e7:	c0 f8 05             	sar    $0x5,%al
   131ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
   131ed:	83 e0 07             	and    $0x7,%eax
   131f0:	c1 e0 04             	shl    $0x4,%eax
   131f3:	89 c1                	mov    %eax,%ecx
   131f5:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   131f9:	83 e0 8f             	and    $0xffffff8f,%eax
   131fc:	09 c8                	or     %ecx,%eax
   131fe:	88 42 01             	mov    %al,0x1(%edx)

    disp_start++;
   13201:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   13205:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13208:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1320b:	72 ab                	jb     131b8 <erase_rows+0x3d>
  }
}
   1320d:	90                   	nop
   1320e:	90                   	nop
   1320f:	c9                   	leave  
   13210:	c3                   	ret    

00013211 <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   13211:	55                   	push   %ebp
   13212:	89 e5                	mov    %esp,%ebp
   13214:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   13217:	8b 45 08             	mov    0x8(%ebp),%eax
   1321a:	8b 40 04             	mov    0x4(%eax),%eax
   1321d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   13220:	8b 45 08             	mov    0x8(%ebp),%eax
   13223:	8b 48 04             	mov    0x4(%eax),%ecx
   13226:	8b 45 08             	mov    0x8(%ebp),%eax
   13229:	8b 50 0c             	mov    0xc(%eax),%edx
   1322c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1322f:	0f af c2             	imul   %edx,%eax
   13232:	01 c0                	add    %eax,%eax
   13234:	01 c8                	add    %ecx,%eax
   13236:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   13239:	8b 45 08             	mov    0x8(%ebp),%eax
   1323c:	8b 40 08             	mov    0x8(%eax),%eax
   1323f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13242:	29 c8                	sub    %ecx,%eax
   13244:	89 c2                	mov    %eax,%edx
   13246:	8b 45 08             	mov    0x8(%ebp),%eax
   13249:	8b 40 0c             	mov    0xc(%eax),%eax
   1324c:	0f af c2             	imul   %edx,%eax
   1324f:	01 c0                	add    %eax,%eax
   13251:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   13254:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13257:	83 ec 04             	sub    $0x4,%esp
   1325a:	50                   	push   %eax
   1325b:	ff 75 f0             	push   -0x10(%ebp)
   1325e:	ff 75 f4             	push   -0xc(%ebp)
   13261:	e8 08 23 00 00       	call   1556e <kernel_memcpy>
   13266:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13269:	8b 45 08             	mov    0x8(%ebp),%eax
   1326c:	8b 40 08             	mov    0x8(%eax),%eax
   1326f:	83 e8 01             	sub    $0x1,%eax
   13272:	89 c2                	mov    %eax,%edx
   13274:	8b 45 08             	mov    0x8(%ebp),%eax
   13277:	8b 40 08             	mov    0x8(%eax),%eax
   1327a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   1327d:	29 c8                	sub    %ecx,%eax
   1327f:	83 ec 04             	sub    $0x4,%esp
   13282:	52                   	push   %edx
   13283:	50                   	push   %eax
   13284:	ff 75 08             	push   0x8(%ebp)
   13287:	e8 ef fe ff ff       	call   1317b <erase_rows>
   1328c:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   1328f:	8b 45 08             	mov    0x8(%ebp),%eax
   13292:	8b 40 10             	mov    0x10(%eax),%eax
   13295:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13298:	29 c8                	sub    %ecx,%eax
   1329a:	89 c2                	mov    %eax,%edx
   1329c:	8b 45 08             	mov    0x8(%ebp),%eax
   1329f:	89 50 10             	mov    %edx,0x10(%eax)
}
   132a2:	90                   	nop
   132a3:	c9                   	leave  
   132a4:	c3                   	ret    

000132a5 <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   132a5:	55                   	push   %ebp
   132a6:	89 e5                	mov    %esp,%ebp
   132a8:	8b 45 08             	mov    0x8(%ebp),%eax
   132ab:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   132b2:	90                   	nop
   132b3:	5d                   	pop    %ebp
   132b4:	c3                   	ret    

000132b5 <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   132b5:	55                   	push   %ebp
   132b6:	89 e5                	mov    %esp,%ebp
   132b8:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   132bb:	8b 45 08             	mov    0x8(%ebp),%eax
   132be:	8b 40 10             	mov    0x10(%eax),%eax
   132c1:	8d 50 01             	lea    0x1(%eax),%edx
   132c4:	8b 45 08             	mov    0x8(%ebp),%eax
   132c7:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   132ca:	8b 45 08             	mov    0x8(%ebp),%eax
   132cd:	8b 50 10             	mov    0x10(%eax),%edx
   132d0:	8b 45 08             	mov    0x8(%ebp),%eax
   132d3:	8b 40 08             	mov    0x8(%eax),%eax
   132d6:	39 c2                	cmp    %eax,%edx
   132d8:	72 10                	jb     132ea <move_to_next_line+0x35>
    scroll_up(console, 1);
   132da:	83 ec 08             	sub    $0x8,%esp
   132dd:	6a 01                	push   $0x1
   132df:	ff 75 08             	push   0x8(%ebp)
   132e2:	e8 2a ff ff ff       	call   13211 <scroll_up>
   132e7:	83 c4 10             	add    $0x10,%esp
  }
}
   132ea:	90                   	nop
   132eb:	c9                   	leave  
   132ec:	c3                   	ret    

000132ed <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   132ed:	55                   	push   %ebp
   132ee:	89 e5                	mov    %esp,%ebp
   132f0:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   132f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   132fa:	eb 5c                	jmp    13358 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   132fc:	8b 45 08             	mov    0x8(%ebp),%eax
   132ff:	8b 40 14             	mov    0x14(%eax),%eax
   13302:	8d 50 01             	lea    0x1(%eax),%edx
   13305:	8b 45 08             	mov    0x8(%ebp),%eax
   13308:	89 50 14             	mov    %edx,0x14(%eax)
   1330b:	8b 45 08             	mov    0x8(%ebp),%eax
   1330e:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   13311:	8b 45 08             	mov    0x8(%ebp),%eax
   13314:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   13317:	39 c2                	cmp    %eax,%edx
   13319:	72 39                	jb     13354 <move_forward+0x67>
      console->cursor_row++;
   1331b:	8b 45 08             	mov    0x8(%ebp),%eax
   1331e:	8b 40 10             	mov    0x10(%eax),%eax
   13321:	8d 50 01             	lea    0x1(%eax),%edx
   13324:	8b 45 08             	mov    0x8(%ebp),%eax
   13327:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   1332a:	8b 45 08             	mov    0x8(%ebp),%eax
   1332d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   13334:	8b 45 08             	mov    0x8(%ebp),%eax
   13337:	8b 50 10             	mov    0x10(%eax),%edx
   1333a:	8b 45 08             	mov    0x8(%ebp),%eax
   1333d:	8b 40 08             	mov    0x8(%eax),%eax
   13340:	39 c2                	cmp    %eax,%edx
   13342:	72 10                	jb     13354 <move_forward+0x67>
        scroll_up(console, 1);
   13344:	83 ec 08             	sub    $0x8,%esp
   13347:	6a 01                	push   $0x1
   13349:	ff 75 08             	push   0x8(%ebp)
   1334c:	e8 c0 fe ff ff       	call   13211 <scroll_up>
   13351:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   13354:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13358:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1335b:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1335e:	7c 9c                	jl     132fc <move_forward+0xf>
      }
    }
  }
}
   13360:	90                   	nop
   13361:	90                   	nop
   13362:	c9                   	leave  
   13363:	c3                   	ret    

00013364 <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   13364:	55                   	push   %ebp
   13365:	89 e5                	mov    %esp,%ebp
   13367:	83 ec 28             	sub    $0x28,%esp
   1336a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1336d:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   13370:	8b 45 08             	mov    0x8(%ebp),%eax
   13373:	8b 48 14             	mov    0x14(%eax),%ecx
   13376:	8b 45 08             	mov    0x8(%ebp),%eax
   13379:	8b 50 10             	mov    0x10(%eax),%edx
   1337c:	8b 45 08             	mov    0x8(%ebp),%eax
   1337f:	8b 40 0c             	mov    0xc(%eax),%eax
   13382:	0f af c2             	imul   %edx,%eax
   13385:	01 c8                	add    %ecx,%eax
  int offset =
   13387:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   1338a:	8b 45 08             	mov    0x8(%ebp),%eax
   1338d:	8b 50 04             	mov    0x4(%eax),%edx
   13390:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13393:	01 c0                	add    %eax,%eax
   13395:	01 d0                	add    %edx,%eax
   13397:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   1339a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1339d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   133a1:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   133a3:	8b 45 08             	mov    0x8(%ebp),%eax
   133a6:	8b 40 18             	mov    0x18(%eax),%eax
   133a9:	c1 e0 04             	shl    $0x4,%eax
   133ac:	c0 f8 04             	sar    $0x4,%al
   133af:	8b 55 f0             	mov    -0x10(%ebp),%edx
   133b2:	83 e0 0f             	and    $0xf,%eax
   133b5:	89 c1                	mov    %eax,%ecx
   133b7:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133bb:	83 e0 f0             	and    $0xfffffff0,%eax
   133be:	09 c8                	or     %ecx,%eax
   133c0:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   133c3:	8b 45 08             	mov    0x8(%ebp),%eax
   133c6:	8b 40 1c             	mov    0x1c(%eax),%eax
   133c9:	c1 e0 05             	shl    $0x5,%eax
   133cc:	c0 f8 05             	sar    $0x5,%al
   133cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
   133d2:	83 e0 07             	and    $0x7,%eax
   133d5:	c1 e0 04             	shl    $0x4,%eax
   133d8:	89 c1                	mov    %eax,%ecx
   133da:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133de:	83 e0 8f             	and    $0xffffff8f,%eax
   133e1:	09 c8                	or     %ecx,%eax
   133e3:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   133e6:	83 ec 08             	sub    $0x8,%esp
   133e9:	6a 01                	push   $0x1
   133eb:	ff 75 08             	push   0x8(%ebp)
   133ee:	e8 fa fe ff ff       	call   132ed <move_forward>
   133f3:	83 c4 10             	add    $0x10,%esp
}
   133f6:	90                   	nop
   133f7:	c9                   	leave  
   133f8:	c3                   	ret    

000133f9 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   133f9:	55                   	push   %ebp
   133fa:	89 e5                	mov    %esp,%ebp
   133fc:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   133ff:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13406:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1340d:	eb 55                	jmp    13464 <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   1340f:	8b 45 08             	mov    0x8(%ebp),%eax
   13412:	8b 40 14             	mov    0x14(%eax),%eax
   13415:	85 c0                	test   %eax,%eax
   13417:	74 18                	je     13431 <move_backword+0x38>
      console->cursor_col--;
   13419:	8b 45 08             	mov    0x8(%ebp),%eax
   1341c:	8b 40 14             	mov    0x14(%eax),%eax
   1341f:	8d 50 ff             	lea    -0x1(%eax),%edx
   13422:	8b 45 08             	mov    0x8(%ebp),%eax
   13425:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13428:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1342f:	eb 2f                	jmp    13460 <move_backword+0x67>
    } else if (console->cursor_row >
   13431:	8b 45 08             	mov    0x8(%ebp),%eax
   13434:	8b 40 10             	mov    0x10(%eax),%eax
   13437:	85 c0                	test   %eax,%eax
   13439:	74 25                	je     13460 <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   1343b:	8b 45 08             	mov    0x8(%ebp),%eax
   1343e:	8b 40 10             	mov    0x10(%eax),%eax
   13441:	8d 50 ff             	lea    -0x1(%eax),%edx
   13444:	8b 45 08             	mov    0x8(%ebp),%eax
   13447:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   1344a:	8b 45 08             	mov    0x8(%ebp),%eax
   1344d:	8b 40 0c             	mov    0xc(%eax),%eax
   13450:	8d 50 ff             	lea    -0x1(%eax),%edx
   13453:	8b 45 08             	mov    0x8(%ebp),%eax
   13456:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13459:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13460:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13464:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13467:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1346a:	7c a3                	jl     1340f <move_backword+0x16>
    }
  }

  return status;
   1346c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1346f:	c9                   	leave  
   13470:	c3                   	ret    

00013471 <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   13471:	55                   	push   %ebp
   13472:	89 e5                	mov    %esp,%ebp
   13474:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   13477:	6a 01                	push   $0x1
   13479:	ff 75 08             	push   0x8(%ebp)
   1347c:	e8 78 ff ff ff       	call   133f9 <move_backword>
   13481:	83 c4 08             	add    $0x8,%esp
   13484:	85 c0                	test   %eax,%eax
   13486:	75 20                	jne    134a8 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   13488:	83 ec 08             	sub    $0x8,%esp
   1348b:	6a 20                	push   $0x20
   1348d:	ff 75 08             	push   0x8(%ebp)
   13490:	e8 cf fe ff ff       	call   13364 <show_char>
   13495:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   13498:	83 ec 08             	sub    $0x8,%esp
   1349b:	6a 01                	push   $0x1
   1349d:	ff 75 08             	push   0x8(%ebp)
   134a0:	e8 54 ff ff ff       	call   133f9 <move_backword>
   134a5:	83 c4 10             	add    $0x10,%esp
  }
}
   134a8:	90                   	nop
   134a9:	c9                   	leave  
   134aa:	c3                   	ret    

000134ab <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   134ab:	55                   	push   %ebp
   134ac:	89 e5                	mov    %esp,%ebp
   134ae:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   134b1:	8b 45 08             	mov    0x8(%ebp),%eax
   134b4:	8b 50 0c             	mov    0xc(%eax),%edx
   134b7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ba:	8b 40 08             	mov    0x8(%eax),%eax
   134bd:	0f af c2             	imul   %edx,%eax
   134c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   134c3:	8b 45 08             	mov    0x8(%ebp),%eax
   134c6:	8b 40 04             	mov    0x4(%eax),%eax
   134c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   134cc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   134d3:	eb 51                	jmp    13526 <clear_display+0x7b>
    start->c = ' ';
   134d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134d8:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   134db:	8b 45 08             	mov    0x8(%ebp),%eax
   134de:	8b 40 18             	mov    0x18(%eax),%eax
   134e1:	c1 e0 04             	shl    $0x4,%eax
   134e4:	c0 f8 04             	sar    $0x4,%al
   134e7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   134ea:	83 e0 0f             	and    $0xf,%eax
   134ed:	89 c1                	mov    %eax,%ecx
   134ef:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   134f3:	83 e0 f0             	and    $0xfffffff0,%eax
   134f6:	09 c8                	or     %ecx,%eax
   134f8:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   134fb:	8b 45 08             	mov    0x8(%ebp),%eax
   134fe:	8b 40 1c             	mov    0x1c(%eax),%eax
   13501:	c1 e0 05             	shl    $0x5,%eax
   13504:	c0 f8 05             	sar    $0x5,%al
   13507:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1350a:	83 e0 07             	and    $0x7,%eax
   1350d:	c1 e0 04             	shl    $0x4,%eax
   13510:	89 c1                	mov    %eax,%ecx
   13512:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13516:	83 e0 8f             	and    $0xffffff8f,%eax
   13519:	09 c8                	or     %ecx,%eax
   1351b:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   1351e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13522:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   13526:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13529:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   1352c:	7c a7                	jl     134d5 <clear_display+0x2a>
  }
}
   1352e:	90                   	nop
   1352f:	90                   	nop
   13530:	c9                   	leave  
   13531:	c3                   	ret    

00013532 <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   13532:	55                   	push   %ebp
   13533:	89 e5                	mov    %esp,%ebp
   13535:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_buf + index;
   13538:	8b 45 08             	mov    0x8(%ebp),%eax
   1353b:	6b c0 54             	imul   $0x54,%eax,%eax
   1353e:	05 00 ae 03 00       	add    $0x3ae00,%eax
   13543:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   13546:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13549:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   13550:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13553:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   1355a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1355d:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   13564:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13567:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   1356e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13572:	75 38                	jne    135ac <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   13574:	e8 2c fb ff ff       	call   130a5 <read_cursor_pos>
   13579:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   1357c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1357f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13582:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13585:	ba 00 00 00 00       	mov    $0x0,%edx
   1358a:	f7 f1                	div    %ecx
   1358c:	89 c2                	mov    %eax,%edx
   1358e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13591:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   13594:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13597:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1359a:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1359d:	ba 00 00 00 00       	mov    $0x0,%edx
   135a2:	f7 f1                	div    %ecx
   135a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135a7:	89 50 14             	mov    %edx,0x14(%eax)
   135aa:	eb 2a                	jmp    135d6 <console_init+0xa4>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   135ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135af:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   135b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135b9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   135c0:	ff 75 f4             	push   -0xc(%ebp)
   135c3:	e8 e3 fe ff ff       	call   134ab <clear_display>
   135c8:	83 c4 04             	add    $0x4,%esp
    update_cursor_pos(console);
   135cb:	ff 75 f4             	push   -0xc(%ebp)
   135ce:	e8 24 fb ff ff       	call   130f7 <update_cursor_pos>
   135d3:	83 c4 04             	add    $0x4,%esp
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   135d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135d9:	8b 50 14             	mov    0x14(%eax),%edx
   135dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135df:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   135e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135e5:	8b 50 10             	mov    0x10(%eax),%edx
   135e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135eb:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   135ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135f1:	83 c0 28             	add    $0x28,%eax
   135f4:	83 ec 04             	sub    $0x4,%esp
   135f7:	6a 28                	push   $0x28
   135f9:	6a 00                	push   $0x0
   135fb:	50                   	push   %eax
   135fc:	e8 bc 1f 00 00       	call   155bd <kernel_memset>
   13601:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13604:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13607:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   1360e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13611:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13617:	8b 45 08             	mov    0x8(%ebp),%eax
   1361a:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13620:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13626:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13629:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  return 0;
   1362c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13631:	c9                   	leave  
   13632:	c3                   	ret    

00013633 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13633:	55                   	push   %ebp
   13634:	89 e5                	mov    %esp,%ebp
   13636:	83 ec 18             	sub    $0x18,%esp
   13639:	8b 45 0c             	mov    0xc(%ebp),%eax
   1363c:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   1363f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13643:	83 f8 7f             	cmp    $0x7f,%eax
   13646:	74 30                	je     13678 <write_normal+0x45>
   13648:	83 f8 7f             	cmp    $0x7f,%eax
   1364b:	7f 7b                	jg     136c8 <write_normal+0x95>
   1364d:	83 f8 1b             	cmp    $0x1b,%eax
   13650:	74 1b                	je     1366d <write_normal+0x3a>
   13652:	83 f8 1b             	cmp    $0x1b,%eax
   13655:	7f 71                	jg     136c8 <write_normal+0x95>
   13657:	83 f8 0d             	cmp    $0xd,%eax
   1365a:	74 3e                	je     1369a <write_normal+0x67>
   1365c:	83 f8 0d             	cmp    $0xd,%eax
   1365f:	7f 67                	jg     136c8 <write_normal+0x95>
   13661:	83 f8 08             	cmp    $0x8,%eax
   13664:	74 22                	je     13688 <write_normal+0x55>
   13666:	83 f8 0a             	cmp    $0xa,%eax
   13669:	74 3f                	je     136aa <write_normal+0x77>
   1366b:	eb 5b                	jmp    136c8 <write_normal+0x95>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   1366d:	8b 45 08             	mov    0x8(%ebp),%eax
   13670:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13676:	eb 70                	jmp    136e8 <write_normal+0xb5>
    case 0x7f:  // 退格
      erase_backword(console);
   13678:	83 ec 0c             	sub    $0xc,%esp
   1367b:	ff 75 08             	push   0x8(%ebp)
   1367e:	e8 ee fd ff ff       	call   13471 <erase_backword>
   13683:	83 c4 10             	add    $0x10,%esp
      break;
   13686:	eb 60                	jmp    136e8 <write_normal+0xb5>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13688:	83 ec 08             	sub    $0x8,%esp
   1368b:	6a 01                	push   $0x1
   1368d:	ff 75 08             	push   0x8(%ebp)
   13690:	e8 64 fd ff ff       	call   133f9 <move_backword>
   13695:	83 c4 10             	add    $0x10,%esp
      break;
   13698:	eb 4e                	jmp    136e8 <write_normal+0xb5>

    case '\r':  // 回车
      move_to_col0(console);
   1369a:	83 ec 0c             	sub    $0xc,%esp
   1369d:	ff 75 08             	push   0x8(%ebp)
   136a0:	e8 00 fc ff ff       	call   132a5 <move_to_col0>
   136a5:	83 c4 10             	add    $0x10,%esp
      break;
   136a8:	eb 3e                	jmp    136e8 <write_normal+0xb5>
    case '\n':  // 换行
      move_to_col0(console);
   136aa:	83 ec 0c             	sub    $0xc,%esp
   136ad:	ff 75 08             	push   0x8(%ebp)
   136b0:	e8 f0 fb ff ff       	call   132a5 <move_to_col0>
   136b5:	83 c4 10             	add    $0x10,%esp
      move_to_next_line(console);
   136b8:	83 ec 0c             	sub    $0xc,%esp
   136bb:	ff 75 08             	push   0x8(%ebp)
   136be:	e8 f2 fb ff ff       	call   132b5 <move_to_next_line>
   136c3:	83 c4 10             	add    $0x10,%esp
      break;
   136c6:	eb 20                	jmp    136e8 <write_normal+0xb5>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   136c8:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   136cc:	7e 19                	jle    136e7 <write_normal+0xb4>
   136ce:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   136d2:	74 13                	je     136e7 <write_normal+0xb4>
        show_char(console, c);
   136d4:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   136d8:	83 ec 08             	sub    $0x8,%esp
   136db:	50                   	push   %eax
   136dc:	ff 75 08             	push   0x8(%ebp)
   136df:	e8 80 fc ff ff       	call   13364 <show_char>
   136e4:	83 c4 10             	add    $0x10,%esp
      }
      break;
   136e7:	90                   	nop
  }
}
   136e8:	90                   	nop
   136e9:	c9                   	leave  
   136ea:	c3                   	ret    

000136eb <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   136eb:	55                   	push   %ebp
   136ec:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   136ee:	8b 45 08             	mov    0x8(%ebp),%eax
   136f1:	8b 50 14             	mov    0x14(%eax),%edx
   136f4:	8b 45 08             	mov    0x8(%ebp),%eax
   136f7:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   136fa:	8b 45 08             	mov    0x8(%ebp),%eax
   136fd:	8b 50 10             	mov    0x10(%eax),%edx
   13700:	8b 45 08             	mov    0x8(%ebp),%eax
   13703:	89 50 24             	mov    %edx,0x24(%eax)
}
   13706:	90                   	nop
   13707:	5d                   	pop    %ebp
   13708:	c3                   	ret    

00013709 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13709:	55                   	push   %ebp
   1370a:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   1370c:	8b 45 08             	mov    0x8(%ebp),%eax
   1370f:	8b 50 20             	mov    0x20(%eax),%edx
   13712:	8b 45 08             	mov    0x8(%ebp),%eax
   13715:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13718:	8b 45 08             	mov    0x8(%ebp),%eax
   1371b:	8b 50 24             	mov    0x24(%eax),%edx
   1371e:	8b 45 08             	mov    0x8(%ebp),%eax
   13721:	89 50 10             	mov    %edx,0x10(%eax)
}
   13724:	90                   	nop
   13725:	5d                   	pop    %ebp
   13726:	c3                   	ret    

00013727 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13727:	55                   	push   %ebp
   13728:	89 e5                	mov    %esp,%ebp
   1372a:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   1372d:	8b 45 08             	mov    0x8(%ebp),%eax
   13730:	83 c0 28             	add    $0x28,%eax
   13733:	83 ec 04             	sub    $0x4,%esp
   13736:	6a 28                	push   $0x28
   13738:	6a 00                	push   $0x0
   1373a:	50                   	push   %eax
   1373b:	e8 7d 1e 00 00       	call   155bd <kernel_memset>
   13740:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13743:	8b 45 08             	mov    0x8(%ebp),%eax
   13746:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   1374d:	90                   	nop
   1374e:	c9                   	leave  
   1374f:	c3                   	ret    

00013750 <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13750:	55                   	push   %ebp
   13751:	89 e5                	mov    %esp,%ebp
   13753:	83 ec 18             	sub    $0x18,%esp
   13756:	8b 45 0c             	mov    0xc(%ebp),%eax
   13759:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   1375c:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13760:	83 f8 5b             	cmp    $0x5b,%eax
   13763:	74 11                	je     13776 <write_esc+0x26>
   13765:	83 f8 5b             	cmp    $0x5b,%eax
   13768:	7f 55                	jg     137bf <write_esc+0x6f>
   1376a:	83 f8 37             	cmp    $0x37,%eax
   1376d:	74 20                	je     1378f <write_esc+0x3f>
   1376f:	83 f8 38             	cmp    $0x38,%eax
   13772:	74 34                	je     137a8 <write_esc+0x58>
   13774:	eb 49                	jmp    137bf <write_esc+0x6f>
    case '[':
      clear_esc_param(console);
   13776:	83 ec 0c             	sub    $0xc,%esp
   13779:	ff 75 08             	push   0x8(%ebp)
   1377c:	e8 a6 ff ff ff       	call   13727 <clear_esc_param>
   13781:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13784:	8b 45 08             	mov    0x8(%ebp),%eax
   13787:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   1378d:	eb 3a                	jmp    137c9 <write_esc+0x79>
    case '7':
      save_cursor(console);
   1378f:	83 ec 0c             	sub    $0xc,%esp
   13792:	ff 75 08             	push   0x8(%ebp)
   13795:	e8 51 ff ff ff       	call   136eb <save_cursor>
   1379a:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   1379d:	8b 45 08             	mov    0x8(%ebp),%eax
   137a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   137a6:	eb 21                	jmp    137c9 <write_esc+0x79>
    case '8':
      restore_cursor(console);
   137a8:	83 ec 0c             	sub    $0xc,%esp
   137ab:	ff 75 08             	push   0x8(%ebp)
   137ae:	e8 56 ff ff ff       	call   13709 <restore_cursor>
   137b3:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   137b6:	8b 45 08             	mov    0x8(%ebp),%eax
   137b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   137bf:	8b 45 08             	mov    0x8(%ebp),%eax
   137c2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   137c8:	90                   	nop
  }
}
   137c9:	90                   	nop
   137ca:	c9                   	leave  
   137cb:	c3                   	ret    

000137cc <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   137cc:	55                   	push   %ebp
   137cd:	89 e5                	mov    %esp,%ebp
   137cf:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   137d2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   137d9:	eb 78                	jmp    13853 <set_font_style+0x87>
    int param = console->esc_param[i];
   137db:	8b 45 08             	mov    0x8(%ebp),%eax
   137de:	8b 55 fc             	mov    -0x4(%ebp),%edx
   137e1:	83 c2 08             	add    $0x8,%edx
   137e4:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   137e8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   137eb:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   137ef:	7e 1b                	jle    1380c <set_font_style+0x40>
   137f1:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   137f5:	7f 15                	jg     1380c <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   137f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   137fa:	83 e8 1e             	sub    $0x1e,%eax
   137fd:	8b 14 85 a0 69 01 00 	mov    0x169a0(,%eax,4),%edx
   13804:	8b 45 08             	mov    0x8(%ebp),%eax
   13807:	89 50 18             	mov    %edx,0x18(%eax)
   1380a:	eb 43                	jmp    1384f <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   1380c:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13810:	7e 1b                	jle    1382d <set_font_style+0x61>
   13812:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13816:	7f 15                	jg     1382d <set_font_style+0x61>
      console->background = color_table[param - 40];
   13818:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1381b:	83 e8 28             	sub    $0x28,%eax
   1381e:	8b 14 85 a0 69 01 00 	mov    0x169a0(,%eax,4),%edx
   13825:	8b 45 08             	mov    0x8(%ebp),%eax
   13828:	89 50 1c             	mov    %edx,0x1c(%eax)
   1382b:	eb 22                	jmp    1384f <set_font_style+0x83>
    } else if (param == 39) {
   1382d:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13831:	75 0c                	jne    1383f <set_font_style+0x73>
      console->foreground = COLOR_White;
   13833:	8b 45 08             	mov    0x8(%ebp),%eax
   13836:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   1383d:	eb 10                	jmp    1384f <set_font_style+0x83>
    } else if (param == 49) {
   1383f:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13843:	75 0a                	jne    1384f <set_font_style+0x83>
      console->background = COLOR_Black;
   13845:	8b 45 08             	mov    0x8(%ebp),%eax
   13848:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   1384f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13853:	8b 45 08             	mov    0x8(%ebp),%eax
   13856:	8b 40 50             	mov    0x50(%eax),%eax
   13859:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1385c:	0f 8e 79 ff ff ff    	jle    137db <set_font_style+0xf>
    }
  }
}
   13862:	90                   	nop
   13863:	90                   	nop
   13864:	c9                   	leave  
   13865:	c3                   	ret    

00013866 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13866:	55                   	push   %ebp
   13867:	89 e5                	mov    %esp,%ebp
   13869:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   1386c:	8b 45 08             	mov    0x8(%ebp),%eax
   1386f:	8b 40 50             	mov    0x50(%eax),%eax
   13872:	85 c0                	test   %eax,%eax
   13874:	78 3c                	js     138b2 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13876:	8b 45 08             	mov    0x8(%ebp),%eax
   13879:	8b 40 28             	mov    0x28(%eax),%eax
   1387c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   1387f:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13883:	75 2e                	jne    138b3 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13885:	8b 45 08             	mov    0x8(%ebp),%eax
   13888:	8b 40 08             	mov    0x8(%eax),%eax
   1388b:	83 e8 01             	sub    $0x1,%eax
   1388e:	50                   	push   %eax
   1388f:	6a 00                	push   $0x0
   13891:	ff 75 08             	push   0x8(%ebp)
   13894:	e8 e2 f8 ff ff       	call   1317b <erase_rows>
   13899:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   1389c:	8b 45 08             	mov    0x8(%ebp),%eax
   1389f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   138a6:	8b 45 08             	mov    0x8(%ebp),%eax
   138a9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   138b0:	eb 01                	jmp    138b3 <erase_in_display+0x4d>
    return;
   138b2:	90                   	nop
  }
}
   138b3:	c9                   	leave  
   138b4:	c3                   	ret    

000138b5 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   138b5:	55                   	push   %ebp
   138b6:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   138b8:	8b 45 08             	mov    0x8(%ebp),%eax
   138bb:	8b 40 28             	mov    0x28(%eax),%eax
   138be:	89 c2                	mov    %eax,%edx
   138c0:	8b 45 08             	mov    0x8(%ebp),%eax
   138c3:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   138c6:	8b 45 08             	mov    0x8(%ebp),%eax
   138c9:	8b 40 2c             	mov    0x2c(%eax),%eax
   138cc:	89 c2                	mov    %eax,%edx
   138ce:	8b 45 08             	mov    0x8(%ebp),%eax
   138d1:	89 50 14             	mov    %edx,0x14(%eax)
}
   138d4:	90                   	nop
   138d5:	5d                   	pop    %ebp
   138d6:	c3                   	ret    

000138d7 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   138d7:	55                   	push   %ebp
   138d8:	89 e5                	mov    %esp,%ebp
   138da:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   138dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   138e1:	75 07                	jne    138ea <move_left+0x13>
    n = 1;
   138e3:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   138ea:	8b 45 08             	mov    0x8(%ebp),%eax
   138ed:	8b 40 14             	mov    0x14(%eax),%eax
   138f0:	8b 55 0c             	mov    0xc(%ebp),%edx
   138f3:	29 d0                	sub    %edx,%eax
   138f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   138f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   138fb:	ba 00 00 00 00       	mov    $0x0,%edx
   13900:	85 c0                	test   %eax,%eax
   13902:	0f 48 c2             	cmovs  %edx,%eax
   13905:	89 c2                	mov    %eax,%edx
   13907:	8b 45 08             	mov    0x8(%ebp),%eax
   1390a:	89 50 14             	mov    %edx,0x14(%eax)
}
   1390d:	90                   	nop
   1390e:	c9                   	leave  
   1390f:	c3                   	ret    

00013910 <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13910:	55                   	push   %ebp
   13911:	89 e5                	mov    %esp,%ebp
   13913:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13916:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1391a:	75 07                	jne    13923 <move_right+0x13>
    n = 1;
   1391c:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13923:	8b 45 08             	mov    0x8(%ebp),%eax
   13926:	8b 50 14             	mov    0x14(%eax),%edx
   13929:	8b 45 0c             	mov    0xc(%ebp),%eax
   1392c:	01 d0                	add    %edx,%eax
   1392e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13931:	8b 45 08             	mov    0x8(%ebp),%eax
   13934:	8b 50 0c             	mov    0xc(%eax),%edx
   13937:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1393a:	39 c2                	cmp    %eax,%edx
   1393c:	77 0b                	ja     13949 <move_right+0x39>
   1393e:	8b 45 08             	mov    0x8(%ebp),%eax
   13941:	8b 40 0c             	mov    0xc(%eax),%eax
   13944:	83 e8 01             	sub    $0x1,%eax
   13947:	eb 03                	jmp    1394c <move_right+0x3c>
   13949:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   1394c:	8b 55 08             	mov    0x8(%ebp),%edx
   1394f:	89 42 14             	mov    %eax,0x14(%edx)
}
   13952:	90                   	nop
   13953:	c9                   	leave  
   13954:	c3                   	ret    

00013955 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13955:	55                   	push   %ebp
   13956:	89 e5                	mov    %esp,%ebp
   13958:	83 ec 14             	sub    $0x14,%esp
   1395b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1395e:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13961:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13965:	7e 44                	jle    139ab <write_esc_square+0x56>
   13967:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   1396b:	7f 3e                	jg     139ab <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   1396d:	8b 45 08             	mov    0x8(%ebp),%eax
   13970:	8b 40 50             	mov    0x50(%eax),%eax
   13973:	83 c0 08             	add    $0x8,%eax
   13976:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1397d:	8b 45 08             	mov    0x8(%ebp),%eax
   13980:	01 d0                	add    %edx,%eax
   13982:	83 c0 08             	add    $0x8,%eax
   13985:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13988:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1398b:	8b 10                	mov    (%eax),%edx
   1398d:	89 d0                	mov    %edx,%eax
   1398f:	c1 e0 02             	shl    $0x2,%eax
   13992:	01 d0                	add    %edx,%eax
   13994:	01 c0                	add    %eax,%eax
   13996:	89 c2                	mov    %eax,%edx
   13998:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   1399c:	01 d0                	add    %edx,%eax
   1399e:	8d 50 d0             	lea    -0x30(%eax),%edx
   139a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   139a4:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   139a6:	e9 ab 00 00 00       	jmp    13a56 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   139ab:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   139af:	75 1f                	jne    139d0 <write_esc_square+0x7b>
   139b1:	8b 45 08             	mov    0x8(%ebp),%eax
   139b4:	8b 40 50             	mov    0x50(%eax),%eax
   139b7:	83 f8 09             	cmp    $0x9,%eax
   139ba:	7f 14                	jg     139d0 <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   139bc:	8b 45 08             	mov    0x8(%ebp),%eax
   139bf:	8b 40 50             	mov    0x50(%eax),%eax
   139c2:	8d 50 01             	lea    0x1(%eax),%edx
   139c5:	8b 45 08             	mov    0x8(%ebp),%eax
   139c8:	89 50 50             	mov    %edx,0x50(%eax)
   139cb:	e9 86 00 00 00       	jmp    13a56 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   139d0:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   139d4:	83 f8 6d             	cmp    $0x6d,%eax
   139d7:	74 25                	je     139fe <write_esc_square+0xa9>
   139d9:	83 f8 6d             	cmp    $0x6d,%eax
   139dc:	7f 6d                	jg     13a4b <write_esc_square+0xf6>
   139de:	83 f8 4a             	cmp    $0x4a,%eax
   139e1:	74 5d                	je     13a40 <write_esc_square+0xeb>
   139e3:	83 f8 4a             	cmp    $0x4a,%eax
   139e6:	7f 63                	jg     13a4b <write_esc_square+0xf6>
   139e8:	83 f8 48             	cmp    $0x48,%eax
   139eb:	74 46                	je     13a33 <write_esc_square+0xde>
   139ed:	83 f8 48             	cmp    $0x48,%eax
   139f0:	7f 59                	jg     13a4b <write_esc_square+0xf6>
   139f2:	83 f8 43             	cmp    $0x43,%eax
   139f5:	74 28                	je     13a1f <write_esc_square+0xca>
   139f7:	83 f8 44             	cmp    $0x44,%eax
   139fa:	74 0f                	je     13a0b <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   139fc:	eb 4d                	jmp    13a4b <write_esc_square+0xf6>
        set_font_style(console);
   139fe:	ff 75 08             	push   0x8(%ebp)
   13a01:	e8 c6 fd ff ff       	call   137cc <set_font_style>
   13a06:	83 c4 04             	add    $0x4,%esp
        break;
   13a09:	eb 41                	jmp    13a4c <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13a0b:	8b 45 08             	mov    0x8(%ebp),%eax
   13a0e:	8b 40 28             	mov    0x28(%eax),%eax
   13a11:	50                   	push   %eax
   13a12:	ff 75 08             	push   0x8(%ebp)
   13a15:	e8 bd fe ff ff       	call   138d7 <move_left>
   13a1a:	83 c4 08             	add    $0x8,%esp
        break;
   13a1d:	eb 2d                	jmp    13a4c <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   13a22:	8b 40 28             	mov    0x28(%eax),%eax
   13a25:	50                   	push   %eax
   13a26:	ff 75 08             	push   0x8(%ebp)
   13a29:	e8 e2 fe ff ff       	call   13910 <move_right>
   13a2e:	83 c4 08             	add    $0x8,%esp
        break;
   13a31:	eb 19                	jmp    13a4c <write_esc_square+0xf7>
        move_cursor(console);
   13a33:	ff 75 08             	push   0x8(%ebp)
   13a36:	e8 7a fe ff ff       	call   138b5 <move_cursor>
   13a3b:	83 c4 04             	add    $0x4,%esp
        break;
   13a3e:	eb 0c                	jmp    13a4c <write_esc_square+0xf7>
        erase_in_display(console);
   13a40:	ff 75 08             	push   0x8(%ebp)
   13a43:	e8 1e fe ff ff       	call   13866 <erase_in_display>
   13a48:	83 c4 04             	add    $0x4,%esp
        break;
   13a4b:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13a55:	90                   	nop
   13a56:	90                   	nop
   13a57:	c9                   	leave  
   13a58:	c3                   	ret    

00013a59 <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13a59:	55                   	push   %ebp
   13a5a:	89 e5                	mov    %esp,%ebp
   13a5c:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_buf + tty->console_index;
   13a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   13a62:	8b 00                	mov    (%eax),%eax
   13a64:	6b c0 54             	imul   $0x54,%eax,%eax
   13a67:	05 00 ae 03 00       	add    $0x3ae00,%eax
   13a6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13a6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13a76:	8b 45 08             	mov    0x8(%ebp),%eax
   13a79:	8d 50 04             	lea    0x4(%eax),%edx
   13a7c:	83 ec 08             	sub    $0x8,%esp
   13a7f:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13a82:	50                   	push   %eax
   13a83:	52                   	push   %edx
   13a84:	e8 30 09 00 00       	call   143b9 <tty_fifo_get>
   13a89:	83 c4 10             	add    $0x10,%esp
   13a8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13a8f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13a93:	79 13                	jns    13aa8 <console_write+0x4f>

    len++;
  } while (1);

  // 更新光标的位置
  update_cursor_pos(console);
   13a95:	83 ec 0c             	sub    $0xc,%esp
   13a98:	ff 75 f0             	push   -0x10(%ebp)
   13a9b:	e8 57 f6 ff ff       	call   130f7 <update_cursor_pos>
   13aa0:	83 c4 10             	add    $0x10,%esp
  return len;
   13aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13aa6:	eb 7e                	jmp    13b26 <console_write+0xcd>
    sem_notify(&tty->out_sem);
   13aa8:	8b 45 08             	mov    0x8(%ebp),%eax
   13aab:	83 c0 2c             	add    $0x2c,%eax
   13aae:	83 ec 0c             	sub    $0xc,%esp
   13ab1:	50                   	push   %eax
   13ab2:	e8 aa 11 00 00       	call   14c61 <sem_notify>
   13ab7:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13aba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13abd:	8b 00                	mov    (%eax),%eax
   13abf:	83 f8 02             	cmp    $0x2,%eax
   13ac2:	74 40                	je     13b04 <console_write+0xab>
   13ac4:	83 f8 02             	cmp    $0x2,%eax
   13ac7:	77 53                	ja     13b1c <console_write+0xc3>
   13ac9:	85 c0                	test   %eax,%eax
   13acb:	74 07                	je     13ad4 <console_write+0x7b>
   13acd:	83 f8 01             	cmp    $0x1,%eax
   13ad0:	74 1a                	je     13aec <console_write+0x93>
        break;
   13ad2:	eb 48                	jmp    13b1c <console_write+0xc3>
        write_normal(console, c);
   13ad4:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13ad8:	0f be c0             	movsbl %al,%eax
   13adb:	83 ec 08             	sub    $0x8,%esp
   13ade:	50                   	push   %eax
   13adf:	ff 75 f0             	push   -0x10(%ebp)
   13ae2:	e8 4c fb ff ff       	call   13633 <write_normal>
   13ae7:	83 c4 10             	add    $0x10,%esp
        break;
   13aea:	eb 31                	jmp    13b1d <console_write+0xc4>
        write_esc(console, c);
   13aec:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13af0:	0f be c0             	movsbl %al,%eax
   13af3:	83 ec 08             	sub    $0x8,%esp
   13af6:	50                   	push   %eax
   13af7:	ff 75 f0             	push   -0x10(%ebp)
   13afa:	e8 51 fc ff ff       	call   13750 <write_esc>
   13aff:	83 c4 10             	add    $0x10,%esp
        break;
   13b02:	eb 19                	jmp    13b1d <console_write+0xc4>
        write_esc_square(console, c);
   13b04:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13b08:	0f be c0             	movsbl %al,%eax
   13b0b:	83 ec 08             	sub    $0x8,%esp
   13b0e:	50                   	push   %eax
   13b0f:	ff 75 f0             	push   -0x10(%ebp)
   13b12:	e8 3e fe ff ff       	call   13955 <write_esc_square>
   13b17:	83 c4 10             	add    $0x10,%esp
        break;
   13b1a:	eb 01                	jmp    13b1d <console_write+0xc4>
        break;
   13b1c:	90                   	nop
    len++;
   13b1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13b21:	e9 50 ff ff ff       	jmp    13a76 <console_write+0x1d>
}
   13b26:	c9                   	leave  
   13b27:	c3                   	ret    

00013b28 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
   13b28:	55                   	push   %ebp
   13b29:	89 e5                	mov    %esp,%ebp
   13b2b:	90                   	nop
   13b2c:	5d                   	pop    %ebp
   13b2d:	c3                   	ret    

00013b2e <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   13b2e:	55                   	push   %ebp
   13b2f:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   13b31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b35:	78 06                	js     13b3d <is_dev_exist+0xf>
   13b37:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   13b3b:	7e 07                	jle    13b44 <is_dev_exist+0x16>
        return 0;
   13b3d:	b8 00 00 00 00       	mov    $0x0,%eax
   13b42:	eb 3c                	jmp    13b80 <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   13b44:	8b 55 08             	mov    0x8(%ebp),%edx
   13b47:	89 d0                	mov    %edx,%eax
   13b49:	c1 e0 02             	shl    $0x2,%eax
   13b4c:	01 d0                	add    %edx,%eax
   13b4e:	c1 e0 02             	shl    $0x2,%eax
   13b51:	05 b0 b0 03 00       	add    $0x3b0b0,%eax
   13b56:	8b 00                	mov    (%eax),%eax
   13b58:	85 c0                	test   %eax,%eax
   13b5a:	74 18                	je     13b74 <is_dev_exist+0x46>
   13b5c:	8b 55 08             	mov    0x8(%ebp),%edx
   13b5f:	89 d0                	mov    %edx,%eax
   13b61:	c1 e0 02             	shl    $0x2,%eax
   13b64:	01 d0                	add    %edx,%eax
   13b66:	c1 e0 02             	shl    $0x2,%eax
   13b69:	05 a0 b0 03 00       	add    $0x3b0a0,%eax
   13b6e:	8b 00                	mov    (%eax),%eax
   13b70:	85 c0                	test   %eax,%eax
   13b72:	75 07                	jne    13b7b <is_dev_exist+0x4d>
        return 0;
   13b74:	b8 00 00 00 00       	mov    $0x0,%eax
   13b79:	eb 05                	jmp    13b80 <is_dev_exist+0x52>
    }

    return 1;
   13b7b:	b8 01 00 00 00       	mov    $0x1,%eax
}
   13b80:	5d                   	pop    %ebp
   13b81:	c3                   	ret    

00013b82 <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_code 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_code, void *data) {
   13b82:	55                   	push   %ebp
   13b83:	89 e5                	mov    %esp,%ebp
   13b85:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   13b88:	e8 08 f4 ff ff       	call   12f95 <idt_enter_protection>
   13b8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   13b90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13b97:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13b9e:	eb 5d                	jmp    13bfd <dev_open+0x7b>
        device_t *dev = dev_table + i;
   13ba0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13ba3:	89 d0                	mov    %edx,%eax
   13ba5:	c1 e0 02             	shl    $0x2,%eax
   13ba8:	01 d0                	add    %edx,%eax
   13baa:	c1 e0 02             	shl    $0x2,%eax
   13bad:	05 a0 b0 03 00       	add    $0x3b0a0,%eax
   13bb2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   13bb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13bb8:	8b 40 10             	mov    0x10(%eax),%eax
   13bbb:	85 c0                	test   %eax,%eax
   13bbd:	75 08                	jne    13bc7 <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   13bbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13bc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   13bc5:	eb 3e                	jmp    13c05 <dev_open+0x83>
        } else if (dev->desc->dev_type == dev_type && dev->dev_code == dev->dev_code) {
   13bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13bca:	8b 00                	mov    (%eax),%eax
   13bcc:	8b 40 14             	mov    0x14(%eax),%eax
   13bcf:	39 45 08             	cmp    %eax,0x8(%ebp)
   13bd2:	75 25                	jne    13bf9 <dev_open+0x77>
            //设备已打开过,增加打开次数
            dev->open_count++;
   13bd4:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13bd7:	8b 40 10             	mov    0x10(%eax),%eax
   13bda:	8d 50 01             	lea    0x1(%eax),%edx
   13bdd:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13be0:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   13be3:	83 ec 0c             	sub    $0xc,%esp
   13be6:	ff 75 e4             	push   -0x1c(%ebp)
   13be9:	e8 bf f3 ff ff       	call   12fad <idt_leave_protection>
   13bee:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   13bf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13bf4:	e9 c6 00 00 00       	jmp    13cbf <dev_open+0x13d>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13bf9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13bfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c00:	83 f8 7f             	cmp    $0x7f,%eax
   13c03:	76 9b                	jbe    13ba0 <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   13c05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   13c0c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13c13:	eb 24                	jmp    13c39 <dev_open+0xb7>
        dev_desc_t *d = dev_des_table[i];
   13c15:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13c18:	8b 04 85 50 80 01 00 	mov    0x18050(,%eax,4),%eax
   13c1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   13c22:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13c25:	8b 40 14             	mov    0x14(%eax),%eax
   13c28:	39 45 08             	cmp    %eax,0x8(%ebp)
   13c2b:	75 08                	jne    13c35 <dev_open+0xb3>
            desc = d;
   13c2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13c30:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13c33:	eb 0c                	jmp    13c41 <dev_open+0xbf>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   13c35:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13c39:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13c3c:	83 f8 01             	cmp    $0x1,%eax
   13c3f:	76 d4                	jbe    13c15 <dev_open+0x93>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   13c41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13c45:	74 65                	je     13cac <dev_open+0x12a>
   13c47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13c4b:	74 5f                	je     13cac <dev_open+0x12a>
        free_dev->desc = desc;
   13c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c50:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13c53:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   13c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c58:	8b 55 10             	mov    0x10(%ebp),%edx
   13c5b:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_code = dev_code;
   13c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c61:	8b 55 0c             	mov    0xc(%ebp),%edx
   13c64:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   13c67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13c6a:	8b 40 18             	mov    0x18(%eax),%eax
   13c6d:	83 ec 0c             	sub    $0xc,%esp
   13c70:	ff 75 f4             	push   -0xc(%ebp)
   13c73:	ff d0                	call   *%eax
   13c75:	83 c4 10             	add    $0x10,%esp
   13c78:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   13c7b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   13c7f:	75 2b                	jne    13cac <dev_open+0x12a>
            free_dev->open_count = 1;
   13c81:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c84:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   13c8b:	83 ec 0c             	sub    $0xc,%esp
   13c8e:	ff 75 e4             	push   -0x1c(%ebp)
   13c91:	e8 17 f3 ff ff       	call   12fad <idt_leave_protection>
   13c96:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   13c99:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c9c:	2d a0 b0 03 00       	sub    $0x3b0a0,%eax
   13ca1:	c1 f8 02             	sar    $0x2,%eax
   13ca4:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13caa:	eb 13                	jmp    13cbf <dev_open+0x13d>

        }
    }

    idt_leave_protection(state);
   13cac:	83 ec 0c             	sub    $0xc,%esp
   13caf:	ff 75 e4             	push   -0x1c(%ebp)
   13cb2:	e8 f6 f2 ff ff       	call   12fad <idt_leave_protection>
   13cb7:	83 c4 10             	add    $0x10,%esp
    return -1;
   13cba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13cbf:	c9                   	leave  
   13cc0:	c3                   	ret    

00013cc1 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   13cc1:	55                   	push   %ebp
   13cc2:	89 e5                	mov    %esp,%ebp
   13cc4:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13cc7:	ff 75 08             	push   0x8(%ebp)
   13cca:	e8 5f fe ff ff       	call   13b2e <is_dev_exist>
   13ccf:	83 c4 04             	add    $0x4,%esp
   13cd2:	85 c0                	test   %eax,%eax
   13cd4:	75 07                	jne    13cdd <dev_read+0x1c>
        return -1;
   13cd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13cdb:	eb 2e                	jmp    13d0b <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   13cdd:	8b 55 08             	mov    0x8(%ebp),%edx
   13ce0:	89 d0                	mov    %edx,%eax
   13ce2:	c1 e0 02             	shl    $0x2,%eax
   13ce5:	01 d0                	add    %edx,%eax
   13ce7:	c1 e0 02             	shl    $0x2,%eax
   13cea:	05 a0 b0 03 00       	add    $0x3b0a0,%eax
   13cef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13cf5:	8b 00                	mov    (%eax),%eax
   13cf7:	8b 40 1c             	mov    0x1c(%eax),%eax
   13cfa:	ff 75 14             	push   0x14(%ebp)
   13cfd:	ff 75 10             	push   0x10(%ebp)
   13d00:	ff 75 0c             	push   0xc(%ebp)
   13d03:	ff 75 f4             	push   -0xc(%ebp)
   13d06:	ff d0                	call   *%eax
   13d08:	83 c4 10             	add    $0x10,%esp
}
   13d0b:	c9                   	leave  
   13d0c:	c3                   	ret    

00013d0d <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   13d0d:	55                   	push   %ebp
   13d0e:	89 e5                	mov    %esp,%ebp
   13d10:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13d13:	ff 75 08             	push   0x8(%ebp)
   13d16:	e8 13 fe ff ff       	call   13b2e <is_dev_exist>
   13d1b:	83 c4 04             	add    $0x4,%esp
   13d1e:	85 c0                	test   %eax,%eax
   13d20:	75 07                	jne    13d29 <dev_write+0x1c>
        return -1;
   13d22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13d27:	eb 2e                	jmp    13d57 <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   13d29:	8b 55 08             	mov    0x8(%ebp),%edx
   13d2c:	89 d0                	mov    %edx,%eax
   13d2e:	c1 e0 02             	shl    $0x2,%eax
   13d31:	01 d0                	add    %edx,%eax
   13d33:	c1 e0 02             	shl    $0x2,%eax
   13d36:	05 a0 b0 03 00       	add    $0x3b0a0,%eax
   13d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   13d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d41:	8b 00                	mov    (%eax),%eax
   13d43:	8b 40 20             	mov    0x20(%eax),%eax
   13d46:	ff 75 14             	push   0x14(%ebp)
   13d49:	ff 75 10             	push   0x10(%ebp)
   13d4c:	ff 75 0c             	push   0xc(%ebp)
   13d4f:	ff 75 f4             	push   -0xc(%ebp)
   13d52:	ff d0                	call   *%eax
   13d54:	83 c4 10             	add    $0x10,%esp
}
   13d57:	c9                   	leave  
   13d58:	c3                   	ret    

00013d59 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   13d59:	55                   	push   %ebp
   13d5a:	89 e5                	mov    %esp,%ebp
   13d5c:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13d5f:	ff 75 08             	push   0x8(%ebp)
   13d62:	e8 c7 fd ff ff       	call   13b2e <is_dev_exist>
   13d67:	83 c4 04             	add    $0x4,%esp
   13d6a:	85 c0                	test   %eax,%eax
   13d6c:	75 07                	jne    13d75 <dev_control+0x1c>
        return -1;
   13d6e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13d73:	eb 2e                	jmp    13da3 <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   13d75:	8b 55 08             	mov    0x8(%ebp),%edx
   13d78:	89 d0                	mov    %edx,%eax
   13d7a:	c1 e0 02             	shl    $0x2,%eax
   13d7d:	01 d0                	add    %edx,%eax
   13d7f:	c1 e0 02             	shl    $0x2,%eax
   13d82:	05 a0 b0 03 00       	add    $0x3b0a0,%eax
   13d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   13d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d8d:	8b 00                	mov    (%eax),%eax
   13d8f:	8b 40 24             	mov    0x24(%eax),%eax
   13d92:	ff 75 14             	push   0x14(%ebp)
   13d95:	ff 75 10             	push   0x10(%ebp)
   13d98:	ff 75 0c             	push   0xc(%ebp)
   13d9b:	ff 75 f4             	push   -0xc(%ebp)
   13d9e:	ff d0                	call   *%eax
   13da0:	83 c4 10             	add    $0x10,%esp
}
   13da3:	c9                   	leave  
   13da4:	c3                   	ret    

00013da5 <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   13da5:	55                   	push   %ebp
   13da6:	89 e5                	mov    %esp,%ebp
   13da8:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13dab:	ff 75 08             	push   0x8(%ebp)
   13dae:	e8 7b fd ff ff       	call   13b2e <is_dev_exist>
   13db3:	83 c4 04             	add    $0x4,%esp
   13db6:	85 c0                	test   %eax,%eax
   13db8:	74 6b                	je     13e25 <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   13dba:	8b 55 08             	mov    0x8(%ebp),%edx
   13dbd:	89 d0                	mov    %edx,%eax
   13dbf:	c1 e0 02             	shl    $0x2,%eax
   13dc2:	01 d0                	add    %edx,%eax
   13dc4:	c1 e0 02             	shl    $0x2,%eax
   13dc7:	05 a0 b0 03 00       	add    $0x3b0a0,%eax
   13dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   13dcf:	e8 c1 f1 ff ff       	call   12f95 <idt_enter_protection>
   13dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   13dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dda:	8b 40 10             	mov    0x10(%eax),%eax
   13ddd:	8d 50 ff             	lea    -0x1(%eax),%edx
   13de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13de3:	89 50 10             	mov    %edx,0x10(%eax)
   13de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13de9:	8b 40 10             	mov    0x10(%eax),%eax
   13dec:	85 c0                	test   %eax,%eax
   13dee:	75 25                	jne    13e15 <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   13df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13df3:	8b 00                	mov    (%eax),%eax
   13df5:	8b 40 28             	mov    0x28(%eax),%eax
   13df8:	83 ec 0c             	sub    $0xc,%esp
   13dfb:	ff 75 f4             	push   -0xc(%ebp)
   13dfe:	ff d0                	call   *%eax
   13e00:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   13e03:	83 ec 04             	sub    $0x4,%esp
   13e06:	6a 14                	push   $0x14
   13e08:	6a 00                	push   $0x0
   13e0a:	ff 75 f4             	push   -0xc(%ebp)
   13e0d:	e8 ab 17 00 00       	call   155bd <kernel_memset>
   13e12:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   13e15:	83 ec 0c             	sub    $0xc,%esp
   13e18:	ff 75 f0             	push   -0x10(%ebp)
   13e1b:	e8 8d f1 ff ff       	call   12fad <idt_leave_protection>
   13e20:	83 c4 10             	add    $0x10,%esp
   13e23:	eb 01                	jmp    13e26 <dev_close+0x81>
        return;
   13e25:	90                   	nop
   13e26:	c9                   	leave  
   13e27:	c3                   	ret    

00013e28 <inb>:
static inline uint8_t inb(uint16_t port) {
   13e28:	55                   	push   %ebp
   13e29:	89 e5                	mov    %esp,%ebp
   13e2b:	83 ec 14             	sub    $0x14,%esp
   13e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   13e31:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13e35:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13e39:	89 c2                	mov    %eax,%edx
   13e3b:	ec                   	in     (%dx),%al
   13e3c:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13e3f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13e43:	c9                   	leave  
   13e44:	c3                   	ret    

00013e45 <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   13e45:	55                   	push   %ebp
   13e46:	89 e5                	mov    %esp,%ebp
   13e48:	83 ec 04             	sub    $0x4,%esp
   13e4b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e4e:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   13e51:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   13e55:	f7 d0                	not    %eax
   13e57:	c0 e8 07             	shr    $0x7,%al
   13e5a:	0f b6 c0             	movzbl %al,%eax
}
   13e5d:	c9                   	leave  
   13e5e:	c3                   	ret    

00013e5f <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   13e5f:	55                   	push   %ebp
   13e60:	89 e5                	mov    %esp,%ebp
   13e62:	83 ec 04             	sub    $0x4,%esp
   13e65:	8b 45 08             	mov    0x8(%ebp),%eax
   13e68:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   13e6b:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   13e6f:	83 e0 7f             	and    $0x7f,%eax
}
   13e72:	c9                   	leave  
   13e73:	c3                   	ret    

00013e74 <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   13e74:	55                   	push   %ebp
   13e75:	89 e5                	mov    %esp,%ebp
   13e77:	83 ec 28             	sub    $0x28,%esp
   13e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   13e7d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   13e80:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   13e84:	50                   	push   %eax
   13e85:	e8 d5 ff ff ff       	call   13e5f <get_key>
   13e8a:	83 c4 04             	add    $0x4,%esp
   13e8d:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   13e90:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   13e94:	50                   	push   %eax
   13e95:	e8 ab ff ff ff       	call   13e45 <is_make_code>
   13e9a:	83 c4 04             	add    $0x4,%esp
   13e9d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   13ea0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13ea4:	83 e8 1d             	sub    $0x1d,%eax
   13ea7:	83 f8 3b             	cmp    $0x3b,%eax
   13eaa:	0f 87 f1 00 00 00    	ja     13fa1 <do_normal_key+0x12d>
   13eb0:	8b 04 85 e4 6b 01 00 	mov    0x16be4(,%eax,4),%eax
   13eb7:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   13eb9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13ebd:	0f 95 c0             	setne  %al
   13ec0:	c1 e0 07             	shl    $0x7,%eax
   13ec3:	c0 f8 07             	sar    $0x7,%al
   13ec6:	83 e0 01             	and    $0x1,%eax
   13ec9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13ed0:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13ed7:	83 e0 fb             	and    $0xfffffffb,%eax
   13eda:	09 d0                	or     %edx,%eax
   13edc:	a2 a0 ba 03 00       	mov    %al,0x3baa0
            break;
   13ee1:	e9 6d 01 00 00       	jmp    14053 <do_normal_key+0x1df>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   13ee6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13eea:	0f 95 c0             	setne  %al
   13eed:	c1 e0 07             	shl    $0x7,%eax
   13ef0:	c0 f8 07             	sar    $0x7,%al
   13ef3:	83 e0 01             	and    $0x1,%eax
   13ef6:	8d 14 00             	lea    (%eax,%eax,1),%edx
   13ef9:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13f00:	83 e0 fd             	and    $0xfffffffd,%eax
   13f03:	09 d0                	or     %edx,%eax
   13f05:	a2 a0 ba 03 00       	mov    %al,0x3baa0
            break;  
   13f0a:	e9 44 01 00 00       	jmp    14053 <do_normal_key+0x1df>
        case KEY_CAPS:
            if (is_make) {
   13f0f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13f13:	0f 84 36 01 00 00    	je     1404f <do_normal_key+0x1db>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   13f19:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13f20:	c1 e0 07             	shl    $0x7,%eax
   13f23:	c0 f8 07             	sar    $0x7,%al
   13f26:	f7 d0                	not    %eax
   13f28:	c1 e0 07             	shl    $0x7,%eax
   13f2b:	c0 f8 07             	sar    $0x7,%al
   13f2e:	83 e0 01             	and    $0x1,%eax
   13f31:	89 c2                	mov    %eax,%edx
   13f33:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13f3a:	83 e0 fe             	and    $0xfffffffe,%eax
   13f3d:	09 d0                	or     %edx,%eax
   13f3f:	a2 a0 ba 03 00       	mov    %al,0x3baa0
            }
            break;
   13f44:	e9 06 01 00 00       	jmp    1404f <do_normal_key+0x1db>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   13f49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13f4d:	0f 95 c0             	setne  %al
   13f50:	c1 e0 07             	shl    $0x7,%eax
   13f53:	c0 f8 07             	sar    $0x7,%al
   13f56:	83 e0 01             	and    $0x1,%eax
   13f59:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13f60:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13f67:	83 e0 f7             	and    $0xfffffff7,%eax
   13f6a:	09 d0                	or     %edx,%eax
   13f6c:	a2 a0 ba 03 00       	mov    %al,0x3baa0
            break;
   13f71:	e9 dd 00 00 00       	jmp    14053 <do_normal_key+0x1df>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   13f76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13f7a:	0f 95 c0             	setne  %al
   13f7d:	c1 e0 07             	shl    $0x7,%eax
   13f80:	c0 f8 07             	sar    $0x7,%al
   13f83:	83 e0 01             	and    $0x1,%eax
   13f86:	c1 e0 05             	shl    $0x5,%eax
   13f89:	89 c2                	mov    %eax,%edx
   13f8b:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13f92:	83 e0 df             	and    $0xffffffdf,%eax
   13f95:	09 d0                	or     %edx,%eax
   13f97:	a2 a0 ba 03 00       	mov    %al,0x3baa0
            break;
   13f9c:	e9 b2 00 00 00       	jmp    14053 <do_normal_key+0x1df>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   13fa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13fa5:	0f 84 a7 00 00 00    	je     14052 <do_normal_key+0x1de>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   13fab:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13fb2:	83 e0 04             	and    $0x4,%eax
   13fb5:	84 c0                	test   %al,%al
   13fb7:	75 0e                	jne    13fc7 <do_normal_key+0x153>
   13fb9:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13fc0:	83 e0 02             	and    $0x2,%eax
   13fc3:	84 c0                	test   %al,%al
   13fc5:	74 11                	je     13fd8 <do_normal_key+0x164>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   13fc7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13fcb:	0f b6 84 00 c1 69 01 	movzbl 0x169c1(%eax,%eax,1),%eax
   13fd2:	00 
   13fd3:	88 45 f7             	mov    %al,-0x9(%ebp)
   13fd6:	eb 0f                	jmp    13fe7 <do_normal_key+0x173>
                    } else {
                        key = map_table[key].normal;
   13fd8:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13fdc:	0f b6 84 00 c0 69 01 	movzbl 0x169c0(%eax,%eax,1),%eax
   13fe3:	00 
   13fe4:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   13fe7:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   13fee:	83 e0 01             	and    $0x1,%eax
   13ff1:	84 c0                	test   %al,%al
   13ff3:	74 2e                	je     14023 <do_normal_key+0x1af>
                        if ((key >= 'A' && key <= 'Z')) {
   13ff5:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   13ff9:	7e 12                	jle    1400d <do_normal_key+0x199>
   13ffb:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   13fff:	7f 0c                	jg     1400d <do_normal_key+0x199>
                            key = key - 'A' + 'a';
   14001:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14005:	83 c0 20             	add    $0x20,%eax
   14008:	88 45 f7             	mov    %al,-0x9(%ebp)
   1400b:	eb 16                	jmp    14023 <do_normal_key+0x1af>
                        } else if (key >= 'a' && key <= 'z') {
   1400d:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14011:	7e 10                	jle    14023 <do_normal_key+0x1af>
   14013:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14017:	7f 0a                	jg     14023 <do_normal_key+0x1af>
                            key = key -'a' + 'A';
   14019:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1401d:	83 e8 20             	sub    $0x20,%eax
   14020:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                log_printf("key: %c\n", key);
   14023:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14027:	83 ec 08             	sub    $0x8,%esp
   1402a:	50                   	push   %eax
   1402b:	68 c0 6b 01 00       	push   $0x16bc0
   14030:	e8 85 1d 00 00       	call   15dba <log_printf>
   14035:	83 c4 10             	add    $0x10,%esp
                log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
   14038:	83 ec 08             	sub    $0x8,%esp
   1403b:	6a 04                	push   $0x4
   1403d:	68 c9 6b 01 00       	push   $0x16bc9
   14042:	e8 73 1d 00 00       	call   15dba <log_printf>
   14047:	83 c4 10             	add    $0x10,%esp
            }
            break;
   1404a:	eb 06                	jmp    14052 <do_normal_key+0x1de>
            break;
   1404c:	90                   	nop
   1404d:	eb 04                	jmp    14053 <do_normal_key+0x1df>
            break;
   1404f:	90                   	nop
   14050:	eb 01                	jmp    14053 <do_normal_key+0x1df>
            break;
   14052:	90                   	nop
    }
}
   14053:	90                   	nop
   14054:	c9                   	leave  
   14055:	c3                   	ret    

00014056 <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   14056:	55                   	push   %ebp
   14057:	89 e5                	mov    %esp,%ebp
   14059:	83 ec 14             	sub    $0x14,%esp
   1405c:	8b 45 08             	mov    0x8(%ebp),%eax
   1405f:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   14062:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14066:	50                   	push   %eax
   14067:	e8 f3 fd ff ff       	call   13e5f <get_key>
   1406c:	83 c4 04             	add    $0x4,%esp
   1406f:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   14072:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14076:	50                   	push   %eax
   14077:	e8 c9 fd ff ff       	call   13e45 <is_make_code>
   1407c:	83 c4 04             	add    $0x4,%esp
   1407f:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   14082:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   14086:	83 f8 1d             	cmp    $0x1d,%eax
   14089:	74 07                	je     14092 <do_e0_key+0x3c>
   1408b:	83 f8 38             	cmp    $0x38,%eax
   1408e:	74 2a                	je     140ba <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   14090:	eb 4f                	jmp    140e1 <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   14092:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   14096:	0f 95 c0             	setne  %al
   14099:	c1 e0 07             	shl    $0x7,%eax
   1409c:	c0 f8 07             	sar    $0x7,%al
   1409f:	83 e0 01             	and    $0x1,%eax
   140a2:	c1 e0 06             	shl    $0x6,%eax
   140a5:	89 c2                	mov    %eax,%edx
   140a7:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   140ae:	83 e0 bf             	and    $0xffffffbf,%eax
   140b1:	09 d0                	or     %edx,%eax
   140b3:	a2 a0 ba 03 00       	mov    %al,0x3baa0
        break;
   140b8:	eb 27                	jmp    140e1 <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   140ba:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   140be:	0f 95 c0             	setne  %al
   140c1:	c1 e0 07             	shl    $0x7,%eax
   140c4:	c0 f8 07             	sar    $0x7,%al
   140c7:	83 e0 01             	and    $0x1,%eax
   140ca:	c1 e0 04             	shl    $0x4,%eax
   140cd:	89 c2                	mov    %eax,%edx
   140cf:	0f b6 05 a0 ba 03 00 	movzbl 0x3baa0,%eax
   140d6:	83 e0 ef             	and    $0xffffffef,%eax
   140d9:	09 d0                	or     %edx,%eax
   140db:	a2 a0 ba 03 00       	mov    %al,0x3baa0
        break;
   140e0:	90                   	nop
    }
}
   140e1:	90                   	nop
   140e2:	c9                   	leave  
   140e3:	c3                   	ret    

000140e4 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   140e4:	55                   	push   %ebp
   140e5:	89 e5                	mov    %esp,%ebp
   140e7:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   140ea:	0f b6 05 a4 ba 03 00 	movzbl 0x3baa4,%eax
   140f1:	84 c0                	test   %al,%al
   140f3:	75 3a                	jne    1412f <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   140f5:	83 ec 08             	sub    $0x8,%esp
   140f8:	68 98 02 01 00       	push   $0x10298
   140fd:	6a 21                	push   $0x21
   140ff:	e8 8b ea ff ff       	call   12b8f <idt_install>
   14104:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   14107:	83 ec 0c             	sub    $0xc,%esp
   1410a:	6a 21                	push   $0x21
   1410c:	e8 09 ed ff ff       	call   12e1a <idt_enable>
   14111:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   14114:	83 ec 04             	sub    $0x4,%esp
   14117:	6a 04                	push   $0x4
   14119:	6a 00                	push   $0x0
   1411b:	68 a0 ba 03 00       	push   $0x3baa0
   14120:	e8 98 14 00 00       	call   155bd <kernel_memset>
   14125:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   14128:	c6 05 a4 ba 03 00 01 	movb   $0x1,0x3baa4
    }
}
   1412f:	90                   	nop
   14130:	c9                   	leave  
   14131:	c3                   	ret    

00014132 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   14132:	55                   	push   %ebp
   14133:	89 e5                	mov    %esp,%ebp
   14135:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.读取状态状态
    uint32_t status = inb(KBD_PORT_STAT);
   14138:	6a 64                	push   $0x64
   1413a:	e8 e9 fc ff ff       	call   13e28 <inb>
   1413f:	83 c4 04             	add    $0x4,%esp
   14142:	0f b6 c0             	movzbl %al,%eax
   14145:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   14148:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1414b:	83 e0 01             	and    $0x1,%eax
   1414e:	85 c0                	test   %eax,%eax
   14150:	75 12                	jne    14164 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   14152:	83 ec 0c             	sub    $0xc,%esp
   14155:	6a 21                	push   $0x21
   14157:	e8 00 ee ff ff       	call   12f5c <pic_send_eoi>
   1415c:	83 c4 10             	add    $0x10,%esp
        return;
   1415f:	e9 96 00 00 00       	jmp    141fa <do_handler_kbd+0xc8>

    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   14164:	83 ec 0c             	sub    $0xc,%esp
   14167:	6a 60                	push   $0x60
   14169:	e8 ba fc ff ff       	call   13e28 <inb>
   1416e:	83 c4 10             	add    $0x10,%esp
   14171:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   14174:	83 ec 0c             	sub    $0xc,%esp
   14177:	6a 21                	push   $0x21
   14179:	e8 de ed ff ff       	call   12f5c <pic_send_eoi>
   1417e:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   14181:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   14185:	75 0c                	jne    14193 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   14187:	c7 05 a8 ba 03 00 01 	movl   $0x1,0x3baa8
   1418e:	00 00 00 
   14191:	eb 67                	jmp    141fa <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   14193:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   14197:	75 0c                	jne    141a5 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   14199:	c7 05 a8 ba 03 00 02 	movl   $0x2,0x3baa8
   141a0:	00 00 00 
   141a3:	eb 55                	jmp    141fa <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   141a5:	a1 a8 ba 03 00       	mov    0x3baa8,%eax
   141aa:	83 f8 02             	cmp    $0x2,%eax
   141ad:	74 3e                	je     141ed <do_handler_kbd+0xbb>
   141af:	83 f8 02             	cmp    $0x2,%eax
   141b2:	77 45                	ja     141f9 <do_handler_kbd+0xc7>
   141b4:	85 c0                	test   %eax,%eax
   141b6:	74 07                	je     141bf <do_handler_kbd+0x8d>
   141b8:	83 f8 01             	cmp    $0x1,%eax
   141bb:	74 14                	je     141d1 <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   141bd:	eb 3a                	jmp    141f9 <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   141bf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   141c3:	83 ec 0c             	sub    $0xc,%esp
   141c6:	50                   	push   %eax
   141c7:	e8 a8 fc ff ff       	call   13e74 <do_normal_key>
   141cc:	83 c4 10             	add    $0x10,%esp
                break;
   141cf:	eb 29                	jmp    141fa <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   141d1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   141d5:	83 ec 0c             	sub    $0xc,%esp
   141d8:	50                   	push   %eax
   141d9:	e8 78 fe ff ff       	call   14056 <do_e0_key>
   141de:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   141e1:	c7 05 a8 ba 03 00 00 	movl   $0x0,0x3baa8
   141e8:	00 00 00 
                break;
   141eb:	eb 0d                	jmp    141fa <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   141ed:	c7 05 a8 ba 03 00 00 	movl   $0x0,0x3baa8
   141f4:	00 00 00 
                break;
   141f7:	eb 01                	jmp    141fa <do_handler_kbd+0xc8>
                break;
   141f9:	90                   	nop
        }
    }

   141fa:	c9                   	leave  
   141fb:	c3                   	ret    

000141fc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   141fc:	55                   	push   %ebp
   141fd:	89 e5                	mov    %esp,%ebp
   141ff:	83 ec 08             	sub    $0x8,%esp
   14202:	8b 45 08             	mov    0x8(%ebp),%eax
   14205:	8b 55 0c             	mov    0xc(%ebp),%edx
   14208:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1420c:	89 d0                	mov    %edx,%eax
   1420e:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14211:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14215:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14219:	ee                   	out    %al,(%dx)
}
   1421a:	90                   	nop
   1421b:	c9                   	leave  
   1421c:	c3                   	ret    

0001421d <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1421d:	55                   	push   %ebp
   1421e:	89 e5                	mov    %esp,%ebp
   14220:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   14223:	a1 ac ba 03 00       	mov    0x3baac,%eax
   14228:	83 c0 01             	add    $0x1,%eax
   1422b:	a3 ac ba 03 00       	mov    %eax,0x3baac

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   14230:	83 ec 0c             	sub    $0xc,%esp
   14233:	6a 20                	push   $0x20
   14235:	e8 22 ed ff ff       	call   12f5c <pic_send_eoi>
   1423a:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1423d:	e8 ea d6 ff ff       	call   1192c <task_slice_end>
}
   14242:	90                   	nop
   14243:	c9                   	leave  
   14244:	c3                   	ret    

00014245 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   14245:	55                   	push   %ebp
   14246:	89 e5                	mov    %esp,%ebp
   14248:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1424b:	6a 36                	push   $0x36
   1424d:	6a 43                	push   $0x43
   1424f:	e8 a8 ff ff ff       	call   141fc <outb>
   14254:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   14257:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1425d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   14261:	0f b6 c0             	movzbl %al,%eax
   14264:	50                   	push   %eax
   14265:	6a 40                	push   $0x40
   14267:	e8 90 ff ff ff       	call   141fc <outb>
   1426c:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1426f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   14273:	66 c1 e8 08          	shr    $0x8,%ax
   14277:	0f b6 c0             	movzbl %al,%eax
   1427a:	50                   	push   %eax
   1427b:	6a 40                	push   $0x40
   1427d:	e8 7a ff ff ff       	call   141fc <outb>
   14282:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   14285:	83 ec 08             	sub    $0x8,%esp
   14288:	68 7b 02 01 00       	push   $0x1027b
   1428d:	6a 20                	push   $0x20
   1428f:	e8 fb e8 ff ff       	call   12b8f <idt_install>
   14294:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   14297:	83 ec 0c             	sub    $0xc,%esp
   1429a:	6a 20                	push   $0x20
   1429c:	e8 79 eb ff ff       	call   12e1a <idt_enable>
   142a1:	83 c4 10             	add    $0x10,%esp

}
   142a4:	90                   	nop
   142a5:	c9                   	leave  
   142a6:	c3                   	ret    

000142a7 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   142a7:	55                   	push   %ebp
   142a8:	89 e5                	mov    %esp,%ebp
   142aa:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   142ad:	c7 05 ac ba 03 00 00 	movl   $0x0,0x3baac
   142b4:	00 00 00 
    init_pit();
   142b7:	e8 89 ff ff ff       	call   14245 <init_pit>
   142bc:	90                   	nop
   142bd:	c9                   	leave  
   142be:	c3                   	ret    

000142bf <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   142bf:	55                   	push   %ebp
   142c0:	89 e5                	mov    %esp,%ebp
   142c2:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_code;
   142c5:	8b 45 08             	mov    0x8(%ebp),%eax
   142c8:	8b 40 08             	mov    0x8(%eax),%eax
   142cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   142ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   142d2:	78 10                	js     142e4 <get_tty+0x25>
   142d4:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   142d8:	7f 0a                	jg     142e4 <get_tty+0x25>
   142da:	8b 45 08             	mov    0x8(%ebp),%eax
   142dd:	8b 40 10             	mov    0x10(%eax),%eax
   142e0:	85 c0                	test   %eax,%eax
   142e2:	75 1a                	jne    142fe <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   142e4:	83 ec 08             	sub    $0x8,%esp
   142e7:	ff 75 f4             	push   -0xc(%ebp)
   142ea:	68 d4 6c 01 00       	push   $0x16cd4
   142ef:	e8 c6 1a 00 00       	call   15dba <log_printf>
   142f4:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   142f7:	b8 00 00 00 00       	mov    $0x0,%eax
   142fc:	eb 0e                	jmp    1430c <get_tty+0x4d>
    }

    return tty_table + tty_index;
   142fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14301:	69 c0 4c 04 00 00    	imul   $0x44c,%eax,%eax
   14307:	05 c0 ba 03 00       	add    $0x3bac0,%eax
}
   1430c:	c9                   	leave  
   1430d:	c3                   	ret    

0001430e <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   1430e:	55                   	push   %ebp
   1430f:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   14311:	8b 45 08             	mov    0x8(%ebp),%eax
   14314:	8b 55 0c             	mov    0xc(%ebp),%edx
   14317:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   14319:	8b 45 08             	mov    0x8(%ebp),%eax
   1431c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   14323:	8b 45 08             	mov    0x8(%ebp),%eax
   14326:	8b 55 10             	mov    0x10(%ebp),%edx
   14329:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   1432c:	8b 45 08             	mov    0x8(%ebp),%eax
   1432f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   14336:	8b 45 08             	mov    0x8(%ebp),%eax
   14339:	8b 50 0c             	mov    0xc(%eax),%edx
   1433c:	8b 45 08             	mov    0x8(%ebp),%eax
   1433f:	89 50 08             	mov    %edx,0x8(%eax)
}
   14342:	90                   	nop
   14343:	5d                   	pop    %ebp
   14344:	c3                   	ret    

00014345 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   14345:	55                   	push   %ebp
   14346:	89 e5                	mov    %esp,%ebp
   14348:	53                   	push   %ebx
   14349:	83 ec 04             	sub    $0x4,%esp
   1434c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1434f:	88 45 f8             	mov    %al,-0x8(%ebp)
    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   14352:	8b 45 08             	mov    0x8(%ebp),%eax
   14355:	8b 50 10             	mov    0x10(%eax),%edx
   14358:	8b 45 08             	mov    0x8(%ebp),%eax
   1435b:	8b 40 04             	mov    0x4(%eax),%eax
   1435e:	39 c2                	cmp    %eax,%edx
   14360:	7c 07                	jl     14369 <tty_fifo_put+0x24>
        return -1;
   14362:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14367:	eb 4b                	jmp    143b4 <tty_fifo_put+0x6f>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   14369:	8b 45 08             	mov    0x8(%ebp),%eax
   1436c:	8b 18                	mov    (%eax),%ebx
   1436e:	8b 45 08             	mov    0x8(%ebp),%eax
   14371:	8b 40 0c             	mov    0xc(%eax),%eax
   14374:	8d 48 01             	lea    0x1(%eax),%ecx
   14377:	8b 55 08             	mov    0x8(%ebp),%edx
   1437a:	89 4a 0c             	mov    %ecx,0xc(%edx)
   1437d:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   14380:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14384:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   14386:	8b 45 08             	mov    0x8(%ebp),%eax
   14389:	8b 50 0c             	mov    0xc(%eax),%edx
   1438c:	8b 45 08             	mov    0x8(%ebp),%eax
   1438f:	8b 40 04             	mov    0x4(%eax),%eax
   14392:	39 c2                	cmp    %eax,%edx
   14394:	7c 0a                	jl     143a0 <tty_fifo_put+0x5b>
        fifo->write = 0;
   14396:	8b 45 08             	mov    0x8(%ebp),%eax
   14399:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   143a0:	8b 45 08             	mov    0x8(%ebp),%eax
   143a3:	8b 40 10             	mov    0x10(%eax),%eax
   143a6:	8d 50 01             	lea    0x1(%eax),%edx
   143a9:	8b 45 08             	mov    0x8(%ebp),%eax
   143ac:	89 50 10             	mov    %edx,0x10(%eax)
    return 0;
   143af:	b8 00 00 00 00       	mov    $0x0,%eax
}
   143b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   143b7:	c9                   	leave  
   143b8:	c3                   	ret    

000143b9 <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   143b9:	55                   	push   %ebp
   143ba:	89 e5                	mov    %esp,%ebp
   143bc:	53                   	push   %ebx
    if (fifo->count <= 0) {
   143bd:	8b 45 08             	mov    0x8(%ebp),%eax
   143c0:	8b 40 10             	mov    0x10(%eax),%eax
   143c3:	85 c0                	test   %eax,%eax
   143c5:	7f 07                	jg     143ce <tty_fifo_get+0x15>
        return -1;
   143c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   143cc:	eb 4c                	jmp    1441a <tty_fifo_get+0x61>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   143ce:	8b 45 08             	mov    0x8(%ebp),%eax
   143d1:	8b 18                	mov    (%eax),%ebx
   143d3:	8b 45 08             	mov    0x8(%ebp),%eax
   143d6:	8b 40 08             	mov    0x8(%eax),%eax
   143d9:	8d 48 01             	lea    0x1(%eax),%ecx
   143dc:	8b 55 08             	mov    0x8(%ebp),%edx
   143df:	89 4a 08             	mov    %ecx,0x8(%edx)
   143e2:	01 d8                	add    %ebx,%eax
   143e4:	0f b6 10             	movzbl (%eax),%edx
   143e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   143ea:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   143ec:	8b 45 08             	mov    0x8(%ebp),%eax
   143ef:	8b 50 08             	mov    0x8(%eax),%edx
   143f2:	8b 45 08             	mov    0x8(%ebp),%eax
   143f5:	8b 40 04             	mov    0x4(%eax),%eax
   143f8:	39 c2                	cmp    %eax,%edx
   143fa:	7c 0a                	jl     14406 <tty_fifo_get+0x4d>
        fifo->read = 0;
   143fc:	8b 45 08             	mov    0x8(%ebp),%eax
   143ff:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   14406:	8b 45 08             	mov    0x8(%ebp),%eax
   14409:	8b 40 10             	mov    0x10(%eax),%eax
   1440c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1440f:	8b 45 08             	mov    0x8(%ebp),%eax
   14412:	89 50 10             	mov    %edx,0x10(%eax)

    return 0;
   14415:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1441a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1441d:	c9                   	leave  
   1441e:	c3                   	ret    

0001441f <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   1441f:	55                   	push   %ebp
   14420:	89 e5                	mov    %esp,%ebp
   14422:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_code;
   14425:	8b 45 08             	mov    0x8(%ebp),%eax
   14428:	8b 40 08             	mov    0x8(%eax),%eax
   1442b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   1442e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14432:	78 06                	js     1443a <tty_open+0x1b>
   14434:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   14438:	7e 1d                	jle    14457 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   1443a:	83 ec 08             	sub    $0x8,%esp
   1443d:	ff 75 f4             	push   -0xc(%ebp)
   14440:	68 f4 6c 01 00       	push   $0x16cf4
   14445:	e8 70 19 00 00       	call   15dba <log_printf>
   1444a:	83 c4 10             	add    $0x10,%esp
        return -1;
   1444d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14452:	e9 96 00 00 00       	jmp    144ed <tty_open+0xce>
    }

    tty_t *tty = tty_table + index;
   14457:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1445a:	69 c0 4c 04 00 00    	imul   $0x44c,%eax,%eax
   14460:	05 c0 ba 03 00       	add    $0x3bac0,%eax
   14465:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   14468:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1446b:	8d 50 4c             	lea    0x4c(%eax),%edx
   1446e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14471:	83 c0 04             	add    $0x4,%eax
   14474:	83 ec 04             	sub    $0x4,%esp
   14477:	68 00 02 00 00       	push   $0x200
   1447c:	52                   	push   %edx
   1447d:	50                   	push   %eax
   1447e:	e8 8b fe ff ff       	call   1430e <tty_fifo_init>
   14483:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, 0);
   14486:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14489:	8d 90 4c 02 00 00    	lea    0x24c(%eax),%edx
   1448f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14492:	83 c0 18             	add    $0x18,%eax
   14495:	83 ec 04             	sub    $0x4,%esp
   14498:	6a 00                	push   $0x0
   1449a:	52                   	push   %edx
   1449b:	50                   	push   %eax
   1449c:	e8 6d fe ff ff       	call   1430e <tty_fifo_init>
   144a1:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE);
   144a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144a7:	83 c0 2c             	add    $0x2c,%eax
   144aa:	83 ec 08             	sub    $0x8,%esp
   144ad:	68 00 02 00 00       	push   $0x200
   144b2:	50                   	push   %eax
   144b3:	e8 fc 06 00 00       	call   14bb4 <sem_init>
   144b8:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);
   144bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144be:	83 c0 3c             	add    $0x3c,%eax
   144c1:	83 ec 08             	sub    $0x8,%esp
   144c4:	6a 00                	push   $0x0
   144c6:	50                   	push   %eax
   144c7:	e8 e8 06 00 00       	call   14bb4 <sem_init>
   144cc:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   144cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   144d5:	89 10                	mov    %edx,(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   144d7:	e8 08 fc ff ff       	call   140e4 <kbd_init>
    console_init(index);
   144dc:	83 ec 0c             	sub    $0xc,%esp
   144df:	ff 75 f4             	push   -0xc(%ebp)
   144e2:	e8 4b f0 ff ff       	call   13532 <console_init>
   144e7:	83 c4 10             	add    $0x10,%esp
    
    
    return index;
   144ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   144ed:	c9                   	leave  
   144ee:	c3                   	ret    

000144ef <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   144ef:	55                   	push   %ebp
   144f0:	89 e5                	mov    %esp,%ebp


    return 0;
   144f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   144f7:	5d                   	pop    %ebp
   144f8:	c3                   	ret    

000144f9 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   144f9:	55                   	push   %ebp
   144fa:	89 e5                	mov    %esp,%ebp
   144fc:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   144ff:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14503:	79 0a                	jns    1450f <tty_write+0x16>
        return -1;
   14505:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1450a:	e9 8c 00 00 00       	jmp    1459b <tty_write+0xa2>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   1450f:	83 ec 0c             	sub    $0xc,%esp
   14512:	ff 75 08             	push   0x8(%ebp)
   14515:	e8 a5 fd ff ff       	call   142bf <get_tty>
   1451a:	83 c4 10             	add    $0x10,%esp
   1451d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   14520:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14524:	75 07                	jne    1452d <tty_write+0x34>
        return -1;
   14526:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1452b:	eb 6e                	jmp    1459b <tty_write+0xa2>
    }

    int len = 0;
   1452d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   14534:	eb 57                	jmp    1458d <tty_write+0x94>
        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   14536:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14539:	83 c0 2c             	add    $0x2c,%eax
   1453c:	83 ec 0c             	sub    $0xc,%esp
   1453f:	50                   	push   %eax
   14540:	e8 b1 06 00 00       	call   14bf6 <sem_wait>
   14545:	83 c4 10             	add    $0x10,%esp

        char c = *(buf++);
   14548:	8b 45 10             	mov    0x10(%ebp),%eax
   1454b:	8d 50 01             	lea    0x1(%eax),%edx
   1454e:	89 55 10             	mov    %edx,0x10(%ebp)
   14551:	0f b6 00             	movzbl (%eax),%eax
   14554:	88 45 ef             	mov    %al,-0x11(%ebp)
        int err = tty_fifo_put(&tty->out_fifo, c);
   14557:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   1455b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1455e:	83 c2 04             	add    $0x4,%edx
   14561:	83 ec 08             	sub    $0x8,%esp
   14564:	50                   	push   %eax
   14565:	52                   	push   %edx
   14566:	e8 da fd ff ff       	call   14345 <tty_fifo_put>
   1456b:	83 c4 10             	add    $0x10,%esp
   1456e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14571:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14575:	78 1e                	js     14595 <tty_write+0x9c>
            break;
        }

        len++;
   14577:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   1457b:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   1457f:	83 ec 0c             	sub    $0xc,%esp
   14582:	ff 75 f0             	push   -0x10(%ebp)
   14585:	e8 cf f4 ff ff       	call   13a59 <console_write>
   1458a:	83 c4 10             	add    $0x10,%esp
    while (size) {
   1458d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14591:	75 a3                	jne    14536 <tty_write+0x3d>
   14593:	eb 01                	jmp    14596 <tty_write+0x9d>
            break;
   14595:	90                   	nop
    }
    


    return 0;
   14596:	b8 00 00 00 00       	mov    $0x0,%eax
} 
   1459b:	c9                   	leave  
   1459c:	c3                   	ret    

0001459d <tty_control>:
/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   1459d:	55                   	push   %ebp
   1459e:	89 e5                	mov    %esp,%ebp

    return 0;
   145a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   145a5:	5d                   	pop    %ebp
   145a6:	c3                   	ret    

000145a7 <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   145a7:	55                   	push   %ebp
   145a8:	89 e5                	mov    %esp,%ebp

}
   145aa:	90                   	nop
   145ab:	5d                   	pop    %ebp
   145ac:	c3                   	ret    

000145ad <inb>:
static inline uint8_t inb(uint16_t port) {
   145ad:	55                   	push   %ebp
   145ae:	89 e5                	mov    %esp,%ebp
   145b0:	83 ec 14             	sub    $0x14,%esp
   145b3:	8b 45 08             	mov    0x8(%ebp),%eax
   145b6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   145ba:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   145be:	89 c2                	mov    %eax,%edx
   145c0:	ec                   	in     (%dx),%al
   145c1:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   145c4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   145c8:	c9                   	leave  
   145c9:	c3                   	ret    

000145ca <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   145ca:	55                   	push   %ebp
   145cb:	89 e5                	mov    %esp,%ebp
   145cd:	83 ec 08             	sub    $0x8,%esp
   145d0:	8b 45 08             	mov    0x8(%ebp),%eax
   145d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   145d6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   145da:	89 d0                	mov    %edx,%eax
   145dc:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   145df:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   145e3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   145e7:	ee                   	out    %al,(%dx)
}
   145e8:	90                   	nop
   145e9:	c9                   	leave  
   145ea:	c3                   	ret    

000145eb <inw>:
static inline uint16_t inw(uint16_t port) {
   145eb:	55                   	push   %ebp
   145ec:	89 e5                	mov    %esp,%ebp
   145ee:	83 ec 14             	sub    $0x14,%esp
   145f1:	8b 45 08             	mov    0x8(%ebp),%eax
   145f4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   145f8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   145fc:	89 c2                	mov    %eax,%edx
   145fe:	66 ed                	in     (%dx),%ax
   14600:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14604:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14608:	c9                   	leave  
   14609:	c3                   	ret    

0001460a <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   1460a:	55                   	push   %ebp
   1460b:	89 e5                	mov    %esp,%ebp
   1460d:	53                   	push   %ebx
   1460e:	83 ec 14             	sub    $0x14,%esp
   14611:	8b 45 0c             	mov    0xc(%ebp),%eax
   14614:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   14618:	68 e0 00 00 00       	push   $0xe0
   1461d:	68 f6 01 00 00       	push   $0x1f6
   14622:	e8 a3 ff ff ff       	call   145ca <outb>
   14627:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   1462a:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1462e:	66 c1 e8 08          	shr    $0x8,%ax
   14632:	0f b6 c0             	movzbl %al,%eax
   14635:	50                   	push   %eax
   14636:	68 f2 01 00 00       	push   $0x1f2
   1463b:	e8 8a ff ff ff       	call   145ca <outb>
   14640:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   14643:	8b 45 08             	mov    0x8(%ebp),%eax
   14646:	c1 e8 18             	shr    $0x18,%eax
   14649:	0f b6 c0             	movzbl %al,%eax
   1464c:	50                   	push   %eax
   1464d:	68 f3 01 00 00       	push   $0x1f3
   14652:	e8 73 ff ff ff       	call   145ca <outb>
   14657:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   1465a:	6a 00                	push   $0x0
   1465c:	68 f4 01 00 00       	push   $0x1f4
   14661:	e8 64 ff ff ff       	call   145ca <outb>
   14666:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   14669:	6a 00                	push   $0x0
   1466b:	68 f5 01 00 00       	push   $0x1f5
   14670:	e8 55 ff ff ff       	call   145ca <outb>
   14675:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   14678:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1467c:	0f b6 c0             	movzbl %al,%eax
   1467f:	50                   	push   %eax
   14680:	68 f2 01 00 00       	push   $0x1f2
   14685:	e8 40 ff ff ff       	call   145ca <outb>
   1468a:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   1468d:	8b 45 08             	mov    0x8(%ebp),%eax
   14690:	0f b6 c0             	movzbl %al,%eax
   14693:	50                   	push   %eax
   14694:	68 f3 01 00 00       	push   $0x1f3
   14699:	e8 2c ff ff ff       	call   145ca <outb>
   1469e:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   146a1:	8b 45 08             	mov    0x8(%ebp),%eax
   146a4:	c1 e8 08             	shr    $0x8,%eax
   146a7:	0f b6 c0             	movzbl %al,%eax
   146aa:	50                   	push   %eax
   146ab:	68 f4 01 00 00       	push   $0x1f4
   146b0:	e8 15 ff ff ff       	call   145ca <outb>
   146b5:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   146b8:	8b 45 08             	mov    0x8(%ebp),%eax
   146bb:	c1 e8 10             	shr    $0x10,%eax
   146be:	0f b6 c0             	movzbl %al,%eax
   146c1:	50                   	push   %eax
   146c2:	68 f5 01 00 00       	push   $0x1f5
   146c7:	e8 fe fe ff ff       	call   145ca <outb>
   146cc:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   146cf:	6a 24                	push   $0x24
   146d1:	68 f7 01 00 00       	push   $0x1f7
   146d6:	e8 ef fe ff ff       	call   145ca <outb>
   146db:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   146de:	8b 45 10             	mov    0x10(%ebp),%eax
   146e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   146e4:	eb 4a                	jmp    14730 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   146e6:	90                   	nop
   146e7:	68 f7 01 00 00       	push   $0x1f7
   146ec:	e8 bc fe ff ff       	call   145ad <inb>
   146f1:	83 c4 04             	add    $0x4,%esp
   146f4:	0f b6 c0             	movzbl %al,%eax
   146f7:	25 88 00 00 00       	and    $0x88,%eax
   146fc:	83 f8 08             	cmp    $0x8,%eax
   146ff:	75 e6                	jne    146e7 <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14708:	eb 1d                	jmp    14727 <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   1470a:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   1470d:	8d 43 02             	lea    0x2(%ebx),%eax
   14710:	89 45 f8             	mov    %eax,-0x8(%ebp)
   14713:	68 f0 01 00 00       	push   $0x1f0
   14718:	e8 ce fe ff ff       	call   145eb <inw>
   1471d:	83 c4 04             	add    $0x4,%esp
   14720:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14723:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14727:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1472e:	7e da                	jle    1470a <read_disk+0x100>
    while (sector_count--) {
   14730:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14734:	8d 50 ff             	lea    -0x1(%eax),%edx
   14737:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   1473b:	66 85 c0             	test   %ax,%ax
   1473e:	75 a6                	jne    146e6 <read_disk+0xdc>
        }
        
    }
    
}
   14740:	90                   	nop
   14741:	90                   	nop
   14742:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14745:	c9                   	leave  
   14746:	c3                   	ret    

00014747 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   14747:	55                   	push   %ebp
   14748:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/') {  //打开外部程序
   1474a:	8b 45 08             	mov    0x8(%ebp),%eax
   1474d:	0f b6 00             	movzbl (%eax),%eax
   14750:	3c 2f                	cmp    $0x2f,%al
   14752:	75 25                	jne    14779 <sys_open+0x32>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   14754:	68 00 00 80 07       	push   $0x7800000
   14759:	6a 50                	push   $0x50
   1475b:	68 88 13 00 00       	push   $0x1388
   14760:	e8 a5 fe ff ff       	call   1460a <read_disk>
   14765:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   14768:	c7 05 20 dd 03 00 00 	movl   $0x7800000,0x3dd20
   1476f:	00 80 07 
        return TEMP_FILE_ID;
   14772:	b8 64 00 00 00       	mov    $0x64,%eax
   14777:	eb 05                	jmp    1477e <sys_open+0x37>
    }

    return -1;
   14779:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1477e:	c9                   	leave  
   1477f:	c3                   	ret    

00014780 <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   14780:	55                   	push   %ebp
   14781:	89 e5                	mov    %esp,%ebp
   14783:	83 ec 08             	sub    $0x8,%esp
    if (file == TEMP_FILE_ID) {
   14786:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   1478a:	75 2c                	jne    147b8 <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   1478c:	a1 20 dd 03 00       	mov    0x3dd20,%eax
   14791:	83 ec 04             	sub    $0x4,%esp
   14794:	ff 75 10             	push   0x10(%ebp)
   14797:	50                   	push   %eax
   14798:	ff 75 0c             	push   0xc(%ebp)
   1479b:	e8 ce 0d 00 00       	call   1556e <kernel_memcpy>
   147a0:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   147a3:	8b 15 20 dd 03 00    	mov    0x3dd20,%edx
   147a9:	8b 45 10             	mov    0x10(%ebp),%eax
   147ac:	01 d0                	add    %edx,%eax
   147ae:	a3 20 dd 03 00       	mov    %eax,0x3dd20
        return len;
   147b3:	8b 45 10             	mov    0x10(%ebp),%eax
   147b6:	eb 05                	jmp    147bd <sys_read+0x3d>
    }
    return -1;
   147b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   147bd:	c9                   	leave  
   147be:	c3                   	ret    

000147bf <sys_write>:
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
#include "tools/log.h"
int sys_write(int file, char *ptr, int len) {
   147bf:	55                   	push   %ebp
   147c0:	89 e5                	mov    %esp,%ebp
   147c2:	83 ec 08             	sub    $0x8,%esp
    if (file == 1) {
   147c5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   147c9:	75 1e                	jne    147e9 <sys_write+0x2a>
        ptr[len] = '\0';
   147cb:	8b 55 10             	mov    0x10(%ebp),%edx
   147ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   147d1:	01 d0                	add    %edx,%eax
   147d3:	c6 00 00             	movb   $0x0,(%eax)
        log_printf("%s", ptr);
   147d6:	83 ec 08             	sub    $0x8,%esp
   147d9:	ff 75 0c             	push   0xc(%ebp)
   147dc:	68 1d 6d 01 00       	push   $0x16d1d
   147e1:	e8 d4 15 00 00       	call   15dba <log_printf>
   147e6:	83 c4 10             	add    $0x10,%esp
        // int dev_id = dev_open(DEV_TTY, 0, (void*)0);
        // dev_write(dev_id, 0, ptr, len);
        // dev_close(dev_id);

    }
    return -1;
   147e9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   147ee:	c9                   	leave  
   147ef:	c3                   	ret    

000147f0 <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   147f0:	55                   	push   %ebp
   147f1:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   147f3:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   147f7:	75 14                	jne    1480d <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   147f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   147fc:	05 00 00 80 07       	add    $0x7800000,%eax
   14801:	a3 20 dd 03 00       	mov    %eax,0x3dd20
        return 0;
   14806:	b8 00 00 00 00       	mov    $0x0,%eax
   1480b:	eb 05                	jmp    14812 <sys_lseek+0x22>
    }

    return -1;
   1480d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   14812:	5d                   	pop    %ebp
   14813:	c3                   	ret    

00014814 <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   14814:	55                   	push   %ebp
   14815:	89 e5                	mov    %esp,%ebp
    return 0;
   14817:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1481c:	5d                   	pop    %ebp
   1481d:	c3                   	ret    

0001481e <sys_isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int sys_isatty(int file) {
   1481e:	55                   	push   %ebp
   1481f:	89 e5                	mov    %esp,%ebp
    return -1;
   14821:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14826:	5d                   	pop    %ebp
   14827:	c3                   	ret    

00014828 <sys_fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int sys_fstat(int file, struct stat *st) {
   14828:	55                   	push   %ebp
   14829:	89 e5                	mov    %esp,%ebp
    return -1;
   1482b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14830:	5d                   	pop    %ebp
   14831:	c3                   	ret    

00014832 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   14832:	55                   	push   %ebp
   14833:	89 e5                	mov    %esp,%ebp
   14835:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   14838:	8b 45 08             	mov    0x8(%ebp),%eax
   1483b:	8b 40 50             	mov    0x50(%eax),%eax
   1483e:	85 c0                	test   %eax,%eax
   14840:	75 19                	jne    1485b <kernel_init+0x29>
   14842:	68 20 6d 01 00       	push   $0x16d20
   14847:	68 c0 6d 01 00       	push   $0x16dc0
   1484c:	6a 24                	push   $0x24
   1484e:	68 44 6d 01 00       	push   $0x16d44
   14853:	e8 63 08 00 00       	call   150bb <pannic>
   14858:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   1485b:	e8 57 dc ff ff       	call   124b7 <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   14860:	e8 00 e4 ff ff       	call   12c65 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   14865:	e8 21 15 00 00       	call   15d8b <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   1486a:	83 ec 0c             	sub    $0xc,%esp
   1486d:	ff 75 08             	push   0x8(%ebp)
   14870:	e8 e4 c3 ff ff       	call   10c59 <memory_init>
   14875:	83 c4 10             	add    $0x10,%esp

    //6.初始化定时器的中断处理
    time_init();
   14878:	e8 2a fa ff ff       	call   142a7 <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   1487d:	e8 87 cd ff ff       	call   11609 <task_manager_init>
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   14882:	90                   	nop
   14883:	c9                   	leave  
   14884:	c3                   	ret    

00014885 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   14885:	55                   	push   %ebp
   14886:	89 e5                	mov    %esp,%ebp
   14888:	56                   	push   %esi
   14889:	53                   	push   %ebx
   1488a:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   1488d:	e8 28 d0 ff ff       	call   118ba <task_current>
   14892:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   14895:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14899:	75 19                	jne    148b4 <move_to_first_task+0x2f>
   1489b:	68 79 6d 01 00       	push   $0x16d79
   148a0:	68 cc 6d 01 00       	push   $0x16dcc
   148a5:	6a 44                	push   $0x44
   148a7:	68 44 6d 01 00       	push   $0x16d44
   148ac:	e8 0a 08 00 00       	call   150bb <pannic>
   148b1:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   148b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148b7:	83 c0 58             	add    $0x58,%eax
   148ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   148bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148c0:	8b 40 50             	mov    0x50(%eax),%eax
   148c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   148c6:	8b 52 38             	mov    0x38(%edx),%edx
   148c9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   148cc:	8b 49 24             	mov    0x24(%ecx),%ecx
   148cf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   148d2:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   148d5:	8b 75 f0             	mov    -0x10(%ebp),%esi
   148d8:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   148db:	50                   	push   %eax
   148dc:	52                   	push   %edx
   148dd:	51                   	push   %ecx
   148de:	53                   	push   %ebx
   148df:	56                   	push   %esi
   148e0:	cf                   	iret   

        
    );
}
   148e1:	90                   	nop
   148e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   148e5:	5b                   	pop    %ebx
   148e6:	5e                   	pop    %esi
   148e7:	5d                   	pop    %ebp
   148e8:	c3                   	ret    

000148e9 <init_main>:


void init_main(void) {
   148e9:	55                   	push   %ebp
   148ea:	89 e5                	mov    %esp,%ebp
   148ec:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   148ef:	83 ec 0c             	sub    $0xc,%esp
   148f2:	68 83 6d 01 00       	push   $0x16d83
   148f7:	e8 be 14 00 00       	call   15dba <log_printf>
   148fc:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS\n", OS_VERSION);
   148ff:	83 ec 04             	sub    $0x4,%esp
   14902:	68 9c 6d 01 00       	push   $0x16d9c
   14907:	68 a2 6d 01 00       	push   $0x16da2
   1490c:	68 a8 6d 01 00       	push   $0x16da8
   14911:	e8 a4 14 00 00       	call   15dba <log_printf>
   14916:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   14919:	e8 c8 cd ff ff       	call   116e6 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   1491e:	e8 62 ff ff ff       	call   14885 <move_to_first_task>
   14923:	90                   	nop
   14924:	c9                   	leave  
   14925:	c3                   	ret    

00014926 <list_init>:
static inline void list_init(list_t *list) {
   14926:	55                   	push   %ebp
   14927:	89 e5                	mov    %esp,%ebp
   14929:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1492c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14930:	75 19                	jne    1494b <list_init+0x25>
   14932:	68 e0 6d 01 00       	push   $0x16de0
   14937:	68 8c 6e 01 00       	push   $0x16e8c
   1493c:	6a 31                	push   $0x31
   1493e:	68 f4 6d 01 00       	push   $0x16df4
   14943:	e8 73 07 00 00       	call   150bb <pannic>
   14948:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1494b:	8b 45 08             	mov    0x8(%ebp),%eax
   1494e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14955:	8b 45 08             	mov    0x8(%ebp),%eax
   14958:	8b 50 04             	mov    0x4(%eax),%edx
   1495b:	8b 45 08             	mov    0x8(%ebp),%eax
   1495e:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   14960:	8b 45 08             	mov    0x8(%ebp),%eax
   14963:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1496a:	90                   	nop
   1496b:	c9                   	leave  
   1496c:	c3                   	ret    

0001496d <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1496d:	55                   	push   %ebp
   1496e:	89 e5                	mov    %esp,%ebp
   14970:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14973:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14977:	75 19                	jne    14992 <list_is_empty+0x25>
   14979:	68 e0 6d 01 00       	push   $0x16de0
   1497e:	68 98 6e 01 00       	push   $0x16e98
   14983:	6a 38                	push   $0x38
   14985:	68 f4 6d 01 00       	push   $0x16df4
   1498a:	e8 2c 07 00 00       	call   150bb <pannic>
   1498f:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   14992:	8b 45 08             	mov    0x8(%ebp),%eax
   14995:	8b 40 08             	mov    0x8(%eax),%eax
   14998:	85 c0                	test   %eax,%eax
   1499a:	0f 94 c0             	sete   %al
   1499d:	0f b6 c0             	movzbl %al,%eax
}
   149a0:	c9                   	leave  
   149a1:	c3                   	ret    

000149a2 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   149a2:	55                   	push   %ebp
   149a3:	89 e5                	mov    %esp,%ebp
   149a5:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   149a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   149ac:	75 19                	jne    149c7 <mutex_init+0x25>
   149ae:	68 32 6e 01 00       	push   $0x16e32
   149b3:	68 80 6e 01 00       	push   $0x16e80
   149b8:	6a 15                	push   $0x15
   149ba:	68 48 6e 01 00       	push   $0x16e48
   149bf:	e8 f7 06 00 00       	call   150bb <pannic>
   149c4:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   149c7:	8b 45 08             	mov    0x8(%ebp),%eax
   149ca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   149d1:	8b 45 08             	mov    0x8(%ebp),%eax
   149d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   149da:	8b 45 08             	mov    0x8(%ebp),%eax
   149dd:	83 c0 08             	add    $0x8,%eax
   149e0:	83 ec 0c             	sub    $0xc,%esp
   149e3:	50                   	push   %eax
   149e4:	e8 3d ff ff ff       	call   14926 <list_init>
   149e9:	83 c4 10             	add    $0x10,%esp
}
   149ec:	90                   	nop
   149ed:	c9                   	leave  
   149ee:	c3                   	ret    

000149ef <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   149ef:	55                   	push   %ebp
   149f0:	89 e5                	mov    %esp,%ebp
   149f2:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   149f5:	e8 9b e5 ff ff       	call   12f95 <idt_enter_protection>
   149fa:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   149fd:	e8 b8 ce ff ff       	call   118ba <task_current>
   14a02:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   14a05:	8b 45 08             	mov    0x8(%ebp),%eax
   14a08:	8b 40 04             	mov    0x4(%eax),%eax
   14a0b:	85 c0                	test   %eax,%eax
   14a0d:	75 19                	jne    14a28 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   14a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   14a12:	8b 40 04             	mov    0x4(%eax),%eax
   14a15:	8d 50 01             	lea    0x1(%eax),%edx
   14a18:	8b 45 08             	mov    0x8(%ebp),%eax
   14a1b:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   14a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   14a21:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14a24:	89 10                	mov    %edx,(%eax)
   14a26:	eb 47                	jmp    14a6f <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   14a28:	8b 45 08             	mov    0x8(%ebp),%eax
   14a2b:	8b 00                	mov    (%eax),%eax
   14a2d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14a30:	75 11                	jne    14a43 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   14a32:	8b 45 08             	mov    0x8(%ebp),%eax
   14a35:	8b 40 04             	mov    0x4(%eax),%eax
   14a38:	8d 50 01             	lea    0x1(%eax),%edx
   14a3b:	8b 45 08             	mov    0x8(%ebp),%eax
   14a3e:	89 50 04             	mov    %edx,0x4(%eax)
   14a41:	eb 2c                	jmp    14a6f <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   14a43:	83 ec 0c             	sub    $0xc,%esp
   14a46:	ff 75 f0             	push   -0x10(%ebp)
   14a49:	e8 f3 cd ff ff       	call   11841 <task_set_unready>
   14a4e:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   14a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a54:	8d 50 50             	lea    0x50(%eax),%edx
   14a57:	8b 45 08             	mov    0x8(%ebp),%eax
   14a5a:	83 c0 08             	add    $0x8,%eax
   14a5d:	83 ec 08             	sub    $0x8,%esp
   14a60:	52                   	push   %edx
   14a61:	50                   	push   %eax
   14a62:	e8 66 10 00 00       	call   15acd <list_insert_last>
   14a67:	83 c4 10             	add    $0x10,%esp
    task_switch();
   14a6a:	e8 55 ce ff ff       	call   118c4 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   14a6f:	83 ec 0c             	sub    $0xc,%esp
   14a72:	ff 75 f4             	push   -0xc(%ebp)
   14a75:	e8 33 e5 ff ff       	call   12fad <idt_leave_protection>
   14a7a:	83 c4 10             	add    $0x10,%esp
}
   14a7d:	90                   	nop
   14a7e:	c9                   	leave  
   14a7f:	c3                   	ret    

00014a80 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   14a80:	55                   	push   %ebp
   14a81:	89 e5                	mov    %esp,%ebp
   14a83:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   14a86:	e8 0a e5 ff ff       	call   12f95 <idt_enter_protection>
   14a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   14a8e:	e8 27 ce ff ff       	call   118ba <task_current>
   14a93:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   14a96:	8b 45 08             	mov    0x8(%ebp),%eax
   14a99:	8b 00                	mov    (%eax),%eax
   14a9b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14a9e:	0f 85 83 00 00 00    	jne    14b27 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   14aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   14aa7:	8b 40 04             	mov    0x4(%eax),%eax
   14aaa:	8d 50 ff             	lea    -0x1(%eax),%edx
   14aad:	8b 45 08             	mov    0x8(%ebp),%eax
   14ab0:	89 50 04             	mov    %edx,0x4(%eax)
   14ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   14ab6:	8b 40 04             	mov    0x4(%eax),%eax
   14ab9:	85 c0                	test   %eax,%eax
   14abb:	75 6a                	jne    14b27 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   14abd:	8b 45 08             	mov    0x8(%ebp),%eax
   14ac0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   14ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   14ac9:	83 c0 08             	add    $0x8,%eax
   14acc:	83 ec 0c             	sub    $0xc,%esp
   14acf:	50                   	push   %eax
   14ad0:	e8 98 fe ff ff       	call   1496d <list_is_empty>
   14ad5:	83 c4 10             	add    $0x10,%esp
   14ad8:	85 c0                	test   %eax,%eax
   14ada:	75 4b                	jne    14b27 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   14adc:	8b 45 08             	mov    0x8(%ebp),%eax
   14adf:	83 c0 08             	add    $0x8,%eax
   14ae2:	83 ec 0c             	sub    $0xc,%esp
   14ae5:	50                   	push   %eax
   14ae6:	e8 71 10 00 00       	call   15b5c <list_remove_first>
   14aeb:	83 c4 10             	add    $0x10,%esp
   14aee:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   14af1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14af5:	74 08                	je     14aff <mutex_unlock+0x7f>
   14af7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14afa:	83 e8 50             	sub    $0x50,%eax
   14afd:	eb 05                	jmp    14b04 <mutex_unlock+0x84>
   14aff:	b8 00 00 00 00       	mov    $0x0,%eax
   14b04:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   14b07:	8b 45 08             	mov    0x8(%ebp),%eax
   14b0a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   14b11:	8b 45 08             	mov    0x8(%ebp),%eax
   14b14:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14b17:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   14b19:	83 ec 0c             	sub    $0xc,%esp
   14b1c:	ff 75 e8             	push   -0x18(%ebp)
   14b1f:	e8 d2 cc ff ff       	call   117f6 <task_set_ready>
   14b24:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   14b27:	83 ec 0c             	sub    $0xc,%esp
   14b2a:	ff 75 f4             	push   -0xc(%ebp)
   14b2d:	e8 7b e4 ff ff       	call   12fad <idt_leave_protection>
   14b32:	83 c4 10             	add    $0x10,%esp
}
   14b35:	90                   	nop
   14b36:	c9                   	leave  
   14b37:	c3                   	ret    

00014b38 <list_init>:
static inline void list_init(list_t *list) {
   14b38:	55                   	push   %ebp
   14b39:	89 e5                	mov    %esp,%ebp
   14b3b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14b3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14b42:	75 19                	jne    14b5d <list_init+0x25>
   14b44:	68 a8 6e 01 00       	push   $0x16ea8
   14b49:	68 4c 6f 01 00       	push   $0x16f4c
   14b4e:	6a 31                	push   $0x31
   14b50:	68 bc 6e 01 00       	push   $0x16ebc
   14b55:	e8 61 05 00 00       	call   150bb <pannic>
   14b5a:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   14b5d:	8b 45 08             	mov    0x8(%ebp),%eax
   14b60:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14b67:	8b 45 08             	mov    0x8(%ebp),%eax
   14b6a:	8b 50 04             	mov    0x4(%eax),%edx
   14b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   14b70:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   14b72:	8b 45 08             	mov    0x8(%ebp),%eax
   14b75:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   14b7c:	90                   	nop
   14b7d:	c9                   	leave  
   14b7e:	c3                   	ret    

00014b7f <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   14b7f:	55                   	push   %ebp
   14b80:	89 e5                	mov    %esp,%ebp
   14b82:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14b85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14b89:	75 19                	jne    14ba4 <list_is_empty+0x25>
   14b8b:	68 a8 6e 01 00       	push   $0x16ea8
   14b90:	68 58 6f 01 00       	push   $0x16f58
   14b95:	6a 38                	push   $0x38
   14b97:	68 bc 6e 01 00       	push   $0x16ebc
   14b9c:	e8 1a 05 00 00       	call   150bb <pannic>
   14ba1:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   14ba4:	8b 45 08             	mov    0x8(%ebp),%eax
   14ba7:	8b 40 08             	mov    0x8(%eax),%eax
   14baa:	85 c0                	test   %eax,%eax
   14bac:	0f 94 c0             	sete   %al
   14baf:	0f b6 c0             	movzbl %al,%eax
}
   14bb2:	c9                   	leave  
   14bb3:	c3                   	ret    

00014bb4 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   14bb4:	55                   	push   %ebp
   14bb5:	89 e5                	mov    %esp,%ebp
   14bb7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   14bba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14bbe:	75 19                	jne    14bd9 <sem_init+0x25>
   14bc0:	68 fa 6e 01 00       	push   $0x16efa
   14bc5:	68 40 6f 01 00       	push   $0x16f40
   14bca:	6a 18                	push   $0x18
   14bcc:	68 0c 6f 01 00       	push   $0x16f0c
   14bd1:	e8 e5 04 00 00       	call   150bb <pannic>
   14bd6:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   14bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   14bdc:	8b 55 0c             	mov    0xc(%ebp),%edx
   14bdf:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   14be1:	8b 45 08             	mov    0x8(%ebp),%eax
   14be4:	83 c0 04             	add    $0x4,%eax
   14be7:	83 ec 0c             	sub    $0xc,%esp
   14bea:	50                   	push   %eax
   14beb:	e8 48 ff ff ff       	call   14b38 <list_init>
   14bf0:	83 c4 10             	add    $0x10,%esp
}
   14bf3:	90                   	nop
   14bf4:	c9                   	leave  
   14bf5:	c3                   	ret    

00014bf6 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   14bf6:	55                   	push   %ebp
   14bf7:	89 e5                	mov    %esp,%ebp
   14bf9:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   14bfc:	e8 94 e3 ff ff       	call   12f95 <idt_enter_protection>
   14c01:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   14c04:	8b 45 08             	mov    0x8(%ebp),%eax
   14c07:	8b 00                	mov    (%eax),%eax
   14c09:	85 c0                	test   %eax,%eax
   14c0b:	7e 0f                	jle    14c1c <sem_wait+0x26>
        --sem->count;   
   14c0d:	8b 45 08             	mov    0x8(%ebp),%eax
   14c10:	8b 00                	mov    (%eax),%eax
   14c12:	8d 50 ff             	lea    -0x1(%eax),%edx
   14c15:	8b 45 08             	mov    0x8(%ebp),%eax
   14c18:	89 10                	mov    %edx,(%eax)
   14c1a:	eb 34                	jmp    14c50 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   14c1c:	e8 99 cc ff ff       	call   118ba <task_current>
   14c21:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   14c24:	83 ec 0c             	sub    $0xc,%esp
   14c27:	ff 75 f0             	push   -0x10(%ebp)
   14c2a:	e8 12 cc ff ff       	call   11841 <task_set_unready>
   14c2f:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   14c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14c35:	8d 50 50             	lea    0x50(%eax),%edx
   14c38:	8b 45 08             	mov    0x8(%ebp),%eax
   14c3b:	83 c0 04             	add    $0x4,%eax
   14c3e:	83 ec 08             	sub    $0x8,%esp
   14c41:	52                   	push   %edx
   14c42:	50                   	push   %eax
   14c43:	e8 85 0e 00 00       	call   15acd <list_insert_last>
   14c48:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   14c4b:	e8 74 cc ff ff       	call   118c4 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   14c50:	83 ec 0c             	sub    $0xc,%esp
   14c53:	ff 75 f4             	push   -0xc(%ebp)
   14c56:	e8 52 e3 ff ff       	call   12fad <idt_leave_protection>
   14c5b:	83 c4 10             	add    $0x10,%esp
}
   14c5e:	90                   	nop
   14c5f:	c9                   	leave  
   14c60:	c3                   	ret    

00014c61 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   14c61:	55                   	push   %ebp
   14c62:	89 e5                	mov    %esp,%ebp
   14c64:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   14c67:	e8 29 e3 ff ff       	call   12f95 <idt_enter_protection>
   14c6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   14c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   14c72:	83 c0 04             	add    $0x4,%eax
   14c75:	83 ec 0c             	sub    $0xc,%esp
   14c78:	50                   	push   %eax
   14c79:	e8 01 ff ff ff       	call   14b7f <list_is_empty>
   14c7e:	83 c4 10             	add    $0x10,%esp
   14c81:	85 c0                	test   %eax,%eax
   14c83:	75 40                	jne    14cc5 <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   14c85:	8b 45 08             	mov    0x8(%ebp),%eax
   14c88:	83 c0 04             	add    $0x4,%eax
   14c8b:	83 ec 0c             	sub    $0xc,%esp
   14c8e:	50                   	push   %eax
   14c8f:	e8 c8 0e 00 00       	call   15b5c <list_remove_first>
   14c94:	83 c4 10             	add    $0x10,%esp
   14c97:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   14c9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14c9e:	74 08                	je     14ca8 <sem_notify+0x47>
   14ca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14ca3:	83 e8 50             	sub    $0x50,%eax
   14ca6:	eb 05                	jmp    14cad <sem_notify+0x4c>
   14ca8:	b8 00 00 00 00       	mov    $0x0,%eax
   14cad:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   14cb0:	83 ec 0c             	sub    $0xc,%esp
   14cb3:	ff 75 ec             	push   -0x14(%ebp)
   14cb6:	e8 3b cb ff ff       	call   117f6 <task_set_ready>
   14cbb:	83 c4 10             	add    $0x10,%esp
        task_switch();
   14cbe:	e8 01 cc ff ff       	call   118c4 <task_switch>
   14cc3:	eb 0d                	jmp    14cd2 <sem_notify+0x71>
    } else {
        sem->count++;
   14cc5:	8b 45 08             	mov    0x8(%ebp),%eax
   14cc8:	8b 00                	mov    (%eax),%eax
   14cca:	8d 50 01             	lea    0x1(%eax),%edx
   14ccd:	8b 45 08             	mov    0x8(%ebp),%eax
   14cd0:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   14cd2:	83 ec 0c             	sub    $0xc,%esp
   14cd5:	ff 75 f4             	push   -0xc(%ebp)
   14cd8:	e8 d0 e2 ff ff       	call   12fad <idt_leave_protection>
   14cdd:	83 c4 10             	add    $0x10,%esp

}
   14ce0:	90                   	nop
   14ce1:	c9                   	leave  
   14ce2:	c3                   	ret    

00014ce3 <sem_count>:

int sem_count(sem_t *sem) {
   14ce3:	55                   	push   %ebp
   14ce4:	89 e5                	mov    %esp,%ebp
   14ce6:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   14ce9:	e8 a7 e2 ff ff       	call   12f95 <idt_enter_protection>
   14cee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   14cf1:	8b 45 08             	mov    0x8(%ebp),%eax
   14cf4:	8b 00                	mov    (%eax),%eax
   14cf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   14cf9:	83 ec 0c             	sub    $0xc,%esp
   14cfc:	ff 75 f4             	push   -0xc(%ebp)
   14cff:	e8 a9 e2 ff ff       	call   12fad <idt_leave_protection>
   14d04:	83 c4 10             	add    $0x10,%esp

    return count;
   14d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d0a:	c9                   	leave  
   14d0b:	c3                   	ret    

00014d0c <list_init>:
static inline void list_init(list_t *list) {
   14d0c:	55                   	push   %ebp
   14d0d:	89 e5                	mov    %esp,%ebp
   14d0f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14d12:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14d16:	75 19                	jne    14d31 <list_init+0x25>
   14d18:	68 68 6f 01 00       	push   $0x16f68
   14d1d:	68 6c 70 01 00       	push   $0x1706c
   14d22:	6a 31                	push   $0x31
   14d24:	68 7c 6f 01 00       	push   $0x16f7c
   14d29:	e8 8d 03 00 00       	call   150bb <pannic>
   14d2e:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   14d31:	8b 45 08             	mov    0x8(%ebp),%eax
   14d34:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14d3b:	8b 45 08             	mov    0x8(%ebp),%eax
   14d3e:	8b 50 04             	mov    0x4(%eax),%edx
   14d41:	8b 45 08             	mov    0x8(%ebp),%eax
   14d44:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   14d46:	8b 45 08             	mov    0x8(%ebp),%eax
   14d49:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   14d50:	90                   	nop
   14d51:	c9                   	leave  
   14d52:	c3                   	ret    

00014d53 <list_get_size>:
static inline int list_get_size(list_t *list) {
   14d53:	55                   	push   %ebp
   14d54:	89 e5                	mov    %esp,%ebp
   14d56:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14d59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14d5d:	75 19                	jne    14d78 <list_get_size+0x25>
   14d5f:	68 68 6f 01 00       	push   $0x16f68
   14d64:	68 78 70 01 00       	push   $0x17078
   14d69:	6a 3e                	push   $0x3e
   14d6b:	68 7c 6f 01 00       	push   $0x16f7c
   14d70:	e8 46 03 00 00       	call   150bb <pannic>
   14d75:	83 c4 10             	add    $0x10,%esp
    return list->size;
   14d78:	8b 45 08             	mov    0x8(%ebp),%eax
   14d7b:	8b 40 08             	mov    0x8(%eax),%eax
}
   14d7e:	c9                   	leave  
   14d7f:	c3                   	ret    

00014d80 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   14d80:	55                   	push   %ebp
   14d81:	89 e5                	mov    %esp,%ebp
   14d83:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14d86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14d8a:	75 19                	jne    14da5 <list_get_first+0x25>
   14d8c:	68 68 6f 01 00       	push   $0x16f68
   14d91:	68 98 70 01 00       	push   $0x17098
   14d96:	6a 44                	push   $0x44
   14d98:	68 7c 6f 01 00       	push   $0x16f7c
   14d9d:	e8 19 03 00 00       	call   150bb <pannic>
   14da2:	83 c4 10             	add    $0x10,%esp
    return list->first;
   14da5:	8b 45 08             	mov    0x8(%ebp),%eax
   14da8:	8b 00                	mov    (%eax),%eax
}
   14daa:	c9                   	leave  
   14dab:	c3                   	ret    

00014dac <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   14dac:	55                   	push   %ebp
   14dad:	89 e5                	mov    %esp,%ebp
   14daf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14db2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14db6:	75 19                	jne    14dd1 <list_get_last+0x25>
   14db8:	68 68 6f 01 00       	push   $0x16f68
   14dbd:	68 88 70 01 00       	push   $0x17088
   14dc2:	6a 4a                	push   $0x4a
   14dc4:	68 7c 6f 01 00       	push   $0x16f7c
   14dc9:	e8 ed 02 00 00       	call   150bb <pannic>
   14dce:	83 c4 10             	add    $0x10,%esp

    return list->last;
   14dd1:	8b 45 08             	mov    0x8(%ebp),%eax
   14dd4:	8b 40 04             	mov    0x4(%eax),%eax
}
   14dd7:	c9                   	leave  
   14dd8:	c3                   	ret    

00014dd9 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   14dd9:	55                   	push   %ebp
   14dda:	89 e5                	mov    %esp,%ebp
   14ddc:	56                   	push   %esi
   14ddd:	53                   	push   %ebx
   14dde:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   14de1:	83 ec 0c             	sub    $0xc,%esp
   14de4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14de7:	50                   	push   %eax
   14de8:	e8 1f ff ff ff       	call   14d0c <list_init>
   14ded:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   14df0:	83 ec 0c             	sub    $0xc,%esp
   14df3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14df6:	50                   	push   %eax
   14df7:	e8 57 ff ff ff       	call   14d53 <list_get_size>
   14dfc:	83 c4 10             	add    $0x10,%esp
   14dff:	89 c6                	mov    %eax,%esi
   14e01:	83 ec 0c             	sub    $0xc,%esp
   14e04:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14e07:	50                   	push   %eax
   14e08:	e8 9f ff ff ff       	call   14dac <list_get_last>
   14e0d:	83 c4 10             	add    $0x10,%esp
   14e10:	89 c3                	mov    %eax,%ebx
   14e12:	83 ec 0c             	sub    $0xc,%esp
   14e15:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14e18:	50                   	push   %eax
   14e19:	e8 62 ff ff ff       	call   14d80 <list_get_first>
   14e1e:	83 c4 10             	add    $0x10,%esp
   14e21:	56                   	push   %esi
   14e22:	53                   	push   %ebx
   14e23:	50                   	push   %eax
   14e24:	68 bc 6f 01 00       	push   $0x16fbc
   14e29:	e8 8c 0f 00 00       	call   15dba <log_printf>
   14e2e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   14e31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14e38:	eb 3f                	jmp    14e79 <list_test+0xa0>
        list_node_t *node = nodes + i;
   14e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14e3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14e44:	8d 45 9c             	lea    -0x64(%ebp),%eax
   14e47:	01 d0                	add    %edx,%eax
   14e49:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   14e4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
   14e4f:	83 ec 04             	sub    $0x4,%esp
   14e52:	50                   	push   %eax
   14e53:	ff 75 f4             	push   -0xc(%ebp)
   14e56:	68 e4 6f 01 00       	push   $0x16fe4
   14e5b:	e8 5a 0f 00 00       	call   15dba <log_printf>
   14e60:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   14e63:	83 ec 08             	sub    $0x8,%esp
   14e66:	ff 75 d0             	push   -0x30(%ebp)
   14e69:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14e6c:	50                   	push   %eax
   14e6d:	e8 d0 0b 00 00       	call   15a42 <list_insert_first>
   14e72:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   14e75:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14e79:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   14e7d:	7e bb                	jle    14e3a <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   14e7f:	83 ec 0c             	sub    $0xc,%esp
   14e82:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14e85:	50                   	push   %eax
   14e86:	e8 c8 fe ff ff       	call   14d53 <list_get_size>
   14e8b:	83 c4 10             	add    $0x10,%esp
   14e8e:	89 c6                	mov    %eax,%esi
   14e90:	83 ec 0c             	sub    $0xc,%esp
   14e93:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14e96:	50                   	push   %eax
   14e97:	e8 10 ff ff ff       	call   14dac <list_get_last>
   14e9c:	83 c4 10             	add    $0x10,%esp
   14e9f:	89 c3                	mov    %eax,%ebx
   14ea1:	83 ec 0c             	sub    $0xc,%esp
   14ea4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14ea7:	50                   	push   %eax
   14ea8:	e8 d3 fe ff ff       	call   14d80 <list_get_first>
   14ead:	83 c4 10             	add    $0x10,%esp
   14eb0:	56                   	push   %esi
   14eb1:	53                   	push   %ebx
   14eb2:	50                   	push   %eax
   14eb3:	68 bc 6f 01 00       	push   $0x16fbc
   14eb8:	e8 fd 0e 00 00       	call   15dba <log_printf>
   14ebd:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   14ec0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14ec7:	eb 2d                	jmp    14ef6 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   14ec9:	83 ec 0c             	sub    $0xc,%esp
   14ecc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14ecf:	50                   	push   %eax
   14ed0:	e8 87 0c 00 00       	call   15b5c <list_remove_first>
   14ed5:	83 c4 10             	add    $0x10,%esp
   14ed8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   14edb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   14ede:	83 ec 04             	sub    $0x4,%esp
   14ee1:	50                   	push   %eax
   14ee2:	ff 75 f0             	push   -0x10(%ebp)
   14ee5:	68 03 70 01 00       	push   $0x17003
   14eea:	e8 cb 0e 00 00       	call   15dba <log_printf>
   14eef:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   14ef2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14ef6:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14efa:	7e cd                	jle    14ec9 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   14efc:	83 ec 0c             	sub    $0xc,%esp
   14eff:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14f02:	50                   	push   %eax
   14f03:	e8 4b fe ff ff       	call   14d53 <list_get_size>
   14f08:	83 c4 10             	add    $0x10,%esp
   14f0b:	89 c6                	mov    %eax,%esi
   14f0d:	83 ec 0c             	sub    $0xc,%esp
   14f10:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14f13:	50                   	push   %eax
   14f14:	e8 93 fe ff ff       	call   14dac <list_get_last>
   14f19:	83 c4 10             	add    $0x10,%esp
   14f1c:	89 c3                	mov    %eax,%ebx
   14f1e:	83 ec 0c             	sub    $0xc,%esp
   14f21:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14f24:	50                   	push   %eax
   14f25:	e8 56 fe ff ff       	call   14d80 <list_get_first>
   14f2a:	83 c4 10             	add    $0x10,%esp
   14f2d:	56                   	push   %esi
   14f2e:	53                   	push   %ebx
   14f2f:	50                   	push   %eax
   14f30:	68 bc 6f 01 00       	push   $0x16fbc
   14f35:	e8 80 0e 00 00       	call   15dba <log_printf>
   14f3a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   14f3d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   14f44:	eb 3f                	jmp    14f85 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   14f46:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14f49:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14f50:	8d 45 9c             	lea    -0x64(%ebp),%eax
   14f53:	01 d0                	add    %edx,%eax
   14f55:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   14f58:	8b 45 d8             	mov    -0x28(%ebp),%eax
   14f5b:	83 ec 04             	sub    $0x4,%esp
   14f5e:	50                   	push   %eax
   14f5f:	ff 75 ec             	push   -0x14(%ebp)
   14f62:	68 1a 70 01 00       	push   $0x1701a
   14f67:	e8 4e 0e 00 00       	call   15dba <log_printf>
   14f6c:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   14f6f:	83 ec 08             	sub    $0x8,%esp
   14f72:	ff 75 d8             	push   -0x28(%ebp)
   14f75:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14f78:	50                   	push   %eax
   14f79:	e8 4f 0b 00 00       	call   15acd <list_insert_last>
   14f7e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   14f81:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   14f85:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   14f89:	7e bb                	jle    14f46 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   14f8b:	83 ec 0c             	sub    $0xc,%esp
   14f8e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14f91:	50                   	push   %eax
   14f92:	e8 bc fd ff ff       	call   14d53 <list_get_size>
   14f97:	83 c4 10             	add    $0x10,%esp
   14f9a:	89 c6                	mov    %eax,%esi
   14f9c:	83 ec 0c             	sub    $0xc,%esp
   14f9f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14fa2:	50                   	push   %eax
   14fa3:	e8 04 fe ff ff       	call   14dac <list_get_last>
   14fa8:	83 c4 10             	add    $0x10,%esp
   14fab:	89 c3                	mov    %eax,%ebx
   14fad:	83 ec 0c             	sub    $0xc,%esp
   14fb0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14fb3:	50                   	push   %eax
   14fb4:	e8 c7 fd ff ff       	call   14d80 <list_get_first>
   14fb9:	83 c4 10             	add    $0x10,%esp
   14fbc:	56                   	push   %esi
   14fbd:	53                   	push   %ebx
   14fbe:	50                   	push   %eax
   14fbf:	68 bc 6f 01 00       	push   $0x16fbc
   14fc4:	e8 f1 0d 00 00       	call   15dba <log_printf>
   14fc9:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   14fcc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   14fd3:	eb 2d                	jmp    15002 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   14fd5:	83 ec 0c             	sub    $0xc,%esp
   14fd8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14fdb:	50                   	push   %eax
   14fdc:	e8 2c 0c 00 00       	call   15c0d <list_remove_last>
   14fe1:	83 c4 10             	add    $0x10,%esp
   14fe4:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   14fe7:	8b 45 dc             	mov    -0x24(%ebp),%eax
   14fea:	83 ec 04             	sub    $0x4,%esp
   14fed:	50                   	push   %eax
   14fee:	ff 75 e8             	push   -0x18(%ebp)
   14ff1:	68 38 70 01 00       	push   $0x17038
   14ff6:	e8 bf 0d 00 00       	call   15dba <log_printf>
   14ffb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   14ffe:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   15002:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   15006:	7e cd                	jle    14fd5 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15008:	83 ec 0c             	sub    $0xc,%esp
   1500b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1500e:	50                   	push   %eax
   1500f:	e8 3f fd ff ff       	call   14d53 <list_get_size>
   15014:	83 c4 10             	add    $0x10,%esp
   15017:	89 c6                	mov    %eax,%esi
   15019:	83 ec 0c             	sub    $0xc,%esp
   1501c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1501f:	50                   	push   %eax
   15020:	e8 87 fd ff ff       	call   14dac <list_get_last>
   15025:	83 c4 10             	add    $0x10,%esp
   15028:	89 c3                	mov    %eax,%ebx
   1502a:	83 ec 0c             	sub    $0xc,%esp
   1502d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15030:	50                   	push   %eax
   15031:	e8 4a fd ff ff       	call   14d80 <list_get_first>
   15036:	83 c4 10             	add    $0x10,%esp
   15039:	56                   	push   %esi
   1503a:	53                   	push   %ebx
   1503b:	50                   	push   %eax
   1503c:	68 bc 6f 01 00       	push   $0x16fbc
   15041:	e8 74 0d 00 00       	call   15dba <log_printf>
   15046:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   15049:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   15050:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   15057:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   1505e:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   15065:	8d 45 90             	lea    -0x70(%ebp),%eax
   15068:	83 c0 04             	add    $0x4,%eax
   1506b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   1506e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15072:	74 08                	je     1507c <list_test+0x2a3>
   15074:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   15077:	83 e8 04             	sub    $0x4,%eax
   1507a:	eb 05                	jmp    15081 <list_test+0x2a8>
   1507c:	b8 00 00 00 00       	mov    $0x0,%eax
   15081:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   15084:	8d 45 90             	lea    -0x70(%ebp),%eax
   15087:	83 ec 08             	sub    $0x8,%esp
   1508a:	50                   	push   %eax
   1508b:	68 4e 70 01 00       	push   $0x1704e
   15090:	e8 25 0d 00 00       	call   15dba <log_printf>
   15095:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   15098:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1509b:	83 ec 08             	sub    $0x8,%esp
   1509e:	50                   	push   %eax
   1509f:	68 5c 70 01 00       	push   $0x1705c
   150a4:	e8 11 0d 00 00       	call   15dba <log_printf>
   150a9:	83 c4 10             	add    $0x10,%esp

 }
   150ac:	90                   	nop
   150ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
   150b0:	5b                   	pop    %ebx
   150b1:	5e                   	pop    %esi
   150b2:	5d                   	pop    %ebp
   150b3:	c3                   	ret    

000150b4 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   150b4:	55                   	push   %ebp
   150b5:	89 e5                	mov    %esp,%ebp
   150b7:	f4                   	hlt    
   150b8:	90                   	nop
   150b9:	5d                   	pop    %ebp
   150ba:	c3                   	ret    

000150bb <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   150bb:	55                   	push   %ebp
   150bc:	89 e5                	mov    %esp,%ebp
   150be:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   150c1:	83 ec 08             	sub    $0x8,%esp
   150c4:	ff 75 14             	push   0x14(%ebp)
   150c7:	68 a7 70 01 00       	push   $0x170a7
   150cc:	e8 e9 0c 00 00       	call   15dba <log_printf>
   150d1:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   150d4:	ff 75 10             	push   0x10(%ebp)
   150d7:	ff 75 0c             	push   0xc(%ebp)
   150da:	ff 75 08             	push   0x8(%ebp)
   150dd:	68 b9 70 01 00       	push   $0x170b9
   150e2:	e8 d3 0c 00 00       	call   15dba <log_printf>
   150e7:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   150ea:	e8 c5 ff ff ff       	call   150b4 <hlt>
   150ef:	eb f9                	jmp    150ea <pannic+0x2f>

000150f1 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   150f1:	55                   	push   %ebp
   150f2:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   150f4:	8b 45 08             	mov    0x8(%ebp),%eax
   150f7:	83 c0 07             	add    $0x7,%eax
   150fa:	8d 50 07             	lea    0x7(%eax),%edx
   150fd:	85 c0                	test   %eax,%eax
   150ff:	0f 48 c2             	cmovs  %edx,%eax
   15102:	c1 f8 03             	sar    $0x3,%eax
}
   15105:	5d                   	pop    %ebp
   15106:	c3                   	ret    

00015107 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   15107:	55                   	push   %ebp
   15108:	89 e5                	mov    %esp,%ebp
   1510a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1510d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15111:	75 19                	jne    1512c <bitmap_init+0x25>
   15113:	68 d8 70 01 00       	push   $0x170d8
   15118:	68 6c 71 01 00       	push   $0x1716c
   1511d:	6a 24                	push   $0x24
   1511f:	68 f0 70 01 00       	push   $0x170f0
   15124:	e8 92 ff ff ff       	call   150bb <pannic>
   15129:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   1512c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15130:	75 19                	jne    1514b <bitmap_init+0x44>
   15132:	68 28 71 01 00       	push   $0x17128
   15137:	68 6c 71 01 00       	push   $0x1716c
   1513c:	6a 25                	push   $0x25
   1513e:	68 f0 70 01 00       	push   $0x170f0
   15143:	e8 73 ff ff ff       	call   150bb <pannic>
   15148:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   1514b:	8b 45 08             	mov    0x8(%ebp),%eax
   1514e:	8b 55 10             	mov    0x10(%ebp),%edx
   15151:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   15153:	8b 45 08             	mov    0x8(%ebp),%eax
   15156:	8b 55 0c             	mov    0xc(%ebp),%edx
   15159:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1515c:	8b 45 08             	mov    0x8(%ebp),%eax
   1515f:	8b 00                	mov    (%eax),%eax
   15161:	83 ec 0c             	sub    $0xc,%esp
   15164:	50                   	push   %eax
   15165:	e8 87 ff ff ff       	call   150f1 <bitmap_byte_count>
   1516a:	83 c4 10             	add    $0x10,%esp
   1516d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   15170:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15174:	74 07                	je     1517d <bitmap_init+0x76>
   15176:	ba ff 00 00 00       	mov    $0xff,%edx
   1517b:	eb 05                	jmp    15182 <bitmap_init+0x7b>
   1517d:	ba 00 00 00 00       	mov    $0x0,%edx
   15182:	8b 45 08             	mov    0x8(%ebp),%eax
   15185:	8b 40 04             	mov    0x4(%eax),%eax
   15188:	83 ec 04             	sub    $0x4,%esp
   1518b:	ff 75 f4             	push   -0xc(%ebp)
   1518e:	52                   	push   %edx
   1518f:	50                   	push   %eax
   15190:	e8 28 04 00 00       	call   155bd <kernel_memset>
   15195:	83 c4 10             	add    $0x10,%esp

}
   15198:	90                   	nop
   15199:	c9                   	leave  
   1519a:	c3                   	ret    

0001519b <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1519b:	55                   	push   %ebp
   1519c:	89 e5                	mov    %esp,%ebp
   1519e:	53                   	push   %ebx
   1519f:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   151a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   151a6:	75 19                	jne    151c1 <bitmap_get_bit+0x26>
   151a8:	68 d8 70 01 00       	push   $0x170d8
   151ad:	68 78 71 01 00       	push   $0x17178
   151b2:	6a 39                	push   $0x39
   151b4:	68 f0 70 01 00       	push   $0x170f0
   151b9:	e8 fd fe ff ff       	call   150bb <pannic>
   151be:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   151c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   151c5:	79 19                	jns    151e0 <bitmap_get_bit+0x45>
   151c7:	68 3c 71 01 00       	push   $0x1713c
   151cc:	68 78 71 01 00       	push   $0x17178
   151d1:	6a 3a                	push   $0x3a
   151d3:	68 f0 70 01 00       	push   $0x170f0
   151d8:	e8 de fe ff ff       	call   150bb <pannic>
   151dd:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   151e0:	8b 45 08             	mov    0x8(%ebp),%eax
   151e3:	8b 48 04             	mov    0x4(%eax),%ecx
   151e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   151e9:	8d 50 07             	lea    0x7(%eax),%edx
   151ec:	85 c0                	test   %eax,%eax
   151ee:	0f 48 c2             	cmovs  %edx,%eax
   151f1:	c1 f8 03             	sar    $0x3,%eax
   151f4:	01 c8                	add    %ecx,%eax
   151f6:	0f b6 00             	movzbl (%eax),%eax
   151f9:	89 c3                	mov    %eax,%ebx
   151fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   151fe:	83 e0 07             	and    $0x7,%eax
   15201:	ba 01 00 00 00       	mov    $0x1,%edx
   15206:	89 c1                	mov    %eax,%ecx
   15208:	d3 e2                	shl    %cl,%edx
   1520a:	89 d0                	mov    %edx,%eax
   1520c:	21 d8                	and    %ebx,%eax
}
   1520e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15211:	c9                   	leave  
   15212:	c3                   	ret    

00015213 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   15213:	55                   	push   %ebp
   15214:	89 e5                	mov    %esp,%ebp
   15216:	56                   	push   %esi
   15217:	53                   	push   %ebx
   15218:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1521b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1521f:	75 19                	jne    1523a <bitmap_set_bit+0x27>
   15221:	68 d8 70 01 00       	push   $0x170d8
   15226:	68 88 71 01 00       	push   $0x17188
   1522b:	6a 48                	push   $0x48
   1522d:	68 f0 70 01 00       	push   $0x170f0
   15232:	e8 84 fe ff ff       	call   150bb <pannic>
   15237:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   1523a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1523e:	78 06                	js     15246 <bitmap_set_bit+0x33>
   15240:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15244:	79 19                	jns    1525f <bitmap_set_bit+0x4c>
   15246:	68 47 71 01 00       	push   $0x17147
   1524b:	68 88 71 01 00       	push   $0x17188
   15250:	6a 49                	push   $0x49
   15252:	68 f0 70 01 00       	push   $0x170f0
   15257:	e8 5f fe ff ff       	call   150bb <pannic>
   1525c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1525f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15266:	e9 92 00 00 00       	jmp    152fd <bitmap_set_bit+0xea>
        if (bit) {
   1526b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1526f:	74 42                	je     152b3 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   15271:	8b 45 08             	mov    0x8(%ebp),%eax
   15274:	8b 48 04             	mov    0x4(%eax),%ecx
   15277:	8b 45 0c             	mov    0xc(%ebp),%eax
   1527a:	8d 50 07             	lea    0x7(%eax),%edx
   1527d:	85 c0                	test   %eax,%eax
   1527f:	0f 48 c2             	cmovs  %edx,%eax
   15282:	c1 f8 03             	sar    $0x3,%eax
   15285:	89 c2                	mov    %eax,%edx
   15287:	89 d0                	mov    %edx,%eax
   15289:	01 c8                	add    %ecx,%eax
   1528b:	0f b6 00             	movzbl (%eax),%eax
   1528e:	89 c6                	mov    %eax,%esi
   15290:	8b 45 0c             	mov    0xc(%ebp),%eax
   15293:	83 e0 07             	and    $0x7,%eax
   15296:	bb 01 00 00 00       	mov    $0x1,%ebx
   1529b:	89 c1                	mov    %eax,%ecx
   1529d:	d3 e3                	shl    %cl,%ebx
   1529f:	89 d8                	mov    %ebx,%eax
   152a1:	89 f1                	mov    %esi,%ecx
   152a3:	09 c1                	or     %eax,%ecx
   152a5:	8b 45 08             	mov    0x8(%ebp),%eax
   152a8:	8b 40 04             	mov    0x4(%eax),%eax
   152ab:	01 d0                	add    %edx,%eax
   152ad:	89 ca                	mov    %ecx,%edx
   152af:	88 10                	mov    %dl,(%eax)
   152b1:	eb 42                	jmp    152f5 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   152b3:	8b 45 08             	mov    0x8(%ebp),%eax
   152b6:	8b 48 04             	mov    0x4(%eax),%ecx
   152b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   152bc:	8d 50 07             	lea    0x7(%eax),%edx
   152bf:	85 c0                	test   %eax,%eax
   152c1:	0f 48 c2             	cmovs  %edx,%eax
   152c4:	c1 f8 03             	sar    $0x3,%eax
   152c7:	89 c2                	mov    %eax,%edx
   152c9:	89 d0                	mov    %edx,%eax
   152cb:	01 c8                	add    %ecx,%eax
   152cd:	0f b6 00             	movzbl (%eax),%eax
   152d0:	89 c6                	mov    %eax,%esi
   152d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   152d5:	83 e0 07             	and    $0x7,%eax
   152d8:	bb 01 00 00 00       	mov    $0x1,%ebx
   152dd:	89 c1                	mov    %eax,%ecx
   152df:	d3 e3                	shl    %cl,%ebx
   152e1:	89 d8                	mov    %ebx,%eax
   152e3:	f7 d0                	not    %eax
   152e5:	89 f1                	mov    %esi,%ecx
   152e7:	21 c1                	and    %eax,%ecx
   152e9:	8b 45 08             	mov    0x8(%ebp),%eax
   152ec:	8b 40 04             	mov    0x4(%eax),%eax
   152ef:	01 d0                	add    %edx,%eax
   152f1:	89 ca                	mov    %ecx,%edx
   152f3:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   152f5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   152f9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   152fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15300:	3b 45 10             	cmp    0x10(%ebp),%eax
   15303:	7d 0e                	jge    15313 <bitmap_set_bit+0x100>
   15305:	8b 45 08             	mov    0x8(%ebp),%eax
   15308:	8b 00                	mov    (%eax),%eax
   1530a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1530d:	0f 8c 58 ff ff ff    	jl     1526b <bitmap_set_bit+0x58>
        }
    }
}
   15313:	90                   	nop
   15314:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15317:	5b                   	pop    %ebx
   15318:	5e                   	pop    %esi
   15319:	5d                   	pop    %ebp
   1531a:	c3                   	ret    

0001531b <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1531b:	55                   	push   %ebp
   1531c:	89 e5                	mov    %esp,%ebp
   1531e:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   15321:	83 ec 08             	sub    $0x8,%esp
   15324:	ff 75 0c             	push   0xc(%ebp)
   15327:	ff 75 08             	push   0x8(%ebp)
   1532a:	e8 6c fe ff ff       	call   1519b <bitmap_get_bit>
   1532f:	83 c4 10             	add    $0x10,%esp
   15332:	84 c0                	test   %al,%al
   15334:	0f 95 c0             	setne  %al
   15337:	0f b6 c0             	movzbl %al,%eax
}
   1533a:	c9                   	leave  
   1533b:	c3                   	ret    

0001533c <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   1533c:	55                   	push   %ebp
   1533d:	89 e5                	mov    %esp,%ebp
   1533f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15346:	75 19                	jne    15361 <bitmap_alloc_nbits+0x25>
   15348:	68 d8 70 01 00       	push   $0x170d8
   1534d:	68 98 71 01 00       	push   $0x17198
   15352:	6a 68                	push   $0x68
   15354:	68 f0 70 01 00       	push   $0x170f0
   15359:	e8 5d fd ff ff       	call   150bb <pannic>
   1535e:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   15361:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15365:	79 19                	jns    15380 <bitmap_alloc_nbits+0x44>
   15367:	68 60 71 01 00       	push   $0x17160
   1536c:	68 98 71 01 00       	push   $0x17198
   15371:	6a 69                	push   $0x69
   15373:	68 f0 70 01 00       	push   $0x170f0
   15378:	e8 3e fd ff ff       	call   150bb <pannic>
   1537d:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   15380:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   15387:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   1538e:	e9 8f 00 00 00       	jmp    15422 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   15393:	83 ec 08             	sub    $0x8,%esp
   15396:	ff 75 f4             	push   -0xc(%ebp)
   15399:	ff 75 08             	push   0x8(%ebp)
   1539c:	e8 fa fd ff ff       	call   1519b <bitmap_get_bit>
   153a1:	83 c4 10             	add    $0x10,%esp
   153a4:	0f b6 c0             	movzbl %al,%eax
   153a7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   153aa:	74 06                	je     153b2 <bitmap_alloc_nbits+0x76>
            search_index++;
   153ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   153b0:	eb 70                	jmp    15422 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   153b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   153b5:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   153b8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   153bf:	eb 2d                	jmp    153ee <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   153c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   153c4:	8d 50 01             	lea    0x1(%eax),%edx
   153c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   153ca:	83 ec 08             	sub    $0x8,%esp
   153cd:	50                   	push   %eax
   153ce:	ff 75 08             	push   0x8(%ebp)
   153d1:	e8 c5 fd ff ff       	call   1519b <bitmap_get_bit>
   153d6:	83 c4 10             	add    $0x10,%esp
   153d9:	0f b6 c0             	movzbl %al,%eax
   153dc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   153df:	74 09                	je     153ea <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   153e1:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   153e8:	eb 16                	jmp    15400 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   153ea:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   153ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
   153f1:	3b 45 10             	cmp    0x10(%ebp),%eax
   153f4:	7d 0a                	jge    15400 <bitmap_alloc_nbits+0xc4>
   153f6:	8b 45 08             	mov    0x8(%ebp),%eax
   153f9:	8b 00                	mov    (%eax),%eax
   153fb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   153fe:	7c c1                	jl     153c1 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   15400:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   15404:	74 1c                	je     15422 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   15406:	8b 45 0c             	mov    0xc(%ebp),%eax
   15409:	f7 d0                	not    %eax
   1540b:	50                   	push   %eax
   1540c:	ff 75 10             	push   0x10(%ebp)
   1540f:	ff 75 f0             	push   -0x10(%ebp)
   15412:	ff 75 08             	push   0x8(%ebp)
   15415:	e8 f9 fd ff ff       	call   15213 <bitmap_set_bit>
   1541a:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1541d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15420:	eb 13                	jmp    15435 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   15422:	8b 45 08             	mov    0x8(%ebp),%eax
   15425:	8b 00                	mov    (%eax),%eax
   15427:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1542a:	0f 8c 63 ff ff ff    	jl     15393 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   15430:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   15435:	c9                   	leave  
   15436:	c3                   	ret    

00015437 <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   15437:	55                   	push   %ebp
   15438:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   1543a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1543e:	74 3b                	je     1547b <kernel_strcpy+0x44>
   15440:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15444:	74 35                	je     1547b <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   15446:	eb 17                	jmp    1545f <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   15448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1544b:	8d 42 01             	lea    0x1(%edx),%eax
   1544e:	89 45 0c             	mov    %eax,0xc(%ebp)
   15451:	8b 45 08             	mov    0x8(%ebp),%eax
   15454:	8d 48 01             	lea    0x1(%eax),%ecx
   15457:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1545a:	0f b6 12             	movzbl (%edx),%edx
   1545d:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   1545f:	8b 45 08             	mov    0x8(%ebp),%eax
   15462:	0f b6 00             	movzbl (%eax),%eax
   15465:	84 c0                	test   %al,%al
   15467:	74 0a                	je     15473 <kernel_strcpy+0x3c>
   15469:	8b 45 0c             	mov    0xc(%ebp),%eax
   1546c:	0f b6 00             	movzbl (%eax),%eax
   1546f:	84 c0                	test   %al,%al
   15471:	75 d5                	jne    15448 <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   15473:	8b 45 08             	mov    0x8(%ebp),%eax
   15476:	c6 00 00             	movb   $0x0,(%eax)
   15479:	eb 01                	jmp    1547c <kernel_strcpy+0x45>
  if (!dest || !src) return;
   1547b:	90                   	nop
}
   1547c:	5d                   	pop    %ebp
   1547d:	c3                   	ret    

0001547e <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   1547e:	55                   	push   %ebp
   1547f:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   15481:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15485:	74 45                	je     154cc <kernel_strncpy+0x4e>
   15487:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1548b:	74 3f                	je     154cc <kernel_strncpy+0x4e>
   1548d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15491:	74 39                	je     154cc <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   15493:	eb 17                	jmp    154ac <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   15495:	8b 55 0c             	mov    0xc(%ebp),%edx
   15498:	8d 42 01             	lea    0x1(%edx),%eax
   1549b:	89 45 0c             	mov    %eax,0xc(%ebp)
   1549e:	8b 45 08             	mov    0x8(%ebp),%eax
   154a1:	8d 48 01             	lea    0x1(%eax),%ecx
   154a4:	89 4d 08             	mov    %ecx,0x8(%ebp)
   154a7:	0f b6 12             	movzbl (%edx),%edx
   154aa:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   154ac:	8b 45 10             	mov    0x10(%ebp),%eax
   154af:	8d 50 ff             	lea    -0x1(%eax),%edx
   154b2:	89 55 10             	mov    %edx,0x10(%ebp)
   154b5:	83 f8 01             	cmp    $0x1,%eax
   154b8:	7e 0a                	jle    154c4 <kernel_strncpy+0x46>
   154ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   154bd:	0f b6 00             	movzbl (%eax),%eax
   154c0:	84 c0                	test   %al,%al
   154c2:	75 d1                	jne    15495 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   154c4:	8b 45 08             	mov    0x8(%ebp),%eax
   154c7:	c6 00 00             	movb   $0x0,(%eax)
   154ca:	eb 01                	jmp    154cd <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   154cc:	90                   	nop
}
   154cd:	5d                   	pop    %ebp
   154ce:	c3                   	ret    

000154cf <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   154cf:	55                   	push   %ebp
   154d0:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   154d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   154d6:	74 06                	je     154de <kernel_strncmp+0xf>
   154d8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   154dc:	75 0f                	jne    154ed <kernel_strncmp+0x1e>
   154de:	b8 00 00 00 00       	mov    $0x0,%eax
   154e3:	eb 52                	jmp    15537 <kernel_strncmp+0x68>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   154e5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   154e9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   154ed:	8b 45 08             	mov    0x8(%ebp),%eax
   154f0:	0f b6 00             	movzbl (%eax),%eax
   154f3:	84 c0                	test   %al,%al
   154f5:	74 24                	je     1551b <kernel_strncmp+0x4c>
   154f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   154fa:	0f b6 00             	movzbl (%eax),%eax
   154fd:	84 c0                	test   %al,%al
   154ff:	74 1a                	je     1551b <kernel_strncmp+0x4c>
   15501:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   15505:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15509:	74 10                	je     1551b <kernel_strncmp+0x4c>
   1550b:	8b 45 08             	mov    0x8(%ebp),%eax
   1550e:	0f b6 10             	movzbl (%eax),%edx
   15511:	8b 45 0c             	mov    0xc(%ebp),%eax
   15514:	0f b6 00             	movzbl (%eax),%eax
   15517:	38 c2                	cmp    %al,%dl
   15519:	74 ca                	je     154e5 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2)
   1551b:	8b 45 08             	mov    0x8(%ebp),%eax
   1551e:	0f b6 10             	movzbl (%eax),%edx
   15521:	8b 45 0c             	mov    0xc(%ebp),%eax
   15524:	0f b6 00             	movzbl (%eax),%eax
   15527:	38 c2                	cmp    %al,%dl
   15529:	7e 07                	jle    15532 <kernel_strncmp+0x63>
    return 1;
   1552b:	b8 01 00 00 00       	mov    $0x1,%eax
   15530:	eb 05                	jmp    15537 <kernel_strncmp+0x68>
  else if (*s1 < *s1)
    return -1;
  else
    return 0;
   15532:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15537:	5d                   	pop    %ebp
   15538:	c3                   	ret    

00015539 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   15539:	55                   	push   %ebp
   1553a:	89 e5                	mov    %esp,%ebp
   1553c:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   1553f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15543:	75 07                	jne    1554c <kernel_strlen+0x13>
   15545:	b8 00 00 00 00       	mov    $0x0,%eax
   1554a:	eb 20                	jmp    1556c <kernel_strlen+0x33>

  int len = 0;
   1554c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   15553:	eb 04                	jmp    15559 <kernel_strlen+0x20>
   15555:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   15559:	8b 45 08             	mov    0x8(%ebp),%eax
   1555c:	8d 50 01             	lea    0x1(%eax),%edx
   1555f:	89 55 08             	mov    %edx,0x8(%ebp)
   15562:	0f b6 00             	movzbl (%eax),%eax
   15565:	84 c0                	test   %al,%al
   15567:	75 ec                	jne    15555 <kernel_strlen+0x1c>

  return len;
   15569:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1556c:	c9                   	leave  
   1556d:	c3                   	ret    

0001556e <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   1556e:	55                   	push   %ebp
   1556f:	89 e5                	mov    %esp,%ebp
   15571:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   15574:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15578:	74 40                	je     155ba <kernel_memcpy+0x4c>
   1557a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1557e:	74 3a                	je     155ba <kernel_memcpy+0x4c>
   15580:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15584:	74 34                	je     155ba <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   15586:	8b 45 08             	mov    0x8(%ebp),%eax
   15589:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   1558c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1558f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   15592:	eb 17                	jmp    155ab <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   15594:	8b 55 f8             	mov    -0x8(%ebp),%edx
   15597:	8d 42 01             	lea    0x1(%edx),%eax
   1559a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1559d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   155a0:	8d 48 01             	lea    0x1(%eax),%ecx
   155a3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   155a6:	0f b6 12             	movzbl (%edx),%edx
   155a9:	88 10                	mov    %dl,(%eax)
  while (size--) {
   155ab:	8b 45 10             	mov    0x10(%ebp),%eax
   155ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   155b1:	89 55 10             	mov    %edx,0x10(%ebp)
   155b4:	85 c0                	test   %eax,%eax
   155b6:	75 dc                	jne    15594 <kernel_memcpy+0x26>
   155b8:	eb 01                	jmp    155bb <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   155ba:	90                   	nop
  }
}
   155bb:	c9                   	leave  
   155bc:	c3                   	ret    

000155bd <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   155bd:	55                   	push   %ebp
   155be:	89 e5                	mov    %esp,%ebp
   155c0:	83 ec 14             	sub    $0x14,%esp
   155c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   155c6:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   155c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   155cd:	74 2c                	je     155fb <kernel_memset+0x3e>
   155cf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   155d3:	74 26                	je     155fb <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   155d5:	8b 45 08             	mov    0x8(%ebp),%eax
   155d8:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   155db:	eb 0f                	jmp    155ec <kernel_memset+0x2f>
    *(d++) = v;
   155dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   155e0:	8d 50 01             	lea    0x1(%eax),%edx
   155e3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   155e6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   155ea:	88 10                	mov    %dl,(%eax)
  while (size--) {
   155ec:	8b 45 10             	mov    0x10(%ebp),%eax
   155ef:	8d 50 ff             	lea    -0x1(%eax),%edx
   155f2:	89 55 10             	mov    %edx,0x10(%ebp)
   155f5:	85 c0                	test   %eax,%eax
   155f7:	75 e4                	jne    155dd <kernel_memset+0x20>
   155f9:	eb 01                	jmp    155fc <kernel_memset+0x3f>
  if (!dest || !size) return;
   155fb:	90                   	nop
  }
}
   155fc:	c9                   	leave  
   155fd:	c3                   	ret    

000155fe <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   155fe:	55                   	push   %ebp
   155ff:	89 e5                	mov    %esp,%ebp
   15601:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   15604:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15608:	74 0c                	je     15616 <kernel_memcmp+0x18>
   1560a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1560e:	74 06                	je     15616 <kernel_memcmp+0x18>
   15610:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15614:	75 07                	jne    1561d <kernel_memcmp+0x1f>
   15616:	b8 00 00 00 00       	mov    $0x0,%eax
   1561b:	eb 63                	jmp    15680 <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   1561d:	8b 45 08             	mov    0x8(%ebp),%eax
   15620:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   15623:	8b 45 0c             	mov    0xc(%ebp),%eax
   15626:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   15629:	eb 08                	jmp    15633 <kernel_memcmp+0x35>
    d1++;
   1562b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   1562f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   15633:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   15637:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1563b:	74 10                	je     1564d <kernel_memcmp+0x4f>
   1563d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15640:	0f b6 10             	movzbl (%eax),%edx
   15643:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15646:	0f b6 00             	movzbl (%eax),%eax
   15649:	38 c2                	cmp    %al,%dl
   1564b:	74 de                	je     1562b <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   1564d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15650:	0f b6 10             	movzbl (%eax),%edx
   15653:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15656:	0f b6 00             	movzbl (%eax),%eax
   15659:	38 c2                	cmp    %al,%dl
   1565b:	76 07                	jbe    15664 <kernel_memcmp+0x66>
    return 1;
   1565d:	b8 01 00 00 00       	mov    $0x1,%eax
   15662:	eb 1c                	jmp    15680 <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   15664:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15667:	0f b6 10             	movzbl (%eax),%edx
   1566a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1566d:	0f b6 00             	movzbl (%eax),%eax
   15670:	38 c2                	cmp    %al,%dl
   15672:	73 07                	jae    1567b <kernel_memcmp+0x7d>
    return -1;
   15674:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15679:	eb 05                	jmp    15680 <kernel_memcmp+0x82>
  else
    return 0;
   1567b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15680:	c9                   	leave  
   15681:	c3                   	ret    

00015682 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   15682:	55                   	push   %ebp
   15683:	89 e5                	mov    %esp,%ebp
   15685:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   15688:	8d 45 10             	lea    0x10(%ebp),%eax
   1568b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   1568e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15691:	83 ec 04             	sub    $0x4,%esp
   15694:	50                   	push   %eax
   15695:	ff 75 0c             	push   0xc(%ebp)
   15698:	ff 75 08             	push   0x8(%ebp)
   1569b:	e8 06 00 00 00       	call   156a6 <kernel_vsprintf>
   156a0:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   156a3:	90                   	nop
   156a4:	c9                   	leave  
   156a5:	c3                   	ret    

000156a6 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   156a6:	55                   	push   %ebp
   156a7:	89 e5                	mov    %esp,%ebp
   156a9:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   156ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   156b3:	8b 45 08             	mov    0x8(%ebp),%eax
   156b6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   156b9:	e9 68 01 00 00       	jmp    15826 <kernel_vsprintf+0x180>
    switch (state) {
   156be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   156c2:	74 0b                	je     156cf <kernel_vsprintf+0x29>
   156c4:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   156c8:	74 2b                	je     156f5 <kernel_vsprintf+0x4f>
   156ca:	e9 56 01 00 00       	jmp    15825 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   156cf:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   156d3:	75 0c                	jne    156e1 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   156d5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   156dc:	e9 45 01 00 00       	jmp    15826 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   156e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   156e4:	8d 50 01             	lea    0x1(%eax),%edx
   156e7:	89 55 f0             	mov    %edx,-0x10(%ebp)
   156ea:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   156ee:	88 10                	mov    %dl,(%eax)
        break;
   156f0:	e9 31 01 00 00       	jmp    15826 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   156f5:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   156f9:	75 47                	jne    15742 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   156fb:	8b 45 10             	mov    0x10(%ebp),%eax
   156fe:	8d 50 04             	lea    0x4(%eax),%edx
   15701:	89 55 10             	mov    %edx,0x10(%ebp)
   15704:	8b 00                	mov    (%eax),%eax
   15706:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   15709:	ff 75 ec             	push   -0x14(%ebp)
   1570c:	e8 28 fe ff ff       	call   15539 <kernel_strlen>
   15711:	83 c4 04             	add    $0x4,%esp
   15714:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   15717:	eb 17                	jmp    15730 <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   15719:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1571c:	8d 42 01             	lea    0x1(%edx),%eax
   1571f:	89 45 ec             	mov    %eax,-0x14(%ebp)
   15722:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15725:	8d 48 01             	lea    0x1(%eax),%ecx
   15728:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1572b:	0f b6 12             	movzbl (%edx),%edx
   1572e:	88 10                	mov    %dl,(%eax)
          while (len--) {
   15730:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15733:	8d 50 ff             	lea    -0x1(%eax),%edx
   15736:	89 55 e8             	mov    %edx,-0x18(%ebp)
   15739:	85 c0                	test   %eax,%eax
   1573b:	75 dc                	jne    15719 <kernel_vsprintf+0x73>
   1573d:	e9 da 00 00 00       	jmp    1581c <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   15742:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   15746:	75 37                	jne    1577f <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   15748:	8b 45 10             	mov    0x10(%ebp),%eax
   1574b:	8d 50 04             	lea    0x4(%eax),%edx
   1574e:	89 55 10             	mov    %edx,0x10(%ebp)
   15751:	8b 00                	mov    (%eax),%eax
   15753:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   15756:	83 ec 04             	sub    $0x4,%esp
   15759:	6a 0a                	push   $0xa
   1575b:	ff 75 d8             	push   -0x28(%ebp)
   1575e:	ff 75 f0             	push   -0x10(%ebp)
   15761:	e8 dd 00 00 00       	call   15843 <kernel_itoa>
   15766:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   15769:	83 ec 0c             	sub    $0xc,%esp
   1576c:	ff 75 f0             	push   -0x10(%ebp)
   1576f:	e8 c5 fd ff ff       	call   15539 <kernel_strlen>
   15774:	83 c4 10             	add    $0x10,%esp
   15777:	01 45 f0             	add    %eax,-0x10(%ebp)
   1577a:	e9 9d 00 00 00       	jmp    1581c <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   1577f:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   15783:	74 06                	je     1578b <kernel_vsprintf+0xe5>
   15785:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   15789:	75 34                	jne    157bf <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   1578b:	8b 45 10             	mov    0x10(%ebp),%eax
   1578e:	8d 50 04             	lea    0x4(%eax),%edx
   15791:	89 55 10             	mov    %edx,0x10(%ebp)
   15794:	8b 00                	mov    (%eax),%eax
   15796:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   15799:	83 ec 04             	sub    $0x4,%esp
   1579c:	6a 10                	push   $0x10
   1579e:	ff 75 dc             	push   -0x24(%ebp)
   157a1:	ff 75 f0             	push   -0x10(%ebp)
   157a4:	e8 9a 00 00 00       	call   15843 <kernel_itoa>
   157a9:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   157ac:	83 ec 0c             	sub    $0xc,%esp
   157af:	ff 75 f0             	push   -0x10(%ebp)
   157b2:	e8 82 fd ff ff       	call   15539 <kernel_strlen>
   157b7:	83 c4 10             	add    $0x10,%esp
   157ba:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   157bd:	eb 5d                	jmp    1581c <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   157bf:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   157c3:	75 34                	jne    157f9 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   157c5:	8b 45 10             	mov    0x10(%ebp),%eax
   157c8:	8d 50 04             	lea    0x4(%eax),%edx
   157cb:	89 55 10             	mov    %edx,0x10(%ebp)
   157ce:	8b 00                	mov    (%eax),%eax
   157d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   157d3:	83 ec 04             	sub    $0x4,%esp
   157d6:	6a 02                	push   $0x2
   157d8:	ff 75 e0             	push   -0x20(%ebp)
   157db:	ff 75 f0             	push   -0x10(%ebp)
   157de:	e8 60 00 00 00       	call   15843 <kernel_itoa>
   157e3:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   157e6:	83 ec 0c             	sub    $0xc,%esp
   157e9:	ff 75 f0             	push   -0x10(%ebp)
   157ec:	e8 48 fd ff ff       	call   15539 <kernel_strlen>
   157f1:	83 c4 10             	add    $0x10,%esp
   157f4:	01 45 f0             	add    %eax,-0x10(%ebp)
   157f7:	eb 23                	jmp    1581c <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   157f9:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   157fd:	75 1d                	jne    1581c <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   157ff:	8b 45 10             	mov    0x10(%ebp),%eax
   15802:	8d 50 04             	lea    0x4(%eax),%edx
   15805:	89 55 10             	mov    %edx,0x10(%ebp)
   15808:	8b 00                	mov    (%eax),%eax
   1580a:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   1580d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15810:	8d 50 01             	lea    0x1(%eax),%edx
   15813:	89 55 f0             	mov    %edx,-0x10(%ebp)
   15816:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1581a:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   1581c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   15823:	eb 01                	jmp    15826 <kernel_vsprintf+0x180>
      default:
        break;
   15825:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   15826:	8b 45 0c             	mov    0xc(%ebp),%eax
   15829:	8d 50 01             	lea    0x1(%eax),%edx
   1582c:	89 55 0c             	mov    %edx,0xc(%ebp)
   1582f:	0f b6 00             	movzbl (%eax),%eax
   15832:	88 45 e7             	mov    %al,-0x19(%ebp)
   15835:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   15839:	0f 85 7f fe ff ff    	jne    156be <kernel_vsprintf+0x18>
    }
  }
}
   1583f:	90                   	nop
   15840:	90                   	nop
   15841:	c9                   	leave  
   15842:	c3                   	ret    

00015843 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   15843:	55                   	push   %ebp
   15844:	89 e5                	mov    %esp,%ebp
   15846:	53                   	push   %ebx
   15847:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   1584d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   15851:	74 1d                	je     15870 <kernel_itoa+0x2d>
   15853:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   15857:	74 17                	je     15870 <kernel_itoa+0x2d>
   15859:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1585d:	74 11                	je     15870 <kernel_itoa+0x2d>
   1585f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   15863:	74 0b                	je     15870 <kernel_itoa+0x2d>
    *buf = '\0';
   15865:	8b 45 08             	mov    0x8(%ebp),%eax
   15868:	c6 00 00             	movb   $0x0,(%eax)
    return;
   1586b:	e9 f8 00 00 00       	jmp    15968 <kernel_itoa+0x125>
  }

  if (num == 0) {
   15870:	8b 45 0c             	mov    0xc(%ebp),%eax
   15873:	85 c0                	test   %eax,%eax
   15875:	75 17                	jne    1588e <kernel_itoa+0x4b>
    *(buf++) = '0';
   15877:	8b 45 08             	mov    0x8(%ebp),%eax
   1587a:	8d 50 01             	lea    0x1(%eax),%edx
   1587d:	89 55 08             	mov    %edx,0x8(%ebp)
   15880:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   15883:	8b 45 08             	mov    0x8(%ebp),%eax
   15886:	c6 00 00             	movb   $0x0,(%eax)
    return;
   15889:	e9 da 00 00 00       	jmp    15968 <kernel_itoa+0x125>
  }

  char *p = buf;
   1588e:	8b 45 08             	mov    0x8(%ebp),%eax
   15891:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   15894:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   1589b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1589f:	75 41                	jne    158e2 <kernel_itoa+0x9f>
    u_num = num;
   158a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   158a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   158a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   158aa:	85 c0                	test   %eax,%eax
   158ac:	79 16                	jns    158c4 <kernel_itoa+0x81>
      *(p++) = '-';
   158ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
   158b1:	8d 50 01             	lea    0x1(%eax),%edx
   158b4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   158b7:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   158ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   158bd:	f7 d8                	neg    %eax
   158bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
   158c2:	eb 26                	jmp    158ea <kernel_itoa+0xa7>
    } else if (num == 0) {
   158c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   158c7:	85 c0                	test   %eax,%eax
   158c9:	75 1f                	jne    158ea <kernel_itoa+0xa7>
      *(p++) = '0';
   158cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   158ce:	8d 50 01             	lea    0x1(%eax),%edx
   158d1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   158d4:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   158d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   158da:	c6 00 00             	movb   $0x0,(%eax)
      return;
   158dd:	e9 86 00 00 00       	jmp    15968 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   158e2:	8d 45 0c             	lea    0xc(%ebp),%eax
   158e5:	8b 00                	mov    (%eax),%eax
   158e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   158ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   158f1:	eb 3b                	jmp    1592e <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   158f3:	8b 1d 8c 80 01 00    	mov    0x1808c,%ebx
   158f9:	8b 4d 10             	mov    0x10(%ebp),%ecx
   158fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158ff:	ba 00 00 00 00       	mov    $0x0,%edx
   15904:	f7 f1                	div    %ecx
   15906:	89 d0                	mov    %edx,%eax
   15908:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   1590b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1590e:	8d 50 01             	lea    0x1(%eax),%edx
   15911:	89 55 f0             	mov    %edx,-0x10(%ebp)
   15914:	0f b6 11             	movzbl (%ecx),%edx
   15917:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   1591e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15921:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15924:	ba 00 00 00 00       	mov    $0x0,%edx
   15929:	f7 f3                	div    %ebx
   1592b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   1592e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15932:	75 bf                	jne    158f3 <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   15934:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15937:	83 e8 01             	sub    $0x1,%eax
   1593a:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1593d:	eb 1d                	jmp    1595c <kernel_itoa+0x119>
    *(p++) = arr[i];
   1593f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15942:	8d 50 01             	lea    0x1(%eax),%edx
   15945:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15948:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   1594e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   15951:	01 ca                	add    %ecx,%edx
   15953:	0f b6 12             	movzbl (%edx),%edx
   15956:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   15958:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   1595c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15960:	79 dd                	jns    1593f <kernel_itoa+0xfc>
  }
  *p = '\0';
   15962:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15965:	c6 00 00             	movb   $0x0,(%eax)
}
   15968:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1596b:	c9                   	leave  
   1596c:	c3                   	ret    

0001596d <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   1596d:	55                   	push   %ebp
   1596e:	89 e5                	mov    %esp,%ebp
   15970:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   15973:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   1597a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1597e:	74 15                	je     15995 <strings_count+0x28>
    while (*(strs++)) {
   15980:	eb 04                	jmp    15986 <strings_count+0x19>
      count++;
   15982:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   15986:	8b 45 08             	mov    0x8(%ebp),%eax
   15989:	8d 50 04             	lea    0x4(%eax),%edx
   1598c:	89 55 08             	mov    %edx,0x8(%ebp)
   1598f:	8b 00                	mov    (%eax),%eax
   15991:	85 c0                	test   %eax,%eax
   15993:	75 ed                	jne    15982 <strings_count+0x15>
    }
  }

  return count;
   15995:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15998:	c9                   	leave  
   15999:	c3                   	ret    

0001599a <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   1599a:	55                   	push   %ebp
   1599b:	89 e5                	mov    %esp,%ebp
   1599d:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   159a0:	8b 45 08             	mov    0x8(%ebp),%eax
   159a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   159a6:	eb 04                	jmp    159ac <get_file_name+0x12>
    s++;
   159a8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   159ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   159af:	0f b6 00             	movzbl (%eax),%eax
   159b2:	84 c0                	test   %al,%al
   159b4:	75 f2                	jne    159a8 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   159b6:	eb 04                	jmp    159bc <get_file_name+0x22>
    s--;
   159b8:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   159bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   159bf:	0f b6 00             	movzbl (%eax),%eax
   159c2:	3c 2f                	cmp    $0x2f,%al
   159c4:	74 12                	je     159d8 <get_file_name+0x3e>
   159c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   159c9:	0f b6 00             	movzbl (%eax),%eax
   159cc:	3c 5c                	cmp    $0x5c,%al
   159ce:	74 08                	je     159d8 <get_file_name+0x3e>
   159d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   159d3:	3b 45 08             	cmp    0x8(%ebp),%eax
   159d6:	73 e0                	jae    159b8 <get_file_name+0x1e>
  }

  return s + 1;
   159d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   159db:	83 c0 01             	add    $0x1,%eax
   159de:	c9                   	leave  
   159df:	c3                   	ret    

000159e0 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   159e0:	55                   	push   %ebp
   159e1:	89 e5                	mov    %esp,%ebp
   159e3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   159e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   159ea:	75 19                	jne    15a05 <list_is_empty+0x25>
   159ec:	68 bc 71 01 00       	push   $0x171bc
   159f1:	68 a0 72 01 00       	push   $0x172a0
   159f6:	6a 38                	push   $0x38
   159f8:	68 d0 71 01 00       	push   $0x171d0
   159fd:	e8 b9 f6 ff ff       	call   150bb <pannic>
   15a02:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   15a05:	8b 45 08             	mov    0x8(%ebp),%eax
   15a08:	8b 40 08             	mov    0x8(%eax),%eax
   15a0b:	85 c0                	test   %eax,%eax
   15a0d:	0f 94 c0             	sete   %al
   15a10:	0f b6 c0             	movzbl %al,%eax
}
   15a13:	c9                   	leave  
   15a14:	c3                   	ret    

00015a15 <list_get_size>:
static inline int list_get_size(list_t *list) {
   15a15:	55                   	push   %ebp
   15a16:	89 e5                	mov    %esp,%ebp
   15a18:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15a1f:	75 19                	jne    15a3a <list_get_size+0x25>
   15a21:	68 bc 71 01 00       	push   $0x171bc
   15a26:	68 d8 72 01 00       	push   $0x172d8
   15a2b:	6a 3e                	push   $0x3e
   15a2d:	68 d0 71 01 00       	push   $0x171d0
   15a32:	e8 84 f6 ff ff       	call   150bb <pannic>
   15a37:	83 c4 10             	add    $0x10,%esp
    return list->size;
   15a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   15a3d:	8b 40 08             	mov    0x8(%eax),%eax
}
   15a40:	c9                   	leave  
   15a41:	c3                   	ret    

00015a42 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   15a42:	55                   	push   %ebp
   15a43:	89 e5                	mov    %esp,%ebp
   15a45:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   15a48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15a4c:	74 06                	je     15a54 <list_insert_first+0x12>
   15a4e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15a52:	75 19                	jne    15a6d <list_insert_first+0x2b>
   15a54:	68 10 72 01 00       	push   $0x17210
   15a59:	68 8c 72 01 00       	push   $0x1728c
   15a5e:	6a 0f                	push   $0xf
   15a60:	68 40 72 01 00       	push   $0x17240
   15a65:	e8 51 f6 ff ff       	call   150bb <pannic>
   15a6a:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   15a6d:	8b 45 08             	mov    0x8(%ebp),%eax
   15a70:	8b 10                	mov    (%eax),%edx
   15a72:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a75:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   15a78:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   15a81:	83 ec 0c             	sub    $0xc,%esp
   15a84:	ff 75 08             	push   0x8(%ebp)
   15a87:	e8 54 ff ff ff       	call   159e0 <list_is_empty>
   15a8c:	83 c4 10             	add    $0x10,%esp
   15a8f:	85 c0                	test   %eax,%eax
   15a91:	74 16                	je     15aa9 <list_insert_first+0x67>
        list->first = list->last = node;
   15a93:	8b 45 08             	mov    0x8(%ebp),%eax
   15a96:	8b 55 0c             	mov    0xc(%ebp),%edx
   15a99:	89 50 04             	mov    %edx,0x4(%eax)
   15a9c:	8b 45 08             	mov    0x8(%ebp),%eax
   15a9f:	8b 50 04             	mov    0x4(%eax),%edx
   15aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   15aa5:	89 10                	mov    %edx,(%eax)
   15aa7:	eb 12                	jmp    15abb <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   15aa9:	8b 45 08             	mov    0x8(%ebp),%eax
   15aac:	8b 00                	mov    (%eax),%eax
   15aae:	8b 55 0c             	mov    0xc(%ebp),%edx
   15ab1:	89 10                	mov    %edx,(%eax)
        list->first = node;
   15ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   15ab6:	8b 55 0c             	mov    0xc(%ebp),%edx
   15ab9:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   15abb:	8b 45 08             	mov    0x8(%ebp),%eax
   15abe:	8b 40 08             	mov    0x8(%eax),%eax
   15ac1:	8d 50 01             	lea    0x1(%eax),%edx
   15ac4:	8b 45 08             	mov    0x8(%ebp),%eax
   15ac7:	89 50 08             	mov    %edx,0x8(%eax)
}
   15aca:	90                   	nop
   15acb:	c9                   	leave  
   15acc:	c3                   	ret    

00015acd <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   15acd:	55                   	push   %ebp
   15ace:	89 e5                	mov    %esp,%ebp
   15ad0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   15ad3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ad7:	74 06                	je     15adf <list_insert_last+0x12>
   15ad9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15add:	75 19                	jne    15af8 <list_insert_last+0x2b>
   15adf:	68 10 72 01 00       	push   $0x17210
   15ae4:	68 b0 72 01 00       	push   $0x172b0
   15ae9:	6a 21                	push   $0x21
   15aeb:	68 40 72 01 00       	push   $0x17240
   15af0:	e8 c6 f5 ff ff       	call   150bb <pannic>
   15af5:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   15af8:	8b 45 08             	mov    0x8(%ebp),%eax
   15afb:	8b 50 04             	mov    0x4(%eax),%edx
   15afe:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b01:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   15b03:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b06:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   15b0d:	83 ec 0c             	sub    $0xc,%esp
   15b10:	ff 75 08             	push   0x8(%ebp)
   15b13:	e8 c8 fe ff ff       	call   159e0 <list_is_empty>
   15b18:	83 c4 10             	add    $0x10,%esp
   15b1b:	85 c0                	test   %eax,%eax
   15b1d:	74 16                	je     15b35 <list_insert_last+0x68>
        list->first = list->last = node;
   15b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   15b22:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b25:	89 50 04             	mov    %edx,0x4(%eax)
   15b28:	8b 45 08             	mov    0x8(%ebp),%eax
   15b2b:	8b 50 04             	mov    0x4(%eax),%edx
   15b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b31:	89 10                	mov    %edx,(%eax)
   15b33:	eb 15                	jmp    15b4a <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   15b35:	8b 45 08             	mov    0x8(%ebp),%eax
   15b38:	8b 40 04             	mov    0x4(%eax),%eax
   15b3b:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b3e:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   15b41:	8b 45 08             	mov    0x8(%ebp),%eax
   15b44:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b47:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   15b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b4d:	8b 40 08             	mov    0x8(%eax),%eax
   15b50:	8d 50 01             	lea    0x1(%eax),%edx
   15b53:	8b 45 08             	mov    0x8(%ebp),%eax
   15b56:	89 50 08             	mov    %edx,0x8(%eax)

}
   15b59:	90                   	nop
   15b5a:	c9                   	leave  
   15b5b:	c3                   	ret    

00015b5c <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   15b5c:	55                   	push   %ebp
   15b5d:	89 e5                	mov    %esp,%ebp
   15b5f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   15b62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15b66:	75 19                	jne    15b81 <list_remove_first+0x25>
   15b68:	68 76 72 01 00       	push   $0x17276
   15b6d:	68 c4 72 01 00       	push   $0x172c4
   15b72:	6a 34                	push   $0x34
   15b74:	68 40 72 01 00       	push   $0x17240
   15b79:	e8 3d f5 ff ff       	call   150bb <pannic>
   15b7e:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   15b81:	83 ec 0c             	sub    $0xc,%esp
   15b84:	ff 75 08             	push   0x8(%ebp)
   15b87:	e8 54 fe ff ff       	call   159e0 <list_is_empty>
   15b8c:	83 c4 10             	add    $0x10,%esp
   15b8f:	85 c0                	test   %eax,%eax
   15b91:	74 07                	je     15b9a <list_remove_first+0x3e>
        return (list_node_t*)0;
   15b93:	b8 00 00 00 00       	mov    $0x0,%eax
   15b98:	eb 71                	jmp    15c0b <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   15b9a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b9d:	8b 00                	mov    (%eax),%eax
   15b9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   15ba2:	83 ec 0c             	sub    $0xc,%esp
   15ba5:	ff 75 08             	push   0x8(%ebp)
   15ba8:	e8 68 fe ff ff       	call   15a15 <list_get_size>
   15bad:	83 c4 10             	add    $0x10,%esp
   15bb0:	83 f8 01             	cmp    $0x1,%eax
   15bb3:	75 17                	jne    15bcc <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   15bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   15bb8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc2:	8b 50 04             	mov    0x4(%eax),%edx
   15bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc8:	89 10                	mov    %edx,(%eax)
   15bca:	eb 18                	jmp    15be4 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   15bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   15bcf:	8b 00                	mov    (%eax),%eax
   15bd1:	8b 50 04             	mov    0x4(%eax),%edx
   15bd4:	8b 45 08             	mov    0x8(%ebp),%eax
   15bd7:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   15bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   15bdc:	8b 00                	mov    (%eax),%eax
   15bde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   15be4:	8b 45 08             	mov    0x8(%ebp),%eax
   15be7:	8b 40 08             	mov    0x8(%eax),%eax
   15bea:	8d 50 ff             	lea    -0x1(%eax),%edx
   15bed:	8b 45 08             	mov    0x8(%ebp),%eax
   15bf0:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   15bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15bf6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c00:	8b 50 04             	mov    0x4(%eax),%edx
   15c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c06:	89 10                	mov    %edx,(%eax)
    return ret;
   15c08:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   15c0b:	c9                   	leave  
   15c0c:	c3                   	ret    

00015c0d <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   15c0d:	55                   	push   %ebp
   15c0e:	89 e5                	mov    %esp,%ebp
   15c10:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   15c13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15c17:	75 19                	jne    15c32 <list_remove_last+0x25>
   15c19:	68 76 72 01 00       	push   $0x17276
   15c1e:	68 e8 72 01 00       	push   $0x172e8
   15c23:	6a 4a                	push   $0x4a
   15c25:	68 40 72 01 00       	push   $0x17240
   15c2a:	e8 8c f4 ff ff       	call   150bb <pannic>
   15c2f:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   15c32:	83 ec 0c             	sub    $0xc,%esp
   15c35:	ff 75 08             	push   0x8(%ebp)
   15c38:	e8 a3 fd ff ff       	call   159e0 <list_is_empty>
   15c3d:	83 c4 10             	add    $0x10,%esp
   15c40:	85 c0                	test   %eax,%eax
   15c42:	74 07                	je     15c4b <list_remove_last+0x3e>
        return (list_node_t*)0;
   15c44:	b8 00 00 00 00       	mov    $0x0,%eax
   15c49:	eb 75                	jmp    15cc0 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   15c4b:	8b 45 08             	mov    0x8(%ebp),%eax
   15c4e:	8b 40 04             	mov    0x4(%eax),%eax
   15c51:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   15c54:	83 ec 0c             	sub    $0xc,%esp
   15c57:	ff 75 08             	push   0x8(%ebp)
   15c5a:	e8 b6 fd ff ff       	call   15a15 <list_get_size>
   15c5f:	83 c4 10             	add    $0x10,%esp
   15c62:	83 f8 01             	cmp    $0x1,%eax
   15c65:	75 17                	jne    15c7e <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   15c67:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15c71:	8b 45 08             	mov    0x8(%ebp),%eax
   15c74:	8b 50 04             	mov    0x4(%eax),%edx
   15c77:	8b 45 08             	mov    0x8(%ebp),%eax
   15c7a:	89 10                	mov    %edx,(%eax)
   15c7c:	eb 1b                	jmp    15c99 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   15c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   15c81:	8b 40 04             	mov    0x4(%eax),%eax
   15c84:	8b 10                	mov    (%eax),%edx
   15c86:	8b 45 08             	mov    0x8(%ebp),%eax
   15c89:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   15c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c8f:	8b 40 04             	mov    0x4(%eax),%eax
   15c92:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   15c99:	8b 45 08             	mov    0x8(%ebp),%eax
   15c9c:	8b 40 08             	mov    0x8(%eax),%eax
   15c9f:	8d 50 ff             	lea    -0x1(%eax),%edx
   15ca2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ca5:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   15ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cb5:	8b 50 04             	mov    0x4(%eax),%edx
   15cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cbb:	89 10                	mov    %edx,(%eax)
    return ret;
   15cbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   15cc0:	c9                   	leave  
   15cc1:	c3                   	ret    

00015cc2 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   15cc2:	55                   	push   %ebp
   15cc3:	89 e5                	mov    %esp,%ebp
   15cc5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   15cc8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ccc:	74 06                	je     15cd4 <list_remove+0x12>
   15cce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15cd2:	75 19                	jne    15ced <list_remove+0x2b>
   15cd4:	68 10 72 01 00       	push   $0x17210
   15cd9:	68 fc 72 01 00       	push   $0x172fc
   15cde:	6a 60                	push   $0x60
   15ce0:	68 40 72 01 00       	push   $0x17240
   15ce5:	e8 d1 f3 ff ff       	call   150bb <pannic>
   15cea:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   15ced:	83 ec 0c             	sub    $0xc,%esp
   15cf0:	ff 75 08             	push   0x8(%ebp)
   15cf3:	e8 e8 fc ff ff       	call   159e0 <list_is_empty>
   15cf8:	83 c4 10             	add    $0x10,%esp
   15cfb:	85 c0                	test   %eax,%eax
   15cfd:	74 0a                	je     15d09 <list_remove+0x47>
        return (list_node_t*)0;
   15cff:	b8 00 00 00 00       	mov    $0x0,%eax
   15d04:	e9 80 00 00 00       	jmp    15d89 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   15d09:	8b 45 08             	mov    0x8(%ebp),%eax
   15d0c:	8b 00                	mov    (%eax),%eax
   15d0e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d11:	75 0b                	jne    15d1e <list_remove+0x5c>
   15d13:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d16:	8b 50 04             	mov    0x4(%eax),%edx
   15d19:	8b 45 08             	mov    0x8(%ebp),%eax
   15d1c:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   15d1e:	8b 45 08             	mov    0x8(%ebp),%eax
   15d21:	8b 40 04             	mov    0x4(%eax),%eax
   15d24:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d27:	75 0b                	jne    15d34 <list_remove+0x72>
   15d29:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d2c:	8b 10                	mov    (%eax),%edx
   15d2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15d31:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   15d34:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d37:	8b 00                	mov    (%eax),%eax
   15d39:	85 c0                	test   %eax,%eax
   15d3b:	74 0e                	je     15d4b <list_remove+0x89>
   15d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d40:	8b 00                	mov    (%eax),%eax
   15d42:	8b 55 0c             	mov    0xc(%ebp),%edx
   15d45:	8b 52 04             	mov    0x4(%edx),%edx
   15d48:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   15d4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d4e:	8b 40 04             	mov    0x4(%eax),%eax
   15d51:	85 c0                	test   %eax,%eax
   15d53:	74 0d                	je     15d62 <list_remove+0xa0>
   15d55:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d58:	8b 40 04             	mov    0x4(%eax),%eax
   15d5b:	8b 55 0c             	mov    0xc(%ebp),%edx
   15d5e:	8b 12                	mov    (%edx),%edx
   15d60:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   15d62:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d65:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15d6c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d6f:	8b 50 04             	mov    0x4(%eax),%edx
   15d72:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d75:	89 10                	mov    %edx,(%eax)
    list->size--;
   15d77:	8b 45 08             	mov    0x8(%ebp),%eax
   15d7a:	8b 40 08             	mov    0x8(%eax),%eax
   15d7d:	8d 50 ff             	lea    -0x1(%eax),%edx
   15d80:	8b 45 08             	mov    0x8(%ebp),%eax
   15d83:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   15d86:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d89:	c9                   	leave  
   15d8a:	c3                   	ret    

00015d8b <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   15d8b:	55                   	push   %ebp
   15d8c:	89 e5                	mov    %esp,%ebp
   15d8e:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   15d91:	83 ec 0c             	sub    $0xc,%esp
   15d94:	68 24 dd 03 00       	push   $0x3dd24
   15d99:	e8 04 ec ff ff       	call   149a2 <mutex_init>
   15d9e:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   15da1:	83 ec 04             	sub    $0x4,%esp
   15da4:	6a 00                	push   $0x0
   15da6:	6a 00                	push   $0x0
   15da8:	6a 01                	push   $0x1
   15daa:	e8 d3 dd ff ff       	call   13b82 <dev_open>
   15daf:	83 c4 10             	add    $0x10,%esp
   15db2:	a3 38 dd 03 00       	mov    %eax,0x3dd38
}
   15db7:	90                   	nop
   15db8:	c9                   	leave  
   15db9:	c3                   	ret    

00015dba <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   15dba:	55                   	push   %ebp
   15dbb:	89 e5                	mov    %esp,%ebp
   15dbd:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   15dc3:	83 ec 04             	sub    $0x4,%esp
   15dc6:	68 80 00 00 00       	push   $0x80
   15dcb:	6a 00                	push   $0x0
   15dcd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   15dd3:	50                   	push   %eax
   15dd4:	e8 e4 f7 ff ff       	call   155bd <kernel_memset>
   15dd9:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   15ddc:	8d 45 0c             	lea    0xc(%ebp),%eax
   15ddf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   15de5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   15deb:	83 ec 04             	sub    $0x4,%esp
   15dee:	50                   	push   %eax
   15def:	ff 75 08             	push   0x8(%ebp)
   15df2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   15df8:	50                   	push   %eax
   15df9:	e8 a8 f8 ff ff       	call   156a6 <kernel_vsprintf>
   15dfe:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   15e01:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   15e07:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   15e0a:	83 ec 0c             	sub    $0xc,%esp
   15e0d:	68 24 dd 03 00       	push   $0x3dd24
   15e12:	e8 d8 eb ff ff       	call   149ef <mutex_lock>
   15e17:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   15e1a:	83 ec 0c             	sub    $0xc,%esp
   15e1d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   15e23:	50                   	push   %eax
   15e24:	e8 10 f7 ff ff       	call   15539 <kernel_strlen>
   15e29:	83 c4 10             	add    $0x10,%esp
   15e2c:	8b 15 38 dd 03 00    	mov    0x3dd38,%edx
   15e32:	50                   	push   %eax
   15e33:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   15e39:	50                   	push   %eax
   15e3a:	6a 00                	push   $0x0
   15e3c:	52                   	push   %edx
   15e3d:	e8 cb de ff ff       	call   13d0d <dev_write>
   15e42:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   15e45:	83 ec 0c             	sub    $0xc,%esp
   15e48:	68 24 dd 03 00       	push   $0x3dd24
   15e4d:	e8 2e ec ff ff       	call   14a80 <mutex_unlock>
   15e52:	83 c4 10             	add    $0x10,%esp
   15e55:	90                   	nop
   15e56:	c9                   	leave  
   15e57:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    //     //msleep(100);
    // }
    
    int pid;
    int i;
    for (i = 0; i < 1; ++i) {
80000016:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8000001d:	eb 12                	jmp    80000031 <first_main+0x21>
        pid = fork();
8000001f:	e8 2f 01 00 00       	call   80000153 <fork>
80000024:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (pid == 0)
80000027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8000002b:	74 0c                	je     80000039 <first_main+0x29>
    for (i = 0; i < 1; ++i) {
8000002d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80000031:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000035:	7e e8                	jle    8000001f <first_main+0xf>
80000037:	eb 01                	jmp    8000003a <first_main+0x2a>
            break;
80000039:	90                   	nop
    }

    char * const argv[] = {"arg0", "arg1", "arg2", "arg3", 0};
8000003a:	c7 45 dc 7b 00 00 80 	movl   $0x8000007b,-0x24(%ebp)
80000041:	c7 45 e0 80 00 00 80 	movl   $0x80000080,-0x20(%ebp)
80000048:	c7 45 e4 85 00 00 80 	movl   $0x80000085,-0x1c(%ebp)
8000004f:	c7 45 e8 8a 00 00 80 	movl   $0x8000008a,-0x18(%ebp)
80000056:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (pid != 0) execve("/shell.elf", argv, 0);
8000005d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80000061:	74 16                	je     80000079 <first_main+0x69>
80000063:	83 ec 04             	sub    $0x4,%esp
80000066:	6a 00                	push   $0x0
80000068:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000006b:	50                   	push   %eax
8000006c:	68 8f 00 00 80       	push   $0x8000008f
80000071:	e8 f8 00 00 00       	call   8000016e <execve>
80000076:	83 c4 10             	add    $0x10,%esp
    
    for (;;)
80000079:	eb fe                	jmp    80000079 <first_main+0x69>
8000007b:	61                   	popa   
8000007c:	72 67                	jb     800000e5 <sys_call+0x4b>
8000007e:	30 00                	xor    %al,(%eax)
80000080:	61                   	popa   
80000081:	72 67                	jb     800000ea <msleep+0x4>
80000083:	31 00                	xor    %eax,(%eax)
80000085:	61                   	popa   
80000086:	72 67                	jb     800000ef <msleep+0x9>
80000088:	32 00                	xor    (%eax),%al
8000008a:	61                   	popa   
8000008b:	72 67                	jb     800000f4 <msleep+0xe>
8000008d:	33 00                	xor    (%eax),%eax
8000008f:	2f                   	das    
80000090:	73 68                	jae    800000fa <msleep+0x14>
80000092:	65 6c                	gs insb (%dx),%es:(%edi)
80000094:	6c                   	insb   (%dx),%es:(%edi)
80000095:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
80000098:	66                   	data16
	...

8000009a <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
8000009a:	55                   	push   %ebp
8000009b:	89 e5                	mov    %esp,%ebp
8000009d:	57                   	push   %edi
8000009e:	56                   	push   %esi
8000009f:	53                   	push   %ebx
800000a0:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000a3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000aa:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000b1:	8b 45 08             	mov    0x8(%ebp),%eax
800000b4:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000b7:	8b 55 08             	mov    0x8(%ebp),%edx
800000ba:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
800000bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000c0:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
800000c3:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000c6:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
800000c9:	8b 75 08             	mov    0x8(%ebp),%esi
800000cc:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
800000ce:	8d 7d e8             	lea    -0x18(%ebp),%edi
800000d1:	50                   	push   %eax
800000d2:	52                   	push   %edx
800000d3:	51                   	push   %ecx
800000d4:	53                   	push   %ebx
800000d5:	56                   	push   %esi
800000d6:	ff 1f                	lcall  *(%edi)
800000d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
800000db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
800000de:	83 c4 10             	add    $0x10,%esp
800000e1:	5b                   	pop    %ebx
800000e2:	5e                   	pop    %esi
800000e3:	5f                   	pop    %edi
800000e4:	5d                   	pop    %ebp
800000e5:	c3                   	ret    

800000e6 <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
800000e6:	55                   	push   %ebp
800000e7:	89 e5                	mov    %esp,%ebp
800000e9:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
800000ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
800000f0:	7e 1b                	jle    8000010d <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
800000f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
800000f9:	8b 45 08             	mov    0x8(%ebp),%eax
800000fc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
800000ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000102:	50                   	push   %eax
80000103:	e8 92 ff ff ff       	call   8000009a <sys_call>
80000108:	83 c4 04             	add    $0x4,%esp
8000010b:	eb 01                	jmp    8000010e <msleep+0x28>
    if (ms <= 0) return;
8000010d:	90                   	nop

}
8000010e:	c9                   	leave  
8000010f:	c3                   	ret    

80000110 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000110:	55                   	push   %ebp
80000111:	89 e5                	mov    %esp,%ebp
80000113:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000116:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
8000011d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000120:	50                   	push   %eax
80000121:	e8 74 ff ff ff       	call   8000009a <sys_call>
80000126:	83 c4 04             	add    $0x4,%esp
}
80000129:	c9                   	leave  
8000012a:	c3                   	ret    

8000012b <print_msg>:

void print_msg(const char *fmt, int arg) {
8000012b:	55                   	push   %ebp
8000012c:	89 e5                	mov    %esp,%ebp
8000012e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000131:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
80000138:	8b 45 08             	mov    0x8(%ebp),%eax
8000013b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
8000013e:	8b 45 0c             	mov    0xc(%ebp),%eax
80000141:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000144:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000147:	50                   	push   %eax
80000148:	e8 4d ff ff ff       	call   8000009a <sys_call>
8000014d:	83 c4 04             	add    $0x4,%esp
}
80000150:	90                   	nop
80000151:	c9                   	leave  
80000152:	c3                   	ret    

80000153 <fork>:

int fork (void) {
80000153:	55                   	push   %ebp
80000154:	89 e5                	mov    %esp,%ebp
80000156:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
80000159:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
80000160:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000163:	50                   	push   %eax
80000164:	e8 31 ff ff ff       	call   8000009a <sys_call>
80000169:	83 c4 04             	add    $0x4,%esp
}
8000016c:	c9                   	leave  
8000016d:	c3                   	ret    

8000016e <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
8000016e:	55                   	push   %ebp
8000016f:	89 e5                	mov    %esp,%ebp
80000171:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
80000174:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
8000017b:	8b 45 08             	mov    0x8(%ebp),%eax
8000017e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
80000181:	8b 45 0c             	mov    0xc(%ebp),%eax
80000184:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
80000187:	8b 45 10             	mov    0x10(%ebp),%eax
8000018a:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
8000018d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000190:	50                   	push   %eax
80000191:	e8 04 ff ff ff       	call   8000009a <sys_call>
80000196:	83 c4 04             	add    $0x4,%esp
}
80000199:	c9                   	leave  
8000019a:	c3                   	ret    

8000019b <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
8000019b:	55                   	push   %ebp
8000019c:	89 e5                	mov    %esp,%ebp
8000019e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001a1:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001a8:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ab:	50                   	push   %eax
800001ac:	e8 e9 fe ff ff       	call   8000009a <sys_call>
800001b1:	83 c4 04             	add    $0x4,%esp
}
800001b4:	c9                   	leave  
800001b5:	c3                   	ret    

800001b6 <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001b6:	55                   	push   %ebp
800001b7:	89 e5                	mov    %esp,%ebp
800001b9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
800001bc:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001c3:	8b 45 08             	mov    0x8(%ebp),%eax
800001c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
800001c9:	8b 45 0c             	mov    0xc(%ebp),%eax
800001cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800001cf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d2:	50                   	push   %eax
800001d3:	e8 c2 fe ff ff       	call   8000009a <sys_call>
800001d8:	83 c4 04             	add    $0x4,%esp
}
800001db:	c9                   	leave  
800001dc:	c3                   	ret    

800001dd <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
800001dd:	55                   	push   %ebp
800001de:	89 e5                	mov    %esp,%ebp
800001e0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
800001e3:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
800001ea:	8b 45 08             	mov    0x8(%ebp),%eax
800001ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800001f0:	8b 45 0c             	mov    0xc(%ebp),%eax
800001f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
800001f6:	8b 45 10             	mov    0x10(%ebp),%eax
800001f9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800001fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ff:	50                   	push   %eax
80000200:	e8 95 fe ff ff       	call   8000009a <sys_call>
80000205:	83 c4 04             	add    $0x4,%esp
}
80000208:	c9                   	leave  
80000209:	c3                   	ret    

8000020a <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000020a:	55                   	push   %ebp
8000020b:	89 e5                	mov    %esp,%ebp
8000020d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000210:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
80000217:	8b 45 08             	mov    0x8(%ebp),%eax
8000021a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8000021d:	8b 45 0c             	mov    0xc(%ebp),%eax
80000220:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000223:	8b 45 10             	mov    0x10(%ebp),%eax
80000226:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000229:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000022c:	50                   	push   %eax
8000022d:	e8 68 fe ff ff       	call   8000009a <sys_call>
80000232:	83 c4 04             	add    $0x4,%esp
}
80000235:	c9                   	leave  
80000236:	c3                   	ret    

80000237 <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
80000237:	55                   	push   %ebp
80000238:	89 e5                	mov    %esp,%ebp
8000023a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
8000023d:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000244:	8b 45 08             	mov    0x8(%ebp),%eax
80000247:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000024a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024d:	50                   	push   %eax
8000024e:	e8 47 fe ff ff       	call   8000009a <sys_call>
80000253:	83 c4 04             	add    $0x4,%esp
}
80000256:	c9                   	leave  
80000257:	c3                   	ret    

80000258 <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
80000258:	55                   	push   %ebp
80000259:	89 e5                	mov    %esp,%ebp
8000025b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
8000025e:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
80000265:	8b 45 08             	mov    0x8(%ebp),%eax
80000268:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
8000026b:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
80000271:	8b 45 10             	mov    0x10(%ebp),%eax
80000274:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000277:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000027a:	50                   	push   %eax
8000027b:	e8 1a fe ff ff       	call   8000009a <sys_call>
80000280:	83 c4 04             	add    $0x4,%esp
}
80000283:	c9                   	leave  
80000284:	c3                   	ret    

80000285 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
80000285:	55                   	push   %ebp
80000286:	89 e5                	mov    %esp,%ebp
80000288:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000028b:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
80000292:	8b 45 08             	mov    0x8(%ebp),%eax
80000295:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000298:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000029b:	50                   	push   %eax
8000029c:	e8 f9 fd ff ff       	call   8000009a <sys_call>
800002a1:	83 c4 04             	add    $0x4,%esp
}
800002a4:	c9                   	leave  
800002a5:	c3                   	ret    

800002a6 <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002a6:	55                   	push   %ebp
800002a7:	89 e5                	mov    %esp,%ebp
800002a9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002ac:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002b3:	8b 45 08             	mov    0x8(%ebp),%eax
800002b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002b9:	8b 45 0c             	mov    0xc(%ebp),%eax
800002bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800002bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c2:	50                   	push   %eax
800002c3:	e8 d2 fd ff ff       	call   8000009a <sys_call>
800002c8:	83 c4 04             	add    $0x4,%esp
}
800002cb:	c9                   	leave  
800002cc:	c3                   	ret    

800002cd <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
800002cd:	55                   	push   %ebp
800002ce:	89 e5                	mov    %esp,%ebp
800002d0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
800002d3:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
800002da:	8b 45 08             	mov    0x8(%ebp),%eax
800002dd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
800002e0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002e3:	50                   	push   %eax
800002e4:	e8 b1 fd ff ff       	call   8000009a <sys_call>
800002e9:	83 c4 04             	add    $0x4,%esp
800002ec:	c9                   	leave  
800002ed:	c3                   	ret    
