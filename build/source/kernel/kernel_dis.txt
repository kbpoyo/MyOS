
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003a30 memsz 0x00020810 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed3  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000b58  00012ed4  00012ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00013a2c  00013a2c  00004a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cdd0  00013a40  00013a40  00004a30  2**5
                  ALLOC
  4 .debug_line   00001980  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000650  00000000  00000000  000063b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004977  00000000  00000000  00006a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001690  00000000  00000000  0000b377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000f4e  00000000  00000000  0000cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000db36  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000011d4  00000000  00000000  0000db64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
00013a40 l     O .bss	00000028 paddr_alloc
000102ba l     F .text	0000005d addr_alloc_init
00010317 l     F .text	00000067 addr_alloc_page
0001037e l     F .text	00000061 addr_free_page
000103df l     F .text	00000066 show_mem_info
00010445 l     F .text	00000037 total_mem_size
00012f7c l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
0001054b l     F .text	0000003d list_node_init
0001305c l     O .rodata	0000000f __func__.9
00010588 l     F .text	0000002d list_node_next
000130bc l     O .rodata	0000000f __func__.3
000105b5 l     F .text	00000047 list_init
0001306c l     O .rodata	0000000a __func__.8
000105fc l     F .text	00000035 list_is_empty
000130cc l     O .rodata	0000000e __func__.2
00010631 l     F .text	0000002d list_get_size
000130ac l     O .rodata	0000000e __func__.4
0001065e l     F .text	0000002c list_get_first
0001309c l     O .rodata	0000000f __func__.5
0001068a l     F .text	00000007 hlt
00010691 l     F .text	0000001a far_jump
000106ab l     F .text	00000017 write_tr
00013a80 l     O .bss	00000190 task_manager
000106c2 l     F .text	0000001f switch_to_tss
000106fc l     F .text	000000e5 tss_init
00013050 l     O .rodata	0000000a __func__.10
00013c20 l     O .bss	00000200 empty_task_stack
000108c5 l     F .text	0000000a empty_task
00013078 l     O .rodata	0000000f __func__.7
00013088 l     O .rodata	00000011 __func__.6
000130dc l     O .rodata	0000000f __func__.1
000130ec l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010d45 l     F .text	00000028 lgdt
00013e20 l     O .bss	00010000 gdt_table
00023e20 l     O .bss	00008000 is_alloc
0002be20 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010f37 l     F .text	00000007 cli
00010f3e l     F .text	00000007 sti
00010f45 l     F .text	00000007 hlt
00010f4c l     F .text	0000001d inb
00010f69 l     F .text	00000021 outb
00010f8a l     F .text	00000028 lidt
00010fb2 l     F .text	00000010 read_eflags
00010fc2 l     F .text	0000000b write_eflags
0002be40 l     O .bss	00000800 idt_table
00010fcd l     F .text	000000e9 print_exception_fram
000110b6 l     F .text	0000003e do_default_handler
00011340 l     F .text	00000047 gate_desc_set
000113c7 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011771 l     F .text	00000021 outb
0002c640 l     O .bss	00000004 sys_tick
000117ba l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011834 l     F .text	00000007 sti
000134fc l     O .rodata	0000000c __func__.0
0002c660 l     O .bss	000000b4 task_test_task_1
0002c720 l     O .bss	000000b4 task_test_task_2
0002c7e0 l     O .bss	00001000 test_task_1_stack
0002d7e0 l     O .bss	00001000 test_task_2_stack
0002e7e0 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011979 l     F .text	00000047 list_init
000135b4 l     O .rodata	0000000a __func__.1
000119c0 l     F .text	00000035 list_is_empty
000135c0 l     O .rodata	0000000e __func__.0
000135a8 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011b8b l     F .text	00000047 list_init
00013674 l     O .rodata	0000000a __func__.1
00011bd2 l     F .text	00000035 list_is_empty
00013680 l     O .rodata	0000000e __func__.0
00013668 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011d5b l     F .text	00000047 list_init
00013794 l     O .rodata	0000000a __func__.3
00011da2 l     F .text	0000002d list_get_size
000137a0 l     O .rodata	0000000e __func__.2
00011dcf l     F .text	0000002c list_get_first
000137c0 l     O .rodata	0000000f __func__.0
00011dfb l     F .text	0000002d list_get_last
000137b0 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012103 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00013890 l     O .rodata	0000000c __func__.3
0001389c l     O .rodata	0000000f __func__.2
000138ac l     O .rodata	0000000f __func__.1
000138bc l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00013a2c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012968 l     F .text	00000035 list_is_empty
000139c4 l     O .rodata	0000000e __func__.5
0001299d l     F .text	0000002d list_get_size
000139fc l     O .rodata	0000000e __func__.2
000139b0 l     O .rodata	00000012 __func__.6
000139d4 l     O .rodata	00000011 __func__.4
000139e8 l     O .rodata	00000012 __func__.3
00013a0c l     O .rodata	00000011 __func__.1
00013a20 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012d13 l     F .text	0000001d inb
00012d30 l     F .text	00000021 outb
0002e7f0 l     O .bss	00000014 mutex
000121ea g     F .text	00000078 bitmap_get_bit
000125bd g     F .text	0000004f kernel_memcpy
000115cd g     F .text	00000098 idt_enable
00010a60 g     F .text	0000000a task_current
00012a55 g     F .text	0000008f list_insert_last
00010ad2 g     F .text	00000061 sys_yield
00011228 g     F .text	0000001c do_handler_segment_not_present
0001099c g     F .text	0000004b task_set_ready
0001236a g     F .text	00000021 bitmap_is_set
00011704 g     F .text	0000000b idt_enable_global
0001260c g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012d51 g     F .text	00000088 log_init
000118e0 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012486 g     F .text	00000047 kernel_strcpy
000116f9 g     F .text	0000000b idt_disable_global
00011387 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011180 g     F .text	0000001c do_handler_overflow
000112b4 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011260 g     F .text	0000001c do_handler_general_protection
00011324 g     F .text	0000001c do_handler_control_exception
00011d32 g     F .text	00000029 sem_count
00011110 g     F .text	0000001c do_handler_divider
00012262 g     F .text	00000108 bitmap_set_bit
000111f0 g     F .text	0000001c do_handler_double_fault
0001127c g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
0001170f g     F .text	00000039 pic_send_eoi
00012b95 g     F .text	000000b5 list_remove_last
00010992 g     F .text	0000000a task_first_task
00011c4a g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010e2c g     F .text	00000094 gdt_init
00011308 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
0001112c g     F .text	0000001c do_handler_debug
0002e810 g     O .bss	00002000 stack
00010ce5 g     F .text	00000060 sys_sleep
000118b7 g     F .text	00000029 test_task_2
00011e28 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
0001145a g     F .text	00000173 idt_init
00011cb5 g     F .text	0000007d sem_notify
000111b8 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011298 g     F .text	0000001c do_handler_fpu_error
0001094a g     F .text	00000048 task_first_init
000112d0 g     F .text	0000001c do_handler_machine_check
000129ca g     F .text	0000008b list_insert_first
00010c9a g     F .text	0000004b task_set_wakeup
00010a32 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000124cd g     F .text	00000051 kernel_strncpy
00030810 g       .bss	00000000 mem_free_start
0001183b g     F .text	00000053 kernel_init
00011c07 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000126f5 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011a42 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
0001120c g     F .text	0000001c do_handler_invalid_tss
00011665 g     F .text	00000094 idt_disable
00010c3e g     F .text	0000005c task_set_sleep
00011148 g     F .text	0000001c do_handler_nmi
000119f5 g     F .text	0000004d mutex_init
0001188e g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00012140 g     F .text	00000016 bitmap_byte_count
000111d4 g     F .text	0000001c do_handler_device_unavailable
00011748 g     F .text	00000018 idt_enter_protection
00010b33 g     F .text	0000010b task_slice_end
0001264d g     F .text	00000084 kernel_memcmp
000112ec g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000110f4 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000106e1 g     F .text	0000001b task_switch_from_to
00011ad3 g     F .text	000000b8 mutex_unlock
00010a6a g     F .text	00000068 task_switch
00012588 g     F .text	00000035 kernel_strlen
000109e7 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010d6d g     F .text	000000bf segment_desc_set
0001119c g     F .text	0000001c do_handler_bound_range
00012ae4 g     F .text	000000b1 list_remove_first
0001251e g     F .text	0000006a kernel_strncmp
00012156 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
0001238b g     F .text	000000fb bitmap_alloc_nbits
000108cf g     F .text	0000007b task_manager_init
0001047c g     F .text	000000cf memory_init
0001210a g     F .text	00000036 pannic
00011244 g     F .text	0000001c do_handler_stack_segment_fault
00011164 g     F .text	0000001c do_handler_breakpoint
00012dd9 g     F .text	000000fa log_printf
000107e1 g     F .text	000000e4 task_init
000126d1 g     F .text	00000024 kernel_sprintf
00010ec0 g     F .text	00000077 gdt_alloc_desc
00012892 g     F .text	000000d6 kernel_itoa
00012c4a g     F .text	000000c9 list_remove
00011760 g     F .text	00000011 idt_leave_protection
00011792 g     F .text	00000028 do_handler_time
0001181c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 30 18 00 00       	call   1183b <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 10 08 03 00       	mov    $0x30810,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 b6 18 00 00       	jmp    118e0 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 b9 10 00 00       	call   110f4 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 b8 10 00 00       	call   11110 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 b7 10 00 00       	call   1112c <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 b6 10 00 00       	call   11148 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 b5 10 00 00       	call   11164 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 b4 10 00 00       	call   11180 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 b3 10 00 00       	call   1119c <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 b2 10 00 00       	call   111b8 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 b1 10 00 00       	call   111d4 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 b2 10 00 00       	call   111f0 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 b3 10 00 00       	call   1120c <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 b4 10 00 00       	call   11228 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 b5 10 00 00       	call   11244 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 b6 10 00 00       	call   11260 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 b7 10 00 00       	call   1127c <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 b6 10 00 00       	call   11298 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 b7 10 00 00       	call   112b4 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 b6 10 00 00       	call   112d0 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 b5 10 00 00       	call   112ec <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 b4 10 00 00       	call   11308 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 b5 10 00 00       	call   11324 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 06 15 00 00       	call   11792 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	83 ec 0c             	sub    $0xc,%esp
   102c6:	50                   	push   %eax
   102c7:	e8 29 17 00 00       	call   119f5 <mutex_init>
   102cc:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   102cf:	8b 45 08             	mov    0x8(%ebp),%eax
   102d2:	8b 55 10             	mov    0x10(%ebp),%edx
   102d5:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   102d8:	8b 45 08             	mov    0x8(%ebp),%eax
   102db:	8b 55 14             	mov    0x14(%ebp),%edx
   102de:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   102e1:	8b 45 08             	mov    0x8(%ebp),%eax
   102e4:	8b 55 18             	mov    0x18(%ebp),%edx
   102e7:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   102ea:	8b 45 08             	mov    0x8(%ebp),%eax
   102ed:	8b 40 20             	mov    0x20(%eax),%eax
   102f0:	8b 55 08             	mov    0x8(%ebp),%edx
   102f3:	8b 4a 24             	mov    0x24(%edx),%ecx
   102f6:	ba 00 00 00 00       	mov    $0x0,%edx
   102fb:	f7 f1                	div    %ecx
   102fd:	89 c2                	mov    %eax,%edx
   102ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10302:	83 c0 14             	add    $0x14,%eax
   10305:	6a 00                	push   $0x0
   10307:	52                   	push   %edx
   10308:	ff 75 0c             	push   0xc(%ebp)
   1030b:	50                   	push   %eax
   1030c:	e8 45 1e 00 00       	call   12156 <bitmap_init>
   10311:	83 c4 10             	add    $0x10,%esp
}
   10314:	90                   	nop
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1031d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	83 ec 0c             	sub    $0xc,%esp
   1032a:	50                   	push   %eax
   1032b:	e8 12 17 00 00       	call   11a42 <mutex_lock>
   10330:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	83 c0 14             	add    $0x14,%eax
   10339:	83 ec 04             	sub    $0x4,%esp
   1033c:	ff 75 0c             	push   0xc(%ebp)
   1033f:	6a 00                	push   $0x0
   10341:	50                   	push   %eax
   10342:	e8 44 20 00 00       	call   1238b <bitmap_alloc_nbits>
   10347:	83 c4 10             	add    $0x10,%esp
   1034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   1034d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10351:	78 17                	js     1036a <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	8b 50 24             	mov    0x24(%eax),%edx
   1035f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10362:	0f af c2             	imul   %edx,%eax
   10365:	01 c8                	add    %ecx,%eax
   10367:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	83 ec 0c             	sub    $0xc,%esp
   10370:	50                   	push   %eax
   10371:	e8 5d 17 00 00       	call   11ad3 <mutex_unlock>
   10376:	83 c4 10             	add    $0x10,%esp

  return addr;
   10379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1037c:	c9                   	leave  
   1037d:	c3                   	ret    

0001037e <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1037e:	55                   	push   %ebp
   1037f:	89 e5                	mov    %esp,%ebp
   10381:	53                   	push   %ebx
   10382:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	83 ec 0c             	sub    $0xc,%esp
   1038b:	50                   	push   %eax
   1038c:	e8 b1 16 00 00       	call   11a42 <mutex_lock>
   10391:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 50 1c             	mov    0x1c(%eax),%edx
   1039a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1039d:	29 d0                	sub    %edx,%eax
   1039f:	89 c1                	mov    %eax,%ecx
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 58 24             	mov    0x24(%eax),%ebx
   103a7:	89 c8                	mov    %ecx,%eax
   103a9:	ba 00 00 00 00       	mov    $0x0,%edx
   103ae:	f7 f3                	div    %ebx
   103b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   103b3:	8b 45 08             	mov    0x8(%ebp),%eax
   103b6:	83 c0 14             	add    $0x14,%eax
   103b9:	6a 00                	push   $0x0
   103bb:	ff 75 10             	push   0x10(%ebp)
   103be:	ff 75 f4             	push   -0xc(%ebp)
   103c1:	50                   	push   %eax
   103c2:	e8 9b 1e 00 00       	call   12262 <bitmap_set_bit>
   103c7:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 ec 0c             	sub    $0xc,%esp
   103d0:	50                   	push   %eax
   103d1:	e8 fd 16 00 00       	call   11ad3 <mutex_unlock>
   103d6:	83 c4 10             	add    $0x10,%esp
}
   103d9:	90                   	nop
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   103e5:	83 ec 0c             	sub    $0xc,%esp
   103e8:	68 d4 2e 01 00       	push   $0x12ed4
   103ed:	e8 e7 29 00 00       	call   12dd9 <log_printf>
   103f2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   103f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   103fc:	eb 29                	jmp    10427 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10404:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1040e:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10411:	52                   	push   %edx
   10412:	50                   	push   %eax
   10413:	ff 75 f4             	push   -0xc(%ebp)
   10416:	68 e0 2e 01 00       	push   $0x12ee0
   1041b:	e8 b9 29 00 00       	call   12dd9 <log_printf>
   10420:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10423:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	8b 40 50             	mov    0x50(%eax),%eax
   1042d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10430:	7c cc                	jl     103fe <show_mem_info+0x1f>
    }

    log_printf("");
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	68 f2 2e 01 00       	push   $0x12ef2
   1043a:	e8 9a 29 00 00       	call   12dd9 <log_printf>
   1043f:	83 c4 10             	add    $0x10,%esp
}
   10442:	90                   	nop
   10443:	c9                   	leave  
   10444:	c3                   	ret    

00010445 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   10445:	55                   	push   %ebp
   10446:	89 e5                	mov    %esp,%ebp
   10448:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   1044b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10459:	eb 11                	jmp    1046c <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   1045b:	8b 45 08             	mov    0x8(%ebp),%eax
   1045e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10461:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10465:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10468:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	8b 40 50             	mov    0x50(%eax),%eax
   10472:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10475:	7c e4                	jl     1045b <total_mem_size+0x16>
    }

    return mem_size;
   10477:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1047a:	c9                   	leave  
   1047b:	c3                   	ret    

0001047c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1047c:	55                   	push   %ebp
   1047d:	89 e5                	mov    %esp,%ebp
   1047f:	83 ec 18             	sub    $0x18,%esp

    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern uint8_t * mem_free_start;

    log_printf("memory init");
   10482:	83 ec 0c             	sub    $0xc,%esp
   10485:	68 f3 2e 01 00       	push   $0x12ef3
   1048a:	e8 4a 29 00 00       	call   12dd9 <log_printf>
   1048f:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10492:	83 ec 0c             	sub    $0xc,%esp
   10495:	ff 75 08             	push   0x8(%ebp)
   10498:	e8 42 ff ff ff       	call   103df <show_mem_info>
   1049d:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   104a0:	83 ec 0c             	sub    $0xc,%esp
   104a3:	ff 75 08             	push   0x8(%ebp)
   104a6:	e8 9a ff ff ff       	call   10445 <total_mem_size>
   104ab:	83 c4 10             	add    $0x10,%esp
   104ae:	2d 00 00 10 00       	sub    $0x100000,%eax
   104b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   104b6:	83 ec 08             	sub    $0x8,%esp
   104b9:	68 00 10 00 00       	push   $0x1000
   104be:	ff 75 f4             	push   -0xc(%ebp)
   104c1:	e8 e7 fd ff ff       	call   102ad <down2>
   104c6:	83 c4 10             	add    $0x10,%esp
   104c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   104cc:	83 ec 04             	sub    $0x4,%esp
   104cf:	ff 75 f4             	push   -0xc(%ebp)
   104d2:	68 00 00 10 00       	push   $0x100000
   104d7:	68 ff 2e 01 00       	push   $0x12eff
   104dc:	e8 f8 28 00 00       	call   12dd9 <log_printf>
   104e1:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = mem_free_start;
   104e4:	a1 10 08 03 00       	mov    0x30810,%eax
   104e9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   104ec:	83 ec 0c             	sub    $0xc,%esp
   104ef:	68 00 10 00 00       	push   $0x1000
   104f4:	ff 75 f4             	push   -0xc(%ebp)
   104f7:	68 00 00 10 00       	push   $0x100000
   104fc:	ff 75 f0             	push   -0x10(%ebp)
   104ff:	68 40 3a 01 00       	push   $0x13a40
   10504:	e8 b1 fd ff ff       	call   102ba <addr_alloc_init>
   10509:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  //位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
   1050c:	a1 60 3a 01 00       	mov    0x13a60,%eax
   10511:	c1 e8 0c             	shr    $0xc,%eax
   10514:	83 ec 0c             	sub    $0xc,%esp
   10517:	50                   	push   %eax
   10518:	e8 23 1c 00 00       	call   12140 <bitmap_byte_count>
   1051d:	83 c4 10             	add    $0x10,%esp
   10520:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10523:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   1052a:	76 1c                	jbe    10548 <memory_init+0xcc>
   1052c:	68 20 2f 01 00       	push   $0x12f20
   10531:	68 7c 2f 01 00       	push   $0x12f7c
   10536:	68 8c 00 00 00       	push   $0x8c
   1053b:	68 44 2f 01 00       	push   $0x12f44
   10540:	e8 c5 1b 00 00       	call   1210a <pannic>
   10545:	83 c4 10             	add    $0x10,%esp

   10548:	90                   	nop
   10549:	c9                   	leave  
   1054a:	c3                   	ret    

0001054b <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1054b:	55                   	push   %ebp
   1054c:	89 e5                	mov    %esp,%ebp
   1054e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10551:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10555:	75 19                	jne    10570 <list_node_init+0x25>
   10557:	68 88 2f 01 00       	push   $0x12f88
   1055c:	68 5c 30 01 00       	push   $0x1305c
   10561:	6a 20                	push   $0x20
   10563:	68 a0 2f 01 00       	push   $0x12fa0
   10568:	e8 9d 1b 00 00       	call   1210a <pannic>
   1056d:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10570:	8b 45 08             	mov    0x8(%ebp),%eax
   10573:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1057a:	8b 45 08             	mov    0x8(%ebp),%eax
   1057d:	8b 50 04             	mov    0x4(%eax),%edx
   10580:	8b 45 08             	mov    0x8(%ebp),%eax
   10583:	89 10                	mov    %edx,(%eax)
}
   10585:	90                   	nop
   10586:	c9                   	leave  
   10587:	c3                   	ret    

00010588 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10588:	55                   	push   %ebp
   10589:	89 e5                	mov    %esp,%ebp
   1058b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1058e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10592:	75 19                	jne    105ad <list_node_next+0x25>
   10594:	68 88 2f 01 00       	push   $0x12f88
   10599:	68 bc 30 01 00       	push   $0x130bc
   1059e:	6a 2b                	push   $0x2b
   105a0:	68 a0 2f 01 00       	push   $0x12fa0
   105a5:	e8 60 1b 00 00       	call   1210a <pannic>
   105aa:	83 c4 10             	add    $0x10,%esp

    return node->next;
   105ad:	8b 45 08             	mov    0x8(%ebp),%eax
   105b0:	8b 40 04             	mov    0x4(%eax),%eax
}
   105b3:	c9                   	leave  
   105b4:	c3                   	ret    

000105b5 <list_init>:

static inline void list_init(list_t *list) {
   105b5:	55                   	push   %ebp
   105b6:	89 e5                	mov    %esp,%ebp
   105b8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   105bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105bf:	75 19                	jne    105da <list_init+0x25>
   105c1:	68 de 2f 01 00       	push   $0x12fde
   105c6:	68 6c 30 01 00       	push   $0x1306c
   105cb:	6a 31                	push   $0x31
   105cd:	68 a0 2f 01 00       	push   $0x12fa0
   105d2:	e8 33 1b 00 00       	call   1210a <pannic>
   105d7:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   105da:	8b 45 08             	mov    0x8(%ebp),%eax
   105dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   105e4:	8b 45 08             	mov    0x8(%ebp),%eax
   105e7:	8b 50 04             	mov    0x4(%eax),%edx
   105ea:	8b 45 08             	mov    0x8(%ebp),%eax
   105ed:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   105ef:	8b 45 08             	mov    0x8(%ebp),%eax
   105f2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   105f9:	90                   	nop
   105fa:	c9                   	leave  
   105fb:	c3                   	ret    

000105fc <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   105fc:	55                   	push   %ebp
   105fd:	89 e5                	mov    %esp,%ebp
   105ff:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10602:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10606:	75 19                	jne    10621 <list_is_empty+0x25>
   10608:	68 de 2f 01 00       	push   $0x12fde
   1060d:	68 cc 30 01 00       	push   $0x130cc
   10612:	6a 38                	push   $0x38
   10614:	68 a0 2f 01 00       	push   $0x12fa0
   10619:	e8 ec 1a 00 00       	call   1210a <pannic>
   1061e:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10621:	8b 45 08             	mov    0x8(%ebp),%eax
   10624:	8b 40 08             	mov    0x8(%eax),%eax
   10627:	85 c0                	test   %eax,%eax
   10629:	0f 94 c0             	sete   %al
   1062c:	0f b6 c0             	movzbl %al,%eax
}
   1062f:	c9                   	leave  
   10630:	c3                   	ret    

00010631 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10631:	55                   	push   %ebp
   10632:	89 e5                	mov    %esp,%ebp
   10634:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10637:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1063b:	75 19                	jne    10656 <list_get_size+0x25>
   1063d:	68 de 2f 01 00       	push   $0x12fde
   10642:	68 ac 30 01 00       	push   $0x130ac
   10647:	6a 3e                	push   $0x3e
   10649:	68 a0 2f 01 00       	push   $0x12fa0
   1064e:	e8 b7 1a 00 00       	call   1210a <pannic>
   10653:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10656:	8b 45 08             	mov    0x8(%ebp),%eax
   10659:	8b 40 08             	mov    0x8(%eax),%eax
}
   1065c:	c9                   	leave  
   1065d:	c3                   	ret    

0001065e <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   1065e:	55                   	push   %ebp
   1065f:	89 e5                	mov    %esp,%ebp
   10661:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10664:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10668:	75 19                	jne    10683 <list_get_first+0x25>
   1066a:	68 de 2f 01 00       	push   $0x12fde
   1066f:	68 9c 30 01 00       	push   $0x1309c
   10674:	6a 44                	push   $0x44
   10676:	68 a0 2f 01 00       	push   $0x12fa0
   1067b:	e8 8a 1a 00 00       	call   1210a <pannic>
   10680:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10683:	8b 45 08             	mov    0x8(%ebp),%eax
   10686:	8b 00                	mov    (%eax),%eax
}
   10688:	c9                   	leave  
   10689:	c3                   	ret    

0001068a <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1068a:	55                   	push   %ebp
   1068b:	89 e5                	mov    %esp,%ebp
   1068d:	f4                   	hlt    
   1068e:	90                   	nop
   1068f:	5d                   	pop    %ebp
   10690:	c3                   	ret    

00010691 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10691:	55                   	push   %ebp
   10692:	89 e5                	mov    %esp,%ebp
   10694:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10697:	8b 45 0c             	mov    0xc(%ebp),%eax
   1069a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1069d:	8b 45 08             	mov    0x8(%ebp),%eax
   106a0:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   106a3:	8d 45 f8             	lea    -0x8(%ebp),%eax
   106a6:	ff 28                	ljmp   *(%eax)
}
   106a8:	90                   	nop
   106a9:	c9                   	leave  
   106aa:	c3                   	ret    

000106ab <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   106ab:	55                   	push   %ebp
   106ac:	89 e5                	mov    %esp,%ebp
   106ae:	83 ec 04             	sub    $0x4,%esp
   106b1:	8b 45 08             	mov    0x8(%ebp),%eax
   106b4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   106b8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   106bc:	0f 00 d8             	ltr    %ax
}
   106bf:	90                   	nop
   106c0:	c9                   	leave  
   106c1:	c3                   	ret    

000106c2 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   106c2:	55                   	push   %ebp
   106c3:	89 e5                	mov    %esp,%ebp
   106c5:	83 ec 04             	sub    $0x4,%esp
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   106cf:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   106d3:	6a 00                	push   $0x0
   106d5:	50                   	push   %eax
   106d6:	e8 b6 ff ff ff       	call   10691 <far_jump>
   106db:	83 c4 08             	add    $0x8,%esp
}
   106de:	90                   	nop
   106df:	c9                   	leave  
   106e0:	c3                   	ret    

000106e1 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   106e1:	55                   	push   %ebp
   106e2:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   106e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   106e7:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   106ed:	0f b7 c0             	movzwl %ax,%eax
   106f0:	50                   	push   %eax
   106f1:	e8 cc ff ff ff       	call   106c2 <switch_to_tss>
   106f6:	83 c4 04             	add    $0x4,%esp
}
   106f9:	90                   	nop
   106fa:	c9                   	leave  
   106fb:	c3                   	ret    

000106fc <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   106fc:	55                   	push   %ebp
   106fd:	89 e5                	mov    %esp,%ebp
   106ff:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10702:	8b 45 08             	mov    0x8(%ebp),%eax
   10705:	83 c0 48             	add    $0x48,%eax
   10708:	83 ec 04             	sub    $0x4,%esp
   1070b:	6a 68                	push   $0x68
   1070d:	6a 00                	push   $0x0
   1070f:	50                   	push   %eax
   10710:	e8 f7 1e 00 00       	call   1260c <kernel_memset>
   10715:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10718:	8b 45 08             	mov    0x8(%ebp),%eax
   1071b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1071e:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10721:	8b 45 08             	mov    0x8(%ebp),%eax
   10724:	8b 55 10             	mov    0x10(%ebp),%edx
   10727:	89 50 4c             	mov    %edx,0x4c(%eax)
   1072a:	8b 45 08             	mov    0x8(%ebp),%eax
   1072d:	8b 50 4c             	mov    0x4c(%eax),%edx
   10730:	8b 45 08             	mov    0x8(%ebp),%eax
   10733:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10739:	8b 45 08             	mov    0x8(%ebp),%eax
   1073c:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10743:	8b 45 08             	mov    0x8(%ebp),%eax
   10746:	8b 50 50             	mov    0x50(%eax),%edx
   10749:	8b 45 08             	mov    0x8(%ebp),%eax
   1074c:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10752:	8b 45 08             	mov    0x8(%ebp),%eax
   10755:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   1075c:	00 00 00 
   1075f:	8b 45 08             	mov    0x8(%ebp),%eax
   10762:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10768:	8b 45 08             	mov    0x8(%ebp),%eax
   1076b:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10771:	8b 45 08             	mov    0x8(%ebp),%eax
   10774:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1077a:	8b 45 08             	mov    0x8(%ebp),%eax
   1077d:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10783:	8b 45 08             	mov    0x8(%ebp),%eax
   10786:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   1078c:	8b 45 08             	mov    0x8(%ebp),%eax
   1078f:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10795:	8b 45 08             	mov    0x8(%ebp),%eax
   10798:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   1079f:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   107a2:	8b 45 08             	mov    0x8(%ebp),%eax
   107a5:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   107ac:	e8 0f 07 00 00       	call   10ec0 <gdt_alloc_desc>
   107b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   107b4:	8b 45 08             	mov    0x8(%ebp),%eax
   107b7:	83 c0 48             	add    $0x48,%eax
   107ba:	89 c2                	mov    %eax,%edx
   107bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107bf:	0f b7 c0             	movzwl %ax,%eax
   107c2:	68 89 00 00 00       	push   $0x89
   107c7:	6a 68                	push   $0x68
   107c9:	52                   	push   %edx
   107ca:	50                   	push   %eax
   107cb:	e8 9d 05 00 00       	call   10d6d <segment_desc_set>
   107d0:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   107d3:	8b 45 08             	mov    0x8(%ebp),%eax
   107d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   107d9:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   107df:	c9                   	leave  
   107e0:	c3                   	ret    

000107e1 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   107e1:	55                   	push   %ebp
   107e2:	89 e5                	mov    %esp,%ebp
   107e4:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   107e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   107eb:	75 19                	jne    10806 <task_init+0x25>
   107ed:	68 f1 2f 01 00       	push   $0x12ff1
   107f2:	68 50 30 01 00       	push   $0x13050
   107f7:	6a 60                	push   $0x60
   107f9:	68 04 30 01 00       	push   $0x13004
   107fe:	e8 07 19 00 00       	call   1210a <pannic>
   10803:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10806:	83 ec 04             	sub    $0x4,%esp
   10809:	ff 75 14             	push   0x14(%ebp)
   1080c:	ff 75 10             	push   0x10(%ebp)
   1080f:	ff 75 08             	push   0x8(%ebp)
   10812:	e8 e5 fe ff ff       	call   106fc <tss_init>
   10817:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1081a:	8b 45 08             	mov    0x8(%ebp),%eax
   1081d:	83 c0 10             	add    $0x10,%eax
   10820:	83 ec 04             	sub    $0x4,%esp
   10823:	6a 20                	push   $0x20
   10825:	ff 75 0c             	push   0xc(%ebp)
   10828:	50                   	push   %eax
   10829:	e8 9f 1c 00 00       	call   124cd <kernel_strncpy>
   1082e:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10831:	8b 45 08             	mov    0x8(%ebp),%eax
   10834:	83 c0 30             	add    $0x30,%eax
   10837:	83 ec 0c             	sub    $0xc,%esp
   1083a:	50                   	push   %eax
   1083b:	e8 0b fd ff ff       	call   1054b <list_node_init>
   10840:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10843:	8b 45 08             	mov    0x8(%ebp),%eax
   10846:	83 c0 38             	add    $0x38,%eax
   10849:	83 ec 0c             	sub    $0xc,%esp
   1084c:	50                   	push   %eax
   1084d:	e8 f9 fc ff ff       	call   1054b <list_node_init>
   10852:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10855:	8b 45 08             	mov    0x8(%ebp),%eax
   10858:	83 c0 40             	add    $0x40,%eax
   1085b:	83 ec 0c             	sub    $0xc,%esp
   1085e:	50                   	push   %eax
   1085f:	e8 e7 fc ff ff       	call   1054b <list_node_init>
   10864:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10867:	8b 45 08             	mov    0x8(%ebp),%eax
   1086a:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10871:	8b 45 08             	mov    0x8(%ebp),%eax
   10874:	8b 50 08             	mov    0x8(%eax),%edx
   10877:	8b 45 08             	mov    0x8(%ebp),%eax
   1087a:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   1087d:	8b 45 08             	mov    0x8(%ebp),%eax
   10880:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10887:	e8 bc 0e 00 00       	call   11748 <idt_enter_protection>
   1088c:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   1088f:	8b 45 08             	mov    0x8(%ebp),%eax
   10892:	83 c0 38             	add    $0x38,%eax
   10895:	83 ec 08             	sub    $0x8,%esp
   10898:	50                   	push   %eax
   10899:	68 90 3a 01 00       	push   $0x13a90
   1089e:	e8 b2 21 00 00       	call   12a55 <list_insert_last>
   108a3:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   108a6:	83 ec 0c             	sub    $0xc,%esp
   108a9:	ff 75 08             	push   0x8(%ebp)
   108ac:	e8 eb 00 00 00       	call   1099c <task_set_ready>
   108b1:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   108b4:	83 ec 0c             	sub    $0xc,%esp
   108b7:	ff 75 f4             	push   -0xc(%ebp)
   108ba:	e8 a1 0e 00 00       	call   11760 <idt_leave_protection>
   108bf:	83 c4 10             	add    $0x10,%esp
}
   108c2:	90                   	nop
   108c3:	c9                   	leave  
   108c4:	c3                   	ret    

000108c5 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   108c5:	55                   	push   %ebp
   108c6:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   108c8:	e8 bd fd ff ff       	call   1068a <hlt>
   108cd:	eb f9                	jmp    108c8 <empty_task+0x3>

000108cf <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   108cf:	55                   	push   %ebp
   108d0:	89 e5                	mov    %esp,%ebp
   108d2:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   108d5:	83 ec 0c             	sub    $0xc,%esp
   108d8:	68 84 3a 01 00       	push   $0x13a84
   108dd:	e8 d3 fc ff ff       	call   105b5 <list_init>
   108e2:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   108e5:	83 ec 0c             	sub    $0xc,%esp
   108e8:	68 90 3a 01 00       	push   $0x13a90
   108ed:	e8 c3 fc ff ff       	call   105b5 <list_init>
   108f2:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   108f5:	83 ec 0c             	sub    $0xc,%esp
   108f8:	68 9c 3a 01 00       	push   $0x13a9c
   108fd:	e8 b3 fc ff ff       	call   105b5 <list_init>
   10902:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10905:	c7 05 80 3a 01 00 00 	movl   $0x0,0x13a80
   1090c:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1090f:	ba 20 3e 01 00       	mov    $0x13e20,%edx
   10914:	b8 c5 08 01 00       	mov    $0x108c5,%eax
   10919:	52                   	push   %edx
   1091a:	50                   	push   %eax
   1091b:	68 39 30 01 00       	push   $0x13039
   10920:	68 5c 3b 01 00       	push   $0x13b5c
   10925:	e8 b7 fe ff ff       	call   107e1 <task_init>
   1092a:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   1092d:	83 ec 0c             	sub    $0xc,%esp
   10930:	68 5c 3b 01 00       	push   $0x13b5c
   10935:	e8 ad 00 00 00       	call   109e7 <task_set_unready>
   1093a:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   1093d:	c7 05 5c 3b 01 00 00 	movl   $0x0,0x13b5c
   10944:	00 00 00 
}
   10947:	90                   	nop
   10948:	c9                   	leave  
   10949:	c3                   	ret    

0001094a <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   1094a:	55                   	push   %ebp
   1094b:	89 e5                	mov    %esp,%ebp
   1094d:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   10950:	6a 00                	push   $0x0
   10952:	6a 00                	push   $0x0
   10954:	68 44 30 01 00       	push   $0x13044
   10959:	68 a8 3a 01 00       	push   $0x13aa8
   1095e:	e8 7e fe ff ff       	call   107e1 <task_init>
   10963:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   10966:	a1 58 3b 01 00       	mov    0x13b58,%eax
   1096b:	0f b7 c0             	movzwl %ax,%eax
   1096e:	83 ec 0c             	sub    $0xc,%esp
   10971:	50                   	push   %eax
   10972:	e8 34 fd ff ff       	call   106ab <write_tr>
   10977:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   1097a:	c7 05 80 3a 01 00 a8 	movl   $0x13aa8,0x13a80
   10981:	3a 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10984:	a1 80 3a 01 00       	mov    0x13a80,%eax
   10989:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   1098f:	90                   	nop
   10990:	c9                   	leave  
   10991:	c3                   	ret    

00010992 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10992:	55                   	push   %ebp
   10993:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10995:	b8 a8 3a 01 00       	mov    $0x13aa8,%eax
}
   1099a:	5d                   	pop    %ebp
   1099b:	c3                   	ret    

0001099c <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   1099c:	55                   	push   %ebp
   1099d:	89 e5                	mov    %esp,%ebp
   1099f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   109a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109a6:	75 1c                	jne    109c4 <task_set_ready+0x28>
   109a8:	68 f1 2f 01 00       	push   $0x12ff1
   109ad:	68 78 30 01 00       	push   $0x13078
   109b2:	68 c9 00 00 00       	push   $0xc9
   109b7:	68 04 30 01 00       	push   $0x13004
   109bc:	e8 49 17 00 00       	call   1210a <pannic>
   109c1:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   109c4:	8b 45 08             	mov    0x8(%ebp),%eax
   109c7:	83 c0 30             	add    $0x30,%eax
   109ca:	83 ec 08             	sub    $0x8,%esp
   109cd:	50                   	push   %eax
   109ce:	68 84 3a 01 00       	push   $0x13a84
   109d3:	e8 7d 20 00 00       	call   12a55 <list_insert_last>
   109d8:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   109db:	8b 45 08             	mov    0x8(%ebp),%eax
   109de:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   109e4:	90                   	nop
   109e5:	c9                   	leave  
   109e6:	c3                   	ret    

000109e7 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   109e7:	55                   	push   %ebp
   109e8:	89 e5                	mov    %esp,%ebp
   109ea:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   109ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109f1:	75 1c                	jne    10a0f <task_set_unready+0x28>
   109f3:	68 f1 2f 01 00       	push   $0x12ff1
   109f8:	68 88 30 01 00       	push   $0x13088
   109fd:	68 d8 00 00 00       	push   $0xd8
   10a02:	68 04 30 01 00       	push   $0x13004
   10a07:	e8 fe 16 00 00       	call   1210a <pannic>
   10a0c:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a12:	83 c0 30             	add    $0x30,%eax
   10a15:	83 ec 08             	sub    $0x8,%esp
   10a18:	50                   	push   %eax
   10a19:	68 84 3a 01 00       	push   $0x13a84
   10a1e:	e8 27 22 00 00       	call   12c4a <list_remove>
   10a23:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10a26:	8b 45 08             	mov    0x8(%ebp),%eax
   10a29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10a2f:	90                   	nop
   10a30:	c9                   	leave  
   10a31:	c3                   	ret    

00010a32 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10a32:	55                   	push   %ebp
   10a33:	89 e5                	mov    %esp,%ebp
   10a35:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10a38:	83 ec 0c             	sub    $0xc,%esp
   10a3b:	68 84 3a 01 00       	push   $0x13a84
   10a40:	e8 19 fc ff ff       	call   1065e <list_get_first>
   10a45:	83 c4 10             	add    $0x10,%esp
   10a48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10a4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a4f:	74 08                	je     10a59 <task_ready_first+0x27>
   10a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a54:	83 e8 30             	sub    $0x30,%eax
   10a57:	eb 05                	jmp    10a5e <task_ready_first+0x2c>
   10a59:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a5e:	c9                   	leave  
   10a5f:	c3                   	ret    

00010a60 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10a60:	55                   	push   %ebp
   10a61:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10a63:	a1 80 3a 01 00       	mov    0x13a80,%eax
}
   10a68:	5d                   	pop    %ebp
   10a69:	c3                   	ret    

00010a6a <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10a6a:	55                   	push   %ebp
   10a6b:	89 e5                	mov    %esp,%ebp
   10a6d:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10a70:	e8 d3 0c 00 00       	call   11748 <idt_enter_protection>
   10a75:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10a78:	e8 b5 ff ff ff       	call   10a32 <task_ready_first>
   10a7d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10a80:	a1 80 3a 01 00       	mov    0x13a80,%eax
   10a85:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10a88:	74 37                	je     10ac1 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10a8a:	a1 80 3a 01 00       	mov    0x13a80,%eax
   10a8f:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10a92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a96:	75 07                	jne    10a9f <task_switch+0x35>
            to = &task_manager.empty_task;
   10a98:	c7 45 f4 5c 3b 01 00 	movl   $0x13b5c,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10aa2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10aab:	a3 80 3a 01 00       	mov    %eax,0x13a80
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10ab0:	83 ec 08             	sub    $0x8,%esp
   10ab3:	ff 75 f4             	push   -0xc(%ebp)
   10ab6:	ff 75 ec             	push   -0x14(%ebp)
   10ab9:	e8 23 fc ff ff       	call   106e1 <task_switch_from_to>
   10abe:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10ac1:	83 ec 0c             	sub    $0xc,%esp
   10ac4:	ff 75 f0             	push   -0x10(%ebp)
   10ac7:	e8 94 0c 00 00       	call   11760 <idt_leave_protection>
   10acc:	83 c4 10             	add    $0x10,%esp
}
   10acf:	90                   	nop
   10ad0:	c9                   	leave  
   10ad1:	c3                   	ret    

00010ad2 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10ad2:	55                   	push   %ebp
   10ad3:	89 e5                	mov    %esp,%ebp
   10ad5:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10ad8:	e8 6b 0c 00 00       	call   11748 <idt_enter_protection>
   10add:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10ae0:	83 ec 0c             	sub    $0xc,%esp
   10ae3:	68 84 3a 01 00       	push   $0x13a84
   10ae8:	e8 44 fb ff ff       	call   10631 <list_get_size>
   10aed:	83 c4 10             	add    $0x10,%esp
   10af0:	83 f8 01             	cmp    $0x1,%eax
   10af3:	7e 29                	jle    10b1e <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10af5:	e8 66 ff ff ff       	call   10a60 <task_current>
   10afa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10afd:	83 ec 0c             	sub    $0xc,%esp
   10b00:	ff 75 f0             	push   -0x10(%ebp)
   10b03:	e8 df fe ff ff       	call   109e7 <task_set_unready>
   10b08:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10b0b:	83 ec 0c             	sub    $0xc,%esp
   10b0e:	ff 75 f0             	push   -0x10(%ebp)
   10b11:	e8 86 fe ff ff       	call   1099c <task_set_ready>
   10b16:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10b19:	e8 4c ff ff ff       	call   10a6a <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10b1e:	83 ec 0c             	sub    $0xc,%esp
   10b21:	ff 75 f4             	push   -0xc(%ebp)
   10b24:	e8 37 0c 00 00       	call   11760 <idt_leave_protection>
   10b29:	83 c4 10             	add    $0x10,%esp
    return 0;
   10b2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b31:	c9                   	leave  
   10b32:	c3                   	ret    

00010b33 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10b33:	55                   	push   %ebp
   10b34:	89 e5                	mov    %esp,%ebp
   10b36:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10b39:	83 ec 0c             	sub    $0xc,%esp
   10b3c:	68 9c 3a 01 00       	push   $0x13a9c
   10b41:	e8 18 fb ff ff       	call   1065e <list_get_first>
   10b46:	83 c4 10             	add    $0x10,%esp
   10b49:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10b4c:	eb 62                	jmp    10bb0 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10b4e:	83 ec 0c             	sub    $0xc,%esp
   10b51:	ff 75 f4             	push   -0xc(%ebp)
   10b54:	e8 2f fa ff ff       	call   10588 <list_node_next>
   10b59:	83 c4 10             	add    $0x10,%esp
   10b5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10b5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b63:	74 08                	je     10b6d <task_slice_end+0x3a>
   10b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b68:	83 e8 30             	sub    $0x30,%eax
   10b6b:	eb 05                	jmp    10b72 <task_slice_end+0x3f>
   10b6d:	b8 00 00 00 00       	mov    $0x0,%eax
   10b72:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10b75:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b78:	8b 40 0c             	mov    0xc(%eax),%eax
   10b7b:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b81:	89 50 0c             	mov    %edx,0xc(%eax)
   10b84:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b87:	8b 40 0c             	mov    0xc(%eax),%eax
   10b8a:	85 c0                	test   %eax,%eax
   10b8c:	75 1c                	jne    10baa <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10b8e:	83 ec 0c             	sub    $0xc,%esp
   10b91:	ff 75 e8             	push   -0x18(%ebp)
   10b94:	e8 01 01 00 00       	call   10c9a <task_set_wakeup>
   10b99:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10b9c:	83 ec 0c             	sub    $0xc,%esp
   10b9f:	ff 75 e8             	push   -0x18(%ebp)
   10ba2:	e8 f5 fd ff ff       	call   1099c <task_set_ready>
   10ba7:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10baa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10bb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10bb4:	75 98                	jne    10b4e <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10bb6:	e8 a5 fe ff ff       	call   10a60 <task_current>
   10bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10bbe:	81 7d f0 5c 3b 01 00 	cmpl   $0x13b5c,-0x10(%ebp)
   10bc5:	75 23                	jne    10bea <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10bc7:	83 ec 0c             	sub    $0xc,%esp
   10bca:	68 84 3a 01 00       	push   $0x13a84
   10bcf:	e8 28 fa ff ff       	call   105fc <list_is_empty>
   10bd4:	83 c4 10             	add    $0x10,%esp
   10bd7:	85 c0                	test   %eax,%eax
   10bd9:	75 60                	jne    10c3b <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10bdb:	c7 05 5c 3b 01 00 00 	movl   $0x0,0x13b5c
   10be2:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10be5:	e8 80 fe ff ff       	call   10a6a <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10bea:	81 7d f0 5c 3b 01 00 	cmpl   $0x13b5c,-0x10(%ebp)
   10bf1:	74 49                	je     10c3c <task_slice_end+0x109>
   10bf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10bf6:	8b 40 08             	mov    0x8(%eax),%eax
   10bf9:	8d 50 ff             	lea    -0x1(%eax),%edx
   10bfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10bff:	89 50 08             	mov    %edx,0x8(%eax)
   10c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c05:	8b 40 08             	mov    0x8(%eax),%eax
   10c08:	85 c0                	test   %eax,%eax
   10c0a:	75 30                	jne    10c3c <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c0f:	8b 50 04             	mov    0x4(%eax),%edx
   10c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c15:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10c18:	83 ec 0c             	sub    $0xc,%esp
   10c1b:	ff 75 f0             	push   -0x10(%ebp)
   10c1e:	e8 c4 fd ff ff       	call   109e7 <task_set_unready>
   10c23:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10c26:	83 ec 0c             	sub    $0xc,%esp
   10c29:	ff 75 f0             	push   -0x10(%ebp)
   10c2c:	e8 6b fd ff ff       	call   1099c <task_set_ready>
   10c31:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10c34:	e8 31 fe ff ff       	call   10a6a <task_switch>
   10c39:	eb 01                	jmp    10c3c <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10c3b:	90                   	nop
    }
}
   10c3c:	c9                   	leave  
   10c3d:	c3                   	ret    

00010c3e <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10c3e:	55                   	push   %ebp
   10c3f:	89 e5                	mov    %esp,%ebp
   10c41:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c44:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c48:	75 1c                	jne    10c66 <task_set_sleep+0x28>
   10c4a:	68 f1 2f 01 00       	push   $0x12ff1
   10c4f:	68 dc 30 01 00       	push   $0x130dc
   10c54:	68 66 01 00 00       	push   $0x166
   10c59:	68 04 30 01 00       	push   $0x13004
   10c5e:	e8 a7 14 00 00       	call   1210a <pannic>
   10c63:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10c66:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10c6a:	74 2b                	je     10c97 <task_set_sleep+0x59>

    task->sleep = slice;
   10c6c:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c72:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10c75:	8b 45 08             	mov    0x8(%ebp),%eax
   10c78:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c81:	83 c0 30             	add    $0x30,%eax
   10c84:	83 ec 08             	sub    $0x8,%esp
   10c87:	50                   	push   %eax
   10c88:	68 9c 3a 01 00       	push   $0x13a9c
   10c8d:	e8 c3 1d 00 00       	call   12a55 <list_insert_last>
   10c92:	83 c4 10             	add    $0x10,%esp
   10c95:	eb 01                	jmp    10c98 <task_set_sleep+0x5a>
    if (slice == 0) return;
   10c97:	90                   	nop
}
   10c98:	c9                   	leave  
   10c99:	c3                   	ret    

00010c9a <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10c9a:	55                   	push   %ebp
   10c9b:	89 e5                	mov    %esp,%ebp
   10c9d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10ca0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ca4:	75 1c                	jne    10cc2 <task_set_wakeup+0x28>
   10ca6:	68 f1 2f 01 00       	push   $0x12ff1
   10cab:	68 ec 30 01 00       	push   $0x130ec
   10cb0:	68 74 01 00 00       	push   $0x174
   10cb5:	68 04 30 01 00       	push   $0x13004
   10cba:	e8 4b 14 00 00       	call   1210a <pannic>
   10cbf:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc5:	83 c0 30             	add    $0x30,%eax
   10cc8:	83 ec 08             	sub    $0x8,%esp
   10ccb:	50                   	push   %eax
   10ccc:	68 9c 3a 01 00       	push   $0x13a9c
   10cd1:	e8 74 1f 00 00       	call   12c4a <list_remove>
   10cd6:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ce2:	90                   	nop
   10ce3:	c9                   	leave  
   10ce4:	c3                   	ret    

00010ce5 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10ce5:	55                   	push   %ebp
   10ce6:	89 e5                	mov    %esp,%ebp
   10ce8:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10ceb:	e8 58 0a 00 00       	call   11748 <idt_enter_protection>
   10cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10cf3:	e8 68 fd ff ff       	call   10a60 <task_current>
   10cf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10cfb:	83 ec 0c             	sub    $0xc,%esp
   10cfe:	ff 75 f0             	push   -0x10(%ebp)
   10d01:	e8 e1 fc ff ff       	call   109e7 <task_set_unready>
   10d06:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10d09:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0c:	83 c0 09             	add    $0x9,%eax
   10d0f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10d14:	f7 e2                	mul    %edx
   10d16:	89 d0                	mov    %edx,%eax
   10d18:	c1 e8 03             	shr    $0x3,%eax
   10d1b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10d1e:	83 ec 08             	sub    $0x8,%esp
   10d21:	ff 75 ec             	push   -0x14(%ebp)
   10d24:	ff 75 f0             	push   -0x10(%ebp)
   10d27:	e8 12 ff ff ff       	call   10c3e <task_set_sleep>
   10d2c:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10d2f:	e8 36 fd ff ff       	call   10a6a <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10d34:	83 ec 0c             	sub    $0xc,%esp
   10d37:	ff 75 f4             	push   -0xc(%ebp)
   10d3a:	e8 21 0a 00 00       	call   11760 <idt_leave_protection>
   10d3f:	83 c4 10             	add    $0x10,%esp
   10d42:	90                   	nop
   10d43:	c9                   	leave  
   10d44:	c3                   	ret    

00010d45 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10d45:	55                   	push   %ebp
   10d46:	89 e5                	mov    %esp,%ebp
   10d48:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4e:	c1 e8 10             	shr    $0x10,%eax
   10d51:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10d55:	8b 45 08             	mov    0x8(%ebp),%eax
   10d58:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10d5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5f:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10d62:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10d66:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10d6a:	90                   	nop
   10d6b:	c9                   	leave  
   10d6c:	c3                   	ret    

00010d6d <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10d6d:	55                   	push   %ebp
   10d6e:	89 e5                	mov    %esp,%ebp
   10d70:	83 ec 18             	sub    $0x18,%esp
   10d73:	8b 55 08             	mov    0x8(%ebp),%edx
   10d76:	8b 45 14             	mov    0x14(%ebp),%eax
   10d79:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10d7d:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10d81:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10d85:	66 c1 e8 03          	shr    $0x3,%ax
   10d89:	0f b7 c0             	movzwl %ax,%eax
   10d8c:	c1 e0 03             	shl    $0x3,%eax
   10d8f:	05 20 3e 01 00       	add    $0x13e20,%eax
   10d94:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10d97:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d9a:	89 c2                	mov    %eax,%edx
   10d9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d9f:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10da3:	8b 45 0c             	mov    0xc(%ebp),%eax
   10da6:	c1 e8 10             	shr    $0x10,%eax
   10da9:	89 c2                	mov    %eax,%edx
   10dab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dae:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10db1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10db4:	c1 e8 18             	shr    $0x18,%eax
   10db7:	89 c2                	mov    %eax,%edx
   10db9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dbc:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10dbf:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10dc6:	76 1d                	jbe    10de5 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10dc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dcb:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10dcf:	66 0d 00 80          	or     $0x8000,%ax
   10dd3:	89 c2                	mov    %eax,%edx
   10dd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dd8:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10ddc:	8b 45 10             	mov    0x10(%ebp),%eax
   10ddf:	c1 e8 0c             	shr    $0xc,%eax
   10de2:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10de5:	8b 45 10             	mov    0x10(%ebp),%eax
   10de8:	89 c2                	mov    %eax,%edx
   10dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ded:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10df3:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10df7:	89 c2                	mov    %eax,%edx
   10df9:	8b 45 10             	mov    0x10(%ebp),%eax
   10dfc:	c1 e8 08             	shr    $0x8,%eax
   10dff:	66 25 00 0f          	and    $0xf00,%ax
   10e03:	09 d0                	or     %edx,%eax
   10e05:	89 c2                	mov    %eax,%edx
   10e07:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e0a:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10e0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e11:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e15:	89 c2                	mov    %eax,%edx
   10e17:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10e1b:	80 e4 f0             	and    $0xf0,%ah
   10e1e:	09 d0                	or     %edx,%eax
   10e20:	89 c2                	mov    %eax,%edx
   10e22:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e25:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10e29:	90                   	nop
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10e32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10e39:	eb 1c                	jmp    10e57 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e3e:	c1 e0 03             	shl    $0x3,%eax
   10e41:	0f b7 c0             	movzwl %ax,%eax
   10e44:	6a 00                	push   $0x0
   10e46:	6a 00                	push   $0x0
   10e48:	6a 00                	push   $0x0
   10e4a:	50                   	push   %eax
   10e4b:	e8 1d ff ff ff       	call   10d6d <segment_desc_set>
   10e50:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10e53:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10e57:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10e5e:	7e db                	jle    10e3b <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10e60:	68 92 40 00 00       	push   $0x4092
   10e65:	6a ff                	push   $0xffffffff
   10e67:	6a 00                	push   $0x0
   10e69:	6a 10                	push   $0x10
   10e6b:	e8 fd fe ff ff       	call   10d6d <segment_desc_set>
   10e70:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10e73:	c7 05 28 3e 02 00 01 	movl   $0x1,0x23e28
   10e7a:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10e7d:	68 9a 40 00 00       	push   $0x409a
   10e82:	6a ff                	push   $0xffffffff
   10e84:	6a 00                	push   $0x0
   10e86:	6a 08                	push   $0x8
   10e88:	e8 e0 fe ff ff       	call   10d6d <segment_desc_set>
   10e8d:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10e90:	c7 05 24 3e 02 00 01 	movl   $0x1,0x23e24
   10e97:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10e9a:	b8 20 3e 01 00       	mov    $0x13e20,%eax
   10e9f:	68 00 00 01 00       	push   $0x10000
   10ea4:	50                   	push   %eax
   10ea5:	e8 9b fe ff ff       	call   10d45 <lgdt>
   10eaa:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10ead:	83 ec 0c             	sub    $0xc,%esp
   10eb0:	68 20 be 02 00       	push   $0x2be20
   10eb5:	e8 3b 0b 00 00       	call   119f5 <mutex_init>
   10eba:	83 c4 10             	add    $0x10,%esp
}
   10ebd:	90                   	nop
   10ebe:	c9                   	leave  
   10ebf:	c3                   	ret    

00010ec0 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10ec0:	55                   	push   %ebp
   10ec1:	89 e5                	mov    %esp,%ebp
   10ec3:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10ec6:	83 ec 0c             	sub    $0xc,%esp
   10ec9:	68 20 be 02 00       	push   $0x2be20
   10ece:	e8 6f 0b 00 00       	call   11a42 <mutex_lock>
   10ed3:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10ed6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10edd:	eb 38                	jmp    10f17 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ee2:	8b 04 85 20 3e 02 00 	mov    0x23e20(,%eax,4),%eax
   10ee9:	85 c0                	test   %eax,%eax
   10eeb:	75 26                	jne    10f13 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ef0:	c7 04 85 20 3e 02 00 	movl   $0x1,0x23e20(,%eax,4)
   10ef7:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10efb:	83 ec 0c             	sub    $0xc,%esp
   10efe:	68 20 be 02 00       	push   $0x2be20
   10f03:	e8 cb 0b 00 00       	call   11ad3 <mutex_unlock>
   10f08:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f0e:	c1 e0 03             	shl    $0x3,%eax
   10f11:	eb 22                	jmp    10f35 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10f13:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f17:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10f1e:	7e bf                	jle    10edf <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10f20:	83 ec 0c             	sub    $0xc,%esp
   10f23:	68 20 be 02 00       	push   $0x2be20
   10f28:	e8 a6 0b 00 00       	call   11ad3 <mutex_unlock>
   10f2d:	83 c4 10             	add    $0x10,%esp
    return -1;
   10f30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10f35:	c9                   	leave  
   10f36:	c3                   	ret    

00010f37 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10f37:	55                   	push   %ebp
   10f38:	89 e5                	mov    %esp,%ebp
   10f3a:	fa                   	cli    
   10f3b:	90                   	nop
   10f3c:	5d                   	pop    %ebp
   10f3d:	c3                   	ret    

00010f3e <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10f3e:	55                   	push   %ebp
   10f3f:	89 e5                	mov    %esp,%ebp
   10f41:	fb                   	sti    
   10f42:	90                   	nop
   10f43:	5d                   	pop    %ebp
   10f44:	c3                   	ret    

00010f45 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10f45:	55                   	push   %ebp
   10f46:	89 e5                	mov    %esp,%ebp
   10f48:	f4                   	hlt    
   10f49:	90                   	nop
   10f4a:	5d                   	pop    %ebp
   10f4b:	c3                   	ret    

00010f4c <inb>:
static inline uint8_t inb(uint16_t port) {
   10f4c:	55                   	push   %ebp
   10f4d:	89 e5                	mov    %esp,%ebp
   10f4f:	83 ec 14             	sub    $0x14,%esp
   10f52:	8b 45 08             	mov    0x8(%ebp),%eax
   10f55:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10f59:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10f5d:	89 c2                	mov    %eax,%edx
   10f5f:	ec                   	in     (%dx),%al
   10f60:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10f63:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10f67:	c9                   	leave  
   10f68:	c3                   	ret    

00010f69 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10f69:	55                   	push   %ebp
   10f6a:	89 e5                	mov    %esp,%ebp
   10f6c:	83 ec 08             	sub    $0x8,%esp
   10f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f72:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f75:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10f79:	89 d0                	mov    %edx,%eax
   10f7b:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10f7e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f82:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10f86:	ee                   	out    %al,(%dx)
}
   10f87:	90                   	nop
   10f88:	c9                   	leave  
   10f89:	c3                   	ret    

00010f8a <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10f8a:	55                   	push   %ebp
   10f8b:	89 e5                	mov    %esp,%ebp
   10f8d:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10f90:	8b 45 08             	mov    0x8(%ebp),%eax
   10f93:	c1 e8 10             	shr    $0x10,%eax
   10f96:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10f9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fa4:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10fa7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10fab:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10faf:	90                   	nop
   10fb0:	c9                   	leave  
   10fb1:	c3                   	ret    

00010fb2 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10fb2:	55                   	push   %ebp
   10fb3:	89 e5                	mov    %esp,%ebp
   10fb5:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10fb8:	9c                   	pushf  
   10fb9:	58                   	pop    %eax
   10fba:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10fbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10fc0:	c9                   	leave  
   10fc1:	c3                   	ret    

00010fc2 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10fc2:	55                   	push   %ebp
   10fc3:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10fc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc8:	50                   	push   %eax
   10fc9:	9d                   	popf   
}
   10fca:	90                   	nop
   10fcb:	5d                   	pop    %ebp
   10fcc:	c3                   	ret    

00010fcd <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10fcd:	55                   	push   %ebp
   10fce:	89 e5                	mov    %esp,%ebp
   10fd0:	57                   	push   %edi
   10fd1:	56                   	push   %esi
   10fd2:	53                   	push   %ebx
   10fd3:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10fd6:	83 ec 0c             	sub    $0xc,%esp
   10fd9:	68 fc 30 01 00       	push   $0x130fc
   10fde:	e8 f6 1d 00 00       	call   12dd9 <log_printf>
   10fe3:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10fe6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe9:	8b 50 34             	mov    0x34(%eax),%edx
   10fec:	8b 45 08             	mov    0x8(%ebp),%eax
   10fef:	8b 40 30             	mov    0x30(%eax),%eax
   10ff2:	83 ec 04             	sub    $0x4,%esp
   10ff5:	52                   	push   %edx
   10ff6:	50                   	push   %eax
   10ff7:	68 3a 31 01 00       	push   $0x1313a
   10ffc:	e8 d8 1d 00 00       	call   12dd9 <log_printf>
   11001:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	8b 38                	mov    (%eax),%edi
   11009:	8b 45 08             	mov    0x8(%ebp),%eax
   1100c:	8b 70 04             	mov    0x4(%eax),%esi
   1100f:	8b 45 08             	mov    0x8(%ebp),%eax
   11012:	8b 58 08             	mov    0x8(%eax),%ebx
   11015:	8b 45 08             	mov    0x8(%ebp),%eax
   11018:	8b 48 0c             	mov    0xc(%eax),%ecx
   1101b:	8b 45 08             	mov    0x8(%ebp),%eax
   1101e:	8b 50 0c             	mov    0xc(%eax),%edx
   11021:	8b 45 08             	mov    0x8(%ebp),%eax
   11024:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11027:	83 ec 04             	sub    $0x4,%esp
   1102a:	57                   	push   %edi
   1102b:	56                   	push   %esi
   1102c:	53                   	push   %ebx
   1102d:	51                   	push   %ecx
   1102e:	52                   	push   %edx
   1102f:	50                   	push   %eax
   11030:	68 54 31 01 00       	push   $0x13154
   11035:	e8 9f 1d 00 00       	call   12dd9 <log_printf>
   1103a:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   1103d:	8b 45 08             	mov    0x8(%ebp),%eax
   11040:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11043:	8b 45 08             	mov    0x8(%ebp),%eax
   11046:	8b 40 18             	mov    0x18(%eax),%eax
   11049:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1104c:	8b 45 08             	mov    0x8(%ebp),%eax
   1104f:	8b 58 10             	mov    0x10(%eax),%ebx
   11052:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   11055:	8b 45 08             	mov    0x8(%ebp),%eax
   11058:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   1105b:	8b 45 08             	mov    0x8(%ebp),%eax
   1105e:	8b 70 24             	mov    0x24(%eax),%esi
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	8b 58 28             	mov    0x28(%eax),%ebx
   11067:	8b 45 08             	mov    0x8(%ebp),%eax
   1106a:	8b 50 20             	mov    0x20(%eax),%edx
   1106d:	8b 45 08             	mov    0x8(%ebp),%eax
   11070:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11073:	83 ec 0c             	sub    $0xc,%esp
   11076:	51                   	push   %ecx
   11077:	ff 75 e4             	push   -0x1c(%ebp)
   1107a:	ff 75 e0             	push   -0x20(%ebp)
   1107d:	57                   	push   %edi
   1107e:	56                   	push   %esi
   1107f:	53                   	push   %ebx
   11080:	52                   	push   %edx
   11081:	50                   	push   %eax
   11082:	68 84 31 01 00       	push   $0x13184
   11087:	e8 4d 1d 00 00       	call   12dd9 <log_printf>
   1108c:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   1108f:	8b 45 08             	mov    0x8(%ebp),%eax
   11092:	8b 50 40             	mov    0x40(%eax),%edx
   11095:	8b 45 08             	mov    0x8(%ebp),%eax
   11098:	8b 40 38             	mov    0x38(%eax),%eax
   1109b:	83 ec 04             	sub    $0x4,%esp
   1109e:	52                   	push   %edx
   1109f:	50                   	push   %eax
   110a0:	68 dc 31 01 00       	push   $0x131dc
   110a5:	e8 2f 1d 00 00       	call   12dd9 <log_printf>
   110aa:	83 c4 10             	add    $0x10,%esp
}
   110ad:	90                   	nop
   110ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
   110b1:	5b                   	pop    %ebx
   110b2:	5e                   	pop    %esi
   110b3:	5f                   	pop    %edi
   110b4:	5d                   	pop    %ebp
   110b5:	c3                   	ret    

000110b6 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   110b6:	55                   	push   %ebp
   110b7:	89 e5                	mov    %esp,%ebp
   110b9:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   110bc:	83 ec 0c             	sub    $0xc,%esp
   110bf:	68 f8 31 01 00       	push   $0x131f8
   110c4:	e8 10 1d 00 00       	call   12dd9 <log_printf>
   110c9:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   110cc:	83 ec 08             	sub    $0x8,%esp
   110cf:	ff 75 0c             	push   0xc(%ebp)
   110d2:	68 2c 32 01 00       	push   $0x1322c
   110d7:	e8 fd 1c 00 00       	call   12dd9 <log_printf>
   110dc:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   110df:	83 ec 0c             	sub    $0xc,%esp
   110e2:	ff 75 08             	push   0x8(%ebp)
   110e5:	e8 e3 fe ff ff       	call   10fcd <print_exception_fram>
   110ea:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   110ed:	e8 53 fe ff ff       	call   10f45 <hlt>
   110f2:	eb f9                	jmp    110ed <do_default_handler+0x37>

000110f4 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   110f4:	55                   	push   %ebp
   110f5:	89 e5                	mov    %esp,%ebp
   110f7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   110fa:	83 ec 08             	sub    $0x8,%esp
   110fd:	68 46 32 01 00       	push   $0x13246
   11102:	ff 75 08             	push   0x8(%ebp)
   11105:	e8 ac ff ff ff       	call   110b6 <do_default_handler>
   1110a:	83 c4 10             	add    $0x10,%esp
}
   1110d:	90                   	nop
   1110e:	c9                   	leave  
   1110f:	c3                   	ret    

00011110 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11110:	55                   	push   %ebp
   11111:	89 e5                	mov    %esp,%ebp
   11113:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11116:	83 ec 08             	sub    $0x8,%esp
   11119:	68 58 32 01 00       	push   $0x13258
   1111e:	ff 75 08             	push   0x8(%ebp)
   11121:	e8 90 ff ff ff       	call   110b6 <do_default_handler>
   11126:	83 c4 10             	add    $0x10,%esp
}
   11129:	90                   	nop
   1112a:	c9                   	leave  
   1112b:	c3                   	ret    

0001112c <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   1112c:	55                   	push   %ebp
   1112d:	89 e5                	mov    %esp,%ebp
   1112f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11132:	83 ec 08             	sub    $0x8,%esp
   11135:	68 6a 32 01 00       	push   $0x1326a
   1113a:	ff 75 08             	push   0x8(%ebp)
   1113d:	e8 74 ff ff ff       	call   110b6 <do_default_handler>
   11142:	83 c4 10             	add    $0x10,%esp
}
   11145:	90                   	nop
   11146:	c9                   	leave  
   11147:	c3                   	ret    

00011148 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11148:	55                   	push   %ebp
   11149:	89 e5                	mov    %esp,%ebp
   1114b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1114e:	83 ec 08             	sub    $0x8,%esp
   11151:	68 7a 32 01 00       	push   $0x1327a
   11156:	ff 75 08             	push   0x8(%ebp)
   11159:	e8 58 ff ff ff       	call   110b6 <do_default_handler>
   1115e:	83 c4 10             	add    $0x10,%esp
}
   11161:	90                   	nop
   11162:	c9                   	leave  
   11163:	c3                   	ret    

00011164 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11164:	55                   	push   %ebp
   11165:	89 e5                	mov    %esp,%ebp
   11167:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   1116a:	83 ec 08             	sub    $0x8,%esp
   1116d:	68 88 32 01 00       	push   $0x13288
   11172:	ff 75 08             	push   0x8(%ebp)
   11175:	e8 3c ff ff ff       	call   110b6 <do_default_handler>
   1117a:	83 c4 10             	add    $0x10,%esp
}
   1117d:	90                   	nop
   1117e:	c9                   	leave  
   1117f:	c3                   	ret    

00011180 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11180:	55                   	push   %ebp
   11181:	89 e5                	mov    %esp,%ebp
   11183:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11186:	83 ec 08             	sub    $0x8,%esp
   11189:	68 9d 32 01 00       	push   $0x1329d
   1118e:	ff 75 08             	push   0x8(%ebp)
   11191:	e8 20 ff ff ff       	call   110b6 <do_default_handler>
   11196:	83 c4 10             	add    $0x10,%esp
}
   11199:	90                   	nop
   1119a:	c9                   	leave  
   1119b:	c3                   	ret    

0001119c <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   1119c:	55                   	push   %ebp
   1119d:	89 e5                	mov    %esp,%ebp
   1119f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   111a2:	83 ec 08             	sub    $0x8,%esp
   111a5:	68 b0 32 01 00       	push   $0x132b0
   111aa:	ff 75 08             	push   0x8(%ebp)
   111ad:	e8 04 ff ff ff       	call   110b6 <do_default_handler>
   111b2:	83 c4 10             	add    $0x10,%esp
}
   111b5:	90                   	nop
   111b6:	c9                   	leave  
   111b7:	c3                   	ret    

000111b8 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   111b8:	55                   	push   %ebp
   111b9:	89 e5                	mov    %esp,%ebp
   111bb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   111be:	83 ec 08             	sub    $0x8,%esp
   111c1:	68 c6 32 01 00       	push   $0x132c6
   111c6:	ff 75 08             	push   0x8(%ebp)
   111c9:	e8 e8 fe ff ff       	call   110b6 <do_default_handler>
   111ce:	83 c4 10             	add    $0x10,%esp
}
   111d1:	90                   	nop
   111d2:	c9                   	leave  
   111d3:	c3                   	ret    

000111d4 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   111d4:	55                   	push   %ebp
   111d5:	89 e5                	mov    %esp,%ebp
   111d7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   111da:	83 ec 08             	sub    $0x8,%esp
   111dd:	68 df 32 01 00       	push   $0x132df
   111e2:	ff 75 08             	push   0x8(%ebp)
   111e5:	e8 cc fe ff ff       	call   110b6 <do_default_handler>
   111ea:	83 c4 10             	add    $0x10,%esp
}
   111ed:	90                   	nop
   111ee:	c9                   	leave  
   111ef:	c3                   	ret    

000111f0 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   111f0:	55                   	push   %ebp
   111f1:	89 e5                	mov    %esp,%ebp
   111f3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   111f6:	83 ec 08             	sub    $0x8,%esp
   111f9:	68 fc 32 01 00       	push   $0x132fc
   111fe:	ff 75 08             	push   0x8(%ebp)
   11201:	e8 b0 fe ff ff       	call   110b6 <do_default_handler>
   11206:	83 c4 10             	add    $0x10,%esp
}
   11209:	90                   	nop
   1120a:	c9                   	leave  
   1120b:	c3                   	ret    

0001120c <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   1120c:	55                   	push   %ebp
   1120d:	89 e5                	mov    %esp,%ebp
   1120f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11212:	83 ec 08             	sub    $0x8,%esp
   11215:	68 13 33 01 00       	push   $0x13313
   1121a:	ff 75 08             	push   0x8(%ebp)
   1121d:	e8 94 fe ff ff       	call   110b6 <do_default_handler>
   11222:	83 c4 10             	add    $0x10,%esp
}
   11225:	90                   	nop
   11226:	c9                   	leave  
   11227:	c3                   	ret    

00011228 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11228:	55                   	push   %ebp
   11229:	89 e5                	mov    %esp,%ebp
   1122b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   1122e:	83 ec 08             	sub    $0x8,%esp
   11231:	68 29 33 01 00       	push   $0x13329
   11236:	ff 75 08             	push   0x8(%ebp)
   11239:	e8 78 fe ff ff       	call   110b6 <do_default_handler>
   1123e:	83 c4 10             	add    $0x10,%esp
}
   11241:	90                   	nop
   11242:	c9                   	leave  
   11243:	c3                   	ret    

00011244 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11244:	55                   	push   %ebp
   11245:	89 e5                	mov    %esp,%ebp
   11247:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1124a:	83 ec 08             	sub    $0x8,%esp
   1124d:	68 47 33 01 00       	push   $0x13347
   11252:	ff 75 08             	push   0x8(%ebp)
   11255:	e8 5c fe ff ff       	call   110b6 <do_default_handler>
   1125a:	83 c4 10             	add    $0x10,%esp
}
   1125d:	90                   	nop
   1125e:	c9                   	leave  
   1125f:	c3                   	ret    

00011260 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11260:	55                   	push   %ebp
   11261:	89 e5                	mov    %esp,%ebp
   11263:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   11266:	83 ec 08             	sub    $0x8,%esp
   11269:	68 65 33 01 00       	push   $0x13365
   1126e:	ff 75 08             	push   0x8(%ebp)
   11271:	e8 40 fe ff ff       	call   110b6 <do_default_handler>
   11276:	83 c4 10             	add    $0x10,%esp
}
   11279:	90                   	nop
   1127a:	c9                   	leave  
   1127b:	c3                   	ret    

0001127c <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   1127c:	55                   	push   %ebp
   1127d:	89 e5                	mov    %esp,%ebp
   1127f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   11282:	83 ec 08             	sub    $0x8,%esp
   11285:	68 82 33 01 00       	push   $0x13382
   1128a:	ff 75 08             	push   0x8(%ebp)
   1128d:	e8 24 fe ff ff       	call   110b6 <do_default_handler>
   11292:	83 c4 10             	add    $0x10,%esp
}
   11295:	90                   	nop
   11296:	c9                   	leave  
   11297:	c3                   	ret    

00011298 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   11298:	55                   	push   %ebp
   11299:	89 e5                	mov    %esp,%ebp
   1129b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   1129e:	83 ec 08             	sub    $0x8,%esp
   112a1:	68 97 33 01 00       	push   $0x13397
   112a6:	ff 75 08             	push   0x8(%ebp)
   112a9:	e8 08 fe ff ff       	call   110b6 <do_default_handler>
   112ae:	83 c4 10             	add    $0x10,%esp
}
   112b1:	90                   	nop
   112b2:	c9                   	leave  
   112b3:	c3                   	ret    

000112b4 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   112b4:	55                   	push   %ebp
   112b5:	89 e5                	mov    %esp,%ebp
   112b7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   112ba:	83 ec 08             	sub    $0x8,%esp
   112bd:	68 ab 33 01 00       	push   $0x133ab
   112c2:	ff 75 08             	push   0x8(%ebp)
   112c5:	e8 ec fd ff ff       	call   110b6 <do_default_handler>
   112ca:	83 c4 10             	add    $0x10,%esp
}
   112cd:	90                   	nop
   112ce:	c9                   	leave  
   112cf:	c3                   	ret    

000112d0 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   112d0:	55                   	push   %ebp
   112d1:	89 e5                	mov    %esp,%ebp
   112d3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   112d6:	83 ec 08             	sub    $0x8,%esp
   112d9:	68 c5 33 01 00       	push   $0x133c5
   112de:	ff 75 08             	push   0x8(%ebp)
   112e1:	e8 d0 fd ff ff       	call   110b6 <do_default_handler>
   112e6:	83 c4 10             	add    $0x10,%esp
}
   112e9:	90                   	nop
   112ea:	c9                   	leave  
   112eb:	c3                   	ret    

000112ec <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   112ec:	55                   	push   %ebp
   112ed:	89 e5                	mov    %esp,%ebp
   112ef:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   112f2:	83 ec 08             	sub    $0x8,%esp
   112f5:	68 dd 33 01 00       	push   $0x133dd
   112fa:	ff 75 08             	push   0x8(%ebp)
   112fd:	e8 b4 fd ff ff       	call   110b6 <do_default_handler>
   11302:	83 c4 10             	add    $0x10,%esp
}
   11305:	90                   	nop
   11306:	c9                   	leave  
   11307:	c3                   	ret    

00011308 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11308:	55                   	push   %ebp
   11309:	89 e5                	mov    %esp,%ebp
   1130b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   1130e:	83 ec 08             	sub    $0x8,%esp
   11311:	68 f5 33 01 00       	push   $0x133f5
   11316:	ff 75 08             	push   0x8(%ebp)
   11319:	e8 98 fd ff ff       	call   110b6 <do_default_handler>
   1131e:	83 c4 10             	add    $0x10,%esp
}
   11321:	90                   	nop
   11322:	c9                   	leave  
   11323:	c3                   	ret    

00011324 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11324:	55                   	push   %ebp
   11325:	89 e5                	mov    %esp,%ebp
   11327:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1132a:	83 ec 08             	sub    $0x8,%esp
   1132d:	68 11 34 01 00       	push   $0x13411
   11332:	ff 75 08             	push   0x8(%ebp)
   11335:	e8 7c fd ff ff       	call   110b6 <do_default_handler>
   1133a:	83 c4 10             	add    $0x10,%esp
}
   1133d:	90                   	nop
   1133e:	c9                   	leave  
   1133f:	c3                   	ret    

00011340 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11340:	55                   	push   %ebp
   11341:	89 e5                	mov    %esp,%ebp
   11343:	83 ec 08             	sub    $0x8,%esp
   11346:	8b 55 0c             	mov    0xc(%ebp),%edx
   11349:	8b 45 14             	mov    0x14(%ebp),%eax
   1134c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11350:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11354:	8b 45 10             	mov    0x10(%ebp),%eax
   11357:	89 c2                	mov    %eax,%edx
   11359:	8b 45 08             	mov    0x8(%ebp),%eax
   1135c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1135f:	8b 45 10             	mov    0x10(%ebp),%eax
   11362:	c1 e8 10             	shr    $0x10,%eax
   11365:	89 c2                	mov    %eax,%edx
   11367:	8b 45 08             	mov    0x8(%ebp),%eax
   1136a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1136e:	8b 45 08             	mov    0x8(%ebp),%eax
   11371:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11375:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11379:	8b 45 08             	mov    0x8(%ebp),%eax
   1137c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11380:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11384:	90                   	nop
   11385:	c9                   	leave  
   11386:	c3                   	ret    

00011387 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11387:	55                   	push   %ebp
   11388:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   1138a:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11391:	7f 06                	jg     11399 <idt_install+0x12>
   11393:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11397:	79 07                	jns    113a0 <idt_install+0x19>
   11399:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1139e:	eb 25                	jmp    113c5 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   113a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a3:	8b 55 08             	mov    0x8(%ebp),%edx
   113a6:	c1 e2 03             	shl    $0x3,%edx
   113a9:	81 c2 40 be 02 00    	add    $0x2be40,%edx
   113af:	68 00 8e 00 00       	push   $0x8e00
   113b4:	50                   	push   %eax
   113b5:	6a 08                	push   $0x8
   113b7:	52                   	push   %edx
   113b8:	e8 83 ff ff ff       	call   11340 <gate_desc_set>
   113bd:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   113c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113c5:	c9                   	leave  
   113c6:	c3                   	ret    

000113c7 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   113c7:	55                   	push   %ebp
   113c8:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   113ca:	6a 11                	push   $0x11
   113cc:	6a 20                	push   $0x20
   113ce:	e8 96 fb ff ff       	call   10f69 <outb>
   113d3:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   113d6:	6a 20                	push   $0x20
   113d8:	6a 21                	push   $0x21
   113da:	e8 8a fb ff ff       	call   10f69 <outb>
   113df:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   113e2:	6a 04                	push   $0x4
   113e4:	6a 21                	push   $0x21
   113e6:	e8 7e fb ff ff       	call   10f69 <outb>
   113eb:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   113ee:	6a 01                	push   $0x1
   113f0:	6a 21                	push   $0x21
   113f2:	e8 72 fb ff ff       	call   10f69 <outb>
   113f7:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   113fa:	6a 11                	push   $0x11
   113fc:	68 a0 00 00 00       	push   $0xa0
   11401:	e8 63 fb ff ff       	call   10f69 <outb>
   11406:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11409:	6a 28                	push   $0x28
   1140b:	68 a1 00 00 00       	push   $0xa1
   11410:	e8 54 fb ff ff       	call   10f69 <outb>
   11415:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11418:	6a 02                	push   $0x2
   1141a:	68 a1 00 00 00       	push   $0xa1
   1141f:	e8 45 fb ff ff       	call   10f69 <outb>
   11424:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11427:	6a 01                	push   $0x1
   11429:	68 a1 00 00 00       	push   $0xa1
   1142e:	e8 36 fb ff ff       	call   10f69 <outb>
   11433:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11436:	68 fb 00 00 00       	push   $0xfb
   1143b:	6a 21                	push   $0x21
   1143d:	e8 27 fb ff ff       	call   10f69 <outb>
   11442:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11445:	68 ff 00 00 00       	push   $0xff
   1144a:	68 a1 00 00 00       	push   $0xa1
   1144f:	e8 15 fb ff ff       	call   10f69 <outb>
   11454:	83 c4 08             	add    $0x8,%esp


}
   11457:	90                   	nop
   11458:	c9                   	leave  
   11459:	c3                   	ret    

0001145a <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1145a:	55                   	push   %ebp
   1145b:	89 e5                	mov    %esp,%ebp
   1145d:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11460:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11467:	eb 14                	jmp    1147d <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11469:	68 2a 00 01 00       	push   $0x1002a
   1146e:	ff 75 fc             	push   -0x4(%ebp)
   11471:	e8 11 ff ff ff       	call   11387 <idt_install>
   11476:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11479:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1147d:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11484:	7e e3                	jle    11469 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11486:	68 47 00 01 00       	push   $0x10047
   1148b:	6a 00                	push   $0x0
   1148d:	e8 f5 fe ff ff       	call   11387 <idt_install>
   11492:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11495:	68 64 00 01 00       	push   $0x10064
   1149a:	6a 01                	push   $0x1
   1149c:	e8 e6 fe ff ff       	call   11387 <idt_install>
   114a1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   114a4:	68 81 00 01 00       	push   $0x10081
   114a9:	6a 02                	push   $0x2
   114ab:	e8 d7 fe ff ff       	call   11387 <idt_install>
   114b0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   114b3:	68 9e 00 01 00       	push   $0x1009e
   114b8:	6a 03                	push   $0x3
   114ba:	e8 c8 fe ff ff       	call   11387 <idt_install>
   114bf:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   114c2:	68 bb 00 01 00       	push   $0x100bb
   114c7:	6a 04                	push   $0x4
   114c9:	e8 b9 fe ff ff       	call   11387 <idt_install>
   114ce:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   114d1:	68 d8 00 01 00       	push   $0x100d8
   114d6:	6a 05                	push   $0x5
   114d8:	e8 aa fe ff ff       	call   11387 <idt_install>
   114dd:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   114e0:	68 f5 00 01 00       	push   $0x100f5
   114e5:	6a 06                	push   $0x6
   114e7:	e8 9b fe ff ff       	call   11387 <idt_install>
   114ec:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   114ef:	68 12 01 01 00       	push   $0x10112
   114f4:	6a 07                	push   $0x7
   114f6:	e8 8c fe ff ff       	call   11387 <idt_install>
   114fb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   114fe:	68 2f 01 01 00       	push   $0x1012f
   11503:	6a 08                	push   $0x8
   11505:	e8 7d fe ff ff       	call   11387 <idt_install>
   1150a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   1150d:	68 4a 01 01 00       	push   $0x1014a
   11512:	6a 0a                	push   $0xa
   11514:	e8 6e fe ff ff       	call   11387 <idt_install>
   11519:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1151c:	68 65 01 01 00       	push   $0x10165
   11521:	6a 0b                	push   $0xb
   11523:	e8 5f fe ff ff       	call   11387 <idt_install>
   11528:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1152b:	68 80 01 01 00       	push   $0x10180
   11530:	6a 0c                	push   $0xc
   11532:	e8 50 fe ff ff       	call   11387 <idt_install>
   11537:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1153a:	68 9b 01 01 00       	push   $0x1019b
   1153f:	6a 0d                	push   $0xd
   11541:	e8 41 fe ff ff       	call   11387 <idt_install>
   11546:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11549:	68 b6 01 01 00       	push   $0x101b6
   1154e:	6a 0e                	push   $0xe
   11550:	e8 32 fe ff ff       	call   11387 <idt_install>
   11555:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11558:	68 d1 01 01 00       	push   $0x101d1
   1155d:	6a 10                	push   $0x10
   1155f:	e8 23 fe ff ff       	call   11387 <idt_install>
   11564:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11567:	68 ee 01 01 00       	push   $0x101ee
   1156c:	6a 11                	push   $0x11
   1156e:	e8 14 fe ff ff       	call   11387 <idt_install>
   11573:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11576:	68 09 02 01 00       	push   $0x10209
   1157b:	6a 12                	push   $0x12
   1157d:	e8 05 fe ff ff       	call   11387 <idt_install>
   11582:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11585:	68 26 02 01 00       	push   $0x10226
   1158a:	6a 13                	push   $0x13
   1158c:	e8 f6 fd ff ff       	call   11387 <idt_install>
   11591:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11594:	68 43 02 01 00       	push   $0x10243
   11599:	6a 14                	push   $0x14
   1159b:	e8 e7 fd ff ff       	call   11387 <idt_install>
   115a0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   115a3:	68 60 02 01 00       	push   $0x10260
   115a8:	6a 15                	push   $0x15
   115aa:	e8 d8 fd ff ff       	call   11387 <idt_install>
   115af:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   115b2:	b8 40 be 02 00       	mov    $0x2be40,%eax
   115b7:	68 00 08 00 00       	push   $0x800
   115bc:	50                   	push   %eax
   115bd:	e8 c8 f9 ff ff       	call   10f8a <lidt>
   115c2:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   115c5:	e8 fd fd ff ff       	call   113c7 <init_pic>
}
   115ca:	90                   	nop
   115cb:	c9                   	leave  
   115cc:	c3                   	ret    

000115cd <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   115cd:	55                   	push   %ebp
   115ce:	89 e5                	mov    %esp,%ebp
   115d0:	53                   	push   %ebx
   115d1:	83 ec 14             	sub    $0x14,%esp
   115d4:	8b 45 08             	mov    0x8(%ebp),%eax
   115d7:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   115da:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   115de:	76 7f                	jbe    1165f <idt_enable+0x92>
   115e0:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   115e4:	77 79                	ja     1165f <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   115e6:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   115ea:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   115ee:	77 33                	ja     11623 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   115f0:	6a 21                	push   $0x21
   115f2:	e8 55 f9 ff ff       	call   10f4c <inb>
   115f7:	83 c4 04             	add    $0x4,%esp
   115fa:	89 c3                	mov    %eax,%ebx
   115fc:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11600:	ba 01 00 00 00       	mov    $0x1,%edx
   11605:	89 c1                	mov    %eax,%ecx
   11607:	d3 e2                	shl    %cl,%edx
   11609:	89 d0                	mov    %edx,%eax
   1160b:	f7 d0                	not    %eax
   1160d:	21 d8                	and    %ebx,%eax
   1160f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11612:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11616:	50                   	push   %eax
   11617:	6a 21                	push   $0x21
   11619:	e8 4b f9 ff ff       	call   10f69 <outb>
   1161e:	83 c4 08             	add    $0x8,%esp
   11621:	eb 3d                	jmp    11660 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11623:	68 a1 00 00 00       	push   $0xa1
   11628:	e8 1f f9 ff ff       	call   10f4c <inb>
   1162d:	83 c4 04             	add    $0x4,%esp
   11630:	89 c3                	mov    %eax,%ebx
   11632:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11636:	83 e8 08             	sub    $0x8,%eax
   11639:	ba 01 00 00 00       	mov    $0x1,%edx
   1163e:	89 c1                	mov    %eax,%ecx
   11640:	d3 e2                	shl    %cl,%edx
   11642:	89 d0                	mov    %edx,%eax
   11644:	f7 d0                	not    %eax
   11646:	21 d8                	and    %ebx,%eax
   11648:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1164b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1164f:	50                   	push   %eax
   11650:	68 a1 00 00 00       	push   $0xa1
   11655:	e8 0f f9 ff ff       	call   10f69 <outb>
   1165a:	83 c4 08             	add    $0x8,%esp
   1165d:	eb 01                	jmp    11660 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1165f:	90                   	nop
  }
  
}
   11660:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11663:	c9                   	leave  
   11664:	c3                   	ret    

00011665 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11665:	55                   	push   %ebp
   11666:	89 e5                	mov    %esp,%ebp
   11668:	53                   	push   %ebx
   11669:	83 ec 14             	sub    $0x14,%esp
   1166c:	8b 45 08             	mov    0x8(%ebp),%eax
   1166f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11672:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11676:	76 7b                	jbe    116f3 <idt_disable+0x8e>
   11678:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   1167c:	77 75                	ja     116f3 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1167e:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11682:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11686:	77 31                	ja     116b9 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11688:	6a 21                	push   $0x21
   1168a:	e8 bd f8 ff ff       	call   10f4c <inb>
   1168f:	83 c4 04             	add    $0x4,%esp
   11692:	89 c3                	mov    %eax,%ebx
   11694:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11698:	ba 01 00 00 00       	mov    $0x1,%edx
   1169d:	89 c1                	mov    %eax,%ecx
   1169f:	d3 e2                	shl    %cl,%edx
   116a1:	89 d0                	mov    %edx,%eax
   116a3:	09 d8                	or     %ebx,%eax
   116a5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   116a8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   116ac:	50                   	push   %eax
   116ad:	6a 21                	push   $0x21
   116af:	e8 b5 f8 ff ff       	call   10f69 <outb>
   116b4:	83 c4 08             	add    $0x8,%esp
   116b7:	eb 3b                	jmp    116f4 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   116b9:	68 a1 00 00 00       	push   $0xa1
   116be:	e8 89 f8 ff ff       	call   10f4c <inb>
   116c3:	83 c4 04             	add    $0x4,%esp
   116c6:	89 c3                	mov    %eax,%ebx
   116c8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   116cc:	83 e8 08             	sub    $0x8,%eax
   116cf:	ba 01 00 00 00       	mov    $0x1,%edx
   116d4:	89 c1                	mov    %eax,%ecx
   116d6:	d3 e2                	shl    %cl,%edx
   116d8:	89 d0                	mov    %edx,%eax
   116da:	09 d8                	or     %ebx,%eax
   116dc:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   116df:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   116e3:	50                   	push   %eax
   116e4:	68 a1 00 00 00       	push   $0xa1
   116e9:	e8 7b f8 ff ff       	call   10f69 <outb>
   116ee:	83 c4 08             	add    $0x8,%esp
   116f1:	eb 01                	jmp    116f4 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   116f3:	90                   	nop
  }
  
}
   116f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   116f7:	c9                   	leave  
   116f8:	c3                   	ret    

000116f9 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   116f9:	55                   	push   %ebp
   116fa:	89 e5                	mov    %esp,%ebp
  cli();
   116fc:	e8 36 f8 ff ff       	call   10f37 <cli>
}
   11701:	90                   	nop
   11702:	5d                   	pop    %ebp
   11703:	c3                   	ret    

00011704 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11704:	55                   	push   %ebp
   11705:	89 e5                	mov    %esp,%ebp
  sti();
   11707:	e8 32 f8 ff ff       	call   10f3e <sti>
}
   1170c:	90                   	nop
   1170d:	5d                   	pop    %ebp
   1170e:	c3                   	ret    

0001170f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   1170f:	55                   	push   %ebp
   11710:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11712:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11716:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1171a:	78 29                	js     11745 <pic_send_eoi+0x36>
   1171c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11720:	7f 23                	jg     11745 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11722:	6a 20                	push   $0x20
   11724:	6a 20                	push   $0x20
   11726:	e8 3e f8 ff ff       	call   10f69 <outb>
   1172b:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1172e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11732:	7e 12                	jle    11746 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11734:	6a 20                	push   $0x20
   11736:	68 a0 00 00 00       	push   $0xa0
   1173b:	e8 29 f8 ff ff       	call   10f69 <outb>
   11740:	83 c4 08             	add    $0x8,%esp
   11743:	eb 01                	jmp    11746 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11745:	90                   	nop
  }

}
   11746:	c9                   	leave  
   11747:	c3                   	ret    

00011748 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11748:	55                   	push   %ebp
   11749:	89 e5                	mov    %esp,%ebp
   1174b:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1174e:	e8 5f f8 ff ff       	call   10fb2 <read_eflags>
   11753:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11756:	e8 9e ff ff ff       	call   116f9 <idt_disable_global>
  return state;;
   1175b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1175e:	c9                   	leave  
   1175f:	c3                   	ret    

00011760 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11760:	55                   	push   %ebp
   11761:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11763:	ff 75 08             	push   0x8(%ebp)
   11766:	e8 57 f8 ff ff       	call   10fc2 <write_eflags>
   1176b:	83 c4 04             	add    $0x4,%esp
}
   1176e:	90                   	nop
   1176f:	c9                   	leave  
   11770:	c3                   	ret    

00011771 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11771:	55                   	push   %ebp
   11772:	89 e5                	mov    %esp,%ebp
   11774:	83 ec 08             	sub    $0x8,%esp
   11777:	8b 45 08             	mov    0x8(%ebp),%eax
   1177a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1177d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11781:	89 d0                	mov    %edx,%eax
   11783:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11786:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1178a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1178e:	ee                   	out    %al,(%dx)
}
   1178f:	90                   	nop
   11790:	c9                   	leave  
   11791:	c3                   	ret    

00011792 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11792:	55                   	push   %ebp
   11793:	89 e5                	mov    %esp,%ebp
   11795:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11798:	a1 40 c6 02 00       	mov    0x2c640,%eax
   1179d:	83 c0 01             	add    $0x1,%eax
   117a0:	a3 40 c6 02 00       	mov    %eax,0x2c640

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   117a5:	83 ec 0c             	sub    $0xc,%esp
   117a8:	6a 20                	push   $0x20
   117aa:	e8 60 ff ff ff       	call   1170f <pic_send_eoi>
   117af:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   117b2:	e8 7c f3 ff ff       	call   10b33 <task_slice_end>
}
   117b7:	90                   	nop
   117b8:	c9                   	leave  
   117b9:	c3                   	ret    

000117ba <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   117ba:	55                   	push   %ebp
   117bb:	89 e5                	mov    %esp,%ebp
   117bd:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   117c0:	6a 36                	push   $0x36
   117c2:	6a 43                	push   $0x43
   117c4:	e8 a8 ff ff ff       	call   11771 <outb>
   117c9:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   117cc:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   117d2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   117d6:	0f b6 c0             	movzbl %al,%eax
   117d9:	50                   	push   %eax
   117da:	6a 40                	push   $0x40
   117dc:	e8 90 ff ff ff       	call   11771 <outb>
   117e1:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   117e4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   117e8:	66 c1 e8 08          	shr    $0x8,%ax
   117ec:	0f b6 c0             	movzbl %al,%eax
   117ef:	50                   	push   %eax
   117f0:	6a 40                	push   $0x40
   117f2:	e8 7a ff ff ff       	call   11771 <outb>
   117f7:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   117fa:	83 ec 08             	sub    $0x8,%esp
   117fd:	68 7b 02 01 00       	push   $0x1027b
   11802:	6a 20                	push   $0x20
   11804:	e8 7e fb ff ff       	call   11387 <idt_install>
   11809:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1180c:	83 ec 0c             	sub    $0xc,%esp
   1180f:	6a 20                	push   $0x20
   11811:	e8 b7 fd ff ff       	call   115cd <idt_enable>
   11816:	83 c4 10             	add    $0x10,%esp

}
   11819:	90                   	nop
   1181a:	c9                   	leave  
   1181b:	c3                   	ret    

0001181c <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1181c:	55                   	push   %ebp
   1181d:	89 e5                	mov    %esp,%ebp
   1181f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11822:	c7 05 40 c6 02 00 00 	movl   $0x0,0x2c640
   11829:	00 00 00 
    init_pit();
   1182c:	e8 89 ff ff ff       	call   117ba <init_pit>
   11831:	90                   	nop
   11832:	c9                   	leave  
   11833:	c3                   	ret    

00011834 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11834:	55                   	push   %ebp
   11835:	89 e5                	mov    %esp,%ebp
   11837:	fb                   	sti    
   11838:	90                   	nop
   11839:	5d                   	pop    %ebp
   1183a:	c3                   	ret    

0001183b <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1183b:	55                   	push   %ebp
   1183c:	89 e5                	mov    %esp,%ebp
   1183e:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11841:	8b 45 08             	mov    0x8(%ebp),%eax
   11844:	8b 40 50             	mov    0x50(%eax),%eax
   11847:	85 c0                	test   %eax,%eax
   11849:	75 19                	jne    11864 <kernel_init+0x29>
   1184b:	68 30 34 01 00       	push   $0x13430
   11850:	68 fc 34 01 00       	push   $0x134fc
   11855:	6a 22                	push   $0x22
   11857:	68 54 34 01 00       	push   $0x13454
   1185c:	e8 a9 08 00 00       	call   1210a <pannic>
   11861:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11864:	e8 e8 14 00 00       	call   12d51 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11869:	83 ec 0c             	sub    $0xc,%esp
   1186c:	ff 75 08             	push   0x8(%ebp)
   1186f:	e8 08 ec ff ff       	call   1047c <memory_init>
   11874:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   11877:	e8 b0 f5 ff ff       	call   10e2c <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   1187c:	e8 d9 fb ff ff       	call   1145a <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11881:	e8 96 ff ff ff       	call   1181c <time_init>

    //7.初始化任务管理器
    task_manager_init();
   11886:	e8 44 f0 ff ff       	call   108cf <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1188b:	90                   	nop
   1188c:	c9                   	leave  
   1188d:	c3                   	ret    

0001188e <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   1188e:	55                   	push   %ebp
   1188f:	89 e5                	mov    %esp,%ebp
   11891:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11894:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   1189b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1189e:	8d 50 01             	lea    0x1(%eax),%edx
   118a1:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118a4:	83 ec 08             	sub    $0x8,%esp
   118a7:	50                   	push   %eax
   118a8:	68 89 34 01 00       	push   $0x13489
   118ad:	e8 27 15 00 00       	call   12dd9 <log_printf>
   118b2:	83 c4 10             	add    $0x10,%esp
   118b5:	eb e4                	jmp    1189b <test_task_1+0xd>

000118b7 <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   118b7:	55                   	push   %ebp
   118b8:	89 e5                	mov    %esp,%ebp
   118ba:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   118bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   118c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118c7:	8d 50 01             	lea    0x1(%eax),%edx
   118ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118cd:	83 ec 08             	sub    $0x8,%esp
   118d0:	50                   	push   %eax
   118d1:	68 94 34 01 00       	push   $0x13494
   118d6:	e8 fe 14 00 00       	call   12dd9 <log_printf>
   118db:	83 c4 10             	add    $0x10,%esp
   118de:	eb e4                	jmp    118c4 <test_task_2+0xd>

000118e0 <init_main>:
     }
}



void init_main(void) {
   118e0:	55                   	push   %ebp
   118e1:	89 e5                	mov    %esp,%ebp
   118e3:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   118e6:	83 ec 0c             	sub    $0xc,%esp
   118e9:	68 9f 34 01 00       	push   $0x1349f
   118ee:	e8 e6 14 00 00       	call   12dd9 <log_printf>
   118f3:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   118f6:	83 ec 04             	sub    $0x4,%esp
   118f9:	68 b7 34 01 00       	push   $0x134b7
   118fe:	68 bd 34 01 00       	push   $0x134bd
   11903:	68 c2 34 01 00       	push   $0x134c2
   11908:	e8 cc 14 00 00       	call   12dd9 <log_printf>
   1190d:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11910:	e8 35 f0 ff ff       	call   1094a <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11915:	ba e0 d7 02 00       	mov    $0x2d7e0,%edx
   1191a:	b8 8e 18 01 00       	mov    $0x1188e,%eax
   1191f:	52                   	push   %edx
   11920:	50                   	push   %eax
   11921:	68 d8 34 01 00       	push   $0x134d8
   11926:	68 60 c6 02 00       	push   $0x2c660
   1192b:	e8 b1 ee ff ff       	call   107e1 <task_init>
   11930:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11933:	ba e0 e7 02 00       	mov    $0x2e7e0,%edx
   11938:	b8 b7 18 01 00       	mov    $0x118b7,%eax
   1193d:	52                   	push   %edx
   1193e:	50                   	push   %eax
   1193f:	68 e4 34 01 00       	push   $0x134e4
   11944:	68 20 c7 02 00       	push   $0x2c720
   11949:	e8 93 ee ff ff       	call   107e1 <task_init>
   1194e:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   11951:	e8 de fe ff ff       	call   11834 <sti>

    int count = 0;
   11956:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   1195d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11960:	8d 50 01             	lea    0x1(%eax),%edx
   11963:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11966:	83 ec 08             	sub    $0x8,%esp
   11969:	50                   	push   %eax
   1196a:	68 f0 34 01 00       	push   $0x134f0
   1196f:	e8 65 14 00 00       	call   12dd9 <log_printf>
   11974:	83 c4 10             	add    $0x10,%esp
   11977:	eb e4                	jmp    1195d <init_main+0x7d>

00011979 <list_init>:
static inline void list_init(list_t *list) {
   11979:	55                   	push   %ebp
   1197a:	89 e5                	mov    %esp,%ebp
   1197c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1197f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11983:	75 19                	jne    1199e <list_init+0x25>
   11985:	68 08 35 01 00       	push   $0x13508
   1198a:	68 b4 35 01 00       	push   $0x135b4
   1198f:	6a 31                	push   $0x31
   11991:	68 1c 35 01 00       	push   $0x1351c
   11996:	e8 6f 07 00 00       	call   1210a <pannic>
   1199b:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1199e:	8b 45 08             	mov    0x8(%ebp),%eax
   119a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   119a8:	8b 45 08             	mov    0x8(%ebp),%eax
   119ab:	8b 50 04             	mov    0x4(%eax),%edx
   119ae:	8b 45 08             	mov    0x8(%ebp),%eax
   119b1:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   119b3:	8b 45 08             	mov    0x8(%ebp),%eax
   119b6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   119bd:	90                   	nop
   119be:	c9                   	leave  
   119bf:	c3                   	ret    

000119c0 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   119c0:	55                   	push   %ebp
   119c1:	89 e5                	mov    %esp,%ebp
   119c3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   119c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119ca:	75 19                	jne    119e5 <list_is_empty+0x25>
   119cc:	68 08 35 01 00       	push   $0x13508
   119d1:	68 c0 35 01 00       	push   $0x135c0
   119d6:	6a 38                	push   $0x38
   119d8:	68 1c 35 01 00       	push   $0x1351c
   119dd:	e8 28 07 00 00       	call   1210a <pannic>
   119e2:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   119e5:	8b 45 08             	mov    0x8(%ebp),%eax
   119e8:	8b 40 08             	mov    0x8(%eax),%eax
   119eb:	85 c0                	test   %eax,%eax
   119ed:	0f 94 c0             	sete   %al
   119f0:	0f b6 c0             	movzbl %al,%eax
}
   119f3:	c9                   	leave  
   119f4:	c3                   	ret    

000119f5 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   119f5:	55                   	push   %ebp
   119f6:	89 e5                	mov    %esp,%ebp
   119f8:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   119fb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119ff:	75 19                	jne    11a1a <mutex_init+0x25>
   11a01:	68 5a 35 01 00       	push   $0x1355a
   11a06:	68 a8 35 01 00       	push   $0x135a8
   11a0b:	6a 15                	push   $0x15
   11a0d:	68 70 35 01 00       	push   $0x13570
   11a12:	e8 f3 06 00 00       	call   1210a <pannic>
   11a17:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11a1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11a24:	8b 45 08             	mov    0x8(%ebp),%eax
   11a27:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11a2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a30:	83 c0 08             	add    $0x8,%eax
   11a33:	83 ec 0c             	sub    $0xc,%esp
   11a36:	50                   	push   %eax
   11a37:	e8 3d ff ff ff       	call   11979 <list_init>
   11a3c:	83 c4 10             	add    $0x10,%esp
}
   11a3f:	90                   	nop
   11a40:	c9                   	leave  
   11a41:	c3                   	ret    

00011a42 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11a42:	55                   	push   %ebp
   11a43:	89 e5                	mov    %esp,%ebp
   11a45:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11a48:	e8 fb fc ff ff       	call   11748 <idt_enter_protection>
   11a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11a50:	e8 0b f0 ff ff       	call   10a60 <task_current>
   11a55:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11a58:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5b:	8b 40 04             	mov    0x4(%eax),%eax
   11a5e:	85 c0                	test   %eax,%eax
   11a60:	75 19                	jne    11a7b <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11a62:	8b 45 08             	mov    0x8(%ebp),%eax
   11a65:	8b 40 04             	mov    0x4(%eax),%eax
   11a68:	8d 50 01             	lea    0x1(%eax),%edx
   11a6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6e:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11a71:	8b 45 08             	mov    0x8(%ebp),%eax
   11a74:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11a77:	89 10                	mov    %edx,(%eax)
   11a79:	eb 47                	jmp    11ac2 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7e:	8b 00                	mov    (%eax),%eax
   11a80:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11a83:	75 11                	jne    11a96 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11a85:	8b 45 08             	mov    0x8(%ebp),%eax
   11a88:	8b 40 04             	mov    0x4(%eax),%eax
   11a8b:	8d 50 01             	lea    0x1(%eax),%edx
   11a8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a91:	89 50 04             	mov    %edx,0x4(%eax)
   11a94:	eb 2c                	jmp    11ac2 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11a96:	83 ec 0c             	sub    $0xc,%esp
   11a99:	ff 75 f0             	push   -0x10(%ebp)
   11a9c:	e8 46 ef ff ff       	call   109e7 <task_set_unready>
   11aa1:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aa7:	8d 50 40             	lea    0x40(%eax),%edx
   11aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   11aad:	83 c0 08             	add    $0x8,%eax
   11ab0:	83 ec 08             	sub    $0x8,%esp
   11ab3:	52                   	push   %edx
   11ab4:	50                   	push   %eax
   11ab5:	e8 9b 0f 00 00       	call   12a55 <list_insert_last>
   11aba:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11abd:	e8 a8 ef ff ff       	call   10a6a <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11ac2:	83 ec 0c             	sub    $0xc,%esp
   11ac5:	ff 75 f4             	push   -0xc(%ebp)
   11ac8:	e8 93 fc ff ff       	call   11760 <idt_leave_protection>
   11acd:	83 c4 10             	add    $0x10,%esp
}
   11ad0:	90                   	nop
   11ad1:	c9                   	leave  
   11ad2:	c3                   	ret    

00011ad3 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11ad3:	55                   	push   %ebp
   11ad4:	89 e5                	mov    %esp,%ebp
   11ad6:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11ad9:	e8 6a fc ff ff       	call   11748 <idt_enter_protection>
   11ade:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11ae1:	e8 7a ef ff ff       	call   10a60 <task_current>
   11ae6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   11aec:	8b 00                	mov    (%eax),%eax
   11aee:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11af1:	0f 85 83 00 00 00    	jne    11b7a <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11af7:	8b 45 08             	mov    0x8(%ebp),%eax
   11afa:	8b 40 04             	mov    0x4(%eax),%eax
   11afd:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b00:	8b 45 08             	mov    0x8(%ebp),%eax
   11b03:	89 50 04             	mov    %edx,0x4(%eax)
   11b06:	8b 45 08             	mov    0x8(%ebp),%eax
   11b09:	8b 40 04             	mov    0x4(%eax),%eax
   11b0c:	85 c0                	test   %eax,%eax
   11b0e:	75 6a                	jne    11b7a <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11b10:	8b 45 08             	mov    0x8(%ebp),%eax
   11b13:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11b19:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1c:	83 c0 08             	add    $0x8,%eax
   11b1f:	83 ec 0c             	sub    $0xc,%esp
   11b22:	50                   	push   %eax
   11b23:	e8 98 fe ff ff       	call   119c0 <list_is_empty>
   11b28:	83 c4 10             	add    $0x10,%esp
   11b2b:	85 c0                	test   %eax,%eax
   11b2d:	75 4b                	jne    11b7a <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11b2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b32:	83 c0 08             	add    $0x8,%eax
   11b35:	83 ec 0c             	sub    $0xc,%esp
   11b38:	50                   	push   %eax
   11b39:	e8 a6 0f 00 00       	call   12ae4 <list_remove_first>
   11b3e:	83 c4 10             	add    $0x10,%esp
   11b41:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11b44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11b48:	74 08                	je     11b52 <mutex_unlock+0x7f>
   11b4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b4d:	83 e8 40             	sub    $0x40,%eax
   11b50:	eb 05                	jmp    11b57 <mutex_unlock+0x84>
   11b52:	b8 00 00 00 00       	mov    $0x0,%eax
   11b57:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11b64:	8b 45 08             	mov    0x8(%ebp),%eax
   11b67:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11b6a:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11b6c:	83 ec 0c             	sub    $0xc,%esp
   11b6f:	ff 75 e8             	push   -0x18(%ebp)
   11b72:	e8 25 ee ff ff       	call   1099c <task_set_ready>
   11b77:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11b7a:	83 ec 0c             	sub    $0xc,%esp
   11b7d:	ff 75 f4             	push   -0xc(%ebp)
   11b80:	e8 db fb ff ff       	call   11760 <idt_leave_protection>
   11b85:	83 c4 10             	add    $0x10,%esp
}
   11b88:	90                   	nop
   11b89:	c9                   	leave  
   11b8a:	c3                   	ret    

00011b8b <list_init>:
static inline void list_init(list_t *list) {
   11b8b:	55                   	push   %ebp
   11b8c:	89 e5                	mov    %esp,%ebp
   11b8e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b95:	75 19                	jne    11bb0 <list_init+0x25>
   11b97:	68 d0 35 01 00       	push   $0x135d0
   11b9c:	68 74 36 01 00       	push   $0x13674
   11ba1:	6a 31                	push   $0x31
   11ba3:	68 e4 35 01 00       	push   $0x135e4
   11ba8:	e8 5d 05 00 00       	call   1210a <pannic>
   11bad:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11bba:	8b 45 08             	mov    0x8(%ebp),%eax
   11bbd:	8b 50 04             	mov    0x4(%eax),%edx
   11bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc3:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11bcf:	90                   	nop
   11bd0:	c9                   	leave  
   11bd1:	c3                   	ret    

00011bd2 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11bd2:	55                   	push   %ebp
   11bd3:	89 e5                	mov    %esp,%ebp
   11bd5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11bd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bdc:	75 19                	jne    11bf7 <list_is_empty+0x25>
   11bde:	68 d0 35 01 00       	push   $0x135d0
   11be3:	68 80 36 01 00       	push   $0x13680
   11be8:	6a 38                	push   $0x38
   11bea:	68 e4 35 01 00       	push   $0x135e4
   11bef:	e8 16 05 00 00       	call   1210a <pannic>
   11bf4:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11bf7:	8b 45 08             	mov    0x8(%ebp),%eax
   11bfa:	8b 40 08             	mov    0x8(%eax),%eax
   11bfd:	85 c0                	test   %eax,%eax
   11bff:	0f 94 c0             	sete   %al
   11c02:	0f b6 c0             	movzbl %al,%eax
}
   11c05:	c9                   	leave  
   11c06:	c3                   	ret    

00011c07 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11c07:	55                   	push   %ebp
   11c08:	89 e5                	mov    %esp,%ebp
   11c0a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11c0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c11:	75 19                	jne    11c2c <sem_init+0x25>
   11c13:	68 22 36 01 00       	push   $0x13622
   11c18:	68 68 36 01 00       	push   $0x13668
   11c1d:	6a 18                	push   $0x18
   11c1f:	68 34 36 01 00       	push   $0x13634
   11c24:	e8 e1 04 00 00       	call   1210a <pannic>
   11c29:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11c35:	8b 45 08             	mov    0x8(%ebp),%eax
   11c38:	83 c0 04             	add    $0x4,%eax
   11c3b:	83 ec 0c             	sub    $0xc,%esp
   11c3e:	50                   	push   %eax
   11c3f:	e8 47 ff ff ff       	call   11b8b <list_init>
   11c44:	83 c4 10             	add    $0x10,%esp
}
   11c47:	90                   	nop
   11c48:	c9                   	leave  
   11c49:	c3                   	ret    

00011c4a <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11c4a:	55                   	push   %ebp
   11c4b:	89 e5                	mov    %esp,%ebp
   11c4d:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c50:	e8 f3 fa ff ff       	call   11748 <idt_enter_protection>
   11c55:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11c58:	8b 45 08             	mov    0x8(%ebp),%eax
   11c5b:	8b 00                	mov    (%eax),%eax
   11c5d:	85 c0                	test   %eax,%eax
   11c5f:	7e 0f                	jle    11c70 <sem_wait+0x26>
        --sem->count;   
   11c61:	8b 45 08             	mov    0x8(%ebp),%eax
   11c64:	8b 00                	mov    (%eax),%eax
   11c66:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c69:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6c:	89 10                	mov    %edx,(%eax)
   11c6e:	eb 34                	jmp    11ca4 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11c70:	e8 eb ed ff ff       	call   10a60 <task_current>
   11c75:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11c78:	83 ec 0c             	sub    $0xc,%esp
   11c7b:	ff 75 f0             	push   -0x10(%ebp)
   11c7e:	e8 64 ed ff ff       	call   109e7 <task_set_unready>
   11c83:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c89:	8d 50 40             	lea    0x40(%eax),%edx
   11c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c8f:	83 c0 04             	add    $0x4,%eax
   11c92:	83 ec 08             	sub    $0x8,%esp
   11c95:	52                   	push   %edx
   11c96:	50                   	push   %eax
   11c97:	e8 b9 0d 00 00       	call   12a55 <list_insert_last>
   11c9c:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11c9f:	e8 c6 ed ff ff       	call   10a6a <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11ca4:	83 ec 0c             	sub    $0xc,%esp
   11ca7:	ff 75 f4             	push   -0xc(%ebp)
   11caa:	e8 b1 fa ff ff       	call   11760 <idt_leave_protection>
   11caf:	83 c4 10             	add    $0x10,%esp
}
   11cb2:	90                   	nop
   11cb3:	c9                   	leave  
   11cb4:	c3                   	ret    

00011cb5 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11cb5:	55                   	push   %ebp
   11cb6:	89 e5                	mov    %esp,%ebp
   11cb8:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11cbb:	e8 88 fa ff ff       	call   11748 <idt_enter_protection>
   11cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc6:	83 c0 04             	add    $0x4,%eax
   11cc9:	83 ec 0c             	sub    $0xc,%esp
   11ccc:	50                   	push   %eax
   11ccd:	e8 00 ff ff ff       	call   11bd2 <list_is_empty>
   11cd2:	83 c4 10             	add    $0x10,%esp
   11cd5:	85 c0                	test   %eax,%eax
   11cd7:	75 3b                	jne    11d14 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   11cdc:	83 c0 04             	add    $0x4,%eax
   11cdf:	83 ec 0c             	sub    $0xc,%esp
   11ce2:	50                   	push   %eax
   11ce3:	e8 fc 0d 00 00       	call   12ae4 <list_remove_first>
   11ce8:	83 c4 10             	add    $0x10,%esp
   11ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11cee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11cf2:	74 08                	je     11cfc <sem_notify+0x47>
   11cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cf7:	83 e8 40             	sub    $0x40,%eax
   11cfa:	eb 05                	jmp    11d01 <sem_notify+0x4c>
   11cfc:	b8 00 00 00 00       	mov    $0x0,%eax
   11d01:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11d04:	83 ec 0c             	sub    $0xc,%esp
   11d07:	ff 75 ec             	push   -0x14(%ebp)
   11d0a:	e8 8d ec ff ff       	call   1099c <task_set_ready>
   11d0f:	83 c4 10             	add    $0x10,%esp
   11d12:	eb 0d                	jmp    11d21 <sem_notify+0x6c>
    } else {
        sem->count++;
   11d14:	8b 45 08             	mov    0x8(%ebp),%eax
   11d17:	8b 00                	mov    (%eax),%eax
   11d19:	8d 50 01             	lea    0x1(%eax),%edx
   11d1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1f:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11d21:	83 ec 0c             	sub    $0xc,%esp
   11d24:	ff 75 f4             	push   -0xc(%ebp)
   11d27:	e8 34 fa ff ff       	call   11760 <idt_leave_protection>
   11d2c:	83 c4 10             	add    $0x10,%esp

}
   11d2f:	90                   	nop
   11d30:	c9                   	leave  
   11d31:	c3                   	ret    

00011d32 <sem_count>:

int sem_count(sem_t *sem) {
   11d32:	55                   	push   %ebp
   11d33:	89 e5                	mov    %esp,%ebp
   11d35:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11d38:	e8 0b fa ff ff       	call   11748 <idt_enter_protection>
   11d3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11d40:	8b 45 08             	mov    0x8(%ebp),%eax
   11d43:	8b 00                	mov    (%eax),%eax
   11d45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11d48:	83 ec 0c             	sub    $0xc,%esp
   11d4b:	ff 75 f4             	push   -0xc(%ebp)
   11d4e:	e8 0d fa ff ff       	call   11760 <idt_leave_protection>
   11d53:	83 c4 10             	add    $0x10,%esp

    return count;
   11d56:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d59:	c9                   	leave  
   11d5a:	c3                   	ret    

00011d5b <list_init>:
static inline void list_init(list_t *list) {
   11d5b:	55                   	push   %ebp
   11d5c:	89 e5                	mov    %esp,%ebp
   11d5e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d61:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d65:	75 19                	jne    11d80 <list_init+0x25>
   11d67:	68 90 36 01 00       	push   $0x13690
   11d6c:	68 94 37 01 00       	push   $0x13794
   11d71:	6a 31                	push   $0x31
   11d73:	68 a4 36 01 00       	push   $0x136a4
   11d78:	e8 8d 03 00 00       	call   1210a <pannic>
   11d7d:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11d80:	8b 45 08             	mov    0x8(%ebp),%eax
   11d83:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d8a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8d:	8b 50 04             	mov    0x4(%eax),%edx
   11d90:	8b 45 08             	mov    0x8(%ebp),%eax
   11d93:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11d95:	8b 45 08             	mov    0x8(%ebp),%eax
   11d98:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11d9f:	90                   	nop
   11da0:	c9                   	leave  
   11da1:	c3                   	ret    

00011da2 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11da2:	55                   	push   %ebp
   11da3:	89 e5                	mov    %esp,%ebp
   11da5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11da8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11dac:	75 19                	jne    11dc7 <list_get_size+0x25>
   11dae:	68 90 36 01 00       	push   $0x13690
   11db3:	68 a0 37 01 00       	push   $0x137a0
   11db8:	6a 3e                	push   $0x3e
   11dba:	68 a4 36 01 00       	push   $0x136a4
   11dbf:	e8 46 03 00 00       	call   1210a <pannic>
   11dc4:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dca:	8b 40 08             	mov    0x8(%eax),%eax
}
   11dcd:	c9                   	leave  
   11dce:	c3                   	ret    

00011dcf <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11dcf:	55                   	push   %ebp
   11dd0:	89 e5                	mov    %esp,%ebp
   11dd2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11dd5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11dd9:	75 19                	jne    11df4 <list_get_first+0x25>
   11ddb:	68 90 36 01 00       	push   $0x13690
   11de0:	68 c0 37 01 00       	push   $0x137c0
   11de5:	6a 44                	push   $0x44
   11de7:	68 a4 36 01 00       	push   $0x136a4
   11dec:	e8 19 03 00 00       	call   1210a <pannic>
   11df1:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11df4:	8b 45 08             	mov    0x8(%ebp),%eax
   11df7:	8b 00                	mov    (%eax),%eax
}
   11df9:	c9                   	leave  
   11dfa:	c3                   	ret    

00011dfb <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11dfb:	55                   	push   %ebp
   11dfc:	89 e5                	mov    %esp,%ebp
   11dfe:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e05:	75 19                	jne    11e20 <list_get_last+0x25>
   11e07:	68 90 36 01 00       	push   $0x13690
   11e0c:	68 b0 37 01 00       	push   $0x137b0
   11e11:	6a 4a                	push   $0x4a
   11e13:	68 a4 36 01 00       	push   $0x136a4
   11e18:	e8 ed 02 00 00       	call   1210a <pannic>
   11e1d:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11e20:	8b 45 08             	mov    0x8(%ebp),%eax
   11e23:	8b 40 04             	mov    0x4(%eax),%eax
}
   11e26:	c9                   	leave  
   11e27:	c3                   	ret    

00011e28 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11e28:	55                   	push   %ebp
   11e29:	89 e5                	mov    %esp,%ebp
   11e2b:	56                   	push   %esi
   11e2c:	53                   	push   %ebx
   11e2d:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11e30:	83 ec 0c             	sub    $0xc,%esp
   11e33:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e36:	50                   	push   %eax
   11e37:	e8 1f ff ff ff       	call   11d5b <list_init>
   11e3c:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11e3f:	83 ec 0c             	sub    $0xc,%esp
   11e42:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e45:	50                   	push   %eax
   11e46:	e8 57 ff ff ff       	call   11da2 <list_get_size>
   11e4b:	83 c4 10             	add    $0x10,%esp
   11e4e:	89 c6                	mov    %eax,%esi
   11e50:	83 ec 0c             	sub    $0xc,%esp
   11e53:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e56:	50                   	push   %eax
   11e57:	e8 9f ff ff ff       	call   11dfb <list_get_last>
   11e5c:	83 c4 10             	add    $0x10,%esp
   11e5f:	89 c3                	mov    %eax,%ebx
   11e61:	83 ec 0c             	sub    $0xc,%esp
   11e64:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e67:	50                   	push   %eax
   11e68:	e8 62 ff ff ff       	call   11dcf <list_get_first>
   11e6d:	83 c4 10             	add    $0x10,%esp
   11e70:	56                   	push   %esi
   11e71:	53                   	push   %ebx
   11e72:	50                   	push   %eax
   11e73:	68 e4 36 01 00       	push   $0x136e4
   11e78:	e8 5c 0f 00 00       	call   12dd9 <log_printf>
   11e7d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11e80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e87:	eb 3f                	jmp    11ec8 <list_test+0xa0>
        list_node_t *node = nodes + i;
   11e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e8c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11e93:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11e96:	01 d0                	add    %edx,%eax
   11e98:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11e9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11e9e:	83 ec 04             	sub    $0x4,%esp
   11ea1:	50                   	push   %eax
   11ea2:	ff 75 f4             	push   -0xc(%ebp)
   11ea5:	68 0c 37 01 00       	push   $0x1370c
   11eaa:	e8 2a 0f 00 00       	call   12dd9 <log_printf>
   11eaf:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11eb2:	83 ec 08             	sub    $0x8,%esp
   11eb5:	ff 75 d0             	push   -0x30(%ebp)
   11eb8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ebb:	50                   	push   %eax
   11ebc:	e8 09 0b 00 00       	call   129ca <list_insert_first>
   11ec1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11ec4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ec8:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11ecc:	7e bb                	jle    11e89 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11ece:	83 ec 0c             	sub    $0xc,%esp
   11ed1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ed4:	50                   	push   %eax
   11ed5:	e8 c8 fe ff ff       	call   11da2 <list_get_size>
   11eda:	83 c4 10             	add    $0x10,%esp
   11edd:	89 c6                	mov    %eax,%esi
   11edf:	83 ec 0c             	sub    $0xc,%esp
   11ee2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ee5:	50                   	push   %eax
   11ee6:	e8 10 ff ff ff       	call   11dfb <list_get_last>
   11eeb:	83 c4 10             	add    $0x10,%esp
   11eee:	89 c3                	mov    %eax,%ebx
   11ef0:	83 ec 0c             	sub    $0xc,%esp
   11ef3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ef6:	50                   	push   %eax
   11ef7:	e8 d3 fe ff ff       	call   11dcf <list_get_first>
   11efc:	83 c4 10             	add    $0x10,%esp
   11eff:	56                   	push   %esi
   11f00:	53                   	push   %ebx
   11f01:	50                   	push   %eax
   11f02:	68 e4 36 01 00       	push   $0x136e4
   11f07:	e8 cd 0e 00 00       	call   12dd9 <log_printf>
   11f0c:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11f0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f16:	eb 2d                	jmp    11f45 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11f18:	83 ec 0c             	sub    $0xc,%esp
   11f1b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f1e:	50                   	push   %eax
   11f1f:	e8 c0 0b 00 00       	call   12ae4 <list_remove_first>
   11f24:	83 c4 10             	add    $0x10,%esp
   11f27:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11f2a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11f2d:	83 ec 04             	sub    $0x4,%esp
   11f30:	50                   	push   %eax
   11f31:	ff 75 f0             	push   -0x10(%ebp)
   11f34:	68 2b 37 01 00       	push   $0x1372b
   11f39:	e8 9b 0e 00 00       	call   12dd9 <log_printf>
   11f3e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11f41:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f45:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11f49:	7e cd                	jle    11f18 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11f4b:	83 ec 0c             	sub    $0xc,%esp
   11f4e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f51:	50                   	push   %eax
   11f52:	e8 4b fe ff ff       	call   11da2 <list_get_size>
   11f57:	83 c4 10             	add    $0x10,%esp
   11f5a:	89 c6                	mov    %eax,%esi
   11f5c:	83 ec 0c             	sub    $0xc,%esp
   11f5f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f62:	50                   	push   %eax
   11f63:	e8 93 fe ff ff       	call   11dfb <list_get_last>
   11f68:	83 c4 10             	add    $0x10,%esp
   11f6b:	89 c3                	mov    %eax,%ebx
   11f6d:	83 ec 0c             	sub    $0xc,%esp
   11f70:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f73:	50                   	push   %eax
   11f74:	e8 56 fe ff ff       	call   11dcf <list_get_first>
   11f79:	83 c4 10             	add    $0x10,%esp
   11f7c:	56                   	push   %esi
   11f7d:	53                   	push   %ebx
   11f7e:	50                   	push   %eax
   11f7f:	68 e4 36 01 00       	push   $0x136e4
   11f84:	e8 50 0e 00 00       	call   12dd9 <log_printf>
   11f89:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11f8c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11f93:	eb 3f                	jmp    11fd4 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f98:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11f9f:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11fa2:	01 d0                	add    %edx,%eax
   11fa4:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11fa7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11faa:	83 ec 04             	sub    $0x4,%esp
   11fad:	50                   	push   %eax
   11fae:	ff 75 ec             	push   -0x14(%ebp)
   11fb1:	68 42 37 01 00       	push   $0x13742
   11fb6:	e8 1e 0e 00 00       	call   12dd9 <log_printf>
   11fbb:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11fbe:	83 ec 08             	sub    $0x8,%esp
   11fc1:	ff 75 d8             	push   -0x28(%ebp)
   11fc4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fc7:	50                   	push   %eax
   11fc8:	e8 88 0a 00 00       	call   12a55 <list_insert_last>
   11fcd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11fd0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11fd4:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11fd8:	7e bb                	jle    11f95 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11fda:	83 ec 0c             	sub    $0xc,%esp
   11fdd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fe0:	50                   	push   %eax
   11fe1:	e8 bc fd ff ff       	call   11da2 <list_get_size>
   11fe6:	83 c4 10             	add    $0x10,%esp
   11fe9:	89 c6                	mov    %eax,%esi
   11feb:	83 ec 0c             	sub    $0xc,%esp
   11fee:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ff1:	50                   	push   %eax
   11ff2:	e8 04 fe ff ff       	call   11dfb <list_get_last>
   11ff7:	83 c4 10             	add    $0x10,%esp
   11ffa:	89 c3                	mov    %eax,%ebx
   11ffc:	83 ec 0c             	sub    $0xc,%esp
   11fff:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12002:	50                   	push   %eax
   12003:	e8 c7 fd ff ff       	call   11dcf <list_get_first>
   12008:	83 c4 10             	add    $0x10,%esp
   1200b:	56                   	push   %esi
   1200c:	53                   	push   %ebx
   1200d:	50                   	push   %eax
   1200e:	68 e4 36 01 00       	push   $0x136e4
   12013:	e8 c1 0d 00 00       	call   12dd9 <log_printf>
   12018:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   1201b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12022:	eb 2d                	jmp    12051 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12024:	83 ec 0c             	sub    $0xc,%esp
   12027:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1202a:	50                   	push   %eax
   1202b:	e8 65 0b 00 00       	call   12b95 <list_remove_last>
   12030:	83 c4 10             	add    $0x10,%esp
   12033:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12036:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12039:	83 ec 04             	sub    $0x4,%esp
   1203c:	50                   	push   %eax
   1203d:	ff 75 e8             	push   -0x18(%ebp)
   12040:	68 60 37 01 00       	push   $0x13760
   12045:	e8 8f 0d 00 00       	call   12dd9 <log_printf>
   1204a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1204d:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12051:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12055:	7e cd                	jle    12024 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12057:	83 ec 0c             	sub    $0xc,%esp
   1205a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1205d:	50                   	push   %eax
   1205e:	e8 3f fd ff ff       	call   11da2 <list_get_size>
   12063:	83 c4 10             	add    $0x10,%esp
   12066:	89 c6                	mov    %eax,%esi
   12068:	83 ec 0c             	sub    $0xc,%esp
   1206b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1206e:	50                   	push   %eax
   1206f:	e8 87 fd ff ff       	call   11dfb <list_get_last>
   12074:	83 c4 10             	add    $0x10,%esp
   12077:	89 c3                	mov    %eax,%ebx
   12079:	83 ec 0c             	sub    $0xc,%esp
   1207c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1207f:	50                   	push   %eax
   12080:	e8 4a fd ff ff       	call   11dcf <list_get_first>
   12085:	83 c4 10             	add    $0x10,%esp
   12088:	56                   	push   %esi
   12089:	53                   	push   %ebx
   1208a:	50                   	push   %eax
   1208b:	68 e4 36 01 00       	push   $0x136e4
   12090:	e8 44 0d 00 00       	call   12dd9 <log_printf>
   12095:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12098:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   1209f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   120a6:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   120ad:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   120b4:	8d 45 90             	lea    -0x70(%ebp),%eax
   120b7:	83 c0 04             	add    $0x4,%eax
   120ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   120bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   120c1:	74 08                	je     120cb <list_test+0x2a3>
   120c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   120c6:	83 e8 04             	sub    $0x4,%eax
   120c9:	eb 05                	jmp    120d0 <list_test+0x2a8>
   120cb:	b8 00 00 00 00       	mov    $0x0,%eax
   120d0:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   120d3:	8d 45 90             	lea    -0x70(%ebp),%eax
   120d6:	83 ec 08             	sub    $0x8,%esp
   120d9:	50                   	push   %eax
   120da:	68 76 37 01 00       	push   $0x13776
   120df:	e8 f5 0c 00 00       	call   12dd9 <log_printf>
   120e4:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   120e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
   120ea:	83 ec 08             	sub    $0x8,%esp
   120ed:	50                   	push   %eax
   120ee:	68 84 37 01 00       	push   $0x13784
   120f3:	e8 e1 0c 00 00       	call   12dd9 <log_printf>
   120f8:	83 c4 10             	add    $0x10,%esp

 }
   120fb:	90                   	nop
   120fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
   120ff:	5b                   	pop    %ebx
   12100:	5e                   	pop    %esi
   12101:	5d                   	pop    %ebp
   12102:	c3                   	ret    

00012103 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12103:	55                   	push   %ebp
   12104:	89 e5                	mov    %esp,%ebp
   12106:	f4                   	hlt    
   12107:	90                   	nop
   12108:	5d                   	pop    %ebp
   12109:	c3                   	ret    

0001210a <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1210a:	55                   	push   %ebp
   1210b:	89 e5                	mov    %esp,%ebp
   1210d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12110:	83 ec 08             	sub    $0x8,%esp
   12113:	ff 75 14             	push   0x14(%ebp)
   12116:	68 cf 37 01 00       	push   $0x137cf
   1211b:	e8 b9 0c 00 00       	call   12dd9 <log_printf>
   12120:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12123:	ff 75 10             	push   0x10(%ebp)
   12126:	ff 75 0c             	push   0xc(%ebp)
   12129:	ff 75 08             	push   0x8(%ebp)
   1212c:	68 e0 37 01 00       	push   $0x137e0
   12131:	e8 a3 0c 00 00       	call   12dd9 <log_printf>
   12136:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12139:	e8 c5 ff ff ff       	call   12103 <hlt>
   1213e:	eb f9                	jmp    12139 <pannic+0x2f>

00012140 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12140:	55                   	push   %ebp
   12141:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12143:	8b 45 08             	mov    0x8(%ebp),%eax
   12146:	83 c0 07             	add    $0x7,%eax
   12149:	8d 50 07             	lea    0x7(%eax),%edx
   1214c:	85 c0                	test   %eax,%eax
   1214e:	0f 48 c2             	cmovs  %edx,%eax
   12151:	c1 f8 03             	sar    $0x3,%eax
}
   12154:	5d                   	pop    %ebp
   12155:	c3                   	ret    

00012156 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12156:	55                   	push   %ebp
   12157:	89 e5                	mov    %esp,%ebp
   12159:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1215c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12160:	75 19                	jne    1217b <bitmap_init+0x25>
   12162:	68 fc 37 01 00       	push   $0x137fc
   12167:	68 90 38 01 00       	push   $0x13890
   1216c:	6a 24                	push   $0x24
   1216e:	68 14 38 01 00       	push   $0x13814
   12173:	e8 92 ff ff ff       	call   1210a <pannic>
   12178:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   1217b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1217f:	75 19                	jne    1219a <bitmap_init+0x44>
   12181:	68 4c 38 01 00       	push   $0x1384c
   12186:	68 90 38 01 00       	push   $0x13890
   1218b:	6a 25                	push   $0x25
   1218d:	68 14 38 01 00       	push   $0x13814
   12192:	e8 73 ff ff ff       	call   1210a <pannic>
   12197:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   1219a:	8b 45 08             	mov    0x8(%ebp),%eax
   1219d:	8b 55 10             	mov    0x10(%ebp),%edx
   121a0:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   121a2:	8b 45 08             	mov    0x8(%ebp),%eax
   121a5:	8b 55 0c             	mov    0xc(%ebp),%edx
   121a8:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   121ab:	8b 45 08             	mov    0x8(%ebp),%eax
   121ae:	8b 00                	mov    (%eax),%eax
   121b0:	83 ec 0c             	sub    $0xc,%esp
   121b3:	50                   	push   %eax
   121b4:	e8 87 ff ff ff       	call   12140 <bitmap_byte_count>
   121b9:	83 c4 10             	add    $0x10,%esp
   121bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   121bf:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   121c3:	74 07                	je     121cc <bitmap_init+0x76>
   121c5:	ba ff 00 00 00       	mov    $0xff,%edx
   121ca:	eb 05                	jmp    121d1 <bitmap_init+0x7b>
   121cc:	ba 00 00 00 00       	mov    $0x0,%edx
   121d1:	8b 45 08             	mov    0x8(%ebp),%eax
   121d4:	8b 40 04             	mov    0x4(%eax),%eax
   121d7:	83 ec 04             	sub    $0x4,%esp
   121da:	ff 75 f4             	push   -0xc(%ebp)
   121dd:	52                   	push   %edx
   121de:	50                   	push   %eax
   121df:	e8 28 04 00 00       	call   1260c <kernel_memset>
   121e4:	83 c4 10             	add    $0x10,%esp

}
   121e7:	90                   	nop
   121e8:	c9                   	leave  
   121e9:	c3                   	ret    

000121ea <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   121ea:	55                   	push   %ebp
   121eb:	89 e5                	mov    %esp,%ebp
   121ed:	53                   	push   %ebx
   121ee:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   121f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121f5:	75 19                	jne    12210 <bitmap_get_bit+0x26>
   121f7:	68 fc 37 01 00       	push   $0x137fc
   121fc:	68 9c 38 01 00       	push   $0x1389c
   12201:	6a 39                	push   $0x39
   12203:	68 14 38 01 00       	push   $0x13814
   12208:	e8 fd fe ff ff       	call   1210a <pannic>
   1220d:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12210:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12214:	79 19                	jns    1222f <bitmap_get_bit+0x45>
   12216:	68 60 38 01 00       	push   $0x13860
   1221b:	68 9c 38 01 00       	push   $0x1389c
   12220:	6a 3a                	push   $0x3a
   12222:	68 14 38 01 00       	push   $0x13814
   12227:	e8 de fe ff ff       	call   1210a <pannic>
   1222c:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   1222f:	8b 45 08             	mov    0x8(%ebp),%eax
   12232:	8b 48 04             	mov    0x4(%eax),%ecx
   12235:	8b 45 0c             	mov    0xc(%ebp),%eax
   12238:	8d 50 07             	lea    0x7(%eax),%edx
   1223b:	85 c0                	test   %eax,%eax
   1223d:	0f 48 c2             	cmovs  %edx,%eax
   12240:	c1 f8 03             	sar    $0x3,%eax
   12243:	01 c8                	add    %ecx,%eax
   12245:	0f b6 00             	movzbl (%eax),%eax
   12248:	89 c3                	mov    %eax,%ebx
   1224a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1224d:	83 e0 07             	and    $0x7,%eax
   12250:	ba 01 00 00 00       	mov    $0x1,%edx
   12255:	89 c1                	mov    %eax,%ecx
   12257:	d3 e2                	shl    %cl,%edx
   12259:	89 d0                	mov    %edx,%eax
   1225b:	21 d8                	and    %ebx,%eax
}
   1225d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12260:	c9                   	leave  
   12261:	c3                   	ret    

00012262 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12262:	55                   	push   %ebp
   12263:	89 e5                	mov    %esp,%ebp
   12265:	56                   	push   %esi
   12266:	53                   	push   %ebx
   12267:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1226a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1226e:	75 19                	jne    12289 <bitmap_set_bit+0x27>
   12270:	68 fc 37 01 00       	push   $0x137fc
   12275:	68 ac 38 01 00       	push   $0x138ac
   1227a:	6a 48                	push   $0x48
   1227c:	68 14 38 01 00       	push   $0x13814
   12281:	e8 84 fe ff ff       	call   1210a <pannic>
   12286:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12289:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1228d:	78 06                	js     12295 <bitmap_set_bit+0x33>
   1228f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12293:	79 19                	jns    122ae <bitmap_set_bit+0x4c>
   12295:	68 6b 38 01 00       	push   $0x1386b
   1229a:	68 ac 38 01 00       	push   $0x138ac
   1229f:	6a 49                	push   $0x49
   122a1:	68 14 38 01 00       	push   $0x13814
   122a6:	e8 5f fe ff ff       	call   1210a <pannic>
   122ab:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   122ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122b5:	e9 92 00 00 00       	jmp    1234c <bitmap_set_bit+0xea>
        if (bit) {
   122ba:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   122be:	74 42                	je     12302 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   122c0:	8b 45 08             	mov    0x8(%ebp),%eax
   122c3:	8b 48 04             	mov    0x4(%eax),%ecx
   122c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   122c9:	8d 50 07             	lea    0x7(%eax),%edx
   122cc:	85 c0                	test   %eax,%eax
   122ce:	0f 48 c2             	cmovs  %edx,%eax
   122d1:	c1 f8 03             	sar    $0x3,%eax
   122d4:	89 c2                	mov    %eax,%edx
   122d6:	89 d0                	mov    %edx,%eax
   122d8:	01 c8                	add    %ecx,%eax
   122da:	0f b6 00             	movzbl (%eax),%eax
   122dd:	89 c6                	mov    %eax,%esi
   122df:	8b 45 0c             	mov    0xc(%ebp),%eax
   122e2:	83 e0 07             	and    $0x7,%eax
   122e5:	bb 01 00 00 00       	mov    $0x1,%ebx
   122ea:	89 c1                	mov    %eax,%ecx
   122ec:	d3 e3                	shl    %cl,%ebx
   122ee:	89 d8                	mov    %ebx,%eax
   122f0:	89 f1                	mov    %esi,%ecx
   122f2:	09 c1                	or     %eax,%ecx
   122f4:	8b 45 08             	mov    0x8(%ebp),%eax
   122f7:	8b 40 04             	mov    0x4(%eax),%eax
   122fa:	01 d0                	add    %edx,%eax
   122fc:	89 ca                	mov    %ecx,%edx
   122fe:	88 10                	mov    %dl,(%eax)
   12300:	eb 42                	jmp    12344 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12302:	8b 45 08             	mov    0x8(%ebp),%eax
   12305:	8b 48 04             	mov    0x4(%eax),%ecx
   12308:	8b 45 0c             	mov    0xc(%ebp),%eax
   1230b:	8d 50 07             	lea    0x7(%eax),%edx
   1230e:	85 c0                	test   %eax,%eax
   12310:	0f 48 c2             	cmovs  %edx,%eax
   12313:	c1 f8 03             	sar    $0x3,%eax
   12316:	89 c2                	mov    %eax,%edx
   12318:	89 d0                	mov    %edx,%eax
   1231a:	01 c8                	add    %ecx,%eax
   1231c:	0f b6 00             	movzbl (%eax),%eax
   1231f:	89 c6                	mov    %eax,%esi
   12321:	8b 45 0c             	mov    0xc(%ebp),%eax
   12324:	83 e0 07             	and    $0x7,%eax
   12327:	bb 01 00 00 00       	mov    $0x1,%ebx
   1232c:	89 c1                	mov    %eax,%ecx
   1232e:	d3 e3                	shl    %cl,%ebx
   12330:	89 d8                	mov    %ebx,%eax
   12332:	f7 d0                	not    %eax
   12334:	89 f1                	mov    %esi,%ecx
   12336:	21 c1                	and    %eax,%ecx
   12338:	8b 45 08             	mov    0x8(%ebp),%eax
   1233b:	8b 40 04             	mov    0x4(%eax),%eax
   1233e:	01 d0                	add    %edx,%eax
   12340:	89 ca                	mov    %ecx,%edx
   12342:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12344:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12348:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1234c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1234f:	3b 45 10             	cmp    0x10(%ebp),%eax
   12352:	7d 0e                	jge    12362 <bitmap_set_bit+0x100>
   12354:	8b 45 08             	mov    0x8(%ebp),%eax
   12357:	8b 00                	mov    (%eax),%eax
   12359:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1235c:	0f 8c 58 ff ff ff    	jl     122ba <bitmap_set_bit+0x58>
        }
    }
}
   12362:	90                   	nop
   12363:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12366:	5b                   	pop    %ebx
   12367:	5e                   	pop    %esi
   12368:	5d                   	pop    %ebp
   12369:	c3                   	ret    

0001236a <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1236a:	55                   	push   %ebp
   1236b:	89 e5                	mov    %esp,%ebp
   1236d:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12370:	83 ec 08             	sub    $0x8,%esp
   12373:	ff 75 0c             	push   0xc(%ebp)
   12376:	ff 75 08             	push   0x8(%ebp)
   12379:	e8 6c fe ff ff       	call   121ea <bitmap_get_bit>
   1237e:	83 c4 10             	add    $0x10,%esp
   12381:	84 c0                	test   %al,%al
   12383:	0f 95 c0             	setne  %al
   12386:	0f b6 c0             	movzbl %al,%eax
}
   12389:	c9                   	leave  
   1238a:	c3                   	ret    

0001238b <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   1238b:	55                   	push   %ebp
   1238c:	89 e5                	mov    %esp,%ebp
   1238e:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12391:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12395:	75 19                	jne    123b0 <bitmap_alloc_nbits+0x25>
   12397:	68 fc 37 01 00       	push   $0x137fc
   1239c:	68 bc 38 01 00       	push   $0x138bc
   123a1:	6a 68                	push   $0x68
   123a3:	68 14 38 01 00       	push   $0x13814
   123a8:	e8 5d fd ff ff       	call   1210a <pannic>
   123ad:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   123b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123b4:	79 19                	jns    123cf <bitmap_alloc_nbits+0x44>
   123b6:	68 84 38 01 00       	push   $0x13884
   123bb:	68 bc 38 01 00       	push   $0x138bc
   123c0:	6a 69                	push   $0x69
   123c2:	68 14 38 01 00       	push   $0x13814
   123c7:	e8 3e fd ff ff       	call   1210a <pannic>
   123cc:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   123cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   123d6:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   123dd:	e9 8f 00 00 00       	jmp    12471 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   123e2:	83 ec 08             	sub    $0x8,%esp
   123e5:	ff 75 f4             	push   -0xc(%ebp)
   123e8:	ff 75 08             	push   0x8(%ebp)
   123eb:	e8 fa fd ff ff       	call   121ea <bitmap_get_bit>
   123f0:	83 c4 10             	add    $0x10,%esp
   123f3:	0f b6 c0             	movzbl %al,%eax
   123f6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   123f9:	74 06                	je     12401 <bitmap_alloc_nbits+0x76>
            search_index++;
   123fb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   123ff:	eb 70                	jmp    12471 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12401:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12404:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12407:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   1240e:	eb 2d                	jmp    1243d <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12410:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12413:	8d 50 01             	lea    0x1(%eax),%edx
   12416:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12419:	83 ec 08             	sub    $0x8,%esp
   1241c:	50                   	push   %eax
   1241d:	ff 75 08             	push   0x8(%ebp)
   12420:	e8 c5 fd ff ff       	call   121ea <bitmap_get_bit>
   12425:	83 c4 10             	add    $0x10,%esp
   12428:	0f b6 c0             	movzbl %al,%eax
   1242b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1242e:	74 09                	je     12439 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12430:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12437:	eb 16                	jmp    1244f <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12439:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1243d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12440:	3b 45 10             	cmp    0x10(%ebp),%eax
   12443:	7d 0a                	jge    1244f <bitmap_alloc_nbits+0xc4>
   12445:	8b 45 08             	mov    0x8(%ebp),%eax
   12448:	8b 00                	mov    (%eax),%eax
   1244a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1244d:	7c c1                	jl     12410 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   1244f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12453:	74 1c                	je     12471 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12455:	8b 45 0c             	mov    0xc(%ebp),%eax
   12458:	f7 d0                	not    %eax
   1245a:	50                   	push   %eax
   1245b:	ff 75 10             	push   0x10(%ebp)
   1245e:	ff 75 f0             	push   -0x10(%ebp)
   12461:	ff 75 08             	push   0x8(%ebp)
   12464:	e8 f9 fd ff ff       	call   12262 <bitmap_set_bit>
   12469:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1246c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1246f:	eb 13                	jmp    12484 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12471:	8b 45 08             	mov    0x8(%ebp),%eax
   12474:	8b 00                	mov    (%eax),%eax
   12476:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12479:	0f 8c 63 ff ff ff    	jl     123e2 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   1247f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12484:	c9                   	leave  
   12485:	c3                   	ret    

00012486 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12486:	55                   	push   %ebp
   12487:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12489:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1248d:	74 3b                	je     124ca <kernel_strcpy+0x44>
   1248f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12493:	74 35                	je     124ca <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12495:	eb 17                	jmp    124ae <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12497:	8b 55 0c             	mov    0xc(%ebp),%edx
   1249a:	8d 42 01             	lea    0x1(%edx),%eax
   1249d:	89 45 0c             	mov    %eax,0xc(%ebp)
   124a0:	8b 45 08             	mov    0x8(%ebp),%eax
   124a3:	8d 48 01             	lea    0x1(%eax),%ecx
   124a6:	89 4d 08             	mov    %ecx,0x8(%ebp)
   124a9:	0f b6 12             	movzbl (%edx),%edx
   124ac:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   124ae:	8b 45 08             	mov    0x8(%ebp),%eax
   124b1:	0f b6 00             	movzbl (%eax),%eax
   124b4:	84 c0                	test   %al,%al
   124b6:	74 0a                	je     124c2 <kernel_strcpy+0x3c>
   124b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   124bb:	0f b6 00             	movzbl (%eax),%eax
   124be:	84 c0                	test   %al,%al
   124c0:	75 d5                	jne    12497 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   124c2:	8b 45 08             	mov    0x8(%ebp),%eax
   124c5:	c6 00 00             	movb   $0x0,(%eax)
   124c8:	eb 01                	jmp    124cb <kernel_strcpy+0x45>
    if (!dest || !src) return;
   124ca:	90                   	nop
    
}
   124cb:	5d                   	pop    %ebp
   124cc:	c3                   	ret    

000124cd <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   124cd:	55                   	push   %ebp
   124ce:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   124d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124d4:	74 45                	je     1251b <kernel_strncpy+0x4e>
   124d6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124da:	74 3f                	je     1251b <kernel_strncpy+0x4e>
   124dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124e0:	74 39                	je     1251b <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   124e2:	eb 17                	jmp    124fb <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   124e4:	8b 55 0c             	mov    0xc(%ebp),%edx
   124e7:	8d 42 01             	lea    0x1(%edx),%eax
   124ea:	89 45 0c             	mov    %eax,0xc(%ebp)
   124ed:	8b 45 08             	mov    0x8(%ebp),%eax
   124f0:	8d 48 01             	lea    0x1(%eax),%ecx
   124f3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   124f6:	0f b6 12             	movzbl (%edx),%edx
   124f9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   124fb:	8b 45 10             	mov    0x10(%ebp),%eax
   124fe:	8d 50 ff             	lea    -0x1(%eax),%edx
   12501:	89 55 10             	mov    %edx,0x10(%ebp)
   12504:	83 f8 01             	cmp    $0x1,%eax
   12507:	7e 0a                	jle    12513 <kernel_strncpy+0x46>
   12509:	8b 45 0c             	mov    0xc(%ebp),%eax
   1250c:	0f b6 00             	movzbl (%eax),%eax
   1250f:	84 c0                	test   %al,%al
   12511:	75 d1                	jne    124e4 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12513:	8b 45 08             	mov    0x8(%ebp),%eax
   12516:	c6 00 00             	movb   $0x0,(%eax)
   12519:	eb 01                	jmp    1251c <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   1251b:	90                   	nop
}
   1251c:	5d                   	pop    %ebp
   1251d:	c3                   	ret    

0001251e <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1251e:	55                   	push   %ebp
   1251f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12521:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12525:	74 06                	je     1252d <kernel_strncmp+0xf>
   12527:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1252b:	75 0f                	jne    1253c <kernel_strncmp+0x1e>
   1252d:	b8 00 00 00 00       	mov    $0x0,%eax
   12532:	eb 52                	jmp    12586 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12534:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12538:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1253c:	8b 45 08             	mov    0x8(%ebp),%eax
   1253f:	0f b6 00             	movzbl (%eax),%eax
   12542:	84 c0                	test   %al,%al
   12544:	74 24                	je     1256a <kernel_strncmp+0x4c>
   12546:	8b 45 0c             	mov    0xc(%ebp),%eax
   12549:	0f b6 00             	movzbl (%eax),%eax
   1254c:	84 c0                	test   %al,%al
   1254e:	74 1a                	je     1256a <kernel_strncmp+0x4c>
   12550:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12554:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12558:	74 10                	je     1256a <kernel_strncmp+0x4c>
   1255a:	8b 45 08             	mov    0x8(%ebp),%eax
   1255d:	0f b6 10             	movzbl (%eax),%edx
   12560:	8b 45 0c             	mov    0xc(%ebp),%eax
   12563:	0f b6 00             	movzbl (%eax),%eax
   12566:	38 c2                	cmp    %al,%dl
   12568:	74 ca                	je     12534 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   1256a:	8b 45 08             	mov    0x8(%ebp),%eax
   1256d:	0f b6 10             	movzbl (%eax),%edx
   12570:	8b 45 0c             	mov    0xc(%ebp),%eax
   12573:	0f b6 00             	movzbl (%eax),%eax
   12576:	38 c2                	cmp    %al,%dl
   12578:	7e 07                	jle    12581 <kernel_strncmp+0x63>
   1257a:	b8 01 00 00 00       	mov    $0x1,%eax
   1257f:	eb 05                	jmp    12586 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12581:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12586:	5d                   	pop    %ebp
   12587:	c3                   	ret    

00012588 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12588:	55                   	push   %ebp
   12589:	89 e5                	mov    %esp,%ebp
   1258b:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   1258e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12592:	75 07                	jne    1259b <kernel_strlen+0x13>
   12594:	b8 00 00 00 00       	mov    $0x0,%eax
   12599:	eb 20                	jmp    125bb <kernel_strlen+0x33>

    int len = 0;
   1259b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   125a2:	eb 04                	jmp    125a8 <kernel_strlen+0x20>
   125a4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   125a8:	8b 45 08             	mov    0x8(%ebp),%eax
   125ab:	8d 50 01             	lea    0x1(%eax),%edx
   125ae:	89 55 08             	mov    %edx,0x8(%ebp)
   125b1:	0f b6 00             	movzbl (%eax),%eax
   125b4:	84 c0                	test   %al,%al
   125b6:	75 ec                	jne    125a4 <kernel_strlen+0x1c>

    return len;
   125b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   125bb:	c9                   	leave  
   125bc:	c3                   	ret    

000125bd <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   125bd:	55                   	push   %ebp
   125be:	89 e5                	mov    %esp,%ebp
   125c0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   125c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125c7:	74 40                	je     12609 <kernel_memcpy+0x4c>
   125c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125cd:	74 3a                	je     12609 <kernel_memcpy+0x4c>
   125cf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125d3:	74 34                	je     12609 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   125d5:	8b 45 08             	mov    0x8(%ebp),%eax
   125d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   125db:	8b 45 0c             	mov    0xc(%ebp),%eax
   125de:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   125e1:	eb 17                	jmp    125fa <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   125e3:	8b 55 f8             	mov    -0x8(%ebp),%edx
   125e6:	8d 42 01             	lea    0x1(%edx),%eax
   125e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
   125ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125ef:	8d 48 01             	lea    0x1(%eax),%ecx
   125f2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   125f5:	0f b6 12             	movzbl (%edx),%edx
   125f8:	88 10                	mov    %dl,(%eax)
    while (size--) {
   125fa:	8b 45 10             	mov    0x10(%ebp),%eax
   125fd:	8d 50 ff             	lea    -0x1(%eax),%edx
   12600:	89 55 10             	mov    %edx,0x10(%ebp)
   12603:	85 c0                	test   %eax,%eax
   12605:	75 dc                	jne    125e3 <kernel_memcpy+0x26>
   12607:	eb 01                	jmp    1260a <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12609:	90                   	nop
    }
    
}
   1260a:	c9                   	leave  
   1260b:	c3                   	ret    

0001260c <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1260c:	55                   	push   %ebp
   1260d:	89 e5                	mov    %esp,%ebp
   1260f:	83 ec 14             	sub    $0x14,%esp
   12612:	8b 45 0c             	mov    0xc(%ebp),%eax
   12615:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12618:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1261c:	74 2c                	je     1264a <kernel_memset+0x3e>
   1261e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12622:	74 26                	je     1264a <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12624:	8b 45 08             	mov    0x8(%ebp),%eax
   12627:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   1262a:	eb 0f                	jmp    1263b <kernel_memset+0x2f>
        *(d++) = v;
   1262c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1262f:	8d 50 01             	lea    0x1(%eax),%edx
   12632:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12635:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12639:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1263b:	8b 45 10             	mov    0x10(%ebp),%eax
   1263e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12641:	89 55 10             	mov    %edx,0x10(%ebp)
   12644:	85 c0                	test   %eax,%eax
   12646:	75 e4                	jne    1262c <kernel_memset+0x20>
   12648:	eb 01                	jmp    1264b <kernel_memset+0x3f>
    if (!dest || !size) return;
   1264a:	90                   	nop
    }
    
}
   1264b:	c9                   	leave  
   1264c:	c3                   	ret    

0001264d <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1264d:	55                   	push   %ebp
   1264e:	89 e5                	mov    %esp,%ebp
   12650:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12653:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12657:	74 0c                	je     12665 <kernel_memcmp+0x18>
   12659:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1265d:	74 06                	je     12665 <kernel_memcmp+0x18>
   1265f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12663:	75 07                	jne    1266c <kernel_memcmp+0x1f>
   12665:	b8 00 00 00 00       	mov    $0x0,%eax
   1266a:	eb 63                	jmp    126cf <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1266c:	8b 45 08             	mov    0x8(%ebp),%eax
   1266f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12672:	8b 45 0c             	mov    0xc(%ebp),%eax
   12675:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12678:	eb 08                	jmp    12682 <kernel_memcmp+0x35>
        d1++;
   1267a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   1267e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12682:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12686:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1268a:	74 10                	je     1269c <kernel_memcmp+0x4f>
   1268c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1268f:	0f b6 10             	movzbl (%eax),%edx
   12692:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12695:	0f b6 00             	movzbl (%eax),%eax
   12698:	38 c2                	cmp    %al,%dl
   1269a:	74 de                	je     1267a <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   1269c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1269f:	0f b6 10             	movzbl (%eax),%edx
   126a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126a5:	0f b6 00             	movzbl (%eax),%eax
   126a8:	38 c2                	cmp    %al,%dl
   126aa:	76 07                	jbe    126b3 <kernel_memcmp+0x66>
   126ac:	b8 01 00 00 00       	mov    $0x1,%eax
   126b1:	eb 1c                	jmp    126cf <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   126b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126b6:	0f b6 10             	movzbl (%eax),%edx
   126b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126bc:	0f b6 00             	movzbl (%eax),%eax
   126bf:	38 c2                	cmp    %al,%dl
   126c1:	73 07                	jae    126ca <kernel_memcmp+0x7d>
   126c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126c8:	eb 05                	jmp    126cf <kernel_memcmp+0x82>
    else return 0;
   126ca:	b8 00 00 00 00       	mov    $0x0,%eax

}
   126cf:	c9                   	leave  
   126d0:	c3                   	ret    

000126d1 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   126d1:	55                   	push   %ebp
   126d2:	89 e5                	mov    %esp,%ebp
   126d4:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   126d7:	8d 45 10             	lea    0x10(%ebp),%eax
   126da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   126dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126e0:	83 ec 04             	sub    $0x4,%esp
   126e3:	50                   	push   %eax
   126e4:	ff 75 0c             	push   0xc(%ebp)
   126e7:	ff 75 08             	push   0x8(%ebp)
   126ea:	e8 06 00 00 00       	call   126f5 <kernel_vsprintf>
   126ef:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   126f2:	90                   	nop
   126f3:	c9                   	leave  
   126f4:	c3                   	ret    

000126f5 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   126f5:	55                   	push   %ebp
   126f6:	89 e5                	mov    %esp,%ebp
   126f8:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   126fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12702:	8b 45 08             	mov    0x8(%ebp),%eax
   12705:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12708:	e9 68 01 00 00       	jmp    12875 <kernel_vsprintf+0x180>
        switch (state) {
   1270d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12711:	74 0b                	je     1271e <kernel_vsprintf+0x29>
   12713:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12717:	74 2b                	je     12744 <kernel_vsprintf+0x4f>
   12719:	e9 56 01 00 00       	jmp    12874 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1271e:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12722:	75 0c                	jne    12730 <kernel_vsprintf+0x3b>
   12724:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1272b:	e9 45 01 00 00       	jmp    12875 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12730:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12733:	8d 50 01             	lea    0x1(%eax),%edx
   12736:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12739:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1273d:	88 10                	mov    %dl,(%eax)
            break;
   1273f:	e9 31 01 00 00       	jmp    12875 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12744:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12748:	75 47                	jne    12791 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   1274a:	8b 45 10             	mov    0x10(%ebp),%eax
   1274d:	8d 50 04             	lea    0x4(%eax),%edx
   12750:	89 55 10             	mov    %edx,0x10(%ebp)
   12753:	8b 00                	mov    (%eax),%eax
   12755:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12758:	ff 75 ec             	push   -0x14(%ebp)
   1275b:	e8 28 fe ff ff       	call   12588 <kernel_strlen>
   12760:	83 c4 04             	add    $0x4,%esp
   12763:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12766:	eb 17                	jmp    1277f <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12768:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1276b:	8d 42 01             	lea    0x1(%edx),%eax
   1276e:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12771:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12774:	8d 48 01             	lea    0x1(%eax),%ecx
   12777:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1277a:	0f b6 12             	movzbl (%edx),%edx
   1277d:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1277f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12782:	8d 50 ff             	lea    -0x1(%eax),%edx
   12785:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12788:	85 c0                	test   %eax,%eax
   1278a:	75 dc                	jne    12768 <kernel_vsprintf+0x73>
   1278c:	e9 da 00 00 00       	jmp    1286b <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12791:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12795:	75 37                	jne    127ce <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12797:	8b 45 10             	mov    0x10(%ebp),%eax
   1279a:	8d 50 04             	lea    0x4(%eax),%edx
   1279d:	89 55 10             	mov    %edx,0x10(%ebp)
   127a0:	8b 00                	mov    (%eax),%eax
   127a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   127a5:	83 ec 04             	sub    $0x4,%esp
   127a8:	6a 0a                	push   $0xa
   127aa:	ff 75 d8             	push   -0x28(%ebp)
   127ad:	ff 75 f0             	push   -0x10(%ebp)
   127b0:	e8 dd 00 00 00       	call   12892 <kernel_itoa>
   127b5:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   127b8:	83 ec 0c             	sub    $0xc,%esp
   127bb:	ff 75 f0             	push   -0x10(%ebp)
   127be:	e8 c5 fd ff ff       	call   12588 <kernel_strlen>
   127c3:	83 c4 10             	add    $0x10,%esp
   127c6:	01 45 f0             	add    %eax,-0x10(%ebp)
   127c9:	e9 9d 00 00 00       	jmp    1286b <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   127ce:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   127d2:	74 06                	je     127da <kernel_vsprintf+0xe5>
   127d4:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   127d8:	75 34                	jne    1280e <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   127da:	8b 45 10             	mov    0x10(%ebp),%eax
   127dd:	8d 50 04             	lea    0x4(%eax),%edx
   127e0:	89 55 10             	mov    %edx,0x10(%ebp)
   127e3:	8b 00                	mov    (%eax),%eax
   127e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   127e8:	83 ec 04             	sub    $0x4,%esp
   127eb:	6a 10                	push   $0x10
   127ed:	ff 75 dc             	push   -0x24(%ebp)
   127f0:	ff 75 f0             	push   -0x10(%ebp)
   127f3:	e8 9a 00 00 00       	call   12892 <kernel_itoa>
   127f8:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   127fb:	83 ec 0c             	sub    $0xc,%esp
   127fe:	ff 75 f0             	push   -0x10(%ebp)
   12801:	e8 82 fd ff ff       	call   12588 <kernel_strlen>
   12806:	83 c4 10             	add    $0x10,%esp
   12809:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   1280c:	eb 5d                	jmp    1286b <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1280e:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12812:	75 34                	jne    12848 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12814:	8b 45 10             	mov    0x10(%ebp),%eax
   12817:	8d 50 04             	lea    0x4(%eax),%edx
   1281a:	89 55 10             	mov    %edx,0x10(%ebp)
   1281d:	8b 00                	mov    (%eax),%eax
   1281f:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12822:	83 ec 04             	sub    $0x4,%esp
   12825:	6a 02                	push   $0x2
   12827:	ff 75 e0             	push   -0x20(%ebp)
   1282a:	ff 75 f0             	push   -0x10(%ebp)
   1282d:	e8 60 00 00 00       	call   12892 <kernel_itoa>
   12832:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12835:	83 ec 0c             	sub    $0xc,%esp
   12838:	ff 75 f0             	push   -0x10(%ebp)
   1283b:	e8 48 fd ff ff       	call   12588 <kernel_strlen>
   12840:	83 c4 10             	add    $0x10,%esp
   12843:	01 45 f0             	add    %eax,-0x10(%ebp)
   12846:	eb 23                	jmp    1286b <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12848:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1284c:	75 1d                	jne    1286b <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1284e:	8b 45 10             	mov    0x10(%ebp),%eax
   12851:	8d 50 04             	lea    0x4(%eax),%edx
   12854:	89 55 10             	mov    %edx,0x10(%ebp)
   12857:	8b 00                	mov    (%eax),%eax
   12859:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   1285c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1285f:	8d 50 01             	lea    0x1(%eax),%edx
   12862:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12865:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12869:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   1286b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12872:	eb 01                	jmp    12875 <kernel_vsprintf+0x180>
        default:
            break;
   12874:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12875:	8b 45 0c             	mov    0xc(%ebp),%eax
   12878:	8d 50 01             	lea    0x1(%eax),%edx
   1287b:	89 55 0c             	mov    %edx,0xc(%ebp)
   1287e:	0f b6 00             	movzbl (%eax),%eax
   12881:	88 45 e7             	mov    %al,-0x19(%ebp)
   12884:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12888:	0f 85 7f fe ff ff    	jne    1270d <kernel_vsprintf+0x18>
        }
    }
    

}
   1288e:	90                   	nop
   1288f:	90                   	nop
   12890:	c9                   	leave  
   12891:	c3                   	ret    

00012892 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   12892:	55                   	push   %ebp
   12893:	89 e5                	mov    %esp,%ebp
   12895:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   1289b:	8b 45 08             	mov    0x8(%ebp),%eax
   1289e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   128a1:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   128a5:	74 1d                	je     128c4 <kernel_itoa+0x32>
   128a7:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   128ab:	74 17                	je     128c4 <kernel_itoa+0x32>
   128ad:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128b1:	74 11                	je     128c4 <kernel_itoa+0x32>
   128b3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128b7:	74 0b                	je     128c4 <kernel_itoa+0x32>
        *buf = '\0';
   128b9:	8b 45 08             	mov    0x8(%ebp),%eax
   128bc:	c6 00 00             	movb   $0x0,(%eax)
        return;
   128bf:	e9 a2 00 00 00       	jmp    12966 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   128c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128c8:	79 11                	jns    128db <kernel_itoa+0x49>
        *(p++) = '-';
   128ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128cd:	8d 50 01             	lea    0x1(%eax),%edx
   128d0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128d3:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   128d6:	f7 5d 0c             	negl   0xc(%ebp)
   128d9:	eb 1a                	jmp    128f5 <kernel_itoa+0x63>
    } else if (num == 0) {
   128db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128df:	75 14                	jne    128f5 <kernel_itoa+0x63>
        *(p++) = '0';
   128e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128e4:	8d 50 01             	lea    0x1(%eax),%edx
   128e7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128ea:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   128ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128f0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   128f3:	eb 71                	jmp    12966 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   128f5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   128fc:	eb 2e                	jmp    1292c <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   128fe:	8b 0d 2c 3a 01 00    	mov    0x13a2c,%ecx
   12904:	8b 45 0c             	mov    0xc(%ebp),%eax
   12907:	99                   	cltd   
   12908:	f7 7d 10             	idivl  0x10(%ebp)
   1290b:	89 d0                	mov    %edx,%eax
   1290d:	01 c1                	add    %eax,%ecx
   1290f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12912:	8d 50 01             	lea    0x1(%eax),%edx
   12915:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12918:	0f b6 11             	movzbl (%ecx),%edx
   1291b:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12922:	8b 45 0c             	mov    0xc(%ebp),%eax
   12925:	99                   	cltd   
   12926:	f7 7d 10             	idivl  0x10(%ebp)
   12929:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1292c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12930:	7f cc                	jg     128fe <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12932:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12935:	83 e8 01             	sub    $0x1,%eax
   12938:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1293b:	eb 1d                	jmp    1295a <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1293d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12940:	8d 50 01             	lea    0x1(%eax),%edx
   12943:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12946:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   1294c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1294f:	01 ca                	add    %ecx,%edx
   12951:	0f b6 12             	movzbl (%edx),%edx
   12954:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12956:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   1295a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1295e:	79 dd                	jns    1293d <kernel_itoa+0xab>
    }
    *p = '\0';
   12960:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12963:	c6 00 00             	movb   $0x0,(%eax)
   12966:	c9                   	leave  
   12967:	c3                   	ret    

00012968 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12968:	55                   	push   %ebp
   12969:	89 e5                	mov    %esp,%ebp
   1296b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1296e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12972:	75 19                	jne    1298d <list_is_empty+0x25>
   12974:	68 e0 38 01 00       	push   $0x138e0
   12979:	68 c4 39 01 00       	push   $0x139c4
   1297e:	6a 38                	push   $0x38
   12980:	68 f4 38 01 00       	push   $0x138f4
   12985:	e8 80 f7 ff ff       	call   1210a <pannic>
   1298a:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1298d:	8b 45 08             	mov    0x8(%ebp),%eax
   12990:	8b 40 08             	mov    0x8(%eax),%eax
   12993:	85 c0                	test   %eax,%eax
   12995:	0f 94 c0             	sete   %al
   12998:	0f b6 c0             	movzbl %al,%eax
}
   1299b:	c9                   	leave  
   1299c:	c3                   	ret    

0001299d <list_get_size>:
static inline int list_get_size(list_t *list) {
   1299d:	55                   	push   %ebp
   1299e:	89 e5                	mov    %esp,%ebp
   129a0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   129a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129a7:	75 19                	jne    129c2 <list_get_size+0x25>
   129a9:	68 e0 38 01 00       	push   $0x138e0
   129ae:	68 fc 39 01 00       	push   $0x139fc
   129b3:	6a 3e                	push   $0x3e
   129b5:	68 f4 38 01 00       	push   $0x138f4
   129ba:	e8 4b f7 ff ff       	call   1210a <pannic>
   129bf:	83 c4 10             	add    $0x10,%esp
    return list->size;
   129c2:	8b 45 08             	mov    0x8(%ebp),%eax
   129c5:	8b 40 08             	mov    0x8(%eax),%eax
}
   129c8:	c9                   	leave  
   129c9:	c3                   	ret    

000129ca <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   129ca:	55                   	push   %ebp
   129cb:	89 e5                	mov    %esp,%ebp
   129cd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   129d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129d4:	74 06                	je     129dc <list_insert_first+0x12>
   129d6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129da:	75 19                	jne    129f5 <list_insert_first+0x2b>
   129dc:	68 34 39 01 00       	push   $0x13934
   129e1:	68 b0 39 01 00       	push   $0x139b0
   129e6:	6a 0f                	push   $0xf
   129e8:	68 64 39 01 00       	push   $0x13964
   129ed:	e8 18 f7 ff ff       	call   1210a <pannic>
   129f2:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   129f5:	8b 45 08             	mov    0x8(%ebp),%eax
   129f8:	8b 10                	mov    (%eax),%edx
   129fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   129fd:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12a00:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12a09:	83 ec 0c             	sub    $0xc,%esp
   12a0c:	ff 75 08             	push   0x8(%ebp)
   12a0f:	e8 54 ff ff ff       	call   12968 <list_is_empty>
   12a14:	83 c4 10             	add    $0x10,%esp
   12a17:	85 c0                	test   %eax,%eax
   12a19:	74 16                	je     12a31 <list_insert_first+0x67>
        list->first = list->last = node;
   12a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a21:	89 50 04             	mov    %edx,0x4(%eax)
   12a24:	8b 45 08             	mov    0x8(%ebp),%eax
   12a27:	8b 50 04             	mov    0x4(%eax),%edx
   12a2a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2d:	89 10                	mov    %edx,(%eax)
   12a2f:	eb 12                	jmp    12a43 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12a31:	8b 45 08             	mov    0x8(%ebp),%eax
   12a34:	8b 00                	mov    (%eax),%eax
   12a36:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a39:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12a3b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a41:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12a43:	8b 45 08             	mov    0x8(%ebp),%eax
   12a46:	8b 40 08             	mov    0x8(%eax),%eax
   12a49:	8d 50 01             	lea    0x1(%eax),%edx
   12a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4f:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a52:	90                   	nop
   12a53:	c9                   	leave  
   12a54:	c3                   	ret    

00012a55 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12a55:	55                   	push   %ebp
   12a56:	89 e5                	mov    %esp,%ebp
   12a58:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12a5b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a5f:	74 06                	je     12a67 <list_insert_last+0x12>
   12a61:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a65:	75 19                	jne    12a80 <list_insert_last+0x2b>
   12a67:	68 34 39 01 00       	push   $0x13934
   12a6c:	68 d4 39 01 00       	push   $0x139d4
   12a71:	6a 1f                	push   $0x1f
   12a73:	68 64 39 01 00       	push   $0x13964
   12a78:	e8 8d f6 ff ff       	call   1210a <pannic>
   12a7d:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12a80:	8b 45 08             	mov    0x8(%ebp),%eax
   12a83:	8b 50 04             	mov    0x4(%eax),%edx
   12a86:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a89:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12a8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a8e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12a95:	83 ec 0c             	sub    $0xc,%esp
   12a98:	ff 75 08             	push   0x8(%ebp)
   12a9b:	e8 c8 fe ff ff       	call   12968 <list_is_empty>
   12aa0:	83 c4 10             	add    $0x10,%esp
   12aa3:	85 c0                	test   %eax,%eax
   12aa5:	74 16                	je     12abd <list_insert_last+0x68>
        list->first = list->last = node;
   12aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aaa:	8b 55 0c             	mov    0xc(%ebp),%edx
   12aad:	89 50 04             	mov    %edx,0x4(%eax)
   12ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab3:	8b 50 04             	mov    0x4(%eax),%edx
   12ab6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab9:	89 10                	mov    %edx,(%eax)
   12abb:	eb 15                	jmp    12ad2 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12abd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac0:	8b 40 04             	mov    0x4(%eax),%eax
   12ac3:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ac6:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   12acc:	8b 55 0c             	mov    0xc(%ebp),%edx
   12acf:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad5:	8b 40 08             	mov    0x8(%eax),%eax
   12ad8:	8d 50 01             	lea    0x1(%eax),%edx
   12adb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ade:	89 50 08             	mov    %edx,0x8(%eax)

}
   12ae1:	90                   	nop
   12ae2:	c9                   	leave  
   12ae3:	c3                   	ret    

00012ae4 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12ae4:	55                   	push   %ebp
   12ae5:	89 e5                	mov    %esp,%ebp
   12ae7:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12aea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12aee:	75 19                	jne    12b09 <list_remove_first+0x25>
   12af0:	68 9a 39 01 00       	push   $0x1399a
   12af5:	68 e8 39 01 00       	push   $0x139e8
   12afa:	6a 31                	push   $0x31
   12afc:	68 64 39 01 00       	push   $0x13964
   12b01:	e8 04 f6 ff ff       	call   1210a <pannic>
   12b06:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12b09:	83 ec 0c             	sub    $0xc,%esp
   12b0c:	ff 75 08             	push   0x8(%ebp)
   12b0f:	e8 54 fe ff ff       	call   12968 <list_is_empty>
   12b14:	83 c4 10             	add    $0x10,%esp
   12b17:	85 c0                	test   %eax,%eax
   12b19:	74 07                	je     12b22 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12b1b:	b8 00 00 00 00       	mov    $0x0,%eax
   12b20:	eb 71                	jmp    12b93 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12b22:	8b 45 08             	mov    0x8(%ebp),%eax
   12b25:	8b 00                	mov    (%eax),%eax
   12b27:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12b2a:	83 ec 0c             	sub    $0xc,%esp
   12b2d:	ff 75 08             	push   0x8(%ebp)
   12b30:	e8 68 fe ff ff       	call   1299d <list_get_size>
   12b35:	83 c4 10             	add    $0x10,%esp
   12b38:	83 f8 01             	cmp    $0x1,%eax
   12b3b:	75 17                	jne    12b54 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b40:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b47:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4a:	8b 50 04             	mov    0x4(%eax),%edx
   12b4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b50:	89 10                	mov    %edx,(%eax)
   12b52:	eb 18                	jmp    12b6c <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12b54:	8b 45 08             	mov    0x8(%ebp),%eax
   12b57:	8b 00                	mov    (%eax),%eax
   12b59:	8b 50 04             	mov    0x4(%eax),%edx
   12b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5f:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12b61:	8b 45 08             	mov    0x8(%ebp),%eax
   12b64:	8b 00                	mov    (%eax),%eax
   12b66:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12b6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6f:	8b 40 08             	mov    0x8(%eax),%eax
   12b72:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b75:	8b 45 08             	mov    0x8(%ebp),%eax
   12b78:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b7e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b85:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b88:	8b 50 04             	mov    0x4(%eax),%edx
   12b8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b8e:	89 10                	mov    %edx,(%eax)
    return ret;
   12b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12b93:	c9                   	leave  
   12b94:	c3                   	ret    

00012b95 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12b95:	55                   	push   %ebp
   12b96:	89 e5                	mov    %esp,%ebp
   12b98:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12b9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b9f:	75 19                	jne    12bba <list_remove_last+0x25>
   12ba1:	68 9a 39 01 00       	push   $0x1399a
   12ba6:	68 0c 3a 01 00       	push   $0x13a0c
   12bab:	6a 46                	push   $0x46
   12bad:	68 64 39 01 00       	push   $0x13964
   12bb2:	e8 53 f5 ff ff       	call   1210a <pannic>
   12bb7:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12bba:	83 ec 0c             	sub    $0xc,%esp
   12bbd:	ff 75 08             	push   0x8(%ebp)
   12bc0:	e8 a3 fd ff ff       	call   12968 <list_is_empty>
   12bc5:	83 c4 10             	add    $0x10,%esp
   12bc8:	85 c0                	test   %eax,%eax
   12bca:	74 07                	je     12bd3 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12bcc:	b8 00 00 00 00       	mov    $0x0,%eax
   12bd1:	eb 75                	jmp    12c48 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12bd3:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd6:	8b 40 04             	mov    0x4(%eax),%eax
   12bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12bdc:	83 ec 0c             	sub    $0xc,%esp
   12bdf:	ff 75 08             	push   0x8(%ebp)
   12be2:	e8 b6 fd ff ff       	call   1299d <list_get_size>
   12be7:	83 c4 10             	add    $0x10,%esp
   12bea:	83 f8 01             	cmp    $0x1,%eax
   12bed:	75 17                	jne    12c06 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12bef:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12bf9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bfc:	8b 50 04             	mov    0x4(%eax),%edx
   12bff:	8b 45 08             	mov    0x8(%ebp),%eax
   12c02:	89 10                	mov    %edx,(%eax)
   12c04:	eb 1b                	jmp    12c21 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12c06:	8b 45 08             	mov    0x8(%ebp),%eax
   12c09:	8b 40 04             	mov    0x4(%eax),%eax
   12c0c:	8b 10                	mov    (%eax),%edx
   12c0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c11:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12c14:	8b 45 08             	mov    0x8(%ebp),%eax
   12c17:	8b 40 04             	mov    0x4(%eax),%eax
   12c1a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12c21:	8b 45 08             	mov    0x8(%ebp),%eax
   12c24:	8b 40 08             	mov    0x8(%eax),%eax
   12c27:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c2a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2d:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c33:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c3d:	8b 50 04             	mov    0x4(%eax),%edx
   12c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c43:	89 10                	mov    %edx,(%eax)
    return ret;
   12c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12c48:	c9                   	leave  
   12c49:	c3                   	ret    

00012c4a <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12c4a:	55                   	push   %ebp
   12c4b:	89 e5                	mov    %esp,%ebp
   12c4d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12c50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c54:	74 06                	je     12c5c <list_remove+0x12>
   12c56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c5a:	75 19                	jne    12c75 <list_remove+0x2b>
   12c5c:	68 34 39 01 00       	push   $0x13934
   12c61:	68 20 3a 01 00       	push   $0x13a20
   12c66:	6a 5b                	push   $0x5b
   12c68:	68 64 39 01 00       	push   $0x13964
   12c6d:	e8 98 f4 ff ff       	call   1210a <pannic>
   12c72:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12c75:	83 ec 0c             	sub    $0xc,%esp
   12c78:	ff 75 08             	push   0x8(%ebp)
   12c7b:	e8 e8 fc ff ff       	call   12968 <list_is_empty>
   12c80:	83 c4 10             	add    $0x10,%esp
   12c83:	85 c0                	test   %eax,%eax
   12c85:	74 0a                	je     12c91 <list_remove+0x47>
        return (list_node_t*)0;
   12c87:	b8 00 00 00 00       	mov    $0x0,%eax
   12c8c:	e9 80 00 00 00       	jmp    12d11 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12c91:	8b 45 08             	mov    0x8(%ebp),%eax
   12c94:	8b 00                	mov    (%eax),%eax
   12c96:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c99:	75 0b                	jne    12ca6 <list_remove+0x5c>
   12c9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c9e:	8b 50 04             	mov    0x4(%eax),%edx
   12ca1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca4:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12ca6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca9:	8b 40 04             	mov    0x4(%eax),%eax
   12cac:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12caf:	75 0b                	jne    12cbc <list_remove+0x72>
   12cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cb4:	8b 10                	mov    (%eax),%edx
   12cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   12cb9:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12cbc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cbf:	8b 00                	mov    (%eax),%eax
   12cc1:	85 c0                	test   %eax,%eax
   12cc3:	74 0e                	je     12cd3 <list_remove+0x89>
   12cc5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cc8:	8b 00                	mov    (%eax),%eax
   12cca:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ccd:	8b 52 04             	mov    0x4(%edx),%edx
   12cd0:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12cd3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cd6:	8b 40 04             	mov    0x4(%eax),%eax
   12cd9:	85 c0                	test   %eax,%eax
   12cdb:	74 0d                	je     12cea <list_remove+0xa0>
   12cdd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ce0:	8b 40 04             	mov    0x4(%eax),%eax
   12ce3:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ce6:	8b 12                	mov    (%edx),%edx
   12ce8:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12cea:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ced:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cf7:	8b 50 04             	mov    0x4(%eax),%edx
   12cfa:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cfd:	89 10                	mov    %edx,(%eax)
    list->size--;
   12cff:	8b 45 08             	mov    0x8(%ebp),%eax
   12d02:	8b 40 08             	mov    0x8(%eax),%eax
   12d05:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d08:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0b:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12d0e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d11:	c9                   	leave  
   12d12:	c3                   	ret    

00012d13 <inb>:
static inline uint8_t inb(uint16_t port) {
   12d13:	55                   	push   %ebp
   12d14:	89 e5                	mov    %esp,%ebp
   12d16:	83 ec 14             	sub    $0x14,%esp
   12d19:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12d20:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d24:	89 c2                	mov    %eax,%edx
   12d26:	ec                   	in     (%dx),%al
   12d27:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12d2a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d2e:	c9                   	leave  
   12d2f:	c3                   	ret    

00012d30 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12d30:	55                   	push   %ebp
   12d31:	89 e5                	mov    %esp,%ebp
   12d33:	83 ec 08             	sub    $0x8,%esp
   12d36:	8b 45 08             	mov    0x8(%ebp),%eax
   12d39:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d3c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12d40:	89 d0                	mov    %edx,%eax
   12d42:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12d45:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d49:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d4d:	ee                   	out    %al,(%dx)
}
   12d4e:	90                   	nop
   12d4f:	c9                   	leave  
   12d50:	c3                   	ret    

00012d51 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12d51:	55                   	push   %ebp
   12d52:	89 e5                	mov    %esp,%ebp
   12d54:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12d57:	6a 00                	push   $0x0
   12d59:	68 f9 03 00 00       	push   $0x3f9
   12d5e:	e8 cd ff ff ff       	call   12d30 <outb>
   12d63:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12d66:	68 80 00 00 00       	push   $0x80
   12d6b:	68 fb 03 00 00       	push   $0x3fb
   12d70:	e8 bb ff ff ff       	call   12d30 <outb>
   12d75:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12d78:	6a 03                	push   $0x3
   12d7a:	68 f8 03 00 00       	push   $0x3f8
   12d7f:	e8 ac ff ff ff       	call   12d30 <outb>
   12d84:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12d87:	6a 00                	push   $0x0
   12d89:	68 f9 03 00 00       	push   $0x3f9
   12d8e:	e8 9d ff ff ff       	call   12d30 <outb>
   12d93:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12d96:	6a 03                	push   $0x3
   12d98:	68 fb 03 00 00       	push   $0x3fb
   12d9d:	e8 8e ff ff ff       	call   12d30 <outb>
   12da2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12da5:	68 c7 00 00 00       	push   $0xc7
   12daa:	68 fa 03 00 00       	push   $0x3fa
   12daf:	e8 7c ff ff ff       	call   12d30 <outb>
   12db4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   12db7:	6a 0f                	push   $0xf
   12db9:	68 fc 03 00 00       	push   $0x3fc
   12dbe:	e8 6d ff ff ff       	call   12d30 <outb>
   12dc3:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   12dc6:	83 ec 0c             	sub    $0xc,%esp
   12dc9:	68 f0 e7 02 00       	push   $0x2e7f0
   12dce:	e8 22 ec ff ff       	call   119f5 <mutex_init>
   12dd3:	83 c4 10             	add    $0x10,%esp
}
   12dd6:	90                   	nop
   12dd7:	c9                   	leave  
   12dd8:	c3                   	ret    

00012dd9 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   12dd9:	55                   	push   %ebp
   12dda:	89 e5                	mov    %esp,%ebp
   12ddc:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12de2:	83 ec 04             	sub    $0x4,%esp
   12de5:	68 80 00 00 00       	push   $0x80
   12dea:	6a 00                	push   $0x0
   12dec:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12df2:	50                   	push   %eax
   12df3:	e8 14 f8 ff ff       	call   1260c <kernel_memset>
   12df8:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12dfb:	8d 45 0c             	lea    0xc(%ebp),%eax
   12dfe:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12e04:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12e0a:	83 ec 04             	sub    $0x4,%esp
   12e0d:	50                   	push   %eax
   12e0e:	ff 75 08             	push   0x8(%ebp)
   12e11:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e17:	50                   	push   %eax
   12e18:	e8 d8 f8 ff ff       	call   126f5 <kernel_vsprintf>
   12e1d:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12e20:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e26:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12e29:	83 ec 0c             	sub    $0xc,%esp
   12e2c:	68 f0 e7 02 00       	push   $0x2e7f0
   12e31:	e8 0c ec ff ff       	call   11a42 <mutex_lock>
   12e36:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12e39:	eb 57                	jmp    12e92 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12e3b:	90                   	nop
   12e3c:	83 ec 0c             	sub    $0xc,%esp
   12e3f:	68 fd 03 00 00       	push   $0x3fd
   12e44:	e8 ca fe ff ff       	call   12d13 <inb>
   12e49:	83 c4 10             	add    $0x10,%esp
   12e4c:	0f b6 c0             	movzbl %al,%eax
   12e4f:	83 e0 40             	and    $0x40,%eax
   12e52:	85 c0                	test   %eax,%eax
   12e54:	74 e6                	je     12e3c <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e59:	0f b6 00             	movzbl (%eax),%eax
   12e5c:	3c 0a                	cmp    $0xa,%al
   12e5e:	75 12                	jne    12e72 <log_printf+0x99>
   12e60:	83 ec 08             	sub    $0x8,%esp
   12e63:	6a 0d                	push   $0xd
   12e65:	68 f8 03 00 00       	push   $0x3f8
   12e6a:	e8 c1 fe ff ff       	call   12d30 <outb>
   12e6f:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12e72:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e75:	8d 50 01             	lea    0x1(%eax),%edx
   12e78:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12e7b:	0f b6 00             	movzbl (%eax),%eax
   12e7e:	0f b6 c0             	movzbl %al,%eax
   12e81:	83 ec 08             	sub    $0x8,%esp
   12e84:	50                   	push   %eax
   12e85:	68 f8 03 00 00       	push   $0x3f8
   12e8a:	e8 a1 fe ff ff       	call   12d30 <outb>
   12e8f:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e95:	0f b6 00             	movzbl (%eax),%eax
   12e98:	84 c0                	test   %al,%al
   12e9a:	75 9f                	jne    12e3b <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12e9c:	83 ec 08             	sub    $0x8,%esp
   12e9f:	6a 0d                	push   $0xd
   12ea1:	68 f8 03 00 00       	push   $0x3f8
   12ea6:	e8 85 fe ff ff       	call   12d30 <outb>
   12eab:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12eae:	83 ec 08             	sub    $0x8,%esp
   12eb1:	6a 0a                	push   $0xa
   12eb3:	68 f8 03 00 00       	push   $0x3f8
   12eb8:	e8 73 fe ff ff       	call   12d30 <outb>
   12ebd:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   12ec0:	83 ec 0c             	sub    $0xc,%esp
   12ec3:	68 f0 e7 02 00       	push   $0x2e7f0
   12ec8:	e8 06 ec ff ff       	call   11ad3 <mutex_unlock>
   12ecd:	83 c4 10             	add    $0x10,%esp
   12ed0:	90                   	nop
   12ed1:	c9                   	leave  
   12ed2:	c3                   	ret    
