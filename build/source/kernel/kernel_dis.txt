
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000019f0 memsz 0x00016240 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000157f  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000469  00011580  00011580  00002580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000119ec  000119ec  000029ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00014840  00011a00  00011a00  000029f0  2**5
                  ALLOC
  4 .debug_line   00000bcb  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000451  00000000  00000000  000035bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001819  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000a59  00000000  00000000  00005225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  00005c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a01  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  000067a1  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000914  00000000  00000000  000067cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000115cc l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gdt.c
0001034b l     F .text	00000028 lgdt
00011a00 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
000104e6 l     F .text	00000007 cli
000104ed l     F .text	00000007 sti
000104f4 l     F .text	00000007 hlt
000104fb l     F .text	0000001d inb
00010518 l     F .text	00000021 outb
00010539 l     F .text	00000028 lidt
00021a00 l     O .bss	00000800 idt_table
00010561 l     F .text	000000e9 print_exception_fram
0001064a l     F .text	0000003e do_default_handler
000108d4 l     F .text	00000047 gate_desc_set
0001095b l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010cdc l     F .text	00000021 outb
00022200 l     O .bss	00000004 sys_tick
00010d20 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000119a0 l     O .rodata	0000000c __func__.0
00022220 l     O .bss	00000004 task_1
00022224 l     O .bss	00000004 task_2
00022240 l     O .bss	00001000 init_stack_1
00023240 l     O .bss	00001000 init_stack_2
00000000 l    df *ABS*	00000000 assert.c
00010ed3 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
000119ec l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 log.c
000113f2 l     F .text	0000001d inb
0001140f l     F .text	00000021 outb
00011047 g     F .text	0000004f kernel_memcpy
00010b61 g     F .text	00000098 idt_enable
000107bc g     F .text	0000001c do_handler_segment_not_present
00010c98 g     F .text	0000000b idt_enable_global
00011096 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00011430 g     F .text	00000075 log_init
00010e56 g     F .text	0000007d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00010f10 g     F .text	00000047 kernel_strcpy
00010c8d g     F .text	0000000b idt_disable_global
0001091b g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010714 g     F .text	0000001c do_handler_overflow
00010848 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000107f4 g     F .text	0000001c do_handler_general_protection
000108b8 g     F .text	0000001c do_handler_control_exception
000106a4 g     F .text	0000001c do_handler_divider
00010784 g     F .text	0000001c do_handler_double_fault
00010810 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00010ca3 g     F .text	00000039 pic_send_eoi
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010432 g     F .text	00000070 gdt_init
0001089c g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
000106c0 g     F .text	0000001c do_handler_debug
00024240 g     O .bss	00002000 stack
00010e18 g     F .text	0000003e test_task_2
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000109ee g     F .text	00000173 idt_init
0001074c g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
0001082c g     F .text	0000001c do_handler_fpu_error
00010864 g     F .text	0000001c do_handler_machine_check
00010047 g       .text	00000000 exception_handler_divider
00010f57 g     F .text	00000051 kernel_strncpy
00010d9a g     F .text	00000040 kernel_init
00010000 g       .text	00000000 _start
0001117f g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
000107a0 g     F .text	0000001c do_handler_invalid_tss
00010bf9 g     F .text	00000094 idt_disable
000106dc g     F .text	0000001c do_handler_nmi
00010dda g     F .text	0000003e test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010768 g     F .text	0000001c do_handler_device_unavailable
000110d7 g     F .text	00000084 kernel_memcmp
00010880 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010688 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
0001032d g     F .text	0000001e task_switch_from_to
00011012 g     F .text	00000035 kernel_strlen
00010064 g       .text	00000000 exception_handler_debug
00010373 g     F .text	000000bf segment_desc_set
00010730 g     F .text	0000001c do_handler_bound_range
00010fa8 g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010eda g     F .text	00000036 pannic
000107d8 g     F .text	0000001c do_handler_stack_segment_fault
000106f8 g     F .text	0000001c do_handler_breakpoint
000114a5 g     F .text	000000da log_printf
000102ad g     F .text	00000080 task_init
0001115b g     F .text	00000024 kernel_sprintf
000104a2 g     F .text	00000044 gdt_alloc_desc
0001131c g     F .text	000000d6 kernel_itoa
00010cfd g     F .text	00000023 do_handler_time
00010d82 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 8f 0d 00 00       	call   10d9a <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 62 02 00       	mov    $0x26240,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 2c 0e 00 00       	jmp    10e56 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 4d 06 00 00       	call   10688 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 4c 06 00 00       	call   106a4 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 4b 06 00 00       	call   106c0 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 4a 06 00 00       	call   106dc <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 49 06 00 00       	call   106f8 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 48 06 00 00       	call   10714 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 47 06 00 00       	call   10730 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 46 06 00 00       	call   1074c <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 45 06 00 00       	call   10768 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 46 06 00 00       	call   10784 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 47 06 00 00       	call   107a0 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 48 06 00 00       	call   107bc <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 49 06 00 00       	call   107d8 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 4a 06 00 00       	call   107f4 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 4b 06 00 00       	call   10810 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 4a 06 00 00       	call   1082c <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 4b 06 00 00       	call   10848 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 4a 06 00 00       	call   10864 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 49 06 00 00       	call   10880 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 48 06 00 00       	call   1089c <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 49 06 00 00       	call   108b8 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 71 0a 00 00       	call   10cfd <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <task_init>:
 * 
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @return int 
 */
int task_init(task_t *task, uint32_t entry, uint32_t esp) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <task_init+0x25>
   102b9:	68 80 15 01 00       	push   $0x11580
   102be:	68 cc 15 01 00       	push   $0x115cc
   102c3:	6a 1b                	push   $0x1b
   102c5:	68 94 15 01 00       	push   $0x11594
   102ca:	e8 0b 0c 00 00       	call   10eda <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
   
    //1.获取当前任务的栈顶指针
    uint32_t* pesp = (uint32_t*)esp;
   102d2:	8b 45 10             	mov    0x10(%ebp),%eax
   102d5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (pesp) {
   102d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102dc:	74 48                	je     10326 <task_init+0x79>
        //2.在simple_switch中，会调用ret指令来获取栈空间中已保留的eip值，从而进行跳转
        //在第一次进入任务时栈空间中未保存有对应值，所以手动压入任务入口地址
        *(--pesp) = entry;
   102de:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   102e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   102e5:	8b 55 0c             	mov    0xc(%ebp),%edx
   102e8:	89 10                	mov    %edx,(%eax)

        //3.由于进行任务切换时，会手动陆续弹出 edi esi ebx ebp
        //而第一次进入任务时，栈空间并为保存对应值，所以也要手动压入初始值
        //避免后续弹出时导致栈溢出
        *(--pesp) = 0;
   102ea:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   102ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   102f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   102f7:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   102fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   102fe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10304:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10308:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1030b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10311:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10315:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10318:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

        //4.将当前esp值保存到任务中
        task->stack_esp = pesp;
   1031e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10321:	8b 45 08             	mov    0x8(%ebp),%eax
   10324:	89 10                	mov    %edx,(%eax)

    }
    return 0;    
   10326:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1032b:	c9                   	leave  
   1032c:	c3                   	ret    

0001032d <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   1032d:	55                   	push   %ebp
   1032e:	89 e5                	mov    %esp,%ebp
   10330:	83 ec 08             	sub    $0x8,%esp
    simple_switch((uint32_t)&from->stack_esp, (uint32_t)&to->stack_esp);
   10333:	8b 45 0c             	mov    0xc(%ebp),%eax
   10336:	89 c2                	mov    %eax,%edx
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	83 ec 08             	sub    $0x8,%esp
   1033e:	52                   	push   %edx
   1033f:	50                   	push   %eax
   10340:	e8 53 ff ff ff       	call   10298 <simple_switch>
   10345:	83 c4 10             	add    $0x10,%esp
}
   10348:	90                   	nop
   10349:	c9                   	leave  
   1034a:	c3                   	ret    

0001034b <lgdt>:
 * @brief  加载全局描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lgdt(uint32_t start, uint32_t size) {
   1034b:	55                   	push   %ebp
   1034c:	89 e5                	mov    %esp,%ebp
   1034e:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // GDT的在内存中的逻辑边界
    uint16_t start15_0;   // GDT地址的低16位
    uint16_t start31_16;  // GDT地址的高16位
  } gdt;

  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10351:	8b 45 08             	mov    0x8(%ebp),%eax
   10354:	c1 e8 10             	shr    $0x10,%eax
   10357:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  gdt.limit =
      size -
   10362:	8b 45 0c             	mov    0xc(%ebp),%eax
   10365:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10368:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化GDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   1036c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
      "lgdt %[g]"
      :
      : [g] "m"(gdt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lgdt直接加载gdt所在的内存区域的内容
}
   10370:	90                   	nop
   10371:	c9                   	leave  
   10372:	c3                   	ret    

00010373 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10373:	55                   	push   %ebp
   10374:	89 e5                	mov    %esp,%ebp
   10376:	83 ec 18             	sub    $0x18,%esp
   10379:	8b 55 08             	mov    0x8(%ebp),%edx
   1037c:	8b 45 14             	mov    0x14(%ebp),%eax
   1037f:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10383:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10387:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1038b:	66 c1 e8 03          	shr    $0x3,%ax
   1038f:	0f b7 c0             	movzwl %ax,%eax
   10392:	c1 e0 03             	shl    $0x3,%eax
   10395:	05 00 1a 01 00       	add    $0x11a00,%eax
   1039a:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   1039d:	8b 45 0c             	mov    0xc(%ebp),%eax
   103a0:	89 c2                	mov    %eax,%edx
   103a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103a5:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   103a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   103ac:	c1 e8 10             	shr    $0x10,%eax
   103af:	89 c2                	mov    %eax,%edx
   103b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103b4:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   103b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103ba:	c1 e8 18             	shr    $0x18,%eax
   103bd:	89 c2                	mov    %eax,%edx
   103bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103c2:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   103c5:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103cc:	76 1d                	jbe    103eb <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   103ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103d1:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   103d5:	66 0d 00 80          	or     $0x8000,%ax
   103d9:	89 c2                	mov    %eax,%edx
   103db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103de:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   103e2:	8b 45 10             	mov    0x10(%ebp),%eax
   103e5:	c1 e8 0c             	shr    $0xc,%eax
   103e8:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   103eb:	8b 45 10             	mov    0x10(%ebp),%eax
   103ee:	89 c2                	mov    %eax,%edx
   103f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103f3:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   103f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103f9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   103fd:	89 c2                	mov    %eax,%edx
   103ff:	8b 45 10             	mov    0x10(%ebp),%eax
   10402:	c1 e8 08             	shr    $0x8,%eax
   10405:	66 25 00 0f          	and    $0xf00,%ax
   10409:	09 d0                	or     %edx,%eax
   1040b:	89 c2                	mov    %eax,%edx
   1040d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10410:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10414:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10417:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1041b:	89 c2                	mov    %eax,%edx
   1041d:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10421:	80 e4 f0             	and    $0xf0,%ah
   10424:	09 d0                	or     %edx,%eax
   10426:	89 c2                	mov    %eax,%edx
   10428:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1042b:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1042f:	90                   	nop
   10430:	c9                   	leave  
   10431:	c3                   	ret    

00010432 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10432:	55                   	push   %ebp
   10433:	89 e5                	mov    %esp,%ebp
   10435:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10438:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1043f:	eb 1c                	jmp    1045d <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10441:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10444:	c1 e0 03             	shl    $0x3,%eax
   10447:	0f b7 c0             	movzwl %ax,%eax
   1044a:	6a 00                	push   $0x0
   1044c:	6a 00                	push   $0x0
   1044e:	6a 00                	push   $0x0
   10450:	50                   	push   %eax
   10451:	e8 1d ff ff ff       	call   10373 <segment_desc_set>
   10456:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10459:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1045d:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10464:	7e db                	jle    10441 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10466:	68 92 40 00 00       	push   $0x4092
   1046b:	6a ff                	push   $0xffffffff
   1046d:	6a 00                	push   $0x0
   1046f:	6a 10                	push   $0x10
   10471:	e8 fd fe ff ff       	call   10373 <segment_desc_set>
   10476:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10479:	68 9a 40 00 00       	push   $0x409a
   1047e:	6a ff                	push   $0xffffffff
   10480:	6a 00                	push   $0x0
   10482:	6a 08                	push   $0x8
   10484:	e8 ea fe ff ff       	call   10373 <segment_desc_set>
   10489:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1048c:	b8 00 1a 01 00       	mov    $0x11a00,%eax
   10491:	68 00 00 01 00       	push   $0x10000
   10496:	50                   	push   %eax
   10497:	e8 af fe ff ff       	call   1034b <lgdt>
   1049c:	83 c4 08             	add    $0x8,%esp
}
   1049f:	90                   	nop
   104a0:	c9                   	leave  
   104a1:	c3                   	ret    

000104a2 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   104a2:	55                   	push   %ebp
   104a3:	89 e5                	mov    %esp,%ebp
   104a5:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   104a8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   104af:	eb 25                	jmp    104d6 <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   104b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104b4:	c1 e0 03             	shl    $0x3,%eax
   104b7:	05 00 1a 01 00       	add    $0x11a00,%eax
   104bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   104bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104c2:	0f b7 00             	movzwl (%eax),%eax
   104c5:	66 85 c0             	test   %ax,%ax
   104c8:	75 08                	jne    104d2 <gdt_alloc_desc+0x30>
            return i << 3;
   104ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104cd:	c1 e0 03             	shl    $0x3,%eax
   104d0:	eb 12                	jmp    104e4 <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   104d2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104d6:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   104dd:	7e d2                	jle    104b1 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   104df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   104e4:	c9                   	leave  
   104e5:	c3                   	ret    

000104e6 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   104e6:	55                   	push   %ebp
   104e7:	89 e5                	mov    %esp,%ebp
   104e9:	fa                   	cli    
   104ea:	90                   	nop
   104eb:	5d                   	pop    %ebp
   104ec:	c3                   	ret    

000104ed <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   104ed:	55                   	push   %ebp
   104ee:	89 e5                	mov    %esp,%ebp
   104f0:	fb                   	sti    
   104f1:	90                   	nop
   104f2:	5d                   	pop    %ebp
   104f3:	c3                   	ret    

000104f4 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   104f4:	55                   	push   %ebp
   104f5:	89 e5                	mov    %esp,%ebp
   104f7:	f4                   	hlt    
   104f8:	90                   	nop
   104f9:	5d                   	pop    %ebp
   104fa:	c3                   	ret    

000104fb <inb>:
static inline uint8_t inb(uint16_t port) {
   104fb:	55                   	push   %ebp
   104fc:	89 e5                	mov    %esp,%ebp
   104fe:	83 ec 14             	sub    $0x14,%esp
   10501:	8b 45 08             	mov    0x8(%ebp),%eax
   10504:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10508:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1050c:	89 c2                	mov    %eax,%edx
   1050e:	ec                   	in     (%dx),%al
   1050f:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10512:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10516:	c9                   	leave  
   10517:	c3                   	ret    

00010518 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10518:	55                   	push   %ebp
   10519:	89 e5                	mov    %esp,%ebp
   1051b:	83 ec 08             	sub    $0x8,%esp
   1051e:	8b 45 08             	mov    0x8(%ebp),%eax
   10521:	8b 55 0c             	mov    0xc(%ebp),%edx
   10524:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10528:	89 d0                	mov    %edx,%eax
   1052a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1052d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10531:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10535:	ee                   	out    %al,(%dx)
}
   10536:	90                   	nop
   10537:	c9                   	leave  
   10538:	c3                   	ret    

00010539 <lidt>:
 * @brief  加载中断描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lidt(uint32_t start, uint32_t size) {
   10539:	55                   	push   %ebp
   1053a:	89 e5                	mov    %esp,%ebp
   1053c:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // IDT的在内存中的逻辑边界
    uint16_t start15_0;   // IDT地址的低16位
    uint16_t start31_16;  // IDT地址的高16位
  } idt;

  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   1053f:	8b 45 08             	mov    0x8(%ebp),%eax
   10542:	c1 e8 10             	shr    $0x10,%eax
   10545:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10549:	8b 45 08             	mov    0x8(%ebp),%eax
   1054c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  idt.limit =
      size -
   10550:	8b 45 0c             	mov    0xc(%ebp),%eax
   10553:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10556:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化IDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   1055a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
      "lidt %[g]"
      :
      : [g] "m"(idt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lidt直接加载idt所在的内存区域的内容
}
   1055e:	90                   	nop
   1055f:	c9                   	leave  
   10560:	c3                   	ret    

00010561 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10561:	55                   	push   %ebp
   10562:	89 e5                	mov    %esp,%ebp
   10564:	57                   	push   %edi
   10565:	56                   	push   %esi
   10566:	53                   	push   %ebx
   10567:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   1056a:	83 ec 0c             	sub    $0xc,%esp
   1056d:	68 d8 15 01 00       	push   $0x115d8
   10572:	e8 2e 0f 00 00       	call   114a5 <log_printf>
   10577:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   1057a:	8b 45 08             	mov    0x8(%ebp),%eax
   1057d:	8b 50 34             	mov    0x34(%eax),%edx
   10580:	8b 45 08             	mov    0x8(%ebp),%eax
   10583:	8b 40 30             	mov    0x30(%eax),%eax
   10586:	83 ec 04             	sub    $0x4,%esp
   10589:	52                   	push   %edx
   1058a:	50                   	push   %eax
   1058b:	68 16 16 01 00       	push   $0x11616
   10590:	e8 10 0f 00 00       	call   114a5 <log_printf>
   10595:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10598:	8b 45 08             	mov    0x8(%ebp),%eax
   1059b:	8b 38                	mov    (%eax),%edi
   1059d:	8b 45 08             	mov    0x8(%ebp),%eax
   105a0:	8b 70 04             	mov    0x4(%eax),%esi
   105a3:	8b 45 08             	mov    0x8(%ebp),%eax
   105a6:	8b 58 08             	mov    0x8(%eax),%ebx
   105a9:	8b 45 08             	mov    0x8(%ebp),%eax
   105ac:	8b 48 0c             	mov    0xc(%eax),%ecx
   105af:	8b 45 08             	mov    0x8(%ebp),%eax
   105b2:	8b 50 0c             	mov    0xc(%eax),%edx
   105b5:	8b 45 08             	mov    0x8(%ebp),%eax
   105b8:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   105bb:	83 ec 04             	sub    $0x4,%esp
   105be:	57                   	push   %edi
   105bf:	56                   	push   %esi
   105c0:	53                   	push   %ebx
   105c1:	51                   	push   %ecx
   105c2:	52                   	push   %edx
   105c3:	50                   	push   %eax
   105c4:	68 30 16 01 00       	push   $0x11630
   105c9:	e8 d7 0e 00 00       	call   114a5 <log_printf>
   105ce:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   105d1:	8b 45 08             	mov    0x8(%ebp),%eax
   105d4:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105d7:	8b 45 08             	mov    0x8(%ebp),%eax
   105da:	8b 40 18             	mov    0x18(%eax),%eax
   105dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	8b 58 10             	mov    0x10(%eax),%ebx
   105e6:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   105e9:	8b 45 08             	mov    0x8(%ebp),%eax
   105ec:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   105ef:	8b 45 08             	mov    0x8(%ebp),%eax
   105f2:	8b 70 24             	mov    0x24(%eax),%esi
   105f5:	8b 45 08             	mov    0x8(%ebp),%eax
   105f8:	8b 58 28             	mov    0x28(%eax),%ebx
   105fb:	8b 45 08             	mov    0x8(%ebp),%eax
   105fe:	8b 50 20             	mov    0x20(%eax),%edx
   10601:	8b 45 08             	mov    0x8(%ebp),%eax
   10604:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10607:	83 ec 0c             	sub    $0xc,%esp
   1060a:	51                   	push   %ecx
   1060b:	ff 75 e4             	push   -0x1c(%ebp)
   1060e:	ff 75 e0             	push   -0x20(%ebp)
   10611:	57                   	push   %edi
   10612:	56                   	push   %esi
   10613:	53                   	push   %ebx
   10614:	52                   	push   %edx
   10615:	50                   	push   %eax
   10616:	68 60 16 01 00       	push   $0x11660
   1061b:	e8 85 0e 00 00       	call   114a5 <log_printf>
   10620:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10623:	8b 45 08             	mov    0x8(%ebp),%eax
   10626:	8b 50 40             	mov    0x40(%eax),%edx
   10629:	8b 45 08             	mov    0x8(%ebp),%eax
   1062c:	8b 40 38             	mov    0x38(%eax),%eax
   1062f:	83 ec 04             	sub    $0x4,%esp
   10632:	52                   	push   %edx
   10633:	50                   	push   %eax
   10634:	68 b8 16 01 00       	push   $0x116b8
   10639:	e8 67 0e 00 00       	call   114a5 <log_printf>
   1063e:	83 c4 10             	add    $0x10,%esp
}
   10641:	90                   	nop
   10642:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10645:	5b                   	pop    %ebx
   10646:	5e                   	pop    %esi
   10647:	5f                   	pop    %edi
   10648:	5d                   	pop    %ebp
   10649:	c3                   	ret    

0001064a <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1064a:	55                   	push   %ebp
   1064b:	89 e5                	mov    %esp,%ebp
   1064d:	83 ec 08             	sub    $0x8,%esp

  log_printf("----------------------------------");
   10650:	83 ec 0c             	sub    $0xc,%esp
   10653:	68 d4 16 01 00       	push   $0x116d4
   10658:	e8 48 0e 00 00       	call   114a5 <log_printf>
   1065d:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10660:	83 ec 08             	sub    $0x8,%esp
   10663:	ff 75 0c             	push   0xc(%ebp)
   10666:	68 f7 16 01 00       	push   $0x116f7
   1066b:	e8 35 0e 00 00       	call   114a5 <log_printf>
   10670:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10673:	83 ec 0c             	sub    $0xc,%esp
   10676:	ff 75 08             	push   0x8(%ebp)
   10679:	e8 e3 fe ff ff       	call   10561 <print_exception_fram>
   1067e:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10681:	e8 6e fe ff ff       	call   104f4 <hlt>
   10686:	eb f9                	jmp    10681 <do_default_handler+0x37>

00010688 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10688:	55                   	push   %ebp
   10689:	89 e5                	mov    %esp,%ebp
   1068b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1068e:	83 ec 08             	sub    $0x8,%esp
   10691:	68 11 17 01 00       	push   $0x11711
   10696:	ff 75 08             	push   0x8(%ebp)
   10699:	e8 ac ff ff ff       	call   1064a <do_default_handler>
   1069e:	83 c4 10             	add    $0x10,%esp
}
   106a1:	90                   	nop
   106a2:	c9                   	leave  
   106a3:	c3                   	ret    

000106a4 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   106a4:	55                   	push   %ebp
   106a5:	89 e5                	mov    %esp,%ebp
   106a7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   106aa:	83 ec 08             	sub    $0x8,%esp
   106ad:	68 23 17 01 00       	push   $0x11723
   106b2:	ff 75 08             	push   0x8(%ebp)
   106b5:	e8 90 ff ff ff       	call   1064a <do_default_handler>
   106ba:	83 c4 10             	add    $0x10,%esp
}
   106bd:	90                   	nop
   106be:	c9                   	leave  
   106bf:	c3                   	ret    

000106c0 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   106c0:	55                   	push   %ebp
   106c1:	89 e5                	mov    %esp,%ebp
   106c3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   106c6:	83 ec 08             	sub    $0x8,%esp
   106c9:	68 35 17 01 00       	push   $0x11735
   106ce:	ff 75 08             	push   0x8(%ebp)
   106d1:	e8 74 ff ff ff       	call   1064a <do_default_handler>
   106d6:	83 c4 10             	add    $0x10,%esp
}
   106d9:	90                   	nop
   106da:	c9                   	leave  
   106db:	c3                   	ret    

000106dc <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   106dc:	55                   	push   %ebp
   106dd:	89 e5                	mov    %esp,%ebp
   106df:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   106e2:	83 ec 08             	sub    $0x8,%esp
   106e5:	68 45 17 01 00       	push   $0x11745
   106ea:	ff 75 08             	push   0x8(%ebp)
   106ed:	e8 58 ff ff ff       	call   1064a <do_default_handler>
   106f2:	83 c4 10             	add    $0x10,%esp
}
   106f5:	90                   	nop
   106f6:	c9                   	leave  
   106f7:	c3                   	ret    

000106f8 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   106f8:	55                   	push   %ebp
   106f9:	89 e5                	mov    %esp,%ebp
   106fb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   106fe:	83 ec 08             	sub    $0x8,%esp
   10701:	68 53 17 01 00       	push   $0x11753
   10706:	ff 75 08             	push   0x8(%ebp)
   10709:	e8 3c ff ff ff       	call   1064a <do_default_handler>
   1070e:	83 c4 10             	add    $0x10,%esp
}
   10711:	90                   	nop
   10712:	c9                   	leave  
   10713:	c3                   	ret    

00010714 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10714:	55                   	push   %ebp
   10715:	89 e5                	mov    %esp,%ebp
   10717:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1071a:	83 ec 08             	sub    $0x8,%esp
   1071d:	68 68 17 01 00       	push   $0x11768
   10722:	ff 75 08             	push   0x8(%ebp)
   10725:	e8 20 ff ff ff       	call   1064a <do_default_handler>
   1072a:	83 c4 10             	add    $0x10,%esp
}
   1072d:	90                   	nop
   1072e:	c9                   	leave  
   1072f:	c3                   	ret    

00010730 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10730:	55                   	push   %ebp
   10731:	89 e5                	mov    %esp,%ebp
   10733:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10736:	83 ec 08             	sub    $0x8,%esp
   10739:	68 7b 17 01 00       	push   $0x1177b
   1073e:	ff 75 08             	push   0x8(%ebp)
   10741:	e8 04 ff ff ff       	call   1064a <do_default_handler>
   10746:	83 c4 10             	add    $0x10,%esp
}
   10749:	90                   	nop
   1074a:	c9                   	leave  
   1074b:	c3                   	ret    

0001074c <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1074c:	55                   	push   %ebp
   1074d:	89 e5                	mov    %esp,%ebp
   1074f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10752:	83 ec 08             	sub    $0x8,%esp
   10755:	68 91 17 01 00       	push   $0x11791
   1075a:	ff 75 08             	push   0x8(%ebp)
   1075d:	e8 e8 fe ff ff       	call   1064a <do_default_handler>
   10762:	83 c4 10             	add    $0x10,%esp
}
   10765:	90                   	nop
   10766:	c9                   	leave  
   10767:	c3                   	ret    

00010768 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10768:	55                   	push   %ebp
   10769:	89 e5                	mov    %esp,%ebp
   1076b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1076e:	83 ec 08             	sub    $0x8,%esp
   10771:	68 aa 17 01 00       	push   $0x117aa
   10776:	ff 75 08             	push   0x8(%ebp)
   10779:	e8 cc fe ff ff       	call   1064a <do_default_handler>
   1077e:	83 c4 10             	add    $0x10,%esp
}
   10781:	90                   	nop
   10782:	c9                   	leave  
   10783:	c3                   	ret    

00010784 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10784:	55                   	push   %ebp
   10785:	89 e5                	mov    %esp,%ebp
   10787:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1078a:	83 ec 08             	sub    $0x8,%esp
   1078d:	68 c7 17 01 00       	push   $0x117c7
   10792:	ff 75 08             	push   0x8(%ebp)
   10795:	e8 b0 fe ff ff       	call   1064a <do_default_handler>
   1079a:	83 c4 10             	add    $0x10,%esp
}
   1079d:	90                   	nop
   1079e:	c9                   	leave  
   1079f:	c3                   	ret    

000107a0 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   107a0:	55                   	push   %ebp
   107a1:	89 e5                	mov    %esp,%ebp
   107a3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   107a6:	83 ec 08             	sub    $0x8,%esp
   107a9:	68 de 17 01 00       	push   $0x117de
   107ae:	ff 75 08             	push   0x8(%ebp)
   107b1:	e8 94 fe ff ff       	call   1064a <do_default_handler>
   107b6:	83 c4 10             	add    $0x10,%esp
}
   107b9:	90                   	nop
   107ba:	c9                   	leave  
   107bb:	c3                   	ret    

000107bc <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   107bc:	55                   	push   %ebp
   107bd:	89 e5                	mov    %esp,%ebp
   107bf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   107c2:	83 ec 08             	sub    $0x8,%esp
   107c5:	68 f4 17 01 00       	push   $0x117f4
   107ca:	ff 75 08             	push   0x8(%ebp)
   107cd:	e8 78 fe ff ff       	call   1064a <do_default_handler>
   107d2:	83 c4 10             	add    $0x10,%esp
}
   107d5:	90                   	nop
   107d6:	c9                   	leave  
   107d7:	c3                   	ret    

000107d8 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   107d8:	55                   	push   %ebp
   107d9:	89 e5                	mov    %esp,%ebp
   107db:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   107de:	83 ec 08             	sub    $0x8,%esp
   107e1:	68 12 18 01 00       	push   $0x11812
   107e6:	ff 75 08             	push   0x8(%ebp)
   107e9:	e8 5c fe ff ff       	call   1064a <do_default_handler>
   107ee:	83 c4 10             	add    $0x10,%esp
}
   107f1:	90                   	nop
   107f2:	c9                   	leave  
   107f3:	c3                   	ret    

000107f4 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   107f4:	55                   	push   %ebp
   107f5:	89 e5                	mov    %esp,%ebp
   107f7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   107fa:	83 ec 08             	sub    $0x8,%esp
   107fd:	68 30 18 01 00       	push   $0x11830
   10802:	ff 75 08             	push   0x8(%ebp)
   10805:	e8 40 fe ff ff       	call   1064a <do_default_handler>
   1080a:	83 c4 10             	add    $0x10,%esp
}
   1080d:	90                   	nop
   1080e:	c9                   	leave  
   1080f:	c3                   	ret    

00010810 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10810:	55                   	push   %ebp
   10811:	89 e5                	mov    %esp,%ebp
   10813:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10816:	83 ec 08             	sub    $0x8,%esp
   10819:	68 4d 18 01 00       	push   $0x1184d
   1081e:	ff 75 08             	push   0x8(%ebp)
   10821:	e8 24 fe ff ff       	call   1064a <do_default_handler>
   10826:	83 c4 10             	add    $0x10,%esp
}
   10829:	90                   	nop
   1082a:	c9                   	leave  
   1082b:	c3                   	ret    

0001082c <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   1082c:	55                   	push   %ebp
   1082d:	89 e5                	mov    %esp,%ebp
   1082f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   10832:	83 ec 08             	sub    $0x8,%esp
   10835:	68 62 18 01 00       	push   $0x11862
   1083a:	ff 75 08             	push   0x8(%ebp)
   1083d:	e8 08 fe ff ff       	call   1064a <do_default_handler>
   10842:	83 c4 10             	add    $0x10,%esp
}
   10845:	90                   	nop
   10846:	c9                   	leave  
   10847:	c3                   	ret    

00010848 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10848:	55                   	push   %ebp
   10849:	89 e5                	mov    %esp,%ebp
   1084b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   1084e:	83 ec 08             	sub    $0x8,%esp
   10851:	68 76 18 01 00       	push   $0x11876
   10856:	ff 75 08             	push   0x8(%ebp)
   10859:	e8 ec fd ff ff       	call   1064a <do_default_handler>
   1085e:	83 c4 10             	add    $0x10,%esp
}
   10861:	90                   	nop
   10862:	c9                   	leave  
   10863:	c3                   	ret    

00010864 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10864:	55                   	push   %ebp
   10865:	89 e5                	mov    %esp,%ebp
   10867:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   1086a:	83 ec 08             	sub    $0x8,%esp
   1086d:	68 90 18 01 00       	push   $0x11890
   10872:	ff 75 08             	push   0x8(%ebp)
   10875:	e8 d0 fd ff ff       	call   1064a <do_default_handler>
   1087a:	83 c4 10             	add    $0x10,%esp
}
   1087d:	90                   	nop
   1087e:	c9                   	leave  
   1087f:	c3                   	ret    

00010880 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10880:	55                   	push   %ebp
   10881:	89 e5                	mov    %esp,%ebp
   10883:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10886:	83 ec 08             	sub    $0x8,%esp
   10889:	68 a8 18 01 00       	push   $0x118a8
   1088e:	ff 75 08             	push   0x8(%ebp)
   10891:	e8 b4 fd ff ff       	call   1064a <do_default_handler>
   10896:	83 c4 10             	add    $0x10,%esp
}
   10899:	90                   	nop
   1089a:	c9                   	leave  
   1089b:	c3                   	ret    

0001089c <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1089c:	55                   	push   %ebp
   1089d:	89 e5                	mov    %esp,%ebp
   1089f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   108a2:	83 ec 08             	sub    $0x8,%esp
   108a5:	68 c0 18 01 00       	push   $0x118c0
   108aa:	ff 75 08             	push   0x8(%ebp)
   108ad:	e8 98 fd ff ff       	call   1064a <do_default_handler>
   108b2:	83 c4 10             	add    $0x10,%esp
}
   108b5:	90                   	nop
   108b6:	c9                   	leave  
   108b7:	c3                   	ret    

000108b8 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   108b8:	55                   	push   %ebp
   108b9:	89 e5                	mov    %esp,%ebp
   108bb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   108be:	83 ec 08             	sub    $0x8,%esp
   108c1:	68 dc 18 01 00       	push   $0x118dc
   108c6:	ff 75 08             	push   0x8(%ebp)
   108c9:	e8 7c fd ff ff       	call   1064a <do_default_handler>
   108ce:	83 c4 10             	add    $0x10,%esp
}
   108d1:	90                   	nop
   108d2:	c9                   	leave  
   108d3:	c3                   	ret    

000108d4 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   108d4:	55                   	push   %ebp
   108d5:	89 e5                	mov    %esp,%ebp
   108d7:	83 ec 08             	sub    $0x8,%esp
   108da:	8b 55 0c             	mov    0xc(%ebp),%edx
   108dd:	8b 45 14             	mov    0x14(%ebp),%eax
   108e0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   108e4:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   108e8:	8b 45 10             	mov    0x10(%ebp),%eax
   108eb:	89 c2                	mov    %eax,%edx
   108ed:	8b 45 08             	mov    0x8(%ebp),%eax
   108f0:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   108f3:	8b 45 10             	mov    0x10(%ebp),%eax
   108f6:	c1 e8 10             	shr    $0x10,%eax
   108f9:	89 c2                	mov    %eax,%edx
   108fb:	8b 45 08             	mov    0x8(%ebp),%eax
   108fe:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10902:	8b 45 08             	mov    0x8(%ebp),%eax
   10905:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10909:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1090d:	8b 45 08             	mov    0x8(%ebp),%eax
   10910:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10914:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10918:	90                   	nop
   10919:	c9                   	leave  
   1091a:	c3                   	ret    

0001091b <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   1091b:	55                   	push   %ebp
   1091c:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   1091e:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   10925:	7f 06                	jg     1092d <idt_install+0x12>
   10927:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1092b:	79 07                	jns    10934 <idt_install+0x19>
   1092d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10932:	eb 25                	jmp    10959 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   10934:	8b 45 0c             	mov    0xc(%ebp),%eax
   10937:	8b 55 08             	mov    0x8(%ebp),%edx
   1093a:	c1 e2 03             	shl    $0x3,%edx
   1093d:	81 c2 00 1a 02 00    	add    $0x21a00,%edx
   10943:	68 00 8e 00 00       	push   $0x8e00
   10948:	50                   	push   %eax
   10949:	6a 08                	push   $0x8
   1094b:	52                   	push   %edx
   1094c:	e8 83 ff ff ff       	call   108d4 <gate_desc_set>
   10951:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   10954:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10959:	c9                   	leave  
   1095a:	c3                   	ret    

0001095b <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   1095b:	55                   	push   %ebp
   1095c:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   1095e:	6a 11                	push   $0x11
   10960:	6a 20                	push   $0x20
   10962:	e8 b1 fb ff ff       	call   10518 <outb>
   10967:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   1096a:	6a 20                	push   $0x20
   1096c:	6a 21                	push   $0x21
   1096e:	e8 a5 fb ff ff       	call   10518 <outb>
   10973:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   10976:	6a 04                	push   $0x4
   10978:	6a 21                	push   $0x21
   1097a:	e8 99 fb ff ff       	call   10518 <outb>
   1097f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   10982:	6a 01                	push   $0x1
   10984:	6a 21                	push   $0x21
   10986:	e8 8d fb ff ff       	call   10518 <outb>
   1098b:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1098e:	6a 11                	push   $0x11
   10990:	68 a0 00 00 00       	push   $0xa0
   10995:	e8 7e fb ff ff       	call   10518 <outb>
   1099a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1099d:	6a 28                	push   $0x28
   1099f:	68 a1 00 00 00       	push   $0xa1
   109a4:	e8 6f fb ff ff       	call   10518 <outb>
   109a9:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   109ac:	6a 02                	push   $0x2
   109ae:	68 a1 00 00 00       	push   $0xa1
   109b3:	e8 60 fb ff ff       	call   10518 <outb>
   109b8:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   109bb:	6a 01                	push   $0x1
   109bd:	68 a1 00 00 00       	push   $0xa1
   109c2:	e8 51 fb ff ff       	call   10518 <outb>
   109c7:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   109ca:	68 fb 00 00 00       	push   $0xfb
   109cf:	6a 21                	push   $0x21
   109d1:	e8 42 fb ff ff       	call   10518 <outb>
   109d6:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   109d9:	68 ff 00 00 00       	push   $0xff
   109de:	68 a1 00 00 00       	push   $0xa1
   109e3:	e8 30 fb ff ff       	call   10518 <outb>
   109e8:	83 c4 08             	add    $0x8,%esp


}
   109eb:	90                   	nop
   109ec:	c9                   	leave  
   109ed:	c3                   	ret    

000109ee <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   109ee:	55                   	push   %ebp
   109ef:	89 e5                	mov    %esp,%ebp
   109f1:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   109f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   109fb:	eb 14                	jmp    10a11 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   109fd:	68 2a 00 01 00       	push   $0x1002a
   10a02:	ff 75 fc             	push   -0x4(%ebp)
   10a05:	e8 11 ff ff ff       	call   1091b <idt_install>
   10a0a:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10a0d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10a11:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10a18:	7e e3                	jle    109fd <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10a1a:	68 47 00 01 00       	push   $0x10047
   10a1f:	6a 00                	push   $0x0
   10a21:	e8 f5 fe ff ff       	call   1091b <idt_install>
   10a26:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10a29:	68 64 00 01 00       	push   $0x10064
   10a2e:	6a 01                	push   $0x1
   10a30:	e8 e6 fe ff ff       	call   1091b <idt_install>
   10a35:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   10a38:	68 81 00 01 00       	push   $0x10081
   10a3d:	6a 02                	push   $0x2
   10a3f:	e8 d7 fe ff ff       	call   1091b <idt_install>
   10a44:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   10a47:	68 9e 00 01 00       	push   $0x1009e
   10a4c:	6a 03                	push   $0x3
   10a4e:	e8 c8 fe ff ff       	call   1091b <idt_install>
   10a53:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   10a56:	68 bb 00 01 00       	push   $0x100bb
   10a5b:	6a 04                	push   $0x4
   10a5d:	e8 b9 fe ff ff       	call   1091b <idt_install>
   10a62:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   10a65:	68 d8 00 01 00       	push   $0x100d8
   10a6a:	6a 05                	push   $0x5
   10a6c:	e8 aa fe ff ff       	call   1091b <idt_install>
   10a71:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   10a74:	68 f5 00 01 00       	push   $0x100f5
   10a79:	6a 06                	push   $0x6
   10a7b:	e8 9b fe ff ff       	call   1091b <idt_install>
   10a80:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   10a83:	68 12 01 01 00       	push   $0x10112
   10a88:	6a 07                	push   $0x7
   10a8a:	e8 8c fe ff ff       	call   1091b <idt_install>
   10a8f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   10a92:	68 2f 01 01 00       	push   $0x1012f
   10a97:	6a 08                	push   $0x8
   10a99:	e8 7d fe ff ff       	call   1091b <idt_install>
   10a9e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   10aa1:	68 4a 01 01 00       	push   $0x1014a
   10aa6:	6a 0a                	push   $0xa
   10aa8:	e8 6e fe ff ff       	call   1091b <idt_install>
   10aad:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   10ab0:	68 65 01 01 00       	push   $0x10165
   10ab5:	6a 0b                	push   $0xb
   10ab7:	e8 5f fe ff ff       	call   1091b <idt_install>
   10abc:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   10abf:	68 80 01 01 00       	push   $0x10180
   10ac4:	6a 0c                	push   $0xc
   10ac6:	e8 50 fe ff ff       	call   1091b <idt_install>
   10acb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   10ace:	68 9b 01 01 00       	push   $0x1019b
   10ad3:	6a 0d                	push   $0xd
   10ad5:	e8 41 fe ff ff       	call   1091b <idt_install>
   10ada:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   10add:	68 b6 01 01 00       	push   $0x101b6
   10ae2:	6a 0e                	push   $0xe
   10ae4:	e8 32 fe ff ff       	call   1091b <idt_install>
   10ae9:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   10aec:	68 d1 01 01 00       	push   $0x101d1
   10af1:	6a 10                	push   $0x10
   10af3:	e8 23 fe ff ff       	call   1091b <idt_install>
   10af8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10afb:	68 ee 01 01 00       	push   $0x101ee
   10b00:	6a 11                	push   $0x11
   10b02:	e8 14 fe ff ff       	call   1091b <idt_install>
   10b07:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10b0a:	68 09 02 01 00       	push   $0x10209
   10b0f:	6a 12                	push   $0x12
   10b11:	e8 05 fe ff ff       	call   1091b <idt_install>
   10b16:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10b19:	68 26 02 01 00       	push   $0x10226
   10b1e:	6a 13                	push   $0x13
   10b20:	e8 f6 fd ff ff       	call   1091b <idt_install>
   10b25:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10b28:	68 43 02 01 00       	push   $0x10243
   10b2d:	6a 14                	push   $0x14
   10b2f:	e8 e7 fd ff ff       	call   1091b <idt_install>
   10b34:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   10b37:	68 60 02 01 00       	push   $0x10260
   10b3c:	6a 15                	push   $0x15
   10b3e:	e8 d8 fd ff ff       	call   1091b <idt_install>
   10b43:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   10b46:	b8 00 1a 02 00       	mov    $0x21a00,%eax
   10b4b:	68 00 08 00 00       	push   $0x800
   10b50:	50                   	push   %eax
   10b51:	e8 e3 f9 ff ff       	call   10539 <lidt>
   10b56:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   10b59:	e8 fd fd ff ff       	call   1095b <init_pic>
}
   10b5e:	90                   	nop
   10b5f:	c9                   	leave  
   10b60:	c3                   	ret    

00010b61 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   10b61:	55                   	push   %ebp
   10b62:	89 e5                	mov    %esp,%ebp
   10b64:	53                   	push   %ebx
   10b65:	83 ec 14             	sub    $0x14,%esp
   10b68:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10b6e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10b72:	76 7f                	jbe    10bf3 <idt_enable+0x92>
   10b74:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   10b78:	77 79                	ja     10bf3 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10b7a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10b7e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10b82:	77 33                	ja     10bb7 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10b84:	6a 21                	push   $0x21
   10b86:	e8 70 f9 ff ff       	call   104fb <inb>
   10b8b:	83 c4 04             	add    $0x4,%esp
   10b8e:	89 c3                	mov    %eax,%ebx
   10b90:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10b94:	ba 01 00 00 00       	mov    $0x1,%edx
   10b99:	89 c1                	mov    %eax,%ecx
   10b9b:	d3 e2                	shl    %cl,%edx
   10b9d:	89 d0                	mov    %edx,%eax
   10b9f:	f7 d0                	not    %eax
   10ba1:	21 d8                	and    %ebx,%eax
   10ba3:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10ba6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10baa:	50                   	push   %eax
   10bab:	6a 21                	push   $0x21
   10bad:	e8 66 f9 ff ff       	call   10518 <outb>
   10bb2:	83 c4 08             	add    $0x8,%esp
   10bb5:	eb 3d                	jmp    10bf4 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10bb7:	68 a1 00 00 00       	push   $0xa1
   10bbc:	e8 3a f9 ff ff       	call   104fb <inb>
   10bc1:	83 c4 04             	add    $0x4,%esp
   10bc4:	89 c3                	mov    %eax,%ebx
   10bc6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10bca:	83 e8 08             	sub    $0x8,%eax
   10bcd:	ba 01 00 00 00       	mov    $0x1,%edx
   10bd2:	89 c1                	mov    %eax,%ecx
   10bd4:	d3 e2                	shl    %cl,%edx
   10bd6:	89 d0                	mov    %edx,%eax
   10bd8:	f7 d0                	not    %eax
   10bda:	21 d8                	and    %ebx,%eax
   10bdc:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10bdf:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10be3:	50                   	push   %eax
   10be4:	68 a1 00 00 00       	push   $0xa1
   10be9:	e8 2a f9 ff ff       	call   10518 <outb>
   10bee:	83 c4 08             	add    $0x8,%esp
   10bf1:	eb 01                	jmp    10bf4 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10bf3:	90                   	nop
  }
  
}
   10bf4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10bf7:	c9                   	leave  
   10bf8:	c3                   	ret    

00010bf9 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   10bf9:	55                   	push   %ebp
   10bfa:	89 e5                	mov    %esp,%ebp
   10bfc:	53                   	push   %ebx
   10bfd:	83 ec 14             	sub    $0x14,%esp
   10c00:	8b 45 08             	mov    0x8(%ebp),%eax
   10c03:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10c06:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10c0a:	76 7b                	jbe    10c87 <idt_disable+0x8e>
   10c0c:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   10c10:	77 75                	ja     10c87 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10c12:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10c16:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10c1a:	77 31                	ja     10c4d <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10c1c:	6a 21                	push   $0x21
   10c1e:	e8 d8 f8 ff ff       	call   104fb <inb>
   10c23:	83 c4 04             	add    $0x4,%esp
   10c26:	89 c3                	mov    %eax,%ebx
   10c28:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10c2c:	ba 01 00 00 00       	mov    $0x1,%edx
   10c31:	89 c1                	mov    %eax,%ecx
   10c33:	d3 e2                	shl    %cl,%edx
   10c35:	89 d0                	mov    %edx,%eax
   10c37:	09 d8                	or     %ebx,%eax
   10c39:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10c3c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c40:	50                   	push   %eax
   10c41:	6a 21                	push   $0x21
   10c43:	e8 d0 f8 ff ff       	call   10518 <outb>
   10c48:	83 c4 08             	add    $0x8,%esp
   10c4b:	eb 3b                	jmp    10c88 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   10c4d:	68 a1 00 00 00       	push   $0xa1
   10c52:	e8 a4 f8 ff ff       	call   104fb <inb>
   10c57:	83 c4 04             	add    $0x4,%esp
   10c5a:	89 c3                	mov    %eax,%ebx
   10c5c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10c60:	83 e8 08             	sub    $0x8,%eax
   10c63:	ba 01 00 00 00       	mov    $0x1,%edx
   10c68:	89 c1                	mov    %eax,%ecx
   10c6a:	d3 e2                	shl    %cl,%edx
   10c6c:	89 d0                	mov    %edx,%eax
   10c6e:	09 d8                	or     %ebx,%eax
   10c70:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10c73:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c77:	50                   	push   %eax
   10c78:	68 a1 00 00 00       	push   $0xa1
   10c7d:	e8 96 f8 ff ff       	call   10518 <outb>
   10c82:	83 c4 08             	add    $0x8,%esp
   10c85:	eb 01                	jmp    10c88 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10c87:	90                   	nop
  }
  
}
   10c88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c8b:	c9                   	leave  
   10c8c:	c3                   	ret    

00010c8d <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   10c8d:	55                   	push   %ebp
   10c8e:	89 e5                	mov    %esp,%ebp
  cli();
   10c90:	e8 51 f8 ff ff       	call   104e6 <cli>
}
   10c95:	90                   	nop
   10c96:	5d                   	pop    %ebp
   10c97:	c3                   	ret    

00010c98 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   10c98:	55                   	push   %ebp
   10c99:	89 e5                	mov    %esp,%ebp
  sti();
   10c9b:	e8 4d f8 ff ff       	call   104ed <sti>
}
   10ca0:	90                   	nop
   10ca1:	5d                   	pop    %ebp
   10ca2:	c3                   	ret    

00010ca3 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   10ca3:	55                   	push   %ebp
   10ca4:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   10ca6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   10caa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cae:	78 29                	js     10cd9 <pic_send_eoi+0x36>
   10cb0:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   10cb4:	7f 23                	jg     10cd9 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   10cb6:	6a 20                	push   $0x20
   10cb8:	6a 20                	push   $0x20
   10cba:	e8 59 f8 ff ff       	call   10518 <outb>
   10cbf:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   10cc2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10cc6:	7e 12                	jle    10cda <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   10cc8:	6a 20                	push   $0x20
   10cca:	68 a0 00 00 00       	push   $0xa0
   10ccf:	e8 44 f8 ff ff       	call   10518 <outb>
   10cd4:	83 c4 08             	add    $0x8,%esp
   10cd7:	eb 01                	jmp    10cda <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   10cd9:	90                   	nop
  }

   10cda:	c9                   	leave  
   10cdb:	c3                   	ret    

00010cdc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10cdc:	55                   	push   %ebp
   10cdd:	89 e5                	mov    %esp,%ebp
   10cdf:	83 ec 08             	sub    $0x8,%esp
   10ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce5:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ce8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10cec:	89 d0                	mov    %edx,%eax
   10cee:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10cf1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10cf5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10cf9:	ee                   	out    %al,(%dx)
}
   10cfa:	90                   	nop
   10cfb:	c9                   	leave  
   10cfc:	c3                   	ret    

00010cfd <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   10cfd:	55                   	push   %ebp
   10cfe:	89 e5                	mov    %esp,%ebp
   10d00:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10d03:	a1 00 22 02 00       	mov    0x22200,%eax
   10d08:	83 c0 01             	add    $0x1,%eax
   10d0b:	a3 00 22 02 00       	mov    %eax,0x22200

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   10d10:	83 ec 0c             	sub    $0xc,%esp
   10d13:	6a 20                	push   $0x20
   10d15:	e8 89 ff ff ff       	call   10ca3 <pic_send_eoi>
   10d1a:	83 c4 10             	add    $0x10,%esp
}
   10d1d:	90                   	nop
   10d1e:	c9                   	leave  
   10d1f:	c3                   	ret    

00010d20 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   10d20:	55                   	push   %ebp
   10d21:	89 e5                	mov    %esp,%ebp
   10d23:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   10d26:	6a 36                	push   $0x36
   10d28:	6a 43                	push   $0x43
   10d2a:	e8 ad ff ff ff       	call   10cdc <outb>
   10d2f:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   10d32:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   10d38:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10d3c:	0f b6 c0             	movzbl %al,%eax
   10d3f:	50                   	push   %eax
   10d40:	6a 40                	push   $0x40
   10d42:	e8 95 ff ff ff       	call   10cdc <outb>
   10d47:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   10d4a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10d4e:	66 c1 e8 08          	shr    $0x8,%ax
   10d52:	0f b6 c0             	movzbl %al,%eax
   10d55:	50                   	push   %eax
   10d56:	6a 40                	push   $0x40
   10d58:	e8 7f ff ff ff       	call   10cdc <outb>
   10d5d:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	68 7b 02 01 00       	push   $0x1027b
   10d68:	6a 20                	push   $0x20
   10d6a:	e8 ac fb ff ff       	call   1091b <idt_install>
   10d6f:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   10d72:	83 ec 0c             	sub    $0xc,%esp
   10d75:	6a 20                	push   $0x20
   10d77:	e8 e5 fd ff ff       	call   10b61 <idt_enable>
   10d7c:	83 c4 10             	add    $0x10,%esp

}
   10d7f:	90                   	nop
   10d80:	c9                   	leave  
   10d81:	c3                   	ret    

00010d82 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   10d82:	55                   	push   %ebp
   10d83:	89 e5                	mov    %esp,%ebp
   10d85:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10d88:	c7 05 00 22 02 00 00 	movl   $0x0,0x22200
   10d8f:	00 00 00 
    init_pit();
   10d92:	e8 89 ff ff ff       	call   10d20 <init_pit>
   10d97:	90                   	nop
   10d98:	c9                   	leave  
   10d99:	c3                   	ret    

00010d9a <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   10d9a:	55                   	push   %ebp
   10d9b:	89 e5                	mov    %esp,%ebp
   10d9d:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   10da0:	8b 45 08             	mov    0x8(%ebp),%eax
   10da3:	8b 40 50             	mov    0x50(%eax),%eax
   10da6:	85 c0                	test   %eax,%eax
   10da8:	75 19                	jne    10dc3 <kernel_init+0x29>
   10daa:	68 f8 18 01 00       	push   $0x118f8
   10daf:	68 a0 19 01 00       	push   $0x119a0
   10db4:	6a 1d                	push   $0x1d
   10db6:	68 1c 19 01 00       	push   $0x1191c
   10dbb:	e8 1a 01 00 00       	call   10eda <pannic>
   10dc0:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   10dc3:	e8 68 06 00 00       	call   11430 <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   10dc8:	e8 65 f6 ff ff       	call   10432 <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   10dcd:	e8 1c fc ff ff       	call   109ee <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   10dd2:	e8 ab ff ff ff       	call   10d82 <time_init>

    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   10dd7:	90                   	nop
   10dd8:	c9                   	leave  
   10dd9:	c3                   	ret    

00010dda <test_task_1>:
static task_t task_2;
//声明预留一下任务使用的栈空间
static uint32_t init_stack_1[1024]; 
static uint32_t init_stack_2[1024]; 

void test_task_1(void) {
   10dda:	55                   	push   %ebp
   10ddb:	89 e5                	mov    %esp,%ebp
   10ddd:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   10de0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_1: %d", count++);
   10de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dea:	8d 50 01             	lea    0x1(%eax),%edx
   10ded:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10df0:	83 ec 08             	sub    $0x8,%esp
   10df3:	50                   	push   %eax
   10df4:	68 51 19 01 00       	push   $0x11951
   10df9:	e8 a7 06 00 00       	call   114a5 <log_printf>
   10dfe:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task_1, &task_2);
   10e01:	83 ec 08             	sub    $0x8,%esp
   10e04:	68 24 22 02 00       	push   $0x22224
   10e09:	68 20 22 02 00       	push   $0x22220
   10e0e:	e8 1a f5 ff ff       	call   1032d <task_switch_from_to>
   10e13:	83 c4 10             	add    $0x10,%esp
        log_printf("task_1: %d", count++);
   10e16:	eb cf                	jmp    10de7 <test_task_1+0xd>

00010e18 <test_task_2>:
     }
}

void test_task_2(void) {
   10e18:	55                   	push   %ebp
   10e19:	89 e5                	mov    %esp,%ebp
   10e1b:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   10e1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_2: %d", count++);
   10e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e28:	8d 50 01             	lea    0x1(%eax),%edx
   10e2b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e2e:	83 ec 08             	sub    $0x8,%esp
   10e31:	50                   	push   %eax
   10e32:	68 5c 19 01 00       	push   $0x1195c
   10e37:	e8 69 06 00 00       	call   114a5 <log_printf>
   10e3c:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task_2, &task_1);
   10e3f:	83 ec 08             	sub    $0x8,%esp
   10e42:	68 20 22 02 00       	push   $0x22220
   10e47:	68 24 22 02 00       	push   $0x22224
   10e4c:	e8 dc f4 ff ff       	call   1032d <task_switch_from_to>
   10e51:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %d", count++);
   10e54:	eb cf                	jmp    10e25 <test_task_2+0xd>

00010e56 <init_main>:
     }
}
void init_main(void) {
   10e56:	55                   	push   %ebp
   10e57:	89 e5                	mov    %esp,%ebp
   10e59:	83 ec 08             	sub    $0x8,%esp

    log_printf("Kernel is running......");
   10e5c:	83 ec 0c             	sub    $0xc,%esp
   10e5f:	68 67 19 01 00       	push   $0x11967
   10e64:	e8 3c 06 00 00       	call   114a5 <log_printf>
   10e69:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   10e6c:	83 ec 04             	sub    $0x4,%esp
   10e6f:	68 7f 19 01 00       	push   $0x1197f
   10e74:	68 85 19 01 00       	push   $0x11985
   10e79:	68 8a 19 01 00       	push   $0x1198a
   10e7e:	e8 22 06 00 00       	call   114a5 <log_printf>
   10e83:	83 c4 10             	add    $0x10,%esp

    task_init(&task_1, (uint32_t)test_task_1, (uint32_t)&init_stack_1[1024]);
   10e86:	ba 40 32 02 00       	mov    $0x23240,%edx
   10e8b:	b8 da 0d 01 00       	mov    $0x10dda,%eax
   10e90:	83 ec 04             	sub    $0x4,%esp
   10e93:	52                   	push   %edx
   10e94:	50                   	push   %eax
   10e95:	68 20 22 02 00       	push   $0x22220
   10e9a:	e8 0e f4 ff ff       	call   102ad <task_init>
   10e9f:	83 c4 10             	add    $0x10,%esp
    task_init(&task_2, (uint32_t)test_task_2, (uint32_t)&init_stack_2[1024]);
   10ea2:	ba 40 42 02 00       	mov    $0x24240,%edx
   10ea7:	b8 18 0e 01 00       	mov    $0x10e18,%eax
   10eac:	83 ec 04             	sub    $0x4,%esp
   10eaf:	52                   	push   %edx
   10eb0:	50                   	push   %eax
   10eb1:	68 24 22 02 00       	push   $0x22224
   10eb6:	e8 f2 f3 ff ff       	call   102ad <task_init>
   10ebb:	83 c4 10             	add    $0x10,%esp

    task_switch_from_to(0, &task_2);
   10ebe:	83 ec 08             	sub    $0x8,%esp
   10ec1:	68 24 22 02 00       	push   $0x22224
   10ec6:	6a 00                	push   $0x0
   10ec8:	e8 60 f4 ff ff       	call   1032d <task_switch_from_to>
   10ecd:	83 c4 10             	add    $0x10,%esp


   10ed0:	90                   	nop
   10ed1:	c9                   	leave  
   10ed2:	c3                   	ret    

00010ed3 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10ed3:	55                   	push   %ebp
   10ed4:	89 e5                	mov    %esp,%ebp
   10ed6:	f4                   	hlt    
   10ed7:	90                   	nop
   10ed8:	5d                   	pop    %ebp
   10ed9:	c3                   	ret    

00010eda <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   10eda:	55                   	push   %ebp
   10edb:	89 e5                	mov    %esp,%ebp
   10edd:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   10ee0:	83 ec 08             	sub    $0x8,%esp
   10ee3:	ff 75 14             	push   0x14(%ebp)
   10ee6:	68 ac 19 01 00       	push   $0x119ac
   10eeb:	e8 b5 05 00 00       	call   114a5 <log_printf>
   10ef0:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   10ef3:	ff 75 10             	push   0x10(%ebp)
   10ef6:	ff 75 0c             	push   0xc(%ebp)
   10ef9:	ff 75 08             	push   0x8(%ebp)
   10efc:	68 bd 19 01 00       	push   $0x119bd
   10f01:	e8 9f 05 00 00       	call   114a5 <log_printf>
   10f06:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   10f09:	e8 c5 ff ff ff       	call   10ed3 <hlt>
   10f0e:	eb f9                	jmp    10f09 <pannic+0x2f>

00010f10 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   10f10:	55                   	push   %ebp
   10f11:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   10f13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f17:	74 3b                	je     10f54 <kernel_strcpy+0x44>
   10f19:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f1d:	74 35                	je     10f54 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   10f1f:	eb 17                	jmp    10f38 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   10f21:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f24:	8d 42 01             	lea    0x1(%edx),%eax
   10f27:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2d:	8d 48 01             	lea    0x1(%eax),%ecx
   10f30:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f33:	0f b6 12             	movzbl (%edx),%edx
   10f36:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10f38:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3b:	0f b6 00             	movzbl (%eax),%eax
   10f3e:	84 c0                	test   %al,%al
   10f40:	74 0a                	je     10f4c <kernel_strcpy+0x3c>
   10f42:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f45:	0f b6 00             	movzbl (%eax),%eax
   10f48:	84 c0                	test   %al,%al
   10f4a:	75 d5                	jne    10f21 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   10f4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4f:	c6 00 00             	movb   $0x0,(%eax)
   10f52:	eb 01                	jmp    10f55 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   10f54:	90                   	nop
    
}
   10f55:	5d                   	pop    %ebp
   10f56:	c3                   	ret    

00010f57 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   10f57:	55                   	push   %ebp
   10f58:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   10f5a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f5e:	74 45                	je     10fa5 <kernel_strncpy+0x4e>
   10f60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f64:	74 3f                	je     10fa5 <kernel_strncpy+0x4e>
   10f66:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f6a:	74 39                	je     10fa5 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   10f6c:	eb 17                	jmp    10f85 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   10f6e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f71:	8d 42 01             	lea    0x1(%edx),%eax
   10f74:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f77:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7a:	8d 48 01             	lea    0x1(%eax),%ecx
   10f7d:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f80:	0f b6 12             	movzbl (%edx),%edx
   10f83:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   10f85:	8b 45 10             	mov    0x10(%ebp),%eax
   10f88:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f8b:	89 55 10             	mov    %edx,0x10(%ebp)
   10f8e:	83 f8 01             	cmp    $0x1,%eax
   10f91:	7e 0a                	jle    10f9d <kernel_strncpy+0x46>
   10f93:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f96:	0f b6 00             	movzbl (%eax),%eax
   10f99:	84 c0                	test   %al,%al
   10f9b:	75 d1                	jne    10f6e <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   10f9d:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa0:	c6 00 00             	movb   $0x0,(%eax)
   10fa3:	eb 01                	jmp    10fa6 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   10fa5:	90                   	nop
}
   10fa6:	5d                   	pop    %ebp
   10fa7:	c3                   	ret    

00010fa8 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   10fa8:	55                   	push   %ebp
   10fa9:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   10fab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10faf:	74 06                	je     10fb7 <kernel_strncmp+0xf>
   10fb1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fb5:	75 0f                	jne    10fc6 <kernel_strncmp+0x1e>
   10fb7:	b8 00 00 00 00       	mov    $0x0,%eax
   10fbc:	eb 52                	jmp    11010 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   10fbe:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   10fc2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   10fc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc9:	0f b6 00             	movzbl (%eax),%eax
   10fcc:	84 c0                	test   %al,%al
   10fce:	74 24                	je     10ff4 <kernel_strncmp+0x4c>
   10fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fd3:	0f b6 00             	movzbl (%eax),%eax
   10fd6:	84 c0                	test   %al,%al
   10fd8:	74 1a                	je     10ff4 <kernel_strncmp+0x4c>
   10fda:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   10fde:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fe2:	74 10                	je     10ff4 <kernel_strncmp+0x4c>
   10fe4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe7:	0f b6 10             	movzbl (%eax),%edx
   10fea:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fed:	0f b6 00             	movzbl (%eax),%eax
   10ff0:	38 c2                	cmp    %al,%dl
   10ff2:	74 ca                	je     10fbe <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   10ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff7:	0f b6 10             	movzbl (%eax),%edx
   10ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ffd:	0f b6 00             	movzbl (%eax),%eax
   11000:	38 c2                	cmp    %al,%dl
   11002:	7e 07                	jle    1100b <kernel_strncmp+0x63>
   11004:	b8 01 00 00 00       	mov    $0x1,%eax
   11009:	eb 05                	jmp    11010 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   1100b:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   11010:	5d                   	pop    %ebp
   11011:	c3                   	ret    

00011012 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11012:	55                   	push   %ebp
   11013:	89 e5                	mov    %esp,%ebp
   11015:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   11018:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1101c:	75 07                	jne    11025 <kernel_strlen+0x13>
   1101e:	b8 00 00 00 00       	mov    $0x0,%eax
   11023:	eb 20                	jmp    11045 <kernel_strlen+0x33>

    int len = 0;
   11025:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   1102c:	eb 04                	jmp    11032 <kernel_strlen+0x20>
   1102e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11032:	8b 45 08             	mov    0x8(%ebp),%eax
   11035:	8d 50 01             	lea    0x1(%eax),%edx
   11038:	89 55 08             	mov    %edx,0x8(%ebp)
   1103b:	0f b6 00             	movzbl (%eax),%eax
   1103e:	84 c0                	test   %al,%al
   11040:	75 ec                	jne    1102e <kernel_strlen+0x1c>

    return len;
   11042:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   11045:	c9                   	leave  
   11046:	c3                   	ret    

00011047 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   11047:	55                   	push   %ebp
   11048:	89 e5                	mov    %esp,%ebp
   1104a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   1104d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11051:	74 40                	je     11093 <kernel_memcpy+0x4c>
   11053:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11057:	74 3a                	je     11093 <kernel_memcpy+0x4c>
   11059:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1105d:	74 34                	je     11093 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   1105f:	8b 45 08             	mov    0x8(%ebp),%eax
   11062:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   11065:	8b 45 0c             	mov    0xc(%ebp),%eax
   11068:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   1106b:	eb 17                	jmp    11084 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   1106d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11070:	8d 42 01             	lea    0x1(%edx),%eax
   11073:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11076:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11079:	8d 48 01             	lea    0x1(%eax),%ecx
   1107c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1107f:	0f b6 12             	movzbl (%edx),%edx
   11082:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11084:	8b 45 10             	mov    0x10(%ebp),%eax
   11087:	8d 50 ff             	lea    -0x1(%eax),%edx
   1108a:	89 55 10             	mov    %edx,0x10(%ebp)
   1108d:	85 c0                	test   %eax,%eax
   1108f:	75 dc                	jne    1106d <kernel_memcpy+0x26>
   11091:	eb 01                	jmp    11094 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   11093:	90                   	nop
    }
    
}
   11094:	c9                   	leave  
   11095:	c3                   	ret    

00011096 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   11096:	55                   	push   %ebp
   11097:	89 e5                	mov    %esp,%ebp
   11099:	83 ec 14             	sub    $0x14,%esp
   1109c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1109f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   110a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110a6:	74 2c                	je     110d4 <kernel_memset+0x3e>
   110a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110ac:	74 26                	je     110d4 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   110ae:	8b 45 08             	mov    0x8(%ebp),%eax
   110b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   110b4:	eb 0f                	jmp    110c5 <kernel_memset+0x2f>
        *(d++) = v;
   110b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110b9:	8d 50 01             	lea    0x1(%eax),%edx
   110bc:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110bf:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   110c3:	88 10                	mov    %dl,(%eax)
    while (size--) {
   110c5:	8b 45 10             	mov    0x10(%ebp),%eax
   110c8:	8d 50 ff             	lea    -0x1(%eax),%edx
   110cb:	89 55 10             	mov    %edx,0x10(%ebp)
   110ce:	85 c0                	test   %eax,%eax
   110d0:	75 e4                	jne    110b6 <kernel_memset+0x20>
   110d2:	eb 01                	jmp    110d5 <kernel_memset+0x3f>
    if (!dest || !size) return;
   110d4:	90                   	nop
    }
    
}
   110d5:	c9                   	leave  
   110d6:	c3                   	ret    

000110d7 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   110d7:	55                   	push   %ebp
   110d8:	89 e5                	mov    %esp,%ebp
   110da:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   110dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110e1:	74 0c                	je     110ef <kernel_memcmp+0x18>
   110e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110e7:	74 06                	je     110ef <kernel_memcmp+0x18>
   110e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110ed:	75 07                	jne    110f6 <kernel_memcmp+0x1f>
   110ef:	b8 00 00 00 00       	mov    $0x0,%eax
   110f4:	eb 63                	jmp    11159 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   110f6:	8b 45 08             	mov    0x8(%ebp),%eax
   110f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   110fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   110ff:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11102:	eb 08                	jmp    1110c <kernel_memcmp+0x35>
        d1++;
   11104:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   11108:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   1110c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11110:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11114:	74 10                	je     11126 <kernel_memcmp+0x4f>
   11116:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11119:	0f b6 10             	movzbl (%eax),%edx
   1111c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1111f:	0f b6 00             	movzbl (%eax),%eax
   11122:	38 c2                	cmp    %al,%dl
   11124:	74 de                	je     11104 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   11126:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11129:	0f b6 10             	movzbl (%eax),%edx
   1112c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1112f:	0f b6 00             	movzbl (%eax),%eax
   11132:	38 c2                	cmp    %al,%dl
   11134:	76 07                	jbe    1113d <kernel_memcmp+0x66>
   11136:	b8 01 00 00 00       	mov    $0x1,%eax
   1113b:	eb 1c                	jmp    11159 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   1113d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11140:	0f b6 10             	movzbl (%eax),%edx
   11143:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11146:	0f b6 00             	movzbl (%eax),%eax
   11149:	38 c2                	cmp    %al,%dl
   1114b:	73 07                	jae    11154 <kernel_memcmp+0x7d>
   1114d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11152:	eb 05                	jmp    11159 <kernel_memcmp+0x82>
    else return 0;
   11154:	b8 00 00 00 00       	mov    $0x0,%eax

}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11161:	8d 45 10             	lea    0x10(%ebp),%eax
   11164:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   11167:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1116a:	83 ec 04             	sub    $0x4,%esp
   1116d:	50                   	push   %eax
   1116e:	ff 75 0c             	push   0xc(%ebp)
   11171:	ff 75 08             	push   0x8(%ebp)
   11174:	e8 06 00 00 00       	call   1117f <kernel_vsprintf>
   11179:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1117c:	90                   	nop
   1117d:	c9                   	leave  
   1117e:	c3                   	ret    

0001117f <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   1117f:	55                   	push   %ebp
   11180:	89 e5                	mov    %esp,%ebp
   11182:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   11185:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   1118c:	8b 45 08             	mov    0x8(%ebp),%eax
   1118f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11192:	e9 68 01 00 00       	jmp    112ff <kernel_vsprintf+0x180>
        switch (state) {
   11197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1119b:	74 0b                	je     111a8 <kernel_vsprintf+0x29>
   1119d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   111a1:	74 2b                	je     111ce <kernel_vsprintf+0x4f>
   111a3:	e9 56 01 00 00       	jmp    112fe <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   111a8:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   111ac:	75 0c                	jne    111ba <kernel_vsprintf+0x3b>
   111ae:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111b5:	e9 45 01 00 00       	jmp    112ff <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   111ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111bd:	8d 50 01             	lea    0x1(%eax),%edx
   111c0:	89 55 f0             	mov    %edx,-0x10(%ebp)
   111c3:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   111c7:	88 10                	mov    %dl,(%eax)
            break;
   111c9:	e9 31 01 00 00       	jmp    112ff <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   111ce:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   111d2:	75 47                	jne    1121b <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   111d4:	8b 45 10             	mov    0x10(%ebp),%eax
   111d7:	8d 50 04             	lea    0x4(%eax),%edx
   111da:	89 55 10             	mov    %edx,0x10(%ebp)
   111dd:	8b 00                	mov    (%eax),%eax
   111df:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   111e2:	ff 75 ec             	push   -0x14(%ebp)
   111e5:	e8 28 fe ff ff       	call   11012 <kernel_strlen>
   111ea:	83 c4 04             	add    $0x4,%esp
   111ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   111f0:	eb 17                	jmp    11209 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   111f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   111f5:	8d 42 01             	lea    0x1(%edx),%eax
   111f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
   111fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111fe:	8d 48 01             	lea    0x1(%eax),%ecx
   11201:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11204:	0f b6 12             	movzbl (%edx),%edx
   11207:	88 10                	mov    %dl,(%eax)
                while (len--) {
   11209:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1120c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1120f:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11212:	85 c0                	test   %eax,%eax
   11214:	75 dc                	jne    111f2 <kernel_vsprintf+0x73>
   11216:	e9 da 00 00 00       	jmp    112f5 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   1121b:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1121f:	75 37                	jne    11258 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   11221:	8b 45 10             	mov    0x10(%ebp),%eax
   11224:	8d 50 04             	lea    0x4(%eax),%edx
   11227:	89 55 10             	mov    %edx,0x10(%ebp)
   1122a:	8b 00                	mov    (%eax),%eax
   1122c:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   1122f:	83 ec 04             	sub    $0x4,%esp
   11232:	6a 0a                	push   $0xa
   11234:	ff 75 d8             	push   -0x28(%ebp)
   11237:	ff 75 f0             	push   -0x10(%ebp)
   1123a:	e8 dd 00 00 00       	call   1131c <kernel_itoa>
   1123f:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   11242:	83 ec 0c             	sub    $0xc,%esp
   11245:	ff 75 f0             	push   -0x10(%ebp)
   11248:	e8 c5 fd ff ff       	call   11012 <kernel_strlen>
   1124d:	83 c4 10             	add    $0x10,%esp
   11250:	01 45 f0             	add    %eax,-0x10(%ebp)
   11253:	e9 9d 00 00 00       	jmp    112f5 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   11258:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   1125c:	74 06                	je     11264 <kernel_vsprintf+0xe5>
   1125e:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   11262:	75 34                	jne    11298 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   11264:	8b 45 10             	mov    0x10(%ebp),%eax
   11267:	8d 50 04             	lea    0x4(%eax),%edx
   1126a:	89 55 10             	mov    %edx,0x10(%ebp)
   1126d:	8b 00                	mov    (%eax),%eax
   1126f:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   11272:	83 ec 04             	sub    $0x4,%esp
   11275:	6a 10                	push   $0x10
   11277:	ff 75 dc             	push   -0x24(%ebp)
   1127a:	ff 75 f0             	push   -0x10(%ebp)
   1127d:	e8 9a 00 00 00       	call   1131c <kernel_itoa>
   11282:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11285:	83 ec 0c             	sub    $0xc,%esp
   11288:	ff 75 f0             	push   -0x10(%ebp)
   1128b:	e8 82 fd ff ff       	call   11012 <kernel_strlen>
   11290:	83 c4 10             	add    $0x10,%esp
   11293:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   11296:	eb 5d                	jmp    112f5 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   11298:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1129c:	75 34                	jne    112d2 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   1129e:	8b 45 10             	mov    0x10(%ebp),%eax
   112a1:	8d 50 04             	lea    0x4(%eax),%edx
   112a4:	89 55 10             	mov    %edx,0x10(%ebp)
   112a7:	8b 00                	mov    (%eax),%eax
   112a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   112ac:	83 ec 04             	sub    $0x4,%esp
   112af:	6a 02                	push   $0x2
   112b1:	ff 75 e0             	push   -0x20(%ebp)
   112b4:	ff 75 f0             	push   -0x10(%ebp)
   112b7:	e8 60 00 00 00       	call   1131c <kernel_itoa>
   112bc:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   112bf:	83 ec 0c             	sub    $0xc,%esp
   112c2:	ff 75 f0             	push   -0x10(%ebp)
   112c5:	e8 48 fd ff ff       	call   11012 <kernel_strlen>
   112ca:	83 c4 10             	add    $0x10,%esp
   112cd:	01 45 f0             	add    %eax,-0x10(%ebp)
   112d0:	eb 23                	jmp    112f5 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   112d2:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   112d6:	75 1d                	jne    112f5 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   112d8:	8b 45 10             	mov    0x10(%ebp),%eax
   112db:	8d 50 04             	lea    0x4(%eax),%edx
   112de:	89 55 10             	mov    %edx,0x10(%ebp)
   112e1:	8b 00                	mov    (%eax),%eax
   112e3:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   112e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e9:	8d 50 01             	lea    0x1(%eax),%edx
   112ec:	89 55 f0             	mov    %edx,-0x10(%ebp)
   112ef:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   112f3:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   112f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   112fc:	eb 01                	jmp    112ff <kernel_vsprintf+0x180>
        default:
            break;
   112fe:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   112ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   11302:	8d 50 01             	lea    0x1(%eax),%edx
   11305:	89 55 0c             	mov    %edx,0xc(%ebp)
   11308:	0f b6 00             	movzbl (%eax),%eax
   1130b:	88 45 e7             	mov    %al,-0x19(%ebp)
   1130e:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11312:	0f 85 7f fe ff ff    	jne    11197 <kernel_vsprintf+0x18>
        }
    }
    

}
   11318:	90                   	nop
   11319:	90                   	nop
   1131a:	c9                   	leave  
   1131b:	c3                   	ret    

0001131c <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1131c:	55                   	push   %ebp
   1131d:	89 e5                	mov    %esp,%ebp
   1131f:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11325:	8b 45 08             	mov    0x8(%ebp),%eax
   11328:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   1132b:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1132f:	74 1d                	je     1134e <kernel_itoa+0x32>
   11331:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11335:	74 17                	je     1134e <kernel_itoa+0x32>
   11337:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1133b:	74 11                	je     1134e <kernel_itoa+0x32>
   1133d:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11341:	74 0b                	je     1134e <kernel_itoa+0x32>
        *buf = '\0';
   11343:	8b 45 08             	mov    0x8(%ebp),%eax
   11346:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11349:	e9 a2 00 00 00       	jmp    113f0 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   1134e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11352:	79 11                	jns    11365 <kernel_itoa+0x49>
        *(p++) = '-';
   11354:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11357:	8d 50 01             	lea    0x1(%eax),%edx
   1135a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1135d:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   11360:	f7 5d 0c             	negl   0xc(%ebp)
   11363:	eb 1a                	jmp    1137f <kernel_itoa+0x63>
    } else if (num == 0) {
   11365:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11369:	75 14                	jne    1137f <kernel_itoa+0x63>
        *(p++) = '0';
   1136b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1136e:	8d 50 01             	lea    0x1(%eax),%edx
   11371:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11374:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   11377:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1137a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1137d:	eb 71                	jmp    113f0 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   1137f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   11386:	eb 2e                	jmp    113b6 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   11388:	8b 0d ec 19 01 00    	mov    0x119ec,%ecx
   1138e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11391:	99                   	cltd   
   11392:	f7 7d 10             	idivl  0x10(%ebp)
   11395:	89 d0                	mov    %edx,%eax
   11397:	01 c1                	add    %eax,%ecx
   11399:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1139c:	8d 50 01             	lea    0x1(%eax),%edx
   1139f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113a2:	0f b6 11             	movzbl (%ecx),%edx
   113a5:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   113ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   113af:	99                   	cltd   
   113b0:	f7 7d 10             	idivl  0x10(%ebp)
   113b3:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   113b6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113ba:	7f cc                	jg     11388 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   113bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113bf:	83 e8 01             	sub    $0x1,%eax
   113c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
   113c5:	eb 1d                	jmp    113e4 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   113c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ca:	8d 50 01             	lea    0x1(%eax),%edx
   113cd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113d0:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   113d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113d9:	01 ca                	add    %ecx,%edx
   113db:	0f b6 12             	movzbl (%edx),%edx
   113de:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   113e0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   113e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   113e8:	79 dd                	jns    113c7 <kernel_itoa+0xab>
    }
    *p = '\0';
   113ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ed:	c6 00 00             	movb   $0x0,(%eax)
   113f0:	c9                   	leave  
   113f1:	c3                   	ret    

000113f2 <inb>:
static inline uint8_t inb(uint16_t port) {
   113f2:	55                   	push   %ebp
   113f3:	89 e5                	mov    %esp,%ebp
   113f5:	83 ec 14             	sub    $0x14,%esp
   113f8:	8b 45 08             	mov    0x8(%ebp),%eax
   113fb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   113ff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11403:	89 c2                	mov    %eax,%edx
   11405:	ec                   	in     (%dx),%al
   11406:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11409:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1140d:	c9                   	leave  
   1140e:	c3                   	ret    

0001140f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1140f:	55                   	push   %ebp
   11410:	89 e5                	mov    %esp,%ebp
   11412:	83 ec 08             	sub    $0x8,%esp
   11415:	8b 45 08             	mov    0x8(%ebp),%eax
   11418:	8b 55 0c             	mov    0xc(%ebp),%edx
   1141b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1141f:	89 d0                	mov    %edx,%eax
   11421:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11424:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11428:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1142c:	ee                   	out    %al,(%dx)
}
   1142d:	90                   	nop
   1142e:	c9                   	leave  
   1142f:	c3                   	ret    

00011430 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   11430:	55                   	push   %ebp
   11431:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11433:	6a 00                	push   $0x0
   11435:	68 f9 03 00 00       	push   $0x3f9
   1143a:	e8 d0 ff ff ff       	call   1140f <outb>
   1143f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11442:	68 80 00 00 00       	push   $0x80
   11447:	68 fb 03 00 00       	push   $0x3fb
   1144c:	e8 be ff ff ff       	call   1140f <outb>
   11451:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11454:	6a 03                	push   $0x3
   11456:	68 f8 03 00 00       	push   $0x3f8
   1145b:	e8 af ff ff ff       	call   1140f <outb>
   11460:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11463:	6a 00                	push   $0x0
   11465:	68 f9 03 00 00       	push   $0x3f9
   1146a:	e8 a0 ff ff ff       	call   1140f <outb>
   1146f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11472:	6a 03                	push   $0x3
   11474:	68 fb 03 00 00       	push   $0x3fb
   11479:	e8 91 ff ff ff       	call   1140f <outb>
   1147e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11481:	68 c7 00 00 00       	push   $0xc7
   11486:	68 fa 03 00 00       	push   $0x3fa
   1148b:	e8 7f ff ff ff       	call   1140f <outb>
   11490:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11493:	6a 0f                	push   $0xf
   11495:	68 fc 03 00 00       	push   $0x3fc
   1149a:	e8 70 ff ff ff       	call   1140f <outb>
   1149f:	83 c4 08             	add    $0x8,%esp
}
   114a2:	90                   	nop
   114a3:	c9                   	leave  
   114a4:	c3                   	ret    

000114a5 <log_printf>:


void log_printf(const char *formate, ...) {
   114a5:	55                   	push   %ebp
   114a6:	89 e5                	mov    %esp,%ebp
   114a8:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   114ae:	83 ec 04             	sub    $0x4,%esp
   114b1:	68 80 00 00 00       	push   $0x80
   114b6:	6a 00                	push   $0x0
   114b8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   114be:	50                   	push   %eax
   114bf:	e8 d2 fb ff ff       	call   11096 <kernel_memset>
   114c4:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   114c7:	8d 45 0c             	lea    0xc(%ebp),%eax
   114ca:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   114d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   114d6:	83 ec 04             	sub    $0x4,%esp
   114d9:	50                   	push   %eax
   114da:	ff 75 08             	push   0x8(%ebp)
   114dd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   114e3:	50                   	push   %eax
   114e4:	e8 96 fc ff ff       	call   1117f <kernel_vsprintf>
   114e9:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   114ec:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   114f2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   114f5:	eb 57                	jmp    1154e <log_printf+0xa9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   114f7:	90                   	nop
   114f8:	83 ec 0c             	sub    $0xc,%esp
   114fb:	68 fd 03 00 00       	push   $0x3fd
   11500:	e8 ed fe ff ff       	call   113f2 <inb>
   11505:	83 c4 10             	add    $0x10,%esp
   11508:	0f b6 c0             	movzbl %al,%eax
   1150b:	83 e0 40             	and    $0x40,%eax
   1150e:	85 c0                	test   %eax,%eax
   11510:	74 e6                	je     114f8 <log_printf+0x53>

        if (*p == '\n') outb(COM1_PORT, '\r');
   11512:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11515:	0f b6 00             	movzbl (%eax),%eax
   11518:	3c 0a                	cmp    $0xa,%al
   1151a:	75 12                	jne    1152e <log_printf+0x89>
   1151c:	83 ec 08             	sub    $0x8,%esp
   1151f:	6a 0d                	push   $0xd
   11521:	68 f8 03 00 00       	push   $0x3f8
   11526:	e8 e4 fe ff ff       	call   1140f <outb>
   1152b:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1152e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11531:	8d 50 01             	lea    0x1(%eax),%edx
   11534:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11537:	0f b6 00             	movzbl (%eax),%eax
   1153a:	0f b6 c0             	movzbl %al,%eax
   1153d:	83 ec 08             	sub    $0x8,%esp
   11540:	50                   	push   %eax
   11541:	68 f8 03 00 00       	push   $0x3f8
   11546:	e8 c4 fe ff ff       	call   1140f <outb>
   1154b:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1154e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11551:	0f b6 00             	movzbl (%eax),%eax
   11554:	84 c0                	test   %al,%al
   11556:	75 9f                	jne    114f7 <log_printf+0x52>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   11558:	83 ec 08             	sub    $0x8,%esp
   1155b:	6a 0d                	push   $0xd
   1155d:	68 f8 03 00 00       	push   $0x3f8
   11562:	e8 a8 fe ff ff       	call   1140f <outb>
   11567:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1156a:	83 ec 08             	sub    $0x8,%esp
   1156d:	6a 0a                	push   $0xa
   1156f:	68 f8 03 00 00       	push   $0x3f8
   11574:	e8 96 fe ff ff       	call   1140f <outb>
   11579:	83 c4 10             	add    $0x10,%esp
   1157c:	90                   	nop
   1157d:	c9                   	leave  
   1157e:	c3                   	ret    
