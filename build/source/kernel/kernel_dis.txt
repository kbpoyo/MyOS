
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002480 memsz 0x00016da0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d88  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000006f4  00011d88  00011d88  00002d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  0001247c  0001247c  0000347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00014920  00012480  00012480  00003480  2**5
                  ALLOC
  4 .debug_line   00001023  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000534  00000000  00000000  000044a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000022d9  00000000  00000000  000049d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000dac  00000000  00000000  00006cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000160  00000000  00000000  00007a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000afa  00000000  00000000  00007bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  000086ba  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000b24  00000000  00000000  000086e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000001a far_jump
000102c7 l     F .text	000000be tss_init
00011dd4 l     O .rodata	0000000a __func__.0
000103c5 l     F .text	0000001f switch_to_tss
00000000 l    df *ABS*	00000000 gdt.c
000103fc l     F .text	00000028 lgdt
00012480 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
00010597 l     F .text	00000007 cli
0001059e l     F .text	00000007 sti
000105a5 l     F .text	00000007 hlt
000105ac l     F .text	0000001d inb
000105c9 l     F .text	00000021 outb
000105ea l     F .text	00000028 lidt
00022480 l     O .bss	00000800 idt_table
00010612 l     F .text	000000e9 print_exception_fram
000106fb l     F .text	0000003e do_default_handler
00010985 l     F .text	00000047 gate_desc_set
00010a0c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d8d l     F .text	00000021 outb
00022c80 l     O .bss	00000004 sys_tick
00010dd1 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000121a8 l     O .rodata	0000000c __func__.0
00022ca0 l     O .bss	0000006c task_1
00022d20 l     O .bss	0000006c task_2
00022da0 l     O .bss	00001000 init_stack_1
00023da0 l     O .bss	00001000 init_stack_2
00000000 l    df *ABS*	00000000 test.c
00010f89 l     F .text	00000047 list_init
000122b8 l     O .rodata	0000000a __func__.3
00010fd0 l     F .text	0000002d list_get_size
000122c4 l     O .rodata	0000000e __func__.2
00010ffd l     F .text	0000002c list_get_first
000122e4 l     O .rodata	0000000f __func__.0
00011029 l     F .text	0000002d list_get_last
000122d4 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00011331 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
0001247c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00011850 l     F .text	00000035 list_is_empty
00012414 l     O .rodata	0000000e __func__.5
00011885 l     F .text	0000002d list_get_size
0001244c l     O .rodata	0000000e __func__.2
00012400 l     O .rodata	00000012 __func__.6
00012424 l     O .rodata	00000011 __func__.4
00012438 l     O .rodata	00000012 __func__.3
0001245c l     O .rodata	00000011 __func__.1
00012470 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00011bfb l     F .text	0000001d inb
00011c18 l     F .text	00000021 outb
000114a5 g     F .text	0000004f kernel_memcpy
00010c12 g     F .text	00000098 idt_enable
0001193d g     F .text	0000008f list_insert_last
0001086d g     F .text	0000001c do_handler_segment_not_present
00010d49 g     F .text	0000000b idt_enable_global
000114f4 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00011c39 g     F .text	00000075 log_init
00010f07 g     F .text	00000082 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
0001136e g     F .text	00000047 kernel_strcpy
00010d3e g     F .text	0000000b idt_disable_global
000109cc g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000107c5 g     F .text	0000001c do_handler_overflow
000108f9 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000108a5 g     F .text	0000001c do_handler_general_protection
00010969 g     F .text	0000001c do_handler_control_exception
00010755 g     F .text	0000001c do_handler_divider
00010835 g     F .text	0000001c do_handler_double_fault
000108c1 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00010d54 g     F .text	00000039 pic_send_eoi
00011a7d g     F .text	000000b5 list_remove_last
00010180 g       .text	00000000 exception_handler_stack_segment_fault
000104e3 g     F .text	00000070 gdt_init
0001094d g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010771 g     F .text	0000001c do_handler_debug
00024da0 g     O .bss	00002000 stack
00010ec9 g     F .text	0000003e test_task_2
00011056 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
00010a9f g     F .text	00000173 idt_init
000107fd g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000108dd g     F .text	0000001c do_handler_fpu_error
00010915 g     F .text	0000001c do_handler_machine_check
000118b2 g     F .text	0000008b list_insert_first
00010047 g       .text	00000000 exception_handler_divider
000113b5 g     F .text	00000051 kernel_strncpy
00010e4b g     F .text	00000040 kernel_init
00010000 g       .text	00000000 _start
000115dd g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010851 g     F .text	0000001c do_handler_invalid_tss
00010caa g     F .text	00000094 idt_disable
0001078d g     F .text	0000001c do_handler_nmi
00010e8b g     F .text	0000003e test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010819 g     F .text	0000001c do_handler_device_unavailable
00011535 g     F .text	00000084 kernel_memcmp
00010931 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010739 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000103e4 g     F .text	00000018 task_switch_from_to
00011470 g     F .text	00000035 kernel_strlen
00010064 g       .text	00000000 exception_handler_debug
00010424 g     F .text	000000bf segment_desc_set
000107e1 g     F .text	0000001c do_handler_bound_range
000119cc g     F .text	000000b1 list_remove_first
00011406 g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00011338 g     F .text	00000036 pannic
00010889 g     F .text	0000001c do_handler_stack_segment_fault
000107a9 g     F .text	0000001c do_handler_breakpoint
00011cae g     F .text	000000da log_printf
00010385 g     F .text	00000040 task_init
000115b9 g     F .text	00000024 kernel_sprintf
00010553 g     F .text	00000044 gdt_alloc_desc
0001177a g     F .text	000000d6 kernel_itoa
00011b32 g     F .text	000000c9 list_remove
00010dae g     F .text	00000023 do_handler_time
00010e33 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 40 0e 00 00       	call   10e4b <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc a0 6d 02 00       	mov    $0x26da0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 dd 0e 00 00       	jmp    10f07 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 fe 06 00 00       	call   10739 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 fd 06 00 00       	call   10755 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 fc 06 00 00       	call   10771 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 fb 06 00 00       	call   1078d <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 fa 06 00 00       	call   107a9 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 f9 06 00 00       	call   107c5 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 f8 06 00 00       	call   107e1 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 f7 06 00 00       	call   107fd <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 f6 06 00 00       	call   10819 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 f7 06 00 00       	call   10835 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 f8 06 00 00       	call   10851 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 f9 06 00 00       	call   1086d <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 fa 06 00 00       	call   10889 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 fb 06 00 00       	call   108a5 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 fc 06 00 00       	call   108c1 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 fb 06 00 00       	call   108dd <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 fc 06 00 00       	call   108f9 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 fb 06 00 00       	call   10915 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 fa 06 00 00       	call   10931 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 f9 06 00 00       	call   1094d <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 fa 06 00 00       	call   10969 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 22 0b 00 00       	call   10dae <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   102b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b6:	89 45 f8             	mov    %eax,-0x8(%ebp)
   102b9:	8b 45 08             	mov    0x8(%ebp),%eax
   102bc:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   102bf:	8d 45 f8             	lea    -0x8(%ebp),%eax
   102c2:	ff 28                	ljmp   *(%eax)
}
   102c4:	90                   	nop
   102c5:	c9                   	leave  
   102c6:	c3                   	ret    

000102c7 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
   102ca:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   102cd:	8b 45 08             	mov    0x8(%ebp),%eax
   102d0:	83 ec 04             	sub    $0x4,%esp
   102d3:	6a 68                	push   $0x68
   102d5:	6a 00                	push   $0x0
   102d7:	50                   	push   %eax
   102d8:	e8 17 12 00 00       	call   114f4 <kernel_memset>
   102dd:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   102e0:	8b 45 08             	mov    0x8(%ebp),%eax
   102e3:	8b 55 0c             	mov    0xc(%ebp),%edx
   102e6:	89 50 20             	mov    %edx,0x20(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   102e9:	8b 45 08             	mov    0x8(%ebp),%eax
   102ec:	8b 55 10             	mov    0x10(%ebp),%edx
   102ef:	89 50 04             	mov    %edx,0x4(%eax)
   102f2:	8b 45 08             	mov    0x8(%ebp),%eax
   102f5:	8b 50 04             	mov    0x4(%eax),%edx
   102f8:	8b 45 08             	mov    0x8(%ebp),%eax
   102fb:	89 50 38             	mov    %edx,0x38(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   102fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10301:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
   10308:	8b 45 08             	mov    0x8(%ebp),%eax
   1030b:	8b 50 08             	mov    0x8(%eax),%edx
   1030e:	8b 45 08             	mov    0x8(%ebp),%eax
   10311:	89 50 50             	mov    %edx,0x50(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10314:	8b 45 08             	mov    0x8(%ebp),%eax
   10317:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
   1031e:	8b 45 08             	mov    0x8(%ebp),%eax
   10321:	8b 50 54             	mov    0x54(%eax),%edx
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	89 50 5c             	mov    %edx,0x5c(%eax)
   1032a:	8b 45 08             	mov    0x8(%ebp),%eax
   1032d:	8b 50 5c             	mov    0x5c(%eax),%edx
   10330:	8b 45 08             	mov    0x8(%ebp),%eax
   10333:	89 50 58             	mov    %edx,0x58(%eax)
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	8b 50 58             	mov    0x58(%eax),%edx
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	89 50 48             	mov    %edx,0x48(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10342:	8b 45 08             	mov    0x8(%ebp),%eax
   10345:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10356:	e8 f8 01 00 00       	call   10553 <gdt_alloc_desc>
   1035b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	89 c2                	mov    %eax,%edx
   10363:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10366:	0f b7 c0             	movzwl %ax,%eax
   10369:	68 89 00 00 00       	push   $0x89
   1036e:	6a 68                	push   $0x68
   10370:	52                   	push   %edx
   10371:	50                   	push   %eax
   10372:	e8 ad 00 00 00       	call   10424 <segment_desc_set>
   10377:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   1037a:	8b 45 08             	mov    0x8(%ebp),%eax
   1037d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10380:	89 50 68             	mov    %edx,0x68(%eax)
}
   10383:	c9                   	leave  
   10384:	c3                   	ret    

00010385 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
int task_init(task_t *task, uint32_t entry, uint32_t esp) {
   10385:	55                   	push   %ebp
   10386:	89 e5                	mov    %esp,%ebp
   10388:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1038b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1038f:	75 19                	jne    103aa <task_init+0x25>
   10391:	68 88 1d 01 00       	push   $0x11d88
   10396:	68 d4 1d 01 00       	push   $0x11dd4
   1039b:	6a 49                	push   $0x49
   1039d:	68 9c 1d 01 00       	push   $0x11d9c
   103a2:	e8 91 0f 00 00       	call   11338 <pannic>
   103a7:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   103aa:	83 ec 04             	sub    $0x4,%esp
   103ad:	ff 75 10             	push   0x10(%ebp)
   103b0:	ff 75 0c             	push   0xc(%ebp)
   103b3:	ff 75 08             	push   0x8(%ebp)
   103b6:	e8 0c ff ff ff       	call   102c7 <tss_init>
   103bb:	83 c4 10             	add    $0x10,%esp
    return 0;    
   103be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103c3:	c9                   	leave  
   103c4:	c3                   	ret    

000103c5 <switch_to_tss>:


static void switch_to_tss(uint16_t tss_selector) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
   103c8:	83 ec 04             	sub    $0x4,%esp
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   103d2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103d6:	6a 00                	push   $0x0
   103d8:	50                   	push   %eax
   103d9:	e8 cf fe ff ff       	call   102ad <far_jump>
   103de:	83 c4 08             	add    $0x8,%esp
}
   103e1:	90                   	nop
   103e2:	c9                   	leave  
   103e3:	c3                   	ret    

000103e4 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   103e4:	55                   	push   %ebp
   103e5:	89 e5                	mov    %esp,%ebp
    switch_to_tss(to->tss_selector);
   103e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103ea:	8b 40 68             	mov    0x68(%eax),%eax
   103ed:	0f b7 c0             	movzwl %ax,%eax
   103f0:	50                   	push   %eax
   103f1:	e8 cf ff ff ff       	call   103c5 <switch_to_tss>
   103f6:	83 c4 04             	add    $0x4,%esp
}
   103f9:	90                   	nop
   103fa:	c9                   	leave  
   103fb:	c3                   	ret    

000103fc <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   103fc:	55                   	push   %ebp
   103fd:	89 e5                	mov    %esp,%ebp
   103ff:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10402:	8b 45 08             	mov    0x8(%ebp),%eax
   10405:	c1 e8 10             	shr    $0x10,%eax
   10408:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1040c:	8b 45 08             	mov    0x8(%ebp),%eax
   1040f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10413:	8b 45 0c             	mov    0xc(%ebp),%eax
   10416:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10419:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1041d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10421:	90                   	nop
   10422:	c9                   	leave  
   10423:	c3                   	ret    

00010424 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10424:	55                   	push   %ebp
   10425:	89 e5                	mov    %esp,%ebp
   10427:	83 ec 18             	sub    $0x18,%esp
   1042a:	8b 55 08             	mov    0x8(%ebp),%edx
   1042d:	8b 45 14             	mov    0x14(%ebp),%eax
   10430:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10434:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10438:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1043c:	66 c1 e8 03          	shr    $0x3,%ax
   10440:	0f b7 c0             	movzwl %ax,%eax
   10443:	c1 e0 03             	shl    $0x3,%eax
   10446:	05 80 24 01 00       	add    $0x12480,%eax
   1044b:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   1044e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10451:	89 c2                	mov    %eax,%edx
   10453:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10456:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   1045a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1045d:	c1 e8 10             	shr    $0x10,%eax
   10460:	89 c2                	mov    %eax,%edx
   10462:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10465:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10468:	8b 45 0c             	mov    0xc(%ebp),%eax
   1046b:	c1 e8 18             	shr    $0x18,%eax
   1046e:	89 c2                	mov    %eax,%edx
   10470:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10473:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10476:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1047d:	76 1d                	jbe    1049c <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1047f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10482:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10486:	66 0d 00 80          	or     $0x8000,%ax
   1048a:	89 c2                	mov    %eax,%edx
   1048c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1048f:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10493:	8b 45 10             	mov    0x10(%ebp),%eax
   10496:	c1 e8 0c             	shr    $0xc,%eax
   10499:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   1049c:	8b 45 10             	mov    0x10(%ebp),%eax
   1049f:	89 c2                	mov    %eax,%edx
   104a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a4:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   104a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104aa:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104ae:	89 c2                	mov    %eax,%edx
   104b0:	8b 45 10             	mov    0x10(%ebp),%eax
   104b3:	c1 e8 08             	shr    $0x8,%eax
   104b6:	66 25 00 0f          	and    $0xf00,%ax
   104ba:	09 d0                	or     %edx,%eax
   104bc:	89 c2                	mov    %eax,%edx
   104be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c1:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   104c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c8:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104cc:	89 c2                	mov    %eax,%edx
   104ce:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   104d2:	80 e4 f0             	and    $0xf0,%ah
   104d5:	09 d0                	or     %edx,%eax
   104d7:	89 c2                	mov    %eax,%edx
   104d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104dc:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   104e0:	90                   	nop
   104e1:	c9                   	leave  
   104e2:	c3                   	ret    

000104e3 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   104e3:	55                   	push   %ebp
   104e4:	89 e5                	mov    %esp,%ebp
   104e6:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   104e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104f0:	eb 1c                	jmp    1050e <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   104f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104f5:	c1 e0 03             	shl    $0x3,%eax
   104f8:	0f b7 c0             	movzwl %ax,%eax
   104fb:	6a 00                	push   $0x0
   104fd:	6a 00                	push   $0x0
   104ff:	6a 00                	push   $0x0
   10501:	50                   	push   %eax
   10502:	e8 1d ff ff ff       	call   10424 <segment_desc_set>
   10507:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1050a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1050e:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10515:	7e db                	jle    104f2 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10517:	68 92 40 00 00       	push   $0x4092
   1051c:	6a ff                	push   $0xffffffff
   1051e:	6a 00                	push   $0x0
   10520:	6a 10                	push   $0x10
   10522:	e8 fd fe ff ff       	call   10424 <segment_desc_set>
   10527:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   1052a:	68 9a 40 00 00       	push   $0x409a
   1052f:	6a ff                	push   $0xffffffff
   10531:	6a 00                	push   $0x0
   10533:	6a 08                	push   $0x8
   10535:	e8 ea fe ff ff       	call   10424 <segment_desc_set>
   1053a:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1053d:	b8 80 24 01 00       	mov    $0x12480,%eax
   10542:	68 00 00 01 00       	push   $0x10000
   10547:	50                   	push   %eax
   10548:	e8 af fe ff ff       	call   103fc <lgdt>
   1054d:	83 c4 08             	add    $0x8,%esp
}
   10550:	90                   	nop
   10551:	c9                   	leave  
   10552:	c3                   	ret    

00010553 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10553:	55                   	push   %ebp
   10554:	89 e5                	mov    %esp,%ebp
   10556:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10559:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10560:	eb 25                	jmp    10587 <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   10562:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10565:	c1 e0 03             	shl    $0x3,%eax
   10568:	05 80 24 01 00       	add    $0x12480,%eax
   1056d:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   10570:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10573:	0f b7 00             	movzwl (%eax),%eax
   10576:	66 85 c0             	test   %ax,%ax
   10579:	75 08                	jne    10583 <gdt_alloc_desc+0x30>
            return i << 3;
   1057b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1057e:	c1 e0 03             	shl    $0x3,%eax
   10581:	eb 12                	jmp    10595 <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10583:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10587:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   1058e:	7e d2                	jle    10562 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10590:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10595:	c9                   	leave  
   10596:	c3                   	ret    

00010597 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10597:	55                   	push   %ebp
   10598:	89 e5                	mov    %esp,%ebp
   1059a:	fa                   	cli    
   1059b:	90                   	nop
   1059c:	5d                   	pop    %ebp
   1059d:	c3                   	ret    

0001059e <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1059e:	55                   	push   %ebp
   1059f:	89 e5                	mov    %esp,%ebp
   105a1:	fb                   	sti    
   105a2:	90                   	nop
   105a3:	5d                   	pop    %ebp
   105a4:	c3                   	ret    

000105a5 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   105a5:	55                   	push   %ebp
   105a6:	89 e5                	mov    %esp,%ebp
   105a8:	f4                   	hlt    
   105a9:	90                   	nop
   105aa:	5d                   	pop    %ebp
   105ab:	c3                   	ret    

000105ac <inb>:
static inline uint8_t inb(uint16_t port) {
   105ac:	55                   	push   %ebp
   105ad:	89 e5                	mov    %esp,%ebp
   105af:	83 ec 14             	sub    $0x14,%esp
   105b2:	8b 45 08             	mov    0x8(%ebp),%eax
   105b5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   105b9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105bd:	89 c2                	mov    %eax,%edx
   105bf:	ec                   	in     (%dx),%al
   105c0:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   105c3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   105c7:	c9                   	leave  
   105c8:	c3                   	ret    

000105c9 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   105c9:	55                   	push   %ebp
   105ca:	89 e5                	mov    %esp,%ebp
   105cc:	83 ec 08             	sub    $0x8,%esp
   105cf:	8b 45 08             	mov    0x8(%ebp),%eax
   105d2:	8b 55 0c             	mov    0xc(%ebp),%edx
   105d5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   105d9:	89 d0                	mov    %edx,%eax
   105db:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   105de:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   105e2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   105e6:	ee                   	out    %al,(%dx)
}
   105e7:	90                   	nop
   105e8:	c9                   	leave  
   105e9:	c3                   	ret    

000105ea <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   105ea:	55                   	push   %ebp
   105eb:	89 e5                	mov    %esp,%ebp
   105ed:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   105f0:	8b 45 08             	mov    0x8(%ebp),%eax
   105f3:	c1 e8 10             	shr    $0x10,%eax
   105f6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   105fa:	8b 45 08             	mov    0x8(%ebp),%eax
   105fd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10601:	8b 45 0c             	mov    0xc(%ebp),%eax
   10604:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10607:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1060b:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1060f:	90                   	nop
   10610:	c9                   	leave  
   10611:	c3                   	ret    

00010612 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10612:	55                   	push   %ebp
   10613:	89 e5                	mov    %esp,%ebp
   10615:	57                   	push   %edi
   10616:	56                   	push   %esi
   10617:	53                   	push   %ebx
   10618:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   1061b:	83 ec 0c             	sub    $0xc,%esp
   1061e:	68 e0 1d 01 00       	push   $0x11de0
   10623:	e8 86 16 00 00       	call   11cae <log_printf>
   10628:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   1062b:	8b 45 08             	mov    0x8(%ebp),%eax
   1062e:	8b 50 34             	mov    0x34(%eax),%edx
   10631:	8b 45 08             	mov    0x8(%ebp),%eax
   10634:	8b 40 30             	mov    0x30(%eax),%eax
   10637:	83 ec 04             	sub    $0x4,%esp
   1063a:	52                   	push   %edx
   1063b:	50                   	push   %eax
   1063c:	68 1e 1e 01 00       	push   $0x11e1e
   10641:	e8 68 16 00 00       	call   11cae <log_printf>
   10646:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10649:	8b 45 08             	mov    0x8(%ebp),%eax
   1064c:	8b 38                	mov    (%eax),%edi
   1064e:	8b 45 08             	mov    0x8(%ebp),%eax
   10651:	8b 70 04             	mov    0x4(%eax),%esi
   10654:	8b 45 08             	mov    0x8(%ebp),%eax
   10657:	8b 58 08             	mov    0x8(%eax),%ebx
   1065a:	8b 45 08             	mov    0x8(%ebp),%eax
   1065d:	8b 48 0c             	mov    0xc(%eax),%ecx
   10660:	8b 45 08             	mov    0x8(%ebp),%eax
   10663:	8b 50 0c             	mov    0xc(%eax),%edx
   10666:	8b 45 08             	mov    0x8(%ebp),%eax
   10669:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   1066c:	83 ec 04             	sub    $0x4,%esp
   1066f:	57                   	push   %edi
   10670:	56                   	push   %esi
   10671:	53                   	push   %ebx
   10672:	51                   	push   %ecx
   10673:	52                   	push   %edx
   10674:	50                   	push   %eax
   10675:	68 38 1e 01 00       	push   $0x11e38
   1067a:	e8 2f 16 00 00       	call   11cae <log_printf>
   1067f:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10682:	8b 45 08             	mov    0x8(%ebp),%eax
   10685:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10688:	8b 45 08             	mov    0x8(%ebp),%eax
   1068b:	8b 40 18             	mov    0x18(%eax),%eax
   1068e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10691:	8b 45 08             	mov    0x8(%ebp),%eax
   10694:	8b 58 10             	mov    0x10(%eax),%ebx
   10697:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1069a:	8b 45 08             	mov    0x8(%ebp),%eax
   1069d:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   106a0:	8b 45 08             	mov    0x8(%ebp),%eax
   106a3:	8b 70 24             	mov    0x24(%eax),%esi
   106a6:	8b 45 08             	mov    0x8(%ebp),%eax
   106a9:	8b 58 28             	mov    0x28(%eax),%ebx
   106ac:	8b 45 08             	mov    0x8(%ebp),%eax
   106af:	8b 50 20             	mov    0x20(%eax),%edx
   106b2:	8b 45 08             	mov    0x8(%ebp),%eax
   106b5:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   106b8:	83 ec 0c             	sub    $0xc,%esp
   106bb:	51                   	push   %ecx
   106bc:	ff 75 e4             	push   -0x1c(%ebp)
   106bf:	ff 75 e0             	push   -0x20(%ebp)
   106c2:	57                   	push   %edi
   106c3:	56                   	push   %esi
   106c4:	53                   	push   %ebx
   106c5:	52                   	push   %edx
   106c6:	50                   	push   %eax
   106c7:	68 68 1e 01 00       	push   $0x11e68
   106cc:	e8 dd 15 00 00       	call   11cae <log_printf>
   106d1:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 50 40             	mov    0x40(%eax),%edx
   106da:	8b 45 08             	mov    0x8(%ebp),%eax
   106dd:	8b 40 38             	mov    0x38(%eax),%eax
   106e0:	83 ec 04             	sub    $0x4,%esp
   106e3:	52                   	push   %edx
   106e4:	50                   	push   %eax
   106e5:	68 c0 1e 01 00       	push   $0x11ec0
   106ea:	e8 bf 15 00 00       	call   11cae <log_printf>
   106ef:	83 c4 10             	add    $0x10,%esp
}
   106f2:	90                   	nop
   106f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
   106f6:	5b                   	pop    %ebx
   106f7:	5e                   	pop    %esi
   106f8:	5f                   	pop    %edi
   106f9:	5d                   	pop    %ebp
   106fa:	c3                   	ret    

000106fb <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   106fb:	55                   	push   %ebp
   106fc:	89 e5                	mov    %esp,%ebp
   106fe:	83 ec 08             	sub    $0x8,%esp

  log_printf("----------------------------------");
   10701:	83 ec 0c             	sub    $0xc,%esp
   10704:	68 dc 1e 01 00       	push   $0x11edc
   10709:	e8 a0 15 00 00       	call   11cae <log_printf>
   1070e:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10711:	83 ec 08             	sub    $0x8,%esp
   10714:	ff 75 0c             	push   0xc(%ebp)
   10717:	68 ff 1e 01 00       	push   $0x11eff
   1071c:	e8 8d 15 00 00       	call   11cae <log_printf>
   10721:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10724:	83 ec 0c             	sub    $0xc,%esp
   10727:	ff 75 08             	push   0x8(%ebp)
   1072a:	e8 e3 fe ff ff       	call   10612 <print_exception_fram>
   1072f:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10732:	e8 6e fe ff ff       	call   105a5 <hlt>
   10737:	eb f9                	jmp    10732 <do_default_handler+0x37>

00010739 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10739:	55                   	push   %ebp
   1073a:	89 e5                	mov    %esp,%ebp
   1073c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1073f:	83 ec 08             	sub    $0x8,%esp
   10742:	68 19 1f 01 00       	push   $0x11f19
   10747:	ff 75 08             	push   0x8(%ebp)
   1074a:	e8 ac ff ff ff       	call   106fb <do_default_handler>
   1074f:	83 c4 10             	add    $0x10,%esp
}
   10752:	90                   	nop
   10753:	c9                   	leave  
   10754:	c3                   	ret    

00010755 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10755:	55                   	push   %ebp
   10756:	89 e5                	mov    %esp,%ebp
   10758:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1075b:	83 ec 08             	sub    $0x8,%esp
   1075e:	68 2b 1f 01 00       	push   $0x11f2b
   10763:	ff 75 08             	push   0x8(%ebp)
   10766:	e8 90 ff ff ff       	call   106fb <do_default_handler>
   1076b:	83 c4 10             	add    $0x10,%esp
}
   1076e:	90                   	nop
   1076f:	c9                   	leave  
   10770:	c3                   	ret    

00010771 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10771:	55                   	push   %ebp
   10772:	89 e5                	mov    %esp,%ebp
   10774:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	68 3d 1f 01 00       	push   $0x11f3d
   1077f:	ff 75 08             	push   0x8(%ebp)
   10782:	e8 74 ff ff ff       	call   106fb <do_default_handler>
   10787:	83 c4 10             	add    $0x10,%esp
}
   1078a:	90                   	nop
   1078b:	c9                   	leave  
   1078c:	c3                   	ret    

0001078d <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   1078d:	55                   	push   %ebp
   1078e:	89 e5                	mov    %esp,%ebp
   10790:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10793:	83 ec 08             	sub    $0x8,%esp
   10796:	68 4d 1f 01 00       	push   $0x11f4d
   1079b:	ff 75 08             	push   0x8(%ebp)
   1079e:	e8 58 ff ff ff       	call   106fb <do_default_handler>
   107a3:	83 c4 10             	add    $0x10,%esp
}
   107a6:	90                   	nop
   107a7:	c9                   	leave  
   107a8:	c3                   	ret    

000107a9 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   107a9:	55                   	push   %ebp
   107aa:	89 e5                	mov    %esp,%ebp
   107ac:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   107af:	83 ec 08             	sub    $0x8,%esp
   107b2:	68 5b 1f 01 00       	push   $0x11f5b
   107b7:	ff 75 08             	push   0x8(%ebp)
   107ba:	e8 3c ff ff ff       	call   106fb <do_default_handler>
   107bf:	83 c4 10             	add    $0x10,%esp
}
   107c2:	90                   	nop
   107c3:	c9                   	leave  
   107c4:	c3                   	ret    

000107c5 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   107c5:	55                   	push   %ebp
   107c6:	89 e5                	mov    %esp,%ebp
   107c8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   107cb:	83 ec 08             	sub    $0x8,%esp
   107ce:	68 70 1f 01 00       	push   $0x11f70
   107d3:	ff 75 08             	push   0x8(%ebp)
   107d6:	e8 20 ff ff ff       	call   106fb <do_default_handler>
   107db:	83 c4 10             	add    $0x10,%esp
}
   107de:	90                   	nop
   107df:	c9                   	leave  
   107e0:	c3                   	ret    

000107e1 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   107e1:	55                   	push   %ebp
   107e2:	89 e5                	mov    %esp,%ebp
   107e4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   107e7:	83 ec 08             	sub    $0x8,%esp
   107ea:	68 83 1f 01 00       	push   $0x11f83
   107ef:	ff 75 08             	push   0x8(%ebp)
   107f2:	e8 04 ff ff ff       	call   106fb <do_default_handler>
   107f7:	83 c4 10             	add    $0x10,%esp
}
   107fa:	90                   	nop
   107fb:	c9                   	leave  
   107fc:	c3                   	ret    

000107fd <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   107fd:	55                   	push   %ebp
   107fe:	89 e5                	mov    %esp,%ebp
   10800:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10803:	83 ec 08             	sub    $0x8,%esp
   10806:	68 99 1f 01 00       	push   $0x11f99
   1080b:	ff 75 08             	push   0x8(%ebp)
   1080e:	e8 e8 fe ff ff       	call   106fb <do_default_handler>
   10813:	83 c4 10             	add    $0x10,%esp
}
   10816:	90                   	nop
   10817:	c9                   	leave  
   10818:	c3                   	ret    

00010819 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10819:	55                   	push   %ebp
   1081a:	89 e5                	mov    %esp,%ebp
   1081c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1081f:	83 ec 08             	sub    $0x8,%esp
   10822:	68 b2 1f 01 00       	push   $0x11fb2
   10827:	ff 75 08             	push   0x8(%ebp)
   1082a:	e8 cc fe ff ff       	call   106fb <do_default_handler>
   1082f:	83 c4 10             	add    $0x10,%esp
}
   10832:	90                   	nop
   10833:	c9                   	leave  
   10834:	c3                   	ret    

00010835 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10835:	55                   	push   %ebp
   10836:	89 e5                	mov    %esp,%ebp
   10838:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1083b:	83 ec 08             	sub    $0x8,%esp
   1083e:	68 cf 1f 01 00       	push   $0x11fcf
   10843:	ff 75 08             	push   0x8(%ebp)
   10846:	e8 b0 fe ff ff       	call   106fb <do_default_handler>
   1084b:	83 c4 10             	add    $0x10,%esp
}
   1084e:	90                   	nop
   1084f:	c9                   	leave  
   10850:	c3                   	ret    

00010851 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10851:	55                   	push   %ebp
   10852:	89 e5                	mov    %esp,%ebp
   10854:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10857:	83 ec 08             	sub    $0x8,%esp
   1085a:	68 e6 1f 01 00       	push   $0x11fe6
   1085f:	ff 75 08             	push   0x8(%ebp)
   10862:	e8 94 fe ff ff       	call   106fb <do_default_handler>
   10867:	83 c4 10             	add    $0x10,%esp
}
   1086a:	90                   	nop
   1086b:	c9                   	leave  
   1086c:	c3                   	ret    

0001086d <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   1086d:	55                   	push   %ebp
   1086e:	89 e5                	mov    %esp,%ebp
   10870:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10873:	83 ec 08             	sub    $0x8,%esp
   10876:	68 fc 1f 01 00       	push   $0x11ffc
   1087b:	ff 75 08             	push   0x8(%ebp)
   1087e:	e8 78 fe ff ff       	call   106fb <do_default_handler>
   10883:	83 c4 10             	add    $0x10,%esp
}
   10886:	90                   	nop
   10887:	c9                   	leave  
   10888:	c3                   	ret    

00010889 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10889:	55                   	push   %ebp
   1088a:	89 e5                	mov    %esp,%ebp
   1088c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1088f:	83 ec 08             	sub    $0x8,%esp
   10892:	68 1a 20 01 00       	push   $0x1201a
   10897:	ff 75 08             	push   0x8(%ebp)
   1089a:	e8 5c fe ff ff       	call   106fb <do_default_handler>
   1089f:	83 c4 10             	add    $0x10,%esp
}
   108a2:	90                   	nop
   108a3:	c9                   	leave  
   108a4:	c3                   	ret    

000108a5 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   108a5:	55                   	push   %ebp
   108a6:	89 e5                	mov    %esp,%ebp
   108a8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   108ab:	83 ec 08             	sub    $0x8,%esp
   108ae:	68 38 20 01 00       	push   $0x12038
   108b3:	ff 75 08             	push   0x8(%ebp)
   108b6:	e8 40 fe ff ff       	call   106fb <do_default_handler>
   108bb:	83 c4 10             	add    $0x10,%esp
}
   108be:	90                   	nop
   108bf:	c9                   	leave  
   108c0:	c3                   	ret    

000108c1 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   108c1:	55                   	push   %ebp
   108c2:	89 e5                	mov    %esp,%ebp
   108c4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   108c7:	83 ec 08             	sub    $0x8,%esp
   108ca:	68 55 20 01 00       	push   $0x12055
   108cf:	ff 75 08             	push   0x8(%ebp)
   108d2:	e8 24 fe ff ff       	call   106fb <do_default_handler>
   108d7:	83 c4 10             	add    $0x10,%esp
}
   108da:	90                   	nop
   108db:	c9                   	leave  
   108dc:	c3                   	ret    

000108dd <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   108dd:	55                   	push   %ebp
   108de:	89 e5                	mov    %esp,%ebp
   108e0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   108e3:	83 ec 08             	sub    $0x8,%esp
   108e6:	68 6a 20 01 00       	push   $0x1206a
   108eb:	ff 75 08             	push   0x8(%ebp)
   108ee:	e8 08 fe ff ff       	call   106fb <do_default_handler>
   108f3:	83 c4 10             	add    $0x10,%esp
}
   108f6:	90                   	nop
   108f7:	c9                   	leave  
   108f8:	c3                   	ret    

000108f9 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   108f9:	55                   	push   %ebp
   108fa:	89 e5                	mov    %esp,%ebp
   108fc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   108ff:	83 ec 08             	sub    $0x8,%esp
   10902:	68 7e 20 01 00       	push   $0x1207e
   10907:	ff 75 08             	push   0x8(%ebp)
   1090a:	e8 ec fd ff ff       	call   106fb <do_default_handler>
   1090f:	83 c4 10             	add    $0x10,%esp
}
   10912:	90                   	nop
   10913:	c9                   	leave  
   10914:	c3                   	ret    

00010915 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10915:	55                   	push   %ebp
   10916:	89 e5                	mov    %esp,%ebp
   10918:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   1091b:	83 ec 08             	sub    $0x8,%esp
   1091e:	68 98 20 01 00       	push   $0x12098
   10923:	ff 75 08             	push   0x8(%ebp)
   10926:	e8 d0 fd ff ff       	call   106fb <do_default_handler>
   1092b:	83 c4 10             	add    $0x10,%esp
}
   1092e:	90                   	nop
   1092f:	c9                   	leave  
   10930:	c3                   	ret    

00010931 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10931:	55                   	push   %ebp
   10932:	89 e5                	mov    %esp,%ebp
   10934:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10937:	83 ec 08             	sub    $0x8,%esp
   1093a:	68 b0 20 01 00       	push   $0x120b0
   1093f:	ff 75 08             	push   0x8(%ebp)
   10942:	e8 b4 fd ff ff       	call   106fb <do_default_handler>
   10947:	83 c4 10             	add    $0x10,%esp
}
   1094a:	90                   	nop
   1094b:	c9                   	leave  
   1094c:	c3                   	ret    

0001094d <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1094d:	55                   	push   %ebp
   1094e:	89 e5                	mov    %esp,%ebp
   10950:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   10953:	83 ec 08             	sub    $0x8,%esp
   10956:	68 c8 20 01 00       	push   $0x120c8
   1095b:	ff 75 08             	push   0x8(%ebp)
   1095e:	e8 98 fd ff ff       	call   106fb <do_default_handler>
   10963:	83 c4 10             	add    $0x10,%esp
}
   10966:	90                   	nop
   10967:	c9                   	leave  
   10968:	c3                   	ret    

00010969 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   10969:	55                   	push   %ebp
   1096a:	89 e5                	mov    %esp,%ebp
   1096c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1096f:	83 ec 08             	sub    $0x8,%esp
   10972:	68 e4 20 01 00       	push   $0x120e4
   10977:	ff 75 08             	push   0x8(%ebp)
   1097a:	e8 7c fd ff ff       	call   106fb <do_default_handler>
   1097f:	83 c4 10             	add    $0x10,%esp
}
   10982:	90                   	nop
   10983:	c9                   	leave  
   10984:	c3                   	ret    

00010985 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10985:	55                   	push   %ebp
   10986:	89 e5                	mov    %esp,%ebp
   10988:	83 ec 08             	sub    $0x8,%esp
   1098b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1098e:	8b 45 14             	mov    0x14(%ebp),%eax
   10991:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10995:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10999:	8b 45 10             	mov    0x10(%ebp),%eax
   1099c:	89 c2                	mov    %eax,%edx
   1099e:	8b 45 08             	mov    0x8(%ebp),%eax
   109a1:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   109a4:	8b 45 10             	mov    0x10(%ebp),%eax
   109a7:	c1 e8 10             	shr    $0x10,%eax
   109aa:	89 c2                	mov    %eax,%edx
   109ac:	8b 45 08             	mov    0x8(%ebp),%eax
   109af:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   109b3:	8b 45 08             	mov    0x8(%ebp),%eax
   109b6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   109ba:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   109be:	8b 45 08             	mov    0x8(%ebp),%eax
   109c1:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   109c5:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   109c9:	90                   	nop
   109ca:	c9                   	leave  
   109cb:	c3                   	ret    

000109cc <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   109cc:	55                   	push   %ebp
   109cd:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   109cf:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   109d6:	7f 06                	jg     109de <idt_install+0x12>
   109d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109dc:	79 07                	jns    109e5 <idt_install+0x19>
   109de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   109e3:	eb 25                	jmp    10a0a <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   109e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   109e8:	8b 55 08             	mov    0x8(%ebp),%edx
   109eb:	c1 e2 03             	shl    $0x3,%edx
   109ee:	81 c2 80 24 02 00    	add    $0x22480,%edx
   109f4:	68 00 8e 00 00       	push   $0x8e00
   109f9:	50                   	push   %eax
   109fa:	6a 08                	push   $0x8
   109fc:	52                   	push   %edx
   109fd:	e8 83 ff ff ff       	call   10985 <gate_desc_set>
   10a02:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   10a05:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a0a:	c9                   	leave  
   10a0b:	c3                   	ret    

00010a0c <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   10a0c:	55                   	push   %ebp
   10a0d:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   10a0f:	6a 11                	push   $0x11
   10a11:	6a 20                	push   $0x20
   10a13:	e8 b1 fb ff ff       	call   105c9 <outb>
   10a18:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   10a1b:	6a 20                	push   $0x20
   10a1d:	6a 21                	push   $0x21
   10a1f:	e8 a5 fb ff ff       	call   105c9 <outb>
   10a24:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   10a27:	6a 04                	push   $0x4
   10a29:	6a 21                	push   $0x21
   10a2b:	e8 99 fb ff ff       	call   105c9 <outb>
   10a30:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   10a33:	6a 01                	push   $0x1
   10a35:	6a 21                	push   $0x21
   10a37:	e8 8d fb ff ff       	call   105c9 <outb>
   10a3c:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   10a3f:	6a 11                	push   $0x11
   10a41:	68 a0 00 00 00       	push   $0xa0
   10a46:	e8 7e fb ff ff       	call   105c9 <outb>
   10a4b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   10a4e:	6a 28                	push   $0x28
   10a50:	68 a1 00 00 00       	push   $0xa1
   10a55:	e8 6f fb ff ff       	call   105c9 <outb>
   10a5a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   10a5d:	6a 02                	push   $0x2
   10a5f:	68 a1 00 00 00       	push   $0xa1
   10a64:	e8 60 fb ff ff       	call   105c9 <outb>
   10a69:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   10a6c:	6a 01                	push   $0x1
   10a6e:	68 a1 00 00 00       	push   $0xa1
   10a73:	e8 51 fb ff ff       	call   105c9 <outb>
   10a78:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   10a7b:	68 fb 00 00 00       	push   $0xfb
   10a80:	6a 21                	push   $0x21
   10a82:	e8 42 fb ff ff       	call   105c9 <outb>
   10a87:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   10a8a:	68 ff 00 00 00       	push   $0xff
   10a8f:	68 a1 00 00 00       	push   $0xa1
   10a94:	e8 30 fb ff ff       	call   105c9 <outb>
   10a99:	83 c4 08             	add    $0x8,%esp


}
   10a9c:	90                   	nop
   10a9d:	c9                   	leave  
   10a9e:	c3                   	ret    

00010a9f <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   10a9f:	55                   	push   %ebp
   10aa0:	89 e5                	mov    %esp,%ebp
   10aa2:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10aa5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10aac:	eb 14                	jmp    10ac2 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   10aae:	68 2a 00 01 00       	push   $0x1002a
   10ab3:	ff 75 fc             	push   -0x4(%ebp)
   10ab6:	e8 11 ff ff ff       	call   109cc <idt_install>
   10abb:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10abe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10ac2:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10ac9:	7e e3                	jle    10aae <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10acb:	68 47 00 01 00       	push   $0x10047
   10ad0:	6a 00                	push   $0x0
   10ad2:	e8 f5 fe ff ff       	call   109cc <idt_install>
   10ad7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10ada:	68 64 00 01 00       	push   $0x10064
   10adf:	6a 01                	push   $0x1
   10ae1:	e8 e6 fe ff ff       	call   109cc <idt_install>
   10ae6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   10ae9:	68 81 00 01 00       	push   $0x10081
   10aee:	6a 02                	push   $0x2
   10af0:	e8 d7 fe ff ff       	call   109cc <idt_install>
   10af5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   10af8:	68 9e 00 01 00       	push   $0x1009e
   10afd:	6a 03                	push   $0x3
   10aff:	e8 c8 fe ff ff       	call   109cc <idt_install>
   10b04:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   10b07:	68 bb 00 01 00       	push   $0x100bb
   10b0c:	6a 04                	push   $0x4
   10b0e:	e8 b9 fe ff ff       	call   109cc <idt_install>
   10b13:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   10b16:	68 d8 00 01 00       	push   $0x100d8
   10b1b:	6a 05                	push   $0x5
   10b1d:	e8 aa fe ff ff       	call   109cc <idt_install>
   10b22:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   10b25:	68 f5 00 01 00       	push   $0x100f5
   10b2a:	6a 06                	push   $0x6
   10b2c:	e8 9b fe ff ff       	call   109cc <idt_install>
   10b31:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   10b34:	68 12 01 01 00       	push   $0x10112
   10b39:	6a 07                	push   $0x7
   10b3b:	e8 8c fe ff ff       	call   109cc <idt_install>
   10b40:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   10b43:	68 2f 01 01 00       	push   $0x1012f
   10b48:	6a 08                	push   $0x8
   10b4a:	e8 7d fe ff ff       	call   109cc <idt_install>
   10b4f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   10b52:	68 4a 01 01 00       	push   $0x1014a
   10b57:	6a 0a                	push   $0xa
   10b59:	e8 6e fe ff ff       	call   109cc <idt_install>
   10b5e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   10b61:	68 65 01 01 00       	push   $0x10165
   10b66:	6a 0b                	push   $0xb
   10b68:	e8 5f fe ff ff       	call   109cc <idt_install>
   10b6d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   10b70:	68 80 01 01 00       	push   $0x10180
   10b75:	6a 0c                	push   $0xc
   10b77:	e8 50 fe ff ff       	call   109cc <idt_install>
   10b7c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   10b7f:	68 9b 01 01 00       	push   $0x1019b
   10b84:	6a 0d                	push   $0xd
   10b86:	e8 41 fe ff ff       	call   109cc <idt_install>
   10b8b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   10b8e:	68 b6 01 01 00       	push   $0x101b6
   10b93:	6a 0e                	push   $0xe
   10b95:	e8 32 fe ff ff       	call   109cc <idt_install>
   10b9a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   10b9d:	68 d1 01 01 00       	push   $0x101d1
   10ba2:	6a 10                	push   $0x10
   10ba4:	e8 23 fe ff ff       	call   109cc <idt_install>
   10ba9:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10bac:	68 ee 01 01 00       	push   $0x101ee
   10bb1:	6a 11                	push   $0x11
   10bb3:	e8 14 fe ff ff       	call   109cc <idt_install>
   10bb8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10bbb:	68 09 02 01 00       	push   $0x10209
   10bc0:	6a 12                	push   $0x12
   10bc2:	e8 05 fe ff ff       	call   109cc <idt_install>
   10bc7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10bca:	68 26 02 01 00       	push   $0x10226
   10bcf:	6a 13                	push   $0x13
   10bd1:	e8 f6 fd ff ff       	call   109cc <idt_install>
   10bd6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10bd9:	68 43 02 01 00       	push   $0x10243
   10bde:	6a 14                	push   $0x14
   10be0:	e8 e7 fd ff ff       	call   109cc <idt_install>
   10be5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   10be8:	68 60 02 01 00       	push   $0x10260
   10bed:	6a 15                	push   $0x15
   10bef:	e8 d8 fd ff ff       	call   109cc <idt_install>
   10bf4:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   10bf7:	b8 80 24 02 00       	mov    $0x22480,%eax
   10bfc:	68 00 08 00 00       	push   $0x800
   10c01:	50                   	push   %eax
   10c02:	e8 e3 f9 ff ff       	call   105ea <lidt>
   10c07:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   10c0a:	e8 fd fd ff ff       	call   10a0c <init_pic>
}
   10c0f:	90                   	nop
   10c10:	c9                   	leave  
   10c11:	c3                   	ret    

00010c12 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   10c12:	55                   	push   %ebp
   10c13:	89 e5                	mov    %esp,%ebp
   10c15:	53                   	push   %ebx
   10c16:	83 ec 14             	sub    $0x14,%esp
   10c19:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1c:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10c1f:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10c23:	76 7f                	jbe    10ca4 <idt_enable+0x92>
   10c25:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   10c29:	77 79                	ja     10ca4 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10c2b:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10c2f:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10c33:	77 33                	ja     10c68 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c35:	6a 21                	push   $0x21
   10c37:	e8 70 f9 ff ff       	call   105ac <inb>
   10c3c:	83 c4 04             	add    $0x4,%esp
   10c3f:	89 c3                	mov    %eax,%ebx
   10c41:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10c45:	ba 01 00 00 00       	mov    $0x1,%edx
   10c4a:	89 c1                	mov    %eax,%ecx
   10c4c:	d3 e2                	shl    %cl,%edx
   10c4e:	89 d0                	mov    %edx,%eax
   10c50:	f7 d0                	not    %eax
   10c52:	21 d8                	and    %ebx,%eax
   10c54:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10c57:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c5b:	50                   	push   %eax
   10c5c:	6a 21                	push   $0x21
   10c5e:	e8 66 f9 ff ff       	call   105c9 <outb>
   10c63:	83 c4 08             	add    $0x8,%esp
   10c66:	eb 3d                	jmp    10ca5 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10c68:	68 a1 00 00 00       	push   $0xa1
   10c6d:	e8 3a f9 ff ff       	call   105ac <inb>
   10c72:	83 c4 04             	add    $0x4,%esp
   10c75:	89 c3                	mov    %eax,%ebx
   10c77:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10c7b:	83 e8 08             	sub    $0x8,%eax
   10c7e:	ba 01 00 00 00       	mov    $0x1,%edx
   10c83:	89 c1                	mov    %eax,%ecx
   10c85:	d3 e2                	shl    %cl,%edx
   10c87:	89 d0                	mov    %edx,%eax
   10c89:	f7 d0                	not    %eax
   10c8b:	21 d8                	and    %ebx,%eax
   10c8d:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10c90:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c94:	50                   	push   %eax
   10c95:	68 a1 00 00 00       	push   $0xa1
   10c9a:	e8 2a f9 ff ff       	call   105c9 <outb>
   10c9f:	83 c4 08             	add    $0x8,%esp
   10ca2:	eb 01                	jmp    10ca5 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10ca4:	90                   	nop
  }
  
}
   10ca5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ca8:	c9                   	leave  
   10ca9:	c3                   	ret    

00010caa <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   10caa:	55                   	push   %ebp
   10cab:	89 e5                	mov    %esp,%ebp
   10cad:	53                   	push   %ebx
   10cae:	83 ec 14             	sub    $0x14,%esp
   10cb1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb4:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10cb7:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10cbb:	76 7b                	jbe    10d38 <idt_disable+0x8e>
   10cbd:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   10cc1:	77 75                	ja     10d38 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10cc3:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10cc7:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10ccb:	77 31                	ja     10cfe <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10ccd:	6a 21                	push   $0x21
   10ccf:	e8 d8 f8 ff ff       	call   105ac <inb>
   10cd4:	83 c4 04             	add    $0x4,%esp
   10cd7:	89 c3                	mov    %eax,%ebx
   10cd9:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10cdd:	ba 01 00 00 00       	mov    $0x1,%edx
   10ce2:	89 c1                	mov    %eax,%ecx
   10ce4:	d3 e2                	shl    %cl,%edx
   10ce6:	89 d0                	mov    %edx,%eax
   10ce8:	09 d8                	or     %ebx,%eax
   10cea:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10ced:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10cf1:	50                   	push   %eax
   10cf2:	6a 21                	push   $0x21
   10cf4:	e8 d0 f8 ff ff       	call   105c9 <outb>
   10cf9:	83 c4 08             	add    $0x8,%esp
   10cfc:	eb 3b                	jmp    10d39 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   10cfe:	68 a1 00 00 00       	push   $0xa1
   10d03:	e8 a4 f8 ff ff       	call   105ac <inb>
   10d08:	83 c4 04             	add    $0x4,%esp
   10d0b:	89 c3                	mov    %eax,%ebx
   10d0d:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10d11:	83 e8 08             	sub    $0x8,%eax
   10d14:	ba 01 00 00 00       	mov    $0x1,%edx
   10d19:	89 c1                	mov    %eax,%ecx
   10d1b:	d3 e2                	shl    %cl,%edx
   10d1d:	89 d0                	mov    %edx,%eax
   10d1f:	09 d8                	or     %ebx,%eax
   10d21:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10d24:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d28:	50                   	push   %eax
   10d29:	68 a1 00 00 00       	push   $0xa1
   10d2e:	e8 96 f8 ff ff       	call   105c9 <outb>
   10d33:	83 c4 08             	add    $0x8,%esp
   10d36:	eb 01                	jmp    10d39 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10d38:	90                   	nop
  }
  
}
   10d39:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d3c:	c9                   	leave  
   10d3d:	c3                   	ret    

00010d3e <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   10d3e:	55                   	push   %ebp
   10d3f:	89 e5                	mov    %esp,%ebp
  cli();
   10d41:	e8 51 f8 ff ff       	call   10597 <cli>
}
   10d46:	90                   	nop
   10d47:	5d                   	pop    %ebp
   10d48:	c3                   	ret    

00010d49 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   10d49:	55                   	push   %ebp
   10d4a:	89 e5                	mov    %esp,%ebp
  sti();
   10d4c:	e8 4d f8 ff ff       	call   1059e <sti>
}
   10d51:	90                   	nop
   10d52:	5d                   	pop    %ebp
   10d53:	c3                   	ret    

00010d54 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   10d54:	55                   	push   %ebp
   10d55:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   10d57:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   10d5b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d5f:	78 29                	js     10d8a <pic_send_eoi+0x36>
   10d61:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   10d65:	7f 23                	jg     10d8a <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   10d67:	6a 20                	push   $0x20
   10d69:	6a 20                	push   $0x20
   10d6b:	e8 59 f8 ff ff       	call   105c9 <outb>
   10d70:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   10d73:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d77:	7e 12                	jle    10d8b <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   10d79:	6a 20                	push   $0x20
   10d7b:	68 a0 00 00 00       	push   $0xa0
   10d80:	e8 44 f8 ff ff       	call   105c9 <outb>
   10d85:	83 c4 08             	add    $0x8,%esp
   10d88:	eb 01                	jmp    10d8b <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   10d8a:	90                   	nop
  }

   10d8b:	c9                   	leave  
   10d8c:	c3                   	ret    

00010d8d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10d8d:	55                   	push   %ebp
   10d8e:	89 e5                	mov    %esp,%ebp
   10d90:	83 ec 08             	sub    $0x8,%esp
   10d93:	8b 45 08             	mov    0x8(%ebp),%eax
   10d96:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d99:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10d9d:	89 d0                	mov    %edx,%eax
   10d9f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10da2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10da6:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10daa:	ee                   	out    %al,(%dx)
}
   10dab:	90                   	nop
   10dac:	c9                   	leave  
   10dad:	c3                   	ret    

00010dae <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   10dae:	55                   	push   %ebp
   10daf:	89 e5                	mov    %esp,%ebp
   10db1:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10db4:	a1 80 2c 02 00       	mov    0x22c80,%eax
   10db9:	83 c0 01             	add    $0x1,%eax
   10dbc:	a3 80 2c 02 00       	mov    %eax,0x22c80

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   10dc1:	83 ec 0c             	sub    $0xc,%esp
   10dc4:	6a 20                	push   $0x20
   10dc6:	e8 89 ff ff ff       	call   10d54 <pic_send_eoi>
   10dcb:	83 c4 10             	add    $0x10,%esp
}
   10dce:	90                   	nop
   10dcf:	c9                   	leave  
   10dd0:	c3                   	ret    

00010dd1 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   10dd1:	55                   	push   %ebp
   10dd2:	89 e5                	mov    %esp,%ebp
   10dd4:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   10dd7:	6a 36                	push   $0x36
   10dd9:	6a 43                	push   $0x43
   10ddb:	e8 ad ff ff ff       	call   10d8d <outb>
   10de0:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   10de3:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   10de9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10ded:	0f b6 c0             	movzbl %al,%eax
   10df0:	50                   	push   %eax
   10df1:	6a 40                	push   $0x40
   10df3:	e8 95 ff ff ff       	call   10d8d <outb>
   10df8:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   10dfb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10dff:	66 c1 e8 08          	shr    $0x8,%ax
   10e03:	0f b6 c0             	movzbl %al,%eax
   10e06:	50                   	push   %eax
   10e07:	6a 40                	push   $0x40
   10e09:	e8 7f ff ff ff       	call   10d8d <outb>
   10e0e:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   10e11:	83 ec 08             	sub    $0x8,%esp
   10e14:	68 7b 02 01 00       	push   $0x1027b
   10e19:	6a 20                	push   $0x20
   10e1b:	e8 ac fb ff ff       	call   109cc <idt_install>
   10e20:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   10e23:	83 ec 0c             	sub    $0xc,%esp
   10e26:	6a 20                	push   $0x20
   10e28:	e8 e5 fd ff ff       	call   10c12 <idt_enable>
   10e2d:	83 c4 10             	add    $0x10,%esp

}
   10e30:	90                   	nop
   10e31:	c9                   	leave  
   10e32:	c3                   	ret    

00010e33 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   10e33:	55                   	push   %ebp
   10e34:	89 e5                	mov    %esp,%ebp
   10e36:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e39:	c7 05 80 2c 02 00 00 	movl   $0x0,0x22c80
   10e40:	00 00 00 
    init_pit();
   10e43:	e8 89 ff ff ff       	call   10dd1 <init_pit>
   10e48:	90                   	nop
   10e49:	c9                   	leave  
   10e4a:	c3                   	ret    

00010e4b <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   10e4b:	55                   	push   %ebp
   10e4c:	89 e5                	mov    %esp,%ebp
   10e4e:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   10e51:	8b 45 08             	mov    0x8(%ebp),%eax
   10e54:	8b 40 50             	mov    0x50(%eax),%eax
   10e57:	85 c0                	test   %eax,%eax
   10e59:	75 19                	jne    10e74 <kernel_init+0x29>
   10e5b:	68 00 21 01 00       	push   $0x12100
   10e60:	68 a8 21 01 00       	push   $0x121a8
   10e65:	6a 1f                	push   $0x1f
   10e67:	68 24 21 01 00       	push   $0x12124
   10e6c:	e8 c7 04 00 00       	call   11338 <pannic>
   10e71:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   10e74:	e8 c0 0d 00 00       	call   11c39 <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   10e79:	e8 65 f6 ff ff       	call   104e3 <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   10e7e:	e8 1c fc ff ff       	call   10a9f <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   10e83:	e8 ab ff ff ff       	call   10e33 <time_init>

    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   10e88:	90                   	nop
   10e89:	c9                   	leave  
   10e8a:	c3                   	ret    

00010e8b <test_task_1>:
static task_t task_2;
//声明预留一下任务使用的栈空间
static uint32_t init_stack_1[1024]; 
static uint32_t init_stack_2[1024]; 

void test_task_1(void) {
   10e8b:	55                   	push   %ebp
   10e8c:	89 e5                	mov    %esp,%ebp
   10e8e:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   10e91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_1: %d", count++);
   10e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e9b:	8d 50 01             	lea    0x1(%eax),%edx
   10e9e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10ea1:	83 ec 08             	sub    $0x8,%esp
   10ea4:	50                   	push   %eax
   10ea5:	68 59 21 01 00       	push   $0x12159
   10eaa:	e8 ff 0d 00 00       	call   11cae <log_printf>
   10eaf:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task_1, &task_2);
   10eb2:	83 ec 08             	sub    $0x8,%esp
   10eb5:	68 20 2d 02 00       	push   $0x22d20
   10eba:	68 a0 2c 02 00       	push   $0x22ca0
   10ebf:	e8 20 f5 ff ff       	call   103e4 <task_switch_from_to>
   10ec4:	83 c4 10             	add    $0x10,%esp
        log_printf("task_1: %d", count++);
   10ec7:	eb cf                	jmp    10e98 <test_task_1+0xd>

00010ec9 <test_task_2>:
     }
}

void test_task_2(void) {
   10ec9:	55                   	push   %ebp
   10eca:	89 e5                	mov    %esp,%ebp
   10ecc:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   10ecf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_2: %d", count++);
   10ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ed9:	8d 50 01             	lea    0x1(%eax),%edx
   10edc:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10edf:	83 ec 08             	sub    $0x8,%esp
   10ee2:	50                   	push   %eax
   10ee3:	68 64 21 01 00       	push   $0x12164
   10ee8:	e8 c1 0d 00 00       	call   11cae <log_printf>
   10eed:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task_2, &task_1);
   10ef0:	83 ec 08             	sub    $0x8,%esp
   10ef3:	68 a0 2c 02 00       	push   $0x22ca0
   10ef8:	68 20 2d 02 00       	push   $0x22d20
   10efd:	e8 e2 f4 ff ff       	call   103e4 <task_switch_from_to>
   10f02:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %d", count++);
   10f05:	eb cf                	jmp    10ed6 <test_task_2+0xd>

00010f07 <init_main>:
     }
}


void init_main(void) {
   10f07:	55                   	push   %ebp
   10f08:	89 e5                	mov    %esp,%ebp
   10f0a:	83 ec 08             	sub    $0x8,%esp

    list_test();
   10f0d:	e8 44 01 00 00       	call   11056 <list_test>

    log_printf("Kernel is running......");
   10f12:	83 ec 0c             	sub    $0xc,%esp
   10f15:	68 6f 21 01 00       	push   $0x1216f
   10f1a:	e8 8f 0d 00 00       	call   11cae <log_printf>
   10f1f:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   10f22:	83 ec 04             	sub    $0x4,%esp
   10f25:	68 87 21 01 00       	push   $0x12187
   10f2a:	68 8d 21 01 00       	push   $0x1218d
   10f2f:	68 92 21 01 00       	push   $0x12192
   10f34:	e8 75 0d 00 00       	call   11cae <log_printf>
   10f39:	83 c4 10             	add    $0x10,%esp

    task_init(&task_1, (uint32_t)test_task_1, (uint32_t)&init_stack_1[1024]);
   10f3c:	ba a0 3d 02 00       	mov    $0x23da0,%edx
   10f41:	b8 8b 0e 01 00       	mov    $0x10e8b,%eax
   10f46:	83 ec 04             	sub    $0x4,%esp
   10f49:	52                   	push   %edx
   10f4a:	50                   	push   %eax
   10f4b:	68 a0 2c 02 00       	push   $0x22ca0
   10f50:	e8 30 f4 ff ff       	call   10385 <task_init>
   10f55:	83 c4 10             	add    $0x10,%esp
    task_init(&task_2, (uint32_t)test_task_2, (uint32_t)&init_stack_2[1024]);
   10f58:	ba a0 4d 02 00       	mov    $0x24da0,%edx
   10f5d:	b8 c9 0e 01 00       	mov    $0x10ec9,%eax
   10f62:	83 ec 04             	sub    $0x4,%esp
   10f65:	52                   	push   %edx
   10f66:	50                   	push   %eax
   10f67:	68 20 2d 02 00       	push   $0x22d20
   10f6c:	e8 14 f4 ff ff       	call   10385 <task_init>
   10f71:	83 c4 10             	add    $0x10,%esp

    task_switch_from_to(0, &task_2);
   10f74:	83 ec 08             	sub    $0x8,%esp
   10f77:	68 20 2d 02 00       	push   $0x22d20
   10f7c:	6a 00                	push   $0x0
   10f7e:	e8 61 f4 ff ff       	call   103e4 <task_switch_from_to>
   10f83:	83 c4 10             	add    $0x10,%esp


   10f86:	90                   	nop
   10f87:	c9                   	leave  
   10f88:	c3                   	ret    

00010f89 <list_init>:
    ASSERT(node != (list_node_t*)0);

    return node->next;
}

static inline void list_init(list_t *list) {
   10f89:	55                   	push   %ebp
   10f8a:	89 e5                	mov    %esp,%ebp
   10f8c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10f8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f93:	75 19                	jne    10fae <list_init+0x25>
   10f95:	68 b4 21 01 00       	push   $0x121b4
   10f9a:	68 b8 22 01 00       	push   $0x122b8
   10f9f:	6a 31                	push   $0x31
   10fa1:	68 c8 21 01 00       	push   $0x121c8
   10fa6:	e8 8d 03 00 00       	call   11338 <pannic>
   10fab:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10fae:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbb:	8b 50 04             	mov    0x4(%eax),%edx
   10fbe:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc1:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10fc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10fcd:	90                   	nop
   10fce:	c9                   	leave  
   10fcf:	c3                   	ret    

00010fd0 <list_get_size>:
    ASSERT(list != (list_t*)0);

    return list->size == 0;
}

static inline int list_get_size(list_t *list) {
   10fd0:	55                   	push   %ebp
   10fd1:	89 e5                	mov    %esp,%ebp
   10fd3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10fd6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fda:	75 19                	jne    10ff5 <list_get_size+0x25>
   10fdc:	68 b4 21 01 00       	push   $0x121b4
   10fe1:	68 c4 22 01 00       	push   $0x122c4
   10fe6:	6a 3e                	push   $0x3e
   10fe8:	68 c8 21 01 00       	push   $0x121c8
   10fed:	e8 46 03 00 00       	call   11338 <pannic>
   10ff2:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10ff5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff8:	8b 40 08             	mov    0x8(%eax),%eax
}
   10ffb:	c9                   	leave  
   10ffc:	c3                   	ret    

00010ffd <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10ffd:	55                   	push   %ebp
   10ffe:	89 e5                	mov    %esp,%ebp
   11000:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11003:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11007:	75 19                	jne    11022 <list_get_first+0x25>
   11009:	68 b4 21 01 00       	push   $0x121b4
   1100e:	68 e4 22 01 00       	push   $0x122e4
   11013:	6a 44                	push   $0x44
   11015:	68 c8 21 01 00       	push   $0x121c8
   1101a:	e8 19 03 00 00       	call   11338 <pannic>
   1101f:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11022:	8b 45 08             	mov    0x8(%ebp),%eax
   11025:	8b 00                	mov    (%eax),%eax
}
   11027:	c9                   	leave  
   11028:	c3                   	ret    

00011029 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11029:	55                   	push   %ebp
   1102a:	89 e5                	mov    %esp,%ebp
   1102c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1102f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11033:	75 19                	jne    1104e <list_get_last+0x25>
   11035:	68 b4 21 01 00       	push   $0x121b4
   1103a:	68 d4 22 01 00       	push   $0x122d4
   1103f:	6a 4a                	push   $0x4a
   11041:	68 c8 21 01 00       	push   $0x121c8
   11046:	e8 ed 02 00 00       	call   11338 <pannic>
   1104b:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1104e:	8b 45 08             	mov    0x8(%ebp),%eax
   11051:	8b 40 04             	mov    0x4(%eax),%eax
}
   11054:	c9                   	leave  
   11055:	c3                   	ret    

00011056 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11056:	55                   	push   %ebp
   11057:	89 e5                	mov    %esp,%ebp
   11059:	56                   	push   %esi
   1105a:	53                   	push   %ebx
   1105b:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1105e:	83 ec 0c             	sub    $0xc,%esp
   11061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11064:	50                   	push   %eax
   11065:	e8 1f ff ff ff       	call   10f89 <list_init>
   1106a:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1106d:	83 ec 0c             	sub    $0xc,%esp
   11070:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11073:	50                   	push   %eax
   11074:	e8 57 ff ff ff       	call   10fd0 <list_get_size>
   11079:	83 c4 10             	add    $0x10,%esp
   1107c:	89 c6                	mov    %eax,%esi
   1107e:	83 ec 0c             	sub    $0xc,%esp
   11081:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11084:	50                   	push   %eax
   11085:	e8 9f ff ff ff       	call   11029 <list_get_last>
   1108a:	83 c4 10             	add    $0x10,%esp
   1108d:	89 c3                	mov    %eax,%ebx
   1108f:	83 ec 0c             	sub    $0xc,%esp
   11092:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11095:	50                   	push   %eax
   11096:	e8 62 ff ff ff       	call   10ffd <list_get_first>
   1109b:	83 c4 10             	add    $0x10,%esp
   1109e:	56                   	push   %esi
   1109f:	53                   	push   %ebx
   110a0:	50                   	push   %eax
   110a1:	68 08 22 01 00       	push   $0x12208
   110a6:	e8 03 0c 00 00       	call   11cae <log_printf>
   110ab:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   110ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   110b5:	eb 3f                	jmp    110f6 <list_test+0xa0>
        list_node_t *node = nodes + i;
   110b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110ba:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   110c1:	8d 45 9c             	lea    -0x64(%ebp),%eax
   110c4:	01 d0                	add    %edx,%eax
   110c6:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   110c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
   110cc:	83 ec 04             	sub    $0x4,%esp
   110cf:	50                   	push   %eax
   110d0:	ff 75 f4             	push   -0xc(%ebp)
   110d3:	68 30 22 01 00       	push   $0x12230
   110d8:	e8 d1 0b 00 00       	call   11cae <log_printf>
   110dd:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   110e0:	83 ec 08             	sub    $0x8,%esp
   110e3:	ff 75 d0             	push   -0x30(%ebp)
   110e6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   110e9:	50                   	push   %eax
   110ea:	e8 c3 07 00 00       	call   118b2 <list_insert_first>
   110ef:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   110f2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   110f6:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   110fa:	7e bb                	jle    110b7 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   110fc:	83 ec 0c             	sub    $0xc,%esp
   110ff:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11102:	50                   	push   %eax
   11103:	e8 c8 fe ff ff       	call   10fd0 <list_get_size>
   11108:	83 c4 10             	add    $0x10,%esp
   1110b:	89 c6                	mov    %eax,%esi
   1110d:	83 ec 0c             	sub    $0xc,%esp
   11110:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11113:	50                   	push   %eax
   11114:	e8 10 ff ff ff       	call   11029 <list_get_last>
   11119:	83 c4 10             	add    $0x10,%esp
   1111c:	89 c3                	mov    %eax,%ebx
   1111e:	83 ec 0c             	sub    $0xc,%esp
   11121:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11124:	50                   	push   %eax
   11125:	e8 d3 fe ff ff       	call   10ffd <list_get_first>
   1112a:	83 c4 10             	add    $0x10,%esp
   1112d:	56                   	push   %esi
   1112e:	53                   	push   %ebx
   1112f:	50                   	push   %eax
   11130:	68 08 22 01 00       	push   $0x12208
   11135:	e8 74 0b 00 00       	call   11cae <log_printf>
   1113a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   1113d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11144:	eb 2d                	jmp    11173 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11146:	83 ec 0c             	sub    $0xc,%esp
   11149:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1114c:	50                   	push   %eax
   1114d:	e8 7a 08 00 00       	call   119cc <list_remove_first>
   11152:	83 c4 10             	add    $0x10,%esp
   11155:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11158:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1115b:	83 ec 04             	sub    $0x4,%esp
   1115e:	50                   	push   %eax
   1115f:	ff 75 f0             	push   -0x10(%ebp)
   11162:	68 4f 22 01 00       	push   $0x1224f
   11167:	e8 42 0b 00 00       	call   11cae <log_printf>
   1116c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1116f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11173:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11177:	7e cd                	jle    11146 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11179:	83 ec 0c             	sub    $0xc,%esp
   1117c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1117f:	50                   	push   %eax
   11180:	e8 4b fe ff ff       	call   10fd0 <list_get_size>
   11185:	83 c4 10             	add    $0x10,%esp
   11188:	89 c6                	mov    %eax,%esi
   1118a:	83 ec 0c             	sub    $0xc,%esp
   1118d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11190:	50                   	push   %eax
   11191:	e8 93 fe ff ff       	call   11029 <list_get_last>
   11196:	83 c4 10             	add    $0x10,%esp
   11199:	89 c3                	mov    %eax,%ebx
   1119b:	83 ec 0c             	sub    $0xc,%esp
   1119e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   111a1:	50                   	push   %eax
   111a2:	e8 56 fe ff ff       	call   10ffd <list_get_first>
   111a7:	83 c4 10             	add    $0x10,%esp
   111aa:	56                   	push   %esi
   111ab:	53                   	push   %ebx
   111ac:	50                   	push   %eax
   111ad:	68 08 22 01 00       	push   $0x12208
   111b2:	e8 f7 0a 00 00       	call   11cae <log_printf>
   111b7:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   111ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   111c1:	eb 3f                	jmp    11202 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   111c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111c6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   111cd:	8d 45 9c             	lea    -0x64(%ebp),%eax
   111d0:	01 d0                	add    %edx,%eax
   111d2:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   111d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   111d8:	83 ec 04             	sub    $0x4,%esp
   111db:	50                   	push   %eax
   111dc:	ff 75 ec             	push   -0x14(%ebp)
   111df:	68 66 22 01 00       	push   $0x12266
   111e4:	e8 c5 0a 00 00       	call   11cae <log_printf>
   111e9:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   111ec:	83 ec 08             	sub    $0x8,%esp
   111ef:	ff 75 d8             	push   -0x28(%ebp)
   111f2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   111f5:	50                   	push   %eax
   111f6:	e8 42 07 00 00       	call   1193d <list_insert_last>
   111fb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   111fe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11202:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11206:	7e bb                	jle    111c3 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11208:	83 ec 0c             	sub    $0xc,%esp
   1120b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1120e:	50                   	push   %eax
   1120f:	e8 bc fd ff ff       	call   10fd0 <list_get_size>
   11214:	83 c4 10             	add    $0x10,%esp
   11217:	89 c6                	mov    %eax,%esi
   11219:	83 ec 0c             	sub    $0xc,%esp
   1121c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1121f:	50                   	push   %eax
   11220:	e8 04 fe ff ff       	call   11029 <list_get_last>
   11225:	83 c4 10             	add    $0x10,%esp
   11228:	89 c3                	mov    %eax,%ebx
   1122a:	83 ec 0c             	sub    $0xc,%esp
   1122d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11230:	50                   	push   %eax
   11231:	e8 c7 fd ff ff       	call   10ffd <list_get_first>
   11236:	83 c4 10             	add    $0x10,%esp
   11239:	56                   	push   %esi
   1123a:	53                   	push   %ebx
   1123b:	50                   	push   %eax
   1123c:	68 08 22 01 00       	push   $0x12208
   11241:	e8 68 0a 00 00       	call   11cae <log_printf>
   11246:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11249:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11250:	eb 2d                	jmp    1127f <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   11252:	83 ec 0c             	sub    $0xc,%esp
   11255:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11258:	50                   	push   %eax
   11259:	e8 1f 08 00 00       	call   11a7d <list_remove_last>
   1125e:	83 c4 10             	add    $0x10,%esp
   11261:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   11264:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11267:	83 ec 04             	sub    $0x4,%esp
   1126a:	50                   	push   %eax
   1126b:	ff 75 e8             	push   -0x18(%ebp)
   1126e:	68 84 22 01 00       	push   $0x12284
   11273:	e8 36 0a 00 00       	call   11cae <log_printf>
   11278:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1127b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1127f:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11283:	7e cd                	jle    11252 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11285:	83 ec 0c             	sub    $0xc,%esp
   11288:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1128b:	50                   	push   %eax
   1128c:	e8 3f fd ff ff       	call   10fd0 <list_get_size>
   11291:	83 c4 10             	add    $0x10,%esp
   11294:	89 c6                	mov    %eax,%esi
   11296:	83 ec 0c             	sub    $0xc,%esp
   11299:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1129c:	50                   	push   %eax
   1129d:	e8 87 fd ff ff       	call   11029 <list_get_last>
   112a2:	83 c4 10             	add    $0x10,%esp
   112a5:	89 c3                	mov    %eax,%ebx
   112a7:	83 ec 0c             	sub    $0xc,%esp
   112aa:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   112ad:	50                   	push   %eax
   112ae:	e8 4a fd ff ff       	call   10ffd <list_get_first>
   112b3:	83 c4 10             	add    $0x10,%esp
   112b6:	56                   	push   %esi
   112b7:	53                   	push   %ebx
   112b8:	50                   	push   %eax
   112b9:	68 08 22 01 00       	push   $0x12208
   112be:	e8 eb 09 00 00       	call   11cae <log_printf>
   112c3:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   112c6:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   112cd:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   112d4:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   112db:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   112e2:	8d 45 90             	lea    -0x70(%ebp),%eax
   112e5:	83 c0 04             	add    $0x4,%eax
   112e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   112eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   112ef:	74 08                	je     112f9 <list_test+0x2a3>
   112f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   112f4:	83 e8 04             	sub    $0x4,%eax
   112f7:	eb 05                	jmp    112fe <list_test+0x2a8>
   112f9:	b8 00 00 00 00       	mov    $0x0,%eax
   112fe:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   11301:	8d 45 90             	lea    -0x70(%ebp),%eax
   11304:	83 ec 08             	sub    $0x8,%esp
   11307:	50                   	push   %eax
   11308:	68 9a 22 01 00       	push   $0x1229a
   1130d:	e8 9c 09 00 00       	call   11cae <log_printf>
   11312:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   11315:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11318:	83 ec 08             	sub    $0x8,%esp
   1131b:	50                   	push   %eax
   1131c:	68 a8 22 01 00       	push   $0x122a8
   11321:	e8 88 09 00 00       	call   11cae <log_printf>
   11326:	83 c4 10             	add    $0x10,%esp

 }
   11329:	90                   	nop
   1132a:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1132d:	5b                   	pop    %ebx
   1132e:	5e                   	pop    %esi
   1132f:	5d                   	pop    %ebp
   11330:	c3                   	ret    

00011331 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11331:	55                   	push   %ebp
   11332:	89 e5                	mov    %esp,%ebp
   11334:	f4                   	hlt    
   11335:	90                   	nop
   11336:	5d                   	pop    %ebp
   11337:	c3                   	ret    

00011338 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   11338:	55                   	push   %ebp
   11339:	89 e5                	mov    %esp,%ebp
   1133b:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   1133e:	83 ec 08             	sub    $0x8,%esp
   11341:	ff 75 14             	push   0x14(%ebp)
   11344:	68 f3 22 01 00       	push   $0x122f3
   11349:	e8 60 09 00 00       	call   11cae <log_printf>
   1134e:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   11351:	ff 75 10             	push   0x10(%ebp)
   11354:	ff 75 0c             	push   0xc(%ebp)
   11357:	ff 75 08             	push   0x8(%ebp)
   1135a:	68 04 23 01 00       	push   $0x12304
   1135f:	e8 4a 09 00 00       	call   11cae <log_printf>
   11364:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11367:	e8 c5 ff ff ff       	call   11331 <hlt>
   1136c:	eb f9                	jmp    11367 <pannic+0x2f>

0001136e <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1136e:	55                   	push   %ebp
   1136f:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   11371:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11375:	74 3b                	je     113b2 <kernel_strcpy+0x44>
   11377:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1137b:	74 35                	je     113b2 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   1137d:	eb 17                	jmp    11396 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   1137f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11382:	8d 42 01             	lea    0x1(%edx),%eax
   11385:	89 45 0c             	mov    %eax,0xc(%ebp)
   11388:	8b 45 08             	mov    0x8(%ebp),%eax
   1138b:	8d 48 01             	lea    0x1(%eax),%ecx
   1138e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11391:	0f b6 12             	movzbl (%edx),%edx
   11394:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11396:	8b 45 08             	mov    0x8(%ebp),%eax
   11399:	0f b6 00             	movzbl (%eax),%eax
   1139c:	84 c0                	test   %al,%al
   1139e:	74 0a                	je     113aa <kernel_strcpy+0x3c>
   113a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a3:	0f b6 00             	movzbl (%eax),%eax
   113a6:	84 c0                	test   %al,%al
   113a8:	75 d5                	jne    1137f <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   113aa:	8b 45 08             	mov    0x8(%ebp),%eax
   113ad:	c6 00 00             	movb   $0x0,(%eax)
   113b0:	eb 01                	jmp    113b3 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   113b2:	90                   	nop
    
}
   113b3:	5d                   	pop    %ebp
   113b4:	c3                   	ret    

000113b5 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   113b5:	55                   	push   %ebp
   113b6:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   113b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113bc:	74 45                	je     11403 <kernel_strncpy+0x4e>
   113be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113c2:	74 3f                	je     11403 <kernel_strncpy+0x4e>
   113c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113c8:	74 39                	je     11403 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   113ca:	eb 17                	jmp    113e3 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   113cc:	8b 55 0c             	mov    0xc(%ebp),%edx
   113cf:	8d 42 01             	lea    0x1(%edx),%eax
   113d2:	89 45 0c             	mov    %eax,0xc(%ebp)
   113d5:	8b 45 08             	mov    0x8(%ebp),%eax
   113d8:	8d 48 01             	lea    0x1(%eax),%ecx
   113db:	89 4d 08             	mov    %ecx,0x8(%ebp)
   113de:	0f b6 12             	movzbl (%edx),%edx
   113e1:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   113e3:	8b 45 10             	mov    0x10(%ebp),%eax
   113e6:	8d 50 ff             	lea    -0x1(%eax),%edx
   113e9:	89 55 10             	mov    %edx,0x10(%ebp)
   113ec:	83 f8 01             	cmp    $0x1,%eax
   113ef:	7e 0a                	jle    113fb <kernel_strncpy+0x46>
   113f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   113f4:	0f b6 00             	movzbl (%eax),%eax
   113f7:	84 c0                	test   %al,%al
   113f9:	75 d1                	jne    113cc <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   113fb:	8b 45 08             	mov    0x8(%ebp),%eax
   113fe:	c6 00 00             	movb   $0x0,(%eax)
   11401:	eb 01                	jmp    11404 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11403:	90                   	nop
}
   11404:	5d                   	pop    %ebp
   11405:	c3                   	ret    

00011406 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   11406:	55                   	push   %ebp
   11407:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   11409:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1140d:	74 06                	je     11415 <kernel_strncmp+0xf>
   1140f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11413:	75 0f                	jne    11424 <kernel_strncmp+0x1e>
   11415:	b8 00 00 00 00       	mov    $0x0,%eax
   1141a:	eb 52                	jmp    1146e <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   1141c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11420:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11424:	8b 45 08             	mov    0x8(%ebp),%eax
   11427:	0f b6 00             	movzbl (%eax),%eax
   1142a:	84 c0                	test   %al,%al
   1142c:	74 24                	je     11452 <kernel_strncmp+0x4c>
   1142e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11431:	0f b6 00             	movzbl (%eax),%eax
   11434:	84 c0                	test   %al,%al
   11436:	74 1a                	je     11452 <kernel_strncmp+0x4c>
   11438:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1143c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11440:	74 10                	je     11452 <kernel_strncmp+0x4c>
   11442:	8b 45 08             	mov    0x8(%ebp),%eax
   11445:	0f b6 10             	movzbl (%eax),%edx
   11448:	8b 45 0c             	mov    0xc(%ebp),%eax
   1144b:	0f b6 00             	movzbl (%eax),%eax
   1144e:	38 c2                	cmp    %al,%dl
   11450:	74 ca                	je     1141c <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11452:	8b 45 08             	mov    0x8(%ebp),%eax
   11455:	0f b6 10             	movzbl (%eax),%edx
   11458:	8b 45 0c             	mov    0xc(%ebp),%eax
   1145b:	0f b6 00             	movzbl (%eax),%eax
   1145e:	38 c2                	cmp    %al,%dl
   11460:	7e 07                	jle    11469 <kernel_strncmp+0x63>
   11462:	b8 01 00 00 00       	mov    $0x1,%eax
   11467:	eb 05                	jmp    1146e <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   11469:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   1146e:	5d                   	pop    %ebp
   1146f:	c3                   	ret    

00011470 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11470:	55                   	push   %ebp
   11471:	89 e5                	mov    %esp,%ebp
   11473:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   11476:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1147a:	75 07                	jne    11483 <kernel_strlen+0x13>
   1147c:	b8 00 00 00 00       	mov    $0x0,%eax
   11481:	eb 20                	jmp    114a3 <kernel_strlen+0x33>

    int len = 0;
   11483:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   1148a:	eb 04                	jmp    11490 <kernel_strlen+0x20>
   1148c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11490:	8b 45 08             	mov    0x8(%ebp),%eax
   11493:	8d 50 01             	lea    0x1(%eax),%edx
   11496:	89 55 08             	mov    %edx,0x8(%ebp)
   11499:	0f b6 00             	movzbl (%eax),%eax
   1149c:	84 c0                	test   %al,%al
   1149e:	75 ec                	jne    1148c <kernel_strlen+0x1c>

    return len;
   114a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   114a3:	c9                   	leave  
   114a4:	c3                   	ret    

000114a5 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   114a5:	55                   	push   %ebp
   114a6:	89 e5                	mov    %esp,%ebp
   114a8:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   114ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   114af:	74 40                	je     114f1 <kernel_memcpy+0x4c>
   114b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114b5:	74 3a                	je     114f1 <kernel_memcpy+0x4c>
   114b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114bb:	74 34                	je     114f1 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   114bd:	8b 45 08             	mov    0x8(%ebp),%eax
   114c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   114c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   114c6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   114c9:	eb 17                	jmp    114e2 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   114cb:	8b 55 f8             	mov    -0x8(%ebp),%edx
   114ce:	8d 42 01             	lea    0x1(%edx),%eax
   114d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   114d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d7:	8d 48 01             	lea    0x1(%eax),%ecx
   114da:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   114dd:	0f b6 12             	movzbl (%edx),%edx
   114e0:	88 10                	mov    %dl,(%eax)
    while (size--) {
   114e2:	8b 45 10             	mov    0x10(%ebp),%eax
   114e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   114e8:	89 55 10             	mov    %edx,0x10(%ebp)
   114eb:	85 c0                	test   %eax,%eax
   114ed:	75 dc                	jne    114cb <kernel_memcpy+0x26>
   114ef:	eb 01                	jmp    114f2 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   114f1:	90                   	nop
    }
    
}
   114f2:	c9                   	leave  
   114f3:	c3                   	ret    

000114f4 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   114f4:	55                   	push   %ebp
   114f5:	89 e5                	mov    %esp,%ebp
   114f7:	83 ec 14             	sub    $0x14,%esp
   114fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   114fd:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11500:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11504:	74 2c                	je     11532 <kernel_memset+0x3e>
   11506:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1150a:	74 26                	je     11532 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   1150c:	8b 45 08             	mov    0x8(%ebp),%eax
   1150f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   11512:	eb 0f                	jmp    11523 <kernel_memset+0x2f>
        *(d++) = v;
   11514:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11517:	8d 50 01             	lea    0x1(%eax),%edx
   1151a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1151d:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11521:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11523:	8b 45 10             	mov    0x10(%ebp),%eax
   11526:	8d 50 ff             	lea    -0x1(%eax),%edx
   11529:	89 55 10             	mov    %edx,0x10(%ebp)
   1152c:	85 c0                	test   %eax,%eax
   1152e:	75 e4                	jne    11514 <kernel_memset+0x20>
   11530:	eb 01                	jmp    11533 <kernel_memset+0x3f>
    if (!dest || !size) return;
   11532:	90                   	nop
    }
    
}
   11533:	c9                   	leave  
   11534:	c3                   	ret    

00011535 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   11535:	55                   	push   %ebp
   11536:	89 e5                	mov    %esp,%ebp
   11538:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   1153b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1153f:	74 0c                	je     1154d <kernel_memcmp+0x18>
   11541:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11545:	74 06                	je     1154d <kernel_memcmp+0x18>
   11547:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1154b:	75 07                	jne    11554 <kernel_memcmp+0x1f>
   1154d:	b8 00 00 00 00       	mov    $0x0,%eax
   11552:	eb 63                	jmp    115b7 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   11554:	8b 45 08             	mov    0x8(%ebp),%eax
   11557:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1155a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1155d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11560:	eb 08                	jmp    1156a <kernel_memcmp+0x35>
        d1++;
   11562:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   11566:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   1156a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1156e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11572:	74 10                	je     11584 <kernel_memcmp+0x4f>
   11574:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11577:	0f b6 10             	movzbl (%eax),%edx
   1157a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1157d:	0f b6 00             	movzbl (%eax),%eax
   11580:	38 c2                	cmp    %al,%dl
   11582:	74 de                	je     11562 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   11584:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11587:	0f b6 10             	movzbl (%eax),%edx
   1158a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1158d:	0f b6 00             	movzbl (%eax),%eax
   11590:	38 c2                	cmp    %al,%dl
   11592:	76 07                	jbe    1159b <kernel_memcmp+0x66>
   11594:	b8 01 00 00 00       	mov    $0x1,%eax
   11599:	eb 1c                	jmp    115b7 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   1159b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1159e:	0f b6 10             	movzbl (%eax),%edx
   115a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115a4:	0f b6 00             	movzbl (%eax),%eax
   115a7:	38 c2                	cmp    %al,%dl
   115a9:	73 07                	jae    115b2 <kernel_memcmp+0x7d>
   115ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   115b0:	eb 05                	jmp    115b7 <kernel_memcmp+0x82>
    else return 0;
   115b2:	b8 00 00 00 00       	mov    $0x0,%eax

}
   115b7:	c9                   	leave  
   115b8:	c3                   	ret    

000115b9 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   115b9:	55                   	push   %ebp
   115ba:	89 e5                	mov    %esp,%ebp
   115bc:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   115bf:	8d 45 10             	lea    0x10(%ebp),%eax
   115c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   115c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115c8:	83 ec 04             	sub    $0x4,%esp
   115cb:	50                   	push   %eax
   115cc:	ff 75 0c             	push   0xc(%ebp)
   115cf:	ff 75 08             	push   0x8(%ebp)
   115d2:	e8 06 00 00 00       	call   115dd <kernel_vsprintf>
   115d7:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   115da:	90                   	nop
   115db:	c9                   	leave  
   115dc:	c3                   	ret    

000115dd <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   115dd:	55                   	push   %ebp
   115de:	89 e5                	mov    %esp,%ebp
   115e0:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   115e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   115ea:	8b 45 08             	mov    0x8(%ebp),%eax
   115ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   115f0:	e9 68 01 00 00       	jmp    1175d <kernel_vsprintf+0x180>
        switch (state) {
   115f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   115f9:	74 0b                	je     11606 <kernel_vsprintf+0x29>
   115fb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   115ff:	74 2b                	je     1162c <kernel_vsprintf+0x4f>
   11601:	e9 56 01 00 00       	jmp    1175c <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   11606:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   1160a:	75 0c                	jne    11618 <kernel_vsprintf+0x3b>
   1160c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11613:	e9 45 01 00 00       	jmp    1175d <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   11618:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1161b:	8d 50 01             	lea    0x1(%eax),%edx
   1161e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11621:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11625:	88 10                	mov    %dl,(%eax)
            break;
   11627:	e9 31 01 00 00       	jmp    1175d <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   1162c:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11630:	75 47                	jne    11679 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11632:	8b 45 10             	mov    0x10(%ebp),%eax
   11635:	8d 50 04             	lea    0x4(%eax),%edx
   11638:	89 55 10             	mov    %edx,0x10(%ebp)
   1163b:	8b 00                	mov    (%eax),%eax
   1163d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11640:	ff 75 ec             	push   -0x14(%ebp)
   11643:	e8 28 fe ff ff       	call   11470 <kernel_strlen>
   11648:	83 c4 04             	add    $0x4,%esp
   1164b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   1164e:	eb 17                	jmp    11667 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11650:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11653:	8d 42 01             	lea    0x1(%edx),%eax
   11656:	89 45 ec             	mov    %eax,-0x14(%ebp)
   11659:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1165c:	8d 48 01             	lea    0x1(%eax),%ecx
   1165f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11662:	0f b6 12             	movzbl (%edx),%edx
   11665:	88 10                	mov    %dl,(%eax)
                while (len--) {
   11667:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1166a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1166d:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11670:	85 c0                	test   %eax,%eax
   11672:	75 dc                	jne    11650 <kernel_vsprintf+0x73>
   11674:	e9 da 00 00 00       	jmp    11753 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   11679:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1167d:	75 37                	jne    116b6 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   1167f:	8b 45 10             	mov    0x10(%ebp),%eax
   11682:	8d 50 04             	lea    0x4(%eax),%edx
   11685:	89 55 10             	mov    %edx,0x10(%ebp)
   11688:	8b 00                	mov    (%eax),%eax
   1168a:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   1168d:	83 ec 04             	sub    $0x4,%esp
   11690:	6a 0a                	push   $0xa
   11692:	ff 75 d8             	push   -0x28(%ebp)
   11695:	ff 75 f0             	push   -0x10(%ebp)
   11698:	e8 dd 00 00 00       	call   1177a <kernel_itoa>
   1169d:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   116a0:	83 ec 0c             	sub    $0xc,%esp
   116a3:	ff 75 f0             	push   -0x10(%ebp)
   116a6:	e8 c5 fd ff ff       	call   11470 <kernel_strlen>
   116ab:	83 c4 10             	add    $0x10,%esp
   116ae:	01 45 f0             	add    %eax,-0x10(%ebp)
   116b1:	e9 9d 00 00 00       	jmp    11753 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   116b6:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   116ba:	74 06                	je     116c2 <kernel_vsprintf+0xe5>
   116bc:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   116c0:	75 34                	jne    116f6 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   116c2:	8b 45 10             	mov    0x10(%ebp),%eax
   116c5:	8d 50 04             	lea    0x4(%eax),%edx
   116c8:	89 55 10             	mov    %edx,0x10(%ebp)
   116cb:	8b 00                	mov    (%eax),%eax
   116cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   116d0:	83 ec 04             	sub    $0x4,%esp
   116d3:	6a 10                	push   $0x10
   116d5:	ff 75 dc             	push   -0x24(%ebp)
   116d8:	ff 75 f0             	push   -0x10(%ebp)
   116db:	e8 9a 00 00 00       	call   1177a <kernel_itoa>
   116e0:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   116e3:	83 ec 0c             	sub    $0xc,%esp
   116e6:	ff 75 f0             	push   -0x10(%ebp)
   116e9:	e8 82 fd ff ff       	call   11470 <kernel_strlen>
   116ee:	83 c4 10             	add    $0x10,%esp
   116f1:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   116f4:	eb 5d                	jmp    11753 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   116f6:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   116fa:	75 34                	jne    11730 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   116fc:	8b 45 10             	mov    0x10(%ebp),%eax
   116ff:	8d 50 04             	lea    0x4(%eax),%edx
   11702:	89 55 10             	mov    %edx,0x10(%ebp)
   11705:	8b 00                	mov    (%eax),%eax
   11707:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   1170a:	83 ec 04             	sub    $0x4,%esp
   1170d:	6a 02                	push   $0x2
   1170f:	ff 75 e0             	push   -0x20(%ebp)
   11712:	ff 75 f0             	push   -0x10(%ebp)
   11715:	e8 60 00 00 00       	call   1177a <kernel_itoa>
   1171a:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1171d:	83 ec 0c             	sub    $0xc,%esp
   11720:	ff 75 f0             	push   -0x10(%ebp)
   11723:	e8 48 fd ff ff       	call   11470 <kernel_strlen>
   11728:	83 c4 10             	add    $0x10,%esp
   1172b:	01 45 f0             	add    %eax,-0x10(%ebp)
   1172e:	eb 23                	jmp    11753 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11730:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11734:	75 1d                	jne    11753 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   11736:	8b 45 10             	mov    0x10(%ebp),%eax
   11739:	8d 50 04             	lea    0x4(%eax),%edx
   1173c:	89 55 10             	mov    %edx,0x10(%ebp)
   1173f:	8b 00                	mov    (%eax),%eax
   11741:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11747:	8d 50 01             	lea    0x1(%eax),%edx
   1174a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1174d:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11751:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11753:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1175a:	eb 01                	jmp    1175d <kernel_vsprintf+0x180>
        default:
            break;
   1175c:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   1175d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11760:	8d 50 01             	lea    0x1(%eax),%edx
   11763:	89 55 0c             	mov    %edx,0xc(%ebp)
   11766:	0f b6 00             	movzbl (%eax),%eax
   11769:	88 45 e7             	mov    %al,-0x19(%ebp)
   1176c:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11770:	0f 85 7f fe ff ff    	jne    115f5 <kernel_vsprintf+0x18>
        }
    }
    

}
   11776:	90                   	nop
   11777:	90                   	nop
   11778:	c9                   	leave  
   11779:	c3                   	ret    

0001177a <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1177a:	55                   	push   %ebp
   1177b:	89 e5                	mov    %esp,%ebp
   1177d:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11783:	8b 45 08             	mov    0x8(%ebp),%eax
   11786:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   11789:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1178d:	74 1d                	je     117ac <kernel_itoa+0x32>
   1178f:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11793:	74 17                	je     117ac <kernel_itoa+0x32>
   11795:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11799:	74 11                	je     117ac <kernel_itoa+0x32>
   1179b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1179f:	74 0b                	je     117ac <kernel_itoa+0x32>
        *buf = '\0';
   117a1:	8b 45 08             	mov    0x8(%ebp),%eax
   117a4:	c6 00 00             	movb   $0x0,(%eax)
        return;
   117a7:	e9 a2 00 00 00       	jmp    1184e <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   117ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117b0:	79 11                	jns    117c3 <kernel_itoa+0x49>
        *(p++) = '-';
   117b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117b5:	8d 50 01             	lea    0x1(%eax),%edx
   117b8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   117bb:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   117be:	f7 5d 0c             	negl   0xc(%ebp)
   117c1:	eb 1a                	jmp    117dd <kernel_itoa+0x63>
    } else if (num == 0) {
   117c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117c7:	75 14                	jne    117dd <kernel_itoa+0x63>
        *(p++) = '0';
   117c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117cc:	8d 50 01             	lea    0x1(%eax),%edx
   117cf:	89 55 fc             	mov    %edx,-0x4(%ebp)
   117d2:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   117d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117d8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   117db:	eb 71                	jmp    1184e <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   117dd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   117e4:	eb 2e                	jmp    11814 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   117e6:	8b 0d 7c 24 01 00    	mov    0x1247c,%ecx
   117ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   117ef:	99                   	cltd   
   117f0:	f7 7d 10             	idivl  0x10(%ebp)
   117f3:	89 d0                	mov    %edx,%eax
   117f5:	01 c1                	add    %eax,%ecx
   117f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117fa:	8d 50 01             	lea    0x1(%eax),%edx
   117fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11800:	0f b6 11             	movzbl (%ecx),%edx
   11803:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   1180a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1180d:	99                   	cltd   
   1180e:	f7 7d 10             	idivl  0x10(%ebp)
   11811:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11814:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11818:	7f cc                	jg     117e6 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   1181a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1181d:	83 e8 01             	sub    $0x1,%eax
   11820:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11823:	eb 1d                	jmp    11842 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   11825:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11828:	8d 50 01             	lea    0x1(%eax),%edx
   1182b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1182e:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11834:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11837:	01 ca                	add    %ecx,%edx
   11839:	0f b6 12             	movzbl (%edx),%edx
   1183c:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   1183e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11842:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11846:	79 dd                	jns    11825 <kernel_itoa+0xab>
    }
    *p = '\0';
   11848:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1184b:	c6 00 00             	movb   $0x0,(%eax)
   1184e:	c9                   	leave  
   1184f:	c3                   	ret    

00011850 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11850:	55                   	push   %ebp
   11851:	89 e5                	mov    %esp,%ebp
   11853:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11856:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1185a:	75 19                	jne    11875 <list_is_empty+0x25>
   1185c:	68 30 23 01 00       	push   $0x12330
   11861:	68 14 24 01 00       	push   $0x12414
   11866:	6a 38                	push   $0x38
   11868:	68 44 23 01 00       	push   $0x12344
   1186d:	e8 c6 fa ff ff       	call   11338 <pannic>
   11872:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11875:	8b 45 08             	mov    0x8(%ebp),%eax
   11878:	8b 40 08             	mov    0x8(%eax),%eax
   1187b:	85 c0                	test   %eax,%eax
   1187d:	0f 94 c0             	sete   %al
   11880:	0f b6 c0             	movzbl %al,%eax
}
   11883:	c9                   	leave  
   11884:	c3                   	ret    

00011885 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11885:	55                   	push   %ebp
   11886:	89 e5                	mov    %esp,%ebp
   11888:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1188b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1188f:	75 19                	jne    118aa <list_get_size+0x25>
   11891:	68 30 23 01 00       	push   $0x12330
   11896:	68 4c 24 01 00       	push   $0x1244c
   1189b:	6a 3e                	push   $0x3e
   1189d:	68 44 23 01 00       	push   $0x12344
   118a2:	e8 91 fa ff ff       	call   11338 <pannic>
   118a7:	83 c4 10             	add    $0x10,%esp
    return list->size;
   118aa:	8b 45 08             	mov    0x8(%ebp),%eax
   118ad:	8b 40 08             	mov    0x8(%eax),%eax
}
   118b0:	c9                   	leave  
   118b1:	c3                   	ret    

000118b2 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   118b2:	55                   	push   %ebp
   118b3:	89 e5                	mov    %esp,%ebp
   118b5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   118b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118bc:	74 06                	je     118c4 <list_insert_first+0x12>
   118be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   118c2:	75 19                	jne    118dd <list_insert_first+0x2b>
   118c4:	68 84 23 01 00       	push   $0x12384
   118c9:	68 00 24 01 00       	push   $0x12400
   118ce:	6a 0f                	push   $0xf
   118d0:	68 b4 23 01 00       	push   $0x123b4
   118d5:	e8 5e fa ff ff       	call   11338 <pannic>
   118da:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   118dd:	8b 45 08             	mov    0x8(%ebp),%eax
   118e0:	8b 10                	mov    (%eax),%edx
   118e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   118e5:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   118e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   118eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   118f1:	83 ec 0c             	sub    $0xc,%esp
   118f4:	ff 75 08             	push   0x8(%ebp)
   118f7:	e8 54 ff ff ff       	call   11850 <list_is_empty>
   118fc:	83 c4 10             	add    $0x10,%esp
   118ff:	85 c0                	test   %eax,%eax
   11901:	74 16                	je     11919 <list_insert_first+0x67>
        list->first = list->last = node;
   11903:	8b 45 08             	mov    0x8(%ebp),%eax
   11906:	8b 55 0c             	mov    0xc(%ebp),%edx
   11909:	89 50 04             	mov    %edx,0x4(%eax)
   1190c:	8b 45 08             	mov    0x8(%ebp),%eax
   1190f:	8b 50 04             	mov    0x4(%eax),%edx
   11912:	8b 45 08             	mov    0x8(%ebp),%eax
   11915:	89 10                	mov    %edx,(%eax)
   11917:	eb 12                	jmp    1192b <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   11919:	8b 45 08             	mov    0x8(%ebp),%eax
   1191c:	8b 00                	mov    (%eax),%eax
   1191e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11921:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11923:	8b 45 08             	mov    0x8(%ebp),%eax
   11926:	8b 55 0c             	mov    0xc(%ebp),%edx
   11929:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   1192b:	8b 45 08             	mov    0x8(%ebp),%eax
   1192e:	8b 40 08             	mov    0x8(%eax),%eax
   11931:	8d 50 01             	lea    0x1(%eax),%edx
   11934:	8b 45 08             	mov    0x8(%ebp),%eax
   11937:	89 50 08             	mov    %edx,0x8(%eax)
}
   1193a:	90                   	nop
   1193b:	c9                   	leave  
   1193c:	c3                   	ret    

0001193d <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1193d:	55                   	push   %ebp
   1193e:	89 e5                	mov    %esp,%ebp
   11940:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11943:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11947:	74 06                	je     1194f <list_insert_last+0x12>
   11949:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1194d:	75 19                	jne    11968 <list_insert_last+0x2b>
   1194f:	68 84 23 01 00       	push   $0x12384
   11954:	68 24 24 01 00       	push   $0x12424
   11959:	6a 1f                	push   $0x1f
   1195b:	68 b4 23 01 00       	push   $0x123b4
   11960:	e8 d3 f9 ff ff       	call   11338 <pannic>
   11965:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   11968:	8b 45 08             	mov    0x8(%ebp),%eax
   1196b:	8b 50 04             	mov    0x4(%eax),%edx
   1196e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11971:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11973:	8b 45 0c             	mov    0xc(%ebp),%eax
   11976:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   1197d:	83 ec 0c             	sub    $0xc,%esp
   11980:	ff 75 08             	push   0x8(%ebp)
   11983:	e8 c8 fe ff ff       	call   11850 <list_is_empty>
   11988:	83 c4 10             	add    $0x10,%esp
   1198b:	85 c0                	test   %eax,%eax
   1198d:	74 16                	je     119a5 <list_insert_last+0x68>
        list->first = list->last = node;
   1198f:	8b 45 08             	mov    0x8(%ebp),%eax
   11992:	8b 55 0c             	mov    0xc(%ebp),%edx
   11995:	89 50 04             	mov    %edx,0x4(%eax)
   11998:	8b 45 08             	mov    0x8(%ebp),%eax
   1199b:	8b 50 04             	mov    0x4(%eax),%edx
   1199e:	8b 45 08             	mov    0x8(%ebp),%eax
   119a1:	89 10                	mov    %edx,(%eax)
   119a3:	eb 15                	jmp    119ba <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   119a5:	8b 45 08             	mov    0x8(%ebp),%eax
   119a8:	8b 40 04             	mov    0x4(%eax),%eax
   119ab:	8b 55 0c             	mov    0xc(%ebp),%edx
   119ae:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   119b1:	8b 45 08             	mov    0x8(%ebp),%eax
   119b4:	8b 55 0c             	mov    0xc(%ebp),%edx
   119b7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   119ba:	8b 45 08             	mov    0x8(%ebp),%eax
   119bd:	8b 40 08             	mov    0x8(%eax),%eax
   119c0:	8d 50 01             	lea    0x1(%eax),%edx
   119c3:	8b 45 08             	mov    0x8(%ebp),%eax
   119c6:	89 50 08             	mov    %edx,0x8(%eax)

}
   119c9:	90                   	nop
   119ca:	c9                   	leave  
   119cb:	c3                   	ret    

000119cc <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   119cc:	55                   	push   %ebp
   119cd:	89 e5                	mov    %esp,%ebp
   119cf:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   119d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119d6:	75 19                	jne    119f1 <list_remove_first+0x25>
   119d8:	68 ea 23 01 00       	push   $0x123ea
   119dd:	68 38 24 01 00       	push   $0x12438
   119e2:	6a 31                	push   $0x31
   119e4:	68 b4 23 01 00       	push   $0x123b4
   119e9:	e8 4a f9 ff ff       	call   11338 <pannic>
   119ee:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   119f1:	83 ec 0c             	sub    $0xc,%esp
   119f4:	ff 75 08             	push   0x8(%ebp)
   119f7:	e8 54 fe ff ff       	call   11850 <list_is_empty>
   119fc:	83 c4 10             	add    $0x10,%esp
   119ff:	85 c0                	test   %eax,%eax
   11a01:	74 07                	je     11a0a <list_remove_first+0x3e>
        return (list_node_t*)0;
   11a03:	b8 00 00 00 00       	mov    $0x0,%eax
   11a08:	eb 71                	jmp    11a7b <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   11a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0d:	8b 00                	mov    (%eax),%eax
   11a0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   11a12:	83 ec 0c             	sub    $0xc,%esp
   11a15:	ff 75 08             	push   0x8(%ebp)
   11a18:	e8 68 fe ff ff       	call   11885 <list_get_size>
   11a1d:	83 c4 10             	add    $0x10,%esp
   11a20:	83 f8 01             	cmp    $0x1,%eax
   11a23:	75 17                	jne    11a3c <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   11a25:	8b 45 08             	mov    0x8(%ebp),%eax
   11a28:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a32:	8b 50 04             	mov    0x4(%eax),%edx
   11a35:	8b 45 08             	mov    0x8(%ebp),%eax
   11a38:	89 10                	mov    %edx,(%eax)
   11a3a:	eb 18                	jmp    11a54 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   11a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3f:	8b 00                	mov    (%eax),%eax
   11a41:	8b 50 04             	mov    0x4(%eax),%edx
   11a44:	8b 45 08             	mov    0x8(%ebp),%eax
   11a47:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   11a49:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4c:	8b 00                	mov    (%eax),%eax
   11a4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   11a54:	8b 45 08             	mov    0x8(%ebp),%eax
   11a57:	8b 40 08             	mov    0x8(%eax),%eax
   11a5a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a5d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a60:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   11a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a66:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a70:	8b 50 04             	mov    0x4(%eax),%edx
   11a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a76:	89 10                	mov    %edx,(%eax)
    return ret;
   11a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   11a7b:	c9                   	leave  
   11a7c:	c3                   	ret    

00011a7d <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   11a7d:	55                   	push   %ebp
   11a7e:	89 e5                	mov    %esp,%ebp
   11a80:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   11a83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a87:	75 19                	jne    11aa2 <list_remove_last+0x25>
   11a89:	68 ea 23 01 00       	push   $0x123ea
   11a8e:	68 5c 24 01 00       	push   $0x1245c
   11a93:	6a 46                	push   $0x46
   11a95:	68 b4 23 01 00       	push   $0x123b4
   11a9a:	e8 99 f8 ff ff       	call   11338 <pannic>
   11a9f:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   11aa2:	83 ec 0c             	sub    $0xc,%esp
   11aa5:	ff 75 08             	push   0x8(%ebp)
   11aa8:	e8 a3 fd ff ff       	call   11850 <list_is_empty>
   11aad:	83 c4 10             	add    $0x10,%esp
   11ab0:	85 c0                	test   %eax,%eax
   11ab2:	74 07                	je     11abb <list_remove_last+0x3e>
        return (list_node_t*)0;
   11ab4:	b8 00 00 00 00       	mov    $0x0,%eax
   11ab9:	eb 75                	jmp    11b30 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   11abb:	8b 45 08             	mov    0x8(%ebp),%eax
   11abe:	8b 40 04             	mov    0x4(%eax),%eax
   11ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   11ac4:	83 ec 0c             	sub    $0xc,%esp
   11ac7:	ff 75 08             	push   0x8(%ebp)
   11aca:	e8 b6 fd ff ff       	call   11885 <list_get_size>
   11acf:	83 c4 10             	add    $0x10,%esp
   11ad2:	83 f8 01             	cmp    $0x1,%eax
   11ad5:	75 17                	jne    11aee <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   11ad7:	8b 45 08             	mov    0x8(%ebp),%eax
   11ada:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ae1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae4:	8b 50 04             	mov    0x4(%eax),%edx
   11ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   11aea:	89 10                	mov    %edx,(%eax)
   11aec:	eb 1b                	jmp    11b09 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   11aee:	8b 45 08             	mov    0x8(%ebp),%eax
   11af1:	8b 40 04             	mov    0x4(%eax),%eax
   11af4:	8b 10                	mov    (%eax),%edx
   11af6:	8b 45 08             	mov    0x8(%ebp),%eax
   11af9:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   11afc:	8b 45 08             	mov    0x8(%ebp),%eax
   11aff:	8b 40 04             	mov    0x4(%eax),%eax
   11b02:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   11b09:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0c:	8b 40 08             	mov    0x8(%eax),%eax
   11b0f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b12:	8b 45 08             	mov    0x8(%ebp),%eax
   11b15:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   11b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b1b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b25:	8b 50 04             	mov    0x4(%eax),%edx
   11b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b2b:	89 10                	mov    %edx,(%eax)
    return ret;
   11b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11b30:	c9                   	leave  
   11b31:	c3                   	ret    

00011b32 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   11b32:	55                   	push   %ebp
   11b33:	89 e5                	mov    %esp,%ebp
   11b35:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11b38:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b3c:	74 06                	je     11b44 <list_remove+0x12>
   11b3e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b42:	75 19                	jne    11b5d <list_remove+0x2b>
   11b44:	68 84 23 01 00       	push   $0x12384
   11b49:	68 70 24 01 00       	push   $0x12470
   11b4e:	6a 5b                	push   $0x5b
   11b50:	68 b4 23 01 00       	push   $0x123b4
   11b55:	e8 de f7 ff ff       	call   11338 <pannic>
   11b5a:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   11b5d:	83 ec 0c             	sub    $0xc,%esp
   11b60:	ff 75 08             	push   0x8(%ebp)
   11b63:	e8 e8 fc ff ff       	call   11850 <list_is_empty>
   11b68:	83 c4 10             	add    $0x10,%esp
   11b6b:	85 c0                	test   %eax,%eax
   11b6d:	74 0a                	je     11b79 <list_remove+0x47>
        return (list_node_t*)0;
   11b6f:	b8 00 00 00 00       	mov    $0x0,%eax
   11b74:	e9 80 00 00 00       	jmp    11bf9 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   11b79:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7c:	8b 00                	mov    (%eax),%eax
   11b7e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11b81:	75 0b                	jne    11b8e <list_remove+0x5c>
   11b83:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b86:	8b 50 04             	mov    0x4(%eax),%edx
   11b89:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8c:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   11b8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b91:	8b 40 04             	mov    0x4(%eax),%eax
   11b94:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11b97:	75 0b                	jne    11ba4 <list_remove+0x72>
   11b99:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b9c:	8b 10                	mov    (%eax),%edx
   11b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba1:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   11ba4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ba7:	8b 00                	mov    (%eax),%eax
   11ba9:	85 c0                	test   %eax,%eax
   11bab:	74 0e                	je     11bbb <list_remove+0x89>
   11bad:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bb0:	8b 00                	mov    (%eax),%eax
   11bb2:	8b 55 0c             	mov    0xc(%ebp),%edx
   11bb5:	8b 52 04             	mov    0x4(%edx),%edx
   11bb8:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   11bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bbe:	8b 40 04             	mov    0x4(%eax),%eax
   11bc1:	85 c0                	test   %eax,%eax
   11bc3:	74 0d                	je     11bd2 <list_remove+0xa0>
   11bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bc8:	8b 40 04             	mov    0x4(%eax),%eax
   11bcb:	8b 55 0c             	mov    0xc(%ebp),%edx
   11bce:	8b 12                	mov    (%edx),%edx
   11bd0:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   11bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bd5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bdf:	8b 50 04             	mov    0x4(%eax),%edx
   11be2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11be5:	89 10                	mov    %edx,(%eax)
    list->size--;
   11be7:	8b 45 08             	mov    0x8(%ebp),%eax
   11bea:	8b 40 08             	mov    0x8(%eax),%eax
   11bed:	8d 50 ff             	lea    -0x1(%eax),%edx
   11bf0:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf3:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   11bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bf9:	c9                   	leave  
   11bfa:	c3                   	ret    

00011bfb <inb>:
static inline uint8_t inb(uint16_t port) {
   11bfb:	55                   	push   %ebp
   11bfc:	89 e5                	mov    %esp,%ebp
   11bfe:	83 ec 14             	sub    $0x14,%esp
   11c01:	8b 45 08             	mov    0x8(%ebp),%eax
   11c04:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11c08:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11c0c:	89 c2                	mov    %eax,%edx
   11c0e:	ec                   	in     (%dx),%al
   11c0f:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11c12:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11c16:	c9                   	leave  
   11c17:	c3                   	ret    

00011c18 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11c18:	55                   	push   %ebp
   11c19:	89 e5                	mov    %esp,%ebp
   11c1b:	83 ec 08             	sub    $0x8,%esp
   11c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c21:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c24:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11c28:	89 d0                	mov    %edx,%eax
   11c2a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11c2d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11c31:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11c35:	ee                   	out    %al,(%dx)
}
   11c36:	90                   	nop
   11c37:	c9                   	leave  
   11c38:	c3                   	ret    

00011c39 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   11c39:	55                   	push   %ebp
   11c3a:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11c3c:	6a 00                	push   $0x0
   11c3e:	68 f9 03 00 00       	push   $0x3f9
   11c43:	e8 d0 ff ff ff       	call   11c18 <outb>
   11c48:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11c4b:	68 80 00 00 00       	push   $0x80
   11c50:	68 fb 03 00 00       	push   $0x3fb
   11c55:	e8 be ff ff ff       	call   11c18 <outb>
   11c5a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11c5d:	6a 03                	push   $0x3
   11c5f:	68 f8 03 00 00       	push   $0x3f8
   11c64:	e8 af ff ff ff       	call   11c18 <outb>
   11c69:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11c6c:	6a 00                	push   $0x0
   11c6e:	68 f9 03 00 00       	push   $0x3f9
   11c73:	e8 a0 ff ff ff       	call   11c18 <outb>
   11c78:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11c7b:	6a 03                	push   $0x3
   11c7d:	68 fb 03 00 00       	push   $0x3fb
   11c82:	e8 91 ff ff ff       	call   11c18 <outb>
   11c87:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11c8a:	68 c7 00 00 00       	push   $0xc7
   11c8f:	68 fa 03 00 00       	push   $0x3fa
   11c94:	e8 7f ff ff ff       	call   11c18 <outb>
   11c99:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11c9c:	6a 0f                	push   $0xf
   11c9e:	68 fc 03 00 00       	push   $0x3fc
   11ca3:	e8 70 ff ff ff       	call   11c18 <outb>
   11ca8:	83 c4 08             	add    $0x8,%esp
}
   11cab:	90                   	nop
   11cac:	c9                   	leave  
   11cad:	c3                   	ret    

00011cae <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   11cae:	55                   	push   %ebp
   11caf:	89 e5                	mov    %esp,%ebp
   11cb1:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11cb7:	83 ec 04             	sub    $0x4,%esp
   11cba:	68 80 00 00 00       	push   $0x80
   11cbf:	6a 00                	push   $0x0
   11cc1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11cc7:	50                   	push   %eax
   11cc8:	e8 27 f8 ff ff       	call   114f4 <kernel_memset>
   11ccd:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11cd0:	8d 45 0c             	lea    0xc(%ebp),%eax
   11cd3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   11cd9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11cdf:	83 ec 04             	sub    $0x4,%esp
   11ce2:	50                   	push   %eax
   11ce3:	ff 75 08             	push   0x8(%ebp)
   11ce6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11cec:	50                   	push   %eax
   11ced:	e8 eb f8 ff ff       	call   115dd <kernel_vsprintf>
   11cf2:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   11cf5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11cfb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   11cfe:	eb 57                	jmp    11d57 <log_printf+0xa9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   11d00:	90                   	nop
   11d01:	83 ec 0c             	sub    $0xc,%esp
   11d04:	68 fd 03 00 00       	push   $0x3fd
   11d09:	e8 ed fe ff ff       	call   11bfb <inb>
   11d0e:	83 c4 10             	add    $0x10,%esp
   11d11:	0f b6 c0             	movzbl %al,%eax
   11d14:	83 e0 40             	and    $0x40,%eax
   11d17:	85 c0                	test   %eax,%eax
   11d19:	74 e6                	je     11d01 <log_printf+0x53>

        if (*p == '\n') outb(COM1_PORT, '\r');
   11d1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d1e:	0f b6 00             	movzbl (%eax),%eax
   11d21:	3c 0a                	cmp    $0xa,%al
   11d23:	75 12                	jne    11d37 <log_printf+0x89>
   11d25:	83 ec 08             	sub    $0x8,%esp
   11d28:	6a 0d                	push   $0xd
   11d2a:	68 f8 03 00 00       	push   $0x3f8
   11d2f:	e8 e4 fe ff ff       	call   11c18 <outb>
   11d34:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   11d37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d3a:	8d 50 01             	lea    0x1(%eax),%edx
   11d3d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11d40:	0f b6 00             	movzbl (%eax),%eax
   11d43:	0f b6 c0             	movzbl %al,%eax
   11d46:	83 ec 08             	sub    $0x8,%esp
   11d49:	50                   	push   %eax
   11d4a:	68 f8 03 00 00       	push   $0x3f8
   11d4f:	e8 c4 fe ff ff       	call   11c18 <outb>
   11d54:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   11d57:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d5a:	0f b6 00             	movzbl (%eax),%eax
   11d5d:	84 c0                	test   %al,%al
   11d5f:	75 9f                	jne    11d00 <log_printf+0x52>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   11d61:	83 ec 08             	sub    $0x8,%esp
   11d64:	6a 0d                	push   $0xd
   11d66:	68 f8 03 00 00       	push   $0x3f8
   11d6b:	e8 a8 fe ff ff       	call   11c18 <outb>
   11d70:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11d73:	83 ec 08             	sub    $0x8,%esp
   11d76:	6a 0a                	push   $0xa
   11d78:	68 f8 03 00 00       	push   $0x3f8
   11d7d:	e8 96 fe ff ff       	call   11c18 <outb>
   11d82:	83 c4 10             	add    $0x10,%esp
   11d85:	90                   	nop
   11d86:	c9                   	leave  
   11d87:	c3                   	ret    
