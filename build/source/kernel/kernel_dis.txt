
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002848 memsz 0x00016220 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002090  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007b4  00012090  00012090  00003090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012844  00012844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000139c0  00012860  00012860  00003848  2**5
                  ALLOC
  4 .debug_line   0000115a  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000534  00000000  00000000  000049a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000027ea  00000000  00000000  00004ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000ec1  00000000  00000000  000076c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000160  00000000  00000000  00008588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000c4e  00000000  00000000  000086e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  00009336  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000ce4  00000000  00000000  00009364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000003d list_node_init
00012158 l     O .rodata	0000000f __func__.3
000102ea l     F .text	00000047 list_init
00012168 l     O .rodata	0000000a __func__.2
00010331 l     F .text	0000002d list_get_size
00012184 l     O .rodata	0000000e __func__.0
0001035e l     F .text	0000002c list_get_first
00012174 l     O .rodata	0000000f __func__.1
0001038a l     F .text	0000001a far_jump
000103a4 l     F .text	00000017 write_tr
00012860 l     O .bss	000000c4 task_manager
000103bb l     F .text	0000001f switch_to_tss
000103f5 l     F .text	000000e2 tss_init
0001214c l     O .rodata	0000000a __func__.4
0001067a l     F .text	0000000a task_current
00000000 l    df *ABS*	00000000 gdt.c
0001076b l     F .text	00000028 lgdt
00012940 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
00010906 l     F .text	00000007 cli
0001090d l     F .text	00000007 sti
00010914 l     F .text	00000007 hlt
0001091b l     F .text	0000001d inb
00010938 l     F .text	00000021 outb
00010959 l     F .text	00000028 lidt
00022940 l     O .bss	00000800 idt_table
00010981 l     F .text	000000e9 print_exception_fram
00010a6a l     F .text	0000003e do_default_handler
00010cf4 l     F .text	00000047 gate_desc_set
00010d7b l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000110fc l     F .text	00000021 outb
00023140 l     O .bss	00000004 sys_tick
00011145 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00012570 l     O .rodata	0000000c __func__.0
00023160 l     O .bss	000000a8 task_test_task
00023220 l     O .bss	00001000 test_task_stack
00000000 l    df *ABS*	00000000 test.c
00011291 l     F .text	00000047 list_init
00012680 l     O .rodata	0000000a __func__.3
000112d8 l     F .text	0000002d list_get_size
0001268c l     O .rodata	0000000e __func__.2
00011305 l     F .text	0000002c list_get_first
000126ac l     O .rodata	0000000f __func__.0
00011331 l     F .text	0000002d list_get_last
0001269c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00011639 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
00012844 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00011b58 l     F .text	00000035 list_is_empty
000127dc l     O .rodata	0000000e __func__.5
00011b8d l     F .text	0000002d list_get_size
00012814 l     O .rodata	0000000e __func__.2
000127c8 l     O .rodata	00000012 __func__.6
000127ec l     O .rodata	00000011 __func__.4
00012800 l     O .rodata	00000012 __func__.3
00012824 l     O .rodata	00000011 __func__.1
00012838 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00011f03 l     F .text	0000001d inb
00011f20 l     F .text	00000021 outb
000117ad g     F .text	0000004f kernel_memcpy
00010f81 g     F .text	00000098 idt_enable
00011c45 g     F .text	0000008f list_insert_last
000106c9 g     F .text	0000004b sys_yield
00010bdc g     F .text	0000001c do_handler_segment_not_present
00010603 g     F .text	00000029 task_set_ready
000110b8 g     F .text	0000000b idt_enable_global
000117fc g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00011f41 g     F .text	00000075 log_init
00011232 g     F .text	0000005f init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00011676 g     F .text	00000047 kernel_strcpy
000110ad g     F .text	0000000b idt_disable_global
00010d3b g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010b34 g     F .text	0000001c do_handler_overflow
00010c68 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010c14 g     F .text	0000001c do_handler_general_protection
00010cd8 g     F .text	0000001c do_handler_control_exception
00010ac4 g     F .text	0000001c do_handler_divider
00010ba4 g     F .text	0000001c do_handler_double_fault
00010c30 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000110c3 g     F .text	00000039 pic_send_eoi
00011d85 g     F .text	000000b5 list_remove_last
000105f9 g     F .text	0000000a task_first_task
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010852 g     F .text	00000070 gdt_init
00010cbc g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010ae0 g     F .text	0000001c do_handler_debug
00024220 g     O .bss	00002000 stack
0001135e g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
00010e0e g     F .text	00000173 idt_init
00010b6c g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010c4c g     F .text	0000001c do_handler_fpu_error
000105bc g     F .text	0000003d task_first_init
00010c84 g     F .text	0000001c do_handler_machine_check
00011bba g     F .text	0000008b list_insert_first
0001064c g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000116bd g     F .text	00000051 kernel_strncpy
000111bf g     F .text	00000045 kernel_init
00010000 g       .text	00000000 _start
000118e5 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010bc0 g     F .text	0000001c do_handler_invalid_tss
00011019 g     F .text	00000094 idt_disable
00010afc g     F .text	0000001c do_handler_nmi
00010226 g       .text	00000000 exception_handler_smd_exception
00010b88 g     F .text	0000001c do_handler_device_unavailable
0001183d g     F .text	00000084 kernel_memcmp
00010ca0 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010aa8 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000103da g     F .text	0000001b task_switch_from_to
00010684 g     F .text	00000045 task_switch
00011778 g     F .text	00000035 kernel_strlen
0001062c g     F .text	00000020 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010793 g     F .text	000000bf segment_desc_set
00010b50 g     F .text	0000001c do_handler_bound_range
00011cd4 g     F .text	000000b1 list_remove_first
0001170e g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010589 g     F .text	00000033 task_manager_init
00010714 g     F .text	00000057 task_time_tick
00011640 g     F .text	00000036 pannic
00010bf8 g     F .text	0000001c do_handler_stack_segment_fault
00011204 g     F .text	0000002e test_task
00010b18 g     F .text	0000001c do_handler_breakpoint
00011fb6 g     F .text	000000da log_printf
000104d7 g     F .text	000000b2 task_init
000118c1 g     F .text	00000024 kernel_sprintf
000108c2 g     F .text	00000044 gdt_alloc_desc
00011a82 g     F .text	000000d6 kernel_itoa
00011e3a g     F .text	000000c9 list_remove
0001111d g     F .text	00000028 do_handler_time
000111a7 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 b4 11 00 00       	call   111bf <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 62 02 00       	mov    $0x26220,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 08 12 00 00       	jmp    11232 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 6d 0a 00 00       	call   10aa8 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 6c 0a 00 00       	call   10ac4 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 6b 0a 00 00       	call   10ae0 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 6a 0a 00 00       	call   10afc <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 69 0a 00 00       	call   10b18 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 68 0a 00 00       	call   10b34 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 67 0a 00 00       	call   10b50 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 66 0a 00 00       	call   10b6c <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 65 0a 00 00       	call   10b88 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 66 0a 00 00       	call   10ba4 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 67 0a 00 00       	call   10bc0 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 68 0a 00 00       	call   10bdc <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 69 0a 00 00       	call   10bf8 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 6a 0a 00 00       	call   10c14 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 6b 0a 00 00       	call   10c30 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 6a 0a 00 00       	call   10c4c <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 6b 0a 00 00       	call   10c68 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 6a 0a 00 00       	call   10c84 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 69 0a 00 00       	call   10ca0 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 68 0a 00 00       	call   10cbc <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 69 0a 00 00       	call   10cd8 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 91 0e 00 00       	call   1111d <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <list_node_init+0x25>
   102b9:	68 90 20 01 00       	push   $0x12090
   102be:	68 58 21 01 00       	push   $0x12158
   102c3:	6a 20                	push   $0x20
   102c5:	68 a8 20 01 00       	push   $0x120a8
   102ca:	e8 71 13 00 00       	call   11640 <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	8b 50 04             	mov    0x4(%eax),%edx
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	89 10                	mov    %edx,(%eax)
}
   102e7:	90                   	nop
   102e8:	c9                   	leave  
   102e9:	c3                   	ret    

000102ea <list_init>:
    ASSERT(node != (list_node_t*)0);

    return node->next;
}

static inline void list_init(list_t *list) {
   102ea:	55                   	push   %ebp
   102eb:	89 e5                	mov    %esp,%ebp
   102ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   102f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102f4:	75 19                	jne    1030f <list_init+0x25>
   102f6:	68 e6 20 01 00       	push   $0x120e6
   102fb:	68 68 21 01 00       	push   $0x12168
   10300:	6a 31                	push   $0x31
   10302:	68 a8 20 01 00       	push   $0x120a8
   10307:	e8 34 13 00 00       	call   11640 <pannic>
   1030c:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10319:	8b 45 08             	mov    0x8(%ebp),%eax
   1031c:	8b 50 04             	mov    0x4(%eax),%edx
   1031f:	8b 45 08             	mov    0x8(%ebp),%eax
   10322:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1032e:	90                   	nop
   1032f:	c9                   	leave  
   10330:	c3                   	ret    

00010331 <list_get_size>:
    ASSERT(list != (list_t*)0);

    return list->size == 0;
}

static inline int list_get_size(list_t *list) {
   10331:	55                   	push   %ebp
   10332:	89 e5                	mov    %esp,%ebp
   10334:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10337:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1033b:	75 19                	jne    10356 <list_get_size+0x25>
   1033d:	68 e6 20 01 00       	push   $0x120e6
   10342:	68 84 21 01 00       	push   $0x12184
   10347:	6a 3e                	push   $0x3e
   10349:	68 a8 20 01 00       	push   $0x120a8
   1034e:	e8 ed 12 00 00       	call   11640 <pannic>
   10353:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10356:	8b 45 08             	mov    0x8(%ebp),%eax
   10359:	8b 40 08             	mov    0x8(%eax),%eax
}
   1035c:	c9                   	leave  
   1035d:	c3                   	ret    

0001035e <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10368:	75 19                	jne    10383 <list_get_first+0x25>
   1036a:	68 e6 20 01 00       	push   $0x120e6
   1036f:	68 74 21 01 00       	push   $0x12174
   10374:	6a 44                	push   $0x44
   10376:	68 a8 20 01 00       	push   $0x120a8
   1037b:	e8 c0 12 00 00       	call   11640 <pannic>
   10380:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 00                	mov    (%eax),%eax
}
   10388:	c9                   	leave  
   10389:	c3                   	ret    

0001038a <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1038a:	55                   	push   %ebp
   1038b:	89 e5                	mov    %esp,%ebp
   1038d:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10390:	8b 45 0c             	mov    0xc(%ebp),%eax
   10393:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10396:	8b 45 08             	mov    0x8(%ebp),%eax
   10399:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1039c:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1039f:	ff 28                	ljmp   *(%eax)
}
   103a1:	90                   	nop
   103a2:	c9                   	leave  
   103a3:	c3                   	ret    

000103a4 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
   103a7:	83 ec 04             	sub    $0x4,%esp
   103aa:	8b 45 08             	mov    0x8(%ebp),%eax
   103ad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   103b1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103b5:	0f 00 d8             	ltr    %ax
}
   103b8:	90                   	nop
   103b9:	c9                   	leave  
   103ba:	c3                   	ret    

000103bb <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   103bb:	55                   	push   %ebp
   103bc:	89 e5                	mov    %esp,%ebp
   103be:	83 ec 04             	sub    $0x4,%esp
   103c1:	8b 45 08             	mov    0x8(%ebp),%eax
   103c4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   103c8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103cc:	6a 00                	push   $0x0
   103ce:	50                   	push   %eax
   103cf:	e8 b6 ff ff ff       	call   1038a <far_jump>
   103d4:	83 c4 08             	add    $0x8,%esp
}
   103d7:	90                   	nop
   103d8:	c9                   	leave  
   103d9:	c3                   	ret    

000103da <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   103da:	55                   	push   %ebp
   103db:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   103dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e0:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
   103e6:	0f b7 c0             	movzwl %ax,%eax
   103e9:	50                   	push   %eax
   103ea:	e8 cc ff ff ff       	call   103bb <switch_to_tss>
   103ef:	83 c4 04             	add    $0x4,%esp
}
   103f2:	90                   	nop
   103f3:	c9                   	leave  
   103f4:	c3                   	ret    

000103f5 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   103f5:	55                   	push   %ebp
   103f6:	89 e5                	mov    %esp,%ebp
   103f8:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	83 c0 3c             	add    $0x3c,%eax
   10401:	83 ec 04             	sub    $0x4,%esp
   10404:	6a 68                	push   $0x68
   10406:	6a 00                	push   $0x0
   10408:	50                   	push   %eax
   10409:	e8 ee 13 00 00       	call   117fc <kernel_memset>
   1040e:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10411:	8b 45 08             	mov    0x8(%ebp),%eax
   10414:	8b 55 0c             	mov    0xc(%ebp),%edx
   10417:	89 50 5c             	mov    %edx,0x5c(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   1041a:	8b 45 08             	mov    0x8(%ebp),%eax
   1041d:	8b 55 10             	mov    0x10(%ebp),%edx
   10420:	89 50 40             	mov    %edx,0x40(%eax)
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	8b 50 40             	mov    0x40(%eax),%edx
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	89 50 74             	mov    %edx,0x74(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	c7 40 44 10 00 00 00 	movl   $0x10,0x44(%eax)
   10439:	8b 45 08             	mov    0x8(%ebp),%eax
   1043c:	8b 50 44             	mov    0x44(%eax),%edx
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10448:	8b 45 08             	mov    0x8(%ebp),%eax
   1044b:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   10452:	00 00 00 
   10455:	8b 45 08             	mov    0x8(%ebp),%eax
   10458:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   1045e:	8b 45 08             	mov    0x8(%ebp),%eax
   10461:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   10470:	8b 45 08             	mov    0x8(%ebp),%eax
   10473:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   10482:	8b 45 08             	mov    0x8(%ebp),%eax
   10485:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	c7 80 88 00 00 00 08 	movl   $0x8,0x88(%eax)
   10495:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10498:	8b 45 08             	mov    0x8(%ebp),%eax
   1049b:	c7 40 60 02 02 00 00 	movl   $0x202,0x60(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   104a2:	e8 1b 04 00 00       	call   108c2 <gdt_alloc_desc>
   104a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   104aa:	8b 45 08             	mov    0x8(%ebp),%eax
   104ad:	83 c0 3c             	add    $0x3c,%eax
   104b0:	89 c2                	mov    %eax,%edx
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104b5:	0f b7 c0             	movzwl %ax,%eax
   104b8:	68 89 00 00 00       	push   $0x89
   104bd:	6a 68                	push   $0x68
   104bf:	52                   	push   %edx
   104c0:	50                   	push   %eax
   104c1:	e8 cd 02 00 00       	call   10793 <segment_desc_set>
   104c6:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   104c9:	8b 45 08             	mov    0x8(%ebp),%eax
   104cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104cf:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
}
   104d5:	c9                   	leave  
   104d6:	c3                   	ret    

000104d7 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   104d7:	55                   	push   %ebp
   104d8:	89 e5                	mov    %esp,%ebp
   104da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   104dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   104e1:	75 19                	jne    104fc <task_init+0x25>
   104e3:	68 f9 20 01 00       	push   $0x120f9
   104e8:	68 4c 21 01 00       	push   $0x1214c
   104ed:	6a 5e                	push   $0x5e
   104ef:	68 0c 21 01 00       	push   $0x1210c
   104f4:	e8 47 11 00 00       	call   11640 <pannic>
   104f9:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   104fc:	83 ec 04             	sub    $0x4,%esp
   104ff:	ff 75 14             	push   0x14(%ebp)
   10502:	ff 75 10             	push   0x10(%ebp)
   10505:	ff 75 08             	push   0x8(%ebp)
   10508:	e8 e8 fe ff ff       	call   103f5 <tss_init>
   1050d:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10510:	8b 45 08             	mov    0x8(%ebp),%eax
   10513:	83 c0 0c             	add    $0xc,%eax
   10516:	83 ec 04             	sub    $0x4,%esp
   10519:	6a 20                	push   $0x20
   1051b:	ff 75 0c             	push   0xc(%ebp)
   1051e:	50                   	push   %eax
   1051f:	e8 99 11 00 00       	call   116bd <kernel_strncpy>
   10524:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10527:	8b 45 08             	mov    0x8(%ebp),%eax
   1052a:	83 c0 2c             	add    $0x2c,%eax
   1052d:	83 ec 0c             	sub    $0xc,%esp
   10530:	50                   	push   %eax
   10531:	e8 77 fd ff ff       	call   102ad <list_node_init>
   10536:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10539:	8b 45 08             	mov    0x8(%ebp),%eax
   1053c:	83 c0 34             	add    $0x34,%eax
   1053f:	83 ec 0c             	sub    $0xc,%esp
   10542:	50                   	push   %eax
   10543:	e8 65 fd ff ff       	call   102ad <list_node_init>
   10548:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10555:	8b 45 08             	mov    0x8(%ebp),%eax
   10558:	8b 50 08             	mov    0x8(%eax),%edx
   1055b:	8b 45 08             	mov    0x8(%ebp),%eax
   1055e:	89 50 04             	mov    %edx,0x4(%eax)

    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	83 c0 34             	add    $0x34,%eax
   10567:	83 ec 08             	sub    $0x8,%esp
   1056a:	50                   	push   %eax
   1056b:	68 70 28 01 00       	push   $0x12870
   10570:	e8 d0 16 00 00       	call   11c45 <list_insert_last>
   10575:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10578:	83 ec 0c             	sub    $0xc,%esp
   1057b:	ff 75 08             	push   0x8(%ebp)
   1057e:	e8 80 00 00 00       	call   10603 <task_set_ready>
   10583:	83 c4 10             	add    $0x10,%esp
}
   10586:	90                   	nop
   10587:	c9                   	leave  
   10588:	c3                   	ret    

00010589 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1058f:	83 ec 0c             	sub    $0xc,%esp
   10592:	68 64 28 01 00       	push   $0x12864
   10597:	e8 4e fd ff ff       	call   102ea <list_init>
   1059c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1059f:	83 ec 0c             	sub    $0xc,%esp
   105a2:	68 70 28 01 00       	push   $0x12870
   105a7:	e8 3e fd ff ff       	call   102ea <list_init>
   105ac:	83 c4 10             	add    $0x10,%esp

    task_manager.curr_task = (task_t*)0;
   105af:	c7 05 60 28 01 00 00 	movl   $0x0,0x12860
   105b6:	00 00 00 
}
   105b9:	90                   	nop
   105ba:	c9                   	leave  
   105bb:	c3                   	ret    

000105bc <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   105bc:	55                   	push   %ebp
   105bd:	89 e5                	mov    %esp,%ebp
   105bf:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   105c2:	6a 00                	push   $0x0
   105c4:	6a 00                	push   $0x0
   105c6:	68 41 21 01 00       	push   $0x12141
   105cb:	68 7c 28 01 00       	push   $0x1287c
   105d0:	e8 02 ff ff ff       	call   104d7 <task_init>
   105d5:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   105d8:	a1 20 29 01 00       	mov    0x12920,%eax
   105dd:	0f b7 c0             	movzwl %ax,%eax
   105e0:	83 ec 0c             	sub    $0xc,%esp
   105e3:	50                   	push   %eax
   105e4:	e8 bb fd ff ff       	call   103a4 <write_tr>
   105e9:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   105ec:	c7 05 60 28 01 00 7c 	movl   $0x1287c,0x12860
   105f3:	28 01 00 
}
   105f6:	90                   	nop
   105f7:	c9                   	leave  
   105f8:	c3                   	ret    

000105f9 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   105f9:	55                   	push   %ebp
   105fa:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   105fc:	b8 7c 28 01 00       	mov    $0x1287c,%eax
}
   10601:	5d                   	pop    %ebp
   10602:	c3                   	ret    

00010603 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10603:	55                   	push   %ebp
   10604:	89 e5                	mov    %esp,%ebp
   10606:	83 ec 08             	sub    $0x8,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10609:	8b 45 08             	mov    0x8(%ebp),%eax
   1060c:	83 c0 2c             	add    $0x2c,%eax
   1060f:	83 ec 08             	sub    $0x8,%esp
   10612:	50                   	push   %eax
   10613:	68 64 28 01 00       	push   $0x12864
   10618:	e8 28 16 00 00       	call   11c45 <list_insert_last>
   1061d:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10620:	8b 45 08             	mov    0x8(%ebp),%eax
   10623:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10629:	90                   	nop
   1062a:	c9                   	leave  
   1062b:	c3                   	ret    

0001062c <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   1062c:	55                   	push   %ebp
   1062d:	89 e5                	mov    %esp,%ebp
   1062f:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10632:	8b 45 08             	mov    0x8(%ebp),%eax
   10635:	83 c0 2c             	add    $0x2c,%eax
   10638:	83 ec 08             	sub    $0x8,%esp
   1063b:	50                   	push   %eax
   1063c:	68 64 28 01 00       	push   $0x12864
   10641:	e8 f4 17 00 00       	call   11e3a <list_remove>
   10646:	83 c4 10             	add    $0x10,%esp
}
   10649:	90                   	nop
   1064a:	c9                   	leave  
   1064b:	c3                   	ret    

0001064c <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   1064c:	55                   	push   %ebp
   1064d:	89 e5                	mov    %esp,%ebp
   1064f:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10652:	83 ec 0c             	sub    $0xc,%esp
   10655:	68 64 28 01 00       	push   $0x12864
   1065a:	e8 ff fc ff ff       	call   1035e <list_get_first>
   1065f:	83 c4 10             	add    $0x10,%esp
   10662:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list_node_parent(ready_node, task_t, ready_node);
   10665:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10669:	74 08                	je     10673 <task_ready_first+0x27>
   1066b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1066e:	83 e8 2c             	sub    $0x2c,%eax
   10671:	eb 05                	jmp    10678 <task_ready_first+0x2c>
   10673:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10678:	c9                   	leave  
   10679:	c3                   	ret    

0001067a <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
static task_t *task_current(void) {
   1067a:	55                   	push   %ebp
   1067b:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1067d:	a1 60 28 01 00       	mov    0x12860,%eax
}
   10682:	5d                   	pop    %ebp
   10683:	c3                   	ret    

00010684 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10684:	55                   	push   %ebp
   10685:	89 e5                	mov    %esp,%ebp
   10687:	83 ec 18             	sub    $0x18,%esp
    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   1068a:	e8 bd ff ff ff       	call   1064c <task_ready_first>
   1068f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10692:	a1 60 28 01 00       	mov    0x12860,%eax
   10697:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1069a:	74 2a                	je     106c6 <task_switch+0x42>
        //3.获取当前任务
        task_t *from = task_current();
   1069c:	e8 d9 ff ff ff       	call   1067a <task_current>
   106a1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //4.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   106a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   106ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106b0:	a3 60 28 01 00       	mov    %eax,0x12860
        

        //4.进行任务切换
        task_switch_from_to(from, to);
   106b5:	83 ec 08             	sub    $0x8,%esp
   106b8:	ff 75 f4             	push   -0xc(%ebp)
   106bb:	ff 75 f0             	push   -0x10(%ebp)
   106be:	e8 17 fd ff ff       	call   103da <task_switch_from_to>
   106c3:	83 c4 10             	add    $0x10,%esp
    } 
}
   106c6:	90                   	nop
   106c7:	c9                   	leave  
   106c8:	c3                   	ret    

000106c9 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   106c9:	55                   	push   %ebp
   106ca:	89 e5                	mov    %esp,%ebp
   106cc:	83 ec 18             	sub    $0x18,%esp
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   106cf:	83 ec 0c             	sub    $0xc,%esp
   106d2:	68 64 28 01 00       	push   $0x12864
   106d7:	e8 55 fc ff ff       	call   10331 <list_get_size>
   106dc:	83 c4 10             	add    $0x10,%esp
   106df:	83 f8 01             	cmp    $0x1,%eax
   106e2:	7e 29                	jle    1070d <sys_yield+0x44>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   106e4:	e8 91 ff ff ff       	call   1067a <task_current>
   106e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   106ec:	83 ec 0c             	sub    $0xc,%esp
   106ef:	ff 75 f4             	push   -0xc(%ebp)
   106f2:	e8 35 ff ff ff       	call   1062c <task_set_unready>
   106f7:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   106fa:	83 ec 0c             	sub    $0xc,%esp
   106fd:	ff 75 f4             	push   -0xc(%ebp)
   10700:	e8 fe fe ff ff       	call   10603 <task_set_ready>
   10705:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10708:	e8 77 ff ff ff       	call   10684 <task_switch>
    }

    return 0;
   1070d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10712:	c9                   	leave  
   10713:	c3                   	ret    

00010714 <task_time_tick>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_time_tick(void) {
   10714:	55                   	push   %ebp
   10715:	89 e5                	mov    %esp,%ebp
   10717:	83 ec 18             	sub    $0x18,%esp
    //1.获取当前任务
    task_t *curr_task = task_current();
   1071a:	e8 5b ff ff ff       	call   1067a <task_current>
   1071f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.减小当前时间片数
    if (--curr_task->slice_curr == 0) {
   10722:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10725:	8b 40 08             	mov    0x8(%eax),%eax
   10728:	8d 50 ff             	lea    -0x1(%eax),%edx
   1072b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1072e:	89 50 08             	mov    %edx,0x8(%eax)
   10731:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10734:	8b 40 08             	mov    0x8(%eax),%eax
   10737:	85 c0                	test   %eax,%eax
   10739:	75 2d                	jne    10768 <task_time_tick+0x54>
        //3.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1073b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1073e:	8b 50 04             	mov    0x4(%eax),%edx
   10741:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10744:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10747:	83 ec 0c             	sub    $0xc,%esp
   1074a:	ff 75 f4             	push   -0xc(%ebp)
   1074d:	e8 da fe ff ff       	call   1062c <task_set_unready>
   10752:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10755:	83 ec 0c             	sub    $0xc,%esp
   10758:	ff 75 f4             	push   -0xc(%ebp)
   1075b:	e8 a3 fe ff ff       	call   10603 <task_set_ready>
   10760:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10763:	e8 1c ff ff ff       	call   10684 <task_switch>
    }
   10768:	90                   	nop
   10769:	c9                   	leave  
   1076a:	c3                   	ret    

0001076b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1076b:	55                   	push   %ebp
   1076c:	89 e5                	mov    %esp,%ebp
   1076e:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10771:	8b 45 08             	mov    0x8(%ebp),%eax
   10774:	c1 e8 10             	shr    $0x10,%eax
   10777:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10782:	8b 45 0c             	mov    0xc(%ebp),%eax
   10785:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10788:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1078c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10790:	90                   	nop
   10791:	c9                   	leave  
   10792:	c3                   	ret    

00010793 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10793:	55                   	push   %ebp
   10794:	89 e5                	mov    %esp,%ebp
   10796:	83 ec 18             	sub    $0x18,%esp
   10799:	8b 55 08             	mov    0x8(%ebp),%edx
   1079c:	8b 45 14             	mov    0x14(%ebp),%eax
   1079f:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   107a3:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   107a7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   107ab:	66 c1 e8 03          	shr    $0x3,%ax
   107af:	0f b7 c0             	movzwl %ax,%eax
   107b2:	c1 e0 03             	shl    $0x3,%eax
   107b5:	05 40 29 01 00       	add    $0x12940,%eax
   107ba:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   107bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   107c0:	89 c2                	mov    %eax,%edx
   107c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107c5:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   107c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   107cc:	c1 e8 10             	shr    $0x10,%eax
   107cf:	89 c2                	mov    %eax,%edx
   107d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107d4:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   107d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   107da:	c1 e8 18             	shr    $0x18,%eax
   107dd:	89 c2                	mov    %eax,%edx
   107df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107e2:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   107e5:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   107ec:	76 1d                	jbe    1080b <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   107ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107f1:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   107f5:	66 0d 00 80          	or     $0x8000,%ax
   107f9:	89 c2                	mov    %eax,%edx
   107fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107fe:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10802:	8b 45 10             	mov    0x10(%ebp),%eax
   10805:	c1 e8 0c             	shr    $0xc,%eax
   10808:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   1080b:	8b 45 10             	mov    0x10(%ebp),%eax
   1080e:	89 c2                	mov    %eax,%edx
   10810:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10813:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10816:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10819:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1081d:	89 c2                	mov    %eax,%edx
   1081f:	8b 45 10             	mov    0x10(%ebp),%eax
   10822:	c1 e8 08             	shr    $0x8,%eax
   10825:	66 25 00 0f          	and    $0xf00,%ax
   10829:	09 d0                	or     %edx,%eax
   1082b:	89 c2                	mov    %eax,%edx
   1082d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10830:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10834:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10837:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1083b:	89 c2                	mov    %eax,%edx
   1083d:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10841:	80 e4 f0             	and    $0xf0,%ah
   10844:	09 d0                	or     %edx,%eax
   10846:	89 c2                	mov    %eax,%edx
   10848:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1084b:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1084f:	90                   	nop
   10850:	c9                   	leave  
   10851:	c3                   	ret    

00010852 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10852:	55                   	push   %ebp
   10853:	89 e5                	mov    %esp,%ebp
   10855:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10858:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1085f:	eb 1c                	jmp    1087d <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10861:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10864:	c1 e0 03             	shl    $0x3,%eax
   10867:	0f b7 c0             	movzwl %ax,%eax
   1086a:	6a 00                	push   $0x0
   1086c:	6a 00                	push   $0x0
   1086e:	6a 00                	push   $0x0
   10870:	50                   	push   %eax
   10871:	e8 1d ff ff ff       	call   10793 <segment_desc_set>
   10876:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10879:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1087d:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10884:	7e db                	jle    10861 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10886:	68 92 40 00 00       	push   $0x4092
   1088b:	6a ff                	push   $0xffffffff
   1088d:	6a 00                	push   $0x0
   1088f:	6a 10                	push   $0x10
   10891:	e8 fd fe ff ff       	call   10793 <segment_desc_set>
   10896:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10899:	68 9a 40 00 00       	push   $0x409a
   1089e:	6a ff                	push   $0xffffffff
   108a0:	6a 00                	push   $0x0
   108a2:	6a 08                	push   $0x8
   108a4:	e8 ea fe ff ff       	call   10793 <segment_desc_set>
   108a9:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   108ac:	b8 40 29 01 00       	mov    $0x12940,%eax
   108b1:	68 00 00 01 00       	push   $0x10000
   108b6:	50                   	push   %eax
   108b7:	e8 af fe ff ff       	call   1076b <lgdt>
   108bc:	83 c4 08             	add    $0x8,%esp
}
   108bf:	90                   	nop
   108c0:	c9                   	leave  
   108c1:	c3                   	ret    

000108c2 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   108c2:	55                   	push   %ebp
   108c3:	89 e5                	mov    %esp,%ebp
   108c5:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   108c8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   108cf:	eb 25                	jmp    108f6 <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   108d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108d4:	c1 e0 03             	shl    $0x3,%eax
   108d7:	05 40 29 01 00       	add    $0x12940,%eax
   108dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   108df:	8b 45 f8             	mov    -0x8(%ebp),%eax
   108e2:	0f b7 00             	movzwl (%eax),%eax
   108e5:	66 85 c0             	test   %ax,%ax
   108e8:	75 08                	jne    108f2 <gdt_alloc_desc+0x30>
            return i << 3;
   108ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108ed:	c1 e0 03             	shl    $0x3,%eax
   108f0:	eb 12                	jmp    10904 <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   108f2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   108f6:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   108fd:	7e d2                	jle    108d1 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   108ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10904:	c9                   	leave  
   10905:	c3                   	ret    

00010906 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10906:	55                   	push   %ebp
   10907:	89 e5                	mov    %esp,%ebp
   10909:	fa                   	cli    
   1090a:	90                   	nop
   1090b:	5d                   	pop    %ebp
   1090c:	c3                   	ret    

0001090d <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1090d:	55                   	push   %ebp
   1090e:	89 e5                	mov    %esp,%ebp
   10910:	fb                   	sti    
   10911:	90                   	nop
   10912:	5d                   	pop    %ebp
   10913:	c3                   	ret    

00010914 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10914:	55                   	push   %ebp
   10915:	89 e5                	mov    %esp,%ebp
   10917:	f4                   	hlt    
   10918:	90                   	nop
   10919:	5d                   	pop    %ebp
   1091a:	c3                   	ret    

0001091b <inb>:
static inline uint8_t inb(uint16_t port) {
   1091b:	55                   	push   %ebp
   1091c:	89 e5                	mov    %esp,%ebp
   1091e:	83 ec 14             	sub    $0x14,%esp
   10921:	8b 45 08             	mov    0x8(%ebp),%eax
   10924:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10928:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1092c:	89 c2                	mov    %eax,%edx
   1092e:	ec                   	in     (%dx),%al
   1092f:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10932:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10936:	c9                   	leave  
   10937:	c3                   	ret    

00010938 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10938:	55                   	push   %ebp
   10939:	89 e5                	mov    %esp,%ebp
   1093b:	83 ec 08             	sub    $0x8,%esp
   1093e:	8b 45 08             	mov    0x8(%ebp),%eax
   10941:	8b 55 0c             	mov    0xc(%ebp),%edx
   10944:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10948:	89 d0                	mov    %edx,%eax
   1094a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1094d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10951:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10955:	ee                   	out    %al,(%dx)
}
   10956:	90                   	nop
   10957:	c9                   	leave  
   10958:	c3                   	ret    

00010959 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10959:	55                   	push   %ebp
   1095a:	89 e5                	mov    %esp,%ebp
   1095c:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   1095f:	8b 45 08             	mov    0x8(%ebp),%eax
   10962:	c1 e8 10             	shr    $0x10,%eax
   10965:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10970:	8b 45 0c             	mov    0xc(%ebp),%eax
   10973:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10976:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1097a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1097e:	90                   	nop
   1097f:	c9                   	leave  
   10980:	c3                   	ret    

00010981 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10981:	55                   	push   %ebp
   10982:	89 e5                	mov    %esp,%ebp
   10984:	57                   	push   %edi
   10985:	56                   	push   %esi
   10986:	53                   	push   %ebx
   10987:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   1098a:	83 ec 0c             	sub    $0xc,%esp
   1098d:	68 94 21 01 00       	push   $0x12194
   10992:	e8 1f 16 00 00       	call   11fb6 <log_printf>
   10997:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   1099a:	8b 45 08             	mov    0x8(%ebp),%eax
   1099d:	8b 50 34             	mov    0x34(%eax),%edx
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	8b 40 30             	mov    0x30(%eax),%eax
   109a6:	83 ec 04             	sub    $0x4,%esp
   109a9:	52                   	push   %edx
   109aa:	50                   	push   %eax
   109ab:	68 d2 21 01 00       	push   $0x121d2
   109b0:	e8 01 16 00 00       	call   11fb6 <log_printf>
   109b5:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   109b8:	8b 45 08             	mov    0x8(%ebp),%eax
   109bb:	8b 38                	mov    (%eax),%edi
   109bd:	8b 45 08             	mov    0x8(%ebp),%eax
   109c0:	8b 70 04             	mov    0x4(%eax),%esi
   109c3:	8b 45 08             	mov    0x8(%ebp),%eax
   109c6:	8b 58 08             	mov    0x8(%eax),%ebx
   109c9:	8b 45 08             	mov    0x8(%ebp),%eax
   109cc:	8b 48 0c             	mov    0xc(%eax),%ecx
   109cf:	8b 45 08             	mov    0x8(%ebp),%eax
   109d2:	8b 50 0c             	mov    0xc(%eax),%edx
   109d5:	8b 45 08             	mov    0x8(%ebp),%eax
   109d8:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   109db:	83 ec 04             	sub    $0x4,%esp
   109de:	57                   	push   %edi
   109df:	56                   	push   %esi
   109e0:	53                   	push   %ebx
   109e1:	51                   	push   %ecx
   109e2:	52                   	push   %edx
   109e3:	50                   	push   %eax
   109e4:	68 ec 21 01 00       	push   $0x121ec
   109e9:	e8 c8 15 00 00       	call   11fb6 <log_printf>
   109ee:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   109f1:	8b 45 08             	mov    0x8(%ebp),%eax
   109f4:	8b 48 1c             	mov    0x1c(%eax),%ecx
   109f7:	8b 45 08             	mov    0x8(%ebp),%eax
   109fa:	8b 40 18             	mov    0x18(%eax),%eax
   109fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10a00:	8b 45 08             	mov    0x8(%ebp),%eax
   10a03:	8b 58 10             	mov    0x10(%eax),%ebx
   10a06:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10a09:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0c:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a12:	8b 70 24             	mov    0x24(%eax),%esi
   10a15:	8b 45 08             	mov    0x8(%ebp),%eax
   10a18:	8b 58 28             	mov    0x28(%eax),%ebx
   10a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1e:	8b 50 20             	mov    0x20(%eax),%edx
   10a21:	8b 45 08             	mov    0x8(%ebp),%eax
   10a24:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10a27:	83 ec 0c             	sub    $0xc,%esp
   10a2a:	51                   	push   %ecx
   10a2b:	ff 75 e4             	push   -0x1c(%ebp)
   10a2e:	ff 75 e0             	push   -0x20(%ebp)
   10a31:	57                   	push   %edi
   10a32:	56                   	push   %esi
   10a33:	53                   	push   %ebx
   10a34:	52                   	push   %edx
   10a35:	50                   	push   %eax
   10a36:	68 1c 22 01 00       	push   $0x1221c
   10a3b:	e8 76 15 00 00       	call   11fb6 <log_printf>
   10a40:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10a43:	8b 45 08             	mov    0x8(%ebp),%eax
   10a46:	8b 50 40             	mov    0x40(%eax),%edx
   10a49:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4c:	8b 40 38             	mov    0x38(%eax),%eax
   10a4f:	83 ec 04             	sub    $0x4,%esp
   10a52:	52                   	push   %edx
   10a53:	50                   	push   %eax
   10a54:	68 74 22 01 00       	push   $0x12274
   10a59:	e8 58 15 00 00       	call   11fb6 <log_printf>
   10a5e:	83 c4 10             	add    $0x10,%esp
}
   10a61:	90                   	nop
   10a62:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10a65:	5b                   	pop    %ebx
   10a66:	5e                   	pop    %esi
   10a67:	5f                   	pop    %edi
   10a68:	5d                   	pop    %ebp
   10a69:	c3                   	ret    

00010a6a <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10a6a:	55                   	push   %ebp
   10a6b:	89 e5                	mov    %esp,%ebp
   10a6d:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   10a70:	83 ec 0c             	sub    $0xc,%esp
   10a73:	68 90 22 01 00       	push   $0x12290
   10a78:	e8 39 15 00 00       	call   11fb6 <log_printf>
   10a7d:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10a80:	83 ec 08             	sub    $0x8,%esp
   10a83:	ff 75 0c             	push   0xc(%ebp)
   10a86:	68 c4 22 01 00       	push   $0x122c4
   10a8b:	e8 26 15 00 00       	call   11fb6 <log_printf>
   10a90:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10a93:	83 ec 0c             	sub    $0xc,%esp
   10a96:	ff 75 08             	push   0x8(%ebp)
   10a99:	e8 e3 fe ff ff       	call   10981 <print_exception_fram>
   10a9e:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10aa1:	e8 6e fe ff ff       	call   10914 <hlt>
   10aa6:	eb f9                	jmp    10aa1 <do_default_handler+0x37>

00010aa8 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10aa8:	55                   	push   %ebp
   10aa9:	89 e5                	mov    %esp,%ebp
   10aab:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10aae:	83 ec 08             	sub    $0x8,%esp
   10ab1:	68 de 22 01 00       	push   $0x122de
   10ab6:	ff 75 08             	push   0x8(%ebp)
   10ab9:	e8 ac ff ff ff       	call   10a6a <do_default_handler>
   10abe:	83 c4 10             	add    $0x10,%esp
}
   10ac1:	90                   	nop
   10ac2:	c9                   	leave  
   10ac3:	c3                   	ret    

00010ac4 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10ac4:	55                   	push   %ebp
   10ac5:	89 e5                	mov    %esp,%ebp
   10ac7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10aca:	83 ec 08             	sub    $0x8,%esp
   10acd:	68 f0 22 01 00       	push   $0x122f0
   10ad2:	ff 75 08             	push   0x8(%ebp)
   10ad5:	e8 90 ff ff ff       	call   10a6a <do_default_handler>
   10ada:	83 c4 10             	add    $0x10,%esp
}
   10add:	90                   	nop
   10ade:	c9                   	leave  
   10adf:	c3                   	ret    

00010ae0 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10ae0:	55                   	push   %ebp
   10ae1:	89 e5                	mov    %esp,%ebp
   10ae3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10ae6:	83 ec 08             	sub    $0x8,%esp
   10ae9:	68 02 23 01 00       	push   $0x12302
   10aee:	ff 75 08             	push   0x8(%ebp)
   10af1:	e8 74 ff ff ff       	call   10a6a <do_default_handler>
   10af6:	83 c4 10             	add    $0x10,%esp
}
   10af9:	90                   	nop
   10afa:	c9                   	leave  
   10afb:	c3                   	ret    

00010afc <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10afc:	55                   	push   %ebp
   10afd:	89 e5                	mov    %esp,%ebp
   10aff:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10b02:	83 ec 08             	sub    $0x8,%esp
   10b05:	68 12 23 01 00       	push   $0x12312
   10b0a:	ff 75 08             	push   0x8(%ebp)
   10b0d:	e8 58 ff ff ff       	call   10a6a <do_default_handler>
   10b12:	83 c4 10             	add    $0x10,%esp
}
   10b15:	90                   	nop
   10b16:	c9                   	leave  
   10b17:	c3                   	ret    

00010b18 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10b18:	55                   	push   %ebp
   10b19:	89 e5                	mov    %esp,%ebp
   10b1b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10b1e:	83 ec 08             	sub    $0x8,%esp
   10b21:	68 20 23 01 00       	push   $0x12320
   10b26:	ff 75 08             	push   0x8(%ebp)
   10b29:	e8 3c ff ff ff       	call   10a6a <do_default_handler>
   10b2e:	83 c4 10             	add    $0x10,%esp
}
   10b31:	90                   	nop
   10b32:	c9                   	leave  
   10b33:	c3                   	ret    

00010b34 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10b34:	55                   	push   %ebp
   10b35:	89 e5                	mov    %esp,%ebp
   10b37:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10b3a:	83 ec 08             	sub    $0x8,%esp
   10b3d:	68 35 23 01 00       	push   $0x12335
   10b42:	ff 75 08             	push   0x8(%ebp)
   10b45:	e8 20 ff ff ff       	call   10a6a <do_default_handler>
   10b4a:	83 c4 10             	add    $0x10,%esp
}
   10b4d:	90                   	nop
   10b4e:	c9                   	leave  
   10b4f:	c3                   	ret    

00010b50 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10b50:	55                   	push   %ebp
   10b51:	89 e5                	mov    %esp,%ebp
   10b53:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10b56:	83 ec 08             	sub    $0x8,%esp
   10b59:	68 48 23 01 00       	push   $0x12348
   10b5e:	ff 75 08             	push   0x8(%ebp)
   10b61:	e8 04 ff ff ff       	call   10a6a <do_default_handler>
   10b66:	83 c4 10             	add    $0x10,%esp
}
   10b69:	90                   	nop
   10b6a:	c9                   	leave  
   10b6b:	c3                   	ret    

00010b6c <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10b6c:	55                   	push   %ebp
   10b6d:	89 e5                	mov    %esp,%ebp
   10b6f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10b72:	83 ec 08             	sub    $0x8,%esp
   10b75:	68 5e 23 01 00       	push   $0x1235e
   10b7a:	ff 75 08             	push   0x8(%ebp)
   10b7d:	e8 e8 fe ff ff       	call   10a6a <do_default_handler>
   10b82:	83 c4 10             	add    $0x10,%esp
}
   10b85:	90                   	nop
   10b86:	c9                   	leave  
   10b87:	c3                   	ret    

00010b88 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10b88:	55                   	push   %ebp
   10b89:	89 e5                	mov    %esp,%ebp
   10b8b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10b8e:	83 ec 08             	sub    $0x8,%esp
   10b91:	68 77 23 01 00       	push   $0x12377
   10b96:	ff 75 08             	push   0x8(%ebp)
   10b99:	e8 cc fe ff ff       	call   10a6a <do_default_handler>
   10b9e:	83 c4 10             	add    $0x10,%esp
}
   10ba1:	90                   	nop
   10ba2:	c9                   	leave  
   10ba3:	c3                   	ret    

00010ba4 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10ba4:	55                   	push   %ebp
   10ba5:	89 e5                	mov    %esp,%ebp
   10ba7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10baa:	83 ec 08             	sub    $0x8,%esp
   10bad:	68 94 23 01 00       	push   $0x12394
   10bb2:	ff 75 08             	push   0x8(%ebp)
   10bb5:	e8 b0 fe ff ff       	call   10a6a <do_default_handler>
   10bba:	83 c4 10             	add    $0x10,%esp
}
   10bbd:	90                   	nop
   10bbe:	c9                   	leave  
   10bbf:	c3                   	ret    

00010bc0 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10bc0:	55                   	push   %ebp
   10bc1:	89 e5                	mov    %esp,%ebp
   10bc3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10bc6:	83 ec 08             	sub    $0x8,%esp
   10bc9:	68 ab 23 01 00       	push   $0x123ab
   10bce:	ff 75 08             	push   0x8(%ebp)
   10bd1:	e8 94 fe ff ff       	call   10a6a <do_default_handler>
   10bd6:	83 c4 10             	add    $0x10,%esp
}
   10bd9:	90                   	nop
   10bda:	c9                   	leave  
   10bdb:	c3                   	ret    

00010bdc <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10bdc:	55                   	push   %ebp
   10bdd:	89 e5                	mov    %esp,%ebp
   10bdf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10be2:	83 ec 08             	sub    $0x8,%esp
   10be5:	68 c1 23 01 00       	push   $0x123c1
   10bea:	ff 75 08             	push   0x8(%ebp)
   10bed:	e8 78 fe ff ff       	call   10a6a <do_default_handler>
   10bf2:	83 c4 10             	add    $0x10,%esp
}
   10bf5:	90                   	nop
   10bf6:	c9                   	leave  
   10bf7:	c3                   	ret    

00010bf8 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10bf8:	55                   	push   %ebp
   10bf9:	89 e5                	mov    %esp,%ebp
   10bfb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   10bfe:	83 ec 08             	sub    $0x8,%esp
   10c01:	68 df 23 01 00       	push   $0x123df
   10c06:	ff 75 08             	push   0x8(%ebp)
   10c09:	e8 5c fe ff ff       	call   10a6a <do_default_handler>
   10c0e:	83 c4 10             	add    $0x10,%esp
}
   10c11:	90                   	nop
   10c12:	c9                   	leave  
   10c13:	c3                   	ret    

00010c14 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10c14:	55                   	push   %ebp
   10c15:	89 e5                	mov    %esp,%ebp
   10c17:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10c1a:	83 ec 08             	sub    $0x8,%esp
   10c1d:	68 fd 23 01 00       	push   $0x123fd
   10c22:	ff 75 08             	push   0x8(%ebp)
   10c25:	e8 40 fe ff ff       	call   10a6a <do_default_handler>
   10c2a:	83 c4 10             	add    $0x10,%esp
}
   10c2d:	90                   	nop
   10c2e:	c9                   	leave  
   10c2f:	c3                   	ret    

00010c30 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10c30:	55                   	push   %ebp
   10c31:	89 e5                	mov    %esp,%ebp
   10c33:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10c36:	83 ec 08             	sub    $0x8,%esp
   10c39:	68 1a 24 01 00       	push   $0x1241a
   10c3e:	ff 75 08             	push   0x8(%ebp)
   10c41:	e8 24 fe ff ff       	call   10a6a <do_default_handler>
   10c46:	83 c4 10             	add    $0x10,%esp
}
   10c49:	90                   	nop
   10c4a:	c9                   	leave  
   10c4b:	c3                   	ret    

00010c4c <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10c4c:	55                   	push   %ebp
   10c4d:	89 e5                	mov    %esp,%ebp
   10c4f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   10c52:	83 ec 08             	sub    $0x8,%esp
   10c55:	68 2f 24 01 00       	push   $0x1242f
   10c5a:	ff 75 08             	push   0x8(%ebp)
   10c5d:	e8 08 fe ff ff       	call   10a6a <do_default_handler>
   10c62:	83 c4 10             	add    $0x10,%esp
}
   10c65:	90                   	nop
   10c66:	c9                   	leave  
   10c67:	c3                   	ret    

00010c68 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10c68:	55                   	push   %ebp
   10c69:	89 e5                	mov    %esp,%ebp
   10c6b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   10c6e:	83 ec 08             	sub    $0x8,%esp
   10c71:	68 43 24 01 00       	push   $0x12443
   10c76:	ff 75 08             	push   0x8(%ebp)
   10c79:	e8 ec fd ff ff       	call   10a6a <do_default_handler>
   10c7e:	83 c4 10             	add    $0x10,%esp
}
   10c81:	90                   	nop
   10c82:	c9                   	leave  
   10c83:	c3                   	ret    

00010c84 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10c84:	55                   	push   %ebp
   10c85:	89 e5                	mov    %esp,%ebp
   10c87:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10c8a:	83 ec 08             	sub    $0x8,%esp
   10c8d:	68 5d 24 01 00       	push   $0x1245d
   10c92:	ff 75 08             	push   0x8(%ebp)
   10c95:	e8 d0 fd ff ff       	call   10a6a <do_default_handler>
   10c9a:	83 c4 10             	add    $0x10,%esp
}
   10c9d:	90                   	nop
   10c9e:	c9                   	leave  
   10c9f:	c3                   	ret    

00010ca0 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10ca0:	55                   	push   %ebp
   10ca1:	89 e5                	mov    %esp,%ebp
   10ca3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10ca6:	83 ec 08             	sub    $0x8,%esp
   10ca9:	68 75 24 01 00       	push   $0x12475
   10cae:	ff 75 08             	push   0x8(%ebp)
   10cb1:	e8 b4 fd ff ff       	call   10a6a <do_default_handler>
   10cb6:	83 c4 10             	add    $0x10,%esp
}
   10cb9:	90                   	nop
   10cba:	c9                   	leave  
   10cbb:	c3                   	ret    

00010cbc <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   10cbc:	55                   	push   %ebp
   10cbd:	89 e5                	mov    %esp,%ebp
   10cbf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   10cc2:	83 ec 08             	sub    $0x8,%esp
   10cc5:	68 8d 24 01 00       	push   $0x1248d
   10cca:	ff 75 08             	push   0x8(%ebp)
   10ccd:	e8 98 fd ff ff       	call   10a6a <do_default_handler>
   10cd2:	83 c4 10             	add    $0x10,%esp
}
   10cd5:	90                   	nop
   10cd6:	c9                   	leave  
   10cd7:	c3                   	ret    

00010cd8 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   10cd8:	55                   	push   %ebp
   10cd9:	89 e5                	mov    %esp,%ebp
   10cdb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   10cde:	83 ec 08             	sub    $0x8,%esp
   10ce1:	68 a9 24 01 00       	push   $0x124a9
   10ce6:	ff 75 08             	push   0x8(%ebp)
   10ce9:	e8 7c fd ff ff       	call   10a6a <do_default_handler>
   10cee:	83 c4 10             	add    $0x10,%esp
}
   10cf1:	90                   	nop
   10cf2:	c9                   	leave  
   10cf3:	c3                   	ret    

00010cf4 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10cf4:	55                   	push   %ebp
   10cf5:	89 e5                	mov    %esp,%ebp
   10cf7:	83 ec 08             	sub    $0x8,%esp
   10cfa:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cfd:	8b 45 14             	mov    0x14(%ebp),%eax
   10d00:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d04:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10d08:	8b 45 10             	mov    0x10(%ebp),%eax
   10d0b:	89 c2                	mov    %eax,%edx
   10d0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d10:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   10d13:	8b 45 10             	mov    0x10(%ebp),%eax
   10d16:	c1 e8 10             	shr    $0x10,%eax
   10d19:	89 c2                	mov    %eax,%edx
   10d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1e:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10d22:	8b 45 08             	mov    0x8(%ebp),%eax
   10d25:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d29:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   10d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d30:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10d34:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10d38:	90                   	nop
   10d39:	c9                   	leave  
   10d3a:	c3                   	ret    

00010d3b <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   10d3b:	55                   	push   %ebp
   10d3c:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   10d3e:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   10d45:	7f 06                	jg     10d4d <idt_install+0x12>
   10d47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d4b:	79 07                	jns    10d54 <idt_install+0x19>
   10d4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d52:	eb 25                	jmp    10d79 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   10d54:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d57:	8b 55 08             	mov    0x8(%ebp),%edx
   10d5a:	c1 e2 03             	shl    $0x3,%edx
   10d5d:	81 c2 40 29 02 00    	add    $0x22940,%edx
   10d63:	68 00 8e 00 00       	push   $0x8e00
   10d68:	50                   	push   %eax
   10d69:	6a 08                	push   $0x8
   10d6b:	52                   	push   %edx
   10d6c:	e8 83 ff ff ff       	call   10cf4 <gate_desc_set>
   10d71:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   10d74:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d79:	c9                   	leave  
   10d7a:	c3                   	ret    

00010d7b <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   10d7b:	55                   	push   %ebp
   10d7c:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   10d7e:	6a 11                	push   $0x11
   10d80:	6a 20                	push   $0x20
   10d82:	e8 b1 fb ff ff       	call   10938 <outb>
   10d87:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   10d8a:	6a 20                	push   $0x20
   10d8c:	6a 21                	push   $0x21
   10d8e:	e8 a5 fb ff ff       	call   10938 <outb>
   10d93:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   10d96:	6a 04                	push   $0x4
   10d98:	6a 21                	push   $0x21
   10d9a:	e8 99 fb ff ff       	call   10938 <outb>
   10d9f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   10da2:	6a 01                	push   $0x1
   10da4:	6a 21                	push   $0x21
   10da6:	e8 8d fb ff ff       	call   10938 <outb>
   10dab:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   10dae:	6a 11                	push   $0x11
   10db0:	68 a0 00 00 00       	push   $0xa0
   10db5:	e8 7e fb ff ff       	call   10938 <outb>
   10dba:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   10dbd:	6a 28                	push   $0x28
   10dbf:	68 a1 00 00 00       	push   $0xa1
   10dc4:	e8 6f fb ff ff       	call   10938 <outb>
   10dc9:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   10dcc:	6a 02                	push   $0x2
   10dce:	68 a1 00 00 00       	push   $0xa1
   10dd3:	e8 60 fb ff ff       	call   10938 <outb>
   10dd8:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   10ddb:	6a 01                	push   $0x1
   10ddd:	68 a1 00 00 00       	push   $0xa1
   10de2:	e8 51 fb ff ff       	call   10938 <outb>
   10de7:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   10dea:	68 fb 00 00 00       	push   $0xfb
   10def:	6a 21                	push   $0x21
   10df1:	e8 42 fb ff ff       	call   10938 <outb>
   10df6:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   10df9:	68 ff 00 00 00       	push   $0xff
   10dfe:	68 a1 00 00 00       	push   $0xa1
   10e03:	e8 30 fb ff ff       	call   10938 <outb>
   10e08:	83 c4 08             	add    $0x8,%esp


}
   10e0b:	90                   	nop
   10e0c:	c9                   	leave  
   10e0d:	c3                   	ret    

00010e0e <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   10e0e:	55                   	push   %ebp
   10e0f:	89 e5                	mov    %esp,%ebp
   10e11:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10e14:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10e1b:	eb 14                	jmp    10e31 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   10e1d:	68 2a 00 01 00       	push   $0x1002a
   10e22:	ff 75 fc             	push   -0x4(%ebp)
   10e25:	e8 11 ff ff ff       	call   10d3b <idt_install>
   10e2a:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10e2d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10e31:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10e38:	7e e3                	jle    10e1d <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10e3a:	68 47 00 01 00       	push   $0x10047
   10e3f:	6a 00                	push   $0x0
   10e41:	e8 f5 fe ff ff       	call   10d3b <idt_install>
   10e46:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10e49:	68 64 00 01 00       	push   $0x10064
   10e4e:	6a 01                	push   $0x1
   10e50:	e8 e6 fe ff ff       	call   10d3b <idt_install>
   10e55:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   10e58:	68 81 00 01 00       	push   $0x10081
   10e5d:	6a 02                	push   $0x2
   10e5f:	e8 d7 fe ff ff       	call   10d3b <idt_install>
   10e64:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   10e67:	68 9e 00 01 00       	push   $0x1009e
   10e6c:	6a 03                	push   $0x3
   10e6e:	e8 c8 fe ff ff       	call   10d3b <idt_install>
   10e73:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   10e76:	68 bb 00 01 00       	push   $0x100bb
   10e7b:	6a 04                	push   $0x4
   10e7d:	e8 b9 fe ff ff       	call   10d3b <idt_install>
   10e82:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   10e85:	68 d8 00 01 00       	push   $0x100d8
   10e8a:	6a 05                	push   $0x5
   10e8c:	e8 aa fe ff ff       	call   10d3b <idt_install>
   10e91:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   10e94:	68 f5 00 01 00       	push   $0x100f5
   10e99:	6a 06                	push   $0x6
   10e9b:	e8 9b fe ff ff       	call   10d3b <idt_install>
   10ea0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   10ea3:	68 12 01 01 00       	push   $0x10112
   10ea8:	6a 07                	push   $0x7
   10eaa:	e8 8c fe ff ff       	call   10d3b <idt_install>
   10eaf:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   10eb2:	68 2f 01 01 00       	push   $0x1012f
   10eb7:	6a 08                	push   $0x8
   10eb9:	e8 7d fe ff ff       	call   10d3b <idt_install>
   10ebe:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   10ec1:	68 4a 01 01 00       	push   $0x1014a
   10ec6:	6a 0a                	push   $0xa
   10ec8:	e8 6e fe ff ff       	call   10d3b <idt_install>
   10ecd:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   10ed0:	68 65 01 01 00       	push   $0x10165
   10ed5:	6a 0b                	push   $0xb
   10ed7:	e8 5f fe ff ff       	call   10d3b <idt_install>
   10edc:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   10edf:	68 80 01 01 00       	push   $0x10180
   10ee4:	6a 0c                	push   $0xc
   10ee6:	e8 50 fe ff ff       	call   10d3b <idt_install>
   10eeb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   10eee:	68 9b 01 01 00       	push   $0x1019b
   10ef3:	6a 0d                	push   $0xd
   10ef5:	e8 41 fe ff ff       	call   10d3b <idt_install>
   10efa:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   10efd:	68 b6 01 01 00       	push   $0x101b6
   10f02:	6a 0e                	push   $0xe
   10f04:	e8 32 fe ff ff       	call   10d3b <idt_install>
   10f09:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   10f0c:	68 d1 01 01 00       	push   $0x101d1
   10f11:	6a 10                	push   $0x10
   10f13:	e8 23 fe ff ff       	call   10d3b <idt_install>
   10f18:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10f1b:	68 ee 01 01 00       	push   $0x101ee
   10f20:	6a 11                	push   $0x11
   10f22:	e8 14 fe ff ff       	call   10d3b <idt_install>
   10f27:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10f2a:	68 09 02 01 00       	push   $0x10209
   10f2f:	6a 12                	push   $0x12
   10f31:	e8 05 fe ff ff       	call   10d3b <idt_install>
   10f36:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10f39:	68 26 02 01 00       	push   $0x10226
   10f3e:	6a 13                	push   $0x13
   10f40:	e8 f6 fd ff ff       	call   10d3b <idt_install>
   10f45:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10f48:	68 43 02 01 00       	push   $0x10243
   10f4d:	6a 14                	push   $0x14
   10f4f:	e8 e7 fd ff ff       	call   10d3b <idt_install>
   10f54:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   10f57:	68 60 02 01 00       	push   $0x10260
   10f5c:	6a 15                	push   $0x15
   10f5e:	e8 d8 fd ff ff       	call   10d3b <idt_install>
   10f63:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   10f66:	b8 40 29 02 00       	mov    $0x22940,%eax
   10f6b:	68 00 08 00 00       	push   $0x800
   10f70:	50                   	push   %eax
   10f71:	e8 e3 f9 ff ff       	call   10959 <lidt>
   10f76:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   10f79:	e8 fd fd ff ff       	call   10d7b <init_pic>
}
   10f7e:	90                   	nop
   10f7f:	c9                   	leave  
   10f80:	c3                   	ret    

00010f81 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   10f81:	55                   	push   %ebp
   10f82:	89 e5                	mov    %esp,%ebp
   10f84:	53                   	push   %ebx
   10f85:	83 ec 14             	sub    $0x14,%esp
   10f88:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10f8e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10f92:	76 7f                	jbe    11013 <idt_enable+0x92>
   10f94:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   10f98:	77 79                	ja     11013 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10f9a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10f9e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10fa2:	77 33                	ja     10fd7 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10fa4:	6a 21                	push   $0x21
   10fa6:	e8 70 f9 ff ff       	call   1091b <inb>
   10fab:	83 c4 04             	add    $0x4,%esp
   10fae:	89 c3                	mov    %eax,%ebx
   10fb0:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10fb4:	ba 01 00 00 00       	mov    $0x1,%edx
   10fb9:	89 c1                	mov    %eax,%ecx
   10fbb:	d3 e2                	shl    %cl,%edx
   10fbd:	89 d0                	mov    %edx,%eax
   10fbf:	f7 d0                	not    %eax
   10fc1:	21 d8                	and    %ebx,%eax
   10fc3:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10fc6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10fca:	50                   	push   %eax
   10fcb:	6a 21                	push   $0x21
   10fcd:	e8 66 f9 ff ff       	call   10938 <outb>
   10fd2:	83 c4 08             	add    $0x8,%esp
   10fd5:	eb 3d                	jmp    11014 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10fd7:	68 a1 00 00 00       	push   $0xa1
   10fdc:	e8 3a f9 ff ff       	call   1091b <inb>
   10fe1:	83 c4 04             	add    $0x4,%esp
   10fe4:	89 c3                	mov    %eax,%ebx
   10fe6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10fea:	83 e8 08             	sub    $0x8,%eax
   10fed:	ba 01 00 00 00       	mov    $0x1,%edx
   10ff2:	89 c1                	mov    %eax,%ecx
   10ff4:	d3 e2                	shl    %cl,%edx
   10ff6:	89 d0                	mov    %edx,%eax
   10ff8:	f7 d0                	not    %eax
   10ffa:	21 d8                	and    %ebx,%eax
   10ffc:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10fff:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11003:	50                   	push   %eax
   11004:	68 a1 00 00 00       	push   $0xa1
   11009:	e8 2a f9 ff ff       	call   10938 <outb>
   1100e:	83 c4 08             	add    $0x8,%esp
   11011:	eb 01                	jmp    11014 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11013:	90                   	nop
  }
  
}
   11014:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11017:	c9                   	leave  
   11018:	c3                   	ret    

00011019 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11019:	55                   	push   %ebp
   1101a:	89 e5                	mov    %esp,%ebp
   1101c:	53                   	push   %ebx
   1101d:	83 ec 14             	sub    $0x14,%esp
   11020:	8b 45 08             	mov    0x8(%ebp),%eax
   11023:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11026:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1102a:	76 7b                	jbe    110a7 <idt_disable+0x8e>
   1102c:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11030:	77 75                	ja     110a7 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11032:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11036:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1103a:	77 31                	ja     1106d <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1103c:	6a 21                	push   $0x21
   1103e:	e8 d8 f8 ff ff       	call   1091b <inb>
   11043:	83 c4 04             	add    $0x4,%esp
   11046:	89 c3                	mov    %eax,%ebx
   11048:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1104c:	ba 01 00 00 00       	mov    $0x1,%edx
   11051:	89 c1                	mov    %eax,%ecx
   11053:	d3 e2                	shl    %cl,%edx
   11055:	89 d0                	mov    %edx,%eax
   11057:	09 d8                	or     %ebx,%eax
   11059:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1105c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11060:	50                   	push   %eax
   11061:	6a 21                	push   $0x21
   11063:	e8 d0 f8 ff ff       	call   10938 <outb>
   11068:	83 c4 08             	add    $0x8,%esp
   1106b:	eb 3b                	jmp    110a8 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1106d:	68 a1 00 00 00       	push   $0xa1
   11072:	e8 a4 f8 ff ff       	call   1091b <inb>
   11077:	83 c4 04             	add    $0x4,%esp
   1107a:	89 c3                	mov    %eax,%ebx
   1107c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11080:	83 e8 08             	sub    $0x8,%eax
   11083:	ba 01 00 00 00       	mov    $0x1,%edx
   11088:	89 c1                	mov    %eax,%ecx
   1108a:	d3 e2                	shl    %cl,%edx
   1108c:	89 d0                	mov    %edx,%eax
   1108e:	09 d8                	or     %ebx,%eax
   11090:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11093:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11097:	50                   	push   %eax
   11098:	68 a1 00 00 00       	push   $0xa1
   1109d:	e8 96 f8 ff ff       	call   10938 <outb>
   110a2:	83 c4 08             	add    $0x8,%esp
   110a5:	eb 01                	jmp    110a8 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   110a7:	90                   	nop
  }
  
}
   110a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   110ab:	c9                   	leave  
   110ac:	c3                   	ret    

000110ad <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   110ad:	55                   	push   %ebp
   110ae:	89 e5                	mov    %esp,%ebp
  cli();
   110b0:	e8 51 f8 ff ff       	call   10906 <cli>
}
   110b5:	90                   	nop
   110b6:	5d                   	pop    %ebp
   110b7:	c3                   	ret    

000110b8 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   110b8:	55                   	push   %ebp
   110b9:	89 e5                	mov    %esp,%ebp
  sti();
   110bb:	e8 4d f8 ff ff       	call   1090d <sti>
}
   110c0:	90                   	nop
   110c1:	5d                   	pop    %ebp
   110c2:	c3                   	ret    

000110c3 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   110c3:	55                   	push   %ebp
   110c4:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   110c6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   110ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ce:	78 29                	js     110f9 <pic_send_eoi+0x36>
   110d0:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   110d4:	7f 23                	jg     110f9 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   110d6:	6a 20                	push   $0x20
   110d8:	6a 20                	push   $0x20
   110da:	e8 59 f8 ff ff       	call   10938 <outb>
   110df:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   110e2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   110e6:	7e 12                	jle    110fa <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   110e8:	6a 20                	push   $0x20
   110ea:	68 a0 00 00 00       	push   $0xa0
   110ef:	e8 44 f8 ff ff       	call   10938 <outb>
   110f4:	83 c4 08             	add    $0x8,%esp
   110f7:	eb 01                	jmp    110fa <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   110f9:	90                   	nop
  }

   110fa:	c9                   	leave  
   110fb:	c3                   	ret    

000110fc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   110fc:	55                   	push   %ebp
   110fd:	89 e5                	mov    %esp,%ebp
   110ff:	83 ec 08             	sub    $0x8,%esp
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	8b 55 0c             	mov    0xc(%ebp),%edx
   11108:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1110c:	89 d0                	mov    %edx,%eax
   1110e:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11111:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11115:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11119:	ee                   	out    %al,(%dx)
}
   1111a:	90                   	nop
   1111b:	c9                   	leave  
   1111c:	c3                   	ret    

0001111d <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1111d:	55                   	push   %ebp
   1111e:	89 e5                	mov    %esp,%ebp
   11120:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11123:	a1 40 31 02 00       	mov    0x23140,%eax
   11128:	83 c0 01             	add    $0x1,%eax
   1112b:	a3 40 31 02 00       	mov    %eax,0x23140

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11130:	83 ec 0c             	sub    $0xc,%esp
   11133:	6a 20                	push   $0x20
   11135:	e8 89 ff ff ff       	call   110c3 <pic_send_eoi>
   1113a:	83 c4 10             	add    $0x10,%esp

    //TODO:
    task_time_tick();
   1113d:	e8 d2 f5 ff ff       	call   10714 <task_time_tick>
}
   11142:	90                   	nop
   11143:	c9                   	leave  
   11144:	c3                   	ret    

00011145 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11145:	55                   	push   %ebp
   11146:	89 e5                	mov    %esp,%ebp
   11148:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1114b:	6a 36                	push   $0x36
   1114d:	6a 43                	push   $0x43
   1114f:	e8 a8 ff ff ff       	call   110fc <outb>
   11154:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11157:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1115d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11161:	0f b6 c0             	movzbl %al,%eax
   11164:	50                   	push   %eax
   11165:	6a 40                	push   $0x40
   11167:	e8 90 ff ff ff       	call   110fc <outb>
   1116c:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1116f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11173:	66 c1 e8 08          	shr    $0x8,%ax
   11177:	0f b6 c0             	movzbl %al,%eax
   1117a:	50                   	push   %eax
   1117b:	6a 40                	push   $0x40
   1117d:	e8 7a ff ff ff       	call   110fc <outb>
   11182:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   11185:	83 ec 08             	sub    $0x8,%esp
   11188:	68 7b 02 01 00       	push   $0x1027b
   1118d:	6a 20                	push   $0x20
   1118f:	e8 a7 fb ff ff       	call   10d3b <idt_install>
   11194:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11197:	83 ec 0c             	sub    $0xc,%esp
   1119a:	6a 20                	push   $0x20
   1119c:	e8 e0 fd ff ff       	call   10f81 <idt_enable>
   111a1:	83 c4 10             	add    $0x10,%esp

}
   111a4:	90                   	nop
   111a5:	c9                   	leave  
   111a6:	c3                   	ret    

000111a7 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   111a7:	55                   	push   %ebp
   111a8:	89 e5                	mov    %esp,%ebp
   111aa:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   111ad:	c7 05 40 31 02 00 00 	movl   $0x0,0x23140
   111b4:	00 00 00 
    init_pit();
   111b7:	e8 89 ff ff ff       	call   11145 <init_pit>
   111bc:	90                   	nop
   111bd:	c9                   	leave  
   111be:	c3                   	ret    

000111bf <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   111bf:	55                   	push   %ebp
   111c0:	89 e5                	mov    %esp,%ebp
   111c2:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   111c5:	8b 45 08             	mov    0x8(%ebp),%eax
   111c8:	8b 40 50             	mov    0x50(%eax),%eax
   111cb:	85 c0                	test   %eax,%eax
   111cd:	75 19                	jne    111e8 <kernel_init+0x29>
   111cf:	68 c8 24 01 00       	push   $0x124c8
   111d4:	68 70 25 01 00       	push   $0x12570
   111d9:	6a 1f                	push   $0x1f
   111db:	68 ec 24 01 00       	push   $0x124ec
   111e0:	e8 5b 04 00 00       	call   11640 <pannic>
   111e5:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   111e8:	e8 54 0d 00 00       	call   11f41 <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   111ed:	e8 60 f6 ff ff       	call   10852 <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   111f2:	e8 17 fc ff ff       	call   10e0e <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   111f7:	e8 ab ff ff ff       	call   111a7 <time_init>

    //6.初始化任务管理器
    task_manager_init();
   111fc:	e8 88 f3 ff ff       	call   10589 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11201:	90                   	nop
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <test_task>:

static task_t task_test_task;
static uint32_t test_task_stack[1024]; 

void test_task(void) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   1120a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_1: %d", count++);
   11211:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11214:	8d 50 01             	lea    0x1(%eax),%edx
   11217:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1121a:	83 ec 08             	sub    $0x8,%esp
   1121d:	50                   	push   %eax
   1121e:	68 21 25 01 00       	push   $0x12521
   11223:	e8 8e 0d 00 00       	call   11fb6 <log_printf>
   11228:	83 c4 10             	add    $0x10,%esp
        sys_yield();
   1122b:	e8 99 f4 ff ff       	call   106c9 <sys_yield>
        log_printf("task_1: %d", count++);
   11230:	eb df                	jmp    11211 <test_task+0xd>

00011232 <init_main>:
     }
}



void init_main(void) {
   11232:	55                   	push   %ebp
   11233:	89 e5                	mov    %esp,%ebp
   11235:	83 ec 08             	sub    $0x8,%esp

    list_test();
   11238:	e8 21 01 00 00       	call   1135e <list_test>

    log_printf("Kernel is running......");
   1123d:	83 ec 0c             	sub    $0xc,%esp
   11240:	68 2c 25 01 00       	push   $0x1252c
   11245:	e8 6c 0d 00 00       	call   11fb6 <log_printf>
   1124a:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   1124d:	83 ec 04             	sub    $0x4,%esp
   11250:	68 44 25 01 00       	push   $0x12544
   11255:	68 4a 25 01 00       	push   $0x1254a
   1125a:	68 4f 25 01 00       	push   $0x1254f
   1125f:	e8 52 0d 00 00       	call   11fb6 <log_printf>
   11264:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11267:	e8 50 f3 ff ff       	call   105bc <task_first_init>
    task_init(&task_test_task, "test_task", (uint32_t)test_task, (uint32_t)&test_task_stack[1024]);
   1126c:	ba 20 42 02 00       	mov    $0x24220,%edx
   11271:	b8 04 12 01 00       	mov    $0x11204,%eax
   11276:	52                   	push   %edx
   11277:	50                   	push   %eax
   11278:	68 65 25 01 00       	push   $0x12565
   1127d:	68 60 31 02 00       	push   $0x23160
   11282:	e8 50 f2 ff ff       	call   104d7 <task_init>
   11287:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        sys_yield();
   1128a:	e8 3a f4 ff ff       	call   106c9 <sys_yield>
   1128f:	eb f9                	jmp    1128a <init_main+0x58>

00011291 <list_init>:
static inline void list_init(list_t *list) {
   11291:	55                   	push   %ebp
   11292:	89 e5                	mov    %esp,%ebp
   11294:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11297:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1129b:	75 19                	jne    112b6 <list_init+0x25>
   1129d:	68 7c 25 01 00       	push   $0x1257c
   112a2:	68 80 26 01 00       	push   $0x12680
   112a7:	6a 31                	push   $0x31
   112a9:	68 90 25 01 00       	push   $0x12590
   112ae:	e8 8d 03 00 00       	call   11640 <pannic>
   112b3:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   112b6:	8b 45 08             	mov    0x8(%ebp),%eax
   112b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   112c0:	8b 45 08             	mov    0x8(%ebp),%eax
   112c3:	8b 50 04             	mov    0x4(%eax),%edx
   112c6:	8b 45 08             	mov    0x8(%ebp),%eax
   112c9:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   112cb:	8b 45 08             	mov    0x8(%ebp),%eax
   112ce:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   112d5:	90                   	nop
   112d6:	c9                   	leave  
   112d7:	c3                   	ret    

000112d8 <list_get_size>:
static inline int list_get_size(list_t *list) {
   112d8:	55                   	push   %ebp
   112d9:	89 e5                	mov    %esp,%ebp
   112db:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   112de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112e2:	75 19                	jne    112fd <list_get_size+0x25>
   112e4:	68 7c 25 01 00       	push   $0x1257c
   112e9:	68 8c 26 01 00       	push   $0x1268c
   112ee:	6a 3e                	push   $0x3e
   112f0:	68 90 25 01 00       	push   $0x12590
   112f5:	e8 46 03 00 00       	call   11640 <pannic>
   112fa:	83 c4 10             	add    $0x10,%esp
    return list->size;
   112fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11300:	8b 40 08             	mov    0x8(%eax),%eax
}
   11303:	c9                   	leave  
   11304:	c3                   	ret    

00011305 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11305:	55                   	push   %ebp
   11306:	89 e5                	mov    %esp,%ebp
   11308:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1130b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1130f:	75 19                	jne    1132a <list_get_first+0x25>
   11311:	68 7c 25 01 00       	push   $0x1257c
   11316:	68 ac 26 01 00       	push   $0x126ac
   1131b:	6a 44                	push   $0x44
   1131d:	68 90 25 01 00       	push   $0x12590
   11322:	e8 19 03 00 00       	call   11640 <pannic>
   11327:	83 c4 10             	add    $0x10,%esp
    return list->first;
   1132a:	8b 45 08             	mov    0x8(%ebp),%eax
   1132d:	8b 00                	mov    (%eax),%eax
}
   1132f:	c9                   	leave  
   11330:	c3                   	ret    

00011331 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11331:	55                   	push   %ebp
   11332:	89 e5                	mov    %esp,%ebp
   11334:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11337:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1133b:	75 19                	jne    11356 <list_get_last+0x25>
   1133d:	68 7c 25 01 00       	push   $0x1257c
   11342:	68 9c 26 01 00       	push   $0x1269c
   11347:	6a 4a                	push   $0x4a
   11349:	68 90 25 01 00       	push   $0x12590
   1134e:	e8 ed 02 00 00       	call   11640 <pannic>
   11353:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11356:	8b 45 08             	mov    0x8(%ebp),%eax
   11359:	8b 40 04             	mov    0x4(%eax),%eax
}
   1135c:	c9                   	leave  
   1135d:	c3                   	ret    

0001135e <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   1135e:	55                   	push   %ebp
   1135f:	89 e5                	mov    %esp,%ebp
   11361:	56                   	push   %esi
   11362:	53                   	push   %ebx
   11363:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11366:	83 ec 0c             	sub    $0xc,%esp
   11369:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1136c:	50                   	push   %eax
   1136d:	e8 1f ff ff ff       	call   11291 <list_init>
   11372:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11375:	83 ec 0c             	sub    $0xc,%esp
   11378:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1137b:	50                   	push   %eax
   1137c:	e8 57 ff ff ff       	call   112d8 <list_get_size>
   11381:	83 c4 10             	add    $0x10,%esp
   11384:	89 c6                	mov    %eax,%esi
   11386:	83 ec 0c             	sub    $0xc,%esp
   11389:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1138c:	50                   	push   %eax
   1138d:	e8 9f ff ff ff       	call   11331 <list_get_last>
   11392:	83 c4 10             	add    $0x10,%esp
   11395:	89 c3                	mov    %eax,%ebx
   11397:	83 ec 0c             	sub    $0xc,%esp
   1139a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1139d:	50                   	push   %eax
   1139e:	e8 62 ff ff ff       	call   11305 <list_get_first>
   113a3:	83 c4 10             	add    $0x10,%esp
   113a6:	56                   	push   %esi
   113a7:	53                   	push   %ebx
   113a8:	50                   	push   %eax
   113a9:	68 d0 25 01 00       	push   $0x125d0
   113ae:	e8 03 0c 00 00       	call   11fb6 <log_printf>
   113b3:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   113b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   113bd:	eb 3f                	jmp    113fe <list_test+0xa0>
        list_node_t *node = nodes + i;
   113bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   113c9:	8d 45 9c             	lea    -0x64(%ebp),%eax
   113cc:	01 d0                	add    %edx,%eax
   113ce:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   113d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
   113d4:	83 ec 04             	sub    $0x4,%esp
   113d7:	50                   	push   %eax
   113d8:	ff 75 f4             	push   -0xc(%ebp)
   113db:	68 f8 25 01 00       	push   $0x125f8
   113e0:	e8 d1 0b 00 00       	call   11fb6 <log_printf>
   113e5:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   113e8:	83 ec 08             	sub    $0x8,%esp
   113eb:	ff 75 d0             	push   -0x30(%ebp)
   113ee:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   113f1:	50                   	push   %eax
   113f2:	e8 c3 07 00 00       	call   11bba <list_insert_first>
   113f7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   113fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   113fe:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11402:	7e bb                	jle    113bf <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11404:	83 ec 0c             	sub    $0xc,%esp
   11407:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1140a:	50                   	push   %eax
   1140b:	e8 c8 fe ff ff       	call   112d8 <list_get_size>
   11410:	83 c4 10             	add    $0x10,%esp
   11413:	89 c6                	mov    %eax,%esi
   11415:	83 ec 0c             	sub    $0xc,%esp
   11418:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1141b:	50                   	push   %eax
   1141c:	e8 10 ff ff ff       	call   11331 <list_get_last>
   11421:	83 c4 10             	add    $0x10,%esp
   11424:	89 c3                	mov    %eax,%ebx
   11426:	83 ec 0c             	sub    $0xc,%esp
   11429:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1142c:	50                   	push   %eax
   1142d:	e8 d3 fe ff ff       	call   11305 <list_get_first>
   11432:	83 c4 10             	add    $0x10,%esp
   11435:	56                   	push   %esi
   11436:	53                   	push   %ebx
   11437:	50                   	push   %eax
   11438:	68 d0 25 01 00       	push   $0x125d0
   1143d:	e8 74 0b 00 00       	call   11fb6 <log_printf>
   11442:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11445:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1144c:	eb 2d                	jmp    1147b <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   1144e:	83 ec 0c             	sub    $0xc,%esp
   11451:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11454:	50                   	push   %eax
   11455:	e8 7a 08 00 00       	call   11cd4 <list_remove_first>
   1145a:	83 c4 10             	add    $0x10,%esp
   1145d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11460:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11463:	83 ec 04             	sub    $0x4,%esp
   11466:	50                   	push   %eax
   11467:	ff 75 f0             	push   -0x10(%ebp)
   1146a:	68 17 26 01 00       	push   $0x12617
   1146f:	e8 42 0b 00 00       	call   11fb6 <log_printf>
   11474:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11477:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1147b:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1147f:	7e cd                	jle    1144e <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11481:	83 ec 0c             	sub    $0xc,%esp
   11484:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11487:	50                   	push   %eax
   11488:	e8 4b fe ff ff       	call   112d8 <list_get_size>
   1148d:	83 c4 10             	add    $0x10,%esp
   11490:	89 c6                	mov    %eax,%esi
   11492:	83 ec 0c             	sub    $0xc,%esp
   11495:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11498:	50                   	push   %eax
   11499:	e8 93 fe ff ff       	call   11331 <list_get_last>
   1149e:	83 c4 10             	add    $0x10,%esp
   114a1:	89 c3                	mov    %eax,%ebx
   114a3:	83 ec 0c             	sub    $0xc,%esp
   114a6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114a9:	50                   	push   %eax
   114aa:	e8 56 fe ff ff       	call   11305 <list_get_first>
   114af:	83 c4 10             	add    $0x10,%esp
   114b2:	56                   	push   %esi
   114b3:	53                   	push   %ebx
   114b4:	50                   	push   %eax
   114b5:	68 d0 25 01 00       	push   $0x125d0
   114ba:	e8 f7 0a 00 00       	call   11fb6 <log_printf>
   114bf:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   114c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   114c9:	eb 3f                	jmp    1150a <list_test+0x1ac>
        list_node_t *node = nodes + i;
   114cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   114d5:	8d 45 9c             	lea    -0x64(%ebp),%eax
   114d8:	01 d0                	add    %edx,%eax
   114da:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   114dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   114e0:	83 ec 04             	sub    $0x4,%esp
   114e3:	50                   	push   %eax
   114e4:	ff 75 ec             	push   -0x14(%ebp)
   114e7:	68 2e 26 01 00       	push   $0x1262e
   114ec:	e8 c5 0a 00 00       	call   11fb6 <log_printf>
   114f1:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   114f4:	83 ec 08             	sub    $0x8,%esp
   114f7:	ff 75 d8             	push   -0x28(%ebp)
   114fa:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114fd:	50                   	push   %eax
   114fe:	e8 42 07 00 00       	call   11c45 <list_insert_last>
   11503:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11506:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1150a:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1150e:	7e bb                	jle    114cb <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11510:	83 ec 0c             	sub    $0xc,%esp
   11513:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11516:	50                   	push   %eax
   11517:	e8 bc fd ff ff       	call   112d8 <list_get_size>
   1151c:	83 c4 10             	add    $0x10,%esp
   1151f:	89 c6                	mov    %eax,%esi
   11521:	83 ec 0c             	sub    $0xc,%esp
   11524:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11527:	50                   	push   %eax
   11528:	e8 04 fe ff ff       	call   11331 <list_get_last>
   1152d:	83 c4 10             	add    $0x10,%esp
   11530:	89 c3                	mov    %eax,%ebx
   11532:	83 ec 0c             	sub    $0xc,%esp
   11535:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11538:	50                   	push   %eax
   11539:	e8 c7 fd ff ff       	call   11305 <list_get_first>
   1153e:	83 c4 10             	add    $0x10,%esp
   11541:	56                   	push   %esi
   11542:	53                   	push   %ebx
   11543:	50                   	push   %eax
   11544:	68 d0 25 01 00       	push   $0x125d0
   11549:	e8 68 0a 00 00       	call   11fb6 <log_printf>
   1154e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11551:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11558:	eb 2d                	jmp    11587 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1155a:	83 ec 0c             	sub    $0xc,%esp
   1155d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11560:	50                   	push   %eax
   11561:	e8 1f 08 00 00       	call   11d85 <list_remove_last>
   11566:	83 c4 10             	add    $0x10,%esp
   11569:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1156c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1156f:	83 ec 04             	sub    $0x4,%esp
   11572:	50                   	push   %eax
   11573:	ff 75 e8             	push   -0x18(%ebp)
   11576:	68 4c 26 01 00       	push   $0x1264c
   1157b:	e8 36 0a 00 00       	call   11fb6 <log_printf>
   11580:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11583:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11587:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1158b:	7e cd                	jle    1155a <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1158d:	83 ec 0c             	sub    $0xc,%esp
   11590:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11593:	50                   	push   %eax
   11594:	e8 3f fd ff ff       	call   112d8 <list_get_size>
   11599:	83 c4 10             	add    $0x10,%esp
   1159c:	89 c6                	mov    %eax,%esi
   1159e:	83 ec 0c             	sub    $0xc,%esp
   115a1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115a4:	50                   	push   %eax
   115a5:	e8 87 fd ff ff       	call   11331 <list_get_last>
   115aa:	83 c4 10             	add    $0x10,%esp
   115ad:	89 c3                	mov    %eax,%ebx
   115af:	83 ec 0c             	sub    $0xc,%esp
   115b2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115b5:	50                   	push   %eax
   115b6:	e8 4a fd ff ff       	call   11305 <list_get_first>
   115bb:	83 c4 10             	add    $0x10,%esp
   115be:	56                   	push   %esi
   115bf:	53                   	push   %ebx
   115c0:	50                   	push   %eax
   115c1:	68 d0 25 01 00       	push   $0x125d0
   115c6:	e8 eb 09 00 00       	call   11fb6 <log_printf>
   115cb:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   115ce:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   115d5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   115dc:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   115e3:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   115ea:	8d 45 90             	lea    -0x70(%ebp),%eax
   115ed:	83 c0 04             	add    $0x4,%eax
   115f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   115f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   115f7:	74 08                	je     11601 <list_test+0x2a3>
   115f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115fc:	83 e8 04             	sub    $0x4,%eax
   115ff:	eb 05                	jmp    11606 <list_test+0x2a8>
   11601:	b8 00 00 00 00       	mov    $0x0,%eax
   11606:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   11609:	8d 45 90             	lea    -0x70(%ebp),%eax
   1160c:	83 ec 08             	sub    $0x8,%esp
   1160f:	50                   	push   %eax
   11610:	68 62 26 01 00       	push   $0x12662
   11615:	e8 9c 09 00 00       	call   11fb6 <log_printf>
   1161a:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   1161d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11620:	83 ec 08             	sub    $0x8,%esp
   11623:	50                   	push   %eax
   11624:	68 70 26 01 00       	push   $0x12670
   11629:	e8 88 09 00 00       	call   11fb6 <log_printf>
   1162e:	83 c4 10             	add    $0x10,%esp

 }
   11631:	90                   	nop
   11632:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11635:	5b                   	pop    %ebx
   11636:	5e                   	pop    %esi
   11637:	5d                   	pop    %ebp
   11638:	c3                   	ret    

00011639 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11639:	55                   	push   %ebp
   1163a:	89 e5                	mov    %esp,%ebp
   1163c:	f4                   	hlt    
   1163d:	90                   	nop
   1163e:	5d                   	pop    %ebp
   1163f:	c3                   	ret    

00011640 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   11640:	55                   	push   %ebp
   11641:	89 e5                	mov    %esp,%ebp
   11643:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   11646:	83 ec 08             	sub    $0x8,%esp
   11649:	ff 75 14             	push   0x14(%ebp)
   1164c:	68 bb 26 01 00       	push   $0x126bb
   11651:	e8 60 09 00 00       	call   11fb6 <log_printf>
   11656:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   11659:	ff 75 10             	push   0x10(%ebp)
   1165c:	ff 75 0c             	push   0xc(%ebp)
   1165f:	ff 75 08             	push   0x8(%ebp)
   11662:	68 cc 26 01 00       	push   $0x126cc
   11667:	e8 4a 09 00 00       	call   11fb6 <log_printf>
   1166c:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1166f:	e8 c5 ff ff ff       	call   11639 <hlt>
   11674:	eb f9                	jmp    1166f <pannic+0x2f>

00011676 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   11676:	55                   	push   %ebp
   11677:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   11679:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1167d:	74 3b                	je     116ba <kernel_strcpy+0x44>
   1167f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11683:	74 35                	je     116ba <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   11685:	eb 17                	jmp    1169e <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   11687:	8b 55 0c             	mov    0xc(%ebp),%edx
   1168a:	8d 42 01             	lea    0x1(%edx),%eax
   1168d:	89 45 0c             	mov    %eax,0xc(%ebp)
   11690:	8b 45 08             	mov    0x8(%ebp),%eax
   11693:	8d 48 01             	lea    0x1(%eax),%ecx
   11696:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11699:	0f b6 12             	movzbl (%edx),%edx
   1169c:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   1169e:	8b 45 08             	mov    0x8(%ebp),%eax
   116a1:	0f b6 00             	movzbl (%eax),%eax
   116a4:	84 c0                	test   %al,%al
   116a6:	74 0a                	je     116b2 <kernel_strcpy+0x3c>
   116a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ab:	0f b6 00             	movzbl (%eax),%eax
   116ae:	84 c0                	test   %al,%al
   116b0:	75 d5                	jne    11687 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   116b2:	8b 45 08             	mov    0x8(%ebp),%eax
   116b5:	c6 00 00             	movb   $0x0,(%eax)
   116b8:	eb 01                	jmp    116bb <kernel_strcpy+0x45>
    if (!dest || !src) return;
   116ba:	90                   	nop
    
}
   116bb:	5d                   	pop    %ebp
   116bc:	c3                   	ret    

000116bd <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   116bd:	55                   	push   %ebp
   116be:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   116c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116c4:	74 45                	je     1170b <kernel_strncpy+0x4e>
   116c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116ca:	74 3f                	je     1170b <kernel_strncpy+0x4e>
   116cc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   116d0:	74 39                	je     1170b <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   116d2:	eb 17                	jmp    116eb <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   116d4:	8b 55 0c             	mov    0xc(%ebp),%edx
   116d7:	8d 42 01             	lea    0x1(%edx),%eax
   116da:	89 45 0c             	mov    %eax,0xc(%ebp)
   116dd:	8b 45 08             	mov    0x8(%ebp),%eax
   116e0:	8d 48 01             	lea    0x1(%eax),%ecx
   116e3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   116e6:	0f b6 12             	movzbl (%edx),%edx
   116e9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   116eb:	8b 45 10             	mov    0x10(%ebp),%eax
   116ee:	8d 50 ff             	lea    -0x1(%eax),%edx
   116f1:	89 55 10             	mov    %edx,0x10(%ebp)
   116f4:	83 f8 01             	cmp    $0x1,%eax
   116f7:	7e 0a                	jle    11703 <kernel_strncpy+0x46>
   116f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   116fc:	0f b6 00             	movzbl (%eax),%eax
   116ff:	84 c0                	test   %al,%al
   11701:	75 d1                	jne    116d4 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	c6 00 00             	movb   $0x0,(%eax)
   11709:	eb 01                	jmp    1170c <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   1170b:	90                   	nop
}
   1170c:	5d                   	pop    %ebp
   1170d:	c3                   	ret    

0001170e <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1170e:	55                   	push   %ebp
   1170f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   11711:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11715:	74 06                	je     1171d <kernel_strncmp+0xf>
   11717:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1171b:	75 0f                	jne    1172c <kernel_strncmp+0x1e>
   1171d:	b8 00 00 00 00       	mov    $0x0,%eax
   11722:	eb 52                	jmp    11776 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   11724:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11728:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1172c:	8b 45 08             	mov    0x8(%ebp),%eax
   1172f:	0f b6 00             	movzbl (%eax),%eax
   11732:	84 c0                	test   %al,%al
   11734:	74 24                	je     1175a <kernel_strncmp+0x4c>
   11736:	8b 45 0c             	mov    0xc(%ebp),%eax
   11739:	0f b6 00             	movzbl (%eax),%eax
   1173c:	84 c0                	test   %al,%al
   1173e:	74 1a                	je     1175a <kernel_strncmp+0x4c>
   11740:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11744:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11748:	74 10                	je     1175a <kernel_strncmp+0x4c>
   1174a:	8b 45 08             	mov    0x8(%ebp),%eax
   1174d:	0f b6 10             	movzbl (%eax),%edx
   11750:	8b 45 0c             	mov    0xc(%ebp),%eax
   11753:	0f b6 00             	movzbl (%eax),%eax
   11756:	38 c2                	cmp    %al,%dl
   11758:	74 ca                	je     11724 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   1175a:	8b 45 08             	mov    0x8(%ebp),%eax
   1175d:	0f b6 10             	movzbl (%eax),%edx
   11760:	8b 45 0c             	mov    0xc(%ebp),%eax
   11763:	0f b6 00             	movzbl (%eax),%eax
   11766:	38 c2                	cmp    %al,%dl
   11768:	7e 07                	jle    11771 <kernel_strncmp+0x63>
   1176a:	b8 01 00 00 00       	mov    $0x1,%eax
   1176f:	eb 05                	jmp    11776 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   11771:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   11776:	5d                   	pop    %ebp
   11777:	c3                   	ret    

00011778 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11778:	55                   	push   %ebp
   11779:	89 e5                	mov    %esp,%ebp
   1177b:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   1177e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11782:	75 07                	jne    1178b <kernel_strlen+0x13>
   11784:	b8 00 00 00 00       	mov    $0x0,%eax
   11789:	eb 20                	jmp    117ab <kernel_strlen+0x33>

    int len = 0;
   1178b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   11792:	eb 04                	jmp    11798 <kernel_strlen+0x20>
   11794:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11798:	8b 45 08             	mov    0x8(%ebp),%eax
   1179b:	8d 50 01             	lea    0x1(%eax),%edx
   1179e:	89 55 08             	mov    %edx,0x8(%ebp)
   117a1:	0f b6 00             	movzbl (%eax),%eax
   117a4:	84 c0                	test   %al,%al
   117a6:	75 ec                	jne    11794 <kernel_strlen+0x1c>

    return len;
   117a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   117ab:	c9                   	leave  
   117ac:	c3                   	ret    

000117ad <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   117ad:	55                   	push   %ebp
   117ae:	89 e5                	mov    %esp,%ebp
   117b0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   117b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117b7:	74 40                	je     117f9 <kernel_memcpy+0x4c>
   117b9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117bd:	74 3a                	je     117f9 <kernel_memcpy+0x4c>
   117bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   117c3:	74 34                	je     117f9 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   117c5:	8b 45 08             	mov    0x8(%ebp),%eax
   117c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   117cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   117ce:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   117d1:	eb 17                	jmp    117ea <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   117d3:	8b 55 f8             	mov    -0x8(%ebp),%edx
   117d6:	8d 42 01             	lea    0x1(%edx),%eax
   117d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
   117dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117df:	8d 48 01             	lea    0x1(%eax),%ecx
   117e2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   117e5:	0f b6 12             	movzbl (%edx),%edx
   117e8:	88 10                	mov    %dl,(%eax)
    while (size--) {
   117ea:	8b 45 10             	mov    0x10(%ebp),%eax
   117ed:	8d 50 ff             	lea    -0x1(%eax),%edx
   117f0:	89 55 10             	mov    %edx,0x10(%ebp)
   117f3:	85 c0                	test   %eax,%eax
   117f5:	75 dc                	jne    117d3 <kernel_memcpy+0x26>
   117f7:	eb 01                	jmp    117fa <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   117f9:	90                   	nop
    }
    
}
   117fa:	c9                   	leave  
   117fb:	c3                   	ret    

000117fc <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   117fc:	55                   	push   %ebp
   117fd:	89 e5                	mov    %esp,%ebp
   117ff:	83 ec 14             	sub    $0x14,%esp
   11802:	8b 45 0c             	mov    0xc(%ebp),%eax
   11805:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11808:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1180c:	74 2c                	je     1183a <kernel_memset+0x3e>
   1180e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11812:	74 26                	je     1183a <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   11814:	8b 45 08             	mov    0x8(%ebp),%eax
   11817:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   1181a:	eb 0f                	jmp    1182b <kernel_memset+0x2f>
        *(d++) = v;
   1181c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1181f:	8d 50 01             	lea    0x1(%eax),%edx
   11822:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11825:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11829:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1182b:	8b 45 10             	mov    0x10(%ebp),%eax
   1182e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11831:	89 55 10             	mov    %edx,0x10(%ebp)
   11834:	85 c0                	test   %eax,%eax
   11836:	75 e4                	jne    1181c <kernel_memset+0x20>
   11838:	eb 01                	jmp    1183b <kernel_memset+0x3f>
    if (!dest || !size) return;
   1183a:	90                   	nop
    }
    
}
   1183b:	c9                   	leave  
   1183c:	c3                   	ret    

0001183d <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1183d:	55                   	push   %ebp
   1183e:	89 e5                	mov    %esp,%ebp
   11840:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   11843:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11847:	74 0c                	je     11855 <kernel_memcmp+0x18>
   11849:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1184d:	74 06                	je     11855 <kernel_memcmp+0x18>
   1184f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11853:	75 07                	jne    1185c <kernel_memcmp+0x1f>
   11855:	b8 00 00 00 00       	mov    $0x0,%eax
   1185a:	eb 63                	jmp    118bf <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1185c:	8b 45 08             	mov    0x8(%ebp),%eax
   1185f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   11862:	8b 45 0c             	mov    0xc(%ebp),%eax
   11865:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11868:	eb 08                	jmp    11872 <kernel_memcmp+0x35>
        d1++;
   1186a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   1186e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   11872:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11876:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1187a:	74 10                	je     1188c <kernel_memcmp+0x4f>
   1187c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1187f:	0f b6 10             	movzbl (%eax),%edx
   11882:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11885:	0f b6 00             	movzbl (%eax),%eax
   11888:	38 c2                	cmp    %al,%dl
   1188a:	74 de                	je     1186a <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   1188c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1188f:	0f b6 10             	movzbl (%eax),%edx
   11892:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11895:	0f b6 00             	movzbl (%eax),%eax
   11898:	38 c2                	cmp    %al,%dl
   1189a:	76 07                	jbe    118a3 <kernel_memcmp+0x66>
   1189c:	b8 01 00 00 00       	mov    $0x1,%eax
   118a1:	eb 1c                	jmp    118bf <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   118a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118a6:	0f b6 10             	movzbl (%eax),%edx
   118a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   118ac:	0f b6 00             	movzbl (%eax),%eax
   118af:	38 c2                	cmp    %al,%dl
   118b1:	73 07                	jae    118ba <kernel_memcmp+0x7d>
   118b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   118b8:	eb 05                	jmp    118bf <kernel_memcmp+0x82>
    else return 0;
   118ba:	b8 00 00 00 00       	mov    $0x0,%eax

}
   118bf:	c9                   	leave  
   118c0:	c3                   	ret    

000118c1 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   118c1:	55                   	push   %ebp
   118c2:	89 e5                	mov    %esp,%ebp
   118c4:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   118c7:	8d 45 10             	lea    0x10(%ebp),%eax
   118ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   118cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118d0:	83 ec 04             	sub    $0x4,%esp
   118d3:	50                   	push   %eax
   118d4:	ff 75 0c             	push   0xc(%ebp)
   118d7:	ff 75 08             	push   0x8(%ebp)
   118da:	e8 06 00 00 00       	call   118e5 <kernel_vsprintf>
   118df:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   118e2:	90                   	nop
   118e3:	c9                   	leave  
   118e4:	c3                   	ret    

000118e5 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   118e5:	55                   	push   %ebp
   118e6:	89 e5                	mov    %esp,%ebp
   118e8:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   118eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   118f2:	8b 45 08             	mov    0x8(%ebp),%eax
   118f5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   118f8:	e9 68 01 00 00       	jmp    11a65 <kernel_vsprintf+0x180>
        switch (state) {
   118fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11901:	74 0b                	je     1190e <kernel_vsprintf+0x29>
   11903:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11907:	74 2b                	je     11934 <kernel_vsprintf+0x4f>
   11909:	e9 56 01 00 00       	jmp    11a64 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1190e:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   11912:	75 0c                	jne    11920 <kernel_vsprintf+0x3b>
   11914:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1191b:	e9 45 01 00 00       	jmp    11a65 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   11920:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11923:	8d 50 01             	lea    0x1(%eax),%edx
   11926:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11929:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1192d:	88 10                	mov    %dl,(%eax)
            break;
   1192f:	e9 31 01 00 00       	jmp    11a65 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   11934:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11938:	75 47                	jne    11981 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   1193a:	8b 45 10             	mov    0x10(%ebp),%eax
   1193d:	8d 50 04             	lea    0x4(%eax),%edx
   11940:	89 55 10             	mov    %edx,0x10(%ebp)
   11943:	8b 00                	mov    (%eax),%eax
   11945:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11948:	ff 75 ec             	push   -0x14(%ebp)
   1194b:	e8 28 fe ff ff       	call   11778 <kernel_strlen>
   11950:	83 c4 04             	add    $0x4,%esp
   11953:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11956:	eb 17                	jmp    1196f <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11958:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1195b:	8d 42 01             	lea    0x1(%edx),%eax
   1195e:	89 45 ec             	mov    %eax,-0x14(%ebp)
   11961:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11964:	8d 48 01             	lea    0x1(%eax),%ecx
   11967:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1196a:	0f b6 12             	movzbl (%edx),%edx
   1196d:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1196f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11972:	8d 50 ff             	lea    -0x1(%eax),%edx
   11975:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11978:	85 c0                	test   %eax,%eax
   1197a:	75 dc                	jne    11958 <kernel_vsprintf+0x73>
   1197c:	e9 da 00 00 00       	jmp    11a5b <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   11981:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   11985:	75 37                	jne    119be <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   11987:	8b 45 10             	mov    0x10(%ebp),%eax
   1198a:	8d 50 04             	lea    0x4(%eax),%edx
   1198d:	89 55 10             	mov    %edx,0x10(%ebp)
   11990:	8b 00                	mov    (%eax),%eax
   11992:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   11995:	83 ec 04             	sub    $0x4,%esp
   11998:	6a 0a                	push   $0xa
   1199a:	ff 75 d8             	push   -0x28(%ebp)
   1199d:	ff 75 f0             	push   -0x10(%ebp)
   119a0:	e8 dd 00 00 00       	call   11a82 <kernel_itoa>
   119a5:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   119a8:	83 ec 0c             	sub    $0xc,%esp
   119ab:	ff 75 f0             	push   -0x10(%ebp)
   119ae:	e8 c5 fd ff ff       	call   11778 <kernel_strlen>
   119b3:	83 c4 10             	add    $0x10,%esp
   119b6:	01 45 f0             	add    %eax,-0x10(%ebp)
   119b9:	e9 9d 00 00 00       	jmp    11a5b <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   119be:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   119c2:	74 06                	je     119ca <kernel_vsprintf+0xe5>
   119c4:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   119c8:	75 34                	jne    119fe <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   119ca:	8b 45 10             	mov    0x10(%ebp),%eax
   119cd:	8d 50 04             	lea    0x4(%eax),%edx
   119d0:	89 55 10             	mov    %edx,0x10(%ebp)
   119d3:	8b 00                	mov    (%eax),%eax
   119d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   119d8:	83 ec 04             	sub    $0x4,%esp
   119db:	6a 10                	push   $0x10
   119dd:	ff 75 dc             	push   -0x24(%ebp)
   119e0:	ff 75 f0             	push   -0x10(%ebp)
   119e3:	e8 9a 00 00 00       	call   11a82 <kernel_itoa>
   119e8:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   119eb:	83 ec 0c             	sub    $0xc,%esp
   119ee:	ff 75 f0             	push   -0x10(%ebp)
   119f1:	e8 82 fd ff ff       	call   11778 <kernel_strlen>
   119f6:	83 c4 10             	add    $0x10,%esp
   119f9:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   119fc:	eb 5d                	jmp    11a5b <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   119fe:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   11a02:	75 34                	jne    11a38 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   11a04:	8b 45 10             	mov    0x10(%ebp),%eax
   11a07:	8d 50 04             	lea    0x4(%eax),%edx
   11a0a:	89 55 10             	mov    %edx,0x10(%ebp)
   11a0d:	8b 00                	mov    (%eax),%eax
   11a0f:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   11a12:	83 ec 04             	sub    $0x4,%esp
   11a15:	6a 02                	push   $0x2
   11a17:	ff 75 e0             	push   -0x20(%ebp)
   11a1a:	ff 75 f0             	push   -0x10(%ebp)
   11a1d:	e8 60 00 00 00       	call   11a82 <kernel_itoa>
   11a22:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11a25:	83 ec 0c             	sub    $0xc,%esp
   11a28:	ff 75 f0             	push   -0x10(%ebp)
   11a2b:	e8 48 fd ff ff       	call   11778 <kernel_strlen>
   11a30:	83 c4 10             	add    $0x10,%esp
   11a33:	01 45 f0             	add    %eax,-0x10(%ebp)
   11a36:	eb 23                	jmp    11a5b <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11a38:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11a3c:	75 1d                	jne    11a5b <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   11a3e:	8b 45 10             	mov    0x10(%ebp),%eax
   11a41:	8d 50 04             	lea    0x4(%eax),%edx
   11a44:	89 55 10             	mov    %edx,0x10(%ebp)
   11a47:	8b 00                	mov    (%eax),%eax
   11a49:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11a4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a4f:	8d 50 01             	lea    0x1(%eax),%edx
   11a52:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11a55:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11a59:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11a5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   11a62:	eb 01                	jmp    11a65 <kernel_vsprintf+0x180>
        default:
            break;
   11a64:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   11a65:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a68:	8d 50 01             	lea    0x1(%eax),%edx
   11a6b:	89 55 0c             	mov    %edx,0xc(%ebp)
   11a6e:	0f b6 00             	movzbl (%eax),%eax
   11a71:	88 45 e7             	mov    %al,-0x19(%ebp)
   11a74:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11a78:	0f 85 7f fe ff ff    	jne    118fd <kernel_vsprintf+0x18>
        }
    }
    

}
   11a7e:	90                   	nop
   11a7f:	90                   	nop
   11a80:	c9                   	leave  
   11a81:	c3                   	ret    

00011a82 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   11a82:	55                   	push   %ebp
   11a83:	89 e5                	mov    %esp,%ebp
   11a85:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   11a91:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11a95:	74 1d                	je     11ab4 <kernel_itoa+0x32>
   11a97:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11a9b:	74 17                	je     11ab4 <kernel_itoa+0x32>
   11a9d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11aa1:	74 11                	je     11ab4 <kernel_itoa+0x32>
   11aa3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11aa7:	74 0b                	je     11ab4 <kernel_itoa+0x32>
        *buf = '\0';
   11aa9:	8b 45 08             	mov    0x8(%ebp),%eax
   11aac:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11aaf:	e9 a2 00 00 00       	jmp    11b56 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   11ab4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11ab8:	79 11                	jns    11acb <kernel_itoa+0x49>
        *(p++) = '-';
   11aba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11abd:	8d 50 01             	lea    0x1(%eax),%edx
   11ac0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11ac3:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   11ac6:	f7 5d 0c             	negl   0xc(%ebp)
   11ac9:	eb 1a                	jmp    11ae5 <kernel_itoa+0x63>
    } else if (num == 0) {
   11acb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11acf:	75 14                	jne    11ae5 <kernel_itoa+0x63>
        *(p++) = '0';
   11ad1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ad4:	8d 50 01             	lea    0x1(%eax),%edx
   11ad7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11ada:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   11add:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ae0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11ae3:	eb 71                	jmp    11b56 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   11ae5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   11aec:	eb 2e                	jmp    11b1c <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   11aee:	8b 0d 44 28 01 00    	mov    0x12844,%ecx
   11af4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11af7:	99                   	cltd   
   11af8:	f7 7d 10             	idivl  0x10(%ebp)
   11afb:	89 d0                	mov    %edx,%eax
   11afd:	01 c1                	add    %eax,%ecx
   11aff:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b02:	8d 50 01             	lea    0x1(%eax),%edx
   11b05:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b08:	0f b6 11             	movzbl (%ecx),%edx
   11b0b:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   11b12:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b15:	99                   	cltd   
   11b16:	f7 7d 10             	idivl  0x10(%ebp)
   11b19:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11b1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b20:	7f cc                	jg     11aee <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   11b22:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b25:	83 e8 01             	sub    $0x1,%eax
   11b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11b2b:	eb 1d                	jmp    11b4a <kernel_itoa+0xc8>
            *(p++) = arr[i];
   11b2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b30:	8d 50 01             	lea    0x1(%eax),%edx
   11b33:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b36:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11b3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b3f:	01 ca                	add    %ecx,%edx
   11b41:	0f b6 12             	movzbl (%edx),%edx
   11b44:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   11b46:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11b4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11b4e:	79 dd                	jns    11b2d <kernel_itoa+0xab>
    }
    *p = '\0';
   11b50:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b53:	c6 00 00             	movb   $0x0,(%eax)
   11b56:	c9                   	leave  
   11b57:	c3                   	ret    

00011b58 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11b58:	55                   	push   %ebp
   11b59:	89 e5                	mov    %esp,%ebp
   11b5b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b5e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b62:	75 19                	jne    11b7d <list_is_empty+0x25>
   11b64:	68 f8 26 01 00       	push   $0x126f8
   11b69:	68 dc 27 01 00       	push   $0x127dc
   11b6e:	6a 38                	push   $0x38
   11b70:	68 0c 27 01 00       	push   $0x1270c
   11b75:	e8 c6 fa ff ff       	call   11640 <pannic>
   11b7a:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11b7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b80:	8b 40 08             	mov    0x8(%eax),%eax
   11b83:	85 c0                	test   %eax,%eax
   11b85:	0f 94 c0             	sete   %al
   11b88:	0f b6 c0             	movzbl %al,%eax
}
   11b8b:	c9                   	leave  
   11b8c:	c3                   	ret    

00011b8d <list_get_size>:
static inline int list_get_size(list_t *list) {
   11b8d:	55                   	push   %ebp
   11b8e:	89 e5                	mov    %esp,%ebp
   11b90:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b93:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b97:	75 19                	jne    11bb2 <list_get_size+0x25>
   11b99:	68 f8 26 01 00       	push   $0x126f8
   11b9e:	68 14 28 01 00       	push   $0x12814
   11ba3:	6a 3e                	push   $0x3e
   11ba5:	68 0c 27 01 00       	push   $0x1270c
   11baa:	e8 91 fa ff ff       	call   11640 <pannic>
   11baf:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb5:	8b 40 08             	mov    0x8(%eax),%eax
}
   11bb8:	c9                   	leave  
   11bb9:	c3                   	ret    

00011bba <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   11bba:	55                   	push   %ebp
   11bbb:	89 e5                	mov    %esp,%ebp
   11bbd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11bc0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bc4:	74 06                	je     11bcc <list_insert_first+0x12>
   11bc6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11bca:	75 19                	jne    11be5 <list_insert_first+0x2b>
   11bcc:	68 4c 27 01 00       	push   $0x1274c
   11bd1:	68 c8 27 01 00       	push   $0x127c8
   11bd6:	6a 0f                	push   $0xf
   11bd8:	68 7c 27 01 00       	push   $0x1277c
   11bdd:	e8 5e fa ff ff       	call   11640 <pannic>
   11be2:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   11be5:	8b 45 08             	mov    0x8(%ebp),%eax
   11be8:	8b 10                	mov    (%eax),%edx
   11bea:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bed:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bf3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11bf9:	83 ec 0c             	sub    $0xc,%esp
   11bfc:	ff 75 08             	push   0x8(%ebp)
   11bff:	e8 54 ff ff ff       	call   11b58 <list_is_empty>
   11c04:	83 c4 10             	add    $0x10,%esp
   11c07:	85 c0                	test   %eax,%eax
   11c09:	74 16                	je     11c21 <list_insert_first+0x67>
        list->first = list->last = node;
   11c0b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c11:	89 50 04             	mov    %edx,0x4(%eax)
   11c14:	8b 45 08             	mov    0x8(%ebp),%eax
   11c17:	8b 50 04             	mov    0x4(%eax),%edx
   11c1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c1d:	89 10                	mov    %edx,(%eax)
   11c1f:	eb 12                	jmp    11c33 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   11c21:	8b 45 08             	mov    0x8(%ebp),%eax
   11c24:	8b 00                	mov    (%eax),%eax
   11c26:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c29:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11c2b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c2e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c31:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   11c33:	8b 45 08             	mov    0x8(%ebp),%eax
   11c36:	8b 40 08             	mov    0x8(%eax),%eax
   11c39:	8d 50 01             	lea    0x1(%eax),%edx
   11c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c3f:	89 50 08             	mov    %edx,0x8(%eax)
}
   11c42:	90                   	nop
   11c43:	c9                   	leave  
   11c44:	c3                   	ret    

00011c45 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11c45:	55                   	push   %ebp
   11c46:	89 e5                	mov    %esp,%ebp
   11c48:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11c4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c4f:	74 06                	je     11c57 <list_insert_last+0x12>
   11c51:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c55:	75 19                	jne    11c70 <list_insert_last+0x2b>
   11c57:	68 4c 27 01 00       	push   $0x1274c
   11c5c:	68 ec 27 01 00       	push   $0x127ec
   11c61:	6a 1f                	push   $0x1f
   11c63:	68 7c 27 01 00       	push   $0x1277c
   11c68:	e8 d3 f9 ff ff       	call   11640 <pannic>
   11c6d:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   11c70:	8b 45 08             	mov    0x8(%ebp),%eax
   11c73:	8b 50 04             	mov    0x4(%eax),%edx
   11c76:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c79:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11c7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   11c85:	83 ec 0c             	sub    $0xc,%esp
   11c88:	ff 75 08             	push   0x8(%ebp)
   11c8b:	e8 c8 fe ff ff       	call   11b58 <list_is_empty>
   11c90:	83 c4 10             	add    $0x10,%esp
   11c93:	85 c0                	test   %eax,%eax
   11c95:	74 16                	je     11cad <list_insert_last+0x68>
        list->first = list->last = node;
   11c97:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9a:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c9d:	89 50 04             	mov    %edx,0x4(%eax)
   11ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca3:	8b 50 04             	mov    0x4(%eax),%edx
   11ca6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca9:	89 10                	mov    %edx,(%eax)
   11cab:	eb 15                	jmp    11cc2 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   11cad:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb0:	8b 40 04             	mov    0x4(%eax),%eax
   11cb3:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cb6:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11cbc:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cbf:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   11cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc5:	8b 40 08             	mov    0x8(%eax),%eax
   11cc8:	8d 50 01             	lea    0x1(%eax),%edx
   11ccb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cce:	89 50 08             	mov    %edx,0x8(%eax)

}
   11cd1:	90                   	nop
   11cd2:	c9                   	leave  
   11cd3:	c3                   	ret    

00011cd4 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   11cd4:	55                   	push   %ebp
   11cd5:	89 e5                	mov    %esp,%ebp
   11cd7:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   11cda:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cde:	75 19                	jne    11cf9 <list_remove_first+0x25>
   11ce0:	68 b2 27 01 00       	push   $0x127b2
   11ce5:	68 00 28 01 00       	push   $0x12800
   11cea:	6a 31                	push   $0x31
   11cec:	68 7c 27 01 00       	push   $0x1277c
   11cf1:	e8 4a f9 ff ff       	call   11640 <pannic>
   11cf6:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   11cf9:	83 ec 0c             	sub    $0xc,%esp
   11cfc:	ff 75 08             	push   0x8(%ebp)
   11cff:	e8 54 fe ff ff       	call   11b58 <list_is_empty>
   11d04:	83 c4 10             	add    $0x10,%esp
   11d07:	85 c0                	test   %eax,%eax
   11d09:	74 07                	je     11d12 <list_remove_first+0x3e>
        return (list_node_t*)0;
   11d0b:	b8 00 00 00 00       	mov    $0x0,%eax
   11d10:	eb 71                	jmp    11d83 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   11d12:	8b 45 08             	mov    0x8(%ebp),%eax
   11d15:	8b 00                	mov    (%eax),%eax
   11d17:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   11d1a:	83 ec 0c             	sub    $0xc,%esp
   11d1d:	ff 75 08             	push   0x8(%ebp)
   11d20:	e8 68 fe ff ff       	call   11b8d <list_get_size>
   11d25:	83 c4 10             	add    $0x10,%esp
   11d28:	83 f8 01             	cmp    $0x1,%eax
   11d2b:	75 17                	jne    11d44 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   11d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d30:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d37:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3a:	8b 50 04             	mov    0x4(%eax),%edx
   11d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d40:	89 10                	mov    %edx,(%eax)
   11d42:	eb 18                	jmp    11d5c <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   11d44:	8b 45 08             	mov    0x8(%ebp),%eax
   11d47:	8b 00                	mov    (%eax),%eax
   11d49:	8b 50 04             	mov    0x4(%eax),%edx
   11d4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4f:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   11d51:	8b 45 08             	mov    0x8(%ebp),%eax
   11d54:	8b 00                	mov    (%eax),%eax
   11d56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   11d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5f:	8b 40 08             	mov    0x8(%eax),%eax
   11d62:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d65:	8b 45 08             	mov    0x8(%ebp),%eax
   11d68:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   11d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d6e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d78:	8b 50 04             	mov    0x4(%eax),%edx
   11d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d7e:	89 10                	mov    %edx,(%eax)
    return ret;
   11d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   11d83:	c9                   	leave  
   11d84:	c3                   	ret    

00011d85 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   11d85:	55                   	push   %ebp
   11d86:	89 e5                	mov    %esp,%ebp
   11d88:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   11d8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d8f:	75 19                	jne    11daa <list_remove_last+0x25>
   11d91:	68 b2 27 01 00       	push   $0x127b2
   11d96:	68 24 28 01 00       	push   $0x12824
   11d9b:	6a 46                	push   $0x46
   11d9d:	68 7c 27 01 00       	push   $0x1277c
   11da2:	e8 99 f8 ff ff       	call   11640 <pannic>
   11da7:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   11daa:	83 ec 0c             	sub    $0xc,%esp
   11dad:	ff 75 08             	push   0x8(%ebp)
   11db0:	e8 a3 fd ff ff       	call   11b58 <list_is_empty>
   11db5:	83 c4 10             	add    $0x10,%esp
   11db8:	85 c0                	test   %eax,%eax
   11dba:	74 07                	je     11dc3 <list_remove_last+0x3e>
        return (list_node_t*)0;
   11dbc:	b8 00 00 00 00       	mov    $0x0,%eax
   11dc1:	eb 75                	jmp    11e38 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   11dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc6:	8b 40 04             	mov    0x4(%eax),%eax
   11dc9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   11dcc:	83 ec 0c             	sub    $0xc,%esp
   11dcf:	ff 75 08             	push   0x8(%ebp)
   11dd2:	e8 b6 fd ff ff       	call   11b8d <list_get_size>
   11dd7:	83 c4 10             	add    $0x10,%esp
   11dda:	83 f8 01             	cmp    $0x1,%eax
   11ddd:	75 17                	jne    11df6 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   11ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   11de2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11de9:	8b 45 08             	mov    0x8(%ebp),%eax
   11dec:	8b 50 04             	mov    0x4(%eax),%edx
   11def:	8b 45 08             	mov    0x8(%ebp),%eax
   11df2:	89 10                	mov    %edx,(%eax)
   11df4:	eb 1b                	jmp    11e11 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   11df6:	8b 45 08             	mov    0x8(%ebp),%eax
   11df9:	8b 40 04             	mov    0x4(%eax),%eax
   11dfc:	8b 10                	mov    (%eax),%edx
   11dfe:	8b 45 08             	mov    0x8(%ebp),%eax
   11e01:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   11e04:	8b 45 08             	mov    0x8(%ebp),%eax
   11e07:	8b 40 04             	mov    0x4(%eax),%eax
   11e0a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   11e11:	8b 45 08             	mov    0x8(%ebp),%eax
   11e14:	8b 40 08             	mov    0x8(%eax),%eax
   11e17:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1d:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   11e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e23:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e2d:	8b 50 04             	mov    0x4(%eax),%edx
   11e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e33:	89 10                	mov    %edx,(%eax)
    return ret;
   11e35:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11e38:	c9                   	leave  
   11e39:	c3                   	ret    

00011e3a <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   11e3a:	55                   	push   %ebp
   11e3b:	89 e5                	mov    %esp,%ebp
   11e3d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11e40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e44:	74 06                	je     11e4c <list_remove+0x12>
   11e46:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e4a:	75 19                	jne    11e65 <list_remove+0x2b>
   11e4c:	68 4c 27 01 00       	push   $0x1274c
   11e51:	68 38 28 01 00       	push   $0x12838
   11e56:	6a 5b                	push   $0x5b
   11e58:	68 7c 27 01 00       	push   $0x1277c
   11e5d:	e8 de f7 ff ff       	call   11640 <pannic>
   11e62:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   11e65:	83 ec 0c             	sub    $0xc,%esp
   11e68:	ff 75 08             	push   0x8(%ebp)
   11e6b:	e8 e8 fc ff ff       	call   11b58 <list_is_empty>
   11e70:	83 c4 10             	add    $0x10,%esp
   11e73:	85 c0                	test   %eax,%eax
   11e75:	74 0a                	je     11e81 <list_remove+0x47>
        return (list_node_t*)0;
   11e77:	b8 00 00 00 00       	mov    $0x0,%eax
   11e7c:	e9 80 00 00 00       	jmp    11f01 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   11e81:	8b 45 08             	mov    0x8(%ebp),%eax
   11e84:	8b 00                	mov    (%eax),%eax
   11e86:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e89:	75 0b                	jne    11e96 <list_remove+0x5c>
   11e8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e8e:	8b 50 04             	mov    0x4(%eax),%edx
   11e91:	8b 45 08             	mov    0x8(%ebp),%eax
   11e94:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   11e96:	8b 45 08             	mov    0x8(%ebp),%eax
   11e99:	8b 40 04             	mov    0x4(%eax),%eax
   11e9c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e9f:	75 0b                	jne    11eac <list_remove+0x72>
   11ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ea4:	8b 10                	mov    (%eax),%edx
   11ea6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea9:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   11eac:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eaf:	8b 00                	mov    (%eax),%eax
   11eb1:	85 c0                	test   %eax,%eax
   11eb3:	74 0e                	je     11ec3 <list_remove+0x89>
   11eb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eb8:	8b 00                	mov    (%eax),%eax
   11eba:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ebd:	8b 52 04             	mov    0x4(%edx),%edx
   11ec0:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   11ec3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec6:	8b 40 04             	mov    0x4(%eax),%eax
   11ec9:	85 c0                	test   %eax,%eax
   11ecb:	74 0d                	je     11eda <list_remove+0xa0>
   11ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ed0:	8b 40 04             	mov    0x4(%eax),%eax
   11ed3:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ed6:	8b 12                	mov    (%edx),%edx
   11ed8:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   11eda:	8b 45 0c             	mov    0xc(%ebp),%eax
   11edd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ee7:	8b 50 04             	mov    0x4(%eax),%edx
   11eea:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eed:	89 10                	mov    %edx,(%eax)
    list->size--;
   11eef:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef2:	8b 40 08             	mov    0x8(%eax),%eax
   11ef5:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ef8:	8b 45 08             	mov    0x8(%ebp),%eax
   11efb:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   11efe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f01:	c9                   	leave  
   11f02:	c3                   	ret    

00011f03 <inb>:
static inline uint8_t inb(uint16_t port) {
   11f03:	55                   	push   %ebp
   11f04:	89 e5                	mov    %esp,%ebp
   11f06:	83 ec 14             	sub    $0x14,%esp
   11f09:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11f10:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11f14:	89 c2                	mov    %eax,%edx
   11f16:	ec                   	in     (%dx),%al
   11f17:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11f1a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11f1e:	c9                   	leave  
   11f1f:	c3                   	ret    

00011f20 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11f20:	55                   	push   %ebp
   11f21:	89 e5                	mov    %esp,%ebp
   11f23:	83 ec 08             	sub    $0x8,%esp
   11f26:	8b 45 08             	mov    0x8(%ebp),%eax
   11f29:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f2c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11f30:	89 d0                	mov    %edx,%eax
   11f32:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11f35:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f39:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f3d:	ee                   	out    %al,(%dx)
}
   11f3e:	90                   	nop
   11f3f:	c9                   	leave  
   11f40:	c3                   	ret    

00011f41 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   11f41:	55                   	push   %ebp
   11f42:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11f44:	6a 00                	push   $0x0
   11f46:	68 f9 03 00 00       	push   $0x3f9
   11f4b:	e8 d0 ff ff ff       	call   11f20 <outb>
   11f50:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11f53:	68 80 00 00 00       	push   $0x80
   11f58:	68 fb 03 00 00       	push   $0x3fb
   11f5d:	e8 be ff ff ff       	call   11f20 <outb>
   11f62:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11f65:	6a 03                	push   $0x3
   11f67:	68 f8 03 00 00       	push   $0x3f8
   11f6c:	e8 af ff ff ff       	call   11f20 <outb>
   11f71:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11f74:	6a 00                	push   $0x0
   11f76:	68 f9 03 00 00       	push   $0x3f9
   11f7b:	e8 a0 ff ff ff       	call   11f20 <outb>
   11f80:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11f83:	6a 03                	push   $0x3
   11f85:	68 fb 03 00 00       	push   $0x3fb
   11f8a:	e8 91 ff ff ff       	call   11f20 <outb>
   11f8f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11f92:	68 c7 00 00 00       	push   $0xc7
   11f97:	68 fa 03 00 00       	push   $0x3fa
   11f9c:	e8 7f ff ff ff       	call   11f20 <outb>
   11fa1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11fa4:	6a 0f                	push   $0xf
   11fa6:	68 fc 03 00 00       	push   $0x3fc
   11fab:	e8 70 ff ff ff       	call   11f20 <outb>
   11fb0:	83 c4 08             	add    $0x8,%esp
}
   11fb3:	90                   	nop
   11fb4:	c9                   	leave  
   11fb5:	c3                   	ret    

00011fb6 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   11fb6:	55                   	push   %ebp
   11fb7:	89 e5                	mov    %esp,%ebp
   11fb9:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11fbf:	83 ec 04             	sub    $0x4,%esp
   11fc2:	68 80 00 00 00       	push   $0x80
   11fc7:	6a 00                	push   $0x0
   11fc9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11fcf:	50                   	push   %eax
   11fd0:	e8 27 f8 ff ff       	call   117fc <kernel_memset>
   11fd5:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11fd8:	8d 45 0c             	lea    0xc(%ebp),%eax
   11fdb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   11fe1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11fe7:	83 ec 04             	sub    $0x4,%esp
   11fea:	50                   	push   %eax
   11feb:	ff 75 08             	push   0x8(%ebp)
   11fee:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11ff4:	50                   	push   %eax
   11ff5:	e8 eb f8 ff ff       	call   118e5 <kernel_vsprintf>
   11ffa:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   11ffd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12003:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   12006:	eb 57                	jmp    1205f <log_printf+0xa9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12008:	90                   	nop
   12009:	83 ec 0c             	sub    $0xc,%esp
   1200c:	68 fd 03 00 00       	push   $0x3fd
   12011:	e8 ed fe ff ff       	call   11f03 <inb>
   12016:	83 c4 10             	add    $0x10,%esp
   12019:	0f b6 c0             	movzbl %al,%eax
   1201c:	83 e0 40             	and    $0x40,%eax
   1201f:	85 c0                	test   %eax,%eax
   12021:	74 e6                	je     12009 <log_printf+0x53>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12023:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12026:	0f b6 00             	movzbl (%eax),%eax
   12029:	3c 0a                	cmp    $0xa,%al
   1202b:	75 12                	jne    1203f <log_printf+0x89>
   1202d:	83 ec 08             	sub    $0x8,%esp
   12030:	6a 0d                	push   $0xd
   12032:	68 f8 03 00 00       	push   $0x3f8
   12037:	e8 e4 fe ff ff       	call   11f20 <outb>
   1203c:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1203f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12042:	8d 50 01             	lea    0x1(%eax),%edx
   12045:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12048:	0f b6 00             	movzbl (%eax),%eax
   1204b:	0f b6 c0             	movzbl %al,%eax
   1204e:	83 ec 08             	sub    $0x8,%esp
   12051:	50                   	push   %eax
   12052:	68 f8 03 00 00       	push   $0x3f8
   12057:	e8 c4 fe ff ff       	call   11f20 <outb>
   1205c:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1205f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12062:	0f b6 00             	movzbl (%eax),%eax
   12065:	84 c0                	test   %al,%al
   12067:	75 9f                	jne    12008 <log_printf+0x52>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12069:	83 ec 08             	sub    $0x8,%esp
   1206c:	6a 0d                	push   $0xd
   1206e:	68 f8 03 00 00       	push   $0x3f8
   12073:	e8 a8 fe ff ff       	call   11f20 <outb>
   12078:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1207b:	83 ec 08             	sub    $0x8,%esp
   1207e:	6a 0a                	push   $0xa
   12080:	68 f8 03 00 00       	push   $0x3f8
   12085:	e8 96 fe ff ff       	call   11f20 <outb>
   1208a:	83 c4 10             	add    $0x10,%esp
   1208d:	90                   	nop
   1208e:	c9                   	leave  
   1208f:	c3                   	ret    
