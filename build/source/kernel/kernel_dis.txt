
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002880 memsz 0x00016240 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020bb  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007c0  000120bc  000120bc  000030bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  0001287c  0001287c  0000387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000139c0  00012880  00012880  00003880  2**5
                  ALLOC
  4 .debug_line   00001175  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000534  00000000  00000000  000049f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000027ee  00000000  00000000  00004f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000e7e  00000000  00000000  00007717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000160  00000000  00000000  00008598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000c51  00000000  00000000  000086f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  00009349  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000d04  00000000  00000000  00009374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000003d list_node_init
00012184 l     O .rodata	0000000f __func__.3
000102ea l     F .text	00000047 list_init
00012194 l     O .rodata	0000000a __func__.2
00010331 l     F .text	0000002d list_get_size
000121b0 l     O .rodata	0000000e __func__.0
0001035e l     F .text	0000002c list_get_first
000121a0 l     O .rodata	0000000f __func__.1
0001038a l     F .text	0000001a far_jump
000103a4 l     F .text	00000017 write_tr
00012880 l     O .bss	000000c4 task_manager
000103bb l     F .text	0000001f switch_to_tss
000103f5 l     F .text	000000e2 tss_init
00012178 l     O .rodata	0000000a __func__.4
0001067a l     F .text	0000000a task_current
00000000 l    df *ABS*	00000000 gdt.c
00010773 l     F .text	00000028 lgdt
00012960 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
0001090e l     F .text	00000007 cli
00010915 l     F .text	00000007 sti
0001091c l     F .text	00000007 hlt
00010923 l     F .text	0000001d inb
00010940 l     F .text	00000021 outb
00010961 l     F .text	00000028 lidt
00022960 l     O .bss	00000800 idt_table
00010989 l     F .text	000000e9 print_exception_fram
00010a72 l     F .text	0000003e do_default_handler
00010cfc l     F .text	00000047 gate_desc_set
00010d83 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011104 l     F .text	00000021 outb
00023160 l     O .bss	00000004 sys_tick
0001114d l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000111c7 l     F .text	00000007 sti
000125a8 l     O .rodata	0000000c __func__.0
00023180 l     O .bss	000000a8 task_test_task
00023240 l     O .bss	00001000 test_task_stack
00000000 l    df *ABS*	00000000 test.c
000112bc l     F .text	00000047 list_init
000126b8 l     O .rodata	0000000a __func__.3
00011303 l     F .text	0000002d list_get_size
000126c4 l     O .rodata	0000000e __func__.2
00011330 l     F .text	0000002c list_get_first
000126e4 l     O .rodata	0000000f __func__.0
0001135c l     F .text	0000002d list_get_last
000126d4 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00011664 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
0001287c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00011b83 l     F .text	00000035 list_is_empty
00012814 l     O .rodata	0000000e __func__.5
00011bb8 l     F .text	0000002d list_get_size
0001284c l     O .rodata	0000000e __func__.2
00012800 l     O .rodata	00000012 __func__.6
00012824 l     O .rodata	00000011 __func__.4
00012838 l     O .rodata	00000012 __func__.3
0001285c l     O .rodata	00000011 __func__.1
00012870 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00011f2e l     F .text	0000001d inb
00011f4b l     F .text	00000021 outb
000117d8 g     F .text	0000004f kernel_memcpy
00010f89 g     F .text	00000098 idt_enable
00011c70 g     F .text	0000008f list_insert_last
000106c9 g     F .text	0000004b sys_yield
00010be4 g     F .text	0000001c do_handler_segment_not_present
00010603 g     F .text	00000029 task_set_ready
000110c0 g     F .text	0000000b idt_enable_global
00011827 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00011f6c g     F .text	00000075 log_init
0001123c g     F .text	00000080 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000116a1 g     F .text	00000047 kernel_strcpy
000110b5 g     F .text	0000000b idt_disable_global
00010d43 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010b3c g     F .text	0000001c do_handler_overflow
00010c70 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010c1c g     F .text	0000001c do_handler_general_protection
00010ce0 g     F .text	0000001c do_handler_control_exception
00010acc g     F .text	0000001c do_handler_divider
00010bac g     F .text	0000001c do_handler_double_fault
00010c38 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000110cb g     F .text	00000039 pic_send_eoi
00011db0 g     F .text	000000b5 list_remove_last
000105f9 g     F .text	0000000a task_first_task
00010180 g       .text	00000000 exception_handler_stack_segment_fault
0001085a g     F .text	00000070 gdt_init
00010cc4 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010ae8 g     F .text	0000001c do_handler_debug
00024240 g     O .bss	00002000 stack
00011389 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
00010e16 g     F .text	00000173 idt_init
00010b74 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010c54 g     F .text	0000001c do_handler_fpu_error
000105bc g     F .text	0000003d task_first_init
00010c8c g     F .text	0000001c do_handler_machine_check
00011be5 g     F .text	0000008b list_insert_first
0001064c g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000116e8 g     F .text	00000051 kernel_strncpy
000111ce g     F .text	00000045 kernel_init
00010000 g       .text	00000000 _start
00011910 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010bc8 g     F .text	0000001c do_handler_invalid_tss
00011021 g     F .text	00000094 idt_disable
00010b04 g     F .text	0000001c do_handler_nmi
00010226 g       .text	00000000 exception_handler_smd_exception
00010b90 g     F .text	0000001c do_handler_device_unavailable
00010714 g     F .text	0000005f task_slice_end
00011868 g     F .text	00000084 kernel_memcmp
00010ca8 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010ab0 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000103da g     F .text	0000001b task_switch_from_to
00010684 g     F .text	00000045 task_switch
000117a3 g     F .text	00000035 kernel_strlen
0001062c g     F .text	00000020 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
0001079b g     F .text	000000bf segment_desc_set
00010b58 g     F .text	0000001c do_handler_bound_range
00011cff g     F .text	000000b1 list_remove_first
00011739 g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010589 g     F .text	00000033 task_manager_init
0001166b g     F .text	00000036 pannic
00010c00 g     F .text	0000001c do_handler_stack_segment_fault
00011213 g     F .text	00000029 test_task
00010b20 g     F .text	0000001c do_handler_breakpoint
00011fe1 g     F .text	000000da log_printf
000104d7 g     F .text	000000b2 task_init
000118ec g     F .text	00000024 kernel_sprintf
000108ca g     F .text	00000044 gdt_alloc_desc
00011aad g     F .text	000000d6 kernel_itoa
00011e65 g     F .text	000000c9 list_remove
00011125 g     F .text	00000028 do_handler_time
000111af g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 c3 11 00 00       	call   111ce <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 62 02 00       	mov    $0x26240,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 12 12 00 00       	jmp    1123c <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 75 0a 00 00       	call   10ab0 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 74 0a 00 00       	call   10acc <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 73 0a 00 00       	call   10ae8 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 72 0a 00 00       	call   10b04 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 71 0a 00 00       	call   10b20 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 70 0a 00 00       	call   10b3c <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 6f 0a 00 00       	call   10b58 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 6e 0a 00 00       	call   10b74 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 6d 0a 00 00       	call   10b90 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 6e 0a 00 00       	call   10bac <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 6f 0a 00 00       	call   10bc8 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 70 0a 00 00       	call   10be4 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 71 0a 00 00       	call   10c00 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 72 0a 00 00       	call   10c1c <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 73 0a 00 00       	call   10c38 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 72 0a 00 00       	call   10c54 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 73 0a 00 00       	call   10c70 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 72 0a 00 00       	call   10c8c <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 71 0a 00 00       	call   10ca8 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 70 0a 00 00       	call   10cc4 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 71 0a 00 00       	call   10ce0 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 99 0e 00 00       	call   11125 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <list_node_init+0x25>
   102b9:	68 bc 20 01 00       	push   $0x120bc
   102be:	68 84 21 01 00       	push   $0x12184
   102c3:	6a 20                	push   $0x20
   102c5:	68 d4 20 01 00       	push   $0x120d4
   102ca:	e8 9c 13 00 00       	call   1166b <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	8b 50 04             	mov    0x4(%eax),%edx
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	89 10                	mov    %edx,(%eax)
}
   102e7:	90                   	nop
   102e8:	c9                   	leave  
   102e9:	c3                   	ret    

000102ea <list_init>:
    ASSERT(node != (list_node_t*)0);

    return node->next;
}

static inline void list_init(list_t *list) {
   102ea:	55                   	push   %ebp
   102eb:	89 e5                	mov    %esp,%ebp
   102ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   102f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102f4:	75 19                	jne    1030f <list_init+0x25>
   102f6:	68 12 21 01 00       	push   $0x12112
   102fb:	68 94 21 01 00       	push   $0x12194
   10300:	6a 31                	push   $0x31
   10302:	68 d4 20 01 00       	push   $0x120d4
   10307:	e8 5f 13 00 00       	call   1166b <pannic>
   1030c:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10319:	8b 45 08             	mov    0x8(%ebp),%eax
   1031c:	8b 50 04             	mov    0x4(%eax),%edx
   1031f:	8b 45 08             	mov    0x8(%ebp),%eax
   10322:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1032e:	90                   	nop
   1032f:	c9                   	leave  
   10330:	c3                   	ret    

00010331 <list_get_size>:
    ASSERT(list != (list_t*)0);

    return list->size == 0;
}

static inline int list_get_size(list_t *list) {
   10331:	55                   	push   %ebp
   10332:	89 e5                	mov    %esp,%ebp
   10334:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10337:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1033b:	75 19                	jne    10356 <list_get_size+0x25>
   1033d:	68 12 21 01 00       	push   $0x12112
   10342:	68 b0 21 01 00       	push   $0x121b0
   10347:	6a 3e                	push   $0x3e
   10349:	68 d4 20 01 00       	push   $0x120d4
   1034e:	e8 18 13 00 00       	call   1166b <pannic>
   10353:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10356:	8b 45 08             	mov    0x8(%ebp),%eax
   10359:	8b 40 08             	mov    0x8(%eax),%eax
}
   1035c:	c9                   	leave  
   1035d:	c3                   	ret    

0001035e <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10368:	75 19                	jne    10383 <list_get_first+0x25>
   1036a:	68 12 21 01 00       	push   $0x12112
   1036f:	68 a0 21 01 00       	push   $0x121a0
   10374:	6a 44                	push   $0x44
   10376:	68 d4 20 01 00       	push   $0x120d4
   1037b:	e8 eb 12 00 00       	call   1166b <pannic>
   10380:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 00                	mov    (%eax),%eax
}
   10388:	c9                   	leave  
   10389:	c3                   	ret    

0001038a <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1038a:	55                   	push   %ebp
   1038b:	89 e5                	mov    %esp,%ebp
   1038d:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10390:	8b 45 0c             	mov    0xc(%ebp),%eax
   10393:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10396:	8b 45 08             	mov    0x8(%ebp),%eax
   10399:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1039c:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1039f:	ff 28                	ljmp   *(%eax)
}
   103a1:	90                   	nop
   103a2:	c9                   	leave  
   103a3:	c3                   	ret    

000103a4 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
   103a7:	83 ec 04             	sub    $0x4,%esp
   103aa:	8b 45 08             	mov    0x8(%ebp),%eax
   103ad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   103b1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103b5:	0f 00 d8             	ltr    %ax
}
   103b8:	90                   	nop
   103b9:	c9                   	leave  
   103ba:	c3                   	ret    

000103bb <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   103bb:	55                   	push   %ebp
   103bc:	89 e5                	mov    %esp,%ebp
   103be:	83 ec 04             	sub    $0x4,%esp
   103c1:	8b 45 08             	mov    0x8(%ebp),%eax
   103c4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   103c8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103cc:	6a 00                	push   $0x0
   103ce:	50                   	push   %eax
   103cf:	e8 b6 ff ff ff       	call   1038a <far_jump>
   103d4:	83 c4 08             	add    $0x8,%esp
}
   103d7:	90                   	nop
   103d8:	c9                   	leave  
   103d9:	c3                   	ret    

000103da <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   103da:	55                   	push   %ebp
   103db:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   103dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e0:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
   103e6:	0f b7 c0             	movzwl %ax,%eax
   103e9:	50                   	push   %eax
   103ea:	e8 cc ff ff ff       	call   103bb <switch_to_tss>
   103ef:	83 c4 04             	add    $0x4,%esp
}
   103f2:	90                   	nop
   103f3:	c9                   	leave  
   103f4:	c3                   	ret    

000103f5 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   103f5:	55                   	push   %ebp
   103f6:	89 e5                	mov    %esp,%ebp
   103f8:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	83 c0 3c             	add    $0x3c,%eax
   10401:	83 ec 04             	sub    $0x4,%esp
   10404:	6a 68                	push   $0x68
   10406:	6a 00                	push   $0x0
   10408:	50                   	push   %eax
   10409:	e8 19 14 00 00       	call   11827 <kernel_memset>
   1040e:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10411:	8b 45 08             	mov    0x8(%ebp),%eax
   10414:	8b 55 0c             	mov    0xc(%ebp),%edx
   10417:	89 50 5c             	mov    %edx,0x5c(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   1041a:	8b 45 08             	mov    0x8(%ebp),%eax
   1041d:	8b 55 10             	mov    0x10(%ebp),%edx
   10420:	89 50 40             	mov    %edx,0x40(%eax)
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	8b 50 40             	mov    0x40(%eax),%edx
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	89 50 74             	mov    %edx,0x74(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	c7 40 44 10 00 00 00 	movl   $0x10,0x44(%eax)
   10439:	8b 45 08             	mov    0x8(%ebp),%eax
   1043c:	8b 50 44             	mov    0x44(%eax),%edx
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10448:	8b 45 08             	mov    0x8(%ebp),%eax
   1044b:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   10452:	00 00 00 
   10455:	8b 45 08             	mov    0x8(%ebp),%eax
   10458:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   1045e:	8b 45 08             	mov    0x8(%ebp),%eax
   10461:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   10470:	8b 45 08             	mov    0x8(%ebp),%eax
   10473:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   10482:	8b 45 08             	mov    0x8(%ebp),%eax
   10485:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	c7 80 88 00 00 00 08 	movl   $0x8,0x88(%eax)
   10495:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10498:	8b 45 08             	mov    0x8(%ebp),%eax
   1049b:	c7 40 60 02 02 00 00 	movl   $0x202,0x60(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   104a2:	e8 23 04 00 00       	call   108ca <gdt_alloc_desc>
   104a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   104aa:	8b 45 08             	mov    0x8(%ebp),%eax
   104ad:	83 c0 3c             	add    $0x3c,%eax
   104b0:	89 c2                	mov    %eax,%edx
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104b5:	0f b7 c0             	movzwl %ax,%eax
   104b8:	68 89 00 00 00       	push   $0x89
   104bd:	6a 68                	push   $0x68
   104bf:	52                   	push   %edx
   104c0:	50                   	push   %eax
   104c1:	e8 d5 02 00 00       	call   1079b <segment_desc_set>
   104c6:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   104c9:	8b 45 08             	mov    0x8(%ebp),%eax
   104cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104cf:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
}
   104d5:	c9                   	leave  
   104d6:	c3                   	ret    

000104d7 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   104d7:	55                   	push   %ebp
   104d8:	89 e5                	mov    %esp,%ebp
   104da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   104dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   104e1:	75 19                	jne    104fc <task_init+0x25>
   104e3:	68 25 21 01 00       	push   $0x12125
   104e8:	68 78 21 01 00       	push   $0x12178
   104ed:	6a 5e                	push   $0x5e
   104ef:	68 38 21 01 00       	push   $0x12138
   104f4:	e8 72 11 00 00       	call   1166b <pannic>
   104f9:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   104fc:	83 ec 04             	sub    $0x4,%esp
   104ff:	ff 75 14             	push   0x14(%ebp)
   10502:	ff 75 10             	push   0x10(%ebp)
   10505:	ff 75 08             	push   0x8(%ebp)
   10508:	e8 e8 fe ff ff       	call   103f5 <tss_init>
   1050d:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10510:	8b 45 08             	mov    0x8(%ebp),%eax
   10513:	83 c0 0c             	add    $0xc,%eax
   10516:	83 ec 04             	sub    $0x4,%esp
   10519:	6a 20                	push   $0x20
   1051b:	ff 75 0c             	push   0xc(%ebp)
   1051e:	50                   	push   %eax
   1051f:	e8 c4 11 00 00       	call   116e8 <kernel_strncpy>
   10524:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10527:	8b 45 08             	mov    0x8(%ebp),%eax
   1052a:	83 c0 2c             	add    $0x2c,%eax
   1052d:	83 ec 0c             	sub    $0xc,%esp
   10530:	50                   	push   %eax
   10531:	e8 77 fd ff ff       	call   102ad <list_node_init>
   10536:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10539:	8b 45 08             	mov    0x8(%ebp),%eax
   1053c:	83 c0 34             	add    $0x34,%eax
   1053f:	83 ec 0c             	sub    $0xc,%esp
   10542:	50                   	push   %eax
   10543:	e8 65 fd ff ff       	call   102ad <list_node_init>
   10548:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10555:	8b 45 08             	mov    0x8(%ebp),%eax
   10558:	8b 50 08             	mov    0x8(%eax),%edx
   1055b:	8b 45 08             	mov    0x8(%ebp),%eax
   1055e:	89 50 04             	mov    %edx,0x4(%eax)

    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	83 c0 34             	add    $0x34,%eax
   10567:	83 ec 08             	sub    $0x8,%esp
   1056a:	50                   	push   %eax
   1056b:	68 90 28 01 00       	push   $0x12890
   10570:	e8 fb 16 00 00       	call   11c70 <list_insert_last>
   10575:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10578:	83 ec 0c             	sub    $0xc,%esp
   1057b:	ff 75 08             	push   0x8(%ebp)
   1057e:	e8 80 00 00 00       	call   10603 <task_set_ready>
   10583:	83 c4 10             	add    $0x10,%esp
}
   10586:	90                   	nop
   10587:	c9                   	leave  
   10588:	c3                   	ret    

00010589 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1058f:	83 ec 0c             	sub    $0xc,%esp
   10592:	68 84 28 01 00       	push   $0x12884
   10597:	e8 4e fd ff ff       	call   102ea <list_init>
   1059c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1059f:	83 ec 0c             	sub    $0xc,%esp
   105a2:	68 90 28 01 00       	push   $0x12890
   105a7:	e8 3e fd ff ff       	call   102ea <list_init>
   105ac:	83 c4 10             	add    $0x10,%esp

    task_manager.curr_task = (task_t*)0;
   105af:	c7 05 80 28 01 00 00 	movl   $0x0,0x12880
   105b6:	00 00 00 
}
   105b9:	90                   	nop
   105ba:	c9                   	leave  
   105bb:	c3                   	ret    

000105bc <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   105bc:	55                   	push   %ebp
   105bd:	89 e5                	mov    %esp,%ebp
   105bf:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   105c2:	6a 00                	push   $0x0
   105c4:	6a 00                	push   $0x0
   105c6:	68 6d 21 01 00       	push   $0x1216d
   105cb:	68 9c 28 01 00       	push   $0x1289c
   105d0:	e8 02 ff ff ff       	call   104d7 <task_init>
   105d5:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   105d8:	a1 40 29 01 00       	mov    0x12940,%eax
   105dd:	0f b7 c0             	movzwl %ax,%eax
   105e0:	83 ec 0c             	sub    $0xc,%esp
   105e3:	50                   	push   %eax
   105e4:	e8 bb fd ff ff       	call   103a4 <write_tr>
   105e9:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   105ec:	c7 05 80 28 01 00 9c 	movl   $0x1289c,0x12880
   105f3:	28 01 00 
}
   105f6:	90                   	nop
   105f7:	c9                   	leave  
   105f8:	c3                   	ret    

000105f9 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   105f9:	55                   	push   %ebp
   105fa:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   105fc:	b8 9c 28 01 00       	mov    $0x1289c,%eax
}
   10601:	5d                   	pop    %ebp
   10602:	c3                   	ret    

00010603 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10603:	55                   	push   %ebp
   10604:	89 e5                	mov    %esp,%ebp
   10606:	83 ec 08             	sub    $0x8,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10609:	8b 45 08             	mov    0x8(%ebp),%eax
   1060c:	83 c0 2c             	add    $0x2c,%eax
   1060f:	83 ec 08             	sub    $0x8,%esp
   10612:	50                   	push   %eax
   10613:	68 84 28 01 00       	push   $0x12884
   10618:	e8 53 16 00 00       	call   11c70 <list_insert_last>
   1061d:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10620:	8b 45 08             	mov    0x8(%ebp),%eax
   10623:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10629:	90                   	nop
   1062a:	c9                   	leave  
   1062b:	c3                   	ret    

0001062c <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   1062c:	55                   	push   %ebp
   1062d:	89 e5                	mov    %esp,%ebp
   1062f:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10632:	8b 45 08             	mov    0x8(%ebp),%eax
   10635:	83 c0 2c             	add    $0x2c,%eax
   10638:	83 ec 08             	sub    $0x8,%esp
   1063b:	50                   	push   %eax
   1063c:	68 84 28 01 00       	push   $0x12884
   10641:	e8 1f 18 00 00       	call   11e65 <list_remove>
   10646:	83 c4 10             	add    $0x10,%esp
}
   10649:	90                   	nop
   1064a:	c9                   	leave  
   1064b:	c3                   	ret    

0001064c <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   1064c:	55                   	push   %ebp
   1064d:	89 e5                	mov    %esp,%ebp
   1064f:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10652:	83 ec 0c             	sub    $0xc,%esp
   10655:	68 84 28 01 00       	push   $0x12884
   1065a:	e8 ff fc ff ff       	call   1035e <list_get_first>
   1065f:	83 c4 10             	add    $0x10,%esp
   10662:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list_node_parent(ready_node, task_t, ready_node);
   10665:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10669:	74 08                	je     10673 <task_ready_first+0x27>
   1066b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1066e:	83 e8 2c             	sub    $0x2c,%eax
   10671:	eb 05                	jmp    10678 <task_ready_first+0x2c>
   10673:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10678:	c9                   	leave  
   10679:	c3                   	ret    

0001067a <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
static task_t *task_current(void) {
   1067a:	55                   	push   %ebp
   1067b:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1067d:	a1 80 28 01 00       	mov    0x12880,%eax
}
   10682:	5d                   	pop    %ebp
   10683:	c3                   	ret    

00010684 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10684:	55                   	push   %ebp
   10685:	89 e5                	mov    %esp,%ebp
   10687:	83 ec 18             	sub    $0x18,%esp
    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   1068a:	e8 bd ff ff ff       	call   1064c <task_ready_first>
   1068f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10692:	a1 80 28 01 00       	mov    0x12880,%eax
   10697:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1069a:	74 2a                	je     106c6 <task_switch+0x42>
        //3.获取当前任务
        task_t *from = task_current();
   1069c:	e8 d9 ff ff ff       	call   1067a <task_current>
   106a1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //4.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   106a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   106ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106b0:	a3 80 28 01 00       	mov    %eax,0x12880
        

        //4.进行任务切换
        task_switch_from_to(from, to);
   106b5:	83 ec 08             	sub    $0x8,%esp
   106b8:	ff 75 f4             	push   -0xc(%ebp)
   106bb:	ff 75 f0             	push   -0x10(%ebp)
   106be:	e8 17 fd ff ff       	call   103da <task_switch_from_to>
   106c3:	83 c4 10             	add    $0x10,%esp
    } 
}
   106c6:	90                   	nop
   106c7:	c9                   	leave  
   106c8:	c3                   	ret    

000106c9 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   106c9:	55                   	push   %ebp
   106ca:	89 e5                	mov    %esp,%ebp
   106cc:	83 ec 18             	sub    $0x18,%esp
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   106cf:	83 ec 0c             	sub    $0xc,%esp
   106d2:	68 84 28 01 00       	push   $0x12884
   106d7:	e8 55 fc ff ff       	call   10331 <list_get_size>
   106dc:	83 c4 10             	add    $0x10,%esp
   106df:	83 f8 01             	cmp    $0x1,%eax
   106e2:	7e 29                	jle    1070d <sys_yield+0x44>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   106e4:	e8 91 ff ff ff       	call   1067a <task_current>
   106e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   106ec:	83 ec 0c             	sub    $0xc,%esp
   106ef:	ff 75 f4             	push   -0xc(%ebp)
   106f2:	e8 35 ff ff ff       	call   1062c <task_set_unready>
   106f7:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   106fa:	83 ec 0c             	sub    $0xc,%esp
   106fd:	ff 75 f4             	push   -0xc(%ebp)
   10700:	e8 fe fe ff ff       	call   10603 <task_set_ready>
   10705:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10708:	e8 77 ff ff ff       	call   10684 <task_switch>
    }

    return 0;
   1070d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10712:	c9                   	leave  
   10713:	c3                   	ret    

00010714 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10714:	55                   	push   %ebp
   10715:	89 e5                	mov    %esp,%ebp
   10717:	83 ec 18             	sub    $0x18,%esp
    //1.获取当前任务
    task_t *curr_task = task_current();
   1071a:	e8 5b ff ff ff       	call   1067a <task_current>
   1071f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (curr_task == (task_t*)0) return;
   10722:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10726:	74 48                	je     10770 <task_slice_end+0x5c>

    //2.减小当前时间片数
    if (--curr_task->slice_curr == 0) {
   10728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1072b:	8b 40 08             	mov    0x8(%eax),%eax
   1072e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10731:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10734:	89 50 08             	mov    %edx,0x8(%eax)
   10737:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1073a:	8b 40 08             	mov    0x8(%eax),%eax
   1073d:	85 c0                	test   %eax,%eax
   1073f:	75 30                	jne    10771 <task_slice_end+0x5d>
        //3.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10741:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10744:	8b 50 04             	mov    0x4(%eax),%edx
   10747:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1074a:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   1074d:	83 ec 0c             	sub    $0xc,%esp
   10750:	ff 75 f4             	push   -0xc(%ebp)
   10753:	e8 d4 fe ff ff       	call   1062c <task_set_unready>
   10758:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1075b:	83 ec 0c             	sub    $0xc,%esp
   1075e:	ff 75 f4             	push   -0xc(%ebp)
   10761:	e8 9d fe ff ff       	call   10603 <task_set_ready>
   10766:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10769:	e8 16 ff ff ff       	call   10684 <task_switch>
   1076e:	eb 01                	jmp    10771 <task_slice_end+0x5d>
    if (curr_task == (task_t*)0) return;
   10770:	90                   	nop
    }
   10771:	c9                   	leave  
   10772:	c3                   	ret    

00010773 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10773:	55                   	push   %ebp
   10774:	89 e5                	mov    %esp,%ebp
   10776:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10779:	8b 45 08             	mov    0x8(%ebp),%eax
   1077c:	c1 e8 10             	shr    $0x10,%eax
   1077f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10783:	8b 45 08             	mov    0x8(%ebp),%eax
   10786:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1078a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1078d:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10790:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10794:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10798:	90                   	nop
   10799:	c9                   	leave  
   1079a:	c3                   	ret    

0001079b <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1079b:	55                   	push   %ebp
   1079c:	89 e5                	mov    %esp,%ebp
   1079e:	83 ec 18             	sub    $0x18,%esp
   107a1:	8b 55 08             	mov    0x8(%ebp),%edx
   107a4:	8b 45 14             	mov    0x14(%ebp),%eax
   107a7:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   107ab:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   107af:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   107b3:	66 c1 e8 03          	shr    $0x3,%ax
   107b7:	0f b7 c0             	movzwl %ax,%eax
   107ba:	c1 e0 03             	shl    $0x3,%eax
   107bd:	05 60 29 01 00       	add    $0x12960,%eax
   107c2:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   107c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   107c8:	89 c2                	mov    %eax,%edx
   107ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107cd:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   107d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   107d4:	c1 e8 10             	shr    $0x10,%eax
   107d7:	89 c2                	mov    %eax,%edx
   107d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107dc:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   107df:	8b 45 0c             	mov    0xc(%ebp),%eax
   107e2:	c1 e8 18             	shr    $0x18,%eax
   107e5:	89 c2                	mov    %eax,%edx
   107e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107ea:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   107ed:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   107f4:	76 1d                	jbe    10813 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   107f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107f9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   107fd:	66 0d 00 80          	or     $0x8000,%ax
   10801:	89 c2                	mov    %eax,%edx
   10803:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10806:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1080a:	8b 45 10             	mov    0x10(%ebp),%eax
   1080d:	c1 e8 0c             	shr    $0xc,%eax
   10810:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10813:	8b 45 10             	mov    0x10(%ebp),%eax
   10816:	89 c2                	mov    %eax,%edx
   10818:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1081b:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   1081e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10821:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10825:	89 c2                	mov    %eax,%edx
   10827:	8b 45 10             	mov    0x10(%ebp),%eax
   1082a:	c1 e8 08             	shr    $0x8,%eax
   1082d:	66 25 00 0f          	and    $0xf00,%ax
   10831:	09 d0                	or     %edx,%eax
   10833:	89 c2                	mov    %eax,%edx
   10835:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10838:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1083c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1083f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10843:	89 c2                	mov    %eax,%edx
   10845:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10849:	80 e4 f0             	and    $0xf0,%ah
   1084c:	09 d0                	or     %edx,%eax
   1084e:	89 c2                	mov    %eax,%edx
   10850:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10853:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10857:	90                   	nop
   10858:	c9                   	leave  
   10859:	c3                   	ret    

0001085a <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1085a:	55                   	push   %ebp
   1085b:	89 e5                	mov    %esp,%ebp
   1085d:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10860:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10867:	eb 1c                	jmp    10885 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10869:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1086c:	c1 e0 03             	shl    $0x3,%eax
   1086f:	0f b7 c0             	movzwl %ax,%eax
   10872:	6a 00                	push   $0x0
   10874:	6a 00                	push   $0x0
   10876:	6a 00                	push   $0x0
   10878:	50                   	push   %eax
   10879:	e8 1d ff ff ff       	call   1079b <segment_desc_set>
   1087e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10881:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10885:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   1088c:	7e db                	jle    10869 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   1088e:	68 92 40 00 00       	push   $0x4092
   10893:	6a ff                	push   $0xffffffff
   10895:	6a 00                	push   $0x0
   10897:	6a 10                	push   $0x10
   10899:	e8 fd fe ff ff       	call   1079b <segment_desc_set>
   1089e:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   108a1:	68 9a 40 00 00       	push   $0x409a
   108a6:	6a ff                	push   $0xffffffff
   108a8:	6a 00                	push   $0x0
   108aa:	6a 08                	push   $0x8
   108ac:	e8 ea fe ff ff       	call   1079b <segment_desc_set>
   108b1:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   108b4:	b8 60 29 01 00       	mov    $0x12960,%eax
   108b9:	68 00 00 01 00       	push   $0x10000
   108be:	50                   	push   %eax
   108bf:	e8 af fe ff ff       	call   10773 <lgdt>
   108c4:	83 c4 08             	add    $0x8,%esp
}
   108c7:	90                   	nop
   108c8:	c9                   	leave  
   108c9:	c3                   	ret    

000108ca <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   108ca:	55                   	push   %ebp
   108cb:	89 e5                	mov    %esp,%ebp
   108cd:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   108d0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   108d7:	eb 25                	jmp    108fe <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   108d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108dc:	c1 e0 03             	shl    $0x3,%eax
   108df:	05 60 29 01 00       	add    $0x12960,%eax
   108e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   108e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   108ea:	0f b7 00             	movzwl (%eax),%eax
   108ed:	66 85 c0             	test   %ax,%ax
   108f0:	75 08                	jne    108fa <gdt_alloc_desc+0x30>
            return i << 3;
   108f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   108f5:	c1 e0 03             	shl    $0x3,%eax
   108f8:	eb 12                	jmp    1090c <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   108fa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   108fe:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10905:	7e d2                	jle    108d9 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10907:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1090c:	c9                   	leave  
   1090d:	c3                   	ret    

0001090e <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   1090e:	55                   	push   %ebp
   1090f:	89 e5                	mov    %esp,%ebp
   10911:	fa                   	cli    
   10912:	90                   	nop
   10913:	5d                   	pop    %ebp
   10914:	c3                   	ret    

00010915 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10915:	55                   	push   %ebp
   10916:	89 e5                	mov    %esp,%ebp
   10918:	fb                   	sti    
   10919:	90                   	nop
   1091a:	5d                   	pop    %ebp
   1091b:	c3                   	ret    

0001091c <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1091c:	55                   	push   %ebp
   1091d:	89 e5                	mov    %esp,%ebp
   1091f:	f4                   	hlt    
   10920:	90                   	nop
   10921:	5d                   	pop    %ebp
   10922:	c3                   	ret    

00010923 <inb>:
static inline uint8_t inb(uint16_t port) {
   10923:	55                   	push   %ebp
   10924:	89 e5                	mov    %esp,%ebp
   10926:	83 ec 14             	sub    $0x14,%esp
   10929:	8b 45 08             	mov    0x8(%ebp),%eax
   1092c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10930:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10934:	89 c2                	mov    %eax,%edx
   10936:	ec                   	in     (%dx),%al
   10937:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1093a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1093e:	c9                   	leave  
   1093f:	c3                   	ret    

00010940 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10940:	55                   	push   %ebp
   10941:	89 e5                	mov    %esp,%ebp
   10943:	83 ec 08             	sub    $0x8,%esp
   10946:	8b 45 08             	mov    0x8(%ebp),%eax
   10949:	8b 55 0c             	mov    0xc(%ebp),%edx
   1094c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10950:	89 d0                	mov    %edx,%eax
   10952:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10955:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10959:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1095d:	ee                   	out    %al,(%dx)
}
   1095e:	90                   	nop
   1095f:	c9                   	leave  
   10960:	c3                   	ret    

00010961 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10961:	55                   	push   %ebp
   10962:	89 e5                	mov    %esp,%ebp
   10964:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10967:	8b 45 08             	mov    0x8(%ebp),%eax
   1096a:	c1 e8 10             	shr    $0x10,%eax
   1096d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10971:	8b 45 08             	mov    0x8(%ebp),%eax
   10974:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10978:	8b 45 0c             	mov    0xc(%ebp),%eax
   1097b:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   1097e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10982:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10986:	90                   	nop
   10987:	c9                   	leave  
   10988:	c3                   	ret    

00010989 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10989:	55                   	push   %ebp
   1098a:	89 e5                	mov    %esp,%ebp
   1098c:	57                   	push   %edi
   1098d:	56                   	push   %esi
   1098e:	53                   	push   %ebx
   1098f:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10992:	83 ec 0c             	sub    $0xc,%esp
   10995:	68 c0 21 01 00       	push   $0x121c0
   1099a:	e8 42 16 00 00       	call   11fe1 <log_printf>
   1099f:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   109a2:	8b 45 08             	mov    0x8(%ebp),%eax
   109a5:	8b 50 34             	mov    0x34(%eax),%edx
   109a8:	8b 45 08             	mov    0x8(%ebp),%eax
   109ab:	8b 40 30             	mov    0x30(%eax),%eax
   109ae:	83 ec 04             	sub    $0x4,%esp
   109b1:	52                   	push   %edx
   109b2:	50                   	push   %eax
   109b3:	68 fe 21 01 00       	push   $0x121fe
   109b8:	e8 24 16 00 00       	call   11fe1 <log_printf>
   109bd:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   109c0:	8b 45 08             	mov    0x8(%ebp),%eax
   109c3:	8b 38                	mov    (%eax),%edi
   109c5:	8b 45 08             	mov    0x8(%ebp),%eax
   109c8:	8b 70 04             	mov    0x4(%eax),%esi
   109cb:	8b 45 08             	mov    0x8(%ebp),%eax
   109ce:	8b 58 08             	mov    0x8(%eax),%ebx
   109d1:	8b 45 08             	mov    0x8(%ebp),%eax
   109d4:	8b 48 0c             	mov    0xc(%eax),%ecx
   109d7:	8b 45 08             	mov    0x8(%ebp),%eax
   109da:	8b 50 0c             	mov    0xc(%eax),%edx
   109dd:	8b 45 08             	mov    0x8(%ebp),%eax
   109e0:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   109e3:	83 ec 04             	sub    $0x4,%esp
   109e6:	57                   	push   %edi
   109e7:	56                   	push   %esi
   109e8:	53                   	push   %ebx
   109e9:	51                   	push   %ecx
   109ea:	52                   	push   %edx
   109eb:	50                   	push   %eax
   109ec:	68 18 22 01 00       	push   $0x12218
   109f1:	e8 eb 15 00 00       	call   11fe1 <log_printf>
   109f6:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   109f9:	8b 45 08             	mov    0x8(%ebp),%eax
   109fc:	8b 48 1c             	mov    0x1c(%eax),%ecx
   109ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10a02:	8b 40 18             	mov    0x18(%eax),%eax
   10a05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10a08:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0b:	8b 58 10             	mov    0x10(%eax),%ebx
   10a0e:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10a11:	8b 45 08             	mov    0x8(%ebp),%eax
   10a14:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10a17:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1a:	8b 70 24             	mov    0x24(%eax),%esi
   10a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a20:	8b 58 28             	mov    0x28(%eax),%ebx
   10a23:	8b 45 08             	mov    0x8(%ebp),%eax
   10a26:	8b 50 20             	mov    0x20(%eax),%edx
   10a29:	8b 45 08             	mov    0x8(%ebp),%eax
   10a2c:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10a2f:	83 ec 0c             	sub    $0xc,%esp
   10a32:	51                   	push   %ecx
   10a33:	ff 75 e4             	push   -0x1c(%ebp)
   10a36:	ff 75 e0             	push   -0x20(%ebp)
   10a39:	57                   	push   %edi
   10a3a:	56                   	push   %esi
   10a3b:	53                   	push   %ebx
   10a3c:	52                   	push   %edx
   10a3d:	50                   	push   %eax
   10a3e:	68 48 22 01 00       	push   $0x12248
   10a43:	e8 99 15 00 00       	call   11fe1 <log_printf>
   10a48:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10a4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4e:	8b 50 40             	mov    0x40(%eax),%edx
   10a51:	8b 45 08             	mov    0x8(%ebp),%eax
   10a54:	8b 40 38             	mov    0x38(%eax),%eax
   10a57:	83 ec 04             	sub    $0x4,%esp
   10a5a:	52                   	push   %edx
   10a5b:	50                   	push   %eax
   10a5c:	68 a0 22 01 00       	push   $0x122a0
   10a61:	e8 7b 15 00 00       	call   11fe1 <log_printf>
   10a66:	83 c4 10             	add    $0x10,%esp
}
   10a69:	90                   	nop
   10a6a:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10a6d:	5b                   	pop    %ebx
   10a6e:	5e                   	pop    %esi
   10a6f:	5f                   	pop    %edi
   10a70:	5d                   	pop    %ebp
   10a71:	c3                   	ret    

00010a72 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10a72:	55                   	push   %ebp
   10a73:	89 e5                	mov    %esp,%ebp
   10a75:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   10a78:	83 ec 0c             	sub    $0xc,%esp
   10a7b:	68 bc 22 01 00       	push   $0x122bc
   10a80:	e8 5c 15 00 00       	call   11fe1 <log_printf>
   10a85:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10a88:	83 ec 08             	sub    $0x8,%esp
   10a8b:	ff 75 0c             	push   0xc(%ebp)
   10a8e:	68 f0 22 01 00       	push   $0x122f0
   10a93:	e8 49 15 00 00       	call   11fe1 <log_printf>
   10a98:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10a9b:	83 ec 0c             	sub    $0xc,%esp
   10a9e:	ff 75 08             	push   0x8(%ebp)
   10aa1:	e8 e3 fe ff ff       	call   10989 <print_exception_fram>
   10aa6:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10aa9:	e8 6e fe ff ff       	call   1091c <hlt>
   10aae:	eb f9                	jmp    10aa9 <do_default_handler+0x37>

00010ab0 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10ab0:	55                   	push   %ebp
   10ab1:	89 e5                	mov    %esp,%ebp
   10ab3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10ab6:	83 ec 08             	sub    $0x8,%esp
   10ab9:	68 0a 23 01 00       	push   $0x1230a
   10abe:	ff 75 08             	push   0x8(%ebp)
   10ac1:	e8 ac ff ff ff       	call   10a72 <do_default_handler>
   10ac6:	83 c4 10             	add    $0x10,%esp
}
   10ac9:	90                   	nop
   10aca:	c9                   	leave  
   10acb:	c3                   	ret    

00010acc <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10acc:	55                   	push   %ebp
   10acd:	89 e5                	mov    %esp,%ebp
   10acf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10ad2:	83 ec 08             	sub    $0x8,%esp
   10ad5:	68 1c 23 01 00       	push   $0x1231c
   10ada:	ff 75 08             	push   0x8(%ebp)
   10add:	e8 90 ff ff ff       	call   10a72 <do_default_handler>
   10ae2:	83 c4 10             	add    $0x10,%esp
}
   10ae5:	90                   	nop
   10ae6:	c9                   	leave  
   10ae7:	c3                   	ret    

00010ae8 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10ae8:	55                   	push   %ebp
   10ae9:	89 e5                	mov    %esp,%ebp
   10aeb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10aee:	83 ec 08             	sub    $0x8,%esp
   10af1:	68 2e 23 01 00       	push   $0x1232e
   10af6:	ff 75 08             	push   0x8(%ebp)
   10af9:	e8 74 ff ff ff       	call   10a72 <do_default_handler>
   10afe:	83 c4 10             	add    $0x10,%esp
}
   10b01:	90                   	nop
   10b02:	c9                   	leave  
   10b03:	c3                   	ret    

00010b04 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10b04:	55                   	push   %ebp
   10b05:	89 e5                	mov    %esp,%ebp
   10b07:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10b0a:	83 ec 08             	sub    $0x8,%esp
   10b0d:	68 3e 23 01 00       	push   $0x1233e
   10b12:	ff 75 08             	push   0x8(%ebp)
   10b15:	e8 58 ff ff ff       	call   10a72 <do_default_handler>
   10b1a:	83 c4 10             	add    $0x10,%esp
}
   10b1d:	90                   	nop
   10b1e:	c9                   	leave  
   10b1f:	c3                   	ret    

00010b20 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10b20:	55                   	push   %ebp
   10b21:	89 e5                	mov    %esp,%ebp
   10b23:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10b26:	83 ec 08             	sub    $0x8,%esp
   10b29:	68 4c 23 01 00       	push   $0x1234c
   10b2e:	ff 75 08             	push   0x8(%ebp)
   10b31:	e8 3c ff ff ff       	call   10a72 <do_default_handler>
   10b36:	83 c4 10             	add    $0x10,%esp
}
   10b39:	90                   	nop
   10b3a:	c9                   	leave  
   10b3b:	c3                   	ret    

00010b3c <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10b3c:	55                   	push   %ebp
   10b3d:	89 e5                	mov    %esp,%ebp
   10b3f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10b42:	83 ec 08             	sub    $0x8,%esp
   10b45:	68 61 23 01 00       	push   $0x12361
   10b4a:	ff 75 08             	push   0x8(%ebp)
   10b4d:	e8 20 ff ff ff       	call   10a72 <do_default_handler>
   10b52:	83 c4 10             	add    $0x10,%esp
}
   10b55:	90                   	nop
   10b56:	c9                   	leave  
   10b57:	c3                   	ret    

00010b58 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10b58:	55                   	push   %ebp
   10b59:	89 e5                	mov    %esp,%ebp
   10b5b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10b5e:	83 ec 08             	sub    $0x8,%esp
   10b61:	68 74 23 01 00       	push   $0x12374
   10b66:	ff 75 08             	push   0x8(%ebp)
   10b69:	e8 04 ff ff ff       	call   10a72 <do_default_handler>
   10b6e:	83 c4 10             	add    $0x10,%esp
}
   10b71:	90                   	nop
   10b72:	c9                   	leave  
   10b73:	c3                   	ret    

00010b74 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10b74:	55                   	push   %ebp
   10b75:	89 e5                	mov    %esp,%ebp
   10b77:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10b7a:	83 ec 08             	sub    $0x8,%esp
   10b7d:	68 8a 23 01 00       	push   $0x1238a
   10b82:	ff 75 08             	push   0x8(%ebp)
   10b85:	e8 e8 fe ff ff       	call   10a72 <do_default_handler>
   10b8a:	83 c4 10             	add    $0x10,%esp
}
   10b8d:	90                   	nop
   10b8e:	c9                   	leave  
   10b8f:	c3                   	ret    

00010b90 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10b90:	55                   	push   %ebp
   10b91:	89 e5                	mov    %esp,%ebp
   10b93:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10b96:	83 ec 08             	sub    $0x8,%esp
   10b99:	68 a3 23 01 00       	push   $0x123a3
   10b9e:	ff 75 08             	push   0x8(%ebp)
   10ba1:	e8 cc fe ff ff       	call   10a72 <do_default_handler>
   10ba6:	83 c4 10             	add    $0x10,%esp
}
   10ba9:	90                   	nop
   10baa:	c9                   	leave  
   10bab:	c3                   	ret    

00010bac <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
   10baf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10bb2:	83 ec 08             	sub    $0x8,%esp
   10bb5:	68 c0 23 01 00       	push   $0x123c0
   10bba:	ff 75 08             	push   0x8(%ebp)
   10bbd:	e8 b0 fe ff ff       	call   10a72 <do_default_handler>
   10bc2:	83 c4 10             	add    $0x10,%esp
}
   10bc5:	90                   	nop
   10bc6:	c9                   	leave  
   10bc7:	c3                   	ret    

00010bc8 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10bc8:	55                   	push   %ebp
   10bc9:	89 e5                	mov    %esp,%ebp
   10bcb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10bce:	83 ec 08             	sub    $0x8,%esp
   10bd1:	68 d7 23 01 00       	push   $0x123d7
   10bd6:	ff 75 08             	push   0x8(%ebp)
   10bd9:	e8 94 fe ff ff       	call   10a72 <do_default_handler>
   10bde:	83 c4 10             	add    $0x10,%esp
}
   10be1:	90                   	nop
   10be2:	c9                   	leave  
   10be3:	c3                   	ret    

00010be4 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10be4:	55                   	push   %ebp
   10be5:	89 e5                	mov    %esp,%ebp
   10be7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10bea:	83 ec 08             	sub    $0x8,%esp
   10bed:	68 ed 23 01 00       	push   $0x123ed
   10bf2:	ff 75 08             	push   0x8(%ebp)
   10bf5:	e8 78 fe ff ff       	call   10a72 <do_default_handler>
   10bfa:	83 c4 10             	add    $0x10,%esp
}
   10bfd:	90                   	nop
   10bfe:	c9                   	leave  
   10bff:	c3                   	ret    

00010c00 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10c00:	55                   	push   %ebp
   10c01:	89 e5                	mov    %esp,%ebp
   10c03:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   10c06:	83 ec 08             	sub    $0x8,%esp
   10c09:	68 0b 24 01 00       	push   $0x1240b
   10c0e:	ff 75 08             	push   0x8(%ebp)
   10c11:	e8 5c fe ff ff       	call   10a72 <do_default_handler>
   10c16:	83 c4 10             	add    $0x10,%esp
}
   10c19:	90                   	nop
   10c1a:	c9                   	leave  
   10c1b:	c3                   	ret    

00010c1c <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10c1c:	55                   	push   %ebp
   10c1d:	89 e5                	mov    %esp,%ebp
   10c1f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10c22:	83 ec 08             	sub    $0x8,%esp
   10c25:	68 29 24 01 00       	push   $0x12429
   10c2a:	ff 75 08             	push   0x8(%ebp)
   10c2d:	e8 40 fe ff ff       	call   10a72 <do_default_handler>
   10c32:	83 c4 10             	add    $0x10,%esp
}
   10c35:	90                   	nop
   10c36:	c9                   	leave  
   10c37:	c3                   	ret    

00010c38 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10c38:	55                   	push   %ebp
   10c39:	89 e5                	mov    %esp,%ebp
   10c3b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10c3e:	83 ec 08             	sub    $0x8,%esp
   10c41:	68 46 24 01 00       	push   $0x12446
   10c46:	ff 75 08             	push   0x8(%ebp)
   10c49:	e8 24 fe ff ff       	call   10a72 <do_default_handler>
   10c4e:	83 c4 10             	add    $0x10,%esp
}
   10c51:	90                   	nop
   10c52:	c9                   	leave  
   10c53:	c3                   	ret    

00010c54 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10c54:	55                   	push   %ebp
   10c55:	89 e5                	mov    %esp,%ebp
   10c57:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   10c5a:	83 ec 08             	sub    $0x8,%esp
   10c5d:	68 5b 24 01 00       	push   $0x1245b
   10c62:	ff 75 08             	push   0x8(%ebp)
   10c65:	e8 08 fe ff ff       	call   10a72 <do_default_handler>
   10c6a:	83 c4 10             	add    $0x10,%esp
}
   10c6d:	90                   	nop
   10c6e:	c9                   	leave  
   10c6f:	c3                   	ret    

00010c70 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10c70:	55                   	push   %ebp
   10c71:	89 e5                	mov    %esp,%ebp
   10c73:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   10c76:	83 ec 08             	sub    $0x8,%esp
   10c79:	68 6f 24 01 00       	push   $0x1246f
   10c7e:	ff 75 08             	push   0x8(%ebp)
   10c81:	e8 ec fd ff ff       	call   10a72 <do_default_handler>
   10c86:	83 c4 10             	add    $0x10,%esp
}
   10c89:	90                   	nop
   10c8a:	c9                   	leave  
   10c8b:	c3                   	ret    

00010c8c <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10c8c:	55                   	push   %ebp
   10c8d:	89 e5                	mov    %esp,%ebp
   10c8f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10c92:	83 ec 08             	sub    $0x8,%esp
   10c95:	68 89 24 01 00       	push   $0x12489
   10c9a:	ff 75 08             	push   0x8(%ebp)
   10c9d:	e8 d0 fd ff ff       	call   10a72 <do_default_handler>
   10ca2:	83 c4 10             	add    $0x10,%esp
}
   10ca5:	90                   	nop
   10ca6:	c9                   	leave  
   10ca7:	c3                   	ret    

00010ca8 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10ca8:	55                   	push   %ebp
   10ca9:	89 e5                	mov    %esp,%ebp
   10cab:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10cae:	83 ec 08             	sub    $0x8,%esp
   10cb1:	68 a1 24 01 00       	push   $0x124a1
   10cb6:	ff 75 08             	push   0x8(%ebp)
   10cb9:	e8 b4 fd ff ff       	call   10a72 <do_default_handler>
   10cbe:	83 c4 10             	add    $0x10,%esp
}
   10cc1:	90                   	nop
   10cc2:	c9                   	leave  
   10cc3:	c3                   	ret    

00010cc4 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   10cc4:	55                   	push   %ebp
   10cc5:	89 e5                	mov    %esp,%ebp
   10cc7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   10cca:	83 ec 08             	sub    $0x8,%esp
   10ccd:	68 b9 24 01 00       	push   $0x124b9
   10cd2:	ff 75 08             	push   0x8(%ebp)
   10cd5:	e8 98 fd ff ff       	call   10a72 <do_default_handler>
   10cda:	83 c4 10             	add    $0x10,%esp
}
   10cdd:	90                   	nop
   10cde:	c9                   	leave  
   10cdf:	c3                   	ret    

00010ce0 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   10ce0:	55                   	push   %ebp
   10ce1:	89 e5                	mov    %esp,%ebp
   10ce3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   10ce6:	83 ec 08             	sub    $0x8,%esp
   10ce9:	68 d5 24 01 00       	push   $0x124d5
   10cee:	ff 75 08             	push   0x8(%ebp)
   10cf1:	e8 7c fd ff ff       	call   10a72 <do_default_handler>
   10cf6:	83 c4 10             	add    $0x10,%esp
}
   10cf9:	90                   	nop
   10cfa:	c9                   	leave  
   10cfb:	c3                   	ret    

00010cfc <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10cfc:	55                   	push   %ebp
   10cfd:	89 e5                	mov    %esp,%ebp
   10cff:	83 ec 08             	sub    $0x8,%esp
   10d02:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d05:	8b 45 14             	mov    0x14(%ebp),%eax
   10d08:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d0c:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10d10:	8b 45 10             	mov    0x10(%ebp),%eax
   10d13:	89 c2                	mov    %eax,%edx
   10d15:	8b 45 08             	mov    0x8(%ebp),%eax
   10d18:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   10d1b:	8b 45 10             	mov    0x10(%ebp),%eax
   10d1e:	c1 e8 10             	shr    $0x10,%eax
   10d21:	89 c2                	mov    %eax,%edx
   10d23:	8b 45 08             	mov    0x8(%ebp),%eax
   10d26:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10d2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d31:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   10d35:	8b 45 08             	mov    0x8(%ebp),%eax
   10d38:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10d3c:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10d40:	90                   	nop
   10d41:	c9                   	leave  
   10d42:	c3                   	ret    

00010d43 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   10d43:	55                   	push   %ebp
   10d44:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   10d46:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   10d4d:	7f 06                	jg     10d55 <idt_install+0x12>
   10d4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d53:	79 07                	jns    10d5c <idt_install+0x19>
   10d55:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d5a:	eb 25                	jmp    10d81 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   10d5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5f:	8b 55 08             	mov    0x8(%ebp),%edx
   10d62:	c1 e2 03             	shl    $0x3,%edx
   10d65:	81 c2 60 29 02 00    	add    $0x22960,%edx
   10d6b:	68 00 8e 00 00       	push   $0x8e00
   10d70:	50                   	push   %eax
   10d71:	6a 08                	push   $0x8
   10d73:	52                   	push   %edx
   10d74:	e8 83 ff ff ff       	call   10cfc <gate_desc_set>
   10d79:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   10d7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d81:	c9                   	leave  
   10d82:	c3                   	ret    

00010d83 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   10d83:	55                   	push   %ebp
   10d84:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   10d86:	6a 11                	push   $0x11
   10d88:	6a 20                	push   $0x20
   10d8a:	e8 b1 fb ff ff       	call   10940 <outb>
   10d8f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   10d92:	6a 20                	push   $0x20
   10d94:	6a 21                	push   $0x21
   10d96:	e8 a5 fb ff ff       	call   10940 <outb>
   10d9b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   10d9e:	6a 04                	push   $0x4
   10da0:	6a 21                	push   $0x21
   10da2:	e8 99 fb ff ff       	call   10940 <outb>
   10da7:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   10daa:	6a 01                	push   $0x1
   10dac:	6a 21                	push   $0x21
   10dae:	e8 8d fb ff ff       	call   10940 <outb>
   10db3:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   10db6:	6a 11                	push   $0x11
   10db8:	68 a0 00 00 00       	push   $0xa0
   10dbd:	e8 7e fb ff ff       	call   10940 <outb>
   10dc2:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   10dc5:	6a 28                	push   $0x28
   10dc7:	68 a1 00 00 00       	push   $0xa1
   10dcc:	e8 6f fb ff ff       	call   10940 <outb>
   10dd1:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   10dd4:	6a 02                	push   $0x2
   10dd6:	68 a1 00 00 00       	push   $0xa1
   10ddb:	e8 60 fb ff ff       	call   10940 <outb>
   10de0:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   10de3:	6a 01                	push   $0x1
   10de5:	68 a1 00 00 00       	push   $0xa1
   10dea:	e8 51 fb ff ff       	call   10940 <outb>
   10def:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   10df2:	68 fb 00 00 00       	push   $0xfb
   10df7:	6a 21                	push   $0x21
   10df9:	e8 42 fb ff ff       	call   10940 <outb>
   10dfe:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   10e01:	68 ff 00 00 00       	push   $0xff
   10e06:	68 a1 00 00 00       	push   $0xa1
   10e0b:	e8 30 fb ff ff       	call   10940 <outb>
   10e10:	83 c4 08             	add    $0x8,%esp


}
   10e13:	90                   	nop
   10e14:	c9                   	leave  
   10e15:	c3                   	ret    

00010e16 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   10e16:	55                   	push   %ebp
   10e17:	89 e5                	mov    %esp,%ebp
   10e19:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10e1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10e23:	eb 14                	jmp    10e39 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   10e25:	68 2a 00 01 00       	push   $0x1002a
   10e2a:	ff 75 fc             	push   -0x4(%ebp)
   10e2d:	e8 11 ff ff ff       	call   10d43 <idt_install>
   10e32:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10e35:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10e39:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10e40:	7e e3                	jle    10e25 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10e42:	68 47 00 01 00       	push   $0x10047
   10e47:	6a 00                	push   $0x0
   10e49:	e8 f5 fe ff ff       	call   10d43 <idt_install>
   10e4e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10e51:	68 64 00 01 00       	push   $0x10064
   10e56:	6a 01                	push   $0x1
   10e58:	e8 e6 fe ff ff       	call   10d43 <idt_install>
   10e5d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   10e60:	68 81 00 01 00       	push   $0x10081
   10e65:	6a 02                	push   $0x2
   10e67:	e8 d7 fe ff ff       	call   10d43 <idt_install>
   10e6c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   10e6f:	68 9e 00 01 00       	push   $0x1009e
   10e74:	6a 03                	push   $0x3
   10e76:	e8 c8 fe ff ff       	call   10d43 <idt_install>
   10e7b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   10e7e:	68 bb 00 01 00       	push   $0x100bb
   10e83:	6a 04                	push   $0x4
   10e85:	e8 b9 fe ff ff       	call   10d43 <idt_install>
   10e8a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   10e8d:	68 d8 00 01 00       	push   $0x100d8
   10e92:	6a 05                	push   $0x5
   10e94:	e8 aa fe ff ff       	call   10d43 <idt_install>
   10e99:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   10e9c:	68 f5 00 01 00       	push   $0x100f5
   10ea1:	6a 06                	push   $0x6
   10ea3:	e8 9b fe ff ff       	call   10d43 <idt_install>
   10ea8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   10eab:	68 12 01 01 00       	push   $0x10112
   10eb0:	6a 07                	push   $0x7
   10eb2:	e8 8c fe ff ff       	call   10d43 <idt_install>
   10eb7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   10eba:	68 2f 01 01 00       	push   $0x1012f
   10ebf:	6a 08                	push   $0x8
   10ec1:	e8 7d fe ff ff       	call   10d43 <idt_install>
   10ec6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   10ec9:	68 4a 01 01 00       	push   $0x1014a
   10ece:	6a 0a                	push   $0xa
   10ed0:	e8 6e fe ff ff       	call   10d43 <idt_install>
   10ed5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   10ed8:	68 65 01 01 00       	push   $0x10165
   10edd:	6a 0b                	push   $0xb
   10edf:	e8 5f fe ff ff       	call   10d43 <idt_install>
   10ee4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   10ee7:	68 80 01 01 00       	push   $0x10180
   10eec:	6a 0c                	push   $0xc
   10eee:	e8 50 fe ff ff       	call   10d43 <idt_install>
   10ef3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   10ef6:	68 9b 01 01 00       	push   $0x1019b
   10efb:	6a 0d                	push   $0xd
   10efd:	e8 41 fe ff ff       	call   10d43 <idt_install>
   10f02:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   10f05:	68 b6 01 01 00       	push   $0x101b6
   10f0a:	6a 0e                	push   $0xe
   10f0c:	e8 32 fe ff ff       	call   10d43 <idt_install>
   10f11:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   10f14:	68 d1 01 01 00       	push   $0x101d1
   10f19:	6a 10                	push   $0x10
   10f1b:	e8 23 fe ff ff       	call   10d43 <idt_install>
   10f20:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10f23:	68 ee 01 01 00       	push   $0x101ee
   10f28:	6a 11                	push   $0x11
   10f2a:	e8 14 fe ff ff       	call   10d43 <idt_install>
   10f2f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10f32:	68 09 02 01 00       	push   $0x10209
   10f37:	6a 12                	push   $0x12
   10f39:	e8 05 fe ff ff       	call   10d43 <idt_install>
   10f3e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10f41:	68 26 02 01 00       	push   $0x10226
   10f46:	6a 13                	push   $0x13
   10f48:	e8 f6 fd ff ff       	call   10d43 <idt_install>
   10f4d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10f50:	68 43 02 01 00       	push   $0x10243
   10f55:	6a 14                	push   $0x14
   10f57:	e8 e7 fd ff ff       	call   10d43 <idt_install>
   10f5c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   10f5f:	68 60 02 01 00       	push   $0x10260
   10f64:	6a 15                	push   $0x15
   10f66:	e8 d8 fd ff ff       	call   10d43 <idt_install>
   10f6b:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   10f6e:	b8 60 29 02 00       	mov    $0x22960,%eax
   10f73:	68 00 08 00 00       	push   $0x800
   10f78:	50                   	push   %eax
   10f79:	e8 e3 f9 ff ff       	call   10961 <lidt>
   10f7e:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   10f81:	e8 fd fd ff ff       	call   10d83 <init_pic>
}
   10f86:	90                   	nop
   10f87:	c9                   	leave  
   10f88:	c3                   	ret    

00010f89 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   10f89:	55                   	push   %ebp
   10f8a:	89 e5                	mov    %esp,%ebp
   10f8c:	53                   	push   %ebx
   10f8d:	83 ec 14             	sub    $0x14,%esp
   10f90:	8b 45 08             	mov    0x8(%ebp),%eax
   10f93:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10f96:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10f9a:	76 7f                	jbe    1101b <idt_enable+0x92>
   10f9c:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   10fa0:	77 79                	ja     1101b <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10fa2:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10fa6:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10faa:	77 33                	ja     10fdf <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10fac:	6a 21                	push   $0x21
   10fae:	e8 70 f9 ff ff       	call   10923 <inb>
   10fb3:	83 c4 04             	add    $0x4,%esp
   10fb6:	89 c3                	mov    %eax,%ebx
   10fb8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10fbc:	ba 01 00 00 00       	mov    $0x1,%edx
   10fc1:	89 c1                	mov    %eax,%ecx
   10fc3:	d3 e2                	shl    %cl,%edx
   10fc5:	89 d0                	mov    %edx,%eax
   10fc7:	f7 d0                	not    %eax
   10fc9:	21 d8                	and    %ebx,%eax
   10fcb:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10fce:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10fd2:	50                   	push   %eax
   10fd3:	6a 21                	push   $0x21
   10fd5:	e8 66 f9 ff ff       	call   10940 <outb>
   10fda:	83 c4 08             	add    $0x8,%esp
   10fdd:	eb 3d                	jmp    1101c <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10fdf:	68 a1 00 00 00       	push   $0xa1
   10fe4:	e8 3a f9 ff ff       	call   10923 <inb>
   10fe9:	83 c4 04             	add    $0x4,%esp
   10fec:	89 c3                	mov    %eax,%ebx
   10fee:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10ff2:	83 e8 08             	sub    $0x8,%eax
   10ff5:	ba 01 00 00 00       	mov    $0x1,%edx
   10ffa:	89 c1                	mov    %eax,%ecx
   10ffc:	d3 e2                	shl    %cl,%edx
   10ffe:	89 d0                	mov    %edx,%eax
   11000:	f7 d0                	not    %eax
   11002:	21 d8                	and    %ebx,%eax
   11004:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11007:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1100b:	50                   	push   %eax
   1100c:	68 a1 00 00 00       	push   $0xa1
   11011:	e8 2a f9 ff ff       	call   10940 <outb>
   11016:	83 c4 08             	add    $0x8,%esp
   11019:	eb 01                	jmp    1101c <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1101b:	90                   	nop
  }
  
}
   1101c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1101f:	c9                   	leave  
   11020:	c3                   	ret    

00011021 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11021:	55                   	push   %ebp
   11022:	89 e5                	mov    %esp,%ebp
   11024:	53                   	push   %ebx
   11025:	83 ec 14             	sub    $0x14,%esp
   11028:	8b 45 08             	mov    0x8(%ebp),%eax
   1102b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1102e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11032:	76 7b                	jbe    110af <idt_disable+0x8e>
   11034:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11038:	77 75                	ja     110af <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1103a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1103e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11042:	77 31                	ja     11075 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11044:	6a 21                	push   $0x21
   11046:	e8 d8 f8 ff ff       	call   10923 <inb>
   1104b:	83 c4 04             	add    $0x4,%esp
   1104e:	89 c3                	mov    %eax,%ebx
   11050:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11054:	ba 01 00 00 00       	mov    $0x1,%edx
   11059:	89 c1                	mov    %eax,%ecx
   1105b:	d3 e2                	shl    %cl,%edx
   1105d:	89 d0                	mov    %edx,%eax
   1105f:	09 d8                	or     %ebx,%eax
   11061:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11064:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11068:	50                   	push   %eax
   11069:	6a 21                	push   $0x21
   1106b:	e8 d0 f8 ff ff       	call   10940 <outb>
   11070:	83 c4 08             	add    $0x8,%esp
   11073:	eb 3b                	jmp    110b0 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11075:	68 a1 00 00 00       	push   $0xa1
   1107a:	e8 a4 f8 ff ff       	call   10923 <inb>
   1107f:	83 c4 04             	add    $0x4,%esp
   11082:	89 c3                	mov    %eax,%ebx
   11084:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11088:	83 e8 08             	sub    $0x8,%eax
   1108b:	ba 01 00 00 00       	mov    $0x1,%edx
   11090:	89 c1                	mov    %eax,%ecx
   11092:	d3 e2                	shl    %cl,%edx
   11094:	89 d0                	mov    %edx,%eax
   11096:	09 d8                	or     %ebx,%eax
   11098:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1109b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1109f:	50                   	push   %eax
   110a0:	68 a1 00 00 00       	push   $0xa1
   110a5:	e8 96 f8 ff ff       	call   10940 <outb>
   110aa:	83 c4 08             	add    $0x8,%esp
   110ad:	eb 01                	jmp    110b0 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   110af:	90                   	nop
  }
  
}
   110b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   110b3:	c9                   	leave  
   110b4:	c3                   	ret    

000110b5 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   110b5:	55                   	push   %ebp
   110b6:	89 e5                	mov    %esp,%ebp
  cli();
   110b8:	e8 51 f8 ff ff       	call   1090e <cli>
}
   110bd:	90                   	nop
   110be:	5d                   	pop    %ebp
   110bf:	c3                   	ret    

000110c0 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   110c0:	55                   	push   %ebp
   110c1:	89 e5                	mov    %esp,%ebp
  sti();
   110c3:	e8 4d f8 ff ff       	call   10915 <sti>
}
   110c8:	90                   	nop
   110c9:	5d                   	pop    %ebp
   110ca:	c3                   	ret    

000110cb <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   110cb:	55                   	push   %ebp
   110cc:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   110ce:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   110d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110d6:	78 29                	js     11101 <pic_send_eoi+0x36>
   110d8:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   110dc:	7f 23                	jg     11101 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   110de:	6a 20                	push   $0x20
   110e0:	6a 20                	push   $0x20
   110e2:	e8 59 f8 ff ff       	call   10940 <outb>
   110e7:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   110ea:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   110ee:	7e 12                	jle    11102 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   110f0:	6a 20                	push   $0x20
   110f2:	68 a0 00 00 00       	push   $0xa0
   110f7:	e8 44 f8 ff ff       	call   10940 <outb>
   110fc:	83 c4 08             	add    $0x8,%esp
   110ff:	eb 01                	jmp    11102 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11101:	90                   	nop
  }

   11102:	c9                   	leave  
   11103:	c3                   	ret    

00011104 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11104:	55                   	push   %ebp
   11105:	89 e5                	mov    %esp,%ebp
   11107:	83 ec 08             	sub    $0x8,%esp
   1110a:	8b 45 08             	mov    0x8(%ebp),%eax
   1110d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11110:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11114:	89 d0                	mov    %edx,%eax
   11116:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11119:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1111d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11121:	ee                   	out    %al,(%dx)
}
   11122:	90                   	nop
   11123:	c9                   	leave  
   11124:	c3                   	ret    

00011125 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11125:	55                   	push   %ebp
   11126:	89 e5                	mov    %esp,%ebp
   11128:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1112b:	a1 60 31 02 00       	mov    0x23160,%eax
   11130:	83 c0 01             	add    $0x1,%eax
   11133:	a3 60 31 02 00       	mov    %eax,0x23160

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11138:	83 ec 0c             	sub    $0xc,%esp
   1113b:	6a 20                	push   $0x20
   1113d:	e8 89 ff ff ff       	call   110cb <pic_send_eoi>
   11142:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    task_slice_end();
   11145:	e8 ca f5 ff ff       	call   10714 <task_slice_end>
}
   1114a:	90                   	nop
   1114b:	c9                   	leave  
   1114c:	c3                   	ret    

0001114d <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1114d:	55                   	push   %ebp
   1114e:	89 e5                	mov    %esp,%ebp
   11150:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11153:	6a 36                	push   $0x36
   11155:	6a 43                	push   $0x43
   11157:	e8 a8 ff ff ff       	call   11104 <outb>
   1115c:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   1115f:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11165:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11169:	0f b6 c0             	movzbl %al,%eax
   1116c:	50                   	push   %eax
   1116d:	6a 40                	push   $0x40
   1116f:	e8 90 ff ff ff       	call   11104 <outb>
   11174:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11177:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1117b:	66 c1 e8 08          	shr    $0x8,%ax
   1117f:	0f b6 c0             	movzbl %al,%eax
   11182:	50                   	push   %eax
   11183:	6a 40                	push   $0x40
   11185:	e8 7a ff ff ff       	call   11104 <outb>
   1118a:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1118d:	83 ec 08             	sub    $0x8,%esp
   11190:	68 7b 02 01 00       	push   $0x1027b
   11195:	6a 20                	push   $0x20
   11197:	e8 a7 fb ff ff       	call   10d43 <idt_install>
   1119c:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1119f:	83 ec 0c             	sub    $0xc,%esp
   111a2:	6a 20                	push   $0x20
   111a4:	e8 e0 fd ff ff       	call   10f89 <idt_enable>
   111a9:	83 c4 10             	add    $0x10,%esp

}
   111ac:	90                   	nop
   111ad:	c9                   	leave  
   111ae:	c3                   	ret    

000111af <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   111af:	55                   	push   %ebp
   111b0:	89 e5                	mov    %esp,%ebp
   111b2:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   111b5:	c7 05 60 31 02 00 00 	movl   $0x0,0x23160
   111bc:	00 00 00 
    init_pit();
   111bf:	e8 89 ff ff ff       	call   1114d <init_pit>
   111c4:	90                   	nop
   111c5:	c9                   	leave  
   111c6:	c3                   	ret    

000111c7 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   111c7:	55                   	push   %ebp
   111c8:	89 e5                	mov    %esp,%ebp
   111ca:	fb                   	sti    
   111cb:	90                   	nop
   111cc:	5d                   	pop    %ebp
   111cd:	c3                   	ret    

000111ce <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   111ce:	55                   	push   %ebp
   111cf:	89 e5                	mov    %esp,%ebp
   111d1:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   111d4:	8b 45 08             	mov    0x8(%ebp),%eax
   111d7:	8b 40 50             	mov    0x50(%eax),%eax
   111da:	85 c0                	test   %eax,%eax
   111dc:	75 19                	jne    111f7 <kernel_init+0x29>
   111de:	68 f4 24 01 00       	push   $0x124f4
   111e3:	68 a8 25 01 00       	push   $0x125a8
   111e8:	6a 1f                	push   $0x1f
   111ea:	68 18 25 01 00       	push   $0x12518
   111ef:	e8 77 04 00 00       	call   1166b <pannic>
   111f4:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   111f7:	e8 70 0d 00 00       	call   11f6c <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   111fc:	e8 59 f6 ff ff       	call   1085a <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   11201:	e8 10 fc ff ff       	call   10e16 <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   11206:	e8 a4 ff ff ff       	call   111af <time_init>

    //6.初始化任务管理器
    task_manager_init();
   1120b:	e8 79 f3 ff ff       	call   10589 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11210:	90                   	nop
   11211:	c9                   	leave  
   11212:	c3                   	ret    

00011213 <test_task>:

static task_t task_test_task;
static uint32_t test_task_stack[1024]; 

void test_task(void) {
   11213:	55                   	push   %ebp
   11214:	89 e5                	mov    %esp,%ebp
   11216:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11219:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_1: %d", count++);
   11220:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11223:	8d 50 01             	lea    0x1(%eax),%edx
   11226:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11229:	83 ec 08             	sub    $0x8,%esp
   1122c:	50                   	push   %eax
   1122d:	68 4d 25 01 00       	push   $0x1254d
   11232:	e8 aa 0d 00 00       	call   11fe1 <log_printf>
   11237:	83 c4 10             	add    $0x10,%esp
   1123a:	eb e4                	jmp    11220 <test_task+0xd>

0001123c <init_main>:
     }
}



void init_main(void) {
   1123c:	55                   	push   %ebp
   1123d:	89 e5                	mov    %esp,%ebp
   1123f:	83 ec 18             	sub    $0x18,%esp


    list_test();
   11242:	e8 42 01 00 00       	call   11389 <list_test>

    log_printf("Kernel is running......");
   11247:	83 ec 0c             	sub    $0xc,%esp
   1124a:	68 58 25 01 00       	push   $0x12558
   1124f:	e8 8d 0d 00 00       	call   11fe1 <log_printf>
   11254:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11257:	83 ec 04             	sub    $0x4,%esp
   1125a:	68 70 25 01 00       	push   $0x12570
   1125f:	68 76 25 01 00       	push   $0x12576
   11264:	68 7b 25 01 00       	push   $0x1257b
   11269:	e8 73 0d 00 00       	call   11fe1 <log_printf>
   1126e:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11271:	e8 46 f3 ff ff       	call   105bc <task_first_init>
    task_init(&task_test_task, "test_task", (uint32_t)test_task, (uint32_t)&test_task_stack[1024]);
   11276:	ba 40 42 02 00       	mov    $0x24240,%edx
   1127b:	b8 13 12 01 00       	mov    $0x11213,%eax
   11280:	52                   	push   %edx
   11281:	50                   	push   %eax
   11282:	68 91 25 01 00       	push   $0x12591
   11287:	68 80 31 02 00       	push   $0x23180
   1128c:	e8 46 f2 ff ff       	call   104d7 <task_init>
   11291:	83 c4 10             	add    $0x10,%esp


    sti();
   11294:	e8 2e ff ff ff       	call   111c7 <sti>

    int count = 0;
   11299:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("task_2: %d", count++);
   112a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112a3:	8d 50 01             	lea    0x1(%eax),%edx
   112a6:	89 55 f4             	mov    %edx,-0xc(%ebp)
   112a9:	83 ec 08             	sub    $0x8,%esp
   112ac:	50                   	push   %eax
   112ad:	68 9b 25 01 00       	push   $0x1259b
   112b2:	e8 2a 0d 00 00       	call   11fe1 <log_printf>
   112b7:	83 c4 10             	add    $0x10,%esp
   112ba:	eb e4                	jmp    112a0 <init_main+0x64>

000112bc <list_init>:
static inline void list_init(list_t *list) {
   112bc:	55                   	push   %ebp
   112bd:	89 e5                	mov    %esp,%ebp
   112bf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   112c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112c6:	75 19                	jne    112e1 <list_init+0x25>
   112c8:	68 b4 25 01 00       	push   $0x125b4
   112cd:	68 b8 26 01 00       	push   $0x126b8
   112d2:	6a 31                	push   $0x31
   112d4:	68 c8 25 01 00       	push   $0x125c8
   112d9:	e8 8d 03 00 00       	call   1166b <pannic>
   112de:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   112e1:	8b 45 08             	mov    0x8(%ebp),%eax
   112e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   112eb:	8b 45 08             	mov    0x8(%ebp),%eax
   112ee:	8b 50 04             	mov    0x4(%eax),%edx
   112f1:	8b 45 08             	mov    0x8(%ebp),%eax
   112f4:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   112f6:	8b 45 08             	mov    0x8(%ebp),%eax
   112f9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11300:	90                   	nop
   11301:	c9                   	leave  
   11302:	c3                   	ret    

00011303 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11303:	55                   	push   %ebp
   11304:	89 e5                	mov    %esp,%ebp
   11306:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11309:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1130d:	75 19                	jne    11328 <list_get_size+0x25>
   1130f:	68 b4 25 01 00       	push   $0x125b4
   11314:	68 c4 26 01 00       	push   $0x126c4
   11319:	6a 3e                	push   $0x3e
   1131b:	68 c8 25 01 00       	push   $0x125c8
   11320:	e8 46 03 00 00       	call   1166b <pannic>
   11325:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11328:	8b 45 08             	mov    0x8(%ebp),%eax
   1132b:	8b 40 08             	mov    0x8(%eax),%eax
}
   1132e:	c9                   	leave  
   1132f:	c3                   	ret    

00011330 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11330:	55                   	push   %ebp
   11331:	89 e5                	mov    %esp,%ebp
   11333:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11336:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1133a:	75 19                	jne    11355 <list_get_first+0x25>
   1133c:	68 b4 25 01 00       	push   $0x125b4
   11341:	68 e4 26 01 00       	push   $0x126e4
   11346:	6a 44                	push   $0x44
   11348:	68 c8 25 01 00       	push   $0x125c8
   1134d:	e8 19 03 00 00       	call   1166b <pannic>
   11352:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11355:	8b 45 08             	mov    0x8(%ebp),%eax
   11358:	8b 00                	mov    (%eax),%eax
}
   1135a:	c9                   	leave  
   1135b:	c3                   	ret    

0001135c <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1135c:	55                   	push   %ebp
   1135d:	89 e5                	mov    %esp,%ebp
   1135f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11362:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11366:	75 19                	jne    11381 <list_get_last+0x25>
   11368:	68 b4 25 01 00       	push   $0x125b4
   1136d:	68 d4 26 01 00       	push   $0x126d4
   11372:	6a 4a                	push   $0x4a
   11374:	68 c8 25 01 00       	push   $0x125c8
   11379:	e8 ed 02 00 00       	call   1166b <pannic>
   1137e:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11381:	8b 45 08             	mov    0x8(%ebp),%eax
   11384:	8b 40 04             	mov    0x4(%eax),%eax
}
   11387:	c9                   	leave  
   11388:	c3                   	ret    

00011389 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11389:	55                   	push   %ebp
   1138a:	89 e5                	mov    %esp,%ebp
   1138c:	56                   	push   %esi
   1138d:	53                   	push   %ebx
   1138e:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11391:	83 ec 0c             	sub    $0xc,%esp
   11394:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11397:	50                   	push   %eax
   11398:	e8 1f ff ff ff       	call   112bc <list_init>
   1139d:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   113a0:	83 ec 0c             	sub    $0xc,%esp
   113a3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   113a6:	50                   	push   %eax
   113a7:	e8 57 ff ff ff       	call   11303 <list_get_size>
   113ac:	83 c4 10             	add    $0x10,%esp
   113af:	89 c6                	mov    %eax,%esi
   113b1:	83 ec 0c             	sub    $0xc,%esp
   113b4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   113b7:	50                   	push   %eax
   113b8:	e8 9f ff ff ff       	call   1135c <list_get_last>
   113bd:	83 c4 10             	add    $0x10,%esp
   113c0:	89 c3                	mov    %eax,%ebx
   113c2:	83 ec 0c             	sub    $0xc,%esp
   113c5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   113c8:	50                   	push   %eax
   113c9:	e8 62 ff ff ff       	call   11330 <list_get_first>
   113ce:	83 c4 10             	add    $0x10,%esp
   113d1:	56                   	push   %esi
   113d2:	53                   	push   %ebx
   113d3:	50                   	push   %eax
   113d4:	68 08 26 01 00       	push   $0x12608
   113d9:	e8 03 0c 00 00       	call   11fe1 <log_printf>
   113de:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   113e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   113e8:	eb 3f                	jmp    11429 <list_test+0xa0>
        list_node_t *node = nodes + i;
   113ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   113f4:	8d 45 9c             	lea    -0x64(%ebp),%eax
   113f7:	01 d0                	add    %edx,%eax
   113f9:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   113fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
   113ff:	83 ec 04             	sub    $0x4,%esp
   11402:	50                   	push   %eax
   11403:	ff 75 f4             	push   -0xc(%ebp)
   11406:	68 30 26 01 00       	push   $0x12630
   1140b:	e8 d1 0b 00 00       	call   11fe1 <log_printf>
   11410:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11413:	83 ec 08             	sub    $0x8,%esp
   11416:	ff 75 d0             	push   -0x30(%ebp)
   11419:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1141c:	50                   	push   %eax
   1141d:	e8 c3 07 00 00       	call   11be5 <list_insert_first>
   11422:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11425:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11429:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1142d:	7e bb                	jle    113ea <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1142f:	83 ec 0c             	sub    $0xc,%esp
   11432:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11435:	50                   	push   %eax
   11436:	e8 c8 fe ff ff       	call   11303 <list_get_size>
   1143b:	83 c4 10             	add    $0x10,%esp
   1143e:	89 c6                	mov    %eax,%esi
   11440:	83 ec 0c             	sub    $0xc,%esp
   11443:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11446:	50                   	push   %eax
   11447:	e8 10 ff ff ff       	call   1135c <list_get_last>
   1144c:	83 c4 10             	add    $0x10,%esp
   1144f:	89 c3                	mov    %eax,%ebx
   11451:	83 ec 0c             	sub    $0xc,%esp
   11454:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11457:	50                   	push   %eax
   11458:	e8 d3 fe ff ff       	call   11330 <list_get_first>
   1145d:	83 c4 10             	add    $0x10,%esp
   11460:	56                   	push   %esi
   11461:	53                   	push   %ebx
   11462:	50                   	push   %eax
   11463:	68 08 26 01 00       	push   $0x12608
   11468:	e8 74 0b 00 00       	call   11fe1 <log_printf>
   1146d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11470:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11477:	eb 2d                	jmp    114a6 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11479:	83 ec 0c             	sub    $0xc,%esp
   1147c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1147f:	50                   	push   %eax
   11480:	e8 7a 08 00 00       	call   11cff <list_remove_first>
   11485:	83 c4 10             	add    $0x10,%esp
   11488:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   1148b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1148e:	83 ec 04             	sub    $0x4,%esp
   11491:	50                   	push   %eax
   11492:	ff 75 f0             	push   -0x10(%ebp)
   11495:	68 4f 26 01 00       	push   $0x1264f
   1149a:	e8 42 0b 00 00       	call   11fe1 <log_printf>
   1149f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   114a2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   114a6:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   114aa:	7e cd                	jle    11479 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   114ac:	83 ec 0c             	sub    $0xc,%esp
   114af:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114b2:	50                   	push   %eax
   114b3:	e8 4b fe ff ff       	call   11303 <list_get_size>
   114b8:	83 c4 10             	add    $0x10,%esp
   114bb:	89 c6                	mov    %eax,%esi
   114bd:	83 ec 0c             	sub    $0xc,%esp
   114c0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114c3:	50                   	push   %eax
   114c4:	e8 93 fe ff ff       	call   1135c <list_get_last>
   114c9:	83 c4 10             	add    $0x10,%esp
   114cc:	89 c3                	mov    %eax,%ebx
   114ce:	83 ec 0c             	sub    $0xc,%esp
   114d1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114d4:	50                   	push   %eax
   114d5:	e8 56 fe ff ff       	call   11330 <list_get_first>
   114da:	83 c4 10             	add    $0x10,%esp
   114dd:	56                   	push   %esi
   114de:	53                   	push   %ebx
   114df:	50                   	push   %eax
   114e0:	68 08 26 01 00       	push   $0x12608
   114e5:	e8 f7 0a 00 00       	call   11fe1 <log_printf>
   114ea:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   114ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   114f4:	eb 3f                	jmp    11535 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   114f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114f9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11500:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11503:	01 d0                	add    %edx,%eax
   11505:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11508:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1150b:	83 ec 04             	sub    $0x4,%esp
   1150e:	50                   	push   %eax
   1150f:	ff 75 ec             	push   -0x14(%ebp)
   11512:	68 66 26 01 00       	push   $0x12666
   11517:	e8 c5 0a 00 00       	call   11fe1 <log_printf>
   1151c:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1151f:	83 ec 08             	sub    $0x8,%esp
   11522:	ff 75 d8             	push   -0x28(%ebp)
   11525:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11528:	50                   	push   %eax
   11529:	e8 42 07 00 00       	call   11c70 <list_insert_last>
   1152e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11531:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11535:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11539:	7e bb                	jle    114f6 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1153b:	83 ec 0c             	sub    $0xc,%esp
   1153e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11541:	50                   	push   %eax
   11542:	e8 bc fd ff ff       	call   11303 <list_get_size>
   11547:	83 c4 10             	add    $0x10,%esp
   1154a:	89 c6                	mov    %eax,%esi
   1154c:	83 ec 0c             	sub    $0xc,%esp
   1154f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11552:	50                   	push   %eax
   11553:	e8 04 fe ff ff       	call   1135c <list_get_last>
   11558:	83 c4 10             	add    $0x10,%esp
   1155b:	89 c3                	mov    %eax,%ebx
   1155d:	83 ec 0c             	sub    $0xc,%esp
   11560:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11563:	50                   	push   %eax
   11564:	e8 c7 fd ff ff       	call   11330 <list_get_first>
   11569:	83 c4 10             	add    $0x10,%esp
   1156c:	56                   	push   %esi
   1156d:	53                   	push   %ebx
   1156e:	50                   	push   %eax
   1156f:	68 08 26 01 00       	push   $0x12608
   11574:	e8 68 0a 00 00       	call   11fe1 <log_printf>
   11579:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   1157c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11583:	eb 2d                	jmp    115b2 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   11585:	83 ec 0c             	sub    $0xc,%esp
   11588:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1158b:	50                   	push   %eax
   1158c:	e8 1f 08 00 00       	call   11db0 <list_remove_last>
   11591:	83 c4 10             	add    $0x10,%esp
   11594:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   11597:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1159a:	83 ec 04             	sub    $0x4,%esp
   1159d:	50                   	push   %eax
   1159e:	ff 75 e8             	push   -0x18(%ebp)
   115a1:	68 84 26 01 00       	push   $0x12684
   115a6:	e8 36 0a 00 00       	call   11fe1 <log_printf>
   115ab:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   115ae:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   115b2:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   115b6:	7e cd                	jle    11585 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   115b8:	83 ec 0c             	sub    $0xc,%esp
   115bb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115be:	50                   	push   %eax
   115bf:	e8 3f fd ff ff       	call   11303 <list_get_size>
   115c4:	83 c4 10             	add    $0x10,%esp
   115c7:	89 c6                	mov    %eax,%esi
   115c9:	83 ec 0c             	sub    $0xc,%esp
   115cc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115cf:	50                   	push   %eax
   115d0:	e8 87 fd ff ff       	call   1135c <list_get_last>
   115d5:	83 c4 10             	add    $0x10,%esp
   115d8:	89 c3                	mov    %eax,%ebx
   115da:	83 ec 0c             	sub    $0xc,%esp
   115dd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115e0:	50                   	push   %eax
   115e1:	e8 4a fd ff ff       	call   11330 <list_get_first>
   115e6:	83 c4 10             	add    $0x10,%esp
   115e9:	56                   	push   %esi
   115ea:	53                   	push   %ebx
   115eb:	50                   	push   %eax
   115ec:	68 08 26 01 00       	push   $0x12608
   115f1:	e8 eb 09 00 00       	call   11fe1 <log_printf>
   115f6:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   115f9:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   11600:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   11607:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   1160e:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   11615:	8d 45 90             	lea    -0x70(%ebp),%eax
   11618:	83 c0 04             	add    $0x4,%eax
   1161b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   1161e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11622:	74 08                	je     1162c <list_test+0x2a3>
   11624:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11627:	83 e8 04             	sub    $0x4,%eax
   1162a:	eb 05                	jmp    11631 <list_test+0x2a8>
   1162c:	b8 00 00 00 00       	mov    $0x0,%eax
   11631:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   11634:	8d 45 90             	lea    -0x70(%ebp),%eax
   11637:	83 ec 08             	sub    $0x8,%esp
   1163a:	50                   	push   %eax
   1163b:	68 9a 26 01 00       	push   $0x1269a
   11640:	e8 9c 09 00 00       	call   11fe1 <log_printf>
   11645:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   11648:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1164b:	83 ec 08             	sub    $0x8,%esp
   1164e:	50                   	push   %eax
   1164f:	68 a8 26 01 00       	push   $0x126a8
   11654:	e8 88 09 00 00       	call   11fe1 <log_printf>
   11659:	83 c4 10             	add    $0x10,%esp

 }
   1165c:	90                   	nop
   1165d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11660:	5b                   	pop    %ebx
   11661:	5e                   	pop    %esi
   11662:	5d                   	pop    %ebp
   11663:	c3                   	ret    

00011664 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11664:	55                   	push   %ebp
   11665:	89 e5                	mov    %esp,%ebp
   11667:	f4                   	hlt    
   11668:	90                   	nop
   11669:	5d                   	pop    %ebp
   1166a:	c3                   	ret    

0001166b <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1166b:	55                   	push   %ebp
   1166c:	89 e5                	mov    %esp,%ebp
   1166e:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   11671:	83 ec 08             	sub    $0x8,%esp
   11674:	ff 75 14             	push   0x14(%ebp)
   11677:	68 f3 26 01 00       	push   $0x126f3
   1167c:	e8 60 09 00 00       	call   11fe1 <log_printf>
   11681:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   11684:	ff 75 10             	push   0x10(%ebp)
   11687:	ff 75 0c             	push   0xc(%ebp)
   1168a:	ff 75 08             	push   0x8(%ebp)
   1168d:	68 04 27 01 00       	push   $0x12704
   11692:	e8 4a 09 00 00       	call   11fe1 <log_printf>
   11697:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1169a:	e8 c5 ff ff ff       	call   11664 <hlt>
   1169f:	eb f9                	jmp    1169a <pannic+0x2f>

000116a1 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   116a1:	55                   	push   %ebp
   116a2:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   116a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116a8:	74 3b                	je     116e5 <kernel_strcpy+0x44>
   116aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116ae:	74 35                	je     116e5 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   116b0:	eb 17                	jmp    116c9 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   116b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   116b5:	8d 42 01             	lea    0x1(%edx),%eax
   116b8:	89 45 0c             	mov    %eax,0xc(%ebp)
   116bb:	8b 45 08             	mov    0x8(%ebp),%eax
   116be:	8d 48 01             	lea    0x1(%eax),%ecx
   116c1:	89 4d 08             	mov    %ecx,0x8(%ebp)
   116c4:	0f b6 12             	movzbl (%edx),%edx
   116c7:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   116c9:	8b 45 08             	mov    0x8(%ebp),%eax
   116cc:	0f b6 00             	movzbl (%eax),%eax
   116cf:	84 c0                	test   %al,%al
   116d1:	74 0a                	je     116dd <kernel_strcpy+0x3c>
   116d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d6:	0f b6 00             	movzbl (%eax),%eax
   116d9:	84 c0                	test   %al,%al
   116db:	75 d5                	jne    116b2 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   116dd:	8b 45 08             	mov    0x8(%ebp),%eax
   116e0:	c6 00 00             	movb   $0x0,(%eax)
   116e3:	eb 01                	jmp    116e6 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   116e5:	90                   	nop
    
}
   116e6:	5d                   	pop    %ebp
   116e7:	c3                   	ret    

000116e8 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   116e8:	55                   	push   %ebp
   116e9:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   116eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116ef:	74 45                	je     11736 <kernel_strncpy+0x4e>
   116f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116f5:	74 3f                	je     11736 <kernel_strncpy+0x4e>
   116f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   116fb:	74 39                	je     11736 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   116fd:	eb 17                	jmp    11716 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   116ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   11702:	8d 42 01             	lea    0x1(%edx),%eax
   11705:	89 45 0c             	mov    %eax,0xc(%ebp)
   11708:	8b 45 08             	mov    0x8(%ebp),%eax
   1170b:	8d 48 01             	lea    0x1(%eax),%ecx
   1170e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11711:	0f b6 12             	movzbl (%edx),%edx
   11714:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   11716:	8b 45 10             	mov    0x10(%ebp),%eax
   11719:	8d 50 ff             	lea    -0x1(%eax),%edx
   1171c:	89 55 10             	mov    %edx,0x10(%ebp)
   1171f:	83 f8 01             	cmp    $0x1,%eax
   11722:	7e 0a                	jle    1172e <kernel_strncpy+0x46>
   11724:	8b 45 0c             	mov    0xc(%ebp),%eax
   11727:	0f b6 00             	movzbl (%eax),%eax
   1172a:	84 c0                	test   %al,%al
   1172c:	75 d1                	jne    116ff <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   1172e:	8b 45 08             	mov    0x8(%ebp),%eax
   11731:	c6 00 00             	movb   $0x0,(%eax)
   11734:	eb 01                	jmp    11737 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11736:	90                   	nop
}
   11737:	5d                   	pop    %ebp
   11738:	c3                   	ret    

00011739 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   11739:	55                   	push   %ebp
   1173a:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   1173c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11740:	74 06                	je     11748 <kernel_strncmp+0xf>
   11742:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11746:	75 0f                	jne    11757 <kernel_strncmp+0x1e>
   11748:	b8 00 00 00 00       	mov    $0x0,%eax
   1174d:	eb 52                	jmp    117a1 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   1174f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11753:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11757:	8b 45 08             	mov    0x8(%ebp),%eax
   1175a:	0f b6 00             	movzbl (%eax),%eax
   1175d:	84 c0                	test   %al,%al
   1175f:	74 24                	je     11785 <kernel_strncmp+0x4c>
   11761:	8b 45 0c             	mov    0xc(%ebp),%eax
   11764:	0f b6 00             	movzbl (%eax),%eax
   11767:	84 c0                	test   %al,%al
   11769:	74 1a                	je     11785 <kernel_strncmp+0x4c>
   1176b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1176f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11773:	74 10                	je     11785 <kernel_strncmp+0x4c>
   11775:	8b 45 08             	mov    0x8(%ebp),%eax
   11778:	0f b6 10             	movzbl (%eax),%edx
   1177b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1177e:	0f b6 00             	movzbl (%eax),%eax
   11781:	38 c2                	cmp    %al,%dl
   11783:	74 ca                	je     1174f <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11785:	8b 45 08             	mov    0x8(%ebp),%eax
   11788:	0f b6 10             	movzbl (%eax),%edx
   1178b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1178e:	0f b6 00             	movzbl (%eax),%eax
   11791:	38 c2                	cmp    %al,%dl
   11793:	7e 07                	jle    1179c <kernel_strncmp+0x63>
   11795:	b8 01 00 00 00       	mov    $0x1,%eax
   1179a:	eb 05                	jmp    117a1 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   1179c:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   117a1:	5d                   	pop    %ebp
   117a2:	c3                   	ret    

000117a3 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   117a3:	55                   	push   %ebp
   117a4:	89 e5                	mov    %esp,%ebp
   117a6:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   117a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117ad:	75 07                	jne    117b6 <kernel_strlen+0x13>
   117af:	b8 00 00 00 00       	mov    $0x0,%eax
   117b4:	eb 20                	jmp    117d6 <kernel_strlen+0x33>

    int len = 0;
   117b6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   117bd:	eb 04                	jmp    117c3 <kernel_strlen+0x20>
   117bf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   117c3:	8b 45 08             	mov    0x8(%ebp),%eax
   117c6:	8d 50 01             	lea    0x1(%eax),%edx
   117c9:	89 55 08             	mov    %edx,0x8(%ebp)
   117cc:	0f b6 00             	movzbl (%eax),%eax
   117cf:	84 c0                	test   %al,%al
   117d1:	75 ec                	jne    117bf <kernel_strlen+0x1c>

    return len;
   117d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   117d6:	c9                   	leave  
   117d7:	c3                   	ret    

000117d8 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   117d8:	55                   	push   %ebp
   117d9:	89 e5                	mov    %esp,%ebp
   117db:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   117de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117e2:	74 40                	je     11824 <kernel_memcpy+0x4c>
   117e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117e8:	74 3a                	je     11824 <kernel_memcpy+0x4c>
   117ea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   117ee:	74 34                	je     11824 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   117f0:	8b 45 08             	mov    0x8(%ebp),%eax
   117f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   117f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   117f9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   117fc:	eb 17                	jmp    11815 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   117fe:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11801:	8d 42 01             	lea    0x1(%edx),%eax
   11804:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11807:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1180a:	8d 48 01             	lea    0x1(%eax),%ecx
   1180d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11810:	0f b6 12             	movzbl (%edx),%edx
   11813:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11815:	8b 45 10             	mov    0x10(%ebp),%eax
   11818:	8d 50 ff             	lea    -0x1(%eax),%edx
   1181b:	89 55 10             	mov    %edx,0x10(%ebp)
   1181e:	85 c0                	test   %eax,%eax
   11820:	75 dc                	jne    117fe <kernel_memcpy+0x26>
   11822:	eb 01                	jmp    11825 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   11824:	90                   	nop
    }
    
}
   11825:	c9                   	leave  
   11826:	c3                   	ret    

00011827 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   11827:	55                   	push   %ebp
   11828:	89 e5                	mov    %esp,%ebp
   1182a:	83 ec 14             	sub    $0x14,%esp
   1182d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11830:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11833:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11837:	74 2c                	je     11865 <kernel_memset+0x3e>
   11839:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1183d:	74 26                	je     11865 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   1183f:	8b 45 08             	mov    0x8(%ebp),%eax
   11842:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   11845:	eb 0f                	jmp    11856 <kernel_memset+0x2f>
        *(d++) = v;
   11847:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1184a:	8d 50 01             	lea    0x1(%eax),%edx
   1184d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11850:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11854:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11856:	8b 45 10             	mov    0x10(%ebp),%eax
   11859:	8d 50 ff             	lea    -0x1(%eax),%edx
   1185c:	89 55 10             	mov    %edx,0x10(%ebp)
   1185f:	85 c0                	test   %eax,%eax
   11861:	75 e4                	jne    11847 <kernel_memset+0x20>
   11863:	eb 01                	jmp    11866 <kernel_memset+0x3f>
    if (!dest || !size) return;
   11865:	90                   	nop
    }
    
}
   11866:	c9                   	leave  
   11867:	c3                   	ret    

00011868 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   11868:	55                   	push   %ebp
   11869:	89 e5                	mov    %esp,%ebp
   1186b:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   1186e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11872:	74 0c                	je     11880 <kernel_memcmp+0x18>
   11874:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11878:	74 06                	je     11880 <kernel_memcmp+0x18>
   1187a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1187e:	75 07                	jne    11887 <kernel_memcmp+0x1f>
   11880:	b8 00 00 00 00       	mov    $0x0,%eax
   11885:	eb 63                	jmp    118ea <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   11887:	8b 45 08             	mov    0x8(%ebp),%eax
   1188a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1188d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11890:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11893:	eb 08                	jmp    1189d <kernel_memcmp+0x35>
        d1++;
   11895:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   11899:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   1189d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   118a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   118a5:	74 10                	je     118b7 <kernel_memcmp+0x4f>
   118a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118aa:	0f b6 10             	movzbl (%eax),%edx
   118ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   118b0:	0f b6 00             	movzbl (%eax),%eax
   118b3:	38 c2                	cmp    %al,%dl
   118b5:	74 de                	je     11895 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   118b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118ba:	0f b6 10             	movzbl (%eax),%edx
   118bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   118c0:	0f b6 00             	movzbl (%eax),%eax
   118c3:	38 c2                	cmp    %al,%dl
   118c5:	76 07                	jbe    118ce <kernel_memcmp+0x66>
   118c7:	b8 01 00 00 00       	mov    $0x1,%eax
   118cc:	eb 1c                	jmp    118ea <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   118ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118d1:	0f b6 10             	movzbl (%eax),%edx
   118d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   118d7:	0f b6 00             	movzbl (%eax),%eax
   118da:	38 c2                	cmp    %al,%dl
   118dc:	73 07                	jae    118e5 <kernel_memcmp+0x7d>
   118de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   118e3:	eb 05                	jmp    118ea <kernel_memcmp+0x82>
    else return 0;
   118e5:	b8 00 00 00 00       	mov    $0x0,%eax

}
   118ea:	c9                   	leave  
   118eb:	c3                   	ret    

000118ec <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   118ec:	55                   	push   %ebp
   118ed:	89 e5                	mov    %esp,%ebp
   118ef:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   118f2:	8d 45 10             	lea    0x10(%ebp),%eax
   118f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   118f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118fb:	83 ec 04             	sub    $0x4,%esp
   118fe:	50                   	push   %eax
   118ff:	ff 75 0c             	push   0xc(%ebp)
   11902:	ff 75 08             	push   0x8(%ebp)
   11905:	e8 06 00 00 00       	call   11910 <kernel_vsprintf>
   1190a:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1190d:	90                   	nop
   1190e:	c9                   	leave  
   1190f:	c3                   	ret    

00011910 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   11910:	55                   	push   %ebp
   11911:	89 e5                	mov    %esp,%ebp
   11913:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   11916:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   1191d:	8b 45 08             	mov    0x8(%ebp),%eax
   11920:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11923:	e9 68 01 00 00       	jmp    11a90 <kernel_vsprintf+0x180>
        switch (state) {
   11928:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1192c:	74 0b                	je     11939 <kernel_vsprintf+0x29>
   1192e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11932:	74 2b                	je     1195f <kernel_vsprintf+0x4f>
   11934:	e9 56 01 00 00       	jmp    11a8f <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   11939:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   1193d:	75 0c                	jne    1194b <kernel_vsprintf+0x3b>
   1193f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11946:	e9 45 01 00 00       	jmp    11a90 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   1194b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1194e:	8d 50 01             	lea    0x1(%eax),%edx
   11951:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11954:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11958:	88 10                	mov    %dl,(%eax)
            break;
   1195a:	e9 31 01 00 00       	jmp    11a90 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   1195f:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11963:	75 47                	jne    119ac <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11965:	8b 45 10             	mov    0x10(%ebp),%eax
   11968:	8d 50 04             	lea    0x4(%eax),%edx
   1196b:	89 55 10             	mov    %edx,0x10(%ebp)
   1196e:	8b 00                	mov    (%eax),%eax
   11970:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11973:	ff 75 ec             	push   -0x14(%ebp)
   11976:	e8 28 fe ff ff       	call   117a3 <kernel_strlen>
   1197b:	83 c4 04             	add    $0x4,%esp
   1197e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11981:	eb 17                	jmp    1199a <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11983:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11986:	8d 42 01             	lea    0x1(%edx),%eax
   11989:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1198c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1198f:	8d 48 01             	lea    0x1(%eax),%ecx
   11992:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11995:	0f b6 12             	movzbl (%edx),%edx
   11998:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1199a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1199d:	8d 50 ff             	lea    -0x1(%eax),%edx
   119a0:	89 55 e8             	mov    %edx,-0x18(%ebp)
   119a3:	85 c0                	test   %eax,%eax
   119a5:	75 dc                	jne    11983 <kernel_vsprintf+0x73>
   119a7:	e9 da 00 00 00       	jmp    11a86 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   119ac:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   119b0:	75 37                	jne    119e9 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   119b2:	8b 45 10             	mov    0x10(%ebp),%eax
   119b5:	8d 50 04             	lea    0x4(%eax),%edx
   119b8:	89 55 10             	mov    %edx,0x10(%ebp)
   119bb:	8b 00                	mov    (%eax),%eax
   119bd:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   119c0:	83 ec 04             	sub    $0x4,%esp
   119c3:	6a 0a                	push   $0xa
   119c5:	ff 75 d8             	push   -0x28(%ebp)
   119c8:	ff 75 f0             	push   -0x10(%ebp)
   119cb:	e8 dd 00 00 00       	call   11aad <kernel_itoa>
   119d0:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   119d3:	83 ec 0c             	sub    $0xc,%esp
   119d6:	ff 75 f0             	push   -0x10(%ebp)
   119d9:	e8 c5 fd ff ff       	call   117a3 <kernel_strlen>
   119de:	83 c4 10             	add    $0x10,%esp
   119e1:	01 45 f0             	add    %eax,-0x10(%ebp)
   119e4:	e9 9d 00 00 00       	jmp    11a86 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   119e9:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   119ed:	74 06                	je     119f5 <kernel_vsprintf+0xe5>
   119ef:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   119f3:	75 34                	jne    11a29 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   119f5:	8b 45 10             	mov    0x10(%ebp),%eax
   119f8:	8d 50 04             	lea    0x4(%eax),%edx
   119fb:	89 55 10             	mov    %edx,0x10(%ebp)
   119fe:	8b 00                	mov    (%eax),%eax
   11a00:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   11a03:	83 ec 04             	sub    $0x4,%esp
   11a06:	6a 10                	push   $0x10
   11a08:	ff 75 dc             	push   -0x24(%ebp)
   11a0b:	ff 75 f0             	push   -0x10(%ebp)
   11a0e:	e8 9a 00 00 00       	call   11aad <kernel_itoa>
   11a13:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11a16:	83 ec 0c             	sub    $0xc,%esp
   11a19:	ff 75 f0             	push   -0x10(%ebp)
   11a1c:	e8 82 fd ff ff       	call   117a3 <kernel_strlen>
   11a21:	83 c4 10             	add    $0x10,%esp
   11a24:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   11a27:	eb 5d                	jmp    11a86 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   11a29:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   11a2d:	75 34                	jne    11a63 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   11a2f:	8b 45 10             	mov    0x10(%ebp),%eax
   11a32:	8d 50 04             	lea    0x4(%eax),%edx
   11a35:	89 55 10             	mov    %edx,0x10(%ebp)
   11a38:	8b 00                	mov    (%eax),%eax
   11a3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   11a3d:	83 ec 04             	sub    $0x4,%esp
   11a40:	6a 02                	push   $0x2
   11a42:	ff 75 e0             	push   -0x20(%ebp)
   11a45:	ff 75 f0             	push   -0x10(%ebp)
   11a48:	e8 60 00 00 00       	call   11aad <kernel_itoa>
   11a4d:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11a50:	83 ec 0c             	sub    $0xc,%esp
   11a53:	ff 75 f0             	push   -0x10(%ebp)
   11a56:	e8 48 fd ff ff       	call   117a3 <kernel_strlen>
   11a5b:	83 c4 10             	add    $0x10,%esp
   11a5e:	01 45 f0             	add    %eax,-0x10(%ebp)
   11a61:	eb 23                	jmp    11a86 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11a63:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11a67:	75 1d                	jne    11a86 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   11a69:	8b 45 10             	mov    0x10(%ebp),%eax
   11a6c:	8d 50 04             	lea    0x4(%eax),%edx
   11a6f:	89 55 10             	mov    %edx,0x10(%ebp)
   11a72:	8b 00                	mov    (%eax),%eax
   11a74:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11a77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a7a:	8d 50 01             	lea    0x1(%eax),%edx
   11a7d:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11a80:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11a84:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11a86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   11a8d:	eb 01                	jmp    11a90 <kernel_vsprintf+0x180>
        default:
            break;
   11a8f:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   11a90:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a93:	8d 50 01             	lea    0x1(%eax),%edx
   11a96:	89 55 0c             	mov    %edx,0xc(%ebp)
   11a99:	0f b6 00             	movzbl (%eax),%eax
   11a9c:	88 45 e7             	mov    %al,-0x19(%ebp)
   11a9f:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11aa3:	0f 85 7f fe ff ff    	jne    11928 <kernel_vsprintf+0x18>
        }
    }
    

}
   11aa9:	90                   	nop
   11aaa:	90                   	nop
   11aab:	c9                   	leave  
   11aac:	c3                   	ret    

00011aad <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   11aad:	55                   	push   %ebp
   11aae:	89 e5                	mov    %esp,%ebp
   11ab0:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11ab6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   11abc:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11ac0:	74 1d                	je     11adf <kernel_itoa+0x32>
   11ac2:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11ac6:	74 17                	je     11adf <kernel_itoa+0x32>
   11ac8:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11acc:	74 11                	je     11adf <kernel_itoa+0x32>
   11ace:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11ad2:	74 0b                	je     11adf <kernel_itoa+0x32>
        *buf = '\0';
   11ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad7:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11ada:	e9 a2 00 00 00       	jmp    11b81 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   11adf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11ae3:	79 11                	jns    11af6 <kernel_itoa+0x49>
        *(p++) = '-';
   11ae5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ae8:	8d 50 01             	lea    0x1(%eax),%edx
   11aeb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11aee:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   11af1:	f7 5d 0c             	negl   0xc(%ebp)
   11af4:	eb 1a                	jmp    11b10 <kernel_itoa+0x63>
    } else if (num == 0) {
   11af6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11afa:	75 14                	jne    11b10 <kernel_itoa+0x63>
        *(p++) = '0';
   11afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11aff:	8d 50 01             	lea    0x1(%eax),%edx
   11b02:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b05:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   11b08:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b0b:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11b0e:	eb 71                	jmp    11b81 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   11b10:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   11b17:	eb 2e                	jmp    11b47 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   11b19:	8b 0d 7c 28 01 00    	mov    0x1287c,%ecx
   11b1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b22:	99                   	cltd   
   11b23:	f7 7d 10             	idivl  0x10(%ebp)
   11b26:	89 d0                	mov    %edx,%eax
   11b28:	01 c1                	add    %eax,%ecx
   11b2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b2d:	8d 50 01             	lea    0x1(%eax),%edx
   11b30:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b33:	0f b6 11             	movzbl (%ecx),%edx
   11b36:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   11b3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b40:	99                   	cltd   
   11b41:	f7 7d 10             	idivl  0x10(%ebp)
   11b44:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11b47:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b4b:	7f cc                	jg     11b19 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   11b4d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b50:	83 e8 01             	sub    $0x1,%eax
   11b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11b56:	eb 1d                	jmp    11b75 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   11b58:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b5b:	8d 50 01             	lea    0x1(%eax),%edx
   11b5e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b61:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11b67:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b6a:	01 ca                	add    %ecx,%edx
   11b6c:	0f b6 12             	movzbl (%edx),%edx
   11b6f:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   11b71:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11b75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11b79:	79 dd                	jns    11b58 <kernel_itoa+0xab>
    }
    *p = '\0';
   11b7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b7e:	c6 00 00             	movb   $0x0,(%eax)
   11b81:	c9                   	leave  
   11b82:	c3                   	ret    

00011b83 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11b83:	55                   	push   %ebp
   11b84:	89 e5                	mov    %esp,%ebp
   11b86:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b8d:	75 19                	jne    11ba8 <list_is_empty+0x25>
   11b8f:	68 30 27 01 00       	push   $0x12730
   11b94:	68 14 28 01 00       	push   $0x12814
   11b99:	6a 38                	push   $0x38
   11b9b:	68 44 27 01 00       	push   $0x12744
   11ba0:	e8 c6 fa ff ff       	call   1166b <pannic>
   11ba5:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11ba8:	8b 45 08             	mov    0x8(%ebp),%eax
   11bab:	8b 40 08             	mov    0x8(%eax),%eax
   11bae:	85 c0                	test   %eax,%eax
   11bb0:	0f 94 c0             	sete   %al
   11bb3:	0f b6 c0             	movzbl %al,%eax
}
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11bb8:	55                   	push   %ebp
   11bb9:	89 e5                	mov    %esp,%ebp
   11bbb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11bbe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bc2:	75 19                	jne    11bdd <list_get_size+0x25>
   11bc4:	68 30 27 01 00       	push   $0x12730
   11bc9:	68 4c 28 01 00       	push   $0x1284c
   11bce:	6a 3e                	push   $0x3e
   11bd0:	68 44 27 01 00       	push   $0x12744
   11bd5:	e8 91 fa ff ff       	call   1166b <pannic>
   11bda:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   11be0:	8b 40 08             	mov    0x8(%eax),%eax
}
   11be3:	c9                   	leave  
   11be4:	c3                   	ret    

00011be5 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   11be5:	55                   	push   %ebp
   11be6:	89 e5                	mov    %esp,%ebp
   11be8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11beb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bef:	74 06                	je     11bf7 <list_insert_first+0x12>
   11bf1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11bf5:	75 19                	jne    11c10 <list_insert_first+0x2b>
   11bf7:	68 84 27 01 00       	push   $0x12784
   11bfc:	68 00 28 01 00       	push   $0x12800
   11c01:	6a 0f                	push   $0xf
   11c03:	68 b4 27 01 00       	push   $0x127b4
   11c08:	e8 5e fa ff ff       	call   1166b <pannic>
   11c0d:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   11c10:	8b 45 08             	mov    0x8(%ebp),%eax
   11c13:	8b 10                	mov    (%eax),%edx
   11c15:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c18:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11c24:	83 ec 0c             	sub    $0xc,%esp
   11c27:	ff 75 08             	push   0x8(%ebp)
   11c2a:	e8 54 ff ff ff       	call   11b83 <list_is_empty>
   11c2f:	83 c4 10             	add    $0x10,%esp
   11c32:	85 c0                	test   %eax,%eax
   11c34:	74 16                	je     11c4c <list_insert_first+0x67>
        list->first = list->last = node;
   11c36:	8b 45 08             	mov    0x8(%ebp),%eax
   11c39:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c3c:	89 50 04             	mov    %edx,0x4(%eax)
   11c3f:	8b 45 08             	mov    0x8(%ebp),%eax
   11c42:	8b 50 04             	mov    0x4(%eax),%edx
   11c45:	8b 45 08             	mov    0x8(%ebp),%eax
   11c48:	89 10                	mov    %edx,(%eax)
   11c4a:	eb 12                	jmp    11c5e <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   11c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4f:	8b 00                	mov    (%eax),%eax
   11c51:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c54:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11c56:	8b 45 08             	mov    0x8(%ebp),%eax
   11c59:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c5c:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   11c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c61:	8b 40 08             	mov    0x8(%eax),%eax
   11c64:	8d 50 01             	lea    0x1(%eax),%edx
   11c67:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6a:	89 50 08             	mov    %edx,0x8(%eax)
}
   11c6d:	90                   	nop
   11c6e:	c9                   	leave  
   11c6f:	c3                   	ret    

00011c70 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11c70:	55                   	push   %ebp
   11c71:	89 e5                	mov    %esp,%ebp
   11c73:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11c76:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c7a:	74 06                	je     11c82 <list_insert_last+0x12>
   11c7c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c80:	75 19                	jne    11c9b <list_insert_last+0x2b>
   11c82:	68 84 27 01 00       	push   $0x12784
   11c87:	68 24 28 01 00       	push   $0x12824
   11c8c:	6a 1f                	push   $0x1f
   11c8e:	68 b4 27 01 00       	push   $0x127b4
   11c93:	e8 d3 f9 ff ff       	call   1166b <pannic>
   11c98:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   11c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9e:	8b 50 04             	mov    0x4(%eax),%edx
   11ca1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca4:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   11cb0:	83 ec 0c             	sub    $0xc,%esp
   11cb3:	ff 75 08             	push   0x8(%ebp)
   11cb6:	e8 c8 fe ff ff       	call   11b83 <list_is_empty>
   11cbb:	83 c4 10             	add    $0x10,%esp
   11cbe:	85 c0                	test   %eax,%eax
   11cc0:	74 16                	je     11cd8 <list_insert_last+0x68>
        list->first = list->last = node;
   11cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc5:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cc8:	89 50 04             	mov    %edx,0x4(%eax)
   11ccb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cce:	8b 50 04             	mov    0x4(%eax),%edx
   11cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd4:	89 10                	mov    %edx,(%eax)
   11cd6:	eb 15                	jmp    11ced <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   11cd8:	8b 45 08             	mov    0x8(%ebp),%eax
   11cdb:	8b 40 04             	mov    0x4(%eax),%eax
   11cde:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ce1:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11ce4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce7:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cea:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   11ced:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf0:	8b 40 08             	mov    0x8(%eax),%eax
   11cf3:	8d 50 01             	lea    0x1(%eax),%edx
   11cf6:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf9:	89 50 08             	mov    %edx,0x8(%eax)

}
   11cfc:	90                   	nop
   11cfd:	c9                   	leave  
   11cfe:	c3                   	ret    

00011cff <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   11cff:	55                   	push   %ebp
   11d00:	89 e5                	mov    %esp,%ebp
   11d02:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   11d05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d09:	75 19                	jne    11d24 <list_remove_first+0x25>
   11d0b:	68 ea 27 01 00       	push   $0x127ea
   11d10:	68 38 28 01 00       	push   $0x12838
   11d15:	6a 31                	push   $0x31
   11d17:	68 b4 27 01 00       	push   $0x127b4
   11d1c:	e8 4a f9 ff ff       	call   1166b <pannic>
   11d21:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   11d24:	83 ec 0c             	sub    $0xc,%esp
   11d27:	ff 75 08             	push   0x8(%ebp)
   11d2a:	e8 54 fe ff ff       	call   11b83 <list_is_empty>
   11d2f:	83 c4 10             	add    $0x10,%esp
   11d32:	85 c0                	test   %eax,%eax
   11d34:	74 07                	je     11d3d <list_remove_first+0x3e>
        return (list_node_t*)0;
   11d36:	b8 00 00 00 00       	mov    $0x0,%eax
   11d3b:	eb 71                	jmp    11dae <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   11d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d40:	8b 00                	mov    (%eax),%eax
   11d42:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   11d45:	83 ec 0c             	sub    $0xc,%esp
   11d48:	ff 75 08             	push   0x8(%ebp)
   11d4b:	e8 68 fe ff ff       	call   11bb8 <list_get_size>
   11d50:	83 c4 10             	add    $0x10,%esp
   11d53:	83 f8 01             	cmp    $0x1,%eax
   11d56:	75 17                	jne    11d6f <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   11d58:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d62:	8b 45 08             	mov    0x8(%ebp),%eax
   11d65:	8b 50 04             	mov    0x4(%eax),%edx
   11d68:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6b:	89 10                	mov    %edx,(%eax)
   11d6d:	eb 18                	jmp    11d87 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   11d6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d72:	8b 00                	mov    (%eax),%eax
   11d74:	8b 50 04             	mov    0x4(%eax),%edx
   11d77:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7a:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   11d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7f:	8b 00                	mov    (%eax),%eax
   11d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   11d87:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8a:	8b 40 08             	mov    0x8(%eax),%eax
   11d8d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d90:	8b 45 08             	mov    0x8(%ebp),%eax
   11d93:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   11d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11da3:	8b 50 04             	mov    0x4(%eax),%edx
   11da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11da9:	89 10                	mov    %edx,(%eax)
    return ret;
   11dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   11dae:	c9                   	leave  
   11daf:	c3                   	ret    

00011db0 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   11db0:	55                   	push   %ebp
   11db1:	89 e5                	mov    %esp,%ebp
   11db3:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   11db6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11dba:	75 19                	jne    11dd5 <list_remove_last+0x25>
   11dbc:	68 ea 27 01 00       	push   $0x127ea
   11dc1:	68 5c 28 01 00       	push   $0x1285c
   11dc6:	6a 46                	push   $0x46
   11dc8:	68 b4 27 01 00       	push   $0x127b4
   11dcd:	e8 99 f8 ff ff       	call   1166b <pannic>
   11dd2:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   11dd5:	83 ec 0c             	sub    $0xc,%esp
   11dd8:	ff 75 08             	push   0x8(%ebp)
   11ddb:	e8 a3 fd ff ff       	call   11b83 <list_is_empty>
   11de0:	83 c4 10             	add    $0x10,%esp
   11de3:	85 c0                	test   %eax,%eax
   11de5:	74 07                	je     11dee <list_remove_last+0x3e>
        return (list_node_t*)0;
   11de7:	b8 00 00 00 00       	mov    $0x0,%eax
   11dec:	eb 75                	jmp    11e63 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   11dee:	8b 45 08             	mov    0x8(%ebp),%eax
   11df1:	8b 40 04             	mov    0x4(%eax),%eax
   11df4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   11df7:	83 ec 0c             	sub    $0xc,%esp
   11dfa:	ff 75 08             	push   0x8(%ebp)
   11dfd:	e8 b6 fd ff ff       	call   11bb8 <list_get_size>
   11e02:	83 c4 10             	add    $0x10,%esp
   11e05:	83 f8 01             	cmp    $0x1,%eax
   11e08:	75 17                	jne    11e21 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   11e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e0d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e14:	8b 45 08             	mov    0x8(%ebp),%eax
   11e17:	8b 50 04             	mov    0x4(%eax),%edx
   11e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1d:	89 10                	mov    %edx,(%eax)
   11e1f:	eb 1b                	jmp    11e3c <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   11e21:	8b 45 08             	mov    0x8(%ebp),%eax
   11e24:	8b 40 04             	mov    0x4(%eax),%eax
   11e27:	8b 10                	mov    (%eax),%edx
   11e29:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2c:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   11e2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e32:	8b 40 04             	mov    0x4(%eax),%eax
   11e35:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   11e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3f:	8b 40 08             	mov    0x8(%eax),%eax
   11e42:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e45:	8b 45 08             	mov    0x8(%ebp),%eax
   11e48:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   11e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e4e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e58:	8b 50 04             	mov    0x4(%eax),%edx
   11e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e5e:	89 10                	mov    %edx,(%eax)
    return ret;
   11e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11e63:	c9                   	leave  
   11e64:	c3                   	ret    

00011e65 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   11e65:	55                   	push   %ebp
   11e66:	89 e5                	mov    %esp,%ebp
   11e68:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11e6b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e6f:	74 06                	je     11e77 <list_remove+0x12>
   11e71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e75:	75 19                	jne    11e90 <list_remove+0x2b>
   11e77:	68 84 27 01 00       	push   $0x12784
   11e7c:	68 70 28 01 00       	push   $0x12870
   11e81:	6a 5b                	push   $0x5b
   11e83:	68 b4 27 01 00       	push   $0x127b4
   11e88:	e8 de f7 ff ff       	call   1166b <pannic>
   11e8d:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   11e90:	83 ec 0c             	sub    $0xc,%esp
   11e93:	ff 75 08             	push   0x8(%ebp)
   11e96:	e8 e8 fc ff ff       	call   11b83 <list_is_empty>
   11e9b:	83 c4 10             	add    $0x10,%esp
   11e9e:	85 c0                	test   %eax,%eax
   11ea0:	74 0a                	je     11eac <list_remove+0x47>
        return (list_node_t*)0;
   11ea2:	b8 00 00 00 00       	mov    $0x0,%eax
   11ea7:	e9 80 00 00 00       	jmp    11f2c <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   11eac:	8b 45 08             	mov    0x8(%ebp),%eax
   11eaf:	8b 00                	mov    (%eax),%eax
   11eb1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11eb4:	75 0b                	jne    11ec1 <list_remove+0x5c>
   11eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eb9:	8b 50 04             	mov    0x4(%eax),%edx
   11ebc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ebf:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   11ec1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec4:	8b 40 04             	mov    0x4(%eax),%eax
   11ec7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11eca:	75 0b                	jne    11ed7 <list_remove+0x72>
   11ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ecf:	8b 10                	mov    (%eax),%edx
   11ed1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed4:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   11ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eda:	8b 00                	mov    (%eax),%eax
   11edc:	85 c0                	test   %eax,%eax
   11ede:	74 0e                	je     11eee <list_remove+0x89>
   11ee0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ee3:	8b 00                	mov    (%eax),%eax
   11ee5:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ee8:	8b 52 04             	mov    0x4(%edx),%edx
   11eeb:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   11eee:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ef1:	8b 40 04             	mov    0x4(%eax),%eax
   11ef4:	85 c0                	test   %eax,%eax
   11ef6:	74 0d                	je     11f05 <list_remove+0xa0>
   11ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11efb:	8b 40 04             	mov    0x4(%eax),%eax
   11efe:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f01:	8b 12                	mov    (%edx),%edx
   11f03:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   11f05:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f08:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11f0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f12:	8b 50 04             	mov    0x4(%eax),%edx
   11f15:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f18:	89 10                	mov    %edx,(%eax)
    list->size--;
   11f1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1d:	8b 40 08             	mov    0x8(%eax),%eax
   11f20:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f23:	8b 45 08             	mov    0x8(%ebp),%eax
   11f26:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   11f29:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f2c:	c9                   	leave  
   11f2d:	c3                   	ret    

00011f2e <inb>:
static inline uint8_t inb(uint16_t port) {
   11f2e:	55                   	push   %ebp
   11f2f:	89 e5                	mov    %esp,%ebp
   11f31:	83 ec 14             	sub    $0x14,%esp
   11f34:	8b 45 08             	mov    0x8(%ebp),%eax
   11f37:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11f3b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11f3f:	89 c2                	mov    %eax,%edx
   11f41:	ec                   	in     (%dx),%al
   11f42:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11f45:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11f49:	c9                   	leave  
   11f4a:	c3                   	ret    

00011f4b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11f4b:	55                   	push   %ebp
   11f4c:	89 e5                	mov    %esp,%ebp
   11f4e:	83 ec 08             	sub    $0x8,%esp
   11f51:	8b 45 08             	mov    0x8(%ebp),%eax
   11f54:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f57:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11f5b:	89 d0                	mov    %edx,%eax
   11f5d:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11f60:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f64:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f68:	ee                   	out    %al,(%dx)
}
   11f69:	90                   	nop
   11f6a:	c9                   	leave  
   11f6b:	c3                   	ret    

00011f6c <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   11f6c:	55                   	push   %ebp
   11f6d:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11f6f:	6a 00                	push   $0x0
   11f71:	68 f9 03 00 00       	push   $0x3f9
   11f76:	e8 d0 ff ff ff       	call   11f4b <outb>
   11f7b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11f7e:	68 80 00 00 00       	push   $0x80
   11f83:	68 fb 03 00 00       	push   $0x3fb
   11f88:	e8 be ff ff ff       	call   11f4b <outb>
   11f8d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11f90:	6a 03                	push   $0x3
   11f92:	68 f8 03 00 00       	push   $0x3f8
   11f97:	e8 af ff ff ff       	call   11f4b <outb>
   11f9c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11f9f:	6a 00                	push   $0x0
   11fa1:	68 f9 03 00 00       	push   $0x3f9
   11fa6:	e8 a0 ff ff ff       	call   11f4b <outb>
   11fab:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11fae:	6a 03                	push   $0x3
   11fb0:	68 fb 03 00 00       	push   $0x3fb
   11fb5:	e8 91 ff ff ff       	call   11f4b <outb>
   11fba:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11fbd:	68 c7 00 00 00       	push   $0xc7
   11fc2:	68 fa 03 00 00       	push   $0x3fa
   11fc7:	e8 7f ff ff ff       	call   11f4b <outb>
   11fcc:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11fcf:	6a 0f                	push   $0xf
   11fd1:	68 fc 03 00 00       	push   $0x3fc
   11fd6:	e8 70 ff ff ff       	call   11f4b <outb>
   11fdb:	83 c4 08             	add    $0x8,%esp
}
   11fde:	90                   	nop
   11fdf:	c9                   	leave  
   11fe0:	c3                   	ret    

00011fe1 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   11fe1:	55                   	push   %ebp
   11fe2:	89 e5                	mov    %esp,%ebp
   11fe4:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11fea:	83 ec 04             	sub    $0x4,%esp
   11fed:	68 80 00 00 00       	push   $0x80
   11ff2:	6a 00                	push   $0x0
   11ff4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11ffa:	50                   	push   %eax
   11ffb:	e8 27 f8 ff ff       	call   11827 <kernel_memset>
   12000:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12003:	8d 45 0c             	lea    0xc(%ebp),%eax
   12006:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1200c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12012:	83 ec 04             	sub    $0x4,%esp
   12015:	50                   	push   %eax
   12016:	ff 75 08             	push   0x8(%ebp)
   12019:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1201f:	50                   	push   %eax
   12020:	e8 eb f8 ff ff       	call   11910 <kernel_vsprintf>
   12025:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12028:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1202e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   12031:	eb 57                	jmp    1208a <log_printf+0xa9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12033:	90                   	nop
   12034:	83 ec 0c             	sub    $0xc,%esp
   12037:	68 fd 03 00 00       	push   $0x3fd
   1203c:	e8 ed fe ff ff       	call   11f2e <inb>
   12041:	83 c4 10             	add    $0x10,%esp
   12044:	0f b6 c0             	movzbl %al,%eax
   12047:	83 e0 40             	and    $0x40,%eax
   1204a:	85 c0                	test   %eax,%eax
   1204c:	74 e6                	je     12034 <log_printf+0x53>

        if (*p == '\n') outb(COM1_PORT, '\r');
   1204e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12051:	0f b6 00             	movzbl (%eax),%eax
   12054:	3c 0a                	cmp    $0xa,%al
   12056:	75 12                	jne    1206a <log_printf+0x89>
   12058:	83 ec 08             	sub    $0x8,%esp
   1205b:	6a 0d                	push   $0xd
   1205d:	68 f8 03 00 00       	push   $0x3f8
   12062:	e8 e4 fe ff ff       	call   11f4b <outb>
   12067:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1206a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1206d:	8d 50 01             	lea    0x1(%eax),%edx
   12070:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12073:	0f b6 00             	movzbl (%eax),%eax
   12076:	0f b6 c0             	movzbl %al,%eax
   12079:	83 ec 08             	sub    $0x8,%esp
   1207c:	50                   	push   %eax
   1207d:	68 f8 03 00 00       	push   $0x3f8
   12082:	e8 c4 fe ff ff       	call   11f4b <outb>
   12087:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1208a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1208d:	0f b6 00             	movzbl (%eax),%eax
   12090:	84 c0                	test   %al,%al
   12092:	75 9f                	jne    12033 <log_printf+0x52>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12094:	83 ec 08             	sub    $0x8,%esp
   12097:	6a 0d                	push   $0xd
   12099:	68 f8 03 00 00       	push   $0x3f8
   1209e:	e8 a8 fe ff ff       	call   11f4b <outb>
   120a3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   120a6:	83 ec 08             	sub    $0x8,%esp
   120a9:	6a 0a                	push   $0xa
   120ab:	68 f8 03 00 00       	push   $0x3f8
   120b0:	e8 96 fe ff ff       	call   11f4b <outb>
   120b5:	83 c4 10             	add    $0x10,%esp
   120b8:	90                   	nop
   120b9:	c9                   	leave  
   120ba:	c3                   	ret    
