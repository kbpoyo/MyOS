
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003920 memsz 0x000206b0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e36  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ae4  00012e38  00012e38  00003e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  0001391c  0001391c  0000491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cd90  00013920  00013920  00004920  2**5
                  ALLOC
  4 .debug_line   00001946  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000650  00000000  00000000  00006266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000048a4  00000000  00000000  000068b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001659  00000000  00000000  0000b15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000f03  00000000  00000000  0000c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000d89b  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001174  00000000  00000000  0000d8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000005d addr_alloc_init
0001030a l     F .text	00000067 addr_alloc_page
00010371 l     F .text	00000061 addr_free_page
00000000 l    df *ABS*	00000000 task.c
000104ae l     F .text	0000003d list_node_init
00012f4c l     O .rodata	0000000f __func__.9
000104eb l     F .text	0000002d list_node_next
00012fac l     O .rodata	0000000f __func__.3
00010518 l     F .text	00000047 list_init
00012f5c l     O .rodata	0000000a __func__.8
0001055f l     F .text	00000035 list_is_empty
00012fbc l     O .rodata	0000000e __func__.2
00010594 l     F .text	0000002d list_get_size
00012f9c l     O .rodata	0000000e __func__.4
000105c1 l     F .text	0000002c list_get_first
00012f8c l     O .rodata	0000000f __func__.5
000105ed l     F .text	00000007 hlt
000105f4 l     F .text	0000001a far_jump
0001060e l     F .text	00000017 write_tr
00013920 l     O .bss	00000190 task_manager
00010625 l     F .text	0000001f switch_to_tss
0001065f l     F .text	000000e5 tss_init
00012f40 l     O .rodata	0000000a __func__.10
00013ac0 l     O .bss	00000200 empty_task_stack
00010828 l     F .text	0000000a empty_task
00012f68 l     O .rodata	0000000f __func__.7
00012f78 l     O .rodata	00000011 __func__.6
00012fcc l     O .rodata	0000000f __func__.1
00012fdc l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010ca8 l     F .text	00000028 lgdt
00013cc0 l     O .bss	00010000 gdt_table
00023cc0 l     O .bss	00008000 is_alloc
0002bcc0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010e9a l     F .text	00000007 cli
00010ea1 l     F .text	00000007 sti
00010ea8 l     F .text	00000007 hlt
00010eaf l     F .text	0000001d inb
00010ecc l     F .text	00000021 outb
00010eed l     F .text	00000028 lidt
00010f15 l     F .text	00000010 read_eflags
00010f25 l     F .text	0000000b write_eflags
0002bce0 l     O .bss	00000800 idt_table
00010f30 l     F .text	000000e9 print_exception_fram
00011019 l     F .text	0000003e do_default_handler
000112a3 l     F .text	00000047 gate_desc_set
0001132a l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000116d4 l     F .text	00000021 outb
0002c4e0 l     O .bss	00000004 sys_tick
0001171d l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011797 l     F .text	00000007 sti
000133ec l     O .rodata	0000000c __func__.0
0002c500 l     O .bss	000000b4 task_test_task_1
0002c5c0 l     O .bss	000000b4 task_test_task_2
0002c680 l     O .bss	00001000 test_task_1_stack
0002d680 l     O .bss	00001000 test_task_2_stack
0002e680 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
000118dc l     F .text	00000047 list_init
000134a4 l     O .rodata	0000000a __func__.1
00011923 l     F .text	00000035 list_is_empty
000134b0 l     O .rodata	0000000e __func__.0
00013498 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011aee l     F .text	00000047 list_init
00013564 l     O .rodata	0000000a __func__.1
00011b35 l     F .text	00000035 list_is_empty
00013570 l     O .rodata	0000000e __func__.0
00013558 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011cbe l     F .text	00000047 list_init
00013684 l     O .rodata	0000000a __func__.3
00011d05 l     F .text	0000002d list_get_size
00013690 l     O .rodata	0000000e __func__.2
00011d32 l     F .text	0000002c list_get_first
000136b0 l     O .rodata	0000000f __func__.0
00011d5e l     F .text	0000002d list_get_last
000136a0 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012066 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
000120a3 l     F .text	00000016 bitmap_byte_count
00013780 l     O .rodata	0000000c __func__.3
0001378c l     O .rodata	0000000f __func__.2
0001379c l     O .rodata	0000000f __func__.1
000137ac l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001391c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000128cb l     F .text	00000035 list_is_empty
000138b4 l     O .rodata	0000000e __func__.5
00012900 l     F .text	0000002d list_get_size
000138ec l     O .rodata	0000000e __func__.2
000138a0 l     O .rodata	00000012 __func__.6
000138c4 l     O .rodata	00000011 __func__.4
000138d8 l     O .rodata	00000012 __func__.3
000138fc l     O .rodata	00000011 __func__.1
00013910 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012c76 l     F .text	0000001d inb
00012c93 l     F .text	00000021 outb
0002e690 l     O .bss	00000014 mutex
0001214d g     F .text	00000078 bitmap_get_bit
00012520 g     F .text	0000004f kernel_memcpy
00011530 g     F .text	00000098 idt_enable
000109c3 g     F .text	0000000a task_current
000129b8 g     F .text	0000008f list_insert_last
00010a35 g     F .text	00000061 sys_yield
0001118b g     F .text	0000001c do_handler_segment_not_present
000108ff g     F .text	0000004b task_set_ready
000122cd g     F .text	00000021 bitmap_is_set
00011667 g     F .text	0000000b idt_enable_global
0001256f g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012cb4 g     F .text	00000088 log_init
00011843 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000123e9 g     F .text	00000047 kernel_strcpy
0001165c g     F .text	0000000b idt_disable_global
000112ea g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000110e3 g     F .text	0000001c do_handler_overflow
00011217 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000111c3 g     F .text	0000001c do_handler_general_protection
00011287 g     F .text	0000001c do_handler_control_exception
00011c95 g     F .text	00000029 sem_count
00011073 g     F .text	0000001c do_handler_divider
000121c5 g     F .text	00000108 bitmap_set_bit
00011153 g     F .text	0000001c do_handler_double_fault
000111df g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011672 g     F .text	00000039 pic_send_eoi
00012af8 g     F .text	000000b5 list_remove_last
000108f5 g     F .text	0000000a task_first_task
00011bad g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010d8f g     F .text	00000094 gdt_init
0001126b g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
0001108f g     F .text	0000001c do_handler_debug
0002e6b0 g     O .bss	00002000 stack
00010c48 g     F .text	00000060 sys_sleep
0001181a g     F .text	00000029 test_task_2
00011d8b g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000113bd g     F .text	00000173 idt_init
00011c18 g     F .text	0000007d sem_notify
0001111b g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000111fb g     F .text	0000001c do_handler_fpu_error
000108ad g     F .text	00000048 task_first_init
00011233 g     F .text	0000001c do_handler_machine_check
0001292d g     F .text	0000008b list_insert_first
00010bfd g     F .text	0000004b task_set_wakeup
00010995 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00012430 g     F .text	00000051 kernel_strncpy
0001179e g     F .text	00000053 kernel_init
00011b6a g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012658 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
000119a5 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
0001116f g     F .text	0000001c do_handler_invalid_tss
000115c8 g     F .text	00000094 idt_disable
00010ba1 g     F .text	0000005c task_set_sleep
000110ab g     F .text	0000001c do_handler_nmi
00011958 g     F .text	0000004d mutex_init
000117f1 g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00011137 g     F .text	0000001c do_handler_device_unavailable
000116ab g     F .text	00000018 idt_enter_protection
00010a96 g     F .text	0000010b task_slice_end
000125b0 g     F .text	00000084 kernel_memcmp
0001124f g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011057 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010644 g     F .text	0000001b task_switch_from_to
00011a36 g     F .text	000000b8 mutex_unlock
000109cd g     F .text	00000068 task_switch
000124eb g     F .text	00000035 kernel_strlen
0001094a g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010cd0 g     F .text	000000bf segment_desc_set
000110ff g     F .text	0000001c do_handler_bound_range
00012a47 g     F .text	000000b1 list_remove_first
00012481 g     F .text	0000006a kernel_strncmp
000120b9 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
000122ee g     F .text	000000fb bitmap_alloc_nbits
00010832 g     F .text	0000007b task_manager_init
000103d2 g     F .text	000000dc memory_init
0001206d g     F .text	00000036 pannic
000111a7 g     F .text	0000001c do_handler_stack_segment_fault
000110c7 g     F .text	0000001c do_handler_breakpoint
00012d3c g     F .text	000000fa log_printf
00010744 g     F .text	000000e4 task_init
00012634 g     F .text	00000024 kernel_sprintf
00010e23 g     F .text	00000077 gdt_alloc_desc
000127f5 g     F .text	000000d6 kernel_itoa
00012bad g     F .text	000000c9 list_remove
000116c3 g     F .text	00000011 idt_leave_protection
000116f5 g     F .text	00000028 do_handler_time
0001177f g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 93 17 00 00       	call   1179e <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc b0 06 03 00       	mov    $0x306b0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 19 18 00 00       	jmp    11843 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 1c 10 00 00       	call   11057 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 1b 10 00 00       	call   11073 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 1a 10 00 00       	call   1108f <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 19 10 00 00       	call   110ab <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 18 10 00 00       	call   110c7 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 17 10 00 00       	call   110e3 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 16 10 00 00       	call   110ff <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 15 10 00 00       	call   1111b <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 14 10 00 00       	call   11137 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 15 10 00 00       	call   11153 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 16 10 00 00       	call   1116f <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 17 10 00 00       	call   1118b <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 18 10 00 00       	call   111a7 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 19 10 00 00       	call   111c3 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 1a 10 00 00       	call   111df <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 19 10 00 00       	call   111fb <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 1a 10 00 00       	call   11217 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 19 10 00 00       	call   11233 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 18 10 00 00       	call   1124f <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 17 10 00 00       	call   1126b <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 18 10 00 00       	call   11287 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 69 14 00 00       	call   116f5 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   102b3:	8b 45 08             	mov    0x8(%ebp),%eax
   102b6:	83 ec 0c             	sub    $0xc,%esp
   102b9:	50                   	push   %eax
   102ba:	e8 99 16 00 00       	call   11958 <mutex_init>
   102bf:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   102c2:	8b 45 08             	mov    0x8(%ebp),%eax
   102c5:	8b 55 10             	mov    0x10(%ebp),%edx
   102c8:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   102cb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ce:	8b 55 14             	mov    0x14(%ebp),%edx
   102d1:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	8b 55 18             	mov    0x18(%ebp),%edx
   102da:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   102dd:	8b 45 08             	mov    0x8(%ebp),%eax
   102e0:	8b 40 20             	mov    0x20(%eax),%eax
   102e3:	8b 55 08             	mov    0x8(%ebp),%edx
   102e6:	8b 4a 24             	mov    0x24(%edx),%ecx
   102e9:	ba 00 00 00 00       	mov    $0x0,%edx
   102ee:	f7 f1                	div    %ecx
   102f0:	89 c2                	mov    %eax,%edx
   102f2:	8b 45 08             	mov    0x8(%ebp),%eax
   102f5:	83 c0 14             	add    $0x14,%eax
   102f8:	6a 00                	push   $0x0
   102fa:	52                   	push   %edx
   102fb:	ff 75 0c             	push   0xc(%ebp)
   102fe:	50                   	push   %eax
   102ff:	e8 b5 1d 00 00       	call   120b9 <bitmap_init>
   10304:	83 c4 10             	add    $0x10,%esp
}
   10307:	90                   	nop
   10308:	c9                   	leave  
   10309:	c3                   	ret    

0001030a <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   1030a:	55                   	push   %ebp
   1030b:	89 e5                	mov    %esp,%ebp
   1030d:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   10310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	83 ec 0c             	sub    $0xc,%esp
   1031d:	50                   	push   %eax
   1031e:	e8 82 16 00 00       	call   119a5 <mutex_lock>
   10323:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10326:	8b 45 08             	mov    0x8(%ebp),%eax
   10329:	83 c0 14             	add    $0x14,%eax
   1032c:	83 ec 04             	sub    $0x4,%esp
   1032f:	ff 75 0c             	push   0xc(%ebp)
   10332:	6a 00                	push   $0x0
   10334:	50                   	push   %eax
   10335:	e8 b4 1f 00 00       	call   122ee <bitmap_alloc_nbits>
   1033a:	83 c4 10             	add    $0x10,%esp
   1033d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   10340:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10344:	78 17                	js     1035d <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	8b 50 24             	mov    0x24(%eax),%edx
   10352:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10355:	0f af c2             	imul   %edx,%eax
   10358:	01 c8                	add    %ecx,%eax
   1035a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   1035d:	8b 45 08             	mov    0x8(%ebp),%eax
   10360:	83 ec 0c             	sub    $0xc,%esp
   10363:	50                   	push   %eax
   10364:	e8 cd 16 00 00       	call   11a36 <mutex_unlock>
   10369:	83 c4 10             	add    $0x10,%esp

  return addr;
   1036c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1036f:	c9                   	leave  
   10370:	c3                   	ret    

00010371 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   10371:	55                   	push   %ebp
   10372:	89 e5                	mov    %esp,%ebp
   10374:	53                   	push   %ebx
   10375:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10378:	8b 45 08             	mov    0x8(%ebp),%eax
   1037b:	83 ec 0c             	sub    $0xc,%esp
   1037e:	50                   	push   %eax
   1037f:	e8 21 16 00 00       	call   119a5 <mutex_lock>
   10384:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10387:	8b 45 08             	mov    0x8(%ebp),%eax
   1038a:	8b 50 1c             	mov    0x1c(%eax),%edx
   1038d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10390:	29 d0                	sub    %edx,%eax
   10392:	89 c1                	mov    %eax,%ecx
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 58 24             	mov    0x24(%eax),%ebx
   1039a:	89 c8                	mov    %ecx,%eax
   1039c:	ba 00 00 00 00       	mov    $0x0,%edx
   103a1:	f7 f3                	div    %ebx
   103a3:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   103a6:	8b 45 08             	mov    0x8(%ebp),%eax
   103a9:	83 c0 14             	add    $0x14,%eax
   103ac:	6a 00                	push   $0x0
   103ae:	ff 75 10             	push   0x10(%ebp)
   103b1:	ff 75 f4             	push   -0xc(%ebp)
   103b4:	50                   	push   %eax
   103b5:	e8 0b 1e 00 00       	call   121c5 <bitmap_set_bit>
   103ba:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   103bd:	8b 45 08             	mov    0x8(%ebp),%eax
   103c0:	83 ec 0c             	sub    $0xc,%esp
   103c3:	50                   	push   %eax
   103c4:	e8 6d 16 00 00       	call   11a36 <mutex_unlock>
   103c9:	83 c4 10             	add    $0x10,%esp
}
   103cc:	90                   	nop
   103cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103d0:	c9                   	leave  
   103d1:	c3                   	ret    

000103d2 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   103d2:	55                   	push   %ebp
   103d3:	89 e5                	mov    %esp,%ebp
   103d5:	83 ec 48             	sub    $0x48,%esp
    
    addr_alloc_t addr_alloc;    //内存分配对象
    uint8_t bits[8];    //提供给内存分配对象的位图缓冲区，8个字节供支持64个页的管理

    //对起始地址为0x1000，大小为64个4kb的内存页的空间进行管理初始化
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   103d8:	83 ec 0c             	sub    $0xc,%esp
   103db:	68 00 10 00 00       	push   $0x1000
   103e0:	68 00 00 04 00       	push   $0x40000
   103e5:	68 00 10 00 00       	push   $0x1000
   103ea:	8d 45 b8             	lea    -0x48(%ebp),%eax
   103ed:	50                   	push   %eax
   103ee:	8d 45 c0             	lea    -0x40(%ebp),%eax
   103f1:	50                   	push   %eax
   103f2:	e8 b6 fe ff ff       	call   102ad <addr_alloc_init>
   103f7:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; ++i) {
   103fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10401:	eb 42                	jmp    10445 <memory_init+0x73>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   10403:	83 ec 08             	sub    $0x8,%esp
   10406:	6a 02                	push   $0x2
   10408:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1040b:	50                   	push   %eax
   1040c:	e8 f9 fe ff ff       	call   1030a <addr_alloc_page>
   10411:	83 c4 10             	add    $0x10,%esp
   10414:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: 0x%x, bitmap: 0b%b", addr, bits[2*i / 8]);
   10417:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1041a:	8d 50 03             	lea    0x3(%eax),%edx
   1041d:	85 c0                	test   %eax,%eax
   1041f:	0f 48 c2             	cmovs  %edx,%eax
   10422:	c1 f8 02             	sar    $0x2,%eax
   10425:	0f b6 44 05 b8       	movzbl -0x48(%ebp,%eax,1),%eax
   1042a:	0f b6 c0             	movzbl %al,%eax
   1042d:	83 ec 04             	sub    $0x4,%esp
   10430:	50                   	push   %eax
   10431:	ff 75 e8             	push   -0x18(%ebp)
   10434:	68 38 2e 01 00       	push   $0x12e38
   10439:	e8 fe 28 00 00       	call   12d3c <log_printf>
   1043e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; ++i) {
   10441:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10445:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10449:	7e b8                	jle    10403 <memory_init+0x31>
    }



    uint32_t addr = 0x1000;
   1044b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; ++i) {
   10452:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10459:	eb 49                	jmp    104a4 <memory_init+0xd2>
        addr_free_page(&addr_alloc, addr, 2);
   1045b:	83 ec 04             	sub    $0x4,%esp
   1045e:	6a 02                	push   $0x2
   10460:	ff 75 f0             	push   -0x10(%ebp)
   10463:	8d 45 c0             	lea    -0x40(%ebp),%eax
   10466:	50                   	push   %eax
   10467:	e8 05 ff ff ff       	call   10371 <addr_free_page>
   1046c:	83 c4 10             	add    $0x10,%esp
        log_printf("free addr: 0x%x, bitmap: 0b%b", addr, bits[2*i / 8]);
   1046f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10472:	8d 50 03             	lea    0x3(%eax),%edx
   10475:	85 c0                	test   %eax,%eax
   10477:	0f 48 c2             	cmovs  %edx,%eax
   1047a:	c1 f8 02             	sar    $0x2,%eax
   1047d:	0f b6 44 05 b8       	movzbl -0x48(%ebp,%eax,1),%eax
   10482:	0f b6 c0             	movzbl %al,%eax
   10485:	83 ec 04             	sub    $0x4,%esp
   10488:	50                   	push   %eax
   10489:	ff 75 f0             	push   -0x10(%ebp)
   1048c:	68 57 2e 01 00       	push   $0x12e57
   10491:	e8 a6 28 00 00       	call   12d3c <log_printf>
   10496:	83 c4 10             	add    $0x10,%esp
        addr += 2*4096;
   10499:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
    for (int i = 0; i < 32; ++i) {
   104a0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   104a4:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   104a8:	7e b1                	jle    1045b <memory_init+0x89>
    }

   104aa:	90                   	nop
   104ab:	90                   	nop
   104ac:	c9                   	leave  
   104ad:	c3                   	ret    

000104ae <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   104ae:	55                   	push   %ebp
   104af:	89 e5                	mov    %esp,%ebp
   104b1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   104b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   104b8:	75 19                	jne    104d3 <list_node_init+0x25>
   104ba:	68 78 2e 01 00       	push   $0x12e78
   104bf:	68 4c 2f 01 00       	push   $0x12f4c
   104c4:	6a 20                	push   $0x20
   104c6:	68 90 2e 01 00       	push   $0x12e90
   104cb:	e8 9d 1b 00 00       	call   1206d <pannic>
   104d0:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   104d3:	8b 45 08             	mov    0x8(%ebp),%eax
   104d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   104dd:	8b 45 08             	mov    0x8(%ebp),%eax
   104e0:	8b 50 04             	mov    0x4(%eax),%edx
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	89 10                	mov    %edx,(%eax)
}
   104e8:	90                   	nop
   104e9:	c9                   	leave  
   104ea:	c3                   	ret    

000104eb <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   104eb:	55                   	push   %ebp
   104ec:	89 e5                	mov    %esp,%ebp
   104ee:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   104f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   104f5:	75 19                	jne    10510 <list_node_next+0x25>
   104f7:	68 78 2e 01 00       	push   $0x12e78
   104fc:	68 ac 2f 01 00       	push   $0x12fac
   10501:	6a 2b                	push   $0x2b
   10503:	68 90 2e 01 00       	push   $0x12e90
   10508:	e8 60 1b 00 00       	call   1206d <pannic>
   1050d:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10510:	8b 45 08             	mov    0x8(%ebp),%eax
   10513:	8b 40 04             	mov    0x4(%eax),%eax
}
   10516:	c9                   	leave  
   10517:	c3                   	ret    

00010518 <list_init>:

static inline void list_init(list_t *list) {
   10518:	55                   	push   %ebp
   10519:	89 e5                	mov    %esp,%ebp
   1051b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1051e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10522:	75 19                	jne    1053d <list_init+0x25>
   10524:	68 ce 2e 01 00       	push   $0x12ece
   10529:	68 5c 2f 01 00       	push   $0x12f5c
   1052e:	6a 31                	push   $0x31
   10530:	68 90 2e 01 00       	push   $0x12e90
   10535:	e8 33 1b 00 00       	call   1206d <pannic>
   1053a:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	8b 50 04             	mov    0x4(%eax),%edx
   1054d:	8b 45 08             	mov    0x8(%ebp),%eax
   10550:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10552:	8b 45 08             	mov    0x8(%ebp),%eax
   10555:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1055c:	90                   	nop
   1055d:	c9                   	leave  
   1055e:	c3                   	ret    

0001055f <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   1055f:	55                   	push   %ebp
   10560:	89 e5                	mov    %esp,%ebp
   10562:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10565:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10569:	75 19                	jne    10584 <list_is_empty+0x25>
   1056b:	68 ce 2e 01 00       	push   $0x12ece
   10570:	68 bc 2f 01 00       	push   $0x12fbc
   10575:	6a 38                	push   $0x38
   10577:	68 90 2e 01 00       	push   $0x12e90
   1057c:	e8 ec 1a 00 00       	call   1206d <pannic>
   10581:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10584:	8b 45 08             	mov    0x8(%ebp),%eax
   10587:	8b 40 08             	mov    0x8(%eax),%eax
   1058a:	85 c0                	test   %eax,%eax
   1058c:	0f 94 c0             	sete   %al
   1058f:	0f b6 c0             	movzbl %al,%eax
}
   10592:	c9                   	leave  
   10593:	c3                   	ret    

00010594 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10594:	55                   	push   %ebp
   10595:	89 e5                	mov    %esp,%ebp
   10597:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1059a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1059e:	75 19                	jne    105b9 <list_get_size+0x25>
   105a0:	68 ce 2e 01 00       	push   $0x12ece
   105a5:	68 9c 2f 01 00       	push   $0x12f9c
   105aa:	6a 3e                	push   $0x3e
   105ac:	68 90 2e 01 00       	push   $0x12e90
   105b1:	e8 b7 1a 00 00       	call   1206d <pannic>
   105b6:	83 c4 10             	add    $0x10,%esp

    return list->size;
   105b9:	8b 45 08             	mov    0x8(%ebp),%eax
   105bc:	8b 40 08             	mov    0x8(%eax),%eax
}
   105bf:	c9                   	leave  
   105c0:	c3                   	ret    

000105c1 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   105c1:	55                   	push   %ebp
   105c2:	89 e5                	mov    %esp,%ebp
   105c4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   105c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105cb:	75 19                	jne    105e6 <list_get_first+0x25>
   105cd:	68 ce 2e 01 00       	push   $0x12ece
   105d2:	68 8c 2f 01 00       	push   $0x12f8c
   105d7:	6a 44                	push   $0x44
   105d9:	68 90 2e 01 00       	push   $0x12e90
   105de:	e8 8a 1a 00 00       	call   1206d <pannic>
   105e3:	83 c4 10             	add    $0x10,%esp

    return list->first;
   105e6:	8b 45 08             	mov    0x8(%ebp),%eax
   105e9:	8b 00                	mov    (%eax),%eax
}
   105eb:	c9                   	leave  
   105ec:	c3                   	ret    

000105ed <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   105ed:	55                   	push   %ebp
   105ee:	89 e5                	mov    %esp,%ebp
   105f0:	f4                   	hlt    
   105f1:	90                   	nop
   105f2:	5d                   	pop    %ebp
   105f3:	c3                   	ret    

000105f4 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   105f4:	55                   	push   %ebp
   105f5:	89 e5                	mov    %esp,%ebp
   105f7:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   105fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   105fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10600:	8b 45 08             	mov    0x8(%ebp),%eax
   10603:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10606:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10609:	ff 28                	ljmp   *(%eax)
}
   1060b:	90                   	nop
   1060c:	c9                   	leave  
   1060d:	c3                   	ret    

0001060e <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1060e:	55                   	push   %ebp
   1060f:	89 e5                	mov    %esp,%ebp
   10611:	83 ec 04             	sub    $0x4,%esp
   10614:	8b 45 08             	mov    0x8(%ebp),%eax
   10617:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1061b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1061f:	0f 00 d8             	ltr    %ax
}
   10622:	90                   	nop
   10623:	c9                   	leave  
   10624:	c3                   	ret    

00010625 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10625:	55                   	push   %ebp
   10626:	89 e5                	mov    %esp,%ebp
   10628:	83 ec 04             	sub    $0x4,%esp
   1062b:	8b 45 08             	mov    0x8(%ebp),%eax
   1062e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10632:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10636:	6a 00                	push   $0x0
   10638:	50                   	push   %eax
   10639:	e8 b6 ff ff ff       	call   105f4 <far_jump>
   1063e:	83 c4 08             	add    $0x8,%esp
}
   10641:	90                   	nop
   10642:	c9                   	leave  
   10643:	c3                   	ret    

00010644 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10644:	55                   	push   %ebp
   10645:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10647:	8b 45 0c             	mov    0xc(%ebp),%eax
   1064a:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10650:	0f b7 c0             	movzwl %ax,%eax
   10653:	50                   	push   %eax
   10654:	e8 cc ff ff ff       	call   10625 <switch_to_tss>
   10659:	83 c4 04             	add    $0x4,%esp
}
   1065c:	90                   	nop
   1065d:	c9                   	leave  
   1065e:	c3                   	ret    

0001065f <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   1065f:	55                   	push   %ebp
   10660:	89 e5                	mov    %esp,%ebp
   10662:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10665:	8b 45 08             	mov    0x8(%ebp),%eax
   10668:	83 c0 48             	add    $0x48,%eax
   1066b:	83 ec 04             	sub    $0x4,%esp
   1066e:	6a 68                	push   $0x68
   10670:	6a 00                	push   $0x0
   10672:	50                   	push   %eax
   10673:	e8 f7 1e 00 00       	call   1256f <kernel_memset>
   10678:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1067b:	8b 45 08             	mov    0x8(%ebp),%eax
   1067e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10681:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10684:	8b 45 08             	mov    0x8(%ebp),%eax
   10687:	8b 55 10             	mov    0x10(%ebp),%edx
   1068a:	89 50 4c             	mov    %edx,0x4c(%eax)
   1068d:	8b 45 08             	mov    0x8(%ebp),%eax
   10690:	8b 50 4c             	mov    0x4c(%eax),%edx
   10693:	8b 45 08             	mov    0x8(%ebp),%eax
   10696:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1069c:	8b 45 08             	mov    0x8(%ebp),%eax
   1069f:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   106a6:	8b 45 08             	mov    0x8(%ebp),%eax
   106a9:	8b 50 50             	mov    0x50(%eax),%edx
   106ac:	8b 45 08             	mov    0x8(%ebp),%eax
   106af:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   106bf:	00 00 00 
   106c2:	8b 45 08             	mov    0x8(%ebp),%eax
   106c5:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   106cb:	8b 45 08             	mov    0x8(%ebp),%eax
   106ce:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   106dd:	8b 45 08             	mov    0x8(%ebp),%eax
   106e0:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   106e6:	8b 45 08             	mov    0x8(%ebp),%eax
   106e9:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   106ef:	8b 45 08             	mov    0x8(%ebp),%eax
   106f2:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   106f8:	8b 45 08             	mov    0x8(%ebp),%eax
   106fb:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10702:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10705:	8b 45 08             	mov    0x8(%ebp),%eax
   10708:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   1070f:	e8 0f 07 00 00       	call   10e23 <gdt_alloc_desc>
   10714:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10717:	8b 45 08             	mov    0x8(%ebp),%eax
   1071a:	83 c0 48             	add    $0x48,%eax
   1071d:	89 c2                	mov    %eax,%edx
   1071f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10722:	0f b7 c0             	movzwl %ax,%eax
   10725:	68 89 00 00 00       	push   $0x89
   1072a:	6a 68                	push   $0x68
   1072c:	52                   	push   %edx
   1072d:	50                   	push   %eax
   1072e:	e8 9d 05 00 00       	call   10cd0 <segment_desc_set>
   10733:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1073c:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   10742:	c9                   	leave  
   10743:	c3                   	ret    

00010744 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10744:	55                   	push   %ebp
   10745:	89 e5                	mov    %esp,%ebp
   10747:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1074a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1074e:	75 19                	jne    10769 <task_init+0x25>
   10750:	68 e1 2e 01 00       	push   $0x12ee1
   10755:	68 40 2f 01 00       	push   $0x12f40
   1075a:	6a 60                	push   $0x60
   1075c:	68 f4 2e 01 00       	push   $0x12ef4
   10761:	e8 07 19 00 00       	call   1206d <pannic>
   10766:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10769:	83 ec 04             	sub    $0x4,%esp
   1076c:	ff 75 14             	push   0x14(%ebp)
   1076f:	ff 75 10             	push   0x10(%ebp)
   10772:	ff 75 08             	push   0x8(%ebp)
   10775:	e8 e5 fe ff ff       	call   1065f <tss_init>
   1077a:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1077d:	8b 45 08             	mov    0x8(%ebp),%eax
   10780:	83 c0 10             	add    $0x10,%eax
   10783:	83 ec 04             	sub    $0x4,%esp
   10786:	6a 20                	push   $0x20
   10788:	ff 75 0c             	push   0xc(%ebp)
   1078b:	50                   	push   %eax
   1078c:	e8 9f 1c 00 00       	call   12430 <kernel_strncpy>
   10791:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10794:	8b 45 08             	mov    0x8(%ebp),%eax
   10797:	83 c0 30             	add    $0x30,%eax
   1079a:	83 ec 0c             	sub    $0xc,%esp
   1079d:	50                   	push   %eax
   1079e:	e8 0b fd ff ff       	call   104ae <list_node_init>
   107a3:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   107a6:	8b 45 08             	mov    0x8(%ebp),%eax
   107a9:	83 c0 38             	add    $0x38,%eax
   107ac:	83 ec 0c             	sub    $0xc,%esp
   107af:	50                   	push   %eax
   107b0:	e8 f9 fc ff ff       	call   104ae <list_node_init>
   107b5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   107b8:	8b 45 08             	mov    0x8(%ebp),%eax
   107bb:	83 c0 40             	add    $0x40,%eax
   107be:	83 ec 0c             	sub    $0xc,%esp
   107c1:	50                   	push   %eax
   107c2:	e8 e7 fc ff ff       	call   104ae <list_node_init>
   107c7:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   107ca:	8b 45 08             	mov    0x8(%ebp),%eax
   107cd:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   107d4:	8b 45 08             	mov    0x8(%ebp),%eax
   107d7:	8b 50 08             	mov    0x8(%eax),%edx
   107da:	8b 45 08             	mov    0x8(%ebp),%eax
   107dd:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   107e0:	8b 45 08             	mov    0x8(%ebp),%eax
   107e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   107ea:	e8 bc 0e 00 00       	call   116ab <idt_enter_protection>
   107ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   107f2:	8b 45 08             	mov    0x8(%ebp),%eax
   107f5:	83 c0 38             	add    $0x38,%eax
   107f8:	83 ec 08             	sub    $0x8,%esp
   107fb:	50                   	push   %eax
   107fc:	68 30 39 01 00       	push   $0x13930
   10801:	e8 b2 21 00 00       	call   129b8 <list_insert_last>
   10806:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10809:	83 ec 0c             	sub    $0xc,%esp
   1080c:	ff 75 08             	push   0x8(%ebp)
   1080f:	e8 eb 00 00 00       	call   108ff <task_set_ready>
   10814:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10817:	83 ec 0c             	sub    $0xc,%esp
   1081a:	ff 75 f4             	push   -0xc(%ebp)
   1081d:	e8 a1 0e 00 00       	call   116c3 <idt_leave_protection>
   10822:	83 c4 10             	add    $0x10,%esp
}
   10825:	90                   	nop
   10826:	c9                   	leave  
   10827:	c3                   	ret    

00010828 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10828:	55                   	push   %ebp
   10829:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   1082b:	e8 bd fd ff ff       	call   105ed <hlt>
   10830:	eb f9                	jmp    1082b <empty_task+0x3>

00010832 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10832:	55                   	push   %ebp
   10833:	89 e5                	mov    %esp,%ebp
   10835:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10838:	83 ec 0c             	sub    $0xc,%esp
   1083b:	68 24 39 01 00       	push   $0x13924
   10840:	e8 d3 fc ff ff       	call   10518 <list_init>
   10845:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10848:	83 ec 0c             	sub    $0xc,%esp
   1084b:	68 30 39 01 00       	push   $0x13930
   10850:	e8 c3 fc ff ff       	call   10518 <list_init>
   10855:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10858:	83 ec 0c             	sub    $0xc,%esp
   1085b:	68 3c 39 01 00       	push   $0x1393c
   10860:	e8 b3 fc ff ff       	call   10518 <list_init>
   10865:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10868:	c7 05 20 39 01 00 00 	movl   $0x0,0x13920
   1086f:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10872:	ba c0 3c 01 00       	mov    $0x13cc0,%edx
   10877:	b8 28 08 01 00       	mov    $0x10828,%eax
   1087c:	52                   	push   %edx
   1087d:	50                   	push   %eax
   1087e:	68 29 2f 01 00       	push   $0x12f29
   10883:	68 fc 39 01 00       	push   $0x139fc
   10888:	e8 b7 fe ff ff       	call   10744 <task_init>
   1088d:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10890:	83 ec 0c             	sub    $0xc,%esp
   10893:	68 fc 39 01 00       	push   $0x139fc
   10898:	e8 ad 00 00 00       	call   1094a <task_set_unready>
   1089d:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   108a0:	c7 05 fc 39 01 00 00 	movl   $0x0,0x139fc
   108a7:	00 00 00 
}
   108aa:	90                   	nop
   108ab:	c9                   	leave  
   108ac:	c3                   	ret    

000108ad <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   108ad:	55                   	push   %ebp
   108ae:	89 e5                	mov    %esp,%ebp
   108b0:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   108b3:	6a 00                	push   $0x0
   108b5:	6a 00                	push   $0x0
   108b7:	68 34 2f 01 00       	push   $0x12f34
   108bc:	68 48 39 01 00       	push   $0x13948
   108c1:	e8 7e fe ff ff       	call   10744 <task_init>
   108c6:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   108c9:	a1 f8 39 01 00       	mov    0x139f8,%eax
   108ce:	0f b7 c0             	movzwl %ax,%eax
   108d1:	83 ec 0c             	sub    $0xc,%esp
   108d4:	50                   	push   %eax
   108d5:	e8 34 fd ff ff       	call   1060e <write_tr>
   108da:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   108dd:	c7 05 20 39 01 00 48 	movl   $0x13948,0x13920
   108e4:	39 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   108e7:	a1 20 39 01 00       	mov    0x13920,%eax
   108ec:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   108f2:	90                   	nop
   108f3:	c9                   	leave  
   108f4:	c3                   	ret    

000108f5 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   108f5:	55                   	push   %ebp
   108f6:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   108f8:	b8 48 39 01 00       	mov    $0x13948,%eax
}
   108fd:	5d                   	pop    %ebp
   108fe:	c3                   	ret    

000108ff <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   108ff:	55                   	push   %ebp
   10900:	89 e5                	mov    %esp,%ebp
   10902:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10905:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10909:	75 1c                	jne    10927 <task_set_ready+0x28>
   1090b:	68 e1 2e 01 00       	push   $0x12ee1
   10910:	68 68 2f 01 00       	push   $0x12f68
   10915:	68 c9 00 00 00       	push   $0xc9
   1091a:	68 f4 2e 01 00       	push   $0x12ef4
   1091f:	e8 49 17 00 00       	call   1206d <pannic>
   10924:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10927:	8b 45 08             	mov    0x8(%ebp),%eax
   1092a:	83 c0 30             	add    $0x30,%eax
   1092d:	83 ec 08             	sub    $0x8,%esp
   10930:	50                   	push   %eax
   10931:	68 24 39 01 00       	push   $0x13924
   10936:	e8 7d 20 00 00       	call   129b8 <list_insert_last>
   1093b:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1093e:	8b 45 08             	mov    0x8(%ebp),%eax
   10941:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10947:	90                   	nop
   10948:	c9                   	leave  
   10949:	c3                   	ret    

0001094a <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   1094a:	55                   	push   %ebp
   1094b:	89 e5                	mov    %esp,%ebp
   1094d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10950:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10954:	75 1c                	jne    10972 <task_set_unready+0x28>
   10956:	68 e1 2e 01 00       	push   $0x12ee1
   1095b:	68 78 2f 01 00       	push   $0x12f78
   10960:	68 d8 00 00 00       	push   $0xd8
   10965:	68 f4 2e 01 00       	push   $0x12ef4
   1096a:	e8 fe 16 00 00       	call   1206d <pannic>
   1096f:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10972:	8b 45 08             	mov    0x8(%ebp),%eax
   10975:	83 c0 30             	add    $0x30,%eax
   10978:	83 ec 08             	sub    $0x8,%esp
   1097b:	50                   	push   %eax
   1097c:	68 24 39 01 00       	push   $0x13924
   10981:	e8 27 22 00 00       	call   12bad <list_remove>
   10986:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10989:	8b 45 08             	mov    0x8(%ebp),%eax
   1098c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10992:	90                   	nop
   10993:	c9                   	leave  
   10994:	c3                   	ret    

00010995 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10995:	55                   	push   %ebp
   10996:	89 e5                	mov    %esp,%ebp
   10998:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1099b:	83 ec 0c             	sub    $0xc,%esp
   1099e:	68 24 39 01 00       	push   $0x13924
   109a3:	e8 19 fc ff ff       	call   105c1 <list_get_first>
   109a8:	83 c4 10             	add    $0x10,%esp
   109ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   109ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109b2:	74 08                	je     109bc <task_ready_first+0x27>
   109b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109b7:	83 e8 30             	sub    $0x30,%eax
   109ba:	eb 05                	jmp    109c1 <task_ready_first+0x2c>
   109bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   109c1:	c9                   	leave  
   109c2:	c3                   	ret    

000109c3 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   109c3:	55                   	push   %ebp
   109c4:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   109c6:	a1 20 39 01 00       	mov    0x13920,%eax
}
   109cb:	5d                   	pop    %ebp
   109cc:	c3                   	ret    

000109cd <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   109cd:	55                   	push   %ebp
   109ce:	89 e5                	mov    %esp,%ebp
   109d0:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   109d3:	e8 d3 0c 00 00       	call   116ab <idt_enter_protection>
   109d8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   109db:	e8 b5 ff ff ff       	call   10995 <task_ready_first>
   109e0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   109e3:	a1 20 39 01 00       	mov    0x13920,%eax
   109e8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   109eb:	74 37                	je     10a24 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   109ed:	a1 20 39 01 00       	mov    0x13920,%eax
   109f2:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   109f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109f9:	75 07                	jne    10a02 <task_switch+0x35>
            to = &task_manager.empty_task;
   109fb:	c7 45 f4 fc 39 01 00 	movl   $0x139fc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10a02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a05:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10a0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a0e:	a3 20 39 01 00       	mov    %eax,0x13920
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10a13:	83 ec 08             	sub    $0x8,%esp
   10a16:	ff 75 f4             	push   -0xc(%ebp)
   10a19:	ff 75 ec             	push   -0x14(%ebp)
   10a1c:	e8 23 fc ff ff       	call   10644 <task_switch_from_to>
   10a21:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10a24:	83 ec 0c             	sub    $0xc,%esp
   10a27:	ff 75 f0             	push   -0x10(%ebp)
   10a2a:	e8 94 0c 00 00       	call   116c3 <idt_leave_protection>
   10a2f:	83 c4 10             	add    $0x10,%esp
}
   10a32:	90                   	nop
   10a33:	c9                   	leave  
   10a34:	c3                   	ret    

00010a35 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10a35:	55                   	push   %ebp
   10a36:	89 e5                	mov    %esp,%ebp
   10a38:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10a3b:	e8 6b 0c 00 00       	call   116ab <idt_enter_protection>
   10a40:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10a43:	83 ec 0c             	sub    $0xc,%esp
   10a46:	68 24 39 01 00       	push   $0x13924
   10a4b:	e8 44 fb ff ff       	call   10594 <list_get_size>
   10a50:	83 c4 10             	add    $0x10,%esp
   10a53:	83 f8 01             	cmp    $0x1,%eax
   10a56:	7e 29                	jle    10a81 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10a58:	e8 66 ff ff ff       	call   109c3 <task_current>
   10a5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10a60:	83 ec 0c             	sub    $0xc,%esp
   10a63:	ff 75 f0             	push   -0x10(%ebp)
   10a66:	e8 df fe ff ff       	call   1094a <task_set_unready>
   10a6b:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10a6e:	83 ec 0c             	sub    $0xc,%esp
   10a71:	ff 75 f0             	push   -0x10(%ebp)
   10a74:	e8 86 fe ff ff       	call   108ff <task_set_ready>
   10a79:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10a7c:	e8 4c ff ff ff       	call   109cd <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10a81:	83 ec 0c             	sub    $0xc,%esp
   10a84:	ff 75 f4             	push   -0xc(%ebp)
   10a87:	e8 37 0c 00 00       	call   116c3 <idt_leave_protection>
   10a8c:	83 c4 10             	add    $0x10,%esp
    return 0;
   10a8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a94:	c9                   	leave  
   10a95:	c3                   	ret    

00010a96 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10a96:	55                   	push   %ebp
   10a97:	89 e5                	mov    %esp,%ebp
   10a99:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10a9c:	83 ec 0c             	sub    $0xc,%esp
   10a9f:	68 3c 39 01 00       	push   $0x1393c
   10aa4:	e8 18 fb ff ff       	call   105c1 <list_get_first>
   10aa9:	83 c4 10             	add    $0x10,%esp
   10aac:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10aaf:	eb 62                	jmp    10b13 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10ab1:	83 ec 0c             	sub    $0xc,%esp
   10ab4:	ff 75 f4             	push   -0xc(%ebp)
   10ab7:	e8 2f fa ff ff       	call   104eb <list_node_next>
   10abc:	83 c4 10             	add    $0x10,%esp
   10abf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10ac2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ac6:	74 08                	je     10ad0 <task_slice_end+0x3a>
   10ac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10acb:	83 e8 30             	sub    $0x30,%eax
   10ace:	eb 05                	jmp    10ad5 <task_slice_end+0x3f>
   10ad0:	b8 00 00 00 00       	mov    $0x0,%eax
   10ad5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10ad8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10adb:	8b 40 0c             	mov    0xc(%eax),%eax
   10ade:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ae1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10ae4:	89 50 0c             	mov    %edx,0xc(%eax)
   10ae7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10aea:	8b 40 0c             	mov    0xc(%eax),%eax
   10aed:	85 c0                	test   %eax,%eax
   10aef:	75 1c                	jne    10b0d <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10af1:	83 ec 0c             	sub    $0xc,%esp
   10af4:	ff 75 e8             	push   -0x18(%ebp)
   10af7:	e8 01 01 00 00       	call   10bfd <task_set_wakeup>
   10afc:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10aff:	83 ec 0c             	sub    $0xc,%esp
   10b02:	ff 75 e8             	push   -0x18(%ebp)
   10b05:	e8 f5 fd ff ff       	call   108ff <task_set_ready>
   10b0a:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10b10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10b13:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b17:	75 98                	jne    10ab1 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10b19:	e8 a5 fe ff ff       	call   109c3 <task_current>
   10b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10b21:	81 7d f0 fc 39 01 00 	cmpl   $0x139fc,-0x10(%ebp)
   10b28:	75 23                	jne    10b4d <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10b2a:	83 ec 0c             	sub    $0xc,%esp
   10b2d:	68 24 39 01 00       	push   $0x13924
   10b32:	e8 28 fa ff ff       	call   1055f <list_is_empty>
   10b37:	83 c4 10             	add    $0x10,%esp
   10b3a:	85 c0                	test   %eax,%eax
   10b3c:	75 60                	jne    10b9e <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10b3e:	c7 05 fc 39 01 00 00 	movl   $0x0,0x139fc
   10b45:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10b48:	e8 80 fe ff ff       	call   109cd <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10b4d:	81 7d f0 fc 39 01 00 	cmpl   $0x139fc,-0x10(%ebp)
   10b54:	74 49                	je     10b9f <task_slice_end+0x109>
   10b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b59:	8b 40 08             	mov    0x8(%eax),%eax
   10b5c:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b62:	89 50 08             	mov    %edx,0x8(%eax)
   10b65:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b68:	8b 40 08             	mov    0x8(%eax),%eax
   10b6b:	85 c0                	test   %eax,%eax
   10b6d:	75 30                	jne    10b9f <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10b6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b72:	8b 50 04             	mov    0x4(%eax),%edx
   10b75:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b78:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10b7b:	83 ec 0c             	sub    $0xc,%esp
   10b7e:	ff 75 f0             	push   -0x10(%ebp)
   10b81:	e8 c4 fd ff ff       	call   1094a <task_set_unready>
   10b86:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10b89:	83 ec 0c             	sub    $0xc,%esp
   10b8c:	ff 75 f0             	push   -0x10(%ebp)
   10b8f:	e8 6b fd ff ff       	call   108ff <task_set_ready>
   10b94:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10b97:	e8 31 fe ff ff       	call   109cd <task_switch>
   10b9c:	eb 01                	jmp    10b9f <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10b9e:	90                   	nop
    }
}
   10b9f:	c9                   	leave  
   10ba0:	c3                   	ret    

00010ba1 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10ba1:	55                   	push   %ebp
   10ba2:	89 e5                	mov    %esp,%ebp
   10ba4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10ba7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10bab:	75 1c                	jne    10bc9 <task_set_sleep+0x28>
   10bad:	68 e1 2e 01 00       	push   $0x12ee1
   10bb2:	68 cc 2f 01 00       	push   $0x12fcc
   10bb7:	68 66 01 00 00       	push   $0x166
   10bbc:	68 f4 2e 01 00       	push   $0x12ef4
   10bc1:	e8 a7 14 00 00       	call   1206d <pannic>
   10bc6:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10bc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10bcd:	74 2b                	je     10bfa <task_set_sleep+0x59>

    task->sleep = slice;
   10bcf:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bd2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd5:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdb:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10be1:	8b 45 08             	mov    0x8(%ebp),%eax
   10be4:	83 c0 30             	add    $0x30,%eax
   10be7:	83 ec 08             	sub    $0x8,%esp
   10bea:	50                   	push   %eax
   10beb:	68 3c 39 01 00       	push   $0x1393c
   10bf0:	e8 c3 1d 00 00       	call   129b8 <list_insert_last>
   10bf5:	83 c4 10             	add    $0x10,%esp
   10bf8:	eb 01                	jmp    10bfb <task_set_sleep+0x5a>
    if (slice == 0) return;
   10bfa:	90                   	nop
}
   10bfb:	c9                   	leave  
   10bfc:	c3                   	ret    

00010bfd <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10bfd:	55                   	push   %ebp
   10bfe:	89 e5                	mov    %esp,%ebp
   10c00:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c07:	75 1c                	jne    10c25 <task_set_wakeup+0x28>
   10c09:	68 e1 2e 01 00       	push   $0x12ee1
   10c0e:	68 dc 2f 01 00       	push   $0x12fdc
   10c13:	68 74 01 00 00       	push   $0x174
   10c18:	68 f4 2e 01 00       	push   $0x12ef4
   10c1d:	e8 4b 14 00 00       	call   1206d <pannic>
   10c22:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10c25:	8b 45 08             	mov    0x8(%ebp),%eax
   10c28:	83 c0 30             	add    $0x30,%eax
   10c2b:	83 ec 08             	sub    $0x8,%esp
   10c2e:	50                   	push   %eax
   10c2f:	68 3c 39 01 00       	push   $0x1393c
   10c34:	e8 74 1f 00 00       	call   12bad <list_remove>
   10c39:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10c45:	90                   	nop
   10c46:	c9                   	leave  
   10c47:	c3                   	ret    

00010c48 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10c48:	55                   	push   %ebp
   10c49:	89 e5                	mov    %esp,%ebp
   10c4b:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10c4e:	e8 58 0a 00 00       	call   116ab <idt_enter_protection>
   10c53:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10c56:	e8 68 fd ff ff       	call   109c3 <task_current>
   10c5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10c5e:	83 ec 0c             	sub    $0xc,%esp
   10c61:	ff 75 f0             	push   -0x10(%ebp)
   10c64:	e8 e1 fc ff ff       	call   1094a <task_set_unready>
   10c69:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10c6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6f:	83 c0 09             	add    $0x9,%eax
   10c72:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10c77:	f7 e2                	mul    %edx
   10c79:	89 d0                	mov    %edx,%eax
   10c7b:	c1 e8 03             	shr    $0x3,%eax
   10c7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10c81:	83 ec 08             	sub    $0x8,%esp
   10c84:	ff 75 ec             	push   -0x14(%ebp)
   10c87:	ff 75 f0             	push   -0x10(%ebp)
   10c8a:	e8 12 ff ff ff       	call   10ba1 <task_set_sleep>
   10c8f:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10c92:	e8 36 fd ff ff       	call   109cd <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10c97:	83 ec 0c             	sub    $0xc,%esp
   10c9a:	ff 75 f4             	push   -0xc(%ebp)
   10c9d:	e8 21 0a 00 00       	call   116c3 <idt_leave_protection>
   10ca2:	83 c4 10             	add    $0x10,%esp
   10ca5:	90                   	nop
   10ca6:	c9                   	leave  
   10ca7:	c3                   	ret    

00010ca8 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10ca8:	55                   	push   %ebp
   10ca9:	89 e5                	mov    %esp,%ebp
   10cab:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10cae:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb1:	c1 e8 10             	shr    $0x10,%eax
   10cb4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10cb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cc2:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10cc5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10cc9:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10ccd:	90                   	nop
   10cce:	c9                   	leave  
   10ccf:	c3                   	ret    

00010cd0 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10cd0:	55                   	push   %ebp
   10cd1:	89 e5                	mov    %esp,%ebp
   10cd3:	83 ec 18             	sub    $0x18,%esp
   10cd6:	8b 55 08             	mov    0x8(%ebp),%edx
   10cd9:	8b 45 14             	mov    0x14(%ebp),%eax
   10cdc:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10ce0:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10ce4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ce8:	66 c1 e8 03          	shr    $0x3,%ax
   10cec:	0f b7 c0             	movzwl %ax,%eax
   10cef:	c1 e0 03             	shl    $0x3,%eax
   10cf2:	05 c0 3c 01 00       	add    $0x13cc0,%eax
   10cf7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10cfa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cfd:	89 c2                	mov    %eax,%edx
   10cff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d02:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10d06:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d09:	c1 e8 10             	shr    $0x10,%eax
   10d0c:	89 c2                	mov    %eax,%edx
   10d0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d11:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10d14:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d17:	c1 e8 18             	shr    $0x18,%eax
   10d1a:	89 c2                	mov    %eax,%edx
   10d1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d1f:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10d22:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10d29:	76 1d                	jbe    10d48 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10d2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d2e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d32:	66 0d 00 80          	or     $0x8000,%ax
   10d36:	89 c2                	mov    %eax,%edx
   10d38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d3b:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10d3f:	8b 45 10             	mov    0x10(%ebp),%eax
   10d42:	c1 e8 0c             	shr    $0xc,%eax
   10d45:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10d48:	8b 45 10             	mov    0x10(%ebp),%eax
   10d4b:	89 c2                	mov    %eax,%edx
   10d4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d50:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10d53:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d56:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d5a:	89 c2                	mov    %eax,%edx
   10d5c:	8b 45 10             	mov    0x10(%ebp),%eax
   10d5f:	c1 e8 08             	shr    $0x8,%eax
   10d62:	66 25 00 0f          	and    $0xf00,%ax
   10d66:	09 d0                	or     %edx,%eax
   10d68:	89 c2                	mov    %eax,%edx
   10d6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d6d:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10d71:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d74:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d78:	89 c2                	mov    %eax,%edx
   10d7a:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10d7e:	80 e4 f0             	and    $0xf0,%ah
   10d81:	09 d0                	or     %edx,%eax
   10d83:	89 c2                	mov    %eax,%edx
   10d85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d88:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10d8c:	90                   	nop
   10d8d:	c9                   	leave  
   10d8e:	c3                   	ret    

00010d8f <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10d8f:	55                   	push   %ebp
   10d90:	89 e5                	mov    %esp,%ebp
   10d92:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10d95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10d9c:	eb 1c                	jmp    10dba <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10da1:	c1 e0 03             	shl    $0x3,%eax
   10da4:	0f b7 c0             	movzwl %ax,%eax
   10da7:	6a 00                	push   $0x0
   10da9:	6a 00                	push   $0x0
   10dab:	6a 00                	push   $0x0
   10dad:	50                   	push   %eax
   10dae:	e8 1d ff ff ff       	call   10cd0 <segment_desc_set>
   10db3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10db6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10dba:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10dc1:	7e db                	jle    10d9e <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10dc3:	68 92 40 00 00       	push   $0x4092
   10dc8:	6a ff                	push   $0xffffffff
   10dca:	6a 00                	push   $0x0
   10dcc:	6a 10                	push   $0x10
   10dce:	e8 fd fe ff ff       	call   10cd0 <segment_desc_set>
   10dd3:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10dd6:	c7 05 c8 3c 02 00 01 	movl   $0x1,0x23cc8
   10ddd:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10de0:	68 9a 40 00 00       	push   $0x409a
   10de5:	6a ff                	push   $0xffffffff
   10de7:	6a 00                	push   $0x0
   10de9:	6a 08                	push   $0x8
   10deb:	e8 e0 fe ff ff       	call   10cd0 <segment_desc_set>
   10df0:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10df3:	c7 05 c4 3c 02 00 01 	movl   $0x1,0x23cc4
   10dfa:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10dfd:	b8 c0 3c 01 00       	mov    $0x13cc0,%eax
   10e02:	68 00 00 01 00       	push   $0x10000
   10e07:	50                   	push   %eax
   10e08:	e8 9b fe ff ff       	call   10ca8 <lgdt>
   10e0d:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10e10:	83 ec 0c             	sub    $0xc,%esp
   10e13:	68 c0 bc 02 00       	push   $0x2bcc0
   10e18:	e8 3b 0b 00 00       	call   11958 <mutex_init>
   10e1d:	83 c4 10             	add    $0x10,%esp
}
   10e20:	90                   	nop
   10e21:	c9                   	leave  
   10e22:	c3                   	ret    

00010e23 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10e23:	55                   	push   %ebp
   10e24:	89 e5                	mov    %esp,%ebp
   10e26:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10e29:	83 ec 0c             	sub    $0xc,%esp
   10e2c:	68 c0 bc 02 00       	push   $0x2bcc0
   10e31:	e8 6f 0b 00 00       	call   119a5 <mutex_lock>
   10e36:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10e39:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10e40:	eb 38                	jmp    10e7a <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e45:	8b 04 85 c0 3c 02 00 	mov    0x23cc0(,%eax,4),%eax
   10e4c:	85 c0                	test   %eax,%eax
   10e4e:	75 26                	jne    10e76 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10e50:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e53:	c7 04 85 c0 3c 02 00 	movl   $0x1,0x23cc0(,%eax,4)
   10e5a:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10e5e:	83 ec 0c             	sub    $0xc,%esp
   10e61:	68 c0 bc 02 00       	push   $0x2bcc0
   10e66:	e8 cb 0b 00 00       	call   11a36 <mutex_unlock>
   10e6b:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10e6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e71:	c1 e0 03             	shl    $0x3,%eax
   10e74:	eb 22                	jmp    10e98 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10e76:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10e7a:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10e81:	7e bf                	jle    10e42 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10e83:	83 ec 0c             	sub    $0xc,%esp
   10e86:	68 c0 bc 02 00       	push   $0x2bcc0
   10e8b:	e8 a6 0b 00 00       	call   11a36 <mutex_unlock>
   10e90:	83 c4 10             	add    $0x10,%esp
    return -1;
   10e93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e98:	c9                   	leave  
   10e99:	c3                   	ret    

00010e9a <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10e9a:	55                   	push   %ebp
   10e9b:	89 e5                	mov    %esp,%ebp
   10e9d:	fa                   	cli    
   10e9e:	90                   	nop
   10e9f:	5d                   	pop    %ebp
   10ea0:	c3                   	ret    

00010ea1 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10ea1:	55                   	push   %ebp
   10ea2:	89 e5                	mov    %esp,%ebp
   10ea4:	fb                   	sti    
   10ea5:	90                   	nop
   10ea6:	5d                   	pop    %ebp
   10ea7:	c3                   	ret    

00010ea8 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10ea8:	55                   	push   %ebp
   10ea9:	89 e5                	mov    %esp,%ebp
   10eab:	f4                   	hlt    
   10eac:	90                   	nop
   10ead:	5d                   	pop    %ebp
   10eae:	c3                   	ret    

00010eaf <inb>:
static inline uint8_t inb(uint16_t port) {
   10eaf:	55                   	push   %ebp
   10eb0:	89 e5                	mov    %esp,%ebp
   10eb2:	83 ec 14             	sub    $0x14,%esp
   10eb5:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10ebc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ec0:	89 c2                	mov    %eax,%edx
   10ec2:	ec                   	in     (%dx),%al
   10ec3:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10ec6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10eca:	c9                   	leave  
   10ecb:	c3                   	ret    

00010ecc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10ecc:	55                   	push   %ebp
   10ecd:	89 e5                	mov    %esp,%ebp
   10ecf:	83 ec 08             	sub    $0x8,%esp
   10ed2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed5:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ed8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10edc:	89 d0                	mov    %edx,%eax
   10ede:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10ee1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ee5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10ee9:	ee                   	out    %al,(%dx)
}
   10eea:	90                   	nop
   10eeb:	c9                   	leave  
   10eec:	c3                   	ret    

00010eed <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10eed:	55                   	push   %ebp
   10eee:	89 e5                	mov    %esp,%ebp
   10ef0:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10ef3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef6:	c1 e8 10             	shr    $0x10,%eax
   10ef9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10efd:	8b 45 08             	mov    0x8(%ebp),%eax
   10f00:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10f04:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f07:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10f0a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10f0e:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10f12:	90                   	nop
   10f13:	c9                   	leave  
   10f14:	c3                   	ret    

00010f15 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10f15:	55                   	push   %ebp
   10f16:	89 e5                	mov    %esp,%ebp
   10f18:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10f1b:	9c                   	pushf  
   10f1c:	58                   	pop    %eax
   10f1d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10f20:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10f23:	c9                   	leave  
   10f24:	c3                   	ret    

00010f25 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10f25:	55                   	push   %ebp
   10f26:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10f28:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2b:	50                   	push   %eax
   10f2c:	9d                   	popf   
}
   10f2d:	90                   	nop
   10f2e:	5d                   	pop    %ebp
   10f2f:	c3                   	ret    

00010f30 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10f30:	55                   	push   %ebp
   10f31:	89 e5                	mov    %esp,%ebp
   10f33:	57                   	push   %edi
   10f34:	56                   	push   %esi
   10f35:	53                   	push   %ebx
   10f36:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10f39:	83 ec 0c             	sub    $0xc,%esp
   10f3c:	68 ec 2f 01 00       	push   $0x12fec
   10f41:	e8 f6 1d 00 00       	call   12d3c <log_printf>
   10f46:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10f49:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4c:	8b 50 34             	mov    0x34(%eax),%edx
   10f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f52:	8b 40 30             	mov    0x30(%eax),%eax
   10f55:	83 ec 04             	sub    $0x4,%esp
   10f58:	52                   	push   %edx
   10f59:	50                   	push   %eax
   10f5a:	68 2a 30 01 00       	push   $0x1302a
   10f5f:	e8 d8 1d 00 00       	call   12d3c <log_printf>
   10f64:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10f67:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6a:	8b 38                	mov    (%eax),%edi
   10f6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6f:	8b 70 04             	mov    0x4(%eax),%esi
   10f72:	8b 45 08             	mov    0x8(%ebp),%eax
   10f75:	8b 58 08             	mov    0x8(%eax),%ebx
   10f78:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7b:	8b 48 0c             	mov    0xc(%eax),%ecx
   10f7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f81:	8b 50 0c             	mov    0xc(%eax),%edx
   10f84:	8b 45 08             	mov    0x8(%ebp),%eax
   10f87:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10f8a:	83 ec 04             	sub    $0x4,%esp
   10f8d:	57                   	push   %edi
   10f8e:	56                   	push   %esi
   10f8f:	53                   	push   %ebx
   10f90:	51                   	push   %ecx
   10f91:	52                   	push   %edx
   10f92:	50                   	push   %eax
   10f93:	68 44 30 01 00       	push   $0x13044
   10f98:	e8 9f 1d 00 00       	call   12d3c <log_printf>
   10f9d:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10fa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa3:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10fa6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa9:	8b 40 18             	mov    0x18(%eax),%eax
   10fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10faf:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb2:	8b 58 10             	mov    0x10(%eax),%ebx
   10fb5:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbb:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10fbe:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc1:	8b 70 24             	mov    0x24(%eax),%esi
   10fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc7:	8b 58 28             	mov    0x28(%eax),%ebx
   10fca:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcd:	8b 50 20             	mov    0x20(%eax),%edx
   10fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd3:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10fd6:	83 ec 0c             	sub    $0xc,%esp
   10fd9:	51                   	push   %ecx
   10fda:	ff 75 e4             	push   -0x1c(%ebp)
   10fdd:	ff 75 e0             	push   -0x20(%ebp)
   10fe0:	57                   	push   %edi
   10fe1:	56                   	push   %esi
   10fe2:	53                   	push   %ebx
   10fe3:	52                   	push   %edx
   10fe4:	50                   	push   %eax
   10fe5:	68 74 30 01 00       	push   $0x13074
   10fea:	e8 4d 1d 00 00       	call   12d3c <log_printf>
   10fef:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10ff2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff5:	8b 50 40             	mov    0x40(%eax),%edx
   10ff8:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffb:	8b 40 38             	mov    0x38(%eax),%eax
   10ffe:	83 ec 04             	sub    $0x4,%esp
   11001:	52                   	push   %edx
   11002:	50                   	push   %eax
   11003:	68 cc 30 01 00       	push   $0x130cc
   11008:	e8 2f 1d 00 00       	call   12d3c <log_printf>
   1100d:	83 c4 10             	add    $0x10,%esp
}
   11010:	90                   	nop
   11011:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11014:	5b                   	pop    %ebx
   11015:	5e                   	pop    %esi
   11016:	5f                   	pop    %edi
   11017:	5d                   	pop    %ebp
   11018:	c3                   	ret    

00011019 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11019:	55                   	push   %ebp
   1101a:	89 e5                	mov    %esp,%ebp
   1101c:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   1101f:	83 ec 0c             	sub    $0xc,%esp
   11022:	68 e8 30 01 00       	push   $0x130e8
   11027:	e8 10 1d 00 00       	call   12d3c <log_printf>
   1102c:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   1102f:	83 ec 08             	sub    $0x8,%esp
   11032:	ff 75 0c             	push   0xc(%ebp)
   11035:	68 1c 31 01 00       	push   $0x1311c
   1103a:	e8 fd 1c 00 00       	call   12d3c <log_printf>
   1103f:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11042:	83 ec 0c             	sub    $0xc,%esp
   11045:	ff 75 08             	push   0x8(%ebp)
   11048:	e8 e3 fe ff ff       	call   10f30 <print_exception_fram>
   1104d:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11050:	e8 53 fe ff ff       	call   10ea8 <hlt>
   11055:	eb f9                	jmp    11050 <do_default_handler+0x37>

00011057 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11057:	55                   	push   %ebp
   11058:	89 e5                	mov    %esp,%ebp
   1105a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1105d:	83 ec 08             	sub    $0x8,%esp
   11060:	68 36 31 01 00       	push   $0x13136
   11065:	ff 75 08             	push   0x8(%ebp)
   11068:	e8 ac ff ff ff       	call   11019 <do_default_handler>
   1106d:	83 c4 10             	add    $0x10,%esp
}
   11070:	90                   	nop
   11071:	c9                   	leave  
   11072:	c3                   	ret    

00011073 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11073:	55                   	push   %ebp
   11074:	89 e5                	mov    %esp,%ebp
   11076:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11079:	83 ec 08             	sub    $0x8,%esp
   1107c:	68 48 31 01 00       	push   $0x13148
   11081:	ff 75 08             	push   0x8(%ebp)
   11084:	e8 90 ff ff ff       	call   11019 <do_default_handler>
   11089:	83 c4 10             	add    $0x10,%esp
}
   1108c:	90                   	nop
   1108d:	c9                   	leave  
   1108e:	c3                   	ret    

0001108f <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   1108f:	55                   	push   %ebp
   11090:	89 e5                	mov    %esp,%ebp
   11092:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11095:	83 ec 08             	sub    $0x8,%esp
   11098:	68 5a 31 01 00       	push   $0x1315a
   1109d:	ff 75 08             	push   0x8(%ebp)
   110a0:	e8 74 ff ff ff       	call   11019 <do_default_handler>
   110a5:	83 c4 10             	add    $0x10,%esp
}
   110a8:	90                   	nop
   110a9:	c9                   	leave  
   110aa:	c3                   	ret    

000110ab <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   110ab:	55                   	push   %ebp
   110ac:	89 e5                	mov    %esp,%ebp
   110ae:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   110b1:	83 ec 08             	sub    $0x8,%esp
   110b4:	68 6a 31 01 00       	push   $0x1316a
   110b9:	ff 75 08             	push   0x8(%ebp)
   110bc:	e8 58 ff ff ff       	call   11019 <do_default_handler>
   110c1:	83 c4 10             	add    $0x10,%esp
}
   110c4:	90                   	nop
   110c5:	c9                   	leave  
   110c6:	c3                   	ret    

000110c7 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   110c7:	55                   	push   %ebp
   110c8:	89 e5                	mov    %esp,%ebp
   110ca:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   110cd:	83 ec 08             	sub    $0x8,%esp
   110d0:	68 78 31 01 00       	push   $0x13178
   110d5:	ff 75 08             	push   0x8(%ebp)
   110d8:	e8 3c ff ff ff       	call   11019 <do_default_handler>
   110dd:	83 c4 10             	add    $0x10,%esp
}
   110e0:	90                   	nop
   110e1:	c9                   	leave  
   110e2:	c3                   	ret    

000110e3 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   110e3:	55                   	push   %ebp
   110e4:	89 e5                	mov    %esp,%ebp
   110e6:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   110e9:	83 ec 08             	sub    $0x8,%esp
   110ec:	68 8d 31 01 00       	push   $0x1318d
   110f1:	ff 75 08             	push   0x8(%ebp)
   110f4:	e8 20 ff ff ff       	call   11019 <do_default_handler>
   110f9:	83 c4 10             	add    $0x10,%esp
}
   110fc:	90                   	nop
   110fd:	c9                   	leave  
   110fe:	c3                   	ret    

000110ff <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   110ff:	55                   	push   %ebp
   11100:	89 e5                	mov    %esp,%ebp
   11102:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11105:	83 ec 08             	sub    $0x8,%esp
   11108:	68 a0 31 01 00       	push   $0x131a0
   1110d:	ff 75 08             	push   0x8(%ebp)
   11110:	e8 04 ff ff ff       	call   11019 <do_default_handler>
   11115:	83 c4 10             	add    $0x10,%esp
}
   11118:	90                   	nop
   11119:	c9                   	leave  
   1111a:	c3                   	ret    

0001111b <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1111b:	55                   	push   %ebp
   1111c:	89 e5                	mov    %esp,%ebp
   1111e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11121:	83 ec 08             	sub    $0x8,%esp
   11124:	68 b6 31 01 00       	push   $0x131b6
   11129:	ff 75 08             	push   0x8(%ebp)
   1112c:	e8 e8 fe ff ff       	call   11019 <do_default_handler>
   11131:	83 c4 10             	add    $0x10,%esp
}
   11134:	90                   	nop
   11135:	c9                   	leave  
   11136:	c3                   	ret    

00011137 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11137:	55                   	push   %ebp
   11138:	89 e5                	mov    %esp,%ebp
   1113a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1113d:	83 ec 08             	sub    $0x8,%esp
   11140:	68 cf 31 01 00       	push   $0x131cf
   11145:	ff 75 08             	push   0x8(%ebp)
   11148:	e8 cc fe ff ff       	call   11019 <do_default_handler>
   1114d:	83 c4 10             	add    $0x10,%esp
}
   11150:	90                   	nop
   11151:	c9                   	leave  
   11152:	c3                   	ret    

00011153 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11153:	55                   	push   %ebp
   11154:	89 e5                	mov    %esp,%ebp
   11156:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11159:	83 ec 08             	sub    $0x8,%esp
   1115c:	68 ec 31 01 00       	push   $0x131ec
   11161:	ff 75 08             	push   0x8(%ebp)
   11164:	e8 b0 fe ff ff       	call   11019 <do_default_handler>
   11169:	83 c4 10             	add    $0x10,%esp
}
   1116c:	90                   	nop
   1116d:	c9                   	leave  
   1116e:	c3                   	ret    

0001116f <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   1116f:	55                   	push   %ebp
   11170:	89 e5                	mov    %esp,%ebp
   11172:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11175:	83 ec 08             	sub    $0x8,%esp
   11178:	68 03 32 01 00       	push   $0x13203
   1117d:	ff 75 08             	push   0x8(%ebp)
   11180:	e8 94 fe ff ff       	call   11019 <do_default_handler>
   11185:	83 c4 10             	add    $0x10,%esp
}
   11188:	90                   	nop
   11189:	c9                   	leave  
   1118a:	c3                   	ret    

0001118b <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   1118b:	55                   	push   %ebp
   1118c:	89 e5                	mov    %esp,%ebp
   1118e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11191:	83 ec 08             	sub    $0x8,%esp
   11194:	68 19 32 01 00       	push   $0x13219
   11199:	ff 75 08             	push   0x8(%ebp)
   1119c:	e8 78 fe ff ff       	call   11019 <do_default_handler>
   111a1:	83 c4 10             	add    $0x10,%esp
}
   111a4:	90                   	nop
   111a5:	c9                   	leave  
   111a6:	c3                   	ret    

000111a7 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   111a7:	55                   	push   %ebp
   111a8:	89 e5                	mov    %esp,%ebp
   111aa:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   111ad:	83 ec 08             	sub    $0x8,%esp
   111b0:	68 37 32 01 00       	push   $0x13237
   111b5:	ff 75 08             	push   0x8(%ebp)
   111b8:	e8 5c fe ff ff       	call   11019 <do_default_handler>
   111bd:	83 c4 10             	add    $0x10,%esp
}
   111c0:	90                   	nop
   111c1:	c9                   	leave  
   111c2:	c3                   	ret    

000111c3 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   111c3:	55                   	push   %ebp
   111c4:	89 e5                	mov    %esp,%ebp
   111c6:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   111c9:	83 ec 08             	sub    $0x8,%esp
   111cc:	68 55 32 01 00       	push   $0x13255
   111d1:	ff 75 08             	push   0x8(%ebp)
   111d4:	e8 40 fe ff ff       	call   11019 <do_default_handler>
   111d9:	83 c4 10             	add    $0x10,%esp
}
   111dc:	90                   	nop
   111dd:	c9                   	leave  
   111de:	c3                   	ret    

000111df <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   111df:	55                   	push   %ebp
   111e0:	89 e5                	mov    %esp,%ebp
   111e2:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   111e5:	83 ec 08             	sub    $0x8,%esp
   111e8:	68 72 32 01 00       	push   $0x13272
   111ed:	ff 75 08             	push   0x8(%ebp)
   111f0:	e8 24 fe ff ff       	call   11019 <do_default_handler>
   111f5:	83 c4 10             	add    $0x10,%esp
}
   111f8:	90                   	nop
   111f9:	c9                   	leave  
   111fa:	c3                   	ret    

000111fb <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   111fb:	55                   	push   %ebp
   111fc:	89 e5                	mov    %esp,%ebp
   111fe:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11201:	83 ec 08             	sub    $0x8,%esp
   11204:	68 87 32 01 00       	push   $0x13287
   11209:	ff 75 08             	push   0x8(%ebp)
   1120c:	e8 08 fe ff ff       	call   11019 <do_default_handler>
   11211:	83 c4 10             	add    $0x10,%esp
}
   11214:	90                   	nop
   11215:	c9                   	leave  
   11216:	c3                   	ret    

00011217 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11217:	55                   	push   %ebp
   11218:	89 e5                	mov    %esp,%ebp
   1121a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   1121d:	83 ec 08             	sub    $0x8,%esp
   11220:	68 9b 32 01 00       	push   $0x1329b
   11225:	ff 75 08             	push   0x8(%ebp)
   11228:	e8 ec fd ff ff       	call   11019 <do_default_handler>
   1122d:	83 c4 10             	add    $0x10,%esp
}
   11230:	90                   	nop
   11231:	c9                   	leave  
   11232:	c3                   	ret    

00011233 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11233:	55                   	push   %ebp
   11234:	89 e5                	mov    %esp,%ebp
   11236:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11239:	83 ec 08             	sub    $0x8,%esp
   1123c:	68 b5 32 01 00       	push   $0x132b5
   11241:	ff 75 08             	push   0x8(%ebp)
   11244:	e8 d0 fd ff ff       	call   11019 <do_default_handler>
   11249:	83 c4 10             	add    $0x10,%esp
}
   1124c:	90                   	nop
   1124d:	c9                   	leave  
   1124e:	c3                   	ret    

0001124f <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1124f:	55                   	push   %ebp
   11250:	89 e5                	mov    %esp,%ebp
   11252:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11255:	83 ec 08             	sub    $0x8,%esp
   11258:	68 cd 32 01 00       	push   $0x132cd
   1125d:	ff 75 08             	push   0x8(%ebp)
   11260:	e8 b4 fd ff ff       	call   11019 <do_default_handler>
   11265:	83 c4 10             	add    $0x10,%esp
}
   11268:	90                   	nop
   11269:	c9                   	leave  
   1126a:	c3                   	ret    

0001126b <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1126b:	55                   	push   %ebp
   1126c:	89 e5                	mov    %esp,%ebp
   1126e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11271:	83 ec 08             	sub    $0x8,%esp
   11274:	68 e5 32 01 00       	push   $0x132e5
   11279:	ff 75 08             	push   0x8(%ebp)
   1127c:	e8 98 fd ff ff       	call   11019 <do_default_handler>
   11281:	83 c4 10             	add    $0x10,%esp
}
   11284:	90                   	nop
   11285:	c9                   	leave  
   11286:	c3                   	ret    

00011287 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11287:	55                   	push   %ebp
   11288:	89 e5                	mov    %esp,%ebp
   1128a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1128d:	83 ec 08             	sub    $0x8,%esp
   11290:	68 01 33 01 00       	push   $0x13301
   11295:	ff 75 08             	push   0x8(%ebp)
   11298:	e8 7c fd ff ff       	call   11019 <do_default_handler>
   1129d:	83 c4 10             	add    $0x10,%esp
}
   112a0:	90                   	nop
   112a1:	c9                   	leave  
   112a2:	c3                   	ret    

000112a3 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   112a3:	55                   	push   %ebp
   112a4:	89 e5                	mov    %esp,%ebp
   112a6:	83 ec 08             	sub    $0x8,%esp
   112a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   112ac:	8b 45 14             	mov    0x14(%ebp),%eax
   112af:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   112b3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   112b7:	8b 45 10             	mov    0x10(%ebp),%eax
   112ba:	89 c2                	mov    %eax,%edx
   112bc:	8b 45 08             	mov    0x8(%ebp),%eax
   112bf:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   112c2:	8b 45 10             	mov    0x10(%ebp),%eax
   112c5:	c1 e8 10             	shr    $0x10,%eax
   112c8:	89 c2                	mov    %eax,%edx
   112ca:	8b 45 08             	mov    0x8(%ebp),%eax
   112cd:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   112d1:	8b 45 08             	mov    0x8(%ebp),%eax
   112d4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   112d8:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   112dc:	8b 45 08             	mov    0x8(%ebp),%eax
   112df:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   112e3:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   112e7:	90                   	nop
   112e8:	c9                   	leave  
   112e9:	c3                   	ret    

000112ea <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   112ea:	55                   	push   %ebp
   112eb:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   112ed:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   112f4:	7f 06                	jg     112fc <idt_install+0x12>
   112f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112fa:	79 07                	jns    11303 <idt_install+0x19>
   112fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11301:	eb 25                	jmp    11328 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11303:	8b 45 0c             	mov    0xc(%ebp),%eax
   11306:	8b 55 08             	mov    0x8(%ebp),%edx
   11309:	c1 e2 03             	shl    $0x3,%edx
   1130c:	81 c2 e0 bc 02 00    	add    $0x2bce0,%edx
   11312:	68 00 8e 00 00       	push   $0x8e00
   11317:	50                   	push   %eax
   11318:	6a 08                	push   $0x8
   1131a:	52                   	push   %edx
   1131b:	e8 83 ff ff ff       	call   112a3 <gate_desc_set>
   11320:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11323:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11328:	c9                   	leave  
   11329:	c3                   	ret    

0001132a <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   1132a:	55                   	push   %ebp
   1132b:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   1132d:	6a 11                	push   $0x11
   1132f:	6a 20                	push   $0x20
   11331:	e8 96 fb ff ff       	call   10ecc <outb>
   11336:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11339:	6a 20                	push   $0x20
   1133b:	6a 21                	push   $0x21
   1133d:	e8 8a fb ff ff       	call   10ecc <outb>
   11342:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11345:	6a 04                	push   $0x4
   11347:	6a 21                	push   $0x21
   11349:	e8 7e fb ff ff       	call   10ecc <outb>
   1134e:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11351:	6a 01                	push   $0x1
   11353:	6a 21                	push   $0x21
   11355:	e8 72 fb ff ff       	call   10ecc <outb>
   1135a:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1135d:	6a 11                	push   $0x11
   1135f:	68 a0 00 00 00       	push   $0xa0
   11364:	e8 63 fb ff ff       	call   10ecc <outb>
   11369:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1136c:	6a 28                	push   $0x28
   1136e:	68 a1 00 00 00       	push   $0xa1
   11373:	e8 54 fb ff ff       	call   10ecc <outb>
   11378:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1137b:	6a 02                	push   $0x2
   1137d:	68 a1 00 00 00       	push   $0xa1
   11382:	e8 45 fb ff ff       	call   10ecc <outb>
   11387:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   1138a:	6a 01                	push   $0x1
   1138c:	68 a1 00 00 00       	push   $0xa1
   11391:	e8 36 fb ff ff       	call   10ecc <outb>
   11396:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11399:	68 fb 00 00 00       	push   $0xfb
   1139e:	6a 21                	push   $0x21
   113a0:	e8 27 fb ff ff       	call   10ecc <outb>
   113a5:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   113a8:	68 ff 00 00 00       	push   $0xff
   113ad:	68 a1 00 00 00       	push   $0xa1
   113b2:	e8 15 fb ff ff       	call   10ecc <outb>
   113b7:	83 c4 08             	add    $0x8,%esp


}
   113ba:	90                   	nop
   113bb:	c9                   	leave  
   113bc:	c3                   	ret    

000113bd <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   113bd:	55                   	push   %ebp
   113be:	89 e5                	mov    %esp,%ebp
   113c0:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   113c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   113ca:	eb 14                	jmp    113e0 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   113cc:	68 2a 00 01 00       	push   $0x1002a
   113d1:	ff 75 fc             	push   -0x4(%ebp)
   113d4:	e8 11 ff ff ff       	call   112ea <idt_install>
   113d9:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   113dc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   113e0:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   113e7:	7e e3                	jle    113cc <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   113e9:	68 47 00 01 00       	push   $0x10047
   113ee:	6a 00                	push   $0x0
   113f0:	e8 f5 fe ff ff       	call   112ea <idt_install>
   113f5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   113f8:	68 64 00 01 00       	push   $0x10064
   113fd:	6a 01                	push   $0x1
   113ff:	e8 e6 fe ff ff       	call   112ea <idt_install>
   11404:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11407:	68 81 00 01 00       	push   $0x10081
   1140c:	6a 02                	push   $0x2
   1140e:	e8 d7 fe ff ff       	call   112ea <idt_install>
   11413:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11416:	68 9e 00 01 00       	push   $0x1009e
   1141b:	6a 03                	push   $0x3
   1141d:	e8 c8 fe ff ff       	call   112ea <idt_install>
   11422:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11425:	68 bb 00 01 00       	push   $0x100bb
   1142a:	6a 04                	push   $0x4
   1142c:	e8 b9 fe ff ff       	call   112ea <idt_install>
   11431:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11434:	68 d8 00 01 00       	push   $0x100d8
   11439:	6a 05                	push   $0x5
   1143b:	e8 aa fe ff ff       	call   112ea <idt_install>
   11440:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11443:	68 f5 00 01 00       	push   $0x100f5
   11448:	6a 06                	push   $0x6
   1144a:	e8 9b fe ff ff       	call   112ea <idt_install>
   1144f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11452:	68 12 01 01 00       	push   $0x10112
   11457:	6a 07                	push   $0x7
   11459:	e8 8c fe ff ff       	call   112ea <idt_install>
   1145e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11461:	68 2f 01 01 00       	push   $0x1012f
   11466:	6a 08                	push   $0x8
   11468:	e8 7d fe ff ff       	call   112ea <idt_install>
   1146d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11470:	68 4a 01 01 00       	push   $0x1014a
   11475:	6a 0a                	push   $0xa
   11477:	e8 6e fe ff ff       	call   112ea <idt_install>
   1147c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1147f:	68 65 01 01 00       	push   $0x10165
   11484:	6a 0b                	push   $0xb
   11486:	e8 5f fe ff ff       	call   112ea <idt_install>
   1148b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1148e:	68 80 01 01 00       	push   $0x10180
   11493:	6a 0c                	push   $0xc
   11495:	e8 50 fe ff ff       	call   112ea <idt_install>
   1149a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1149d:	68 9b 01 01 00       	push   $0x1019b
   114a2:	6a 0d                	push   $0xd
   114a4:	e8 41 fe ff ff       	call   112ea <idt_install>
   114a9:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   114ac:	68 b6 01 01 00       	push   $0x101b6
   114b1:	6a 0e                	push   $0xe
   114b3:	e8 32 fe ff ff       	call   112ea <idt_install>
   114b8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   114bb:	68 d1 01 01 00       	push   $0x101d1
   114c0:	6a 10                	push   $0x10
   114c2:	e8 23 fe ff ff       	call   112ea <idt_install>
   114c7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   114ca:	68 ee 01 01 00       	push   $0x101ee
   114cf:	6a 11                	push   $0x11
   114d1:	e8 14 fe ff ff       	call   112ea <idt_install>
   114d6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   114d9:	68 09 02 01 00       	push   $0x10209
   114de:	6a 12                	push   $0x12
   114e0:	e8 05 fe ff ff       	call   112ea <idt_install>
   114e5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   114e8:	68 26 02 01 00       	push   $0x10226
   114ed:	6a 13                	push   $0x13
   114ef:	e8 f6 fd ff ff       	call   112ea <idt_install>
   114f4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   114f7:	68 43 02 01 00       	push   $0x10243
   114fc:	6a 14                	push   $0x14
   114fe:	e8 e7 fd ff ff       	call   112ea <idt_install>
   11503:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11506:	68 60 02 01 00       	push   $0x10260
   1150b:	6a 15                	push   $0x15
   1150d:	e8 d8 fd ff ff       	call   112ea <idt_install>
   11512:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11515:	b8 e0 bc 02 00       	mov    $0x2bce0,%eax
   1151a:	68 00 08 00 00       	push   $0x800
   1151f:	50                   	push   %eax
   11520:	e8 c8 f9 ff ff       	call   10eed <lidt>
   11525:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11528:	e8 fd fd ff ff       	call   1132a <init_pic>
}
   1152d:	90                   	nop
   1152e:	c9                   	leave  
   1152f:	c3                   	ret    

00011530 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11530:	55                   	push   %ebp
   11531:	89 e5                	mov    %esp,%ebp
   11533:	53                   	push   %ebx
   11534:	83 ec 14             	sub    $0x14,%esp
   11537:	8b 45 08             	mov    0x8(%ebp),%eax
   1153a:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1153d:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11541:	76 7f                	jbe    115c2 <idt_enable+0x92>
   11543:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11547:	77 79                	ja     115c2 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11549:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1154d:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11551:	77 33                	ja     11586 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11553:	6a 21                	push   $0x21
   11555:	e8 55 f9 ff ff       	call   10eaf <inb>
   1155a:	83 c4 04             	add    $0x4,%esp
   1155d:	89 c3                	mov    %eax,%ebx
   1155f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11563:	ba 01 00 00 00       	mov    $0x1,%edx
   11568:	89 c1                	mov    %eax,%ecx
   1156a:	d3 e2                	shl    %cl,%edx
   1156c:	89 d0                	mov    %edx,%eax
   1156e:	f7 d0                	not    %eax
   11570:	21 d8                	and    %ebx,%eax
   11572:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11575:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11579:	50                   	push   %eax
   1157a:	6a 21                	push   $0x21
   1157c:	e8 4b f9 ff ff       	call   10ecc <outb>
   11581:	83 c4 08             	add    $0x8,%esp
   11584:	eb 3d                	jmp    115c3 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11586:	68 a1 00 00 00       	push   $0xa1
   1158b:	e8 1f f9 ff ff       	call   10eaf <inb>
   11590:	83 c4 04             	add    $0x4,%esp
   11593:	89 c3                	mov    %eax,%ebx
   11595:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11599:	83 e8 08             	sub    $0x8,%eax
   1159c:	ba 01 00 00 00       	mov    $0x1,%edx
   115a1:	89 c1                	mov    %eax,%ecx
   115a3:	d3 e2                	shl    %cl,%edx
   115a5:	89 d0                	mov    %edx,%eax
   115a7:	f7 d0                	not    %eax
   115a9:	21 d8                	and    %ebx,%eax
   115ab:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   115ae:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   115b2:	50                   	push   %eax
   115b3:	68 a1 00 00 00       	push   $0xa1
   115b8:	e8 0f f9 ff ff       	call   10ecc <outb>
   115bd:	83 c4 08             	add    $0x8,%esp
   115c0:	eb 01                	jmp    115c3 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   115c2:	90                   	nop
  }
  
}
   115c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   115c6:	c9                   	leave  
   115c7:	c3                   	ret    

000115c8 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   115c8:	55                   	push   %ebp
   115c9:	89 e5                	mov    %esp,%ebp
   115cb:	53                   	push   %ebx
   115cc:	83 ec 14             	sub    $0x14,%esp
   115cf:	8b 45 08             	mov    0x8(%ebp),%eax
   115d2:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   115d5:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   115d9:	76 7b                	jbe    11656 <idt_disable+0x8e>
   115db:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   115df:	77 75                	ja     11656 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   115e1:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   115e5:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   115e9:	77 31                	ja     1161c <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   115eb:	6a 21                	push   $0x21
   115ed:	e8 bd f8 ff ff       	call   10eaf <inb>
   115f2:	83 c4 04             	add    $0x4,%esp
   115f5:	89 c3                	mov    %eax,%ebx
   115f7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   115fb:	ba 01 00 00 00       	mov    $0x1,%edx
   11600:	89 c1                	mov    %eax,%ecx
   11602:	d3 e2                	shl    %cl,%edx
   11604:	89 d0                	mov    %edx,%eax
   11606:	09 d8                	or     %ebx,%eax
   11608:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1160b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1160f:	50                   	push   %eax
   11610:	6a 21                	push   $0x21
   11612:	e8 b5 f8 ff ff       	call   10ecc <outb>
   11617:	83 c4 08             	add    $0x8,%esp
   1161a:	eb 3b                	jmp    11657 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1161c:	68 a1 00 00 00       	push   $0xa1
   11621:	e8 89 f8 ff ff       	call   10eaf <inb>
   11626:	83 c4 04             	add    $0x4,%esp
   11629:	89 c3                	mov    %eax,%ebx
   1162b:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1162f:	83 e8 08             	sub    $0x8,%eax
   11632:	ba 01 00 00 00       	mov    $0x1,%edx
   11637:	89 c1                	mov    %eax,%ecx
   11639:	d3 e2                	shl    %cl,%edx
   1163b:	89 d0                	mov    %edx,%eax
   1163d:	09 d8                	or     %ebx,%eax
   1163f:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11642:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11646:	50                   	push   %eax
   11647:	68 a1 00 00 00       	push   $0xa1
   1164c:	e8 7b f8 ff ff       	call   10ecc <outb>
   11651:	83 c4 08             	add    $0x8,%esp
   11654:	eb 01                	jmp    11657 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11656:	90                   	nop
  }
  
}
   11657:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1165a:	c9                   	leave  
   1165b:	c3                   	ret    

0001165c <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1165c:	55                   	push   %ebp
   1165d:	89 e5                	mov    %esp,%ebp
  cli();
   1165f:	e8 36 f8 ff ff       	call   10e9a <cli>
}
   11664:	90                   	nop
   11665:	5d                   	pop    %ebp
   11666:	c3                   	ret    

00011667 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11667:	55                   	push   %ebp
   11668:	89 e5                	mov    %esp,%ebp
  sti();
   1166a:	e8 32 f8 ff ff       	call   10ea1 <sti>
}
   1166f:	90                   	nop
   11670:	5d                   	pop    %ebp
   11671:	c3                   	ret    

00011672 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11672:	55                   	push   %ebp
   11673:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11675:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11679:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1167d:	78 29                	js     116a8 <pic_send_eoi+0x36>
   1167f:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11683:	7f 23                	jg     116a8 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11685:	6a 20                	push   $0x20
   11687:	6a 20                	push   $0x20
   11689:	e8 3e f8 ff ff       	call   10ecc <outb>
   1168e:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11691:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11695:	7e 12                	jle    116a9 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11697:	6a 20                	push   $0x20
   11699:	68 a0 00 00 00       	push   $0xa0
   1169e:	e8 29 f8 ff ff       	call   10ecc <outb>
   116a3:	83 c4 08             	add    $0x8,%esp
   116a6:	eb 01                	jmp    116a9 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   116a8:	90                   	nop
  }

}
   116a9:	c9                   	leave  
   116aa:	c3                   	ret    

000116ab <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   116ab:	55                   	push   %ebp
   116ac:	89 e5                	mov    %esp,%ebp
   116ae:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   116b1:	e8 5f f8 ff ff       	call   10f15 <read_eflags>
   116b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   116b9:	e8 9e ff ff ff       	call   1165c <idt_disable_global>
  return state;;
   116be:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116c1:	c9                   	leave  
   116c2:	c3                   	ret    

000116c3 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   116c3:	55                   	push   %ebp
   116c4:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   116c6:	ff 75 08             	push   0x8(%ebp)
   116c9:	e8 57 f8 ff ff       	call   10f25 <write_eflags>
   116ce:	83 c4 04             	add    $0x4,%esp
}
   116d1:	90                   	nop
   116d2:	c9                   	leave  
   116d3:	c3                   	ret    

000116d4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   116d4:	55                   	push   %ebp
   116d5:	89 e5                	mov    %esp,%ebp
   116d7:	83 ec 08             	sub    $0x8,%esp
   116da:	8b 45 08             	mov    0x8(%ebp),%eax
   116dd:	8b 55 0c             	mov    0xc(%ebp),%edx
   116e0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   116e4:	89 d0                	mov    %edx,%eax
   116e6:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   116e9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   116ed:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   116f1:	ee                   	out    %al,(%dx)
}
   116f2:	90                   	nop
   116f3:	c9                   	leave  
   116f4:	c3                   	ret    

000116f5 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   116f5:	55                   	push   %ebp
   116f6:	89 e5                	mov    %esp,%ebp
   116f8:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   116fb:	a1 e0 c4 02 00       	mov    0x2c4e0,%eax
   11700:	83 c0 01             	add    $0x1,%eax
   11703:	a3 e0 c4 02 00       	mov    %eax,0x2c4e0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11708:	83 ec 0c             	sub    $0xc,%esp
   1170b:	6a 20                	push   $0x20
   1170d:	e8 60 ff ff ff       	call   11672 <pic_send_eoi>
   11712:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11715:	e8 7c f3 ff ff       	call   10a96 <task_slice_end>
}
   1171a:	90                   	nop
   1171b:	c9                   	leave  
   1171c:	c3                   	ret    

0001171d <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1171d:	55                   	push   %ebp
   1171e:	89 e5                	mov    %esp,%ebp
   11720:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11723:	6a 36                	push   $0x36
   11725:	6a 43                	push   $0x43
   11727:	e8 a8 ff ff ff       	call   116d4 <outb>
   1172c:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   1172f:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11735:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11739:	0f b6 c0             	movzbl %al,%eax
   1173c:	50                   	push   %eax
   1173d:	6a 40                	push   $0x40
   1173f:	e8 90 ff ff ff       	call   116d4 <outb>
   11744:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11747:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1174b:	66 c1 e8 08          	shr    $0x8,%ax
   1174f:	0f b6 c0             	movzbl %al,%eax
   11752:	50                   	push   %eax
   11753:	6a 40                	push   $0x40
   11755:	e8 7a ff ff ff       	call   116d4 <outb>
   1175a:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1175d:	83 ec 08             	sub    $0x8,%esp
   11760:	68 7b 02 01 00       	push   $0x1027b
   11765:	6a 20                	push   $0x20
   11767:	e8 7e fb ff ff       	call   112ea <idt_install>
   1176c:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1176f:	83 ec 0c             	sub    $0xc,%esp
   11772:	6a 20                	push   $0x20
   11774:	e8 b7 fd ff ff       	call   11530 <idt_enable>
   11779:	83 c4 10             	add    $0x10,%esp

}
   1177c:	90                   	nop
   1177d:	c9                   	leave  
   1177e:	c3                   	ret    

0001177f <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1177f:	55                   	push   %ebp
   11780:	89 e5                	mov    %esp,%ebp
   11782:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11785:	c7 05 e0 c4 02 00 00 	movl   $0x0,0x2c4e0
   1178c:	00 00 00 
    init_pit();
   1178f:	e8 89 ff ff ff       	call   1171d <init_pit>
   11794:	90                   	nop
   11795:	c9                   	leave  
   11796:	c3                   	ret    

00011797 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11797:	55                   	push   %ebp
   11798:	89 e5                	mov    %esp,%ebp
   1179a:	fb                   	sti    
   1179b:	90                   	nop
   1179c:	5d                   	pop    %ebp
   1179d:	c3                   	ret    

0001179e <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1179e:	55                   	push   %ebp
   1179f:	89 e5                	mov    %esp,%ebp
   117a1:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   117a4:	8b 45 08             	mov    0x8(%ebp),%eax
   117a7:	8b 40 50             	mov    0x50(%eax),%eax
   117aa:	85 c0                	test   %eax,%eax
   117ac:	75 19                	jne    117c7 <kernel_init+0x29>
   117ae:	68 20 33 01 00       	push   $0x13320
   117b3:	68 ec 33 01 00       	push   $0x133ec
   117b8:	6a 22                	push   $0x22
   117ba:	68 44 33 01 00       	push   $0x13344
   117bf:	e8 a9 08 00 00       	call   1206d <pannic>
   117c4:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   117c7:	e8 e8 14 00 00       	call   12cb4 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   117cc:	83 ec 0c             	sub    $0xc,%esp
   117cf:	ff 75 08             	push   0x8(%ebp)
   117d2:	e8 fb eb ff ff       	call   103d2 <memory_init>
   117d7:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   117da:	e8 b0 f5 ff ff       	call   10d8f <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   117df:	e8 d9 fb ff ff       	call   113bd <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   117e4:	e8 96 ff ff ff       	call   1177f <time_init>

    //7.初始化任务管理器
    task_manager_init();
   117e9:	e8 44 f0 ff ff       	call   10832 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   117ee:	90                   	nop
   117ef:	c9                   	leave  
   117f0:	c3                   	ret    

000117f1 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   117f1:	55                   	push   %ebp
   117f2:	89 e5                	mov    %esp,%ebp
   117f4:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   117f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   117fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11801:	8d 50 01             	lea    0x1(%eax),%edx
   11804:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11807:	83 ec 08             	sub    $0x8,%esp
   1180a:	50                   	push   %eax
   1180b:	68 79 33 01 00       	push   $0x13379
   11810:	e8 27 15 00 00       	call   12d3c <log_printf>
   11815:	83 c4 10             	add    $0x10,%esp
   11818:	eb e4                	jmp    117fe <test_task_1+0xd>

0001181a <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   1181a:	55                   	push   %ebp
   1181b:	89 e5                	mov    %esp,%ebp
   1181d:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11820:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   11827:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1182a:	8d 50 01             	lea    0x1(%eax),%edx
   1182d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11830:	83 ec 08             	sub    $0x8,%esp
   11833:	50                   	push   %eax
   11834:	68 84 33 01 00       	push   $0x13384
   11839:	e8 fe 14 00 00       	call   12d3c <log_printf>
   1183e:	83 c4 10             	add    $0x10,%esp
   11841:	eb e4                	jmp    11827 <test_task_2+0xd>

00011843 <init_main>:
     }
}



void init_main(void) {
   11843:	55                   	push   %ebp
   11844:	89 e5                	mov    %esp,%ebp
   11846:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   11849:	83 ec 0c             	sub    $0xc,%esp
   1184c:	68 8f 33 01 00       	push   $0x1338f
   11851:	e8 e6 14 00 00       	call   12d3c <log_printf>
   11856:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11859:	83 ec 04             	sub    $0x4,%esp
   1185c:	68 a7 33 01 00       	push   $0x133a7
   11861:	68 ad 33 01 00       	push   $0x133ad
   11866:	68 b2 33 01 00       	push   $0x133b2
   1186b:	e8 cc 14 00 00       	call   12d3c <log_printf>
   11870:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11873:	e8 35 f0 ff ff       	call   108ad <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11878:	ba 80 d6 02 00       	mov    $0x2d680,%edx
   1187d:	b8 f1 17 01 00       	mov    $0x117f1,%eax
   11882:	52                   	push   %edx
   11883:	50                   	push   %eax
   11884:	68 c8 33 01 00       	push   $0x133c8
   11889:	68 00 c5 02 00       	push   $0x2c500
   1188e:	e8 b1 ee ff ff       	call   10744 <task_init>
   11893:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11896:	ba 80 e6 02 00       	mov    $0x2e680,%edx
   1189b:	b8 1a 18 01 00       	mov    $0x1181a,%eax
   118a0:	52                   	push   %edx
   118a1:	50                   	push   %eax
   118a2:	68 d4 33 01 00       	push   $0x133d4
   118a7:	68 c0 c5 02 00       	push   $0x2c5c0
   118ac:	e8 93 ee ff ff       	call   10744 <task_init>
   118b1:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   118b4:	e8 de fe ff ff       	call   11797 <sti>

    int count = 0;
   118b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   118c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118c3:	8d 50 01             	lea    0x1(%eax),%edx
   118c6:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118c9:	83 ec 08             	sub    $0x8,%esp
   118cc:	50                   	push   %eax
   118cd:	68 e0 33 01 00       	push   $0x133e0
   118d2:	e8 65 14 00 00       	call   12d3c <log_printf>
   118d7:	83 c4 10             	add    $0x10,%esp
   118da:	eb e4                	jmp    118c0 <init_main+0x7d>

000118dc <list_init>:
static inline void list_init(list_t *list) {
   118dc:	55                   	push   %ebp
   118dd:	89 e5                	mov    %esp,%ebp
   118df:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   118e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118e6:	75 19                	jne    11901 <list_init+0x25>
   118e8:	68 f8 33 01 00       	push   $0x133f8
   118ed:	68 a4 34 01 00       	push   $0x134a4
   118f2:	6a 31                	push   $0x31
   118f4:	68 0c 34 01 00       	push   $0x1340c
   118f9:	e8 6f 07 00 00       	call   1206d <pannic>
   118fe:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11901:	8b 45 08             	mov    0x8(%ebp),%eax
   11904:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1190b:	8b 45 08             	mov    0x8(%ebp),%eax
   1190e:	8b 50 04             	mov    0x4(%eax),%edx
   11911:	8b 45 08             	mov    0x8(%ebp),%eax
   11914:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11916:	8b 45 08             	mov    0x8(%ebp),%eax
   11919:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11920:	90                   	nop
   11921:	c9                   	leave  
   11922:	c3                   	ret    

00011923 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11923:	55                   	push   %ebp
   11924:	89 e5                	mov    %esp,%ebp
   11926:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11929:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1192d:	75 19                	jne    11948 <list_is_empty+0x25>
   1192f:	68 f8 33 01 00       	push   $0x133f8
   11934:	68 b0 34 01 00       	push   $0x134b0
   11939:	6a 38                	push   $0x38
   1193b:	68 0c 34 01 00       	push   $0x1340c
   11940:	e8 28 07 00 00       	call   1206d <pannic>
   11945:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11948:	8b 45 08             	mov    0x8(%ebp),%eax
   1194b:	8b 40 08             	mov    0x8(%eax),%eax
   1194e:	85 c0                	test   %eax,%eax
   11950:	0f 94 c0             	sete   %al
   11953:	0f b6 c0             	movzbl %al,%eax
}
   11956:	c9                   	leave  
   11957:	c3                   	ret    

00011958 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11958:	55                   	push   %ebp
   11959:	89 e5                	mov    %esp,%ebp
   1195b:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1195e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11962:	75 19                	jne    1197d <mutex_init+0x25>
   11964:	68 4a 34 01 00       	push   $0x1344a
   11969:	68 98 34 01 00       	push   $0x13498
   1196e:	6a 15                	push   $0x15
   11970:	68 60 34 01 00       	push   $0x13460
   11975:	e8 f3 06 00 00       	call   1206d <pannic>
   1197a:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   1197d:	8b 45 08             	mov    0x8(%ebp),%eax
   11980:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11987:	8b 45 08             	mov    0x8(%ebp),%eax
   1198a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11990:	8b 45 08             	mov    0x8(%ebp),%eax
   11993:	83 c0 08             	add    $0x8,%eax
   11996:	83 ec 0c             	sub    $0xc,%esp
   11999:	50                   	push   %eax
   1199a:	e8 3d ff ff ff       	call   118dc <list_init>
   1199f:	83 c4 10             	add    $0x10,%esp
}
   119a2:	90                   	nop
   119a3:	c9                   	leave  
   119a4:	c3                   	ret    

000119a5 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   119a5:	55                   	push   %ebp
   119a6:	89 e5                	mov    %esp,%ebp
   119a8:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119ab:	e8 fb fc ff ff       	call   116ab <idt_enter_protection>
   119b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   119b3:	e8 0b f0 ff ff       	call   109c3 <task_current>
   119b8:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   119bb:	8b 45 08             	mov    0x8(%ebp),%eax
   119be:	8b 40 04             	mov    0x4(%eax),%eax
   119c1:	85 c0                	test   %eax,%eax
   119c3:	75 19                	jne    119de <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   119c5:	8b 45 08             	mov    0x8(%ebp),%eax
   119c8:	8b 40 04             	mov    0x4(%eax),%eax
   119cb:	8d 50 01             	lea    0x1(%eax),%edx
   119ce:	8b 45 08             	mov    0x8(%ebp),%eax
   119d1:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   119d4:	8b 45 08             	mov    0x8(%ebp),%eax
   119d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   119da:	89 10                	mov    %edx,(%eax)
   119dc:	eb 47                	jmp    11a25 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   119de:	8b 45 08             	mov    0x8(%ebp),%eax
   119e1:	8b 00                	mov    (%eax),%eax
   119e3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   119e6:	75 11                	jne    119f9 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   119e8:	8b 45 08             	mov    0x8(%ebp),%eax
   119eb:	8b 40 04             	mov    0x4(%eax),%eax
   119ee:	8d 50 01             	lea    0x1(%eax),%edx
   119f1:	8b 45 08             	mov    0x8(%ebp),%eax
   119f4:	89 50 04             	mov    %edx,0x4(%eax)
   119f7:	eb 2c                	jmp    11a25 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   119f9:	83 ec 0c             	sub    $0xc,%esp
   119fc:	ff 75 f0             	push   -0x10(%ebp)
   119ff:	e8 46 ef ff ff       	call   1094a <task_set_unready>
   11a04:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11a07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a0a:	8d 50 40             	lea    0x40(%eax),%edx
   11a0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a10:	83 c0 08             	add    $0x8,%eax
   11a13:	83 ec 08             	sub    $0x8,%esp
   11a16:	52                   	push   %edx
   11a17:	50                   	push   %eax
   11a18:	e8 9b 0f 00 00       	call   129b8 <list_insert_last>
   11a1d:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11a20:	e8 a8 ef ff ff       	call   109cd <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11a25:	83 ec 0c             	sub    $0xc,%esp
   11a28:	ff 75 f4             	push   -0xc(%ebp)
   11a2b:	e8 93 fc ff ff       	call   116c3 <idt_leave_protection>
   11a30:	83 c4 10             	add    $0x10,%esp
}
   11a33:	90                   	nop
   11a34:	c9                   	leave  
   11a35:	c3                   	ret    

00011a36 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11a36:	55                   	push   %ebp
   11a37:	89 e5                	mov    %esp,%ebp
   11a39:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11a3c:	e8 6a fc ff ff       	call   116ab <idt_enter_protection>
   11a41:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11a44:	e8 7a ef ff ff       	call   109c3 <task_current>
   11a49:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4f:	8b 00                	mov    (%eax),%eax
   11a51:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11a54:	0f 85 83 00 00 00    	jne    11add <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5d:	8b 40 04             	mov    0x4(%eax),%eax
   11a60:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a63:	8b 45 08             	mov    0x8(%ebp),%eax
   11a66:	89 50 04             	mov    %edx,0x4(%eax)
   11a69:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6c:	8b 40 04             	mov    0x4(%eax),%eax
   11a6f:	85 c0                	test   %eax,%eax
   11a71:	75 6a                	jne    11add <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11a73:	8b 45 08             	mov    0x8(%ebp),%eax
   11a76:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11a7c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7f:	83 c0 08             	add    $0x8,%eax
   11a82:	83 ec 0c             	sub    $0xc,%esp
   11a85:	50                   	push   %eax
   11a86:	e8 98 fe ff ff       	call   11923 <list_is_empty>
   11a8b:	83 c4 10             	add    $0x10,%esp
   11a8e:	85 c0                	test   %eax,%eax
   11a90:	75 4b                	jne    11add <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11a92:	8b 45 08             	mov    0x8(%ebp),%eax
   11a95:	83 c0 08             	add    $0x8,%eax
   11a98:	83 ec 0c             	sub    $0xc,%esp
   11a9b:	50                   	push   %eax
   11a9c:	e8 a6 0f 00 00       	call   12a47 <list_remove_first>
   11aa1:	83 c4 10             	add    $0x10,%esp
   11aa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11aa7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11aab:	74 08                	je     11ab5 <mutex_unlock+0x7f>
   11aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ab0:	83 e8 40             	sub    $0x40,%eax
   11ab3:	eb 05                	jmp    11aba <mutex_unlock+0x84>
   11ab5:	b8 00 00 00 00       	mov    $0x0,%eax
   11aba:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11abd:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac0:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11ac7:	8b 45 08             	mov    0x8(%ebp),%eax
   11aca:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11acd:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11acf:	83 ec 0c             	sub    $0xc,%esp
   11ad2:	ff 75 e8             	push   -0x18(%ebp)
   11ad5:	e8 25 ee ff ff       	call   108ff <task_set_ready>
   11ada:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11add:	83 ec 0c             	sub    $0xc,%esp
   11ae0:	ff 75 f4             	push   -0xc(%ebp)
   11ae3:	e8 db fb ff ff       	call   116c3 <idt_leave_protection>
   11ae8:	83 c4 10             	add    $0x10,%esp
}
   11aeb:	90                   	nop
   11aec:	c9                   	leave  
   11aed:	c3                   	ret    

00011aee <list_init>:
static inline void list_init(list_t *list) {
   11aee:	55                   	push   %ebp
   11aef:	89 e5                	mov    %esp,%ebp
   11af1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11af4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11af8:	75 19                	jne    11b13 <list_init+0x25>
   11afa:	68 c0 34 01 00       	push   $0x134c0
   11aff:	68 64 35 01 00       	push   $0x13564
   11b04:	6a 31                	push   $0x31
   11b06:	68 d4 34 01 00       	push   $0x134d4
   11b0b:	e8 5d 05 00 00       	call   1206d <pannic>
   11b10:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11b13:	8b 45 08             	mov    0x8(%ebp),%eax
   11b16:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11b1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b20:	8b 50 04             	mov    0x4(%eax),%edx
   11b23:	8b 45 08             	mov    0x8(%ebp),%eax
   11b26:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11b28:	8b 45 08             	mov    0x8(%ebp),%eax
   11b2b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11b32:	90                   	nop
   11b33:	c9                   	leave  
   11b34:	c3                   	ret    

00011b35 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11b35:	55                   	push   %ebp
   11b36:	89 e5                	mov    %esp,%ebp
   11b38:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b3f:	75 19                	jne    11b5a <list_is_empty+0x25>
   11b41:	68 c0 34 01 00       	push   $0x134c0
   11b46:	68 70 35 01 00       	push   $0x13570
   11b4b:	6a 38                	push   $0x38
   11b4d:	68 d4 34 01 00       	push   $0x134d4
   11b52:	e8 16 05 00 00       	call   1206d <pannic>
   11b57:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5d:	8b 40 08             	mov    0x8(%eax),%eax
   11b60:	85 c0                	test   %eax,%eax
   11b62:	0f 94 c0             	sete   %al
   11b65:	0f b6 c0             	movzbl %al,%eax
}
   11b68:	c9                   	leave  
   11b69:	c3                   	ret    

00011b6a <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11b6a:	55                   	push   %ebp
   11b6b:	89 e5                	mov    %esp,%ebp
   11b6d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11b70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b74:	75 19                	jne    11b8f <sem_init+0x25>
   11b76:	68 12 35 01 00       	push   $0x13512
   11b7b:	68 58 35 01 00       	push   $0x13558
   11b80:	6a 18                	push   $0x18
   11b82:	68 24 35 01 00       	push   $0x13524
   11b87:	e8 e1 04 00 00       	call   1206d <pannic>
   11b8c:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11b8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11b98:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9b:	83 c0 04             	add    $0x4,%eax
   11b9e:	83 ec 0c             	sub    $0xc,%esp
   11ba1:	50                   	push   %eax
   11ba2:	e8 47 ff ff ff       	call   11aee <list_init>
   11ba7:	83 c4 10             	add    $0x10,%esp
}
   11baa:	90                   	nop
   11bab:	c9                   	leave  
   11bac:	c3                   	ret    

00011bad <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11bad:	55                   	push   %ebp
   11bae:	89 e5                	mov    %esp,%ebp
   11bb0:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11bb3:	e8 f3 fa ff ff       	call   116ab <idt_enter_protection>
   11bb8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11bbb:	8b 45 08             	mov    0x8(%ebp),%eax
   11bbe:	8b 00                	mov    (%eax),%eax
   11bc0:	85 c0                	test   %eax,%eax
   11bc2:	7e 0f                	jle    11bd3 <sem_wait+0x26>
        --sem->count;   
   11bc4:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc7:	8b 00                	mov    (%eax),%eax
   11bc9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bcf:	89 10                	mov    %edx,(%eax)
   11bd1:	eb 34                	jmp    11c07 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11bd3:	e8 eb ed ff ff       	call   109c3 <task_current>
   11bd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11bdb:	83 ec 0c             	sub    $0xc,%esp
   11bde:	ff 75 f0             	push   -0x10(%ebp)
   11be1:	e8 64 ed ff ff       	call   1094a <task_set_unready>
   11be6:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11be9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bec:	8d 50 40             	lea    0x40(%eax),%edx
   11bef:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf2:	83 c0 04             	add    $0x4,%eax
   11bf5:	83 ec 08             	sub    $0x8,%esp
   11bf8:	52                   	push   %edx
   11bf9:	50                   	push   %eax
   11bfa:	e8 b9 0d 00 00       	call   129b8 <list_insert_last>
   11bff:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11c02:	e8 c6 ed ff ff       	call   109cd <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11c07:	83 ec 0c             	sub    $0xc,%esp
   11c0a:	ff 75 f4             	push   -0xc(%ebp)
   11c0d:	e8 b1 fa ff ff       	call   116c3 <idt_leave_protection>
   11c12:	83 c4 10             	add    $0x10,%esp
}
   11c15:	90                   	nop
   11c16:	c9                   	leave  
   11c17:	c3                   	ret    

00011c18 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11c18:	55                   	push   %ebp
   11c19:	89 e5                	mov    %esp,%ebp
   11c1b:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c1e:	e8 88 fa ff ff       	call   116ab <idt_enter_protection>
   11c23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11c26:	8b 45 08             	mov    0x8(%ebp),%eax
   11c29:	83 c0 04             	add    $0x4,%eax
   11c2c:	83 ec 0c             	sub    $0xc,%esp
   11c2f:	50                   	push   %eax
   11c30:	e8 00 ff ff ff       	call   11b35 <list_is_empty>
   11c35:	83 c4 10             	add    $0x10,%esp
   11c38:	85 c0                	test   %eax,%eax
   11c3a:	75 3b                	jne    11c77 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c3f:	83 c0 04             	add    $0x4,%eax
   11c42:	83 ec 0c             	sub    $0xc,%esp
   11c45:	50                   	push   %eax
   11c46:	e8 fc 0d 00 00       	call   12a47 <list_remove_first>
   11c4b:	83 c4 10             	add    $0x10,%esp
   11c4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11c51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c55:	74 08                	je     11c5f <sem_notify+0x47>
   11c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c5a:	83 e8 40             	sub    $0x40,%eax
   11c5d:	eb 05                	jmp    11c64 <sem_notify+0x4c>
   11c5f:	b8 00 00 00 00       	mov    $0x0,%eax
   11c64:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11c67:	83 ec 0c             	sub    $0xc,%esp
   11c6a:	ff 75 ec             	push   -0x14(%ebp)
   11c6d:	e8 8d ec ff ff       	call   108ff <task_set_ready>
   11c72:	83 c4 10             	add    $0x10,%esp
   11c75:	eb 0d                	jmp    11c84 <sem_notify+0x6c>
    } else {
        sem->count++;
   11c77:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7a:	8b 00                	mov    (%eax),%eax
   11c7c:	8d 50 01             	lea    0x1(%eax),%edx
   11c7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11c82:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11c84:	83 ec 0c             	sub    $0xc,%esp
   11c87:	ff 75 f4             	push   -0xc(%ebp)
   11c8a:	e8 34 fa ff ff       	call   116c3 <idt_leave_protection>
   11c8f:	83 c4 10             	add    $0x10,%esp

}
   11c92:	90                   	nop
   11c93:	c9                   	leave  
   11c94:	c3                   	ret    

00011c95 <sem_count>:

int sem_count(sem_t *sem) {
   11c95:	55                   	push   %ebp
   11c96:	89 e5                	mov    %esp,%ebp
   11c98:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c9b:	e8 0b fa ff ff       	call   116ab <idt_enter_protection>
   11ca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11ca3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca6:	8b 00                	mov    (%eax),%eax
   11ca8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11cab:	83 ec 0c             	sub    $0xc,%esp
   11cae:	ff 75 f4             	push   -0xc(%ebp)
   11cb1:	e8 0d fa ff ff       	call   116c3 <idt_leave_protection>
   11cb6:	83 c4 10             	add    $0x10,%esp

    return count;
   11cb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cbc:	c9                   	leave  
   11cbd:	c3                   	ret    

00011cbe <list_init>:
static inline void list_init(list_t *list) {
   11cbe:	55                   	push   %ebp
   11cbf:	89 e5                	mov    %esp,%ebp
   11cc1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11cc4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cc8:	75 19                	jne    11ce3 <list_init+0x25>
   11cca:	68 80 35 01 00       	push   $0x13580
   11ccf:	68 84 36 01 00       	push   $0x13684
   11cd4:	6a 31                	push   $0x31
   11cd6:	68 94 35 01 00       	push   $0x13594
   11cdb:	e8 8d 03 00 00       	call   1206d <pannic>
   11ce0:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11ce3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ced:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf0:	8b 50 04             	mov    0x4(%eax),%edx
   11cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf6:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   11cfb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11d02:	90                   	nop
   11d03:	c9                   	leave  
   11d04:	c3                   	ret    

00011d05 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11d05:	55                   	push   %ebp
   11d06:	89 e5                	mov    %esp,%ebp
   11d08:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d0b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d0f:	75 19                	jne    11d2a <list_get_size+0x25>
   11d11:	68 80 35 01 00       	push   $0x13580
   11d16:	68 90 36 01 00       	push   $0x13690
   11d1b:	6a 3e                	push   $0x3e
   11d1d:	68 94 35 01 00       	push   $0x13594
   11d22:	e8 46 03 00 00       	call   1206d <pannic>
   11d27:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11d2a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d2d:	8b 40 08             	mov    0x8(%eax),%eax
}
   11d30:	c9                   	leave  
   11d31:	c3                   	ret    

00011d32 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11d32:	55                   	push   %ebp
   11d33:	89 e5                	mov    %esp,%ebp
   11d35:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d38:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d3c:	75 19                	jne    11d57 <list_get_first+0x25>
   11d3e:	68 80 35 01 00       	push   $0x13580
   11d43:	68 b0 36 01 00       	push   $0x136b0
   11d48:	6a 44                	push   $0x44
   11d4a:	68 94 35 01 00       	push   $0x13594
   11d4f:	e8 19 03 00 00       	call   1206d <pannic>
   11d54:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11d57:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5a:	8b 00                	mov    (%eax),%eax
}
   11d5c:	c9                   	leave  
   11d5d:	c3                   	ret    

00011d5e <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11d5e:	55                   	push   %ebp
   11d5f:	89 e5                	mov    %esp,%ebp
   11d61:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d68:	75 19                	jne    11d83 <list_get_last+0x25>
   11d6a:	68 80 35 01 00       	push   $0x13580
   11d6f:	68 a0 36 01 00       	push   $0x136a0
   11d74:	6a 4a                	push   $0x4a
   11d76:	68 94 35 01 00       	push   $0x13594
   11d7b:	e8 ed 02 00 00       	call   1206d <pannic>
   11d80:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11d83:	8b 45 08             	mov    0x8(%ebp),%eax
   11d86:	8b 40 04             	mov    0x4(%eax),%eax
}
   11d89:	c9                   	leave  
   11d8a:	c3                   	ret    

00011d8b <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11d8b:	55                   	push   %ebp
   11d8c:	89 e5                	mov    %esp,%ebp
   11d8e:	56                   	push   %esi
   11d8f:	53                   	push   %ebx
   11d90:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11d93:	83 ec 0c             	sub    $0xc,%esp
   11d96:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d99:	50                   	push   %eax
   11d9a:	e8 1f ff ff ff       	call   11cbe <list_init>
   11d9f:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11da2:	83 ec 0c             	sub    $0xc,%esp
   11da5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11da8:	50                   	push   %eax
   11da9:	e8 57 ff ff ff       	call   11d05 <list_get_size>
   11dae:	83 c4 10             	add    $0x10,%esp
   11db1:	89 c6                	mov    %eax,%esi
   11db3:	83 ec 0c             	sub    $0xc,%esp
   11db6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11db9:	50                   	push   %eax
   11dba:	e8 9f ff ff ff       	call   11d5e <list_get_last>
   11dbf:	83 c4 10             	add    $0x10,%esp
   11dc2:	89 c3                	mov    %eax,%ebx
   11dc4:	83 ec 0c             	sub    $0xc,%esp
   11dc7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11dca:	50                   	push   %eax
   11dcb:	e8 62 ff ff ff       	call   11d32 <list_get_first>
   11dd0:	83 c4 10             	add    $0x10,%esp
   11dd3:	56                   	push   %esi
   11dd4:	53                   	push   %ebx
   11dd5:	50                   	push   %eax
   11dd6:	68 d4 35 01 00       	push   $0x135d4
   11ddb:	e8 5c 0f 00 00       	call   12d3c <log_printf>
   11de0:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11de3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11dea:	eb 3f                	jmp    11e2b <list_test+0xa0>
        list_node_t *node = nodes + i;
   11dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11def:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11df6:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11df9:	01 d0                	add    %edx,%eax
   11dfb:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11dfe:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11e01:	83 ec 04             	sub    $0x4,%esp
   11e04:	50                   	push   %eax
   11e05:	ff 75 f4             	push   -0xc(%ebp)
   11e08:	68 fc 35 01 00       	push   $0x135fc
   11e0d:	e8 2a 0f 00 00       	call   12d3c <log_printf>
   11e12:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11e15:	83 ec 08             	sub    $0x8,%esp
   11e18:	ff 75 d0             	push   -0x30(%ebp)
   11e1b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e1e:	50                   	push   %eax
   11e1f:	e8 09 0b 00 00       	call   1292d <list_insert_first>
   11e24:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11e27:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11e2b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11e2f:	7e bb                	jle    11dec <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11e31:	83 ec 0c             	sub    $0xc,%esp
   11e34:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e37:	50                   	push   %eax
   11e38:	e8 c8 fe ff ff       	call   11d05 <list_get_size>
   11e3d:	83 c4 10             	add    $0x10,%esp
   11e40:	89 c6                	mov    %eax,%esi
   11e42:	83 ec 0c             	sub    $0xc,%esp
   11e45:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e48:	50                   	push   %eax
   11e49:	e8 10 ff ff ff       	call   11d5e <list_get_last>
   11e4e:	83 c4 10             	add    $0x10,%esp
   11e51:	89 c3                	mov    %eax,%ebx
   11e53:	83 ec 0c             	sub    $0xc,%esp
   11e56:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e59:	50                   	push   %eax
   11e5a:	e8 d3 fe ff ff       	call   11d32 <list_get_first>
   11e5f:	83 c4 10             	add    $0x10,%esp
   11e62:	56                   	push   %esi
   11e63:	53                   	push   %ebx
   11e64:	50                   	push   %eax
   11e65:	68 d4 35 01 00       	push   $0x135d4
   11e6a:	e8 cd 0e 00 00       	call   12d3c <log_printf>
   11e6f:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11e72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e79:	eb 2d                	jmp    11ea8 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11e7b:	83 ec 0c             	sub    $0xc,%esp
   11e7e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e81:	50                   	push   %eax
   11e82:	e8 c0 0b 00 00       	call   12a47 <list_remove_first>
   11e87:	83 c4 10             	add    $0x10,%esp
   11e8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11e8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11e90:	83 ec 04             	sub    $0x4,%esp
   11e93:	50                   	push   %eax
   11e94:	ff 75 f0             	push   -0x10(%ebp)
   11e97:	68 1b 36 01 00       	push   $0x1361b
   11e9c:	e8 9b 0e 00 00       	call   12d3c <log_printf>
   11ea1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11ea4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11ea8:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11eac:	7e cd                	jle    11e7b <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11eae:	83 ec 0c             	sub    $0xc,%esp
   11eb1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11eb4:	50                   	push   %eax
   11eb5:	e8 4b fe ff ff       	call   11d05 <list_get_size>
   11eba:	83 c4 10             	add    $0x10,%esp
   11ebd:	89 c6                	mov    %eax,%esi
   11ebf:	83 ec 0c             	sub    $0xc,%esp
   11ec2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ec5:	50                   	push   %eax
   11ec6:	e8 93 fe ff ff       	call   11d5e <list_get_last>
   11ecb:	83 c4 10             	add    $0x10,%esp
   11ece:	89 c3                	mov    %eax,%ebx
   11ed0:	83 ec 0c             	sub    $0xc,%esp
   11ed3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ed6:	50                   	push   %eax
   11ed7:	e8 56 fe ff ff       	call   11d32 <list_get_first>
   11edc:	83 c4 10             	add    $0x10,%esp
   11edf:	56                   	push   %esi
   11ee0:	53                   	push   %ebx
   11ee1:	50                   	push   %eax
   11ee2:	68 d4 35 01 00       	push   $0x135d4
   11ee7:	e8 50 0e 00 00       	call   12d3c <log_printf>
   11eec:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11eef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11ef6:	eb 3f                	jmp    11f37 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11ef8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11efb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11f02:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11f05:	01 d0                	add    %edx,%eax
   11f07:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11f0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11f0d:	83 ec 04             	sub    $0x4,%esp
   11f10:	50                   	push   %eax
   11f11:	ff 75 ec             	push   -0x14(%ebp)
   11f14:	68 32 36 01 00       	push   $0x13632
   11f19:	e8 1e 0e 00 00       	call   12d3c <log_printf>
   11f1e:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11f21:	83 ec 08             	sub    $0x8,%esp
   11f24:	ff 75 d8             	push   -0x28(%ebp)
   11f27:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f2a:	50                   	push   %eax
   11f2b:	e8 88 0a 00 00       	call   129b8 <list_insert_last>
   11f30:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11f33:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11f37:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11f3b:	7e bb                	jle    11ef8 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11f3d:	83 ec 0c             	sub    $0xc,%esp
   11f40:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f43:	50                   	push   %eax
   11f44:	e8 bc fd ff ff       	call   11d05 <list_get_size>
   11f49:	83 c4 10             	add    $0x10,%esp
   11f4c:	89 c6                	mov    %eax,%esi
   11f4e:	83 ec 0c             	sub    $0xc,%esp
   11f51:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f54:	50                   	push   %eax
   11f55:	e8 04 fe ff ff       	call   11d5e <list_get_last>
   11f5a:	83 c4 10             	add    $0x10,%esp
   11f5d:	89 c3                	mov    %eax,%ebx
   11f5f:	83 ec 0c             	sub    $0xc,%esp
   11f62:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f65:	50                   	push   %eax
   11f66:	e8 c7 fd ff ff       	call   11d32 <list_get_first>
   11f6b:	83 c4 10             	add    $0x10,%esp
   11f6e:	56                   	push   %esi
   11f6f:	53                   	push   %ebx
   11f70:	50                   	push   %eax
   11f71:	68 d4 35 01 00       	push   $0x135d4
   11f76:	e8 c1 0d 00 00       	call   12d3c <log_printf>
   11f7b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11f7e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11f85:	eb 2d                	jmp    11fb4 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   11f87:	83 ec 0c             	sub    $0xc,%esp
   11f8a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f8d:	50                   	push   %eax
   11f8e:	e8 65 0b 00 00       	call   12af8 <list_remove_last>
   11f93:	83 c4 10             	add    $0x10,%esp
   11f96:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   11f99:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11f9c:	83 ec 04             	sub    $0x4,%esp
   11f9f:	50                   	push   %eax
   11fa0:	ff 75 e8             	push   -0x18(%ebp)
   11fa3:	68 50 36 01 00       	push   $0x13650
   11fa8:	e8 8f 0d 00 00       	call   12d3c <log_printf>
   11fad:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11fb0:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11fb4:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11fb8:	7e cd                	jle    11f87 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11fba:	83 ec 0c             	sub    $0xc,%esp
   11fbd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fc0:	50                   	push   %eax
   11fc1:	e8 3f fd ff ff       	call   11d05 <list_get_size>
   11fc6:	83 c4 10             	add    $0x10,%esp
   11fc9:	89 c6                	mov    %eax,%esi
   11fcb:	83 ec 0c             	sub    $0xc,%esp
   11fce:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fd1:	50                   	push   %eax
   11fd2:	e8 87 fd ff ff       	call   11d5e <list_get_last>
   11fd7:	83 c4 10             	add    $0x10,%esp
   11fda:	89 c3                	mov    %eax,%ebx
   11fdc:	83 ec 0c             	sub    $0xc,%esp
   11fdf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fe2:	50                   	push   %eax
   11fe3:	e8 4a fd ff ff       	call   11d32 <list_get_first>
   11fe8:	83 c4 10             	add    $0x10,%esp
   11feb:	56                   	push   %esi
   11fec:	53                   	push   %ebx
   11fed:	50                   	push   %eax
   11fee:	68 d4 35 01 00       	push   $0x135d4
   11ff3:	e8 44 0d 00 00       	call   12d3c <log_printf>
   11ff8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   11ffb:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12002:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12009:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12010:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12017:	8d 45 90             	lea    -0x70(%ebp),%eax
   1201a:	83 c0 04             	add    $0x4,%eax
   1201d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12020:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12024:	74 08                	je     1202e <list_test+0x2a3>
   12026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12029:	83 e8 04             	sub    $0x4,%eax
   1202c:	eb 05                	jmp    12033 <list_test+0x2a8>
   1202e:	b8 00 00 00 00       	mov    $0x0,%eax
   12033:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12036:	8d 45 90             	lea    -0x70(%ebp),%eax
   12039:	83 ec 08             	sub    $0x8,%esp
   1203c:	50                   	push   %eax
   1203d:	68 66 36 01 00       	push   $0x13666
   12042:	e8 f5 0c 00 00       	call   12d3c <log_printf>
   12047:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   1204a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1204d:	83 ec 08             	sub    $0x8,%esp
   12050:	50                   	push   %eax
   12051:	68 74 36 01 00       	push   $0x13674
   12056:	e8 e1 0c 00 00       	call   12d3c <log_printf>
   1205b:	83 c4 10             	add    $0x10,%esp

 }
   1205e:	90                   	nop
   1205f:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12062:	5b                   	pop    %ebx
   12063:	5e                   	pop    %esi
   12064:	5d                   	pop    %ebp
   12065:	c3                   	ret    

00012066 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12066:	55                   	push   %ebp
   12067:	89 e5                	mov    %esp,%ebp
   12069:	f4                   	hlt    
   1206a:	90                   	nop
   1206b:	5d                   	pop    %ebp
   1206c:	c3                   	ret    

0001206d <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1206d:	55                   	push   %ebp
   1206e:	89 e5                	mov    %esp,%ebp
   12070:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12073:	83 ec 08             	sub    $0x8,%esp
   12076:	ff 75 14             	push   0x14(%ebp)
   12079:	68 bf 36 01 00       	push   $0x136bf
   1207e:	e8 b9 0c 00 00       	call   12d3c <log_printf>
   12083:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12086:	ff 75 10             	push   0x10(%ebp)
   12089:	ff 75 0c             	push   0xc(%ebp)
   1208c:	ff 75 08             	push   0x8(%ebp)
   1208f:	68 d0 36 01 00       	push   $0x136d0
   12094:	e8 a3 0c 00 00       	call   12d3c <log_printf>
   12099:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1209c:	e8 c5 ff ff ff       	call   12066 <hlt>
   120a1:	eb f9                	jmp    1209c <pannic+0x2f>

000120a3 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
static int bitmap_byte_count(int bit_count) {
   120a3:	55                   	push   %ebp
   120a4:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   120a6:	8b 45 08             	mov    0x8(%ebp),%eax
   120a9:	83 c0 07             	add    $0x7,%eax
   120ac:	8d 50 07             	lea    0x7(%eax),%edx
   120af:	85 c0                	test   %eax,%eax
   120b1:	0f 48 c2             	cmovs  %edx,%eax
   120b4:	c1 f8 03             	sar    $0x3,%eax
}
   120b7:	5d                   	pop    %ebp
   120b8:	c3                   	ret    

000120b9 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   120b9:	55                   	push   %ebp
   120ba:	89 e5                	mov    %esp,%ebp
   120bc:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   120bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120c3:	75 19                	jne    120de <bitmap_init+0x25>
   120c5:	68 ec 36 01 00       	push   $0x136ec
   120ca:	68 80 37 01 00       	push   $0x13780
   120cf:	6a 24                	push   $0x24
   120d1:	68 04 37 01 00       	push   $0x13704
   120d6:	e8 92 ff ff ff       	call   1206d <pannic>
   120db:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   120de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   120e2:	75 19                	jne    120fd <bitmap_init+0x44>
   120e4:	68 3c 37 01 00       	push   $0x1373c
   120e9:	68 80 37 01 00       	push   $0x13780
   120ee:	6a 25                	push   $0x25
   120f0:	68 04 37 01 00       	push   $0x13704
   120f5:	e8 73 ff ff ff       	call   1206d <pannic>
   120fa:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   120fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12100:	8b 55 10             	mov    0x10(%ebp),%edx
   12103:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12105:	8b 45 08             	mov    0x8(%ebp),%eax
   12108:	8b 55 0c             	mov    0xc(%ebp),%edx
   1210b:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1210e:	8b 45 08             	mov    0x8(%ebp),%eax
   12111:	8b 00                	mov    (%eax),%eax
   12113:	83 ec 0c             	sub    $0xc,%esp
   12116:	50                   	push   %eax
   12117:	e8 87 ff ff ff       	call   120a3 <bitmap_byte_count>
   1211c:	83 c4 10             	add    $0x10,%esp
   1211f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12122:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12126:	74 07                	je     1212f <bitmap_init+0x76>
   12128:	ba ff 00 00 00       	mov    $0xff,%edx
   1212d:	eb 05                	jmp    12134 <bitmap_init+0x7b>
   1212f:	ba 00 00 00 00       	mov    $0x0,%edx
   12134:	8b 45 08             	mov    0x8(%ebp),%eax
   12137:	8b 40 04             	mov    0x4(%eax),%eax
   1213a:	83 ec 04             	sub    $0x4,%esp
   1213d:	ff 75 f4             	push   -0xc(%ebp)
   12140:	52                   	push   %edx
   12141:	50                   	push   %eax
   12142:	e8 28 04 00 00       	call   1256f <kernel_memset>
   12147:	83 c4 10             	add    $0x10,%esp

}
   1214a:	90                   	nop
   1214b:	c9                   	leave  
   1214c:	c3                   	ret    

0001214d <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1214d:	55                   	push   %ebp
   1214e:	89 e5                	mov    %esp,%ebp
   12150:	53                   	push   %ebx
   12151:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12154:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12158:	75 19                	jne    12173 <bitmap_get_bit+0x26>
   1215a:	68 ec 36 01 00       	push   $0x136ec
   1215f:	68 8c 37 01 00       	push   $0x1378c
   12164:	6a 39                	push   $0x39
   12166:	68 04 37 01 00       	push   $0x13704
   1216b:	e8 fd fe ff ff       	call   1206d <pannic>
   12170:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12173:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12177:	79 19                	jns    12192 <bitmap_get_bit+0x45>
   12179:	68 50 37 01 00       	push   $0x13750
   1217e:	68 8c 37 01 00       	push   $0x1378c
   12183:	6a 3a                	push   $0x3a
   12185:	68 04 37 01 00       	push   $0x13704
   1218a:	e8 de fe ff ff       	call   1206d <pannic>
   1218f:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12192:	8b 45 08             	mov    0x8(%ebp),%eax
   12195:	8b 48 04             	mov    0x4(%eax),%ecx
   12198:	8b 45 0c             	mov    0xc(%ebp),%eax
   1219b:	8d 50 07             	lea    0x7(%eax),%edx
   1219e:	85 c0                	test   %eax,%eax
   121a0:	0f 48 c2             	cmovs  %edx,%eax
   121a3:	c1 f8 03             	sar    $0x3,%eax
   121a6:	01 c8                	add    %ecx,%eax
   121a8:	0f b6 00             	movzbl (%eax),%eax
   121ab:	89 c3                	mov    %eax,%ebx
   121ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   121b0:	83 e0 07             	and    $0x7,%eax
   121b3:	ba 01 00 00 00       	mov    $0x1,%edx
   121b8:	89 c1                	mov    %eax,%ecx
   121ba:	d3 e2                	shl    %cl,%edx
   121bc:	89 d0                	mov    %edx,%eax
   121be:	21 d8                	and    %ebx,%eax
}
   121c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   121c3:	c9                   	leave  
   121c4:	c3                   	ret    

000121c5 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   121c5:	55                   	push   %ebp
   121c6:	89 e5                	mov    %esp,%ebp
   121c8:	56                   	push   %esi
   121c9:	53                   	push   %ebx
   121ca:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   121cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121d1:	75 19                	jne    121ec <bitmap_set_bit+0x27>
   121d3:	68 ec 36 01 00       	push   $0x136ec
   121d8:	68 9c 37 01 00       	push   $0x1379c
   121dd:	6a 48                	push   $0x48
   121df:	68 04 37 01 00       	push   $0x13704
   121e4:	e8 84 fe ff ff       	call   1206d <pannic>
   121e9:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   121ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121f0:	78 06                	js     121f8 <bitmap_set_bit+0x33>
   121f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   121f6:	79 19                	jns    12211 <bitmap_set_bit+0x4c>
   121f8:	68 5b 37 01 00       	push   $0x1375b
   121fd:	68 9c 37 01 00       	push   $0x1379c
   12202:	6a 49                	push   $0x49
   12204:	68 04 37 01 00       	push   $0x13704
   12209:	e8 5f fe ff ff       	call   1206d <pannic>
   1220e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12211:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12218:	e9 92 00 00 00       	jmp    122af <bitmap_set_bit+0xea>
        if (bit) {
   1221d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12221:	74 42                	je     12265 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12223:	8b 45 08             	mov    0x8(%ebp),%eax
   12226:	8b 48 04             	mov    0x4(%eax),%ecx
   12229:	8b 45 0c             	mov    0xc(%ebp),%eax
   1222c:	8d 50 07             	lea    0x7(%eax),%edx
   1222f:	85 c0                	test   %eax,%eax
   12231:	0f 48 c2             	cmovs  %edx,%eax
   12234:	c1 f8 03             	sar    $0x3,%eax
   12237:	89 c2                	mov    %eax,%edx
   12239:	89 d0                	mov    %edx,%eax
   1223b:	01 c8                	add    %ecx,%eax
   1223d:	0f b6 00             	movzbl (%eax),%eax
   12240:	89 c6                	mov    %eax,%esi
   12242:	8b 45 0c             	mov    0xc(%ebp),%eax
   12245:	83 e0 07             	and    $0x7,%eax
   12248:	bb 01 00 00 00       	mov    $0x1,%ebx
   1224d:	89 c1                	mov    %eax,%ecx
   1224f:	d3 e3                	shl    %cl,%ebx
   12251:	89 d8                	mov    %ebx,%eax
   12253:	89 f1                	mov    %esi,%ecx
   12255:	09 c1                	or     %eax,%ecx
   12257:	8b 45 08             	mov    0x8(%ebp),%eax
   1225a:	8b 40 04             	mov    0x4(%eax),%eax
   1225d:	01 d0                	add    %edx,%eax
   1225f:	89 ca                	mov    %ecx,%edx
   12261:	88 10                	mov    %dl,(%eax)
   12263:	eb 42                	jmp    122a7 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12265:	8b 45 08             	mov    0x8(%ebp),%eax
   12268:	8b 48 04             	mov    0x4(%eax),%ecx
   1226b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1226e:	8d 50 07             	lea    0x7(%eax),%edx
   12271:	85 c0                	test   %eax,%eax
   12273:	0f 48 c2             	cmovs  %edx,%eax
   12276:	c1 f8 03             	sar    $0x3,%eax
   12279:	89 c2                	mov    %eax,%edx
   1227b:	89 d0                	mov    %edx,%eax
   1227d:	01 c8                	add    %ecx,%eax
   1227f:	0f b6 00             	movzbl (%eax),%eax
   12282:	89 c6                	mov    %eax,%esi
   12284:	8b 45 0c             	mov    0xc(%ebp),%eax
   12287:	83 e0 07             	and    $0x7,%eax
   1228a:	bb 01 00 00 00       	mov    $0x1,%ebx
   1228f:	89 c1                	mov    %eax,%ecx
   12291:	d3 e3                	shl    %cl,%ebx
   12293:	89 d8                	mov    %ebx,%eax
   12295:	f7 d0                	not    %eax
   12297:	89 f1                	mov    %esi,%ecx
   12299:	21 c1                	and    %eax,%ecx
   1229b:	8b 45 08             	mov    0x8(%ebp),%eax
   1229e:	8b 40 04             	mov    0x4(%eax),%eax
   122a1:	01 d0                	add    %edx,%eax
   122a3:	89 ca                	mov    %ecx,%edx
   122a5:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   122a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122ab:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   122af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122b2:	3b 45 10             	cmp    0x10(%ebp),%eax
   122b5:	7d 0e                	jge    122c5 <bitmap_set_bit+0x100>
   122b7:	8b 45 08             	mov    0x8(%ebp),%eax
   122ba:	8b 00                	mov    (%eax),%eax
   122bc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   122bf:	0f 8c 58 ff ff ff    	jl     1221d <bitmap_set_bit+0x58>
        }
    }
}
   122c5:	90                   	nop
   122c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
   122c9:	5b                   	pop    %ebx
   122ca:	5e                   	pop    %esi
   122cb:	5d                   	pop    %ebp
   122cc:	c3                   	ret    

000122cd <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   122cd:	55                   	push   %ebp
   122ce:	89 e5                	mov    %esp,%ebp
   122d0:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   122d3:	83 ec 08             	sub    $0x8,%esp
   122d6:	ff 75 0c             	push   0xc(%ebp)
   122d9:	ff 75 08             	push   0x8(%ebp)
   122dc:	e8 6c fe ff ff       	call   1214d <bitmap_get_bit>
   122e1:	83 c4 10             	add    $0x10,%esp
   122e4:	84 c0                	test   %al,%al
   122e6:	0f 95 c0             	setne  %al
   122e9:	0f b6 c0             	movzbl %al,%eax
}
   122ec:	c9                   	leave  
   122ed:	c3                   	ret    

000122ee <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   122ee:	55                   	push   %ebp
   122ef:	89 e5                	mov    %esp,%ebp
   122f1:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   122f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122f8:	75 19                	jne    12313 <bitmap_alloc_nbits+0x25>
   122fa:	68 ec 36 01 00       	push   $0x136ec
   122ff:	68 ac 37 01 00       	push   $0x137ac
   12304:	6a 68                	push   $0x68
   12306:	68 04 37 01 00       	push   $0x13704
   1230b:	e8 5d fd ff ff       	call   1206d <pannic>
   12310:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12313:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12317:	79 19                	jns    12332 <bitmap_alloc_nbits+0x44>
   12319:	68 74 37 01 00       	push   $0x13774
   1231e:	68 ac 37 01 00       	push   $0x137ac
   12323:	6a 69                	push   $0x69
   12325:	68 04 37 01 00       	push   $0x13704
   1232a:	e8 3e fd ff ff       	call   1206d <pannic>
   1232f:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12339:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12340:	e9 8f 00 00 00       	jmp    123d4 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12345:	83 ec 08             	sub    $0x8,%esp
   12348:	ff 75 f4             	push   -0xc(%ebp)
   1234b:	ff 75 08             	push   0x8(%ebp)
   1234e:	e8 fa fd ff ff       	call   1214d <bitmap_get_bit>
   12353:	83 c4 10             	add    $0x10,%esp
   12356:	0f b6 c0             	movzbl %al,%eax
   12359:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1235c:	74 06                	je     12364 <bitmap_alloc_nbits+0x76>
            search_index++;
   1235e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12362:	eb 70                	jmp    123d4 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12364:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12367:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   1236a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12371:	eb 2d                	jmp    123a0 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12373:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12376:	8d 50 01             	lea    0x1(%eax),%edx
   12379:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1237c:	83 ec 08             	sub    $0x8,%esp
   1237f:	50                   	push   %eax
   12380:	ff 75 08             	push   0x8(%ebp)
   12383:	e8 c5 fd ff ff       	call   1214d <bitmap_get_bit>
   12388:	83 c4 10             	add    $0x10,%esp
   1238b:	0f b6 c0             	movzbl %al,%eax
   1238e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12391:	74 09                	je     1239c <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12393:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   1239a:	eb 16                	jmp    123b2 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   1239c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   123a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   123a3:	3b 45 10             	cmp    0x10(%ebp),%eax
   123a6:	7d 0a                	jge    123b2 <bitmap_alloc_nbits+0xc4>
   123a8:	8b 45 08             	mov    0x8(%ebp),%eax
   123ab:	8b 00                	mov    (%eax),%eax
   123ad:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   123b0:	7c c1                	jl     12373 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   123b2:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   123b6:	74 1c                	je     123d4 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   123b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   123bb:	f7 d0                	not    %eax
   123bd:	50                   	push   %eax
   123be:	ff 75 10             	push   0x10(%ebp)
   123c1:	ff 75 f0             	push   -0x10(%ebp)
   123c4:	ff 75 08             	push   0x8(%ebp)
   123c7:	e8 f9 fd ff ff       	call   121c5 <bitmap_set_bit>
   123cc:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   123cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123d2:	eb 13                	jmp    123e7 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   123d4:	8b 45 08             	mov    0x8(%ebp),%eax
   123d7:	8b 00                	mov    (%eax),%eax
   123d9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   123dc:	0f 8c 63 ff ff ff    	jl     12345 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   123e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   123e7:	c9                   	leave  
   123e8:	c3                   	ret    

000123e9 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   123e9:	55                   	push   %ebp
   123ea:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   123ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123f0:	74 3b                	je     1242d <kernel_strcpy+0x44>
   123f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123f6:	74 35                	je     1242d <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   123f8:	eb 17                	jmp    12411 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   123fa:	8b 55 0c             	mov    0xc(%ebp),%edx
   123fd:	8d 42 01             	lea    0x1(%edx),%eax
   12400:	89 45 0c             	mov    %eax,0xc(%ebp)
   12403:	8b 45 08             	mov    0x8(%ebp),%eax
   12406:	8d 48 01             	lea    0x1(%eax),%ecx
   12409:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1240c:	0f b6 12             	movzbl (%edx),%edx
   1240f:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12411:	8b 45 08             	mov    0x8(%ebp),%eax
   12414:	0f b6 00             	movzbl (%eax),%eax
   12417:	84 c0                	test   %al,%al
   12419:	74 0a                	je     12425 <kernel_strcpy+0x3c>
   1241b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1241e:	0f b6 00             	movzbl (%eax),%eax
   12421:	84 c0                	test   %al,%al
   12423:	75 d5                	jne    123fa <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12425:	8b 45 08             	mov    0x8(%ebp),%eax
   12428:	c6 00 00             	movb   $0x0,(%eax)
   1242b:	eb 01                	jmp    1242e <kernel_strcpy+0x45>
    if (!dest || !src) return;
   1242d:	90                   	nop
    
}
   1242e:	5d                   	pop    %ebp
   1242f:	c3                   	ret    

00012430 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12430:	55                   	push   %ebp
   12431:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12433:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12437:	74 45                	je     1247e <kernel_strncpy+0x4e>
   12439:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1243d:	74 3f                	je     1247e <kernel_strncpy+0x4e>
   1243f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12443:	74 39                	je     1247e <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   12445:	eb 17                	jmp    1245e <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12447:	8b 55 0c             	mov    0xc(%ebp),%edx
   1244a:	8d 42 01             	lea    0x1(%edx),%eax
   1244d:	89 45 0c             	mov    %eax,0xc(%ebp)
   12450:	8b 45 08             	mov    0x8(%ebp),%eax
   12453:	8d 48 01             	lea    0x1(%eax),%ecx
   12456:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12459:	0f b6 12             	movzbl (%edx),%edx
   1245c:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   1245e:	8b 45 10             	mov    0x10(%ebp),%eax
   12461:	8d 50 ff             	lea    -0x1(%eax),%edx
   12464:	89 55 10             	mov    %edx,0x10(%ebp)
   12467:	83 f8 01             	cmp    $0x1,%eax
   1246a:	7e 0a                	jle    12476 <kernel_strncpy+0x46>
   1246c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1246f:	0f b6 00             	movzbl (%eax),%eax
   12472:	84 c0                	test   %al,%al
   12474:	75 d1                	jne    12447 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12476:	8b 45 08             	mov    0x8(%ebp),%eax
   12479:	c6 00 00             	movb   $0x0,(%eax)
   1247c:	eb 01                	jmp    1247f <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   1247e:	90                   	nop
}
   1247f:	5d                   	pop    %ebp
   12480:	c3                   	ret    

00012481 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   12481:	55                   	push   %ebp
   12482:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12484:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12488:	74 06                	je     12490 <kernel_strncmp+0xf>
   1248a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1248e:	75 0f                	jne    1249f <kernel_strncmp+0x1e>
   12490:	b8 00 00 00 00       	mov    $0x0,%eax
   12495:	eb 52                	jmp    124e9 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12497:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   1249b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1249f:	8b 45 08             	mov    0x8(%ebp),%eax
   124a2:	0f b6 00             	movzbl (%eax),%eax
   124a5:	84 c0                	test   %al,%al
   124a7:	74 24                	je     124cd <kernel_strncmp+0x4c>
   124a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ac:	0f b6 00             	movzbl (%eax),%eax
   124af:	84 c0                	test   %al,%al
   124b1:	74 1a                	je     124cd <kernel_strncmp+0x4c>
   124b3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   124b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124bb:	74 10                	je     124cd <kernel_strncmp+0x4c>
   124bd:	8b 45 08             	mov    0x8(%ebp),%eax
   124c0:	0f b6 10             	movzbl (%eax),%edx
   124c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   124c6:	0f b6 00             	movzbl (%eax),%eax
   124c9:	38 c2                	cmp    %al,%dl
   124cb:	74 ca                	je     12497 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   124cd:	8b 45 08             	mov    0x8(%ebp),%eax
   124d0:	0f b6 10             	movzbl (%eax),%edx
   124d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   124d6:	0f b6 00             	movzbl (%eax),%eax
   124d9:	38 c2                	cmp    %al,%dl
   124db:	7e 07                	jle    124e4 <kernel_strncmp+0x63>
   124dd:	b8 01 00 00 00       	mov    $0x1,%eax
   124e2:	eb 05                	jmp    124e9 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   124e4:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   124e9:	5d                   	pop    %ebp
   124ea:	c3                   	ret    

000124eb <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   124eb:	55                   	push   %ebp
   124ec:	89 e5                	mov    %esp,%ebp
   124ee:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   124f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124f5:	75 07                	jne    124fe <kernel_strlen+0x13>
   124f7:	b8 00 00 00 00       	mov    $0x0,%eax
   124fc:	eb 20                	jmp    1251e <kernel_strlen+0x33>

    int len = 0;
   124fe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12505:	eb 04                	jmp    1250b <kernel_strlen+0x20>
   12507:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1250b:	8b 45 08             	mov    0x8(%ebp),%eax
   1250e:	8d 50 01             	lea    0x1(%eax),%edx
   12511:	89 55 08             	mov    %edx,0x8(%ebp)
   12514:	0f b6 00             	movzbl (%eax),%eax
   12517:	84 c0                	test   %al,%al
   12519:	75 ec                	jne    12507 <kernel_strlen+0x1c>

    return len;
   1251b:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   1251e:	c9                   	leave  
   1251f:	c3                   	ret    

00012520 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12520:	55                   	push   %ebp
   12521:	89 e5                	mov    %esp,%ebp
   12523:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12526:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1252a:	74 40                	je     1256c <kernel_memcpy+0x4c>
   1252c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12530:	74 3a                	je     1256c <kernel_memcpy+0x4c>
   12532:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12536:	74 34                	je     1256c <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12538:	8b 45 08             	mov    0x8(%ebp),%eax
   1253b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   1253e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12541:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12544:	eb 17                	jmp    1255d <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12546:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12549:	8d 42 01             	lea    0x1(%edx),%eax
   1254c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1254f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12552:	8d 48 01             	lea    0x1(%eax),%ecx
   12555:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12558:	0f b6 12             	movzbl (%edx),%edx
   1255b:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1255d:	8b 45 10             	mov    0x10(%ebp),%eax
   12560:	8d 50 ff             	lea    -0x1(%eax),%edx
   12563:	89 55 10             	mov    %edx,0x10(%ebp)
   12566:	85 c0                	test   %eax,%eax
   12568:	75 dc                	jne    12546 <kernel_memcpy+0x26>
   1256a:	eb 01                	jmp    1256d <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   1256c:	90                   	nop
    }
    
}
   1256d:	c9                   	leave  
   1256e:	c3                   	ret    

0001256f <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1256f:	55                   	push   %ebp
   12570:	89 e5                	mov    %esp,%ebp
   12572:	83 ec 14             	sub    $0x14,%esp
   12575:	8b 45 0c             	mov    0xc(%ebp),%eax
   12578:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   1257b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1257f:	74 2c                	je     125ad <kernel_memset+0x3e>
   12581:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12585:	74 26                	je     125ad <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12587:	8b 45 08             	mov    0x8(%ebp),%eax
   1258a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   1258d:	eb 0f                	jmp    1259e <kernel_memset+0x2f>
        *(d++) = v;
   1258f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12592:	8d 50 01             	lea    0x1(%eax),%edx
   12595:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12598:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1259c:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1259e:	8b 45 10             	mov    0x10(%ebp),%eax
   125a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   125a4:	89 55 10             	mov    %edx,0x10(%ebp)
   125a7:	85 c0                	test   %eax,%eax
   125a9:	75 e4                	jne    1258f <kernel_memset+0x20>
   125ab:	eb 01                	jmp    125ae <kernel_memset+0x3f>
    if (!dest || !size) return;
   125ad:	90                   	nop
    }
    
}
   125ae:	c9                   	leave  
   125af:	c3                   	ret    

000125b0 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   125b0:	55                   	push   %ebp
   125b1:	89 e5                	mov    %esp,%ebp
   125b3:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   125b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125ba:	74 0c                	je     125c8 <kernel_memcmp+0x18>
   125bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125c0:	74 06                	je     125c8 <kernel_memcmp+0x18>
   125c2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125c6:	75 07                	jne    125cf <kernel_memcmp+0x1f>
   125c8:	b8 00 00 00 00       	mov    $0x0,%eax
   125cd:	eb 63                	jmp    12632 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   125cf:	8b 45 08             	mov    0x8(%ebp),%eax
   125d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   125d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   125d8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   125db:	eb 08                	jmp    125e5 <kernel_memcmp+0x35>
        d1++;
   125dd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   125e1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   125e5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   125e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125ed:	74 10                	je     125ff <kernel_memcmp+0x4f>
   125ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125f2:	0f b6 10             	movzbl (%eax),%edx
   125f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125f8:	0f b6 00             	movzbl (%eax),%eax
   125fb:	38 c2                	cmp    %al,%dl
   125fd:	74 de                	je     125dd <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   125ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12602:	0f b6 10             	movzbl (%eax),%edx
   12605:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12608:	0f b6 00             	movzbl (%eax),%eax
   1260b:	38 c2                	cmp    %al,%dl
   1260d:	76 07                	jbe    12616 <kernel_memcmp+0x66>
   1260f:	b8 01 00 00 00       	mov    $0x1,%eax
   12614:	eb 1c                	jmp    12632 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12616:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12619:	0f b6 10             	movzbl (%eax),%edx
   1261c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1261f:	0f b6 00             	movzbl (%eax),%eax
   12622:	38 c2                	cmp    %al,%dl
   12624:	73 07                	jae    1262d <kernel_memcmp+0x7d>
   12626:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1262b:	eb 05                	jmp    12632 <kernel_memcmp+0x82>
    else return 0;
   1262d:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12632:	c9                   	leave  
   12633:	c3                   	ret    

00012634 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12634:	55                   	push   %ebp
   12635:	89 e5                	mov    %esp,%ebp
   12637:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1263a:	8d 45 10             	lea    0x10(%ebp),%eax
   1263d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12640:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12643:	83 ec 04             	sub    $0x4,%esp
   12646:	50                   	push   %eax
   12647:	ff 75 0c             	push   0xc(%ebp)
   1264a:	ff 75 08             	push   0x8(%ebp)
   1264d:	e8 06 00 00 00       	call   12658 <kernel_vsprintf>
   12652:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12655:	90                   	nop
   12656:	c9                   	leave  
   12657:	c3                   	ret    

00012658 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12658:	55                   	push   %ebp
   12659:	89 e5                	mov    %esp,%ebp
   1265b:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   1265e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12665:	8b 45 08             	mov    0x8(%ebp),%eax
   12668:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   1266b:	e9 68 01 00 00       	jmp    127d8 <kernel_vsprintf+0x180>
        switch (state) {
   12670:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12674:	74 0b                	je     12681 <kernel_vsprintf+0x29>
   12676:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1267a:	74 2b                	je     126a7 <kernel_vsprintf+0x4f>
   1267c:	e9 56 01 00 00       	jmp    127d7 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12681:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12685:	75 0c                	jne    12693 <kernel_vsprintf+0x3b>
   12687:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1268e:	e9 45 01 00 00       	jmp    127d8 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12693:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12696:	8d 50 01             	lea    0x1(%eax),%edx
   12699:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1269c:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   126a0:	88 10                	mov    %dl,(%eax)
            break;
   126a2:	e9 31 01 00 00       	jmp    127d8 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   126a7:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   126ab:	75 47                	jne    126f4 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   126ad:	8b 45 10             	mov    0x10(%ebp),%eax
   126b0:	8d 50 04             	lea    0x4(%eax),%edx
   126b3:	89 55 10             	mov    %edx,0x10(%ebp)
   126b6:	8b 00                	mov    (%eax),%eax
   126b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   126bb:	ff 75 ec             	push   -0x14(%ebp)
   126be:	e8 28 fe ff ff       	call   124eb <kernel_strlen>
   126c3:	83 c4 04             	add    $0x4,%esp
   126c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   126c9:	eb 17                	jmp    126e2 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   126cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
   126ce:	8d 42 01             	lea    0x1(%edx),%eax
   126d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
   126d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126d7:	8d 48 01             	lea    0x1(%eax),%ecx
   126da:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   126dd:	0f b6 12             	movzbl (%edx),%edx
   126e0:	88 10                	mov    %dl,(%eax)
                while (len--) {
   126e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   126e8:	89 55 e8             	mov    %edx,-0x18(%ebp)
   126eb:	85 c0                	test   %eax,%eax
   126ed:	75 dc                	jne    126cb <kernel_vsprintf+0x73>
   126ef:	e9 da 00 00 00       	jmp    127ce <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   126f4:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   126f8:	75 37                	jne    12731 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   126fa:	8b 45 10             	mov    0x10(%ebp),%eax
   126fd:	8d 50 04             	lea    0x4(%eax),%edx
   12700:	89 55 10             	mov    %edx,0x10(%ebp)
   12703:	8b 00                	mov    (%eax),%eax
   12705:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12708:	83 ec 04             	sub    $0x4,%esp
   1270b:	6a 0a                	push   $0xa
   1270d:	ff 75 d8             	push   -0x28(%ebp)
   12710:	ff 75 f0             	push   -0x10(%ebp)
   12713:	e8 dd 00 00 00       	call   127f5 <kernel_itoa>
   12718:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   1271b:	83 ec 0c             	sub    $0xc,%esp
   1271e:	ff 75 f0             	push   -0x10(%ebp)
   12721:	e8 c5 fd ff ff       	call   124eb <kernel_strlen>
   12726:	83 c4 10             	add    $0x10,%esp
   12729:	01 45 f0             	add    %eax,-0x10(%ebp)
   1272c:	e9 9d 00 00 00       	jmp    127ce <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12731:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12735:	74 06                	je     1273d <kernel_vsprintf+0xe5>
   12737:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   1273b:	75 34                	jne    12771 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   1273d:	8b 45 10             	mov    0x10(%ebp),%eax
   12740:	8d 50 04             	lea    0x4(%eax),%edx
   12743:	89 55 10             	mov    %edx,0x10(%ebp)
   12746:	8b 00                	mov    (%eax),%eax
   12748:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   1274b:	83 ec 04             	sub    $0x4,%esp
   1274e:	6a 10                	push   $0x10
   12750:	ff 75 dc             	push   -0x24(%ebp)
   12753:	ff 75 f0             	push   -0x10(%ebp)
   12756:	e8 9a 00 00 00       	call   127f5 <kernel_itoa>
   1275b:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1275e:	83 ec 0c             	sub    $0xc,%esp
   12761:	ff 75 f0             	push   -0x10(%ebp)
   12764:	e8 82 fd ff ff       	call   124eb <kernel_strlen>
   12769:	83 c4 10             	add    $0x10,%esp
   1276c:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   1276f:	eb 5d                	jmp    127ce <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12771:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12775:	75 34                	jne    127ab <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12777:	8b 45 10             	mov    0x10(%ebp),%eax
   1277a:	8d 50 04             	lea    0x4(%eax),%edx
   1277d:	89 55 10             	mov    %edx,0x10(%ebp)
   12780:	8b 00                	mov    (%eax),%eax
   12782:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12785:	83 ec 04             	sub    $0x4,%esp
   12788:	6a 02                	push   $0x2
   1278a:	ff 75 e0             	push   -0x20(%ebp)
   1278d:	ff 75 f0             	push   -0x10(%ebp)
   12790:	e8 60 00 00 00       	call   127f5 <kernel_itoa>
   12795:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12798:	83 ec 0c             	sub    $0xc,%esp
   1279b:	ff 75 f0             	push   -0x10(%ebp)
   1279e:	e8 48 fd ff ff       	call   124eb <kernel_strlen>
   127a3:	83 c4 10             	add    $0x10,%esp
   127a6:	01 45 f0             	add    %eax,-0x10(%ebp)
   127a9:	eb 23                	jmp    127ce <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   127ab:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   127af:	75 1d                	jne    127ce <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   127b1:	8b 45 10             	mov    0x10(%ebp),%eax
   127b4:	8d 50 04             	lea    0x4(%eax),%edx
   127b7:	89 55 10             	mov    %edx,0x10(%ebp)
   127ba:	8b 00                	mov    (%eax),%eax
   127bc:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   127bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127c2:	8d 50 01             	lea    0x1(%eax),%edx
   127c5:	89 55 f0             	mov    %edx,-0x10(%ebp)
   127c8:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   127cc:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   127ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   127d5:	eb 01                	jmp    127d8 <kernel_vsprintf+0x180>
        default:
            break;
   127d7:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   127d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   127db:	8d 50 01             	lea    0x1(%eax),%edx
   127de:	89 55 0c             	mov    %edx,0xc(%ebp)
   127e1:	0f b6 00             	movzbl (%eax),%eax
   127e4:	88 45 e7             	mov    %al,-0x19(%ebp)
   127e7:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   127eb:	0f 85 7f fe ff ff    	jne    12670 <kernel_vsprintf+0x18>
        }
    }
    

}
   127f1:	90                   	nop
   127f2:	90                   	nop
   127f3:	c9                   	leave  
   127f4:	c3                   	ret    

000127f5 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   127f5:	55                   	push   %ebp
   127f6:	89 e5                	mov    %esp,%ebp
   127f8:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   127fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12801:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   12804:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12808:	74 1d                	je     12827 <kernel_itoa+0x32>
   1280a:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1280e:	74 17                	je     12827 <kernel_itoa+0x32>
   12810:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12814:	74 11                	je     12827 <kernel_itoa+0x32>
   12816:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1281a:	74 0b                	je     12827 <kernel_itoa+0x32>
        *buf = '\0';
   1281c:	8b 45 08             	mov    0x8(%ebp),%eax
   1281f:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12822:	e9 a2 00 00 00       	jmp    128c9 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12827:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1282b:	79 11                	jns    1283e <kernel_itoa+0x49>
        *(p++) = '-';
   1282d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12830:	8d 50 01             	lea    0x1(%eax),%edx
   12833:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12836:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12839:	f7 5d 0c             	negl   0xc(%ebp)
   1283c:	eb 1a                	jmp    12858 <kernel_itoa+0x63>
    } else if (num == 0) {
   1283e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12842:	75 14                	jne    12858 <kernel_itoa+0x63>
        *(p++) = '0';
   12844:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12847:	8d 50 01             	lea    0x1(%eax),%edx
   1284a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1284d:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12850:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12853:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12856:	eb 71                	jmp    128c9 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12858:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   1285f:	eb 2e                	jmp    1288f <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12861:	8b 0d 1c 39 01 00    	mov    0x1391c,%ecx
   12867:	8b 45 0c             	mov    0xc(%ebp),%eax
   1286a:	99                   	cltd   
   1286b:	f7 7d 10             	idivl  0x10(%ebp)
   1286e:	89 d0                	mov    %edx,%eax
   12870:	01 c1                	add    %eax,%ecx
   12872:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12875:	8d 50 01             	lea    0x1(%eax),%edx
   12878:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1287b:	0f b6 11             	movzbl (%ecx),%edx
   1287e:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12885:	8b 45 0c             	mov    0xc(%ebp),%eax
   12888:	99                   	cltd   
   12889:	f7 7d 10             	idivl  0x10(%ebp)
   1288c:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1288f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12893:	7f cc                	jg     12861 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12895:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12898:	83 e8 01             	sub    $0x1,%eax
   1289b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1289e:	eb 1d                	jmp    128bd <kernel_itoa+0xc8>
            *(p++) = arr[i];
   128a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128a3:	8d 50 01             	lea    0x1(%eax),%edx
   128a6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128a9:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   128af:	8b 55 f4             	mov    -0xc(%ebp),%edx
   128b2:	01 ca                	add    %ecx,%edx
   128b4:	0f b6 12             	movzbl (%edx),%edx
   128b7:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   128b9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   128bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   128c1:	79 dd                	jns    128a0 <kernel_itoa+0xab>
    }
    *p = '\0';
   128c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128c6:	c6 00 00             	movb   $0x0,(%eax)
   128c9:	c9                   	leave  
   128ca:	c3                   	ret    

000128cb <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   128cb:	55                   	push   %ebp
   128cc:	89 e5                	mov    %esp,%ebp
   128ce:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   128d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128d5:	75 19                	jne    128f0 <list_is_empty+0x25>
   128d7:	68 d0 37 01 00       	push   $0x137d0
   128dc:	68 b4 38 01 00       	push   $0x138b4
   128e1:	6a 38                	push   $0x38
   128e3:	68 e4 37 01 00       	push   $0x137e4
   128e8:	e8 80 f7 ff ff       	call   1206d <pannic>
   128ed:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   128f0:	8b 45 08             	mov    0x8(%ebp),%eax
   128f3:	8b 40 08             	mov    0x8(%eax),%eax
   128f6:	85 c0                	test   %eax,%eax
   128f8:	0f 94 c0             	sete   %al
   128fb:	0f b6 c0             	movzbl %al,%eax
}
   128fe:	c9                   	leave  
   128ff:	c3                   	ret    

00012900 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12900:	55                   	push   %ebp
   12901:	89 e5                	mov    %esp,%ebp
   12903:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12906:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1290a:	75 19                	jne    12925 <list_get_size+0x25>
   1290c:	68 d0 37 01 00       	push   $0x137d0
   12911:	68 ec 38 01 00       	push   $0x138ec
   12916:	6a 3e                	push   $0x3e
   12918:	68 e4 37 01 00       	push   $0x137e4
   1291d:	e8 4b f7 ff ff       	call   1206d <pannic>
   12922:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12925:	8b 45 08             	mov    0x8(%ebp),%eax
   12928:	8b 40 08             	mov    0x8(%eax),%eax
}
   1292b:	c9                   	leave  
   1292c:	c3                   	ret    

0001292d <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   1292d:	55                   	push   %ebp
   1292e:	89 e5                	mov    %esp,%ebp
   12930:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12933:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12937:	74 06                	je     1293f <list_insert_first+0x12>
   12939:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1293d:	75 19                	jne    12958 <list_insert_first+0x2b>
   1293f:	68 24 38 01 00       	push   $0x13824
   12944:	68 a0 38 01 00       	push   $0x138a0
   12949:	6a 0f                	push   $0xf
   1294b:	68 54 38 01 00       	push   $0x13854
   12950:	e8 18 f7 ff ff       	call   1206d <pannic>
   12955:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12958:	8b 45 08             	mov    0x8(%ebp),%eax
   1295b:	8b 10                	mov    (%eax),%edx
   1295d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12960:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12963:	8b 45 0c             	mov    0xc(%ebp),%eax
   12966:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1296c:	83 ec 0c             	sub    $0xc,%esp
   1296f:	ff 75 08             	push   0x8(%ebp)
   12972:	e8 54 ff ff ff       	call   128cb <list_is_empty>
   12977:	83 c4 10             	add    $0x10,%esp
   1297a:	85 c0                	test   %eax,%eax
   1297c:	74 16                	je     12994 <list_insert_first+0x67>
        list->first = list->last = node;
   1297e:	8b 45 08             	mov    0x8(%ebp),%eax
   12981:	8b 55 0c             	mov    0xc(%ebp),%edx
   12984:	89 50 04             	mov    %edx,0x4(%eax)
   12987:	8b 45 08             	mov    0x8(%ebp),%eax
   1298a:	8b 50 04             	mov    0x4(%eax),%edx
   1298d:	8b 45 08             	mov    0x8(%ebp),%eax
   12990:	89 10                	mov    %edx,(%eax)
   12992:	eb 12                	jmp    129a6 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12994:	8b 45 08             	mov    0x8(%ebp),%eax
   12997:	8b 00                	mov    (%eax),%eax
   12999:	8b 55 0c             	mov    0xc(%ebp),%edx
   1299c:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1299e:	8b 45 08             	mov    0x8(%ebp),%eax
   129a1:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a4:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   129a6:	8b 45 08             	mov    0x8(%ebp),%eax
   129a9:	8b 40 08             	mov    0x8(%eax),%eax
   129ac:	8d 50 01             	lea    0x1(%eax),%edx
   129af:	8b 45 08             	mov    0x8(%ebp),%eax
   129b2:	89 50 08             	mov    %edx,0x8(%eax)
}
   129b5:	90                   	nop
   129b6:	c9                   	leave  
   129b7:	c3                   	ret    

000129b8 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   129b8:	55                   	push   %ebp
   129b9:	89 e5                	mov    %esp,%ebp
   129bb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   129be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129c2:	74 06                	je     129ca <list_insert_last+0x12>
   129c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129c8:	75 19                	jne    129e3 <list_insert_last+0x2b>
   129ca:	68 24 38 01 00       	push   $0x13824
   129cf:	68 c4 38 01 00       	push   $0x138c4
   129d4:	6a 1f                	push   $0x1f
   129d6:	68 54 38 01 00       	push   $0x13854
   129db:	e8 8d f6 ff ff       	call   1206d <pannic>
   129e0:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   129e3:	8b 45 08             	mov    0x8(%ebp),%eax
   129e6:	8b 50 04             	mov    0x4(%eax),%edx
   129e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   129ec:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   129ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   129f8:	83 ec 0c             	sub    $0xc,%esp
   129fb:	ff 75 08             	push   0x8(%ebp)
   129fe:	e8 c8 fe ff ff       	call   128cb <list_is_empty>
   12a03:	83 c4 10             	add    $0x10,%esp
   12a06:	85 c0                	test   %eax,%eax
   12a08:	74 16                	je     12a20 <list_insert_last+0x68>
        list->first = list->last = node;
   12a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a10:	89 50 04             	mov    %edx,0x4(%eax)
   12a13:	8b 45 08             	mov    0x8(%ebp),%eax
   12a16:	8b 50 04             	mov    0x4(%eax),%edx
   12a19:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1c:	89 10                	mov    %edx,(%eax)
   12a1e:	eb 15                	jmp    12a35 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12a20:	8b 45 08             	mov    0x8(%ebp),%eax
   12a23:	8b 40 04             	mov    0x4(%eax),%eax
   12a26:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a29:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a32:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12a35:	8b 45 08             	mov    0x8(%ebp),%eax
   12a38:	8b 40 08             	mov    0x8(%eax),%eax
   12a3b:	8d 50 01             	lea    0x1(%eax),%edx
   12a3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a41:	89 50 08             	mov    %edx,0x8(%eax)

}
   12a44:	90                   	nop
   12a45:	c9                   	leave  
   12a46:	c3                   	ret    

00012a47 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12a47:	55                   	push   %ebp
   12a48:	89 e5                	mov    %esp,%ebp
   12a4a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12a4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a51:	75 19                	jne    12a6c <list_remove_first+0x25>
   12a53:	68 8a 38 01 00       	push   $0x1388a
   12a58:	68 d8 38 01 00       	push   $0x138d8
   12a5d:	6a 31                	push   $0x31
   12a5f:	68 54 38 01 00       	push   $0x13854
   12a64:	e8 04 f6 ff ff       	call   1206d <pannic>
   12a69:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12a6c:	83 ec 0c             	sub    $0xc,%esp
   12a6f:	ff 75 08             	push   0x8(%ebp)
   12a72:	e8 54 fe ff ff       	call   128cb <list_is_empty>
   12a77:	83 c4 10             	add    $0x10,%esp
   12a7a:	85 c0                	test   %eax,%eax
   12a7c:	74 07                	je     12a85 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12a7e:	b8 00 00 00 00       	mov    $0x0,%eax
   12a83:	eb 71                	jmp    12af6 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12a85:	8b 45 08             	mov    0x8(%ebp),%eax
   12a88:	8b 00                	mov    (%eax),%eax
   12a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12a8d:	83 ec 0c             	sub    $0xc,%esp
   12a90:	ff 75 08             	push   0x8(%ebp)
   12a93:	e8 68 fe ff ff       	call   12900 <list_get_size>
   12a98:	83 c4 10             	add    $0x10,%esp
   12a9b:	83 f8 01             	cmp    $0x1,%eax
   12a9e:	75 17                	jne    12ab7 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   12aad:	8b 50 04             	mov    0x4(%eax),%edx
   12ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab3:	89 10                	mov    %edx,(%eax)
   12ab5:	eb 18                	jmp    12acf <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aba:	8b 00                	mov    (%eax),%eax
   12abc:	8b 50 04             	mov    0x4(%eax),%edx
   12abf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac2:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12ac4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac7:	8b 00                	mov    (%eax),%eax
   12ac9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12acf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad2:	8b 40 08             	mov    0x8(%eax),%eax
   12ad5:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ad8:	8b 45 08             	mov    0x8(%ebp),%eax
   12adb:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ae1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12aeb:	8b 50 04             	mov    0x4(%eax),%edx
   12aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12af1:	89 10                	mov    %edx,(%eax)
    return ret;
   12af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12af6:	c9                   	leave  
   12af7:	c3                   	ret    

00012af8 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12af8:	55                   	push   %ebp
   12af9:	89 e5                	mov    %esp,%ebp
   12afb:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12afe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b02:	75 19                	jne    12b1d <list_remove_last+0x25>
   12b04:	68 8a 38 01 00       	push   $0x1388a
   12b09:	68 fc 38 01 00       	push   $0x138fc
   12b0e:	6a 46                	push   $0x46
   12b10:	68 54 38 01 00       	push   $0x13854
   12b15:	e8 53 f5 ff ff       	call   1206d <pannic>
   12b1a:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12b1d:	83 ec 0c             	sub    $0xc,%esp
   12b20:	ff 75 08             	push   0x8(%ebp)
   12b23:	e8 a3 fd ff ff       	call   128cb <list_is_empty>
   12b28:	83 c4 10             	add    $0x10,%esp
   12b2b:	85 c0                	test   %eax,%eax
   12b2d:	74 07                	je     12b36 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12b2f:	b8 00 00 00 00       	mov    $0x0,%eax
   12b34:	eb 75                	jmp    12bab <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12b36:	8b 45 08             	mov    0x8(%ebp),%eax
   12b39:	8b 40 04             	mov    0x4(%eax),%eax
   12b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12b3f:	83 ec 0c             	sub    $0xc,%esp
   12b42:	ff 75 08             	push   0x8(%ebp)
   12b45:	e8 b6 fd ff ff       	call   12900 <list_get_size>
   12b4a:	83 c4 10             	add    $0x10,%esp
   12b4d:	83 f8 01             	cmp    $0x1,%eax
   12b50:	75 17                	jne    12b69 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12b52:	8b 45 08             	mov    0x8(%ebp),%eax
   12b55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5f:	8b 50 04             	mov    0x4(%eax),%edx
   12b62:	8b 45 08             	mov    0x8(%ebp),%eax
   12b65:	89 10                	mov    %edx,(%eax)
   12b67:	eb 1b                	jmp    12b84 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12b69:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6c:	8b 40 04             	mov    0x4(%eax),%eax
   12b6f:	8b 10                	mov    (%eax),%edx
   12b71:	8b 45 08             	mov    0x8(%ebp),%eax
   12b74:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12b77:	8b 45 08             	mov    0x8(%ebp),%eax
   12b7a:	8b 40 04             	mov    0x4(%eax),%eax
   12b7d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12b84:	8b 45 08             	mov    0x8(%ebp),%eax
   12b87:	8b 40 08             	mov    0x8(%eax),%eax
   12b8a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b8d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b90:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12b93:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b96:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ba0:	8b 50 04             	mov    0x4(%eax),%edx
   12ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ba6:	89 10                	mov    %edx,(%eax)
    return ret;
   12ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12bab:	c9                   	leave  
   12bac:	c3                   	ret    

00012bad <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12bad:	55                   	push   %ebp
   12bae:	89 e5                	mov    %esp,%ebp
   12bb0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12bb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12bb7:	74 06                	je     12bbf <list_remove+0x12>
   12bb9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bbd:	75 19                	jne    12bd8 <list_remove+0x2b>
   12bbf:	68 24 38 01 00       	push   $0x13824
   12bc4:	68 10 39 01 00       	push   $0x13910
   12bc9:	6a 5b                	push   $0x5b
   12bcb:	68 54 38 01 00       	push   $0x13854
   12bd0:	e8 98 f4 ff ff       	call   1206d <pannic>
   12bd5:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12bd8:	83 ec 0c             	sub    $0xc,%esp
   12bdb:	ff 75 08             	push   0x8(%ebp)
   12bde:	e8 e8 fc ff ff       	call   128cb <list_is_empty>
   12be3:	83 c4 10             	add    $0x10,%esp
   12be6:	85 c0                	test   %eax,%eax
   12be8:	74 0a                	je     12bf4 <list_remove+0x47>
        return (list_node_t*)0;
   12bea:	b8 00 00 00 00       	mov    $0x0,%eax
   12bef:	e9 80 00 00 00       	jmp    12c74 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf7:	8b 00                	mov    (%eax),%eax
   12bf9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12bfc:	75 0b                	jne    12c09 <list_remove+0x5c>
   12bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c01:	8b 50 04             	mov    0x4(%eax),%edx
   12c04:	8b 45 08             	mov    0x8(%ebp),%eax
   12c07:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12c09:	8b 45 08             	mov    0x8(%ebp),%eax
   12c0c:	8b 40 04             	mov    0x4(%eax),%eax
   12c0f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c12:	75 0b                	jne    12c1f <list_remove+0x72>
   12c14:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c17:	8b 10                	mov    (%eax),%edx
   12c19:	8b 45 08             	mov    0x8(%ebp),%eax
   12c1c:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12c1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c22:	8b 00                	mov    (%eax),%eax
   12c24:	85 c0                	test   %eax,%eax
   12c26:	74 0e                	je     12c36 <list_remove+0x89>
   12c28:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c2b:	8b 00                	mov    (%eax),%eax
   12c2d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c30:	8b 52 04             	mov    0x4(%edx),%edx
   12c33:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12c36:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c39:	8b 40 04             	mov    0x4(%eax),%eax
   12c3c:	85 c0                	test   %eax,%eax
   12c3e:	74 0d                	je     12c4d <list_remove+0xa0>
   12c40:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c43:	8b 40 04             	mov    0x4(%eax),%eax
   12c46:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c49:	8b 12                	mov    (%edx),%edx
   12c4b:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12c4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c57:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c5a:	8b 50 04             	mov    0x4(%eax),%edx
   12c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c60:	89 10                	mov    %edx,(%eax)
    list->size--;
   12c62:	8b 45 08             	mov    0x8(%ebp),%eax
   12c65:	8b 40 08             	mov    0x8(%eax),%eax
   12c68:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c6e:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12c71:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c74:	c9                   	leave  
   12c75:	c3                   	ret    

00012c76 <inb>:
static inline uint8_t inb(uint16_t port) {
   12c76:	55                   	push   %ebp
   12c77:	89 e5                	mov    %esp,%ebp
   12c79:	83 ec 14             	sub    $0x14,%esp
   12c7c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c7f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12c83:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12c87:	89 c2                	mov    %eax,%edx
   12c89:	ec                   	in     (%dx),%al
   12c8a:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12c8d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12c91:	c9                   	leave  
   12c92:	c3                   	ret    

00012c93 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12c93:	55                   	push   %ebp
   12c94:	89 e5                	mov    %esp,%ebp
   12c96:	83 ec 08             	sub    $0x8,%esp
   12c99:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9c:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c9f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12ca3:	89 d0                	mov    %edx,%eax
   12ca5:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12ca8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12cac:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12cb0:	ee                   	out    %al,(%dx)
}
   12cb1:	90                   	nop
   12cb2:	c9                   	leave  
   12cb3:	c3                   	ret    

00012cb4 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12cb4:	55                   	push   %ebp
   12cb5:	89 e5                	mov    %esp,%ebp
   12cb7:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12cba:	6a 00                	push   $0x0
   12cbc:	68 f9 03 00 00       	push   $0x3f9
   12cc1:	e8 cd ff ff ff       	call   12c93 <outb>
   12cc6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12cc9:	68 80 00 00 00       	push   $0x80
   12cce:	68 fb 03 00 00       	push   $0x3fb
   12cd3:	e8 bb ff ff ff       	call   12c93 <outb>
   12cd8:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12cdb:	6a 03                	push   $0x3
   12cdd:	68 f8 03 00 00       	push   $0x3f8
   12ce2:	e8 ac ff ff ff       	call   12c93 <outb>
   12ce7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12cea:	6a 00                	push   $0x0
   12cec:	68 f9 03 00 00       	push   $0x3f9
   12cf1:	e8 9d ff ff ff       	call   12c93 <outb>
   12cf6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12cf9:	6a 03                	push   $0x3
   12cfb:	68 fb 03 00 00       	push   $0x3fb
   12d00:	e8 8e ff ff ff       	call   12c93 <outb>
   12d05:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12d08:	68 c7 00 00 00       	push   $0xc7
   12d0d:	68 fa 03 00 00       	push   $0x3fa
   12d12:	e8 7c ff ff ff       	call   12c93 <outb>
   12d17:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   12d1a:	6a 0f                	push   $0xf
   12d1c:	68 fc 03 00 00       	push   $0x3fc
   12d21:	e8 6d ff ff ff       	call   12c93 <outb>
   12d26:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   12d29:	83 ec 0c             	sub    $0xc,%esp
   12d2c:	68 90 e6 02 00       	push   $0x2e690
   12d31:	e8 22 ec ff ff       	call   11958 <mutex_init>
   12d36:	83 c4 10             	add    $0x10,%esp
}
   12d39:	90                   	nop
   12d3a:	c9                   	leave  
   12d3b:	c3                   	ret    

00012d3c <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   12d3c:	55                   	push   %ebp
   12d3d:	89 e5                	mov    %esp,%ebp
   12d3f:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12d45:	83 ec 04             	sub    $0x4,%esp
   12d48:	68 80 00 00 00       	push   $0x80
   12d4d:	6a 00                	push   $0x0
   12d4f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d55:	50                   	push   %eax
   12d56:	e8 14 f8 ff ff       	call   1256f <kernel_memset>
   12d5b:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12d5e:	8d 45 0c             	lea    0xc(%ebp),%eax
   12d61:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12d67:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12d6d:	83 ec 04             	sub    $0x4,%esp
   12d70:	50                   	push   %eax
   12d71:	ff 75 08             	push   0x8(%ebp)
   12d74:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d7a:	50                   	push   %eax
   12d7b:	e8 d8 f8 ff ff       	call   12658 <kernel_vsprintf>
   12d80:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12d83:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d89:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12d8c:	83 ec 0c             	sub    $0xc,%esp
   12d8f:	68 90 e6 02 00       	push   $0x2e690
   12d94:	e8 0c ec ff ff       	call   119a5 <mutex_lock>
   12d99:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12d9c:	eb 57                	jmp    12df5 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12d9e:	90                   	nop
   12d9f:	83 ec 0c             	sub    $0xc,%esp
   12da2:	68 fd 03 00 00       	push   $0x3fd
   12da7:	e8 ca fe ff ff       	call   12c76 <inb>
   12dac:	83 c4 10             	add    $0x10,%esp
   12daf:	0f b6 c0             	movzbl %al,%eax
   12db2:	83 e0 40             	and    $0x40,%eax
   12db5:	85 c0                	test   %eax,%eax
   12db7:	74 e6                	je     12d9f <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12db9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12dbc:	0f b6 00             	movzbl (%eax),%eax
   12dbf:	3c 0a                	cmp    $0xa,%al
   12dc1:	75 12                	jne    12dd5 <log_printf+0x99>
   12dc3:	83 ec 08             	sub    $0x8,%esp
   12dc6:	6a 0d                	push   $0xd
   12dc8:	68 f8 03 00 00       	push   $0x3f8
   12dcd:	e8 c1 fe ff ff       	call   12c93 <outb>
   12dd2:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12dd8:	8d 50 01             	lea    0x1(%eax),%edx
   12ddb:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12dde:	0f b6 00             	movzbl (%eax),%eax
   12de1:	0f b6 c0             	movzbl %al,%eax
   12de4:	83 ec 08             	sub    $0x8,%esp
   12de7:	50                   	push   %eax
   12de8:	68 f8 03 00 00       	push   $0x3f8
   12ded:	e8 a1 fe ff ff       	call   12c93 <outb>
   12df2:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12df8:	0f b6 00             	movzbl (%eax),%eax
   12dfb:	84 c0                	test   %al,%al
   12dfd:	75 9f                	jne    12d9e <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12dff:	83 ec 08             	sub    $0x8,%esp
   12e02:	6a 0d                	push   $0xd
   12e04:	68 f8 03 00 00       	push   $0x3f8
   12e09:	e8 85 fe ff ff       	call   12c93 <outb>
   12e0e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12e11:	83 ec 08             	sub    $0x8,%esp
   12e14:	6a 0a                	push   $0xa
   12e16:	68 f8 03 00 00       	push   $0x3f8
   12e1b:	e8 73 fe ff ff       	call   12c93 <outb>
   12e20:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   12e23:	83 ec 0c             	sub    $0xc,%esp
   12e26:	68 90 e6 02 00       	push   $0x2e690
   12e2b:	e8 06 ec ff ff       	call   11a36 <mutex_unlock>
   12e30:	83 c4 10             	add    $0x10,%esp
   12e33:	90                   	nop
   12e34:	c9                   	leave  
   12e35:	c3                   	ret    
