
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00007da8 memsz 0x00007da8 flags r-x
    LOAD off    0x00009000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000090 memsz 0x000543d0 flags rw-
    LOAD off    0x0000a000 vaddr 0x80000000 paddr 0x0006d000 align 2**12
         filesz 0x00000384 memsz 0x00000384 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000682a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001568  00016840  00016840  00007840  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000090  00018000  00018000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000533d0  00019000  00019000  00009090  2**12
                  ALLOC
  4 .first_task   00000384  80000000  0006d000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000038db  00000000  00000000  0000a384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000a62  00000000  00000000  0000dc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000a66f  00000000  00000000  0000e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002ccf  00000000  00000000  00018d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000340  00000000  00000000  0001ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001ed8  00000000  00000000  0001bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000087  00000000  00000000  0001dc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002d  00000000  00000000  0001dc9f  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000023f4  00000000  00000000  0001dccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e4 l     F .text	0000000d down2
000102f1 l     F .text	00000017 up2
00010308 l     F .text	0000000c write_cr3
00010314 l     F .text	0000000b pde_index
0001031f l     F .text	00000010 pte_index
0001032f l     F .text	00000027 pde_to_pt_addr
00010356 l     F .text	00000027 pte_to_pg_addr
0001037d l     F .text	0000000f get_pte_privilege
0001038c l     F .text	00000011 mmu_set_page_dir
00019000 l     O .bss	00007e88 paddr_alloc
00021000 l     O .bss	00001000 kernel_page_dir
0001039d l     F .text	00000025 page_index
000103c2 l     F .text	00000056 page_ref_add
00010418 l     F .text	00000068 page_ref_sub
00010480 l     F .text	0000004e get_page_ref
000104ce l     F .text	00000051 clear_page_ref
0001051f l     F .text	00000087 addr_alloc_init
000105a6 l     F .text	00000067 addr_alloc_page
0001060d l     F .text	0000009c addr_free_page
000106a9 l     F .text	00000066 show_mem_info
0001070f l     F .text	00000037 total_mem_size
000169dc l     O .rodata	00000011 __func__.4
00018000 l     O .data	00000050 kernal_map.3
000169f0 l     O .rodata	0000000c __func__.2
00010e2c l     F .text	00000010 curr_page_dir
000169fc l     O .rodata	00000011 __func__.1
00016a10 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
000110f1 l     F .text	0000003d list_node_init
00016bd8 l     O .rodata	0000000f __func__.11
0001112e l     F .text	0000002d list_node_next
00016c38 l     O .rodata	0000000f __func__.5
0001115b l     F .text	00000047 list_init
00016be8 l     O .rodata	0000000a __func__.10
000111a2 l     F .text	00000035 list_is_empty
00016c48 l     O .rodata	0000000e __func__.4
000111d7 l     F .text	0000002d list_get_size
00016c78 l     O .rodata	0000000e __func__.1
00011204 l     F .text	0000002c list_get_first
00016c28 l     O .rodata	0000000f __func__.6
00011230 l     F .text	00000007 hlt
00011237 l     F .text	0000000c write_cr3
00011243 l     F .text	0000001a far_jump
0001125d l     F .text	00000017 write_tr
00011274 l     F .text	00000011 mmu_set_page_dir
00011285 l     F .text	00000017 up2
00022000 l     O .bss	000005c0 task_manager
000225c0 l     O .bss	00016400 task_table
000389c0 l     O .bss	00000014 task_table_lock
00011347 l     F .text	0000001f switch_to_tss
00011381 l     F .text	00000175 tss_init
00016bcc l     O .rodata	0000000a __func__.12
00011c20 l     F .text	00000033 free_task
000389e0 l     O .bss	00000200 empty_task_stack
000116eb l     F .text	0000000a empty_task
00016bf4 l     O .rodata	00000010 __func__.9
00016c04 l     O .rodata	0000000f __func__.8
00016c14 l     O .rodata	00000011 __func__.7
00016c58 l     O .rodata	0000000f __func__.3
00016c68 l     O .rodata	00000010 __func__.2
00011bb8 l     F .text	00000068 alloc_task
00011e9c l     F .text	00000114 load_phdr
00011fb0 l     F .text	00000213 load_elf_file
000121c3 l     F .text	000000f1 copy_args
00016c88 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012637 l     F .text	00000028 lgdt
00038be0 l     O .bss	00010000 gdt_table
00048be0 l     O .bss	00002000 is_alloc
0004abe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
0001286d l     F .text	00000007 cli
00012874 l     F .text	00000007 sti
0001287b l     F .text	00000007 hlt
00012882 l     F .text	0000001d inb
0001289f l     F .text	00000021 outb
000128c0 l     F .text	00000028 lidt
000128e8 l     F .text	00000011 read_cr2
000128f9 l     F .text	00000010 read_eflags
00012909 l     F .text	0000000b write_eflags
0004ac00 l     O .bss	00000800 idt_table
00012914 l     F .text	0000010f print_exception_fram
00012a23 l     F .text	0000003e do_default_handler
00012e39 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00017280 l     O .rodata	000000ec sys_table
00000000 l    df *ABS*	00000000 console.c
000132ce l     F .text	0000001d inb
000132eb l     F .text	00000021 outb
0004b400 l     O .bss	000002a0 console_table
0004b6a0 l     O .bss	00000004 curr_console_index
0001330c l     F .text	00000074 read_cursor_pos
00013380 l     F .text	000000a6 update_cursor_pos
00013426 l     F .text	00000096 erase_rows
000134bc l     F .text	00000094 scroll_up
00013550 l     F .text	00000010 move_to_col0
00013560 l     F .text	00000038 move_to_next_line
00013598 l     F .text	00000077 move_forward
0001360f l     F .text	00000095 show_char
000136a4 l     F .text	00000078 move_backword
0001371c l     F .text	0000003a erase_backword
00013756 l     F .text	00000087 clear_display
000137dd l     F .text	00000051 print_table
00013927 l     F .text	000000b2 write_normal
000139d9 l     F .text	0000001e save_cursor
000139f7 l     F .text	0000001e restore_cursor
00013a15 l     F .text	00000029 clear_esc_param
00013a3e l     F .text	0000007c write_esc
00013aba l     F .text	0000009a set_font_style
00017400 l     O .rodata	00000020 color_table.0
00013b54 l     F .text	0000004f erase_in_display
00013ba3 l     F .text	00000022 move_cursor
00013bc5 l     F .text	00000039 move_left
00013bfe l     F .text	00000045 move_right
00013c43 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00018050 l     O .data	00000008 dev_des_table
0004b6c0 l     O .bss	00000a00 dev_table
00013f03 l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 keyboard.c
00014208 l     F .text	0000001d inb
00017420 l     O .rodata	00000200 map_table
0004c0c0 l     O .bss	00000004 kbd_state
00014225 l     F .text	0000001a is_make_code
0001423f l     F .text	00000015 get_key
00014254 l     F .text	00000043 do_fx_key
00014297 l     F .text	000001e0 do_normal_key
00014477 l     F .text	0000008e do_e0_key
0004c0c4 l     O .bss	00000001 is_inited.1
0004c0c8 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
0001461d l     F .text	00000021 outb
0004c0cc l     O .bss	00000004 sys_tick
00014666 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004c0e0 l     O .bss	000022a0 tty_table
0004e380 l     O .bss	00000004 curr_tty_index
000146e0 l     F .text	0000004f get_tty
0001472f l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 file.c
0004e3a0 l     O .bss	0001c000 file_table
0006a3a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00014d15 l     F .text	0000001d inb
00014d32 l     F .text	00000021 outb
00014d53 l     F .text	0000001f inw
0006a3b4 l     O .bss	00000004 temp_pos
00014d72 l     F .text	0000013d read_disk
00014eaf l     F .text	00000021 is_path_valid
00000000 l    df *ABS*	00000000 init.c
00017860 l     O .rodata	0000000c __func__.1
0001786c l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
000152e1 l     F .text	00000047 list_init
0001792c l     O .rodata	0000000a __func__.1
00015328 l     F .text	00000035 list_is_empty
00017938 l     O .rodata	0000000e __func__.0
00017920 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000154f3 l     F .text	00000047 list_init
000179ec l     O .rodata	0000000a __func__.1
0001553a l     F .text	00000035 list_is_empty
000179f8 l     O .rodata	0000000e __func__.0
000179e0 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
000156c7 l     F .text	00000047 list_init
00017b0c l     O .rodata	0000000a __func__.3
0001570e l     F .text	0000002d list_get_size
00017b18 l     O .rodata	0000000e __func__.2
0001573b l     F .text	0000002c list_get_first
00017b38 l     O .rodata	0000000f __func__.0
00015767 l     F .text	0000002d list_get_last
00017b28 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00015a6f l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00017c0c l     O .rodata	0000000c __func__.3
00017c18 l     O .rodata	0000000f __func__.2
00017c28 l     O .rodata	0000000f __func__.1
00017c38 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001808c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000163b2 l     F .text	00000035 list_is_empty
00017d40 l     O .rodata	0000000e __func__.5
000163e7 l     F .text	0000002d list_get_size
00017d78 l     O .rodata	0000000e __func__.2
00017d2c l     O .rodata	00000012 __func__.6
00017d50 l     O .rodata	00000011 __func__.4
00017d64 l     O .rodata	00000012 __func__.3
00017d88 l     O .rodata	00000011 __func__.1
00017d9c l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0006a3b8 l     O .bss	00000014 mutex
0006a3cc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
00015b56 g     F .text	00000078 bitmap_get_bit
00015f40 g     F .text	0000004f kernel_memcpy
00015125 g     F .text	0000000a sys_close
00013081 g     F .text	00000098 idt_enable
00011994 g     F .text	0000000a task_current
800001cd g     F .first_task	0000001b yield
0001649f g     F .text	0000008f list_insert_last
0001129c g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fcb g     F .text	00000126 sys_sbrk
00011e3b g     F .text	00000061 sys_yield
00012b95 g     F .text	0000001c do_handler_segment_not_present
000118e2 g     F .text	00000042 task_set_ready
00015cd6 g     F .text	00000021 bitmap_is_set
000131b8 g     F .text	0000000b idt_enable_global
00015f8f g     F .text	00000041 kernel_memset
000140ed g     F .text	0000004c dev_write
00015101 g     F .text	00000024 sys_lseek
00014505 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001323f g     F .text	0000008f do_handler_syscall
0001633f g     F .text	0000002d strings_count
0001675d g     F .text	0000002f log_init
00011cc0 g     F .text	0000017b sys_fork
000152a9 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00013225 g     F .text	0000001a sys_print_msg
00015df2 g     F .text	00000047 kernel_strcpy
000131ad g     F .text	0000000b idt_disable_global
00018000 g       .data	00000000 s_data
80000010 g     F .first_task	0000009c first_main
00012df6 g     F .text	00000043 idt_install
800001a0 g     F .first_task	0000002d execve
80000142 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012aed g     F .text	0000001c do_handler_overflow
00012d6a g     F .text	0000001c do_handler_alignment_check
00015035 g     F .text	0000007f sys_read
00013e33 g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012bcd g     F .text	000000b1 do_handler_general_protection
00012dda g     F .text	0000001c do_handler_control_exception
0001569e g     F .text	00000029 sem_count
00012a7d g     F .text	0000001c do_handler_divider
00015bce g     F .text	00000108 bitmap_set_bit
00012b5d g     F .text	0000001c do_handler_double_fault
00012c7e g     F .text	000000d0 do_handler_page_fault
800002b7 g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
000131c3 g     F .text	00000039 pic_send_eoi
000165df g     F .text	000000b5 list_remove_last
000118d8 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000155b1 g     F .text	0000006b sem_wait
00010e0a g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00015139 g     F .text	0000000a sys_fstat
000140a1 g     F .text	0000004c dev_read
0001271e g     F .text	000000b3 gdt_init
00012dbe g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
000102b5 g       .text	00000000 simple_switch
8000028a g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012a99 g     F .text	0000001c do_handler_debug
0006a3d0 g     O .bss	00002000 stack
00011c53 g     F .text	00000060 sys_sleep
000151df g     F .text	0000000e fs_init
00010e5c g     F .text	00000099 memory_free_page
00015794 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0006d000 g       *ABS*	00000000 s_first_task
0001131f g     F .text	00000028 task_remove_fd
00014b80 g     F .text	0000000a tty_control
0001382e g     F .text	000000f9 console_init
00014a64 g     F .text	0000011c tty_read
0001165b g     F .text	00000090 task_uninit
00010d52 g     F .text	000000b8 memory_alloc_for_page_dir
000147fe g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00014b90 g     F .text	00000066 tty_in
00012ecc g     F .text	000001b5 idt_init
0001561c g     F .text	00000082 sem_notify
00010f48 g     F .text	00000083 memory_copy_uvm_data
00014139 g     F .text	0000004c dev_control
00014553 g     F .text	000000ca do_handler_kbd
00012846 g     F .text	00000027 gdt_free
00012b25 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00012d4e g     F .text	0000001c do_handler_fpu_error
000117d2 g     F .text	00000106 task_first_init
00012d86 g     F .text	0000001c do_handler_machine_check
8000023c g     F .first_task	0000002d write
00014ed0 g     F .text	00000165 sys_open
800002d8 g     F .first_task	00000027 fstat
0001512f g     F .text	0000000a sys_isatty
00016414 g     F .text	0000008b list_insert_first
00013f57 g     F .text	0000014a dev_open
00011b6d g     F .text	0000004b task_set_wakeup
00011966 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
800000cc g     F .first_task	0000004c sys_call
00010960 g     F .text	00000085 memory_creat_uvm
00015e39 g     F .text	00000051 kernel_strncpy
000150b4 g     F .text	0000004d sys_write
80000363 g     F .first_task	00000021 wait
0006d384 g       *ABS*	00000000 mem_free_start
000151ed g     F .text	00000058 kernel_init
0001556f g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
00016078 g     F .text	0000019d kernel_vsprintf
0001636c g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00014185 g     F .text	00000083 dev_close
0006d000 g       .first_task	00000000 e_data
8000020f g     F .first_task	0000002d read
000153aa g     F .text	00000091 mutex_lock
000112cc g     F .text	00000053 task_alloc_fd
00010209 g       .text	00000000 exception_handler_machine_check
00014974 g     F .text	000000f0 tty_write
00012b79 g     F .text	0000001c do_handler_invalid_tss
00014766 g     F .text	00000098 tty_fifo_put
00013119 g     F .text	00000094 idt_disable
0006d384 g       *ABS*	00000000 e_first_task
00011b11 g     F .text	0000005c task_set_sleep
00015143 g     F .text	0000009c sys_dup
000107f6 g     F .text	000000b6 memory_creat_map
00012ab5 g     F .text	0000001c do_handler_nmi
0001488b g     F .text	000000e9 tty_open
80000185 g     F .first_task	0000001b fork
0001535d g     F .text	0000004d mutex_init
800002ff g     F .first_task	00000021 sbrk
00010226 g       .text	00000000 exception_handler_smd_exception
00010b72 g     F .text	000000e7 memory_destroy_uvm
00015aac g     F .text	00000016 bitmap_byte_count
00012b41 g     F .text	0000001c do_handler_device_unavailable
000131fc g     F .text	00000018 idt_enter_protection
000108ac g     F .text	000000b4 create_kernal_table
00011a06 g     F .text	0000010b task_slice_end
000109e5 g     F .text	0000018d memory_copy_uvm
00014b8a g     F .text	00000006 tty_close
00015245 g     F .text	00000064 move_to_first_task
00013d47 g     F .text	000000e6 console_write
80000320 g     F .first_task	00000021 dup
00015fd0 g     F .text	00000084 kernel_memcmp
00012da2 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012a61 g     F .text	0000001c do_handler_unknown
00010e3c g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011366 g     F .text	0000001b task_switch_from_to
0001543b g     F .text	000000b8 mutex_unlock
00014c1f g     F .text	00000030 file_table_init
00014cd3 g     F .text	00000042 file_free
0001199e g     F .text	00000068 task_switch
8000015d g     F .first_task	00000028 print_msg
00015f0b g     F .text	00000035 kernel_strlen
00011924 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
0001265f g     F .text	000000bf segment_desc_set
00012b09 g     F .text	0000001c do_handler_bound_range
000102ca g       .text	00000000 exception_handler_syscall
0001652e g     F .text	000000b1 list_remove_first
00017da8 g       .rodata	00000000 e_text
00015e8a g     F .text	00000081 kernel_strncmp
00015ac2 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00015cf7 g     F .text	000000fb bitmap_alloc_nbits
00014c4f g     F .text	00000084 file_alloc
000116f5 g     F .text	000000dd task_manager_init
000114f6 g     F .text	00000036 task_start
00010c59 g     F .text	000000f9 memory_init
000122b4 g     F .text	000001af sys_execve
00012518 g     F .text	000000d8 sys_wait
00012463 g     F .text	000000b5 sys_exit
00015a76 g     F .text	00000036 pannic
00014bf6 g     F .text	00000029 tty_select
00013e2d g     F .text	00000006 console_close
00010ef5 g     F .text	00000053 memory_get_paddr
00012bb1 g     F .text	0000001c do_handler_stack_segment_fault
00012ad1 g     F .text	0000001c do_handler_breakpoint
80000341 g     F .first_task	00000022 _exit
0001678c g     F .text	0000009e log_printf
0001152c g     F .text	0000012f task_init
800001e8 g     F .first_task	00000027 open
00016054 g     F .text	00000024 kernel_sprintf
00011cb3 g     F .text	0000000d sys_getpid
000127d1 g     F .text	00000075 gdt_alloc_desc
00016215 g     F .text	0000012a kernel_itoa
00016694 g     F .text	000000c9 list_remove
000125f0 g     F .text	00000047 gate_desc_set
80000118 g     F .first_task	0000002a msleep
00013214 g     F .text	00000011 idt_leave_protection
80000269 g     F .first_task	00000021 close
00010746 g     F .text	000000b0 find_pte
0001463e g     F .text	00000028 do_handler_time
000146c8 g     F .text	00000018 time_init
00018060 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 e2 51 00 00       	call   151ed <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc d0 c3 06 00       	mov    $0x6c3d0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 7f 52 00 00       	jmp    152a9 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 26 2a 00 00       	call   12a61 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 25 2a 00 00       	call   12a7d <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 24 2a 00 00       	call   12a99 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 23 2a 00 00       	call   12ab5 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 22 2a 00 00       	call   12ad1 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 21 2a 00 00       	call   12aed <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 20 2a 00 00       	call   12b09 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 1f 2a 00 00       	call   12b25 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 1e 2a 00 00       	call   12b41 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 1f 2a 00 00       	call   12b5d <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 20 2a 00 00       	call   12b79 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 21 2a 00 00       	call   12b95 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 22 2a 00 00       	call   12bb1 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 23 2a 00 00       	call   12bcd <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 b9 2a 00 00       	call   12c7e <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 6c 2b 00 00       	call   12d4e <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 6d 2b 00 00       	call   12d6a <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 6c 2b 00 00       	call   12d86 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 6b 2b 00 00       	call   12da2 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 6a 2b 00 00       	call   12dbe <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 6b 2b 00 00       	call   12dda <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 b2 43 00 00       	call   1463e <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                 0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 aa 42 00 00       	call   14553 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102b5:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102b9:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102bd:	55                   	push   %ebp
    push %ebx
   102be:	53                   	push   %ebx
    push %esi
   102bf:	56                   	push   %esi
    push %edi
   102c0:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102c1:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102c3:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102c5:	5f                   	pop    %edi
    pop %esi
   102c6:	5e                   	pop    %esi
    pop %ebx
   102c7:	5b                   	pop    %ebx
    pop %ebp
   102c8:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102c9:	c3                   	ret    

000102ca <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ca:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102cb:	1e                   	push   %ds
    push %es
   102cc:	06                   	push   %es
    push %fs
   102cd:	0f a0                	push   %fs
    push %gs
   102cf:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102d1:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102d2:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102d3:	e8 67 2f 00 00       	call   1323f <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102d8:	5c                   	pop    %esp
    popf
   102d9:	9d                   	popf   
    pop %gs
   102da:	0f a9                	pop    %gs
    pop %fs
   102dc:	0f a1                	pop    %fs
    pop %es
   102de:	07                   	pop    %es
    pop %ds
   102df:	1f                   	pop    %ds
    popa
   102e0:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102e1:	ca 14 00             	lret   $0x14

000102e4 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102e4:	55                   	push   %ebp
   102e5:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ea:	f7 d8                	neg    %eax
   102ec:	23 45 08             	and    0x8(%ebp),%eax
}
   102ef:	5d                   	pop    %ebp
   102f0:	c3                   	ret    

000102f1 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102f1:	55                   	push   %ebp
   102f2:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f4:	8b 55 08             	mov    0x8(%ebp),%edx
   102f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fa:	01 d0                	add    %edx,%eax
   102fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10302:	f7 d8                	neg    %eax
   10304:	21 d0                	and    %edx,%eax
}
   10306:	5d                   	pop    %ebp
   10307:	c3                   	ret    

00010308 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10308:	55                   	push   %ebp
   10309:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1030b:	8b 45 08             	mov    0x8(%ebp),%eax
   1030e:	0f 22 d8             	mov    %eax,%cr3
}
   10311:	90                   	nop
   10312:	5d                   	pop    %ebp
   10313:	c3                   	ret    

00010314 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10314:	55                   	push   %ebp
   10315:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	c1 e8 16             	shr    $0x16,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	c1 e8 0c             	shr    $0xc,%eax
   10328:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032d:	5d                   	pop    %ebp
   1032e:	c3                   	ret    

0001032f <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10339:	c0 ea 04             	shr    $0x4,%dl
   1033c:	0f b6 ca             	movzbl %dl,%ecx
   1033f:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10343:	c1 e2 04             	shl    $0x4,%edx
   10346:	09 ca                	or     %ecx,%edx
   10348:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1034c:	c1 e0 0c             	shl    $0xc,%eax
   1034f:	09 d0                	or     %edx,%eax
   10351:	c1 e0 0c             	shl    $0xc,%eax
}
   10354:	5d                   	pop    %ebp
   10355:	c3                   	ret    

00010356 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10356:	55                   	push   %ebp
   10357:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10360:	c0 ea 04             	shr    $0x4,%dl
   10363:	0f b6 ca             	movzbl %dl,%ecx
   10366:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1036a:	c1 e2 04             	shl    $0x4,%edx
   1036d:	09 ca                	or     %ecx,%edx
   1036f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10373:	c1 e0 0c             	shl    $0xc,%eax
   10376:	09 d0                	or     %edx,%eax
   10378:	c1 e0 0c             	shl    $0xc,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	8b 00                	mov    (%eax),%eax
   10385:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1038f:	ff 75 08             	push   0x8(%ebp)
   10392:	e8 71 ff ff ff       	call   10308 <write_cr3>
   10397:	83 c4 04             	add    $0x4,%esp
}
   1039a:	90                   	nop
   1039b:	c9                   	leave  
   1039c:	c3                   	ret    

0001039d <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   1039d:	55                   	push   %ebp
   1039e:	89 e5                	mov    %esp,%ebp
   103a0:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 50 1c             	mov    0x1c(%eax),%edx
   103a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103aa:	29 d0                	sub    %edx,%eax
   103ac:	89 c1                	mov    %eax,%ecx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	8b 58 24             	mov    0x24(%eax),%ebx
   103b4:	89 c8                	mov    %ecx,%eax
   103b6:	ba 00 00 00 00       	mov    $0x0,%edx
   103bb:	f7 f3                	div    %ebx
}
   103bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c0:	c9                   	leave  
   103c1:	c3                   	ret    

000103c2 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
   103c5:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103c8:	ff 75 0c             	push   0xc(%ebp)
   103cb:	ff 75 08             	push   0x8(%ebp)
   103ce:	e8 ca ff ff ff       	call   1039d <page_index>
   103d3:	83 c4 08             	add    $0x8,%esp
   103d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	83 ec 0c             	sub    $0xc,%esp
   103df:	50                   	push   %eax
   103e0:	e8 c5 4f 00 00       	call   153aa <mutex_lock>
   103e5:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103e8:	8b 55 08             	mov    0x8(%ebp),%edx
   103eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ee:	01 d0                	add    %edx,%eax
   103f0:	83 c0 28             	add    $0x28,%eax
   103f3:	0f b6 00             	movzbl (%eax),%eax
   103f6:	8d 50 01             	lea    0x1(%eax),%edx
   103f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ff:	01 c8                	add    %ecx,%eax
   10401:	83 c0 28             	add    $0x28,%eax
   10404:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 29 50 00 00       	call   1543b <mutex_unlock>
   10412:	83 c4 10             	add    $0x10,%esp
 }
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1041e:	ff 75 0c             	push   0xc(%ebp)
   10421:	ff 75 08             	push   0x8(%ebp)
   10424:	e8 74 ff ff ff       	call   1039d <page_index>
   10429:	83 c4 08             	add    $0x8,%esp
   1042c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	50                   	push   %eax
   10436:	e8 6f 4f 00 00       	call   153aa <mutex_lock>
   1043b:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1043e:	8b 55 08             	mov    0x8(%ebp),%edx
   10441:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10444:	01 d0                	add    %edx,%eax
   10446:	83 c0 28             	add    $0x28,%eax
   10449:	0f b6 00             	movzbl (%eax),%eax
   1044c:	84 c0                	test   %al,%al
   1044e:	74 1e                	je     1046e <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10450:	8b 55 08             	mov    0x8(%ebp),%edx
   10453:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10456:	01 d0                	add    %edx,%eax
   10458:	83 c0 28             	add    $0x28,%eax
   1045b:	0f b6 00             	movzbl (%eax),%eax
   1045e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10461:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10464:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10467:	01 c8                	add    %ecx,%eax
   10469:	83 c0 28             	add    $0x28,%eax
   1046c:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1046e:	8b 45 08             	mov    0x8(%ebp),%eax
   10471:	83 ec 0c             	sub    $0xc,%esp
   10474:	50                   	push   %eax
   10475:	e8 c1 4f 00 00       	call   1543b <mutex_unlock>
   1047a:	83 c4 10             	add    $0x10,%esp
 }
   1047d:	90                   	nop
   1047e:	c9                   	leave  
   1047f:	c3                   	ret    

00010480 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10480:	55                   	push   %ebp
   10481:	89 e5                	mov    %esp,%ebp
   10483:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10486:	ff 75 0c             	push   0xc(%ebp)
   10489:	ff 75 08             	push   0x8(%ebp)
   1048c:	e8 0c ff ff ff       	call   1039d <page_index>
   10491:	83 c4 08             	add    $0x8,%esp
   10494:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	83 ec 0c             	sub    $0xc,%esp
   1049d:	50                   	push   %eax
   1049e:	e8 07 4f 00 00       	call   153aa <mutex_lock>
   104a3:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104a6:	8b 55 08             	mov    0x8(%ebp),%edx
   104a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ac:	01 d0                	add    %edx,%eax
   104ae:	83 c0 28             	add    $0x28,%eax
   104b1:	0f b6 00             	movzbl (%eax),%eax
   104b4:	0f b6 c0             	movzbl %al,%eax
   104b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	50                   	push   %eax
   104c1:	e8 75 4f 00 00       	call   1543b <mutex_unlock>
   104c6:	83 c4 10             	add    $0x10,%esp

  return ref;
   104c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	83 ec 0c             	sub    $0xc,%esp
   104da:	50                   	push   %eax
   104db:	e8 ca 4e 00 00       	call   153aa <mutex_lock>
   104e0:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	8b 40 20             	mov    0x20(%eax),%eax
   104e9:	8b 55 08             	mov    0x8(%ebp),%edx
   104ec:	8b 4a 24             	mov    0x24(%edx),%ecx
   104ef:	ba 00 00 00 00       	mov    $0x0,%edx
   104f4:	f7 f1                	div    %ecx
   104f6:	89 c2                	mov    %eax,%edx
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	83 c0 28             	add    $0x28,%eax
   104fe:	83 ec 04             	sub    $0x4,%esp
   10501:	52                   	push   %edx
   10502:	6a 00                	push   $0x0
   10504:	50                   	push   %eax
   10505:	e8 85 5a 00 00       	call   15f8f <kernel_memset>
   1050a:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	50                   	push   %eax
   10514:	e8 22 4f 00 00       	call   1543b <mutex_unlock>
   10519:	83 c4 10             	add    $0x10,%esp
}
   1051c:	90                   	nop
   1051d:	c9                   	leave  
   1051e:	c3                   	ret    

0001051f <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1051f:	55                   	push   %ebp
   10520:	89 e5                	mov    %esp,%ebp
   10522:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10525:	8b 45 08             	mov    0x8(%ebp),%eax
   10528:	83 ec 0c             	sub    $0xc,%esp
   1052b:	50                   	push   %eax
   1052c:	e8 2c 4e 00 00       	call   1535d <mutex_init>
   10531:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	8b 55 10             	mov    0x10(%ebp),%edx
   1053a:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	8b 55 14             	mov    0x14(%ebp),%edx
   10543:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10546:	8b 45 08             	mov    0x8(%ebp),%eax
   10549:	8b 55 18             	mov    0x18(%ebp),%edx
   1054c:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 20             	mov    0x20(%eax),%eax
   10555:	8b 55 08             	mov    0x8(%ebp),%edx
   10558:	8b 4a 24             	mov    0x24(%edx),%ecx
   1055b:	ba 00 00 00 00       	mov    $0x0,%edx
   10560:	f7 f1                	div    %ecx
   10562:	89 c2                	mov    %eax,%edx
   10564:	8b 45 08             	mov    0x8(%ebp),%eax
   10567:	83 c0 14             	add    $0x14,%eax
   1056a:	6a 00                	push   $0x0
   1056c:	52                   	push   %edx
   1056d:	ff 75 0c             	push   0xc(%ebp)
   10570:	50                   	push   %eax
   10571:	e8 4c 55 00 00       	call   15ac2 <bitmap_init>
   10576:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10579:	8b 45 08             	mov    0x8(%ebp),%eax
   1057c:	8b 40 20             	mov    0x20(%eax),%eax
   1057f:	8b 55 08             	mov    0x8(%ebp),%edx
   10582:	8b 4a 24             	mov    0x24(%edx),%ecx
   10585:	ba 00 00 00 00       	mov    $0x0,%edx
   1058a:	f7 f1                	div    %ecx
   1058c:	89 c2                	mov    %eax,%edx
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 28             	add    $0x28,%eax
   10594:	83 ec 04             	sub    $0x4,%esp
   10597:	52                   	push   %edx
   10598:	6a 00                	push   $0x0
   1059a:	50                   	push   %eax
   1059b:	e8 ef 59 00 00       	call   15f8f <kernel_memset>
   105a0:	83 c4 10             	add    $0x10,%esp
}
   105a3:	90                   	nop
   105a4:	c9                   	leave  
   105a5:	c3                   	ret    

000105a6 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105a6:	55                   	push   %ebp
   105a7:	89 e5                	mov    %esp,%ebp
   105a9:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105b3:	8b 45 08             	mov    0x8(%ebp),%eax
   105b6:	83 ec 0c             	sub    $0xc,%esp
   105b9:	50                   	push   %eax
   105ba:	e8 eb 4d 00 00       	call   153aa <mutex_lock>
   105bf:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	83 c0 14             	add    $0x14,%eax
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	ff 75 0c             	push   0xc(%ebp)
   105ce:	6a 00                	push   $0x0
   105d0:	50                   	push   %eax
   105d1:	e8 21 57 00 00       	call   15cf7 <bitmap_alloc_nbits>
   105d6:	83 c4 10             	add    $0x10,%esp
   105d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105e0:	78 17                	js     105f9 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105e2:	8b 45 08             	mov    0x8(%ebp),%eax
   105e5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	8b 50 24             	mov    0x24(%eax),%edx
   105ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f1:	0f af c2             	imul   %edx,%eax
   105f4:	01 c8                	add    %ecx,%eax
   105f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	83 ec 0c             	sub    $0xc,%esp
   105ff:	50                   	push   %eax
   10600:	e8 36 4e 00 00       	call   1543b <mutex_unlock>
   10605:	83 c4 10             	add    $0x10,%esp

  return addr;
   10608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1060b:	c9                   	leave  
   1060c:	c3                   	ret    

0001060d <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
   10610:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10613:	8b 45 08             	mov    0x8(%ebp),%eax
   10616:	83 ec 0c             	sub    $0xc,%esp
   10619:	50                   	push   %eax
   1061a:	e8 8b 4d 00 00       	call   153aa <mutex_lock>
   1061f:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10622:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10629:	eb 64                	jmp    1068f <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1062b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062e:	c1 e0 0c             	shl    $0xc,%eax
   10631:	89 c2                	mov    %eax,%edx
   10633:	8b 45 0c             	mov    0xc(%ebp),%eax
   10636:	01 d0                	add    %edx,%eax
   10638:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1063b:	83 ec 08             	sub    $0x8,%esp
   1063e:	ff 75 f0             	push   -0x10(%ebp)
   10641:	ff 75 08             	push   0x8(%ebp)
   10644:	e8 cf fd ff ff       	call   10418 <page_ref_sub>
   10649:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1064c:	83 ec 08             	sub    $0x8,%esp
   1064f:	ff 75 f0             	push   -0x10(%ebp)
   10652:	ff 75 08             	push   0x8(%ebp)
   10655:	e8 26 fe ff ff       	call   10480 <get_page_ref>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10660:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10664:	75 25                	jne    1068b <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10666:	83 ec 08             	sub    $0x8,%esp
   10669:	ff 75 f0             	push   -0x10(%ebp)
   1066c:	ff 75 08             	push   0x8(%ebp)
   1066f:	e8 29 fd ff ff       	call   1039d <page_index>
   10674:	83 c4 10             	add    $0x10,%esp
   10677:	8b 55 08             	mov    0x8(%ebp),%edx
   1067a:	83 c2 14             	add    $0x14,%edx
   1067d:	6a 00                	push   $0x0
   1067f:	6a 01                	push   $0x1
   10681:	50                   	push   %eax
   10682:	52                   	push   %edx
   10683:	e8 46 55 00 00       	call   15bce <bitmap_set_bit>
   10688:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1068b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1068f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10692:	3b 45 10             	cmp    0x10(%ebp),%eax
   10695:	7c 94                	jl     1062b <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   10697:	8b 45 08             	mov    0x8(%ebp),%eax
   1069a:	83 ec 0c             	sub    $0xc,%esp
   1069d:	50                   	push   %eax
   1069e:	e8 98 4d 00 00       	call   1543b <mutex_unlock>
   106a3:	83 c4 10             	add    $0x10,%esp
}
   106a6:	90                   	nop
   106a7:	c9                   	leave  
   106a8:	c3                   	ret    

000106a9 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106a9:	55                   	push   %ebp
   106aa:	89 e5                	mov    %esp,%ebp
   106ac:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106af:	83 ec 0c             	sub    $0xc,%esp
   106b2:	68 40 68 01 00       	push   $0x16840
   106b7:	e8 d0 60 00 00       	call   1678c <log_printf>
   106bc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106c6:	eb 29                	jmp    106f1 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106ce:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106d2:	8b 45 08             	mov    0x8(%ebp),%eax
   106d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106d8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106db:	52                   	push   %edx
   106dc:	50                   	push   %eax
   106dd:	ff 75 f4             	push   -0xc(%ebp)
   106e0:	68 4d 68 01 00       	push   $0x1684d
   106e5:	e8 a2 60 00 00       	call   1678c <log_printf>
   106ea:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f1:	8b 45 08             	mov    0x8(%ebp),%eax
   106f4:	8b 40 50             	mov    0x50(%eax),%eax
   106f7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106fa:	7c cc                	jl     106c8 <show_mem_info+0x1f>
    }

    log_printf("\n");
   106fc:	83 ec 0c             	sub    $0xc,%esp
   106ff:	68 60 68 01 00       	push   $0x16860
   10704:	e8 83 60 00 00       	call   1678c <log_printf>
   10709:	83 c4 10             	add    $0x10,%esp
}
   1070c:	90                   	nop
   1070d:	c9                   	leave  
   1070e:	c3                   	ret    

0001070f <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1070f:	55                   	push   %ebp
   10710:	89 e5                	mov    %esp,%ebp
   10712:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10715:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1071c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10723:	eb 11                	jmp    10736 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10725:	8b 45 08             	mov    0x8(%ebp),%eax
   10728:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1072b:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1072f:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10732:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 40 50             	mov    0x50(%eax),%eax
   1073c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1073f:	7c e4                	jl     10725 <total_mem_size+0x16>
    }

    return mem_size;
   10741:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10744:	c9                   	leave  
   10745:	c3                   	ret    

00010746 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10746:	55                   	push   %ebp
   10747:	89 e5                	mov    %esp,%ebp
   10749:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1074c:	ff 75 0c             	push   0xc(%ebp)
   1074f:	e8 c0 fb ff ff       	call   10314 <pde_index>
   10754:	83 c4 04             	add    $0x4,%esp
   10757:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1075e:	8b 45 08             	mov    0x8(%ebp),%eax
   10761:	01 d0                	add    %edx,%eax
   10763:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	0f b6 00             	movzbl (%eax),%eax
   1076c:	83 e0 01             	and    $0x1,%eax
   1076f:	84 c0                	test   %al,%al
   10771:	74 10                	je     10783 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10773:	ff 75 f0             	push   -0x10(%ebp)
   10776:	e8 b4 fb ff ff       	call   1032f <pde_to_pt_addr>
   1077b:	83 c4 04             	add    $0x4,%esp
   1077e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10781:	eb 57                	jmp    107da <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10783:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10787:	75 07                	jne    10790 <find_pte+0x4a>
      return (pte_t*)0;
   10789:	b8 00 00 00 00       	mov    $0x0,%eax
   1078e:	eb 64                	jmp    107f4 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	6a 01                	push   $0x1
   10795:	68 00 90 01 00       	push   $0x19000
   1079a:	e8 07 fe ff ff       	call   105a6 <addr_alloc_page>
   1079f:	83 c4 10             	add    $0x10,%esp
   107a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107a9:	75 07                	jne    107b2 <find_pte+0x6c>
      return (pte_t*)0;
   107ab:	b8 00 00 00 00       	mov    $0x0,%eax
   107b0:	eb 42                	jmp    107f4 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107b8:	83 ec 04             	sub    $0x4,%esp
   107bb:	68 00 10 00 00       	push   $0x1000
   107c0:	6a 00                	push   $0x0
   107c2:	ff 75 f4             	push   -0xc(%ebp)
   107c5:	e8 c5 57 00 00       	call   15f8f <kernel_memset>
   107ca:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d0:	83 c8 07             	or     $0x7,%eax
   107d3:	89 c2                	mov    %eax,%edx
   107d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d8:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107da:	83 ec 0c             	sub    $0xc,%esp
   107dd:	ff 75 0c             	push   0xc(%ebp)
   107e0:	e8 3a fb ff ff       	call   1031f <pte_index>
   107e5:	83 c4 10             	add    $0x10,%esp
   107e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	01 d0                	add    %edx,%eax

}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10803:	e9 91 00 00 00       	jmp    10899 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10808:	83 ec 04             	sub    $0x4,%esp
   1080b:	6a 01                	push   $0x1
   1080d:	ff 75 0c             	push   0xc(%ebp)
   10810:	ff 75 08             	push   0x8(%ebp)
   10813:	e8 2e ff ff ff       	call   10746 <find_pte>
   10818:	83 c4 10             	add    $0x10,%esp
   1081b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1081e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10822:	75 17                	jne    1083b <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10824:	83 ec 0c             	sub    $0xc,%esp
   10827:	68 62 68 01 00       	push   $0x16862
   1082c:	e8 5b 5f 00 00       	call   1678c <log_printf>
   10831:	83 c4 10             	add    $0x10,%esp
      return -1;
   10834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10839:	eb 6f                	jmp    108aa <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083e:	0f b6 00             	movzbl (%eax),%eax
   10841:	83 e0 01             	and    $0x1,%eax
   10844:	84 c0                	test   %al,%al
   10846:	74 1c                	je     10864 <memory_creat_map+0x6e>
   10848:	68 7d 68 01 00       	push   $0x1687d
   1084d:	68 dc 69 01 00       	push   $0x169dc
   10852:	68 1d 01 00 00       	push   $0x11d
   10857:	68 90 68 01 00       	push   $0x16890
   1085c:	e8 15 52 00 00       	call   15a76 <pannic>
   10861:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10864:	8b 45 10             	mov    0x10(%ebp),%eax
   10867:	0b 45 18             	or     0x18(%ebp),%eax
   1086a:	83 c8 01             	or     $0x1,%eax
   1086d:	89 c2                	mov    %eax,%edx
   1086f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10872:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10874:	83 ec 08             	sub    $0x8,%esp
   10877:	ff 75 10             	push   0x10(%ebp)
   1087a:	68 00 90 01 00       	push   $0x19000
   1087f:	e8 3e fb ff ff       	call   103c2 <page_ref_add>
   10884:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10887:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1088e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10895:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10899:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1089f:	0f 8c 63 ff ff ff    	jl     10808 <memory_creat_map+0x12>

  }

  return 1;
   108a5:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108b9:	e9 92 00 00 00       	jmp    10950 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c1:	c1 e0 04             	shl    $0x4,%eax
   108c4:	05 00 80 01 00       	add    $0x18000,%eax
   108c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108cf:	8b 00                	mov    (%eax),%eax
   108d1:	68 00 10 00 00       	push   $0x1000
   108d6:	50                   	push   %eax
   108d7:	e8 08 fa ff ff       	call   102e4 <down2>
   108dc:	83 c4 08             	add    $0x8,%esp
   108df:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108e5:	8b 40 08             	mov    0x8(%eax),%eax
   108e8:	68 00 10 00 00       	push   $0x1000
   108ed:	50                   	push   %eax
   108ee:	e8 f1 f9 ff ff       	call   102e4 <down2>
   108f3:	83 c4 08             	add    $0x8,%esp
   108f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108fc:	8b 40 04             	mov    0x4(%eax),%eax
   108ff:	68 00 10 00 00       	push   $0x1000
   10904:	50                   	push   %eax
   10905:	e8 e7 f9 ff ff       	call   102f1 <up2>
   1090a:	83 c4 08             	add    $0x8,%esp
   1090d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10913:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10916:	c1 e8 0c             	shr    $0xc,%eax
   10919:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   1091c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1091f:	8b 40 0c             	mov    0xc(%eax),%eax
   10922:	83 ec 0c             	sub    $0xc,%esp
   10925:	50                   	push   %eax
   10926:	ff 75 e0             	push   -0x20(%ebp)
   10929:	ff 75 e8             	push   -0x18(%ebp)
   1092c:	ff 75 ec             	push   -0x14(%ebp)
   1092f:	68 00 10 02 00       	push   $0x21000
   10934:	e8 bd fe ff ff       	call   107f6 <memory_creat_map>
   10939:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	68 00 90 01 00       	push   $0x19000
   10944:	e8 85 fb ff ff       	call   104ce <clear_page_ref>
   10949:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1094c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10953:	83 f8 04             	cmp    $0x4,%eax
   10956:	0f 86 62 ff ff ff    	jbe    108be <create_kernal_table+0x12>

  }
}
   1095c:	90                   	nop
   1095d:	90                   	nop
   1095e:	c9                   	leave  
   1095f:	c3                   	ret    

00010960 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	6a 01                	push   $0x1
   1096b:	68 00 90 01 00       	push   $0x19000
   10970:	e8 31 fc ff ff       	call   105a6 <addr_alloc_page>
   10975:	83 c4 10             	add    $0x10,%esp
   10978:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1097b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1097f:	75 07                	jne    10988 <memory_creat_uvm+0x28>
   10981:	b8 00 00 00 00       	mov    $0x0,%eax
   10986:	eb 5b                	jmp    109e3 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10988:	83 ec 04             	sub    $0x4,%esp
   1098b:	68 00 10 00 00       	push   $0x1000
   10990:	6a 00                	push   $0x0
   10992:	ff 75 f0             	push   -0x10(%ebp)
   10995:	e8 f5 55 00 00       	call   15f8f <kernel_memset>
   1099a:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1099d:	83 ec 0c             	sub    $0xc,%esp
   109a0:	68 00 00 00 80       	push   $0x80000000
   109a5:	e8 6a f9 ff ff       	call   10314 <pde_index>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109b7:	eb 1f                	jmp    109d8 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109c6:	01 c2                	add    %eax,%edx
   109c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109cb:	8b 04 85 00 10 02 00 	mov    0x21000(,%eax,4),%eax
   109d2:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109db:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109de:	77 d9                	ja     109b9 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109e3:	c9                   	leave  
   109e4:	c3                   	ret    

000109e5 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109e5:	55                   	push   %ebp
   109e6:	89 e5                	mov    %esp,%ebp
   109e8:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109eb:	68 00 00 00 80       	push   $0x80000000
   109f0:	e8 1f f9 ff ff       	call   10314 <pde_index>
   109f5:	83 c4 04             	add    $0x4,%esp
   109f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a08:	01 d0                	add    %edx,%eax
   10a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a13:	e9 2a 01 00 00       	jmp    10b42 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a1b:	0f b6 00             	movzbl (%eax),%eax
   10a1e:	83 e0 01             	and    $0x1,%eax
   10a21:	84 c0                	test   %al,%al
   10a23:	0f 84 10 01 00 00    	je     10b39 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a29:	ff 75 f4             	push   -0xc(%ebp)
   10a2c:	e8 fe f8 ff ff       	call   1032f <pde_to_pt_addr>
   10a31:	83 c4 04             	add    $0x4,%esp
   10a34:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a37:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a3e:	e9 e7 00 00 00       	jmp    10b2a <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a46:	0f b6 00             	movzbl (%eax),%eax
   10a49:	83 e0 01             	and    $0x1,%eax
   10a4c:	84 c0                	test   %al,%al
   10a4e:	0f 84 cd 00 00 00    	je     10b21 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a57:	c1 e0 16             	shl    $0x16,%eax
   10a5a:	89 c2                	mov    %eax,%edx
   10a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a5f:	c1 e0 0c             	shl    $0xc,%eax
   10a62:	09 d0                	or     %edx,%eax
   10a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a6a:	8b 00                	mov    (%eax),%eax
   10a6c:	83 e0 02             	and    $0x2,%eax
   10a6f:	85 c0                	test   %eax,%eax
   10a71:	74 6c                	je     10adf <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a73:	83 ec 08             	sub    $0x8,%esp
   10a76:	6a 01                	push   $0x1
   10a78:	68 00 90 01 00       	push   $0x19000
   10a7d:	e8 24 fb ff ff       	call   105a6 <addr_alloc_page>
   10a82:	83 c4 10             	add    $0x10,%esp
   10a85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a88:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a8c:	0f 84 c4 00 00 00    	je     10b56 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a92:	83 ec 0c             	sub    $0xc,%esp
   10a95:	ff 75 ec             	push   -0x14(%ebp)
   10a98:	e8 e0 f8 ff ff       	call   1037d <get_pte_privilege>
   10a9d:	83 c4 10             	add    $0x10,%esp
   10aa0:	8b 55 08             	mov    0x8(%ebp),%edx
   10aa3:	83 ec 0c             	sub    $0xc,%esp
   10aa6:	50                   	push   %eax
   10aa7:	6a 01                	push   $0x1
   10aa9:	ff 75 d4             	push   -0x2c(%ebp)
   10aac:	ff 75 e0             	push   -0x20(%ebp)
   10aaf:	52                   	push   %edx
   10ab0:	e8 41 fd ff ff       	call   107f6 <memory_creat_map>
   10ab5:	83 c4 20             	add    $0x20,%esp
   10ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10abb:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10abf:	0f 88 94 00 00 00    	js     10b59 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ac5:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ac8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10acb:	83 ec 04             	sub    $0x4,%esp
   10ace:	68 00 10 00 00       	push   $0x1000
   10ad3:	52                   	push   %edx
   10ad4:	50                   	push   %eax
   10ad5:	e8 66 54 00 00       	call   15f40 <kernel_memcpy>
   10ada:	83 c4 10             	add    $0x10,%esp
   10add:	eb 43                	jmp    10b22 <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10adf:	83 ec 0c             	sub    $0xc,%esp
   10ae2:	ff 75 ec             	push   -0x14(%ebp)
   10ae5:	e8 6c f8 ff ff       	call   10356 <pte_to_pg_addr>
   10aea:	83 c4 10             	add    $0x10,%esp
   10aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10af0:	83 ec 0c             	sub    $0xc,%esp
   10af3:	ff 75 ec             	push   -0x14(%ebp)
   10af6:	e8 82 f8 ff ff       	call   1037d <get_pte_privilege>
   10afb:	83 c4 10             	add    $0x10,%esp
   10afe:	8b 55 08             	mov    0x8(%ebp),%edx
   10b01:	83 ec 0c             	sub    $0xc,%esp
   10b04:	50                   	push   %eax
   10b05:	6a 01                	push   $0x1
   10b07:	ff 75 dc             	push   -0x24(%ebp)
   10b0a:	ff 75 e0             	push   -0x20(%ebp)
   10b0d:	52                   	push   %edx
   10b0e:	e8 e3 fc ff ff       	call   107f6 <memory_creat_map>
   10b13:	83 c4 20             	add    $0x20,%esp
   10b16:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b19:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b1d:	78 3d                	js     10b5c <memory_copy_uvm+0x177>
   10b1f:	eb 01                	jmp    10b22 <memory_copy_uvm+0x13d>
        continue;
   10b21:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b22:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b26:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b2a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b31:	0f 8e 0c ff ff ff    	jle    10a43 <memory_copy_uvm+0x5e>
   10b37:	eb 01                	jmp    10b3a <memory_copy_uvm+0x155>
      continue;
   10b39:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b3a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b3e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b42:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b49:	0f 8e c9 fe ff ff    	jle    10a18 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b4f:	b8 01 00 00 00       	mov    $0x1,%eax
   10b54:	eb 1a                	jmp    10b70 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b56:	90                   	nop
   10b57:	eb 04                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b59:	90                   	nop
   10b5a:	eb 01                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b5c:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b5d:	83 ec 0c             	sub    $0xc,%esp
   10b60:	ff 75 08             	push   0x8(%ebp)
   10b63:	e8 0a 00 00 00       	call   10b72 <memory_destroy_uvm>
   10b68:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b70:	c9                   	leave  
   10b71:	c3                   	ret    

00010b72 <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b72:	55                   	push   %ebp
   10b73:	89 e5                	mov    %esp,%ebp
   10b75:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b78:	68 00 00 00 80       	push   $0x80000000
   10b7d:	e8 92 f7 ff ff       	call   10314 <pde_index>
   10b82:	83 c4 04             	add    $0x4,%esp
   10b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b92:	8b 45 08             	mov    0x8(%ebp),%eax
   10b95:	01 d0                	add    %edx,%eax
   10b97:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10ba0:	e9 8f 00 00 00       	jmp    10c34 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ba8:	0f b6 00             	movzbl (%eax),%eax
   10bab:	83 e0 01             	and    $0x1,%eax
   10bae:	84 c0                	test   %al,%al
   10bb0:	74 79                	je     10c2b <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bb2:	ff 75 f4             	push   -0xc(%ebp)
   10bb5:	e8 75 f7 ff ff       	call   1032f <pde_to_pt_addr>
   10bba:	83 c4 04             	add    $0x4,%esp
   10bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bc0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10bc7:	eb 36                	jmp    10bff <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bcc:	0f b6 00             	movzbl (%eax),%eax
   10bcf:	83 e0 01             	and    $0x1,%eax
   10bd2:	84 c0                	test   %al,%al
   10bd4:	74 20                	je     10bf6 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bd6:	ff 75 ec             	push   -0x14(%ebp)
   10bd9:	e8 78 f7 ff ff       	call   10356 <pte_to_pg_addr>
   10bde:	83 c4 04             	add    $0x4,%esp
   10be1:	83 ec 04             	sub    $0x4,%esp
   10be4:	6a 01                	push   $0x1
   10be6:	50                   	push   %eax
   10be7:	68 00 90 01 00       	push   $0x19000
   10bec:	e8 1c fa ff ff       	call   1060d <addr_free_page>
   10bf1:	83 c4 10             	add    $0x10,%esp
   10bf4:	eb 01                	jmp    10bf7 <memory_destroy_uvm+0x85>
        continue;
   10bf6:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bf7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bfb:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10bff:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c06:	7e c1                	jle    10bc9 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c08:	83 ec 0c             	sub    $0xc,%esp
   10c0b:	ff 75 f4             	push   -0xc(%ebp)
   10c0e:	e8 1c f7 ff ff       	call   1032f <pde_to_pt_addr>
   10c13:	83 c4 10             	add    $0x10,%esp
   10c16:	83 ec 04             	sub    $0x4,%esp
   10c19:	6a 01                	push   $0x1
   10c1b:	50                   	push   %eax
   10c1c:	68 00 90 01 00       	push   $0x19000
   10c21:	e8 e7 f9 ff ff       	call   1060d <addr_free_page>
   10c26:	83 c4 10             	add    $0x10,%esp
   10c29:	eb 01                	jmp    10c2c <memory_destroy_uvm+0xba>
        continue;
   10c2b:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c2c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c30:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c34:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c3b:	0f 8e 64 ff ff ff    	jle    10ba5 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c41:	83 ec 04             	sub    $0x4,%esp
   10c44:	6a 01                	push   $0x1
   10c46:	ff 75 08             	push   0x8(%ebp)
   10c49:	68 00 90 01 00       	push   $0x19000
   10c4e:	e8 ba f9 ff ff       	call   1060d <addr_free_page>
   10c53:	83 c4 10             	add    $0x10,%esp
}
   10c56:	90                   	nop
   10c57:	c9                   	leave  
   10c58:	c3                   	ret    

00010c59 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c59:	55                   	push   %ebp
   10c5a:	89 e5                	mov    %esp,%ebp
   10c5c:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c5f:	83 ec 0c             	sub    $0xc,%esp
   10c62:	68 c7 68 01 00       	push   $0x168c7
   10c67:	e8 20 5b 00 00       	call   1678c <log_printf>
   10c6c:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c6f:	83 ec 08             	sub    $0x8,%esp
   10c72:	68 84 d3 06 00       	push   $0x6d384
   10c77:	68 d4 68 01 00       	push   $0x168d4
   10c7c:	e8 0b 5b 00 00       	call   1678c <log_printf>
   10c81:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c84:	83 ec 0c             	sub    $0xc,%esp
   10c87:	ff 75 08             	push   0x8(%ebp)
   10c8a:	e8 1a fa ff ff       	call   106a9 <show_mem_info>
   10c8f:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c92:	83 ec 0c             	sub    $0xc,%esp
   10c95:	ff 75 08             	push   0x8(%ebp)
   10c98:	e8 72 fa ff ff       	call   1070f <total_mem_size>
   10c9d:	83 c4 10             	add    $0x10,%esp
   10ca0:	2d 00 00 10 00       	sub    $0x100000,%eax
   10ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	68 00 10 00 00       	push   $0x1000
   10cb0:	ff 75 f4             	push   -0xc(%ebp)
   10cb3:	e8 2c f6 ff ff       	call   102e4 <down2>
   10cb8:	83 c4 10             	add    $0x10,%esp
   10cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cbe:	83 ec 04             	sub    $0x4,%esp
   10cc1:	ff 75 f4             	push   -0xc(%ebp)
   10cc4:	68 00 00 10 00       	push   $0x100000
   10cc9:	68 ec 68 01 00       	push   $0x168ec
   10cce:	e8 b9 5a 00 00       	call   1678c <log_printf>
   10cd3:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cd6:	c7 45 f0 84 d3 06 00 	movl   $0x6d384,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cdd:	83 ec 0c             	sub    $0xc,%esp
   10ce0:	68 00 10 00 00       	push   $0x1000
   10ce5:	ff 75 f4             	push   -0xc(%ebp)
   10ce8:	68 00 00 10 00       	push   $0x100000
   10ced:	ff 75 f0             	push   -0x10(%ebp)
   10cf0:	68 00 90 01 00       	push   $0x19000
   10cf5:	e8 25 f8 ff ff       	call   1051f <addr_alloc_init>
   10cfa:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10cfd:	a1 20 90 01 00       	mov    0x19020,%eax
   10d02:	c1 e8 0c             	shr    $0xc,%eax
   10d05:	83 ec 0c             	sub    $0xc,%esp
   10d08:	50                   	push   %eax
   10d09:	e8 9e 4d 00 00       	call   15aac <bitmap_byte_count>
   10d0e:	83 c4 10             	add    $0x10,%esp
   10d11:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d14:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d1b:	76 1c                	jbe    10d39 <memory_init+0xe0>
   10d1d:	68 0c 69 01 00       	push   $0x1690c
   10d22:	68 f0 69 01 00       	push   $0x169f0
   10d27:	68 f8 01 00 00       	push   $0x1f8
   10d2c:	68 90 68 01 00       	push   $0x16890
   10d31:	e8 40 4d 00 00       	call   15a76 <pannic>
   10d36:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d39:	e8 6e fb ff ff       	call   108ac <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d3e:	b8 00 10 02 00       	mov    $0x21000,%eax
   10d43:	83 ec 0c             	sub    $0xc,%esp
   10d46:	50                   	push   %eax
   10d47:	e8 40 f6 ff ff       	call   1038c <mmu_set_page_dir>
   10d4c:	83 c4 10             	add    $0x10,%esp
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d5e:	68 00 10 00 00       	push   $0x1000
   10d63:	ff 75 10             	push   0x10(%ebp)
   10d66:	e8 86 f5 ff ff       	call   102f1 <up2>
   10d6b:	83 c4 08             	add    $0x8,%esp
   10d6e:	c1 e8 0c             	shr    $0xc,%eax
   10d71:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d7b:	eb 7a                	jmp    10df7 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d7d:	83 ec 08             	sub    $0x8,%esp
   10d80:	6a 01                	push   $0x1
   10d82:	68 00 90 01 00       	push   $0x19000
   10d87:	e8 1a f8 ff ff       	call   105a6 <addr_alloc_page>
   10d8c:	83 c4 10             	add    $0x10,%esp
   10d8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d96:	75 17                	jne    10daf <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10d98:	83 ec 0c             	sub    $0xc,%esp
   10d9b:	68 30 69 01 00       	push   $0x16930
   10da0:	e8 e7 59 00 00       	call   1678c <log_printf>
   10da5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10da8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dad:	eb 59                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	83 ec 0c             	sub    $0xc,%esp
   10db5:	ff 75 14             	push   0x14(%ebp)
   10db8:	6a 01                	push   $0x1
   10dba:	ff 75 e8             	push   -0x18(%ebp)
   10dbd:	ff 75 f4             	push   -0xc(%ebp)
   10dc0:	50                   	push   %eax
   10dc1:	e8 30 fa ff ff       	call   107f6 <memory_creat_map>
   10dc6:	83 c4 20             	add    $0x20,%esp
   10dc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10dcc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dd0:	79 1a                	jns    10dec <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10dd2:	83 ec 08             	sub    $0x8,%esp
   10dd5:	ff 75 e4             	push   -0x1c(%ebp)
   10dd8:	68 50 69 01 00       	push   $0x16950
   10ddd:	e8 aa 59 00 00       	call   1678c <log_printf>
   10de2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10de5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dea:	eb 1c                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dec:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10df3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10dfd:	0f 8c 7a ff ff ff    	jl     10d7d <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e08:	c9                   	leave  
   10e09:	c3                   	ret    

00010e0a <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e10:	e8 7f 0b 00 00       	call   11994 <task_current>
   10e15:	8b 40 78             	mov    0x78(%eax),%eax
   10e18:	ff 75 10             	push   0x10(%ebp)
   10e1b:	ff 75 0c             	push   0xc(%ebp)
   10e1e:	ff 75 08             	push   0x8(%ebp)
   10e21:	50                   	push   %eax
   10e22:	e8 2b ff ff ff       	call   10d52 <memory_alloc_for_page_dir>
   10e27:	83 c4 10             	add    $0x10,%esp
}
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e32:	e8 5d 0b 00 00       	call   11994 <task_current>
   10e37:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e3a:	c9                   	leave  
   10e3b:	c3                   	ret    

00010e3c <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e42:	83 ec 08             	sub    $0x8,%esp
   10e45:	6a 01                	push   $0x1
   10e47:	68 00 90 01 00       	push   $0x19000
   10e4c:	e8 55 f7 ff ff       	call   105a6 <addr_alloc_page>
   10e51:	83 c4 10             	add    $0x10,%esp
   10e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp
   10e5f:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	85 c0                	test   %eax,%eax
   10e67:	78 17                	js     10e80 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e69:	83 ec 04             	sub    $0x4,%esp
   10e6c:	6a 01                	push   $0x1
   10e6e:	ff 75 08             	push   0x8(%ebp)
   10e71:	68 00 90 01 00       	push   $0x19000
   10e76:	e8 92 f7 ff ff       	call   1060d <addr_free_page>
   10e7b:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e7e:	eb 72                	jmp    10ef2 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e80:	e8 a7 ff ff ff       	call   10e2c <curr_page_dir>
   10e85:	83 ec 04             	sub    $0x4,%esp
   10e88:	6a 00                	push   $0x0
   10e8a:	ff 75 08             	push   0x8(%ebp)
   10e8d:	50                   	push   %eax
   10e8e:	e8 b3 f8 ff ff       	call   10746 <find_pte>
   10e93:	83 c4 10             	add    $0x10,%esp
   10e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9d:	74 0d                	je     10eac <memory_free_page+0x50>
   10e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ea2:	0f b6 00             	movzbl (%eax),%eax
   10ea5:	83 e0 01             	and    $0x1,%eax
   10ea8:	84 c0                	test   %al,%al
   10eaa:	75 1c                	jne    10ec8 <memory_free_page+0x6c>
   10eac:	68 70 69 01 00       	push   $0x16970
   10eb1:	68 fc 69 01 00       	push   $0x169fc
   10eb6:	68 5a 02 00 00       	push   $0x25a
   10ebb:	68 90 68 01 00       	push   $0x16890
   10ec0:	e8 b1 4b 00 00       	call   15a76 <pannic>
   10ec5:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	ff 75 f4             	push   -0xc(%ebp)
   10ece:	e8 83 f4 ff ff       	call   10356 <pte_to_pg_addr>
   10ed3:	83 c4 10             	add    $0x10,%esp
   10ed6:	83 ec 04             	sub    $0x4,%esp
   10ed9:	6a 01                	push   $0x1
   10edb:	50                   	push   %eax
   10edc:	68 00 90 01 00       	push   $0x19000
   10ee1:	e8 27 f7 ff ff       	call   1060d <addr_free_page>
   10ee6:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10efb:	8b 45 08             	mov    0x8(%ebp),%eax
   10efe:	83 ec 04             	sub    $0x4,%esp
   10f01:	6a 00                	push   $0x0
   10f03:	ff 75 0c             	push   0xc(%ebp)
   10f06:	50                   	push   %eax
   10f07:	e8 3a f8 ff ff       	call   10746 <find_pte>
   10f0c:	83 c4 10             	add    $0x10,%esp
   10f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f16:	74 0d                	je     10f25 <memory_get_paddr+0x30>
   10f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f1b:	0f b6 00             	movzbl (%eax),%eax
   10f1e:	83 e0 01             	and    $0x1,%eax
   10f21:	84 c0                	test   %al,%al
   10f23:	75 07                	jne    10f2c <memory_get_paddr+0x37>
    return 0;
   10f25:	b8 00 00 00 00       	mov    $0x0,%eax
   10f2a:	eb 1a                	jmp    10f46 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f2c:	83 ec 0c             	sub    $0xc,%esp
   10f2f:	ff 75 f4             	push   -0xc(%ebp)
   10f32:	e8 1f f4 ff ff       	call   10356 <pte_to_pg_addr>
   10f37:	83 c4 10             	add    $0x10,%esp
   10f3a:	89 c2                	mov    %eax,%edx
   10f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3f:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f44:	09 d0                	or     %edx,%eax

}
   10f46:	c9                   	leave  
   10f47:	c3                   	ret    

00010f48 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f48:	55                   	push   %ebp
   10f49:	89 e5                	mov    %esp,%ebp
   10f4b:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f4e:	eb 6e                	jmp    10fbe <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f50:	83 ec 08             	sub    $0x8,%esp
   10f53:	ff 75 08             	push   0x8(%ebp)
   10f56:	ff 75 0c             	push   0xc(%ebp)
   10f59:	e8 97 ff ff ff       	call   10ef5 <memory_get_paddr>
   10f5e:	83 c4 10             	add    $0x10,%esp
   10f61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f68:	75 07                	jne    10f71 <memory_copy_uvm_data+0x29>
      return -1;
   10f6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f6f:	eb 58                	jmp    10fc9 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f74:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f81:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f87:	8b 45 14             	mov    0x14(%ebp),%eax
   10f8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f8d:	73 06                	jae    10f95 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f8f:	8b 45 14             	mov    0x14(%ebp),%eax
   10f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f98:	8b 55 10             	mov    0x10(%ebp),%edx
   10f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9e:	83 ec 04             	sub    $0x4,%esp
   10fa1:	51                   	push   %ecx
   10fa2:	52                   	push   %edx
   10fa3:	50                   	push   %eax
   10fa4:	e8 97 4f 00 00       	call   15f40 <kernel_memcpy>
   10fa9:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10faf:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fb5:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fbb:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fbe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fc2:	75 8c                	jne    10f50 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fc4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fc9:	c9                   	leave  
   10fca:	c3                   	ret    

00010fcb <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fcb:	55                   	push   %ebp
   10fcc:	89 e5                	mov    %esp,%ebp
   10fce:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fd5:	79 1c                	jns    10ff3 <sys_sbrk+0x28>
   10fd7:	68 91 69 01 00       	push   $0x16991
   10fdc:	68 10 6a 01 00       	push   $0x16a10
   10fe1:	68 a9 02 00 00       	push   $0x2a9
   10fe6:	68 90 68 01 00       	push   $0x16890
   10feb:	e8 86 4a 00 00       	call   15a76 <pannic>
   10ff0:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   10ff3:	e8 9c 09 00 00       	call   11994 <task_current>
   10ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   10ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffe:	8b 40 14             	mov    0x14(%eax),%eax
   11001:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   1100a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100e:	75 1b                	jne    1102b <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   11010:	83 ec 08             	sub    $0x8,%esp
   11013:	ff 75 ec             	push   -0x14(%ebp)
   11016:	68 9b 69 01 00       	push   $0x1699b
   1101b:	e8 6c 57 00 00       	call   1678c <log_printf>
   11020:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11023:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11026:	e9 c4 00 00 00       	jmp    110ef <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   1102b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102e:	8b 40 14             	mov    0x14(%eax),%eax
   11031:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11034:	8b 55 08             	mov    0x8(%ebp),%edx
   11037:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1103a:	01 d0                	add    %edx,%eax
   1103c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1103f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11042:	25 ff 0f 00 00       	and    $0xfff,%eax
   11047:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   1104a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1104e:	74 3b                	je     1108b <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   11050:	8b 55 08             	mov    0x8(%ebp),%edx
   11053:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11056:	01 d0                	add    %edx,%eax
   11058:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1105d:	77 12                	ja     11071 <sys_sbrk+0xa6>
      task->heap_end = end; 
   1105f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11062:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11065:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11068:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1106f:	eb 1a                	jmp    1108b <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   11071:	b8 00 10 00 00       	mov    $0x1000,%eax
   11076:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11079:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   1107c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1107f:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	2b 45 dc             	sub    -0x24(%ebp),%eax
   11088:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   1108b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1108f:	74 3c                	je     110cd <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   11091:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11094:	2b 45 f4             	sub    -0xc(%ebp),%eax
   11097:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   1109a:	83 ec 04             	sub    $0x4,%esp
   1109d:	6a 07                	push   $0x7
   1109f:	ff 75 d8             	push   -0x28(%ebp)
   110a2:	ff 75 f4             	push   -0xc(%ebp)
   110a5:	e8 60 fd ff ff       	call   10e0a <memory_alloc_page_for>
   110aa:	83 c4 10             	add    $0x10,%esp
   110ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110b0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110b4:	79 17                	jns    110cd <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110b6:	83 ec 0c             	sub    $0xc,%esp
   110b9:	68 ae 69 01 00       	push   $0x169ae
   110be:	e8 c9 56 00 00       	call   1678c <log_printf>
   110c3:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110cb:	eb 22                	jmp    110ef <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110cd:	83 ec 04             	sub    $0x4,%esp
   110d0:	ff 75 e4             	push   -0x1c(%ebp)
   110d3:	ff 75 e8             	push   -0x18(%ebp)
   110d6:	68 c7 69 01 00       	push   $0x169c7
   110db:	e8 ac 56 00 00       	call   1678c <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   110e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   110e9:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)end;
   110ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110ef:	c9                   	leave  
   110f0:	c3                   	ret    

000110f1 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   110f1:	55                   	push   %ebp
   110f2:	89 e5                	mov    %esp,%ebp
   110f4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   110f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110fb:	75 19                	jne    11116 <list_node_init+0x25>
   110fd:	68 1c 6a 01 00       	push   $0x16a1c
   11102:	68 d8 6b 01 00       	push   $0x16bd8
   11107:	6a 20                	push   $0x20
   11109:	68 34 6a 01 00       	push   $0x16a34
   1110e:	e8 63 49 00 00       	call   15a76 <pannic>
   11113:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	8b 50 04             	mov    0x4(%eax),%edx
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	89 10                	mov    %edx,(%eax)
}
   1112b:	90                   	nop
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
   11131:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11138:	75 19                	jne    11153 <list_node_next+0x25>
   1113a:	68 1c 6a 01 00       	push   $0x16a1c
   1113f:	68 38 6c 01 00       	push   $0x16c38
   11144:	6a 2b                	push   $0x2b
   11146:	68 34 6a 01 00       	push   $0x16a34
   1114b:	e8 26 49 00 00       	call   15a76 <pannic>
   11150:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11153:	8b 45 08             	mov    0x8(%ebp),%eax
   11156:	8b 40 04             	mov    0x4(%eax),%eax
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <list_init>:

static inline void list_init(list_t *list) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11165:	75 19                	jne    11180 <list_init+0x25>
   11167:	68 72 6a 01 00       	push   $0x16a72
   1116c:	68 e8 6b 01 00       	push   $0x16be8
   11171:	6a 31                	push   $0x31
   11173:	68 34 6a 01 00       	push   $0x16a34
   11178:	e8 f9 48 00 00       	call   15a76 <pannic>
   1117d:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11180:	8b 45 08             	mov    0x8(%ebp),%eax
   11183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	8b 50 04             	mov    0x4(%eax),%edx
   11190:	8b 45 08             	mov    0x8(%ebp),%eax
   11193:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1119f:	90                   	nop
   111a0:	c9                   	leave  
   111a1:	c3                   	ret    

000111a2 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111a2:	55                   	push   %ebp
   111a3:	89 e5                	mov    %esp,%ebp
   111a5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ac:	75 19                	jne    111c7 <list_is_empty+0x25>
   111ae:	68 72 6a 01 00       	push   $0x16a72
   111b3:	68 48 6c 01 00       	push   $0x16c48
   111b8:	6a 38                	push   $0x38
   111ba:	68 34 6a 01 00       	push   $0x16a34
   111bf:	e8 b2 48 00 00       	call   15a76 <pannic>
   111c4:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111c7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ca:	8b 40 08             	mov    0x8(%eax),%eax
   111cd:	85 c0                	test   %eax,%eax
   111cf:	0f 94 c0             	sete   %al
   111d2:	0f b6 c0             	movzbl %al,%eax
}
   111d5:	c9                   	leave  
   111d6:	c3                   	ret    

000111d7 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111d7:	55                   	push   %ebp
   111d8:	89 e5                	mov    %esp,%ebp
   111da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e1:	75 19                	jne    111fc <list_get_size+0x25>
   111e3:	68 72 6a 01 00       	push   $0x16a72
   111e8:	68 78 6c 01 00       	push   $0x16c78
   111ed:	6a 3e                	push   $0x3e
   111ef:	68 34 6a 01 00       	push   $0x16a34
   111f4:	e8 7d 48 00 00       	call   15a76 <pannic>
   111f9:	83 c4 10             	add    $0x10,%esp

    return list->size;
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	8b 40 08             	mov    0x8(%eax),%eax
}
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1120a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1120e:	75 19                	jne    11229 <list_get_first+0x25>
   11210:	68 72 6a 01 00       	push   $0x16a72
   11215:	68 28 6c 01 00       	push   $0x16c28
   1121a:	6a 44                	push   $0x44
   1121c:	68 34 6a 01 00       	push   $0x16a34
   11221:	e8 50 48 00 00       	call   15a76 <pannic>
   11226:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11229:	8b 45 08             	mov    0x8(%ebp),%eax
   1122c:	8b 00                	mov    (%eax),%eax
}
   1122e:	c9                   	leave  
   1122f:	c3                   	ret    

00011230 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11230:	55                   	push   %ebp
   11231:	89 e5                	mov    %esp,%ebp
   11233:	f4                   	hlt    
   11234:	90                   	nop
   11235:	5d                   	pop    %ebp
   11236:	c3                   	ret    

00011237 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11237:	55                   	push   %ebp
   11238:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1123a:	8b 45 08             	mov    0x8(%ebp),%eax
   1123d:	0f 22 d8             	mov    %eax,%cr3
}
   11240:	90                   	nop
   11241:	5d                   	pop    %ebp
   11242:	c3                   	ret    

00011243 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11243:	55                   	push   %ebp
   11244:	89 e5                	mov    %esp,%ebp
   11246:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11249:	8b 45 0c             	mov    0xc(%ebp),%eax
   1124c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1124f:	8b 45 08             	mov    0x8(%ebp),%eax
   11252:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11255:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11258:	ff 28                	ljmp   *(%eax)
}
   1125a:	90                   	nop
   1125b:	c9                   	leave  
   1125c:	c3                   	ret    

0001125d <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1125d:	55                   	push   %ebp
   1125e:	89 e5                	mov    %esp,%ebp
   11260:	83 ec 04             	sub    $0x4,%esp
   11263:	8b 45 08             	mov    0x8(%ebp),%eax
   11266:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1126a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1126e:	0f 00 d8             	ltr    %ax
}
   11271:	90                   	nop
   11272:	c9                   	leave  
   11273:	c3                   	ret    

00011274 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11277:	ff 75 08             	push   0x8(%ebp)
   1127a:	e8 b8 ff ff ff       	call   11237 <write_cr3>
   1127f:	83 c4 04             	add    $0x4,%esp
}
   11282:	90                   	nop
   11283:	c9                   	leave  
   11284:	c3                   	ret    

00011285 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11285:	55                   	push   %ebp
   11286:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   11288:	8b 55 08             	mov    0x8(%ebp),%edx
   1128b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128e:	01 d0                	add    %edx,%eax
   11290:	8d 50 ff             	lea    -0x1(%eax),%edx
   11293:	8b 45 0c             	mov    0xc(%ebp),%eax
   11296:	f7 d8                	neg    %eax
   11298:	21 d0                	and    %edx,%eax
}
   1129a:	5d                   	pop    %ebp
   1129b:	c3                   	ret    

0001129c <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   1129c:	55                   	push   %ebp
   1129d:	89 e5                	mov    %esp,%ebp
   1129f:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ad:	78 18                	js     112c7 <task_file+0x2b>
   112af:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112b3:	7f 12                	jg     112c7 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112b5:	e8 da 06 00 00       	call   11994 <task_current>
   112ba:	8b 55 08             	mov    0x8(%ebp),%edx
   112bd:	83 c2 30             	add    $0x30,%edx
   112c0:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112ca:	c9                   	leave  
   112cb:	c3                   	ret    

000112cc <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112cc:	55                   	push   %ebp
   112cd:	89 e5                	mov    %esp,%ebp
   112cf:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112d2:	e8 bd 06 00 00       	call   11994 <task_current>
   112d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112e1:	eb 2f                	jmp    11312 <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   112e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112e9:	83 c2 30             	add    $0x30,%edx
   112ec:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   112f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   112f7:	75 15                	jne    1130e <task_alloc_fd+0x42>
      task->file_table[i] = file;
   112f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112ff:	8d 4a 30             	lea    0x30(%edx),%ecx
   11302:	8b 55 08             	mov    0x8(%ebp),%edx
   11305:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11309:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130c:	eb 0f                	jmp    1131d <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1130e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11312:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11316:	7e cb                	jle    112e3 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11318:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1131d:	c9                   	leave  
   1131e:	c3                   	ret    

0001131f <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1131f:	55                   	push   %ebp
   11320:	89 e5                	mov    %esp,%ebp
   11322:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11325:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11329:	78 19                	js     11344 <task_remove_fd+0x25>
   1132b:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1132f:	7f 13                	jg     11344 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   11331:	e8 5e 06 00 00       	call   11994 <task_current>
   11336:	8b 55 08             	mov    0x8(%ebp),%edx
   11339:	83 c2 30             	add    $0x30,%edx
   1133c:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11343:	00 
  }
}
   11344:	90                   	nop
   11345:	c9                   	leave  
   11346:	c3                   	ret    

00011347 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11347:	55                   	push   %ebp
   11348:	89 e5                	mov    %esp,%ebp
   1134a:	83 ec 04             	sub    $0x4,%esp
   1134d:	8b 45 08             	mov    0x8(%ebp),%eax
   11350:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11354:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11358:	6a 00                	push   $0x0
   1135a:	50                   	push   %eax
   1135b:	e8 e3 fe ff ff       	call   11243 <far_jump>
   11360:	83 c4 08             	add    $0x8,%esp
}
   11363:	90                   	nop
   11364:	c9                   	leave  
   11365:	c3                   	ret    

00011366 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11366:	55                   	push   %ebp
   11367:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11369:	8b 45 0c             	mov    0xc(%ebp),%eax
   1136c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11372:	0f b7 c0             	movzwl %ax,%eax
   11375:	50                   	push   %eax
   11376:	e8 cc ff ff ff       	call   11347 <switch_to_tss>
   1137b:	83 c4 04             	add    $0x4,%esp
}
   1137e:	90                   	nop
   1137f:	c9                   	leave  
   11380:	c3                   	ret    

00011381 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   11381:	55                   	push   %ebp
   11382:	89 e5                	mov    %esp,%ebp
   11384:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   11387:	e8 45 14 00 00       	call   127d1 <gdt_alloc_desc>
   1138c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   1138f:	8b 45 08             	mov    0x8(%ebp),%eax
   11392:	83 c0 5c             	add    $0x5c,%eax
   11395:	89 c2                	mov    %eax,%edx
   11397:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1139a:	0f b7 c0             	movzwl %ax,%eax
   1139d:	68 89 00 00 00       	push   $0x89
   113a2:	6a 68                	push   $0x68
   113a4:	52                   	push   %edx
   113a5:	50                   	push   %eax
   113a6:	e8 b4 12 00 00       	call   1265f <segment_desc_set>
   113ab:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113ae:	8b 45 08             	mov    0x8(%ebp),%eax
   113b1:	83 c0 5c             	add    $0x5c,%eax
   113b4:	83 ec 04             	sub    $0x4,%esp
   113b7:	6a 68                	push   $0x68
   113b9:	6a 00                	push   $0x0
   113bb:	50                   	push   %eax
   113bc:	e8 ce 4b 00 00       	call   15f8f <kernel_memset>
   113c1:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113ca:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113d0:	8b 45 14             	mov    0x14(%ebp),%eax
   113d3:	83 e0 01             	and    $0x1,%eax
   113d6:	85 c0                	test   %eax,%eax
   113d8:	74 10                	je     113ea <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113da:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113e1:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   113e8:	eb 16                	jmp    11400 <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   113ea:	a1 b8 25 02 00       	mov    0x225b8,%eax
   113ef:	83 c8 03             	or     $0x3,%eax
   113f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   113f5:	a1 bc 25 02 00       	mov    0x225bc,%eax
   113fa:	83 c8 03             	or     $0x3,%eax
   113fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   11400:	8b 45 08             	mov    0x8(%ebp),%eax
   11403:	8b 55 0c             	mov    0xc(%ebp),%edx
   11406:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11409:	8b 45 08             	mov    0x8(%ebp),%eax
   1140c:	8b 55 10             	mov    0x10(%ebp),%edx
   1140f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11415:	e8 22 fa ff ff       	call   10e3c <memory_alloc_page>
   1141a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1141d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11421:	0f 84 9e 00 00 00    	je     114c5 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11427:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1142a:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11430:	8b 45 08             	mov    0x8(%ebp),%eax
   11433:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11436:	8b 45 08             	mov    0x8(%ebp),%eax
   11439:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1143c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   11442:	8b 45 08             	mov    0x8(%ebp),%eax
   11445:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   1144c:	8b 45 08             	mov    0x8(%ebp),%eax
   1144f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11452:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11458:	8b 45 08             	mov    0x8(%ebp),%eax
   1145b:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   11461:	8b 45 08             	mov    0x8(%ebp),%eax
   11464:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   1146a:	8b 45 08             	mov    0x8(%ebp),%eax
   1146d:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11473:	8b 45 08             	mov    0x8(%ebp),%eax
   11476:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   1147c:	8b 45 08             	mov    0x8(%ebp),%eax
   1147f:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   11485:	8b 45 08             	mov    0x8(%ebp),%eax
   11488:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   1148e:	8b 45 08             	mov    0x8(%ebp),%eax
   11491:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11494:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   1149a:	8b 45 08             	mov    0x8(%ebp),%eax
   1149d:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114a4:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114a7:	e8 b4 f4 ff ff       	call   10960 <memory_creat_uvm>
   114ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114af:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114b3:	74 13                	je     114c8 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114b5:	8b 45 08             	mov    0x8(%ebp),%eax
   114b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114bb:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114be:	b8 00 00 00 00       	mov    $0x0,%eax
   114c3:	eb 2f                	jmp    114f4 <tss_init+0x173>
    goto tss_init_failed;
   114c5:	90                   	nop
   114c6:	eb 01                	jmp    114c9 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114c8:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114cc:	0f b7 c0             	movzwl %ax,%eax
   114cf:	83 ec 0c             	sub    $0xc,%esp
   114d2:	50                   	push   %eax
   114d3:	e8 6e 13 00 00       	call   12846 <gdt_free>
   114d8:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114db:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114df:	74 0e                	je     114ef <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114e1:	83 ec 0c             	sub    $0xc,%esp
   114e4:	ff 75 e8             	push   -0x18(%ebp)
   114e7:	e8 70 f9 ff ff       	call   10e5c <memory_free_page>
   114ec:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   114ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   114f4:	c9                   	leave  
   114f5:	c3                   	ret    

000114f6 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   114f6:	55                   	push   %ebp
   114f7:	89 e5                	mov    %esp,%ebp
   114f9:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   114fc:	e8 fb 1c 00 00       	call   131fc <idt_enter_protection>
   11501:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11504:	83 ec 0c             	sub    $0xc,%esp
   11507:	ff 75 08             	push   0x8(%ebp)
   1150a:	e8 d3 03 00 00       	call   118e2 <task_set_ready>
   1150f:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   11512:	8b 45 08             	mov    0x8(%ebp),%eax
   11515:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   1151b:	83 ec 0c             	sub    $0xc,%esp
   1151e:	ff 75 f4             	push   -0xc(%ebp)
   11521:	e8 ee 1c 00 00       	call   13214 <idt_leave_protection>
   11526:	83 c4 10             	add    $0x10,%esp
}
   11529:	90                   	nop
   1152a:	c9                   	leave  
   1152b:	c3                   	ret    

0001152c <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   1152c:	55                   	push   %ebp
   1152d:	89 e5                	mov    %esp,%ebp
   1152f:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   11532:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11536:	75 1c                	jne    11554 <task_init+0x28>
   11538:	68 85 6a 01 00       	push   $0x16a85
   1153d:	68 cc 6b 01 00       	push   $0x16bcc
   11542:	68 ca 00 00 00       	push   $0xca
   11547:	68 9c 6a 01 00       	push   $0x16a9c
   1154c:	e8 25 45 00 00       	call   15a76 <pannic>
   11551:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11554:	ff 75 18             	push   0x18(%ebp)
   11557:	ff 75 14             	push   0x14(%ebp)
   1155a:	ff 75 10             	push   0x10(%ebp)
   1155d:	ff 75 08             	push   0x8(%ebp)
   11560:	e8 1c fe ff ff       	call   11381 <tss_init>
   11565:	83 c4 10             	add    $0x10,%esp
   11568:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   1156b:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1156f:	75 08                	jne    11579 <task_init+0x4d>
   11571:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11574:	e9 e0 00 00 00       	jmp    11659 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11579:	8b 45 08             	mov    0x8(%ebp),%eax
   1157c:	83 c0 24             	add    $0x24,%eax
   1157f:	83 ec 04             	sub    $0x4,%esp
   11582:	6a 20                	push   $0x20
   11584:	ff 75 0c             	push   0xc(%ebp)
   11587:	50                   	push   %eax
   11588:	e8 ac 48 00 00       	call   15e39 <kernel_strncpy>
   1158d:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   11590:	8b 45 08             	mov    0x8(%ebp),%eax
   11593:	83 c0 44             	add    $0x44,%eax
   11596:	83 ec 0c             	sub    $0xc,%esp
   11599:	50                   	push   %eax
   1159a:	e8 52 fb ff ff       	call   110f1 <list_node_init>
   1159f:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115a2:	8b 45 08             	mov    0x8(%ebp),%eax
   115a5:	83 c0 4c             	add    $0x4c,%eax
   115a8:	83 ec 0c             	sub    $0xc,%esp
   115ab:	50                   	push   %eax
   115ac:	e8 40 fb ff ff       	call   110f1 <list_node_init>
   115b1:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115b4:	8b 45 08             	mov    0x8(%ebp),%eax
   115b7:	83 c0 54             	add    $0x54,%eax
   115ba:	83 ec 0c             	sub    $0xc,%esp
   115bd:	50                   	push   %eax
   115be:	e8 2e fb ff ff       	call   110f1 <list_node_init>
   115c3:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115c6:	8b 45 08             	mov    0x8(%ebp),%eax
   115c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115cf:	8b 45 08             	mov    0x8(%ebp),%eax
   115d2:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115d9:	8b 45 08             	mov    0x8(%ebp),%eax
   115dc:	8b 50 1c             	mov    0x1c(%eax),%edx
   115df:	8b 45 08             	mov    0x8(%ebp),%eax
   115e2:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   115e5:	8b 45 08             	mov    0x8(%ebp),%eax
   115e8:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   115ef:	8b 55 08             	mov    0x8(%ebp),%edx
   115f2:	8b 45 08             	mov    0x8(%ebp),%eax
   115f5:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   115f8:	8b 45 08             	mov    0x8(%ebp),%eax
   115fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   1160c:	8b 45 08             	mov    0x8(%ebp),%eax
   1160f:	8b 50 14             	mov    0x14(%eax),%edx
   11612:	8b 45 08             	mov    0x8(%ebp),%eax
   11615:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11618:	8b 45 08             	mov    0x8(%ebp),%eax
   1161b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   11622:	8b 45 08             	mov    0x8(%ebp),%eax
   11625:	05 c8 00 00 00       	add    $0xc8,%eax
   1162a:	83 ec 04             	sub    $0x4,%esp
   1162d:	68 00 02 00 00       	push   $0x200
   11632:	6a 00                	push   $0x0
   11634:	50                   	push   %eax
   11635:	e8 55 49 00 00       	call   15f8f <kernel_memset>
   1163a:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1163d:	8b 45 08             	mov    0x8(%ebp),%eax
   11640:	83 c0 4c             	add    $0x4c,%eax
   11643:	83 ec 08             	sub    $0x8,%esp
   11646:	50                   	push   %eax
   11647:	68 10 20 02 00       	push   $0x22010
   1164c:	e8 4e 4e 00 00       	call   1649f <list_insert_last>
   11651:	83 c4 10             	add    $0x10,%esp

  return 1;
   11654:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11659:	c9                   	leave  
   1165a:	c3                   	ret    

0001165b <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   1165b:	55                   	push   %ebp
   1165c:	89 e5                	mov    %esp,%ebp
   1165e:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   11661:	8b 45 08             	mov    0x8(%ebp),%eax
   11664:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1166a:	85 c0                	test   %eax,%eax
   1166c:	74 18                	je     11686 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1166e:	8b 45 08             	mov    0x8(%ebp),%eax
   11671:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11677:	0f b7 c0             	movzwl %ax,%eax
   1167a:	83 ec 0c             	sub    $0xc,%esp
   1167d:	50                   	push   %eax
   1167e:	e8 c3 11 00 00       	call   12846 <gdt_free>
   11683:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   11686:	8b 45 08             	mov    0x8(%ebp),%eax
   11689:	8b 40 60             	mov    0x60(%eax),%eax
   1168c:	85 c0                	test   %eax,%eax
   1168e:	74 17                	je     116a7 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   11690:	8b 45 08             	mov    0x8(%ebp),%eax
   11693:	8b 40 60             	mov    0x60(%eax),%eax
   11696:	2d 00 10 00 00       	sub    $0x1000,%eax
   1169b:	83 ec 0c             	sub    $0xc,%esp
   1169e:	50                   	push   %eax
   1169f:	e8 b8 f7 ff ff       	call   10e5c <memory_free_page>
   116a4:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116a7:	8b 45 08             	mov    0x8(%ebp),%eax
   116aa:	8b 40 78             	mov    0x78(%eax),%eax
   116ad:	85 c0                	test   %eax,%eax
   116af:	74 12                	je     116c3 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	8b 40 78             	mov    0x78(%eax),%eax
   116b7:	83 ec 0c             	sub    $0xc,%esp
   116ba:	50                   	push   %eax
   116bb:	e8 b2 f4 ff ff       	call   10b72 <memory_destroy_uvm>
   116c0:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116c3:	8b 45 08             	mov    0x8(%ebp),%eax
   116c6:	83 c0 4c             	add    $0x4c,%eax
   116c9:	83 ec 08             	sub    $0x8,%esp
   116cc:	50                   	push   %eax
   116cd:	68 10 20 02 00       	push   $0x22010
   116d2:	e8 bd 4f 00 00       	call   16694 <list_remove>
   116d7:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116da:	83 ec 0c             	sub    $0xc,%esp
   116dd:	ff 75 08             	push   0x8(%ebp)
   116e0:	e8 3b 05 00 00       	call   11c20 <free_task>
   116e5:	83 c4 10             	add    $0x10,%esp
}
   116e8:	90                   	nop
   116e9:	c9                   	leave  
   116ea:	c3                   	ret    

000116eb <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   116eb:	55                   	push   %ebp
   116ec:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   116ee:	e8 3d fb ff ff       	call   11230 <hlt>
   116f3:	eb f9                	jmp    116ee <empty_task+0x3>

000116f5 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   116f5:	55                   	push   %ebp
   116f6:	89 e5                	mov    %esp,%ebp
   116f8:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   116fb:	e8 d1 10 00 00       	call   127d1 <gdt_alloc_desc>
   11700:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11703:	e8 c9 10 00 00       	call   127d1 <gdt_alloc_desc>
   11708:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   1170b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1170e:	0f b7 c0             	movzwl %ax,%eax
   11711:	68 f2 40 00 00       	push   $0x40f2
   11716:	6a ff                	push   $0xffffffff
   11718:	6a 00                	push   $0x0
   1171a:	50                   	push   %eax
   1171b:	e8 3f 0f 00 00       	call   1265f <segment_desc_set>
   11720:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11723:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11726:	0f b7 c0             	movzwl %ax,%eax
   11729:	68 fa 40 00 00       	push   $0x40fa
   1172e:	6a ff                	push   $0xffffffff
   11730:	6a 00                	push   $0x0
   11732:	50                   	push   %eax
   11733:	e8 27 0f 00 00       	call   1265f <segment_desc_set>
   11738:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   1173b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1173e:	a3 b8 25 02 00       	mov    %eax,0x225b8
  task_manager.app_data_selector = data_selector;
   11743:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11746:	a3 bc 25 02 00       	mov    %eax,0x225bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   1174b:	83 ec 0c             	sub    $0xc,%esp
   1174e:	68 04 20 02 00       	push   $0x22004
   11753:	e8 03 fa ff ff       	call   1115b <list_init>
   11758:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   1175b:	83 ec 0c             	sub    $0xc,%esp
   1175e:	68 10 20 02 00       	push   $0x22010
   11763:	e8 f3 f9 ff ff       	call   1115b <list_init>
   11768:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   1176b:	83 ec 0c             	sub    $0xc,%esp
   1176e:	68 1c 20 02 00       	push   $0x2201c
   11773:	e8 e3 f9 ff ff       	call   1115b <list_init>
   11778:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   1177b:	c7 05 00 20 02 00 00 	movl   $0x0,0x22000
   11782:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   11785:	ba e0 8b 03 00       	mov    $0x38be0,%edx
   1178a:	b8 eb 16 01 00       	mov    $0x116eb,%eax
   1178f:	83 ec 0c             	sub    $0xc,%esp
   11792:	6a 01                	push   $0x1
   11794:	52                   	push   %edx
   11795:	50                   	push   %eax
   11796:	68 d1 6a 01 00       	push   $0x16ad1
   1179b:	68 f0 22 02 00       	push   $0x222f0
   117a0:	e8 87 fd ff ff       	call   1152c <task_init>
   117a5:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	68 00 64 01 00       	push   $0x16400
   117b0:	6a 00                	push   $0x0
   117b2:	68 c0 25 02 00       	push   $0x225c0
   117b7:	e8 d3 47 00 00       	call   15f8f <kernel_memset>
   117bc:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117bf:	83 ec 0c             	sub    $0xc,%esp
   117c2:	68 c0 89 03 00       	push   $0x389c0
   117c7:	e8 91 3b 00 00       	call   1535d <mutex_init>
   117cc:	83 c4 10             	add    $0x10,%esp
}
   117cf:	90                   	nop
   117d0:	c9                   	leave  
   117d1:	c3                   	ret    

000117d2 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117d2:	55                   	push   %ebp
   117d3:	89 e5                	mov    %esp,%ebp
   117d5:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117d8:	b8 84 d3 06 00       	mov    $0x6d384,%eax
   117dd:	2d 00 d0 06 00       	sub    $0x6d000,%eax
  uint32_t copy_size =
   117e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   117e5:	68 00 10 00 00       	push   $0x1000
   117ea:	ff 75 f4             	push   -0xc(%ebp)
   117ed:	e8 93 fa ff ff       	call   11285 <up2>
   117f2:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   117f5:	05 00 a0 00 00       	add    $0xa000,%eax
   117fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   117fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11800:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11803:	72 1c                	jb     11821 <task_first_init+0x4f>
   11805:	68 dc 6a 01 00       	push   $0x16adc
   1180a:	68 f4 6b 01 00       	push   $0x16bf4
   1180f:	68 6e 01 00 00       	push   $0x16e
   11814:	68 9c 6a 01 00       	push   $0x16a9c
   11819:	e8 58 42 00 00       	call   15a76 <pannic>
   1181e:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   11821:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11828:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1182b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1182e:	01 d0                	add    %edx,%eax
   11830:	83 ec 0c             	sub    $0xc,%esp
   11833:	6a 00                	push   $0x0
   11835:	50                   	push   %eax
   11836:	ff 75 ec             	push   -0x14(%ebp)
   11839:	68 f3 6a 01 00       	push   $0x16af3
   1183e:	68 28 20 02 00       	push   $0x22028
   11843:	e8 e4 fc ff ff       	call   1152c <task_init>
   11848:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   1184b:	b8 84 d3 06 00       	mov    $0x6d384,%eax
  task_manager.first_task.heap_start =
   11850:	a3 38 20 02 00       	mov    %eax,0x22038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11855:	b8 84 d3 06 00       	mov    $0x6d384,%eax
   1185a:	a3 3c 20 02 00       	mov    %eax,0x2203c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1185f:	a1 ec 20 02 00       	mov    0x220ec,%eax
   11864:	0f b7 c0             	movzwl %ax,%eax
   11867:	83 ec 0c             	sub    $0xc,%esp
   1186a:	50                   	push   %eax
   1186b:	e8 ed f9 ff ff       	call   1125d <write_tr>
   11870:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11873:	c7 05 00 20 02 00 28 	movl   $0x22028,0x22000
   1187a:	20 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1187d:	a1 a0 20 02 00       	mov    0x220a0,%eax
   11882:	83 ec 0c             	sub    $0xc,%esp
   11885:	50                   	push   %eax
   11886:	e8 e9 f9 ff ff       	call   11274 <mmu_set_page_dir>
   1188b:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   1188e:	a1 00 20 02 00       	mov    0x22000,%eax
   11893:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11899:	83 ec 04             	sub    $0x4,%esp
   1189c:	6a 07                	push   $0x7
   1189e:	ff 75 f0             	push   -0x10(%ebp)
   118a1:	ff 75 ec             	push   -0x14(%ebp)
   118a4:	e8 61 f5 ff ff       	call   10e0a <memory_alloc_page_for>
   118a9:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118af:	83 ec 04             	sub    $0x4,%esp
   118b2:	50                   	push   %eax
   118b3:	68 00 d0 06 00       	push   $0x6d000
   118b8:	68 00 00 00 80       	push   $0x80000000
   118bd:	e8 7e 46 00 00       	call   15f40 <kernel_memcpy>
   118c2:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118c5:	83 ec 0c             	sub    $0xc,%esp
   118c8:	68 28 20 02 00       	push   $0x22028
   118cd:	e8 24 fc ff ff       	call   114f6 <task_start>
   118d2:	83 c4 10             	add    $0x10,%esp
}
   118d5:	90                   	nop
   118d6:	c9                   	leave  
   118d7:	c3                   	ret    

000118d8 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118d8:	55                   	push   %ebp
   118d9:	89 e5                	mov    %esp,%ebp
   118db:	b8 28 20 02 00       	mov    $0x22028,%eax
   118e0:	5d                   	pop    %ebp
   118e1:	c3                   	ret    

000118e2 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118e2:	55                   	push   %ebp
   118e3:	89 e5                	mov    %esp,%ebp
   118e5:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   118e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118ec:	75 1c                	jne    1190a <task_set_ready+0x28>
   118ee:	68 85 6a 01 00       	push   $0x16a85
   118f3:	68 04 6c 01 00       	push   $0x16c04
   118f8:	68 a0 01 00 00       	push   $0x1a0
   118fd:	68 9c 6a 01 00       	push   $0x16a9c
   11902:	e8 6f 41 00 00       	call   15a76 <pannic>
   11907:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   1190a:	8b 45 08             	mov    0x8(%ebp),%eax
   1190d:	83 c0 44             	add    $0x44,%eax
   11910:	83 ec 08             	sub    $0x8,%esp
   11913:	50                   	push   %eax
   11914:	68 04 20 02 00       	push   $0x22004
   11919:	e8 81 4b 00 00       	call   1649f <list_insert_last>
   1191e:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   11921:	90                   	nop
   11922:	c9                   	leave  
   11923:	c3                   	ret    

00011924 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11924:	55                   	push   %ebp
   11925:	89 e5                	mov    %esp,%ebp
   11927:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   1192a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1192e:	75 1c                	jne    1194c <task_set_unready+0x28>
   11930:	68 85 6a 01 00       	push   $0x16a85
   11935:	68 14 6c 01 00       	push   $0x16c14
   1193a:	68 af 01 00 00       	push   $0x1af
   1193f:	68 9c 6a 01 00       	push   $0x16a9c
   11944:	e8 2d 41 00 00       	call   15a76 <pannic>
   11949:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   1194c:	8b 45 08             	mov    0x8(%ebp),%eax
   1194f:	83 c0 44             	add    $0x44,%eax
   11952:	83 ec 08             	sub    $0x8,%esp
   11955:	50                   	push   %eax
   11956:	68 04 20 02 00       	push   $0x22004
   1195b:	e8 34 4d 00 00       	call   16694 <list_remove>
   11960:	83 c4 10             	add    $0x10,%esp
}
   11963:	90                   	nop
   11964:	c9                   	leave  
   11965:	c3                   	ret    

00011966 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11966:	55                   	push   %ebp
   11967:	89 e5                	mov    %esp,%ebp
   11969:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1196c:	83 ec 0c             	sub    $0xc,%esp
   1196f:	68 04 20 02 00       	push   $0x22004
   11974:	e8 8b f8 ff ff       	call   11204 <list_get_first>
   11979:	83 c4 10             	add    $0x10,%esp
   1197c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1197f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11983:	74 08                	je     1198d <task_ready_first+0x27>
   11985:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11988:	83 e8 44             	sub    $0x44,%eax
   1198b:	eb 05                	jmp    11992 <task_ready_first+0x2c>
   1198d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11992:	c9                   	leave  
   11993:	c3                   	ret    

00011994 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   11994:	55                   	push   %ebp
   11995:	89 e5                	mov    %esp,%ebp
   11997:	a1 00 20 02 00       	mov    0x22000,%eax
   1199c:	5d                   	pop    %ebp
   1199d:	c3                   	ret    

0001199e <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
   119a1:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119a4:	e8 53 18 00 00       	call   131fc <idt_enter_protection>
   119a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119ac:	e8 b5 ff ff ff       	call   11966 <task_ready_first>
   119b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119b4:	a1 00 20 02 00       	mov    0x22000,%eax
   119b9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119bc:	74 37                	je     119f5 <task_switch+0x57>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119be:	a1 00 20 02 00       	mov    0x22000,%eax
   119c3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119ca:	75 07                	jne    119d3 <task_switch+0x35>
      to = &task_manager.empty_task;
   119cc:	c7 45 f4 f0 22 02 00 	movl   $0x222f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119d6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    task_manager.curr_task = to;
   119dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119df:	a3 00 20 02 00       	mov    %eax,0x22000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   119e4:	83 ec 08             	sub    $0x8,%esp
   119e7:	ff 75 f4             	push   -0xc(%ebp)
   119ea:	ff 75 ec             	push   -0x14(%ebp)
   119ed:	e8 74 f9 ff ff       	call   11366 <task_switch_from_to>
   119f2:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   119f5:	83 ec 0c             	sub    $0xc,%esp
   119f8:	ff 75 f0             	push   -0x10(%ebp)
   119fb:	e8 14 18 00 00       	call   13214 <idt_leave_protection>
   11a00:	83 c4 10             	add    $0x10,%esp
}
   11a03:	90                   	nop
   11a04:	c9                   	leave  
   11a05:	c3                   	ret    

00011a06 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a06:	55                   	push   %ebp
   11a07:	89 e5                	mov    %esp,%ebp
   11a09:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a0c:	83 ec 0c             	sub    $0xc,%esp
   11a0f:	68 1c 20 02 00       	push   $0x2201c
   11a14:	e8 eb f7 ff ff       	call   11204 <list_get_first>
   11a19:	83 c4 10             	add    $0x10,%esp
   11a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a1f:	eb 62                	jmp    11a83 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a21:	83 ec 0c             	sub    $0xc,%esp
   11a24:	ff 75 f4             	push   -0xc(%ebp)
   11a27:	e8 02 f7 ff ff       	call   1112e <list_node_next>
   11a2c:	83 c4 10             	add    $0x10,%esp
   11a2f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a36:	74 08                	je     11a40 <task_slice_end+0x3a>
   11a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a3b:	83 e8 44             	sub    $0x44,%eax
   11a3e:	eb 05                	jmp    11a45 <task_slice_end+0x3f>
   11a40:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a45:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a4b:	8b 40 20             	mov    0x20(%eax),%eax
   11a4e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a51:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a54:	89 50 20             	mov    %edx,0x20(%eax)
   11a57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a5a:	8b 40 20             	mov    0x20(%eax),%eax
   11a5d:	85 c0                	test   %eax,%eax
   11a5f:	75 1c                	jne    11a7d <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a61:	83 ec 0c             	sub    $0xc,%esp
   11a64:	ff 75 e8             	push   -0x18(%ebp)
   11a67:	e8 01 01 00 00       	call   11b6d <task_set_wakeup>
   11a6c:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a6f:	83 ec 0c             	sub    $0xc,%esp
   11a72:	ff 75 e8             	push   -0x18(%ebp)
   11a75:	e8 68 fe ff ff       	call   118e2 <task_set_ready>
   11a7a:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a80:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11a83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a87:	75 98                	jne    11a21 <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11a89:	e8 06 ff ff ff       	call   11994 <task_current>
   11a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11a91:	81 7d f0 f0 22 02 00 	cmpl   $0x222f0,-0x10(%ebp)
   11a98:	75 23                	jne    11abd <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11a9a:	83 ec 0c             	sub    $0xc,%esp
   11a9d:	68 04 20 02 00       	push   $0x22004
   11aa2:	e8 fb f6 ff ff       	call   111a2 <list_is_empty>
   11aa7:	83 c4 10             	add    $0x10,%esp
   11aaa:	85 c0                	test   %eax,%eax
   11aac:	75 60                	jne    11b0e <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11aae:	c7 05 f0 22 02 00 00 	movl   $0x0,0x222f0
   11ab5:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ab8:	e8 e1 fe ff ff       	call   1199e <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11abd:	81 7d f0 f0 22 02 00 	cmpl   $0x222f0,-0x10(%ebp)
   11ac4:	74 49                	je     11b0f <task_slice_end+0x109>
   11ac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ac9:	8b 40 1c             	mov    0x1c(%eax),%eax
   11acc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad2:	89 50 1c             	mov    %edx,0x1c(%eax)
   11ad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad8:	8b 40 1c             	mov    0x1c(%eax),%eax
   11adb:	85 c0                	test   %eax,%eax
   11add:	75 30                	jne    11b0f <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae2:	8b 50 18             	mov    0x18(%eax),%edx
   11ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae8:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11aeb:	83 ec 0c             	sub    $0xc,%esp
   11aee:	ff 75 f0             	push   -0x10(%ebp)
   11af1:	e8 2e fe ff ff       	call   11924 <task_set_unready>
   11af6:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11af9:	83 ec 0c             	sub    $0xc,%esp
   11afc:	ff 75 f0             	push   -0x10(%ebp)
   11aff:	e8 de fd ff ff       	call   118e2 <task_set_ready>
   11b04:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b07:	e8 92 fe ff ff       	call   1199e <task_switch>
   11b0c:	eb 01                	jmp    11b0f <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b0e:	90                   	nop
  }
}
   11b0f:	c9                   	leave  
   11b10:	c3                   	ret    

00011b11 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b11:	55                   	push   %ebp
   11b12:	89 e5                	mov    %esp,%ebp
   11b14:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b1b:	75 1c                	jne    11b39 <task_set_sleep+0x28>
   11b1d:	68 85 6a 01 00       	push   $0x16a85
   11b22:	68 58 6c 01 00       	push   $0x16c58
   11b27:	68 18 02 00 00       	push   $0x218
   11b2c:	68 9c 6a 01 00       	push   $0x16a9c
   11b31:	e8 40 3f 00 00       	call   15a76 <pannic>
   11b36:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b3d:	74 2b                	je     11b6a <task_set_sleep+0x59>

  task->sleep = slice;
   11b3f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b42:	8b 45 08             	mov    0x8(%ebp),%eax
   11b45:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b48:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b51:	8b 45 08             	mov    0x8(%ebp),%eax
   11b54:	83 c0 44             	add    $0x44,%eax
   11b57:	83 ec 08             	sub    $0x8,%esp
   11b5a:	50                   	push   %eax
   11b5b:	68 1c 20 02 00       	push   $0x2201c
   11b60:	e8 3a 49 00 00       	call   1649f <list_insert_last>
   11b65:	83 c4 10             	add    $0x10,%esp
   11b68:	eb 01                	jmp    11b6b <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b6a:	90                   	nop
}
   11b6b:	c9                   	leave  
   11b6c:	c3                   	ret    

00011b6d <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b6d:	55                   	push   %ebp
   11b6e:	89 e5                	mov    %esp,%ebp
   11b70:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b77:	75 1c                	jne    11b95 <task_set_wakeup+0x28>
   11b79:	68 85 6a 01 00       	push   $0x16a85
   11b7e:	68 68 6c 01 00       	push   $0x16c68
   11b83:	68 26 02 00 00       	push   $0x226
   11b88:	68 9c 6a 01 00       	push   $0x16a9c
   11b8d:	e8 e4 3e 00 00       	call   15a76 <pannic>
   11b92:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11b95:	8b 45 08             	mov    0x8(%ebp),%eax
   11b98:	83 c0 44             	add    $0x44,%eax
   11b9b:	83 ec 08             	sub    $0x8,%esp
   11b9e:	50                   	push   %eax
   11b9f:	68 1c 20 02 00       	push   $0x2201c
   11ba4:	e8 eb 4a 00 00       	call   16694 <list_remove>
   11ba9:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bac:	8b 45 08             	mov    0x8(%ebp),%eax
   11baf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11bb5:	90                   	nop
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11bb8:	55                   	push   %ebp
   11bb9:	89 e5                	mov    %esp,%ebp
   11bbb:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11bc5:	83 ec 0c             	sub    $0xc,%esp
   11bc8:	68 c0 89 03 00       	push   $0x389c0
   11bcd:	e8 d8 37 00 00       	call   153aa <mutex_lock>
   11bd2:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11bd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bdc:	eb 27                	jmp    11c05 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11be1:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11be7:	05 c0 25 02 00       	add    $0x225c0,%eax
   11bec:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11bef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bf2:	8b 40 08             	mov    0x8(%eax),%eax
   11bf5:	85 c0                	test   %eax,%eax
   11bf7:	75 08                	jne    11c01 <alloc_task+0x49>
      task = curr;
   11bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11bff:	eb 0a                	jmp    11c0b <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c01:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c05:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c09:	7e d3                	jle    11bde <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c0b:	83 ec 0c             	sub    $0xc,%esp
   11c0e:	68 c0 89 03 00       	push   $0x389c0
   11c13:	e8 23 38 00 00       	call   1543b <mutex_unlock>
   11c18:	83 c4 10             	add    $0x10,%esp

  return task;
   11c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c1e:	c9                   	leave  
   11c1f:	c3                   	ret    

00011c20 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c20:	55                   	push   %ebp
   11c21:	89 e5                	mov    %esp,%ebp
   11c23:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c26:	83 ec 0c             	sub    $0xc,%esp
   11c29:	68 c0 89 03 00       	push   $0x389c0
   11c2e:	e8 77 37 00 00       	call   153aa <mutex_lock>
   11c33:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c36:	8b 45 08             	mov    0x8(%ebp),%eax
   11c39:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c40:	83 ec 0c             	sub    $0xc,%esp
   11c43:	68 c0 89 03 00       	push   $0x389c0
   11c48:	e8 ee 37 00 00       	call   1543b <mutex_unlock>
   11c4d:	83 c4 10             	add    $0x10,%esp
}
   11c50:	90                   	nop
   11c51:	c9                   	leave  
   11c52:	c3                   	ret    

00011c53 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c53:	55                   	push   %ebp
   11c54:	89 e5                	mov    %esp,%ebp
   11c56:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c59:	e8 9e 15 00 00       	call   131fc <idt_enter_protection>
   11c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c61:	e8 2e fd ff ff       	call   11994 <task_current>
   11c66:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11c69:	83 ec 0c             	sub    $0xc,%esp
   11c6c:	ff 75 f0             	push   -0x10(%ebp)
   11c6f:	e8 b0 fc ff ff       	call   11924 <task_set_unready>
   11c74:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11c77:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7a:	83 c0 09             	add    $0x9,%eax
   11c7d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11c82:	f7 e2                	mul    %edx
   11c84:	89 d0                	mov    %edx,%eax
   11c86:	c1 e8 03             	shr    $0x3,%eax
   11c89:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11c8c:	83 ec 08             	sub    $0x8,%esp
   11c8f:	ff 75 ec             	push   -0x14(%ebp)
   11c92:	ff 75 f0             	push   -0x10(%ebp)
   11c95:	e8 77 fe ff ff       	call   11b11 <task_set_sleep>
   11c9a:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11c9d:	e8 fc fc ff ff       	call   1199e <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11ca2:	83 ec 0c             	sub    $0xc,%esp
   11ca5:	ff 75 f4             	push   -0xc(%ebp)
   11ca8:	e8 67 15 00 00       	call   13214 <idt_leave_protection>
   11cad:	83 c4 10             	add    $0x10,%esp
}
   11cb0:	90                   	nop
   11cb1:	c9                   	leave  
   11cb2:	c3                   	ret    

00011cb3 <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cb3:	55                   	push   %ebp
   11cb4:	89 e5                	mov    %esp,%ebp
   11cb6:	e8 d9 fc ff ff       	call   11994 <task_current>
   11cbb:	8b 40 08             	mov    0x8(%eax),%eax
   11cbe:	5d                   	pop    %ebp
   11cbf:	c3                   	ret    

00011cc0 <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11cc0:	55                   	push   %ebp
   11cc1:	89 e5                	mov    %esp,%ebp
   11cc3:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11cc6:	e8 c9 fc ff ff       	call   11994 <task_current>
   11ccb:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11cce:	e8 e5 fe ff ff       	call   11bb8 <alloc_task>
   11cd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11cd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11cda:	0f 84 2b 01 00 00    	je     11e0b <sys_fork+0x14b>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ce3:	8b 40 60             	mov    0x60(%eax),%eax
   11ce6:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11ce9:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11cec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cef:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11cf2:	8d 48 14             	lea    0x14(%eax),%ecx
   11cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cf8:	8b 40 34             	mov    0x34(%eax),%eax
   11cfb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfe:	83 c2 24             	add    $0x24,%edx
   11d01:	83 ec 0c             	sub    $0xc,%esp
   11d04:	6a 00                	push   $0x0
   11d06:	51                   	push   %ecx
   11d07:	50                   	push   %eax
   11d08:	52                   	push   %edx
   11d09:	ff 75 f0             	push   -0x10(%ebp)
   11d0c:	e8 1b f8 ff ff       	call   1152c <task_init>
   11d11:	83 c4 20             	add    $0x20,%esp
   11d14:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d17:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d1b:	0f 88 ed 00 00 00    	js     11e0e <sys_fork+0x14e>

  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d24:	83 c0 5c             	add    $0x5c,%eax
   11d27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11d2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d2d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11d34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d37:	8b 50 24             	mov    0x24(%eax),%edx
   11d3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d3d:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11d40:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d43:	8b 50 2c             	mov    0x2c(%eax),%edx
   11d46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d49:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11d4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d4f:	8b 50 28             	mov    0x28(%eax),%edx
   11d52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d55:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d5b:	8b 50 14             	mov    0x14(%eax),%edx
   11d5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d61:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d67:	8b 50 18             	mov    0x18(%eax),%edx
   11d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d6d:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11d70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d73:	8b 10                	mov    (%eax),%edx
   11d75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d78:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d7e:	8b 50 1c             	mov    0x1c(%eax),%edx
   11d81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d84:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d8a:	8b 50 38             	mov    0x38(%eax),%edx
   11d8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d90:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11d93:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d96:	8b 50 10             	mov    0x10(%eax),%edx
   11d99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d9c:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11d9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11da2:	8b 50 0c             	mov    0xc(%eax),%edx
   11da5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11da8:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11dab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dae:	8b 50 08             	mov    0x8(%eax),%edx
   11db1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db4:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11db7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dba:	8b 50 04             	mov    0x4(%eax),%edx
   11dbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dc0:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11dc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dc6:	8b 50 54             	mov    0x54(%eax),%edx
   11dc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dcc:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11dd5:	89 50 04             	mov    %edx,0x4(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ddb:	8b 50 78             	mov    0x78(%eax),%edx
   11dde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11de1:	8b 40 1c             	mov    0x1c(%eax),%eax
   11de4:	83 ec 08             	sub    $0x8,%esp
   11de7:	52                   	push   %edx
   11de8:	50                   	push   %eax
   11de9:	e8 f7 eb ff ff       	call   109e5 <memory_copy_uvm>
   11dee:	83 c4 10             	add    $0x10,%esp
   11df1:	85 c0                	test   %eax,%eax
   11df3:	78 1c                	js     11e11 <sys_fork+0x151>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11df5:	83 ec 0c             	sub    $0xc,%esp
   11df8:	ff 75 f0             	push   -0x10(%ebp)
   11dfb:	e8 f6 f6 ff ff       	call   114f6 <task_start>
   11e00:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e06:	8b 40 08             	mov    0x8(%eax),%eax
   11e09:	eb 2e                	jmp    11e39 <sys_fork+0x179>
  if (child_task == (task_t *)0) goto fork_failed;
   11e0b:	90                   	nop
   11e0c:	eb 04                	jmp    11e12 <sys_fork+0x152>
  if (err < 0) goto fork_failed;
   11e0e:	90                   	nop
   11e0f:	eb 01                	jmp    11e12 <sys_fork+0x152>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e11:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11e12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e16:	74 1c                	je     11e34 <sys_fork+0x174>
    task_uninit(child_task);
   11e18:	83 ec 0c             	sub    $0xc,%esp
   11e1b:	ff 75 f0             	push   -0x10(%ebp)
   11e1e:	e8 38 f8 ff ff       	call   1165b <task_uninit>
   11e23:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11e26:	83 ec 0c             	sub    $0xc,%esp
   11e29:	ff 75 f0             	push   -0x10(%ebp)
   11e2c:	e8 ef fd ff ff       	call   11c20 <free_task>
   11e31:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11e34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11e39:	c9                   	leave  
   11e3a:	c3                   	ret    

00011e3b <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11e3b:	55                   	push   %ebp
   11e3c:	89 e5                	mov    %esp,%ebp
   11e3e:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11e41:	e8 b6 13 00 00       	call   131fc <idt_enter_protection>
   11e46:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11e49:	83 ec 0c             	sub    $0xc,%esp
   11e4c:	68 04 20 02 00       	push   $0x22004
   11e51:	e8 81 f3 ff ff       	call   111d7 <list_get_size>
   11e56:	83 c4 10             	add    $0x10,%esp
   11e59:	83 f8 01             	cmp    $0x1,%eax
   11e5c:	7e 29                	jle    11e87 <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11e5e:	e8 31 fb ff ff       	call   11994 <task_current>
   11e63:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11e66:	83 ec 0c             	sub    $0xc,%esp
   11e69:	ff 75 f0             	push   -0x10(%ebp)
   11e6c:	e8 b3 fa ff ff       	call   11924 <task_set_unready>
   11e71:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11e74:	83 ec 0c             	sub    $0xc,%esp
   11e77:	ff 75 f0             	push   -0x10(%ebp)
   11e7a:	e8 63 fa ff ff       	call   118e2 <task_set_ready>
   11e7f:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11e82:	e8 17 fb ff ff       	call   1199e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11e87:	83 ec 0c             	sub    $0xc,%esp
   11e8a:	ff 75 f4             	push   -0xc(%ebp)
   11e8d:	e8 82 13 00 00       	call   13214 <idt_leave_protection>
   11e92:	83 c4 10             	add    $0x10,%esp
  return 0;
   11e95:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e9a:	c9                   	leave  
   11e9b:	c3                   	ret    

00011e9c <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11e9c:	55                   	push   %ebp
   11e9d:	89 e5                	mov    %esp,%ebp
   11e9f:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11ea2:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eac:	8b 40 18             	mov    0x18(%eax),%eax
   11eaf:	83 e0 02             	and    $0x2,%eax
   11eb2:	85 c0                	test   %eax,%eax
   11eb4:	74 04                	je     11eba <load_phdr+0x1e>
    privilege |= PTE_W;
   11eb6:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11eba:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ebd:	8b 50 14             	mov    0x14(%eax),%edx
   11ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec3:	8b 40 08             	mov    0x8(%eax),%eax
   11ec6:	ff 75 f4             	push   -0xc(%ebp)
   11ec9:	52                   	push   %edx
   11eca:	50                   	push   %eax
   11ecb:	ff 75 10             	push   0x10(%ebp)
   11ece:	e8 7f ee ff ff       	call   10d52 <memory_alloc_for_page_dir>
   11ed3:	83 c4 10             	add    $0x10,%esp
   11ed6:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11ed9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11edd:	79 1a                	jns    11ef9 <load_phdr+0x5d>
    log_printf("no memory\n");
   11edf:	83 ec 0c             	sub    $0xc,%esp
   11ee2:	68 fe 6a 01 00       	push   $0x16afe
   11ee7:	e8 a0 48 00 00       	call   1678c <log_printf>
   11eec:	83 c4 10             	add    $0x10,%esp
    return -1;
   11eef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ef4:	e9 b5 00 00 00       	jmp    11fae <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11ef9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11efc:	8b 40 04             	mov    0x4(%eax),%eax
   11eff:	83 ec 04             	sub    $0x4,%esp
   11f02:	6a 00                	push   $0x0
   11f04:	50                   	push   %eax
   11f05:	ff 75 08             	push   0x8(%ebp)
   11f08:	e8 f4 31 00 00       	call   15101 <sys_lseek>
   11f0d:	83 c4 10             	add    $0x10,%esp
   11f10:	85 c0                	test   %eax,%eax
   11f12:	79 1a                	jns    11f2e <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11f14:	83 ec 0c             	sub    $0xc,%esp
   11f17:	68 09 6b 01 00       	push   $0x16b09
   11f1c:	e8 6b 48 00 00       	call   1678c <log_printf>
   11f21:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f29:	e9 80 00 00 00       	jmp    11fae <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11f2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f31:	8b 40 08             	mov    0x8(%eax),%eax
   11f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11f37:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f3a:	8b 40 10             	mov    0x10(%eax),%eax
   11f3d:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11f40:	eb 61                	jmp    11fa3 <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f45:	ba 00 10 00 00       	mov    $0x1000,%edx
   11f4a:	39 d0                	cmp    %edx,%eax
   11f4c:	0f 47 c2             	cmova  %edx,%eax
   11f4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11f52:	83 ec 08             	sub    $0x8,%esp
   11f55:	ff 75 f0             	push   -0x10(%ebp)
   11f58:	ff 75 10             	push   0x10(%ebp)
   11f5b:	e8 95 ef ff ff       	call   10ef5 <memory_get_paddr>
   11f60:	83 c4 10             	add    $0x10,%esp
   11f63:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   11f66:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11f69:	83 ec 04             	sub    $0x4,%esp
   11f6c:	ff 75 e4             	push   -0x1c(%ebp)
   11f6f:	50                   	push   %eax
   11f70:	ff 75 08             	push   0x8(%ebp)
   11f73:	e8 bd 30 00 00       	call   15035 <sys_read>
   11f78:	83 c4 10             	add    $0x10,%esp
   11f7b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11f7e:	7e 17                	jle    11f97 <load_phdr+0xfb>
      log_printf("read file failed\n");
   11f80:	83 ec 0c             	sub    $0xc,%esp
   11f83:	68 1c 6b 01 00       	push   $0x16b1c
   11f88:	e8 ff 47 00 00       	call   1678c <log_printf>
   11f8d:	83 c4 10             	add    $0x10,%esp
      return -1;
   11f90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f95:	eb 17                	jmp    11fae <load_phdr+0x112>
    }

    size -= curr_size;
   11f97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f9a:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   11f9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11fa0:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   11fa3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fa7:	75 99                	jne    11f42 <load_phdr+0xa6>
  }

  return 0;
   11fa9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11fae:	c9                   	leave  
   11faf:	c3                   	ret    

00011fb0 <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   11fb0:	55                   	push   %ebp
   11fb1:	89 e5                	mov    %esp,%ebp
   11fb3:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   11fb6:	83 ec 08             	sub    $0x8,%esp
   11fb9:	6a 00                	push   $0x0
   11fbb:	ff 75 0c             	push   0xc(%ebp)
   11fbe:	e8 0d 2f 00 00       	call   14ed0 <sys_open>
   11fc3:	83 c4 10             	add    $0x10,%esp
   11fc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   11fc9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fcd:	79 18                	jns    11fe7 <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   11fcf:	83 ec 08             	sub    $0x8,%esp
   11fd2:	ff 75 0c             	push   0xc(%ebp)
   11fd5:	68 2e 6b 01 00       	push   $0x16b2e
   11fda:	e8 ad 47 00 00       	call   1678c <log_printf>
   11fdf:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   11fe2:	e9 c1 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11fe7:	83 ec 04             	sub    $0x4,%esp
   11fea:	6a 34                	push   $0x34
   11fec:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11fef:	50                   	push   %eax
   11ff0:	ff 75 ec             	push   -0x14(%ebp)
   11ff3:	e8 3d 30 00 00       	call   15035 <sys_read>
   11ff8:	83 c4 10             	add    $0x10,%esp
   11ffb:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   11ffe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12001:	83 f8 33             	cmp    $0x33,%eax
   12004:	77 18                	ja     1201e <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   12006:	83 ec 08             	sub    $0x8,%esp
   12009:	ff 75 e8             	push   -0x18(%ebp)
   1200c:	68 3e 6b 01 00       	push   $0x16b3e
   12011:	e8 76 47 00 00       	call   1678c <log_printf>
   12016:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12019:	e9 8a 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   1201e:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   12022:	3c 7f                	cmp    $0x7f,%al
   12024:	75 18                	jne    1203e <load_elf_file+0x8e>
   12026:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   1202a:	3c 45                	cmp    $0x45,%al
   1202c:	75 10                	jne    1203e <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   1202e:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   12032:	3c 4c                	cmp    $0x4c,%al
   12034:	75 08                	jne    1203e <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   12036:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   1203a:	3c 46                	cmp    $0x46,%al
   1203c:	74 15                	je     12053 <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   1203e:	83 ec 0c             	sub    $0xc,%esp
   12041:	68 5a 6b 01 00       	push   $0x16b5a
   12046:	e8 41 47 00 00       	call   1678c <log_printf>
   1204b:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1204e:	e9 55 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   12053:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   12057:	66 83 f8 02          	cmp    $0x2,%ax
   1205b:	75 11                	jne    1206e <load_elf_file+0xbe>
   1205d:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   12061:	66 83 f8 03          	cmp    $0x3,%ax
   12065:	75 07                	jne    1206e <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   12067:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   1206a:	85 c0                	test   %eax,%eax
   1206c:	75 15                	jne    12083 <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   1206e:	83 ec 0c             	sub    $0xc,%esp
   12071:	68 74 6b 01 00       	push   $0x16b74
   12076:	e8 11 47 00 00       	call   1678c <log_printf>
   1207b:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1207e:	e9 25 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   12083:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12087:	66 85 c0             	test   %ax,%ax
   1208a:	74 07                	je     12093 <load_elf_file+0xe3>
   1208c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1208f:	85 c0                	test   %eax,%eax
   12091:	75 15                	jne    120a8 <load_elf_file+0xf8>
    log_printf("none programe header\n");
   12093:	83 ec 0c             	sub    $0xc,%esp
   12096:	68 95 6b 01 00       	push   $0x16b95
   1209b:	e8 ec 46 00 00       	call   1678c <log_printf>
   120a0:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120a3:	e9 00 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   120a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
   120ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   120ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   120b5:	e9 cb 00 00 00       	jmp    12185 <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   120ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120bd:	83 ec 04             	sub    $0x4,%esp
   120c0:	6a 00                	push   $0x0
   120c2:	50                   	push   %eax
   120c3:	ff 75 ec             	push   -0x14(%ebp)
   120c6:	e8 36 30 00 00       	call   15101 <sys_lseek>
   120cb:	83 c4 10             	add    $0x10,%esp
   120ce:	85 c0                	test   %eax,%eax
   120d0:	79 15                	jns    120e7 <load_elf_file+0x137>
      log_printf("read file failed\n");
   120d2:	83 ec 0c             	sub    $0xc,%esp
   120d5:	68 1c 6b 01 00       	push   $0x16b1c
   120da:	e8 ad 46 00 00       	call   1678c <log_printf>
   120df:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   120e2:	e9 c1 00 00 00       	jmp    121a8 <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   120e7:	83 ec 04             	sub    $0x4,%esp
   120ea:	6a 20                	push   $0x20
   120ec:	8d 45 90             	lea    -0x70(%ebp),%eax
   120ef:	50                   	push   %eax
   120f0:	ff 75 ec             	push   -0x14(%ebp)
   120f3:	e8 3d 2f 00 00       	call   15035 <sys_read>
   120f8:	83 c4 10             	add    $0x10,%esp
   120fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   120fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12101:	83 f8 1f             	cmp    $0x1f,%eax
   12104:	77 15                	ja     1211b <load_elf_file+0x16b>
      log_printf("read file failed\n");
   12106:	83 ec 0c             	sub    $0xc,%esp
   12109:	68 1c 6b 01 00       	push   $0x16b1c
   1210e:	e8 79 46 00 00       	call   1678c <log_printf>
   12113:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12116:	e9 8d 00 00 00       	jmp    121a8 <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   1211b:	8b 45 90             	mov    -0x70(%ebp),%eax
   1211e:	83 f8 01             	cmp    $0x1,%eax
   12121:	75 53                	jne    12176 <load_elf_file+0x1c6>
   12123:	8b 45 98             	mov    -0x68(%ebp),%eax
   12126:	85 c0                	test   %eax,%eax
   12128:	79 4c                	jns    12176 <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   1212a:	83 ec 04             	sub    $0x4,%esp
   1212d:	ff 75 10             	push   0x10(%ebp)
   12130:	8d 45 90             	lea    -0x70(%ebp),%eax
   12133:	50                   	push   %eax
   12134:	ff 75 ec             	push   -0x14(%ebp)
   12137:	e8 60 fd ff ff       	call   11e9c <load_phdr>
   1213c:	83 c4 10             	add    $0x10,%esp
   1213f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   12142:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12146:	79 12                	jns    1215a <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   12148:	83 ec 0c             	sub    $0xc,%esp
   1214b:	68 ab 6b 01 00       	push   $0x16bab
   12150:	e8 37 46 00 00       	call   1678c <log_printf>
   12155:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12158:	eb 4e                	jmp    121a8 <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   1215a:	8b 55 98             	mov    -0x68(%ebp),%edx
   1215d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   12160:	01 c2                	add    %eax,%edx
   12162:	8b 45 08             	mov    0x8(%ebp),%eax
   12165:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   12168:	8b 45 08             	mov    0x8(%ebp),%eax
   1216b:	8b 50 10             	mov    0x10(%eax),%edx
   1216e:	8b 45 08             	mov    0x8(%ebp),%eax
   12171:	89 50 14             	mov    %edx,0x14(%eax)
   12174:	eb 01                	jmp    12177 <load_elf_file+0x1c7>
      continue;
   12176:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12177:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1217b:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   1217f:	0f b7 c0             	movzwl %ax,%eax
   12182:	01 45 f4             	add    %eax,-0xc(%ebp)
   12185:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   12189:	0f b7 c0             	movzwl %ax,%eax
   1218c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1218f:	0f 8c 25 ff ff ff    	jl     120ba <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   12195:	83 ec 0c             	sub    $0xc,%esp
   12198:	ff 75 ec             	push   -0x14(%ebp)
   1219b:	e8 85 2f 00 00       	call   15125 <sys_close>
   121a0:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   121a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
   121a6:	eb 19                	jmp    121c1 <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   121a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   121ac:	78 0e                	js     121bc <load_elf_file+0x20c>
    sys_close(file);
   121ae:	83 ec 0c             	sub    $0xc,%esp
   121b1:	ff 75 ec             	push   -0x14(%ebp)
   121b4:	e8 6c 2f 00 00       	call   15125 <sys_close>
   121b9:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   121bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121c1:	c9                   	leave  
   121c2:	c3                   	ret    

000121c3 <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   121c3:	55                   	push   %ebp
   121c4:	89 e5                	mov    %esp,%ebp
   121c6:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   121c9:	8b 45 14             	mov    0x14(%ebp),%eax
   121cc:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   121cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d2:	83 c0 0c             	add    $0xc,%eax
   121d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **to_argv_paddr =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   121d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
   121db:	83 ec 08             	sub    $0x8,%esp
   121de:	50                   	push   %eax
   121df:	ff 75 08             	push   0x8(%ebp)
   121e2:	e8 0e ed ff ff       	call   10ef5 <memory_get_paddr>
   121e7:	83 c4 10             	add    $0x10,%esp
  char **to_argv_paddr =
   121ea:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小，
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * argc;
   121ed:	8b 45 14             	mov    0x14(%ebp),%eax
   121f0:	83 c0 03             	add    $0x3,%eax
   121f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   121fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   121fd:	01 d0                	add    %edx,%eax
   121ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   12202:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12209:	e9 82 00 00 00       	jmp    12290 <copy_args+0xcd>
    char *from = argv[i];
   1220e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12211:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12218:	8b 45 10             	mov    0x10(%ebp),%eax
   1221b:	01 d0                	add    %edx,%eax
   1221d:	8b 00                	mov    (%eax),%eax
   1221f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   12222:	83 ec 0c             	sub    $0xc,%esp
   12225:	ff 75 e8             	push   -0x18(%ebp)
   12228:	e8 de 3c 00 00       	call   15f0b <kernel_strlen>
   1222d:	83 c4 10             	add    $0x10,%esp
   12230:	83 c0 01             	add    $0x1,%eax
   12233:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   12236:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   12239:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1223c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1223f:	51                   	push   %ecx
   12240:	52                   	push   %edx
   12241:	ff 75 08             	push   0x8(%ebp)
   12244:	50                   	push   %eax
   12245:	e8 fe ec ff ff       	call   10f48 <memory_copy_uvm_data>
   1224a:	83 c4 10             	add    $0x10,%esp
   1224d:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   12250:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12254:	79 1c                	jns    12272 <copy_args+0xaf>
   12256:	68 c0 6b 01 00       	push   $0x16bc0
   1225b:	68 88 6c 01 00       	push   $0x16c88
   12260:	68 81 03 00 00       	push   $0x381
   12265:	68 9c 6a 01 00       	push   $0x16a9c
   1226a:	e8 07 38 00 00       	call   15a76 <pannic>
   1226f:	83 c4 10             	add    $0x10,%esp
    to_argv_paddr[i] = dest_arg;
   12272:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12275:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1227c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1227f:	01 c2                	add    %eax,%edx
   12281:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12284:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   12286:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12289:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   1228c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12290:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12293:	3b 45 14             	cmp    0x14(%ebp),%eax
   12296:	0f 8c 72 ff ff ff    	jl     1220e <copy_args+0x4b>
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   1229c:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1229f:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a2:	6a 0c                	push   $0xc
   122a4:	52                   	push   %edx
   122a5:	ff 75 08             	push   0x8(%ebp)
   122a8:	50                   	push   %eax
   122a9:	e8 9a ec ff ff       	call   10f48 <memory_copy_uvm_data>
   122ae:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   122b1:	90                   	nop
   122b2:	c9                   	leave  
   122b3:	c3                   	ret    

000122b4 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   122b4:	55                   	push   %ebp
   122b5:	89 e5                	mov    %esp,%ebp
   122b7:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   122ba:	e8 d5 f6 ff ff       	call   11994 <task_current>
   122bf:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   122c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122c5:	8b 40 78             	mov    0x78(%eax),%eax
   122c8:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   122cb:	e8 90 e6 ff ff       	call   10960 <memory_creat_uvm>
   122d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   122d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   122d7:	0f 84 4a 01 00 00    	je     12427 <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   122dd:	83 ec 04             	sub    $0x4,%esp
   122e0:	ff 75 ec             	push   -0x14(%ebp)
   122e3:	ff 75 08             	push   0x8(%ebp)
   122e6:	ff 75 f4             	push   -0xc(%ebp)
   122e9:	e8 c2 fc ff ff       	call   11fb0 <load_elf_file>
   122ee:	83 c4 10             	add    $0x10,%esp
   122f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   122f4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   122f8:	0f 84 2c 01 00 00    	je     1242a <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   122fe:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   12305:	6a 07                	push   $0x7
   12307:	68 00 20 03 00       	push   $0x32000
   1230c:	68 00 e0 fc df       	push   $0xdffce000
   12311:	ff 75 ec             	push   -0x14(%ebp)
   12314:	e8 39 ea ff ff       	call   10d52 <memory_alloc_for_page_dir>
   12319:	83 c4 10             	add    $0x10,%esp
   1231c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   1231f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12323:	0f 88 04 01 00 00    	js     1242d <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   12329:	83 ec 0c             	sub    $0xc,%esp
   1232c:	ff 75 0c             	push   0xc(%ebp)
   1232f:	e8 0b 40 00 00       	call   1633f <strings_count>
   12334:	83 c4 10             	add    $0x10,%esp
   12337:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   1233a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1233d:	ff 75 dc             	push   -0x24(%ebp)
   12340:	ff 75 0c             	push   0xc(%ebp)
   12343:	50                   	push   %eax
   12344:	ff 75 ec             	push   -0x14(%ebp)
   12347:	e8 77 fe ff ff       	call   121c3 <copy_args>
   1234c:	83 c4 10             	add    $0x10,%esp
   1234f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   12352:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12356:	0f 88 d4 00 00 00    	js     12430 <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   1235c:	e8 33 f6 ff ff       	call   11994 <task_current>
   12361:	8b 40 60             	mov    0x60(%eax),%eax
   12364:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   12367:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   1236a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1236d:	8d 50 ec             	lea    -0x14(%eax),%edx
   12370:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12373:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   12376:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12379:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1237c:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1237f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12382:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12389:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1238c:	8b 50 28             	mov    0x28(%eax),%edx
   1238f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12392:	89 50 2c             	mov    %edx,0x2c(%eax)
   12395:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12398:	8b 50 2c             	mov    0x2c(%eax),%edx
   1239b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1239e:	89 50 24             	mov    %edx,0x24(%eax)
   123a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123a4:	8b 50 24             	mov    0x24(%eax),%edx
   123a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123aa:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   123ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123b0:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   123b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123ba:	8b 50 1c             	mov    0x1c(%eax),%edx
   123bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123c0:	89 50 14             	mov    %edx,0x14(%eax)
   123c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123c6:	8b 50 14             	mov    0x14(%eax),%edx
   123c9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123cc:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   123cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123d2:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   123d8:	83 ec 0c             	sub    $0xc,%esp
   123db:	ff 75 08             	push   0x8(%ebp)
   123de:	e8 89 3f 00 00       	call   1636c <get_file_name>
   123e3:	83 c4 10             	add    $0x10,%esp
   123e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123e9:	83 c2 24             	add    $0x24,%edx
   123ec:	83 ec 04             	sub    $0x4,%esp
   123ef:	6a 20                	push   $0x20
   123f1:	50                   	push   %eax
   123f2:	52                   	push   %edx
   123f3:	e8 41 3a 00 00       	call   15e39 <kernel_strncpy>
   123f8:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   123fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12401:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   12404:	83 ec 0c             	sub    $0xc,%esp
   12407:	ff 75 ec             	push   -0x14(%ebp)
   1240a:	e8 65 ee ff ff       	call   11274 <mmu_set_page_dir>
   1240f:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   12412:	83 ec 0c             	sub    $0xc,%esp
   12415:	ff 75 f0             	push   -0x10(%ebp)
   12418:	e8 55 e7 ff ff       	call   10b72 <memory_destroy_uvm>
   1241d:	83 c4 10             	add    $0x10,%esp
  return 0;
   12420:	b8 00 00 00 00       	mov    $0x0,%eax
   12425:	eb 3a                	jmp    12461 <sys_execve+0x1ad>
    goto exec_failed;
   12427:	90                   	nop
   12428:	eb 07                	jmp    12431 <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   1242a:	90                   	nop
   1242b:	eb 04                	jmp    12431 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   1242d:	90                   	nop
   1242e:	eb 01                	jmp    12431 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   12430:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   12431:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12435:	74 25                	je     1245c <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   12437:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1243a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1243d:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   12440:	83 ec 0c             	sub    $0xc,%esp
   12443:	ff 75 f0             	push   -0x10(%ebp)
   12446:	e8 29 ee ff ff       	call   11274 <mmu_set_page_dir>
   1244b:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   1244e:	83 ec 0c             	sub    $0xc,%esp
   12451:	ff 75 ec             	push   -0x14(%ebp)
   12454:	e8 19 e7 ff ff       	call   10b72 <memory_destroy_uvm>
   12459:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   1245c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12461:	c9                   	leave  
   12462:	c3                   	ret    

00012463 <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   12463:	55                   	push   %ebp
   12464:	89 e5                	mov    %esp,%ebp
   12466:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   12469:	e8 26 f5 ff ff       	call   11994 <task_current>
   1246e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12471:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12478:	eb 39                	jmp    124b3 <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   1247a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1247d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12480:	83 c2 30             	add    $0x30,%edx
   12483:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   12487:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (file) {
   1248a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1248e:	74 1f                	je     124af <sys_exit+0x4c>
      sys_close(fd);
   12490:	83 ec 0c             	sub    $0xc,%esp
   12493:	ff 75 f4             	push   -0xc(%ebp)
   12496:	e8 8a 2c 00 00       	call   15125 <sys_close>
   1249b:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   1249e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   124a4:	83 c2 30             	add    $0x30,%edx
   124a7:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   124ae:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   124af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124b3:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   124b7:	7e c1                	jle    1247a <sys_exit+0x17>
    }
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   124b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124bc:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   124c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124c5:	8b 55 08             	mov    0x8(%ebp),%edx
   124c8:	89 50 0c             	mov    %edx,0xc(%eax)

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   124cb:	e8 2c 0d 00 00       	call   131fc <idt_enter_protection>
   124d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   124d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124d6:	8b 40 04             	mov    0x4(%eax),%eax
   124d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (parent->state ==
   124dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124df:	8b 00                	mov    (%eax),%eax
   124e1:	83 f8 04             	cmp    $0x4,%eax
   124e4:	75 0e                	jne    124f4 <sys_exit+0x91>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   124e6:	83 ec 0c             	sub    $0xc,%esp
   124e9:	ff 75 e8             	push   -0x18(%ebp)
   124ec:	e8 f1 f3 ff ff       	call   118e2 <task_set_ready>
   124f1:	83 c4 10             	add    $0x10,%esp
  }

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   124f4:	83 ec 0c             	sub    $0xc,%esp
   124f7:	ff 75 f0             	push   -0x10(%ebp)
   124fa:	e8 25 f4 ff ff       	call   11924 <task_set_unready>
   124ff:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   12502:	e8 97 f4 ff ff       	call   1199e <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   12507:	83 ec 0c             	sub    $0xc,%esp
   1250a:	ff 75 ec             	push   -0x14(%ebp)
   1250d:	e8 02 0d 00 00       	call   13214 <idt_leave_protection>
   12512:	83 c4 10             	add    $0x10,%esp
}
   12515:	90                   	nop
   12516:	c9                   	leave  
   12517:	c3                   	ret    

00012518 <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   12518:	55                   	push   %ebp
   12519:	89 e5                	mov    %esp,%ebp
   1251b:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   1251e:	e8 71 f4 ff ff       	call   11994 <task_current>
   12523:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   12526:	83 ec 0c             	sub    $0xc,%esp
   12529:	68 c0 89 03 00       	push   $0x389c0
   1252e:	e8 77 2e 00 00       	call   153aa <mutex_lock>
   12533:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   12536:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1253d:	eb 62                	jmp    125a1 <sys_wait+0x89>
      task_t *task = task_table + i;
   1253f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12542:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12548:	05 c0 25 02 00       	add    $0x225c0,%eax
   1254d:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->parent != curr_task) {
   12550:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12553:	8b 40 04             	mov    0x4(%eax),%eax
   12556:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12559:	75 41                	jne    1259c <sys_wait+0x84>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   1255b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1255e:	8b 00                	mov    (%eax),%eax
   12560:	83 f8 06             	cmp    $0x6,%eax
   12563:	75 38                	jne    1259d <sys_wait+0x85>
        int pid = task->pid;
   12565:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12568:	8b 40 08             	mov    0x8(%eax),%eax
   1256b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   1256e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12571:	8b 50 0c             	mov    0xc(%eax),%edx
   12574:	8b 45 08             	mov    0x8(%ebp),%eax
   12577:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   12579:	83 ec 0c             	sub    $0xc,%esp
   1257c:	ff 75 e8             	push   -0x18(%ebp)
   1257f:	e8 d7 f0 ff ff       	call   1165b <task_uninit>
   12584:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   12587:	83 ec 0c             	sub    $0xc,%esp
   1258a:	68 c0 89 03 00       	push   $0x389c0
   1258f:	e8 a7 2e 00 00       	call   1543b <mutex_unlock>
   12594:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   12597:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1259a:	eb 52                	jmp    125ee <sys_wait+0xd6>
        continue;
   1259c:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   1259d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   125a1:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   125a5:	7e 98                	jle    1253f <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   125a7:	83 ec 0c             	sub    $0xc,%esp
   125aa:	68 c0 89 03 00       	push   $0x389c0
   125af:	e8 87 2e 00 00       	call   1543b <mutex_unlock>
   125b4:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   125b7:	e8 40 0c 00 00       	call   131fc <idt_enter_protection>
   125bc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   125bf:	83 ec 0c             	sub    $0xc,%esp
   125c2:	ff 75 f0             	push   -0x10(%ebp)
   125c5:	e8 5a f3 ff ff       	call   11924 <task_set_unready>
   125ca:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   125cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125d0:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   125d6:	e8 c3 f3 ff ff       	call   1199e <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   125db:	83 ec 0c             	sub    $0xc,%esp
   125de:	ff 75 ec             	push   -0x14(%ebp)
   125e1:	e8 2e 0c 00 00       	call   13214 <idt_leave_protection>
   125e6:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   125e9:	e9 38 ff ff ff       	jmp    12526 <sys_wait+0xe>
  }
  return 0;
   125ee:	c9                   	leave  
   125ef:	c3                   	ret    

000125f0 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   125f0:	55                   	push   %ebp
   125f1:	89 e5                	mov    %esp,%ebp
   125f3:	83 ec 08             	sub    $0x8,%esp
   125f6:	8b 55 0c             	mov    0xc(%ebp),%edx
   125f9:	8b 45 14             	mov    0x14(%ebp),%eax
   125fc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12600:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12604:	8b 45 10             	mov    0x10(%ebp),%eax
   12607:	89 c2                	mov    %eax,%edx
   12609:	8b 45 08             	mov    0x8(%ebp),%eax
   1260c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1260f:	8b 45 10             	mov    0x10(%ebp),%eax
   12612:	c1 e8 10             	shr    $0x10,%eax
   12615:	89 c2                	mov    %eax,%edx
   12617:	8b 45 08             	mov    0x8(%ebp),%eax
   1261a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1261e:	8b 45 08             	mov    0x8(%ebp),%eax
   12621:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12625:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12629:	8b 45 08             	mov    0x8(%ebp),%eax
   1262c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12630:	66 89 50 04          	mov    %dx,0x4(%eax)
   12634:	90                   	nop
   12635:	c9                   	leave  
   12636:	c3                   	ret    

00012637 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12637:	55                   	push   %ebp
   12638:	89 e5                	mov    %esp,%ebp
   1263a:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1263d:	8b 45 08             	mov    0x8(%ebp),%eax
   12640:	c1 e8 10             	shr    $0x10,%eax
   12643:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   12647:	8b 45 08             	mov    0x8(%ebp),%eax
   1264a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1264e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12651:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   12654:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12658:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1265c:	90                   	nop
   1265d:	c9                   	leave  
   1265e:	c3                   	ret    

0001265f <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1265f:	55                   	push   %ebp
   12660:	89 e5                	mov    %esp,%ebp
   12662:	83 ec 18             	sub    $0x18,%esp
   12665:	8b 55 08             	mov    0x8(%ebp),%edx
   12668:	8b 45 14             	mov    0x14(%ebp),%eax
   1266b:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1266f:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   12673:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12677:	66 c1 e8 03          	shr    $0x3,%ax
   1267b:	0f b7 c0             	movzwl %ax,%eax
   1267e:	c1 e0 03             	shl    $0x3,%eax
   12681:	05 e0 8b 03 00       	add    $0x38be0,%eax
   12686:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   12689:	8b 45 0c             	mov    0xc(%ebp),%eax
   1268c:	89 c2                	mov    %eax,%edx
   1268e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12691:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   12695:	8b 45 0c             	mov    0xc(%ebp),%eax
   12698:	c1 e8 10             	shr    $0x10,%eax
   1269b:	89 c2                	mov    %eax,%edx
   1269d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126a0:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   126a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   126a6:	c1 e8 18             	shr    $0x18,%eax
   126a9:	89 c2                	mov    %eax,%edx
   126ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126ae:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   126b1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   126b8:	76 1d                	jbe    126d7 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   126ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126bd:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   126c1:	66 0d 00 80          	or     $0x8000,%ax
   126c5:	89 c2                	mov    %eax,%edx
   126c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126ca:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   126ce:	8b 45 10             	mov    0x10(%ebp),%eax
   126d1:	c1 e8 0c             	shr    $0xc,%eax
   126d4:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   126d7:	8b 45 10             	mov    0x10(%ebp),%eax
   126da:	89 c2                	mov    %eax,%edx
   126dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126df:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   126e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126e5:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   126e9:	89 c2                	mov    %eax,%edx
   126eb:	8b 45 10             	mov    0x10(%ebp),%eax
   126ee:	c1 e8 08             	shr    $0x8,%eax
   126f1:	66 25 00 0f          	and    $0xf00,%ax
   126f5:	09 d0                	or     %edx,%eax
   126f7:	89 c2                	mov    %eax,%edx
   126f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126fc:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   12700:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12703:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12707:	89 c2                	mov    %eax,%edx
   12709:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1270d:	80 e4 f0             	and    $0xf0,%ah
   12710:	09 d0                	or     %edx,%eax
   12712:	89 c2                	mov    %eax,%edx
   12714:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12717:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1271b:	90                   	nop
   1271c:	c9                   	leave  
   1271d:	c3                   	ret    

0001271e <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1271e:	55                   	push   %ebp
   1271f:	89 e5                	mov    %esp,%ebp
   12721:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1272b:	eb 1c                	jmp    12749 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1272d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12730:	c1 e0 03             	shl    $0x3,%eax
   12733:	0f b7 c0             	movzwl %ax,%eax
   12736:	6a 00                	push   $0x0
   12738:	6a 00                	push   $0x0
   1273a:	6a 00                	push   $0x0
   1273c:	50                   	push   %eax
   1273d:	e8 1d ff ff ff       	call   1265f <segment_desc_set>
   12742:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12745:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12749:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   12750:	7e db                	jle    1272d <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   12752:	68 92 40 00 00       	push   $0x4092
   12757:	6a ff                	push   $0xffffffff
   12759:	6a 00                	push   $0x0
   1275b:	6a 10                	push   $0x10
   1275d:	e8 fd fe ff ff       	call   1265f <segment_desc_set>
   12762:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   12765:	c6 05 e2 8b 04 00 01 	movb   $0x1,0x48be2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   1276c:	68 9a 40 00 00       	push   $0x409a
   12771:	6a ff                	push   $0xffffffff
   12773:	6a 00                	push   $0x0
   12775:	6a 08                	push   $0x8
   12777:	e8 e3 fe ff ff       	call   1265f <segment_desc_set>
   1277c:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   1277f:	c6 05 e1 8b 04 00 01 	movb   $0x1,0x48be1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   12786:	ba ca 02 01 00       	mov    $0x102ca,%edx
   1278b:	b8 f8 8b 03 00       	mov    $0x38bf8,%eax
   12790:	68 05 ec 00 00       	push   $0xec05
   12795:	52                   	push   %edx
   12796:	6a 08                	push   $0x8
   12798:	50                   	push   %eax
   12799:	e8 52 fe ff ff       	call   125f0 <gate_desc_set>
   1279e:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   127a1:	c6 05 e3 8b 04 00 01 	movb   $0x1,0x48be3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   127a8:	b8 e0 8b 03 00       	mov    $0x38be0,%eax
   127ad:	83 ec 08             	sub    $0x8,%esp
   127b0:	68 00 00 01 00       	push   $0x10000
   127b5:	50                   	push   %eax
   127b6:	e8 7c fe ff ff       	call   12637 <lgdt>
   127bb:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   127be:	83 ec 0c             	sub    $0xc,%esp
   127c1:	68 e0 ab 04 00       	push   $0x4abe0
   127c6:	e8 92 2b 00 00       	call   1535d <mutex_init>
   127cb:	83 c4 10             	add    $0x10,%esp
}
   127ce:	90                   	nop
   127cf:	c9                   	leave  
   127d0:	c3                   	ret    

000127d1 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   127d1:	55                   	push   %ebp
   127d2:	89 e5                	mov    %esp,%ebp
   127d4:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   127d7:	83 ec 0c             	sub    $0xc,%esp
   127da:	68 e0 ab 04 00       	push   $0x4abe0
   127df:	e8 c6 2b 00 00       	call   153aa <mutex_lock>
   127e4:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   127e7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   127ee:	eb 36                	jmp    12826 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   127f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127f3:	05 e0 8b 04 00       	add    $0x48be0,%eax
   127f8:	0f b6 00             	movzbl (%eax),%eax
   127fb:	84 c0                	test   %al,%al
   127fd:	75 23                	jne    12822 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   127ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12802:	05 e0 8b 04 00       	add    $0x48be0,%eax
   12807:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   1280a:	83 ec 0c             	sub    $0xc,%esp
   1280d:	68 e0 ab 04 00       	push   $0x4abe0
   12812:	e8 24 2c 00 00       	call   1543b <mutex_unlock>
   12817:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1281a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1281d:	c1 e0 03             	shl    $0x3,%eax
   12820:	eb 22                	jmp    12844 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12822:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12826:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1282d:	7e c1                	jle    127f0 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   1282f:	83 ec 0c             	sub    $0xc,%esp
   12832:	68 e0 ab 04 00       	push   $0x4abe0
   12837:	e8 ff 2b 00 00       	call   1543b <mutex_unlock>
   1283c:	83 c4 10             	add    $0x10,%esp
    return -1;
   1283f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12844:	c9                   	leave  
   12845:	c3                   	ret    

00012846 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   12846:	55                   	push   %ebp
   12847:	89 e5                	mov    %esp,%ebp
   12849:	83 ec 14             	sub    $0x14,%esp
   1284c:	8b 45 08             	mov    0x8(%ebp),%eax
   1284f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   12853:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12857:	66 c1 e8 03          	shr    $0x3,%ax
   1285b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   1285f:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   12863:	c6 80 e0 8b 04 00 00 	movb   $0x0,0x48be0(%eax)
}
   1286a:	90                   	nop
   1286b:	c9                   	leave  
   1286c:	c3                   	ret    

0001286d <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   1286d:	55                   	push   %ebp
   1286e:	89 e5                	mov    %esp,%ebp
   12870:	fa                   	cli    
   12871:	90                   	nop
   12872:	5d                   	pop    %ebp
   12873:	c3                   	ret    

00012874 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   12874:	55                   	push   %ebp
   12875:	89 e5                	mov    %esp,%ebp
   12877:	fb                   	sti    
   12878:	90                   	nop
   12879:	5d                   	pop    %ebp
   1287a:	c3                   	ret    

0001287b <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1287b:	55                   	push   %ebp
   1287c:	89 e5                	mov    %esp,%ebp
   1287e:	f4                   	hlt    
   1287f:	90                   	nop
   12880:	5d                   	pop    %ebp
   12881:	c3                   	ret    

00012882 <inb>:
static inline uint8_t inb(uint16_t port) {
   12882:	55                   	push   %ebp
   12883:	89 e5                	mov    %esp,%ebp
   12885:	83 ec 14             	sub    $0x14,%esp
   12888:	8b 45 08             	mov    0x8(%ebp),%eax
   1288b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1288f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12893:	89 c2                	mov    %eax,%edx
   12895:	ec                   	in     (%dx),%al
   12896:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12899:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1289d:	c9                   	leave  
   1289e:	c3                   	ret    

0001289f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1289f:	55                   	push   %ebp
   128a0:	89 e5                	mov    %esp,%ebp
   128a2:	83 ec 08             	sub    $0x8,%esp
   128a5:	8b 45 08             	mov    0x8(%ebp),%eax
   128a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   128ab:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   128af:	89 d0                	mov    %edx,%eax
   128b1:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   128b4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   128b8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   128bc:	ee                   	out    %al,(%dx)
}
   128bd:	90                   	nop
   128be:	c9                   	leave  
   128bf:	c3                   	ret    

000128c0 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   128c0:	55                   	push   %ebp
   128c1:	89 e5                	mov    %esp,%ebp
   128c3:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   128c6:	8b 45 08             	mov    0x8(%ebp),%eax
   128c9:	c1 e8 10             	shr    $0x10,%eax
   128cc:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   128d0:	8b 45 08             	mov    0x8(%ebp),%eax
   128d3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   128d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   128da:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   128dd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   128e1:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   128e5:	90                   	nop
   128e6:	c9                   	leave  
   128e7:	c3                   	ret    

000128e8 <read_cr2>:
static inline uint32_t read_cr2(void) {
   128e8:	55                   	push   %ebp
   128e9:	89 e5                	mov    %esp,%ebp
   128eb:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   128ee:	0f 20 d0             	mov    %cr2,%eax
   128f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   128f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   128f7:	c9                   	leave  
   128f8:	c3                   	ret    

000128f9 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   128f9:	55                   	push   %ebp
   128fa:	89 e5                	mov    %esp,%ebp
   128fc:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   128ff:	9c                   	pushf  
   12900:	58                   	pop    %eax
   12901:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12904:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12907:	c9                   	leave  
   12908:	c3                   	ret    

00012909 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12909:	55                   	push   %ebp
   1290a:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   1290c:	8b 45 08             	mov    0x8(%ebp),%eax
   1290f:	50                   	push   %eax
   12910:	9d                   	popf   
}
   12911:	90                   	nop
   12912:	5d                   	pop    %ebp
   12913:	c3                   	ret    

00012914 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12914:	55                   	push   %ebp
   12915:	89 e5                	mov    %esp,%ebp
   12917:	57                   	push   %edi
   12918:	56                   	push   %esi
   12919:	53                   	push   %ebx
   1291a:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   1291d:	8b 45 08             	mov    0x8(%ebp),%eax
   12920:	8b 40 3c             	mov    0x3c(%eax),%eax
   12923:	83 e0 03             	and    $0x3,%eax
   12926:	85 c0                	test   %eax,%eax
   12928:	74 14                	je     1293e <print_exception_fram+0x2a>
    ss = frame->ss3;
   1292a:	8b 45 08             	mov    0x8(%ebp),%eax
   1292d:	8b 40 48             	mov    0x48(%eax),%eax
   12930:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12933:	8b 45 08             	mov    0x8(%ebp),%eax
   12936:	8b 40 44             	mov    0x44(%eax),%eax
   12939:	89 45 e0             	mov    %eax,-0x20(%ebp)
   1293c:	eb 12                	jmp    12950 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   1293e:	8b 45 08             	mov    0x8(%ebp),%eax
   12941:	8b 40 0c             	mov    0xc(%eax),%eax
   12944:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12947:	8b 45 08             	mov    0x8(%ebp),%eax
   1294a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1294d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   12950:	83 ec 0c             	sub    $0xc,%esp
   12953:	68 94 6c 01 00       	push   $0x16c94
   12958:	e8 2f 3e 00 00       	call   1678c <log_printf>
   1295d:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12960:	8b 45 08             	mov    0x8(%ebp),%eax
   12963:	8b 50 34             	mov    0x34(%eax),%edx
   12966:	8b 45 08             	mov    0x8(%ebp),%eax
   12969:	8b 40 30             	mov    0x30(%eax),%eax
   1296c:	83 ec 04             	sub    $0x4,%esp
   1296f:	52                   	push   %edx
   12970:	50                   	push   %eax
   12971:	68 d3 6c 01 00       	push   $0x16cd3
   12976:	e8 11 3e 00 00       	call   1678c <log_printf>
   1297b:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   1297e:	8b 45 08             	mov    0x8(%ebp),%eax
   12981:	8b 30                	mov    (%eax),%esi
   12983:	8b 45 08             	mov    0x8(%ebp),%eax
   12986:	8b 58 04             	mov    0x4(%eax),%ebx
   12989:	8b 45 08             	mov    0x8(%ebp),%eax
   1298c:	8b 48 08             	mov    0x8(%eax),%ecx
   1298f:	8b 45 08             	mov    0x8(%ebp),%eax
   12992:	8b 50 0c             	mov    0xc(%eax),%edx
   12995:	8b 45 08             	mov    0x8(%ebp),%eax
   12998:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
   1299b:	83 ec 04             	sub    $0x4,%esp
   1299e:	56                   	push   %esi
   1299f:	53                   	push   %ebx
   129a0:	51                   	push   %ecx
   129a1:	ff 75 e4             	push   -0x1c(%ebp)
   129a4:	52                   	push   %edx
   129a5:	50                   	push   %eax
   129a6:	68 ec 6c 01 00       	push   $0x16cec
   129ab:	e8 dc 3d 00 00       	call   1678c <log_printf>
   129b0:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   129b3:	8b 45 08             	mov    0x8(%ebp),%eax
   129b6:	8b 40 18             	mov    0x18(%eax),%eax
   129b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   129bc:	8b 45 08             	mov    0x8(%ebp),%eax
   129bf:	8b 78 10             	mov    0x10(%eax),%edi
   129c2:	8b 45 08             	mov    0x8(%ebp),%eax
   129c5:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   129c8:	8b 45 08             	mov    0x8(%ebp),%eax
   129cb:	8b 58 24             	mov    0x24(%eax),%ebx
   129ce:	8b 45 08             	mov    0x8(%ebp),%eax
   129d1:	8b 48 28             	mov    0x28(%eax),%ecx
   129d4:	8b 45 08             	mov    0x8(%ebp),%eax
   129d7:	8b 50 20             	mov    0x20(%eax),%edx
   129da:	8b 45 08             	mov    0x8(%ebp),%eax
   129dd:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   129e0:	83 ec 0c             	sub    $0xc,%esp
   129e3:	ff 75 e0             	push   -0x20(%ebp)
   129e6:	ff 75 d4             	push   -0x2c(%ebp)
   129e9:	57                   	push   %edi
   129ea:	56                   	push   %esi
   129eb:	53                   	push   %ebx
   129ec:	51                   	push   %ecx
   129ed:	52                   	push   %edx
   129ee:	50                   	push   %eax
   129ef:	68 20 6d 01 00       	push   $0x16d20
   129f4:	e8 93 3d 00 00       	call   1678c <log_printf>
   129f9:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   129fc:	8b 45 08             	mov    0x8(%ebp),%eax
   129ff:	8b 50 40             	mov    0x40(%eax),%edx
   12a02:	8b 45 08             	mov    0x8(%ebp),%eax
   12a05:	8b 40 38             	mov    0x38(%eax),%eax
   12a08:	83 ec 04             	sub    $0x4,%esp
   12a0b:	52                   	push   %edx
   12a0c:	50                   	push   %eax
   12a0d:	68 79 6d 01 00       	push   $0x16d79
   12a12:	e8 75 3d 00 00       	call   1678c <log_printf>
   12a17:	83 c4 10             	add    $0x10,%esp
}
   12a1a:	90                   	nop
   12a1b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12a1e:	5b                   	pop    %ebx
   12a1f:	5e                   	pop    %esi
   12a20:	5f                   	pop    %edi
   12a21:	5d                   	pop    %ebp
   12a22:	c3                   	ret    

00012a23 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12a23:	55                   	push   %ebp
   12a24:	89 e5                	mov    %esp,%ebp
   12a26:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12a29:	83 ec 0c             	sub    $0xc,%esp
   12a2c:	68 94 6d 01 00       	push   $0x16d94
   12a31:	e8 56 3d 00 00       	call   1678c <log_printf>
   12a36:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12a39:	83 ec 08             	sub    $0x8,%esp
   12a3c:	ff 75 0c             	push   0xc(%ebp)
   12a3f:	68 c9 6d 01 00       	push   $0x16dc9
   12a44:	e8 43 3d 00 00       	call   1678c <log_printf>
   12a49:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12a4c:	83 ec 0c             	sub    $0xc,%esp
   12a4f:	ff 75 08             	push   0x8(%ebp)
   12a52:	e8 bd fe ff ff       	call   12914 <print_exception_fram>
   12a57:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   12a5a:	e8 1c fe ff ff       	call   1287b <hlt>
   12a5f:	eb f9                	jmp    12a5a <do_default_handler+0x37>

00012a61 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12a61:	55                   	push   %ebp
   12a62:	89 e5                	mov    %esp,%ebp
   12a64:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12a67:	83 ec 08             	sub    $0x8,%esp
   12a6a:	68 e4 6d 01 00       	push   $0x16de4
   12a6f:	ff 75 08             	push   0x8(%ebp)
   12a72:	e8 ac ff ff ff       	call   12a23 <do_default_handler>
   12a77:	83 c4 10             	add    $0x10,%esp
}
   12a7a:	90                   	nop
   12a7b:	c9                   	leave  
   12a7c:	c3                   	ret    

00012a7d <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12a7d:	55                   	push   %ebp
   12a7e:	89 e5                	mov    %esp,%ebp
   12a80:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12a83:	83 ec 08             	sub    $0x8,%esp
   12a86:	68 f6 6d 01 00       	push   $0x16df6
   12a8b:	ff 75 08             	push   0x8(%ebp)
   12a8e:	e8 90 ff ff ff       	call   12a23 <do_default_handler>
   12a93:	83 c4 10             	add    $0x10,%esp
}
   12a96:	90                   	nop
   12a97:	c9                   	leave  
   12a98:	c3                   	ret    

00012a99 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12a99:	55                   	push   %ebp
   12a9a:	89 e5                	mov    %esp,%ebp
   12a9c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12a9f:	83 ec 08             	sub    $0x8,%esp
   12aa2:	68 08 6e 01 00       	push   $0x16e08
   12aa7:	ff 75 08             	push   0x8(%ebp)
   12aaa:	e8 74 ff ff ff       	call   12a23 <do_default_handler>
   12aaf:	83 c4 10             	add    $0x10,%esp
}
   12ab2:	90                   	nop
   12ab3:	c9                   	leave  
   12ab4:	c3                   	ret    

00012ab5 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12ab5:	55                   	push   %ebp
   12ab6:	89 e5                	mov    %esp,%ebp
   12ab8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12abb:	83 ec 08             	sub    $0x8,%esp
   12abe:	68 18 6e 01 00       	push   $0x16e18
   12ac3:	ff 75 08             	push   0x8(%ebp)
   12ac6:	e8 58 ff ff ff       	call   12a23 <do_default_handler>
   12acb:	83 c4 10             	add    $0x10,%esp
}
   12ace:	90                   	nop
   12acf:	c9                   	leave  
   12ad0:	c3                   	ret    

00012ad1 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12ad1:	55                   	push   %ebp
   12ad2:	89 e5                	mov    %esp,%ebp
   12ad4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12ad7:	83 ec 08             	sub    $0x8,%esp
   12ada:	68 26 6e 01 00       	push   $0x16e26
   12adf:	ff 75 08             	push   0x8(%ebp)
   12ae2:	e8 3c ff ff ff       	call   12a23 <do_default_handler>
   12ae7:	83 c4 10             	add    $0x10,%esp
}
   12aea:	90                   	nop
   12aeb:	c9                   	leave  
   12aec:	c3                   	ret    

00012aed <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12aed:	55                   	push   %ebp
   12aee:	89 e5                	mov    %esp,%ebp
   12af0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12af3:	83 ec 08             	sub    $0x8,%esp
   12af6:	68 3b 6e 01 00       	push   $0x16e3b
   12afb:	ff 75 08             	push   0x8(%ebp)
   12afe:	e8 20 ff ff ff       	call   12a23 <do_default_handler>
   12b03:	83 c4 10             	add    $0x10,%esp
}
   12b06:	90                   	nop
   12b07:	c9                   	leave  
   12b08:	c3                   	ret    

00012b09 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12b09:	55                   	push   %ebp
   12b0a:	89 e5                	mov    %esp,%ebp
   12b0c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12b0f:	83 ec 08             	sub    $0x8,%esp
   12b12:	68 4e 6e 01 00       	push   $0x16e4e
   12b17:	ff 75 08             	push   0x8(%ebp)
   12b1a:	e8 04 ff ff ff       	call   12a23 <do_default_handler>
   12b1f:	83 c4 10             	add    $0x10,%esp
}
   12b22:	90                   	nop
   12b23:	c9                   	leave  
   12b24:	c3                   	ret    

00012b25 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12b25:	55                   	push   %ebp
   12b26:	89 e5                	mov    %esp,%ebp
   12b28:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12b2b:	83 ec 08             	sub    $0x8,%esp
   12b2e:	68 64 6e 01 00       	push   $0x16e64
   12b33:	ff 75 08             	push   0x8(%ebp)
   12b36:	e8 e8 fe ff ff       	call   12a23 <do_default_handler>
   12b3b:	83 c4 10             	add    $0x10,%esp
}
   12b3e:	90                   	nop
   12b3f:	c9                   	leave  
   12b40:	c3                   	ret    

00012b41 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12b41:	55                   	push   %ebp
   12b42:	89 e5                	mov    %esp,%ebp
   12b44:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12b47:	83 ec 08             	sub    $0x8,%esp
   12b4a:	68 7d 6e 01 00       	push   $0x16e7d
   12b4f:	ff 75 08             	push   0x8(%ebp)
   12b52:	e8 cc fe ff ff       	call   12a23 <do_default_handler>
   12b57:	83 c4 10             	add    $0x10,%esp
}
   12b5a:	90                   	nop
   12b5b:	c9                   	leave  
   12b5c:	c3                   	ret    

00012b5d <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12b5d:	55                   	push   %ebp
   12b5e:	89 e5                	mov    %esp,%ebp
   12b60:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12b63:	83 ec 08             	sub    $0x8,%esp
   12b66:	68 9a 6e 01 00       	push   $0x16e9a
   12b6b:	ff 75 08             	push   0x8(%ebp)
   12b6e:	e8 b0 fe ff ff       	call   12a23 <do_default_handler>
   12b73:	83 c4 10             	add    $0x10,%esp
}
   12b76:	90                   	nop
   12b77:	c9                   	leave  
   12b78:	c3                   	ret    

00012b79 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12b79:	55                   	push   %ebp
   12b7a:	89 e5                	mov    %esp,%ebp
   12b7c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12b7f:	83 ec 08             	sub    $0x8,%esp
   12b82:	68 b1 6e 01 00       	push   $0x16eb1
   12b87:	ff 75 08             	push   0x8(%ebp)
   12b8a:	e8 94 fe ff ff       	call   12a23 <do_default_handler>
   12b8f:	83 c4 10             	add    $0x10,%esp
}
   12b92:	90                   	nop
   12b93:	c9                   	leave  
   12b94:	c3                   	ret    

00012b95 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12b95:	55                   	push   %ebp
   12b96:	89 e5                	mov    %esp,%ebp
   12b98:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12b9b:	83 ec 08             	sub    $0x8,%esp
   12b9e:	68 c7 6e 01 00       	push   $0x16ec7
   12ba3:	ff 75 08             	push   0x8(%ebp)
   12ba6:	e8 78 fe ff ff       	call   12a23 <do_default_handler>
   12bab:	83 c4 10             	add    $0x10,%esp
}
   12bae:	90                   	nop
   12baf:	c9                   	leave  
   12bb0:	c3                   	ret    

00012bb1 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12bb1:	55                   	push   %ebp
   12bb2:	89 e5                	mov    %esp,%ebp
   12bb4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12bb7:	83 ec 08             	sub    $0x8,%esp
   12bba:	68 e5 6e 01 00       	push   $0x16ee5
   12bbf:	ff 75 08             	push   0x8(%ebp)
   12bc2:	e8 5c fe ff ff       	call   12a23 <do_default_handler>
   12bc7:	83 c4 10             	add    $0x10,%esp
}
   12bca:	90                   	nop
   12bcb:	c9                   	leave  
   12bcc:	c3                   	ret    

00012bcd <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12bcd:	55                   	push   %ebp
   12bce:	89 e5                	mov    %esp,%ebp
   12bd0:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12bd3:	83 ec 0c             	sub    $0xc,%esp
   12bd6:	68 04 6f 01 00       	push   $0x16f04
   12bdb:	e8 ac 3b 00 00       	call   1678c <log_printf>
   12be0:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12be3:	83 ec 0c             	sub    $0xc,%esp
   12be6:	68 28 6f 01 00       	push   $0x16f28
   12beb:	e8 9c 3b 00 00       	call   1678c <log_printf>
   12bf0:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12bf3:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf6:	8b 40 34             	mov    0x34(%eax),%eax
   12bf9:	83 e0 01             	and    $0x1,%eax
   12bfc:	85 c0                	test   %eax,%eax
   12bfe:	74 12                	je     12c12 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12c00:	83 ec 0c             	sub    $0xc,%esp
   12c03:	68 54 6f 01 00       	push   $0x16f54
   12c08:	e8 7f 3b 00 00       	call   1678c <log_printf>
   12c0d:	83 c4 10             	add    $0x10,%esp
   12c10:	eb 10                	jmp    12c22 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12c12:	83 ec 0c             	sub    $0xc,%esp
   12c15:	68 d0 6f 01 00       	push   $0x16fd0
   12c1a:	e8 6d 3b 00 00       	call   1678c <log_printf>
   12c1f:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12c22:	8b 45 08             	mov    0x8(%ebp),%eax
   12c25:	8b 40 34             	mov    0x34(%eax),%eax
   12c28:	83 e0 02             	and    $0x2,%eax
   12c2b:	85 c0                	test   %eax,%eax
   12c2d:	74 12                	je     12c41 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12c2f:	83 ec 0c             	sub    $0xc,%esp
   12c32:	68 28 70 01 00       	push   $0x17028
   12c37:	e8 50 3b 00 00       	call   1678c <log_printf>
   12c3c:	83 c4 10             	add    $0x10,%esp
   12c3f:	eb 10                	jmp    12c51 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12c41:	83 ec 0c             	sub    $0xc,%esp
   12c44:	68 74 70 01 00       	push   $0x17074
   12c49:	e8 3e 3b 00 00       	call   1678c <log_printf>
   12c4e:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12c51:	8b 45 08             	mov    0x8(%ebp),%eax
   12c54:	8b 40 34             	mov    0x34(%eax),%eax
   12c57:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12c5c:	83 ec 08             	sub    $0x8,%esp
   12c5f:	50                   	push   %eax
   12c60:	68 a1 70 01 00       	push   $0x170a1
   12c65:	e8 22 3b 00 00       	call   1678c <log_printf>
   12c6a:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12c6d:	83 ec 0c             	sub    $0xc,%esp
   12c70:	ff 75 08             	push   0x8(%ebp)
   12c73:	e8 9c fc ff ff       	call   12914 <print_exception_fram>
   12c78:	83 c4 10             	add    $0x10,%esp
}
   12c7b:	90                   	nop
   12c7c:	c9                   	leave  
   12c7d:	c3                   	ret    

00012c7e <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12c7e:	55                   	push   %ebp
   12c7f:	89 e5                	mov    %esp,%ebp
   12c81:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12c84:	83 ec 0c             	sub    $0xc,%esp
   12c87:	68 04 6f 01 00       	push   $0x16f04
   12c8c:	e8 fb 3a 00 00       	call   1678c <log_printf>
   12c91:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12c94:	83 ec 0c             	sub    $0xc,%esp
   12c97:	68 b4 70 01 00       	push   $0x170b4
   12c9c:	e8 eb 3a 00 00       	call   1678c <log_printf>
   12ca1:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca7:	8b 40 34             	mov    0x34(%eax),%eax
   12caa:	83 e0 01             	and    $0x1,%eax
   12cad:	85 c0                	test   %eax,%eax
   12caf:	74 18                	je     12cc9 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12cb1:	e8 32 fc ff ff       	call   128e8 <read_cr2>
   12cb6:	83 ec 08             	sub    $0x8,%esp
   12cb9:	50                   	push   %eax
   12cba:	68 d8 70 01 00       	push   $0x170d8
   12cbf:	e8 c8 3a 00 00       	call   1678c <log_printf>
   12cc4:	83 c4 10             	add    $0x10,%esp
   12cc7:	eb 16                	jmp    12cdf <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12cc9:	e8 1a fc ff ff       	call   128e8 <read_cr2>
   12cce:	83 ec 08             	sub    $0x8,%esp
   12cd1:	50                   	push   %eax
   12cd2:	68 00 71 01 00       	push   $0x17100
   12cd7:	e8 b0 3a 00 00       	call   1678c <log_printf>
   12cdc:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12cdf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ce2:	8b 40 34             	mov    0x34(%eax),%eax
   12ce5:	83 e0 02             	and    $0x2,%eax
   12ce8:	85 c0                	test   %eax,%eax
   12cea:	74 12                	je     12cfe <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12cec:	83 ec 0c             	sub    $0xc,%esp
   12cef:	68 1c 71 01 00       	push   $0x1711c
   12cf4:	e8 93 3a 00 00       	call   1678c <log_printf>
   12cf9:	83 c4 10             	add    $0x10,%esp
   12cfc:	eb 10                	jmp    12d0e <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12cfe:	83 ec 0c             	sub    $0xc,%esp
   12d01:	68 48 71 01 00       	push   $0x17148
   12d06:	e8 81 3a 00 00       	call   1678c <log_printf>
   12d0b:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12d0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12d11:	8b 40 34             	mov    0x34(%eax),%eax
   12d14:	83 e0 04             	and    $0x4,%eax
   12d17:	85 c0                	test   %eax,%eax
   12d19:	74 12                	je     12d2d <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12d1b:	83 ec 0c             	sub    $0xc,%esp
   12d1e:	68 74 71 01 00       	push   $0x17174
   12d23:	e8 64 3a 00 00       	call   1678c <log_printf>
   12d28:	83 c4 10             	add    $0x10,%esp
   12d2b:	eb 10                	jmp    12d3d <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12d2d:	83 ec 0c             	sub    $0xc,%esp
   12d30:	68 9c 71 01 00       	push   $0x1719c
   12d35:	e8 52 3a 00 00       	call   1678c <log_printf>
   12d3a:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12d3d:	83 ec 0c             	sub    $0xc,%esp
   12d40:	ff 75 08             	push   0x8(%ebp)
   12d43:	e8 cc fb ff ff       	call   12914 <print_exception_fram>
   12d48:	83 c4 10             	add    $0x10,%esp
}
   12d4b:	90                   	nop
   12d4c:	c9                   	leave  
   12d4d:	c3                   	ret    

00012d4e <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12d4e:	55                   	push   %ebp
   12d4f:	89 e5                	mov    %esp,%ebp
   12d51:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12d54:	83 ec 08             	sub    $0x8,%esp
   12d57:	68 c8 71 01 00       	push   $0x171c8
   12d5c:	ff 75 08             	push   0x8(%ebp)
   12d5f:	e8 bf fc ff ff       	call   12a23 <do_default_handler>
   12d64:	83 c4 10             	add    $0x10,%esp
}
   12d67:	90                   	nop
   12d68:	c9                   	leave  
   12d69:	c3                   	ret    

00012d6a <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12d6a:	55                   	push   %ebp
   12d6b:	89 e5                	mov    %esp,%ebp
   12d6d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12d70:	83 ec 08             	sub    $0x8,%esp
   12d73:	68 dd 71 01 00       	push   $0x171dd
   12d78:	ff 75 08             	push   0x8(%ebp)
   12d7b:	e8 a3 fc ff ff       	call   12a23 <do_default_handler>
   12d80:	83 c4 10             	add    $0x10,%esp
}
   12d83:	90                   	nop
   12d84:	c9                   	leave  
   12d85:	c3                   	ret    

00012d86 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12d86:	55                   	push   %ebp
   12d87:	89 e5                	mov    %esp,%ebp
   12d89:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12d8c:	83 ec 08             	sub    $0x8,%esp
   12d8f:	68 f8 71 01 00       	push   $0x171f8
   12d94:	ff 75 08             	push   0x8(%ebp)
   12d97:	e8 87 fc ff ff       	call   12a23 <do_default_handler>
   12d9c:	83 c4 10             	add    $0x10,%esp
}
   12d9f:	90                   	nop
   12da0:	c9                   	leave  
   12da1:	c3                   	ret    

00012da2 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12da2:	55                   	push   %ebp
   12da3:	89 e5                	mov    %esp,%ebp
   12da5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12da8:	83 ec 08             	sub    $0x8,%esp
   12dab:	68 11 72 01 00       	push   $0x17211
   12db0:	ff 75 08             	push   0x8(%ebp)
   12db3:	e8 6b fc ff ff       	call   12a23 <do_default_handler>
   12db8:	83 c4 10             	add    $0x10,%esp
}
   12dbb:	90                   	nop
   12dbc:	c9                   	leave  
   12dbd:	c3                   	ret    

00012dbe <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12dbe:	55                   	push   %ebp
   12dbf:	89 e5                	mov    %esp,%ebp
   12dc1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12dc4:	83 ec 08             	sub    $0x8,%esp
   12dc7:	68 2a 72 01 00       	push   $0x1722a
   12dcc:	ff 75 08             	push   0x8(%ebp)
   12dcf:	e8 4f fc ff ff       	call   12a23 <do_default_handler>
   12dd4:	83 c4 10             	add    $0x10,%esp
}
   12dd7:	90                   	nop
   12dd8:	c9                   	leave  
   12dd9:	c3                   	ret    

00012dda <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12dda:	55                   	push   %ebp
   12ddb:	89 e5                	mov    %esp,%ebp
   12ddd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12de0:	83 ec 08             	sub    $0x8,%esp
   12de3:	68 47 72 01 00       	push   $0x17247
   12de8:	ff 75 08             	push   0x8(%ebp)
   12deb:	e8 33 fc ff ff       	call   12a23 <do_default_handler>
   12df0:	83 c4 10             	add    $0x10,%esp
}
   12df3:	90                   	nop
   12df4:	c9                   	leave  
   12df5:	c3                   	ret    

00012df6 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12df6:	55                   	push   %ebp
   12df7:	89 e5                	mov    %esp,%ebp
   12df9:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12dfc:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12e03:	7f 06                	jg     12e0b <idt_install+0x15>
   12e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e09:	79 07                	jns    12e12 <idt_install+0x1c>
   12e0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12e10:	eb 25                	jmp    12e37 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12e12:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e15:	8b 55 08             	mov    0x8(%ebp),%edx
   12e18:	c1 e2 03             	shl    $0x3,%edx
   12e1b:	81 c2 00 ac 04 00    	add    $0x4ac00,%edx
   12e21:	68 00 8e 00 00       	push   $0x8e00
   12e26:	50                   	push   %eax
   12e27:	6a 08                	push   $0x8
   12e29:	52                   	push   %edx
   12e2a:	e8 c1 f7 ff ff       	call   125f0 <gate_desc_set>
   12e2f:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12e37:	c9                   	leave  
   12e38:	c3                   	ret    

00012e39 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12e39:	55                   	push   %ebp
   12e3a:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12e3c:	6a 11                	push   $0x11
   12e3e:	6a 20                	push   $0x20
   12e40:	e8 5a fa ff ff       	call   1289f <outb>
   12e45:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12e48:	6a 20                	push   $0x20
   12e4a:	6a 21                	push   $0x21
   12e4c:	e8 4e fa ff ff       	call   1289f <outb>
   12e51:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12e54:	6a 04                	push   $0x4
   12e56:	6a 21                	push   $0x21
   12e58:	e8 42 fa ff ff       	call   1289f <outb>
   12e5d:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12e60:	6a 01                	push   $0x1
   12e62:	6a 21                	push   $0x21
   12e64:	e8 36 fa ff ff       	call   1289f <outb>
   12e69:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12e6c:	6a 11                	push   $0x11
   12e6e:	68 a0 00 00 00       	push   $0xa0
   12e73:	e8 27 fa ff ff       	call   1289f <outb>
   12e78:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12e7b:	6a 28                	push   $0x28
   12e7d:	68 a1 00 00 00       	push   $0xa1
   12e82:	e8 18 fa ff ff       	call   1289f <outb>
   12e87:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12e8a:	6a 02                	push   $0x2
   12e8c:	68 a1 00 00 00       	push   $0xa1
   12e91:	e8 09 fa ff ff       	call   1289f <outb>
   12e96:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12e99:	6a 01                	push   $0x1
   12e9b:	68 a1 00 00 00       	push   $0xa1
   12ea0:	e8 fa f9 ff ff       	call   1289f <outb>
   12ea5:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12ea8:	68 fb 00 00 00       	push   $0xfb
   12ead:	6a 21                	push   $0x21
   12eaf:	e8 eb f9 ff ff       	call   1289f <outb>
   12eb4:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12eb7:	68 ff 00 00 00       	push   $0xff
   12ebc:	68 a1 00 00 00       	push   $0xa1
   12ec1:	e8 d9 f9 ff ff       	call   1289f <outb>
   12ec6:	83 c4 08             	add    $0x8,%esp


}
   12ec9:	90                   	nop
   12eca:	c9                   	leave  
   12ecb:	c3                   	ret    

00012ecc <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12ecc:	55                   	push   %ebp
   12ecd:	89 e5                	mov    %esp,%ebp
   12ecf:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12ed2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12ed9:	eb 17                	jmp    12ef2 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12edb:	83 ec 08             	sub    $0x8,%esp
   12ede:	68 2a 00 01 00       	push   $0x1002a
   12ee3:	ff 75 f4             	push   -0xc(%ebp)
   12ee6:	e8 0b ff ff ff       	call   12df6 <idt_install>
   12eeb:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12eee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12ef2:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12ef9:	7e e0                	jle    12edb <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12efb:	83 ec 08             	sub    $0x8,%esp
   12efe:	68 47 00 01 00       	push   $0x10047
   12f03:	6a 00                	push   $0x0
   12f05:	e8 ec fe ff ff       	call   12df6 <idt_install>
   12f0a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12f0d:	83 ec 08             	sub    $0x8,%esp
   12f10:	68 64 00 01 00       	push   $0x10064
   12f15:	6a 01                	push   $0x1
   12f17:	e8 da fe ff ff       	call   12df6 <idt_install>
   12f1c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12f1f:	83 ec 08             	sub    $0x8,%esp
   12f22:	68 81 00 01 00       	push   $0x10081
   12f27:	6a 02                	push   $0x2
   12f29:	e8 c8 fe ff ff       	call   12df6 <idt_install>
   12f2e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12f31:	83 ec 08             	sub    $0x8,%esp
   12f34:	68 9e 00 01 00       	push   $0x1009e
   12f39:	6a 03                	push   $0x3
   12f3b:	e8 b6 fe ff ff       	call   12df6 <idt_install>
   12f40:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12f43:	83 ec 08             	sub    $0x8,%esp
   12f46:	68 bb 00 01 00       	push   $0x100bb
   12f4b:	6a 04                	push   $0x4
   12f4d:	e8 a4 fe ff ff       	call   12df6 <idt_install>
   12f52:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12f55:	83 ec 08             	sub    $0x8,%esp
   12f58:	68 d8 00 01 00       	push   $0x100d8
   12f5d:	6a 05                	push   $0x5
   12f5f:	e8 92 fe ff ff       	call   12df6 <idt_install>
   12f64:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12f67:	83 ec 08             	sub    $0x8,%esp
   12f6a:	68 f5 00 01 00       	push   $0x100f5
   12f6f:	6a 06                	push   $0x6
   12f71:	e8 80 fe ff ff       	call   12df6 <idt_install>
   12f76:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12f79:	83 ec 08             	sub    $0x8,%esp
   12f7c:	68 12 01 01 00       	push   $0x10112
   12f81:	6a 07                	push   $0x7
   12f83:	e8 6e fe ff ff       	call   12df6 <idt_install>
   12f88:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12f8b:	83 ec 08             	sub    $0x8,%esp
   12f8e:	68 2f 01 01 00       	push   $0x1012f
   12f93:	6a 08                	push   $0x8
   12f95:	e8 5c fe ff ff       	call   12df6 <idt_install>
   12f9a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12f9d:	83 ec 08             	sub    $0x8,%esp
   12fa0:	68 4a 01 01 00       	push   $0x1014a
   12fa5:	6a 0a                	push   $0xa
   12fa7:	e8 4a fe ff ff       	call   12df6 <idt_install>
   12fac:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12faf:	83 ec 08             	sub    $0x8,%esp
   12fb2:	68 65 01 01 00       	push   $0x10165
   12fb7:	6a 0b                	push   $0xb
   12fb9:	e8 38 fe ff ff       	call   12df6 <idt_install>
   12fbe:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12fc1:	83 ec 08             	sub    $0x8,%esp
   12fc4:	68 80 01 01 00       	push   $0x10180
   12fc9:	6a 0c                	push   $0xc
   12fcb:	e8 26 fe ff ff       	call   12df6 <idt_install>
   12fd0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   12fd3:	83 ec 08             	sub    $0x8,%esp
   12fd6:	68 9b 01 01 00       	push   $0x1019b
   12fdb:	6a 0d                	push   $0xd
   12fdd:	e8 14 fe ff ff       	call   12df6 <idt_install>
   12fe2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12fe5:	83 ec 08             	sub    $0x8,%esp
   12fe8:	68 b6 01 01 00       	push   $0x101b6
   12fed:	6a 0e                	push   $0xe
   12fef:	e8 02 fe ff ff       	call   12df6 <idt_install>
   12ff4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   12ff7:	83 ec 08             	sub    $0x8,%esp
   12ffa:	68 d1 01 01 00       	push   $0x101d1
   12fff:	6a 10                	push   $0x10
   13001:	e8 f0 fd ff ff       	call   12df6 <idt_install>
   13006:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   13009:	83 ec 08             	sub    $0x8,%esp
   1300c:	68 ee 01 01 00       	push   $0x101ee
   13011:	6a 11                	push   $0x11
   13013:	e8 de fd ff ff       	call   12df6 <idt_install>
   13018:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   1301b:	83 ec 08             	sub    $0x8,%esp
   1301e:	68 09 02 01 00       	push   $0x10209
   13023:	6a 12                	push   $0x12
   13025:	e8 cc fd ff ff       	call   12df6 <idt_install>
   1302a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   1302d:	83 ec 08             	sub    $0x8,%esp
   13030:	68 26 02 01 00       	push   $0x10226
   13035:	6a 13                	push   $0x13
   13037:	e8 ba fd ff ff       	call   12df6 <idt_install>
   1303c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   1303f:	83 ec 08             	sub    $0x8,%esp
   13042:	68 43 02 01 00       	push   $0x10243
   13047:	6a 14                	push   $0x14
   13049:	e8 a8 fd ff ff       	call   12df6 <idt_install>
   1304e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   13051:	83 ec 08             	sub    $0x8,%esp
   13054:	68 60 02 01 00       	push   $0x10260
   13059:	6a 15                	push   $0x15
   1305b:	e8 96 fd ff ff       	call   12df6 <idt_install>
   13060:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   13063:	b8 00 ac 04 00       	mov    $0x4ac00,%eax
   13068:	83 ec 08             	sub    $0x8,%esp
   1306b:	68 00 08 00 00       	push   $0x800
   13070:	50                   	push   %eax
   13071:	e8 4a f8 ff ff       	call   128c0 <lidt>
   13076:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   13079:	e8 bb fd ff ff       	call   12e39 <init_pic>
}
   1307e:	90                   	nop
   1307f:	c9                   	leave  
   13080:	c3                   	ret    

00013081 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   13081:	55                   	push   %ebp
   13082:	89 e5                	mov    %esp,%ebp
   13084:	53                   	push   %ebx
   13085:	83 ec 14             	sub    $0x14,%esp
   13088:	8b 45 08             	mov    0x8(%ebp),%eax
   1308b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1308e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   13092:	76 7f                	jbe    13113 <idt_enable+0x92>
   13094:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   13098:	77 79                	ja     13113 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1309a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1309e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   130a2:	77 33                	ja     130d7 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   130a4:	6a 21                	push   $0x21
   130a6:	e8 d7 f7 ff ff       	call   12882 <inb>
   130ab:	83 c4 04             	add    $0x4,%esp
   130ae:	89 c3                	mov    %eax,%ebx
   130b0:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   130b4:	ba 01 00 00 00       	mov    $0x1,%edx
   130b9:	89 c1                	mov    %eax,%ecx
   130bb:	d3 e2                	shl    %cl,%edx
   130bd:	89 d0                	mov    %edx,%eax
   130bf:	f7 d0                	not    %eax
   130c1:	21 d8                	and    %ebx,%eax
   130c3:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   130c6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   130ca:	50                   	push   %eax
   130cb:	6a 21                	push   $0x21
   130cd:	e8 cd f7 ff ff       	call   1289f <outb>
   130d2:	83 c4 08             	add    $0x8,%esp
   130d5:	eb 3d                	jmp    13114 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   130d7:	68 a1 00 00 00       	push   $0xa1
   130dc:	e8 a1 f7 ff ff       	call   12882 <inb>
   130e1:	83 c4 04             	add    $0x4,%esp
   130e4:	89 c3                	mov    %eax,%ebx
   130e6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   130ea:	83 e8 08             	sub    $0x8,%eax
   130ed:	ba 01 00 00 00       	mov    $0x1,%edx
   130f2:	89 c1                	mov    %eax,%ecx
   130f4:	d3 e2                	shl    %cl,%edx
   130f6:	89 d0                	mov    %edx,%eax
   130f8:	f7 d0                	not    %eax
   130fa:	21 d8                	and    %ebx,%eax
   130fc:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   130ff:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   13103:	50                   	push   %eax
   13104:	68 a1 00 00 00       	push   $0xa1
   13109:	e8 91 f7 ff ff       	call   1289f <outb>
   1310e:	83 c4 08             	add    $0x8,%esp
   13111:	eb 01                	jmp    13114 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   13113:	90                   	nop
  }
  
}
   13114:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13117:	c9                   	leave  
   13118:	c3                   	ret    

00013119 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   13119:	55                   	push   %ebp
   1311a:	89 e5                	mov    %esp,%ebp
   1311c:	53                   	push   %ebx
   1311d:	83 ec 14             	sub    $0x14,%esp
   13120:	8b 45 08             	mov    0x8(%ebp),%eax
   13123:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   13126:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1312a:	76 7b                	jbe    131a7 <idt_disable+0x8e>
   1312c:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   13130:	77 75                	ja     131a7 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   13132:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   13136:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1313a:	77 31                	ja     1316d <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1313c:	6a 21                	push   $0x21
   1313e:	e8 3f f7 ff ff       	call   12882 <inb>
   13143:	83 c4 04             	add    $0x4,%esp
   13146:	89 c3                	mov    %eax,%ebx
   13148:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1314c:	ba 01 00 00 00       	mov    $0x1,%edx
   13151:	89 c1                	mov    %eax,%ecx
   13153:	d3 e2                	shl    %cl,%edx
   13155:	89 d0                	mov    %edx,%eax
   13157:	09 d8                	or     %ebx,%eax
   13159:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1315c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13160:	50                   	push   %eax
   13161:	6a 21                	push   $0x21
   13163:	e8 37 f7 ff ff       	call   1289f <outb>
   13168:	83 c4 08             	add    $0x8,%esp
   1316b:	eb 3b                	jmp    131a8 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1316d:	68 a1 00 00 00       	push   $0xa1
   13172:	e8 0b f7 ff ff       	call   12882 <inb>
   13177:	83 c4 04             	add    $0x4,%esp
   1317a:	89 c3                	mov    %eax,%ebx
   1317c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13180:	83 e8 08             	sub    $0x8,%eax
   13183:	ba 01 00 00 00       	mov    $0x1,%edx
   13188:	89 c1                	mov    %eax,%ecx
   1318a:	d3 e2                	shl    %cl,%edx
   1318c:	89 d0                	mov    %edx,%eax
   1318e:	09 d8                	or     %ebx,%eax
   13190:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   13193:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   13197:	50                   	push   %eax
   13198:	68 a1 00 00 00       	push   $0xa1
   1319d:	e8 fd f6 ff ff       	call   1289f <outb>
   131a2:	83 c4 08             	add    $0x8,%esp
   131a5:	eb 01                	jmp    131a8 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   131a7:	90                   	nop
  }
  
}
   131a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   131ab:	c9                   	leave  
   131ac:	c3                   	ret    

000131ad <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   131ad:	55                   	push   %ebp
   131ae:	89 e5                	mov    %esp,%ebp
  cli();
   131b0:	e8 b8 f6 ff ff       	call   1286d <cli>
}
   131b5:	90                   	nop
   131b6:	5d                   	pop    %ebp
   131b7:	c3                   	ret    

000131b8 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   131b8:	55                   	push   %ebp
   131b9:	89 e5                	mov    %esp,%ebp
  sti();
   131bb:	e8 b4 f6 ff ff       	call   12874 <sti>
}
   131c0:	90                   	nop
   131c1:	5d                   	pop    %ebp
   131c2:	c3                   	ret    

000131c3 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   131c3:	55                   	push   %ebp
   131c4:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   131c6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   131ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   131ce:	78 29                	js     131f9 <pic_send_eoi+0x36>
   131d0:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   131d4:	7f 23                	jg     131f9 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   131d6:	6a 20                	push   $0x20
   131d8:	6a 20                	push   $0x20
   131da:	e8 c0 f6 ff ff       	call   1289f <outb>
   131df:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   131e2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   131e6:	7e 12                	jle    131fa <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   131e8:	6a 20                	push   $0x20
   131ea:	68 a0 00 00 00       	push   $0xa0
   131ef:	e8 ab f6 ff ff       	call   1289f <outb>
   131f4:	83 c4 08             	add    $0x8,%esp
   131f7:	eb 01                	jmp    131fa <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   131f9:	90                   	nop
  }

}
   131fa:	c9                   	leave  
   131fb:	c3                   	ret    

000131fc <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   131fc:	55                   	push   %ebp
   131fd:	89 e5                	mov    %esp,%ebp
   131ff:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   13202:	e8 f2 f6 ff ff       	call   128f9 <read_eflags>
   13207:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   1320a:	e8 9e ff ff ff       	call   131ad <idt_disable_global>
  return state;;
   1320f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13212:	c9                   	leave  
   13213:	c3                   	ret    

00013214 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   13214:	55                   	push   %ebp
   13215:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   13217:	ff 75 08             	push   0x8(%ebp)
   1321a:	e8 ea f6 ff ff       	call   12909 <write_eflags>
   1321f:	83 c4 04             	add    $0x4,%esp
}
   13222:	90                   	nop
   13223:	c9                   	leave  
   13224:	c3                   	ret    

00013225 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   13225:	55                   	push   %ebp
   13226:	89 e5                	mov    %esp,%ebp
   13228:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   1322b:	83 ec 08             	sub    $0x8,%esp
   1322e:	ff 75 0c             	push   0xc(%ebp)
   13231:	ff 75 08             	push   0x8(%ebp)
   13234:	e8 53 35 00 00       	call   1678c <log_printf>
   13239:	83 c4 10             	add    $0x10,%esp
}
   1323c:	90                   	nop
   1323d:	c9                   	leave  
   1323e:	c3                   	ret    

0001323f <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   1323f:	55                   	push   %ebp
   13240:	89 e5                	mov    %esp,%ebp
   13242:	53                   	push   %ebx
   13243:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   13246:	8b 45 08             	mov    0x8(%ebp),%eax
   13249:	8b 40 3c             	mov    0x3c(%eax),%eax
   1324c:	83 f8 3a             	cmp    $0x3a,%eax
   1324f:	77 48                	ja     13299 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   13251:	8b 45 08             	mov    0x8(%ebp),%eax
   13254:	8b 40 3c             	mov    0x3c(%eax),%eax
   13257:	8b 04 85 80 72 01 00 	mov    0x17280(,%eax,4),%eax
   1325e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   13261:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13265:	74 32                	je     13299 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   13267:	8b 45 08             	mov    0x8(%ebp),%eax
   1326a:	8b 58 4c             	mov    0x4c(%eax),%ebx
   1326d:	8b 45 08             	mov    0x8(%ebp),%eax
   13270:	8b 48 48             	mov    0x48(%eax),%ecx
   13273:	8b 45 08             	mov    0x8(%ebp),%eax
   13276:	8b 50 44             	mov    0x44(%eax),%edx
   13279:	8b 45 08             	mov    0x8(%ebp),%eax
   1327c:	8b 40 40             	mov    0x40(%eax),%eax
   1327f:	53                   	push   %ebx
   13280:	51                   	push   %ecx
   13281:	52                   	push   %edx
   13282:	50                   	push   %eax
   13283:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13286:	ff d0                	call   *%eax
   13288:	83 c4 10             	add    $0x10,%esp
   1328b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   1328e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13291:	8b 45 08             	mov    0x8(%ebp),%eax
   13294:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   13297:	eb 30                	jmp    132c9 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   13299:	e8 f6 e6 ff ff       	call   11994 <task_current>
   1329e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   132a1:	8b 45 08             	mov    0x8(%ebp),%eax
   132a4:	8b 40 3c             	mov    0x3c(%eax),%eax
   132a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   132aa:	83 c2 24             	add    $0x24,%edx
   132ad:	83 ec 04             	sub    $0x4,%esp
   132b0:	50                   	push   %eax
   132b1:	52                   	push   %edx
   132b2:	68 6c 73 01 00       	push   $0x1736c
   132b7:	e8 d0 34 00 00       	call   1678c <log_printf>
   132bc:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   132bf:	8b 45 08             	mov    0x8(%ebp),%eax
   132c2:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   132c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   132cc:	c9                   	leave  
   132cd:	c3                   	ret    

000132ce <inb>:
static inline uint8_t inb(uint16_t port) {
   132ce:	55                   	push   %ebp
   132cf:	89 e5                	mov    %esp,%ebp
   132d1:	83 ec 14             	sub    $0x14,%esp
   132d4:	8b 45 08             	mov    0x8(%ebp),%eax
   132d7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   132db:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   132df:	89 c2                	mov    %eax,%edx
   132e1:	ec                   	in     (%dx),%al
   132e2:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   132e5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   132e9:	c9                   	leave  
   132ea:	c3                   	ret    

000132eb <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   132eb:	55                   	push   %ebp
   132ec:	89 e5                	mov    %esp,%ebp
   132ee:	83 ec 08             	sub    $0x8,%esp
   132f1:	8b 45 08             	mov    0x8(%ebp),%eax
   132f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   132f7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   132fb:	89 d0                	mov    %edx,%eax
   132fd:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13300:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13304:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13308:	ee                   	out    %al,(%dx)
}
   13309:	90                   	nop
   1330a:	c9                   	leave  
   1330b:	c3                   	ret    

0001330c <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   1330c:	55                   	push   %ebp
   1330d:	89 e5                	mov    %esp,%ebp
   1330f:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   13312:	e8 e5 fe ff ff       	call   131fc <idt_enter_protection>
   13317:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   1331a:	83 ec 08             	sub    $0x8,%esp
   1331d:	6a 0f                	push   $0xf
   1331f:	68 d4 03 00 00       	push   $0x3d4
   13324:	e8 c2 ff ff ff       	call   132eb <outb>
   13329:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   1332c:	83 ec 0c             	sub    $0xc,%esp
   1332f:	68 d5 03 00 00       	push   $0x3d5
   13334:	e8 95 ff ff ff       	call   132ce <inb>
   13339:	83 c4 10             	add    $0x10,%esp
   1333c:	0f b6 c0             	movzbl %al,%eax
   1333f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   13342:	83 ec 08             	sub    $0x8,%esp
   13345:	6a 0e                	push   $0xe
   13347:	68 d4 03 00 00       	push   $0x3d4
   1334c:	e8 9a ff ff ff       	call   132eb <outb>
   13351:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   13354:	83 ec 0c             	sub    $0xc,%esp
   13357:	68 d5 03 00 00       	push   $0x3d5
   1335c:	e8 6d ff ff ff       	call   132ce <inb>
   13361:	83 c4 10             	add    $0x10,%esp
   13364:	0f b6 c0             	movzbl %al,%eax
   13367:	c1 e0 08             	shl    $0x8,%eax
   1336a:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   1336d:	83 ec 0c             	sub    $0xc,%esp
   13370:	ff 75 f4             	push   -0xc(%ebp)
   13373:	e8 9c fe ff ff       	call   13214 <idt_leave_protection>
   13378:	83 c4 10             	add    $0x10,%esp
  return pos;
   1337b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1337e:	c9                   	leave  
   1337f:	c3                   	ret    

00013380 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   13380:	55                   	push   %ebp
   13381:	89 e5                	mov    %esp,%ebp
   13383:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   13386:	e8 71 fe ff ff       	call   131fc <idt_enter_protection>
   1338b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   1338e:	8b 45 08             	mov    0x8(%ebp),%eax
   13391:	8b 40 10             	mov    0x10(%eax),%eax
   13394:	89 c2                	mov    %eax,%edx
   13396:	8b 45 08             	mov    0x8(%ebp),%eax
   13399:	8b 40 0c             	mov    0xc(%eax),%eax
   1339c:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   1339f:	8b 45 08             	mov    0x8(%ebp),%eax
   133a2:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   133a5:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   133a7:	8b 45 08             	mov    0x8(%ebp),%eax
   133aa:	8b 40 04             	mov    0x4(%eax),%eax
   133ad:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   133b2:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   133b4:	01 d0                	add    %edx,%eax
   133b6:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   133ba:	83 ec 08             	sub    $0x8,%esp
   133bd:	6a 0f                	push   $0xf
   133bf:	68 d4 03 00 00       	push   $0x3d4
   133c4:	e8 22 ff ff ff       	call   132eb <outb>
   133c9:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   133cc:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   133d0:	0f b6 c0             	movzbl %al,%eax
   133d3:	83 ec 08             	sub    $0x8,%esp
   133d6:	50                   	push   %eax
   133d7:	68 d5 03 00 00       	push   $0x3d5
   133dc:	e8 0a ff ff ff       	call   132eb <outb>
   133e1:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   133e4:	83 ec 08             	sub    $0x8,%esp
   133e7:	6a 0e                	push   $0xe
   133e9:	68 d4 03 00 00       	push   $0x3d4
   133ee:	e8 f8 fe ff ff       	call   132eb <outb>
   133f3:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   133f6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   133fa:	66 c1 e8 08          	shr    $0x8,%ax
   133fe:	0f b6 c0             	movzbl %al,%eax
   13401:	83 ec 08             	sub    $0x8,%esp
   13404:	50                   	push   %eax
   13405:	68 d5 03 00 00       	push   $0x3d5
   1340a:	e8 dc fe ff ff       	call   132eb <outb>
   1340f:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   13412:	83 ec 0c             	sub    $0xc,%esp
   13415:	ff 75 f4             	push   -0xc(%ebp)
   13418:	e8 f7 fd ff ff       	call   13214 <idt_leave_protection>
   1341d:	83 c4 10             	add    $0x10,%esp
  return pos;
   13420:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   13424:	c9                   	leave  
   13425:	c3                   	ret    

00013426 <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   13426:	55                   	push   %ebp
   13427:	89 e5                	mov    %esp,%ebp
   13429:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   1342c:	8b 45 08             	mov    0x8(%ebp),%eax
   1342f:	8b 48 04             	mov    0x4(%eax),%ecx
   13432:	8b 45 08             	mov    0x8(%ebp),%eax
   13435:	8b 50 0c             	mov    0xc(%eax),%edx
   13438:	8b 45 0c             	mov    0xc(%ebp),%eax
   1343b:	0f af c2             	imul   %edx,%eax
   1343e:	01 c0                	add    %eax,%eax
   13440:	01 c8                	add    %ecx,%eax
   13442:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   13445:	8b 45 08             	mov    0x8(%ebp),%eax
   13448:	8b 48 04             	mov    0x4(%eax),%ecx
   1344b:	8b 45 08             	mov    0x8(%ebp),%eax
   1344e:	8b 40 0c             	mov    0xc(%eax),%eax
   13451:	8b 55 10             	mov    0x10(%ebp),%edx
   13454:	83 c2 01             	add    $0x1,%edx
   13457:	0f af c2             	imul   %edx,%eax
   1345a:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   1345c:	01 c8                	add    %ecx,%eax
   1345e:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   13461:	eb 4d                	jmp    134b0 <erase_rows+0x8a>
    disp_start->c = ' ';
   13463:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13466:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = console->foreground;
   13469:	8b 45 08             	mov    0x8(%ebp),%eax
   1346c:	8b 40 18             	mov    0x18(%eax),%eax
   1346f:	c1 e0 04             	shl    $0x4,%eax
   13472:	c0 f8 04             	sar    $0x4,%al
   13475:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13478:	83 e0 0f             	and    $0xf,%eax
   1347b:	89 c1                	mov    %eax,%ecx
   1347d:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13481:	83 e0 f0             	and    $0xfffffff0,%eax
   13484:	09 c8                	or     %ecx,%eax
   13486:	88 42 01             	mov    %al,0x1(%edx)
    disp_start->background = console->background;
   13489:	8b 45 08             	mov    0x8(%ebp),%eax
   1348c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1348f:	c1 e0 05             	shl    $0x5,%eax
   13492:	c0 f8 05             	sar    $0x5,%al
   13495:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13498:	83 e0 07             	and    $0x7,%eax
   1349b:	c1 e0 04             	shl    $0x4,%eax
   1349e:	89 c1                	mov    %eax,%ecx
   134a0:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   134a4:	83 e0 8f             	and    $0xffffff8f,%eax
   134a7:	09 c8                	or     %ecx,%eax
   134a9:	88 42 01             	mov    %al,0x1(%edx)

    disp_start++;
   134ac:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   134b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134b3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   134b6:	72 ab                	jb     13463 <erase_rows+0x3d>
  }
}
   134b8:	90                   	nop
   134b9:	90                   	nop
   134ba:	c9                   	leave  
   134bb:	c3                   	ret    

000134bc <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   134bc:	55                   	push   %ebp
   134bd:	89 e5                	mov    %esp,%ebp
   134bf:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   134c2:	8b 45 08             	mov    0x8(%ebp),%eax
   134c5:	8b 40 04             	mov    0x4(%eax),%eax
   134c8:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   134cb:	8b 45 08             	mov    0x8(%ebp),%eax
   134ce:	8b 48 04             	mov    0x4(%eax),%ecx
   134d1:	8b 45 08             	mov    0x8(%ebp),%eax
   134d4:	8b 50 0c             	mov    0xc(%eax),%edx
   134d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   134da:	0f af c2             	imul   %edx,%eax
   134dd:	01 c0                	add    %eax,%eax
   134df:	01 c8                	add    %ecx,%eax
   134e1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   134e4:	8b 45 08             	mov    0x8(%ebp),%eax
   134e7:	8b 40 08             	mov    0x8(%eax),%eax
   134ea:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   134ed:	29 c8                	sub    %ecx,%eax
   134ef:	89 c2                	mov    %eax,%edx
   134f1:	8b 45 08             	mov    0x8(%ebp),%eax
   134f4:	8b 40 0c             	mov    0xc(%eax),%eax
   134f7:	0f af c2             	imul   %edx,%eax
   134fa:	01 c0                	add    %eax,%eax
   134fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   134ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13502:	83 ec 04             	sub    $0x4,%esp
   13505:	50                   	push   %eax
   13506:	ff 75 f0             	push   -0x10(%ebp)
   13509:	ff 75 f4             	push   -0xc(%ebp)
   1350c:	e8 2f 2a 00 00       	call   15f40 <kernel_memcpy>
   13511:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13514:	8b 45 08             	mov    0x8(%ebp),%eax
   13517:	8b 40 08             	mov    0x8(%eax),%eax
   1351a:	83 e8 01             	sub    $0x1,%eax
   1351d:	89 c2                	mov    %eax,%edx
   1351f:	8b 45 08             	mov    0x8(%ebp),%eax
   13522:	8b 40 08             	mov    0x8(%eax),%eax
   13525:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13528:	29 c8                	sub    %ecx,%eax
   1352a:	83 ec 04             	sub    $0x4,%esp
   1352d:	52                   	push   %edx
   1352e:	50                   	push   %eax
   1352f:	ff 75 08             	push   0x8(%ebp)
   13532:	e8 ef fe ff ff       	call   13426 <erase_rows>
   13537:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   1353a:	8b 45 08             	mov    0x8(%ebp),%eax
   1353d:	8b 40 10             	mov    0x10(%eax),%eax
   13540:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13543:	29 c8                	sub    %ecx,%eax
   13545:	89 c2                	mov    %eax,%edx
   13547:	8b 45 08             	mov    0x8(%ebp),%eax
   1354a:	89 50 10             	mov    %edx,0x10(%eax)
}
   1354d:	90                   	nop
   1354e:	c9                   	leave  
   1354f:	c3                   	ret    

00013550 <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   13550:	55                   	push   %ebp
   13551:	89 e5                	mov    %esp,%ebp
   13553:	8b 45 08             	mov    0x8(%ebp),%eax
   13556:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   1355d:	90                   	nop
   1355e:	5d                   	pop    %ebp
   1355f:	c3                   	ret    

00013560 <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   13560:	55                   	push   %ebp
   13561:	89 e5                	mov    %esp,%ebp
   13563:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   13566:	8b 45 08             	mov    0x8(%ebp),%eax
   13569:	8b 40 10             	mov    0x10(%eax),%eax
   1356c:	8d 50 01             	lea    0x1(%eax),%edx
   1356f:	8b 45 08             	mov    0x8(%ebp),%eax
   13572:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   13575:	8b 45 08             	mov    0x8(%ebp),%eax
   13578:	8b 50 10             	mov    0x10(%eax),%edx
   1357b:	8b 45 08             	mov    0x8(%ebp),%eax
   1357e:	8b 40 08             	mov    0x8(%eax),%eax
   13581:	39 c2                	cmp    %eax,%edx
   13583:	72 10                	jb     13595 <move_to_next_line+0x35>
    scroll_up(console, 1);
   13585:	83 ec 08             	sub    $0x8,%esp
   13588:	6a 01                	push   $0x1
   1358a:	ff 75 08             	push   0x8(%ebp)
   1358d:	e8 2a ff ff ff       	call   134bc <scroll_up>
   13592:	83 c4 10             	add    $0x10,%esp
  }
}
   13595:	90                   	nop
   13596:	c9                   	leave  
   13597:	c3                   	ret    

00013598 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   13598:	55                   	push   %ebp
   13599:	89 e5                	mov    %esp,%ebp
   1359b:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   1359e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   135a5:	eb 5c                	jmp    13603 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   135a7:	8b 45 08             	mov    0x8(%ebp),%eax
   135aa:	8b 40 14             	mov    0x14(%eax),%eax
   135ad:	8d 50 01             	lea    0x1(%eax),%edx
   135b0:	8b 45 08             	mov    0x8(%ebp),%eax
   135b3:	89 50 14             	mov    %edx,0x14(%eax)
   135b6:	8b 45 08             	mov    0x8(%ebp),%eax
   135b9:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   135bc:	8b 45 08             	mov    0x8(%ebp),%eax
   135bf:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   135c2:	39 c2                	cmp    %eax,%edx
   135c4:	72 39                	jb     135ff <move_forward+0x67>
      console->cursor_row++;
   135c6:	8b 45 08             	mov    0x8(%ebp),%eax
   135c9:	8b 40 10             	mov    0x10(%eax),%eax
   135cc:	8d 50 01             	lea    0x1(%eax),%edx
   135cf:	8b 45 08             	mov    0x8(%ebp),%eax
   135d2:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   135d5:	8b 45 08             	mov    0x8(%ebp),%eax
   135d8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   135df:	8b 45 08             	mov    0x8(%ebp),%eax
   135e2:	8b 50 10             	mov    0x10(%eax),%edx
   135e5:	8b 45 08             	mov    0x8(%ebp),%eax
   135e8:	8b 40 08             	mov    0x8(%eax),%eax
   135eb:	39 c2                	cmp    %eax,%edx
   135ed:	72 10                	jb     135ff <move_forward+0x67>
        scroll_up(console, 1);
   135ef:	83 ec 08             	sub    $0x8,%esp
   135f2:	6a 01                	push   $0x1
   135f4:	ff 75 08             	push   0x8(%ebp)
   135f7:	e8 c0 fe ff ff       	call   134bc <scroll_up>
   135fc:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   135ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13603:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13606:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13609:	7c 9c                	jl     135a7 <move_forward+0xf>
      }
    }
  }
}
   1360b:	90                   	nop
   1360c:	90                   	nop
   1360d:	c9                   	leave  
   1360e:	c3                   	ret    

0001360f <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   1360f:	55                   	push   %ebp
   13610:	89 e5                	mov    %esp,%ebp
   13612:	83 ec 28             	sub    $0x28,%esp
   13615:	8b 45 0c             	mov    0xc(%ebp),%eax
   13618:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   1361b:	8b 45 08             	mov    0x8(%ebp),%eax
   1361e:	8b 48 14             	mov    0x14(%eax),%ecx
   13621:	8b 45 08             	mov    0x8(%ebp),%eax
   13624:	8b 50 10             	mov    0x10(%eax),%edx
   13627:	8b 45 08             	mov    0x8(%ebp),%eax
   1362a:	8b 40 0c             	mov    0xc(%eax),%eax
   1362d:	0f af c2             	imul   %edx,%eax
   13630:	01 c8                	add    %ecx,%eax
  int offset =
   13632:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   13635:	8b 45 08             	mov    0x8(%ebp),%eax
   13638:	8b 50 04             	mov    0x4(%eax),%edx
   1363b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1363e:	01 c0                	add    %eax,%eax
   13640:	01 d0                	add    %edx,%eax
   13642:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   13645:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13648:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   1364c:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   1364e:	8b 45 08             	mov    0x8(%ebp),%eax
   13651:	8b 40 18             	mov    0x18(%eax),%eax
   13654:	c1 e0 04             	shl    $0x4,%eax
   13657:	c0 f8 04             	sar    $0x4,%al
   1365a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1365d:	83 e0 0f             	and    $0xf,%eax
   13660:	89 c1                	mov    %eax,%ecx
   13662:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13666:	83 e0 f0             	and    $0xfffffff0,%eax
   13669:	09 c8                	or     %ecx,%eax
   1366b:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   1366e:	8b 45 08             	mov    0x8(%ebp),%eax
   13671:	8b 40 1c             	mov    0x1c(%eax),%eax
   13674:	c1 e0 05             	shl    $0x5,%eax
   13677:	c0 f8 05             	sar    $0x5,%al
   1367a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1367d:	83 e0 07             	and    $0x7,%eax
   13680:	c1 e0 04             	shl    $0x4,%eax
   13683:	89 c1                	mov    %eax,%ecx
   13685:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13689:	83 e0 8f             	and    $0xffffff8f,%eax
   1368c:	09 c8                	or     %ecx,%eax
   1368e:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   13691:	83 ec 08             	sub    $0x8,%esp
   13694:	6a 01                	push   $0x1
   13696:	ff 75 08             	push   0x8(%ebp)
   13699:	e8 fa fe ff ff       	call   13598 <move_forward>
   1369e:	83 c4 10             	add    $0x10,%esp
}
   136a1:	90                   	nop
   136a2:	c9                   	leave  
   136a3:	c3                   	ret    

000136a4 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   136a4:	55                   	push   %ebp
   136a5:	89 e5                	mov    %esp,%ebp
   136a7:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   136aa:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   136b1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   136b8:	eb 55                	jmp    1370f <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   136ba:	8b 45 08             	mov    0x8(%ebp),%eax
   136bd:	8b 40 14             	mov    0x14(%eax),%eax
   136c0:	85 c0                	test   %eax,%eax
   136c2:	74 18                	je     136dc <move_backword+0x38>
      console->cursor_col--;
   136c4:	8b 45 08             	mov    0x8(%ebp),%eax
   136c7:	8b 40 14             	mov    0x14(%eax),%eax
   136ca:	8d 50 ff             	lea    -0x1(%eax),%edx
   136cd:	8b 45 08             	mov    0x8(%ebp),%eax
   136d0:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   136d3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   136da:	eb 2f                	jmp    1370b <move_backword+0x67>
    } else if (console->cursor_row >
   136dc:	8b 45 08             	mov    0x8(%ebp),%eax
   136df:	8b 40 10             	mov    0x10(%eax),%eax
   136e2:	85 c0                	test   %eax,%eax
   136e4:	74 25                	je     1370b <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   136e6:	8b 45 08             	mov    0x8(%ebp),%eax
   136e9:	8b 40 10             	mov    0x10(%eax),%eax
   136ec:	8d 50 ff             	lea    -0x1(%eax),%edx
   136ef:	8b 45 08             	mov    0x8(%ebp),%eax
   136f2:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   136f5:	8b 45 08             	mov    0x8(%ebp),%eax
   136f8:	8b 40 0c             	mov    0xc(%eax),%eax
   136fb:	8d 50 ff             	lea    -0x1(%eax),%edx
   136fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13701:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13704:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1370b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1370f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13712:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13715:	7c a3                	jl     136ba <move_backword+0x16>
    }
  }

  return status;
   13717:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1371a:	c9                   	leave  
   1371b:	c3                   	ret    

0001371c <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   1371c:	55                   	push   %ebp
   1371d:	89 e5                	mov    %esp,%ebp
   1371f:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   13722:	6a 01                	push   $0x1
   13724:	ff 75 08             	push   0x8(%ebp)
   13727:	e8 78 ff ff ff       	call   136a4 <move_backword>
   1372c:	83 c4 08             	add    $0x8,%esp
   1372f:	85 c0                	test   %eax,%eax
   13731:	75 20                	jne    13753 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   13733:	83 ec 08             	sub    $0x8,%esp
   13736:	6a 20                	push   $0x20
   13738:	ff 75 08             	push   0x8(%ebp)
   1373b:	e8 cf fe ff ff       	call   1360f <show_char>
   13740:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   13743:	83 ec 08             	sub    $0x8,%esp
   13746:	6a 01                	push   $0x1
   13748:	ff 75 08             	push   0x8(%ebp)
   1374b:	e8 54 ff ff ff       	call   136a4 <move_backword>
   13750:	83 c4 10             	add    $0x10,%esp
  }
}
   13753:	90                   	nop
   13754:	c9                   	leave  
   13755:	c3                   	ret    

00013756 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   13756:	55                   	push   %ebp
   13757:	89 e5                	mov    %esp,%ebp
   13759:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   1375c:	8b 45 08             	mov    0x8(%ebp),%eax
   1375f:	8b 50 0c             	mov    0xc(%eax),%edx
   13762:	8b 45 08             	mov    0x8(%ebp),%eax
   13765:	8b 40 08             	mov    0x8(%eax),%eax
   13768:	0f af c2             	imul   %edx,%eax
   1376b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   1376e:	8b 45 08             	mov    0x8(%ebp),%eax
   13771:	8b 40 04             	mov    0x4(%eax),%eax
   13774:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   13777:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1377e:	eb 51                	jmp    137d1 <clear_display+0x7b>
    start->c = ' ';
   13780:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13783:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   13786:	8b 45 08             	mov    0x8(%ebp),%eax
   13789:	8b 40 18             	mov    0x18(%eax),%eax
   1378c:	c1 e0 04             	shl    $0x4,%eax
   1378f:	c0 f8 04             	sar    $0x4,%al
   13792:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13795:	83 e0 0f             	and    $0xf,%eax
   13798:	89 c1                	mov    %eax,%ecx
   1379a:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1379e:	83 e0 f0             	and    $0xfffffff0,%eax
   137a1:	09 c8                	or     %ecx,%eax
   137a3:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   137a6:	8b 45 08             	mov    0x8(%ebp),%eax
   137a9:	8b 40 1c             	mov    0x1c(%eax),%eax
   137ac:	c1 e0 05             	shl    $0x5,%eax
   137af:	c0 f8 05             	sar    $0x5,%al
   137b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   137b5:	83 e0 07             	and    $0x7,%eax
   137b8:	c1 e0 04             	shl    $0x4,%eax
   137bb:	89 c1                	mov    %eax,%ecx
   137bd:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   137c1:	83 e0 8f             	and    $0xffffff8f,%eax
   137c4:	09 c8                	or     %ecx,%eax
   137c6:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   137c9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   137cd:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   137d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   137d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   137d7:	7c a7                	jl     13780 <clear_display+0x2a>
  }
}
   137d9:	90                   	nop
   137da:	90                   	nop
   137db:	c9                   	leave  
   137dc:	c3                   	ret    

000137dd <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   137dd:	55                   	push   %ebp
   137de:	89 e5                	mov    %esp,%ebp
   137e0:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   137e3:	8b 45 08             	mov    0x8(%ebp),%eax
   137e6:	8b 40 14             	mov    0x14(%eax),%eax
   137e9:	83 e0 03             	and    $0x3,%eax
   137ec:	89 c2                	mov    %eax,%edx
   137ee:	b8 04 00 00 00       	mov    $0x4,%eax
   137f3:	29 d0                	sub    %edx,%eax
   137f5:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   137f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   137ff:	eb 14                	jmp    13815 <print_table+0x38>
    show_char(console, ' ');
   13801:	83 ec 08             	sub    $0x8,%esp
   13804:	6a 20                	push   $0x20
   13806:	ff 75 08             	push   0x8(%ebp)
   13809:	e8 01 fe ff ff       	call   1360f <show_char>
   1380e:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   13811:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13815:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13818:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1381b:	7c e4                	jl     13801 <print_table+0x24>
  }

  update_cursor_pos(console);
   1381d:	83 ec 0c             	sub    $0xc,%esp
   13820:	ff 75 08             	push   0x8(%ebp)
   13823:	e8 58 fb ff ff       	call   13380 <update_cursor_pos>
   13828:	83 c4 10             	add    $0x10,%esp
}
   1382b:	90                   	nop
   1382c:	c9                   	leave  
   1382d:	c3                   	ret    

0001382e <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   1382e:	55                   	push   %ebp
   1382f:	89 e5                	mov    %esp,%ebp
   13831:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   13834:	8b 45 08             	mov    0x8(%ebp),%eax
   13837:	6b c0 54             	imul   $0x54,%eax,%eax
   1383a:	05 00 b4 04 00       	add    $0x4b400,%eax
   1383f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   13842:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13845:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   1384c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1384f:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   13856:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13859:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   13860:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13863:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   1386a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1386e:	75 38                	jne    138a8 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   13870:	e8 97 fa ff ff       	call   1330c <read_cursor_pos>
   13875:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   13878:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1387b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1387e:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13881:	ba 00 00 00 00       	mov    $0x0,%edx
   13886:	f7 f1                	div    %ecx
   13888:	89 c2                	mov    %eax,%edx
   1388a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1388d:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   13890:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13893:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13896:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13899:	ba 00 00 00 00       	mov    $0x0,%edx
   1389e:	f7 f1                	div    %ecx
   138a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138a3:	89 50 14             	mov    %edx,0x14(%eax)
   138a6:	eb 22                	jmp    138ca <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   138a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138ab:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   138b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138b5:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   138bc:	83 ec 0c             	sub    $0xc,%esp
   138bf:	ff 75 f4             	push   -0xc(%ebp)
   138c2:	e8 8f fe ff ff       	call   13756 <clear_display>
   138c7:	83 c4 10             	add    $0x10,%esp
    //update_cursor_pos(console);
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   138ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138cd:	8b 50 14             	mov    0x14(%eax),%edx
   138d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d3:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   138d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d9:	8b 50 10             	mov    0x10(%eax),%edx
   138dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138df:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   138e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138e5:	83 c0 28             	add    $0x28,%eax
   138e8:	83 ec 04             	sub    $0x4,%esp
   138eb:	6a 28                	push   $0x28
   138ed:	6a 00                	push   $0x0
   138ef:	50                   	push   %eax
   138f0:	e8 9a 26 00 00       	call   15f8f <kernel_memset>
   138f5:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   138f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138fb:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   13902:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13905:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   1390b:	8b 45 08             	mov    0x8(%ebp),%eax
   1390e:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13914:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   1391a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1391d:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  return 0;
   13920:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13925:	c9                   	leave  
   13926:	c3                   	ret    

00013927 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13927:	55                   	push   %ebp
   13928:	89 e5                	mov    %esp,%ebp
   1392a:	83 ec 18             	sub    $0x18,%esp
   1392d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13930:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13933:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13937:	83 f8 1b             	cmp    $0x1b,%eax
   1393a:	7f 16                	jg     13952 <write_normal+0x2b>
   1393c:	83 f8 08             	cmp    $0x8,%eax
   1393f:	7c 75                	jl     139b6 <write_normal+0x8f>
   13941:	83 e8 08             	sub    $0x8,%eax
   13944:	83 f8 13             	cmp    $0x13,%eax
   13947:	77 6d                	ja     139b6 <write_normal+0x8f>
   13949:	8b 04 85 a0 73 01 00 	mov    0x173a0(,%eax,4),%eax
   13950:	ff e0                	jmp    *%eax
   13952:	83 f8 7f             	cmp    $0x7f,%eax
   13955:	74 0d                	je     13964 <write_normal+0x3d>
   13957:	eb 5d                	jmp    139b6 <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   13959:	8b 45 08             	mov    0x8(%ebp),%eax
   1395c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13962:	eb 72                	jmp    139d6 <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   13964:	83 ec 0c             	sub    $0xc,%esp
   13967:	ff 75 08             	push   0x8(%ebp)
   1396a:	e8 ad fd ff ff       	call   1371c <erase_backword>
   1396f:	83 c4 10             	add    $0x10,%esp
      break;
   13972:	eb 62                	jmp    139d6 <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13974:	83 ec 08             	sub    $0x8,%esp
   13977:	6a 01                	push   $0x1
   13979:	ff 75 08             	push   0x8(%ebp)
   1397c:	e8 23 fd ff ff       	call   136a4 <move_backword>
   13981:	83 c4 10             	add    $0x10,%esp
      break;
   13984:	eb 50                	jmp    139d6 <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13986:	83 ec 0c             	sub    $0xc,%esp
   13989:	ff 75 08             	push   0x8(%ebp)
   1398c:	e8 4c fe ff ff       	call   137dd <print_table>
   13991:	83 c4 10             	add    $0x10,%esp
      break;
   13994:	eb 40                	jmp    139d6 <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13996:	83 ec 0c             	sub    $0xc,%esp
   13999:	ff 75 08             	push   0x8(%ebp)
   1399c:	e8 af fb ff ff       	call   13550 <move_to_col0>
   139a1:	83 c4 10             	add    $0x10,%esp
      break;
   139a4:	eb 30                	jmp    139d6 <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   139a6:	83 ec 0c             	sub    $0xc,%esp
   139a9:	ff 75 08             	push   0x8(%ebp)
   139ac:	e8 af fb ff ff       	call   13560 <move_to_next_line>
   139b1:	83 c4 10             	add    $0x10,%esp
      break;
   139b4:	eb 20                	jmp    139d6 <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   139b6:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   139ba:	7e 19                	jle    139d5 <write_normal+0xae>
   139bc:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   139c0:	74 13                	je     139d5 <write_normal+0xae>
        show_char(console, c);
   139c2:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   139c6:	83 ec 08             	sub    $0x8,%esp
   139c9:	50                   	push   %eax
   139ca:	ff 75 08             	push   0x8(%ebp)
   139cd:	e8 3d fc ff ff       	call   1360f <show_char>
   139d2:	83 c4 10             	add    $0x10,%esp
      }
      break;
   139d5:	90                   	nop
  }
}
   139d6:	90                   	nop
   139d7:	c9                   	leave  
   139d8:	c3                   	ret    

000139d9 <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   139d9:	55                   	push   %ebp
   139da:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   139dc:	8b 45 08             	mov    0x8(%ebp),%eax
   139df:	8b 50 14             	mov    0x14(%eax),%edx
   139e2:	8b 45 08             	mov    0x8(%ebp),%eax
   139e5:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   139e8:	8b 45 08             	mov    0x8(%ebp),%eax
   139eb:	8b 50 10             	mov    0x10(%eax),%edx
   139ee:	8b 45 08             	mov    0x8(%ebp),%eax
   139f1:	89 50 24             	mov    %edx,0x24(%eax)
}
   139f4:	90                   	nop
   139f5:	5d                   	pop    %ebp
   139f6:	c3                   	ret    

000139f7 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   139f7:	55                   	push   %ebp
   139f8:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   139fa:	8b 45 08             	mov    0x8(%ebp),%eax
   139fd:	8b 50 20             	mov    0x20(%eax),%edx
   13a00:	8b 45 08             	mov    0x8(%ebp),%eax
   13a03:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13a06:	8b 45 08             	mov    0x8(%ebp),%eax
   13a09:	8b 50 24             	mov    0x24(%eax),%edx
   13a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a0f:	89 50 10             	mov    %edx,0x10(%eax)
}
   13a12:	90                   	nop
   13a13:	5d                   	pop    %ebp
   13a14:	c3                   	ret    

00013a15 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13a15:	55                   	push   %ebp
   13a16:	89 e5                	mov    %esp,%ebp
   13a18:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   13a1e:	83 c0 28             	add    $0x28,%eax
   13a21:	83 ec 04             	sub    $0x4,%esp
   13a24:	6a 28                	push   $0x28
   13a26:	6a 00                	push   $0x0
   13a28:	50                   	push   %eax
   13a29:	e8 61 25 00 00       	call   15f8f <kernel_memset>
   13a2e:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13a31:	8b 45 08             	mov    0x8(%ebp),%eax
   13a34:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13a3b:	90                   	nop
   13a3c:	c9                   	leave  
   13a3d:	c3                   	ret    

00013a3e <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13a3e:	55                   	push   %ebp
   13a3f:	89 e5                	mov    %esp,%ebp
   13a41:	83 ec 18             	sub    $0x18,%esp
   13a44:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a47:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13a4a:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a4e:	83 f8 5b             	cmp    $0x5b,%eax
   13a51:	74 11                	je     13a64 <write_esc+0x26>
   13a53:	83 f8 5b             	cmp    $0x5b,%eax
   13a56:	7f 55                	jg     13aad <write_esc+0x6f>
   13a58:	83 f8 37             	cmp    $0x37,%eax
   13a5b:	74 20                	je     13a7d <write_esc+0x3f>
   13a5d:	83 f8 38             	cmp    $0x38,%eax
   13a60:	74 34                	je     13a96 <write_esc+0x58>
   13a62:	eb 49                	jmp    13aad <write_esc+0x6f>
    case '[':
      clear_esc_param(console);
   13a64:	83 ec 0c             	sub    $0xc,%esp
   13a67:	ff 75 08             	push   0x8(%ebp)
   13a6a:	e8 a6 ff ff ff       	call   13a15 <clear_esc_param>
   13a6f:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13a72:	8b 45 08             	mov    0x8(%ebp),%eax
   13a75:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13a7b:	eb 3a                	jmp    13ab7 <write_esc+0x79>
    case '7':
      save_cursor(console);
   13a7d:	83 ec 0c             	sub    $0xc,%esp
   13a80:	ff 75 08             	push   0x8(%ebp)
   13a83:	e8 51 ff ff ff       	call   139d9 <save_cursor>
   13a88:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   13a8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13a94:	eb 21                	jmp    13ab7 <write_esc+0x79>
    case '8':
      restore_cursor(console);
   13a96:	83 ec 0c             	sub    $0xc,%esp
   13a99:	ff 75 08             	push   0x8(%ebp)
   13a9c:	e8 56 ff ff ff       	call   139f7 <restore_cursor>
   13aa1:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13aad:	8b 45 08             	mov    0x8(%ebp),%eax
   13ab0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13ab6:	90                   	nop
  }
}
   13ab7:	90                   	nop
   13ab8:	c9                   	leave  
   13ab9:	c3                   	ret    

00013aba <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13aba:	55                   	push   %ebp
   13abb:	89 e5                	mov    %esp,%ebp
   13abd:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13ac0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13ac7:	eb 78                	jmp    13b41 <set_font_style+0x87>
    int param = console->esc_param[i];
   13ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   13acc:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13acf:	83 c2 08             	add    $0x8,%edx
   13ad2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13ad6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13ad9:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13add:	7e 1b                	jle    13afa <set_font_style+0x40>
   13adf:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13ae3:	7f 15                	jg     13afa <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13ae5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ae8:	83 e8 1e             	sub    $0x1e,%eax
   13aeb:	8b 14 85 00 74 01 00 	mov    0x17400(,%eax,4),%edx
   13af2:	8b 45 08             	mov    0x8(%ebp),%eax
   13af5:	89 50 18             	mov    %edx,0x18(%eax)
   13af8:	eb 43                	jmp    13b3d <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13afa:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13afe:	7e 1b                	jle    13b1b <set_font_style+0x61>
   13b00:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13b04:	7f 15                	jg     13b1b <set_font_style+0x61>
      console->background = color_table[param - 40];
   13b06:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b09:	83 e8 28             	sub    $0x28,%eax
   13b0c:	8b 14 85 00 74 01 00 	mov    0x17400(,%eax,4),%edx
   13b13:	8b 45 08             	mov    0x8(%ebp),%eax
   13b16:	89 50 1c             	mov    %edx,0x1c(%eax)
   13b19:	eb 22                	jmp    13b3d <set_font_style+0x83>
    } else if (param == 39) {
   13b1b:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13b1f:	75 0c                	jne    13b2d <set_font_style+0x73>
      console->foreground = COLOR_White;
   13b21:	8b 45 08             	mov    0x8(%ebp),%eax
   13b24:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13b2b:	eb 10                	jmp    13b3d <set_font_style+0x83>
    } else if (param == 49) {
   13b2d:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13b31:	75 0a                	jne    13b3d <set_font_style+0x83>
      console->background = COLOR_Black;
   13b33:	8b 45 08             	mov    0x8(%ebp),%eax
   13b36:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13b3d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13b41:	8b 45 08             	mov    0x8(%ebp),%eax
   13b44:	8b 40 50             	mov    0x50(%eax),%eax
   13b47:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13b4a:	0f 8e 79 ff ff ff    	jle    13ac9 <set_font_style+0xf>
    }
  }
}
   13b50:	90                   	nop
   13b51:	90                   	nop
   13b52:	c9                   	leave  
   13b53:	c3                   	ret    

00013b54 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13b54:	55                   	push   %ebp
   13b55:	89 e5                	mov    %esp,%ebp
   13b57:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b5d:	8b 40 50             	mov    0x50(%eax),%eax
   13b60:	85 c0                	test   %eax,%eax
   13b62:	78 3c                	js     13ba0 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13b64:	8b 45 08             	mov    0x8(%ebp),%eax
   13b67:	8b 40 28             	mov    0x28(%eax),%eax
   13b6a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13b6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13b71:	75 2e                	jne    13ba1 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13b73:	8b 45 08             	mov    0x8(%ebp),%eax
   13b76:	8b 40 08             	mov    0x8(%eax),%eax
   13b79:	83 e8 01             	sub    $0x1,%eax
   13b7c:	50                   	push   %eax
   13b7d:	6a 00                	push   $0x0
   13b7f:	ff 75 08             	push   0x8(%ebp)
   13b82:	e8 9f f8 ff ff       	call   13426 <erase_rows>
   13b87:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13b94:	8b 45 08             	mov    0x8(%ebp),%eax
   13b97:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13b9e:	eb 01                	jmp    13ba1 <erase_in_display+0x4d>
    return;
   13ba0:	90                   	nop
  }
}
   13ba1:	c9                   	leave  
   13ba2:	c3                   	ret    

00013ba3 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13ba3:	55                   	push   %ebp
   13ba4:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13ba6:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba9:	8b 40 28             	mov    0x28(%eax),%eax
   13bac:	89 c2                	mov    %eax,%edx
   13bae:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb1:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb7:	8b 40 2c             	mov    0x2c(%eax),%eax
   13bba:	89 c2                	mov    %eax,%edx
   13bbc:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbf:	89 50 14             	mov    %edx,0x14(%eax)
}
   13bc2:	90                   	nop
   13bc3:	5d                   	pop    %ebp
   13bc4:	c3                   	ret    

00013bc5 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13bc5:	55                   	push   %ebp
   13bc6:	89 e5                	mov    %esp,%ebp
   13bc8:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13bcb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13bcf:	75 07                	jne    13bd8 <move_left+0x13>
    n = 1;
   13bd1:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   13bdb:	8b 40 14             	mov    0x14(%eax),%eax
   13bde:	8b 55 0c             	mov    0xc(%ebp),%edx
   13be1:	29 d0                	sub    %edx,%eax
   13be3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13be6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13be9:	ba 00 00 00 00       	mov    $0x0,%edx
   13bee:	85 c0                	test   %eax,%eax
   13bf0:	0f 48 c2             	cmovs  %edx,%eax
   13bf3:	89 c2                	mov    %eax,%edx
   13bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf8:	89 50 14             	mov    %edx,0x14(%eax)
}
   13bfb:	90                   	nop
   13bfc:	c9                   	leave  
   13bfd:	c3                   	ret    

00013bfe <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13bfe:	55                   	push   %ebp
   13bff:	89 e5                	mov    %esp,%ebp
   13c01:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13c04:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13c08:	75 07                	jne    13c11 <move_right+0x13>
    n = 1;
   13c0a:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13c11:	8b 45 08             	mov    0x8(%ebp),%eax
   13c14:	8b 50 14             	mov    0x14(%eax),%edx
   13c17:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c1a:	01 d0                	add    %edx,%eax
   13c1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c22:	8b 50 0c             	mov    0xc(%eax),%edx
   13c25:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c28:	39 c2                	cmp    %eax,%edx
   13c2a:	77 0b                	ja     13c37 <move_right+0x39>
   13c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c2f:	8b 40 0c             	mov    0xc(%eax),%eax
   13c32:	83 e8 01             	sub    $0x1,%eax
   13c35:	eb 03                	jmp    13c3a <move_right+0x3c>
   13c37:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13c3a:	8b 55 08             	mov    0x8(%ebp),%edx
   13c3d:	89 42 14             	mov    %eax,0x14(%edx)
}
   13c40:	90                   	nop
   13c41:	c9                   	leave  
   13c42:	c3                   	ret    

00013c43 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13c43:	55                   	push   %ebp
   13c44:	89 e5                	mov    %esp,%ebp
   13c46:	83 ec 14             	sub    $0x14,%esp
   13c49:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c4c:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13c4f:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13c53:	7e 44                	jle    13c99 <write_esc_square+0x56>
   13c55:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13c59:	7f 3e                	jg     13c99 <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13c5b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c5e:	8b 40 50             	mov    0x50(%eax),%eax
   13c61:	83 c0 08             	add    $0x8,%eax
   13c64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c6e:	01 d0                	add    %edx,%eax
   13c70:	83 c0 08             	add    $0x8,%eax
   13c73:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13c76:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c79:	8b 10                	mov    (%eax),%edx
   13c7b:	89 d0                	mov    %edx,%eax
   13c7d:	c1 e0 02             	shl    $0x2,%eax
   13c80:	01 d0                	add    %edx,%eax
   13c82:	01 c0                	add    %eax,%eax
   13c84:	89 c2                	mov    %eax,%edx
   13c86:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13c8a:	01 d0                	add    %edx,%eax
   13c8c:	8d 50 d0             	lea    -0x30(%eax),%edx
   13c8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c92:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13c94:	e9 ab 00 00 00       	jmp    13d44 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13c99:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13c9d:	75 1f                	jne    13cbe <write_esc_square+0x7b>
   13c9f:	8b 45 08             	mov    0x8(%ebp),%eax
   13ca2:	8b 40 50             	mov    0x50(%eax),%eax
   13ca5:	83 f8 09             	cmp    $0x9,%eax
   13ca8:	7f 14                	jg     13cbe <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13caa:	8b 45 08             	mov    0x8(%ebp),%eax
   13cad:	8b 40 50             	mov    0x50(%eax),%eax
   13cb0:	8d 50 01             	lea    0x1(%eax),%edx
   13cb3:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb6:	89 50 50             	mov    %edx,0x50(%eax)
   13cb9:	e9 86 00 00 00       	jmp    13d44 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13cbe:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13cc2:	83 f8 6d             	cmp    $0x6d,%eax
   13cc5:	74 25                	je     13cec <write_esc_square+0xa9>
   13cc7:	83 f8 6d             	cmp    $0x6d,%eax
   13cca:	7f 6d                	jg     13d39 <write_esc_square+0xf6>
   13ccc:	83 f8 4a             	cmp    $0x4a,%eax
   13ccf:	74 5d                	je     13d2e <write_esc_square+0xeb>
   13cd1:	83 f8 4a             	cmp    $0x4a,%eax
   13cd4:	7f 63                	jg     13d39 <write_esc_square+0xf6>
   13cd6:	83 f8 48             	cmp    $0x48,%eax
   13cd9:	74 46                	je     13d21 <write_esc_square+0xde>
   13cdb:	83 f8 48             	cmp    $0x48,%eax
   13cde:	7f 59                	jg     13d39 <write_esc_square+0xf6>
   13ce0:	83 f8 43             	cmp    $0x43,%eax
   13ce3:	74 28                	je     13d0d <write_esc_square+0xca>
   13ce5:	83 f8 44             	cmp    $0x44,%eax
   13ce8:	74 0f                	je     13cf9 <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13cea:	eb 4d                	jmp    13d39 <write_esc_square+0xf6>
        set_font_style(console);
   13cec:	ff 75 08             	push   0x8(%ebp)
   13cef:	e8 c6 fd ff ff       	call   13aba <set_font_style>
   13cf4:	83 c4 04             	add    $0x4,%esp
        break;
   13cf7:	eb 41                	jmp    13d3a <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   13cfc:	8b 40 28             	mov    0x28(%eax),%eax
   13cff:	50                   	push   %eax
   13d00:	ff 75 08             	push   0x8(%ebp)
   13d03:	e8 bd fe ff ff       	call   13bc5 <move_left>
   13d08:	83 c4 08             	add    $0x8,%esp
        break;
   13d0b:	eb 2d                	jmp    13d3a <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13d0d:	8b 45 08             	mov    0x8(%ebp),%eax
   13d10:	8b 40 28             	mov    0x28(%eax),%eax
   13d13:	50                   	push   %eax
   13d14:	ff 75 08             	push   0x8(%ebp)
   13d17:	e8 e2 fe ff ff       	call   13bfe <move_right>
   13d1c:	83 c4 08             	add    $0x8,%esp
        break;
   13d1f:	eb 19                	jmp    13d3a <write_esc_square+0xf7>
        move_cursor(console);
   13d21:	ff 75 08             	push   0x8(%ebp)
   13d24:	e8 7a fe ff ff       	call   13ba3 <move_cursor>
   13d29:	83 c4 04             	add    $0x4,%esp
        break;
   13d2c:	eb 0c                	jmp    13d3a <write_esc_square+0xf7>
        erase_in_display(console);
   13d2e:	ff 75 08             	push   0x8(%ebp)
   13d31:	e8 1e fe ff ff       	call   13b54 <erase_in_display>
   13d36:	83 c4 04             	add    $0x4,%esp
        break;
   13d39:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13d3a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13d43:	90                   	nop
   13d44:	90                   	nop
   13d45:	c9                   	leave  
   13d46:	c3                   	ret    

00013d47 <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13d47:	55                   	push   %ebp
   13d48:	89 e5                	mov    %esp,%ebp
   13d4a:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   13d50:	8b 40 08             	mov    0x8(%eax),%eax
   13d53:	6b c0 54             	imul   $0x54,%eax,%eax
   13d56:	05 00 b4 04 00       	add    $0x4b400,%eax
   13d5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13d5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13d65:	8b 45 08             	mov    0x8(%ebp),%eax
   13d68:	8d 50 0c             	lea    0xc(%eax),%edx
   13d6b:	83 ec 08             	sub    $0x8,%esp
   13d6e:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13d71:	50                   	push   %eax
   13d72:	52                   	push   %edx
   13d73:	e8 86 0a 00 00       	call   147fe <tty_fifo_get>
   13d78:	83 c4 10             	add    $0x10,%esp
   13d7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13d7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13d82:	79 18                	jns    13d9c <console_write+0x55>

    len++;
  } while (1);

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13d84:	8b 45 08             	mov    0x8(%ebp),%eax
   13d87:	8b 50 08             	mov    0x8(%eax),%edx
   13d8a:	a1 a0 b6 04 00       	mov    0x4b6a0,%eax
   13d8f:	39 c2                	cmp    %eax,%edx
   13d91:	0f 84 83 00 00 00    	je     13e1a <console_write+0xd3>
   13d97:	e9 8c 00 00 00       	jmp    13e28 <console_write+0xe1>
    sem_notify(&tty->out_sem);
   13d9c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d9f:	83 c0 34             	add    $0x34,%eax
   13da2:	83 ec 0c             	sub    $0xc,%esp
   13da5:	50                   	push   %eax
   13da6:	e8 71 18 00 00       	call   1561c <sem_notify>
   13dab:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13dae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13db1:	8b 00                	mov    (%eax),%eax
   13db3:	83 f8 02             	cmp    $0x2,%eax
   13db6:	74 40                	je     13df8 <console_write+0xb1>
   13db8:	83 f8 02             	cmp    $0x2,%eax
   13dbb:	77 53                	ja     13e10 <console_write+0xc9>
   13dbd:	85 c0                	test   %eax,%eax
   13dbf:	74 07                	je     13dc8 <console_write+0x81>
   13dc1:	83 f8 01             	cmp    $0x1,%eax
   13dc4:	74 1a                	je     13de0 <console_write+0x99>
        break;
   13dc6:	eb 48                	jmp    13e10 <console_write+0xc9>
        write_normal(console, c);
   13dc8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13dcc:	0f be c0             	movsbl %al,%eax
   13dcf:	83 ec 08             	sub    $0x8,%esp
   13dd2:	50                   	push   %eax
   13dd3:	ff 75 f0             	push   -0x10(%ebp)
   13dd6:	e8 4c fb ff ff       	call   13927 <write_normal>
   13ddb:	83 c4 10             	add    $0x10,%esp
        break;
   13dde:	eb 31                	jmp    13e11 <console_write+0xca>
        write_esc(console, c);
   13de0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13de4:	0f be c0             	movsbl %al,%eax
   13de7:	83 ec 08             	sub    $0x8,%esp
   13dea:	50                   	push   %eax
   13deb:	ff 75 f0             	push   -0x10(%ebp)
   13dee:	e8 4b fc ff ff       	call   13a3e <write_esc>
   13df3:	83 c4 10             	add    $0x10,%esp
        break;
   13df6:	eb 19                	jmp    13e11 <console_write+0xca>
        write_esc_square(console, c);
   13df8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13dfc:	0f be c0             	movsbl %al,%eax
   13dff:	83 ec 08             	sub    $0x8,%esp
   13e02:	50                   	push   %eax
   13e03:	ff 75 f0             	push   -0x10(%ebp)
   13e06:	e8 38 fe ff ff       	call   13c43 <write_esc_square>
   13e0b:	83 c4 10             	add    $0x10,%esp
        break;
   13e0e:	eb 01                	jmp    13e11 <console_write+0xca>
        break;
   13e10:	90                   	nop
    len++;
   13e11:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13e15:	e9 4b ff ff ff       	jmp    13d65 <console_write+0x1e>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13e1a:	83 ec 0c             	sub    $0xc,%esp
   13e1d:	ff 75 f0             	push   -0x10(%ebp)
   13e20:	e8 5b f5 ff ff       	call   13380 <update_cursor_pos>
   13e25:	83 c4 10             	add    $0x10,%esp
  }
  return len;
   13e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13e2b:	c9                   	leave  
   13e2c:	c3                   	ret    

00013e2d <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13e2d:	55                   	push   %ebp
   13e2e:	89 e5                	mov    %esp,%ebp
   13e30:	90                   	nop
   13e31:	5d                   	pop    %ebp
   13e32:	c3                   	ret    

00013e33 <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13e33:	55                   	push   %ebp
   13e34:	89 e5                	mov    %esp,%ebp
   13e36:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13e39:	8b 45 08             	mov    0x8(%ebp),%eax
   13e3c:	6b c0 54             	imul   $0x54,%eax,%eax
   13e3f:	05 00 b4 04 00       	add    $0x4b400,%eax
   13e44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   13e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e4a:	8b 40 04             	mov    0x4(%eax),%eax
   13e4d:	85 c0                	test   %eax,%eax
   13e4f:	75 0e                	jne    13e5f <console_select+0x2c>
      console_init(console_index);
   13e51:	83 ec 0c             	sub    $0xc,%esp
   13e54:	ff 75 08             	push   0x8(%ebp)
   13e57:	e8 d2 f9 ff ff       	call   1382e <console_init>
   13e5c:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   13e5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e62:	8b 40 08             	mov    0x8(%eax),%eax
   13e65:	89 c2                	mov    %eax,%edx
   13e67:	8b 45 08             	mov    0x8(%ebp),%eax
   13e6a:	0f af d0             	imul   %eax,%edx
   13e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e70:	8b 40 0c             	mov    0xc(%eax),%eax
   13e73:	0f af c2             	imul   %edx,%eax
   13e76:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   13e7a:	83 ec 08             	sub    $0x8,%esp
   13e7d:	6a 0c                	push   $0xc
   13e7f:	68 d4 03 00 00       	push   $0x3d4
   13e84:	e8 62 f4 ff ff       	call   132eb <outb>
   13e89:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   13e8c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13e90:	66 c1 e8 08          	shr    $0x8,%ax
   13e94:	0f b6 c0             	movzbl %al,%eax
   13e97:	83 ec 08             	sub    $0x8,%esp
   13e9a:	50                   	push   %eax
   13e9b:	68 d5 03 00 00       	push   $0x3d5
   13ea0:	e8 46 f4 ff ff       	call   132eb <outb>
   13ea5:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   13ea8:	83 ec 08             	sub    $0x8,%esp
   13eab:	6a 0d                	push   $0xd
   13ead:	68 d4 03 00 00       	push   $0x3d4
   13eb2:	e8 34 f4 ff ff       	call   132eb <outb>
   13eb7:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   13eba:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13ebe:	0f b6 c0             	movzbl %al,%eax
   13ec1:	83 ec 08             	sub    $0x8,%esp
   13ec4:	50                   	push   %eax
   13ec5:	68 d5 03 00 00       	push   $0x3d5
   13eca:	e8 1c f4 ff ff       	call   132eb <outb>
   13ecf:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   13ed2:	8b 45 08             	mov    0x8(%ebp),%eax
   13ed5:	a3 a0 b6 04 00       	mov    %eax,0x4b6a0

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   13eda:	8b 45 08             	mov    0x8(%ebp),%eax
   13edd:	83 c0 30             	add    $0x30,%eax
   13ee0:	0f be c0             	movsbl %al,%eax
   13ee3:	83 ec 08             	sub    $0x8,%esp
   13ee6:	50                   	push   %eax
   13ee7:	ff 75 f4             	push   -0xc(%ebp)
   13eea:	e8 20 f7 ff ff       	call   1360f <show_char>
   13eef:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   13ef2:	83 ec 0c             	sub    $0xc,%esp
   13ef5:	ff 75 f4             	push   -0xc(%ebp)
   13ef8:	e8 83 f4 ff ff       	call   13380 <update_cursor_pos>
   13efd:	83 c4 10             	add    $0x10,%esp

   

   13f00:	90                   	nop
   13f01:	c9                   	leave  
   13f02:	c3                   	ret    

00013f03 <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   13f03:	55                   	push   %ebp
   13f04:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   13f06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13f0a:	78 06                	js     13f12 <is_dev_exist+0xf>
   13f0c:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   13f10:	7e 07                	jle    13f19 <is_dev_exist+0x16>
        return 0;
   13f12:	b8 00 00 00 00       	mov    $0x0,%eax
   13f17:	eb 3c                	jmp    13f55 <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   13f19:	8b 55 08             	mov    0x8(%ebp),%edx
   13f1c:	89 d0                	mov    %edx,%eax
   13f1e:	c1 e0 02             	shl    $0x2,%eax
   13f21:	01 d0                	add    %edx,%eax
   13f23:	c1 e0 02             	shl    $0x2,%eax
   13f26:	05 d0 b6 04 00       	add    $0x4b6d0,%eax
   13f2b:	8b 00                	mov    (%eax),%eax
   13f2d:	85 c0                	test   %eax,%eax
   13f2f:	74 18                	je     13f49 <is_dev_exist+0x46>
   13f31:	8b 55 08             	mov    0x8(%ebp),%edx
   13f34:	89 d0                	mov    %edx,%eax
   13f36:	c1 e0 02             	shl    $0x2,%eax
   13f39:	01 d0                	add    %edx,%eax
   13f3b:	c1 e0 02             	shl    $0x2,%eax
   13f3e:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   13f43:	8b 00                	mov    (%eax),%eax
   13f45:	85 c0                	test   %eax,%eax
   13f47:	75 07                	jne    13f50 <is_dev_exist+0x4d>
        return 0;
   13f49:	b8 00 00 00 00       	mov    $0x0,%eax
   13f4e:	eb 05                	jmp    13f55 <is_dev_exist+0x52>
    }

    return 1;
   13f50:	b8 01 00 00 00       	mov    $0x1,%eax
}
   13f55:	5d                   	pop    %ebp
   13f56:	c3                   	ret    

00013f57 <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   13f57:	55                   	push   %ebp
   13f58:	89 e5                	mov    %esp,%ebp
   13f5a:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   13f5d:	e8 9a f2 ff ff       	call   131fc <idt_enter_protection>
   13f62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   13f65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13f6c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13f73:	eb 68                	jmp    13fdd <dev_open+0x86>
        device_t *dev = dev_table + i;
   13f75:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13f78:	89 d0                	mov    %edx,%eax
   13f7a:	c1 e0 02             	shl    $0x2,%eax
   13f7d:	01 d0                	add    %edx,%eax
   13f7f:	c1 e0 02             	shl    $0x2,%eax
   13f82:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   13f87:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   13f8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f8d:	8b 40 10             	mov    0x10(%eax),%eax
   13f90:	85 c0                	test   %eax,%eax
   13f92:	75 08                	jne    13f9c <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   13f94:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f97:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   13f9a:	eb 49                	jmp    13fe5 <dev_open+0x8e>
        } else if (dev->desc->dev_type == dev_type && dev->dev_index == dev_index) {
   13f9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f9f:	8b 00                	mov    (%eax),%eax
   13fa1:	8b 40 14             	mov    0x14(%eax),%eax
   13fa4:	39 45 08             	cmp    %eax,0x8(%ebp)
   13fa7:	75 30                	jne    13fd9 <dev_open+0x82>
   13fa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13fac:	8b 40 08             	mov    0x8(%eax),%eax
   13faf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13fb2:	75 25                	jne    13fd9 <dev_open+0x82>
            //设备已打开过,增加打开次数
            dev->open_count++;
   13fb4:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13fb7:	8b 40 10             	mov    0x10(%eax),%eax
   13fba:	8d 50 01             	lea    0x1(%eax),%edx
   13fbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13fc0:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   13fc3:	83 ec 0c             	sub    $0xc,%esp
   13fc6:	ff 75 e4             	push   -0x1c(%ebp)
   13fc9:	e8 46 f2 ff ff       	call   13214 <idt_leave_protection>
   13fce:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   13fd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13fd4:	e9 c6 00 00 00       	jmp    1409f <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13fd9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13fdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13fe0:	83 f8 7f             	cmp    $0x7f,%eax
   13fe3:	76 90                	jbe    13f75 <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   13fe5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   13fec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13ff3:	eb 24                	jmp    14019 <dev_open+0xc2>
        dev_desc_t *d = dev_des_table[i];
   13ff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13ff8:	8b 04 85 50 80 01 00 	mov    0x18050(,%eax,4),%eax
   13fff:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   14002:	8b 45 dc             	mov    -0x24(%ebp),%eax
   14005:	8b 40 14             	mov    0x14(%eax),%eax
   14008:	39 45 08             	cmp    %eax,0x8(%ebp)
   1400b:	75 08                	jne    14015 <dev_open+0xbe>
            desc = d;
   1400d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   14010:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   14013:	eb 0c                	jmp    14021 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   14015:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   14019:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1401c:	83 f8 01             	cmp    $0x1,%eax
   1401f:	76 d4                	jbe    13ff5 <dev_open+0x9e>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   14021:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14025:	74 65                	je     1408c <dev_open+0x135>
   14027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1402b:	74 5f                	je     1408c <dev_open+0x135>
        free_dev->desc = desc;
   1402d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14030:	8b 55 ec             	mov    -0x14(%ebp),%edx
   14033:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   14035:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14038:	8b 55 10             	mov    0x10(%ebp),%edx
   1403b:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   1403e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14041:	8b 55 0c             	mov    0xc(%ebp),%edx
   14044:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   14047:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1404a:	8b 40 18             	mov    0x18(%eax),%eax
   1404d:	83 ec 0c             	sub    $0xc,%esp
   14050:	ff 75 f4             	push   -0xc(%ebp)
   14053:	ff d0                	call   *%eax
   14055:	83 c4 10             	add    $0x10,%esp
   14058:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   1405b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   1405f:	75 2b                	jne    1408c <dev_open+0x135>
            free_dev->open_count = 1;
   14061:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14064:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   1406b:	83 ec 0c             	sub    $0xc,%esp
   1406e:	ff 75 e4             	push   -0x1c(%ebp)
   14071:	e8 9e f1 ff ff       	call   13214 <idt_leave_protection>
   14076:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   14079:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1407c:	2d c0 b6 04 00       	sub    $0x4b6c0,%eax
   14081:	c1 f8 02             	sar    $0x2,%eax
   14084:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   1408a:	eb 13                	jmp    1409f <dev_open+0x148>

        }
    }

    idt_leave_protection(state);
   1408c:	83 ec 0c             	sub    $0xc,%esp
   1408f:	ff 75 e4             	push   -0x1c(%ebp)
   14092:	e8 7d f1 ff ff       	call   13214 <idt_leave_protection>
   14097:	83 c4 10             	add    $0x10,%esp
    return -1;
   1409a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1409f:	c9                   	leave  
   140a0:	c3                   	ret    

000140a1 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   140a1:	55                   	push   %ebp
   140a2:	89 e5                	mov    %esp,%ebp
   140a4:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   140a7:	ff 75 08             	push   0x8(%ebp)
   140aa:	e8 54 fe ff ff       	call   13f03 <is_dev_exist>
   140af:	83 c4 04             	add    $0x4,%esp
   140b2:	85 c0                	test   %eax,%eax
   140b4:	75 07                	jne    140bd <dev_read+0x1c>
        return -1;
   140b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   140bb:	eb 2e                	jmp    140eb <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   140bd:	8b 55 08             	mov    0x8(%ebp),%edx
   140c0:	89 d0                	mov    %edx,%eax
   140c2:	c1 e0 02             	shl    $0x2,%eax
   140c5:	01 d0                	add    %edx,%eax
   140c7:	c1 e0 02             	shl    $0x2,%eax
   140ca:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   140cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   140d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140d5:	8b 00                	mov    (%eax),%eax
   140d7:	8b 40 1c             	mov    0x1c(%eax),%eax
   140da:	ff 75 14             	push   0x14(%ebp)
   140dd:	ff 75 10             	push   0x10(%ebp)
   140e0:	ff 75 0c             	push   0xc(%ebp)
   140e3:	ff 75 f4             	push   -0xc(%ebp)
   140e6:	ff d0                	call   *%eax
   140e8:	83 c4 10             	add    $0x10,%esp
}
   140eb:	c9                   	leave  
   140ec:	c3                   	ret    

000140ed <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   140ed:	55                   	push   %ebp
   140ee:	89 e5                	mov    %esp,%ebp
   140f0:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   140f3:	ff 75 08             	push   0x8(%ebp)
   140f6:	e8 08 fe ff ff       	call   13f03 <is_dev_exist>
   140fb:	83 c4 04             	add    $0x4,%esp
   140fe:	85 c0                	test   %eax,%eax
   14100:	75 07                	jne    14109 <dev_write+0x1c>
        return -1;
   14102:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14107:	eb 2e                	jmp    14137 <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   14109:	8b 55 08             	mov    0x8(%ebp),%edx
   1410c:	89 d0                	mov    %edx,%eax
   1410e:	c1 e0 02             	shl    $0x2,%eax
   14111:	01 d0                	add    %edx,%eax
   14113:	c1 e0 02             	shl    $0x2,%eax
   14116:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   1411b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   1411e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14121:	8b 00                	mov    (%eax),%eax
   14123:	8b 40 20             	mov    0x20(%eax),%eax
   14126:	ff 75 14             	push   0x14(%ebp)
   14129:	ff 75 10             	push   0x10(%ebp)
   1412c:	ff 75 0c             	push   0xc(%ebp)
   1412f:	ff 75 f4             	push   -0xc(%ebp)
   14132:	ff d0                	call   *%eax
   14134:	83 c4 10             	add    $0x10,%esp
}
   14137:	c9                   	leave  
   14138:	c3                   	ret    

00014139 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   14139:	55                   	push   %ebp
   1413a:	89 e5                	mov    %esp,%ebp
   1413c:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1413f:	ff 75 08             	push   0x8(%ebp)
   14142:	e8 bc fd ff ff       	call   13f03 <is_dev_exist>
   14147:	83 c4 04             	add    $0x4,%esp
   1414a:	85 c0                	test   %eax,%eax
   1414c:	75 07                	jne    14155 <dev_control+0x1c>
        return -1;
   1414e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14153:	eb 2e                	jmp    14183 <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   14155:	8b 55 08             	mov    0x8(%ebp),%edx
   14158:	89 d0                	mov    %edx,%eax
   1415a:	c1 e0 02             	shl    $0x2,%eax
   1415d:	01 d0                	add    %edx,%eax
   1415f:	c1 e0 02             	shl    $0x2,%eax
   14162:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   14167:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   1416a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1416d:	8b 00                	mov    (%eax),%eax
   1416f:	8b 40 24             	mov    0x24(%eax),%eax
   14172:	ff 75 14             	push   0x14(%ebp)
   14175:	ff 75 10             	push   0x10(%ebp)
   14178:	ff 75 0c             	push   0xc(%ebp)
   1417b:	ff 75 f4             	push   -0xc(%ebp)
   1417e:	ff d0                	call   *%eax
   14180:	83 c4 10             	add    $0x10,%esp
}
   14183:	c9                   	leave  
   14184:	c3                   	ret    

00014185 <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   14185:	55                   	push   %ebp
   14186:	89 e5                	mov    %esp,%ebp
   14188:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1418b:	ff 75 08             	push   0x8(%ebp)
   1418e:	e8 70 fd ff ff       	call   13f03 <is_dev_exist>
   14193:	83 c4 04             	add    $0x4,%esp
   14196:	85 c0                	test   %eax,%eax
   14198:	74 6b                	je     14205 <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   1419a:	8b 55 08             	mov    0x8(%ebp),%edx
   1419d:	89 d0                	mov    %edx,%eax
   1419f:	c1 e0 02             	shl    $0x2,%eax
   141a2:	01 d0                	add    %edx,%eax
   141a4:	c1 e0 02             	shl    $0x2,%eax
   141a7:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   141ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   141af:	e8 48 f0 ff ff       	call   131fc <idt_enter_protection>
   141b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   141b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141ba:	8b 40 10             	mov    0x10(%eax),%eax
   141bd:	8d 50 ff             	lea    -0x1(%eax),%edx
   141c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141c3:	89 50 10             	mov    %edx,0x10(%eax)
   141c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141c9:	8b 40 10             	mov    0x10(%eax),%eax
   141cc:	85 c0                	test   %eax,%eax
   141ce:	75 25                	jne    141f5 <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   141d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141d3:	8b 00                	mov    (%eax),%eax
   141d5:	8b 40 28             	mov    0x28(%eax),%eax
   141d8:	83 ec 0c             	sub    $0xc,%esp
   141db:	ff 75 f4             	push   -0xc(%ebp)
   141de:	ff d0                	call   *%eax
   141e0:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   141e3:	83 ec 04             	sub    $0x4,%esp
   141e6:	6a 14                	push   $0x14
   141e8:	6a 00                	push   $0x0
   141ea:	ff 75 f4             	push   -0xc(%ebp)
   141ed:	e8 9d 1d 00 00       	call   15f8f <kernel_memset>
   141f2:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   141f5:	83 ec 0c             	sub    $0xc,%esp
   141f8:	ff 75 f0             	push   -0x10(%ebp)
   141fb:	e8 14 f0 ff ff       	call   13214 <idt_leave_protection>
   14200:	83 c4 10             	add    $0x10,%esp
   14203:	eb 01                	jmp    14206 <dev_close+0x81>
        return;
   14205:	90                   	nop
   14206:	c9                   	leave  
   14207:	c3                   	ret    

00014208 <inb>:
static inline uint8_t inb(uint16_t port) {
   14208:	55                   	push   %ebp
   14209:	89 e5                	mov    %esp,%ebp
   1420b:	83 ec 14             	sub    $0x14,%esp
   1420e:	8b 45 08             	mov    0x8(%ebp),%eax
   14211:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14215:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14219:	89 c2                	mov    %eax,%edx
   1421b:	ec                   	in     (%dx),%al
   1421c:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1421f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14223:	c9                   	leave  
   14224:	c3                   	ret    

00014225 <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   14225:	55                   	push   %ebp
   14226:	89 e5                	mov    %esp,%ebp
   14228:	83 ec 04             	sub    $0x4,%esp
   1422b:	8b 45 08             	mov    0x8(%ebp),%eax
   1422e:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14231:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14235:	f7 d0                	not    %eax
   14237:	c0 e8 07             	shr    $0x7,%al
   1423a:	0f b6 c0             	movzbl %al,%eax
}
   1423d:	c9                   	leave  
   1423e:	c3                   	ret    

0001423f <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   1423f:	55                   	push   %ebp
   14240:	89 e5                	mov    %esp,%ebp
   14242:	83 ec 04             	sub    $0x4,%esp
   14245:	8b 45 08             	mov    0x8(%ebp),%eax
   14248:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   1424b:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   1424f:	83 e0 7f             	and    $0x7f,%eax
}
   14252:	c9                   	leave  
   14253:	c3                   	ret    

00014254 <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   14254:	55                   	push   %ebp
   14255:	89 e5                	mov    %esp,%ebp
   14257:	83 ec 28             	sub    $0x28,%esp
   1425a:	8b 45 08             	mov    0x8(%ebp),%eax
   1425d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14260:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14264:	83 e8 3b             	sub    $0x3b,%eax
   14267:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   1426a:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14271:	83 e0 20             	and    $0x20,%eax
   14274:	84 c0                	test   %al,%al
   14276:	75 0e                	jne    14286 <do_fx_key+0x32>
   14278:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   1427f:	83 e0 40             	and    $0x40,%eax
   14282:	84 c0                	test   %al,%al
   14284:	74 0e                	je     14294 <do_fx_key+0x40>
        tty_select(index);
   14286:	83 ec 0c             	sub    $0xc,%esp
   14289:	ff 75 f4             	push   -0xc(%ebp)
   1428c:	e8 65 09 00 00       	call   14bf6 <tty_select>
   14291:	83 c4 10             	add    $0x10,%esp
    }
}
   14294:	90                   	nop
   14295:	c9                   	leave  
   14296:	c3                   	ret    

00014297 <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   14297:	55                   	push   %ebp
   14298:	89 e5                	mov    %esp,%ebp
   1429a:	83 ec 28             	sub    $0x28,%esp
   1429d:	8b 45 08             	mov    0x8(%ebp),%eax
   142a0:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   142a3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   142a7:	50                   	push   %eax
   142a8:	e8 92 ff ff ff       	call   1423f <get_key>
   142ad:	83 c4 04             	add    $0x4,%esp
   142b0:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   142b3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   142b7:	50                   	push   %eax
   142b8:	e8 68 ff ff ff       	call   14225 <is_make_code>
   142bd:	83 c4 04             	add    $0x4,%esp
   142c0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   142c3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   142c7:	83 e8 1d             	sub    $0x1d,%eax
   142ca:	83 f8 3b             	cmp    $0x3b,%eax
   142cd:	0f 87 06 01 00 00    	ja     143d9 <do_normal_key+0x142>
   142d3:	8b 04 85 20 76 01 00 	mov    0x17620(,%eax,4),%eax
   142da:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   142dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   142e0:	0f 95 c0             	setne  %al
   142e3:	c1 e0 07             	shl    $0x7,%eax
   142e6:	c0 f8 07             	sar    $0x7,%al
   142e9:	83 e0 01             	and    $0x1,%eax
   142ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   142f3:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   142fa:	83 e0 fb             	and    $0xfffffffb,%eax
   142fd:	09 d0                	or     %edx,%eax
   142ff:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;
   14304:	e9 6b 01 00 00       	jmp    14474 <do_normal_key+0x1dd>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14309:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1430d:	0f 95 c0             	setne  %al
   14310:	c1 e0 07             	shl    $0x7,%eax
   14313:	c0 f8 07             	sar    $0x7,%al
   14316:	83 e0 01             	and    $0x1,%eax
   14319:	8d 14 00             	lea    (%eax,%eax,1),%edx
   1431c:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14323:	83 e0 fd             	and    $0xfffffffd,%eax
   14326:	09 d0                	or     %edx,%eax
   14328:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;  
   1432d:	e9 42 01 00 00       	jmp    14474 <do_normal_key+0x1dd>
        case KEY_CAPS:
            if (is_make) {
   14332:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14336:	0f 84 34 01 00 00    	je     14470 <do_normal_key+0x1d9>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   1433c:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14343:	c1 e0 07             	shl    $0x7,%eax
   14346:	c0 f8 07             	sar    $0x7,%al
   14349:	f7 d0                	not    %eax
   1434b:	c1 e0 07             	shl    $0x7,%eax
   1434e:	c0 f8 07             	sar    $0x7,%al
   14351:	83 e0 01             	and    $0x1,%eax
   14354:	89 c2                	mov    %eax,%edx
   14356:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   1435d:	83 e0 fe             	and    $0xfffffffe,%eax
   14360:	09 d0                	or     %edx,%eax
   14362:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            }
            break;
   14367:	e9 04 01 00 00       	jmp    14470 <do_normal_key+0x1d9>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   1436c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14370:	0f 95 c0             	setne  %al
   14373:	c1 e0 07             	shl    $0x7,%eax
   14376:	c0 f8 07             	sar    $0x7,%al
   14379:	83 e0 01             	and    $0x1,%eax
   1437c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14383:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   1438a:	83 e0 f7             	and    $0xfffffff7,%eax
   1438d:	09 d0                	or     %edx,%eax
   1438f:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;
   14394:	e9 db 00 00 00       	jmp    14474 <do_normal_key+0x1dd>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   14399:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1439d:	0f 95 c0             	setne  %al
   143a0:	c1 e0 07             	shl    $0x7,%eax
   143a3:	c0 f8 07             	sar    $0x7,%al
   143a6:	83 e0 01             	and    $0x1,%eax
   143a9:	c1 e0 05             	shl    $0x5,%eax
   143ac:	89 c2                	mov    %eax,%edx
   143ae:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   143b5:	83 e0 df             	and    $0xffffffdf,%eax
   143b8:	09 d0                	or     %edx,%eax
   143ba:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;
   143bf:	e9 b0 00 00 00       	jmp    14474 <do_normal_key+0x1dd>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   143c4:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   143c8:	83 ec 0c             	sub    $0xc,%esp
   143cb:	50                   	push   %eax
   143cc:	e8 83 fe ff ff       	call   14254 <do_fx_key>
   143d1:	83 c4 10             	add    $0x10,%esp
            break;
   143d4:	e9 9b 00 00 00       	jmp    14474 <do_normal_key+0x1dd>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   143d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   143dd:	0f 84 90 00 00 00    	je     14473 <do_normal_key+0x1dc>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   143e3:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   143ea:	83 e0 04             	and    $0x4,%eax
   143ed:	84 c0                	test   %al,%al
   143ef:	75 0e                	jne    143ff <do_normal_key+0x168>
   143f1:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   143f8:	83 e0 02             	and    $0x2,%eax
   143fb:	84 c0                	test   %al,%al
   143fd:	74 11                	je     14410 <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   143ff:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14403:	0f b6 84 00 21 74 01 	movzbl 0x17421(%eax,%eax,1),%eax
   1440a:	00 
   1440b:	88 45 f7             	mov    %al,-0x9(%ebp)
   1440e:	eb 0f                	jmp    1441f <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   14410:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14414:	0f b6 84 00 20 74 01 	movzbl 0x17420(%eax,%eax,1),%eax
   1441b:	00 
   1441c:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   1441f:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14426:	83 e0 01             	and    $0x1,%eax
   14429:	84 c0                	test   %al,%al
   1442b:	74 2e                	je     1445b <do_normal_key+0x1c4>
                        if ((key >= 'A' && key <= 'Z')) {
   1442d:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14431:	7e 12                	jle    14445 <do_normal_key+0x1ae>
   14433:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14437:	7f 0c                	jg     14445 <do_normal_key+0x1ae>
                            key = key - 'A' + 'a';
   14439:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1443d:	83 c0 20             	add    $0x20,%eax
   14440:	88 45 f7             	mov    %al,-0x9(%ebp)
   14443:	eb 16                	jmp    1445b <do_normal_key+0x1c4>
                        } else if (key >= 'a' && key <= 'z') {
   14445:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14449:	7e 10                	jle    1445b <do_normal_key+0x1c4>
   1444b:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   1444f:	7f 0a                	jg     1445b <do_normal_key+0x1c4>
                            key = key -'a' + 'A';
   14451:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14455:	83 e8 20             	sub    $0x20,%eax
   14458:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                // log_printf("key: %c\n", key);
                // log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
                //将读取的键值放入tty设备的输入缓冲区
                tty_in(key);
   1445b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1445f:	83 ec 0c             	sub    $0xc,%esp
   14462:	50                   	push   %eax
   14463:	e8 28 07 00 00       	call   14b90 <tty_in>
   14468:	83 c4 10             	add    $0x10,%esp
            }
            break;
   1446b:	eb 06                	jmp    14473 <do_normal_key+0x1dc>
            break;
   1446d:	90                   	nop
   1446e:	eb 04                	jmp    14474 <do_normal_key+0x1dd>
            break;
   14470:	90                   	nop
   14471:	eb 01                	jmp    14474 <do_normal_key+0x1dd>
            break;
   14473:	90                   	nop
    }
}
   14474:	90                   	nop
   14475:	c9                   	leave  
   14476:	c3                   	ret    

00014477 <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   14477:	55                   	push   %ebp
   14478:	89 e5                	mov    %esp,%ebp
   1447a:	83 ec 14             	sub    $0x14,%esp
   1447d:	8b 45 08             	mov    0x8(%ebp),%eax
   14480:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   14483:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14487:	50                   	push   %eax
   14488:	e8 b2 fd ff ff       	call   1423f <get_key>
   1448d:	83 c4 04             	add    $0x4,%esp
   14490:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   14493:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14497:	50                   	push   %eax
   14498:	e8 88 fd ff ff       	call   14225 <is_make_code>
   1449d:	83 c4 04             	add    $0x4,%esp
   144a0:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   144a3:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   144a7:	83 f8 1d             	cmp    $0x1d,%eax
   144aa:	74 07                	je     144b3 <do_e0_key+0x3c>
   144ac:	83 f8 38             	cmp    $0x38,%eax
   144af:	74 2a                	je     144db <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   144b1:	eb 4f                	jmp    14502 <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   144b3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   144b7:	0f 95 c0             	setne  %al
   144ba:	c1 e0 07             	shl    $0x7,%eax
   144bd:	c0 f8 07             	sar    $0x7,%al
   144c0:	83 e0 01             	and    $0x1,%eax
   144c3:	c1 e0 06             	shl    $0x6,%eax
   144c6:	89 c2                	mov    %eax,%edx
   144c8:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   144cf:	83 e0 bf             	and    $0xffffffbf,%eax
   144d2:	09 d0                	or     %edx,%eax
   144d4:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
        break;
   144d9:	eb 27                	jmp    14502 <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   144db:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   144df:	0f 95 c0             	setne  %al
   144e2:	c1 e0 07             	shl    $0x7,%eax
   144e5:	c0 f8 07             	sar    $0x7,%al
   144e8:	83 e0 01             	and    $0x1,%eax
   144eb:	c1 e0 04             	shl    $0x4,%eax
   144ee:	89 c2                	mov    %eax,%edx
   144f0:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   144f7:	83 e0 ef             	and    $0xffffffef,%eax
   144fa:	09 d0                	or     %edx,%eax
   144fc:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
        break;
   14501:	90                   	nop
    }
}
   14502:	90                   	nop
   14503:	c9                   	leave  
   14504:	c3                   	ret    

00014505 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   14505:	55                   	push   %ebp
   14506:	89 e5                	mov    %esp,%ebp
   14508:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   1450b:	0f b6 05 c4 c0 04 00 	movzbl 0x4c0c4,%eax
   14512:	84 c0                	test   %al,%al
   14514:	75 3a                	jne    14550 <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   14516:	83 ec 08             	sub    $0x8,%esp
   14519:	68 98 02 01 00       	push   $0x10298
   1451e:	6a 21                	push   $0x21
   14520:	e8 d1 e8 ff ff       	call   12df6 <idt_install>
   14525:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   14528:	83 ec 0c             	sub    $0xc,%esp
   1452b:	6a 21                	push   $0x21
   1452d:	e8 4f eb ff ff       	call   13081 <idt_enable>
   14532:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   14535:	83 ec 04             	sub    $0x4,%esp
   14538:	6a 04                	push   $0x4
   1453a:	6a 00                	push   $0x0
   1453c:	68 c0 c0 04 00       	push   $0x4c0c0
   14541:	e8 49 1a 00 00       	call   15f8f <kernel_memset>
   14546:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   14549:	c6 05 c4 c0 04 00 01 	movb   $0x1,0x4c0c4
    }
}
   14550:	90                   	nop
   14551:	c9                   	leave  
   14552:	c3                   	ret    

00014553 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   14553:	55                   	push   %ebp
   14554:	89 e5                	mov    %esp,%ebp
   14556:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   14559:	6a 64                	push   $0x64
   1455b:	e8 a8 fc ff ff       	call   14208 <inb>
   14560:	83 c4 04             	add    $0x4,%esp
   14563:	0f b6 c0             	movzbl %al,%eax
   14566:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   14569:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1456c:	83 e0 01             	and    $0x1,%eax
   1456f:	85 c0                	test   %eax,%eax
   14571:	75 12                	jne    14585 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   14573:	83 ec 0c             	sub    $0xc,%esp
   14576:	6a 21                	push   $0x21
   14578:	e8 46 ec ff ff       	call   131c3 <pic_send_eoi>
   1457d:	83 c4 10             	add    $0x10,%esp
        return;
   14580:	e9 96 00 00 00       	jmp    1461b <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   14585:	83 ec 0c             	sub    $0xc,%esp
   14588:	6a 60                	push   $0x60
   1458a:	e8 79 fc ff ff       	call   14208 <inb>
   1458f:	83 c4 10             	add    $0x10,%esp
   14592:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   14595:	83 ec 0c             	sub    $0xc,%esp
   14598:	6a 21                	push   $0x21
   1459a:	e8 24 ec ff ff       	call   131c3 <pic_send_eoi>
   1459f:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   145a2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   145a6:	75 0c                	jne    145b4 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   145a8:	c7 05 c8 c0 04 00 01 	movl   $0x1,0x4c0c8
   145af:	00 00 00 
   145b2:	eb 67                	jmp    1461b <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   145b4:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   145b8:	75 0c                	jne    145c6 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   145ba:	c7 05 c8 c0 04 00 02 	movl   $0x2,0x4c0c8
   145c1:	00 00 00 
   145c4:	eb 55                	jmp    1461b <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   145c6:	a1 c8 c0 04 00       	mov    0x4c0c8,%eax
   145cb:	83 f8 02             	cmp    $0x2,%eax
   145ce:	74 3e                	je     1460e <do_handler_kbd+0xbb>
   145d0:	83 f8 02             	cmp    $0x2,%eax
   145d3:	77 45                	ja     1461a <do_handler_kbd+0xc7>
   145d5:	85 c0                	test   %eax,%eax
   145d7:	74 07                	je     145e0 <do_handler_kbd+0x8d>
   145d9:	83 f8 01             	cmp    $0x1,%eax
   145dc:	74 14                	je     145f2 <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   145de:	eb 3a                	jmp    1461a <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   145e0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   145e4:	83 ec 0c             	sub    $0xc,%esp
   145e7:	50                   	push   %eax
   145e8:	e8 aa fc ff ff       	call   14297 <do_normal_key>
   145ed:	83 c4 10             	add    $0x10,%esp
                break;
   145f0:	eb 29                	jmp    1461b <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   145f2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   145f6:	83 ec 0c             	sub    $0xc,%esp
   145f9:	50                   	push   %eax
   145fa:	e8 78 fe ff ff       	call   14477 <do_e0_key>
   145ff:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   14602:	c7 05 c8 c0 04 00 00 	movl   $0x0,0x4c0c8
   14609:	00 00 00 
                break;
   1460c:	eb 0d                	jmp    1461b <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   1460e:	c7 05 c8 c0 04 00 00 	movl   $0x0,0x4c0c8
   14615:	00 00 00 
                break;
   14618:	eb 01                	jmp    1461b <do_handler_kbd+0xc8>
                break;
   1461a:	90                   	nop
        }
    }

   1461b:	c9                   	leave  
   1461c:	c3                   	ret    

0001461d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1461d:	55                   	push   %ebp
   1461e:	89 e5                	mov    %esp,%ebp
   14620:	83 ec 08             	sub    $0x8,%esp
   14623:	8b 45 08             	mov    0x8(%ebp),%eax
   14626:	8b 55 0c             	mov    0xc(%ebp),%edx
   14629:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1462d:	89 d0                	mov    %edx,%eax
   1462f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14632:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14636:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1463a:	ee                   	out    %al,(%dx)
}
   1463b:	90                   	nop
   1463c:	c9                   	leave  
   1463d:	c3                   	ret    

0001463e <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1463e:	55                   	push   %ebp
   1463f:	89 e5                	mov    %esp,%ebp
   14641:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   14644:	a1 cc c0 04 00       	mov    0x4c0cc,%eax
   14649:	83 c0 01             	add    $0x1,%eax
   1464c:	a3 cc c0 04 00       	mov    %eax,0x4c0cc

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   14651:	83 ec 0c             	sub    $0xc,%esp
   14654:	6a 20                	push   $0x20
   14656:	e8 68 eb ff ff       	call   131c3 <pic_send_eoi>
   1465b:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1465e:	e8 a3 d3 ff ff       	call   11a06 <task_slice_end>
}
   14663:	90                   	nop
   14664:	c9                   	leave  
   14665:	c3                   	ret    

00014666 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   14666:	55                   	push   %ebp
   14667:	89 e5                	mov    %esp,%ebp
   14669:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1466c:	6a 36                	push   $0x36
   1466e:	6a 43                	push   $0x43
   14670:	e8 a8 ff ff ff       	call   1461d <outb>
   14675:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   14678:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1467e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   14682:	0f b6 c0             	movzbl %al,%eax
   14685:	50                   	push   %eax
   14686:	6a 40                	push   $0x40
   14688:	e8 90 ff ff ff       	call   1461d <outb>
   1468d:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   14690:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   14694:	66 c1 e8 08          	shr    $0x8,%ax
   14698:	0f b6 c0             	movzbl %al,%eax
   1469b:	50                   	push   %eax
   1469c:	6a 40                	push   $0x40
   1469e:	e8 7a ff ff ff       	call   1461d <outb>
   146a3:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   146a6:	83 ec 08             	sub    $0x8,%esp
   146a9:	68 7b 02 01 00       	push   $0x1027b
   146ae:	6a 20                	push   $0x20
   146b0:	e8 41 e7 ff ff       	call   12df6 <idt_install>
   146b5:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   146b8:	83 ec 0c             	sub    $0xc,%esp
   146bb:	6a 20                	push   $0x20
   146bd:	e8 bf e9 ff ff       	call   13081 <idt_enable>
   146c2:	83 c4 10             	add    $0x10,%esp

}
   146c5:	90                   	nop
   146c6:	c9                   	leave  
   146c7:	c3                   	ret    

000146c8 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   146c8:	55                   	push   %ebp
   146c9:	89 e5                	mov    %esp,%ebp
   146cb:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   146ce:	c7 05 cc c0 04 00 00 	movl   $0x0,0x4c0cc
   146d5:	00 00 00 
    init_pit();
   146d8:	e8 89 ff ff ff       	call   14666 <init_pit>
   146dd:	90                   	nop
   146de:	c9                   	leave  
   146df:	c3                   	ret    

000146e0 <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   146e0:	55                   	push   %ebp
   146e1:	89 e5                	mov    %esp,%ebp
   146e3:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   146e6:	8b 45 08             	mov    0x8(%ebp),%eax
   146e9:	8b 40 08             	mov    0x8(%eax),%eax
   146ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   146ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   146f3:	78 10                	js     14705 <get_tty+0x25>
   146f5:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   146f9:	7f 0a                	jg     14705 <get_tty+0x25>
   146fb:	8b 45 08             	mov    0x8(%ebp),%eax
   146fe:	8b 40 10             	mov    0x10(%eax),%eax
   14701:	85 c0                	test   %eax,%eax
   14703:	75 1a                	jne    1471f <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   14705:	83 ec 08             	sub    $0x8,%esp
   14708:	ff 75 f4             	push   -0xc(%ebp)
   1470b:	68 10 77 01 00       	push   $0x17710
   14710:	e8 77 20 00 00       	call   1678c <log_printf>
   14715:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   14718:	b8 00 00 00 00       	mov    $0x0,%eax
   1471d:	eb 0e                	jmp    1472d <get_tty+0x4d>
    }

    return tty_table + tty_index;
   1471f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14722:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14728:	05 e0 c0 04 00       	add    $0x4c0e0,%eax
}
   1472d:	c9                   	leave  
   1472e:	c3                   	ret    

0001472f <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   1472f:	55                   	push   %ebp
   14730:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   14732:	8b 45 08             	mov    0x8(%ebp),%eax
   14735:	8b 55 0c             	mov    0xc(%ebp),%edx
   14738:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   1473a:	8b 45 08             	mov    0x8(%ebp),%eax
   1473d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   14744:	8b 45 08             	mov    0x8(%ebp),%eax
   14747:	8b 55 10             	mov    0x10(%ebp),%edx
   1474a:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   1474d:	8b 45 08             	mov    0x8(%ebp),%eax
   14750:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   14757:	8b 45 08             	mov    0x8(%ebp),%eax
   1475a:	8b 50 0c             	mov    0xc(%eax),%edx
   1475d:	8b 45 08             	mov    0x8(%ebp),%eax
   14760:	89 50 08             	mov    %edx,0x8(%eax)
}
   14763:	90                   	nop
   14764:	5d                   	pop    %ebp
   14765:	c3                   	ret    

00014766 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   14766:	55                   	push   %ebp
   14767:	89 e5                	mov    %esp,%ebp
   14769:	53                   	push   %ebx
   1476a:	83 ec 24             	sub    $0x24,%esp
   1476d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14770:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   14773:	e8 84 ea ff ff       	call   131fc <idt_enter_protection>
   14778:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   1477b:	8b 45 08             	mov    0x8(%ebp),%eax
   1477e:	8b 50 10             	mov    0x10(%eax),%edx
   14781:	8b 45 08             	mov    0x8(%ebp),%eax
   14784:	8b 40 04             	mov    0x4(%eax),%eax
   14787:	39 c2                	cmp    %eax,%edx
   14789:	7c 15                	jl     147a0 <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   1478b:	83 ec 0c             	sub    $0xc,%esp
   1478e:	ff 75 f4             	push   -0xc(%ebp)
   14791:	e8 7e ea ff ff       	call   13214 <idt_leave_protection>
   14796:	83 c4 10             	add    $0x10,%esp
        return -1;
   14799:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1479e:	eb 59                	jmp    147f9 <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   147a0:	8b 45 08             	mov    0x8(%ebp),%eax
   147a3:	8b 18                	mov    (%eax),%ebx
   147a5:	8b 45 08             	mov    0x8(%ebp),%eax
   147a8:	8b 40 0c             	mov    0xc(%eax),%eax
   147ab:	8d 48 01             	lea    0x1(%eax),%ecx
   147ae:	8b 55 08             	mov    0x8(%ebp),%edx
   147b1:	89 4a 0c             	mov    %ecx,0xc(%edx)
   147b4:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   147b7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   147bb:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   147bd:	8b 45 08             	mov    0x8(%ebp),%eax
   147c0:	8b 50 0c             	mov    0xc(%eax),%edx
   147c3:	8b 45 08             	mov    0x8(%ebp),%eax
   147c6:	8b 40 04             	mov    0x4(%eax),%eax
   147c9:	39 c2                	cmp    %eax,%edx
   147cb:	7c 0a                	jl     147d7 <tty_fifo_put+0x71>
        fifo->write = 0;
   147cd:	8b 45 08             	mov    0x8(%ebp),%eax
   147d0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   147d7:	8b 45 08             	mov    0x8(%ebp),%eax
   147da:	8b 40 10             	mov    0x10(%eax),%eax
   147dd:	8d 50 01             	lea    0x1(%eax),%edx
   147e0:	8b 45 08             	mov    0x8(%ebp),%eax
   147e3:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   147e6:	83 ec 0c             	sub    $0xc,%esp
   147e9:	ff 75 f4             	push   -0xc(%ebp)
   147ec:	e8 23 ea ff ff       	call   13214 <idt_leave_protection>
   147f1:	83 c4 10             	add    $0x10,%esp
    return 0;
   147f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   147f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   147fc:	c9                   	leave  
   147fd:	c3                   	ret    

000147fe <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   147fe:	55                   	push   %ebp
   147ff:	89 e5                	mov    %esp,%ebp
   14801:	53                   	push   %ebx
   14802:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   14805:	e8 f2 e9 ff ff       	call   131fc <idt_enter_protection>
   1480a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   1480d:	8b 45 08             	mov    0x8(%ebp),%eax
   14810:	8b 40 10             	mov    0x10(%eax),%eax
   14813:	85 c0                	test   %eax,%eax
   14815:	7f 15                	jg     1482c <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   14817:	83 ec 0c             	sub    $0xc,%esp
   1481a:	ff 75 f4             	push   -0xc(%ebp)
   1481d:	e8 f2 e9 ff ff       	call   13214 <idt_leave_protection>
   14822:	83 c4 10             	add    $0x10,%esp
        return -1;
   14825:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1482a:	eb 5a                	jmp    14886 <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   1482c:	8b 45 08             	mov    0x8(%ebp),%eax
   1482f:	8b 18                	mov    (%eax),%ebx
   14831:	8b 45 08             	mov    0x8(%ebp),%eax
   14834:	8b 40 08             	mov    0x8(%eax),%eax
   14837:	8d 48 01             	lea    0x1(%eax),%ecx
   1483a:	8b 55 08             	mov    0x8(%ebp),%edx
   1483d:	89 4a 08             	mov    %ecx,0x8(%edx)
   14840:	01 d8                	add    %ebx,%eax
   14842:	0f b6 10             	movzbl (%eax),%edx
   14845:	8b 45 0c             	mov    0xc(%ebp),%eax
   14848:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   1484a:	8b 45 08             	mov    0x8(%ebp),%eax
   1484d:	8b 50 08             	mov    0x8(%eax),%edx
   14850:	8b 45 08             	mov    0x8(%ebp),%eax
   14853:	8b 40 04             	mov    0x4(%eax),%eax
   14856:	39 c2                	cmp    %eax,%edx
   14858:	7c 0a                	jl     14864 <tty_fifo_get+0x66>
        fifo->read = 0;
   1485a:	8b 45 08             	mov    0x8(%ebp),%eax
   1485d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   14864:	8b 45 08             	mov    0x8(%ebp),%eax
   14867:	8b 40 10             	mov    0x10(%eax),%eax
   1486a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1486d:	8b 45 08             	mov    0x8(%ebp),%eax
   14870:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   14873:	83 ec 0c             	sub    $0xc,%esp
   14876:	ff 75 f4             	push   -0xc(%ebp)
   14879:	e8 96 e9 ff ff       	call   13214 <idt_leave_protection>
   1487e:	83 c4 10             	add    $0x10,%esp
    return 0;
   14881:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14886:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14889:	c9                   	leave  
   1488a:	c3                   	ret    

0001488b <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   1488b:	55                   	push   %ebp
   1488c:	89 e5                	mov    %esp,%ebp
   1488e:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   14891:	8b 45 08             	mov    0x8(%ebp),%eax
   14894:	8b 40 08             	mov    0x8(%eax),%eax
   14897:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   1489a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1489e:	78 06                	js     148a6 <tty_open+0x1b>
   148a0:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   148a4:	7e 1d                	jle    148c3 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   148a6:	83 ec 08             	sub    $0x8,%esp
   148a9:	ff 75 f4             	push   -0xc(%ebp)
   148ac:	68 30 77 01 00       	push   $0x17730
   148b1:	e8 d6 1e 00 00       	call   1678c <log_printf>
   148b6:	83 c4 10             	add    $0x10,%esp
        return -1;
   148b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148be:	e9 af 00 00 00       	jmp    14972 <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   148c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148c6:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   148cc:	05 e0 c0 04 00       	add    $0x4c0e0,%eax
   148d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   148d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148d7:	8d 50 54             	lea    0x54(%eax),%edx
   148da:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148dd:	83 c0 0c             	add    $0xc,%eax
   148e0:	83 ec 04             	sub    $0x4,%esp
   148e3:	68 00 02 00 00       	push   $0x200
   148e8:	52                   	push   %edx
   148e9:	50                   	push   %eax
   148ea:	e8 40 fe ff ff       	call   1472f <tty_fifo_init>
   148ef:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   148f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148f5:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   148fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148fe:	83 c0 20             	add    $0x20,%eax
   14901:	83 ec 04             	sub    $0x4,%esp
   14904:	68 00 02 00 00       	push   $0x200
   14909:	52                   	push   %edx
   1490a:	50                   	push   %eax
   1490b:	e8 1f fe ff ff       	call   1472f <tty_fifo_init>
   14910:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   14913:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14916:	83 c0 34             	add    $0x34,%eax
   14919:	83 ec 08             	sub    $0x8,%esp
   1491c:	68 00 02 00 00       	push   $0x200
   14921:	50                   	push   %eax
   14922:	e8 48 0c 00 00       	call   1556f <sem_init>
   14927:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   1492a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1492d:	83 c0 44             	add    $0x44,%eax
   14930:	83 ec 08             	sub    $0x8,%esp
   14933:	6a 00                	push   $0x0
   14935:	50                   	push   %eax
   14936:	e8 34 0c 00 00       	call   1556f <sem_init>
   1493b:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   1493e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14941:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14944:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   14947:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1494a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   14950:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14953:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   1495a:	e8 a6 fb ff ff       	call   14505 <kbd_init>
    console_init(index);
   1495f:	83 ec 0c             	sub    $0xc,%esp
   14962:	ff 75 f4             	push   -0xc(%ebp)
   14965:	e8 c4 ee ff ff       	call   1382e <console_init>
   1496a:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   1496d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14972:	c9                   	leave  
   14973:	c3                   	ret    

00014974 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   14974:	55                   	push   %ebp
   14975:	89 e5                	mov    %esp,%ebp
   14977:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   1497a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1497e:	79 0a                	jns    1498a <tty_write+0x16>
        return -1;
   14980:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14985:	e9 d8 00 00 00       	jmp    14a62 <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   1498a:	83 ec 0c             	sub    $0xc,%esp
   1498d:	ff 75 08             	push   0x8(%ebp)
   14990:	e8 4b fd ff ff       	call   146e0 <get_tty>
   14995:	83 c4 10             	add    $0x10,%esp
   14998:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   1499b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1499f:	75 0a                	jne    149ab <tty_write+0x37>
        return -1;
   149a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   149a6:	e9 b7 00 00 00       	jmp    14a62 <tty_write+0xee>
    }

    int len = 0;
   149ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   149b2:	e9 98 00 00 00       	jmp    14a4f <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   149b7:	8b 45 10             	mov    0x10(%ebp),%eax
   149ba:	8d 50 01             	lea    0x1(%eax),%edx
   149bd:	89 55 10             	mov    %edx,0x10(%ebp)
   149c0:	0f b6 00             	movzbl (%eax),%eax
   149c3:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   149c6:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   149ca:	75 3b                	jne    14a07 <tty_write+0x93>
   149cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149cf:	8b 00                	mov    (%eax),%eax
   149d1:	83 e0 01             	and    $0x1,%eax
   149d4:	85 c0                	test   %eax,%eax
   149d6:	74 2f                	je     14a07 <tty_write+0x93>
            sem_wait(&tty->out_sem);
   149d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149db:	83 c0 34             	add    $0x34,%eax
   149de:	83 ec 0c             	sub    $0xc,%esp
   149e1:	50                   	push   %eax
   149e2:	e8 ca 0b 00 00       	call   155b1 <sem_wait>
   149e7:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   149ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149ed:	83 c0 0c             	add    $0xc,%eax
   149f0:	83 ec 08             	sub    $0x8,%esp
   149f3:	6a 0d                	push   $0xd
   149f5:	50                   	push   %eax
   149f6:	e8 6b fd ff ff       	call   14766 <tty_fifo_put>
   149fb:	83 c4 10             	add    $0x10,%esp
   149fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   14a01:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14a05:	78 54                	js     14a5b <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   14a07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a0a:	83 c0 34             	add    $0x34,%eax
   14a0d:	83 ec 0c             	sub    $0xc,%esp
   14a10:	50                   	push   %eax
   14a11:	e8 9b 0b 00 00       	call   155b1 <sem_wait>
   14a16:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   14a19:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   14a1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14a20:	83 c2 0c             	add    $0xc,%edx
   14a23:	83 ec 08             	sub    $0x8,%esp
   14a26:	50                   	push   %eax
   14a27:	52                   	push   %edx
   14a28:	e8 39 fd ff ff       	call   14766 <tty_fifo_put>
   14a2d:	83 c4 10             	add    $0x10,%esp
   14a30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   14a33:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14a37:	78 25                	js     14a5e <tty_write+0xea>
            break;
        }

        len++;
   14a39:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   14a3d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   14a41:	83 ec 0c             	sub    $0xc,%esp
   14a44:	ff 75 f0             	push   -0x10(%ebp)
   14a47:	e8 fb f2 ff ff       	call   13d47 <console_write>
   14a4c:	83 c4 10             	add    $0x10,%esp
    while (size) {
   14a4f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14a53:	0f 85 5e ff ff ff    	jne    149b7 <tty_write+0x43>
   14a59:	eb 04                	jmp    14a5f <tty_write+0xeb>
                break;
   14a5b:	90                   	nop
   14a5c:	eb 01                	jmp    14a5f <tty_write+0xeb>
            break;
   14a5e:	90                   	nop
    }
    


    return len;
   14a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   14a62:	c9                   	leave  
   14a63:	c3                   	ret    

00014a64 <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   14a64:	55                   	push   %ebp
   14a65:	89 e5                	mov    %esp,%ebp
   14a67:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   14a6a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14a6e:	79 0a                	jns    14a7a <tty_read+0x16>
        return -1;
   14a70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a75:	e9 04 01 00 00       	jmp    14b7e <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   14a7a:	83 ec 0c             	sub    $0xc,%esp
   14a7d:	ff 75 08             	push   0x8(%ebp)
   14a80:	e8 5b fc ff ff       	call   146e0 <get_tty>
   14a85:	83 c4 10             	add    $0x10,%esp
   14a88:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   14a8b:	8b 45 10             	mov    0x10(%ebp),%eax
   14a8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   14a91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   14a98:	e9 d2 00 00 00       	jmp    14b6f <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   14a9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aa0:	83 c0 44             	add    $0x44,%eax
   14aa3:	83 ec 0c             	sub    $0xc,%esp
   14aa6:	50                   	push   %eax
   14aa7:	e8 05 0b 00 00       	call   155b1 <sem_wait>
   14aac:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   14aaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ab2:	8d 50 20             	lea    0x20(%eax),%edx
   14ab5:	83 ec 08             	sub    $0x8,%esp
   14ab8:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14abb:	50                   	push   %eax
   14abc:	52                   	push   %edx
   14abd:	e8 3c fd ff ff       	call   147fe <tty_fifo_get>
   14ac2:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   14ac5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14ac9:	0f be c0             	movsbl %al,%eax
   14acc:	83 f8 0a             	cmp    $0xa,%eax
   14acf:	74 20                	je     14af1 <tty_read+0x8d>
   14ad1:	83 f8 7f             	cmp    $0x7f,%eax
   14ad4:	75 55                	jne    14b2b <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   14ad6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ada:	75 05                	jne    14ae1 <tty_read+0x7d>
   14adc:	e9 8e 00 00 00       	jmp    14b6f <tty_read+0x10b>
                continue;
            } else {
                len--;
   14ae1:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   14ae5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   14ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14aec:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   14aef:	eb 4e                	jmp    14b3f <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   14af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14af4:	8b 40 04             	mov    0x4(%eax),%eax
   14af7:	83 e0 01             	and    $0x1,%eax
   14afa:	85 c0                	test   %eax,%eax
   14afc:	74 1b                	je     14b19 <tty_read+0xb5>
   14afe:	8b 45 14             	mov    0x14(%ebp),%eax
   14b01:	83 e8 01             	sub    $0x1,%eax
   14b04:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14b07:	7d 10                	jge    14b19 <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   14b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b0c:	8d 50 01             	lea    0x1(%eax),%edx
   14b0f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14b12:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   14b15:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   14b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b1c:	8d 50 01             	lea    0x1(%eax),%edx
   14b1f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14b22:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   14b25:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14b29:	eb 14                	jmp    14b3f <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   14b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b2e:	8d 50 01             	lea    0x1(%eax),%edx
   14b31:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14b34:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   14b38:	88 10                	mov    %dl,(%eax)
            len++;
   14b3a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14b3e:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   14b3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b42:	8b 40 04             	mov    0x4(%eax),%eax
   14b45:	83 e0 02             	and    $0x2,%eax
   14b48:	85 c0                	test   %eax,%eax
   14b4a:	74 13                	je     14b5f <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   14b4c:	6a 01                	push   $0x1
   14b4e:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14b51:	50                   	push   %eax
   14b52:	6a 00                	push   $0x0
   14b54:	ff 75 08             	push   0x8(%ebp)
   14b57:	e8 18 fe ff ff       	call   14974 <tty_write>
   14b5c:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   14b5f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14b63:	3c 0a                	cmp    $0xa,%al
   14b65:	74 14                	je     14b7b <tty_read+0x117>
   14b67:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14b6b:	3c 0d                	cmp    $0xd,%al
   14b6d:	74 0c                	je     14b7b <tty_read+0x117>
    while (len < size) {
   14b6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b72:	3b 45 14             	cmp    0x14(%ebp),%eax
   14b75:	0f 8c 22 ff ff ff    	jl     14a9d <tty_read+0x39>
            break;
        }

    }

    return len;
   14b7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   14b7e:	c9                   	leave  
   14b7f:	c3                   	ret    

00014b80 <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   14b80:	55                   	push   %ebp
   14b81:	89 e5                	mov    %esp,%ebp

    return 0;
   14b83:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b88:	5d                   	pop    %ebp
   14b89:	c3                   	ret    

00014b8a <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   14b8a:	55                   	push   %ebp
   14b8b:	89 e5                	mov    %esp,%ebp

}
   14b8d:	90                   	nop
   14b8e:	5d                   	pop    %ebp
   14b8f:	c3                   	ret    

00014b90 <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   14b90:	55                   	push   %ebp
   14b91:	89 e5                	mov    %esp,%ebp
   14b93:	83 ec 28             	sub    $0x28,%esp
   14b96:	8b 45 08             	mov    0x8(%ebp),%eax
   14b99:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   14b9c:	a1 80 e3 04 00       	mov    0x4e380,%eax
   14ba1:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14ba7:	05 e0 c0 04 00       	add    $0x4c0e0,%eax
   14bac:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   14baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bb2:	83 c0 44             	add    $0x44,%eax
   14bb5:	83 ec 0c             	sub    $0xc,%esp
   14bb8:	50                   	push   %eax
   14bb9:	e8 e0 0a 00 00       	call   1569e <sem_count>
   14bbe:	83 c4 10             	add    $0x10,%esp
   14bc1:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   14bc6:	7f 2b                	jg     14bf3 <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   14bc8:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14bcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14bcf:	83 c2 20             	add    $0x20,%edx
   14bd2:	83 ec 08             	sub    $0x8,%esp
   14bd5:	50                   	push   %eax
   14bd6:	52                   	push   %edx
   14bd7:	e8 8a fb ff ff       	call   14766 <tty_fifo_put>
   14bdc:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   14bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14be2:	83 c0 44             	add    $0x44,%eax
   14be5:	83 ec 0c             	sub    $0xc,%esp
   14be8:	50                   	push   %eax
   14be9:	e8 2e 0a 00 00       	call   1561c <sem_notify>
   14bee:	83 c4 10             	add    $0x10,%esp
   14bf1:	eb 01                	jmp    14bf4 <tty_in+0x64>
        return;
   14bf3:	90                   	nop
}
   14bf4:	c9                   	leave  
   14bf5:	c3                   	ret    

00014bf6 <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   14bf6:	55                   	push   %ebp
   14bf7:	89 e5                	mov    %esp,%ebp
   14bf9:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   14bfc:	a1 80 e3 04 00       	mov    0x4e380,%eax
   14c01:	39 45 08             	cmp    %eax,0x8(%ebp)
   14c04:	74 16                	je     14c1c <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   14c06:	83 ec 0c             	sub    $0xc,%esp
   14c09:	ff 75 08             	push   0x8(%ebp)
   14c0c:	e8 22 f2 ff ff       	call   13e33 <console_select>
   14c11:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   14c14:	8b 45 08             	mov    0x8(%ebp),%eax
   14c17:	a3 80 e3 04 00       	mov    %eax,0x4e380
    }
}
   14c1c:	90                   	nop
   14c1d:	c9                   	leave  
   14c1e:	c3                   	ret    

00014c1f <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   14c1f:	55                   	push   %ebp
   14c20:	89 e5                	mov    %esp,%ebp
   14c22:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   14c25:	83 ec 0c             	sub    $0xc,%esp
   14c28:	68 a0 a3 06 00       	push   $0x6a3a0
   14c2d:	e8 2b 07 00 00       	call   1535d <mutex_init>
   14c32:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   14c35:	83 ec 04             	sub    $0x4,%esp
   14c38:	68 00 c0 01 00       	push   $0x1c000
   14c3d:	6a 00                	push   $0x0
   14c3f:	68 a0 e3 04 00       	push   $0x4e3a0
   14c44:	e8 46 13 00 00       	call   15f8f <kernel_memset>
   14c49:	83 c4 10             	add    $0x10,%esp
}
   14c4c:	90                   	nop
   14c4d:	c9                   	leave  
   14c4e:	c3                   	ret    

00014c4f <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   14c4f:	55                   	push   %ebp
   14c50:	89 e5                	mov    %esp,%ebp
   14c52:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   14c55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14c5c:	83 ec 0c             	sub    $0xc,%esp
   14c5f:	68 a0 a3 06 00       	push   $0x6a3a0
   14c64:	e8 41 07 00 00       	call   153aa <mutex_lock>
   14c69:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14c6c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14c73:	eb 40                	jmp    14cb5 <file_alloc+0x66>
        file_t * p_file = file_table + i;
   14c75:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14c78:	6b c0 38             	imul   $0x38,%eax,%eax
   14c7b:	05 a0 e3 04 00       	add    $0x4e3a0,%eax
   14c80:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   14c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c86:	8b 40 28             	mov    0x28(%eax),%eax
   14c89:	85 c0                	test   %eax,%eax
   14c8b:	75 24                	jne    14cb1 <file_alloc+0x62>
            kernel_memset(p_file, 0, sizeof(file_t));
   14c8d:	83 ec 04             	sub    $0x4,%esp
   14c90:	6a 38                	push   $0x38
   14c92:	6a 00                	push   $0x0
   14c94:	ff 75 ec             	push   -0x14(%ebp)
   14c97:	e8 f3 12 00 00       	call   15f8f <kernel_memset>
   14c9c:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   14c9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ca2:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   14ca9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14cac:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14caf:	eb 0d                	jmp    14cbe <file_alloc+0x6f>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14cb1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14cb5:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   14cbc:	7e b7                	jle    14c75 <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14cbe:	83 ec 0c             	sub    $0xc,%esp
   14cc1:	68 a0 a3 06 00       	push   $0x6a3a0
   14cc6:	e8 70 07 00 00       	call   1543b <mutex_unlock>
   14ccb:	83 c4 10             	add    $0x10,%esp
    return file;
   14cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14cd1:	c9                   	leave  
   14cd2:	c3                   	ret    

00014cd3 <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   14cd3:	55                   	push   %ebp
   14cd4:	89 e5                	mov    %esp,%ebp
   14cd6:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14cd9:	83 ec 0c             	sub    $0xc,%esp
   14cdc:	68 a0 a3 06 00       	push   $0x6a3a0
   14ce1:	e8 c4 06 00 00       	call   153aa <mutex_lock>
   14ce6:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   14ce9:	8b 45 08             	mov    0x8(%ebp),%eax
   14cec:	8b 40 28             	mov    0x28(%eax),%eax
   14cef:	85 c0                	test   %eax,%eax
   14cf1:	7e 0f                	jle    14d02 <file_free+0x2f>
        file->ref--;
   14cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   14cf6:	8b 40 28             	mov    0x28(%eax),%eax
   14cf9:	8d 50 ff             	lea    -0x1(%eax),%edx
   14cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   14cff:	89 50 28             	mov    %edx,0x28(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14d02:	83 ec 0c             	sub    $0xc,%esp
   14d05:	68 a0 a3 06 00       	push   $0x6a3a0
   14d0a:	e8 2c 07 00 00       	call   1543b <mutex_unlock>
   14d0f:	83 c4 10             	add    $0x10,%esp
   14d12:	90                   	nop
   14d13:	c9                   	leave  
   14d14:	c3                   	ret    

00014d15 <inb>:
static inline uint8_t inb(uint16_t port) {
   14d15:	55                   	push   %ebp
   14d16:	89 e5                	mov    %esp,%ebp
   14d18:	83 ec 14             	sub    $0x14,%esp
   14d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   14d1e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14d22:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14d26:	89 c2                	mov    %eax,%edx
   14d28:	ec                   	in     (%dx),%al
   14d29:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14d2c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14d30:	c9                   	leave  
   14d31:	c3                   	ret    

00014d32 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14d32:	55                   	push   %ebp
   14d33:	89 e5                	mov    %esp,%ebp
   14d35:	83 ec 08             	sub    $0x8,%esp
   14d38:	8b 45 08             	mov    0x8(%ebp),%eax
   14d3b:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d3e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14d42:	89 d0                	mov    %edx,%eax
   14d44:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14d47:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14d4b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14d4f:	ee                   	out    %al,(%dx)
}
   14d50:	90                   	nop
   14d51:	c9                   	leave  
   14d52:	c3                   	ret    

00014d53 <inw>:
static inline uint16_t inw(uint16_t port) {
   14d53:	55                   	push   %ebp
   14d54:	89 e5                	mov    %esp,%ebp
   14d56:	83 ec 14             	sub    $0x14,%esp
   14d59:	8b 45 08             	mov    0x8(%ebp),%eax
   14d5c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   14d60:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14d64:	89 c2                	mov    %eax,%edx
   14d66:	66 ed                	in     (%dx),%ax
   14d68:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14d6c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14d70:	c9                   	leave  
   14d71:	c3                   	ret    

00014d72 <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   14d72:	55                   	push   %ebp
   14d73:	89 e5                	mov    %esp,%ebp
   14d75:	53                   	push   %ebx
   14d76:	83 ec 14             	sub    $0x14,%esp
   14d79:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d7c:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   14d80:	68 e0 00 00 00       	push   $0xe0
   14d85:	68 f6 01 00 00       	push   $0x1f6
   14d8a:	e8 a3 ff ff ff       	call   14d32 <outb>
   14d8f:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   14d92:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14d96:	66 c1 e8 08          	shr    $0x8,%ax
   14d9a:	0f b6 c0             	movzbl %al,%eax
   14d9d:	50                   	push   %eax
   14d9e:	68 f2 01 00 00       	push   $0x1f2
   14da3:	e8 8a ff ff ff       	call   14d32 <outb>
   14da8:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   14dab:	8b 45 08             	mov    0x8(%ebp),%eax
   14dae:	c1 e8 18             	shr    $0x18,%eax
   14db1:	0f b6 c0             	movzbl %al,%eax
   14db4:	50                   	push   %eax
   14db5:	68 f3 01 00 00       	push   $0x1f3
   14dba:	e8 73 ff ff ff       	call   14d32 <outb>
   14dbf:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   14dc2:	6a 00                	push   $0x0
   14dc4:	68 f4 01 00 00       	push   $0x1f4
   14dc9:	e8 64 ff ff ff       	call   14d32 <outb>
   14dce:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   14dd1:	6a 00                	push   $0x0
   14dd3:	68 f5 01 00 00       	push   $0x1f5
   14dd8:	e8 55 ff ff ff       	call   14d32 <outb>
   14ddd:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   14de0:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14de4:	0f b6 c0             	movzbl %al,%eax
   14de7:	50                   	push   %eax
   14de8:	68 f2 01 00 00       	push   $0x1f2
   14ded:	e8 40 ff ff ff       	call   14d32 <outb>
   14df2:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   14df5:	8b 45 08             	mov    0x8(%ebp),%eax
   14df8:	0f b6 c0             	movzbl %al,%eax
   14dfb:	50                   	push   %eax
   14dfc:	68 f3 01 00 00       	push   $0x1f3
   14e01:	e8 2c ff ff ff       	call   14d32 <outb>
   14e06:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   14e09:	8b 45 08             	mov    0x8(%ebp),%eax
   14e0c:	c1 e8 08             	shr    $0x8,%eax
   14e0f:	0f b6 c0             	movzbl %al,%eax
   14e12:	50                   	push   %eax
   14e13:	68 f4 01 00 00       	push   $0x1f4
   14e18:	e8 15 ff ff ff       	call   14d32 <outb>
   14e1d:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   14e20:	8b 45 08             	mov    0x8(%ebp),%eax
   14e23:	c1 e8 10             	shr    $0x10,%eax
   14e26:	0f b6 c0             	movzbl %al,%eax
   14e29:	50                   	push   %eax
   14e2a:	68 f5 01 00 00       	push   $0x1f5
   14e2f:	e8 fe fe ff ff       	call   14d32 <outb>
   14e34:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   14e37:	6a 24                	push   $0x24
   14e39:	68 f7 01 00 00       	push   $0x1f7
   14e3e:	e8 ef fe ff ff       	call   14d32 <outb>
   14e43:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   14e46:	8b 45 10             	mov    0x10(%ebp),%eax
   14e49:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   14e4c:	eb 4a                	jmp    14e98 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   14e4e:	90                   	nop
   14e4f:	68 f7 01 00 00       	push   $0x1f7
   14e54:	e8 bc fe ff ff       	call   14d15 <inb>
   14e59:	83 c4 04             	add    $0x4,%esp
   14e5c:	0f b6 c0             	movzbl %al,%eax
   14e5f:	25 88 00 00 00       	and    $0x88,%eax
   14e64:	83 f8 08             	cmp    $0x8,%eax
   14e67:	75 e6                	jne    14e4f <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14e69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14e70:	eb 1d                	jmp    14e8f <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   14e72:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14e75:	8d 43 02             	lea    0x2(%ebx),%eax
   14e78:	89 45 f8             	mov    %eax,-0x8(%ebp)
   14e7b:	68 f0 01 00 00       	push   $0x1f0
   14e80:	e8 ce fe ff ff       	call   14d53 <inw>
   14e85:	83 c4 04             	add    $0x4,%esp
   14e88:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14e8b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14e8f:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   14e96:	7e da                	jle    14e72 <read_disk+0x100>
    while (sector_count--) {
   14e98:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14e9c:	8d 50 ff             	lea    -0x1(%eax),%edx
   14e9f:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   14ea3:	66 85 c0             	test   %ax,%ax
   14ea6:	75 a6                	jne    14e4e <read_disk+0xdc>
        }
        
    }
    
}
   14ea8:	90                   	nop
   14ea9:	90                   	nop
   14eaa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14ead:	c9                   	leave  
   14eae:	c3                   	ret    

00014eaf <is_path_valid>:
 * @brief 判断文件路径是否有效
 * 
 * @param path 
 * @return int 
 */
static int is_path_valid(const char *path) {
   14eaf:	55                   	push   %ebp
   14eb0:	89 e5                	mov    %esp,%ebp
    if (path == (const char*)0 || path[0] == '\0') {//路径无效
   14eb2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14eb6:	74 0a                	je     14ec2 <is_path_valid+0x13>
   14eb8:	8b 45 08             	mov    0x8(%ebp),%eax
   14ebb:	0f b6 00             	movzbl (%eax),%eax
   14ebe:	84 c0                	test   %al,%al
   14ec0:	75 07                	jne    14ec9 <is_path_valid+0x1a>
        return 0;
   14ec2:	b8 00 00 00 00       	mov    $0x0,%eax
   14ec7:	eb 05                	jmp    14ece <is_path_valid+0x1f>
    }

    return 1;
   14ec9:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14ece:	5d                   	pop    %ebp
   14ecf:	c3                   	ret    

00014ed0 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   14ed0:	55                   	push   %ebp
   14ed1:	89 e5                	mov    %esp,%ebp
   14ed3:	83 ec 18             	sub    $0x18,%esp
    if (kernel_strncmp(name, "tty", 3) == 0) {  //打开tty设备文件
   14ed6:	83 ec 04             	sub    $0x4,%esp
   14ed9:	6a 03                	push   $0x3
   14edb:	68 59 77 01 00       	push   $0x17759
   14ee0:	ff 75 08             	push   0x8(%ebp)
   14ee3:	e8 a2 0f 00 00       	call   15e8a <kernel_strncmp>
   14ee8:	83 c4 10             	add    $0x10,%esp
   14eeb:	85 c0                	test   %eax,%eax
   14eed:	0f 85 09 01 00 00    	jne    14ffc <sys_open+0x12c>
        
        //1.判断路径是否有效
        if(!is_path_valid(name)) {//文件路径无效
   14ef3:	83 ec 0c             	sub    $0xc,%esp
   14ef6:	ff 75 08             	push   0x8(%ebp)
   14ef9:	e8 b1 ff ff ff       	call   14eaf <is_path_valid>
   14efe:	83 c4 10             	add    $0x10,%esp
   14f01:	85 c0                	test   %eax,%eax
   14f03:	75 1a                	jne    14f1f <sys_open+0x4f>
            log_printf("path is not valid\n");
   14f05:	83 ec 0c             	sub    $0xc,%esp
   14f08:	68 5d 77 01 00       	push   $0x1775d
   14f0d:	e8 7a 18 00 00       	call   1678c <log_printf>
   14f12:	83 c4 10             	add    $0x10,%esp
            return -1;
   14f15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14f1a:	e9 14 01 00 00       	jmp    15033 <sys_open+0x163>
        }

        //2.从系统file_table中分配一个文件结构
        file_t *file = file_alloc();
   14f1f:	e8 2b fd ff ff       	call   14c4f <file_alloc>
   14f24:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.将文件结构放入当前进程的打开文件表中并得到文件描述符
        int fd = -1;
   14f27:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
        if (file) {//分配成功，放入调用该系统调用的任务进程的打开文件表中
   14f2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f32:	0f 84 8e 00 00 00    	je     14fc6 <sys_open+0xf6>
            fd = task_alloc_fd(file);
   14f38:	83 ec 0c             	sub    $0xc,%esp
   14f3b:	ff 75 f0             	push   -0x10(%ebp)
   14f3e:	e8 89 c3 ff ff       	call   112cc <task_alloc_fd>
   14f43:	83 c4 10             	add    $0x10,%esp
   14f46:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (fd < 0) {//放入失败
   14f49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14f4d:	78 7a                	js     14fc9 <sys_open+0xf9>
            goto sys_open_failed;
        }

        //4.打开对应具体设备号的tty设备
        //name的开头为"tty:0(设备号)"
        int num = name[4] - '0';    //获取设备号
   14f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   14f52:	83 c0 04             	add    $0x4,%eax
   14f55:	0f b6 00             	movzbl (%eax),%eax
   14f58:	0f be c0             	movsbl %al,%eax
   14f5b:	83 e8 30             	sub    $0x30,%eax
   14f5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int dev_id = dev_open(DEV_TTY, num, 0); //打开设备并获取设备描述符
   14f61:	83 ec 04             	sub    $0x4,%esp
   14f64:	6a 00                	push   $0x0
   14f66:	ff 75 ec             	push   -0x14(%ebp)
   14f69:	6a 01                	push   $0x1
   14f6b:	e8 e7 ef ff ff       	call   13f57 <dev_open>
   14f70:	83 c4 10             	add    $0x10,%esp
   14f73:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev_id < 0) {
   14f76:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14f7a:	78 50                	js     14fcc <sys_open+0xfc>
            goto sys_open_failed;
        }

        //5.将打开的tty设备与分配的文件结构绑定
        file->dev_id = dev_id;
   14f7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14f7f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14f82:	89 50 2c             	mov    %edx,0x2c(%eax)
        file->mode = 0;
   14f85:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14f88:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        file->pos = 0;
   14f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14f92:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->ref = 1;
   14f99:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14f9c:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
        file->type = FILE_TTY;
   14fa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14fa6:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%eax)
        kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   14fad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14fb0:	83 ec 04             	sub    $0x4,%esp
   14fb3:	6a 20                	push   $0x20
   14fb5:	ff 75 08             	push   0x8(%ebp)
   14fb8:	50                   	push   %eax
   14fb9:	e8 7b 0e 00 00       	call   15e39 <kernel_strncpy>
   14fbe:	83 c4 10             	add    $0x10,%esp


        //6.返回文件描述符
        return fd;
   14fc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14fc4:	eb 6d                	jmp    15033 <sys_open+0x163>
            goto sys_open_failed;
   14fc6:	90                   	nop
   14fc7:	eb 04                	jmp    14fcd <sys_open+0xfd>
                goto sys_open_failed;
   14fc9:	90                   	nop
   14fca:	eb 01                	jmp    14fcd <sys_open+0xfd>
            goto sys_open_failed;
   14fcc:	90                   	nop

    //打开失败，回收资源
    sys_open_failed:
        if (file) { //释放掉已分配的file
   14fcd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14fd1:	74 0e                	je     14fe1 <sys_open+0x111>
            file_free(file);
   14fd3:	83 ec 0c             	sub    $0xc,%esp
   14fd6:	ff 75 f0             	push   -0x10(%ebp)
   14fd9:	e8 f5 fc ff ff       	call   14cd3 <file_free>
   14fde:	83 c4 10             	add    $0x10,%esp
        }
        if (fd >= 0) {  //释放掉已分配的打开文件表的资源
   14fe1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14fe5:	78 0e                	js     14ff5 <sys_open+0x125>
            task_remove_fd(fd);
   14fe7:	83 ec 0c             	sub    $0xc,%esp
   14fea:	ff 75 f4             	push   -0xc(%ebp)
   14fed:	e8 2d c3 ff ff       	call   1131f <task_remove_fd>
   14ff2:	83 c4 10             	add    $0x10,%esp
        }

        return -1;
   14ff5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ffa:	eb 37                	jmp    15033 <sys_open+0x163>

    } else if (name[0] == '/') {  //打开外部程序
   14ffc:	8b 45 08             	mov    0x8(%ebp),%eax
   14fff:	0f b6 00             	movzbl (%eax),%eax
   15002:	3c 2f                	cmp    $0x2f,%al
   15004:	75 28                	jne    1502e <sys_open+0x15e>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   15006:	83 ec 04             	sub    $0x4,%esp
   15009:	68 00 00 80 07       	push   $0x7800000
   1500e:	6a 50                	push   $0x50
   15010:	68 88 13 00 00       	push   $0x1388
   15015:	e8 58 fd ff ff       	call   14d72 <read_disk>
   1501a:	83 c4 10             	add    $0x10,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   1501d:	c7 05 b4 a3 06 00 00 	movl   $0x7800000,0x6a3b4
   15024:	00 80 07 
        return TEMP_FILE_ID;
   15027:	b8 64 00 00 00       	mov    $0x64,%eax
   1502c:	eb 05                	jmp    15033 <sys_open+0x163>
    }

    return -1;
   1502e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15033:	c9                   	leave  
   15034:	c3                   	ret    

00015035 <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   15035:	55                   	push   %ebp
   15036:	89 e5                	mov    %esp,%ebp
   15038:	83 ec 18             	sub    $0x18,%esp
    if (file == TEMP_FILE_ID) {
   1503b:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   1503f:	75 2c                	jne    1506d <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   15041:	a1 b4 a3 06 00       	mov    0x6a3b4,%eax
   15046:	83 ec 04             	sub    $0x4,%esp
   15049:	ff 75 10             	push   0x10(%ebp)
   1504c:	50                   	push   %eax
   1504d:	ff 75 0c             	push   0xc(%ebp)
   15050:	e8 eb 0e 00 00       	call   15f40 <kernel_memcpy>
   15055:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   15058:	8b 15 b4 a3 06 00    	mov    0x6a3b4,%edx
   1505e:	8b 45 10             	mov    0x10(%ebp),%eax
   15061:	01 d0                	add    %edx,%eax
   15063:	a3 b4 a3 06 00       	mov    %eax,0x6a3b4
        return len;
   15068:	8b 45 10             	mov    0x10(%ebp),%eax
   1506b:	eb 45                	jmp    150b2 <sys_read+0x7d>
    } else {
        //根据文件描述符从当前进程的打开文件表中获取文件指针
        file_t *p_file = task_file(file);
   1506d:	83 ec 0c             	sub    $0xc,%esp
   15070:	ff 75 08             	push   0x8(%ebp)
   15073:	e8 24 c2 ff ff       	call   1129c <task_file>
   15078:	83 c4 10             	add    $0x10,%esp
   1507b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!p_file) {//获取失败
   1507e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15082:	75 17                	jne    1509b <sys_read+0x66>
            log_printf("file not opened!\n");
   15084:	83 ec 0c             	sub    $0xc,%esp
   15087:	68 70 77 01 00       	push   $0x17770
   1508c:	e8 fb 16 00 00       	call   1678c <log_printf>
   15091:	83 c4 10             	add    $0x10,%esp
            return -1;
   15094:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15099:	eb 17                	jmp    150b2 <sys_read+0x7d>
        }
        //2.对文件结构所对应的设备进行真实的读操作
        return dev_read(p_file->dev_id, 0, ptr, len);
   1509b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1509e:	8b 40 2c             	mov    0x2c(%eax),%eax
   150a1:	ff 75 10             	push   0x10(%ebp)
   150a4:	ff 75 0c             	push   0xc(%ebp)
   150a7:	6a 00                	push   $0x0
   150a9:	50                   	push   %eax
   150aa:	e8 f2 ef ff ff       	call   140a1 <dev_read>
   150af:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
}
   150b2:	c9                   	leave  
   150b3:	c3                   	ret    

000150b4 <sys_write>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int file, char *ptr, int len) {
   150b4:	55                   	push   %ebp
   150b5:	89 e5                	mov    %esp,%ebp
   150b7:	83 ec 18             	sub    $0x18,%esp
    //1.根据文件描述符从当前进程的打开文件表中获取文件结构指针
     file_t *p_file = task_file(file);
   150ba:	83 ec 0c             	sub    $0xc,%esp
   150bd:	ff 75 08             	push   0x8(%ebp)
   150c0:	e8 d7 c1 ff ff       	call   1129c <task_file>
   150c5:	83 c4 10             	add    $0x10,%esp
   150c8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (!p_file) {//获取失败
   150cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   150cf:	75 17                	jne    150e8 <sys_write+0x34>
        log_printf("file not opened!\n");
   150d1:	83 ec 0c             	sub    $0xc,%esp
   150d4:	68 70 77 01 00       	push   $0x17770
   150d9:	e8 ae 16 00 00       	call   1678c <log_printf>
   150de:	83 c4 10             	add    $0x10,%esp
        return -1;
   150e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   150e6:	eb 17                	jmp    150ff <sys_write+0x4b>
    }

    //2.对文件结构所对应的设备进行真实的写操作
    return dev_write(p_file->dev_id, 0, ptr, len);
   150e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   150eb:	8b 40 2c             	mov    0x2c(%eax),%eax
   150ee:	ff 75 10             	push   0x10(%ebp)
   150f1:	ff 75 0c             	push   0xc(%ebp)
   150f4:	6a 00                	push   $0x0
   150f6:	50                   	push   %eax
   150f7:	e8 f1 ef ff ff       	call   140ed <dev_write>
   150fc:	83 c4 10             	add    $0x10,%esp
    //     // dev_write(dev_id, 0, ptr, len);
    //     // dev_close(dev_id);

    // }
    // return -1;
}
   150ff:	c9                   	leave  
   15100:	c3                   	ret    

00015101 <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   15101:	55                   	push   %ebp
   15102:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   15104:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   15108:	75 14                	jne    1511e <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   1510a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1510d:	05 00 00 80 07       	add    $0x7800000,%eax
   15112:	a3 b4 a3 06 00       	mov    %eax,0x6a3b4
        return 0;
   15117:	b8 00 00 00 00       	mov    $0x0,%eax
   1511c:	eb 05                	jmp    15123 <sys_lseek+0x22>
    }

    return -1;
   1511e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   15123:	5d                   	pop    %ebp
   15124:	c3                   	ret    

00015125 <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   15125:	55                   	push   %ebp
   15126:	89 e5                	mov    %esp,%ebp
    return 0;
   15128:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1512d:	5d                   	pop    %ebp
   1512e:	c3                   	ret    

0001512f <sys_isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int sys_isatty(int file) {
   1512f:	55                   	push   %ebp
   15130:	89 e5                	mov    %esp,%ebp
    return -1;
   15132:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15137:	5d                   	pop    %ebp
   15138:	c3                   	ret    

00015139 <sys_fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int sys_fstat(int file, struct stat *st) {
   15139:	55                   	push   %ebp
   1513a:	89 e5                	mov    %esp,%ebp
    return -1;
   1513c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15141:	5d                   	pop    %ebp
   15142:	c3                   	ret    

00015143 <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int file) {
   15143:	55                   	push   %ebp
   15144:	89 e5                	mov    %esp,%ebp
   15146:	83 ec 18             	sub    $0x18,%esp
    if (file < 0 || file >= TASK_OFILE_SIZE) {
   15149:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1514d:	78 06                	js     15155 <sys_dup+0x12>
   1514f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   15153:	7e 1a                	jle    1516f <sys_dup+0x2c>
        log_printf("file %d is not valid.", file);
   15155:	83 ec 08             	sub    $0x8,%esp
   15158:	ff 75 08             	push   0x8(%ebp)
   1515b:	68 82 77 01 00       	push   $0x17782
   15160:	e8 27 16 00 00       	call   1678c <log_printf>
   15165:	83 c4 10             	add    $0x10,%esp
        return -1;
   15168:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1516d:	eb 6e                	jmp    151dd <sys_dup+0x9a>
    }

    //1.获取需要重复引用的文件指针
    file_t *p_file = task_file(file);
   1516f:	83 ec 0c             	sub    $0xc,%esp
   15172:	ff 75 08             	push   0x8(%ebp)
   15175:	e8 22 c1 ff ff       	call   1129c <task_file>
   1517a:	83 c4 10             	add    $0x10,%esp
   1517d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file) {
   15180:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15184:	75 17                	jne    1519d <sys_dup+0x5a>
        log_printf("file not opend!\n");
   15186:	83 ec 0c             	sub    $0xc,%esp
   15189:	68 98 77 01 00       	push   $0x17798
   1518e:	e8 f9 15 00 00       	call   1678c <log_printf>
   15193:	83 c4 10             	add    $0x10,%esp
        return -1;
   15196:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1519b:	eb 40                	jmp    151dd <sys_dup+0x9a>
    }

    //2.在打开文件表中新分配一项给该文件指针
    int fd = task_alloc_fd(p_file);
   1519d:	83 ec 0c             	sub    $0xc,%esp
   151a0:	ff 75 f4             	push   -0xc(%ebp)
   151a3:	e8 24 c1 ff ff       	call   112cc <task_alloc_fd>
   151a8:	83 c4 10             	add    $0x10,%esp
   151ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (fd < 0) {
   151ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   151b2:	79 17                	jns    151cb <sys_dup+0x88>
        log_printf("no task file avaliable\n");
   151b4:	83 ec 0c             	sub    $0xc,%esp
   151b7:	68 a9 77 01 00       	push   $0x177a9
   151bc:	e8 cb 15 00 00       	call   1678c <log_printf>
   151c1:	83 c4 10             	add    $0x10,%esp
        return -1;
   151c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   151c9:	eb 12                	jmp    151dd <sys_dup+0x9a>
    }

    p_file->ref++;  //分配成功，该文件引用次数加一
   151cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   151ce:	8b 40 28             	mov    0x28(%eax),%eax
   151d1:	8d 50 01             	lea    0x1(%eax),%edx
   151d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   151d7:	89 50 28             	mov    %edx,0x28(%eax)
    return fd;
   151da:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   151dd:	c9                   	leave  
   151de:	c3                   	ret    

000151df <fs_init>:

/**
 * @brief 初始化文件系统
 * 
 */
void fs_init(void) {
   151df:	55                   	push   %ebp
   151e0:	89 e5                	mov    %esp,%ebp
   151e2:	83 ec 08             	sub    $0x8,%esp
    file_table_init();
   151e5:	e8 35 fa ff ff       	call   14c1f <file_table_init>
   151ea:	90                   	nop
   151eb:	c9                   	leave  
   151ec:	c3                   	ret    

000151ed <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   151ed:	55                   	push   %ebp
   151ee:	89 e5                	mov    %esp,%ebp
   151f0:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   151f3:	8b 45 08             	mov    0x8(%ebp),%eax
   151f6:	8b 40 50             	mov    0x50(%eax),%eax
   151f9:	85 c0                	test   %eax,%eax
   151fb:	75 19                	jne    15216 <kernel_init+0x29>
   151fd:	68 c4 77 01 00       	push   $0x177c4
   15202:	68 60 78 01 00       	push   $0x17860
   15207:	6a 25                	push   $0x25
   15209:	68 e8 77 01 00       	push   $0x177e8
   1520e:	e8 63 08 00 00       	call   15a76 <pannic>
   15213:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   15216:	e8 03 d5 ff ff       	call   1271e <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   1521b:	e8 ac dc ff ff       	call   12ecc <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   15220:	e8 38 15 00 00       	call   1675d <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   15225:	83 ec 0c             	sub    $0xc,%esp
   15228:	ff 75 08             	push   0x8(%ebp)
   1522b:	e8 29 ba ff ff       	call   10c59 <memory_init>
   15230:	83 c4 10             	add    $0x10,%esp

    //6.初始化文件系统
    fs_init();
   15233:	e8 a7 ff ff ff       	call   151df <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   15238:	e8 8b f4 ff ff       	call   146c8 <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   1523d:	e8 b3 c4 ff ff       	call   116f5 <task_manager_init>
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   15242:	90                   	nop
   15243:	c9                   	leave  
   15244:	c3                   	ret    

00015245 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   15245:	55                   	push   %ebp
   15246:	89 e5                	mov    %esp,%ebp
   15248:	56                   	push   %esi
   15249:	53                   	push   %ebx
   1524a:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   1524d:	e8 42 c7 ff ff       	call   11994 <task_current>
   15252:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   15255:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15259:	75 19                	jne    15274 <move_to_first_task+0x2f>
   1525b:	68 1d 78 01 00       	push   $0x1781d
   15260:	68 6c 78 01 00       	push   $0x1786c
   15265:	6a 48                	push   $0x48
   15267:	68 e8 77 01 00       	push   $0x177e8
   1526c:	e8 05 08 00 00       	call   15a76 <pannic>
   15271:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   15274:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15277:	83 c0 5c             	add    $0x5c,%eax
   1527a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   1527d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15280:	8b 40 50             	mov    0x50(%eax),%eax
   15283:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15286:	8b 52 38             	mov    0x38(%edx),%edx
   15289:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1528c:	8b 49 24             	mov    0x24(%ecx),%ecx
   1528f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   15292:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   15295:	8b 75 f0             	mov    -0x10(%ebp),%esi
   15298:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   1529b:	50                   	push   %eax
   1529c:	52                   	push   %edx
   1529d:	51                   	push   %ecx
   1529e:	53                   	push   %ebx
   1529f:	56                   	push   %esi
   152a0:	cf                   	iret   

        
    );
}
   152a1:	90                   	nop
   152a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   152a5:	5b                   	pop    %ebx
   152a6:	5e                   	pop    %esi
   152a7:	5d                   	pop    %ebp
   152a8:	c3                   	ret    

000152a9 <init_main>:


void init_main(void) {
   152a9:	55                   	push   %ebp
   152aa:	89 e5                	mov    %esp,%ebp
   152ac:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   152af:	83 ec 0c             	sub    $0xc,%esp
   152b2:	68 27 78 01 00       	push   $0x17827
   152b7:	e8 d0 14 00 00       	call   1678c <log_printf>
   152bc:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: kbOS, Version: %s\n", OS_VERSION);
   152bf:	83 ec 08             	sub    $0x8,%esp
   152c2:	68 40 78 01 00       	push   $0x17840
   152c7:	68 46 78 01 00       	push   $0x17846
   152cc:	e8 bb 14 00 00       	call   1678c <log_printf>
   152d1:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   152d4:	e8 f9 c4 ff ff       	call   117d2 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   152d9:	e8 67 ff ff ff       	call   15245 <move_to_first_task>
   152de:	90                   	nop
   152df:	c9                   	leave  
   152e0:	c3                   	ret    

000152e1 <list_init>:
static inline void list_init(list_t *list) {
   152e1:	55                   	push   %ebp
   152e2:	89 e5                	mov    %esp,%ebp
   152e4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   152e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   152eb:	75 19                	jne    15306 <list_init+0x25>
   152ed:	68 80 78 01 00       	push   $0x17880
   152f2:	68 2c 79 01 00       	push   $0x1792c
   152f7:	6a 31                	push   $0x31
   152f9:	68 94 78 01 00       	push   $0x17894
   152fe:	e8 73 07 00 00       	call   15a76 <pannic>
   15303:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15306:	8b 45 08             	mov    0x8(%ebp),%eax
   15309:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15310:	8b 45 08             	mov    0x8(%ebp),%eax
   15313:	8b 50 04             	mov    0x4(%eax),%edx
   15316:	8b 45 08             	mov    0x8(%ebp),%eax
   15319:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1531b:	8b 45 08             	mov    0x8(%ebp),%eax
   1531e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   15325:	90                   	nop
   15326:	c9                   	leave  
   15327:	c3                   	ret    

00015328 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   15328:	55                   	push   %ebp
   15329:	89 e5                	mov    %esp,%ebp
   1532b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1532e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15332:	75 19                	jne    1534d <list_is_empty+0x25>
   15334:	68 80 78 01 00       	push   $0x17880
   15339:	68 38 79 01 00       	push   $0x17938
   1533e:	6a 38                	push   $0x38
   15340:	68 94 78 01 00       	push   $0x17894
   15345:	e8 2c 07 00 00       	call   15a76 <pannic>
   1534a:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1534d:	8b 45 08             	mov    0x8(%ebp),%eax
   15350:	8b 40 08             	mov    0x8(%eax),%eax
   15353:	85 c0                	test   %eax,%eax
   15355:	0f 94 c0             	sete   %al
   15358:	0f b6 c0             	movzbl %al,%eax
}
   1535b:	c9                   	leave  
   1535c:	c3                   	ret    

0001535d <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   1535d:	55                   	push   %ebp
   1535e:	89 e5                	mov    %esp,%ebp
   15360:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   15363:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15367:	75 19                	jne    15382 <mutex_init+0x25>
   15369:	68 d2 78 01 00       	push   $0x178d2
   1536e:	68 20 79 01 00       	push   $0x17920
   15373:	6a 15                	push   $0x15
   15375:	68 e8 78 01 00       	push   $0x178e8
   1537a:	e8 f7 06 00 00       	call   15a76 <pannic>
   1537f:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   15382:	8b 45 08             	mov    0x8(%ebp),%eax
   15385:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   1538c:	8b 45 08             	mov    0x8(%ebp),%eax
   1538f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   15395:	8b 45 08             	mov    0x8(%ebp),%eax
   15398:	83 c0 08             	add    $0x8,%eax
   1539b:	83 ec 0c             	sub    $0xc,%esp
   1539e:	50                   	push   %eax
   1539f:	e8 3d ff ff ff       	call   152e1 <list_init>
   153a4:	83 c4 10             	add    $0x10,%esp
}
   153a7:	90                   	nop
   153a8:	c9                   	leave  
   153a9:	c3                   	ret    

000153aa <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   153aa:	55                   	push   %ebp
   153ab:	89 e5                	mov    %esp,%ebp
   153ad:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   153b0:	e8 47 de ff ff       	call   131fc <idt_enter_protection>
   153b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   153b8:	e8 d7 c5 ff ff       	call   11994 <task_current>
   153bd:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   153c0:	8b 45 08             	mov    0x8(%ebp),%eax
   153c3:	8b 40 04             	mov    0x4(%eax),%eax
   153c6:	85 c0                	test   %eax,%eax
   153c8:	75 19                	jne    153e3 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   153ca:	8b 45 08             	mov    0x8(%ebp),%eax
   153cd:	8b 40 04             	mov    0x4(%eax),%eax
   153d0:	8d 50 01             	lea    0x1(%eax),%edx
   153d3:	8b 45 08             	mov    0x8(%ebp),%eax
   153d6:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   153d9:	8b 45 08             	mov    0x8(%ebp),%eax
   153dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
   153df:	89 10                	mov    %edx,(%eax)
   153e1:	eb 47                	jmp    1542a <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   153e3:	8b 45 08             	mov    0x8(%ebp),%eax
   153e6:	8b 00                	mov    (%eax),%eax
   153e8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   153eb:	75 11                	jne    153fe <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   153ed:	8b 45 08             	mov    0x8(%ebp),%eax
   153f0:	8b 40 04             	mov    0x4(%eax),%eax
   153f3:	8d 50 01             	lea    0x1(%eax),%edx
   153f6:	8b 45 08             	mov    0x8(%ebp),%eax
   153f9:	89 50 04             	mov    %edx,0x4(%eax)
   153fc:	eb 2c                	jmp    1542a <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   153fe:	83 ec 0c             	sub    $0xc,%esp
   15401:	ff 75 f0             	push   -0x10(%ebp)
   15404:	e8 1b c5 ff ff       	call   11924 <task_set_unready>
   15409:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   1540c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1540f:	8d 50 54             	lea    0x54(%eax),%edx
   15412:	8b 45 08             	mov    0x8(%ebp),%eax
   15415:	83 c0 08             	add    $0x8,%eax
   15418:	83 ec 08             	sub    $0x8,%esp
   1541b:	52                   	push   %edx
   1541c:	50                   	push   %eax
   1541d:	e8 7d 10 00 00       	call   1649f <list_insert_last>
   15422:	83 c4 10             	add    $0x10,%esp
    task_switch();
   15425:	e8 74 c5 ff ff       	call   1199e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   1542a:	83 ec 0c             	sub    $0xc,%esp
   1542d:	ff 75 f4             	push   -0xc(%ebp)
   15430:	e8 df dd ff ff       	call   13214 <idt_leave_protection>
   15435:	83 c4 10             	add    $0x10,%esp
}
   15438:	90                   	nop
   15439:	c9                   	leave  
   1543a:	c3                   	ret    

0001543b <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   1543b:	55                   	push   %ebp
   1543c:	89 e5                	mov    %esp,%ebp
   1543e:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   15441:	e8 b6 dd ff ff       	call   131fc <idt_enter_protection>
   15446:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   15449:	e8 46 c5 ff ff       	call   11994 <task_current>
   1544e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   15451:	8b 45 08             	mov    0x8(%ebp),%eax
   15454:	8b 00                	mov    (%eax),%eax
   15456:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15459:	0f 85 83 00 00 00    	jne    154e2 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   1545f:	8b 45 08             	mov    0x8(%ebp),%eax
   15462:	8b 40 04             	mov    0x4(%eax),%eax
   15465:	8d 50 ff             	lea    -0x1(%eax),%edx
   15468:	8b 45 08             	mov    0x8(%ebp),%eax
   1546b:	89 50 04             	mov    %edx,0x4(%eax)
   1546e:	8b 45 08             	mov    0x8(%ebp),%eax
   15471:	8b 40 04             	mov    0x4(%eax),%eax
   15474:	85 c0                	test   %eax,%eax
   15476:	75 6a                	jne    154e2 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   15478:	8b 45 08             	mov    0x8(%ebp),%eax
   1547b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   15481:	8b 45 08             	mov    0x8(%ebp),%eax
   15484:	83 c0 08             	add    $0x8,%eax
   15487:	83 ec 0c             	sub    $0xc,%esp
   1548a:	50                   	push   %eax
   1548b:	e8 98 fe ff ff       	call   15328 <list_is_empty>
   15490:	83 c4 10             	add    $0x10,%esp
   15493:	85 c0                	test   %eax,%eax
   15495:	75 4b                	jne    154e2 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   15497:	8b 45 08             	mov    0x8(%ebp),%eax
   1549a:	83 c0 08             	add    $0x8,%eax
   1549d:	83 ec 0c             	sub    $0xc,%esp
   154a0:	50                   	push   %eax
   154a1:	e8 88 10 00 00       	call   1652e <list_remove_first>
   154a6:	83 c4 10             	add    $0x10,%esp
   154a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   154ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   154b0:	74 08                	je     154ba <mutex_unlock+0x7f>
   154b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   154b5:	83 e8 54             	sub    $0x54,%eax
   154b8:	eb 05                	jmp    154bf <mutex_unlock+0x84>
   154ba:	b8 00 00 00 00       	mov    $0x0,%eax
   154bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   154c2:	8b 45 08             	mov    0x8(%ebp),%eax
   154c5:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   154cc:	8b 45 08             	mov    0x8(%ebp),%eax
   154cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
   154d2:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   154d4:	83 ec 0c             	sub    $0xc,%esp
   154d7:	ff 75 e8             	push   -0x18(%ebp)
   154da:	e8 03 c4 ff ff       	call   118e2 <task_set_ready>
   154df:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   154e2:	83 ec 0c             	sub    $0xc,%esp
   154e5:	ff 75 f4             	push   -0xc(%ebp)
   154e8:	e8 27 dd ff ff       	call   13214 <idt_leave_protection>
   154ed:	83 c4 10             	add    $0x10,%esp
}
   154f0:	90                   	nop
   154f1:	c9                   	leave  
   154f2:	c3                   	ret    

000154f3 <list_init>:
static inline void list_init(list_t *list) {
   154f3:	55                   	push   %ebp
   154f4:	89 e5                	mov    %esp,%ebp
   154f6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   154f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   154fd:	75 19                	jne    15518 <list_init+0x25>
   154ff:	68 48 79 01 00       	push   $0x17948
   15504:	68 ec 79 01 00       	push   $0x179ec
   15509:	6a 31                	push   $0x31
   1550b:	68 5c 79 01 00       	push   $0x1795c
   15510:	e8 61 05 00 00       	call   15a76 <pannic>
   15515:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15518:	8b 45 08             	mov    0x8(%ebp),%eax
   1551b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15522:	8b 45 08             	mov    0x8(%ebp),%eax
   15525:	8b 50 04             	mov    0x4(%eax),%edx
   15528:	8b 45 08             	mov    0x8(%ebp),%eax
   1552b:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1552d:	8b 45 08             	mov    0x8(%ebp),%eax
   15530:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   15537:	90                   	nop
   15538:	c9                   	leave  
   15539:	c3                   	ret    

0001553a <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1553a:	55                   	push   %ebp
   1553b:	89 e5                	mov    %esp,%ebp
   1553d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15540:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15544:	75 19                	jne    1555f <list_is_empty+0x25>
   15546:	68 48 79 01 00       	push   $0x17948
   1554b:	68 f8 79 01 00       	push   $0x179f8
   15550:	6a 38                	push   $0x38
   15552:	68 5c 79 01 00       	push   $0x1795c
   15557:	e8 1a 05 00 00       	call   15a76 <pannic>
   1555c:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1555f:	8b 45 08             	mov    0x8(%ebp),%eax
   15562:	8b 40 08             	mov    0x8(%eax),%eax
   15565:	85 c0                	test   %eax,%eax
   15567:	0f 94 c0             	sete   %al
   1556a:	0f b6 c0             	movzbl %al,%eax
}
   1556d:	c9                   	leave  
   1556e:	c3                   	ret    

0001556f <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   1556f:	55                   	push   %ebp
   15570:	89 e5                	mov    %esp,%ebp
   15572:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   15575:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15579:	75 19                	jne    15594 <sem_init+0x25>
   1557b:	68 9a 79 01 00       	push   $0x1799a
   15580:	68 e0 79 01 00       	push   $0x179e0
   15585:	6a 18                	push   $0x18
   15587:	68 ac 79 01 00       	push   $0x179ac
   1558c:	e8 e5 04 00 00       	call   15a76 <pannic>
   15591:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   15594:	8b 45 08             	mov    0x8(%ebp),%eax
   15597:	8b 55 0c             	mov    0xc(%ebp),%edx
   1559a:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1559c:	8b 45 08             	mov    0x8(%ebp),%eax
   1559f:	83 c0 04             	add    $0x4,%eax
   155a2:	83 ec 0c             	sub    $0xc,%esp
   155a5:	50                   	push   %eax
   155a6:	e8 48 ff ff ff       	call   154f3 <list_init>
   155ab:	83 c4 10             	add    $0x10,%esp
}
   155ae:	90                   	nop
   155af:	c9                   	leave  
   155b0:	c3                   	ret    

000155b1 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   155b1:	55                   	push   %ebp
   155b2:	89 e5                	mov    %esp,%ebp
   155b4:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   155b7:	e8 40 dc ff ff       	call   131fc <idt_enter_protection>
   155bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   155bf:	8b 45 08             	mov    0x8(%ebp),%eax
   155c2:	8b 00                	mov    (%eax),%eax
   155c4:	85 c0                	test   %eax,%eax
   155c6:	7e 0f                	jle    155d7 <sem_wait+0x26>
        --sem->count;   
   155c8:	8b 45 08             	mov    0x8(%ebp),%eax
   155cb:	8b 00                	mov    (%eax),%eax
   155cd:	8d 50 ff             	lea    -0x1(%eax),%edx
   155d0:	8b 45 08             	mov    0x8(%ebp),%eax
   155d3:	89 10                	mov    %edx,(%eax)
   155d5:	eb 34                	jmp    1560b <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   155d7:	e8 b8 c3 ff ff       	call   11994 <task_current>
   155dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   155df:	83 ec 0c             	sub    $0xc,%esp
   155e2:	ff 75 f0             	push   -0x10(%ebp)
   155e5:	e8 3a c3 ff ff       	call   11924 <task_set_unready>
   155ea:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   155ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155f0:	8d 50 54             	lea    0x54(%eax),%edx
   155f3:	8b 45 08             	mov    0x8(%ebp),%eax
   155f6:	83 c0 04             	add    $0x4,%eax
   155f9:	83 ec 08             	sub    $0x8,%esp
   155fc:	52                   	push   %edx
   155fd:	50                   	push   %eax
   155fe:	e8 9c 0e 00 00       	call   1649f <list_insert_last>
   15603:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   15606:	e8 93 c3 ff ff       	call   1199e <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   1560b:	83 ec 0c             	sub    $0xc,%esp
   1560e:	ff 75 f4             	push   -0xc(%ebp)
   15611:	e8 fe db ff ff       	call   13214 <idt_leave_protection>
   15616:	83 c4 10             	add    $0x10,%esp
}
   15619:	90                   	nop
   1561a:	c9                   	leave  
   1561b:	c3                   	ret    

0001561c <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   1561c:	55                   	push   %ebp
   1561d:	89 e5                	mov    %esp,%ebp
   1561f:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   15622:	e8 d5 db ff ff       	call   131fc <idt_enter_protection>
   15627:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   1562a:	8b 45 08             	mov    0x8(%ebp),%eax
   1562d:	83 c0 04             	add    $0x4,%eax
   15630:	83 ec 0c             	sub    $0xc,%esp
   15633:	50                   	push   %eax
   15634:	e8 01 ff ff ff       	call   1553a <list_is_empty>
   15639:	83 c4 10             	add    $0x10,%esp
   1563c:	85 c0                	test   %eax,%eax
   1563e:	75 40                	jne    15680 <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   15640:	8b 45 08             	mov    0x8(%ebp),%eax
   15643:	83 c0 04             	add    $0x4,%eax
   15646:	83 ec 0c             	sub    $0xc,%esp
   15649:	50                   	push   %eax
   1564a:	e8 df 0e 00 00       	call   1652e <list_remove_first>
   1564f:	83 c4 10             	add    $0x10,%esp
   15652:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   15655:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15659:	74 08                	je     15663 <sem_notify+0x47>
   1565b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1565e:	83 e8 54             	sub    $0x54,%eax
   15661:	eb 05                	jmp    15668 <sem_notify+0x4c>
   15663:	b8 00 00 00 00       	mov    $0x0,%eax
   15668:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1566b:	83 ec 0c             	sub    $0xc,%esp
   1566e:	ff 75 ec             	push   -0x14(%ebp)
   15671:	e8 6c c2 ff ff       	call   118e2 <task_set_ready>
   15676:	83 c4 10             	add    $0x10,%esp
        task_switch();
   15679:	e8 20 c3 ff ff       	call   1199e <task_switch>
   1567e:	eb 0d                	jmp    1568d <sem_notify+0x71>
    } else {
        sem->count++;
   15680:	8b 45 08             	mov    0x8(%ebp),%eax
   15683:	8b 00                	mov    (%eax),%eax
   15685:	8d 50 01             	lea    0x1(%eax),%edx
   15688:	8b 45 08             	mov    0x8(%ebp),%eax
   1568b:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   1568d:	83 ec 0c             	sub    $0xc,%esp
   15690:	ff 75 f4             	push   -0xc(%ebp)
   15693:	e8 7c db ff ff       	call   13214 <idt_leave_protection>
   15698:	83 c4 10             	add    $0x10,%esp

}
   1569b:	90                   	nop
   1569c:	c9                   	leave  
   1569d:	c3                   	ret    

0001569e <sem_count>:

int sem_count(sem_t *sem) {
   1569e:	55                   	push   %ebp
   1569f:	89 e5                	mov    %esp,%ebp
   156a1:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   156a4:	e8 53 db ff ff       	call   131fc <idt_enter_protection>
   156a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   156ac:	8b 45 08             	mov    0x8(%ebp),%eax
   156af:	8b 00                	mov    (%eax),%eax
   156b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   156b4:	83 ec 0c             	sub    $0xc,%esp
   156b7:	ff 75 f4             	push   -0xc(%ebp)
   156ba:	e8 55 db ff ff       	call   13214 <idt_leave_protection>
   156bf:	83 c4 10             	add    $0x10,%esp

    return count;
   156c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   156c5:	c9                   	leave  
   156c6:	c3                   	ret    

000156c7 <list_init>:
static inline void list_init(list_t *list) {
   156c7:	55                   	push   %ebp
   156c8:	89 e5                	mov    %esp,%ebp
   156ca:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   156cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   156d1:	75 19                	jne    156ec <list_init+0x25>
   156d3:	68 08 7a 01 00       	push   $0x17a08
   156d8:	68 0c 7b 01 00       	push   $0x17b0c
   156dd:	6a 31                	push   $0x31
   156df:	68 1c 7a 01 00       	push   $0x17a1c
   156e4:	e8 8d 03 00 00       	call   15a76 <pannic>
   156e9:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   156ec:	8b 45 08             	mov    0x8(%ebp),%eax
   156ef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   156f6:	8b 45 08             	mov    0x8(%ebp),%eax
   156f9:	8b 50 04             	mov    0x4(%eax),%edx
   156fc:	8b 45 08             	mov    0x8(%ebp),%eax
   156ff:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   15701:	8b 45 08             	mov    0x8(%ebp),%eax
   15704:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1570b:	90                   	nop
   1570c:	c9                   	leave  
   1570d:	c3                   	ret    

0001570e <list_get_size>:
static inline int list_get_size(list_t *list) {
   1570e:	55                   	push   %ebp
   1570f:	89 e5                	mov    %esp,%ebp
   15711:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15714:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15718:	75 19                	jne    15733 <list_get_size+0x25>
   1571a:	68 08 7a 01 00       	push   $0x17a08
   1571f:	68 18 7b 01 00       	push   $0x17b18
   15724:	6a 3e                	push   $0x3e
   15726:	68 1c 7a 01 00       	push   $0x17a1c
   1572b:	e8 46 03 00 00       	call   15a76 <pannic>
   15730:	83 c4 10             	add    $0x10,%esp
    return list->size;
   15733:	8b 45 08             	mov    0x8(%ebp),%eax
   15736:	8b 40 08             	mov    0x8(%eax),%eax
}
   15739:	c9                   	leave  
   1573a:	c3                   	ret    

0001573b <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   1573b:	55                   	push   %ebp
   1573c:	89 e5                	mov    %esp,%ebp
   1573e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15741:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15745:	75 19                	jne    15760 <list_get_first+0x25>
   15747:	68 08 7a 01 00       	push   $0x17a08
   1574c:	68 38 7b 01 00       	push   $0x17b38
   15751:	6a 44                	push   $0x44
   15753:	68 1c 7a 01 00       	push   $0x17a1c
   15758:	e8 19 03 00 00       	call   15a76 <pannic>
   1575d:	83 c4 10             	add    $0x10,%esp
    return list->first;
   15760:	8b 45 08             	mov    0x8(%ebp),%eax
   15763:	8b 00                	mov    (%eax),%eax
}
   15765:	c9                   	leave  
   15766:	c3                   	ret    

00015767 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   15767:	55                   	push   %ebp
   15768:	89 e5                	mov    %esp,%ebp
   1576a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1576d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15771:	75 19                	jne    1578c <list_get_last+0x25>
   15773:	68 08 7a 01 00       	push   $0x17a08
   15778:	68 28 7b 01 00       	push   $0x17b28
   1577d:	6a 4a                	push   $0x4a
   1577f:	68 1c 7a 01 00       	push   $0x17a1c
   15784:	e8 ed 02 00 00       	call   15a76 <pannic>
   15789:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1578c:	8b 45 08             	mov    0x8(%ebp),%eax
   1578f:	8b 40 04             	mov    0x4(%eax),%eax
}
   15792:	c9                   	leave  
   15793:	c3                   	ret    

00015794 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   15794:	55                   	push   %ebp
   15795:	89 e5                	mov    %esp,%ebp
   15797:	56                   	push   %esi
   15798:	53                   	push   %ebx
   15799:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1579c:	83 ec 0c             	sub    $0xc,%esp
   1579f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157a2:	50                   	push   %eax
   157a3:	e8 1f ff ff ff       	call   156c7 <list_init>
   157a8:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   157ab:	83 ec 0c             	sub    $0xc,%esp
   157ae:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157b1:	50                   	push   %eax
   157b2:	e8 57 ff ff ff       	call   1570e <list_get_size>
   157b7:	83 c4 10             	add    $0x10,%esp
   157ba:	89 c6                	mov    %eax,%esi
   157bc:	83 ec 0c             	sub    $0xc,%esp
   157bf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157c2:	50                   	push   %eax
   157c3:	e8 9f ff ff ff       	call   15767 <list_get_last>
   157c8:	83 c4 10             	add    $0x10,%esp
   157cb:	89 c3                	mov    %eax,%ebx
   157cd:	83 ec 0c             	sub    $0xc,%esp
   157d0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157d3:	50                   	push   %eax
   157d4:	e8 62 ff ff ff       	call   1573b <list_get_first>
   157d9:	83 c4 10             	add    $0x10,%esp
   157dc:	56                   	push   %esi
   157dd:	53                   	push   %ebx
   157de:	50                   	push   %eax
   157df:	68 5c 7a 01 00       	push   $0x17a5c
   157e4:	e8 a3 0f 00 00       	call   1678c <log_printf>
   157e9:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   157ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   157f3:	eb 3f                	jmp    15834 <list_test+0xa0>
        list_node_t *node = nodes + i;
   157f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   157ff:	8d 45 9c             	lea    -0x64(%ebp),%eax
   15802:	01 d0                	add    %edx,%eax
   15804:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   15807:	8b 45 d0             	mov    -0x30(%ebp),%eax
   1580a:	83 ec 04             	sub    $0x4,%esp
   1580d:	50                   	push   %eax
   1580e:	ff 75 f4             	push   -0xc(%ebp)
   15811:	68 84 7a 01 00       	push   $0x17a84
   15816:	e8 71 0f 00 00       	call   1678c <log_printf>
   1581b:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   1581e:	83 ec 08             	sub    $0x8,%esp
   15821:	ff 75 d0             	push   -0x30(%ebp)
   15824:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15827:	50                   	push   %eax
   15828:	e8 e7 0b 00 00       	call   16414 <list_insert_first>
   1582d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   15830:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15834:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   15838:	7e bb                	jle    157f5 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1583a:	83 ec 0c             	sub    $0xc,%esp
   1583d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15840:	50                   	push   %eax
   15841:	e8 c8 fe ff ff       	call   1570e <list_get_size>
   15846:	83 c4 10             	add    $0x10,%esp
   15849:	89 c6                	mov    %eax,%esi
   1584b:	83 ec 0c             	sub    $0xc,%esp
   1584e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15851:	50                   	push   %eax
   15852:	e8 10 ff ff ff       	call   15767 <list_get_last>
   15857:	83 c4 10             	add    $0x10,%esp
   1585a:	89 c3                	mov    %eax,%ebx
   1585c:	83 ec 0c             	sub    $0xc,%esp
   1585f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15862:	50                   	push   %eax
   15863:	e8 d3 fe ff ff       	call   1573b <list_get_first>
   15868:	83 c4 10             	add    $0x10,%esp
   1586b:	56                   	push   %esi
   1586c:	53                   	push   %ebx
   1586d:	50                   	push   %eax
   1586e:	68 5c 7a 01 00       	push   $0x17a5c
   15873:	e8 14 0f 00 00       	call   1678c <log_printf>
   15878:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   1587b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15882:	eb 2d                	jmp    158b1 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   15884:	83 ec 0c             	sub    $0xc,%esp
   15887:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1588a:	50                   	push   %eax
   1588b:	e8 9e 0c 00 00       	call   1652e <list_remove_first>
   15890:	83 c4 10             	add    $0x10,%esp
   15893:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   15896:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   15899:	83 ec 04             	sub    $0x4,%esp
   1589c:	50                   	push   %eax
   1589d:	ff 75 f0             	push   -0x10(%ebp)
   158a0:	68 a3 7a 01 00       	push   $0x17aa3
   158a5:	e8 e2 0e 00 00       	call   1678c <log_printf>
   158aa:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   158ad:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   158b1:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   158b5:	7e cd                	jle    15884 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   158b7:	83 ec 0c             	sub    $0xc,%esp
   158ba:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158bd:	50                   	push   %eax
   158be:	e8 4b fe ff ff       	call   1570e <list_get_size>
   158c3:	83 c4 10             	add    $0x10,%esp
   158c6:	89 c6                	mov    %eax,%esi
   158c8:	83 ec 0c             	sub    $0xc,%esp
   158cb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158ce:	50                   	push   %eax
   158cf:	e8 93 fe ff ff       	call   15767 <list_get_last>
   158d4:	83 c4 10             	add    $0x10,%esp
   158d7:	89 c3                	mov    %eax,%ebx
   158d9:	83 ec 0c             	sub    $0xc,%esp
   158dc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158df:	50                   	push   %eax
   158e0:	e8 56 fe ff ff       	call   1573b <list_get_first>
   158e5:	83 c4 10             	add    $0x10,%esp
   158e8:	56                   	push   %esi
   158e9:	53                   	push   %ebx
   158ea:	50                   	push   %eax
   158eb:	68 5c 7a 01 00       	push   $0x17a5c
   158f0:	e8 97 0e 00 00       	call   1678c <log_printf>
   158f5:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   158f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   158ff:	eb 3f                	jmp    15940 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   15901:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15904:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1590b:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1590e:	01 d0                	add    %edx,%eax
   15910:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   15913:	8b 45 d8             	mov    -0x28(%ebp),%eax
   15916:	83 ec 04             	sub    $0x4,%esp
   15919:	50                   	push   %eax
   1591a:	ff 75 ec             	push   -0x14(%ebp)
   1591d:	68 ba 7a 01 00       	push   $0x17aba
   15922:	e8 65 0e 00 00       	call   1678c <log_printf>
   15927:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1592a:	83 ec 08             	sub    $0x8,%esp
   1592d:	ff 75 d8             	push   -0x28(%ebp)
   15930:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15933:	50                   	push   %eax
   15934:	e8 66 0b 00 00       	call   1649f <list_insert_last>
   15939:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1593c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15940:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   15944:	7e bb                	jle    15901 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15946:	83 ec 0c             	sub    $0xc,%esp
   15949:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1594c:	50                   	push   %eax
   1594d:	e8 bc fd ff ff       	call   1570e <list_get_size>
   15952:	83 c4 10             	add    $0x10,%esp
   15955:	89 c6                	mov    %eax,%esi
   15957:	83 ec 0c             	sub    $0xc,%esp
   1595a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1595d:	50                   	push   %eax
   1595e:	e8 04 fe ff ff       	call   15767 <list_get_last>
   15963:	83 c4 10             	add    $0x10,%esp
   15966:	89 c3                	mov    %eax,%ebx
   15968:	83 ec 0c             	sub    $0xc,%esp
   1596b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1596e:	50                   	push   %eax
   1596f:	e8 c7 fd ff ff       	call   1573b <list_get_first>
   15974:	83 c4 10             	add    $0x10,%esp
   15977:	56                   	push   %esi
   15978:	53                   	push   %ebx
   15979:	50                   	push   %eax
   1597a:	68 5c 7a 01 00       	push   $0x17a5c
   1597f:	e8 08 0e 00 00       	call   1678c <log_printf>
   15984:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   15987:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1598e:	eb 2d                	jmp    159bd <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   15990:	83 ec 0c             	sub    $0xc,%esp
   15993:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15996:	50                   	push   %eax
   15997:	e8 43 0c 00 00       	call   165df <list_remove_last>
   1599c:	83 c4 10             	add    $0x10,%esp
   1599f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   159a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
   159a5:	83 ec 04             	sub    $0x4,%esp
   159a8:	50                   	push   %eax
   159a9:	ff 75 e8             	push   -0x18(%ebp)
   159ac:	68 d8 7a 01 00       	push   $0x17ad8
   159b1:	e8 d6 0d 00 00       	call   1678c <log_printf>
   159b6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   159b9:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   159bd:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   159c1:	7e cd                	jle    15990 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   159c3:	83 ec 0c             	sub    $0xc,%esp
   159c6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159c9:	50                   	push   %eax
   159ca:	e8 3f fd ff ff       	call   1570e <list_get_size>
   159cf:	83 c4 10             	add    $0x10,%esp
   159d2:	89 c6                	mov    %eax,%esi
   159d4:	83 ec 0c             	sub    $0xc,%esp
   159d7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159da:	50                   	push   %eax
   159db:	e8 87 fd ff ff       	call   15767 <list_get_last>
   159e0:	83 c4 10             	add    $0x10,%esp
   159e3:	89 c3                	mov    %eax,%ebx
   159e5:	83 ec 0c             	sub    $0xc,%esp
   159e8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159eb:	50                   	push   %eax
   159ec:	e8 4a fd ff ff       	call   1573b <list_get_first>
   159f1:	83 c4 10             	add    $0x10,%esp
   159f4:	56                   	push   %esi
   159f5:	53                   	push   %ebx
   159f6:	50                   	push   %eax
   159f7:	68 5c 7a 01 00       	push   $0x17a5c
   159fc:	e8 8b 0d 00 00       	call   1678c <log_printf>
   15a01:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   15a04:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   15a0b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   15a12:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   15a19:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   15a20:	8d 45 90             	lea    -0x70(%ebp),%eax
   15a23:	83 c0 04             	add    $0x4,%eax
   15a26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   15a29:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15a2d:	74 08                	je     15a37 <list_test+0x2a3>
   15a2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   15a32:	83 e8 04             	sub    $0x4,%eax
   15a35:	eb 05                	jmp    15a3c <list_test+0x2a8>
   15a37:	b8 00 00 00 00       	mov    $0x0,%eax
   15a3c:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   15a3f:	8d 45 90             	lea    -0x70(%ebp),%eax
   15a42:	83 ec 08             	sub    $0x8,%esp
   15a45:	50                   	push   %eax
   15a46:	68 ee 7a 01 00       	push   $0x17aee
   15a4b:	e8 3c 0d 00 00       	call   1678c <log_printf>
   15a50:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   15a53:	8b 45 e0             	mov    -0x20(%ebp),%eax
   15a56:	83 ec 08             	sub    $0x8,%esp
   15a59:	50                   	push   %eax
   15a5a:	68 fc 7a 01 00       	push   $0x17afc
   15a5f:	e8 28 0d 00 00       	call   1678c <log_printf>
   15a64:	83 c4 10             	add    $0x10,%esp

 }
   15a67:	90                   	nop
   15a68:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15a6b:	5b                   	pop    %ebx
   15a6c:	5e                   	pop    %esi
   15a6d:	5d                   	pop    %ebp
   15a6e:	c3                   	ret    

00015a6f <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   15a6f:	55                   	push   %ebp
   15a70:	89 e5                	mov    %esp,%ebp
   15a72:	f4                   	hlt    
   15a73:	90                   	nop
   15a74:	5d                   	pop    %ebp
   15a75:	c3                   	ret    

00015a76 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   15a76:	55                   	push   %ebp
   15a77:	89 e5                	mov    %esp,%ebp
   15a79:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   15a7c:	83 ec 08             	sub    $0x8,%esp
   15a7f:	ff 75 14             	push   0x14(%ebp)
   15a82:	68 47 7b 01 00       	push   $0x17b47
   15a87:	e8 00 0d 00 00       	call   1678c <log_printf>
   15a8c:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   15a8f:	ff 75 10             	push   0x10(%ebp)
   15a92:	ff 75 0c             	push   0xc(%ebp)
   15a95:	ff 75 08             	push   0x8(%ebp)
   15a98:	68 59 7b 01 00       	push   $0x17b59
   15a9d:	e8 ea 0c 00 00       	call   1678c <log_printf>
   15aa2:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   15aa5:	e8 c5 ff ff ff       	call   15a6f <hlt>
   15aaa:	eb f9                	jmp    15aa5 <pannic+0x2f>

00015aac <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   15aac:	55                   	push   %ebp
   15aad:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   15aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   15ab2:	83 c0 07             	add    $0x7,%eax
   15ab5:	8d 50 07             	lea    0x7(%eax),%edx
   15ab8:	85 c0                	test   %eax,%eax
   15aba:	0f 48 c2             	cmovs  %edx,%eax
   15abd:	c1 f8 03             	sar    $0x3,%eax
}
   15ac0:	5d                   	pop    %ebp
   15ac1:	c3                   	ret    

00015ac2 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   15ac2:	55                   	push   %ebp
   15ac3:	89 e5                	mov    %esp,%ebp
   15ac5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15ac8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15acc:	75 19                	jne    15ae7 <bitmap_init+0x25>
   15ace:	68 78 7b 01 00       	push   $0x17b78
   15ad3:	68 0c 7c 01 00       	push   $0x17c0c
   15ad8:	6a 24                	push   $0x24
   15ada:	68 90 7b 01 00       	push   $0x17b90
   15adf:	e8 92 ff ff ff       	call   15a76 <pannic>
   15ae4:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   15ae7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15aeb:	75 19                	jne    15b06 <bitmap_init+0x44>
   15aed:	68 c8 7b 01 00       	push   $0x17bc8
   15af2:	68 0c 7c 01 00       	push   $0x17c0c
   15af7:	6a 25                	push   $0x25
   15af9:	68 90 7b 01 00       	push   $0x17b90
   15afe:	e8 73 ff ff ff       	call   15a76 <pannic>
   15b03:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   15b06:	8b 45 08             	mov    0x8(%ebp),%eax
   15b09:	8b 55 10             	mov    0x10(%ebp),%edx
   15b0c:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   15b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b11:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b14:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   15b17:	8b 45 08             	mov    0x8(%ebp),%eax
   15b1a:	8b 00                	mov    (%eax),%eax
   15b1c:	83 ec 0c             	sub    $0xc,%esp
   15b1f:	50                   	push   %eax
   15b20:	e8 87 ff ff ff       	call   15aac <bitmap_byte_count>
   15b25:	83 c4 10             	add    $0x10,%esp
   15b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   15b2b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15b2f:	74 07                	je     15b38 <bitmap_init+0x76>
   15b31:	ba ff 00 00 00       	mov    $0xff,%edx
   15b36:	eb 05                	jmp    15b3d <bitmap_init+0x7b>
   15b38:	ba 00 00 00 00       	mov    $0x0,%edx
   15b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   15b40:	8b 40 04             	mov    0x4(%eax),%eax
   15b43:	83 ec 04             	sub    $0x4,%esp
   15b46:	ff 75 f4             	push   -0xc(%ebp)
   15b49:	52                   	push   %edx
   15b4a:	50                   	push   %eax
   15b4b:	e8 3f 04 00 00       	call   15f8f <kernel_memset>
   15b50:	83 c4 10             	add    $0x10,%esp

}
   15b53:	90                   	nop
   15b54:	c9                   	leave  
   15b55:	c3                   	ret    

00015b56 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   15b56:	55                   	push   %ebp
   15b57:	89 e5                	mov    %esp,%ebp
   15b59:	53                   	push   %ebx
   15b5a:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15b5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15b61:	75 19                	jne    15b7c <bitmap_get_bit+0x26>
   15b63:	68 78 7b 01 00       	push   $0x17b78
   15b68:	68 18 7c 01 00       	push   $0x17c18
   15b6d:	6a 39                	push   $0x39
   15b6f:	68 90 7b 01 00       	push   $0x17b90
   15b74:	e8 fd fe ff ff       	call   15a76 <pannic>
   15b79:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   15b7c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15b80:	79 19                	jns    15b9b <bitmap_get_bit+0x45>
   15b82:	68 dc 7b 01 00       	push   $0x17bdc
   15b87:	68 18 7c 01 00       	push   $0x17c18
   15b8c:	6a 3a                	push   $0x3a
   15b8e:	68 90 7b 01 00       	push   $0x17b90
   15b93:	e8 de fe ff ff       	call   15a76 <pannic>
   15b98:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   15b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   15b9e:	8b 48 04             	mov    0x4(%eax),%ecx
   15ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ba4:	8d 50 07             	lea    0x7(%eax),%edx
   15ba7:	85 c0                	test   %eax,%eax
   15ba9:	0f 48 c2             	cmovs  %edx,%eax
   15bac:	c1 f8 03             	sar    $0x3,%eax
   15baf:	01 c8                	add    %ecx,%eax
   15bb1:	0f b6 00             	movzbl (%eax),%eax
   15bb4:	89 c3                	mov    %eax,%ebx
   15bb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bb9:	83 e0 07             	and    $0x7,%eax
   15bbc:	ba 01 00 00 00       	mov    $0x1,%edx
   15bc1:	89 c1                	mov    %eax,%ecx
   15bc3:	d3 e2                	shl    %cl,%edx
   15bc5:	89 d0                	mov    %edx,%eax
   15bc7:	21 d8                	and    %ebx,%eax
}
   15bc9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15bcc:	c9                   	leave  
   15bcd:	c3                   	ret    

00015bce <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   15bce:	55                   	push   %ebp
   15bcf:	89 e5                	mov    %esp,%ebp
   15bd1:	56                   	push   %esi
   15bd2:	53                   	push   %ebx
   15bd3:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15bd6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15bda:	75 19                	jne    15bf5 <bitmap_set_bit+0x27>
   15bdc:	68 78 7b 01 00       	push   $0x17b78
   15be1:	68 28 7c 01 00       	push   $0x17c28
   15be6:	6a 48                	push   $0x48
   15be8:	68 90 7b 01 00       	push   $0x17b90
   15bed:	e8 84 fe ff ff       	call   15a76 <pannic>
   15bf2:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   15bf5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15bf9:	78 06                	js     15c01 <bitmap_set_bit+0x33>
   15bfb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15bff:	79 19                	jns    15c1a <bitmap_set_bit+0x4c>
   15c01:	68 e7 7b 01 00       	push   $0x17be7
   15c06:	68 28 7c 01 00       	push   $0x17c28
   15c0b:	6a 49                	push   $0x49
   15c0d:	68 90 7b 01 00       	push   $0x17b90
   15c12:	e8 5f fe ff ff       	call   15a76 <pannic>
   15c17:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   15c1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15c21:	e9 92 00 00 00       	jmp    15cb8 <bitmap_set_bit+0xea>
        if (bit) {
   15c26:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15c2a:	74 42                	je     15c6e <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   15c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c2f:	8b 48 04             	mov    0x4(%eax),%ecx
   15c32:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c35:	8d 50 07             	lea    0x7(%eax),%edx
   15c38:	85 c0                	test   %eax,%eax
   15c3a:	0f 48 c2             	cmovs  %edx,%eax
   15c3d:	c1 f8 03             	sar    $0x3,%eax
   15c40:	89 c2                	mov    %eax,%edx
   15c42:	89 d0                	mov    %edx,%eax
   15c44:	01 c8                	add    %ecx,%eax
   15c46:	0f b6 00             	movzbl (%eax),%eax
   15c49:	89 c6                	mov    %eax,%esi
   15c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c4e:	83 e0 07             	and    $0x7,%eax
   15c51:	bb 01 00 00 00       	mov    $0x1,%ebx
   15c56:	89 c1                	mov    %eax,%ecx
   15c58:	d3 e3                	shl    %cl,%ebx
   15c5a:	89 d8                	mov    %ebx,%eax
   15c5c:	89 f1                	mov    %esi,%ecx
   15c5e:	09 c1                	or     %eax,%ecx
   15c60:	8b 45 08             	mov    0x8(%ebp),%eax
   15c63:	8b 40 04             	mov    0x4(%eax),%eax
   15c66:	01 d0                	add    %edx,%eax
   15c68:	89 ca                	mov    %ecx,%edx
   15c6a:	88 10                	mov    %dl,(%eax)
   15c6c:	eb 42                	jmp    15cb0 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   15c6e:	8b 45 08             	mov    0x8(%ebp),%eax
   15c71:	8b 48 04             	mov    0x4(%eax),%ecx
   15c74:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c77:	8d 50 07             	lea    0x7(%eax),%edx
   15c7a:	85 c0                	test   %eax,%eax
   15c7c:	0f 48 c2             	cmovs  %edx,%eax
   15c7f:	c1 f8 03             	sar    $0x3,%eax
   15c82:	89 c2                	mov    %eax,%edx
   15c84:	89 d0                	mov    %edx,%eax
   15c86:	01 c8                	add    %ecx,%eax
   15c88:	0f b6 00             	movzbl (%eax),%eax
   15c8b:	89 c6                	mov    %eax,%esi
   15c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c90:	83 e0 07             	and    $0x7,%eax
   15c93:	bb 01 00 00 00       	mov    $0x1,%ebx
   15c98:	89 c1                	mov    %eax,%ecx
   15c9a:	d3 e3                	shl    %cl,%ebx
   15c9c:	89 d8                	mov    %ebx,%eax
   15c9e:	f7 d0                	not    %eax
   15ca0:	89 f1                	mov    %esi,%ecx
   15ca2:	21 c1                	and    %eax,%ecx
   15ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   15ca7:	8b 40 04             	mov    0x4(%eax),%eax
   15caa:	01 d0                	add    %edx,%eax
   15cac:	89 ca                	mov    %ecx,%edx
   15cae:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   15cb0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15cb4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   15cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cbb:	3b 45 10             	cmp    0x10(%ebp),%eax
   15cbe:	7d 0e                	jge    15cce <bitmap_set_bit+0x100>
   15cc0:	8b 45 08             	mov    0x8(%ebp),%eax
   15cc3:	8b 00                	mov    (%eax),%eax
   15cc5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15cc8:	0f 8c 58 ff ff ff    	jl     15c26 <bitmap_set_bit+0x58>
        }
    }
}
   15cce:	90                   	nop
   15ccf:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15cd2:	5b                   	pop    %ebx
   15cd3:	5e                   	pop    %esi
   15cd4:	5d                   	pop    %ebp
   15cd5:	c3                   	ret    

00015cd6 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   15cd6:	55                   	push   %ebp
   15cd7:	89 e5                	mov    %esp,%ebp
   15cd9:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   15cdc:	83 ec 08             	sub    $0x8,%esp
   15cdf:	ff 75 0c             	push   0xc(%ebp)
   15ce2:	ff 75 08             	push   0x8(%ebp)
   15ce5:	e8 6c fe ff ff       	call   15b56 <bitmap_get_bit>
   15cea:	83 c4 10             	add    $0x10,%esp
   15ced:	84 c0                	test   %al,%al
   15cef:	0f 95 c0             	setne  %al
   15cf2:	0f b6 c0             	movzbl %al,%eax
}
   15cf5:	c9                   	leave  
   15cf6:	c3                   	ret    

00015cf7 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   15cf7:	55                   	push   %ebp
   15cf8:	89 e5                	mov    %esp,%ebp
   15cfa:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15cfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15d01:	75 19                	jne    15d1c <bitmap_alloc_nbits+0x25>
   15d03:	68 78 7b 01 00       	push   $0x17b78
   15d08:	68 38 7c 01 00       	push   $0x17c38
   15d0d:	6a 68                	push   $0x68
   15d0f:	68 90 7b 01 00       	push   $0x17b90
   15d14:	e8 5d fd ff ff       	call   15a76 <pannic>
   15d19:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   15d1c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15d20:	79 19                	jns    15d3b <bitmap_alloc_nbits+0x44>
   15d22:	68 00 7c 01 00       	push   $0x17c00
   15d27:	68 38 7c 01 00       	push   $0x17c38
   15d2c:	6a 69                	push   $0x69
   15d2e:	68 90 7b 01 00       	push   $0x17b90
   15d33:	e8 3e fd ff ff       	call   15a76 <pannic>
   15d38:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   15d3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   15d42:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   15d49:	e9 8f 00 00 00       	jmp    15ddd <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   15d4e:	83 ec 08             	sub    $0x8,%esp
   15d51:	ff 75 f4             	push   -0xc(%ebp)
   15d54:	ff 75 08             	push   0x8(%ebp)
   15d57:	e8 fa fd ff ff       	call   15b56 <bitmap_get_bit>
   15d5c:	83 c4 10             	add    $0x10,%esp
   15d5f:	0f b6 c0             	movzbl %al,%eax
   15d62:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d65:	74 06                	je     15d6d <bitmap_alloc_nbits+0x76>
            search_index++;
   15d67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   15d6b:	eb 70                	jmp    15ddd <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   15d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d70:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   15d73:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   15d7a:	eb 2d                	jmp    15da9 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   15d7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d7f:	8d 50 01             	lea    0x1(%eax),%edx
   15d82:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15d85:	83 ec 08             	sub    $0x8,%esp
   15d88:	50                   	push   %eax
   15d89:	ff 75 08             	push   0x8(%ebp)
   15d8c:	e8 c5 fd ff ff       	call   15b56 <bitmap_get_bit>
   15d91:	83 c4 10             	add    $0x10,%esp
   15d94:	0f b6 c0             	movzbl %al,%eax
   15d97:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d9a:	74 09                	je     15da5 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   15d9c:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   15da3:	eb 16                	jmp    15dbb <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   15da5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15dac:	3b 45 10             	cmp    0x10(%ebp),%eax
   15daf:	7d 0a                	jge    15dbb <bitmap_alloc_nbits+0xc4>
   15db1:	8b 45 08             	mov    0x8(%ebp),%eax
   15db4:	8b 00                	mov    (%eax),%eax
   15db6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   15db9:	7c c1                	jl     15d7c <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   15dbb:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   15dbf:	74 1c                	je     15ddd <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   15dc1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15dc4:	f7 d0                	not    %eax
   15dc6:	50                   	push   %eax
   15dc7:	ff 75 10             	push   0x10(%ebp)
   15dca:	ff 75 f0             	push   -0x10(%ebp)
   15dcd:	ff 75 08             	push   0x8(%ebp)
   15dd0:	e8 f9 fd ff ff       	call   15bce <bitmap_set_bit>
   15dd5:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   15dd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15ddb:	eb 13                	jmp    15df0 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   15ddd:	8b 45 08             	mov    0x8(%ebp),%eax
   15de0:	8b 00                	mov    (%eax),%eax
   15de2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   15de5:	0f 8c 63 ff ff ff    	jl     15d4e <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   15deb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   15df0:	c9                   	leave  
   15df1:	c3                   	ret    

00015df2 <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   15df2:	55                   	push   %ebp
   15df3:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   15df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15df9:	74 3b                	je     15e36 <kernel_strcpy+0x44>
   15dfb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15dff:	74 35                	je     15e36 <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   15e01:	eb 17                	jmp    15e1a <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   15e03:	8b 55 0c             	mov    0xc(%ebp),%edx
   15e06:	8d 42 01             	lea    0x1(%edx),%eax
   15e09:	89 45 0c             	mov    %eax,0xc(%ebp)
   15e0c:	8b 45 08             	mov    0x8(%ebp),%eax
   15e0f:	8d 48 01             	lea    0x1(%eax),%ecx
   15e12:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15e15:	0f b6 12             	movzbl (%edx),%edx
   15e18:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   15e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   15e1d:	0f b6 00             	movzbl (%eax),%eax
   15e20:	84 c0                	test   %al,%al
   15e22:	74 0a                	je     15e2e <kernel_strcpy+0x3c>
   15e24:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e27:	0f b6 00             	movzbl (%eax),%eax
   15e2a:	84 c0                	test   %al,%al
   15e2c:	75 d5                	jne    15e03 <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   15e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15e31:	c6 00 00             	movb   $0x0,(%eax)
   15e34:	eb 01                	jmp    15e37 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   15e36:	90                   	nop
}
   15e37:	5d                   	pop    %ebp
   15e38:	c3                   	ret    

00015e39 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   15e39:	55                   	push   %ebp
   15e3a:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   15e3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15e40:	74 45                	je     15e87 <kernel_strncpy+0x4e>
   15e42:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15e46:	74 3f                	je     15e87 <kernel_strncpy+0x4e>
   15e48:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15e4c:	74 39                	je     15e87 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   15e4e:	eb 17                	jmp    15e67 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   15e50:	8b 55 0c             	mov    0xc(%ebp),%edx
   15e53:	8d 42 01             	lea    0x1(%edx),%eax
   15e56:	89 45 0c             	mov    %eax,0xc(%ebp)
   15e59:	8b 45 08             	mov    0x8(%ebp),%eax
   15e5c:	8d 48 01             	lea    0x1(%eax),%ecx
   15e5f:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15e62:	0f b6 12             	movzbl (%edx),%edx
   15e65:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   15e67:	8b 45 10             	mov    0x10(%ebp),%eax
   15e6a:	8d 50 ff             	lea    -0x1(%eax),%edx
   15e6d:	89 55 10             	mov    %edx,0x10(%ebp)
   15e70:	83 f8 01             	cmp    $0x1,%eax
   15e73:	7e 0a                	jle    15e7f <kernel_strncpy+0x46>
   15e75:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e78:	0f b6 00             	movzbl (%eax),%eax
   15e7b:	84 c0                	test   %al,%al
   15e7d:	75 d1                	jne    15e50 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   15e7f:	8b 45 08             	mov    0x8(%ebp),%eax
   15e82:	c6 00 00             	movb   $0x0,(%eax)
   15e85:	eb 01                	jmp    15e88 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   15e87:	90                   	nop
}
   15e88:	5d                   	pop    %ebp
   15e89:	c3                   	ret    

00015e8a <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   15e8a:	55                   	push   %ebp
   15e8b:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   15e8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15e91:	74 06                	je     15e99 <kernel_strncmp+0xf>
   15e93:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15e97:	75 0f                	jne    15ea8 <kernel_strncmp+0x1e>
   15e99:	b8 00 00 00 00       	mov    $0x0,%eax
   15e9e:	eb 69                	jmp    15f09 <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   15ea0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   15ea4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   15ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   15eab:	0f b6 00             	movzbl (%eax),%eax
   15eae:	84 c0                	test   %al,%al
   15eb0:	74 24                	je     15ed6 <kernel_strncmp+0x4c>
   15eb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   15eb5:	0f b6 00             	movzbl (%eax),%eax
   15eb8:	84 c0                	test   %al,%al
   15eba:	74 1a                	je     15ed6 <kernel_strncmp+0x4c>
   15ebc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   15ec0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15ec4:	74 10                	je     15ed6 <kernel_strncmp+0x4c>
   15ec6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ec9:	0f b6 10             	movzbl (%eax),%edx
   15ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ecf:	0f b6 00             	movzbl (%eax),%eax
   15ed2:	38 c2                	cmp    %al,%dl
   15ed4:	74 ca                	je     15ea0 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   15ed6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ed9:	0f b6 10             	movzbl (%eax),%edx
   15edc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15edf:	0f b6 00             	movzbl (%eax),%eax
   15ee2:	38 c2                	cmp    %al,%dl
   15ee4:	7e 07                	jle    15eed <kernel_strncmp+0x63>
    return 1;
   15ee6:	b8 01 00 00 00       	mov    $0x1,%eax
   15eeb:	eb 1c                	jmp    15f09 <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   15eed:	8b 45 08             	mov    0x8(%ebp),%eax
   15ef0:	0f b6 10             	movzbl (%eax),%edx
   15ef3:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ef6:	0f b6 00             	movzbl (%eax),%eax
   15ef9:	38 c2                	cmp    %al,%dl
   15efb:	7d 07                	jge    15f04 <kernel_strncmp+0x7a>
    return -1;
   15efd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15f02:	eb 05                	jmp    15f09 <kernel_strncmp+0x7f>
  } else {
    return 0;
   15f04:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   15f09:	5d                   	pop    %ebp
   15f0a:	c3                   	ret    

00015f0b <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   15f0b:	55                   	push   %ebp
   15f0c:	89 e5                	mov    %esp,%ebp
   15f0e:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   15f11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15f15:	75 07                	jne    15f1e <kernel_strlen+0x13>
   15f17:	b8 00 00 00 00       	mov    $0x0,%eax
   15f1c:	eb 20                	jmp    15f3e <kernel_strlen+0x33>

  int len = 0;
   15f1e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   15f25:	eb 04                	jmp    15f2b <kernel_strlen+0x20>
   15f27:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   15f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   15f2e:	8d 50 01             	lea    0x1(%eax),%edx
   15f31:	89 55 08             	mov    %edx,0x8(%ebp)
   15f34:	0f b6 00             	movzbl (%eax),%eax
   15f37:	84 c0                	test   %al,%al
   15f39:	75 ec                	jne    15f27 <kernel_strlen+0x1c>

  return len;
   15f3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15f3e:	c9                   	leave  
   15f3f:	c3                   	ret    

00015f40 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   15f40:	55                   	push   %ebp
   15f41:	89 e5                	mov    %esp,%ebp
   15f43:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   15f46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15f4a:	74 40                	je     15f8c <kernel_memcpy+0x4c>
   15f4c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15f50:	74 3a                	je     15f8c <kernel_memcpy+0x4c>
   15f52:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15f56:	74 34                	je     15f8c <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   15f58:	8b 45 08             	mov    0x8(%ebp),%eax
   15f5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   15f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f61:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   15f64:	eb 17                	jmp    15f7d <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   15f66:	8b 55 f8             	mov    -0x8(%ebp),%edx
   15f69:	8d 42 01             	lea    0x1(%edx),%eax
   15f6c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   15f6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15f72:	8d 48 01             	lea    0x1(%eax),%ecx
   15f75:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   15f78:	0f b6 12             	movzbl (%edx),%edx
   15f7b:	88 10                	mov    %dl,(%eax)
  while (size--) {
   15f7d:	8b 45 10             	mov    0x10(%ebp),%eax
   15f80:	8d 50 ff             	lea    -0x1(%eax),%edx
   15f83:	89 55 10             	mov    %edx,0x10(%ebp)
   15f86:	85 c0                	test   %eax,%eax
   15f88:	75 dc                	jne    15f66 <kernel_memcpy+0x26>
   15f8a:	eb 01                	jmp    15f8d <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   15f8c:	90                   	nop
  }
}
   15f8d:	c9                   	leave  
   15f8e:	c3                   	ret    

00015f8f <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   15f8f:	55                   	push   %ebp
   15f90:	89 e5                	mov    %esp,%ebp
   15f92:	83 ec 14             	sub    $0x14,%esp
   15f95:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f98:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   15f9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15f9f:	74 2c                	je     15fcd <kernel_memset+0x3e>
   15fa1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15fa5:	74 26                	je     15fcd <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   15fa7:	8b 45 08             	mov    0x8(%ebp),%eax
   15faa:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   15fad:	eb 0f                	jmp    15fbe <kernel_memset+0x2f>
    *(d++) = v;
   15faf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15fb2:	8d 50 01             	lea    0x1(%eax),%edx
   15fb5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15fb8:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   15fbc:	88 10                	mov    %dl,(%eax)
  while (size--) {
   15fbe:	8b 45 10             	mov    0x10(%ebp),%eax
   15fc1:	8d 50 ff             	lea    -0x1(%eax),%edx
   15fc4:	89 55 10             	mov    %edx,0x10(%ebp)
   15fc7:	85 c0                	test   %eax,%eax
   15fc9:	75 e4                	jne    15faf <kernel_memset+0x20>
   15fcb:	eb 01                	jmp    15fce <kernel_memset+0x3f>
  if (!dest || !size) return;
   15fcd:	90                   	nop
  }
}
   15fce:	c9                   	leave  
   15fcf:	c3                   	ret    

00015fd0 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   15fd0:	55                   	push   %ebp
   15fd1:	89 e5                	mov    %esp,%ebp
   15fd3:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   15fd6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15fda:	74 0c                	je     15fe8 <kernel_memcmp+0x18>
   15fdc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fe0:	74 06                	je     15fe8 <kernel_memcmp+0x18>
   15fe2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15fe6:	75 07                	jne    15fef <kernel_memcmp+0x1f>
   15fe8:	b8 00 00 00 00       	mov    $0x0,%eax
   15fed:	eb 63                	jmp    16052 <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   15fef:	8b 45 08             	mov    0x8(%ebp),%eax
   15ff2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   15ff5:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ff8:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   15ffb:	eb 08                	jmp    16005 <kernel_memcmp+0x35>
    d1++;
   15ffd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   16001:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   16005:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   16009:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1600d:	74 10                	je     1601f <kernel_memcmp+0x4f>
   1600f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16012:	0f b6 10             	movzbl (%eax),%edx
   16015:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16018:	0f b6 00             	movzbl (%eax),%eax
   1601b:	38 c2                	cmp    %al,%dl
   1601d:	74 de                	je     15ffd <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   1601f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16022:	0f b6 10             	movzbl (%eax),%edx
   16025:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16028:	0f b6 00             	movzbl (%eax),%eax
   1602b:	38 c2                	cmp    %al,%dl
   1602d:	76 07                	jbe    16036 <kernel_memcmp+0x66>
    return 1;
   1602f:	b8 01 00 00 00       	mov    $0x1,%eax
   16034:	eb 1c                	jmp    16052 <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   16036:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16039:	0f b6 10             	movzbl (%eax),%edx
   1603c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1603f:	0f b6 00             	movzbl (%eax),%eax
   16042:	38 c2                	cmp    %al,%dl
   16044:	73 07                	jae    1604d <kernel_memcmp+0x7d>
    return -1;
   16046:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1604b:	eb 05                	jmp    16052 <kernel_memcmp+0x82>
  else
    return 0;
   1604d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16052:	c9                   	leave  
   16053:	c3                   	ret    

00016054 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   16054:	55                   	push   %ebp
   16055:	89 e5                	mov    %esp,%ebp
   16057:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   1605a:	8d 45 10             	lea    0x10(%ebp),%eax
   1605d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   16060:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16063:	83 ec 04             	sub    $0x4,%esp
   16066:	50                   	push   %eax
   16067:	ff 75 0c             	push   0xc(%ebp)
   1606a:	ff 75 08             	push   0x8(%ebp)
   1606d:	e8 06 00 00 00       	call   16078 <kernel_vsprintf>
   16072:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   16075:	90                   	nop
   16076:	c9                   	leave  
   16077:	c3                   	ret    

00016078 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   16078:	55                   	push   %ebp
   16079:	89 e5                	mov    %esp,%ebp
   1607b:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   1607e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   16085:	8b 45 08             	mov    0x8(%ebp),%eax
   16088:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   1608b:	e9 68 01 00 00       	jmp    161f8 <kernel_vsprintf+0x180>
    switch (state) {
   16090:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16094:	74 0b                	je     160a1 <kernel_vsprintf+0x29>
   16096:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1609a:	74 2b                	je     160c7 <kernel_vsprintf+0x4f>
   1609c:	e9 56 01 00 00       	jmp    161f7 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   160a1:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   160a5:	75 0c                	jne    160b3 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   160a7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   160ae:	e9 45 01 00 00       	jmp    161f8 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   160b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   160b6:	8d 50 01             	lea    0x1(%eax),%edx
   160b9:	89 55 f0             	mov    %edx,-0x10(%ebp)
   160bc:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   160c0:	88 10                	mov    %dl,(%eax)
        break;
   160c2:	e9 31 01 00 00       	jmp    161f8 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   160c7:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   160cb:	75 47                	jne    16114 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   160cd:	8b 45 10             	mov    0x10(%ebp),%eax
   160d0:	8d 50 04             	lea    0x4(%eax),%edx
   160d3:	89 55 10             	mov    %edx,0x10(%ebp)
   160d6:	8b 00                	mov    (%eax),%eax
   160d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   160db:	ff 75 ec             	push   -0x14(%ebp)
   160de:	e8 28 fe ff ff       	call   15f0b <kernel_strlen>
   160e3:	83 c4 04             	add    $0x4,%esp
   160e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   160e9:	eb 17                	jmp    16102 <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   160eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
   160ee:	8d 42 01             	lea    0x1(%edx),%eax
   160f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
   160f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   160f7:	8d 48 01             	lea    0x1(%eax),%ecx
   160fa:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   160fd:	0f b6 12             	movzbl (%edx),%edx
   16100:	88 10                	mov    %dl,(%eax)
          while (len--) {
   16102:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16105:	8d 50 ff             	lea    -0x1(%eax),%edx
   16108:	89 55 e8             	mov    %edx,-0x18(%ebp)
   1610b:	85 c0                	test   %eax,%eax
   1610d:	75 dc                	jne    160eb <kernel_vsprintf+0x73>
   1610f:	e9 da 00 00 00       	jmp    161ee <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   16114:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   16118:	75 37                	jne    16151 <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   1611a:	8b 45 10             	mov    0x10(%ebp),%eax
   1611d:	8d 50 04             	lea    0x4(%eax),%edx
   16120:	89 55 10             	mov    %edx,0x10(%ebp)
   16123:	8b 00                	mov    (%eax),%eax
   16125:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   16128:	83 ec 04             	sub    $0x4,%esp
   1612b:	6a 0a                	push   $0xa
   1612d:	ff 75 d8             	push   -0x28(%ebp)
   16130:	ff 75 f0             	push   -0x10(%ebp)
   16133:	e8 dd 00 00 00       	call   16215 <kernel_itoa>
   16138:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   1613b:	83 ec 0c             	sub    $0xc,%esp
   1613e:	ff 75 f0             	push   -0x10(%ebp)
   16141:	e8 c5 fd ff ff       	call   15f0b <kernel_strlen>
   16146:	83 c4 10             	add    $0x10,%esp
   16149:	01 45 f0             	add    %eax,-0x10(%ebp)
   1614c:	e9 9d 00 00 00       	jmp    161ee <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   16151:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   16155:	74 06                	je     1615d <kernel_vsprintf+0xe5>
   16157:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   1615b:	75 34                	jne    16191 <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   1615d:	8b 45 10             	mov    0x10(%ebp),%eax
   16160:	8d 50 04             	lea    0x4(%eax),%edx
   16163:	89 55 10             	mov    %edx,0x10(%ebp)
   16166:	8b 00                	mov    (%eax),%eax
   16168:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   1616b:	83 ec 04             	sub    $0x4,%esp
   1616e:	6a 10                	push   $0x10
   16170:	ff 75 dc             	push   -0x24(%ebp)
   16173:	ff 75 f0             	push   -0x10(%ebp)
   16176:	e8 9a 00 00 00       	call   16215 <kernel_itoa>
   1617b:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   1617e:	83 ec 0c             	sub    $0xc,%esp
   16181:	ff 75 f0             	push   -0x10(%ebp)
   16184:	e8 82 fd ff ff       	call   15f0b <kernel_strlen>
   16189:	83 c4 10             	add    $0x10,%esp
   1618c:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   1618f:	eb 5d                	jmp    161ee <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   16191:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   16195:	75 34                	jne    161cb <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   16197:	8b 45 10             	mov    0x10(%ebp),%eax
   1619a:	8d 50 04             	lea    0x4(%eax),%edx
   1619d:	89 55 10             	mov    %edx,0x10(%ebp)
   161a0:	8b 00                	mov    (%eax),%eax
   161a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   161a5:	83 ec 04             	sub    $0x4,%esp
   161a8:	6a 02                	push   $0x2
   161aa:	ff 75 e0             	push   -0x20(%ebp)
   161ad:	ff 75 f0             	push   -0x10(%ebp)
   161b0:	e8 60 00 00 00       	call   16215 <kernel_itoa>
   161b5:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   161b8:	83 ec 0c             	sub    $0xc,%esp
   161bb:	ff 75 f0             	push   -0x10(%ebp)
   161be:	e8 48 fd ff ff       	call   15f0b <kernel_strlen>
   161c3:	83 c4 10             	add    $0x10,%esp
   161c6:	01 45 f0             	add    %eax,-0x10(%ebp)
   161c9:	eb 23                	jmp    161ee <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   161cb:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   161cf:	75 1d                	jne    161ee <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   161d1:	8b 45 10             	mov    0x10(%ebp),%eax
   161d4:	8d 50 04             	lea    0x4(%eax),%edx
   161d7:	89 55 10             	mov    %edx,0x10(%ebp)
   161da:	8b 00                	mov    (%eax),%eax
   161dc:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   161df:	8b 45 f0             	mov    -0x10(%ebp),%eax
   161e2:	8d 50 01             	lea    0x1(%eax),%edx
   161e5:	89 55 f0             	mov    %edx,-0x10(%ebp)
   161e8:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   161ec:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   161ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   161f5:	eb 01                	jmp    161f8 <kernel_vsprintf+0x180>
      default:
        break;
   161f7:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   161f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   161fb:	8d 50 01             	lea    0x1(%eax),%edx
   161fe:	89 55 0c             	mov    %edx,0xc(%ebp)
   16201:	0f b6 00             	movzbl (%eax),%eax
   16204:	88 45 e7             	mov    %al,-0x19(%ebp)
   16207:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   1620b:	0f 85 7f fe ff ff    	jne    16090 <kernel_vsprintf+0x18>
    }
  }
}
   16211:	90                   	nop
   16212:	90                   	nop
   16213:	c9                   	leave  
   16214:	c3                   	ret    

00016215 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   16215:	55                   	push   %ebp
   16216:	89 e5                	mov    %esp,%ebp
   16218:	53                   	push   %ebx
   16219:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   1621f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   16223:	74 1d                	je     16242 <kernel_itoa+0x2d>
   16225:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   16229:	74 17                	je     16242 <kernel_itoa+0x2d>
   1622b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1622f:	74 11                	je     16242 <kernel_itoa+0x2d>
   16231:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   16235:	74 0b                	je     16242 <kernel_itoa+0x2d>
    *buf = '\0';
   16237:	8b 45 08             	mov    0x8(%ebp),%eax
   1623a:	c6 00 00             	movb   $0x0,(%eax)
    return;
   1623d:	e9 f8 00 00 00       	jmp    1633a <kernel_itoa+0x125>
  }

  if (num == 0) {
   16242:	8b 45 0c             	mov    0xc(%ebp),%eax
   16245:	85 c0                	test   %eax,%eax
   16247:	75 17                	jne    16260 <kernel_itoa+0x4b>
    *(buf++) = '0';
   16249:	8b 45 08             	mov    0x8(%ebp),%eax
   1624c:	8d 50 01             	lea    0x1(%eax),%edx
   1624f:	89 55 08             	mov    %edx,0x8(%ebp)
   16252:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   16255:	8b 45 08             	mov    0x8(%ebp),%eax
   16258:	c6 00 00             	movb   $0x0,(%eax)
    return;
   1625b:	e9 da 00 00 00       	jmp    1633a <kernel_itoa+0x125>
  }

  char *p = buf;
   16260:	8b 45 08             	mov    0x8(%ebp),%eax
   16263:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   16266:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   1626d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   16271:	75 41                	jne    162b4 <kernel_itoa+0x9f>
    u_num = num;
   16273:	8b 45 0c             	mov    0xc(%ebp),%eax
   16276:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   16279:	8b 45 0c             	mov    0xc(%ebp),%eax
   1627c:	85 c0                	test   %eax,%eax
   1627e:	79 16                	jns    16296 <kernel_itoa+0x81>
      *(p++) = '-';
   16280:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16283:	8d 50 01             	lea    0x1(%eax),%edx
   16286:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16289:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   1628c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1628f:	f7 d8                	neg    %eax
   16291:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16294:	eb 26                	jmp    162bc <kernel_itoa+0xa7>
    } else if (num == 0) {
   16296:	8b 45 0c             	mov    0xc(%ebp),%eax
   16299:	85 c0                	test   %eax,%eax
   1629b:	75 1f                	jne    162bc <kernel_itoa+0xa7>
      *(p++) = '0';
   1629d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   162a0:	8d 50 01             	lea    0x1(%eax),%edx
   162a3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   162a6:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   162a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   162ac:	c6 00 00             	movb   $0x0,(%eax)
      return;
   162af:	e9 86 00 00 00       	jmp    1633a <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   162b4:	8d 45 0c             	lea    0xc(%ebp),%eax
   162b7:	8b 00                	mov    (%eax),%eax
   162b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   162bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   162c3:	eb 3b                	jmp    16300 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   162c5:	8b 1d 8c 80 01 00    	mov    0x1808c,%ebx
   162cb:	8b 4d 10             	mov    0x10(%ebp),%ecx
   162ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   162d1:	ba 00 00 00 00       	mov    $0x0,%edx
   162d6:	f7 f1                	div    %ecx
   162d8:	89 d0                	mov    %edx,%eax
   162da:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   162dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162e0:	8d 50 01             	lea    0x1(%eax),%edx
   162e3:	89 55 f0             	mov    %edx,-0x10(%ebp)
   162e6:	0f b6 11             	movzbl (%ecx),%edx
   162e9:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   162f0:	8b 5d 10             	mov    0x10(%ebp),%ebx
   162f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   162f6:	ba 00 00 00 00       	mov    $0x0,%edx
   162fb:	f7 f3                	div    %ebx
   162fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   16300:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16304:	75 bf                	jne    162c5 <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   16306:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16309:	83 e8 01             	sub    $0x1,%eax
   1630c:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1630f:	eb 1d                	jmp    1632e <kernel_itoa+0x119>
    *(p++) = arr[i];
   16311:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16314:	8d 50 01             	lea    0x1(%eax),%edx
   16317:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1631a:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   16320:	8b 55 ec             	mov    -0x14(%ebp),%edx
   16323:	01 ca                	add    %ecx,%edx
   16325:	0f b6 12             	movzbl (%edx),%edx
   16328:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   1632a:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   1632e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16332:	79 dd                	jns    16311 <kernel_itoa+0xfc>
  }
  *p = '\0';
   16334:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16337:	c6 00 00             	movb   $0x0,(%eax)
}
   1633a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1633d:	c9                   	leave  
   1633e:	c3                   	ret    

0001633f <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   1633f:	55                   	push   %ebp
   16340:	89 e5                	mov    %esp,%ebp
   16342:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   16345:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   1634c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16350:	74 15                	je     16367 <strings_count+0x28>
    while (*(strs++)) {
   16352:	eb 04                	jmp    16358 <strings_count+0x19>
      count++;
   16354:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   16358:	8b 45 08             	mov    0x8(%ebp),%eax
   1635b:	8d 50 04             	lea    0x4(%eax),%edx
   1635e:	89 55 08             	mov    %edx,0x8(%ebp)
   16361:	8b 00                	mov    (%eax),%eax
   16363:	85 c0                	test   %eax,%eax
   16365:	75 ed                	jne    16354 <strings_count+0x15>
    }
  }

  return count;
   16367:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1636a:	c9                   	leave  
   1636b:	c3                   	ret    

0001636c <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   1636c:	55                   	push   %ebp
   1636d:	89 e5                	mov    %esp,%ebp
   1636f:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   16372:	8b 45 08             	mov    0x8(%ebp),%eax
   16375:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   16378:	eb 04                	jmp    1637e <get_file_name+0x12>
    s++;
   1637a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   1637e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16381:	0f b6 00             	movzbl (%eax),%eax
   16384:	84 c0                	test   %al,%al
   16386:	75 f2                	jne    1637a <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   16388:	eb 04                	jmp    1638e <get_file_name+0x22>
    s--;
   1638a:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   1638e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16391:	0f b6 00             	movzbl (%eax),%eax
   16394:	3c 2f                	cmp    $0x2f,%al
   16396:	74 12                	je     163aa <get_file_name+0x3e>
   16398:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1639b:	0f b6 00             	movzbl (%eax),%eax
   1639e:	3c 5c                	cmp    $0x5c,%al
   163a0:	74 08                	je     163aa <get_file_name+0x3e>
   163a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   163a5:	3b 45 08             	cmp    0x8(%ebp),%eax
   163a8:	73 e0                	jae    1638a <get_file_name+0x1e>
  }

  return s + 1;
   163aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   163ad:	83 c0 01             	add    $0x1,%eax
   163b0:	c9                   	leave  
   163b1:	c3                   	ret    

000163b2 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   163b2:	55                   	push   %ebp
   163b3:	89 e5                	mov    %esp,%ebp
   163b5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   163b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   163bc:	75 19                	jne    163d7 <list_is_empty+0x25>
   163be:	68 5c 7c 01 00       	push   $0x17c5c
   163c3:	68 40 7d 01 00       	push   $0x17d40
   163c8:	6a 38                	push   $0x38
   163ca:	68 70 7c 01 00       	push   $0x17c70
   163cf:	e8 a2 f6 ff ff       	call   15a76 <pannic>
   163d4:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   163d7:	8b 45 08             	mov    0x8(%ebp),%eax
   163da:	8b 40 08             	mov    0x8(%eax),%eax
   163dd:	85 c0                	test   %eax,%eax
   163df:	0f 94 c0             	sete   %al
   163e2:	0f b6 c0             	movzbl %al,%eax
}
   163e5:	c9                   	leave  
   163e6:	c3                   	ret    

000163e7 <list_get_size>:
static inline int list_get_size(list_t *list) {
   163e7:	55                   	push   %ebp
   163e8:	89 e5                	mov    %esp,%ebp
   163ea:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   163ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   163f1:	75 19                	jne    1640c <list_get_size+0x25>
   163f3:	68 5c 7c 01 00       	push   $0x17c5c
   163f8:	68 78 7d 01 00       	push   $0x17d78
   163fd:	6a 3e                	push   $0x3e
   163ff:	68 70 7c 01 00       	push   $0x17c70
   16404:	e8 6d f6 ff ff       	call   15a76 <pannic>
   16409:	83 c4 10             	add    $0x10,%esp
    return list->size;
   1640c:	8b 45 08             	mov    0x8(%ebp),%eax
   1640f:	8b 40 08             	mov    0x8(%eax),%eax
}
   16412:	c9                   	leave  
   16413:	c3                   	ret    

00016414 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   16414:	55                   	push   %ebp
   16415:	89 e5                	mov    %esp,%ebp
   16417:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1641a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1641e:	74 06                	je     16426 <list_insert_first+0x12>
   16420:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16424:	75 19                	jne    1643f <list_insert_first+0x2b>
   16426:	68 b0 7c 01 00       	push   $0x17cb0
   1642b:	68 2c 7d 01 00       	push   $0x17d2c
   16430:	6a 0f                	push   $0xf
   16432:	68 e0 7c 01 00       	push   $0x17ce0
   16437:	e8 3a f6 ff ff       	call   15a76 <pannic>
   1643c:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   1643f:	8b 45 08             	mov    0x8(%ebp),%eax
   16442:	8b 10                	mov    (%eax),%edx
   16444:	8b 45 0c             	mov    0xc(%ebp),%eax
   16447:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1644a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1644d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   16453:	83 ec 0c             	sub    $0xc,%esp
   16456:	ff 75 08             	push   0x8(%ebp)
   16459:	e8 54 ff ff ff       	call   163b2 <list_is_empty>
   1645e:	83 c4 10             	add    $0x10,%esp
   16461:	85 c0                	test   %eax,%eax
   16463:	74 16                	je     1647b <list_insert_first+0x67>
        list->first = list->last = node;
   16465:	8b 45 08             	mov    0x8(%ebp),%eax
   16468:	8b 55 0c             	mov    0xc(%ebp),%edx
   1646b:	89 50 04             	mov    %edx,0x4(%eax)
   1646e:	8b 45 08             	mov    0x8(%ebp),%eax
   16471:	8b 50 04             	mov    0x4(%eax),%edx
   16474:	8b 45 08             	mov    0x8(%ebp),%eax
   16477:	89 10                	mov    %edx,(%eax)
   16479:	eb 12                	jmp    1648d <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1647b:	8b 45 08             	mov    0x8(%ebp),%eax
   1647e:	8b 00                	mov    (%eax),%eax
   16480:	8b 55 0c             	mov    0xc(%ebp),%edx
   16483:	89 10                	mov    %edx,(%eax)
        list->first = node;
   16485:	8b 45 08             	mov    0x8(%ebp),%eax
   16488:	8b 55 0c             	mov    0xc(%ebp),%edx
   1648b:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   1648d:	8b 45 08             	mov    0x8(%ebp),%eax
   16490:	8b 40 08             	mov    0x8(%eax),%eax
   16493:	8d 50 01             	lea    0x1(%eax),%edx
   16496:	8b 45 08             	mov    0x8(%ebp),%eax
   16499:	89 50 08             	mov    %edx,0x8(%eax)
}
   1649c:	90                   	nop
   1649d:	c9                   	leave  
   1649e:	c3                   	ret    

0001649f <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1649f:	55                   	push   %ebp
   164a0:	89 e5                	mov    %esp,%ebp
   164a2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   164a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   164a9:	74 06                	je     164b1 <list_insert_last+0x12>
   164ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   164af:	75 19                	jne    164ca <list_insert_last+0x2b>
   164b1:	68 b0 7c 01 00       	push   $0x17cb0
   164b6:	68 50 7d 01 00       	push   $0x17d50
   164bb:	6a 21                	push   $0x21
   164bd:	68 e0 7c 01 00       	push   $0x17ce0
   164c2:	e8 af f5 ff ff       	call   15a76 <pannic>
   164c7:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   164ca:	8b 45 08             	mov    0x8(%ebp),%eax
   164cd:	8b 50 04             	mov    0x4(%eax),%edx
   164d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   164d3:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   164d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   164d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   164df:	83 ec 0c             	sub    $0xc,%esp
   164e2:	ff 75 08             	push   0x8(%ebp)
   164e5:	e8 c8 fe ff ff       	call   163b2 <list_is_empty>
   164ea:	83 c4 10             	add    $0x10,%esp
   164ed:	85 c0                	test   %eax,%eax
   164ef:	74 16                	je     16507 <list_insert_last+0x68>
        list->first = list->last = node;
   164f1:	8b 45 08             	mov    0x8(%ebp),%eax
   164f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   164f7:	89 50 04             	mov    %edx,0x4(%eax)
   164fa:	8b 45 08             	mov    0x8(%ebp),%eax
   164fd:	8b 50 04             	mov    0x4(%eax),%edx
   16500:	8b 45 08             	mov    0x8(%ebp),%eax
   16503:	89 10                	mov    %edx,(%eax)
   16505:	eb 15                	jmp    1651c <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   16507:	8b 45 08             	mov    0x8(%ebp),%eax
   1650a:	8b 40 04             	mov    0x4(%eax),%eax
   1650d:	8b 55 0c             	mov    0xc(%ebp),%edx
   16510:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   16513:	8b 45 08             	mov    0x8(%ebp),%eax
   16516:	8b 55 0c             	mov    0xc(%ebp),%edx
   16519:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   1651c:	8b 45 08             	mov    0x8(%ebp),%eax
   1651f:	8b 40 08             	mov    0x8(%eax),%eax
   16522:	8d 50 01             	lea    0x1(%eax),%edx
   16525:	8b 45 08             	mov    0x8(%ebp),%eax
   16528:	89 50 08             	mov    %edx,0x8(%eax)

}
   1652b:	90                   	nop
   1652c:	c9                   	leave  
   1652d:	c3                   	ret    

0001652e <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   1652e:	55                   	push   %ebp
   1652f:	89 e5                	mov    %esp,%ebp
   16531:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   16534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16538:	75 19                	jne    16553 <list_remove_first+0x25>
   1653a:	68 16 7d 01 00       	push   $0x17d16
   1653f:	68 64 7d 01 00       	push   $0x17d64
   16544:	6a 34                	push   $0x34
   16546:	68 e0 7c 01 00       	push   $0x17ce0
   1654b:	e8 26 f5 ff ff       	call   15a76 <pannic>
   16550:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   16553:	83 ec 0c             	sub    $0xc,%esp
   16556:	ff 75 08             	push   0x8(%ebp)
   16559:	e8 54 fe ff ff       	call   163b2 <list_is_empty>
   1655e:	83 c4 10             	add    $0x10,%esp
   16561:	85 c0                	test   %eax,%eax
   16563:	74 07                	je     1656c <list_remove_first+0x3e>
        return (list_node_t*)0;
   16565:	b8 00 00 00 00       	mov    $0x0,%eax
   1656a:	eb 71                	jmp    165dd <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   1656c:	8b 45 08             	mov    0x8(%ebp),%eax
   1656f:	8b 00                	mov    (%eax),%eax
   16571:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   16574:	83 ec 0c             	sub    $0xc,%esp
   16577:	ff 75 08             	push   0x8(%ebp)
   1657a:	e8 68 fe ff ff       	call   163e7 <list_get_size>
   1657f:	83 c4 10             	add    $0x10,%esp
   16582:	83 f8 01             	cmp    $0x1,%eax
   16585:	75 17                	jne    1659e <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   16587:	8b 45 08             	mov    0x8(%ebp),%eax
   1658a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16591:	8b 45 08             	mov    0x8(%ebp),%eax
   16594:	8b 50 04             	mov    0x4(%eax),%edx
   16597:	8b 45 08             	mov    0x8(%ebp),%eax
   1659a:	89 10                	mov    %edx,(%eax)
   1659c:	eb 18                	jmp    165b6 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   1659e:	8b 45 08             	mov    0x8(%ebp),%eax
   165a1:	8b 00                	mov    (%eax),%eax
   165a3:	8b 50 04             	mov    0x4(%eax),%edx
   165a6:	8b 45 08             	mov    0x8(%ebp),%eax
   165a9:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   165ab:	8b 45 08             	mov    0x8(%ebp),%eax
   165ae:	8b 00                	mov    (%eax),%eax
   165b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   165b6:	8b 45 08             	mov    0x8(%ebp),%eax
   165b9:	8b 40 08             	mov    0x8(%eax),%eax
   165bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   165bf:	8b 45 08             	mov    0x8(%ebp),%eax
   165c2:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   165c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165c8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   165cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165d2:	8b 50 04             	mov    0x4(%eax),%edx
   165d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165d8:	89 10                	mov    %edx,(%eax)
    return ret;
   165da:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   165dd:	c9                   	leave  
   165de:	c3                   	ret    

000165df <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   165df:	55                   	push   %ebp
   165e0:	89 e5                	mov    %esp,%ebp
   165e2:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   165e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   165e9:	75 19                	jne    16604 <list_remove_last+0x25>
   165eb:	68 16 7d 01 00       	push   $0x17d16
   165f0:	68 88 7d 01 00       	push   $0x17d88
   165f5:	6a 4a                	push   $0x4a
   165f7:	68 e0 7c 01 00       	push   $0x17ce0
   165fc:	e8 75 f4 ff ff       	call   15a76 <pannic>
   16601:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   16604:	83 ec 0c             	sub    $0xc,%esp
   16607:	ff 75 08             	push   0x8(%ebp)
   1660a:	e8 a3 fd ff ff       	call   163b2 <list_is_empty>
   1660f:	83 c4 10             	add    $0x10,%esp
   16612:	85 c0                	test   %eax,%eax
   16614:	74 07                	je     1661d <list_remove_last+0x3e>
        return (list_node_t*)0;
   16616:	b8 00 00 00 00       	mov    $0x0,%eax
   1661b:	eb 75                	jmp    16692 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   1661d:	8b 45 08             	mov    0x8(%ebp),%eax
   16620:	8b 40 04             	mov    0x4(%eax),%eax
   16623:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   16626:	83 ec 0c             	sub    $0xc,%esp
   16629:	ff 75 08             	push   0x8(%ebp)
   1662c:	e8 b6 fd ff ff       	call   163e7 <list_get_size>
   16631:	83 c4 10             	add    $0x10,%esp
   16634:	83 f8 01             	cmp    $0x1,%eax
   16637:	75 17                	jne    16650 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   16639:	8b 45 08             	mov    0x8(%ebp),%eax
   1663c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16643:	8b 45 08             	mov    0x8(%ebp),%eax
   16646:	8b 50 04             	mov    0x4(%eax),%edx
   16649:	8b 45 08             	mov    0x8(%ebp),%eax
   1664c:	89 10                	mov    %edx,(%eax)
   1664e:	eb 1b                	jmp    1666b <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   16650:	8b 45 08             	mov    0x8(%ebp),%eax
   16653:	8b 40 04             	mov    0x4(%eax),%eax
   16656:	8b 10                	mov    (%eax),%edx
   16658:	8b 45 08             	mov    0x8(%ebp),%eax
   1665b:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   1665e:	8b 45 08             	mov    0x8(%ebp),%eax
   16661:	8b 40 04             	mov    0x4(%eax),%eax
   16664:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   1666b:	8b 45 08             	mov    0x8(%ebp),%eax
   1666e:	8b 40 08             	mov    0x8(%eax),%eax
   16671:	8d 50 ff             	lea    -0x1(%eax),%edx
   16674:	8b 45 08             	mov    0x8(%ebp),%eax
   16677:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1667a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1667d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16684:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16687:	8b 50 04             	mov    0x4(%eax),%edx
   1668a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1668d:	89 10                	mov    %edx,(%eax)
    return ret;
   1668f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16692:	c9                   	leave  
   16693:	c3                   	ret    

00016694 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   16694:	55                   	push   %ebp
   16695:	89 e5                	mov    %esp,%ebp
   16697:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1669a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1669e:	74 06                	je     166a6 <list_remove+0x12>
   166a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   166a4:	75 19                	jne    166bf <list_remove+0x2b>
   166a6:	68 b0 7c 01 00       	push   $0x17cb0
   166ab:	68 9c 7d 01 00       	push   $0x17d9c
   166b0:	6a 60                	push   $0x60
   166b2:	68 e0 7c 01 00       	push   $0x17ce0
   166b7:	e8 ba f3 ff ff       	call   15a76 <pannic>
   166bc:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   166bf:	83 ec 0c             	sub    $0xc,%esp
   166c2:	ff 75 08             	push   0x8(%ebp)
   166c5:	e8 e8 fc ff ff       	call   163b2 <list_is_empty>
   166ca:	83 c4 10             	add    $0x10,%esp
   166cd:	85 c0                	test   %eax,%eax
   166cf:	74 0a                	je     166db <list_remove+0x47>
        return (list_node_t*)0;
   166d1:	b8 00 00 00 00       	mov    $0x0,%eax
   166d6:	e9 80 00 00 00       	jmp    1675b <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   166db:	8b 45 08             	mov    0x8(%ebp),%eax
   166de:	8b 00                	mov    (%eax),%eax
   166e0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   166e3:	75 0b                	jne    166f0 <list_remove+0x5c>
   166e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   166e8:	8b 50 04             	mov    0x4(%eax),%edx
   166eb:	8b 45 08             	mov    0x8(%ebp),%eax
   166ee:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   166f0:	8b 45 08             	mov    0x8(%ebp),%eax
   166f3:	8b 40 04             	mov    0x4(%eax),%eax
   166f6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   166f9:	75 0b                	jne    16706 <list_remove+0x72>
   166fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   166fe:	8b 10                	mov    (%eax),%edx
   16700:	8b 45 08             	mov    0x8(%ebp),%eax
   16703:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   16706:	8b 45 0c             	mov    0xc(%ebp),%eax
   16709:	8b 00                	mov    (%eax),%eax
   1670b:	85 c0                	test   %eax,%eax
   1670d:	74 0e                	je     1671d <list_remove+0x89>
   1670f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16712:	8b 00                	mov    (%eax),%eax
   16714:	8b 55 0c             	mov    0xc(%ebp),%edx
   16717:	8b 52 04             	mov    0x4(%edx),%edx
   1671a:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   1671d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16720:	8b 40 04             	mov    0x4(%eax),%eax
   16723:	85 c0                	test   %eax,%eax
   16725:	74 0d                	je     16734 <list_remove+0xa0>
   16727:	8b 45 0c             	mov    0xc(%ebp),%eax
   1672a:	8b 40 04             	mov    0x4(%eax),%eax
   1672d:	8b 55 0c             	mov    0xc(%ebp),%edx
   16730:	8b 12                	mov    (%edx),%edx
   16732:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   16734:	8b 45 0c             	mov    0xc(%ebp),%eax
   16737:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1673e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16741:	8b 50 04             	mov    0x4(%eax),%edx
   16744:	8b 45 0c             	mov    0xc(%ebp),%eax
   16747:	89 10                	mov    %edx,(%eax)
    list->size--;
   16749:	8b 45 08             	mov    0x8(%ebp),%eax
   1674c:	8b 40 08             	mov    0x8(%eax),%eax
   1674f:	8d 50 ff             	lea    -0x1(%eax),%edx
   16752:	8b 45 08             	mov    0x8(%ebp),%eax
   16755:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   16758:	8b 45 0c             	mov    0xc(%ebp),%eax
   1675b:	c9                   	leave  
   1675c:	c3                   	ret    

0001675d <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1675d:	55                   	push   %ebp
   1675e:	89 e5                	mov    %esp,%ebp
   16760:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   16763:	83 ec 0c             	sub    $0xc,%esp
   16766:	68 b8 a3 06 00       	push   $0x6a3b8
   1676b:	e8 ed eb ff ff       	call   1535d <mutex_init>
   16770:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   16773:	83 ec 04             	sub    $0x4,%esp
   16776:	6a 00                	push   $0x0
   16778:	6a 00                	push   $0x0
   1677a:	6a 01                	push   $0x1
   1677c:	e8 d6 d7 ff ff       	call   13f57 <dev_open>
   16781:	83 c4 10             	add    $0x10,%esp
   16784:	a3 cc a3 06 00       	mov    %eax,0x6a3cc
}
   16789:	90                   	nop
   1678a:	c9                   	leave  
   1678b:	c3                   	ret    

0001678c <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   1678c:	55                   	push   %ebp
   1678d:	89 e5                	mov    %esp,%ebp
   1678f:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   16795:	83 ec 04             	sub    $0x4,%esp
   16798:	68 80 00 00 00       	push   $0x80
   1679d:	6a 00                	push   $0x0
   1679f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   167a5:	50                   	push   %eax
   167a6:	e8 e4 f7 ff ff       	call   15f8f <kernel_memset>
   167ab:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   167ae:	8d 45 0c             	lea    0xc(%ebp),%eax
   167b1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   167b7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   167bd:	83 ec 04             	sub    $0x4,%esp
   167c0:	50                   	push   %eax
   167c1:	ff 75 08             	push   0x8(%ebp)
   167c4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   167ca:	50                   	push   %eax
   167cb:	e8 a8 f8 ff ff       	call   16078 <kernel_vsprintf>
   167d0:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   167d3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   167d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   167dc:	83 ec 0c             	sub    $0xc,%esp
   167df:	68 b8 a3 06 00       	push   $0x6a3b8
   167e4:	e8 c1 eb ff ff       	call   153aa <mutex_lock>
   167e9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   167ec:	83 ec 0c             	sub    $0xc,%esp
   167ef:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   167f5:	50                   	push   %eax
   167f6:	e8 10 f7 ff ff       	call   15f0b <kernel_strlen>
   167fb:	83 c4 10             	add    $0x10,%esp
   167fe:	8b 15 cc a3 06 00    	mov    0x6a3cc,%edx
   16804:	50                   	push   %eax
   16805:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1680b:	50                   	push   %eax
   1680c:	6a 00                	push   $0x0
   1680e:	52                   	push   %edx
   1680f:	e8 d9 d8 ff ff       	call   140ed <dev_write>
   16814:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   16817:	83 ec 0c             	sub    $0xc,%esp
   1681a:	68 b8 a3 06 00       	push   $0x6a3b8
   1681f:	e8 17 ec ff ff       	call   1543b <mutex_unlock>
   16824:	83 c4 10             	add    $0x10,%esp
   16827:	90                   	nop
   16828:	c9                   	leave  
   16829:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < TTY_TABLE_SIZE; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 75                	jmp    80000094 <first_main+0x84>
        int pid = fork();
8000001f:	e8 61 01 00 00       	call   80000185 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 ac 00 00 80       	push   $0x800000ac
80000037:	e8 21 01 00 00       	call   8000015d <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 59                	jmp    8000009a <first_main+0x8a>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 49                	jne    80000090 <first_main+0x80>
            char tty_num[5] = "tty:?";
80000047:	c7 45 eb 74 74 79 3a 	movl   $0x3a797474,-0x15(%ebp)
8000004e:	c6 45 ef 3f          	movb   $0x3f,-0x11(%ebp)
            tty_num[4] = i + '0';
80000052:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000055:	83 c0 30             	add    $0x30,%eax
80000058:	88 45 ef             	mov    %al,-0x11(%ebp)
            char * const argv[] = {tty_num, 0};
8000005b:	8d 45 eb             	lea    -0x15(%ebp),%eax
8000005e:	89 45 e0             	mov    %eax,-0x20(%ebp)
80000061:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            execve("/sehll.elf", argv, 0);
80000068:	83 ec 04             	sub    $0x4,%esp
8000006b:	6a 00                	push   $0x0
8000006d:	8d 45 e0             	lea    -0x20(%ebp),%eax
80000070:	50                   	push   %eax
80000071:	68 c1 00 00 80       	push   $0x800000c1
80000076:	e8 25 01 00 00       	call   800001a0 <execve>
8000007b:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
8000007e:	83 ec 0c             	sub    $0xc,%esp
80000081:	68 e8 03 00 00       	push   $0x3e8
80000086:	e8 8d 00 00 00       	call   80000118 <msleep>
8000008b:	83 c4 10             	add    $0x10,%esp
8000008e:	eb ee                	jmp    8000007e <first_main+0x6e>
    for (int i = 0; i < TTY_TABLE_SIZE; ++i) {
80000090:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80000094:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
80000098:	7e 85                	jle    8000001f <first_main+0xf>
            
        }
    }    

    for (;;) {
        msleep(1000);
8000009a:	83 ec 0c             	sub    $0xc,%esp
8000009d:	68 e8 03 00 00       	push   $0x3e8
800000a2:	e8 71 00 00 00       	call   80000118 <msleep>
800000a7:	83 c4 10             	add    $0x10,%esp
800000aa:	eb ee                	jmp    8000009a <first_main+0x8a>
800000ac:	63 72 65             	arpl   %si,0x65(%edx)
800000af:	61                   	popa   
800000b0:	74 65                	je     80000117 <sys_call+0x4b>
800000b2:	20 73 68             	and    %dh,0x68(%ebx)
800000b5:	65 6c                	gs insb (%dx),%es:(%edi)
800000b7:	6c                   	insb   (%dx),%es:(%edi)
800000b8:	20 66 61             	and    %ah,0x61(%esi)
800000bb:	69 6c 65 64 2e 00 2f 	imul   $0x732f002e,0x64(%ebp,%eiz,2),%ebp
800000c2:	73 
800000c3:	65 68 6c 6c 2e 65    	gs push $0x652e6c6c
800000c9:	6c                   	insb   (%dx),%es:(%edi)
800000ca:	66                   	data16
	...

800000cc <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
800000cc:	55                   	push   %ebp
800000cd:	89 e5                	mov    %esp,%ebp
800000cf:	57                   	push   %edi
800000d0:	56                   	push   %esi
800000d1:	53                   	push   %ebx
800000d2:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000d5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dc:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000e3:	8b 45 08             	mov    0x8(%ebp),%eax
800000e6:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000e9:	8b 55 08             	mov    0x8(%ebp),%edx
800000ec:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
800000ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f2:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
800000f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f8:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
800000fb:	8b 75 08             	mov    0x8(%ebp),%esi
800000fe:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000100:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000103:	50                   	push   %eax
80000104:	52                   	push   %edx
80000105:	51                   	push   %ecx
80000106:	53                   	push   %ebx
80000107:	56                   	push   %esi
80000108:	ff 1f                	lcall  *(%edi)
8000010a:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8000010d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000110:	83 c4 10             	add    $0x10,%esp
80000113:	5b                   	pop    %ebx
80000114:	5e                   	pop    %esi
80000115:	5f                   	pop    %edi
80000116:	5d                   	pop    %ebp
80000117:	c3                   	ret    

80000118 <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
80000118:	55                   	push   %ebp
80000119:	89 e5                	mov    %esp,%ebp
8000011b:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
8000011e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000122:	7e 1b                	jle    8000013f <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000124:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000012b:	8b 45 08             	mov    0x8(%ebp),%eax
8000012e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000131:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000134:	50                   	push   %eax
80000135:	e8 92 ff ff ff       	call   800000cc <sys_call>
8000013a:	83 c4 04             	add    $0x4,%esp
8000013d:	eb 01                	jmp    80000140 <msleep+0x28>
    if (ms <= 0) return;
8000013f:	90                   	nop

}
80000140:	c9                   	leave  
80000141:	c3                   	ret    

80000142 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000142:	55                   	push   %ebp
80000143:	89 e5                	mov    %esp,%ebp
80000145:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000148:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
8000014f:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000152:	50                   	push   %eax
80000153:	e8 74 ff ff ff       	call   800000cc <sys_call>
80000158:	83 c4 04             	add    $0x4,%esp
}
8000015b:	c9                   	leave  
8000015c:	c3                   	ret    

8000015d <print_msg>:

void print_msg(const char *fmt, int arg) {
8000015d:	55                   	push   %ebp
8000015e:	89 e5                	mov    %esp,%ebp
80000160:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000163:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016a:	8b 45 08             	mov    0x8(%ebp),%eax
8000016d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000170:	8b 45 0c             	mov    0xc(%ebp),%eax
80000173:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000176:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000179:	50                   	push   %eax
8000017a:	e8 4d ff ff ff       	call   800000cc <sys_call>
8000017f:	83 c4 04             	add    $0x4,%esp
}
80000182:	90                   	nop
80000183:	c9                   	leave  
80000184:	c3                   	ret    

80000185 <fork>:

int fork (void) {
80000185:	55                   	push   %ebp
80000186:	89 e5                	mov    %esp,%ebp
80000188:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018b:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
80000192:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000195:	50                   	push   %eax
80000196:	e8 31 ff ff ff       	call   800000cc <sys_call>
8000019b:	83 c4 04             	add    $0x4,%esp
}
8000019e:	c9                   	leave  
8000019f:	c3                   	ret    

800001a0 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001a0:	55                   	push   %ebp
800001a1:	89 e5                	mov    %esp,%ebp
800001a3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001a6:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001ad:	8b 45 08             	mov    0x8(%ebp),%eax
800001b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b3:	8b 45 0c             	mov    0xc(%ebp),%eax
800001b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001b9:	8b 45 10             	mov    0x10(%ebp),%eax
800001bc:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c2:	50                   	push   %eax
800001c3:	e8 04 ff ff ff       	call   800000cc <sys_call>
800001c8:	83 c4 04             	add    $0x4,%esp
}
800001cb:	c9                   	leave  
800001cc:	c3                   	ret    

800001cd <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001cd:	55                   	push   %ebp
800001ce:	89 e5                	mov    %esp,%ebp
800001d0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d3:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001da:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001dd:	50                   	push   %eax
800001de:	e8 e9 fe ff ff       	call   800000cc <sys_call>
800001e3:	83 c4 04             	add    $0x4,%esp
}
800001e6:	c9                   	leave  
800001e7:	c3                   	ret    

800001e8 <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001e8:	55                   	push   %ebp
800001e9:	89 e5                	mov    %esp,%ebp
800001eb:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
800001ee:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001f5:	8b 45 08             	mov    0x8(%ebp),%eax
800001f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
800001fb:	8b 45 0c             	mov    0xc(%ebp),%eax
800001fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000201:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000204:	50                   	push   %eax
80000205:	e8 c2 fe ff ff       	call   800000cc <sys_call>
8000020a:	83 c4 04             	add    $0x4,%esp
}
8000020d:	c9                   	leave  
8000020e:	c3                   	ret    

8000020f <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
8000020f:	55                   	push   %ebp
80000210:	89 e5                	mov    %esp,%ebp
80000212:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000215:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000021c:	8b 45 08             	mov    0x8(%ebp),%eax
8000021f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000222:	8b 45 0c             	mov    0xc(%ebp),%eax
80000225:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000228:	8b 45 10             	mov    0x10(%ebp),%eax
8000022b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000022e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000231:	50                   	push   %eax
80000232:	e8 95 fe ff ff       	call   800000cc <sys_call>
80000237:	83 c4 04             	add    $0x4,%esp
}
8000023a:	c9                   	leave  
8000023b:	c3                   	ret    

8000023c <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000023c:	55                   	push   %ebp
8000023d:	89 e5                	mov    %esp,%ebp
8000023f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000242:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
80000249:	8b 45 08             	mov    0x8(%ebp),%eax
8000024c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8000024f:	8b 45 0c             	mov    0xc(%ebp),%eax
80000252:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000255:	8b 45 10             	mov    0x10(%ebp),%eax
80000258:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000025b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000025e:	50                   	push   %eax
8000025f:	e8 68 fe ff ff       	call   800000cc <sys_call>
80000264:	83 c4 04             	add    $0x4,%esp
}
80000267:	c9                   	leave  
80000268:	c3                   	ret    

80000269 <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
80000269:	55                   	push   %ebp
8000026a:	89 e5                	mov    %esp,%ebp
8000026c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
8000026f:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000276:	8b 45 08             	mov    0x8(%ebp),%eax
80000279:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000027c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000027f:	50                   	push   %eax
80000280:	e8 47 fe ff ff       	call   800000cc <sys_call>
80000285:	83 c4 04             	add    $0x4,%esp
}
80000288:	c9                   	leave  
80000289:	c3                   	ret    

8000028a <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000028a:	55                   	push   %ebp
8000028b:	89 e5                	mov    %esp,%ebp
8000028d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
80000290:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
80000297:	8b 45 08             	mov    0x8(%ebp),%eax
8000029a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
8000029d:	8b 45 0c             	mov    0xc(%ebp),%eax
800002a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002a3:	8b 45 10             	mov    0x10(%ebp),%eax
800002a6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002ac:	50                   	push   %eax
800002ad:	e8 1a fe ff ff       	call   800000cc <sys_call>
800002b2:	83 c4 04             	add    $0x4,%esp
}
800002b5:	c9                   	leave  
800002b6:	c3                   	ret    

800002b7 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002b7:	55                   	push   %ebp
800002b8:	89 e5                	mov    %esp,%ebp
800002ba:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002bd:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002c4:	8b 45 08             	mov    0x8(%ebp),%eax
800002c7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002cd:	50                   	push   %eax
800002ce:	e8 f9 fd ff ff       	call   800000cc <sys_call>
800002d3:	83 c4 04             	add    $0x4,%esp
}
800002d6:	c9                   	leave  
800002d7:	c3                   	ret    

800002d8 <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002d8:	55                   	push   %ebp
800002d9:	89 e5                	mov    %esp,%ebp
800002db:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002de:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002e5:	8b 45 08             	mov    0x8(%ebp),%eax
800002e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002eb:	8b 45 0c             	mov    0xc(%ebp),%eax
800002ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800002f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f4:	50                   	push   %eax
800002f5:	e8 d2 fd ff ff       	call   800000cc <sys_call>
800002fa:	83 c4 04             	add    $0x4,%esp
}
800002fd:	c9                   	leave  
800002fe:	c3                   	ret    

800002ff <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
800002ff:	55                   	push   %ebp
80000300:	89 e5                	mov    %esp,%ebp
80000302:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000305:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
8000030c:	8b 45 08             	mov    0x8(%ebp),%eax
8000030f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000312:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000315:	50                   	push   %eax
80000316:	e8 b1 fd ff ff       	call   800000cc <sys_call>
8000031b:	83 c4 04             	add    $0x4,%esp
}
8000031e:	c9                   	leave  
8000031f:	c3                   	ret    

80000320 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000320:	55                   	push   %ebp
80000321:	89 e5                	mov    %esp,%ebp
80000323:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000326:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
8000032d:	8b 45 08             	mov    0x8(%ebp),%eax
80000330:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000333:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000336:	50                   	push   %eax
80000337:	e8 90 fd ff ff       	call   800000cc <sys_call>
8000033c:	83 c4 04             	add    $0x4,%esp
}
8000033f:	c9                   	leave  
80000340:	c3                   	ret    

80000341 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000341:	55                   	push   %ebp
80000342:	89 e5                	mov    %esp,%ebp
80000344:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000347:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
8000034e:	8b 45 08             	mov    0x8(%ebp),%eax
80000351:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
80000354:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000357:	50                   	push   %eax
80000358:	e8 6f fd ff ff       	call   800000cc <sys_call>
8000035d:	83 c4 04             	add    $0x4,%esp
}
80000360:	90                   	nop
80000361:	c9                   	leave  
80000362:	c3                   	ret    

80000363 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000363:	55                   	push   %ebp
80000364:	89 e5                	mov    %esp,%ebp
80000366:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
80000369:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000370:	8b 45 08             	mov    0x8(%ebp),%eax
80000373:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
80000376:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000379:	50                   	push   %eax
8000037a:	e8 4d fd ff ff       	call   800000cc <sys_call>
8000037f:	83 c4 04             	add    $0x4,%esp
80000382:	c9                   	leave  
80000383:	c3                   	ret    
