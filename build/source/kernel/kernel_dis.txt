
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003da0 memsz 0x00003da0 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000034 memsz 0x0001fd90 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031a1  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000bfc  000131a4  000131a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000034  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001ed90  00015000  00015000  00005034  2**12
                  ALLOC
  4 .debug_line   00001b00  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000689  00000000  00000000  00006b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004e3b  00000000  00000000  000071bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001781  00000000  00000000  0000bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000109d  00000000  00000000  0000d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000e9fd  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000012f4  00000000  00000000  0000ea28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	00000017 up2
000102d1 l     F .text	0000000c write_cr3
000102dd l     F .text	0000000b pde_index
000102e8 l     F .text	00000010 pte_index
000102f8 l     F .text	00000027 pde_to_pt_addr
0001031f l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010330 l     F .text	0000005d addr_alloc_init
0001038d l     F .text	00000067 addr_alloc_page
000103f4 l     F .text	00000061 addr_free_page
00010455 l     F .text	00000066 show_mem_info
000104bb l     F .text	00000037 total_mem_size
000132dc l     O .rodata	00000011 __func__.2
00014000 l     O .data	00000030 kernal_map.1
000132f0 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
00010819 l     F .text	0000003d list_node_init
000133d0 l     O .rodata	0000000f __func__.9
00010856 l     F .text	0000002d list_node_next
00013430 l     O .rodata	0000000f __func__.3
00010883 l     F .text	00000047 list_init
000133e0 l     O .rodata	0000000a __func__.8
000108ca l     F .text	00000035 list_is_empty
00013440 l     O .rodata	0000000e __func__.2
000108ff l     F .text	0000002d list_get_size
00013420 l     O .rodata	0000000e __func__.4
0001092c l     F .text	0000002c list_get_first
00013410 l     O .rodata	0000000f __func__.5
00010958 l     F .text	00000007 hlt
0001095f l     F .text	0000001a far_jump
00010979 l     F .text	00000017 write_tr
00017000 l     O .bss	00000190 task_manager
00010990 l     F .text	0000001f switch_to_tss
000109ca l     F .text	000000e5 tss_init
000133c4 l     O .rodata	0000000a __func__.10
000171a0 l     O .bss	00000200 empty_task_stack
00010b93 l     F .text	0000000a empty_task
000133ec l     O .rodata	0000000f __func__.7
000133fc l     O .rodata	00000011 __func__.6
00013450 l     O .rodata	0000000f __func__.1
00013460 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00011013 l     F .text	00000028 lgdt
000173a0 l     O .bss	00010000 gdt_table
000273a0 l     O .bss	00008000 is_alloc
0002f3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011205 l     F .text	00000007 cli
0001120c l     F .text	00000007 sti
00011213 l     F .text	00000007 hlt
0001121a l     F .text	0000001d inb
00011237 l     F .text	00000021 outb
00011258 l     F .text	00000028 lidt
00011280 l     F .text	00000010 read_eflags
00011290 l     F .text	0000000b write_eflags
0002f3c0 l     O .bss	00000800 idt_table
0001129b l     F .text	000000e9 print_exception_fram
00011384 l     F .text	0000003e do_default_handler
0001160e l     F .text	00000047 gate_desc_set
00011695 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011a3f l     F .text	00000021 outb
0002fbc0 l     O .bss	00000004 sys_tick
00011a88 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011b02 l     F .text	00000007 sti
00013870 l     O .rodata	0000000c __func__.0
0002fbe0 l     O .bss	000000b4 task_test_task_1
0002fca0 l     O .bss	000000b4 task_test_task_2
0002fd60 l     O .bss	00001000 test_task_1_stack
00030d60 l     O .bss	00001000 test_task_2_stack
00031d60 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011c47 l     F .text	00000047 list_init
00013928 l     O .rodata	0000000a __func__.1
00011c8e l     F .text	00000035 list_is_empty
00013934 l     O .rodata	0000000e __func__.0
0001391c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011e59 l     F .text	00000047 list_init
000139e8 l     O .rodata	0000000a __func__.1
00011ea0 l     F .text	00000035 list_is_empty
000139f4 l     O .rodata	0000000e __func__.0
000139dc l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012029 l     F .text	00000047 list_init
00013b08 l     O .rodata	0000000a __func__.3
00012070 l     F .text	0000002d list_get_size
00013b14 l     O .rodata	0000000e __func__.2
0001209d l     F .text	0000002c list_get_first
00013b34 l     O .rodata	0000000f __func__.0
000120c9 l     F .text	0000002d list_get_last
00013b24 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000123d1 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00013c04 l     O .rodata	0000000c __func__.3
00013c10 l     O .rodata	0000000f __func__.2
00013c20 l     O .rodata	0000000f __func__.1
00013c30 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00014030 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012c36 l     F .text	00000035 list_is_empty
00013d38 l     O .rodata	0000000e __func__.5
00012c6b l     F .text	0000002d list_get_size
00013d70 l     O .rodata	0000000e __func__.2
00013d24 l     O .rodata	00000012 __func__.6
00013d48 l     O .rodata	00000011 __func__.4
00013d5c l     O .rodata	00000012 __func__.3
00013d80 l     O .rodata	00000011 __func__.1
00013d94 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012fe1 l     F .text	0000001d inb
00012ffe l     F .text	00000021 outb
00031d70 l     O .bss	00000014 mutex
000124b8 g     F .text	00000078 bitmap_get_bit
0001288b g     F .text	0000004f kernel_memcpy
0001189b g     F .text	00000098 idt_enable
00010d2e g     F .text	0000000a task_current
00012d23 g     F .text	0000008f list_insert_last
00010da0 g     F .text	00000061 sys_yield
000114f6 g     F .text	0000001c do_handler_segment_not_present
00010c6a g     F .text	0000004b task_set_ready
00012638 g     F .text	00000021 bitmap_is_set
000119d2 g     F .text	0000000b idt_enable_global
000128da g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001301f g     F .text	00000088 log_init
00011bae g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012754 g     F .text	00000047 kernel_strcpy
000119c7 g     F .text	0000000b idt_disable_global
00014000 g       .data	00000000 s_data
00011655 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
0001144e g     F .text	0000001c do_handler_overflow
00011582 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
0001152e g     F .text	0000001c do_handler_general_protection
000115f2 g     F .text	0000001c do_handler_control_exception
00012000 g     F .text	00000029 sem_count
000113de g     F .text	0000001c do_handler_divider
00012530 g     F .text	00000108 bitmap_set_bit
000114be g     F .text	0000001c do_handler_double_fault
0001154a g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000119dd g     F .text	00000039 pic_send_eoi
00012e63 g     F .text	000000b5 list_remove_last
00010c60 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011f18 g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
000110fa g     F .text	00000094 gdt_init
000115d6 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
000113fa g     F .text	0000001c do_handler_debug
00031d90 g     O .bss	00002000 stack
00010fb3 g     F .text	00000060 sys_sleep
00011b85 g     F .text	00000029 test_task_2
000120f6 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
00011728 g     F .text	00000173 idt_init
00011f83 g     F .text	0000007d sem_notify
00011486 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011566 g     F .text	0000001c do_handler_fpu_error
00010c18 g     F .text	00000048 task_first_init
0001159e g     F .text	0000001c do_handler_machine_check
00012c98 g     F .text	0000008b list_insert_first
00010f68 g     F .text	0000004b task_set_wakeup
00010d00 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
0001279b g     F .text	00000051 kernel_strncpy
00033d90 g       .bss	00000000 mem_free_start
00011b09 g     F .text	00000053 kernel_init
00011ed5 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000129c3 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011d10 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000114da g     F .text	0000001c do_handler_invalid_tss
00011933 g     F .text	00000094 idt_disable
00010f0c g     F .text	0000005c task_set_sleep
000105b4 g     F .text	000000c8 memory_creat_map
00011416 g     F .text	0000001c do_handler_nmi
00011cc3 g     F .text	0000004d mutex_init
00011b5c g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
0001240e g     F .text	00000016 bitmap_byte_count
000114a2 g     F .text	0000001c do_handler_device_unavailable
00011a16 g     F .text	00000018 idt_enter_protection
0001067c g     F .text	000000a4 create_kernal_table
00010e01 g     F .text	0000010b task_slice_end
0001291b g     F .text	00000084 kernel_memcmp
000115ba g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000113c2 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000109af g     F .text	0000001b task_switch_from_to
00011da1 g     F .text	000000b8 mutex_unlock
00010d38 g     F .text	00000068 task_switch
00012856 g     F .text	00000035 kernel_strlen
00010cb5 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
0001103b g     F .text	000000bf segment_desc_set
0001146a g     F .text	0000001c do_handler_bound_range
00012db2 g     F .text	000000b1 list_remove_first
00013da0 g       .rodata	00000000 e_text
000127ec g     F .text	0000006a kernel_strncmp
00012424 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012659 g     F .text	000000fb bitmap_alloc_nbits
00010b9d g     F .text	0000007b task_manager_init
00010720 g     F .text	000000f9 memory_init
000123d8 g     F .text	00000036 pannic
00011512 g     F .text	0000001c do_handler_stack_segment_fault
00011432 g     F .text	0000001c do_handler_breakpoint
000130a7 g     F .text	000000fa log_printf
00010aaf g     F .text	000000e4 task_init
0001299f g     F .text	00000024 kernel_sprintf
0001118e g     F .text	00000077 gdt_alloc_desc
00012b60 g     F .text	000000d6 kernel_itoa
00012f18 g     F .text	000000c9 list_remove
00011a2e g     F .text	00000011 idt_leave_protection
000104f2 g     F .text	000000c2 find_pte
00011a60 g     F .text	00000028 do_handler_time
00011aea g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 fe 1a 00 00       	call   11b09 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 90 3d 03 00       	mov    $0x33d90,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 84 1b 00 00       	jmp    11bae <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 87 13 00 00       	call   113c2 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 86 13 00 00       	call   113de <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 85 13 00 00       	call   113fa <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 84 13 00 00       	call   11416 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 83 13 00 00       	call   11432 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 82 13 00 00       	call   1144e <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 81 13 00 00       	call   1146a <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 80 13 00 00       	call   11486 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 7f 13 00 00       	call   114a2 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 80 13 00 00       	call   114be <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 81 13 00 00       	call   114da <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 82 13 00 00       	call   114f6 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 83 13 00 00       	call   11512 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 84 13 00 00       	call   1152e <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 85 13 00 00       	call   1154a <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 84 13 00 00       	call   11566 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 85 13 00 00       	call   11582 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 84 13 00 00       	call   1159e <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 83 13 00 00       	call   115ba <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 82 13 00 00       	call   115d6 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 83 13 00 00       	call   115f2 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 d4 17 00 00       	call   11a60 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102bd:	8b 55 08             	mov    0x8(%ebp),%edx
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	01 d0                	add    %edx,%eax
   102c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cb:	f7 d8                	neg    %eax
   102cd:	21 d0                	and    %edx,%eax
}
   102cf:	5d                   	pop    %ebp
   102d0:	c3                   	ret    

000102d1 <write_cr3>:
/**
 * @brief  向cr3寄存器写入数据
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102d1:	55                   	push   %ebp
   102d2:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	0f 22 d8             	mov    %eax,%cr3
}
   102da:	90                   	nop
   102db:	5d                   	pop    %ebp
   102dc:	c3                   	ret    

000102dd <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102dd:	55                   	push   %ebp
   102de:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102e0:	8b 45 08             	mov    0x8(%ebp),%eax
   102e3:	c1 e8 16             	shr    $0x16,%eax
}
   102e6:	5d                   	pop    %ebp
   102e7:	c3                   	ret    

000102e8 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	c1 e8 0c             	shr    $0xc,%eax
   102f1:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret    

000102f8 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10302:	c0 ea 04             	shr    $0x4,%dl
   10305:	0f b6 ca             	movzbl %dl,%ecx
   10308:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1030c:	c1 e2 04             	shl    $0x4,%edx
   1030f:	09 ca                	or     %ecx,%edx
   10311:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10315:	c1 e0 0c             	shl    $0xc,%eax
   10318:	09 d0                	or     %edx,%eax
   1031a:	c1 e0 0c             	shl    $0xc,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10322:	ff 75 08             	push   0x8(%ebp)
   10325:	e8 a7 ff ff ff       	call   102d1 <write_cr3>
   1032a:	83 c4 04             	add    $0x4,%esp
}
   1032d:	90                   	nop
   1032e:	c9                   	leave  
   1032f:	c3                   	ret    

00010330 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10330:	55                   	push   %ebp
   10331:	89 e5                	mov    %esp,%ebp
   10333:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	83 ec 0c             	sub    $0xc,%esp
   1033c:	50                   	push   %eax
   1033d:	e8 81 19 00 00       	call   11cc3 <mutex_init>
   10342:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	8b 55 10             	mov    0x10(%ebp),%edx
   1034b:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	8b 55 14             	mov    0x14(%ebp),%edx
   10354:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10357:	8b 45 08             	mov    0x8(%ebp),%eax
   1035a:	8b 55 18             	mov    0x18(%ebp),%edx
   1035d:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	8b 40 20             	mov    0x20(%eax),%eax
   10366:	8b 55 08             	mov    0x8(%ebp),%edx
   10369:	8b 4a 24             	mov    0x24(%edx),%ecx
   1036c:	ba 00 00 00 00       	mov    $0x0,%edx
   10371:	f7 f1                	div    %ecx
   10373:	89 c2                	mov    %eax,%edx
   10375:	8b 45 08             	mov    0x8(%ebp),%eax
   10378:	83 c0 14             	add    $0x14,%eax
   1037b:	6a 00                	push   $0x0
   1037d:	52                   	push   %edx
   1037e:	ff 75 0c             	push   0xc(%ebp)
   10381:	50                   	push   %eax
   10382:	e8 9d 20 00 00       	call   12424 <bitmap_init>
   10387:	83 c4 10             	add    $0x10,%esp
}
   1038a:	90                   	nop
   1038b:	c9                   	leave  
   1038c:	c3                   	ret    

0001038d <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   1038d:	55                   	push   %ebp
   1038e:	89 e5                	mov    %esp,%ebp
   10390:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   10393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1039a:	8b 45 08             	mov    0x8(%ebp),%eax
   1039d:	83 ec 0c             	sub    $0xc,%esp
   103a0:	50                   	push   %eax
   103a1:	e8 6a 19 00 00       	call   11d10 <mutex_lock>
   103a6:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	83 c0 14             	add    $0x14,%eax
   103af:	83 ec 04             	sub    $0x4,%esp
   103b2:	ff 75 0c             	push   0xc(%ebp)
   103b5:	6a 00                	push   $0x0
   103b7:	50                   	push   %eax
   103b8:	e8 9c 22 00 00       	call   12659 <bitmap_alloc_nbits>
   103bd:	83 c4 10             	add    $0x10,%esp
   103c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   103c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   103c7:	78 17                	js     103e0 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   103c9:	8b 45 08             	mov    0x8(%ebp),%eax
   103cc:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	8b 50 24             	mov    0x24(%eax),%edx
   103d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103d8:	0f af c2             	imul   %edx,%eax
   103db:	01 c8                	add    %ecx,%eax
   103dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   103e0:	8b 45 08             	mov    0x8(%ebp),%eax
   103e3:	83 ec 0c             	sub    $0xc,%esp
   103e6:	50                   	push   %eax
   103e7:	e8 b5 19 00 00       	call   11da1 <mutex_unlock>
   103ec:	83 c4 10             	add    $0x10,%esp

  return addr;
   103ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103f2:	c9                   	leave  
   103f3:	c3                   	ret    

000103f4 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   103f4:	55                   	push   %ebp
   103f5:	89 e5                	mov    %esp,%ebp
   103f7:	53                   	push   %ebx
   103f8:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	83 ec 0c             	sub    $0xc,%esp
   10401:	50                   	push   %eax
   10402:	e8 09 19 00 00       	call   11d10 <mutex_lock>
   10407:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 50 1c             	mov    0x1c(%eax),%edx
   10410:	8b 45 0c             	mov    0xc(%ebp),%eax
   10413:	29 d0                	sub    %edx,%eax
   10415:	89 c1                	mov    %eax,%ecx
   10417:	8b 45 08             	mov    0x8(%ebp),%eax
   1041a:	8b 58 24             	mov    0x24(%eax),%ebx
   1041d:	89 c8                	mov    %ecx,%eax
   1041f:	ba 00 00 00 00       	mov    $0x0,%edx
   10424:	f7 f3                	div    %ebx
   10426:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	83 c0 14             	add    $0x14,%eax
   1042f:	6a 00                	push   $0x0
   10431:	ff 75 10             	push   0x10(%ebp)
   10434:	ff 75 f4             	push   -0xc(%ebp)
   10437:	50                   	push   %eax
   10438:	e8 f3 20 00 00       	call   12530 <bitmap_set_bit>
   1043d:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10440:	8b 45 08             	mov    0x8(%ebp),%eax
   10443:	83 ec 0c             	sub    $0xc,%esp
   10446:	50                   	push   %eax
   10447:	e8 55 19 00 00       	call   11da1 <mutex_unlock>
   1044c:	83 c4 10             	add    $0x10,%esp
}
   1044f:	90                   	nop
   10450:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10453:	c9                   	leave  
   10454:	c3                   	ret    

00010455 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   10455:	55                   	push   %ebp
   10456:	89 e5                	mov    %esp,%ebp
   10458:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	68 a4 31 01 00       	push   $0x131a4
   10463:	e8 3f 2c 00 00       	call   130a7 <log_printf>
   10468:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1046b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10472:	eb 29                	jmp    1049d <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1047a:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1047e:	8b 45 08             	mov    0x8(%ebp),%eax
   10481:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10484:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10487:	52                   	push   %edx
   10488:	50                   	push   %eax
   10489:	ff 75 f4             	push   -0xc(%ebp)
   1048c:	68 b0 31 01 00       	push   $0x131b0
   10491:	e8 11 2c 00 00       	call   130a7 <log_printf>
   10496:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10499:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	8b 40 50             	mov    0x50(%eax),%eax
   104a3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104a6:	7c cc                	jl     10474 <show_mem_info+0x1f>
    }

    log_printf("");
   104a8:	83 ec 0c             	sub    $0xc,%esp
   104ab:	68 c2 31 01 00       	push   $0x131c2
   104b0:	e8 f2 2b 00 00       	call   130a7 <log_printf>
   104b5:	83 c4 10             	add    $0x10,%esp
}
   104b8:	90                   	nop
   104b9:	c9                   	leave  
   104ba:	c3                   	ret    

000104bb <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104bb:	55                   	push   %ebp
   104bc:	89 e5                	mov    %esp,%ebp
   104be:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104c8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104cf:	eb 11                	jmp    104e2 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   104d1:	8b 45 08             	mov    0x8(%ebp),%eax
   104d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104d7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   104db:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104de:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	8b 40 50             	mov    0x50(%eax),%eax
   104e8:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   104eb:	7c e4                	jl     104d1 <total_mem_size+0x16>
    }

    return mem_size;
   104ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   104f0:	c9                   	leave  
   104f1:	c3                   	ret    

000104f2 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   104f2:	55                   	push   %ebp
   104f3:	89 e5                	mov    %esp,%ebp
   104f5:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   104f8:	ff 75 0c             	push   0xc(%ebp)
   104fb:	e8 dd fd ff ff       	call   102dd <pde_index>
   10500:	83 c4 04             	add    $0x4,%esp
   10503:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	01 d0                	add    %edx,%eax
   1050f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10512:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10515:	0f b6 00             	movzbl (%eax),%eax
   10518:	83 e0 01             	and    $0x1,%eax
   1051b:	84 c0                	test   %al,%al
   1051d:	74 10                	je     1052f <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   1051f:	ff 75 f0             	push   -0x10(%ebp)
   10522:	e8 d1 fd ff ff       	call   102f8 <pde_to_pt_addr>
   10527:	83 c4 04             	add    $0x4,%esp
   1052a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1052d:	eb 57                	jmp    10586 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   1052f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10533:	75 07                	jne    1053c <find_pte+0x4a>
      return (pte_t*)0;
   10535:	b8 00 00 00 00       	mov    $0x0,%eax
   1053a:	eb 76                	jmp    105b2 <find_pte+0xc0>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1053c:	83 ec 08             	sub    $0x8,%esp
   1053f:	6a 01                	push   $0x1
   10541:	68 00 50 01 00       	push   $0x15000
   10546:	e8 42 fe ff ff       	call   1038d <addr_alloc_page>
   1054b:	83 c4 10             	add    $0x10,%esp
   1054e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10551:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10555:	75 07                	jne    1055e <find_pte+0x6c>
      return (pte_t*)0;
   10557:	b8 00 00 00 00       	mov    $0x0,%eax
   1055c:	eb 54                	jmp    105b2 <find_pte+0xc0>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   1055e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10564:	83 ec 04             	sub    $0x4,%esp
   10567:	68 00 10 00 00       	push   $0x1000
   1056c:	6a 00                	push   $0x0
   1056e:	ff 75 f4             	push   -0xc(%ebp)
   10571:	e8 64 23 00 00       	call   128da <kernel_memset>
   10576:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    pde->v = pg_addr | PDE_P;
   10579:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1057c:	83 c8 01             	or     $0x1,%eax
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10584:	89 10                	mov    %edx,(%eax)
  }

  log_printf("sizeof(pte_t) = %d", sizeof(pte_t));
   10586:	83 ec 08             	sub    $0x8,%esp
   10589:	6a 04                	push   $0x4
   1058b:	68 c3 31 01 00       	push   $0x131c3
   10590:	e8 12 2b 00 00       	call   130a7 <log_printf>
   10595:	83 c4 10             	add    $0x10,%esp


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   10598:	83 ec 0c             	sub    $0xc,%esp
   1059b:	ff 75 0c             	push   0xc(%ebp)
   1059e:	e8 45 fd ff ff       	call   102e8 <pte_index>
   105a3:	83 c4 10             	add    $0x10,%esp
   105a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105b0:	01 d0                	add    %edx,%eax

}
   105b2:	c9                   	leave  
   105b3:	c3                   	ret    

000105b4 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int 
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105b4:	55                   	push   %ebp
   105b5:	89 e5                	mov    %esp,%ebp
   105b7:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105c1:	e9 a8 00 00 00       	jmp    1066e <memory_creat_map+0xba>

    //打印调试信息
    log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);
   105c6:	ff 75 18             	push   0x18(%ebp)
   105c9:	ff 75 10             	push   0x10(%ebp)
   105cc:	ff 75 0c             	push   0xc(%ebp)
   105cf:	68 d8 31 01 00       	push   $0x131d8
   105d4:	e8 ce 2a 00 00       	call   130a7 <log_printf>
   105d9:	83 c4 10             	add    $0x10,%esp

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105dc:	83 ec 04             	sub    $0x4,%esp
   105df:	6a 01                	push   $0x1
   105e1:	ff 75 0c             	push   0xc(%ebp)
   105e4:	ff 75 08             	push   0x8(%ebp)
   105e7:	e8 06 ff ff ff       	call   104f2 <find_pte>
   105ec:	83 c4 10             	add    $0x10,%esp
   105ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   105f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105f6:	75 17                	jne    1060f <memory_creat_map+0x5b>
    log_printf("creat pte failed pte == 0");
   105f8:	83 ec 0c             	sub    $0xc,%esp
   105fb:	68 02 32 01 00       	push   $0x13202
   10600:	e8 a2 2a 00 00       	call   130a7 <log_printf>
   10605:	83 c4 10             	add    $0x10,%esp
      return -1;
   10608:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1060d:	eb 6b                	jmp    1067a <memory_creat_map+0xc6>
    }

    log_printf("pte addr : 0x%x", (uint32_t)pte);
   1060f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10612:	83 ec 08             	sub    $0x8,%esp
   10615:	50                   	push   %eax
   10616:	68 1c 32 01 00       	push   $0x1321c
   1061b:	e8 87 2a 00 00       	call   130a7 <log_printf>
   10620:	83 c4 10             	add    $0x10,%esp
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10623:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10626:	0f b6 00             	movzbl (%eax),%eax
   10629:	83 e0 01             	and    $0x1,%eax
   1062c:	84 c0                	test   %al,%al
   1062e:	74 1c                	je     1064c <memory_creat_map+0x98>
   10630:	68 2c 32 01 00       	push   $0x1322c
   10635:	68 dc 32 01 00       	push   $0x132dc
   1063a:	68 c0 00 00 00       	push   $0xc0
   1063f:	68 40 32 01 00       	push   $0x13240
   10644:	e8 8f 1d 00 00       	call   123d8 <pannic>
   10649:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系
    pte->v = pstart | privilege | PTE_P;
   1064c:	8b 45 10             	mov    0x10(%ebp),%eax
   1064f:	0b 45 18             	or     0x18(%ebp),%eax
   10652:	83 c8 01             	or     $0x1,%eax
   10655:	89 c2                	mov    %eax,%edx
   10657:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065a:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1065c:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10663:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1066a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1066e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10671:	3b 45 14             	cmp    0x14(%ebp),%eax
   10674:	0f 8c 4c ff ff ff    	jl     105c6 <memory_creat_map+0x12>

  }
 }
   1067a:	c9                   	leave  
   1067b:	c3                   	ret    

0001067c <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1067c:	55                   	push   %ebp
   1067d:	89 e5                	mov    %esp,%ebp
   1067f:	83 ec 28             	sub    $0x28,%esp
    {&s_text, &e_text, &s_text, 0},                 //只读段的映射关系(内核.text和.rodata段)
    {&s_data, (void*)MEM_EBDA_START, &s_data, 0}    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10682:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10689:	e9 82 00 00 00       	jmp    10710 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   1068e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10691:	c1 e0 04             	shl    $0x4,%eax
   10694:	05 00 40 01 00       	add    $0x14000,%eax
   10699:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1069c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069f:	8b 00                	mov    (%eax),%eax
   106a1:	68 00 10 00 00       	push   $0x1000
   106a6:	50                   	push   %eax
   106a7:	e8 01 fc ff ff       	call   102ad <down2>
   106ac:	83 c4 08             	add    $0x8,%esp
   106af:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	8b 40 08             	mov    0x8(%eax),%eax
   106b8:	68 00 10 00 00       	push   $0x1000
   106bd:	50                   	push   %eax
   106be:	e8 ea fb ff ff       	call   102ad <down2>
   106c3:	83 c4 08             	add    $0x8,%esp
   106c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106cc:	8b 40 04             	mov    0x4(%eax),%eax
   106cf:	68 00 10 00 00       	push   $0x1000
   106d4:	50                   	push   %eax
   106d5:	e8 e0 fb ff ff       	call   102ba <up2>
   106da:	83 c4 08             	add    $0x8,%esp
   106dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106e3:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106e6:	c1 e8 0c             	shr    $0xc,%eax
   106e9:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ef:	8b 40 0c             	mov    0xc(%eax),%eax
   106f2:	83 ec 0c             	sub    $0xc,%esp
   106f5:	50                   	push   %eax
   106f6:	ff 75 e0             	push   -0x20(%ebp)
   106f9:	ff 75 e8             	push   -0x18(%ebp)
   106fc:	ff 75 ec             	push   -0x14(%ebp)
   106ff:	68 00 60 01 00       	push   $0x16000
   10704:	e8 ab fe ff ff       	call   105b4 <memory_creat_map>
   10709:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1070c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10710:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10713:	83 f8 02             	cmp    $0x2,%eax
   10716:	0f 86 72 ff ff ff    	jbe    1068e <create_kernal_table+0x12>


  }
}
   1071c:	90                   	nop
   1071d:	90                   	nop
   1071e:	c9                   	leave  
   1071f:	c3                   	ret    

00010720 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10720:	55                   	push   %ebp
   10721:	89 e5                	mov    %esp,%ebp
   10723:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10726:	83 ec 0c             	sub    $0xc,%esp
   10729:	68 77 32 01 00       	push   $0x13277
   1072e:	e8 74 29 00 00       	call   130a7 <log_printf>
   10733:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10736:	83 ec 08             	sub    $0x8,%esp
   10739:	68 90 3d 03 00       	push   $0x33d90
   1073e:	68 83 32 01 00       	push   $0x13283
   10743:	e8 5f 29 00 00       	call   130a7 <log_printf>
   10748:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   1074b:	83 ec 0c             	sub    $0xc,%esp
   1074e:	ff 75 08             	push   0x8(%ebp)
   10751:	e8 ff fc ff ff       	call   10455 <show_mem_info>
   10756:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10759:	83 ec 0c             	sub    $0xc,%esp
   1075c:	ff 75 08             	push   0x8(%ebp)
   1075f:	e8 57 fd ff ff       	call   104bb <total_mem_size>
   10764:	83 c4 10             	add    $0x10,%esp
   10767:	2d 00 00 10 00       	sub    $0x100000,%eax
   1076c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   1076f:	83 ec 08             	sub    $0x8,%esp
   10772:	68 00 10 00 00       	push   $0x1000
   10777:	ff 75 f4             	push   -0xc(%ebp)
   1077a:	e8 2e fb ff ff       	call   102ad <down2>
   1077f:	83 c4 10             	add    $0x10,%esp
   10782:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10785:	83 ec 04             	sub    $0x4,%esp
   10788:	ff 75 f4             	push   -0xc(%ebp)
   1078b:	68 00 00 10 00       	push   $0x100000
   10790:	68 98 32 01 00       	push   $0x13298
   10795:	e8 0d 29 00 00       	call   130a7 <log_printf>
   1079a:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   1079d:	c7 45 f0 90 3d 03 00 	movl   $0x33d90,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   107a4:	83 ec 0c             	sub    $0xc,%esp
   107a7:	68 00 10 00 00       	push   $0x1000
   107ac:	ff 75 f4             	push   -0xc(%ebp)
   107af:	68 00 00 10 00       	push   $0x100000
   107b4:	ff 75 f0             	push   -0x10(%ebp)
   107b7:	68 00 50 01 00       	push   $0x15000
   107bc:	e8 6f fb ff ff       	call   10330 <addr_alloc_init>
   107c1:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   107c4:	a1 20 50 01 00       	mov    0x15020,%eax
   107c9:	c1 e8 0c             	shr    $0xc,%eax
   107cc:	83 ec 0c             	sub    $0xc,%esp
   107cf:	50                   	push   %eax
   107d0:	e8 39 1c 00 00       	call   1240e <bitmap_byte_count>
   107d5:	83 c4 10             	add    $0x10,%esp
   107d8:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   107db:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   107e2:	76 1c                	jbe    10800 <memory_init+0xe0>
   107e4:	68 b8 32 01 00       	push   $0x132b8
   107e9:	68 f0 32 01 00       	push   $0x132f0
   107ee:	68 0f 01 00 00       	push   $0x10f
   107f3:	68 40 32 01 00       	push   $0x13240
   107f8:	e8 db 1b 00 00       	call   123d8 <pannic>
   107fd:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10800:	e8 77 fe ff ff       	call   1067c <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10805:	b8 00 60 01 00       	mov    $0x16000,%eax
   1080a:	83 ec 0c             	sub    $0xc,%esp
   1080d:	50                   	push   %eax
   1080e:	e8 0c fb ff ff       	call   1031f <mmu_set_page_dir>
   10813:	83 c4 10             	add    $0x10,%esp
   10816:	90                   	nop
   10817:	c9                   	leave  
   10818:	c3                   	ret    

00010819 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10819:	55                   	push   %ebp
   1081a:	89 e5                	mov    %esp,%ebp
   1081c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1081f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10823:	75 19                	jne    1083e <list_node_init+0x25>
   10825:	68 fc 32 01 00       	push   $0x132fc
   1082a:	68 d0 33 01 00       	push   $0x133d0
   1082f:	6a 20                	push   $0x20
   10831:	68 14 33 01 00       	push   $0x13314
   10836:	e8 9d 1b 00 00       	call   123d8 <pannic>
   1083b:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   1083e:	8b 45 08             	mov    0x8(%ebp),%eax
   10841:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10848:	8b 45 08             	mov    0x8(%ebp),%eax
   1084b:	8b 50 04             	mov    0x4(%eax),%edx
   1084e:	8b 45 08             	mov    0x8(%ebp),%eax
   10851:	89 10                	mov    %edx,(%eax)
}
   10853:	90                   	nop
   10854:	c9                   	leave  
   10855:	c3                   	ret    

00010856 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10856:	55                   	push   %ebp
   10857:	89 e5                	mov    %esp,%ebp
   10859:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1085c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10860:	75 19                	jne    1087b <list_node_next+0x25>
   10862:	68 fc 32 01 00       	push   $0x132fc
   10867:	68 30 34 01 00       	push   $0x13430
   1086c:	6a 2b                	push   $0x2b
   1086e:	68 14 33 01 00       	push   $0x13314
   10873:	e8 60 1b 00 00       	call   123d8 <pannic>
   10878:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1087b:	8b 45 08             	mov    0x8(%ebp),%eax
   1087e:	8b 40 04             	mov    0x4(%eax),%eax
}
   10881:	c9                   	leave  
   10882:	c3                   	ret    

00010883 <list_init>:

static inline void list_init(list_t *list) {
   10883:	55                   	push   %ebp
   10884:	89 e5                	mov    %esp,%ebp
   10886:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10889:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1088d:	75 19                	jne    108a8 <list_init+0x25>
   1088f:	68 52 33 01 00       	push   $0x13352
   10894:	68 e0 33 01 00       	push   $0x133e0
   10899:	6a 31                	push   $0x31
   1089b:	68 14 33 01 00       	push   $0x13314
   108a0:	e8 33 1b 00 00       	call   123d8 <pannic>
   108a5:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   108a8:	8b 45 08             	mov    0x8(%ebp),%eax
   108ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   108b2:	8b 45 08             	mov    0x8(%ebp),%eax
   108b5:	8b 50 04             	mov    0x4(%eax),%edx
   108b8:	8b 45 08             	mov    0x8(%ebp),%eax
   108bb:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   108bd:	8b 45 08             	mov    0x8(%ebp),%eax
   108c0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   108c7:	90                   	nop
   108c8:	c9                   	leave  
   108c9:	c3                   	ret    

000108ca <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   108ca:	55                   	push   %ebp
   108cb:	89 e5                	mov    %esp,%ebp
   108cd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   108d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   108d4:	75 19                	jne    108ef <list_is_empty+0x25>
   108d6:	68 52 33 01 00       	push   $0x13352
   108db:	68 40 34 01 00       	push   $0x13440
   108e0:	6a 38                	push   $0x38
   108e2:	68 14 33 01 00       	push   $0x13314
   108e7:	e8 ec 1a 00 00       	call   123d8 <pannic>
   108ec:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   108ef:	8b 45 08             	mov    0x8(%ebp),%eax
   108f2:	8b 40 08             	mov    0x8(%eax),%eax
   108f5:	85 c0                	test   %eax,%eax
   108f7:	0f 94 c0             	sete   %al
   108fa:	0f b6 c0             	movzbl %al,%eax
}
   108fd:	c9                   	leave  
   108fe:	c3                   	ret    

000108ff <list_get_size>:

static inline int list_get_size(list_t *list) {
   108ff:	55                   	push   %ebp
   10900:	89 e5                	mov    %esp,%ebp
   10902:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10905:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10909:	75 19                	jne    10924 <list_get_size+0x25>
   1090b:	68 52 33 01 00       	push   $0x13352
   10910:	68 20 34 01 00       	push   $0x13420
   10915:	6a 3e                	push   $0x3e
   10917:	68 14 33 01 00       	push   $0x13314
   1091c:	e8 b7 1a 00 00       	call   123d8 <pannic>
   10921:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10924:	8b 45 08             	mov    0x8(%ebp),%eax
   10927:	8b 40 08             	mov    0x8(%eax),%eax
}
   1092a:	c9                   	leave  
   1092b:	c3                   	ret    

0001092c <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   1092c:	55                   	push   %ebp
   1092d:	89 e5                	mov    %esp,%ebp
   1092f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10932:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10936:	75 19                	jne    10951 <list_get_first+0x25>
   10938:	68 52 33 01 00       	push   $0x13352
   1093d:	68 10 34 01 00       	push   $0x13410
   10942:	6a 44                	push   $0x44
   10944:	68 14 33 01 00       	push   $0x13314
   10949:	e8 8a 1a 00 00       	call   123d8 <pannic>
   1094e:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10951:	8b 45 08             	mov    0x8(%ebp),%eax
   10954:	8b 00                	mov    (%eax),%eax
}
   10956:	c9                   	leave  
   10957:	c3                   	ret    

00010958 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10958:	55                   	push   %ebp
   10959:	89 e5                	mov    %esp,%ebp
   1095b:	f4                   	hlt    
   1095c:	90                   	nop
   1095d:	5d                   	pop    %ebp
   1095e:	c3                   	ret    

0001095f <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1095f:	55                   	push   %ebp
   10960:	89 e5                	mov    %esp,%ebp
   10962:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10965:	8b 45 0c             	mov    0xc(%ebp),%eax
   10968:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1096b:	8b 45 08             	mov    0x8(%ebp),%eax
   1096e:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10971:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10974:	ff 28                	ljmp   *(%eax)
}
   10976:	90                   	nop
   10977:	c9                   	leave  
   10978:	c3                   	ret    

00010979 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10979:	55                   	push   %ebp
   1097a:	89 e5                	mov    %esp,%ebp
   1097c:	83 ec 04             	sub    $0x4,%esp
   1097f:	8b 45 08             	mov    0x8(%ebp),%eax
   10982:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10986:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1098a:	0f 00 d8             	ltr    %ax
}
   1098d:	90                   	nop
   1098e:	c9                   	leave  
   1098f:	c3                   	ret    

00010990 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10990:	55                   	push   %ebp
   10991:	89 e5                	mov    %esp,%ebp
   10993:	83 ec 04             	sub    $0x4,%esp
   10996:	8b 45 08             	mov    0x8(%ebp),%eax
   10999:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   1099d:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   109a1:	6a 00                	push   $0x0
   109a3:	50                   	push   %eax
   109a4:	e8 b6 ff ff ff       	call   1095f <far_jump>
   109a9:	83 c4 08             	add    $0x8,%esp
}
   109ac:	90                   	nop
   109ad:	c9                   	leave  
   109ae:	c3                   	ret    

000109af <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   109af:	55                   	push   %ebp
   109b0:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   109b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   109b5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   109bb:	0f b7 c0             	movzwl %ax,%eax
   109be:	50                   	push   %eax
   109bf:	e8 cc ff ff ff       	call   10990 <switch_to_tss>
   109c4:	83 c4 04             	add    $0x4,%esp
}
   109c7:	90                   	nop
   109c8:	c9                   	leave  
   109c9:	c3                   	ret    

000109ca <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   109ca:	55                   	push   %ebp
   109cb:	89 e5                	mov    %esp,%ebp
   109cd:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   109d0:	8b 45 08             	mov    0x8(%ebp),%eax
   109d3:	83 c0 48             	add    $0x48,%eax
   109d6:	83 ec 04             	sub    $0x4,%esp
   109d9:	6a 68                	push   $0x68
   109db:	6a 00                	push   $0x0
   109dd:	50                   	push   %eax
   109de:	e8 f7 1e 00 00       	call   128da <kernel_memset>
   109e3:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   109e6:	8b 45 08             	mov    0x8(%ebp),%eax
   109e9:	8b 55 0c             	mov    0xc(%ebp),%edx
   109ec:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   109ef:	8b 45 08             	mov    0x8(%ebp),%eax
   109f2:	8b 55 10             	mov    0x10(%ebp),%edx
   109f5:	89 50 4c             	mov    %edx,0x4c(%eax)
   109f8:	8b 45 08             	mov    0x8(%ebp),%eax
   109fb:	8b 50 4c             	mov    0x4c(%eax),%edx
   109fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10a01:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10a07:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0a:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10a11:	8b 45 08             	mov    0x8(%ebp),%eax
   10a14:	8b 50 50             	mov    0x50(%eax),%edx
   10a17:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1a:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10a20:	8b 45 08             	mov    0x8(%ebp),%eax
   10a23:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   10a2a:	00 00 00 
   10a2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a30:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10a36:	8b 45 08             	mov    0x8(%ebp),%eax
   10a39:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a42:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10a48:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4b:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10a51:	8b 45 08             	mov    0x8(%ebp),%eax
   10a54:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5d:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10a63:	8b 45 08             	mov    0x8(%ebp),%eax
   10a66:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10a6d:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10a70:	8b 45 08             	mov    0x8(%ebp),%eax
   10a73:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10a7a:	e8 0f 07 00 00       	call   1118e <gdt_alloc_desc>
   10a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10a82:	8b 45 08             	mov    0x8(%ebp),%eax
   10a85:	83 c0 48             	add    $0x48,%eax
   10a88:	89 c2                	mov    %eax,%edx
   10a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a8d:	0f b7 c0             	movzwl %ax,%eax
   10a90:	68 89 00 00 00       	push   $0x89
   10a95:	6a 68                	push   $0x68
   10a97:	52                   	push   %edx
   10a98:	50                   	push   %eax
   10a99:	e8 9d 05 00 00       	call   1103b <segment_desc_set>
   10a9e:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10aa1:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10aa7:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   10aad:	c9                   	leave  
   10aae:	c3                   	ret    

00010aaf <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10aaf:	55                   	push   %ebp
   10ab0:	89 e5                	mov    %esp,%ebp
   10ab2:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10ab5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ab9:	75 19                	jne    10ad4 <task_init+0x25>
   10abb:	68 65 33 01 00       	push   $0x13365
   10ac0:	68 c4 33 01 00       	push   $0x133c4
   10ac5:	6a 60                	push   $0x60
   10ac7:	68 78 33 01 00       	push   $0x13378
   10acc:	e8 07 19 00 00       	call   123d8 <pannic>
   10ad1:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10ad4:	83 ec 04             	sub    $0x4,%esp
   10ad7:	ff 75 14             	push   0x14(%ebp)
   10ada:	ff 75 10             	push   0x10(%ebp)
   10add:	ff 75 08             	push   0x8(%ebp)
   10ae0:	e8 e5 fe ff ff       	call   109ca <tss_init>
   10ae5:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   10aeb:	83 c0 10             	add    $0x10,%eax
   10aee:	83 ec 04             	sub    $0x4,%esp
   10af1:	6a 20                	push   $0x20
   10af3:	ff 75 0c             	push   0xc(%ebp)
   10af6:	50                   	push   %eax
   10af7:	e8 9f 1c 00 00       	call   1279b <kernel_strncpy>
   10afc:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10aff:	8b 45 08             	mov    0x8(%ebp),%eax
   10b02:	83 c0 30             	add    $0x30,%eax
   10b05:	83 ec 0c             	sub    $0xc,%esp
   10b08:	50                   	push   %eax
   10b09:	e8 0b fd ff ff       	call   10819 <list_node_init>
   10b0e:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10b11:	8b 45 08             	mov    0x8(%ebp),%eax
   10b14:	83 c0 38             	add    $0x38,%eax
   10b17:	83 ec 0c             	sub    $0xc,%esp
   10b1a:	50                   	push   %eax
   10b1b:	e8 f9 fc ff ff       	call   10819 <list_node_init>
   10b20:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10b23:	8b 45 08             	mov    0x8(%ebp),%eax
   10b26:	83 c0 40             	add    $0x40,%eax
   10b29:	83 ec 0c             	sub    $0xc,%esp
   10b2c:	50                   	push   %eax
   10b2d:	e8 e7 fc ff ff       	call   10819 <list_node_init>
   10b32:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10b35:	8b 45 08             	mov    0x8(%ebp),%eax
   10b38:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10b3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b42:	8b 50 08             	mov    0x8(%eax),%edx
   10b45:	8b 45 08             	mov    0x8(%ebp),%eax
   10b48:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10b4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10b55:	e8 bc 0e 00 00       	call   11a16 <idt_enter_protection>
   10b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10b5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b60:	83 c0 38             	add    $0x38,%eax
   10b63:	83 ec 08             	sub    $0x8,%esp
   10b66:	50                   	push   %eax
   10b67:	68 10 70 01 00       	push   $0x17010
   10b6c:	e8 b2 21 00 00       	call   12d23 <list_insert_last>
   10b71:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10b74:	83 ec 0c             	sub    $0xc,%esp
   10b77:	ff 75 08             	push   0x8(%ebp)
   10b7a:	e8 eb 00 00 00       	call   10c6a <task_set_ready>
   10b7f:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10b82:	83 ec 0c             	sub    $0xc,%esp
   10b85:	ff 75 f4             	push   -0xc(%ebp)
   10b88:	e8 a1 0e 00 00       	call   11a2e <idt_leave_protection>
   10b8d:	83 c4 10             	add    $0x10,%esp
}
   10b90:	90                   	nop
   10b91:	c9                   	leave  
   10b92:	c3                   	ret    

00010b93 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10b93:	55                   	push   %ebp
   10b94:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10b96:	e8 bd fd ff ff       	call   10958 <hlt>
   10b9b:	eb f9                	jmp    10b96 <empty_task+0x3>

00010b9d <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10b9d:	55                   	push   %ebp
   10b9e:	89 e5                	mov    %esp,%ebp
   10ba0:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10ba3:	83 ec 0c             	sub    $0xc,%esp
   10ba6:	68 04 70 01 00       	push   $0x17004
   10bab:	e8 d3 fc ff ff       	call   10883 <list_init>
   10bb0:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10bb3:	83 ec 0c             	sub    $0xc,%esp
   10bb6:	68 10 70 01 00       	push   $0x17010
   10bbb:	e8 c3 fc ff ff       	call   10883 <list_init>
   10bc0:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10bc3:	83 ec 0c             	sub    $0xc,%esp
   10bc6:	68 1c 70 01 00       	push   $0x1701c
   10bcb:	e8 b3 fc ff ff       	call   10883 <list_init>
   10bd0:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10bd3:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10bda:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10bdd:	ba a0 73 01 00       	mov    $0x173a0,%edx
   10be2:	b8 93 0b 01 00       	mov    $0x10b93,%eax
   10be7:	52                   	push   %edx
   10be8:	50                   	push   %eax
   10be9:	68 ad 33 01 00       	push   $0x133ad
   10bee:	68 dc 70 01 00       	push   $0x170dc
   10bf3:	e8 b7 fe ff ff       	call   10aaf <task_init>
   10bf8:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10bfb:	83 ec 0c             	sub    $0xc,%esp
   10bfe:	68 dc 70 01 00       	push   $0x170dc
   10c03:	e8 ad 00 00 00       	call   10cb5 <task_set_unready>
   10c08:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10c0b:	c7 05 dc 70 01 00 00 	movl   $0x0,0x170dc
   10c12:	00 00 00 
}
   10c15:	90                   	nop
   10c16:	c9                   	leave  
   10c17:	c3                   	ret    

00010c18 <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   10c18:	55                   	push   %ebp
   10c19:	89 e5                	mov    %esp,%ebp
   10c1b:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   10c1e:	6a 00                	push   $0x0
   10c20:	6a 00                	push   $0x0
   10c22:	68 b8 33 01 00       	push   $0x133b8
   10c27:	68 28 70 01 00       	push   $0x17028
   10c2c:	e8 7e fe ff ff       	call   10aaf <task_init>
   10c31:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   10c34:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10c39:	0f b7 c0             	movzwl %ax,%eax
   10c3c:	83 ec 0c             	sub    $0xc,%esp
   10c3f:	50                   	push   %eax
   10c40:	e8 34 fd ff ff       	call   10979 <write_tr>
   10c45:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   10c48:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10c4f:	70 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10c52:	a1 00 70 01 00       	mov    0x17000,%eax
   10c57:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   10c5d:	90                   	nop
   10c5e:	c9                   	leave  
   10c5f:	c3                   	ret    

00010c60 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10c60:	55                   	push   %ebp
   10c61:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10c63:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10c68:	5d                   	pop    %ebp
   10c69:	c3                   	ret    

00010c6a <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10c6a:	55                   	push   %ebp
   10c6b:	89 e5                	mov    %esp,%ebp
   10c6d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c74:	75 1c                	jne    10c92 <task_set_ready+0x28>
   10c76:	68 65 33 01 00       	push   $0x13365
   10c7b:	68 ec 33 01 00       	push   $0x133ec
   10c80:	68 c9 00 00 00       	push   $0xc9
   10c85:	68 78 33 01 00       	push   $0x13378
   10c8a:	e8 49 17 00 00       	call   123d8 <pannic>
   10c8f:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10c92:	8b 45 08             	mov    0x8(%ebp),%eax
   10c95:	83 c0 30             	add    $0x30,%eax
   10c98:	83 ec 08             	sub    $0x8,%esp
   10c9b:	50                   	push   %eax
   10c9c:	68 04 70 01 00       	push   $0x17004
   10ca1:	e8 7d 20 00 00       	call   12d23 <list_insert_last>
   10ca6:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cac:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10cb2:	90                   	nop
   10cb3:	c9                   	leave  
   10cb4:	c3                   	ret    

00010cb5 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10cb5:	55                   	push   %ebp
   10cb6:	89 e5                	mov    %esp,%ebp
   10cb8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10cbb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cbf:	75 1c                	jne    10cdd <task_set_unready+0x28>
   10cc1:	68 65 33 01 00       	push   $0x13365
   10cc6:	68 fc 33 01 00       	push   $0x133fc
   10ccb:	68 d8 00 00 00       	push   $0xd8
   10cd0:	68 78 33 01 00       	push   $0x13378
   10cd5:	e8 fe 16 00 00       	call   123d8 <pannic>
   10cda:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce0:	83 c0 30             	add    $0x30,%eax
   10ce3:	83 ec 08             	sub    $0x8,%esp
   10ce6:	50                   	push   %eax
   10ce7:	68 04 70 01 00       	push   $0x17004
   10cec:	e8 27 22 00 00       	call   12f18 <list_remove>
   10cf1:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10cf4:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10cfd:	90                   	nop
   10cfe:	c9                   	leave  
   10cff:	c3                   	ret    

00010d00 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10d00:	55                   	push   %ebp
   10d01:	89 e5                	mov    %esp,%ebp
   10d03:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10d06:	83 ec 0c             	sub    $0xc,%esp
   10d09:	68 04 70 01 00       	push   $0x17004
   10d0e:	e8 19 fc ff ff       	call   1092c <list_get_first>
   10d13:	83 c4 10             	add    $0x10,%esp
   10d16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d1d:	74 08                	je     10d27 <task_ready_first+0x27>
   10d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d22:	83 e8 30             	sub    $0x30,%eax
   10d25:	eb 05                	jmp    10d2c <task_ready_first+0x2c>
   10d27:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d2c:	c9                   	leave  
   10d2d:	c3                   	ret    

00010d2e <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10d2e:	55                   	push   %ebp
   10d2f:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10d31:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10d36:	5d                   	pop    %ebp
   10d37:	c3                   	ret    

00010d38 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10d38:	55                   	push   %ebp
   10d39:	89 e5                	mov    %esp,%ebp
   10d3b:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10d3e:	e8 d3 0c 00 00       	call   11a16 <idt_enter_protection>
   10d43:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10d46:	e8 b5 ff ff ff       	call   10d00 <task_ready_first>
   10d4b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10d4e:	a1 00 70 01 00       	mov    0x17000,%eax
   10d53:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10d56:	74 37                	je     10d8f <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10d58:	a1 00 70 01 00       	mov    0x17000,%eax
   10d5d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10d60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d64:	75 07                	jne    10d6d <task_switch+0x35>
            to = &task_manager.empty_task;
   10d66:	c7 45 f4 dc 70 01 00 	movl   $0x170dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d70:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10d76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d79:	a3 00 70 01 00       	mov    %eax,0x17000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10d7e:	83 ec 08             	sub    $0x8,%esp
   10d81:	ff 75 f4             	push   -0xc(%ebp)
   10d84:	ff 75 ec             	push   -0x14(%ebp)
   10d87:	e8 23 fc ff ff       	call   109af <task_switch_from_to>
   10d8c:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10d8f:	83 ec 0c             	sub    $0xc,%esp
   10d92:	ff 75 f0             	push   -0x10(%ebp)
   10d95:	e8 94 0c 00 00       	call   11a2e <idt_leave_protection>
   10d9a:	83 c4 10             	add    $0x10,%esp
}
   10d9d:	90                   	nop
   10d9e:	c9                   	leave  
   10d9f:	c3                   	ret    

00010da0 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10da0:	55                   	push   %ebp
   10da1:	89 e5                	mov    %esp,%ebp
   10da3:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10da6:	e8 6b 0c 00 00       	call   11a16 <idt_enter_protection>
   10dab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10dae:	83 ec 0c             	sub    $0xc,%esp
   10db1:	68 04 70 01 00       	push   $0x17004
   10db6:	e8 44 fb ff ff       	call   108ff <list_get_size>
   10dbb:	83 c4 10             	add    $0x10,%esp
   10dbe:	83 f8 01             	cmp    $0x1,%eax
   10dc1:	7e 29                	jle    10dec <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10dc3:	e8 66 ff ff ff       	call   10d2e <task_current>
   10dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10dcb:	83 ec 0c             	sub    $0xc,%esp
   10dce:	ff 75 f0             	push   -0x10(%ebp)
   10dd1:	e8 df fe ff ff       	call   10cb5 <task_set_unready>
   10dd6:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10dd9:	83 ec 0c             	sub    $0xc,%esp
   10ddc:	ff 75 f0             	push   -0x10(%ebp)
   10ddf:	e8 86 fe ff ff       	call   10c6a <task_set_ready>
   10de4:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10de7:	e8 4c ff ff ff       	call   10d38 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10dec:	83 ec 0c             	sub    $0xc,%esp
   10def:	ff 75 f4             	push   -0xc(%ebp)
   10df2:	e8 37 0c 00 00       	call   11a2e <idt_leave_protection>
   10df7:	83 c4 10             	add    $0x10,%esp
    return 0;
   10dfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10dff:	c9                   	leave  
   10e00:	c3                   	ret    

00010e01 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10e01:	55                   	push   %ebp
   10e02:	89 e5                	mov    %esp,%ebp
   10e04:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10e07:	83 ec 0c             	sub    $0xc,%esp
   10e0a:	68 1c 70 01 00       	push   $0x1701c
   10e0f:	e8 18 fb ff ff       	call   1092c <list_get_first>
   10e14:	83 c4 10             	add    $0x10,%esp
   10e17:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10e1a:	eb 62                	jmp    10e7e <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10e1c:	83 ec 0c             	sub    $0xc,%esp
   10e1f:	ff 75 f4             	push   -0xc(%ebp)
   10e22:	e8 2f fa ff ff       	call   10856 <list_node_next>
   10e27:	83 c4 10             	add    $0x10,%esp
   10e2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10e2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e31:	74 08                	je     10e3b <task_slice_end+0x3a>
   10e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e36:	83 e8 30             	sub    $0x30,%eax
   10e39:	eb 05                	jmp    10e40 <task_slice_end+0x3f>
   10e3b:	b8 00 00 00 00       	mov    $0x0,%eax
   10e40:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10e43:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e46:	8b 40 0c             	mov    0xc(%eax),%eax
   10e49:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e4f:	89 50 0c             	mov    %edx,0xc(%eax)
   10e52:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e55:	8b 40 0c             	mov    0xc(%eax),%eax
   10e58:	85 c0                	test   %eax,%eax
   10e5a:	75 1c                	jne    10e78 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10e5c:	83 ec 0c             	sub    $0xc,%esp
   10e5f:	ff 75 e8             	push   -0x18(%ebp)
   10e62:	e8 01 01 00 00       	call   10f68 <task_set_wakeup>
   10e67:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10e6a:	83 ec 0c             	sub    $0xc,%esp
   10e6d:	ff 75 e8             	push   -0x18(%ebp)
   10e70:	e8 f5 fd ff ff       	call   10c6a <task_set_ready>
   10e75:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10e78:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10e7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e82:	75 98                	jne    10e1c <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10e84:	e8 a5 fe ff ff       	call   10d2e <task_current>
   10e89:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10e8c:	81 7d f0 dc 70 01 00 	cmpl   $0x170dc,-0x10(%ebp)
   10e93:	75 23                	jne    10eb8 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10e95:	83 ec 0c             	sub    $0xc,%esp
   10e98:	68 04 70 01 00       	push   $0x17004
   10e9d:	e8 28 fa ff ff       	call   108ca <list_is_empty>
   10ea2:	83 c4 10             	add    $0x10,%esp
   10ea5:	85 c0                	test   %eax,%eax
   10ea7:	75 60                	jne    10f09 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10ea9:	c7 05 dc 70 01 00 00 	movl   $0x0,0x170dc
   10eb0:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10eb3:	e8 80 fe ff ff       	call   10d38 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10eb8:	81 7d f0 dc 70 01 00 	cmpl   $0x170dc,-0x10(%ebp)
   10ebf:	74 49                	je     10f0a <task_slice_end+0x109>
   10ec1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ec4:	8b 40 08             	mov    0x8(%eax),%eax
   10ec7:	8d 50 ff             	lea    -0x1(%eax),%edx
   10eca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ecd:	89 50 08             	mov    %edx,0x8(%eax)
   10ed0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ed3:	8b 40 08             	mov    0x8(%eax),%eax
   10ed6:	85 c0                	test   %eax,%eax
   10ed8:	75 30                	jne    10f0a <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10edd:	8b 50 04             	mov    0x4(%eax),%edx
   10ee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ee3:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10ee6:	83 ec 0c             	sub    $0xc,%esp
   10ee9:	ff 75 f0             	push   -0x10(%ebp)
   10eec:	e8 c4 fd ff ff       	call   10cb5 <task_set_unready>
   10ef1:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10ef4:	83 ec 0c             	sub    $0xc,%esp
   10ef7:	ff 75 f0             	push   -0x10(%ebp)
   10efa:	e8 6b fd ff ff       	call   10c6a <task_set_ready>
   10eff:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10f02:	e8 31 fe ff ff       	call   10d38 <task_switch>
   10f07:	eb 01                	jmp    10f0a <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10f09:	90                   	nop
    }
}
   10f0a:	c9                   	leave  
   10f0b:	c3                   	ret    

00010f0c <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10f0c:	55                   	push   %ebp
   10f0d:	89 e5                	mov    %esp,%ebp
   10f0f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10f12:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f16:	75 1c                	jne    10f34 <task_set_sleep+0x28>
   10f18:	68 65 33 01 00       	push   $0x13365
   10f1d:	68 50 34 01 00       	push   $0x13450
   10f22:	68 66 01 00 00       	push   $0x166
   10f27:	68 78 33 01 00       	push   $0x13378
   10f2c:	e8 a7 14 00 00       	call   123d8 <pannic>
   10f31:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10f34:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f38:	74 2b                	je     10f65 <task_set_sleep+0x59>

    task->sleep = slice;
   10f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f40:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10f43:	8b 45 08             	mov    0x8(%ebp),%eax
   10f46:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10f4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4f:	83 c0 30             	add    $0x30,%eax
   10f52:	83 ec 08             	sub    $0x8,%esp
   10f55:	50                   	push   %eax
   10f56:	68 1c 70 01 00       	push   $0x1701c
   10f5b:	e8 c3 1d 00 00       	call   12d23 <list_insert_last>
   10f60:	83 c4 10             	add    $0x10,%esp
   10f63:	eb 01                	jmp    10f66 <task_set_sleep+0x5a>
    if (slice == 0) return;
   10f65:	90                   	nop
}
   10f66:	c9                   	leave  
   10f67:	c3                   	ret    

00010f68 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10f68:	55                   	push   %ebp
   10f69:	89 e5                	mov    %esp,%ebp
   10f6b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10f6e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f72:	75 1c                	jne    10f90 <task_set_wakeup+0x28>
   10f74:	68 65 33 01 00       	push   $0x13365
   10f79:	68 60 34 01 00       	push   $0x13460
   10f7e:	68 74 01 00 00       	push   $0x174
   10f83:	68 78 33 01 00       	push   $0x13378
   10f88:	e8 4b 14 00 00       	call   123d8 <pannic>
   10f8d:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10f90:	8b 45 08             	mov    0x8(%ebp),%eax
   10f93:	83 c0 30             	add    $0x30,%eax
   10f96:	83 ec 08             	sub    $0x8,%esp
   10f99:	50                   	push   %eax
   10f9a:	68 1c 70 01 00       	push   $0x1701c
   10f9f:	e8 74 1f 00 00       	call   12f18 <list_remove>
   10fa4:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10fa7:	8b 45 08             	mov    0x8(%ebp),%eax
   10faa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10fb0:	90                   	nop
   10fb1:	c9                   	leave  
   10fb2:	c3                   	ret    

00010fb3 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10fb3:	55                   	push   %ebp
   10fb4:	89 e5                	mov    %esp,%ebp
   10fb6:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10fb9:	e8 58 0a 00 00       	call   11a16 <idt_enter_protection>
   10fbe:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10fc1:	e8 68 fd ff ff       	call   10d2e <task_current>
   10fc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10fc9:	83 ec 0c             	sub    $0xc,%esp
   10fcc:	ff 75 f0             	push   -0x10(%ebp)
   10fcf:	e8 e1 fc ff ff       	call   10cb5 <task_set_unready>
   10fd4:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10fd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fda:	83 c0 09             	add    $0x9,%eax
   10fdd:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10fe2:	f7 e2                	mul    %edx
   10fe4:	89 d0                	mov    %edx,%eax
   10fe6:	c1 e8 03             	shr    $0x3,%eax
   10fe9:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10fec:	83 ec 08             	sub    $0x8,%esp
   10fef:	ff 75 ec             	push   -0x14(%ebp)
   10ff2:	ff 75 f0             	push   -0x10(%ebp)
   10ff5:	e8 12 ff ff ff       	call   10f0c <task_set_sleep>
   10ffa:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10ffd:	e8 36 fd ff ff       	call   10d38 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11002:	83 ec 0c             	sub    $0xc,%esp
   11005:	ff 75 f4             	push   -0xc(%ebp)
   11008:	e8 21 0a 00 00       	call   11a2e <idt_leave_protection>
   1100d:	83 c4 10             	add    $0x10,%esp
   11010:	90                   	nop
   11011:	c9                   	leave  
   11012:	c3                   	ret    

00011013 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11013:	55                   	push   %ebp
   11014:	89 e5                	mov    %esp,%ebp
   11016:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   11019:	8b 45 08             	mov    0x8(%ebp),%eax
   1101c:	c1 e8 10             	shr    $0x10,%eax
   1101f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   11023:	8b 45 08             	mov    0x8(%ebp),%eax
   11026:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1102a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102d:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   11030:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11034:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11038:	90                   	nop
   11039:	c9                   	leave  
   1103a:	c3                   	ret    

0001103b <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1103b:	55                   	push   %ebp
   1103c:	89 e5                	mov    %esp,%ebp
   1103e:	83 ec 18             	sub    $0x18,%esp
   11041:	8b 55 08             	mov    0x8(%ebp),%edx
   11044:	8b 45 14             	mov    0x14(%ebp),%eax
   11047:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1104b:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   1104f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11053:	66 c1 e8 03          	shr    $0x3,%ax
   11057:	0f b7 c0             	movzwl %ax,%eax
   1105a:	c1 e0 03             	shl    $0x3,%eax
   1105d:	05 a0 73 01 00       	add    $0x173a0,%eax
   11062:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   11065:	8b 45 0c             	mov    0xc(%ebp),%eax
   11068:	89 c2                	mov    %eax,%edx
   1106a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1106d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   11071:	8b 45 0c             	mov    0xc(%ebp),%eax
   11074:	c1 e8 10             	shr    $0x10,%eax
   11077:	89 c2                	mov    %eax,%edx
   11079:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1107c:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   1107f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11082:	c1 e8 18             	shr    $0x18,%eax
   11085:	89 c2                	mov    %eax,%edx
   11087:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1108a:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   1108d:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11094:	76 1d                	jbe    110b3 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   11096:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11099:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1109d:	66 0d 00 80          	or     $0x8000,%ax
   110a1:	89 c2                	mov    %eax,%edx
   110a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110a6:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   110aa:	8b 45 10             	mov    0x10(%ebp),%eax
   110ad:	c1 e8 0c             	shr    $0xc,%eax
   110b0:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   110b3:	8b 45 10             	mov    0x10(%ebp),%eax
   110b6:	89 c2                	mov    %eax,%edx
   110b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110bb:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   110be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110c1:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   110c5:	89 c2                	mov    %eax,%edx
   110c7:	8b 45 10             	mov    0x10(%ebp),%eax
   110ca:	c1 e8 08             	shr    $0x8,%eax
   110cd:	66 25 00 0f          	and    $0xf00,%ax
   110d1:	09 d0                	or     %edx,%eax
   110d3:	89 c2                	mov    %eax,%edx
   110d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110d8:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   110dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110df:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   110e3:	89 c2                	mov    %eax,%edx
   110e5:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   110e9:	80 e4 f0             	and    $0xf0,%ah
   110ec:	09 d0                	or     %edx,%eax
   110ee:	89 c2                	mov    %eax,%edx
   110f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110f3:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   110f7:	90                   	nop
   110f8:	c9                   	leave  
   110f9:	c3                   	ret    

000110fa <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   110fa:	55                   	push   %ebp
   110fb:	89 e5                	mov    %esp,%ebp
   110fd:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11100:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11107:	eb 1c                	jmp    11125 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11109:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1110c:	c1 e0 03             	shl    $0x3,%eax
   1110f:	0f b7 c0             	movzwl %ax,%eax
   11112:	6a 00                	push   $0x0
   11114:	6a 00                	push   $0x0
   11116:	6a 00                	push   $0x0
   11118:	50                   	push   %eax
   11119:	e8 1d ff ff ff       	call   1103b <segment_desc_set>
   1111e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11121:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11125:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1112c:	7e db                	jle    11109 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   1112e:	68 92 40 00 00       	push   $0x4092
   11133:	6a ff                	push   $0xffffffff
   11135:	6a 00                	push   $0x0
   11137:	6a 10                	push   $0x10
   11139:	e8 fd fe ff ff       	call   1103b <segment_desc_set>
   1113e:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   11141:	c7 05 a8 73 02 00 01 	movl   $0x1,0x273a8
   11148:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   1114b:	68 9a 40 00 00       	push   $0x409a
   11150:	6a ff                	push   $0xffffffff
   11152:	6a 00                	push   $0x0
   11154:	6a 08                	push   $0x8
   11156:	e8 e0 fe ff ff       	call   1103b <segment_desc_set>
   1115b:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   1115e:	c7 05 a4 73 02 00 01 	movl   $0x1,0x273a4
   11165:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11168:	b8 a0 73 01 00       	mov    $0x173a0,%eax
   1116d:	68 00 00 01 00       	push   $0x10000
   11172:	50                   	push   %eax
   11173:	e8 9b fe ff ff       	call   11013 <lgdt>
   11178:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   1117b:	83 ec 0c             	sub    $0xc,%esp
   1117e:	68 a0 f3 02 00       	push   $0x2f3a0
   11183:	e8 3b 0b 00 00       	call   11cc3 <mutex_init>
   11188:	83 c4 10             	add    $0x10,%esp
}
   1118b:	90                   	nop
   1118c:	c9                   	leave  
   1118d:	c3                   	ret    

0001118e <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   1118e:	55                   	push   %ebp
   1118f:	89 e5                	mov    %esp,%ebp
   11191:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   11194:	83 ec 0c             	sub    $0xc,%esp
   11197:	68 a0 f3 02 00       	push   $0x2f3a0
   1119c:	e8 6f 0b 00 00       	call   11d10 <mutex_lock>
   111a1:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   111a4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111ab:	eb 38                	jmp    111e5 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   111ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111b0:	8b 04 85 a0 73 02 00 	mov    0x273a0(,%eax,4),%eax
   111b7:	85 c0                	test   %eax,%eax
   111b9:	75 26                	jne    111e1 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   111bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111be:	c7 04 85 a0 73 02 00 	movl   $0x1,0x273a0(,%eax,4)
   111c5:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   111c9:	83 ec 0c             	sub    $0xc,%esp
   111cc:	68 a0 f3 02 00       	push   $0x2f3a0
   111d1:	e8 cb 0b 00 00       	call   11da1 <mutex_unlock>
   111d6:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   111d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111dc:	c1 e0 03             	shl    $0x3,%eax
   111df:	eb 22                	jmp    11203 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   111e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111e5:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   111ec:	7e bf                	jle    111ad <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   111ee:	83 ec 0c             	sub    $0xc,%esp
   111f1:	68 a0 f3 02 00       	push   $0x2f3a0
   111f6:	e8 a6 0b 00 00       	call   11da1 <mutex_unlock>
   111fb:	83 c4 10             	add    $0x10,%esp
    return -1;
   111fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11203:	c9                   	leave  
   11204:	c3                   	ret    

00011205 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11205:	55                   	push   %ebp
   11206:	89 e5                	mov    %esp,%ebp
   11208:	fa                   	cli    
   11209:	90                   	nop
   1120a:	5d                   	pop    %ebp
   1120b:	c3                   	ret    

0001120c <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1120c:	55                   	push   %ebp
   1120d:	89 e5                	mov    %esp,%ebp
   1120f:	fb                   	sti    
   11210:	90                   	nop
   11211:	5d                   	pop    %ebp
   11212:	c3                   	ret    

00011213 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11213:	55                   	push   %ebp
   11214:	89 e5                	mov    %esp,%ebp
   11216:	f4                   	hlt    
   11217:	90                   	nop
   11218:	5d                   	pop    %ebp
   11219:	c3                   	ret    

0001121a <inb>:
static inline uint8_t inb(uint16_t port) {
   1121a:	55                   	push   %ebp
   1121b:	89 e5                	mov    %esp,%ebp
   1121d:	83 ec 14             	sub    $0x14,%esp
   11220:	8b 45 08             	mov    0x8(%ebp),%eax
   11223:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11227:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1122b:	89 c2                	mov    %eax,%edx
   1122d:	ec                   	in     (%dx),%al
   1122e:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11231:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11235:	c9                   	leave  
   11236:	c3                   	ret    

00011237 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11237:	55                   	push   %ebp
   11238:	89 e5                	mov    %esp,%ebp
   1123a:	83 ec 08             	sub    $0x8,%esp
   1123d:	8b 45 08             	mov    0x8(%ebp),%eax
   11240:	8b 55 0c             	mov    0xc(%ebp),%edx
   11243:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11247:	89 d0                	mov    %edx,%eax
   11249:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1124c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11250:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11254:	ee                   	out    %al,(%dx)
}
   11255:	90                   	nop
   11256:	c9                   	leave  
   11257:	c3                   	ret    

00011258 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11258:	55                   	push   %ebp
   11259:	89 e5                	mov    %esp,%ebp
   1125b:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   1125e:	8b 45 08             	mov    0x8(%ebp),%eax
   11261:	c1 e8 10             	shr    $0x10,%eax
   11264:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   11268:	8b 45 08             	mov    0x8(%ebp),%eax
   1126b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1126f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11272:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11275:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11279:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1127d:	90                   	nop
   1127e:	c9                   	leave  
   1127f:	c3                   	ret    

00011280 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   11280:	55                   	push   %ebp
   11281:	89 e5                	mov    %esp,%ebp
   11283:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11286:	9c                   	pushf  
   11287:	58                   	pop    %eax
   11288:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   1128b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1128e:	c9                   	leave  
   1128f:	c3                   	ret    

00011290 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   11290:	55                   	push   %ebp
   11291:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   11293:	8b 45 08             	mov    0x8(%ebp),%eax
   11296:	50                   	push   %eax
   11297:	9d                   	popf   
}
   11298:	90                   	nop
   11299:	5d                   	pop    %ebp
   1129a:	c3                   	ret    

0001129b <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   1129b:	55                   	push   %ebp
   1129c:	89 e5                	mov    %esp,%ebp
   1129e:	57                   	push   %edi
   1129f:	56                   	push   %esi
   112a0:	53                   	push   %ebx
   112a1:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   112a4:	83 ec 0c             	sub    $0xc,%esp
   112a7:	68 70 34 01 00       	push   $0x13470
   112ac:	e8 f6 1d 00 00       	call   130a7 <log_printf>
   112b1:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   112b4:	8b 45 08             	mov    0x8(%ebp),%eax
   112b7:	8b 50 34             	mov    0x34(%eax),%edx
   112ba:	8b 45 08             	mov    0x8(%ebp),%eax
   112bd:	8b 40 30             	mov    0x30(%eax),%eax
   112c0:	83 ec 04             	sub    $0x4,%esp
   112c3:	52                   	push   %edx
   112c4:	50                   	push   %eax
   112c5:	68 ae 34 01 00       	push   $0x134ae
   112ca:	e8 d8 1d 00 00       	call   130a7 <log_printf>
   112cf:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   112d2:	8b 45 08             	mov    0x8(%ebp),%eax
   112d5:	8b 38                	mov    (%eax),%edi
   112d7:	8b 45 08             	mov    0x8(%ebp),%eax
   112da:	8b 70 04             	mov    0x4(%eax),%esi
   112dd:	8b 45 08             	mov    0x8(%ebp),%eax
   112e0:	8b 58 08             	mov    0x8(%eax),%ebx
   112e3:	8b 45 08             	mov    0x8(%ebp),%eax
   112e6:	8b 48 0c             	mov    0xc(%eax),%ecx
   112e9:	8b 45 08             	mov    0x8(%ebp),%eax
   112ec:	8b 50 0c             	mov    0xc(%eax),%edx
   112ef:	8b 45 08             	mov    0x8(%ebp),%eax
   112f2:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   112f5:	83 ec 04             	sub    $0x4,%esp
   112f8:	57                   	push   %edi
   112f9:	56                   	push   %esi
   112fa:	53                   	push   %ebx
   112fb:	51                   	push   %ecx
   112fc:	52                   	push   %edx
   112fd:	50                   	push   %eax
   112fe:	68 c8 34 01 00       	push   $0x134c8
   11303:	e8 9f 1d 00 00       	call   130a7 <log_printf>
   11308:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   1130b:	8b 45 08             	mov    0x8(%ebp),%eax
   1130e:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11311:	8b 45 08             	mov    0x8(%ebp),%eax
   11314:	8b 40 18             	mov    0x18(%eax),%eax
   11317:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1131a:	8b 45 08             	mov    0x8(%ebp),%eax
   1131d:	8b 58 10             	mov    0x10(%eax),%ebx
   11320:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   11323:	8b 45 08             	mov    0x8(%ebp),%eax
   11326:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11329:	8b 45 08             	mov    0x8(%ebp),%eax
   1132c:	8b 70 24             	mov    0x24(%eax),%esi
   1132f:	8b 45 08             	mov    0x8(%ebp),%eax
   11332:	8b 58 28             	mov    0x28(%eax),%ebx
   11335:	8b 45 08             	mov    0x8(%ebp),%eax
   11338:	8b 50 20             	mov    0x20(%eax),%edx
   1133b:	8b 45 08             	mov    0x8(%ebp),%eax
   1133e:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11341:	83 ec 0c             	sub    $0xc,%esp
   11344:	51                   	push   %ecx
   11345:	ff 75 e4             	push   -0x1c(%ebp)
   11348:	ff 75 e0             	push   -0x20(%ebp)
   1134b:	57                   	push   %edi
   1134c:	56                   	push   %esi
   1134d:	53                   	push   %ebx
   1134e:	52                   	push   %edx
   1134f:	50                   	push   %eax
   11350:	68 f8 34 01 00       	push   $0x134f8
   11355:	e8 4d 1d 00 00       	call   130a7 <log_printf>
   1135a:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   1135d:	8b 45 08             	mov    0x8(%ebp),%eax
   11360:	8b 50 40             	mov    0x40(%eax),%edx
   11363:	8b 45 08             	mov    0x8(%ebp),%eax
   11366:	8b 40 38             	mov    0x38(%eax),%eax
   11369:	83 ec 04             	sub    $0x4,%esp
   1136c:	52                   	push   %edx
   1136d:	50                   	push   %eax
   1136e:	68 50 35 01 00       	push   $0x13550
   11373:	e8 2f 1d 00 00       	call   130a7 <log_printf>
   11378:	83 c4 10             	add    $0x10,%esp
}
   1137b:	90                   	nop
   1137c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1137f:	5b                   	pop    %ebx
   11380:	5e                   	pop    %esi
   11381:	5f                   	pop    %edi
   11382:	5d                   	pop    %ebp
   11383:	c3                   	ret    

00011384 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11384:	55                   	push   %ebp
   11385:	89 e5                	mov    %esp,%ebp
   11387:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   1138a:	83 ec 0c             	sub    $0xc,%esp
   1138d:	68 6c 35 01 00       	push   $0x1356c
   11392:	e8 10 1d 00 00       	call   130a7 <log_printf>
   11397:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   1139a:	83 ec 08             	sub    $0x8,%esp
   1139d:	ff 75 0c             	push   0xc(%ebp)
   113a0:	68 a0 35 01 00       	push   $0x135a0
   113a5:	e8 fd 1c 00 00       	call   130a7 <log_printf>
   113aa:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   113ad:	83 ec 0c             	sub    $0xc,%esp
   113b0:	ff 75 08             	push   0x8(%ebp)
   113b3:	e8 e3 fe ff ff       	call   1129b <print_exception_fram>
   113b8:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   113bb:	e8 53 fe ff ff       	call   11213 <hlt>
   113c0:	eb f9                	jmp    113bb <do_default_handler+0x37>

000113c2 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   113c2:	55                   	push   %ebp
   113c3:	89 e5                	mov    %esp,%ebp
   113c5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   113c8:	83 ec 08             	sub    $0x8,%esp
   113cb:	68 ba 35 01 00       	push   $0x135ba
   113d0:	ff 75 08             	push   0x8(%ebp)
   113d3:	e8 ac ff ff ff       	call   11384 <do_default_handler>
   113d8:	83 c4 10             	add    $0x10,%esp
}
   113db:	90                   	nop
   113dc:	c9                   	leave  
   113dd:	c3                   	ret    

000113de <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   113de:	55                   	push   %ebp
   113df:	89 e5                	mov    %esp,%ebp
   113e1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   113e4:	83 ec 08             	sub    $0x8,%esp
   113e7:	68 cc 35 01 00       	push   $0x135cc
   113ec:	ff 75 08             	push   0x8(%ebp)
   113ef:	e8 90 ff ff ff       	call   11384 <do_default_handler>
   113f4:	83 c4 10             	add    $0x10,%esp
}
   113f7:	90                   	nop
   113f8:	c9                   	leave  
   113f9:	c3                   	ret    

000113fa <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   113fa:	55                   	push   %ebp
   113fb:	89 e5                	mov    %esp,%ebp
   113fd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11400:	83 ec 08             	sub    $0x8,%esp
   11403:	68 de 35 01 00       	push   $0x135de
   11408:	ff 75 08             	push   0x8(%ebp)
   1140b:	e8 74 ff ff ff       	call   11384 <do_default_handler>
   11410:	83 c4 10             	add    $0x10,%esp
}
   11413:	90                   	nop
   11414:	c9                   	leave  
   11415:	c3                   	ret    

00011416 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11416:	55                   	push   %ebp
   11417:	89 e5                	mov    %esp,%ebp
   11419:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1141c:	83 ec 08             	sub    $0x8,%esp
   1141f:	68 ee 35 01 00       	push   $0x135ee
   11424:	ff 75 08             	push   0x8(%ebp)
   11427:	e8 58 ff ff ff       	call   11384 <do_default_handler>
   1142c:	83 c4 10             	add    $0x10,%esp
}
   1142f:	90                   	nop
   11430:	c9                   	leave  
   11431:	c3                   	ret    

00011432 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11432:	55                   	push   %ebp
   11433:	89 e5                	mov    %esp,%ebp
   11435:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11438:	83 ec 08             	sub    $0x8,%esp
   1143b:	68 fc 35 01 00       	push   $0x135fc
   11440:	ff 75 08             	push   0x8(%ebp)
   11443:	e8 3c ff ff ff       	call   11384 <do_default_handler>
   11448:	83 c4 10             	add    $0x10,%esp
}
   1144b:	90                   	nop
   1144c:	c9                   	leave  
   1144d:	c3                   	ret    

0001144e <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   1144e:	55                   	push   %ebp
   1144f:	89 e5                	mov    %esp,%ebp
   11451:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11454:	83 ec 08             	sub    $0x8,%esp
   11457:	68 11 36 01 00       	push   $0x13611
   1145c:	ff 75 08             	push   0x8(%ebp)
   1145f:	e8 20 ff ff ff       	call   11384 <do_default_handler>
   11464:	83 c4 10             	add    $0x10,%esp
}
   11467:	90                   	nop
   11468:	c9                   	leave  
   11469:	c3                   	ret    

0001146a <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   1146a:	55                   	push   %ebp
   1146b:	89 e5                	mov    %esp,%ebp
   1146d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11470:	83 ec 08             	sub    $0x8,%esp
   11473:	68 24 36 01 00       	push   $0x13624
   11478:	ff 75 08             	push   0x8(%ebp)
   1147b:	e8 04 ff ff ff       	call   11384 <do_default_handler>
   11480:	83 c4 10             	add    $0x10,%esp
}
   11483:	90                   	nop
   11484:	c9                   	leave  
   11485:	c3                   	ret    

00011486 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   11486:	55                   	push   %ebp
   11487:	89 e5                	mov    %esp,%ebp
   11489:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   1148c:	83 ec 08             	sub    $0x8,%esp
   1148f:	68 3a 36 01 00       	push   $0x1363a
   11494:	ff 75 08             	push   0x8(%ebp)
   11497:	e8 e8 fe ff ff       	call   11384 <do_default_handler>
   1149c:	83 c4 10             	add    $0x10,%esp
}
   1149f:	90                   	nop
   114a0:	c9                   	leave  
   114a1:	c3                   	ret    

000114a2 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   114a2:	55                   	push   %ebp
   114a3:	89 e5                	mov    %esp,%ebp
   114a5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   114a8:	83 ec 08             	sub    $0x8,%esp
   114ab:	68 53 36 01 00       	push   $0x13653
   114b0:	ff 75 08             	push   0x8(%ebp)
   114b3:	e8 cc fe ff ff       	call   11384 <do_default_handler>
   114b8:	83 c4 10             	add    $0x10,%esp
}
   114bb:	90                   	nop
   114bc:	c9                   	leave  
   114bd:	c3                   	ret    

000114be <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   114be:	55                   	push   %ebp
   114bf:	89 e5                	mov    %esp,%ebp
   114c1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   114c4:	83 ec 08             	sub    $0x8,%esp
   114c7:	68 70 36 01 00       	push   $0x13670
   114cc:	ff 75 08             	push   0x8(%ebp)
   114cf:	e8 b0 fe ff ff       	call   11384 <do_default_handler>
   114d4:	83 c4 10             	add    $0x10,%esp
}
   114d7:	90                   	nop
   114d8:	c9                   	leave  
   114d9:	c3                   	ret    

000114da <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   114da:	55                   	push   %ebp
   114db:	89 e5                	mov    %esp,%ebp
   114dd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   114e0:	83 ec 08             	sub    $0x8,%esp
   114e3:	68 87 36 01 00       	push   $0x13687
   114e8:	ff 75 08             	push   0x8(%ebp)
   114eb:	e8 94 fe ff ff       	call   11384 <do_default_handler>
   114f0:	83 c4 10             	add    $0x10,%esp
}
   114f3:	90                   	nop
   114f4:	c9                   	leave  
   114f5:	c3                   	ret    

000114f6 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   114f6:	55                   	push   %ebp
   114f7:	89 e5                	mov    %esp,%ebp
   114f9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   114fc:	83 ec 08             	sub    $0x8,%esp
   114ff:	68 9d 36 01 00       	push   $0x1369d
   11504:	ff 75 08             	push   0x8(%ebp)
   11507:	e8 78 fe ff ff       	call   11384 <do_default_handler>
   1150c:	83 c4 10             	add    $0x10,%esp
}
   1150f:	90                   	nop
   11510:	c9                   	leave  
   11511:	c3                   	ret    

00011512 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11512:	55                   	push   %ebp
   11513:	89 e5                	mov    %esp,%ebp
   11515:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   11518:	83 ec 08             	sub    $0x8,%esp
   1151b:	68 bb 36 01 00       	push   $0x136bb
   11520:	ff 75 08             	push   0x8(%ebp)
   11523:	e8 5c fe ff ff       	call   11384 <do_default_handler>
   11528:	83 c4 10             	add    $0x10,%esp
}
   1152b:	90                   	nop
   1152c:	c9                   	leave  
   1152d:	c3                   	ret    

0001152e <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   1152e:	55                   	push   %ebp
   1152f:	89 e5                	mov    %esp,%ebp
   11531:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   11534:	83 ec 08             	sub    $0x8,%esp
   11537:	68 d9 36 01 00       	push   $0x136d9
   1153c:	ff 75 08             	push   0x8(%ebp)
   1153f:	e8 40 fe ff ff       	call   11384 <do_default_handler>
   11544:	83 c4 10             	add    $0x10,%esp
}
   11547:	90                   	nop
   11548:	c9                   	leave  
   11549:	c3                   	ret    

0001154a <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   1154a:	55                   	push   %ebp
   1154b:	89 e5                	mov    %esp,%ebp
   1154d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   11550:	83 ec 08             	sub    $0x8,%esp
   11553:	68 f6 36 01 00       	push   $0x136f6
   11558:	ff 75 08             	push   0x8(%ebp)
   1155b:	e8 24 fe ff ff       	call   11384 <do_default_handler>
   11560:	83 c4 10             	add    $0x10,%esp
}
   11563:	90                   	nop
   11564:	c9                   	leave  
   11565:	c3                   	ret    

00011566 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   11566:	55                   	push   %ebp
   11567:	89 e5                	mov    %esp,%ebp
   11569:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   1156c:	83 ec 08             	sub    $0x8,%esp
   1156f:	68 0b 37 01 00       	push   $0x1370b
   11574:	ff 75 08             	push   0x8(%ebp)
   11577:	e8 08 fe ff ff       	call   11384 <do_default_handler>
   1157c:	83 c4 10             	add    $0x10,%esp
}
   1157f:	90                   	nop
   11580:	c9                   	leave  
   11581:	c3                   	ret    

00011582 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11582:	55                   	push   %ebp
   11583:	89 e5                	mov    %esp,%ebp
   11585:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11588:	83 ec 08             	sub    $0x8,%esp
   1158b:	68 1f 37 01 00       	push   $0x1371f
   11590:	ff 75 08             	push   0x8(%ebp)
   11593:	e8 ec fd ff ff       	call   11384 <do_default_handler>
   11598:	83 c4 10             	add    $0x10,%esp
}
   1159b:	90                   	nop
   1159c:	c9                   	leave  
   1159d:	c3                   	ret    

0001159e <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   1159e:	55                   	push   %ebp
   1159f:	89 e5                	mov    %esp,%ebp
   115a1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   115a4:	83 ec 08             	sub    $0x8,%esp
   115a7:	68 39 37 01 00       	push   $0x13739
   115ac:	ff 75 08             	push   0x8(%ebp)
   115af:	e8 d0 fd ff ff       	call   11384 <do_default_handler>
   115b4:	83 c4 10             	add    $0x10,%esp
}
   115b7:	90                   	nop
   115b8:	c9                   	leave  
   115b9:	c3                   	ret    

000115ba <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   115ba:	55                   	push   %ebp
   115bb:	89 e5                	mov    %esp,%ebp
   115bd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   115c0:	83 ec 08             	sub    $0x8,%esp
   115c3:	68 51 37 01 00       	push   $0x13751
   115c8:	ff 75 08             	push   0x8(%ebp)
   115cb:	e8 b4 fd ff ff       	call   11384 <do_default_handler>
   115d0:	83 c4 10             	add    $0x10,%esp
}
   115d3:	90                   	nop
   115d4:	c9                   	leave  
   115d5:	c3                   	ret    

000115d6 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   115d6:	55                   	push   %ebp
   115d7:	89 e5                	mov    %esp,%ebp
   115d9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   115dc:	83 ec 08             	sub    $0x8,%esp
   115df:	68 69 37 01 00       	push   $0x13769
   115e4:	ff 75 08             	push   0x8(%ebp)
   115e7:	e8 98 fd ff ff       	call   11384 <do_default_handler>
   115ec:	83 c4 10             	add    $0x10,%esp
}
   115ef:	90                   	nop
   115f0:	c9                   	leave  
   115f1:	c3                   	ret    

000115f2 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   115f2:	55                   	push   %ebp
   115f3:	89 e5                	mov    %esp,%ebp
   115f5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   115f8:	83 ec 08             	sub    $0x8,%esp
   115fb:	68 85 37 01 00       	push   $0x13785
   11600:	ff 75 08             	push   0x8(%ebp)
   11603:	e8 7c fd ff ff       	call   11384 <do_default_handler>
   11608:	83 c4 10             	add    $0x10,%esp
}
   1160b:	90                   	nop
   1160c:	c9                   	leave  
   1160d:	c3                   	ret    

0001160e <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   1160e:	55                   	push   %ebp
   1160f:	89 e5                	mov    %esp,%ebp
   11611:	83 ec 08             	sub    $0x8,%esp
   11614:	8b 55 0c             	mov    0xc(%ebp),%edx
   11617:	8b 45 14             	mov    0x14(%ebp),%eax
   1161a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1161e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11622:	8b 45 10             	mov    0x10(%ebp),%eax
   11625:	89 c2                	mov    %eax,%edx
   11627:	8b 45 08             	mov    0x8(%ebp),%eax
   1162a:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1162d:	8b 45 10             	mov    0x10(%ebp),%eax
   11630:	c1 e8 10             	shr    $0x10,%eax
   11633:	89 c2                	mov    %eax,%edx
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1163c:	8b 45 08             	mov    0x8(%ebp),%eax
   1163f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11643:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11647:	8b 45 08             	mov    0x8(%ebp),%eax
   1164a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1164e:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11652:	90                   	nop
   11653:	c9                   	leave  
   11654:	c3                   	ret    

00011655 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11655:	55                   	push   %ebp
   11656:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11658:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   1165f:	7f 06                	jg     11667 <idt_install+0x12>
   11661:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11665:	79 07                	jns    1166e <idt_install+0x19>
   11667:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1166c:	eb 25                	jmp    11693 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   1166e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11671:	8b 55 08             	mov    0x8(%ebp),%edx
   11674:	c1 e2 03             	shl    $0x3,%edx
   11677:	81 c2 c0 f3 02 00    	add    $0x2f3c0,%edx
   1167d:	68 00 8e 00 00       	push   $0x8e00
   11682:	50                   	push   %eax
   11683:	6a 08                	push   $0x8
   11685:	52                   	push   %edx
   11686:	e8 83 ff ff ff       	call   1160e <gate_desc_set>
   1168b:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   1168e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11693:	c9                   	leave  
   11694:	c3                   	ret    

00011695 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11695:	55                   	push   %ebp
   11696:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11698:	6a 11                	push   $0x11
   1169a:	6a 20                	push   $0x20
   1169c:	e8 96 fb ff ff       	call   11237 <outb>
   116a1:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   116a4:	6a 20                	push   $0x20
   116a6:	6a 21                	push   $0x21
   116a8:	e8 8a fb ff ff       	call   11237 <outb>
   116ad:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   116b0:	6a 04                	push   $0x4
   116b2:	6a 21                	push   $0x21
   116b4:	e8 7e fb ff ff       	call   11237 <outb>
   116b9:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   116bc:	6a 01                	push   $0x1
   116be:	6a 21                	push   $0x21
   116c0:	e8 72 fb ff ff       	call   11237 <outb>
   116c5:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   116c8:	6a 11                	push   $0x11
   116ca:	68 a0 00 00 00       	push   $0xa0
   116cf:	e8 63 fb ff ff       	call   11237 <outb>
   116d4:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   116d7:	6a 28                	push   $0x28
   116d9:	68 a1 00 00 00       	push   $0xa1
   116de:	e8 54 fb ff ff       	call   11237 <outb>
   116e3:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   116e6:	6a 02                	push   $0x2
   116e8:	68 a1 00 00 00       	push   $0xa1
   116ed:	e8 45 fb ff ff       	call   11237 <outb>
   116f2:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   116f5:	6a 01                	push   $0x1
   116f7:	68 a1 00 00 00       	push   $0xa1
   116fc:	e8 36 fb ff ff       	call   11237 <outb>
   11701:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11704:	68 fb 00 00 00       	push   $0xfb
   11709:	6a 21                	push   $0x21
   1170b:	e8 27 fb ff ff       	call   11237 <outb>
   11710:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11713:	68 ff 00 00 00       	push   $0xff
   11718:	68 a1 00 00 00       	push   $0xa1
   1171d:	e8 15 fb ff ff       	call   11237 <outb>
   11722:	83 c4 08             	add    $0x8,%esp


}
   11725:	90                   	nop
   11726:	c9                   	leave  
   11727:	c3                   	ret    

00011728 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11728:	55                   	push   %ebp
   11729:	89 e5                	mov    %esp,%ebp
   1172b:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1172e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11735:	eb 14                	jmp    1174b <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11737:	68 2a 00 01 00       	push   $0x1002a
   1173c:	ff 75 fc             	push   -0x4(%ebp)
   1173f:	e8 11 ff ff ff       	call   11655 <idt_install>
   11744:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11747:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1174b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11752:	7e e3                	jle    11737 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11754:	68 47 00 01 00       	push   $0x10047
   11759:	6a 00                	push   $0x0
   1175b:	e8 f5 fe ff ff       	call   11655 <idt_install>
   11760:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11763:	68 64 00 01 00       	push   $0x10064
   11768:	6a 01                	push   $0x1
   1176a:	e8 e6 fe ff ff       	call   11655 <idt_install>
   1176f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11772:	68 81 00 01 00       	push   $0x10081
   11777:	6a 02                	push   $0x2
   11779:	e8 d7 fe ff ff       	call   11655 <idt_install>
   1177e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11781:	68 9e 00 01 00       	push   $0x1009e
   11786:	6a 03                	push   $0x3
   11788:	e8 c8 fe ff ff       	call   11655 <idt_install>
   1178d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11790:	68 bb 00 01 00       	push   $0x100bb
   11795:	6a 04                	push   $0x4
   11797:	e8 b9 fe ff ff       	call   11655 <idt_install>
   1179c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   1179f:	68 d8 00 01 00       	push   $0x100d8
   117a4:	6a 05                	push   $0x5
   117a6:	e8 aa fe ff ff       	call   11655 <idt_install>
   117ab:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   117ae:	68 f5 00 01 00       	push   $0x100f5
   117b3:	6a 06                	push   $0x6
   117b5:	e8 9b fe ff ff       	call   11655 <idt_install>
   117ba:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   117bd:	68 12 01 01 00       	push   $0x10112
   117c2:	6a 07                	push   $0x7
   117c4:	e8 8c fe ff ff       	call   11655 <idt_install>
   117c9:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   117cc:	68 2f 01 01 00       	push   $0x1012f
   117d1:	6a 08                	push   $0x8
   117d3:	e8 7d fe ff ff       	call   11655 <idt_install>
   117d8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   117db:	68 4a 01 01 00       	push   $0x1014a
   117e0:	6a 0a                	push   $0xa
   117e2:	e8 6e fe ff ff       	call   11655 <idt_install>
   117e7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   117ea:	68 65 01 01 00       	push   $0x10165
   117ef:	6a 0b                	push   $0xb
   117f1:	e8 5f fe ff ff       	call   11655 <idt_install>
   117f6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   117f9:	68 80 01 01 00       	push   $0x10180
   117fe:	6a 0c                	push   $0xc
   11800:	e8 50 fe ff ff       	call   11655 <idt_install>
   11805:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11808:	68 9b 01 01 00       	push   $0x1019b
   1180d:	6a 0d                	push   $0xd
   1180f:	e8 41 fe ff ff       	call   11655 <idt_install>
   11814:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11817:	68 b6 01 01 00       	push   $0x101b6
   1181c:	6a 0e                	push   $0xe
   1181e:	e8 32 fe ff ff       	call   11655 <idt_install>
   11823:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11826:	68 d1 01 01 00       	push   $0x101d1
   1182b:	6a 10                	push   $0x10
   1182d:	e8 23 fe ff ff       	call   11655 <idt_install>
   11832:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11835:	68 ee 01 01 00       	push   $0x101ee
   1183a:	6a 11                	push   $0x11
   1183c:	e8 14 fe ff ff       	call   11655 <idt_install>
   11841:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11844:	68 09 02 01 00       	push   $0x10209
   11849:	6a 12                	push   $0x12
   1184b:	e8 05 fe ff ff       	call   11655 <idt_install>
   11850:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11853:	68 26 02 01 00       	push   $0x10226
   11858:	6a 13                	push   $0x13
   1185a:	e8 f6 fd ff ff       	call   11655 <idt_install>
   1185f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11862:	68 43 02 01 00       	push   $0x10243
   11867:	6a 14                	push   $0x14
   11869:	e8 e7 fd ff ff       	call   11655 <idt_install>
   1186e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11871:	68 60 02 01 00       	push   $0x10260
   11876:	6a 15                	push   $0x15
   11878:	e8 d8 fd ff ff       	call   11655 <idt_install>
   1187d:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11880:	b8 c0 f3 02 00       	mov    $0x2f3c0,%eax
   11885:	68 00 08 00 00       	push   $0x800
   1188a:	50                   	push   %eax
   1188b:	e8 c8 f9 ff ff       	call   11258 <lidt>
   11890:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11893:	e8 fd fd ff ff       	call   11695 <init_pic>
}
   11898:	90                   	nop
   11899:	c9                   	leave  
   1189a:	c3                   	ret    

0001189b <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   1189b:	55                   	push   %ebp
   1189c:	89 e5                	mov    %esp,%ebp
   1189e:	53                   	push   %ebx
   1189f:	83 ec 14             	sub    $0x14,%esp
   118a2:	8b 45 08             	mov    0x8(%ebp),%eax
   118a5:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   118a8:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   118ac:	76 7f                	jbe    1192d <idt_enable+0x92>
   118ae:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   118b2:	77 79                	ja     1192d <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   118b4:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   118b8:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   118bc:	77 33                	ja     118f1 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   118be:	6a 21                	push   $0x21
   118c0:	e8 55 f9 ff ff       	call   1121a <inb>
   118c5:	83 c4 04             	add    $0x4,%esp
   118c8:	89 c3                	mov    %eax,%ebx
   118ca:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   118ce:	ba 01 00 00 00       	mov    $0x1,%edx
   118d3:	89 c1                	mov    %eax,%ecx
   118d5:	d3 e2                	shl    %cl,%edx
   118d7:	89 d0                	mov    %edx,%eax
   118d9:	f7 d0                	not    %eax
   118db:	21 d8                	and    %ebx,%eax
   118dd:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   118e0:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   118e4:	50                   	push   %eax
   118e5:	6a 21                	push   $0x21
   118e7:	e8 4b f9 ff ff       	call   11237 <outb>
   118ec:	83 c4 08             	add    $0x8,%esp
   118ef:	eb 3d                	jmp    1192e <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   118f1:	68 a1 00 00 00       	push   $0xa1
   118f6:	e8 1f f9 ff ff       	call   1121a <inb>
   118fb:	83 c4 04             	add    $0x4,%esp
   118fe:	89 c3                	mov    %eax,%ebx
   11900:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11904:	83 e8 08             	sub    $0x8,%eax
   11907:	ba 01 00 00 00       	mov    $0x1,%edx
   1190c:	89 c1                	mov    %eax,%ecx
   1190e:	d3 e2                	shl    %cl,%edx
   11910:	89 d0                	mov    %edx,%eax
   11912:	f7 d0                	not    %eax
   11914:	21 d8                	and    %ebx,%eax
   11916:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11919:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1191d:	50                   	push   %eax
   1191e:	68 a1 00 00 00       	push   $0xa1
   11923:	e8 0f f9 ff ff       	call   11237 <outb>
   11928:	83 c4 08             	add    $0x8,%esp
   1192b:	eb 01                	jmp    1192e <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1192d:	90                   	nop
  }
  
}
   1192e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11931:	c9                   	leave  
   11932:	c3                   	ret    

00011933 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11933:	55                   	push   %ebp
   11934:	89 e5                	mov    %esp,%ebp
   11936:	53                   	push   %ebx
   11937:	83 ec 14             	sub    $0x14,%esp
   1193a:	8b 45 08             	mov    0x8(%ebp),%eax
   1193d:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11940:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11944:	76 7b                	jbe    119c1 <idt_disable+0x8e>
   11946:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   1194a:	77 75                	ja     119c1 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1194c:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11950:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11954:	77 31                	ja     11987 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11956:	6a 21                	push   $0x21
   11958:	e8 bd f8 ff ff       	call   1121a <inb>
   1195d:	83 c4 04             	add    $0x4,%esp
   11960:	89 c3                	mov    %eax,%ebx
   11962:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11966:	ba 01 00 00 00       	mov    $0x1,%edx
   1196b:	89 c1                	mov    %eax,%ecx
   1196d:	d3 e2                	shl    %cl,%edx
   1196f:	89 d0                	mov    %edx,%eax
   11971:	09 d8                	or     %ebx,%eax
   11973:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11976:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1197a:	50                   	push   %eax
   1197b:	6a 21                	push   $0x21
   1197d:	e8 b5 f8 ff ff       	call   11237 <outb>
   11982:	83 c4 08             	add    $0x8,%esp
   11985:	eb 3b                	jmp    119c2 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11987:	68 a1 00 00 00       	push   $0xa1
   1198c:	e8 89 f8 ff ff       	call   1121a <inb>
   11991:	83 c4 04             	add    $0x4,%esp
   11994:	89 c3                	mov    %eax,%ebx
   11996:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1199a:	83 e8 08             	sub    $0x8,%eax
   1199d:	ba 01 00 00 00       	mov    $0x1,%edx
   119a2:	89 c1                	mov    %eax,%ecx
   119a4:	d3 e2                	shl    %cl,%edx
   119a6:	89 d0                	mov    %edx,%eax
   119a8:	09 d8                	or     %ebx,%eax
   119aa:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   119ad:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   119b1:	50                   	push   %eax
   119b2:	68 a1 00 00 00       	push   $0xa1
   119b7:	e8 7b f8 ff ff       	call   11237 <outb>
   119bc:	83 c4 08             	add    $0x8,%esp
   119bf:	eb 01                	jmp    119c2 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   119c1:	90                   	nop
  }
  
}
   119c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   119c5:	c9                   	leave  
   119c6:	c3                   	ret    

000119c7 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   119c7:	55                   	push   %ebp
   119c8:	89 e5                	mov    %esp,%ebp
  cli();
   119ca:	e8 36 f8 ff ff       	call   11205 <cli>
}
   119cf:	90                   	nop
   119d0:	5d                   	pop    %ebp
   119d1:	c3                   	ret    

000119d2 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   119d2:	55                   	push   %ebp
   119d3:	89 e5                	mov    %esp,%ebp
  sti();
   119d5:	e8 32 f8 ff ff       	call   1120c <sti>
}
   119da:	90                   	nop
   119db:	5d                   	pop    %ebp
   119dc:	c3                   	ret    

000119dd <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   119dd:	55                   	push   %ebp
   119de:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   119e0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   119e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119e8:	78 29                	js     11a13 <pic_send_eoi+0x36>
   119ea:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   119ee:	7f 23                	jg     11a13 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   119f0:	6a 20                	push   $0x20
   119f2:	6a 20                	push   $0x20
   119f4:	e8 3e f8 ff ff       	call   11237 <outb>
   119f9:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   119fc:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a00:	7e 12                	jle    11a14 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11a02:	6a 20                	push   $0x20
   11a04:	68 a0 00 00 00       	push   $0xa0
   11a09:	e8 29 f8 ff ff       	call   11237 <outb>
   11a0e:	83 c4 08             	add    $0x8,%esp
   11a11:	eb 01                	jmp    11a14 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11a13:	90                   	nop
  }

}
   11a14:	c9                   	leave  
   11a15:	c3                   	ret    

00011a16 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11a16:	55                   	push   %ebp
   11a17:	89 e5                	mov    %esp,%ebp
   11a19:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11a1c:	e8 5f f8 ff ff       	call   11280 <read_eflags>
   11a21:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11a24:	e8 9e ff ff ff       	call   119c7 <idt_disable_global>
  return state;;
   11a29:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11a2c:	c9                   	leave  
   11a2d:	c3                   	ret    

00011a2e <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11a2e:	55                   	push   %ebp
   11a2f:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11a31:	ff 75 08             	push   0x8(%ebp)
   11a34:	e8 57 f8 ff ff       	call   11290 <write_eflags>
   11a39:	83 c4 04             	add    $0x4,%esp
}
   11a3c:	90                   	nop
   11a3d:	c9                   	leave  
   11a3e:	c3                   	ret    

00011a3f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11a3f:	55                   	push   %ebp
   11a40:	89 e5                	mov    %esp,%ebp
   11a42:	83 ec 08             	sub    $0x8,%esp
   11a45:	8b 45 08             	mov    0x8(%ebp),%eax
   11a48:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a4b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11a4f:	89 d0                	mov    %edx,%eax
   11a51:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11a54:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11a58:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11a5c:	ee                   	out    %al,(%dx)
}
   11a5d:	90                   	nop
   11a5e:	c9                   	leave  
   11a5f:	c3                   	ret    

00011a60 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11a60:	55                   	push   %ebp
   11a61:	89 e5                	mov    %esp,%ebp
   11a63:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11a66:	a1 c0 fb 02 00       	mov    0x2fbc0,%eax
   11a6b:	83 c0 01             	add    $0x1,%eax
   11a6e:	a3 c0 fb 02 00       	mov    %eax,0x2fbc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11a73:	83 ec 0c             	sub    $0xc,%esp
   11a76:	6a 20                	push   $0x20
   11a78:	e8 60 ff ff ff       	call   119dd <pic_send_eoi>
   11a7d:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11a80:	e8 7c f3 ff ff       	call   10e01 <task_slice_end>
}
   11a85:	90                   	nop
   11a86:	c9                   	leave  
   11a87:	c3                   	ret    

00011a88 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11a88:	55                   	push   %ebp
   11a89:	89 e5                	mov    %esp,%ebp
   11a8b:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11a8e:	6a 36                	push   $0x36
   11a90:	6a 43                	push   $0x43
   11a92:	e8 a8 ff ff ff       	call   11a3f <outb>
   11a97:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11a9a:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11aa0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11aa4:	0f b6 c0             	movzbl %al,%eax
   11aa7:	50                   	push   %eax
   11aa8:	6a 40                	push   $0x40
   11aaa:	e8 90 ff ff ff       	call   11a3f <outb>
   11aaf:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11ab2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11ab6:	66 c1 e8 08          	shr    $0x8,%ax
   11aba:	0f b6 c0             	movzbl %al,%eax
   11abd:	50                   	push   %eax
   11abe:	6a 40                	push   $0x40
   11ac0:	e8 7a ff ff ff       	call   11a3f <outb>
   11ac5:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   11ac8:	83 ec 08             	sub    $0x8,%esp
   11acb:	68 7b 02 01 00       	push   $0x1027b
   11ad0:	6a 20                	push   $0x20
   11ad2:	e8 7e fb ff ff       	call   11655 <idt_install>
   11ad7:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11ada:	83 ec 0c             	sub    $0xc,%esp
   11add:	6a 20                	push   $0x20
   11adf:	e8 b7 fd ff ff       	call   1189b <idt_enable>
   11ae4:	83 c4 10             	add    $0x10,%esp

}
   11ae7:	90                   	nop
   11ae8:	c9                   	leave  
   11ae9:	c3                   	ret    

00011aea <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   11aea:	55                   	push   %ebp
   11aeb:	89 e5                	mov    %esp,%ebp
   11aed:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11af0:	c7 05 c0 fb 02 00 00 	movl   $0x0,0x2fbc0
   11af7:	00 00 00 
    init_pit();
   11afa:	e8 89 ff ff ff       	call   11a88 <init_pit>
   11aff:	90                   	nop
   11b00:	c9                   	leave  
   11b01:	c3                   	ret    

00011b02 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11b02:	55                   	push   %ebp
   11b03:	89 e5                	mov    %esp,%ebp
   11b05:	fb                   	sti    
   11b06:	90                   	nop
   11b07:	5d                   	pop    %ebp
   11b08:	c3                   	ret    

00011b09 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   11b09:	55                   	push   %ebp
   11b0a:	89 e5                	mov    %esp,%ebp
   11b0c:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b12:	8b 40 50             	mov    0x50(%eax),%eax
   11b15:	85 c0                	test   %eax,%eax
   11b17:	75 19                	jne    11b32 <kernel_init+0x29>
   11b19:	68 a4 37 01 00       	push   $0x137a4
   11b1e:	68 70 38 01 00       	push   $0x13870
   11b23:	6a 22                	push   $0x22
   11b25:	68 c8 37 01 00       	push   $0x137c8
   11b2a:	e8 a9 08 00 00       	call   123d8 <pannic>
   11b2f:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11b32:	e8 e8 14 00 00       	call   1301f <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11b37:	83 ec 0c             	sub    $0xc,%esp
   11b3a:	ff 75 08             	push   0x8(%ebp)
   11b3d:	e8 de eb ff ff       	call   10720 <memory_init>
   11b42:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   11b45:	e8 b0 f5 ff ff       	call   110fa <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11b4a:	e8 d9 fb ff ff       	call   11728 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11b4f:	e8 96 ff ff ff       	call   11aea <time_init>

    //7.初始化任务管理器
    task_manager_init();
   11b54:	e8 44 f0 ff ff       	call   10b9d <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11b59:	90                   	nop
   11b5a:	c9                   	leave  
   11b5b:	c3                   	ret    

00011b5c <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   11b5c:	55                   	push   %ebp
   11b5d:	89 e5                	mov    %esp,%ebp
   11b5f:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11b62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   11b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b6c:	8d 50 01             	lea    0x1(%eax),%edx
   11b6f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b72:	83 ec 08             	sub    $0x8,%esp
   11b75:	50                   	push   %eax
   11b76:	68 fd 37 01 00       	push   $0x137fd
   11b7b:	e8 27 15 00 00       	call   130a7 <log_printf>
   11b80:	83 c4 10             	add    $0x10,%esp
   11b83:	eb e4                	jmp    11b69 <test_task_1+0xd>

00011b85 <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   11b85:	55                   	push   %ebp
   11b86:	89 e5                	mov    %esp,%ebp
   11b88:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   11b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b95:	8d 50 01             	lea    0x1(%eax),%edx
   11b98:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b9b:	83 ec 08             	sub    $0x8,%esp
   11b9e:	50                   	push   %eax
   11b9f:	68 08 38 01 00       	push   $0x13808
   11ba4:	e8 fe 14 00 00       	call   130a7 <log_printf>
   11ba9:	83 c4 10             	add    $0x10,%esp
   11bac:	eb e4                	jmp    11b92 <test_task_2+0xd>

00011bae <init_main>:
     }
}



void init_main(void) {
   11bae:	55                   	push   %ebp
   11baf:	89 e5                	mov    %esp,%ebp
   11bb1:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   11bb4:	83 ec 0c             	sub    $0xc,%esp
   11bb7:	68 13 38 01 00       	push   $0x13813
   11bbc:	e8 e6 14 00 00       	call   130a7 <log_printf>
   11bc1:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11bc4:	83 ec 04             	sub    $0x4,%esp
   11bc7:	68 2b 38 01 00       	push   $0x1382b
   11bcc:	68 31 38 01 00       	push   $0x13831
   11bd1:	68 36 38 01 00       	push   $0x13836
   11bd6:	e8 cc 14 00 00       	call   130a7 <log_printf>
   11bdb:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11bde:	e8 35 f0 ff ff       	call   10c18 <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11be3:	ba 60 0d 03 00       	mov    $0x30d60,%edx
   11be8:	b8 5c 1b 01 00       	mov    $0x11b5c,%eax
   11bed:	52                   	push   %edx
   11bee:	50                   	push   %eax
   11bef:	68 4c 38 01 00       	push   $0x1384c
   11bf4:	68 e0 fb 02 00       	push   $0x2fbe0
   11bf9:	e8 b1 ee ff ff       	call   10aaf <task_init>
   11bfe:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11c01:	ba 60 1d 03 00       	mov    $0x31d60,%edx
   11c06:	b8 85 1b 01 00       	mov    $0x11b85,%eax
   11c0b:	52                   	push   %edx
   11c0c:	50                   	push   %eax
   11c0d:	68 58 38 01 00       	push   $0x13858
   11c12:	68 a0 fc 02 00       	push   $0x2fca0
   11c17:	e8 93 ee ff ff       	call   10aaf <task_init>
   11c1c:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   11c1f:	e8 de fe ff ff       	call   11b02 <sti>

    int count = 0;
   11c24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   11c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c2e:	8d 50 01             	lea    0x1(%eax),%edx
   11c31:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11c34:	83 ec 08             	sub    $0x8,%esp
   11c37:	50                   	push   %eax
   11c38:	68 64 38 01 00       	push   $0x13864
   11c3d:	e8 65 14 00 00       	call   130a7 <log_printf>
   11c42:	83 c4 10             	add    $0x10,%esp
   11c45:	eb e4                	jmp    11c2b <init_main+0x7d>

00011c47 <list_init>:
static inline void list_init(list_t *list) {
   11c47:	55                   	push   %ebp
   11c48:	89 e5                	mov    %esp,%ebp
   11c4a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11c4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c51:	75 19                	jne    11c6c <list_init+0x25>
   11c53:	68 7c 38 01 00       	push   $0x1387c
   11c58:	68 28 39 01 00       	push   $0x13928
   11c5d:	6a 31                	push   $0x31
   11c5f:	68 90 38 01 00       	push   $0x13890
   11c64:	e8 6f 07 00 00       	call   123d8 <pannic>
   11c69:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11c6c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11c76:	8b 45 08             	mov    0x8(%ebp),%eax
   11c79:	8b 50 04             	mov    0x4(%eax),%edx
   11c7c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11c81:	8b 45 08             	mov    0x8(%ebp),%eax
   11c84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11c8b:	90                   	nop
   11c8c:	c9                   	leave  
   11c8d:	c3                   	ret    

00011c8e <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11c8e:	55                   	push   %ebp
   11c8f:	89 e5                	mov    %esp,%ebp
   11c91:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11c94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c98:	75 19                	jne    11cb3 <list_is_empty+0x25>
   11c9a:	68 7c 38 01 00       	push   $0x1387c
   11c9f:	68 34 39 01 00       	push   $0x13934
   11ca4:	6a 38                	push   $0x38
   11ca6:	68 90 38 01 00       	push   $0x13890
   11cab:	e8 28 07 00 00       	call   123d8 <pannic>
   11cb0:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11cb3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb6:	8b 40 08             	mov    0x8(%eax),%eax
   11cb9:	85 c0                	test   %eax,%eax
   11cbb:	0f 94 c0             	sete   %al
   11cbe:	0f b6 c0             	movzbl %al,%eax
}
   11cc1:	c9                   	leave  
   11cc2:	c3                   	ret    

00011cc3 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11cc3:	55                   	push   %ebp
   11cc4:	89 e5                	mov    %esp,%ebp
   11cc6:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11cc9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ccd:	75 19                	jne    11ce8 <mutex_init+0x25>
   11ccf:	68 ce 38 01 00       	push   $0x138ce
   11cd4:	68 1c 39 01 00       	push   $0x1391c
   11cd9:	6a 15                	push   $0x15
   11cdb:	68 e4 38 01 00       	push   $0x138e4
   11ce0:	e8 f3 06 00 00       	call   123d8 <pannic>
   11ce5:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   11ceb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11cf2:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11cfb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cfe:	83 c0 08             	add    $0x8,%eax
   11d01:	83 ec 0c             	sub    $0xc,%esp
   11d04:	50                   	push   %eax
   11d05:	e8 3d ff ff ff       	call   11c47 <list_init>
   11d0a:	83 c4 10             	add    $0x10,%esp
}
   11d0d:	90                   	nop
   11d0e:	c9                   	leave  
   11d0f:	c3                   	ret    

00011d10 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11d10:	55                   	push   %ebp
   11d11:	89 e5                	mov    %esp,%ebp
   11d13:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11d16:	e8 fb fc ff ff       	call   11a16 <idt_enter_protection>
   11d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11d1e:	e8 0b f0 ff ff       	call   10d2e <task_current>
   11d23:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11d26:	8b 45 08             	mov    0x8(%ebp),%eax
   11d29:	8b 40 04             	mov    0x4(%eax),%eax
   11d2c:	85 c0                	test   %eax,%eax
   11d2e:	75 19                	jne    11d49 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11d30:	8b 45 08             	mov    0x8(%ebp),%eax
   11d33:	8b 40 04             	mov    0x4(%eax),%eax
   11d36:	8d 50 01             	lea    0x1(%eax),%edx
   11d39:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3c:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d42:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11d45:	89 10                	mov    %edx,(%eax)
   11d47:	eb 47                	jmp    11d90 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11d49:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4c:	8b 00                	mov    (%eax),%eax
   11d4e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11d51:	75 11                	jne    11d64 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11d53:	8b 45 08             	mov    0x8(%ebp),%eax
   11d56:	8b 40 04             	mov    0x4(%eax),%eax
   11d59:	8d 50 01             	lea    0x1(%eax),%edx
   11d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5f:	89 50 04             	mov    %edx,0x4(%eax)
   11d62:	eb 2c                	jmp    11d90 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11d64:	83 ec 0c             	sub    $0xc,%esp
   11d67:	ff 75 f0             	push   -0x10(%ebp)
   11d6a:	e8 46 ef ff ff       	call   10cb5 <task_set_unready>
   11d6f:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d75:	8d 50 40             	lea    0x40(%eax),%edx
   11d78:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7b:	83 c0 08             	add    $0x8,%eax
   11d7e:	83 ec 08             	sub    $0x8,%esp
   11d81:	52                   	push   %edx
   11d82:	50                   	push   %eax
   11d83:	e8 9b 0f 00 00       	call   12d23 <list_insert_last>
   11d88:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11d8b:	e8 a8 ef ff ff       	call   10d38 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11d90:	83 ec 0c             	sub    $0xc,%esp
   11d93:	ff 75 f4             	push   -0xc(%ebp)
   11d96:	e8 93 fc ff ff       	call   11a2e <idt_leave_protection>
   11d9b:	83 c4 10             	add    $0x10,%esp
}
   11d9e:	90                   	nop
   11d9f:	c9                   	leave  
   11da0:	c3                   	ret    

00011da1 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11da1:	55                   	push   %ebp
   11da2:	89 e5                	mov    %esp,%ebp
   11da4:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11da7:	e8 6a fc ff ff       	call   11a16 <idt_enter_protection>
   11dac:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11daf:	e8 7a ef ff ff       	call   10d2e <task_current>
   11db4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11db7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dba:	8b 00                	mov    (%eax),%eax
   11dbc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11dbf:	0f 85 83 00 00 00    	jne    11e48 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11dc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc8:	8b 40 04             	mov    0x4(%eax),%eax
   11dcb:	8d 50 ff             	lea    -0x1(%eax),%edx
   11dce:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd1:	89 50 04             	mov    %edx,0x4(%eax)
   11dd4:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd7:	8b 40 04             	mov    0x4(%eax),%eax
   11dda:	85 c0                	test   %eax,%eax
   11ddc:	75 6a                	jne    11e48 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11dde:	8b 45 08             	mov    0x8(%ebp),%eax
   11de1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11de7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dea:	83 c0 08             	add    $0x8,%eax
   11ded:	83 ec 0c             	sub    $0xc,%esp
   11df0:	50                   	push   %eax
   11df1:	e8 98 fe ff ff       	call   11c8e <list_is_empty>
   11df6:	83 c4 10             	add    $0x10,%esp
   11df9:	85 c0                	test   %eax,%eax
   11dfb:	75 4b                	jne    11e48 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11dfd:	8b 45 08             	mov    0x8(%ebp),%eax
   11e00:	83 c0 08             	add    $0x8,%eax
   11e03:	83 ec 0c             	sub    $0xc,%esp
   11e06:	50                   	push   %eax
   11e07:	e8 a6 0f 00 00       	call   12db2 <list_remove_first>
   11e0c:	83 c4 10             	add    $0x10,%esp
   11e0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11e12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e16:	74 08                	je     11e20 <mutex_unlock+0x7f>
   11e18:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e1b:	83 e8 40             	sub    $0x40,%eax
   11e1e:	eb 05                	jmp    11e25 <mutex_unlock+0x84>
   11e20:	b8 00 00 00 00       	mov    $0x0,%eax
   11e25:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11e28:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11e32:	8b 45 08             	mov    0x8(%ebp),%eax
   11e35:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11e38:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11e3a:	83 ec 0c             	sub    $0xc,%esp
   11e3d:	ff 75 e8             	push   -0x18(%ebp)
   11e40:	e8 25 ee ff ff       	call   10c6a <task_set_ready>
   11e45:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11e48:	83 ec 0c             	sub    $0xc,%esp
   11e4b:	ff 75 f4             	push   -0xc(%ebp)
   11e4e:	e8 db fb ff ff       	call   11a2e <idt_leave_protection>
   11e53:	83 c4 10             	add    $0x10,%esp
}
   11e56:	90                   	nop
   11e57:	c9                   	leave  
   11e58:	c3                   	ret    

00011e59 <list_init>:
static inline void list_init(list_t *list) {
   11e59:	55                   	push   %ebp
   11e5a:	89 e5                	mov    %esp,%ebp
   11e5c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e63:	75 19                	jne    11e7e <list_init+0x25>
   11e65:	68 44 39 01 00       	push   $0x13944
   11e6a:	68 e8 39 01 00       	push   $0x139e8
   11e6f:	6a 31                	push   $0x31
   11e71:	68 58 39 01 00       	push   $0x13958
   11e76:	e8 5d 05 00 00       	call   123d8 <pannic>
   11e7b:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11e7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e81:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e88:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8b:	8b 50 04             	mov    0x4(%eax),%edx
   11e8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e91:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11e93:	8b 45 08             	mov    0x8(%ebp),%eax
   11e96:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11e9d:	90                   	nop
   11e9e:	c9                   	leave  
   11e9f:	c3                   	ret    

00011ea0 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11ea0:	55                   	push   %ebp
   11ea1:	89 e5                	mov    %esp,%ebp
   11ea3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ea6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11eaa:	75 19                	jne    11ec5 <list_is_empty+0x25>
   11eac:	68 44 39 01 00       	push   $0x13944
   11eb1:	68 f4 39 01 00       	push   $0x139f4
   11eb6:	6a 38                	push   $0x38
   11eb8:	68 58 39 01 00       	push   $0x13958
   11ebd:	e8 16 05 00 00       	call   123d8 <pannic>
   11ec2:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11ec5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec8:	8b 40 08             	mov    0x8(%eax),%eax
   11ecb:	85 c0                	test   %eax,%eax
   11ecd:	0f 94 c0             	sete   %al
   11ed0:	0f b6 c0             	movzbl %al,%eax
}
   11ed3:	c9                   	leave  
   11ed4:	c3                   	ret    

00011ed5 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11ed5:	55                   	push   %ebp
   11ed6:	89 e5                	mov    %esp,%ebp
   11ed8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11edb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11edf:	75 19                	jne    11efa <sem_init+0x25>
   11ee1:	68 96 39 01 00       	push   $0x13996
   11ee6:	68 dc 39 01 00       	push   $0x139dc
   11eeb:	6a 18                	push   $0x18
   11eed:	68 a8 39 01 00       	push   $0x139a8
   11ef2:	e8 e1 04 00 00       	call   123d8 <pannic>
   11ef7:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11efa:	8b 45 08             	mov    0x8(%ebp),%eax
   11efd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11f03:	8b 45 08             	mov    0x8(%ebp),%eax
   11f06:	83 c0 04             	add    $0x4,%eax
   11f09:	83 ec 0c             	sub    $0xc,%esp
   11f0c:	50                   	push   %eax
   11f0d:	e8 47 ff ff ff       	call   11e59 <list_init>
   11f12:	83 c4 10             	add    $0x10,%esp
}
   11f15:	90                   	nop
   11f16:	c9                   	leave  
   11f17:	c3                   	ret    

00011f18 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11f18:	55                   	push   %ebp
   11f19:	89 e5                	mov    %esp,%ebp
   11f1b:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11f1e:	e8 f3 fa ff ff       	call   11a16 <idt_enter_protection>
   11f23:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11f26:	8b 45 08             	mov    0x8(%ebp),%eax
   11f29:	8b 00                	mov    (%eax),%eax
   11f2b:	85 c0                	test   %eax,%eax
   11f2d:	7e 0f                	jle    11f3e <sem_wait+0x26>
        --sem->count;   
   11f2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f32:	8b 00                	mov    (%eax),%eax
   11f34:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f37:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3a:	89 10                	mov    %edx,(%eax)
   11f3c:	eb 34                	jmp    11f72 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11f3e:	e8 eb ed ff ff       	call   10d2e <task_current>
   11f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11f46:	83 ec 0c             	sub    $0xc,%esp
   11f49:	ff 75 f0             	push   -0x10(%ebp)
   11f4c:	e8 64 ed ff ff       	call   10cb5 <task_set_unready>
   11f51:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f57:	8d 50 40             	lea    0x40(%eax),%edx
   11f5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5d:	83 c0 04             	add    $0x4,%eax
   11f60:	83 ec 08             	sub    $0x8,%esp
   11f63:	52                   	push   %edx
   11f64:	50                   	push   %eax
   11f65:	e8 b9 0d 00 00       	call   12d23 <list_insert_last>
   11f6a:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11f6d:	e8 c6 ed ff ff       	call   10d38 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11f72:	83 ec 0c             	sub    $0xc,%esp
   11f75:	ff 75 f4             	push   -0xc(%ebp)
   11f78:	e8 b1 fa ff ff       	call   11a2e <idt_leave_protection>
   11f7d:	83 c4 10             	add    $0x10,%esp
}
   11f80:	90                   	nop
   11f81:	c9                   	leave  
   11f82:	c3                   	ret    

00011f83 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11f83:	55                   	push   %ebp
   11f84:	89 e5                	mov    %esp,%ebp
   11f86:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11f89:	e8 88 fa ff ff       	call   11a16 <idt_enter_protection>
   11f8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11f91:	8b 45 08             	mov    0x8(%ebp),%eax
   11f94:	83 c0 04             	add    $0x4,%eax
   11f97:	83 ec 0c             	sub    $0xc,%esp
   11f9a:	50                   	push   %eax
   11f9b:	e8 00 ff ff ff       	call   11ea0 <list_is_empty>
   11fa0:	83 c4 10             	add    $0x10,%esp
   11fa3:	85 c0                	test   %eax,%eax
   11fa5:	75 3b                	jne    11fe2 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11fa7:	8b 45 08             	mov    0x8(%ebp),%eax
   11faa:	83 c0 04             	add    $0x4,%eax
   11fad:	83 ec 0c             	sub    $0xc,%esp
   11fb0:	50                   	push   %eax
   11fb1:	e8 fc 0d 00 00       	call   12db2 <list_remove_first>
   11fb6:	83 c4 10             	add    $0x10,%esp
   11fb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11fbc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11fc0:	74 08                	je     11fca <sem_notify+0x47>
   11fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fc5:	83 e8 40             	sub    $0x40,%eax
   11fc8:	eb 05                	jmp    11fcf <sem_notify+0x4c>
   11fca:	b8 00 00 00 00       	mov    $0x0,%eax
   11fcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11fd2:	83 ec 0c             	sub    $0xc,%esp
   11fd5:	ff 75 ec             	push   -0x14(%ebp)
   11fd8:	e8 8d ec ff ff       	call   10c6a <task_set_ready>
   11fdd:	83 c4 10             	add    $0x10,%esp
   11fe0:	eb 0d                	jmp    11fef <sem_notify+0x6c>
    } else {
        sem->count++;
   11fe2:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe5:	8b 00                	mov    (%eax),%eax
   11fe7:	8d 50 01             	lea    0x1(%eax),%edx
   11fea:	8b 45 08             	mov    0x8(%ebp),%eax
   11fed:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11fef:	83 ec 0c             	sub    $0xc,%esp
   11ff2:	ff 75 f4             	push   -0xc(%ebp)
   11ff5:	e8 34 fa ff ff       	call   11a2e <idt_leave_protection>
   11ffa:	83 c4 10             	add    $0x10,%esp

}
   11ffd:	90                   	nop
   11ffe:	c9                   	leave  
   11fff:	c3                   	ret    

00012000 <sem_count>:

int sem_count(sem_t *sem) {
   12000:	55                   	push   %ebp
   12001:	89 e5                	mov    %esp,%ebp
   12003:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12006:	e8 0b fa ff ff       	call   11a16 <idt_enter_protection>
   1200b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1200e:	8b 45 08             	mov    0x8(%ebp),%eax
   12011:	8b 00                	mov    (%eax),%eax
   12013:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12016:	83 ec 0c             	sub    $0xc,%esp
   12019:	ff 75 f4             	push   -0xc(%ebp)
   1201c:	e8 0d fa ff ff       	call   11a2e <idt_leave_protection>
   12021:	83 c4 10             	add    $0x10,%esp

    return count;
   12024:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12027:	c9                   	leave  
   12028:	c3                   	ret    

00012029 <list_init>:
static inline void list_init(list_t *list) {
   12029:	55                   	push   %ebp
   1202a:	89 e5                	mov    %esp,%ebp
   1202c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1202f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12033:	75 19                	jne    1204e <list_init+0x25>
   12035:	68 04 3a 01 00       	push   $0x13a04
   1203a:	68 08 3b 01 00       	push   $0x13b08
   1203f:	6a 31                	push   $0x31
   12041:	68 18 3a 01 00       	push   $0x13a18
   12046:	e8 8d 03 00 00       	call   123d8 <pannic>
   1204b:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1204e:	8b 45 08             	mov    0x8(%ebp),%eax
   12051:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12058:	8b 45 08             	mov    0x8(%ebp),%eax
   1205b:	8b 50 04             	mov    0x4(%eax),%edx
   1205e:	8b 45 08             	mov    0x8(%ebp),%eax
   12061:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12063:	8b 45 08             	mov    0x8(%ebp),%eax
   12066:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1206d:	90                   	nop
   1206e:	c9                   	leave  
   1206f:	c3                   	ret    

00012070 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12070:	55                   	push   %ebp
   12071:	89 e5                	mov    %esp,%ebp
   12073:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12076:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1207a:	75 19                	jne    12095 <list_get_size+0x25>
   1207c:	68 04 3a 01 00       	push   $0x13a04
   12081:	68 14 3b 01 00       	push   $0x13b14
   12086:	6a 3e                	push   $0x3e
   12088:	68 18 3a 01 00       	push   $0x13a18
   1208d:	e8 46 03 00 00       	call   123d8 <pannic>
   12092:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12095:	8b 45 08             	mov    0x8(%ebp),%eax
   12098:	8b 40 08             	mov    0x8(%eax),%eax
}
   1209b:	c9                   	leave  
   1209c:	c3                   	ret    

0001209d <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   1209d:	55                   	push   %ebp
   1209e:	89 e5                	mov    %esp,%ebp
   120a0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   120a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120a7:	75 19                	jne    120c2 <list_get_first+0x25>
   120a9:	68 04 3a 01 00       	push   $0x13a04
   120ae:	68 34 3b 01 00       	push   $0x13b34
   120b3:	6a 44                	push   $0x44
   120b5:	68 18 3a 01 00       	push   $0x13a18
   120ba:	e8 19 03 00 00       	call   123d8 <pannic>
   120bf:	83 c4 10             	add    $0x10,%esp
    return list->first;
   120c2:	8b 45 08             	mov    0x8(%ebp),%eax
   120c5:	8b 00                	mov    (%eax),%eax
}
   120c7:	c9                   	leave  
   120c8:	c3                   	ret    

000120c9 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   120c9:	55                   	push   %ebp
   120ca:	89 e5                	mov    %esp,%ebp
   120cc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   120cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120d3:	75 19                	jne    120ee <list_get_last+0x25>
   120d5:	68 04 3a 01 00       	push   $0x13a04
   120da:	68 24 3b 01 00       	push   $0x13b24
   120df:	6a 4a                	push   $0x4a
   120e1:	68 18 3a 01 00       	push   $0x13a18
   120e6:	e8 ed 02 00 00       	call   123d8 <pannic>
   120eb:	83 c4 10             	add    $0x10,%esp

    return list->last;
   120ee:	8b 45 08             	mov    0x8(%ebp),%eax
   120f1:	8b 40 04             	mov    0x4(%eax),%eax
}
   120f4:	c9                   	leave  
   120f5:	c3                   	ret    

000120f6 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   120f6:	55                   	push   %ebp
   120f7:	89 e5                	mov    %esp,%ebp
   120f9:	56                   	push   %esi
   120fa:	53                   	push   %ebx
   120fb:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   120fe:	83 ec 0c             	sub    $0xc,%esp
   12101:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12104:	50                   	push   %eax
   12105:	e8 1f ff ff ff       	call   12029 <list_init>
   1210a:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1210d:	83 ec 0c             	sub    $0xc,%esp
   12110:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12113:	50                   	push   %eax
   12114:	e8 57 ff ff ff       	call   12070 <list_get_size>
   12119:	83 c4 10             	add    $0x10,%esp
   1211c:	89 c6                	mov    %eax,%esi
   1211e:	83 ec 0c             	sub    $0xc,%esp
   12121:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12124:	50                   	push   %eax
   12125:	e8 9f ff ff ff       	call   120c9 <list_get_last>
   1212a:	83 c4 10             	add    $0x10,%esp
   1212d:	89 c3                	mov    %eax,%ebx
   1212f:	83 ec 0c             	sub    $0xc,%esp
   12132:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12135:	50                   	push   %eax
   12136:	e8 62 ff ff ff       	call   1209d <list_get_first>
   1213b:	83 c4 10             	add    $0x10,%esp
   1213e:	56                   	push   %esi
   1213f:	53                   	push   %ebx
   12140:	50                   	push   %eax
   12141:	68 58 3a 01 00       	push   $0x13a58
   12146:	e8 5c 0f 00 00       	call   130a7 <log_printf>
   1214b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   1214e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12155:	eb 3f                	jmp    12196 <list_test+0xa0>
        list_node_t *node = nodes + i;
   12157:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1215a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12161:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12164:	01 d0                	add    %edx,%eax
   12166:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   12169:	8b 45 d0             	mov    -0x30(%ebp),%eax
   1216c:	83 ec 04             	sub    $0x4,%esp
   1216f:	50                   	push   %eax
   12170:	ff 75 f4             	push   -0xc(%ebp)
   12173:	68 80 3a 01 00       	push   $0x13a80
   12178:	e8 2a 0f 00 00       	call   130a7 <log_printf>
   1217d:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   12180:	83 ec 08             	sub    $0x8,%esp
   12183:	ff 75 d0             	push   -0x30(%ebp)
   12186:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12189:	50                   	push   %eax
   1218a:	e8 09 0b 00 00       	call   12c98 <list_insert_first>
   1218f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12192:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12196:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1219a:	7e bb                	jle    12157 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1219c:	83 ec 0c             	sub    $0xc,%esp
   1219f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121a2:	50                   	push   %eax
   121a3:	e8 c8 fe ff ff       	call   12070 <list_get_size>
   121a8:	83 c4 10             	add    $0x10,%esp
   121ab:	89 c6                	mov    %eax,%esi
   121ad:	83 ec 0c             	sub    $0xc,%esp
   121b0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121b3:	50                   	push   %eax
   121b4:	e8 10 ff ff ff       	call   120c9 <list_get_last>
   121b9:	83 c4 10             	add    $0x10,%esp
   121bc:	89 c3                	mov    %eax,%ebx
   121be:	83 ec 0c             	sub    $0xc,%esp
   121c1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121c4:	50                   	push   %eax
   121c5:	e8 d3 fe ff ff       	call   1209d <list_get_first>
   121ca:	83 c4 10             	add    $0x10,%esp
   121cd:	56                   	push   %esi
   121ce:	53                   	push   %ebx
   121cf:	50                   	push   %eax
   121d0:	68 58 3a 01 00       	push   $0x13a58
   121d5:	e8 cd 0e 00 00       	call   130a7 <log_printf>
   121da:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   121dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   121e4:	eb 2d                	jmp    12213 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   121e6:	83 ec 0c             	sub    $0xc,%esp
   121e9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121ec:	50                   	push   %eax
   121ed:	e8 c0 0b 00 00       	call   12db2 <list_remove_first>
   121f2:	83 c4 10             	add    $0x10,%esp
   121f5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   121f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   121fb:	83 ec 04             	sub    $0x4,%esp
   121fe:	50                   	push   %eax
   121ff:	ff 75 f0             	push   -0x10(%ebp)
   12202:	68 9f 3a 01 00       	push   $0x13a9f
   12207:	e8 9b 0e 00 00       	call   130a7 <log_printf>
   1220c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1220f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12213:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12217:	7e cd                	jle    121e6 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12219:	83 ec 0c             	sub    $0xc,%esp
   1221c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1221f:	50                   	push   %eax
   12220:	e8 4b fe ff ff       	call   12070 <list_get_size>
   12225:	83 c4 10             	add    $0x10,%esp
   12228:	89 c6                	mov    %eax,%esi
   1222a:	83 ec 0c             	sub    $0xc,%esp
   1222d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12230:	50                   	push   %eax
   12231:	e8 93 fe ff ff       	call   120c9 <list_get_last>
   12236:	83 c4 10             	add    $0x10,%esp
   12239:	89 c3                	mov    %eax,%ebx
   1223b:	83 ec 0c             	sub    $0xc,%esp
   1223e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12241:	50                   	push   %eax
   12242:	e8 56 fe ff ff       	call   1209d <list_get_first>
   12247:	83 c4 10             	add    $0x10,%esp
   1224a:	56                   	push   %esi
   1224b:	53                   	push   %ebx
   1224c:	50                   	push   %eax
   1224d:	68 58 3a 01 00       	push   $0x13a58
   12252:	e8 50 0e 00 00       	call   130a7 <log_printf>
   12257:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   1225a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12261:	eb 3f                	jmp    122a2 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12263:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12266:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1226d:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12270:	01 d0                	add    %edx,%eax
   12272:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12275:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12278:	83 ec 04             	sub    $0x4,%esp
   1227b:	50                   	push   %eax
   1227c:	ff 75 ec             	push   -0x14(%ebp)
   1227f:	68 b6 3a 01 00       	push   $0x13ab6
   12284:	e8 1e 0e 00 00       	call   130a7 <log_printf>
   12289:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1228c:	83 ec 08             	sub    $0x8,%esp
   1228f:	ff 75 d8             	push   -0x28(%ebp)
   12292:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12295:	50                   	push   %eax
   12296:	e8 88 0a 00 00       	call   12d23 <list_insert_last>
   1229b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1229e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   122a2:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   122a6:	7e bb                	jle    12263 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   122a8:	83 ec 0c             	sub    $0xc,%esp
   122ab:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122ae:	50                   	push   %eax
   122af:	e8 bc fd ff ff       	call   12070 <list_get_size>
   122b4:	83 c4 10             	add    $0x10,%esp
   122b7:	89 c6                	mov    %eax,%esi
   122b9:	83 ec 0c             	sub    $0xc,%esp
   122bc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122bf:	50                   	push   %eax
   122c0:	e8 04 fe ff ff       	call   120c9 <list_get_last>
   122c5:	83 c4 10             	add    $0x10,%esp
   122c8:	89 c3                	mov    %eax,%ebx
   122ca:	83 ec 0c             	sub    $0xc,%esp
   122cd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122d0:	50                   	push   %eax
   122d1:	e8 c7 fd ff ff       	call   1209d <list_get_first>
   122d6:	83 c4 10             	add    $0x10,%esp
   122d9:	56                   	push   %esi
   122da:	53                   	push   %ebx
   122db:	50                   	push   %eax
   122dc:	68 58 3a 01 00       	push   $0x13a58
   122e1:	e8 c1 0d 00 00       	call   130a7 <log_printf>
   122e6:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   122e9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   122f0:	eb 2d                	jmp    1231f <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   122f2:	83 ec 0c             	sub    $0xc,%esp
   122f5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122f8:	50                   	push   %eax
   122f9:	e8 65 0b 00 00       	call   12e63 <list_remove_last>
   122fe:	83 c4 10             	add    $0x10,%esp
   12301:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12304:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12307:	83 ec 04             	sub    $0x4,%esp
   1230a:	50                   	push   %eax
   1230b:	ff 75 e8             	push   -0x18(%ebp)
   1230e:	68 d4 3a 01 00       	push   $0x13ad4
   12313:	e8 8f 0d 00 00       	call   130a7 <log_printf>
   12318:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1231b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1231f:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12323:	7e cd                	jle    122f2 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12325:	83 ec 0c             	sub    $0xc,%esp
   12328:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1232b:	50                   	push   %eax
   1232c:	e8 3f fd ff ff       	call   12070 <list_get_size>
   12331:	83 c4 10             	add    $0x10,%esp
   12334:	89 c6                	mov    %eax,%esi
   12336:	83 ec 0c             	sub    $0xc,%esp
   12339:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1233c:	50                   	push   %eax
   1233d:	e8 87 fd ff ff       	call   120c9 <list_get_last>
   12342:	83 c4 10             	add    $0x10,%esp
   12345:	89 c3                	mov    %eax,%ebx
   12347:	83 ec 0c             	sub    $0xc,%esp
   1234a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1234d:	50                   	push   %eax
   1234e:	e8 4a fd ff ff       	call   1209d <list_get_first>
   12353:	83 c4 10             	add    $0x10,%esp
   12356:	56                   	push   %esi
   12357:	53                   	push   %ebx
   12358:	50                   	push   %eax
   12359:	68 58 3a 01 00       	push   $0x13a58
   1235e:	e8 44 0d 00 00       	call   130a7 <log_printf>
   12363:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12366:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   1236d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12374:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   1237b:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12382:	8d 45 90             	lea    -0x70(%ebp),%eax
   12385:	83 c0 04             	add    $0x4,%eax
   12388:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   1238b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1238f:	74 08                	je     12399 <list_test+0x2a3>
   12391:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12394:	83 e8 04             	sub    $0x4,%eax
   12397:	eb 05                	jmp    1239e <list_test+0x2a8>
   12399:	b8 00 00 00 00       	mov    $0x0,%eax
   1239e:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   123a1:	8d 45 90             	lea    -0x70(%ebp),%eax
   123a4:	83 ec 08             	sub    $0x8,%esp
   123a7:	50                   	push   %eax
   123a8:	68 ea 3a 01 00       	push   $0x13aea
   123ad:	e8 f5 0c 00 00       	call   130a7 <log_printf>
   123b2:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   123b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
   123b8:	83 ec 08             	sub    $0x8,%esp
   123bb:	50                   	push   %eax
   123bc:	68 f8 3a 01 00       	push   $0x13af8
   123c1:	e8 e1 0c 00 00       	call   130a7 <log_printf>
   123c6:	83 c4 10             	add    $0x10,%esp

 }
   123c9:	90                   	nop
   123ca:	8d 65 f8             	lea    -0x8(%ebp),%esp
   123cd:	5b                   	pop    %ebx
   123ce:	5e                   	pop    %esi
   123cf:	5d                   	pop    %ebp
   123d0:	c3                   	ret    

000123d1 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   123d1:	55                   	push   %ebp
   123d2:	89 e5                	mov    %esp,%ebp
   123d4:	f4                   	hlt    
   123d5:	90                   	nop
   123d6:	5d                   	pop    %ebp
   123d7:	c3                   	ret    

000123d8 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   123d8:	55                   	push   %ebp
   123d9:	89 e5                	mov    %esp,%ebp
   123db:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   123de:	83 ec 08             	sub    $0x8,%esp
   123e1:	ff 75 14             	push   0x14(%ebp)
   123e4:	68 43 3b 01 00       	push   $0x13b43
   123e9:	e8 b9 0c 00 00       	call   130a7 <log_printf>
   123ee:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   123f1:	ff 75 10             	push   0x10(%ebp)
   123f4:	ff 75 0c             	push   0xc(%ebp)
   123f7:	ff 75 08             	push   0x8(%ebp)
   123fa:	68 54 3b 01 00       	push   $0x13b54
   123ff:	e8 a3 0c 00 00       	call   130a7 <log_printf>
   12404:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12407:	e8 c5 ff ff ff       	call   123d1 <hlt>
   1240c:	eb f9                	jmp    12407 <pannic+0x2f>

0001240e <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   1240e:	55                   	push   %ebp
   1240f:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12411:	8b 45 08             	mov    0x8(%ebp),%eax
   12414:	83 c0 07             	add    $0x7,%eax
   12417:	8d 50 07             	lea    0x7(%eax),%edx
   1241a:	85 c0                	test   %eax,%eax
   1241c:	0f 48 c2             	cmovs  %edx,%eax
   1241f:	c1 f8 03             	sar    $0x3,%eax
}
   12422:	5d                   	pop    %ebp
   12423:	c3                   	ret    

00012424 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12424:	55                   	push   %ebp
   12425:	89 e5                	mov    %esp,%ebp
   12427:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1242a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1242e:	75 19                	jne    12449 <bitmap_init+0x25>
   12430:	68 70 3b 01 00       	push   $0x13b70
   12435:	68 04 3c 01 00       	push   $0x13c04
   1243a:	6a 24                	push   $0x24
   1243c:	68 88 3b 01 00       	push   $0x13b88
   12441:	e8 92 ff ff ff       	call   123d8 <pannic>
   12446:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12449:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1244d:	75 19                	jne    12468 <bitmap_init+0x44>
   1244f:	68 c0 3b 01 00       	push   $0x13bc0
   12454:	68 04 3c 01 00       	push   $0x13c04
   12459:	6a 25                	push   $0x25
   1245b:	68 88 3b 01 00       	push   $0x13b88
   12460:	e8 73 ff ff ff       	call   123d8 <pannic>
   12465:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12468:	8b 45 08             	mov    0x8(%ebp),%eax
   1246b:	8b 55 10             	mov    0x10(%ebp),%edx
   1246e:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12470:	8b 45 08             	mov    0x8(%ebp),%eax
   12473:	8b 55 0c             	mov    0xc(%ebp),%edx
   12476:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   12479:	8b 45 08             	mov    0x8(%ebp),%eax
   1247c:	8b 00                	mov    (%eax),%eax
   1247e:	83 ec 0c             	sub    $0xc,%esp
   12481:	50                   	push   %eax
   12482:	e8 87 ff ff ff       	call   1240e <bitmap_byte_count>
   12487:	83 c4 10             	add    $0x10,%esp
   1248a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1248d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12491:	74 07                	je     1249a <bitmap_init+0x76>
   12493:	ba ff 00 00 00       	mov    $0xff,%edx
   12498:	eb 05                	jmp    1249f <bitmap_init+0x7b>
   1249a:	ba 00 00 00 00       	mov    $0x0,%edx
   1249f:	8b 45 08             	mov    0x8(%ebp),%eax
   124a2:	8b 40 04             	mov    0x4(%eax),%eax
   124a5:	83 ec 04             	sub    $0x4,%esp
   124a8:	ff 75 f4             	push   -0xc(%ebp)
   124ab:	52                   	push   %edx
   124ac:	50                   	push   %eax
   124ad:	e8 28 04 00 00       	call   128da <kernel_memset>
   124b2:	83 c4 10             	add    $0x10,%esp

}
   124b5:	90                   	nop
   124b6:	c9                   	leave  
   124b7:	c3                   	ret    

000124b8 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   124b8:	55                   	push   %ebp
   124b9:	89 e5                	mov    %esp,%ebp
   124bb:	53                   	push   %ebx
   124bc:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   124bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124c3:	75 19                	jne    124de <bitmap_get_bit+0x26>
   124c5:	68 70 3b 01 00       	push   $0x13b70
   124ca:	68 10 3c 01 00       	push   $0x13c10
   124cf:	6a 39                	push   $0x39
   124d1:	68 88 3b 01 00       	push   $0x13b88
   124d6:	e8 fd fe ff ff       	call   123d8 <pannic>
   124db:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   124de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124e2:	79 19                	jns    124fd <bitmap_get_bit+0x45>
   124e4:	68 d4 3b 01 00       	push   $0x13bd4
   124e9:	68 10 3c 01 00       	push   $0x13c10
   124ee:	6a 3a                	push   $0x3a
   124f0:	68 88 3b 01 00       	push   $0x13b88
   124f5:	e8 de fe ff ff       	call   123d8 <pannic>
   124fa:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   124fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12500:	8b 48 04             	mov    0x4(%eax),%ecx
   12503:	8b 45 0c             	mov    0xc(%ebp),%eax
   12506:	8d 50 07             	lea    0x7(%eax),%edx
   12509:	85 c0                	test   %eax,%eax
   1250b:	0f 48 c2             	cmovs  %edx,%eax
   1250e:	c1 f8 03             	sar    $0x3,%eax
   12511:	01 c8                	add    %ecx,%eax
   12513:	0f b6 00             	movzbl (%eax),%eax
   12516:	89 c3                	mov    %eax,%ebx
   12518:	8b 45 0c             	mov    0xc(%ebp),%eax
   1251b:	83 e0 07             	and    $0x7,%eax
   1251e:	ba 01 00 00 00       	mov    $0x1,%edx
   12523:	89 c1                	mov    %eax,%ecx
   12525:	d3 e2                	shl    %cl,%edx
   12527:	89 d0                	mov    %edx,%eax
   12529:	21 d8                	and    %ebx,%eax
}
   1252b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1252e:	c9                   	leave  
   1252f:	c3                   	ret    

00012530 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12530:	55                   	push   %ebp
   12531:	89 e5                	mov    %esp,%ebp
   12533:	56                   	push   %esi
   12534:	53                   	push   %ebx
   12535:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12538:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1253c:	75 19                	jne    12557 <bitmap_set_bit+0x27>
   1253e:	68 70 3b 01 00       	push   $0x13b70
   12543:	68 20 3c 01 00       	push   $0x13c20
   12548:	6a 48                	push   $0x48
   1254a:	68 88 3b 01 00       	push   $0x13b88
   1254f:	e8 84 fe ff ff       	call   123d8 <pannic>
   12554:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12557:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1255b:	78 06                	js     12563 <bitmap_set_bit+0x33>
   1255d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12561:	79 19                	jns    1257c <bitmap_set_bit+0x4c>
   12563:	68 df 3b 01 00       	push   $0x13bdf
   12568:	68 20 3c 01 00       	push   $0x13c20
   1256d:	6a 49                	push   $0x49
   1256f:	68 88 3b 01 00       	push   $0x13b88
   12574:	e8 5f fe ff ff       	call   123d8 <pannic>
   12579:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1257c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12583:	e9 92 00 00 00       	jmp    1261a <bitmap_set_bit+0xea>
        if (bit) {
   12588:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1258c:	74 42                	je     125d0 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   1258e:	8b 45 08             	mov    0x8(%ebp),%eax
   12591:	8b 48 04             	mov    0x4(%eax),%ecx
   12594:	8b 45 0c             	mov    0xc(%ebp),%eax
   12597:	8d 50 07             	lea    0x7(%eax),%edx
   1259a:	85 c0                	test   %eax,%eax
   1259c:	0f 48 c2             	cmovs  %edx,%eax
   1259f:	c1 f8 03             	sar    $0x3,%eax
   125a2:	89 c2                	mov    %eax,%edx
   125a4:	89 d0                	mov    %edx,%eax
   125a6:	01 c8                	add    %ecx,%eax
   125a8:	0f b6 00             	movzbl (%eax),%eax
   125ab:	89 c6                	mov    %eax,%esi
   125ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b0:	83 e0 07             	and    $0x7,%eax
   125b3:	bb 01 00 00 00       	mov    $0x1,%ebx
   125b8:	89 c1                	mov    %eax,%ecx
   125ba:	d3 e3                	shl    %cl,%ebx
   125bc:	89 d8                	mov    %ebx,%eax
   125be:	89 f1                	mov    %esi,%ecx
   125c0:	09 c1                	or     %eax,%ecx
   125c2:	8b 45 08             	mov    0x8(%ebp),%eax
   125c5:	8b 40 04             	mov    0x4(%eax),%eax
   125c8:	01 d0                	add    %edx,%eax
   125ca:	89 ca                	mov    %ecx,%edx
   125cc:	88 10                	mov    %dl,(%eax)
   125ce:	eb 42                	jmp    12612 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   125d0:	8b 45 08             	mov    0x8(%ebp),%eax
   125d3:	8b 48 04             	mov    0x4(%eax),%ecx
   125d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   125d9:	8d 50 07             	lea    0x7(%eax),%edx
   125dc:	85 c0                	test   %eax,%eax
   125de:	0f 48 c2             	cmovs  %edx,%eax
   125e1:	c1 f8 03             	sar    $0x3,%eax
   125e4:	89 c2                	mov    %eax,%edx
   125e6:	89 d0                	mov    %edx,%eax
   125e8:	01 c8                	add    %ecx,%eax
   125ea:	0f b6 00             	movzbl (%eax),%eax
   125ed:	89 c6                	mov    %eax,%esi
   125ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f2:	83 e0 07             	and    $0x7,%eax
   125f5:	bb 01 00 00 00       	mov    $0x1,%ebx
   125fa:	89 c1                	mov    %eax,%ecx
   125fc:	d3 e3                	shl    %cl,%ebx
   125fe:	89 d8                	mov    %ebx,%eax
   12600:	f7 d0                	not    %eax
   12602:	89 f1                	mov    %esi,%ecx
   12604:	21 c1                	and    %eax,%ecx
   12606:	8b 45 08             	mov    0x8(%ebp),%eax
   12609:	8b 40 04             	mov    0x4(%eax),%eax
   1260c:	01 d0                	add    %edx,%eax
   1260e:	89 ca                	mov    %ecx,%edx
   12610:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12612:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12616:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1261a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1261d:	3b 45 10             	cmp    0x10(%ebp),%eax
   12620:	7d 0e                	jge    12630 <bitmap_set_bit+0x100>
   12622:	8b 45 08             	mov    0x8(%ebp),%eax
   12625:	8b 00                	mov    (%eax),%eax
   12627:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1262a:	0f 8c 58 ff ff ff    	jl     12588 <bitmap_set_bit+0x58>
        }
    }
}
   12630:	90                   	nop
   12631:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12634:	5b                   	pop    %ebx
   12635:	5e                   	pop    %esi
   12636:	5d                   	pop    %ebp
   12637:	c3                   	ret    

00012638 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12638:	55                   	push   %ebp
   12639:	89 e5                	mov    %esp,%ebp
   1263b:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1263e:	83 ec 08             	sub    $0x8,%esp
   12641:	ff 75 0c             	push   0xc(%ebp)
   12644:	ff 75 08             	push   0x8(%ebp)
   12647:	e8 6c fe ff ff       	call   124b8 <bitmap_get_bit>
   1264c:	83 c4 10             	add    $0x10,%esp
   1264f:	84 c0                	test   %al,%al
   12651:	0f 95 c0             	setne  %al
   12654:	0f b6 c0             	movzbl %al,%eax
}
   12657:	c9                   	leave  
   12658:	c3                   	ret    

00012659 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12659:	55                   	push   %ebp
   1265a:	89 e5                	mov    %esp,%ebp
   1265c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1265f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12663:	75 19                	jne    1267e <bitmap_alloc_nbits+0x25>
   12665:	68 70 3b 01 00       	push   $0x13b70
   1266a:	68 30 3c 01 00       	push   $0x13c30
   1266f:	6a 68                	push   $0x68
   12671:	68 88 3b 01 00       	push   $0x13b88
   12676:	e8 5d fd ff ff       	call   123d8 <pannic>
   1267b:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   1267e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12682:	79 19                	jns    1269d <bitmap_alloc_nbits+0x44>
   12684:	68 f8 3b 01 00       	push   $0x13bf8
   12689:	68 30 3c 01 00       	push   $0x13c30
   1268e:	6a 69                	push   $0x69
   12690:	68 88 3b 01 00       	push   $0x13b88
   12695:	e8 3e fd ff ff       	call   123d8 <pannic>
   1269a:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   1269d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   126a4:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   126ab:	e9 8f 00 00 00       	jmp    1273f <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   126b0:	83 ec 08             	sub    $0x8,%esp
   126b3:	ff 75 f4             	push   -0xc(%ebp)
   126b6:	ff 75 08             	push   0x8(%ebp)
   126b9:	e8 fa fd ff ff       	call   124b8 <bitmap_get_bit>
   126be:	83 c4 10             	add    $0x10,%esp
   126c1:	0f b6 c0             	movzbl %al,%eax
   126c4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126c7:	74 06                	je     126cf <bitmap_alloc_nbits+0x76>
            search_index++;
   126c9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   126cd:	eb 70                	jmp    1273f <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   126cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126d2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   126d5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   126dc:	eb 2d                	jmp    1270b <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   126de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126e1:	8d 50 01             	lea    0x1(%eax),%edx
   126e4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   126e7:	83 ec 08             	sub    $0x8,%esp
   126ea:	50                   	push   %eax
   126eb:	ff 75 08             	push   0x8(%ebp)
   126ee:	e8 c5 fd ff ff       	call   124b8 <bitmap_get_bit>
   126f3:	83 c4 10             	add    $0x10,%esp
   126f6:	0f b6 c0             	movzbl %al,%eax
   126f9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126fc:	74 09                	je     12707 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   126fe:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12705:	eb 16                	jmp    1271d <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12707:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1270b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1270e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12711:	7d 0a                	jge    1271d <bitmap_alloc_nbits+0xc4>
   12713:	8b 45 08             	mov    0x8(%ebp),%eax
   12716:	8b 00                	mov    (%eax),%eax
   12718:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1271b:	7c c1                	jl     126de <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   1271d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12721:	74 1c                	je     1273f <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12723:	8b 45 0c             	mov    0xc(%ebp),%eax
   12726:	f7 d0                	not    %eax
   12728:	50                   	push   %eax
   12729:	ff 75 10             	push   0x10(%ebp)
   1272c:	ff 75 f0             	push   -0x10(%ebp)
   1272f:	ff 75 08             	push   0x8(%ebp)
   12732:	e8 f9 fd ff ff       	call   12530 <bitmap_set_bit>
   12737:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1273a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1273d:	eb 13                	jmp    12752 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   1273f:	8b 45 08             	mov    0x8(%ebp),%eax
   12742:	8b 00                	mov    (%eax),%eax
   12744:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12747:	0f 8c 63 ff ff ff    	jl     126b0 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   1274d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12752:	c9                   	leave  
   12753:	c3                   	ret    

00012754 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12754:	55                   	push   %ebp
   12755:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12757:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1275b:	74 3b                	je     12798 <kernel_strcpy+0x44>
   1275d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12761:	74 35                	je     12798 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12763:	eb 17                	jmp    1277c <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12765:	8b 55 0c             	mov    0xc(%ebp),%edx
   12768:	8d 42 01             	lea    0x1(%edx),%eax
   1276b:	89 45 0c             	mov    %eax,0xc(%ebp)
   1276e:	8b 45 08             	mov    0x8(%ebp),%eax
   12771:	8d 48 01             	lea    0x1(%eax),%ecx
   12774:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12777:	0f b6 12             	movzbl (%edx),%edx
   1277a:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   1277c:	8b 45 08             	mov    0x8(%ebp),%eax
   1277f:	0f b6 00             	movzbl (%eax),%eax
   12782:	84 c0                	test   %al,%al
   12784:	74 0a                	je     12790 <kernel_strcpy+0x3c>
   12786:	8b 45 0c             	mov    0xc(%ebp),%eax
   12789:	0f b6 00             	movzbl (%eax),%eax
   1278c:	84 c0                	test   %al,%al
   1278e:	75 d5                	jne    12765 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12790:	8b 45 08             	mov    0x8(%ebp),%eax
   12793:	c6 00 00             	movb   $0x0,(%eax)
   12796:	eb 01                	jmp    12799 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   12798:	90                   	nop
    
}
   12799:	5d                   	pop    %ebp
   1279a:	c3                   	ret    

0001279b <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   1279b:	55                   	push   %ebp
   1279c:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   1279e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127a2:	74 45                	je     127e9 <kernel_strncpy+0x4e>
   127a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127a8:	74 3f                	je     127e9 <kernel_strncpy+0x4e>
   127aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127ae:	74 39                	je     127e9 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   127b0:	eb 17                	jmp    127c9 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   127b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   127b5:	8d 42 01             	lea    0x1(%edx),%eax
   127b8:	89 45 0c             	mov    %eax,0xc(%ebp)
   127bb:	8b 45 08             	mov    0x8(%ebp),%eax
   127be:	8d 48 01             	lea    0x1(%eax),%ecx
   127c1:	89 4d 08             	mov    %ecx,0x8(%ebp)
   127c4:	0f b6 12             	movzbl (%edx),%edx
   127c7:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   127c9:	8b 45 10             	mov    0x10(%ebp),%eax
   127cc:	8d 50 ff             	lea    -0x1(%eax),%edx
   127cf:	89 55 10             	mov    %edx,0x10(%ebp)
   127d2:	83 f8 01             	cmp    $0x1,%eax
   127d5:	7e 0a                	jle    127e1 <kernel_strncpy+0x46>
   127d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   127da:	0f b6 00             	movzbl (%eax),%eax
   127dd:	84 c0                	test   %al,%al
   127df:	75 d1                	jne    127b2 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   127e1:	8b 45 08             	mov    0x8(%ebp),%eax
   127e4:	c6 00 00             	movb   $0x0,(%eax)
   127e7:	eb 01                	jmp    127ea <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   127e9:	90                   	nop
}
   127ea:	5d                   	pop    %ebp
   127eb:	c3                   	ret    

000127ec <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   127ec:	55                   	push   %ebp
   127ed:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   127ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127f3:	74 06                	je     127fb <kernel_strncmp+0xf>
   127f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127f9:	75 0f                	jne    1280a <kernel_strncmp+0x1e>
   127fb:	b8 00 00 00 00       	mov    $0x0,%eax
   12800:	eb 52                	jmp    12854 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12802:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12806:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1280a:	8b 45 08             	mov    0x8(%ebp),%eax
   1280d:	0f b6 00             	movzbl (%eax),%eax
   12810:	84 c0                	test   %al,%al
   12812:	74 24                	je     12838 <kernel_strncmp+0x4c>
   12814:	8b 45 0c             	mov    0xc(%ebp),%eax
   12817:	0f b6 00             	movzbl (%eax),%eax
   1281a:	84 c0                	test   %al,%al
   1281c:	74 1a                	je     12838 <kernel_strncmp+0x4c>
   1281e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12822:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12826:	74 10                	je     12838 <kernel_strncmp+0x4c>
   12828:	8b 45 08             	mov    0x8(%ebp),%eax
   1282b:	0f b6 10             	movzbl (%eax),%edx
   1282e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12831:	0f b6 00             	movzbl (%eax),%eax
   12834:	38 c2                	cmp    %al,%dl
   12836:	74 ca                	je     12802 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12838:	8b 45 08             	mov    0x8(%ebp),%eax
   1283b:	0f b6 10             	movzbl (%eax),%edx
   1283e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12841:	0f b6 00             	movzbl (%eax),%eax
   12844:	38 c2                	cmp    %al,%dl
   12846:	7e 07                	jle    1284f <kernel_strncmp+0x63>
   12848:	b8 01 00 00 00       	mov    $0x1,%eax
   1284d:	eb 05                	jmp    12854 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   1284f:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12854:	5d                   	pop    %ebp
   12855:	c3                   	ret    

00012856 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12856:	55                   	push   %ebp
   12857:	89 e5                	mov    %esp,%ebp
   12859:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   1285c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12860:	75 07                	jne    12869 <kernel_strlen+0x13>
   12862:	b8 00 00 00 00       	mov    $0x0,%eax
   12867:	eb 20                	jmp    12889 <kernel_strlen+0x33>

    int len = 0;
   12869:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12870:	eb 04                	jmp    12876 <kernel_strlen+0x20>
   12872:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12876:	8b 45 08             	mov    0x8(%ebp),%eax
   12879:	8d 50 01             	lea    0x1(%eax),%edx
   1287c:	89 55 08             	mov    %edx,0x8(%ebp)
   1287f:	0f b6 00             	movzbl (%eax),%eax
   12882:	84 c0                	test   %al,%al
   12884:	75 ec                	jne    12872 <kernel_strlen+0x1c>

    return len;
   12886:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   12889:	c9                   	leave  
   1288a:	c3                   	ret    

0001288b <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   1288b:	55                   	push   %ebp
   1288c:	89 e5                	mov    %esp,%ebp
   1288e:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12891:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12895:	74 40                	je     128d7 <kernel_memcpy+0x4c>
   12897:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1289b:	74 3a                	je     128d7 <kernel_memcpy+0x4c>
   1289d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128a1:	74 34                	je     128d7 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   128a3:	8b 45 08             	mov    0x8(%ebp),%eax
   128a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   128a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ac:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   128af:	eb 17                	jmp    128c8 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   128b1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   128b4:	8d 42 01             	lea    0x1(%edx),%eax
   128b7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   128ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128bd:	8d 48 01             	lea    0x1(%eax),%ecx
   128c0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   128c3:	0f b6 12             	movzbl (%edx),%edx
   128c6:	88 10                	mov    %dl,(%eax)
    while (size--) {
   128c8:	8b 45 10             	mov    0x10(%ebp),%eax
   128cb:	8d 50 ff             	lea    -0x1(%eax),%edx
   128ce:	89 55 10             	mov    %edx,0x10(%ebp)
   128d1:	85 c0                	test   %eax,%eax
   128d3:	75 dc                	jne    128b1 <kernel_memcpy+0x26>
   128d5:	eb 01                	jmp    128d8 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   128d7:	90                   	nop
    }
    
}
   128d8:	c9                   	leave  
   128d9:	c3                   	ret    

000128da <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   128da:	55                   	push   %ebp
   128db:	89 e5                	mov    %esp,%ebp
   128dd:	83 ec 14             	sub    $0x14,%esp
   128e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   128e3:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   128e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128ea:	74 2c                	je     12918 <kernel_memset+0x3e>
   128ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128f0:	74 26                	je     12918 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   128f2:	8b 45 08             	mov    0x8(%ebp),%eax
   128f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   128f8:	eb 0f                	jmp    12909 <kernel_memset+0x2f>
        *(d++) = v;
   128fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128fd:	8d 50 01             	lea    0x1(%eax),%edx
   12900:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12903:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12907:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12909:	8b 45 10             	mov    0x10(%ebp),%eax
   1290c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1290f:	89 55 10             	mov    %edx,0x10(%ebp)
   12912:	85 c0                	test   %eax,%eax
   12914:	75 e4                	jne    128fa <kernel_memset+0x20>
   12916:	eb 01                	jmp    12919 <kernel_memset+0x3f>
    if (!dest || !size) return;
   12918:	90                   	nop
    }
    
}
   12919:	c9                   	leave  
   1291a:	c3                   	ret    

0001291b <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1291b:	55                   	push   %ebp
   1291c:	89 e5                	mov    %esp,%ebp
   1291e:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12921:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12925:	74 0c                	je     12933 <kernel_memcmp+0x18>
   12927:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1292b:	74 06                	je     12933 <kernel_memcmp+0x18>
   1292d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12931:	75 07                	jne    1293a <kernel_memcmp+0x1f>
   12933:	b8 00 00 00 00       	mov    $0x0,%eax
   12938:	eb 63                	jmp    1299d <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1293a:	8b 45 08             	mov    0x8(%ebp),%eax
   1293d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12940:	8b 45 0c             	mov    0xc(%ebp),%eax
   12943:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12946:	eb 08                	jmp    12950 <kernel_memcmp+0x35>
        d1++;
   12948:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   1294c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12950:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12954:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12958:	74 10                	je     1296a <kernel_memcmp+0x4f>
   1295a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1295d:	0f b6 10             	movzbl (%eax),%edx
   12960:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12963:	0f b6 00             	movzbl (%eax),%eax
   12966:	38 c2                	cmp    %al,%dl
   12968:	74 de                	je     12948 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   1296a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1296d:	0f b6 10             	movzbl (%eax),%edx
   12970:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12973:	0f b6 00             	movzbl (%eax),%eax
   12976:	38 c2                	cmp    %al,%dl
   12978:	76 07                	jbe    12981 <kernel_memcmp+0x66>
   1297a:	b8 01 00 00 00       	mov    $0x1,%eax
   1297f:	eb 1c                	jmp    1299d <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12981:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12984:	0f b6 10             	movzbl (%eax),%edx
   12987:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1298a:	0f b6 00             	movzbl (%eax),%eax
   1298d:	38 c2                	cmp    %al,%dl
   1298f:	73 07                	jae    12998 <kernel_memcmp+0x7d>
   12991:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12996:	eb 05                	jmp    1299d <kernel_memcmp+0x82>
    else return 0;
   12998:	b8 00 00 00 00       	mov    $0x0,%eax

}
   1299d:	c9                   	leave  
   1299e:	c3                   	ret    

0001299f <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   1299f:	55                   	push   %ebp
   129a0:	89 e5                	mov    %esp,%ebp
   129a2:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   129a5:	8d 45 10             	lea    0x10(%ebp),%eax
   129a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   129ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129ae:	83 ec 04             	sub    $0x4,%esp
   129b1:	50                   	push   %eax
   129b2:	ff 75 0c             	push   0xc(%ebp)
   129b5:	ff 75 08             	push   0x8(%ebp)
   129b8:	e8 06 00 00 00       	call   129c3 <kernel_vsprintf>
   129bd:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   129c0:	90                   	nop
   129c1:	c9                   	leave  
   129c2:	c3                   	ret    

000129c3 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   129c3:	55                   	push   %ebp
   129c4:	89 e5                	mov    %esp,%ebp
   129c6:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   129c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   129d0:	8b 45 08             	mov    0x8(%ebp),%eax
   129d3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   129d6:	e9 68 01 00 00       	jmp    12b43 <kernel_vsprintf+0x180>
        switch (state) {
   129db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   129df:	74 0b                	je     129ec <kernel_vsprintf+0x29>
   129e1:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   129e5:	74 2b                	je     12a12 <kernel_vsprintf+0x4f>
   129e7:	e9 56 01 00 00       	jmp    12b42 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   129ec:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   129f0:	75 0c                	jne    129fe <kernel_vsprintf+0x3b>
   129f2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   129f9:	e9 45 01 00 00       	jmp    12b43 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   129fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a01:	8d 50 01             	lea    0x1(%eax),%edx
   12a04:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12a07:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12a0b:	88 10                	mov    %dl,(%eax)
            break;
   12a0d:	e9 31 01 00 00       	jmp    12b43 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12a12:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12a16:	75 47                	jne    12a5f <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12a18:	8b 45 10             	mov    0x10(%ebp),%eax
   12a1b:	8d 50 04             	lea    0x4(%eax),%edx
   12a1e:	89 55 10             	mov    %edx,0x10(%ebp)
   12a21:	8b 00                	mov    (%eax),%eax
   12a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12a26:	ff 75 ec             	push   -0x14(%ebp)
   12a29:	e8 28 fe ff ff       	call   12856 <kernel_strlen>
   12a2e:	83 c4 04             	add    $0x4,%esp
   12a31:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12a34:	eb 17                	jmp    12a4d <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12a36:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12a39:	8d 42 01             	lea    0x1(%edx),%eax
   12a3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a42:	8d 48 01             	lea    0x1(%eax),%ecx
   12a45:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12a48:	0f b6 12             	movzbl (%edx),%edx
   12a4b:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12a50:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a53:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12a56:	85 c0                	test   %eax,%eax
   12a58:	75 dc                	jne    12a36 <kernel_vsprintf+0x73>
   12a5a:	e9 da 00 00 00       	jmp    12b39 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12a5f:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12a63:	75 37                	jne    12a9c <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12a65:	8b 45 10             	mov    0x10(%ebp),%eax
   12a68:	8d 50 04             	lea    0x4(%eax),%edx
   12a6b:	89 55 10             	mov    %edx,0x10(%ebp)
   12a6e:	8b 00                	mov    (%eax),%eax
   12a70:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12a73:	83 ec 04             	sub    $0x4,%esp
   12a76:	6a 0a                	push   $0xa
   12a78:	ff 75 d8             	push   -0x28(%ebp)
   12a7b:	ff 75 f0             	push   -0x10(%ebp)
   12a7e:	e8 dd 00 00 00       	call   12b60 <kernel_itoa>
   12a83:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   12a86:	83 ec 0c             	sub    $0xc,%esp
   12a89:	ff 75 f0             	push   -0x10(%ebp)
   12a8c:	e8 c5 fd ff ff       	call   12856 <kernel_strlen>
   12a91:	83 c4 10             	add    $0x10,%esp
   12a94:	01 45 f0             	add    %eax,-0x10(%ebp)
   12a97:	e9 9d 00 00 00       	jmp    12b39 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12a9c:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12aa0:	74 06                	je     12aa8 <kernel_vsprintf+0xe5>
   12aa2:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12aa6:	75 34                	jne    12adc <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   12aa8:	8b 45 10             	mov    0x10(%ebp),%eax
   12aab:	8d 50 04             	lea    0x4(%eax),%edx
   12aae:	89 55 10             	mov    %edx,0x10(%ebp)
   12ab1:	8b 00                	mov    (%eax),%eax
   12ab3:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12ab6:	83 ec 04             	sub    $0x4,%esp
   12ab9:	6a 10                	push   $0x10
   12abb:	ff 75 dc             	push   -0x24(%ebp)
   12abe:	ff 75 f0             	push   -0x10(%ebp)
   12ac1:	e8 9a 00 00 00       	call   12b60 <kernel_itoa>
   12ac6:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12ac9:	83 ec 0c             	sub    $0xc,%esp
   12acc:	ff 75 f0             	push   -0x10(%ebp)
   12acf:	e8 82 fd ff ff       	call   12856 <kernel_strlen>
   12ad4:	83 c4 10             	add    $0x10,%esp
   12ad7:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12ada:	eb 5d                	jmp    12b39 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12adc:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12ae0:	75 34                	jne    12b16 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12ae2:	8b 45 10             	mov    0x10(%ebp),%eax
   12ae5:	8d 50 04             	lea    0x4(%eax),%edx
   12ae8:	89 55 10             	mov    %edx,0x10(%ebp)
   12aeb:	8b 00                	mov    (%eax),%eax
   12aed:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12af0:	83 ec 04             	sub    $0x4,%esp
   12af3:	6a 02                	push   $0x2
   12af5:	ff 75 e0             	push   -0x20(%ebp)
   12af8:	ff 75 f0             	push   -0x10(%ebp)
   12afb:	e8 60 00 00 00       	call   12b60 <kernel_itoa>
   12b00:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12b03:	83 ec 0c             	sub    $0xc,%esp
   12b06:	ff 75 f0             	push   -0x10(%ebp)
   12b09:	e8 48 fd ff ff       	call   12856 <kernel_strlen>
   12b0e:	83 c4 10             	add    $0x10,%esp
   12b11:	01 45 f0             	add    %eax,-0x10(%ebp)
   12b14:	eb 23                	jmp    12b39 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12b16:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   12b1a:	75 1d                	jne    12b39 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   12b1c:	8b 45 10             	mov    0x10(%ebp),%eax
   12b1f:	8d 50 04             	lea    0x4(%eax),%edx
   12b22:	89 55 10             	mov    %edx,0x10(%ebp)
   12b25:	8b 00                	mov    (%eax),%eax
   12b27:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   12b2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b2d:	8d 50 01             	lea    0x1(%eax),%edx
   12b30:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12b33:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12b37:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12b39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12b40:	eb 01                	jmp    12b43 <kernel_vsprintf+0x180>
        default:
            break;
   12b42:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12b43:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b46:	8d 50 01             	lea    0x1(%eax),%edx
   12b49:	89 55 0c             	mov    %edx,0xc(%ebp)
   12b4c:	0f b6 00             	movzbl (%eax),%eax
   12b4f:	88 45 e7             	mov    %al,-0x19(%ebp)
   12b52:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12b56:	0f 85 7f fe ff ff    	jne    129db <kernel_vsprintf+0x18>
        }
    }
    

}
   12b5c:	90                   	nop
   12b5d:	90                   	nop
   12b5e:	c9                   	leave  
   12b5f:	c3                   	ret    

00012b60 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   12b60:	55                   	push   %ebp
   12b61:	89 e5                	mov    %esp,%ebp
   12b63:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   12b69:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   12b6f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12b73:	74 1d                	je     12b92 <kernel_itoa+0x32>
   12b75:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12b79:	74 17                	je     12b92 <kernel_itoa+0x32>
   12b7b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b7f:	74 11                	je     12b92 <kernel_itoa+0x32>
   12b81:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12b85:	74 0b                	je     12b92 <kernel_itoa+0x32>
        *buf = '\0';
   12b87:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12b8d:	e9 a2 00 00 00       	jmp    12c34 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12b92:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b96:	79 11                	jns    12ba9 <kernel_itoa+0x49>
        *(p++) = '-';
   12b98:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b9b:	8d 50 01             	lea    0x1(%eax),%edx
   12b9e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12ba1:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12ba4:	f7 5d 0c             	negl   0xc(%ebp)
   12ba7:	eb 1a                	jmp    12bc3 <kernel_itoa+0x63>
    } else if (num == 0) {
   12ba9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bad:	75 14                	jne    12bc3 <kernel_itoa+0x63>
        *(p++) = '0';
   12baf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bb2:	8d 50 01             	lea    0x1(%eax),%edx
   12bb5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12bb8:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12bbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bbe:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12bc1:	eb 71                	jmp    12c34 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12bc3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12bca:	eb 2e                	jmp    12bfa <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12bcc:	8b 0d 30 40 01 00    	mov    0x14030,%ecx
   12bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bd5:	99                   	cltd   
   12bd6:	f7 7d 10             	idivl  0x10(%ebp)
   12bd9:	89 d0                	mov    %edx,%eax
   12bdb:	01 c1                	add    %eax,%ecx
   12bdd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12be0:	8d 50 01             	lea    0x1(%eax),%edx
   12be3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12be6:	0f b6 11             	movzbl (%ecx),%edx
   12be9:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bf3:	99                   	cltd   
   12bf4:	f7 7d 10             	idivl  0x10(%ebp)
   12bf7:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   12bfa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bfe:	7f cc                	jg     12bcc <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12c00:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c03:	83 e8 01             	sub    $0x1,%eax
   12c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12c09:	eb 1d                	jmp    12c28 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   12c0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c0e:	8d 50 01             	lea    0x1(%eax),%edx
   12c11:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12c14:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   12c1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12c1d:	01 ca                	add    %ecx,%edx
   12c1f:	0f b6 12             	movzbl (%edx),%edx
   12c22:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12c24:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   12c28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12c2c:	79 dd                	jns    12c0b <kernel_itoa+0xab>
    }
    *p = '\0';
   12c2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c31:	c6 00 00             	movb   $0x0,(%eax)
   12c34:	c9                   	leave  
   12c35:	c3                   	ret    

00012c36 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12c36:	55                   	push   %ebp
   12c37:	89 e5                	mov    %esp,%ebp
   12c39:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c40:	75 19                	jne    12c5b <list_is_empty+0x25>
   12c42:	68 54 3c 01 00       	push   $0x13c54
   12c47:	68 38 3d 01 00       	push   $0x13d38
   12c4c:	6a 38                	push   $0x38
   12c4e:	68 68 3c 01 00       	push   $0x13c68
   12c53:	e8 80 f7 ff ff       	call   123d8 <pannic>
   12c58:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12c5b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5e:	8b 40 08             	mov    0x8(%eax),%eax
   12c61:	85 c0                	test   %eax,%eax
   12c63:	0f 94 c0             	sete   %al
   12c66:	0f b6 c0             	movzbl %al,%eax
}
   12c69:	c9                   	leave  
   12c6a:	c3                   	ret    

00012c6b <list_get_size>:
static inline int list_get_size(list_t *list) {
   12c6b:	55                   	push   %ebp
   12c6c:	89 e5                	mov    %esp,%ebp
   12c6e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c71:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c75:	75 19                	jne    12c90 <list_get_size+0x25>
   12c77:	68 54 3c 01 00       	push   $0x13c54
   12c7c:	68 70 3d 01 00       	push   $0x13d70
   12c81:	6a 3e                	push   $0x3e
   12c83:	68 68 3c 01 00       	push   $0x13c68
   12c88:	e8 4b f7 ff ff       	call   123d8 <pannic>
   12c8d:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12c90:	8b 45 08             	mov    0x8(%ebp),%eax
   12c93:	8b 40 08             	mov    0x8(%eax),%eax
}
   12c96:	c9                   	leave  
   12c97:	c3                   	ret    

00012c98 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   12c98:	55                   	push   %ebp
   12c99:	89 e5                	mov    %esp,%ebp
   12c9b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12c9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ca2:	74 06                	je     12caa <list_insert_first+0x12>
   12ca4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12ca8:	75 19                	jne    12cc3 <list_insert_first+0x2b>
   12caa:	68 a8 3c 01 00       	push   $0x13ca8
   12caf:	68 24 3d 01 00       	push   $0x13d24
   12cb4:	6a 0f                	push   $0xf
   12cb6:	68 d8 3c 01 00       	push   $0x13cd8
   12cbb:	e8 18 f7 ff ff       	call   123d8 <pannic>
   12cc0:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc6:	8b 10                	mov    (%eax),%edx
   12cc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ccb:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12cce:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cd1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12cd7:	83 ec 0c             	sub    $0xc,%esp
   12cda:	ff 75 08             	push   0x8(%ebp)
   12cdd:	e8 54 ff ff ff       	call   12c36 <list_is_empty>
   12ce2:	83 c4 10             	add    $0x10,%esp
   12ce5:	85 c0                	test   %eax,%eax
   12ce7:	74 16                	je     12cff <list_insert_first+0x67>
        list->first = list->last = node;
   12ce9:	8b 45 08             	mov    0x8(%ebp),%eax
   12cec:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cef:	89 50 04             	mov    %edx,0x4(%eax)
   12cf2:	8b 45 08             	mov    0x8(%ebp),%eax
   12cf5:	8b 50 04             	mov    0x4(%eax),%edx
   12cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   12cfb:	89 10                	mov    %edx,(%eax)
   12cfd:	eb 12                	jmp    12d11 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12cff:	8b 45 08             	mov    0x8(%ebp),%eax
   12d02:	8b 00                	mov    (%eax),%eax
   12d04:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d07:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12d09:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d0f:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12d11:	8b 45 08             	mov    0x8(%ebp),%eax
   12d14:	8b 40 08             	mov    0x8(%eax),%eax
   12d17:	8d 50 01             	lea    0x1(%eax),%edx
   12d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1d:	89 50 08             	mov    %edx,0x8(%eax)
}
   12d20:	90                   	nop
   12d21:	c9                   	leave  
   12d22:	c3                   	ret    

00012d23 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12d23:	55                   	push   %ebp
   12d24:	89 e5                	mov    %esp,%ebp
   12d26:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12d29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d2d:	74 06                	je     12d35 <list_insert_last+0x12>
   12d2f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d33:	75 19                	jne    12d4e <list_insert_last+0x2b>
   12d35:	68 a8 3c 01 00       	push   $0x13ca8
   12d3a:	68 48 3d 01 00       	push   $0x13d48
   12d3f:	6a 1f                	push   $0x1f
   12d41:	68 d8 3c 01 00       	push   $0x13cd8
   12d46:	e8 8d f6 ff ff       	call   123d8 <pannic>
   12d4b:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12d4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12d51:	8b 50 04             	mov    0x4(%eax),%edx
   12d54:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d57:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12d59:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d5c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12d63:	83 ec 0c             	sub    $0xc,%esp
   12d66:	ff 75 08             	push   0x8(%ebp)
   12d69:	e8 c8 fe ff ff       	call   12c36 <list_is_empty>
   12d6e:	83 c4 10             	add    $0x10,%esp
   12d71:	85 c0                	test   %eax,%eax
   12d73:	74 16                	je     12d8b <list_insert_last+0x68>
        list->first = list->last = node;
   12d75:	8b 45 08             	mov    0x8(%ebp),%eax
   12d78:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d7b:	89 50 04             	mov    %edx,0x4(%eax)
   12d7e:	8b 45 08             	mov    0x8(%ebp),%eax
   12d81:	8b 50 04             	mov    0x4(%eax),%edx
   12d84:	8b 45 08             	mov    0x8(%ebp),%eax
   12d87:	89 10                	mov    %edx,(%eax)
   12d89:	eb 15                	jmp    12da0 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12d8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d8e:	8b 40 04             	mov    0x4(%eax),%eax
   12d91:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d94:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12d97:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9a:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d9d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12da0:	8b 45 08             	mov    0x8(%ebp),%eax
   12da3:	8b 40 08             	mov    0x8(%eax),%eax
   12da6:	8d 50 01             	lea    0x1(%eax),%edx
   12da9:	8b 45 08             	mov    0x8(%ebp),%eax
   12dac:	89 50 08             	mov    %edx,0x8(%eax)

}
   12daf:	90                   	nop
   12db0:	c9                   	leave  
   12db1:	c3                   	ret    

00012db2 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12db2:	55                   	push   %ebp
   12db3:	89 e5                	mov    %esp,%ebp
   12db5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12db8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12dbc:	75 19                	jne    12dd7 <list_remove_first+0x25>
   12dbe:	68 0e 3d 01 00       	push   $0x13d0e
   12dc3:	68 5c 3d 01 00       	push   $0x13d5c
   12dc8:	6a 31                	push   $0x31
   12dca:	68 d8 3c 01 00       	push   $0x13cd8
   12dcf:	e8 04 f6 ff ff       	call   123d8 <pannic>
   12dd4:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12dd7:	83 ec 0c             	sub    $0xc,%esp
   12dda:	ff 75 08             	push   0x8(%ebp)
   12ddd:	e8 54 fe ff ff       	call   12c36 <list_is_empty>
   12de2:	83 c4 10             	add    $0x10,%esp
   12de5:	85 c0                	test   %eax,%eax
   12de7:	74 07                	je     12df0 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12de9:	b8 00 00 00 00       	mov    $0x0,%eax
   12dee:	eb 71                	jmp    12e61 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12df0:	8b 45 08             	mov    0x8(%ebp),%eax
   12df3:	8b 00                	mov    (%eax),%eax
   12df5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12df8:	83 ec 0c             	sub    $0xc,%esp
   12dfb:	ff 75 08             	push   0x8(%ebp)
   12dfe:	e8 68 fe ff ff       	call   12c6b <list_get_size>
   12e03:	83 c4 10             	add    $0x10,%esp
   12e06:	83 f8 01             	cmp    $0x1,%eax
   12e09:	75 17                	jne    12e22 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12e0b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e0e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e15:	8b 45 08             	mov    0x8(%ebp),%eax
   12e18:	8b 50 04             	mov    0x4(%eax),%edx
   12e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1e:	89 10                	mov    %edx,(%eax)
   12e20:	eb 18                	jmp    12e3a <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12e22:	8b 45 08             	mov    0x8(%ebp),%eax
   12e25:	8b 00                	mov    (%eax),%eax
   12e27:	8b 50 04             	mov    0x4(%eax),%edx
   12e2a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e2d:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12e2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12e32:	8b 00                	mov    (%eax),%eax
   12e34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12e3a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e3d:	8b 40 08             	mov    0x8(%eax),%eax
   12e40:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e43:	8b 45 08             	mov    0x8(%ebp),%eax
   12e46:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e56:	8b 50 04             	mov    0x4(%eax),%edx
   12e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e5c:	89 10                	mov    %edx,(%eax)
    return ret;
   12e5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12e61:	c9                   	leave  
   12e62:	c3                   	ret    

00012e63 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12e63:	55                   	push   %ebp
   12e64:	89 e5                	mov    %esp,%ebp
   12e66:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12e69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e6d:	75 19                	jne    12e88 <list_remove_last+0x25>
   12e6f:	68 0e 3d 01 00       	push   $0x13d0e
   12e74:	68 80 3d 01 00       	push   $0x13d80
   12e79:	6a 46                	push   $0x46
   12e7b:	68 d8 3c 01 00       	push   $0x13cd8
   12e80:	e8 53 f5 ff ff       	call   123d8 <pannic>
   12e85:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12e88:	83 ec 0c             	sub    $0xc,%esp
   12e8b:	ff 75 08             	push   0x8(%ebp)
   12e8e:	e8 a3 fd ff ff       	call   12c36 <list_is_empty>
   12e93:	83 c4 10             	add    $0x10,%esp
   12e96:	85 c0                	test   %eax,%eax
   12e98:	74 07                	je     12ea1 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12e9a:	b8 00 00 00 00       	mov    $0x0,%eax
   12e9f:	eb 75                	jmp    12f16 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12ea1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea4:	8b 40 04             	mov    0x4(%eax),%eax
   12ea7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12eaa:	83 ec 0c             	sub    $0xc,%esp
   12ead:	ff 75 08             	push   0x8(%ebp)
   12eb0:	e8 b6 fd ff ff       	call   12c6b <list_get_size>
   12eb5:	83 c4 10             	add    $0x10,%esp
   12eb8:	83 f8 01             	cmp    $0x1,%eax
   12ebb:	75 17                	jne    12ed4 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12ebd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ec0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ec7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eca:	8b 50 04             	mov    0x4(%eax),%edx
   12ecd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed0:	89 10                	mov    %edx,(%eax)
   12ed2:	eb 1b                	jmp    12eef <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12ed4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed7:	8b 40 04             	mov    0x4(%eax),%eax
   12eda:	8b 10                	mov    (%eax),%edx
   12edc:	8b 45 08             	mov    0x8(%ebp),%eax
   12edf:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12ee2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee5:	8b 40 04             	mov    0x4(%eax),%eax
   12ee8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12eef:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef2:	8b 40 08             	mov    0x8(%eax),%eax
   12ef5:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ef8:	8b 45 08             	mov    0x8(%ebp),%eax
   12efb:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f01:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f08:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f0b:	8b 50 04             	mov    0x4(%eax),%edx
   12f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f11:	89 10                	mov    %edx,(%eax)
    return ret;
   12f13:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12f16:	c9                   	leave  
   12f17:	c3                   	ret    

00012f18 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12f18:	55                   	push   %ebp
   12f19:	89 e5                	mov    %esp,%ebp
   12f1b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12f1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f22:	74 06                	je     12f2a <list_remove+0x12>
   12f24:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12f28:	75 19                	jne    12f43 <list_remove+0x2b>
   12f2a:	68 a8 3c 01 00       	push   $0x13ca8
   12f2f:	68 94 3d 01 00       	push   $0x13d94
   12f34:	6a 5b                	push   $0x5b
   12f36:	68 d8 3c 01 00       	push   $0x13cd8
   12f3b:	e8 98 f4 ff ff       	call   123d8 <pannic>
   12f40:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12f43:	83 ec 0c             	sub    $0xc,%esp
   12f46:	ff 75 08             	push   0x8(%ebp)
   12f49:	e8 e8 fc ff ff       	call   12c36 <list_is_empty>
   12f4e:	83 c4 10             	add    $0x10,%esp
   12f51:	85 c0                	test   %eax,%eax
   12f53:	74 0a                	je     12f5f <list_remove+0x47>
        return (list_node_t*)0;
   12f55:	b8 00 00 00 00       	mov    $0x0,%eax
   12f5a:	e9 80 00 00 00       	jmp    12fdf <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f62:	8b 00                	mov    (%eax),%eax
   12f64:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f67:	75 0b                	jne    12f74 <list_remove+0x5c>
   12f69:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f6c:	8b 50 04             	mov    0x4(%eax),%edx
   12f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f72:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12f74:	8b 45 08             	mov    0x8(%ebp),%eax
   12f77:	8b 40 04             	mov    0x4(%eax),%eax
   12f7a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f7d:	75 0b                	jne    12f8a <list_remove+0x72>
   12f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f82:	8b 10                	mov    (%eax),%edx
   12f84:	8b 45 08             	mov    0x8(%ebp),%eax
   12f87:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12f8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f8d:	8b 00                	mov    (%eax),%eax
   12f8f:	85 c0                	test   %eax,%eax
   12f91:	74 0e                	je     12fa1 <list_remove+0x89>
   12f93:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f96:	8b 00                	mov    (%eax),%eax
   12f98:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f9b:	8b 52 04             	mov    0x4(%edx),%edx
   12f9e:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fa4:	8b 40 04             	mov    0x4(%eax),%eax
   12fa7:	85 c0                	test   %eax,%eax
   12fa9:	74 0d                	je     12fb8 <list_remove+0xa0>
   12fab:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fae:	8b 40 04             	mov    0x4(%eax),%eax
   12fb1:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fb4:	8b 12                	mov    (%edx),%edx
   12fb6:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12fb8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fbb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc5:	8b 50 04             	mov    0x4(%eax),%edx
   12fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fcb:	89 10                	mov    %edx,(%eax)
    list->size--;
   12fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd0:	8b 40 08             	mov    0x8(%eax),%eax
   12fd3:	8d 50 ff             	lea    -0x1(%eax),%edx
   12fd6:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd9:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fdf:	c9                   	leave  
   12fe0:	c3                   	ret    

00012fe1 <inb>:
static inline uint8_t inb(uint16_t port) {
   12fe1:	55                   	push   %ebp
   12fe2:	89 e5                	mov    %esp,%ebp
   12fe4:	83 ec 14             	sub    $0x14,%esp
   12fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   12fea:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12fee:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12ff2:	89 c2                	mov    %eax,%edx
   12ff4:	ec                   	in     (%dx),%al
   12ff5:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12ff8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12ffc:	c9                   	leave  
   12ffd:	c3                   	ret    

00012ffe <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12ffe:	55                   	push   %ebp
   12fff:	89 e5                	mov    %esp,%ebp
   13001:	83 ec 08             	sub    $0x8,%esp
   13004:	8b 45 08             	mov    0x8(%ebp),%eax
   13007:	8b 55 0c             	mov    0xc(%ebp),%edx
   1300a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1300e:	89 d0                	mov    %edx,%eax
   13010:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13013:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13017:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1301b:	ee                   	out    %al,(%dx)
}
   1301c:	90                   	nop
   1301d:	c9                   	leave  
   1301e:	c3                   	ret    

0001301f <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1301f:	55                   	push   %ebp
   13020:	89 e5                	mov    %esp,%ebp
   13022:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13025:	6a 00                	push   $0x0
   13027:	68 f9 03 00 00       	push   $0x3f9
   1302c:	e8 cd ff ff ff       	call   12ffe <outb>
   13031:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13034:	68 80 00 00 00       	push   $0x80
   13039:	68 fb 03 00 00       	push   $0x3fb
   1303e:	e8 bb ff ff ff       	call   12ffe <outb>
   13043:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13046:	6a 03                	push   $0x3
   13048:	68 f8 03 00 00       	push   $0x3f8
   1304d:	e8 ac ff ff ff       	call   12ffe <outb>
   13052:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13055:	6a 00                	push   $0x0
   13057:	68 f9 03 00 00       	push   $0x3f9
   1305c:	e8 9d ff ff ff       	call   12ffe <outb>
   13061:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   13064:	6a 03                	push   $0x3
   13066:	68 fb 03 00 00       	push   $0x3fb
   1306b:	e8 8e ff ff ff       	call   12ffe <outb>
   13070:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   13073:	68 c7 00 00 00       	push   $0xc7
   13078:	68 fa 03 00 00       	push   $0x3fa
   1307d:	e8 7c ff ff ff       	call   12ffe <outb>
   13082:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   13085:	6a 0f                	push   $0xf
   13087:	68 fc 03 00 00       	push   $0x3fc
   1308c:	e8 6d ff ff ff       	call   12ffe <outb>
   13091:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   13094:	83 ec 0c             	sub    $0xc,%esp
   13097:	68 70 1d 03 00       	push   $0x31d70
   1309c:	e8 22 ec ff ff       	call   11cc3 <mutex_init>
   130a1:	83 c4 10             	add    $0x10,%esp
}
   130a4:	90                   	nop
   130a5:	c9                   	leave  
   130a6:	c3                   	ret    

000130a7 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   130a7:	55                   	push   %ebp
   130a8:	89 e5                	mov    %esp,%ebp
   130aa:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   130b0:	83 ec 04             	sub    $0x4,%esp
   130b3:	68 80 00 00 00       	push   $0x80
   130b8:	6a 00                	push   $0x0
   130ba:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   130c0:	50                   	push   %eax
   130c1:	e8 14 f8 ff ff       	call   128da <kernel_memset>
   130c6:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   130c9:	8d 45 0c             	lea    0xc(%ebp),%eax
   130cc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   130d2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   130d8:	83 ec 04             	sub    $0x4,%esp
   130db:	50                   	push   %eax
   130dc:	ff 75 08             	push   0x8(%ebp)
   130df:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   130e5:	50                   	push   %eax
   130e6:	e8 d8 f8 ff ff       	call   129c3 <kernel_vsprintf>
   130eb:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   130ee:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   130f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   130f7:	83 ec 0c             	sub    $0xc,%esp
   130fa:	68 70 1d 03 00       	push   $0x31d70
   130ff:	e8 0c ec ff ff       	call   11d10 <mutex_lock>
   13104:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13107:	eb 57                	jmp    13160 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13109:	90                   	nop
   1310a:	83 ec 0c             	sub    $0xc,%esp
   1310d:	68 fd 03 00 00       	push   $0x3fd
   13112:	e8 ca fe ff ff       	call   12fe1 <inb>
   13117:	83 c4 10             	add    $0x10,%esp
   1311a:	0f b6 c0             	movzbl %al,%eax
   1311d:	83 e0 40             	and    $0x40,%eax
   13120:	85 c0                	test   %eax,%eax
   13122:	74 e6                	je     1310a <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13124:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13127:	0f b6 00             	movzbl (%eax),%eax
   1312a:	3c 0a                	cmp    $0xa,%al
   1312c:	75 12                	jne    13140 <log_printf+0x99>
   1312e:	83 ec 08             	sub    $0x8,%esp
   13131:	6a 0d                	push   $0xd
   13133:	68 f8 03 00 00       	push   $0x3f8
   13138:	e8 c1 fe ff ff       	call   12ffe <outb>
   1313d:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   13140:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13143:	8d 50 01             	lea    0x1(%eax),%edx
   13146:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13149:	0f b6 00             	movzbl (%eax),%eax
   1314c:	0f b6 c0             	movzbl %al,%eax
   1314f:	83 ec 08             	sub    $0x8,%esp
   13152:	50                   	push   %eax
   13153:	68 f8 03 00 00       	push   $0x3f8
   13158:	e8 a1 fe ff ff       	call   12ffe <outb>
   1315d:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13160:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13163:	0f b6 00             	movzbl (%eax),%eax
   13166:	84 c0                	test   %al,%al
   13168:	75 9f                	jne    13109 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   1316a:	83 ec 08             	sub    $0x8,%esp
   1316d:	6a 0d                	push   $0xd
   1316f:	68 f8 03 00 00       	push   $0x3f8
   13174:	e8 85 fe ff ff       	call   12ffe <outb>
   13179:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1317c:	83 ec 08             	sub    $0x8,%esp
   1317f:	6a 0a                	push   $0xa
   13181:	68 f8 03 00 00       	push   $0x3f8
   13186:	e8 73 fe ff ff       	call   12ffe <outb>
   1318b:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   1318e:	83 ec 0c             	sub    $0xc,%esp
   13191:	68 70 1d 03 00       	push   $0x31d70
   13196:	e8 06 ec ff ff       	call   11da1 <mutex_unlock>
   1319b:	83 c4 10             	add    $0x10,%esp
   1319e:	90                   	nop
   1319f:	c9                   	leave  
   131a0:	c3                   	ret    
