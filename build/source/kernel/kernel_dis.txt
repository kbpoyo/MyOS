
/home/kbpoyo/Documents/code/cpp/MyOS/build/source/kernel/kernel.elf：     文件格式 elf32-i386
/home/kbpoyo/Documents/code/cpp/MyOS/build/source/kernel/kernel.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00100000

程序头：
    LOAD off    0x00000000 vaddr 0x000ff000 paddr 0x000ff000 align 2**12
         filesz 0x00000094 memsz 0x00000094 flags r--
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x0000000c memsz 0x0000000c flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000c  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      0000002b  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_info   0000005d  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 00000041  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   0000009c  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_frame  0000002c  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000121  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 000000b8  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 init.c
00100007 g     F .text	00000005 kernel_init
00100000 g       .text	00000000 _start
00101000 g       .text	00000000 __bss_start
00101000 g       .text	00000000 _edata
00101000 g       .text	00000000 _end



Disassembly of section .text:

00100000 <_start>:

    .text
    .extern kernel_init
    .global _start
_start:
    call kernel_init    //调用内核初始化函数
  100000:	e8 02 00 00 00       	call   100007 <kernel_init>
    jmp .
  100005:	eb fe                	jmp    100005 <_start+0x5>

00100007 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(void) {
  100007:	55                   	push   %ebp
  100008:	89 e5                	mov    %esp,%ebp
    for (;;){}
  10000a:	eb fe                	jmp    10000a <kernel_init+0x3>
