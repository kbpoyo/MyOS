
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001828 memsz 0x00014050 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013ef  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000431  000113f0  000113f0  000023f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011824  00011824  00002824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00012810  00011840  00011840  00002828  2**5
                  ALLOC
  4 .debug_line   00000ac0  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000003b1  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000156a  00000000  00000000  00003699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000008ed  00000000  00000000  00004c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000100  00000000  00000000  000054f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000975  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  00005f65  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000868  00000000  00000000  00005f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 gdt.c
00010298 l     F .text	00000028 lgdt
00011840 l     O .bss	00010000 gdt_table
000102c0 l     F .text	000000bf segment_desc_set
00000000 l    df *ABS*	00000000 idt.c
000103ef l     F .text	00000007 cli
000103f6 l     F .text	00000007 sti
000103fd l     F .text	00000007 hlt
00010404 l     F .text	0000001d inb
00010421 l     F .text	00000021 outb
00010442 l     F .text	00000028 lidt
00021840 l     O .bss	00000800 idt_table
0001046a l     F .text	000000e9 print_exception_fram
00010553 l     F .text	0000003e do_default_handler
000107dd l     F .text	00000047 gate_desc_set
00010864 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010be5 l     F .text	00000021 outb
00022040 l     O .bss	00000004 sys_tick
00010c29 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000117d8 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 assert.c
00010d43 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
00011824 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 log.c
00011262 l     F .text	0000001d inb
0001127f l     F .text	00000021 outb
00010eb7 g     F .text	0000004f kernel_memcpy
00010a6a g     F .text	00000098 idt_enable
000106c5 g     F .text	0000001c do_handler_segment_not_present
00010ba1 g     F .text	0000000b idt_enable_global
00010f06 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
000112a0 g     F .text	00000075 log_init
00010ce3 g     F .text	00000060 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00010d80 g     F .text	00000047 kernel_strcpy
00010b96 g     F .text	0000000b idt_disable_global
00010824 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
0001061d g     F .text	0000001c do_handler_overflow
00010751 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000106fd g     F .text	0000001c do_handler_general_protection
000107c1 g     F .text	0000001c do_handler_control_exception
000105ad g     F .text	0000001c do_handler_divider
0001068d g     F .text	0000001c do_handler_double_fault
00010719 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00010bac g     F .text	00000039 pic_send_eoi
00010180 g       .text	00000000 exception_handler_stack_segment_fault
0001037f g     F .text	00000070 gdt_init
000107a5 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
0001027b g       .text	00000000 exception_handler_time
000105c9 g     F .text	0000001c do_handler_debug
00022050 g     O .bss	00002000 stack
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000108f7 g     F .text	00000173 idt_init
00010655 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010735 g     F .text	0000001c do_handler_fpu_error
0001076d g     F .text	0000001c do_handler_machine_check
00010047 g       .text	00000000 exception_handler_divider
00010dc7 g     F .text	00000051 kernel_strncpy
00010ca3 g     F .text	00000040 kernel_init
00010000 g       .text	00000000 _start
00010fef g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
000106a9 g     F .text	0000001c do_handler_invalid_tss
00010b02 g     F .text	00000094 idt_disable
000105e5 g     F .text	0000001c do_handler_nmi
00010226 g       .text	00000000 exception_handler_smd_exception
00010671 g     F .text	0000001c do_handler_device_unavailable
00010f47 g     F .text	00000084 kernel_memcmp
00010789 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010591 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010e82 g     F .text	00000035 kernel_strlen
00010064 g       .text	00000000 exception_handler_debug
00010639 g     F .text	0000001c do_handler_bound_range
00010e18 g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010d4a g     F .text	00000036 pannic
000106e1 g     F .text	0000001c do_handler_stack_segment_fault
00010601 g     F .text	0000001c do_handler_breakpoint
00011315 g     F .text	000000da log_printf
00010fcb g     F .text	00000024 kernel_sprintf
0001118c g     F .text	000000d6 kernel_itoa
00010c06 g     F .text	00000023 do_handler_time
00010c8b g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 98 0c 00 00       	call   10ca3 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 50 40 02 00       	mov    $0x24050,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 b9 0c 00 00       	jmp    10ce3 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 56 05 00 00       	call   10591 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 55 05 00 00       	call   105ad <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 54 05 00 00       	call   105c9 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 53 05 00 00       	call   105e5 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 52 05 00 00       	call   10601 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 51 05 00 00       	call   1061d <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 50 05 00 00       	call   10639 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 4f 05 00 00       	call   10655 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 4e 05 00 00       	call   10671 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 4f 05 00 00       	call   1068d <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 50 05 00 00       	call   106a9 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 51 05 00 00       	call   106c5 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 52 05 00 00       	call   106e1 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 53 05 00 00       	call   106fd <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 54 05 00 00       	call   10719 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 53 05 00 00       	call   10735 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 54 05 00 00       	call   10751 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 53 05 00 00       	call   1076d <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 52 05 00 00       	call   10789 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 51 05 00 00       	call   107a5 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 52 05 00 00       	call   107c1 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 7a 09 00 00       	call   10c06 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <lgdt>:
 * @brief  加载全局描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lgdt(uint32_t start, uint32_t size) {
   10298:	55                   	push   %ebp
   10299:	89 e5                	mov    %esp,%ebp
   1029b:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // GDT的在内存中的逻辑边界
    uint16_t start15_0;   // GDT地址的低16位
    uint16_t start31_16;  // GDT地址的高16位
  } gdt;

  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1029e:	8b 45 08             	mov    0x8(%ebp),%eax
   102a1:	c1 e8 10             	shr    $0x10,%eax
   102a4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  gdt.limit =
      size -
   102af:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b2:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   102b5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化GDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   102b9:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
      "lgdt %[g]"
      :
      : [g] "m"(gdt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lgdt直接加载gdt所在的内存区域的内容
}
   102bd:	90                   	nop
   102be:	c9                   	leave  
   102bf:	c3                   	ret    

000102c0 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
static void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
   102c3:	83 ec 18             	sub    $0x18,%esp
   102c6:	8b 55 08             	mov    0x8(%ebp),%edx
   102c9:	8b 45 14             	mov    0x14(%ebp),%eax
   102cc:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   102d0:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   102d4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   102d8:	66 c1 e8 03          	shr    $0x3,%ax
   102dc:	0f b7 c0             	movzwl %ax,%eax
   102df:	c1 e0 03             	shl    $0x3,%eax
   102e2:	05 40 18 01 00       	add    $0x11840,%eax
   102e7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	89 c2                	mov    %eax,%edx
   102ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   102f2:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	c1 e8 10             	shr    $0x10,%eax
   102fc:	89 c2                	mov    %eax,%edx
   102fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10301:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10304:	8b 45 0c             	mov    0xc(%ebp),%eax
   10307:	c1 e8 18             	shr    $0x18,%eax
   1030a:	89 c2                	mov    %eax,%edx
   1030c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1030f:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10312:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10319:	76 1d                	jbe    10338 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1031e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10322:	66 0d 00 80          	or     $0x8000,%ax
   10326:	89 c2                	mov    %eax,%edx
   10328:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1032b:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1032f:	8b 45 10             	mov    0x10(%ebp),%eax
   10332:	c1 e8 0c             	shr    $0xc,%eax
   10335:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10338:	8b 45 10             	mov    0x10(%ebp),%eax
   1033b:	89 c2                	mov    %eax,%edx
   1033d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10340:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10343:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10346:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1034a:	89 c2                	mov    %eax,%edx
   1034c:	8b 45 10             	mov    0x10(%ebp),%eax
   1034f:	c1 e8 08             	shr    $0x8,%eax
   10352:	66 25 00 0f          	and    $0xf00,%ax
   10356:	09 d0                	or     %edx,%eax
   10358:	89 c2                	mov    %eax,%edx
   1035a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1035d:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10361:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10364:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10368:	89 c2                	mov    %eax,%edx
   1036a:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1036e:	80 e4 f0             	and    $0xf0,%ah
   10371:	09 d0                	or     %edx,%eax
   10373:	89 c2                	mov    %eax,%edx
   10375:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10378:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1037c:	90                   	nop
   1037d:	c9                   	leave  
   1037e:	c3                   	ret    

0001037f <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1037f:	55                   	push   %ebp
   10380:	89 e5                	mov    %esp,%ebp
   10382:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10385:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1038c:	eb 1c                	jmp    103aa <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1038e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10391:	c1 e0 03             	shl    $0x3,%eax
   10394:	0f b7 c0             	movzwl %ax,%eax
   10397:	6a 00                	push   $0x0
   10399:	6a 00                	push   $0x0
   1039b:	6a 00                	push   $0x0
   1039d:	50                   	push   %eax
   1039e:	e8 1d ff ff ff       	call   102c0 <segment_desc_set>
   103a3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   103a6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   103aa:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   103b1:	7e db                	jle    1038e <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   103b3:	68 92 40 00 00       	push   $0x4092
   103b8:	6a ff                	push   $0xffffffff
   103ba:	6a 00                	push   $0x0
   103bc:	6a 10                	push   $0x10
   103be:	e8 fd fe ff ff       	call   102c0 <segment_desc_set>
   103c3:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   103c6:	68 9a 40 00 00       	push   $0x409a
   103cb:	6a ff                	push   $0xffffffff
   103cd:	6a 00                	push   $0x0
   103cf:	6a 08                	push   $0x8
   103d1:	e8 ea fe ff ff       	call   102c0 <segment_desc_set>
   103d6:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   103d9:	b8 40 18 01 00       	mov    $0x11840,%eax
   103de:	68 00 00 01 00       	push   $0x10000
   103e3:	50                   	push   %eax
   103e4:	e8 af fe ff ff       	call   10298 <lgdt>
   103e9:	83 c4 08             	add    $0x8,%esp
}
   103ec:	90                   	nop
   103ed:	c9                   	leave  
   103ee:	c3                   	ret    

000103ef <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   103ef:	55                   	push   %ebp
   103f0:	89 e5                	mov    %esp,%ebp
   103f2:	fa                   	cli    
   103f3:	90                   	nop
   103f4:	5d                   	pop    %ebp
   103f5:	c3                   	ret    

000103f6 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   103f6:	55                   	push   %ebp
   103f7:	89 e5                	mov    %esp,%ebp
   103f9:	fb                   	sti    
   103fa:	90                   	nop
   103fb:	5d                   	pop    %ebp
   103fc:	c3                   	ret    

000103fd <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   103fd:	55                   	push   %ebp
   103fe:	89 e5                	mov    %esp,%ebp
   10400:	f4                   	hlt    
   10401:	90                   	nop
   10402:	5d                   	pop    %ebp
   10403:	c3                   	ret    

00010404 <inb>:
static inline uint8_t inb(uint16_t port) {
   10404:	55                   	push   %ebp
   10405:	89 e5                	mov    %esp,%ebp
   10407:	83 ec 14             	sub    $0x14,%esp
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10411:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10415:	89 c2                	mov    %eax,%edx
   10417:	ec                   	in     (%dx),%al
   10418:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1041b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1041f:	c9                   	leave  
   10420:	c3                   	ret    

00010421 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10421:	55                   	push   %ebp
   10422:	89 e5                	mov    %esp,%ebp
   10424:	83 ec 08             	sub    $0x8,%esp
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1042d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10431:	89 d0                	mov    %edx,%eax
   10433:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10436:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1043a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1043e:	ee                   	out    %al,(%dx)
}
   1043f:	90                   	nop
   10440:	c9                   	leave  
   10441:	c3                   	ret    

00010442 <lidt>:
 * @brief  加载中断描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lidt(uint32_t start, uint32_t size) {
   10442:	55                   	push   %ebp
   10443:	89 e5                	mov    %esp,%ebp
   10445:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // IDT的在内存中的逻辑边界
    uint16_t start15_0;   // IDT地址的低16位
    uint16_t start31_16;  // IDT地址的高16位
  } idt;

  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10448:	8b 45 08             	mov    0x8(%ebp),%eax
   1044b:	c1 e8 10             	shr    $0x10,%eax
   1044e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10452:	8b 45 08             	mov    0x8(%ebp),%eax
   10455:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  idt.limit =
      size -
   10459:	8b 45 0c             	mov    0xc(%ebp),%eax
   1045c:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   1045f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化IDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   10463:	0f 01 5d fa          	lidtl  -0x6(%ebp)
      "lidt %[g]"
      :
      : [g] "m"(idt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lidt直接加载idt所在的内存区域的内容
}
   10467:	90                   	nop
   10468:	c9                   	leave  
   10469:	c3                   	ret    

0001046a <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   1046a:	55                   	push   %ebp
   1046b:	89 e5                	mov    %esp,%ebp
   1046d:	57                   	push   %edi
   1046e:	56                   	push   %esi
   1046f:	53                   	push   %ebx
   10470:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10473:	83 ec 0c             	sub    $0xc,%esp
   10476:	68 f0 13 01 00       	push   $0x113f0
   1047b:	e8 95 0e 00 00       	call   11315 <log_printf>
   10480:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10483:	8b 45 08             	mov    0x8(%ebp),%eax
   10486:	8b 50 34             	mov    0x34(%eax),%edx
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	8b 40 30             	mov    0x30(%eax),%eax
   1048f:	83 ec 04             	sub    $0x4,%esp
   10492:	52                   	push   %edx
   10493:	50                   	push   %eax
   10494:	68 2e 14 01 00       	push   $0x1142e
   10499:	e8 77 0e 00 00       	call   11315 <log_printf>
   1049e:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   104a1:	8b 45 08             	mov    0x8(%ebp),%eax
   104a4:	8b 38                	mov    (%eax),%edi
   104a6:	8b 45 08             	mov    0x8(%ebp),%eax
   104a9:	8b 70 04             	mov    0x4(%eax),%esi
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	8b 58 08             	mov    0x8(%eax),%ebx
   104b2:	8b 45 08             	mov    0x8(%ebp),%eax
   104b5:	8b 48 0c             	mov    0xc(%eax),%ecx
   104b8:	8b 45 08             	mov    0x8(%ebp),%eax
   104bb:	8b 50 0c             	mov    0xc(%eax),%edx
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   104c4:	83 ec 04             	sub    $0x4,%esp
   104c7:	57                   	push   %edi
   104c8:	56                   	push   %esi
   104c9:	53                   	push   %ebx
   104ca:	51                   	push   %ecx
   104cb:	52                   	push   %edx
   104cc:	50                   	push   %eax
   104cd:	68 48 14 01 00       	push   $0x11448
   104d2:	e8 3e 0e 00 00       	call   11315 <log_printf>
   104d7:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 48 1c             	mov    0x1c(%eax),%ecx
   104e0:	8b 45 08             	mov    0x8(%ebp),%eax
   104e3:	8b 40 18             	mov    0x18(%eax),%eax
   104e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   104e9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ec:	8b 58 10             	mov    0x10(%eax),%ebx
   104ef:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   104f2:	8b 45 08             	mov    0x8(%ebp),%eax
   104f5:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	8b 70 24             	mov    0x24(%eax),%esi
   104fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10501:	8b 58 28             	mov    0x28(%eax),%ebx
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	8b 50 20             	mov    0x20(%eax),%edx
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	51                   	push   %ecx
   10514:	ff 75 e4             	push   -0x1c(%ebp)
   10517:	ff 75 e0             	push   -0x20(%ebp)
   1051a:	57                   	push   %edi
   1051b:	56                   	push   %esi
   1051c:	53                   	push   %ebx
   1051d:	52                   	push   %edx
   1051e:	50                   	push   %eax
   1051f:	68 78 14 01 00       	push   $0x11478
   10524:	e8 ec 0d 00 00       	call   11315 <log_printf>
   10529:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   1052c:	8b 45 08             	mov    0x8(%ebp),%eax
   1052f:	8b 50 40             	mov    0x40(%eax),%edx
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 38             	mov    0x38(%eax),%eax
   10538:	83 ec 04             	sub    $0x4,%esp
   1053b:	52                   	push   %edx
   1053c:	50                   	push   %eax
   1053d:	68 d0 14 01 00       	push   $0x114d0
   10542:	e8 ce 0d 00 00       	call   11315 <log_printf>
   10547:	83 c4 10             	add    $0x10,%esp
}
   1054a:	90                   	nop
   1054b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1054e:	5b                   	pop    %ebx
   1054f:	5e                   	pop    %esi
   10550:	5f                   	pop    %edi
   10551:	5d                   	pop    %ebp
   10552:	c3                   	ret    

00010553 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10553:	55                   	push   %ebp
   10554:	89 e5                	mov    %esp,%ebp
   10556:	83 ec 08             	sub    $0x8,%esp

  log_printf("----------------------------------");
   10559:	83 ec 0c             	sub    $0xc,%esp
   1055c:	68 ec 14 01 00       	push   $0x114ec
   10561:	e8 af 0d 00 00       	call   11315 <log_printf>
   10566:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10569:	83 ec 08             	sub    $0x8,%esp
   1056c:	ff 75 0c             	push   0xc(%ebp)
   1056f:	68 0f 15 01 00       	push   $0x1150f
   10574:	e8 9c 0d 00 00       	call   11315 <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   1057c:	83 ec 0c             	sub    $0xc,%esp
   1057f:	ff 75 08             	push   0x8(%ebp)
   10582:	e8 e3 fe ff ff       	call   1046a <print_exception_fram>
   10587:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   1058a:	e8 6e fe ff ff       	call   103fd <hlt>
   1058f:	eb f9                	jmp    1058a <do_default_handler+0x37>

00010591 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10591:	55                   	push   %ebp
   10592:	89 e5                	mov    %esp,%ebp
   10594:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10597:	83 ec 08             	sub    $0x8,%esp
   1059a:	68 29 15 01 00       	push   $0x11529
   1059f:	ff 75 08             	push   0x8(%ebp)
   105a2:	e8 ac ff ff ff       	call   10553 <do_default_handler>
   105a7:	83 c4 10             	add    $0x10,%esp
}
   105aa:	90                   	nop
   105ab:	c9                   	leave  
   105ac:	c3                   	ret    

000105ad <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   105ad:	55                   	push   %ebp
   105ae:	89 e5                	mov    %esp,%ebp
   105b0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   105b3:	83 ec 08             	sub    $0x8,%esp
   105b6:	68 3b 15 01 00       	push   $0x1153b
   105bb:	ff 75 08             	push   0x8(%ebp)
   105be:	e8 90 ff ff ff       	call   10553 <do_default_handler>
   105c3:	83 c4 10             	add    $0x10,%esp
}
   105c6:	90                   	nop
   105c7:	c9                   	leave  
   105c8:	c3                   	ret    

000105c9 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   105c9:	55                   	push   %ebp
   105ca:	89 e5                	mov    %esp,%ebp
   105cc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   105cf:	83 ec 08             	sub    $0x8,%esp
   105d2:	68 4d 15 01 00       	push   $0x1154d
   105d7:	ff 75 08             	push   0x8(%ebp)
   105da:	e8 74 ff ff ff       	call   10553 <do_default_handler>
   105df:	83 c4 10             	add    $0x10,%esp
}
   105e2:	90                   	nop
   105e3:	c9                   	leave  
   105e4:	c3                   	ret    

000105e5 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   105e5:	55                   	push   %ebp
   105e6:	89 e5                	mov    %esp,%ebp
   105e8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   105eb:	83 ec 08             	sub    $0x8,%esp
   105ee:	68 5d 15 01 00       	push   $0x1155d
   105f3:	ff 75 08             	push   0x8(%ebp)
   105f6:	e8 58 ff ff ff       	call   10553 <do_default_handler>
   105fb:	83 c4 10             	add    $0x10,%esp
}
   105fe:	90                   	nop
   105ff:	c9                   	leave  
   10600:	c3                   	ret    

00010601 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10601:	55                   	push   %ebp
   10602:	89 e5                	mov    %esp,%ebp
   10604:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10607:	83 ec 08             	sub    $0x8,%esp
   1060a:	68 6b 15 01 00       	push   $0x1156b
   1060f:	ff 75 08             	push   0x8(%ebp)
   10612:	e8 3c ff ff ff       	call   10553 <do_default_handler>
   10617:	83 c4 10             	add    $0x10,%esp
}
   1061a:	90                   	nop
   1061b:	c9                   	leave  
   1061c:	c3                   	ret    

0001061d <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   1061d:	55                   	push   %ebp
   1061e:	89 e5                	mov    %esp,%ebp
   10620:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10623:	83 ec 08             	sub    $0x8,%esp
   10626:	68 80 15 01 00       	push   $0x11580
   1062b:	ff 75 08             	push   0x8(%ebp)
   1062e:	e8 20 ff ff ff       	call   10553 <do_default_handler>
   10633:	83 c4 10             	add    $0x10,%esp
}
   10636:	90                   	nop
   10637:	c9                   	leave  
   10638:	c3                   	ret    

00010639 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10639:	55                   	push   %ebp
   1063a:	89 e5                	mov    %esp,%ebp
   1063c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1063f:	83 ec 08             	sub    $0x8,%esp
   10642:	68 93 15 01 00       	push   $0x11593
   10647:	ff 75 08             	push   0x8(%ebp)
   1064a:	e8 04 ff ff ff       	call   10553 <do_default_handler>
   1064f:	83 c4 10             	add    $0x10,%esp
}
   10652:	90                   	nop
   10653:	c9                   	leave  
   10654:	c3                   	ret    

00010655 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10655:	55                   	push   %ebp
   10656:	89 e5                	mov    %esp,%ebp
   10658:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   1065b:	83 ec 08             	sub    $0x8,%esp
   1065e:	68 a9 15 01 00       	push   $0x115a9
   10663:	ff 75 08             	push   0x8(%ebp)
   10666:	e8 e8 fe ff ff       	call   10553 <do_default_handler>
   1066b:	83 c4 10             	add    $0x10,%esp
}
   1066e:	90                   	nop
   1066f:	c9                   	leave  
   10670:	c3                   	ret    

00010671 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10671:	55                   	push   %ebp
   10672:	89 e5                	mov    %esp,%ebp
   10674:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10677:	83 ec 08             	sub    $0x8,%esp
   1067a:	68 c2 15 01 00       	push   $0x115c2
   1067f:	ff 75 08             	push   0x8(%ebp)
   10682:	e8 cc fe ff ff       	call   10553 <do_default_handler>
   10687:	83 c4 10             	add    $0x10,%esp
}
   1068a:	90                   	nop
   1068b:	c9                   	leave  
   1068c:	c3                   	ret    

0001068d <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   1068d:	55                   	push   %ebp
   1068e:	89 e5                	mov    %esp,%ebp
   10690:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10693:	83 ec 08             	sub    $0x8,%esp
   10696:	68 df 15 01 00       	push   $0x115df
   1069b:	ff 75 08             	push   0x8(%ebp)
   1069e:	e8 b0 fe ff ff       	call   10553 <do_default_handler>
   106a3:	83 c4 10             	add    $0x10,%esp
}
   106a6:	90                   	nop
   106a7:	c9                   	leave  
   106a8:	c3                   	ret    

000106a9 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   106a9:	55                   	push   %ebp
   106aa:	89 e5                	mov    %esp,%ebp
   106ac:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   106af:	83 ec 08             	sub    $0x8,%esp
   106b2:	68 f6 15 01 00       	push   $0x115f6
   106b7:	ff 75 08             	push   0x8(%ebp)
   106ba:	e8 94 fe ff ff       	call   10553 <do_default_handler>
   106bf:	83 c4 10             	add    $0x10,%esp
}
   106c2:	90                   	nop
   106c3:	c9                   	leave  
   106c4:	c3                   	ret    

000106c5 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   106c5:	55                   	push   %ebp
   106c6:	89 e5                	mov    %esp,%ebp
   106c8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   106cb:	83 ec 08             	sub    $0x8,%esp
   106ce:	68 0c 16 01 00       	push   $0x1160c
   106d3:	ff 75 08             	push   0x8(%ebp)
   106d6:	e8 78 fe ff ff       	call   10553 <do_default_handler>
   106db:	83 c4 10             	add    $0x10,%esp
}
   106de:	90                   	nop
   106df:	c9                   	leave  
   106e0:	c3                   	ret    

000106e1 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   106e1:	55                   	push   %ebp
   106e2:	89 e5                	mov    %esp,%ebp
   106e4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   106e7:	83 ec 08             	sub    $0x8,%esp
   106ea:	68 2a 16 01 00       	push   $0x1162a
   106ef:	ff 75 08             	push   0x8(%ebp)
   106f2:	e8 5c fe ff ff       	call   10553 <do_default_handler>
   106f7:	83 c4 10             	add    $0x10,%esp
}
   106fa:	90                   	nop
   106fb:	c9                   	leave  
   106fc:	c3                   	ret    

000106fd <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   106fd:	55                   	push   %ebp
   106fe:	89 e5                	mov    %esp,%ebp
   10700:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10703:	83 ec 08             	sub    $0x8,%esp
   10706:	68 48 16 01 00       	push   $0x11648
   1070b:	ff 75 08             	push   0x8(%ebp)
   1070e:	e8 40 fe ff ff       	call   10553 <do_default_handler>
   10713:	83 c4 10             	add    $0x10,%esp
}
   10716:	90                   	nop
   10717:	c9                   	leave  
   10718:	c3                   	ret    

00010719 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10719:	55                   	push   %ebp
   1071a:	89 e5                	mov    %esp,%ebp
   1071c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   1071f:	83 ec 08             	sub    $0x8,%esp
   10722:	68 65 16 01 00       	push   $0x11665
   10727:	ff 75 08             	push   0x8(%ebp)
   1072a:	e8 24 fe ff ff       	call   10553 <do_default_handler>
   1072f:	83 c4 10             	add    $0x10,%esp
}
   10732:	90                   	nop
   10733:	c9                   	leave  
   10734:	c3                   	ret    

00010735 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10735:	55                   	push   %ebp
   10736:	89 e5                	mov    %esp,%ebp
   10738:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   1073b:	83 ec 08             	sub    $0x8,%esp
   1073e:	68 7a 16 01 00       	push   $0x1167a
   10743:	ff 75 08             	push   0x8(%ebp)
   10746:	e8 08 fe ff ff       	call   10553 <do_default_handler>
   1074b:	83 c4 10             	add    $0x10,%esp
}
   1074e:	90                   	nop
   1074f:	c9                   	leave  
   10750:	c3                   	ret    

00010751 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10751:	55                   	push   %ebp
   10752:	89 e5                	mov    %esp,%ebp
   10754:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   10757:	83 ec 08             	sub    $0x8,%esp
   1075a:	68 8e 16 01 00       	push   $0x1168e
   1075f:	ff 75 08             	push   0x8(%ebp)
   10762:	e8 ec fd ff ff       	call   10553 <do_default_handler>
   10767:	83 c4 10             	add    $0x10,%esp
}
   1076a:	90                   	nop
   1076b:	c9                   	leave  
   1076c:	c3                   	ret    

0001076d <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   1076d:	55                   	push   %ebp
   1076e:	89 e5                	mov    %esp,%ebp
   10770:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10773:	83 ec 08             	sub    $0x8,%esp
   10776:	68 a8 16 01 00       	push   $0x116a8
   1077b:	ff 75 08             	push   0x8(%ebp)
   1077e:	e8 d0 fd ff ff       	call   10553 <do_default_handler>
   10783:	83 c4 10             	add    $0x10,%esp
}
   10786:	90                   	nop
   10787:	c9                   	leave  
   10788:	c3                   	ret    

00010789 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10789:	55                   	push   %ebp
   1078a:	89 e5                	mov    %esp,%ebp
   1078c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   1078f:	83 ec 08             	sub    $0x8,%esp
   10792:	68 c0 16 01 00       	push   $0x116c0
   10797:	ff 75 08             	push   0x8(%ebp)
   1079a:	e8 b4 fd ff ff       	call   10553 <do_default_handler>
   1079f:	83 c4 10             	add    $0x10,%esp
}
   107a2:	90                   	nop
   107a3:	c9                   	leave  
   107a4:	c3                   	ret    

000107a5 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   107a5:	55                   	push   %ebp
   107a6:	89 e5                	mov    %esp,%ebp
   107a8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   107ab:	83 ec 08             	sub    $0x8,%esp
   107ae:	68 d8 16 01 00       	push   $0x116d8
   107b3:	ff 75 08             	push   0x8(%ebp)
   107b6:	e8 98 fd ff ff       	call   10553 <do_default_handler>
   107bb:	83 c4 10             	add    $0x10,%esp
}
   107be:	90                   	nop
   107bf:	c9                   	leave  
   107c0:	c3                   	ret    

000107c1 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   107c1:	55                   	push   %ebp
   107c2:	89 e5                	mov    %esp,%ebp
   107c4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   107c7:	83 ec 08             	sub    $0x8,%esp
   107ca:	68 f4 16 01 00       	push   $0x116f4
   107cf:	ff 75 08             	push   0x8(%ebp)
   107d2:	e8 7c fd ff ff       	call   10553 <do_default_handler>
   107d7:	83 c4 10             	add    $0x10,%esp
}
   107da:	90                   	nop
   107db:	c9                   	leave  
   107dc:	c3                   	ret    

000107dd <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   107dd:	55                   	push   %ebp
   107de:	89 e5                	mov    %esp,%ebp
   107e0:	83 ec 08             	sub    $0x8,%esp
   107e3:	8b 55 0c             	mov    0xc(%ebp),%edx
   107e6:	8b 45 14             	mov    0x14(%ebp),%eax
   107e9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   107ed:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   107f1:	8b 45 10             	mov    0x10(%ebp),%eax
   107f4:	89 c2                	mov    %eax,%edx
   107f6:	8b 45 08             	mov    0x8(%ebp),%eax
   107f9:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   107fc:	8b 45 10             	mov    0x10(%ebp),%eax
   107ff:	c1 e8 10             	shr    $0x10,%eax
   10802:	89 c2                	mov    %eax,%edx
   10804:	8b 45 08             	mov    0x8(%ebp),%eax
   10807:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1080b:	8b 45 08             	mov    0x8(%ebp),%eax
   1080e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10812:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   10816:	8b 45 08             	mov    0x8(%ebp),%eax
   10819:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1081d:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10821:	90                   	nop
   10822:	c9                   	leave  
   10823:	c3                   	ret    

00010824 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   10824:	55                   	push   %ebp
   10825:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   10827:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   1082e:	7f 06                	jg     10836 <idt_install+0x12>
   10830:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10834:	79 07                	jns    1083d <idt_install+0x19>
   10836:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1083b:	eb 25                	jmp    10862 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   1083d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10840:	8b 55 08             	mov    0x8(%ebp),%edx
   10843:	c1 e2 03             	shl    $0x3,%edx
   10846:	81 c2 40 18 02 00    	add    $0x21840,%edx
   1084c:	68 00 8e 00 00       	push   $0x8e00
   10851:	50                   	push   %eax
   10852:	6a 08                	push   $0x8
   10854:	52                   	push   %edx
   10855:	e8 83 ff ff ff       	call   107dd <gate_desc_set>
   1085a:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   1085d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10862:	c9                   	leave  
   10863:	c3                   	ret    

00010864 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   10864:	55                   	push   %ebp
   10865:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   10867:	6a 11                	push   $0x11
   10869:	6a 20                	push   $0x20
   1086b:	e8 b1 fb ff ff       	call   10421 <outb>
   10870:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   10873:	6a 20                	push   $0x20
   10875:	6a 21                	push   $0x21
   10877:	e8 a5 fb ff ff       	call   10421 <outb>
   1087c:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   1087f:	6a 04                	push   $0x4
   10881:	6a 21                	push   $0x21
   10883:	e8 99 fb ff ff       	call   10421 <outb>
   10888:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   1088b:	6a 01                	push   $0x1
   1088d:	6a 21                	push   $0x21
   1088f:	e8 8d fb ff ff       	call   10421 <outb>
   10894:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   10897:	6a 11                	push   $0x11
   10899:	68 a0 00 00 00       	push   $0xa0
   1089e:	e8 7e fb ff ff       	call   10421 <outb>
   108a3:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   108a6:	6a 28                	push   $0x28
   108a8:	68 a1 00 00 00       	push   $0xa1
   108ad:	e8 6f fb ff ff       	call   10421 <outb>
   108b2:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   108b5:	6a 02                	push   $0x2
   108b7:	68 a1 00 00 00       	push   $0xa1
   108bc:	e8 60 fb ff ff       	call   10421 <outb>
   108c1:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   108c4:	6a 01                	push   $0x1
   108c6:	68 a1 00 00 00       	push   $0xa1
   108cb:	e8 51 fb ff ff       	call   10421 <outb>
   108d0:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   108d3:	68 fb 00 00 00       	push   $0xfb
   108d8:	6a 21                	push   $0x21
   108da:	e8 42 fb ff ff       	call   10421 <outb>
   108df:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   108e2:	68 ff 00 00 00       	push   $0xff
   108e7:	68 a1 00 00 00       	push   $0xa1
   108ec:	e8 30 fb ff ff       	call   10421 <outb>
   108f1:	83 c4 08             	add    $0x8,%esp


}
   108f4:	90                   	nop
   108f5:	c9                   	leave  
   108f6:	c3                   	ret    

000108f7 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   108f7:	55                   	push   %ebp
   108f8:	89 e5                	mov    %esp,%ebp
   108fa:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   108fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10904:	eb 14                	jmp    1091a <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   10906:	68 2a 00 01 00       	push   $0x1002a
   1090b:	ff 75 fc             	push   -0x4(%ebp)
   1090e:	e8 11 ff ff ff       	call   10824 <idt_install>
   10913:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10916:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1091a:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10921:	7e e3                	jle    10906 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10923:	68 47 00 01 00       	push   $0x10047
   10928:	6a 00                	push   $0x0
   1092a:	e8 f5 fe ff ff       	call   10824 <idt_install>
   1092f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10932:	68 64 00 01 00       	push   $0x10064
   10937:	6a 01                	push   $0x1
   10939:	e8 e6 fe ff ff       	call   10824 <idt_install>
   1093e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   10941:	68 81 00 01 00       	push   $0x10081
   10946:	6a 02                	push   $0x2
   10948:	e8 d7 fe ff ff       	call   10824 <idt_install>
   1094d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   10950:	68 9e 00 01 00       	push   $0x1009e
   10955:	6a 03                	push   $0x3
   10957:	e8 c8 fe ff ff       	call   10824 <idt_install>
   1095c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1095f:	68 bb 00 01 00       	push   $0x100bb
   10964:	6a 04                	push   $0x4
   10966:	e8 b9 fe ff ff       	call   10824 <idt_install>
   1096b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   1096e:	68 d8 00 01 00       	push   $0x100d8
   10973:	6a 05                	push   $0x5
   10975:	e8 aa fe ff ff       	call   10824 <idt_install>
   1097a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   1097d:	68 f5 00 01 00       	push   $0x100f5
   10982:	6a 06                	push   $0x6
   10984:	e8 9b fe ff ff       	call   10824 <idt_install>
   10989:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   1098c:	68 12 01 01 00       	push   $0x10112
   10991:	6a 07                	push   $0x7
   10993:	e8 8c fe ff ff       	call   10824 <idt_install>
   10998:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1099b:	68 2f 01 01 00       	push   $0x1012f
   109a0:	6a 08                	push   $0x8
   109a2:	e8 7d fe ff ff       	call   10824 <idt_install>
   109a7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   109aa:	68 4a 01 01 00       	push   $0x1014a
   109af:	6a 0a                	push   $0xa
   109b1:	e8 6e fe ff ff       	call   10824 <idt_install>
   109b6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   109b9:	68 65 01 01 00       	push   $0x10165
   109be:	6a 0b                	push   $0xb
   109c0:	e8 5f fe ff ff       	call   10824 <idt_install>
   109c5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   109c8:	68 80 01 01 00       	push   $0x10180
   109cd:	6a 0c                	push   $0xc
   109cf:	e8 50 fe ff ff       	call   10824 <idt_install>
   109d4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   109d7:	68 9b 01 01 00       	push   $0x1019b
   109dc:	6a 0d                	push   $0xd
   109de:	e8 41 fe ff ff       	call   10824 <idt_install>
   109e3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   109e6:	68 b6 01 01 00       	push   $0x101b6
   109eb:	6a 0e                	push   $0xe
   109ed:	e8 32 fe ff ff       	call   10824 <idt_install>
   109f2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   109f5:	68 d1 01 01 00       	push   $0x101d1
   109fa:	6a 10                	push   $0x10
   109fc:	e8 23 fe ff ff       	call   10824 <idt_install>
   10a01:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10a04:	68 ee 01 01 00       	push   $0x101ee
   10a09:	6a 11                	push   $0x11
   10a0b:	e8 14 fe ff ff       	call   10824 <idt_install>
   10a10:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10a13:	68 09 02 01 00       	push   $0x10209
   10a18:	6a 12                	push   $0x12
   10a1a:	e8 05 fe ff ff       	call   10824 <idt_install>
   10a1f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10a22:	68 26 02 01 00       	push   $0x10226
   10a27:	6a 13                	push   $0x13
   10a29:	e8 f6 fd ff ff       	call   10824 <idt_install>
   10a2e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10a31:	68 43 02 01 00       	push   $0x10243
   10a36:	6a 14                	push   $0x14
   10a38:	e8 e7 fd ff ff       	call   10824 <idt_install>
   10a3d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   10a40:	68 60 02 01 00       	push   $0x10260
   10a45:	6a 15                	push   $0x15
   10a47:	e8 d8 fd ff ff       	call   10824 <idt_install>
   10a4c:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   10a4f:	b8 40 18 02 00       	mov    $0x21840,%eax
   10a54:	68 00 08 00 00       	push   $0x800
   10a59:	50                   	push   %eax
   10a5a:	e8 e3 f9 ff ff       	call   10442 <lidt>
   10a5f:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   10a62:	e8 fd fd ff ff       	call   10864 <init_pic>
}
   10a67:	90                   	nop
   10a68:	c9                   	leave  
   10a69:	c3                   	ret    

00010a6a <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   10a6a:	55                   	push   %ebp
   10a6b:	89 e5                	mov    %esp,%ebp
   10a6d:	53                   	push   %ebx
   10a6e:	83 ec 14             	sub    $0x14,%esp
   10a71:	8b 45 08             	mov    0x8(%ebp),%eax
   10a74:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10a77:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10a7b:	76 7f                	jbe    10afc <idt_enable+0x92>
   10a7d:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   10a81:	77 79                	ja     10afc <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10a83:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10a87:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10a8b:	77 33                	ja     10ac0 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10a8d:	6a 21                	push   $0x21
   10a8f:	e8 70 f9 ff ff       	call   10404 <inb>
   10a94:	83 c4 04             	add    $0x4,%esp
   10a97:	89 c3                	mov    %eax,%ebx
   10a99:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10a9d:	ba 01 00 00 00       	mov    $0x1,%edx
   10aa2:	89 c1                	mov    %eax,%ecx
   10aa4:	d3 e2                	shl    %cl,%edx
   10aa6:	89 d0                	mov    %edx,%eax
   10aa8:	f7 d0                	not    %eax
   10aaa:	21 d8                	and    %ebx,%eax
   10aac:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10aaf:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ab3:	50                   	push   %eax
   10ab4:	6a 21                	push   $0x21
   10ab6:	e8 66 f9 ff ff       	call   10421 <outb>
   10abb:	83 c4 08             	add    $0x8,%esp
   10abe:	eb 3d                	jmp    10afd <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10ac0:	68 a1 00 00 00       	push   $0xa1
   10ac5:	e8 3a f9 ff ff       	call   10404 <inb>
   10aca:	83 c4 04             	add    $0x4,%esp
   10acd:	89 c3                	mov    %eax,%ebx
   10acf:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10ad3:	83 e8 08             	sub    $0x8,%eax
   10ad6:	ba 01 00 00 00       	mov    $0x1,%edx
   10adb:	89 c1                	mov    %eax,%ecx
   10add:	d3 e2                	shl    %cl,%edx
   10adf:	89 d0                	mov    %edx,%eax
   10ae1:	f7 d0                	not    %eax
   10ae3:	21 d8                	and    %ebx,%eax
   10ae5:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10ae8:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10aec:	50                   	push   %eax
   10aed:	68 a1 00 00 00       	push   $0xa1
   10af2:	e8 2a f9 ff ff       	call   10421 <outb>
   10af7:	83 c4 08             	add    $0x8,%esp
   10afa:	eb 01                	jmp    10afd <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10afc:	90                   	nop
  }
  
}
   10afd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b00:	c9                   	leave  
   10b01:	c3                   	ret    

00010b02 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   10b02:	55                   	push   %ebp
   10b03:	89 e5                	mov    %esp,%ebp
   10b05:	53                   	push   %ebx
   10b06:	83 ec 14             	sub    $0x14,%esp
   10b09:	8b 45 08             	mov    0x8(%ebp),%eax
   10b0c:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10b0f:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10b13:	76 7b                	jbe    10b90 <idt_disable+0x8e>
   10b15:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   10b19:	77 75                	ja     10b90 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10b1b:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10b1f:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10b23:	77 31                	ja     10b56 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10b25:	6a 21                	push   $0x21
   10b27:	e8 d8 f8 ff ff       	call   10404 <inb>
   10b2c:	83 c4 04             	add    $0x4,%esp
   10b2f:	89 c3                	mov    %eax,%ebx
   10b31:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10b35:	ba 01 00 00 00       	mov    $0x1,%edx
   10b3a:	89 c1                	mov    %eax,%ecx
   10b3c:	d3 e2                	shl    %cl,%edx
   10b3e:	89 d0                	mov    %edx,%eax
   10b40:	09 d8                	or     %ebx,%eax
   10b42:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10b45:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10b49:	50                   	push   %eax
   10b4a:	6a 21                	push   $0x21
   10b4c:	e8 d0 f8 ff ff       	call   10421 <outb>
   10b51:	83 c4 08             	add    $0x8,%esp
   10b54:	eb 3b                	jmp    10b91 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   10b56:	68 a1 00 00 00       	push   $0xa1
   10b5b:	e8 a4 f8 ff ff       	call   10404 <inb>
   10b60:	83 c4 04             	add    $0x4,%esp
   10b63:	89 c3                	mov    %eax,%ebx
   10b65:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10b69:	83 e8 08             	sub    $0x8,%eax
   10b6c:	ba 01 00 00 00       	mov    $0x1,%edx
   10b71:	89 c1                	mov    %eax,%ecx
   10b73:	d3 e2                	shl    %cl,%edx
   10b75:	89 d0                	mov    %edx,%eax
   10b77:	09 d8                	or     %ebx,%eax
   10b79:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10b7c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10b80:	50                   	push   %eax
   10b81:	68 a1 00 00 00       	push   $0xa1
   10b86:	e8 96 f8 ff ff       	call   10421 <outb>
   10b8b:	83 c4 08             	add    $0x8,%esp
   10b8e:	eb 01                	jmp    10b91 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10b90:	90                   	nop
  }
  
}
   10b91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b94:	c9                   	leave  
   10b95:	c3                   	ret    

00010b96 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   10b96:	55                   	push   %ebp
   10b97:	89 e5                	mov    %esp,%ebp
  cli();
   10b99:	e8 51 f8 ff ff       	call   103ef <cli>
}
   10b9e:	90                   	nop
   10b9f:	5d                   	pop    %ebp
   10ba0:	c3                   	ret    

00010ba1 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   10ba1:	55                   	push   %ebp
   10ba2:	89 e5                	mov    %esp,%ebp
  sti();
   10ba4:	e8 4d f8 ff ff       	call   103f6 <sti>
}
   10ba9:	90                   	nop
   10baa:	5d                   	pop    %ebp
   10bab:	c3                   	ret    

00010bac <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   10baf:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   10bb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10bb7:	78 29                	js     10be2 <pic_send_eoi+0x36>
   10bb9:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   10bbd:	7f 23                	jg     10be2 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   10bbf:	6a 20                	push   $0x20
   10bc1:	6a 20                	push   $0x20
   10bc3:	e8 59 f8 ff ff       	call   10421 <outb>
   10bc8:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   10bcb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10bcf:	7e 12                	jle    10be3 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   10bd1:	6a 20                	push   $0x20
   10bd3:	68 a0 00 00 00       	push   $0xa0
   10bd8:	e8 44 f8 ff ff       	call   10421 <outb>
   10bdd:	83 c4 08             	add    $0x8,%esp
   10be0:	eb 01                	jmp    10be3 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   10be2:	90                   	nop
  }

   10be3:	c9                   	leave  
   10be4:	c3                   	ret    

00010be5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10be5:	55                   	push   %ebp
   10be6:	89 e5                	mov    %esp,%ebp
   10be8:	83 ec 08             	sub    $0x8,%esp
   10beb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bee:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bf1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10bf5:	89 d0                	mov    %edx,%eax
   10bf7:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10bfa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bfe:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10c02:	ee                   	out    %al,(%dx)
}
   10c03:	90                   	nop
   10c04:	c9                   	leave  
   10c05:	c3                   	ret    

00010c06 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   10c06:	55                   	push   %ebp
   10c07:	89 e5                	mov    %esp,%ebp
   10c09:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10c0c:	a1 40 20 02 00       	mov    0x22040,%eax
   10c11:	83 c0 01             	add    $0x1,%eax
   10c14:	a3 40 20 02 00       	mov    %eax,0x22040

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   10c19:	83 ec 0c             	sub    $0xc,%esp
   10c1c:	6a 20                	push   $0x20
   10c1e:	e8 89 ff ff ff       	call   10bac <pic_send_eoi>
   10c23:	83 c4 10             	add    $0x10,%esp
}
   10c26:	90                   	nop
   10c27:	c9                   	leave  
   10c28:	c3                   	ret    

00010c29 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   10c29:	55                   	push   %ebp
   10c2a:	89 e5                	mov    %esp,%ebp
   10c2c:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   10c2f:	6a 36                	push   $0x36
   10c31:	6a 43                	push   $0x43
   10c33:	e8 ad ff ff ff       	call   10be5 <outb>
   10c38:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   10c3b:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   10c41:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10c45:	0f b6 c0             	movzbl %al,%eax
   10c48:	50                   	push   %eax
   10c49:	6a 40                	push   $0x40
   10c4b:	e8 95 ff ff ff       	call   10be5 <outb>
   10c50:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   10c53:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10c57:	66 c1 e8 08          	shr    $0x8,%ax
   10c5b:	0f b6 c0             	movzbl %al,%eax
   10c5e:	50                   	push   %eax
   10c5f:	6a 40                	push   $0x40
   10c61:	e8 7f ff ff ff       	call   10be5 <outb>
   10c66:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   10c69:	83 ec 08             	sub    $0x8,%esp
   10c6c:	68 7b 02 01 00       	push   $0x1027b
   10c71:	6a 20                	push   $0x20
   10c73:	e8 ac fb ff ff       	call   10824 <idt_install>
   10c78:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   10c7b:	83 ec 0c             	sub    $0xc,%esp
   10c7e:	6a 20                	push   $0x20
   10c80:	e8 e5 fd ff ff       	call   10a6a <idt_enable>
   10c85:	83 c4 10             	add    $0x10,%esp

}
   10c88:	90                   	nop
   10c89:	c9                   	leave  
   10c8a:	c3                   	ret    

00010c8b <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   10c8b:	55                   	push   %ebp
   10c8c:	89 e5                	mov    %esp,%ebp
   10c8e:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10c91:	c7 05 40 20 02 00 00 	movl   $0x0,0x22040
   10c98:	00 00 00 
    init_pit();
   10c9b:	e8 89 ff ff ff       	call   10c29 <init_pit>
   10ca0:	90                   	nop
   10ca1:	c9                   	leave  
   10ca2:	c3                   	ret    

00010ca3 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   10ca3:	55                   	push   %ebp
   10ca4:	89 e5                	mov    %esp,%ebp
   10ca6:	83 ec 08             	sub    $0x8,%esp
    //1.初始化并重新加载GDT表
    gdt_init();
   10ca9:	e8 d1 f6 ff ff       	call   1037f <gdt_init>

    //2.初始化日志程序,便于后期调用
    log_init();
   10cae:	e8 ed 05 00 00       	call   112a0 <log_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   10cb3:	e8 3f fc ff ff       	call   108f7 <idt_init>

    //4.初始化定时器的中断处理
    time_init();
   10cb8:	e8 ce ff ff ff       	call   10c8b <time_init>


    ASSERT(boot_info->ram_region_count == 0);
   10cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc0:	8b 40 50             	mov    0x50(%eax),%eax
   10cc3:	85 c0                	test   %eax,%eax
   10cc5:	74 19                	je     10ce0 <kernel_init+0x3d>
   10cc7:	68 10 17 01 00       	push   $0x11710
   10ccc:	68 d8 17 01 00       	push   $0x117d8
   10cd1:	6a 27                	push   $0x27
   10cd3:	68 34 17 01 00       	push   $0x11734
   10cd8:	e8 6d 00 00 00       	call   10d4a <pannic>
   10cdd:	83 c4 10             	add    $0x10,%esp


    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   10ce0:	90                   	nop
   10ce1:	c9                   	leave  
   10ce2:	c3                   	ret    

00010ce3 <init_main>:


void init_main(void) {
   10ce3:	55                   	push   %ebp
   10ce4:	89 e5                	mov    %esp,%ebp
   10ce6:	83 ec 18             	sub    $0x18,%esp

    log_printf("Kernel is running......");
   10ce9:	83 ec 0c             	sub    $0xc,%esp
   10cec:	68 69 17 01 00       	push   $0x11769
   10cf1:	e8 1f 06 00 00       	call   11315 <log_printf>
   10cf6:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "kbpoyoOS", OS_VERSION);
   10cf9:	83 ec 04             	sub    $0x4,%esp
   10cfc:	68 81 17 01 00       	push   $0x11781
   10d01:	68 87 17 01 00       	push   $0x11787
   10d06:	68 90 17 01 00       	push   $0x11790
   10d0b:	e8 05 06 00 00       	call   11315 <log_printf>
   10d10:	83 c4 10             	add    $0x10,%esp
    log_printf("dex 10 = %d, hex 10 = %x bin: 10 = %b char: %c", 65536, 0, 65536, 'd');
   10d13:	83 ec 0c             	sub    $0xc,%esp
   10d16:	6a 64                	push   $0x64
   10d18:	68 00 00 01 00       	push   $0x10000
   10d1d:	6a 00                	push   $0x0
   10d1f:	68 00 00 01 00       	push   $0x10000
   10d24:	68 a8 17 01 00       	push   $0x117a8
   10d29:	e8 e7 05 00 00       	call   11315 <log_printf>
   10d2e:	83 c4 20             	add    $0x20,%esp
    //idt_enable_global(); 

    int a = 10 / 0;
   10d31:	b8 0a 00 00 00       	mov    $0xa,%eax
   10d36:	b9 00 00 00 00       	mov    $0x0,%ecx
   10d3b:	99                   	cltd   
   10d3c:	f7 f9                	idiv   %ecx
   10d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)


    for (;;){}
   10d41:	eb fe                	jmp    10d41 <init_main+0x5e>

00010d43 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10d43:	55                   	push   %ebp
   10d44:	89 e5                	mov    %esp,%ebp
   10d46:	f4                   	hlt    
   10d47:	90                   	nop
   10d48:	5d                   	pop    %ebp
   10d49:	c3                   	ret    

00010d4a <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   10d4a:	55                   	push   %ebp
   10d4b:	89 e5                	mov    %esp,%ebp
   10d4d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   10d50:	83 ec 08             	sub    $0x8,%esp
   10d53:	ff 75 14             	push   0x14(%ebp)
   10d56:	68 e4 17 01 00       	push   $0x117e4
   10d5b:	e8 b5 05 00 00       	call   11315 <log_printf>
   10d60:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   10d63:	ff 75 10             	push   0x10(%ebp)
   10d66:	ff 75 0c             	push   0xc(%ebp)
   10d69:	ff 75 08             	push   0x8(%ebp)
   10d6c:	68 f5 17 01 00       	push   $0x117f5
   10d71:	e8 9f 05 00 00       	call   11315 <log_printf>
   10d76:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   10d79:	e8 c5 ff ff ff       	call   10d43 <hlt>
   10d7e:	eb f9                	jmp    10d79 <pannic+0x2f>

00010d80 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   10d80:	55                   	push   %ebp
   10d81:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   10d83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d87:	74 3b                	je     10dc4 <kernel_strcpy+0x44>
   10d89:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d8d:	74 35                	je     10dc4 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   10d8f:	eb 17                	jmp    10da8 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   10d91:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d94:	8d 42 01             	lea    0x1(%edx),%eax
   10d97:	89 45 0c             	mov    %eax,0xc(%ebp)
   10d9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9d:	8d 48 01             	lea    0x1(%eax),%ecx
   10da0:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10da3:	0f b6 12             	movzbl (%edx),%edx
   10da6:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10da8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dab:	0f b6 00             	movzbl (%eax),%eax
   10dae:	84 c0                	test   %al,%al
   10db0:	74 0a                	je     10dbc <kernel_strcpy+0x3c>
   10db2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10db5:	0f b6 00             	movzbl (%eax),%eax
   10db8:	84 c0                	test   %al,%al
   10dba:	75 d5                	jne    10d91 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   10dbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbf:	c6 00 00             	movb   $0x0,(%eax)
   10dc2:	eb 01                	jmp    10dc5 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   10dc4:	90                   	nop
    
}
   10dc5:	5d                   	pop    %ebp
   10dc6:	c3                   	ret    

00010dc7 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   10dc7:	55                   	push   %ebp
   10dc8:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   10dca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dce:	74 45                	je     10e15 <kernel_strncpy+0x4e>
   10dd0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10dd4:	74 3f                	je     10e15 <kernel_strncpy+0x4e>
   10dd6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10dda:	74 39                	je     10e15 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   10ddc:	eb 17                	jmp    10df5 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   10dde:	8b 55 0c             	mov    0xc(%ebp),%edx
   10de1:	8d 42 01             	lea    0x1(%edx),%eax
   10de4:	89 45 0c             	mov    %eax,0xc(%ebp)
   10de7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dea:	8d 48 01             	lea    0x1(%eax),%ecx
   10ded:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10df0:	0f b6 12             	movzbl (%edx),%edx
   10df3:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   10df5:	8b 45 10             	mov    0x10(%ebp),%eax
   10df8:	8d 50 ff             	lea    -0x1(%eax),%edx
   10dfb:	89 55 10             	mov    %edx,0x10(%ebp)
   10dfe:	83 f8 01             	cmp    $0x1,%eax
   10e01:	7e 0a                	jle    10e0d <kernel_strncpy+0x46>
   10e03:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e06:	0f b6 00             	movzbl (%eax),%eax
   10e09:	84 c0                	test   %al,%al
   10e0b:	75 d1                	jne    10dde <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   10e0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e10:	c6 00 00             	movb   $0x0,(%eax)
   10e13:	eb 01                	jmp    10e16 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   10e15:	90                   	nop
}
   10e16:	5d                   	pop    %ebp
   10e17:	c3                   	ret    

00010e18 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   10e18:	55                   	push   %ebp
   10e19:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return - 1;
   10e1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e1f:	74 06                	je     10e27 <kernel_strncmp+0xf>
   10e21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e25:	75 0f                	jne    10e36 <kernel_strncmp+0x1e>
   10e27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10e2c:	eb 52                	jmp    10e80 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   10e2e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   10e32:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   10e36:	8b 45 08             	mov    0x8(%ebp),%eax
   10e39:	0f b6 00             	movzbl (%eax),%eax
   10e3c:	84 c0                	test   %al,%al
   10e3e:	74 24                	je     10e64 <kernel_strncmp+0x4c>
   10e40:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e43:	0f b6 00             	movzbl (%eax),%eax
   10e46:	84 c0                	test   %al,%al
   10e48:	74 1a                	je     10e64 <kernel_strncmp+0x4c>
   10e4a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   10e4e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e52:	74 10                	je     10e64 <kernel_strncmp+0x4c>
   10e54:	8b 45 08             	mov    0x8(%ebp),%eax
   10e57:	0f b6 10             	movzbl (%eax),%edx
   10e5a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e5d:	0f b6 00             	movzbl (%eax),%eax
   10e60:	38 c2                	cmp    %al,%dl
   10e62:	74 ca                	je     10e2e <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   10e64:	8b 45 08             	mov    0x8(%ebp),%eax
   10e67:	0f b6 10             	movzbl (%eax),%edx
   10e6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e6d:	0f b6 00             	movzbl (%eax),%eax
   10e70:	38 c2                	cmp    %al,%dl
   10e72:	7e 07                	jle    10e7b <kernel_strncmp+0x63>
   10e74:	b8 01 00 00 00       	mov    $0x1,%eax
   10e79:	eb 05                	jmp    10e80 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   10e7b:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   10e80:	5d                   	pop    %ebp
   10e81:	c3                   	ret    

00010e82 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   10e82:	55                   	push   %ebp
   10e83:	89 e5                	mov    %esp,%ebp
   10e85:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   10e88:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e8c:	75 07                	jne    10e95 <kernel_strlen+0x13>
   10e8e:	b8 00 00 00 00       	mov    $0x0,%eax
   10e93:	eb 20                	jmp    10eb5 <kernel_strlen+0x33>

    int len = 0;
   10e95:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   10e9c:	eb 04                	jmp    10ea2 <kernel_strlen+0x20>
   10e9e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea5:	8d 50 01             	lea    0x1(%eax),%edx
   10ea8:	89 55 08             	mov    %edx,0x8(%ebp)
   10eab:	0f b6 00             	movzbl (%eax),%eax
   10eae:	84 c0                	test   %al,%al
   10eb0:	75 ec                	jne    10e9e <kernel_strlen+0x1c>

    return len;
   10eb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   10eb5:	c9                   	leave  
   10eb6:	c3                   	ret    

00010eb7 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   10eb7:	55                   	push   %ebp
   10eb8:	89 e5                	mov    %esp,%ebp
   10eba:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   10ebd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ec1:	74 40                	je     10f03 <kernel_memcpy+0x4c>
   10ec3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ec7:	74 3a                	je     10f03 <kernel_memcpy+0x4c>
   10ec9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ecd:	74 34                	je     10f03 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   10ecf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   10ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ed8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   10edb:	eb 17                	jmp    10ef4 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   10edd:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10ee0:	8d 42 01             	lea    0x1(%edx),%eax
   10ee3:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10ee6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ee9:	8d 48 01             	lea    0x1(%eax),%ecx
   10eec:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10eef:	0f b6 12             	movzbl (%edx),%edx
   10ef2:	88 10                	mov    %dl,(%eax)
    while (size--) {
   10ef4:	8b 45 10             	mov    0x10(%ebp),%eax
   10ef7:	8d 50 ff             	lea    -0x1(%eax),%edx
   10efa:	89 55 10             	mov    %edx,0x10(%ebp)
   10efd:	85 c0                	test   %eax,%eax
   10eff:	75 dc                	jne    10edd <kernel_memcpy+0x26>
   10f01:	eb 01                	jmp    10f04 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   10f03:	90                   	nop
    }
    
}
   10f04:	c9                   	leave  
   10f05:	c3                   	ret    

00010f06 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   10f06:	55                   	push   %ebp
   10f07:	89 e5                	mov    %esp,%ebp
   10f09:	83 ec 14             	sub    $0x14,%esp
   10f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f0f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   10f12:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f16:	74 2c                	je     10f44 <kernel_memset+0x3e>
   10f18:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f1c:	74 26                	je     10f44 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   10f1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f21:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   10f24:	eb 0f                	jmp    10f35 <kernel_memset+0x2f>
        *(d++) = v;
   10f26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f29:	8d 50 01             	lea    0x1(%eax),%edx
   10f2c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f2f:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   10f33:	88 10                	mov    %dl,(%eax)
    while (size--) {
   10f35:	8b 45 10             	mov    0x10(%ebp),%eax
   10f38:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f3b:	89 55 10             	mov    %edx,0x10(%ebp)
   10f3e:	85 c0                	test   %eax,%eax
   10f40:	75 e4                	jne    10f26 <kernel_memset+0x20>
   10f42:	eb 01                	jmp    10f45 <kernel_memset+0x3f>
    if (!dest || !size) return;
   10f44:	90                   	nop
    }
    
}
   10f45:	c9                   	leave  
   10f46:	c3                   	ret    

00010f47 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   10f47:	55                   	push   %ebp
   10f48:	89 e5                	mov    %esp,%ebp
   10f4a:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   10f4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f51:	74 0c                	je     10f5f <kernel_memcmp+0x18>
   10f53:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f57:	74 06                	je     10f5f <kernel_memcmp+0x18>
   10f59:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f5d:	75 07                	jne    10f66 <kernel_memcmp+0x1f>
   10f5f:	b8 00 00 00 00       	mov    $0x0,%eax
   10f64:	eb 63                	jmp    10fc9 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   10f66:	8b 45 08             	mov    0x8(%ebp),%eax
   10f69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   10f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f6f:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   10f72:	eb 08                	jmp    10f7c <kernel_memcmp+0x35>
        d1++;
   10f74:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   10f78:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   10f7c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   10f80:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f84:	74 10                	je     10f96 <kernel_memcmp+0x4f>
   10f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f89:	0f b6 10             	movzbl (%eax),%edx
   10f8c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f8f:	0f b6 00             	movzbl (%eax),%eax
   10f92:	38 c2                	cmp    %al,%dl
   10f94:	74 de                	je     10f74 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   10f96:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f99:	0f b6 10             	movzbl (%eax),%edx
   10f9c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f9f:	0f b6 00             	movzbl (%eax),%eax
   10fa2:	38 c2                	cmp    %al,%dl
   10fa4:	76 07                	jbe    10fad <kernel_memcmp+0x66>
   10fa6:	b8 01 00 00 00       	mov    $0x1,%eax
   10fab:	eb 1c                	jmp    10fc9 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   10fad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fb0:	0f b6 10             	movzbl (%eax),%edx
   10fb3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fb6:	0f b6 00             	movzbl (%eax),%eax
   10fb9:	38 c2                	cmp    %al,%dl
   10fbb:	73 07                	jae    10fc4 <kernel_memcmp+0x7d>
   10fbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10fc2:	eb 05                	jmp    10fc9 <kernel_memcmp+0x82>
    else return 0;
   10fc4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fc9:	c9                   	leave  
   10fca:	c3                   	ret    

00010fcb <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   10fcb:	55                   	push   %ebp
   10fcc:	89 e5                	mov    %esp,%ebp
   10fce:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   10fd1:	8d 45 10             	lea    0x10(%ebp),%eax
   10fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   10fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fda:	83 ec 04             	sub    $0x4,%esp
   10fdd:	50                   	push   %eax
   10fde:	ff 75 0c             	push   0xc(%ebp)
   10fe1:	ff 75 08             	push   0x8(%ebp)
   10fe4:	e8 06 00 00 00       	call   10fef <kernel_vsprintf>
   10fe9:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   10fec:	90                   	nop
   10fed:	c9                   	leave  
   10fee:	c3                   	ret    

00010fef <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   10fef:	55                   	push   %ebp
   10ff0:	89 e5                	mov    %esp,%ebp
   10ff2:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   10ff5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   10ffc:	8b 45 08             	mov    0x8(%ebp),%eax
   10fff:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11002:	e9 68 01 00 00       	jmp    1116f <kernel_vsprintf+0x180>
        switch (state) {
   11007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1100b:	74 0b                	je     11018 <kernel_vsprintf+0x29>
   1100d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11011:	74 2b                	je     1103e <kernel_vsprintf+0x4f>
   11013:	e9 56 01 00 00       	jmp    1116e <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   11018:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   1101c:	75 0c                	jne    1102a <kernel_vsprintf+0x3b>
   1101e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11025:	e9 45 01 00 00       	jmp    1116f <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   1102a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102d:	8d 50 01             	lea    0x1(%eax),%edx
   11030:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11033:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11037:	88 10                	mov    %dl,(%eax)
            break;
   11039:	e9 31 01 00 00       	jmp    1116f <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   1103e:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11042:	75 47                	jne    1108b <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11044:	8b 45 10             	mov    0x10(%ebp),%eax
   11047:	8d 50 04             	lea    0x4(%eax),%edx
   1104a:	89 55 10             	mov    %edx,0x10(%ebp)
   1104d:	8b 00                	mov    (%eax),%eax
   1104f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11052:	ff 75 ec             	push   -0x14(%ebp)
   11055:	e8 28 fe ff ff       	call   10e82 <kernel_strlen>
   1105a:	83 c4 04             	add    $0x4,%esp
   1105d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11060:	eb 17                	jmp    11079 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11062:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11065:	8d 42 01             	lea    0x1(%edx),%eax
   11068:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1106b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1106e:	8d 48 01             	lea    0x1(%eax),%ecx
   11071:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11074:	0f b6 12             	movzbl (%edx),%edx
   11077:	88 10                	mov    %dl,(%eax)
                while (len--) {
   11079:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1107c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1107f:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11082:	85 c0                	test   %eax,%eax
   11084:	75 dc                	jne    11062 <kernel_vsprintf+0x73>
   11086:	e9 da 00 00 00       	jmp    11165 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   1108b:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1108f:	75 37                	jne    110c8 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   11091:	8b 45 10             	mov    0x10(%ebp),%eax
   11094:	8d 50 04             	lea    0x4(%eax),%edx
   11097:	89 55 10             	mov    %edx,0x10(%ebp)
   1109a:	8b 00                	mov    (%eax),%eax
   1109c:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   1109f:	83 ec 04             	sub    $0x4,%esp
   110a2:	6a 0a                	push   $0xa
   110a4:	ff 75 d8             	push   -0x28(%ebp)
   110a7:	ff 75 f0             	push   -0x10(%ebp)
   110aa:	e8 dd 00 00 00       	call   1118c <kernel_itoa>
   110af:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   110b2:	83 ec 0c             	sub    $0xc,%esp
   110b5:	ff 75 f0             	push   -0x10(%ebp)
   110b8:	e8 c5 fd ff ff       	call   10e82 <kernel_strlen>
   110bd:	83 c4 10             	add    $0x10,%esp
   110c0:	01 45 f0             	add    %eax,-0x10(%ebp)
   110c3:	e9 9d 00 00 00       	jmp    11165 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   110c8:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   110cc:	74 06                	je     110d4 <kernel_vsprintf+0xe5>
   110ce:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   110d2:	75 34                	jne    11108 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   110d4:	8b 45 10             	mov    0x10(%ebp),%eax
   110d7:	8d 50 04             	lea    0x4(%eax),%edx
   110da:	89 55 10             	mov    %edx,0x10(%ebp)
   110dd:	8b 00                	mov    (%eax),%eax
   110df:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   110e2:	83 ec 04             	sub    $0x4,%esp
   110e5:	6a 10                	push   $0x10
   110e7:	ff 75 dc             	push   -0x24(%ebp)
   110ea:	ff 75 f0             	push   -0x10(%ebp)
   110ed:	e8 9a 00 00 00       	call   1118c <kernel_itoa>
   110f2:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   110f5:	83 ec 0c             	sub    $0xc,%esp
   110f8:	ff 75 f0             	push   -0x10(%ebp)
   110fb:	e8 82 fd ff ff       	call   10e82 <kernel_strlen>
   11100:	83 c4 10             	add    $0x10,%esp
   11103:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   11106:	eb 5d                	jmp    11165 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   11108:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1110c:	75 34                	jne    11142 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   1110e:	8b 45 10             	mov    0x10(%ebp),%eax
   11111:	8d 50 04             	lea    0x4(%eax),%edx
   11114:	89 55 10             	mov    %edx,0x10(%ebp)
   11117:	8b 00                	mov    (%eax),%eax
   11119:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   1111c:	83 ec 04             	sub    $0x4,%esp
   1111f:	6a 02                	push   $0x2
   11121:	ff 75 e0             	push   -0x20(%ebp)
   11124:	ff 75 f0             	push   -0x10(%ebp)
   11127:	e8 60 00 00 00       	call   1118c <kernel_itoa>
   1112c:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1112f:	83 ec 0c             	sub    $0xc,%esp
   11132:	ff 75 f0             	push   -0x10(%ebp)
   11135:	e8 48 fd ff ff       	call   10e82 <kernel_strlen>
   1113a:	83 c4 10             	add    $0x10,%esp
   1113d:	01 45 f0             	add    %eax,-0x10(%ebp)
   11140:	eb 23                	jmp    11165 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11142:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11146:	75 1d                	jne    11165 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   11148:	8b 45 10             	mov    0x10(%ebp),%eax
   1114b:	8d 50 04             	lea    0x4(%eax),%edx
   1114e:	89 55 10             	mov    %edx,0x10(%ebp)
   11151:	8b 00                	mov    (%eax),%eax
   11153:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11156:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11159:	8d 50 01             	lea    0x1(%eax),%edx
   1115c:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1115f:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11163:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11165:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1116c:	eb 01                	jmp    1116f <kernel_vsprintf+0x180>
        default:
            break;
   1116e:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   1116f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11172:	8d 50 01             	lea    0x1(%eax),%edx
   11175:	89 55 0c             	mov    %edx,0xc(%ebp)
   11178:	0f b6 00             	movzbl (%eax),%eax
   1117b:	88 45 e7             	mov    %al,-0x19(%ebp)
   1117e:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11182:	0f 85 7f fe ff ff    	jne    11007 <kernel_vsprintf+0x18>
        }
    }
    

}
   11188:	90                   	nop
   11189:	90                   	nop
   1118a:	c9                   	leave  
   1118b:	c3                   	ret    

0001118c <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1118c:	55                   	push   %ebp
   1118d:	89 e5                	mov    %esp,%ebp
   1118f:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   1119b:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1119f:	74 1d                	je     111be <kernel_itoa+0x32>
   111a1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   111a5:	74 17                	je     111be <kernel_itoa+0x32>
   111a7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111ab:	74 11                	je     111be <kernel_itoa+0x32>
   111ad:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   111b1:	74 0b                	je     111be <kernel_itoa+0x32>
        *buf = '\0';
   111b3:	8b 45 08             	mov    0x8(%ebp),%eax
   111b6:	c6 00 00             	movb   $0x0,(%eax)
        return;
   111b9:	e9 a2 00 00 00       	jmp    11260 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   111be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111c2:	79 11                	jns    111d5 <kernel_itoa+0x49>
        *(p++) = '-';
   111c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111c7:	8d 50 01             	lea    0x1(%eax),%edx
   111ca:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111cd:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   111d0:	f7 5d 0c             	negl   0xc(%ebp)
   111d3:	eb 1a                	jmp    111ef <kernel_itoa+0x63>
    } else if (num == 0) {
   111d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111d9:	75 14                	jne    111ef <kernel_itoa+0x63>
        *(p++) = '0';
   111db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111de:	8d 50 01             	lea    0x1(%eax),%edx
   111e1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111e4:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   111e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ea:	c6 00 00             	movb   $0x0,(%eax)
        return;
   111ed:	eb 71                	jmp    11260 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   111ef:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   111f6:	eb 2e                	jmp    11226 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   111f8:	8b 0d 24 18 01 00    	mov    0x11824,%ecx
   111fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11201:	99                   	cltd   
   11202:	f7 7d 10             	idivl  0x10(%ebp)
   11205:	89 d0                	mov    %edx,%eax
   11207:	01 c1                	add    %eax,%ecx
   11209:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1120c:	8d 50 01             	lea    0x1(%eax),%edx
   1120f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11212:	0f b6 11             	movzbl (%ecx),%edx
   11215:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   1121c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1121f:	99                   	cltd   
   11220:	f7 7d 10             	idivl  0x10(%ebp)
   11223:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11226:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1122a:	7f cc                	jg     111f8 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   1122c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1122f:	83 e8 01             	sub    $0x1,%eax
   11232:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11235:	eb 1d                	jmp    11254 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   11237:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1123a:	8d 50 01             	lea    0x1(%eax),%edx
   1123d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11240:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11246:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11249:	01 ca                	add    %ecx,%edx
   1124b:	0f b6 12             	movzbl (%edx),%edx
   1124e:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   11250:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11254:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11258:	79 dd                	jns    11237 <kernel_itoa+0xab>
    }
    *p = '\0';
   1125a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1125d:	c6 00 00             	movb   $0x0,(%eax)
   11260:	c9                   	leave  
   11261:	c3                   	ret    

00011262 <inb>:
static inline uint8_t inb(uint16_t port) {
   11262:	55                   	push   %ebp
   11263:	89 e5                	mov    %esp,%ebp
   11265:	83 ec 14             	sub    $0x14,%esp
   11268:	8b 45 08             	mov    0x8(%ebp),%eax
   1126b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1126f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11273:	89 c2                	mov    %eax,%edx
   11275:	ec                   	in     (%dx),%al
   11276:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11279:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1127d:	c9                   	leave  
   1127e:	c3                   	ret    

0001127f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1127f:	55                   	push   %ebp
   11280:	89 e5                	mov    %esp,%ebp
   11282:	83 ec 08             	sub    $0x8,%esp
   11285:	8b 45 08             	mov    0x8(%ebp),%eax
   11288:	8b 55 0c             	mov    0xc(%ebp),%edx
   1128b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1128f:	89 d0                	mov    %edx,%eax
   11291:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11294:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11298:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1129c:	ee                   	out    %al,(%dx)
}
   1129d:	90                   	nop
   1129e:	c9                   	leave  
   1129f:	c3                   	ret    

000112a0 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   112a0:	55                   	push   %ebp
   112a1:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   112a3:	6a 00                	push   $0x0
   112a5:	68 f9 03 00 00       	push   $0x3f9
   112aa:	e8 d0 ff ff ff       	call   1127f <outb>
   112af:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   112b2:	68 80 00 00 00       	push   $0x80
   112b7:	68 fb 03 00 00       	push   $0x3fb
   112bc:	e8 be ff ff ff       	call   1127f <outb>
   112c1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   112c4:	6a 03                	push   $0x3
   112c6:	68 f8 03 00 00       	push   $0x3f8
   112cb:	e8 af ff ff ff       	call   1127f <outb>
   112d0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   112d3:	6a 00                	push   $0x0
   112d5:	68 f9 03 00 00       	push   $0x3f9
   112da:	e8 a0 ff ff ff       	call   1127f <outb>
   112df:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   112e2:	6a 03                	push   $0x3
   112e4:	68 fb 03 00 00       	push   $0x3fb
   112e9:	e8 91 ff ff ff       	call   1127f <outb>
   112ee:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   112f1:	68 c7 00 00 00       	push   $0xc7
   112f6:	68 fa 03 00 00       	push   $0x3fa
   112fb:	e8 7f ff ff ff       	call   1127f <outb>
   11300:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11303:	6a 0f                	push   $0xf
   11305:	68 fc 03 00 00       	push   $0x3fc
   1130a:	e8 70 ff ff ff       	call   1127f <outb>
   1130f:	83 c4 08             	add    $0x8,%esp
}
   11312:	90                   	nop
   11313:	c9                   	leave  
   11314:	c3                   	ret    

00011315 <log_printf>:


void log_printf(const char *formate, ...) {
   11315:	55                   	push   %ebp
   11316:	89 e5                	mov    %esp,%ebp
   11318:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1131e:	83 ec 04             	sub    $0x4,%esp
   11321:	68 80 00 00 00       	push   $0x80
   11326:	6a 00                	push   $0x0
   11328:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1132e:	50                   	push   %eax
   1132f:	e8 d2 fb ff ff       	call   10f06 <kernel_memset>
   11334:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11337:	8d 45 0c             	lea    0xc(%ebp),%eax
   1133a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   11340:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11346:	83 ec 04             	sub    $0x4,%esp
   11349:	50                   	push   %eax
   1134a:	ff 75 08             	push   0x8(%ebp)
   1134d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11353:	50                   	push   %eax
   11354:	e8 96 fc ff ff       	call   10fef <kernel_vsprintf>
   11359:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1135c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11362:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   11365:	eb 57                	jmp    113be <log_printf+0xa9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   11367:	90                   	nop
   11368:	83 ec 0c             	sub    $0xc,%esp
   1136b:	68 fd 03 00 00       	push   $0x3fd
   11370:	e8 ed fe ff ff       	call   11262 <inb>
   11375:	83 c4 10             	add    $0x10,%esp
   11378:	0f b6 c0             	movzbl %al,%eax
   1137b:	83 e0 40             	and    $0x40,%eax
   1137e:	85 c0                	test   %eax,%eax
   11380:	74 e6                	je     11368 <log_printf+0x53>

        if (*p == '\n') outb(COM1_PORT, '\r');
   11382:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11385:	0f b6 00             	movzbl (%eax),%eax
   11388:	3c 0a                	cmp    $0xa,%al
   1138a:	75 12                	jne    1139e <log_printf+0x89>
   1138c:	83 ec 08             	sub    $0x8,%esp
   1138f:	6a 0d                	push   $0xd
   11391:	68 f8 03 00 00       	push   $0x3f8
   11396:	e8 e4 fe ff ff       	call   1127f <outb>
   1139b:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1139e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113a1:	8d 50 01             	lea    0x1(%eax),%edx
   113a4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   113a7:	0f b6 00             	movzbl (%eax),%eax
   113aa:	0f b6 c0             	movzbl %al,%eax
   113ad:	83 ec 08             	sub    $0x8,%esp
   113b0:	50                   	push   %eax
   113b1:	68 f8 03 00 00       	push   $0x3f8
   113b6:	e8 c4 fe ff ff       	call   1127f <outb>
   113bb:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   113be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113c1:	0f b6 00             	movzbl (%eax),%eax
   113c4:	84 c0                	test   %al,%al
   113c6:	75 9f                	jne    11367 <log_printf+0x52>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   113c8:	83 ec 08             	sub    $0x8,%esp
   113cb:	6a 0d                	push   $0xd
   113cd:	68 f8 03 00 00       	push   $0x3f8
   113d2:	e8 a8 fe ff ff       	call   1127f <outb>
   113d7:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   113da:	83 ec 08             	sub    $0x8,%esp
   113dd:	6a 0a                	push   $0xa
   113df:	68 f8 03 00 00       	push   $0x3f8
   113e4:	e8 96 fe ff ff       	call   1127f <outb>
   113e9:	83 c4 10             	add    $0x10,%esp
   113ec:	90                   	nop
   113ed:	c9                   	leave  
   113ee:	c3                   	ret    
