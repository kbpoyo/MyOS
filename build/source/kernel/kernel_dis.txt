
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000afdc memsz 0x0000afdc flags r-x
    LOAD off    0x0000c000 vaddr 0x0001b000 paddr 0x0001b000 align 2**12
         filesz 0x00000178 memsz 0x0005e050 flags rw-
    LOAD off    0x0000d000 vaddr 0x80000000 paddr 0x0007a000 align 2**12
         filesz 0x00000396 memsz 0x00000396 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000095be  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001a1c  000195c0  000195c0  0000a5c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001b000  0001b000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005d050  0001c000  0001c000  0000c178  2**12
                  ALLOC
  4 .first_task   00000396  80000000  0007a000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000050ab  00000000  00000000  0000d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000bca  00000000  00000000  00012441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000113cd  00000000  00000000  0001300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000390d  00000000  00000000  000243d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000003a0  00000000  00000000  00027ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00002843  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000009e  00000000  00000000  0002a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  0002a969  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002d9c  00000000  00000000  0002a994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010301 l     F .text	0000000d down2
0001030e l     F .text	00000017 up2
00010325 l     F .text	0000000c write_cr3
00010331 l     F .text	0000000b pde_index
0001033c l     F .text	00000010 pte_index
0001034c l     F .text	00000027 pde_to_pt_addr
00010373 l     F .text	00000027 pte_to_pg_addr
0001039a l     F .text	0000000f get_pte_privilege
000103a9 l     F .text	00000011 mmu_set_page_dir
0001c000 l     O .bss	00007e28 paddr_alloc
00024000 l     O .bss	00001000 kernel_page_dir
000103ba l     F .text	00000025 page_index
000103df l     F .text	00000056 page_ref_add
00010435 l     F .text	00000068 page_ref_sub
0001049d l     F .text	0000004e get_page_ref
000104eb l     F .text	00000051 clear_page_ref
0001053c l     F .text	00000087 addr_alloc_init
000105c3 l     F .text	00000067 addr_alloc_page
0001062a l     F .text	0000009c addr_free_page
000106c6 l     F .text	00000066 show_mem_info
0001072c l     F .text	00000037 total_mem_size
0001975c l     O .rodata	00000011 __func__.4
0001b000 l     O .data	00000050 kernal_map.3
00019770 l     O .rodata	0000000c __func__.2
00010e49 l     F .text	00000010 curr_page_dir
0001977c l     O .rodata	00000011 __func__.1
00019790 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
0001110e l     F .text	0000003d list_node_init
00019958 l     O .rodata	0000000f __func__.11
0001114b l     F .text	0000002d list_node_next
000199b8 l     O .rodata	0000000f __func__.5
00011178 l     F .text	00000047 list_init
00019968 l     O .rodata	0000000a __func__.10
000111bf l     F .text	00000035 list_is_empty
000199c8 l     O .rodata	0000000e __func__.4
000111f4 l     F .text	0000002d list_get_size
000199f8 l     O .rodata	0000000e __func__.1
00011221 l     F .text	0000002c list_get_first
000199a8 l     O .rodata	0000000f __func__.6
0001124d l     F .text	00000007 hlt
00011254 l     F .text	0000000c write_cr3
00011260 l     F .text	0000001a far_jump
0001127a l     F .text	00000017 write_tr
00011291 l     F .text	00000011 mmu_set_page_dir
000112a2 l     F .text	00000017 up2
00025000 l     O .bss	000005c0 task_manager
000255c0 l     O .bss	00016400 task_table
0003b9c0 l     O .bss	00000014 task_table_lock
00011364 l     F .text	0000001f switch_to_tss
0001139e l     F .text	00000175 tss_init
0001994c l     O .rodata	0000000a __func__.12
00011c50 l     F .text	0000003d free_task
0003b9e0 l     O .bss	00000200 empty_task_stack
00011708 l     F .text	0000000a empty_task
00019974 l     O .rodata	00000010 __func__.9
00019984 l     O .rodata	0000000f __func__.8
00019994 l     O .rodata	00000011 __func__.7
000199d8 l     O .rodata	0000000f __func__.3
000199e8 l     O .rodata	00000010 __func__.2
00011be8 l     F .text	00000068 alloc_task
00011ceb l     F .text	00000059 copy_opened_files
00011f46 l     F .text	00000114 load_phdr
0001205a l     F .text	00000213 load_elf_file
0001226d l     F .text	0000010b copy_args
00019a08 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
000127a8 l     F .text	00000028 lgdt
0003bbe0 l     O .bss	00010000 gdt_table
0004bbe0 l     O .bss	00002000 is_alloc
0004dbe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000129de l     F .text	00000007 cli
000129e5 l     F .text	00000007 sti
000129ec l     F .text	00000007 hlt
000129f3 l     F .text	0000001d inb
00012a10 l     F .text	00000021 outb
00012a31 l     F .text	00000028 lidt
00012a59 l     F .text	00000011 read_cr2
00012a6a l     F .text	00000010 read_eflags
00012a7a l     F .text	0000000b write_eflags
0004dc00 l     O .bss	00000800 idt_table
00012a85 l     F .text	0000010f print_exception_fram
00012b94 l     F .text	00000030 exit_excption_handler
00012bc4 l     F .text	00000048 do_default_handler
00013000 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
0001a000 l     O .rodata	00000100 sys_table
00000000 l    df *ABS*	00000000 console.c
00013495 l     F .text	0000001d inb
000134b2 l     F .text	00000021 outb
0004e400 l     O .bss	00000340 console_table
0004e740 l     O .bss	00000004 curr_console_index
000134d3 l     F .text	00000074 read_cursor_pos
00013547 l     F .text	000000a6 update_cursor_pos
000135ed l     F .text	0000006d erase_rows
0001365a l     F .text	00000094 scroll_up
000136ee l     F .text	00000010 move_to_col0
000136fe l     F .text	00000038 move_to_next_line
00013736 l     F .text	00000077 move_forward
000137ad l     F .text	00000095 show_char
00013842 l     F .text	00000078 move_backword
000138ba l     F .text	0000003a erase_backword
000138f4 l     F .text	00000087 clear_display
0001397b l     F .text	00000051 print_table
00013ad7 l     F .text	000000b2 write_normal
00013b89 l     F .text	0000001e save_cursor
00013ba7 l     F .text	0000001e restore_cursor
00013bc5 l     F .text	00000029 clear_esc_param
00013bee l     F .text	0000007e write_esc
00013c6c l     F .text	0000009a set_font_style
0001a1a0 l     O .rodata	00000020 color_table.0
00013d06 l     F .text	0000004f erase_in_display
00013d55 l     F .text	00000022 move_cursor
00013d77 l     F .text	00000039 move_left
00013db0 l     F .text	00000045 move_right
00013df5 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001b050 l     O .data	0000000c dev_des_table
0004e760 l     O .bss	00000c00 dev_table
000140d9 l     F .text	00000052 is_dev_exist
00000000 l    df *ABS*	00000000 disk.c
000143bb l     F .text	0000001d inb
000143d8 l     F .text	00000021 outb
000143f9 l     F .text	00000021 outw
0001441a l     F .text	0000001f inw
0004f360 l     O .bss	00000250 disk_table
0004f5b0 l     O .bss	00000014 mutex
0004f5c4 l     O .bss	00000010 op_sem
0004f5d4 l     O .bss	00000001 task_on_op
00014439 l     F .text	00000130 disk_send_cmd
00014569 l     F .text	00000051 disk_read_data
000145ba l     F .text	00000051 disk_write_data
0001460b l     F .text	0000004f disk_wait_data
0001465a l     F .text	00000115 detect_part_info
0001476f l     F .text	00000129 identify_disk
00014898 l     F .text	000000c8 print_disk_info
00000000 l    df *ABS*	00000000 keyboard.c
00014e10 l     F .text	0000001d inb
0001a320 l     O .rodata	00000200 map_table
0004f5d8 l     O .bss	00000004 kbd_state
00014e2d l     F .text	0000001a is_make_code
00014e47 l     F .text	00000015 get_key
00014e5c l     F .text	00000043 do_fx_key
00014e9f l     F .text	0000023e do_normal_key
000150dd l     F .text	0000008e do_e0_key
0004f5dc l     O .bss	00000001 is_inited.1
0004f5e0 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
00015283 l     F .text	00000021 outb
0004f5e4 l     O .bss	00000004 sys_tick
000152cc l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004f600 l     O .bss	000022a0 tty_table
000518a0 l     O .bss	00000004 curr_tty_index
00015346 l     F .text	0000004f get_tty
00015395 l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 devfs.c
0001b0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
00015ad5 l     F .text	00000017 up2
00015aec l     F .text	00000087 to_sfn
00015b73 l     F .text	00000086 diritem_init
00015bf9 l     F .text	00000029 cluster_is_valid
00015c22 l     F .text	0000005b fat_read_sector
00015c7d l     F .text	0000003e fat_write_sector
00015cbb l     F .text	000000be cluster_get_next
00015d79 l     F .text	0000012f cluster_set_next
00015f03 l     F .text	00000125 cluster_alloc_free
00016028 l     F .text	00000154 expand_file
0001617c l     F .text	000000c2 move_file_pos
0001629b l     F .text	00000063 read_from_diritem
000162fe l     F .text	000000b5 diritem_get_name
000163b3 l     F .text	00000036 diritem_name_match
000163e9 l     F .text	000000af write_dir_entry
00016498 l     F .text	00000085 read_dir_entry
00000000 l    df *ABS*	00000000 file.c
000518c0 l     O .bss	00024000 file_table
000758c0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00017153 l     F .text	0000002d list_node_next
0001a9c8 l     O .rodata	0000000f __func__.3
00017180 l     F .text	00000047 list_init
0001a9e4 l     O .rodata	0000000a __func__.1
000171c7 l     F .text	0000002c list_get_first
0001a9b8 l     O .rodata	0000000f __func__.4
000758e0 l     O .bss	0000000c mounted_list
00075900 l     O .bss	000016f8 fs_table
00076ff8 l     O .bss	0000000c free_list
00077004 l     O .bss	00000014 devfs_mutex
00077018 l     O .bss	00000014 fatfs_mutex
0007702c l     O .bss	00000004 root_fs
000171f3 l     F .text	0000001d is_fd_bad
00017210 l     F .text	00000021 is_path_valid
00017328 l     F .text	0000002b fs_protect
00017353 l     F .text	0000002b fs_unprotect
0001a9d8 l     O .rodata	0000000a __func__.2
00017bd4 l     F .text	00000063 mount_list_init
00017c37 l     F .text	00000026 get_fs_op
00017c5d l     F .text	00000049 get_fs_mutex
00017ca6 l     F .text	000001e6 mount
0001a9f0 l     O .rodata	00000008 __func__.0
00000000 l    df *ABS*	00000000 init.c
0001aa94 l     O .rodata	0000000c __func__.1
0001aaa0 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00018010 l     F .text	00000047 list_init
0001ab60 l     O .rodata	0000000a __func__.1
00018057 l     F .text	00000035 list_is_empty
0001ab6c l     O .rodata	0000000e __func__.0
0001ab54 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
0001824f l     F .text	00000047 list_init
0001ac20 l     O .rodata	0000000a __func__.1
00018296 l     F .text	00000035 list_is_empty
0001ac2c l     O .rodata	0000000e __func__.0
0001ac14 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00018455 l     F .text	00000047 list_init
0001ad40 l     O .rodata	0000000a __func__.3
0001849c l     F .text	0000002d list_get_size
0001ad4c l     O .rodata	0000000e __func__.2
000184c9 l     F .text	0000002c list_get_first
0001ad6c l     O .rodata	0000000f __func__.0
000184f5 l     F .text	0000002d list_get_last
0001ad5c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000187fd l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001ae40 l     O .rodata	0000000c __func__.3
0001ae4c l     O .rodata	0000000f __func__.2
0001ae5c l     O .rodata	0000000f __func__.1
0001ae6c l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001b174 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00019146 l     F .text	00000035 list_is_empty
0001af74 l     O .rodata	0000000e __func__.5
0001917b l     F .text	0000002d list_get_size
0001afac l     O .rodata	0000000e __func__.2
0001af60 l     O .rodata	00000012 __func__.6
0001af84 l     O .rodata	00000011 __func__.4
0001af98 l     O .rodata	00000012 __func__.3
0001afbc l     O .rodata	00000011 __func__.1
0001afd0 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00077030 l     O .bss	00000014 mutex
00077044 l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
0001623e g     F .text	0000005d diritem_get_type
000188e4 g     F .text	00000078 bitmap_get_bit
00018cd4 g     F .text	0000004f kernel_memcpy
00017731 g     F .text	000000f9 sys_close
00013248 g     F .text	00000098 idt_enable
000119b1 g     F .text	0000000a task_current
000172d8 g     F .text	00000050 path_begin_with
800001df g     F .first_task	0000001b yield
00019233 g     F .text	0000008f list_insert_last
000112b9 g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fe8 g     F .text	00000126 sys_sbrk
00011ee5 g     F .text	00000061 sys_yield
00012d40 g     F .text	0000001c do_handler_segment_not_present
000118ff g     F .text	00000042 task_set_ready
00018a64 g     F .text	00000021 bitmap_is_set
0001337f g     F .text	0000000b idt_enable_global
00018d23 g     F .text	00000041 kernel_memset
000142a0 g     F .text	0000004c dev_write
0001769c g     F .text	00000095 sys_lseek
0001516b g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00014e0a g     F .text	00000006 disk_close
00013406 g     F .text	0000008f do_handler_syscall
000190d3 g     F .text	0000002d strings_count
000194f1 g     F .text	0000002f log_init
00016e4f g     F .text	000000dd fatfs_readdir
00011d44 g     F .text	000001a1 sys_fork
00017fd8 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00014dcf g     F .text	0000000a disk_control
000133ec g     F .text	0000001a sys_print_msg
0001b140 g     O .data	00000034 fatfs_op
00018b86 g     F .text	00000047 kernel_strcpy
00013374 g     F .text	0000000b idt_disable_global
0001b000 g       .data	00000000 s_data
80000010 g     F .first_task	000000af first_main
00012fbd g     F .text	00000043 idt_install
800001b2 g     F .first_task	0000002d execve
80000154 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012c98 g     F .text	0000001c do_handler_overflow
00012f31 g     F .text	0000001c do_handler_alignment_check
00017513 g     F .text	000000c5 sys_read
00017231 g     F .text	00000058 path_next_child
00016ab5 g     F .text	0000021d fatfs_write
00014009 g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012d78 g     F .text	000000bf do_handler_general_protection
00012fa1 g     F .text	0000001c do_handler_control_exception
0001842c g     F .text	00000029 sem_count
00012c28 g     F .text	0000001c do_handler_divider
0001895c g     F .text	00000108 bitmap_set_bit
00012d08 g     F .text	0000001c do_handler_double_fault
00016f2c g     F .text	0000000a fatfs_closedir
00012e37 g     F .text	000000de do_handler_page_fault
0001651d g     F .text	00000234 fatfs_mount
800002c9 g     F .first_task	00000021 isatty
0001690f g     F .text	000001a6 fatfs_read
0001012f g       .text	00000000 exception_handler_double_fault
0001338a g     F .text	00000039 pic_send_eoi
00019373 g     F .text	000000b5 list_remove_last
000118f5 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001830d g     F .text	00000080 sem_wait
00010e27 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001782a g     F .text	000000b6 sys_fstat
00014254 g     F .text	0000004c dev_read
00016d53 g     F .text	000000df fatfs_seek
0001288f g     F .text	000000b3 gdt_init
00016cd2 g     F .text	00000081 fatfs_close
00012f85 g     F .text	0000001c do_handler_virtual_exception
00015aaa g     F .text	0000000a devfs_stat
000100bb g       .text	00000000 exception_handler_overflow
000102d2 g       .text	00000000 simple_switch
00016751 g     F .text	0000003c fatfs_unmount
00014dd9 g     F .text	00000031 do_handler_primary_disk
8000029c g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012c44 g     F .text	0000001c do_handler_debug
00077050 g     O .bss	00002000 stack
00011c8d g     F .text	00000051 sys_sleep
00014960 g     F .text	000000f9 disk_init
00017e8c g     F .text	00000090 fs_init
0001711b g     F .text	00000038 file_inc_ref
00010e79 g     F .text	00000099 memory_free_page
00018522 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0007a000 g       *ABS*	00000000 s_first_task
0001133c g     F .text	00000028 task_remove_fd
000157e6 g     F .text	0000007a tty_control
000139cc g     F .text	0000010b console_init
000156ca g     F .text	0000011c tty_read
00011678 g     F .text	00000090 task_uninit
00010d6f g     F .text	000000b8 memory_alloc_for_page_dir
00015ab4 g     F .text	00000021 devfs_ioctl
00015464 g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00015866 g     F .text	00000066 tty_in
00013093 g     F .text	000001b5 idt_init
0001838d g     F .text	0000009f sem_notify
00010f65 g     F .text	00000083 memory_copy_uvm_data
000142ec g     F .text	0000004c dev_control
000151b9 g     F .text	000000ca do_handler_kbd
000129b7 g     F .text	00000027 gdt_free
00012cd0 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00017a3c g     F .text	00000053 sys_readdir
00012f15 g     F .text	0000001c do_handler_fpu_error
000117ef g     F .text	00000106 task_first_init
00012f4d g     F .text	0000001c do_handler_machine_check
8000024e g     F .first_task	0000002d write
0001737e g     F .text	00000195 sys_open
800002ea g     F .first_task	00000027 fstat
000178e0 g     F .text	0000006b sys_isatty
000191a8 g     F .text	0000008b list_insert_first
0001412b g     F .text	00000129 dev_open
00017289 g     F .text	0000004f path_to_num
00011b9d g     F .text	0000004b task_set_wakeup
00011983 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
0001b060 g     O .data	00000028 dev_disk_desc
800000de g     F .first_task	0000004c sys_call
0001097d g     F .text	00000085 memory_creat_uvm
00018bcd g     F .text	00000051 kernel_strncpy
000175d8 g     F .text	000000c4 sys_write
80000375 g     F .first_task	00000021 wait
0007a396 g       *ABS*	00000000 mem_free_start
00017f1c g     F .text	00000058 kernel_init
000182cb g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
00018e0c g     F .text	0000019d kernel_vsprintf
00019100 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00014338 g     F .text	00000083 dev_close
0007a000 g       .first_task	00000000 e_data
80000221 g     F .first_task	0000002d read
000180d9 g     F .text	000000a6 mutex_lock
00017a8f g     F .text	00000050 sys_closedir
00016f36 g     F .text	000000e8 fatfs_unlink
000112e9 g     F .text	00000053 task_alloc_fd
00015aa0 g     F .text	0000000a devfs_seek
00010209 g       .text	00000000 exception_handler_machine_check
000155da g     F .text	000000f0 tty_write
00012d24 g     F .text	0000001c do_handler_invalid_tss
000153cc g     F .text	00000098 tty_fifo_put
000102b5 g       .text	00000000 exception_handler_primary_disk
000132e0 g     F .text	00000094 idt_disable
0007a396 g       *ABS*	00000000 e_first_task
00011b41 g     F .text	0000005c task_set_sleep
0001794b g     F .text	0000009e sys_dup
00010813 g     F .text	000000b6 memory_creat_map
000158f5 g     F .text	0000001b devfs_mount
00012c60 g     F .text	0000001c do_handler_nmi
000154f1 g     F .text	000000e9 tty_open
80000197 g     F .first_task	0000001b fork
0001808c g     F .text	0000004d mutex_init
80000311 g     F .first_task	00000021 sbrk
0001b100 g     O .data	00000034 devfs_op
00015916 g     F .text	00000127 devfs_open
00010226 g       .text	00000000 exception_handler_smd_exception
00017adf g     F .text	000000a7 sys_ioctl
00010b8f g     F .text	000000e7 memory_destroy_uvm
0001883a g     F .text	00000016 bitmap_byte_count
00012cec g     F .text	0000001c do_handler_device_unavailable
000133c3 g     F .text	00000018 idt_enter_protection
00017b86 g     F .text	0000004e sys_unlink
00016e3c g     F .text	00000013 fatfs_opendir
000108c9 g     F .text	000000b4 create_kernal_table
00011a36 g     F .text	0000010b task_slice_end
00010a02 g     F .text	0000018d memory_copy_uvm
00015860 g     F .text	00000006 tty_close
00015a61 g     F .text	00000024 devfs_write
00017f74 g     F .text	00000064 move_to_first_task
00015a85 g     F .text	0000001b devfs_close
00013ef9 g     F .text	0000010a console_write
80000332 g     F .first_task	00000021 dup
00018d64 g     F .text	00000084 kernel_memcmp
00012f69 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012c0c g     F .text	0000001c do_handler_unknown
00010e59 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011383 g     F .text	0000001b task_switch_from_to
0001817f g     F .text	000000d0 mutex_unlock
0001701e g     F .text	00000030 file_table_init
000170d9 g     F .text	00000042 file_free
000119bb g     F .text	0000007b task_switch
8000016f g     F .first_task	00000028 print_msg
00018c9f g     F .text	00000035 kernel_strlen
00011941 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000127d0 g     F .text	000000bf segment_desc_set
00012cb4 g     F .text	0000001c do_handler_bound_range
000102e7 g       .text	00000000 exception_handler_syscall
00014a59 g     F .text	000000ee disk_open
0001678d g     F .text	00000182 fatfs_open
000192c2 g     F .text	000000b1 list_remove_first
0001afdc g       .rodata	00000000 e_text
00018c1e g     F .text	00000081 kernel_strncmp
000179e9 g     F .text	00000053 sys_opendir
00018850 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00016e32 g     F .text	0000000a fatfs_stat
00018a85 g     F .text	00000101 bitmap_alloc_nbits
0001704e g     F .text	0000008b file_alloc
00011712 g     F .text	000000dd task_manager_init
00011513 g     F .text	00000036 task_start
00010c76 g     F .text	000000f9 memory_init
00012378 g     F .text	000001af sys_execve
00014c8b g     F .text	00000144 disk_write
0001267f g     F .text	000000e2 sys_wait
00012527 g     F .text	00000158 sys_exit
00018804 g     F .text	00000036 pannic
000158cc g     F .text	00000029 tty_select
00014003 g     F .text	00000006 console_close
00010f12 g     F .text	00000053 memory_get_paddr
00012d5c g     F .text	0000001c do_handler_stack_segment_fault
00012c7c g     F .text	0000001c do_handler_breakpoint
00015910 g     F .text	00000006 devfs_unmount
80000353 g     F .first_task	00000022 _exit
00015a3d g     F .text	00000024 devfs_read
00019520 g     F .text	0000009e log_printf
00011549 g     F .text	0000012f task_init
00014b47 g     F .text	00000144 disk_read
800001fa g     F .first_task	00000027 open
00015ea8 g     F .text	0000005b cluster_free_chain
00018de8 g     F .text	00000024 kernel_sprintf
00011cde g     F .text	0000000d sys_getpid
00012942 g     F .text	00000075 gdt_alloc_desc
00018fa9 g     F .text	0000012a kernel_itoa
00019428 g     F .text	000000c9 list_remove
00012761 g     F .text	00000047 gate_desc_set
8000012a g     F .first_task	0000002a msleep
000133db g     F .text	00000011 idt_leave_protection
8000027b g     F .first_task	00000021 close
00010763 g     F .text	000000b0 find_pte
000152a4 g     F .text	00000028 do_handler_time
0001532e g     F .text	00000018 time_init
0001b0a0 g     O .data	00000028 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 11 7f 00 00       	call   17f1c <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 50 90 07 00       	mov    $0x79050,%esp

    //继续初始化内核
    jmp init_main 
   10025:	e9 ae 7f 00 00       	jmp    17fd8 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 d1 2b 00 00       	call   12c0c <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 d0 2b 00 00       	call   12c28 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 cf 2b 00 00       	call   12c44 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 ce 2b 00 00       	call   12c60 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 cd 2b 00 00       	call   12c7c <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 cc 2b 00 00       	call   12c98 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 cb 2b 00 00       	call   12cb4 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 ca 2b 00 00       	call   12cd0 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 c9 2b 00 00       	call   12cec <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 ca 2b 00 00       	call   12d08 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 cb 2b 00 00       	call   12d24 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 cc 2b 00 00       	call   12d40 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 cd 2b 00 00       	call   12d5c <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 ce 2b 00 00       	call   12d78 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 72 2c 00 00       	call   12e37 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 33 2d 00 00       	call   12f15 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 34 2d 00 00       	call   12f31 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 33 2d 00 00       	call   12f4d <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 32 2d 00 00       	call   12f69 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 31 2d 00 00       	call   12f85 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 32 2d 00 00       	call   12fa1 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 18 50 00 00       	call   152a4 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                  0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 10 4f 00 00       	call   151b9 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <exception_handler_primary_disk>:
//磁盘的中断处理函数
exception_handler primary_disk          0x2E, 0
   102b5:	6a 00                	push   $0x0
   102b7:	6a 2e                	push   $0x2e
   102b9:	60                   	pusha  
   102ba:	1e                   	push   %ds
   102bb:	06                   	push   %es
   102bc:	0f a0                	push   %fs
   102be:	0f a8                	push   %gs
   102c0:	54                   	push   %esp
   102c1:	e8 13 4b 00 00       	call   14dd9 <do_handler_primary_disk>
   102c6:	5c                   	pop    %esp
   102c7:	0f a9                	pop    %gs
   102c9:	0f a1                	pop    %fs
   102cb:	07                   	pop    %es
   102cc:	1f                   	pop    %ds
   102cd:	61                   	popa   
   102ce:	83 c4 08             	add    $0x8,%esp
   102d1:	cf                   	iret   

000102d2 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102d2:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102d6:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102da:	55                   	push   %ebp
    push %ebx
   102db:	53                   	push   %ebx
    push %esi
   102dc:	56                   	push   %esi
    push %edi
   102dd:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102de:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102e0:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102e2:	5f                   	pop    %edi
    pop %esi
   102e3:	5e                   	pop    %esi
    pop %ebx
   102e4:	5b                   	pop    %ebx
    pop %ebp
   102e5:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102e6:	c3                   	ret    

000102e7 <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102e7:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102e8:	1e                   	push   %ds
    push %es
   102e9:	06                   	push   %es
    push %fs
   102ea:	0f a0                	push   %fs
    push %gs
   102ec:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102ee:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102ef:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102f0:	e8 11 31 00 00       	call   13406 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102f5:	5c                   	pop    %esp
    popf
   102f6:	9d                   	popf   
    pop %gs
   102f7:	0f a9                	pop    %gs
    pop %fs
   102f9:	0f a1                	pop    %fs
    pop %es
   102fb:	07                   	pop    %es
    pop %ds
   102fc:	1f                   	pop    %ds
    popa
   102fd:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102fe:	ca 14 00             	lret   $0x14

00010301 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   10301:	55                   	push   %ebp
   10302:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   10304:	8b 45 0c             	mov    0xc(%ebp),%eax
   10307:	f7 d8                	neg    %eax
   10309:	23 45 08             	and    0x8(%ebp),%eax
}
   1030c:	5d                   	pop    %ebp
   1030d:	c3                   	ret    

0001030e <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   1030e:	55                   	push   %ebp
   1030f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10311:	8b 55 08             	mov    0x8(%ebp),%edx
   10314:	8b 45 0c             	mov    0xc(%ebp),%eax
   10317:	01 d0                	add    %edx,%eax
   10319:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	21 d0                	and    %edx,%eax
}
   10323:	5d                   	pop    %ebp
   10324:	c3                   	ret    

00010325 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10325:	55                   	push   %ebp
   10326:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10328:	8b 45 08             	mov    0x8(%ebp),%eax
   1032b:	0f 22 d8             	mov    %eax,%cr3
}
   1032e:	90                   	nop
   1032f:	5d                   	pop    %ebp
   10330:	c3                   	ret    

00010331 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10331:	55                   	push   %ebp
   10332:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10334:	8b 45 08             	mov    0x8(%ebp),%eax
   10337:	c1 e8 16             	shr    $0x16,%eax
}
   1033a:	5d                   	pop    %ebp
   1033b:	c3                   	ret    

0001033c <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1033c:	55                   	push   %ebp
   1033d:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   1033f:	8b 45 08             	mov    0x8(%ebp),%eax
   10342:	c1 e8 0c             	shr    $0xc,%eax
   10345:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1034a:	5d                   	pop    %ebp
   1034b:	c3                   	ret    

0001034c <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1034c:	55                   	push   %ebp
   1034d:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   1034f:	8b 45 08             	mov    0x8(%ebp),%eax
   10352:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10356:	c0 ea 04             	shr    $0x4,%dl
   10359:	0f b6 ca             	movzbl %dl,%ecx
   1035c:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10360:	c1 e2 04             	shl    $0x4,%edx
   10363:	09 ca                	or     %ecx,%edx
   10365:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10369:	c1 e0 0c             	shl    $0xc,%eax
   1036c:	09 d0                	or     %edx,%eax
   1036e:	c1 e0 0c             	shl    $0xc,%eax
}
   10371:	5d                   	pop    %ebp
   10372:	c3                   	ret    

00010373 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10373:	55                   	push   %ebp
   10374:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1037d:	c0 ea 04             	shr    $0x4,%dl
   10380:	0f b6 ca             	movzbl %dl,%ecx
   10383:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10387:	c1 e2 04             	shl    $0x4,%edx
   1038a:	09 ca                	or     %ecx,%edx
   1038c:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10390:	c1 e0 0c             	shl    $0xc,%eax
   10393:	09 d0                	or     %edx,%eax
   10395:	c1 e0 0c             	shl    $0xc,%eax
}
   10398:	5d                   	pop    %ebp
   10399:	c3                   	ret    

0001039a <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1039a:	55                   	push   %ebp
   1039b:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 00                	mov    (%eax),%eax
   103a2:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103a7:	5d                   	pop    %ebp
   103a8:	c3                   	ret    

000103a9 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   103a9:	55                   	push   %ebp
   103aa:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   103ac:	ff 75 08             	push   0x8(%ebp)
   103af:	e8 71 ff ff ff       	call   10325 <write_cr3>
   103b4:	83 c4 04             	add    $0x4,%esp
}
   103b7:	90                   	nop
   103b8:	c9                   	leave  
   103b9:	c3                   	ret    

000103ba <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   103ba:	55                   	push   %ebp
   103bb:	89 e5                	mov    %esp,%ebp
   103bd:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 50 1c             	mov    0x1c(%eax),%edx
   103c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103c7:	29 d0                	sub    %edx,%eax
   103c9:	89 c1                	mov    %eax,%ecx
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	8b 58 24             	mov    0x24(%eax),%ebx
   103d1:	89 c8                	mov    %ecx,%eax
   103d3:	ba 00 00 00 00       	mov    $0x0,%edx
   103d8:	f7 f3                	div    %ebx
}
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103e5:	ff 75 0c             	push   0xc(%ebp)
   103e8:	ff 75 08             	push   0x8(%ebp)
   103eb:	e8 ca ff ff ff       	call   103ba <page_index>
   103f0:	83 c4 08             	add    $0x8,%esp
   103f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103f6:	8b 45 08             	mov    0x8(%ebp),%eax
   103f9:	83 ec 0c             	sub    $0xc,%esp
   103fc:	50                   	push   %eax
   103fd:	e8 d7 7c 00 00       	call   180d9 <mutex_lock>
   10402:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   10405:	8b 55 08             	mov    0x8(%ebp),%edx
   10408:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1040b:	01 d0                	add    %edx,%eax
   1040d:	83 c0 28             	add    $0x28,%eax
   10410:	0f b6 00             	movzbl (%eax),%eax
   10413:	8d 50 01             	lea    0x1(%eax),%edx
   10416:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10419:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	83 c0 28             	add    $0x28,%eax
   10421:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	83 ec 0c             	sub    $0xc,%esp
   10429:	50                   	push   %eax
   1042a:	e8 50 7d 00 00       	call   1817f <mutex_unlock>
   1042f:	83 c4 10             	add    $0x10,%esp
 }
   10432:	90                   	nop
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1043b:	ff 75 0c             	push   0xc(%ebp)
   1043e:	ff 75 08             	push   0x8(%ebp)
   10441:	e8 74 ff ff ff       	call   103ba <page_index>
   10446:	83 c4 08             	add    $0x8,%esp
   10449:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1044c:	8b 45 08             	mov    0x8(%ebp),%eax
   1044f:	83 ec 0c             	sub    $0xc,%esp
   10452:	50                   	push   %eax
   10453:	e8 81 7c 00 00       	call   180d9 <mutex_lock>
   10458:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1045b:	8b 55 08             	mov    0x8(%ebp),%edx
   1045e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10461:	01 d0                	add    %edx,%eax
   10463:	83 c0 28             	add    $0x28,%eax
   10466:	0f b6 00             	movzbl (%eax),%eax
   10469:	84 c0                	test   %al,%al
   1046b:	74 1e                	je     1048b <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   1046d:	8b 55 08             	mov    0x8(%ebp),%edx
   10470:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10473:	01 d0                	add    %edx,%eax
   10475:	83 c0 28             	add    $0x28,%eax
   10478:	0f b6 00             	movzbl (%eax),%eax
   1047b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1047e:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10481:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10484:	01 c8                	add    %ecx,%eax
   10486:	83 c0 28             	add    $0x28,%eax
   10489:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	83 ec 0c             	sub    $0xc,%esp
   10491:	50                   	push   %eax
   10492:	e8 e8 7c 00 00       	call   1817f <mutex_unlock>
   10497:	83 c4 10             	add    $0x10,%esp
 }
   1049a:	90                   	nop
   1049b:	c9                   	leave  
   1049c:	c3                   	ret    

0001049d <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   1049d:	55                   	push   %ebp
   1049e:	89 e5                	mov    %esp,%ebp
   104a0:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   104a3:	ff 75 0c             	push   0xc(%ebp)
   104a6:	ff 75 08             	push   0x8(%ebp)
   104a9:	e8 0c ff ff ff       	call   103ba <page_index>
   104ae:	83 c4 08             	add    $0x8,%esp
   104b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   104b4:	8b 45 08             	mov    0x8(%ebp),%eax
   104b7:	83 ec 0c             	sub    $0xc,%esp
   104ba:	50                   	push   %eax
   104bb:	e8 19 7c 00 00       	call   180d9 <mutex_lock>
   104c0:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104c3:	8b 55 08             	mov    0x8(%ebp),%edx
   104c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c9:	01 d0                	add    %edx,%eax
   104cb:	83 c0 28             	add    $0x28,%eax
   104ce:	0f b6 00             	movzbl (%eax),%eax
   104d1:	0f b6 c0             	movzbl %al,%eax
   104d4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104d7:	8b 45 08             	mov    0x8(%ebp),%eax
   104da:	83 ec 0c             	sub    $0xc,%esp
   104dd:	50                   	push   %eax
   104de:	e8 9c 7c 00 00       	call   1817f <mutex_unlock>
   104e3:	83 c4 10             	add    $0x10,%esp

  return ref;
   104e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104e9:	c9                   	leave  
   104ea:	c3                   	ret    

000104eb <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104eb:	55                   	push   %ebp
   104ec:	89 e5                	mov    %esp,%ebp
   104ee:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104f1:	8b 45 08             	mov    0x8(%ebp),%eax
   104f4:	83 ec 0c             	sub    $0xc,%esp
   104f7:	50                   	push   %eax
   104f8:	e8 dc 7b 00 00       	call   180d9 <mutex_lock>
   104fd:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   10500:	8b 45 08             	mov    0x8(%ebp),%eax
   10503:	8b 40 20             	mov    0x20(%eax),%eax
   10506:	8b 55 08             	mov    0x8(%ebp),%edx
   10509:	8b 4a 24             	mov    0x24(%edx),%ecx
   1050c:	ba 00 00 00 00       	mov    $0x0,%edx
   10511:	f7 f1                	div    %ecx
   10513:	89 c2                	mov    %eax,%edx
   10515:	8b 45 08             	mov    0x8(%ebp),%eax
   10518:	83 c0 28             	add    $0x28,%eax
   1051b:	83 ec 04             	sub    $0x4,%esp
   1051e:	52                   	push   %edx
   1051f:	6a 00                	push   $0x0
   10521:	50                   	push   %eax
   10522:	e8 fc 87 00 00       	call   18d23 <kernel_memset>
   10527:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1052a:	8b 45 08             	mov    0x8(%ebp),%eax
   1052d:	83 ec 0c             	sub    $0xc,%esp
   10530:	50                   	push   %eax
   10531:	e8 49 7c 00 00       	call   1817f <mutex_unlock>
   10536:	83 c4 10             	add    $0x10,%esp
}
   10539:	90                   	nop
   1053a:	c9                   	leave  
   1053b:	c3                   	ret    

0001053c <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1053c:	55                   	push   %ebp
   1053d:	89 e5                	mov    %esp,%ebp
   1053f:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	83 ec 0c             	sub    $0xc,%esp
   10548:	50                   	push   %eax
   10549:	e8 3e 7b 00 00       	call   1808c <mutex_init>
   1054e:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10551:	8b 45 08             	mov    0x8(%ebp),%eax
   10554:	8b 55 10             	mov    0x10(%ebp),%edx
   10557:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 55 14             	mov    0x14(%ebp),%edx
   10560:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10563:	8b 45 08             	mov    0x8(%ebp),%eax
   10566:	8b 55 18             	mov    0x18(%ebp),%edx
   10569:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1056c:	8b 45 08             	mov    0x8(%ebp),%eax
   1056f:	8b 40 20             	mov    0x20(%eax),%eax
   10572:	8b 55 08             	mov    0x8(%ebp),%edx
   10575:	8b 4a 24             	mov    0x24(%edx),%ecx
   10578:	ba 00 00 00 00       	mov    $0x0,%edx
   1057d:	f7 f1                	div    %ecx
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 08             	mov    0x8(%ebp),%eax
   10584:	83 c0 14             	add    $0x14,%eax
   10587:	6a 00                	push   $0x0
   10589:	52                   	push   %edx
   1058a:	ff 75 0c             	push   0xc(%ebp)
   1058d:	50                   	push   %eax
   1058e:	e8 bd 82 00 00       	call   18850 <bitmap_init>
   10593:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	8b 40 20             	mov    0x20(%eax),%eax
   1059c:	8b 55 08             	mov    0x8(%ebp),%edx
   1059f:	8b 4a 24             	mov    0x24(%edx),%ecx
   105a2:	ba 00 00 00 00       	mov    $0x0,%edx
   105a7:	f7 f1                	div    %ecx
   105a9:	89 c2                	mov    %eax,%edx
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	83 c0 28             	add    $0x28,%eax
   105b1:	83 ec 04             	sub    $0x4,%esp
   105b4:	52                   	push   %edx
   105b5:	6a 00                	push   $0x0
   105b7:	50                   	push   %eax
   105b8:	e8 66 87 00 00       	call   18d23 <kernel_memset>
   105bd:	83 c4 10             	add    $0x10,%esp
}
   105c0:	90                   	nop
   105c1:	c9                   	leave  
   105c2:	c3                   	ret    

000105c3 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105c3:	55                   	push   %ebp
   105c4:	89 e5                	mov    %esp,%ebp
   105c6:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO：加锁
  mutex_lock(&alloc->mutex);
   105d0:	8b 45 08             	mov    0x8(%ebp),%eax
   105d3:	83 ec 0c             	sub    $0xc,%esp
   105d6:	50                   	push   %eax
   105d7:	e8 fd 7a 00 00       	call   180d9 <mutex_lock>
   105dc:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	83 c0 14             	add    $0x14,%eax
   105e5:	83 ec 04             	sub    $0x4,%esp
   105e8:	ff 75 0c             	push   0xc(%ebp)
   105eb:	6a 00                	push   $0x0
   105ed:	50                   	push   %eax
   105ee:	e8 92 84 00 00       	call   18a85 <bitmap_alloc_nbits>
   105f3:	83 c4 10             	add    $0x10,%esp
   105f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105fd:	78 17                	js     10616 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	8b 50 24             	mov    0x24(%eax),%edx
   1060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060e:	0f af c2             	imul   %edx,%eax
   10611:	01 c8                	add    %ecx,%eax
   10613:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }


  //TODO：解锁
  mutex_unlock(&alloc->mutex);
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	83 ec 0c             	sub    $0xc,%esp
   1061c:	50                   	push   %eax
   1061d:	e8 5d 7b 00 00       	call   1817f <mutex_unlock>
   10622:	83 c4 10             	add    $0x10,%esp

  return addr;
   10625:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10628:	c9                   	leave  
   10629:	c3                   	ret    

0001062a <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1062a:	55                   	push   %ebp
   1062b:	89 e5                	mov    %esp,%ebp
   1062d:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10630:	8b 45 08             	mov    0x8(%ebp),%eax
   10633:	83 ec 0c             	sub    $0xc,%esp
   10636:	50                   	push   %eax
   10637:	e8 9d 7a 00 00       	call   180d9 <mutex_lock>
   1063c:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   1063f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10646:	eb 64                	jmp    106ac <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   10648:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1064b:	c1 e0 0c             	shl    $0xc,%eax
   1064e:	89 c2                	mov    %eax,%edx
   10650:	8b 45 0c             	mov    0xc(%ebp),%eax
   10653:	01 d0                	add    %edx,%eax
   10655:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   10658:	83 ec 08             	sub    $0x8,%esp
   1065b:	ff 75 f0             	push   -0x10(%ebp)
   1065e:	ff 75 08             	push   0x8(%ebp)
   10661:	e8 cf fd ff ff       	call   10435 <page_ref_sub>
   10666:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   10669:	83 ec 08             	sub    $0x8,%esp
   1066c:	ff 75 f0             	push   -0x10(%ebp)
   1066f:	ff 75 08             	push   0x8(%ebp)
   10672:	e8 26 fe ff ff       	call   1049d <get_page_ref>
   10677:	83 c4 10             	add    $0x10,%esp
   1067a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   1067d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10681:	75 25                	jne    106a8 <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10683:	83 ec 08             	sub    $0x8,%esp
   10686:	ff 75 f0             	push   -0x10(%ebp)
   10689:	ff 75 08             	push   0x8(%ebp)
   1068c:	e8 29 fd ff ff       	call   103ba <page_index>
   10691:	83 c4 10             	add    $0x10,%esp
   10694:	8b 55 08             	mov    0x8(%ebp),%edx
   10697:	83 c2 14             	add    $0x14,%edx
   1069a:	6a 00                	push   $0x0
   1069c:	6a 01                	push   $0x1
   1069e:	50                   	push   %eax
   1069f:	52                   	push   %edx
   106a0:	e8 b7 82 00 00       	call   1895c <bitmap_set_bit>
   106a5:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   106a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106af:	3b 45 10             	cmp    0x10(%ebp),%eax
   106b2:	7c 94                	jl     10648 <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	83 ec 0c             	sub    $0xc,%esp
   106ba:	50                   	push   %eax
   106bb:	e8 bf 7a 00 00       	call   1817f <mutex_unlock>
   106c0:	83 c4 10             	add    $0x10,%esp
}
   106c3:	90                   	nop
   106c4:	c9                   	leave  
   106c5:	c3                   	ret    

000106c6 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106c6:	55                   	push   %ebp
   106c7:	89 e5                	mov    %esp,%ebp
   106c9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106cc:	83 ec 0c             	sub    $0xc,%esp
   106cf:	68 c0 95 01 00       	push   $0x195c0
   106d4:	e8 47 8e 00 00       	call   19520 <log_printf>
   106d9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106e3:	eb 29                	jmp    1070e <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106e5:	8b 45 08             	mov    0x8(%ebp),%eax
   106e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106eb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106ef:	8b 45 08             	mov    0x8(%ebp),%eax
   106f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106f5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106f8:	52                   	push   %edx
   106f9:	50                   	push   %eax
   106fa:	ff 75 f4             	push   -0xc(%ebp)
   106fd:	68 cd 95 01 00       	push   $0x195cd
   10702:	e8 19 8e 00 00       	call   19520 <log_printf>
   10707:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1070a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1070e:	8b 45 08             	mov    0x8(%ebp),%eax
   10711:	8b 40 50             	mov    0x50(%eax),%eax
   10714:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10717:	7c cc                	jl     106e5 <show_mem_info+0x1f>
    }

    log_printf("\n");
   10719:	83 ec 0c             	sub    $0xc,%esp
   1071c:	68 e0 95 01 00       	push   $0x195e0
   10721:	e8 fa 8d 00 00       	call   19520 <log_printf>
   10726:	83 c4 10             	add    $0x10,%esp
}
   10729:	90                   	nop
   1072a:	c9                   	leave  
   1072b:	c3                   	ret    

0001072c <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1072c:	55                   	push   %ebp
   1072d:	89 e5                	mov    %esp,%ebp
   1072f:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10732:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10739:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10740:	eb 11                	jmp    10753 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10742:	8b 45 08             	mov    0x8(%ebp),%eax
   10745:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10748:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1074c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1074f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10753:	8b 45 08             	mov    0x8(%ebp),%eax
   10756:	8b 40 50             	mov    0x50(%eax),%eax
   10759:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1075c:	7c e4                	jl     10742 <total_mem_size+0x16>
    }

    return mem_size;
   1075e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10761:	c9                   	leave  
   10762:	c3                   	ret    

00010763 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10763:	55                   	push   %ebp
   10764:	89 e5                	mov    %esp,%ebp
   10766:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10769:	ff 75 0c             	push   0xc(%ebp)
   1076c:	e8 c0 fb ff ff       	call   10331 <pde_index>
   10771:	83 c4 04             	add    $0x4,%esp
   10774:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	01 d0                	add    %edx,%eax
   10780:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10783:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10786:	0f b6 00             	movzbl (%eax),%eax
   10789:	83 e0 01             	and    $0x1,%eax
   1078c:	84 c0                	test   %al,%al
   1078e:	74 10                	je     107a0 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10790:	ff 75 f0             	push   -0x10(%ebp)
   10793:	e8 b4 fb ff ff       	call   1034c <pde_to_pt_addr>
   10798:	83 c4 04             	add    $0x4,%esp
   1079b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1079e:	eb 57                	jmp    107f7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   107a0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   107a4:	75 07                	jne    107ad <find_pte+0x4a>
      return (pte_t*)0;
   107a6:	b8 00 00 00 00       	mov    $0x0,%eax
   107ab:	eb 64                	jmp    10811 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   107ad:	83 ec 08             	sub    $0x8,%esp
   107b0:	6a 01                	push   $0x1
   107b2:	68 00 c0 01 00       	push   $0x1c000
   107b7:	e8 07 fe ff ff       	call   105c3 <addr_alloc_page>
   107bc:	83 c4 10             	add    $0x10,%esp
   107bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107c6:	75 07                	jne    107cf <find_pte+0x6c>
      return (pte_t*)0;
   107c8:	b8 00 00 00 00       	mov    $0x0,%eax
   107cd:	eb 42                	jmp    10811 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107d5:	83 ec 04             	sub    $0x4,%esp
   107d8:	68 00 10 00 00       	push   $0x1000
   107dd:	6a 00                	push   $0x0
   107df:	ff 75 f4             	push   -0xc(%ebp)
   107e2:	e8 3c 85 00 00       	call   18d23 <kernel_memset>
   107e7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ed:	83 c8 07             	or     $0x7,%eax
   107f0:	89 c2                	mov    %eax,%edx
   107f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107f7:	83 ec 0c             	sub    $0xc,%esp
   107fa:	ff 75 0c             	push   0xc(%ebp)
   107fd:	e8 3a fb ff ff       	call   1033c <pte_index>
   10802:	83 c4 10             	add    $0x10,%esp
   10805:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1080c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080f:	01 d0                	add    %edx,%eax

}
   10811:	c9                   	leave  
   10812:	c3                   	ret    

00010813 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   10813:	55                   	push   %ebp
   10814:	89 e5                	mov    %esp,%ebp
   10816:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   10819:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10820:	e9 91 00 00 00       	jmp    108b6 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10825:	83 ec 04             	sub    $0x4,%esp
   10828:	6a 01                	push   $0x1
   1082a:	ff 75 0c             	push   0xc(%ebp)
   1082d:	ff 75 08             	push   0x8(%ebp)
   10830:	e8 2e ff ff ff       	call   10763 <find_pte>
   10835:	83 c4 10             	add    $0x10,%esp
   10838:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1083b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1083f:	75 17                	jne    10858 <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10841:	83 ec 0c             	sub    $0xc,%esp
   10844:	68 e2 95 01 00       	push   $0x195e2
   10849:	e8 d2 8c 00 00       	call   19520 <log_printf>
   1084e:	83 c4 10             	add    $0x10,%esp
      return -1;
   10851:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10856:	eb 6f                	jmp    108c7 <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085b:	0f b6 00             	movzbl (%eax),%eax
   1085e:	83 e0 01             	and    $0x1,%eax
   10861:	84 c0                	test   %al,%al
   10863:	74 1c                	je     10881 <memory_creat_map+0x6e>
   10865:	68 fd 95 01 00       	push   $0x195fd
   1086a:	68 5c 97 01 00       	push   $0x1975c
   1086f:	68 20 01 00 00       	push   $0x120
   10874:	68 10 96 01 00       	push   $0x19610
   10879:	e8 86 7f 00 00       	call   18804 <pannic>
   1087e:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10881:	8b 45 10             	mov    0x10(%ebp),%eax
   10884:	0b 45 18             	or     0x18(%ebp),%eax
   10887:	83 c8 01             	or     $0x1,%eax
   1088a:	89 c2                	mov    %eax,%edx
   1088c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088f:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10891:	83 ec 08             	sub    $0x8,%esp
   10894:	ff 75 10             	push   0x10(%ebp)
   10897:	68 00 c0 01 00       	push   $0x1c000
   1089c:	e8 3e fb ff ff       	call   103df <page_ref_add>
   108a1:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   108a4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   108ab:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   108b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108b9:	3b 45 14             	cmp    0x14(%ebp),%eax
   108bc:	0f 8c 63 ff ff ff    	jl     10825 <memory_creat_map+0x12>

  }

  return 1;
   108c2:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108c7:	c9                   	leave  
   108c8:	c3                   	ret    

000108c9 <create_kernal_table>:

/**
 * @brief 创建内核的虚拟页表
 * 
 */
void create_kernal_table(void) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108d6:	e9 92 00 00 00       	jmp    1096d <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108de:	c1 e0 04             	shl    $0x4,%eax
   108e1:	05 00 b0 01 00       	add    $0x1b000,%eax
   108e6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108ec:	8b 00                	mov    (%eax),%eax
   108ee:	68 00 10 00 00       	push   $0x1000
   108f3:	50                   	push   %eax
   108f4:	e8 08 fa ff ff       	call   10301 <down2>
   108f9:	83 c4 08             	add    $0x8,%esp
   108fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 08             	mov    0x8(%eax),%eax
   10905:	68 00 10 00 00       	push   $0x1000
   1090a:	50                   	push   %eax
   1090b:	e8 f1 f9 ff ff       	call   10301 <down2>
   10910:	83 c4 08             	add    $0x8,%esp
   10913:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10916:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10919:	8b 40 04             	mov    0x4(%eax),%eax
   1091c:	68 00 10 00 00       	push   $0x1000
   10921:	50                   	push   %eax
   10922:	e8 e7 f9 ff ff       	call   1030e <up2>
   10927:	83 c4 08             	add    $0x8,%esp
   1092a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1092d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10930:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10933:	c1 e8 0c             	shr    $0xc,%eax
   10936:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   10939:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1093c:	8b 40 0c             	mov    0xc(%eax),%eax
   1093f:	83 ec 0c             	sub    $0xc,%esp
   10942:	50                   	push   %eax
   10943:	ff 75 e0             	push   -0x20(%ebp)
   10946:	ff 75 e8             	push   -0x18(%ebp)
   10949:	ff 75 ec             	push   -0x14(%ebp)
   1094c:	68 00 40 02 00       	push   $0x24000
   10951:	e8 bd fe ff ff       	call   10813 <memory_creat_map>
   10956:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   10959:	83 ec 0c             	sub    $0xc,%esp
   1095c:	68 00 c0 01 00       	push   $0x1c000
   10961:	e8 85 fb ff ff       	call   104eb <clear_page_ref>
   10966:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10969:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1096d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10970:	83 f8 04             	cmp    $0x4,%eax
   10973:	0f 86 62 ff ff ff    	jbe    108db <create_kernal_table+0x12>

  }
}
   10979:	90                   	nop
   1097a:	90                   	nop
   1097b:	c9                   	leave  
   1097c:	c3                   	ret    

0001097d <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   1097d:	55                   	push   %ebp
   1097e:	89 e5                	mov    %esp,%ebp
   10980:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10983:	83 ec 08             	sub    $0x8,%esp
   10986:	6a 01                	push   $0x1
   10988:	68 00 c0 01 00       	push   $0x1c000
   1098d:	e8 31 fc ff ff       	call   105c3 <addr_alloc_page>
   10992:	83 c4 10             	add    $0x10,%esp
   10995:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10998:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1099c:	75 07                	jne    109a5 <memory_creat_uvm+0x28>
   1099e:	b8 00 00 00 00       	mov    $0x0,%eax
   109a3:	eb 5b                	jmp    10a00 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   109a5:	83 ec 04             	sub    $0x4,%esp
   109a8:	68 00 10 00 00       	push   $0x1000
   109ad:	6a 00                	push   $0x0
   109af:	ff 75 f0             	push   -0x10(%ebp)
   109b2:	e8 6c 83 00 00       	call   18d23 <kernel_memset>
   109b7:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ba:	83 ec 0c             	sub    $0xc,%esp
   109bd:	68 00 00 00 80       	push   $0x80000000
   109c2:	e8 6a f9 ff ff       	call   10331 <pde_index>
   109c7:	83 c4 10             	add    $0x10,%esp
   109ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109d4:	eb 1f                	jmp    109f5 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109e3:	01 c2                	add    %eax,%edx
   109e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109e8:	8b 04 85 00 40 02 00 	mov    0x24000(,%eax,4),%eax
   109ef:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109fb:	77 d9                	ja     109d6 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10a00:	c9                   	leave  
   10a01:	c3                   	ret    

00010a02 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   10a02:	55                   	push   %ebp
   10a03:	89 e5                	mov    %esp,%ebp
   10a05:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10a08:	68 00 00 00 80       	push   $0x80000000
   10a0d:	e8 1f f9 ff ff       	call   10331 <pde_index>
   10a12:	83 c4 04             	add    $0x4,%esp
   10a15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   10a18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a22:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a25:	01 d0                	add    %edx,%eax
   10a27:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a30:	e9 2a 01 00 00       	jmp    10b5f <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a38:	0f b6 00             	movzbl (%eax),%eax
   10a3b:	83 e0 01             	and    $0x1,%eax
   10a3e:	84 c0                	test   %al,%al
   10a40:	0f 84 10 01 00 00    	je     10b56 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a46:	ff 75 f4             	push   -0xc(%ebp)
   10a49:	e8 fe f8 ff ff       	call   1034c <pde_to_pt_addr>
   10a4e:	83 c4 04             	add    $0x4,%esp
   10a51:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a54:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a5b:	e9 e7 00 00 00       	jmp    10b47 <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a63:	0f b6 00             	movzbl (%eax),%eax
   10a66:	83 e0 01             	and    $0x1,%eax
   10a69:	84 c0                	test   %al,%al
   10a6b:	0f 84 cd 00 00 00    	je     10b3e <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a74:	c1 e0 16             	shl    $0x16,%eax
   10a77:	89 c2                	mov    %eax,%edx
   10a79:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a7c:	c1 e0 0c             	shl    $0xc,%eax
   10a7f:	09 d0                	or     %edx,%eax
   10a81:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a87:	8b 00                	mov    (%eax),%eax
   10a89:	83 e0 02             	and    $0x2,%eax
   10a8c:	85 c0                	test   %eax,%eax
   10a8e:	74 6c                	je     10afc <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	6a 01                	push   $0x1
   10a95:	68 00 c0 01 00       	push   $0x1c000
   10a9a:	e8 24 fb ff ff       	call   105c3 <addr_alloc_page>
   10a9f:	83 c4 10             	add    $0x10,%esp
   10aa2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10aa5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10aa9:	0f 84 c4 00 00 00    	je     10b73 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10aaf:	83 ec 0c             	sub    $0xc,%esp
   10ab2:	ff 75 ec             	push   -0x14(%ebp)
   10ab5:	e8 e0 f8 ff ff       	call   1039a <get_pte_privilege>
   10aba:	83 c4 10             	add    $0x10,%esp
   10abd:	8b 55 08             	mov    0x8(%ebp),%edx
   10ac0:	83 ec 0c             	sub    $0xc,%esp
   10ac3:	50                   	push   %eax
   10ac4:	6a 01                	push   $0x1
   10ac6:	ff 75 d4             	push   -0x2c(%ebp)
   10ac9:	ff 75 e0             	push   -0x20(%ebp)
   10acc:	52                   	push   %edx
   10acd:	e8 41 fd ff ff       	call   10813 <memory_creat_map>
   10ad2:	83 c4 20             	add    $0x20,%esp
   10ad5:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10ad8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10adc:	0f 88 94 00 00 00    	js     10b76 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ae2:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10ae8:	83 ec 04             	sub    $0x4,%esp
   10aeb:	68 00 10 00 00       	push   $0x1000
   10af0:	52                   	push   %edx
   10af1:	50                   	push   %eax
   10af2:	e8 dd 81 00 00       	call   18cd4 <kernel_memcpy>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	eb 43                	jmp    10b3f <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10afc:	83 ec 0c             	sub    $0xc,%esp
   10aff:	ff 75 ec             	push   -0x14(%ebp)
   10b02:	e8 6c f8 ff ff       	call   10373 <pte_to_pg_addr>
   10b07:	83 c4 10             	add    $0x10,%esp
   10b0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10b0d:	83 ec 0c             	sub    $0xc,%esp
   10b10:	ff 75 ec             	push   -0x14(%ebp)
   10b13:	e8 82 f8 ff ff       	call   1039a <get_pte_privilege>
   10b18:	83 c4 10             	add    $0x10,%esp
   10b1b:	8b 55 08             	mov    0x8(%ebp),%edx
   10b1e:	83 ec 0c             	sub    $0xc,%esp
   10b21:	50                   	push   %eax
   10b22:	6a 01                	push   $0x1
   10b24:	ff 75 dc             	push   -0x24(%ebp)
   10b27:	ff 75 e0             	push   -0x20(%ebp)
   10b2a:	52                   	push   %edx
   10b2b:	e8 e3 fc ff ff       	call   10813 <memory_creat_map>
   10b30:	83 c4 20             	add    $0x20,%esp
   10b33:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b36:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b3a:	78 3d                	js     10b79 <memory_copy_uvm+0x177>
   10b3c:	eb 01                	jmp    10b3f <memory_copy_uvm+0x13d>
        continue;
   10b3e:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b3f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b43:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b47:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b4e:	0f 8e 0c ff ff ff    	jle    10a60 <memory_copy_uvm+0x5e>
   10b54:	eb 01                	jmp    10b57 <memory_copy_uvm+0x155>
      continue;
   10b56:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b57:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b5b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b5f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b66:	0f 8e c9 fe ff ff    	jle    10a35 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b6c:	b8 01 00 00 00       	mov    $0x1,%eax
   10b71:	eb 1a                	jmp    10b8d <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b73:	90                   	nop
   10b74:	eb 04                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b76:	90                   	nop
   10b77:	eb 01                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b79:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b7a:	83 ec 0c             	sub    $0xc,%esp
   10b7d:	ff 75 08             	push   0x8(%ebp)
   10b80:	e8 0a 00 00 00       	call   10b8f <memory_destroy_uvm>
   10b85:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b8d:	c9                   	leave  
   10b8e:	c3                   	ret    

00010b8f <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b8f:	55                   	push   %ebp
   10b90:	89 e5                	mov    %esp,%ebp
   10b92:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b95:	68 00 00 00 80       	push   $0x80000000
   10b9a:	e8 92 f7 ff ff       	call   10331 <pde_index>
   10b9f:	83 c4 04             	add    $0x4,%esp
   10ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10ba5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ba8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	01 d0                	add    %edx,%eax
   10bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10bb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10bba:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10bbd:	e9 8f 00 00 00       	jmp    10c51 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc5:	0f b6 00             	movzbl (%eax),%eax
   10bc8:	83 e0 01             	and    $0x1,%eax
   10bcb:	84 c0                	test   %al,%al
   10bcd:	74 79                	je     10c48 <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bcf:	ff 75 f4             	push   -0xc(%ebp)
   10bd2:	e8 75 f7 ff ff       	call   1034c <pde_to_pt_addr>
   10bd7:	83 c4 04             	add    $0x4,%esp
   10bda:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bdd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10be4:	eb 36                	jmp    10c1c <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10be6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10be9:	0f b6 00             	movzbl (%eax),%eax
   10bec:	83 e0 01             	and    $0x1,%eax
   10bef:	84 c0                	test   %al,%al
   10bf1:	74 20                	je     10c13 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bf3:	ff 75 ec             	push   -0x14(%ebp)
   10bf6:	e8 78 f7 ff ff       	call   10373 <pte_to_pg_addr>
   10bfb:	83 c4 04             	add    $0x4,%esp
   10bfe:	83 ec 04             	sub    $0x4,%esp
   10c01:	6a 01                	push   $0x1
   10c03:	50                   	push   %eax
   10c04:	68 00 c0 01 00       	push   $0x1c000
   10c09:	e8 1c fa ff ff       	call   1062a <addr_free_page>
   10c0e:	83 c4 10             	add    $0x10,%esp
   10c11:	eb 01                	jmp    10c14 <memory_destroy_uvm+0x85>
        continue;
   10c13:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10c14:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10c18:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10c1c:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c23:	7e c1                	jle    10be6 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c25:	83 ec 0c             	sub    $0xc,%esp
   10c28:	ff 75 f4             	push   -0xc(%ebp)
   10c2b:	e8 1c f7 ff ff       	call   1034c <pde_to_pt_addr>
   10c30:	83 c4 10             	add    $0x10,%esp
   10c33:	83 ec 04             	sub    $0x4,%esp
   10c36:	6a 01                	push   $0x1
   10c38:	50                   	push   %eax
   10c39:	68 00 c0 01 00       	push   $0x1c000
   10c3e:	e8 e7 f9 ff ff       	call   1062a <addr_free_page>
   10c43:	83 c4 10             	add    $0x10,%esp
   10c46:	eb 01                	jmp    10c49 <memory_destroy_uvm+0xba>
        continue;
   10c48:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c49:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c4d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c51:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c58:	0f 8e 64 ff ff ff    	jle    10bc2 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c5e:	83 ec 04             	sub    $0x4,%esp
   10c61:	6a 01                	push   $0x1
   10c63:	ff 75 08             	push   0x8(%ebp)
   10c66:	68 00 c0 01 00       	push   $0x1c000
   10c6b:	e8 ba f9 ff ff       	call   1062a <addr_free_page>
   10c70:	83 c4 10             	add    $0x10,%esp
}
   10c73:	90                   	nop
   10c74:	c9                   	leave  
   10c75:	c3                   	ret    

00010c76 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c76:	55                   	push   %ebp
   10c77:	89 e5                	mov    %esp,%ebp
   10c79:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻内核first_task段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c7c:	83 ec 0c             	sub    $0xc,%esp
   10c7f:	68 47 96 01 00       	push   $0x19647
   10c84:	e8 97 88 00 00       	call   19520 <log_printf>
   10c89:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c8c:	83 ec 08             	sub    $0x8,%esp
   10c8f:	68 96 a3 07 00       	push   $0x7a396
   10c94:	68 54 96 01 00       	push   $0x19654
   10c99:	e8 82 88 00 00       	call   19520 <log_printf>
   10c9e:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	ff 75 08             	push   0x8(%ebp)
   10ca7:	e8 1a fa ff ff       	call   106c6 <show_mem_info>
   10cac:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10caf:	83 ec 0c             	sub    $0xc,%esp
   10cb2:	ff 75 08             	push   0x8(%ebp)
   10cb5:	e8 72 fa ff ff       	call   1072c <total_mem_size>
   10cba:	83 c4 10             	add    $0x10,%esp
   10cbd:	2d 00 00 10 00       	sub    $0x100000,%eax
   10cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10cc5:	83 ec 08             	sub    $0x8,%esp
   10cc8:	68 00 10 00 00       	push   $0x1000
   10ccd:	ff 75 f4             	push   -0xc(%ebp)
   10cd0:	e8 2c f6 ff ff       	call   10301 <down2>
   10cd5:	83 c4 10             	add    $0x10,%esp
   10cd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cdb:	83 ec 04             	sub    $0x4,%esp
   10cde:	ff 75 f4             	push   -0xc(%ebp)
   10ce1:	68 00 00 10 00       	push   $0x100000
   10ce6:	68 6c 96 01 00       	push   $0x1966c
   10ceb:	e8 30 88 00 00       	call   19520 <log_printf>
   10cf0:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cf3:	c7 45 f0 96 a3 07 00 	movl   $0x7a396,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cfa:	83 ec 0c             	sub    $0xc,%esp
   10cfd:	68 00 10 00 00       	push   $0x1000
   10d02:	ff 75 f4             	push   -0xc(%ebp)
   10d05:	68 00 00 10 00       	push   $0x100000
   10d0a:	ff 75 f0             	push   -0x10(%ebp)
   10d0d:	68 00 c0 01 00       	push   $0x1c000
   10d12:	e8 25 f8 ff ff       	call   1053c <addr_alloc_init>
   10d17:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10d1a:	a1 20 c0 01 00       	mov    0x1c020,%eax
   10d1f:	c1 e8 0c             	shr    $0xc,%eax
   10d22:	83 ec 0c             	sub    $0xc,%esp
   10d25:	50                   	push   %eax
   10d26:	e8 0f 7b 00 00       	call   1883a <bitmap_byte_count>
   10d2b:	83 c4 10             	add    $0x10,%esp
   10d2e:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d31:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d38:	76 1c                	jbe    10d56 <memory_init+0xe0>
   10d3a:	68 8c 96 01 00       	push   $0x1968c
   10d3f:	68 70 97 01 00       	push   $0x19770
   10d44:	68 fe 01 00 00       	push   $0x1fe
   10d49:	68 10 96 01 00       	push   $0x19610
   10d4e:	e8 b1 7a 00 00       	call   18804 <pannic>
   10d53:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d56:	e8 6e fb ff ff       	call   108c9 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d5b:	b8 00 40 02 00       	mov    $0x24000,%eax
   10d60:	83 ec 0c             	sub    $0xc,%esp
   10d63:	50                   	push   %eax
   10d64:	e8 40 f6 ff ff       	call   103a9 <mmu_set_page_dir>
   10d69:	83 c4 10             	add    $0x10,%esp
}
   10d6c:	90                   	nop
   10d6d:	c9                   	leave  
   10d6e:	c3                   	ret    

00010d6f <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d6f:	55                   	push   %ebp
   10d70:	89 e5                	mov    %esp,%ebp
   10d72:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d75:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d7b:	68 00 10 00 00       	push   $0x1000
   10d80:	ff 75 10             	push   0x10(%ebp)
   10d83:	e8 86 f5 ff ff       	call   1030e <up2>
   10d88:	83 c4 08             	add    $0x8,%esp
   10d8b:	c1 e8 0c             	shr    $0xc,%eax
   10d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d98:	eb 7a                	jmp    10e14 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d9a:	83 ec 08             	sub    $0x8,%esp
   10d9d:	6a 01                	push   $0x1
   10d9f:	68 00 c0 01 00       	push   $0x1c000
   10da4:	e8 1a f8 ff ff       	call   105c3 <addr_alloc_page>
   10da9:	83 c4 10             	add    $0x10,%esp
   10dac:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10daf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10db3:	75 17                	jne    10dcc <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10db5:	83 ec 0c             	sub    $0xc,%esp
   10db8:	68 b0 96 01 00       	push   $0x196b0
   10dbd:	e8 5e 87 00 00       	call   19520 <log_printf>
   10dc2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dca:	eb 59                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcf:	83 ec 0c             	sub    $0xc,%esp
   10dd2:	ff 75 14             	push   0x14(%ebp)
   10dd5:	6a 01                	push   $0x1
   10dd7:	ff 75 e8             	push   -0x18(%ebp)
   10dda:	ff 75 f4             	push   -0xc(%ebp)
   10ddd:	50                   	push   %eax
   10dde:	e8 30 fa ff ff       	call   10813 <memory_creat_map>
   10de3:	83 c4 20             	add    $0x20,%esp
   10de6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10de9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10ded:	79 1a                	jns    10e09 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10def:	83 ec 08             	sub    $0x8,%esp
   10df2:	ff 75 e4             	push   -0x1c(%ebp)
   10df5:	68 d0 96 01 00       	push   $0x196d0
   10dfa:	e8 21 87 00 00       	call   19520 <log_printf>
   10dff:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10e02:	b8 00 00 00 00       	mov    $0x0,%eax
   10e07:	eb 1c                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10e09:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10e10:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e17:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10e1a:	0f 8c 7a ff ff ff    	jl     10d9a <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e25:	c9                   	leave  
   10e26:	c3                   	ret    

00010e27 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e27:	55                   	push   %ebp
   10e28:	89 e5                	mov    %esp,%ebp
   10e2a:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e2d:	e8 7f 0b 00 00       	call   119b1 <task_current>
   10e32:	8b 40 78             	mov    0x78(%eax),%eax
   10e35:	ff 75 10             	push   0x10(%ebp)
   10e38:	ff 75 0c             	push   0xc(%ebp)
   10e3b:	ff 75 08             	push   0x8(%ebp)
   10e3e:	50                   	push   %eax
   10e3f:	e8 2b ff ff ff       	call   10d6f <memory_alloc_for_page_dir>
   10e44:	83 c4 10             	add    $0x10,%esp
}
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp
   10e4c:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e4f:	e8 5d 0b 00 00       	call   119b1 <task_current>
   10e54:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e57:	c9                   	leave  
   10e58:	c3                   	ret    

00010e59 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e59:	55                   	push   %ebp
   10e5a:	89 e5                	mov    %esp,%ebp
   10e5c:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e5f:	83 ec 08             	sub    $0x8,%esp
   10e62:	6a 01                	push   $0x1
   10e64:	68 00 c0 01 00       	push   $0x1c000
   10e69:	e8 55 f7 ff ff       	call   105c3 <addr_alloc_page>
   10e6e:	83 c4 10             	add    $0x10,%esp
   10e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e77:	c9                   	leave  
   10e78:	c3                   	ret    

00010e79 <memory_free_page>:
/**
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */
void memory_free_page(uint32_t addr) {
   10e79:	55                   	push   %ebp
   10e7a:	89 e5                	mov    %esp,%ebp
   10e7c:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e82:	85 c0                	test   %eax,%eax
   10e84:	78 17                	js     10e9d <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e86:	83 ec 04             	sub    $0x4,%esp
   10e89:	6a 01                	push   $0x1
   10e8b:	ff 75 08             	push   0x8(%ebp)
   10e8e:	68 00 c0 01 00       	push   $0x1c000
   10e93:	e8 92 f7 ff ff       	call   1062a <addr_free_page>
   10e98:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e9b:	eb 72                	jmp    10f0f <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e9d:	e8 a7 ff ff ff       	call   10e49 <curr_page_dir>
   10ea2:	83 ec 04             	sub    $0x4,%esp
   10ea5:	6a 00                	push   $0x0
   10ea7:	ff 75 08             	push   0x8(%ebp)
   10eaa:	50                   	push   %eax
   10eab:	e8 b3 f8 ff ff       	call   10763 <find_pte>
   10eb0:	83 c4 10             	add    $0x10,%esp
   10eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10eb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10eba:	74 0d                	je     10ec9 <memory_free_page+0x50>
   10ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ebf:	0f b6 00             	movzbl (%eax),%eax
   10ec2:	83 e0 01             	and    $0x1,%eax
   10ec5:	84 c0                	test   %al,%al
   10ec7:	75 1c                	jne    10ee5 <memory_free_page+0x6c>
   10ec9:	68 f0 96 01 00       	push   $0x196f0
   10ece:	68 7c 97 01 00       	push   $0x1977c
   10ed3:	68 5f 02 00 00       	push   $0x25f
   10ed8:	68 10 96 01 00       	push   $0x19610
   10edd:	e8 22 79 00 00       	call   18804 <pannic>
   10ee2:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ee5:	83 ec 0c             	sub    $0xc,%esp
   10ee8:	ff 75 f4             	push   -0xc(%ebp)
   10eeb:	e8 83 f4 ff ff       	call   10373 <pte_to_pg_addr>
   10ef0:	83 c4 10             	add    $0x10,%esp
   10ef3:	83 ec 04             	sub    $0x4,%esp
   10ef6:	6a 01                	push   $0x1
   10ef8:	50                   	push   %eax
   10ef9:	68 00 c0 01 00       	push   $0x1c000
   10efe:	e8 27 f7 ff ff       	call   1062a <addr_free_page>
   10f03:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10f0f:	90                   	nop
   10f10:	c9                   	leave  
   10f11:	c3                   	ret    

00010f12 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10f12:	55                   	push   %ebp
   10f13:	89 e5                	mov    %esp,%ebp
   10f15:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10f18:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1b:	83 ec 04             	sub    $0x4,%esp
   10f1e:	6a 00                	push   $0x0
   10f20:	ff 75 0c             	push   0xc(%ebp)
   10f23:	50                   	push   %eax
   10f24:	e8 3a f8 ff ff       	call   10763 <find_pte>
   10f29:	83 c4 10             	add    $0x10,%esp
   10f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f33:	74 0d                	je     10f42 <memory_get_paddr+0x30>
   10f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f38:	0f b6 00             	movzbl (%eax),%eax
   10f3b:	83 e0 01             	and    $0x1,%eax
   10f3e:	84 c0                	test   %al,%al
   10f40:	75 07                	jne    10f49 <memory_get_paddr+0x37>
    return 0;
   10f42:	b8 00 00 00 00       	mov    $0x0,%eax
   10f47:	eb 1a                	jmp    10f63 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f49:	83 ec 0c             	sub    $0xc,%esp
   10f4c:	ff 75 f4             	push   -0xc(%ebp)
   10f4f:	e8 1f f4 ff ff       	call   10373 <pte_to_pg_addr>
   10f54:	83 c4 10             	add    $0x10,%esp
   10f57:	89 c2                	mov    %eax,%edx
   10f59:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f5c:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f61:	09 d0                	or     %edx,%eax

}
   10f63:	c9                   	leave  
   10f64:	c3                   	ret    

00010f65 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f65:	55                   	push   %ebp
   10f66:	89 e5                	mov    %esp,%ebp
   10f68:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f6b:	eb 6e                	jmp    10fdb <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f6d:	83 ec 08             	sub    $0x8,%esp
   10f70:	ff 75 08             	push   0x8(%ebp)
   10f73:	ff 75 0c             	push   0xc(%ebp)
   10f76:	e8 97 ff ff ff       	call   10f12 <memory_get_paddr>
   10f7b:	83 c4 10             	add    $0x10,%esp
   10f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f85:	75 07                	jne    10f8e <memory_copy_uvm_data+0x29>
      return -1;
   10f87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f8c:	eb 58                	jmp    10fe6 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f91:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f96:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f99:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f9e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10fa4:	8b 45 14             	mov    0x14(%ebp),%eax
   10fa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10faa:	73 06                	jae    10fb2 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10fac:	8b 45 14             	mov    0x14(%ebp),%eax
   10faf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10fb2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10fb5:	8b 55 10             	mov    0x10(%ebp),%edx
   10fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fbb:	83 ec 04             	sub    $0x4,%esp
   10fbe:	51                   	push   %ecx
   10fbf:	52                   	push   %edx
   10fc0:	50                   	push   %eax
   10fc1:	e8 0e 7d 00 00       	call   18cd4 <kernel_memcpy>
   10fc6:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcc:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd2:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd8:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fdb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fdf:	75 8c                	jne    10f6d <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fe1:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fe6:	c9                   	leave  
   10fe7:	c3                   	ret    

00010fe8 <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fe8:	55                   	push   %ebp
   10fe9:	89 e5                	mov    %esp,%ebp
   10feb:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff2:	79 1c                	jns    11010 <sys_sbrk+0x28>
   10ff4:	68 11 97 01 00       	push   $0x19711
   10ff9:	68 90 97 01 00       	push   $0x19790
   10ffe:	68 ae 02 00 00       	push   $0x2ae
   11003:	68 10 96 01 00       	push   $0x19610
   11008:	e8 f7 77 00 00       	call   18804 <pannic>
   1100d:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   11010:	e8 9c 09 00 00       	call   119b1 <task_current>
   11015:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   11018:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1101b:	8b 40 14             	mov    0x14(%eax),%eax
   1101e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11021:	8b 45 08             	mov    0x8(%ebp),%eax
   11024:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   11027:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1102b:	75 1b                	jne    11048 <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   1102d:	83 ec 08             	sub    $0x8,%esp
   11030:	ff 75 ec             	push   -0x14(%ebp)
   11033:	68 1b 97 01 00       	push   $0x1971b
   11038:	e8 e3 84 00 00       	call   19520 <log_printf>
   1103d:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11040:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11043:	e9 c4 00 00 00       	jmp    1110c <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   11048:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1104b:	8b 40 14             	mov    0x14(%eax),%eax
   1104e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11051:	8b 55 08             	mov    0x8(%ebp),%edx
   11054:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11057:	01 d0                	add    %edx,%eax
   11059:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1105f:	25 ff 0f 00 00       	and    $0xfff,%eax
   11064:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   11067:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1106b:	74 3b                	je     110a8 <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   1106d:	8b 55 08             	mov    0x8(%ebp),%edx
   11070:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11073:	01 d0                	add    %edx,%eax
   11075:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1107a:	77 12                	ja     1108e <sys_sbrk+0xa6>
      task->heap_end = end; 
   1107c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1107f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11082:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11085:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1108c:	eb 1a                	jmp    110a8 <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   1108e:	b8 00 10 00 00       	mov    $0x1000,%eax
   11093:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11096:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   11099:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1109c:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   1109f:	8b 45 08             	mov    0x8(%ebp),%eax
   110a2:	2b 45 dc             	sub    -0x24(%ebp),%eax
   110a5:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   110a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ac:	74 3c                	je     110ea <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   110ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110b1:	2b 45 f4             	sub    -0xc(%ebp),%eax
   110b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   110b7:	83 ec 04             	sub    $0x4,%esp
   110ba:	6a 07                	push   $0x7
   110bc:	ff 75 d8             	push   -0x28(%ebp)
   110bf:	ff 75 f4             	push   -0xc(%ebp)
   110c2:	e8 60 fd ff ff       	call   10e27 <memory_alloc_page_for>
   110c7:	83 c4 10             	add    $0x10,%esp
   110ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110cd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110d1:	79 17                	jns    110ea <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110d3:	83 ec 0c             	sub    $0xc,%esp
   110d6:	68 2e 97 01 00       	push   $0x1972e
   110db:	e8 40 84 00 00       	call   19520 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110e8:	eb 22                	jmp    1110c <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110ea:	83 ec 04             	sub    $0x4,%esp
   110ed:	ff 75 e4             	push   -0x1c(%ebp)
   110f0:	ff 75 e8             	push   -0x18(%ebp)
   110f3:	68 47 97 01 00       	push   $0x19747
   110f8:	e8 23 84 00 00       	call   19520 <log_printf>
   110fd:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   11100:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11106:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)pre_heap_end;
   11109:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1110c:	c9                   	leave  
   1110d:	c3                   	ret    

0001110e <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1110e:	55                   	push   %ebp
   1110f:	89 e5                	mov    %esp,%ebp
   11111:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11114:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11118:	75 19                	jne    11133 <list_node_init+0x25>
   1111a:	68 9c 97 01 00       	push   $0x1979c
   1111f:	68 58 99 01 00       	push   $0x19958
   11124:	6a 20                	push   $0x20
   11126:	68 b4 97 01 00       	push   $0x197b4
   1112b:	e8 d4 76 00 00       	call   18804 <pannic>
   11130:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11133:	8b 45 08             	mov    0x8(%ebp),%eax
   11136:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	8b 50 04             	mov    0x4(%eax),%edx
   11143:	8b 45 08             	mov    0x8(%ebp),%eax
   11146:	89 10                	mov    %edx,(%eax)
}
   11148:	90                   	nop
   11149:	c9                   	leave  
   1114a:	c3                   	ret    

0001114b <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1114b:	55                   	push   %ebp
   1114c:	89 e5                	mov    %esp,%ebp
   1114e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11151:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11155:	75 19                	jne    11170 <list_node_next+0x25>
   11157:	68 9c 97 01 00       	push   $0x1979c
   1115c:	68 b8 99 01 00       	push   $0x199b8
   11161:	6a 2b                	push   $0x2b
   11163:	68 b4 97 01 00       	push   $0x197b4
   11168:	e8 97 76 00 00       	call   18804 <pannic>
   1116d:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11170:	8b 45 08             	mov    0x8(%ebp),%eax
   11173:	8b 40 04             	mov    0x4(%eax),%eax
}
   11176:	c9                   	leave  
   11177:	c3                   	ret    

00011178 <list_init>:

static inline void list_init(list_t *list) {
   11178:	55                   	push   %ebp
   11179:	89 e5                	mov    %esp,%ebp
   1117b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1117e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11182:	75 19                	jne    1119d <list_init+0x25>
   11184:	68 f2 97 01 00       	push   $0x197f2
   11189:	68 68 99 01 00       	push   $0x19968
   1118e:	6a 31                	push   $0x31
   11190:	68 b4 97 01 00       	push   $0x197b4
   11195:	e8 6a 76 00 00       	call   18804 <pannic>
   1119a:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   111a7:	8b 45 08             	mov    0x8(%ebp),%eax
   111aa:	8b 50 04             	mov    0x4(%eax),%edx
   111ad:	8b 45 08             	mov    0x8(%ebp),%eax
   111b0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   111b2:	8b 45 08             	mov    0x8(%ebp),%eax
   111b5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   111bc:	90                   	nop
   111bd:	c9                   	leave  
   111be:	c3                   	ret    

000111bf <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111bf:	55                   	push   %ebp
   111c0:	89 e5                	mov    %esp,%ebp
   111c2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111c9:	75 19                	jne    111e4 <list_is_empty+0x25>
   111cb:	68 f2 97 01 00       	push   $0x197f2
   111d0:	68 c8 99 01 00       	push   $0x199c8
   111d5:	6a 38                	push   $0x38
   111d7:	68 b4 97 01 00       	push   $0x197b4
   111dc:	e8 23 76 00 00       	call   18804 <pannic>
   111e1:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111e4:	8b 45 08             	mov    0x8(%ebp),%eax
   111e7:	8b 40 08             	mov    0x8(%eax),%eax
   111ea:	85 c0                	test   %eax,%eax
   111ec:	0f 94 c0             	sete   %al
   111ef:	0f b6 c0             	movzbl %al,%eax
}
   111f2:	c9                   	leave  
   111f3:	c3                   	ret    

000111f4 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111f4:	55                   	push   %ebp
   111f5:	89 e5                	mov    %esp,%ebp
   111f7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111fe:	75 19                	jne    11219 <list_get_size+0x25>
   11200:	68 f2 97 01 00       	push   $0x197f2
   11205:	68 f8 99 01 00       	push   $0x199f8
   1120a:	6a 3e                	push   $0x3e
   1120c:	68 b4 97 01 00       	push   $0x197b4
   11211:	e8 ee 75 00 00       	call   18804 <pannic>
   11216:	83 c4 10             	add    $0x10,%esp

    return list->size;
   11219:	8b 45 08             	mov    0x8(%ebp),%eax
   1121c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1121f:	c9                   	leave  
   11220:	c3                   	ret    

00011221 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11221:	55                   	push   %ebp
   11222:	89 e5                	mov    %esp,%ebp
   11224:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11227:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1122b:	75 19                	jne    11246 <list_get_first+0x25>
   1122d:	68 f2 97 01 00       	push   $0x197f2
   11232:	68 a8 99 01 00       	push   $0x199a8
   11237:	6a 44                	push   $0x44
   11239:	68 b4 97 01 00       	push   $0x197b4
   1123e:	e8 c1 75 00 00       	call   18804 <pannic>
   11243:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11246:	8b 45 08             	mov    0x8(%ebp),%eax
   11249:	8b 00                	mov    (%eax),%eax
}
   1124b:	c9                   	leave  
   1124c:	c3                   	ret    

0001124d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1124d:	55                   	push   %ebp
   1124e:	89 e5                	mov    %esp,%ebp
   11250:	f4                   	hlt    
   11251:	90                   	nop
   11252:	5d                   	pop    %ebp
   11253:	c3                   	ret    

00011254 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	0f 22 d8             	mov    %eax,%cr3
}
   1125d:	90                   	nop
   1125e:	5d                   	pop    %ebp
   1125f:	c3                   	ret    

00011260 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11260:	55                   	push   %ebp
   11261:	89 e5                	mov    %esp,%ebp
   11263:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11266:	8b 45 0c             	mov    0xc(%ebp),%eax
   11269:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1126c:	8b 45 08             	mov    0x8(%ebp),%eax
   1126f:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11272:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11275:	ff 28                	ljmp   *(%eax)
}
   11277:	90                   	nop
   11278:	c9                   	leave  
   11279:	c3                   	ret    

0001127a <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1127a:	55                   	push   %ebp
   1127b:	89 e5                	mov    %esp,%ebp
   1127d:	83 ec 04             	sub    $0x4,%esp
   11280:	8b 45 08             	mov    0x8(%ebp),%eax
   11283:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11287:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1128b:	0f 00 d8             	ltr    %ax
}
   1128e:	90                   	nop
   1128f:	c9                   	leave  
   11290:	c3                   	ret    

00011291 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11291:	55                   	push   %ebp
   11292:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11294:	ff 75 08             	push   0x8(%ebp)
   11297:	e8 b8 ff ff ff       	call   11254 <write_cr3>
   1129c:	83 c4 04             	add    $0x4,%esp
}
   1129f:	90                   	nop
   112a0:	c9                   	leave  
   112a1:	c3                   	ret    

000112a2 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   112a2:	55                   	push   %ebp
   112a3:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   112a5:	8b 55 08             	mov    0x8(%ebp),%edx
   112a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ab:	01 d0                	add    %edx,%eax
   112ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b3:	f7 d8                	neg    %eax
   112b5:	21 d0                	and    %edx,%eax
}
   112b7:	5d                   	pop    %ebp
   112b8:	c3                   	ret    

000112b9 <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   112b9:	55                   	push   %ebp
   112ba:	89 e5                	mov    %esp,%ebp
   112bc:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ca:	78 18                	js     112e4 <task_file+0x2b>
   112cc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112d0:	7f 12                	jg     112e4 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112d2:	e8 da 06 00 00       	call   119b1 <task_current>
   112d7:	8b 55 08             	mov    0x8(%ebp),%edx
   112da:	83 c2 30             	add    $0x30,%edx
   112dd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112e7:	c9                   	leave  
   112e8:	c3                   	ret    

000112e9 <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112e9:	55                   	push   %ebp
   112ea:	89 e5                	mov    %esp,%ebp
   112ec:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112ef:	e8 bd 06 00 00       	call   119b1 <task_current>
   112f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112fe:	eb 2f                	jmp    1132f <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   11300:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11303:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11306:	83 c2 30             	add    $0x30,%edx
   11309:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1130d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   11310:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11314:	75 15                	jne    1132b <task_alloc_fd+0x42>
      task->file_table[i] = file;
   11316:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11319:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1131c:	8d 4a 30             	lea    0x30(%edx),%ecx
   1131f:	8b 55 08             	mov    0x8(%ebp),%edx
   11322:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11326:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11329:	eb 0f                	jmp    1133a <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1132b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1132f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11333:	7e cb                	jle    11300 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11335:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1133a:	c9                   	leave  
   1133b:	c3                   	ret    

0001133c <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1133c:	55                   	push   %ebp
   1133d:	89 e5                	mov    %esp,%ebp
   1133f:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11346:	78 19                	js     11361 <task_remove_fd+0x25>
   11348:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1134c:	7f 13                	jg     11361 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   1134e:	e8 5e 06 00 00       	call   119b1 <task_current>
   11353:	8b 55 08             	mov    0x8(%ebp),%edx
   11356:	83 c2 30             	add    $0x30,%edx
   11359:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11360:	00 
  }
}
   11361:	90                   	nop
   11362:	c9                   	leave  
   11363:	c3                   	ret    

00011364 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11364:	55                   	push   %ebp
   11365:	89 e5                	mov    %esp,%ebp
   11367:	83 ec 04             	sub    $0x4,%esp
   1136a:	8b 45 08             	mov    0x8(%ebp),%eax
   1136d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11371:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11375:	6a 00                	push   $0x0
   11377:	50                   	push   %eax
   11378:	e8 e3 fe ff ff       	call   11260 <far_jump>
   1137d:	83 c4 08             	add    $0x8,%esp
}
   11380:	90                   	nop
   11381:	c9                   	leave  
   11382:	c3                   	ret    

00011383 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11383:	55                   	push   %ebp
   11384:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11386:	8b 45 0c             	mov    0xc(%ebp),%eax
   11389:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1138f:	0f b7 c0             	movzwl %ax,%eax
   11392:	50                   	push   %eax
   11393:	e8 cc ff ff ff       	call   11364 <switch_to_tss>
   11398:	83 c4 04             	add    $0x4,%esp
}
   1139b:	90                   	nop
   1139c:	c9                   	leave  
   1139d:	c3                   	ret    

0001139e <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   1139e:	55                   	push   %ebp
   1139f:	89 e5                	mov    %esp,%ebp
   113a1:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   113a4:	e8 99 15 00 00       	call   12942 <gdt_alloc_desc>
   113a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   113ac:	8b 45 08             	mov    0x8(%ebp),%eax
   113af:	83 c0 5c             	add    $0x5c,%eax
   113b2:	89 c2                	mov    %eax,%edx
   113b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113b7:	0f b7 c0             	movzwl %ax,%eax
   113ba:	68 89 00 00 00       	push   $0x89
   113bf:	6a 68                	push   $0x68
   113c1:	52                   	push   %edx
   113c2:	50                   	push   %eax
   113c3:	e8 08 14 00 00       	call   127d0 <segment_desc_set>
   113c8:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113cb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ce:	83 c0 5c             	add    $0x5c,%eax
   113d1:	83 ec 04             	sub    $0x4,%esp
   113d4:	6a 68                	push   $0x68
   113d6:	6a 00                	push   $0x0
   113d8:	50                   	push   %eax
   113d9:	e8 45 79 00 00       	call   18d23 <kernel_memset>
   113de:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113e1:	8b 45 08             	mov    0x8(%ebp),%eax
   113e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113e7:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113ed:	8b 45 14             	mov    0x14(%ebp),%eax
   113f0:	83 e0 01             	and    $0x1,%eax
   113f3:	85 c0                	test   %eax,%eax
   113f5:	74 10                	je     11407 <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113f7:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113fe:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11405:	eb 16                	jmp    1141d <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   11407:	a1 b8 55 02 00       	mov    0x255b8,%eax
   1140c:	83 c8 03             	or     $0x3,%eax
   1140f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   11412:	a1 bc 55 02 00       	mov    0x255bc,%eax
   11417:	83 c8 03             	or     $0x3,%eax
   1141a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   1141d:	8b 45 08             	mov    0x8(%ebp),%eax
   11420:	8b 55 0c             	mov    0xc(%ebp),%edx
   11423:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	8b 55 10             	mov    0x10(%ebp),%edx
   1142c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11432:	e8 22 fa ff ff       	call   10e59 <memory_alloc_page>
   11437:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1143a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1143e:	0f 84 9e 00 00 00    	je     114e2 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11444:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11447:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1144d:	8b 45 08             	mov    0x8(%ebp),%eax
   11450:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11453:	8b 45 08             	mov    0x8(%ebp),%eax
   11456:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11459:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   1145f:	8b 45 08             	mov    0x8(%ebp),%eax
   11462:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11469:	8b 45 08             	mov    0x8(%ebp),%eax
   1146c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1146f:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11475:	8b 45 08             	mov    0x8(%ebp),%eax
   11478:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   1147e:	8b 45 08             	mov    0x8(%ebp),%eax
   11481:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   11487:	8b 45 08             	mov    0x8(%ebp),%eax
   1148a:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11490:	8b 45 08             	mov    0x8(%ebp),%eax
   11493:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   11499:	8b 45 08             	mov    0x8(%ebp),%eax
   1149c:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   114a2:	8b 45 08             	mov    0x8(%ebp),%eax
   114a5:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   114ab:	8b 45 08             	mov    0x8(%ebp),%eax
   114ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114b1:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   114b7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ba:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114c1:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114c4:	e8 b4 f4 ff ff       	call   1097d <memory_creat_uvm>
   114c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114d0:	74 13                	je     114e5 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114d2:	8b 45 08             	mov    0x8(%ebp),%eax
   114d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114d8:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114db:	b8 00 00 00 00       	mov    $0x0,%eax
   114e0:	eb 2f                	jmp    11511 <tss_init+0x173>
    goto tss_init_failed;
   114e2:	90                   	nop
   114e3:	eb 01                	jmp    114e6 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114e5:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114e9:	0f b7 c0             	movzwl %ax,%eax
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	50                   	push   %eax
   114f0:	e8 c2 14 00 00       	call   129b7 <gdt_free>
   114f5:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114fc:	74 0e                	je     1150c <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114fe:	83 ec 0c             	sub    $0xc,%esp
   11501:	ff 75 e8             	push   -0x18(%ebp)
   11504:	e8 70 f9 ff ff       	call   10e79 <memory_free_page>
   11509:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   1150c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11511:	c9                   	leave  
   11512:	c3                   	ret    

00011513 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   11513:	55                   	push   %ebp
   11514:	89 e5                	mov    %esp,%ebp
   11516:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11519:	e8 a5 1e 00 00       	call   133c3 <idt_enter_protection>
   1151e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11521:	83 ec 0c             	sub    $0xc,%esp
   11524:	ff 75 08             	push   0x8(%ebp)
   11527:	e8 d3 03 00 00       	call   118ff <task_set_ready>
   1152c:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   1152f:	8b 45 08             	mov    0x8(%ebp),%eax
   11532:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   11538:	83 ec 0c             	sub    $0xc,%esp
   1153b:	ff 75 f4             	push   -0xc(%ebp)
   1153e:	e8 98 1e 00 00       	call   133db <idt_leave_protection>
   11543:	83 c4 10             	add    $0x10,%esp
}
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   1154f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11553:	75 1c                	jne    11571 <task_init+0x28>
   11555:	68 05 98 01 00       	push   $0x19805
   1155a:	68 4c 99 01 00       	push   $0x1994c
   1155f:	68 ca 00 00 00       	push   $0xca
   11564:	68 1c 98 01 00       	push   $0x1981c
   11569:	e8 96 72 00 00       	call   18804 <pannic>
   1156e:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11571:	ff 75 18             	push   0x18(%ebp)
   11574:	ff 75 14             	push   0x14(%ebp)
   11577:	ff 75 10             	push   0x10(%ebp)
   1157a:	ff 75 08             	push   0x8(%ebp)
   1157d:	e8 1c fe ff ff       	call   1139e <tss_init>
   11582:	83 c4 10             	add    $0x10,%esp
   11585:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   11588:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1158c:	75 08                	jne    11596 <task_init+0x4d>
   1158e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11591:	e9 e0 00 00 00       	jmp    11676 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11596:	8b 45 08             	mov    0x8(%ebp),%eax
   11599:	83 c0 24             	add    $0x24,%eax
   1159c:	83 ec 04             	sub    $0x4,%esp
   1159f:	6a 20                	push   $0x20
   115a1:	ff 75 0c             	push   0xc(%ebp)
   115a4:	50                   	push   %eax
   115a5:	e8 23 76 00 00       	call   18bcd <kernel_strncpy>
   115aa:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   115ad:	8b 45 08             	mov    0x8(%ebp),%eax
   115b0:	83 c0 44             	add    $0x44,%eax
   115b3:	83 ec 0c             	sub    $0xc,%esp
   115b6:	50                   	push   %eax
   115b7:	e8 52 fb ff ff       	call   1110e <list_node_init>
   115bc:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115bf:	8b 45 08             	mov    0x8(%ebp),%eax
   115c2:	83 c0 4c             	add    $0x4c,%eax
   115c5:	83 ec 0c             	sub    $0xc,%esp
   115c8:	50                   	push   %eax
   115c9:	e8 40 fb ff ff       	call   1110e <list_node_init>
   115ce:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115d1:	8b 45 08             	mov    0x8(%ebp),%eax
   115d4:	83 c0 54             	add    $0x54,%eax
   115d7:	83 ec 0c             	sub    $0xc,%esp
   115da:	50                   	push   %eax
   115db:	e8 2e fb ff ff       	call   1110e <list_node_init>
   115e0:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115e3:	8b 45 08             	mov    0x8(%ebp),%eax
   115e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115ec:	8b 45 08             	mov    0x8(%ebp),%eax
   115ef:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115f6:	8b 45 08             	mov    0x8(%ebp),%eax
   115f9:	8b 50 1c             	mov    0x1c(%eax),%edx
   115fc:	8b 45 08             	mov    0x8(%ebp),%eax
   115ff:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   1160c:	8b 55 08             	mov    0x8(%ebp),%edx
   1160f:	8b 45 08             	mov    0x8(%ebp),%eax
   11612:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   11615:	8b 45 08             	mov    0x8(%ebp),%eax
   11618:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   11629:	8b 45 08             	mov    0x8(%ebp),%eax
   1162c:	8b 50 14             	mov    0x14(%eax),%edx
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   1163f:	8b 45 08             	mov    0x8(%ebp),%eax
   11642:	05 c8 00 00 00       	add    $0xc8,%eax
   11647:	83 ec 04             	sub    $0x4,%esp
   1164a:	68 00 02 00 00       	push   $0x200
   1164f:	6a 00                	push   $0x0
   11651:	50                   	push   %eax
   11652:	e8 cc 76 00 00       	call   18d23 <kernel_memset>
   11657:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1165a:	8b 45 08             	mov    0x8(%ebp),%eax
   1165d:	83 c0 4c             	add    $0x4c,%eax
   11660:	83 ec 08             	sub    $0x8,%esp
   11663:	50                   	push   %eax
   11664:	68 10 50 02 00       	push   $0x25010
   11669:	e8 c5 7b 00 00       	call   19233 <list_insert_last>
   1166e:	83 c4 10             	add    $0x10,%esp

  return 1;
   11671:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11676:	c9                   	leave  
   11677:	c3                   	ret    

00011678 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   11678:	55                   	push   %ebp
   11679:	89 e5                	mov    %esp,%ebp
   1167b:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   1167e:	8b 45 08             	mov    0x8(%ebp),%eax
   11681:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11687:	85 c0                	test   %eax,%eax
   11689:	74 18                	je     116a3 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1168b:	8b 45 08             	mov    0x8(%ebp),%eax
   1168e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11694:	0f b7 c0             	movzwl %ax,%eax
   11697:	83 ec 0c             	sub    $0xc,%esp
   1169a:	50                   	push   %eax
   1169b:	e8 17 13 00 00       	call   129b7 <gdt_free>
   116a0:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   116a3:	8b 45 08             	mov    0x8(%ebp),%eax
   116a6:	8b 40 60             	mov    0x60(%eax),%eax
   116a9:	85 c0                	test   %eax,%eax
   116ab:	74 17                	je     116c4 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 40 60             	mov    0x60(%eax),%eax
   116b3:	2d 00 10 00 00       	sub    $0x1000,%eax
   116b8:	83 ec 0c             	sub    $0xc,%esp
   116bb:	50                   	push   %eax
   116bc:	e8 b8 f7 ff ff       	call   10e79 <memory_free_page>
   116c1:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	8b 40 78             	mov    0x78(%eax),%eax
   116ca:	85 c0                	test   %eax,%eax
   116cc:	74 12                	je     116e0 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116ce:	8b 45 08             	mov    0x8(%ebp),%eax
   116d1:	8b 40 78             	mov    0x78(%eax),%eax
   116d4:	83 ec 0c             	sub    $0xc,%esp
   116d7:	50                   	push   %eax
   116d8:	e8 b2 f4 ff ff       	call   10b8f <memory_destroy_uvm>
   116dd:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	83 c0 4c             	add    $0x4c,%eax
   116e6:	83 ec 08             	sub    $0x8,%esp
   116e9:	50                   	push   %eax
   116ea:	68 10 50 02 00       	push   $0x25010
   116ef:	e8 34 7d 00 00       	call   19428 <list_remove>
   116f4:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116f7:	83 ec 0c             	sub    $0xc,%esp
   116fa:	ff 75 08             	push   0x8(%ebp)
   116fd:	e8 4e 05 00 00       	call   11c50 <free_task>
   11702:	83 c4 10             	add    $0x10,%esp
}
   11705:	90                   	nop
   11706:	c9                   	leave  
   11707:	c3                   	ret    

00011708 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   11708:	55                   	push   %ebp
   11709:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   1170b:	e8 3d fb ff ff       	call   1124d <hlt>
   11710:	eb f9                	jmp    1170b <empty_task+0x3>

00011712 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   11712:	55                   	push   %ebp
   11713:	89 e5                	mov    %esp,%ebp
   11715:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   11718:	e8 25 12 00 00       	call   12942 <gdt_alloc_desc>
   1171d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11720:	e8 1d 12 00 00       	call   12942 <gdt_alloc_desc>
   11725:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   11728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1172b:	0f b7 c0             	movzwl %ax,%eax
   1172e:	68 f2 40 00 00       	push   $0x40f2
   11733:	6a ff                	push   $0xffffffff
   11735:	6a 00                	push   $0x0
   11737:	50                   	push   %eax
   11738:	e8 93 10 00 00       	call   127d0 <segment_desc_set>
   1173d:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11740:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11743:	0f b7 c0             	movzwl %ax,%eax
   11746:	68 fa 40 00 00       	push   $0x40fa
   1174b:	6a ff                	push   $0xffffffff
   1174d:	6a 00                	push   $0x0
   1174f:	50                   	push   %eax
   11750:	e8 7b 10 00 00       	call   127d0 <segment_desc_set>
   11755:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   11758:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1175b:	a3 b8 55 02 00       	mov    %eax,0x255b8
  task_manager.app_data_selector = data_selector;
   11760:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11763:	a3 bc 55 02 00       	mov    %eax,0x255bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   11768:	83 ec 0c             	sub    $0xc,%esp
   1176b:	68 04 50 02 00       	push   $0x25004
   11770:	e8 03 fa ff ff       	call   11178 <list_init>
   11775:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   11778:	83 ec 0c             	sub    $0xc,%esp
   1177b:	68 10 50 02 00       	push   $0x25010
   11780:	e8 f3 f9 ff ff       	call   11178 <list_init>
   11785:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   11788:	83 ec 0c             	sub    $0xc,%esp
   1178b:	68 1c 50 02 00       	push   $0x2501c
   11790:	e8 e3 f9 ff ff       	call   11178 <list_init>
   11795:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   11798:	c7 05 00 50 02 00 00 	movl   $0x0,0x25000
   1179f:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   117a2:	ba e0 bb 03 00       	mov    $0x3bbe0,%edx
   117a7:	b8 08 17 01 00       	mov    $0x11708,%eax
   117ac:	83 ec 0c             	sub    $0xc,%esp
   117af:	6a 01                	push   $0x1
   117b1:	52                   	push   %edx
   117b2:	50                   	push   %eax
   117b3:	68 51 98 01 00       	push   $0x19851
   117b8:	68 f0 52 02 00       	push   $0x252f0
   117bd:	e8 87 fd ff ff       	call   11549 <task_init>
   117c2:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117c5:	83 ec 04             	sub    $0x4,%esp
   117c8:	68 00 64 01 00       	push   $0x16400
   117cd:	6a 00                	push   $0x0
   117cf:	68 c0 55 02 00       	push   $0x255c0
   117d4:	e8 4a 75 00 00       	call   18d23 <kernel_memset>
   117d9:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117dc:	83 ec 0c             	sub    $0xc,%esp
   117df:	68 c0 b9 03 00       	push   $0x3b9c0
   117e4:	e8 a3 68 00 00       	call   1808c <mutex_init>
   117e9:	83 c4 10             	add    $0x10,%esp
}
   117ec:	90                   	nop
   117ed:	c9                   	leave  
   117ee:	c3                   	ret    

000117ef <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117ef:	55                   	push   %ebp
   117f0:	89 e5                	mov    %esp,%ebp
   117f2:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117f5:	b8 96 a3 07 00       	mov    $0x7a396,%eax
   117fa:	2d 00 a0 07 00       	sub    $0x7a000,%eax
  uint32_t copy_size =
   117ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   11802:	68 00 10 00 00       	push   $0x1000
   11807:	ff 75 f4             	push   -0xc(%ebp)
   1180a:	e8 93 fa ff ff       	call   112a2 <up2>
   1180f:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   11812:	05 00 a0 00 00       	add    $0xa000,%eax
   11817:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   1181a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1181d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11820:	72 1c                	jb     1183e <task_first_init+0x4f>
   11822:	68 5c 98 01 00       	push   $0x1985c
   11827:	68 74 99 01 00       	push   $0x19974
   1182c:	68 6e 01 00 00       	push   $0x16e
   11831:	68 1c 98 01 00       	push   $0x1981c
   11836:	e8 c9 6f 00 00       	call   18804 <pannic>
   1183b:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   1183e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11845:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11848:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1184b:	01 d0                	add    %edx,%eax
   1184d:	83 ec 0c             	sub    $0xc,%esp
   11850:	6a 00                	push   $0x0
   11852:	50                   	push   %eax
   11853:	ff 75 ec             	push   -0x14(%ebp)
   11856:	68 73 98 01 00       	push   $0x19873
   1185b:	68 28 50 02 00       	push   $0x25028
   11860:	e8 e4 fc ff ff       	call   11549 <task_init>
   11865:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   11868:	b8 96 a3 07 00       	mov    $0x7a396,%eax
  task_manager.first_task.heap_start =
   1186d:	a3 38 50 02 00       	mov    %eax,0x25038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11872:	b8 96 a3 07 00       	mov    $0x7a396,%eax
   11877:	a3 3c 50 02 00       	mov    %eax,0x2503c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1187c:	a1 ec 50 02 00       	mov    0x250ec,%eax
   11881:	0f b7 c0             	movzwl %ax,%eax
   11884:	83 ec 0c             	sub    $0xc,%esp
   11887:	50                   	push   %eax
   11888:	e8 ed f9 ff ff       	call   1127a <write_tr>
   1188d:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11890:	c7 05 00 50 02 00 28 	movl   $0x25028,0x25000
   11897:	50 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1189a:	a1 a0 50 02 00       	mov    0x250a0,%eax
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	50                   	push   %eax
   118a3:	e8 e9 f9 ff ff       	call   11291 <mmu_set_page_dir>
   118a8:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   118ab:	a1 00 50 02 00       	mov    0x25000,%eax
   118b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   118b6:	83 ec 04             	sub    $0x4,%esp
   118b9:	6a 07                	push   $0x7
   118bb:	ff 75 f0             	push   -0x10(%ebp)
   118be:	ff 75 ec             	push   -0x14(%ebp)
   118c1:	e8 61 f5 ff ff       	call   10e27 <memory_alloc_page_for>
   118c6:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118cc:	83 ec 04             	sub    $0x4,%esp
   118cf:	50                   	push   %eax
   118d0:	68 00 a0 07 00       	push   $0x7a000
   118d5:	68 00 00 00 80       	push   $0x80000000
   118da:	e8 f5 73 00 00       	call   18cd4 <kernel_memcpy>
   118df:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118e2:	83 ec 0c             	sub    $0xc,%esp
   118e5:	68 28 50 02 00       	push   $0x25028
   118ea:	e8 24 fc ff ff       	call   11513 <task_start>
   118ef:	83 c4 10             	add    $0x10,%esp
}
   118f2:	90                   	nop
   118f3:	c9                   	leave  
   118f4:	c3                   	ret    

000118f5 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	b8 28 50 02 00       	mov    $0x25028,%eax
   118fd:	5d                   	pop    %ebp
   118fe:	c3                   	ret    

000118ff <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118ff:	55                   	push   %ebp
   11900:	89 e5                	mov    %esp,%ebp
   11902:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11905:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11909:	75 1c                	jne    11927 <task_set_ready+0x28>
   1190b:	68 05 98 01 00       	push   $0x19805
   11910:	68 84 99 01 00       	push   $0x19984
   11915:	68 a0 01 00 00       	push   $0x1a0
   1191a:	68 1c 98 01 00       	push   $0x1981c
   1191f:	e8 e0 6e 00 00       	call   18804 <pannic>
   11924:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   11927:	8b 45 08             	mov    0x8(%ebp),%eax
   1192a:	83 c0 44             	add    $0x44,%eax
   1192d:	83 ec 08             	sub    $0x8,%esp
   11930:	50                   	push   %eax
   11931:	68 04 50 02 00       	push   $0x25004
   11936:	e8 f8 78 00 00       	call   19233 <list_insert_last>
   1193b:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   1193e:	90                   	nop
   1193f:	c9                   	leave  
   11940:	c3                   	ret    

00011941 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11941:	55                   	push   %ebp
   11942:	89 e5                	mov    %esp,%ebp
   11944:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1194b:	75 1c                	jne    11969 <task_set_unready+0x28>
   1194d:	68 05 98 01 00       	push   $0x19805
   11952:	68 94 99 01 00       	push   $0x19994
   11957:	68 af 01 00 00       	push   $0x1af
   1195c:	68 1c 98 01 00       	push   $0x1981c
   11961:	e8 9e 6e 00 00       	call   18804 <pannic>
   11966:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   11969:	8b 45 08             	mov    0x8(%ebp),%eax
   1196c:	83 c0 44             	add    $0x44,%eax
   1196f:	83 ec 08             	sub    $0x8,%esp
   11972:	50                   	push   %eax
   11973:	68 04 50 02 00       	push   $0x25004
   11978:	e8 ab 7a 00 00       	call   19428 <list_remove>
   1197d:	83 c4 10             	add    $0x10,%esp
}
   11980:	90                   	nop
   11981:	c9                   	leave  
   11982:	c3                   	ret    

00011983 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11983:	55                   	push   %ebp
   11984:	89 e5                	mov    %esp,%ebp
   11986:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11989:	83 ec 0c             	sub    $0xc,%esp
   1198c:	68 04 50 02 00       	push   $0x25004
   11991:	e8 8b f8 ff ff       	call   11221 <list_get_first>
   11996:	83 c4 10             	add    $0x10,%esp
   11999:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1199c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119a0:	74 08                	je     119aa <task_ready_first+0x27>
   119a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119a5:	83 e8 44             	sub    $0x44,%eax
   119a8:	eb 05                	jmp    119af <task_ready_first+0x2c>
   119aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119af:	c9                   	leave  
   119b0:	c3                   	ret    

000119b1 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   119b1:	55                   	push   %ebp
   119b2:	89 e5                	mov    %esp,%ebp
   119b4:	a1 00 50 02 00       	mov    0x25000,%eax
   119b9:	5d                   	pop    %ebp
   119ba:	c3                   	ret    

000119bb <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   119bb:	55                   	push   %ebp
   119bc:	89 e5                	mov    %esp,%ebp
   119be:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119c1:	e8 fd 19 00 00       	call   133c3 <idt_enter_protection>
   119c6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119c9:	e8 b5 ff ff ff       	call   11983 <task_ready_first>
   119ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119d1:	a1 00 50 02 00       	mov    0x25000,%eax
   119d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119d9:	74 4a                	je     11a25 <task_switch+0x6a>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119db:	a1 00 50 02 00       	mov    0x25000,%eax
   119e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119e7:	75 07                	jne    119f0 <task_switch+0x35>
      to = &task_manager.empty_task;
   119e9:	c7 45 f4 f0 52 02 00 	movl   $0x252f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    if (from->state == TASK_RUNNING) {
   119f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119fc:	8b 00                	mov    (%eax),%eax
   119fe:	83 f8 01             	cmp    $0x1,%eax
   11a01:	75 09                	jne    11a0c <task_switch+0x51>
      from->state = TASK_READY;
   11a03:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a06:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    } 
    task_manager.curr_task = to;
   11a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a0f:	a3 00 50 02 00       	mov    %eax,0x25000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   11a14:	83 ec 08             	sub    $0x8,%esp
   11a17:	ff 75 f4             	push   -0xc(%ebp)
   11a1a:	ff 75 ec             	push   -0x14(%ebp)
   11a1d:	e8 61 f9 ff ff       	call   11383 <task_switch_from_to>
   11a22:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   11a25:	83 ec 0c             	sub    $0xc,%esp
   11a28:	ff 75 f0             	push   -0x10(%ebp)
   11a2b:	e8 ab 19 00 00       	call   133db <idt_leave_protection>
   11a30:	83 c4 10             	add    $0x10,%esp
}
   11a33:	90                   	nop
   11a34:	c9                   	leave  
   11a35:	c3                   	ret    

00011a36 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a36:	55                   	push   %ebp
   11a37:	89 e5                	mov    %esp,%ebp
   11a39:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a3c:	83 ec 0c             	sub    $0xc,%esp
   11a3f:	68 1c 50 02 00       	push   $0x2501c
   11a44:	e8 d8 f7 ff ff       	call   11221 <list_get_first>
   11a49:	83 c4 10             	add    $0x10,%esp
   11a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a4f:	eb 62                	jmp    11ab3 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a51:	83 ec 0c             	sub    $0xc,%esp
   11a54:	ff 75 f4             	push   -0xc(%ebp)
   11a57:	e8 ef f6 ff ff       	call   1114b <list_node_next>
   11a5c:	83 c4 10             	add    $0x10,%esp
   11a5f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a66:	74 08                	je     11a70 <task_slice_end+0x3a>
   11a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a6b:	83 e8 44             	sub    $0x44,%eax
   11a6e:	eb 05                	jmp    11a75 <task_slice_end+0x3f>
   11a70:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a75:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a78:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a7b:	8b 40 20             	mov    0x20(%eax),%eax
   11a7e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a81:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a84:	89 50 20             	mov    %edx,0x20(%eax)
   11a87:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a8a:	8b 40 20             	mov    0x20(%eax),%eax
   11a8d:	85 c0                	test   %eax,%eax
   11a8f:	75 1c                	jne    11aad <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a91:	83 ec 0c             	sub    $0xc,%esp
   11a94:	ff 75 e8             	push   -0x18(%ebp)
   11a97:	e8 01 01 00 00       	call   11b9d <task_set_wakeup>
   11a9c:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a9f:	83 ec 0c             	sub    $0xc,%esp
   11aa2:	ff 75 e8             	push   -0x18(%ebp)
   11aa5:	e8 55 fe ff ff       	call   118ff <task_set_ready>
   11aaa:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11ab3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11ab7:	75 98                	jne    11a51 <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11ab9:	e8 f3 fe ff ff       	call   119b1 <task_current>
   11abe:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11ac1:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11ac8:	75 23                	jne    11aed <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11aca:	83 ec 0c             	sub    $0xc,%esp
   11acd:	68 04 50 02 00       	push   $0x25004
   11ad2:	e8 e8 f6 ff ff       	call   111bf <list_is_empty>
   11ad7:	83 c4 10             	add    $0x10,%esp
   11ada:	85 c0                	test   %eax,%eax
   11adc:	75 60                	jne    11b3e <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11ade:	c7 05 f0 52 02 00 00 	movl   $0x0,0x252f0
   11ae5:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ae8:	e8 ce fe ff ff       	call   119bb <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11aed:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11af4:	74 49                	je     11b3f <task_slice_end+0x109>
   11af6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11af9:	8b 40 1c             	mov    0x1c(%eax),%eax
   11afc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b02:	89 50 1c             	mov    %edx,0x1c(%eax)
   11b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b08:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b0b:	85 c0                	test   %eax,%eax
   11b0d:	75 30                	jne    11b3f <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11b0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b12:	8b 50 18             	mov    0x18(%eax),%edx
   11b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b18:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11b1b:	83 ec 0c             	sub    $0xc,%esp
   11b1e:	ff 75 f0             	push   -0x10(%ebp)
   11b21:	e8 1b fe ff ff       	call   11941 <task_set_unready>
   11b26:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11b29:	83 ec 0c             	sub    $0xc,%esp
   11b2c:	ff 75 f0             	push   -0x10(%ebp)
   11b2f:	e8 cb fd ff ff       	call   118ff <task_set_ready>
   11b34:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b37:	e8 7f fe ff ff       	call   119bb <task_switch>
   11b3c:	eb 01                	jmp    11b3f <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b3e:	90                   	nop
  }
}
   11b3f:	c9                   	leave  
   11b40:	c3                   	ret    

00011b41 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b41:	55                   	push   %ebp
   11b42:	89 e5                	mov    %esp,%ebp
   11b44:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b4b:	75 1c                	jne    11b69 <task_set_sleep+0x28>
   11b4d:	68 05 98 01 00       	push   $0x19805
   11b52:	68 d8 99 01 00       	push   $0x199d8
   11b57:	68 1b 02 00 00       	push   $0x21b
   11b5c:	68 1c 98 01 00       	push   $0x1981c
   11b61:	e8 9e 6c 00 00       	call   18804 <pannic>
   11b66:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b6d:	74 2b                	je     11b9a <task_set_sleep+0x59>

  task->sleep = slice;
   11b6f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b72:	8b 45 08             	mov    0x8(%ebp),%eax
   11b75:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b78:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b81:	8b 45 08             	mov    0x8(%ebp),%eax
   11b84:	83 c0 44             	add    $0x44,%eax
   11b87:	83 ec 08             	sub    $0x8,%esp
   11b8a:	50                   	push   %eax
   11b8b:	68 1c 50 02 00       	push   $0x2501c
   11b90:	e8 9e 76 00 00       	call   19233 <list_insert_last>
   11b95:	83 c4 10             	add    $0x10,%esp
   11b98:	eb 01                	jmp    11b9b <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b9a:	90                   	nop
}
   11b9b:	c9                   	leave  
   11b9c:	c3                   	ret    

00011b9d <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b9d:	55                   	push   %ebp
   11b9e:	89 e5                	mov    %esp,%ebp
   11ba0:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ba7:	75 1c                	jne    11bc5 <task_set_wakeup+0x28>
   11ba9:	68 05 98 01 00       	push   $0x19805
   11bae:	68 e8 99 01 00       	push   $0x199e8
   11bb3:	68 29 02 00 00       	push   $0x229
   11bb8:	68 1c 98 01 00       	push   $0x1981c
   11bbd:	e8 42 6c 00 00       	call   18804 <pannic>
   11bc2:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc8:	83 c0 44             	add    $0x44,%eax
   11bcb:	83 ec 08             	sub    $0x8,%esp
   11bce:	50                   	push   %eax
   11bcf:	68 1c 50 02 00       	push   $0x2501c
   11bd4:	e8 4f 78 00 00       	call   19428 <list_remove>
   11bd9:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11be5:	90                   	nop
   11be6:	c9                   	leave  
   11be7:	c3                   	ret    

00011be8 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11be8:	55                   	push   %ebp
   11be9:	89 e5                	mov    %esp,%ebp
   11beb:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11bf5:	83 ec 0c             	sub    $0xc,%esp
   11bf8:	68 c0 b9 03 00       	push   $0x3b9c0
   11bfd:	e8 d7 64 00 00       	call   180d9 <mutex_lock>
   11c02:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11c0c:	eb 27                	jmp    11c35 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c11:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11c17:	05 c0 55 02 00       	add    $0x255c0,%eax
   11c1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c22:	8b 40 08             	mov    0x8(%eax),%eax
   11c25:	85 c0                	test   %eax,%eax
   11c27:	75 08                	jne    11c31 <alloc_task+0x49>
      task = curr;
   11c29:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11c2f:	eb 0a                	jmp    11c3b <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c31:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c35:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c39:	7e d3                	jle    11c0e <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c3b:	83 ec 0c             	sub    $0xc,%esp
   11c3e:	68 c0 b9 03 00       	push   $0x3b9c0
   11c43:	e8 37 65 00 00       	call   1817f <mutex_unlock>
   11c48:	83 c4 10             	add    $0x10,%esp

  return task;
   11c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c4e:	c9                   	leave  
   11c4f:	c3                   	ret    

00011c50 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c50:	55                   	push   %ebp
   11c51:	89 e5                	mov    %esp,%ebp
   11c53:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c56:	83 ec 0c             	sub    $0xc,%esp
   11c59:	68 c0 b9 03 00       	push   $0x3b9c0
   11c5e:	e8 76 64 00 00       	call   180d9 <mutex_lock>
   11c63:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c66:	8b 45 08             	mov    0x8(%ebp),%eax
   11c69:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  task->parent = (task_t*)0;
   11c70:	8b 45 08             	mov    0x8(%ebp),%eax
   11c73:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c7a:	83 ec 0c             	sub    $0xc,%esp
   11c7d:	68 c0 b9 03 00       	push   $0x3b9c0
   11c82:	e8 f8 64 00 00       	call   1817f <mutex_unlock>
   11c87:	83 c4 10             	add    $0x10,%esp
}
   11c8a:	90                   	nop
   11c8b:	c9                   	leave  
   11c8c:	c3                   	ret    

00011c8d <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c8d:	55                   	push   %ebp
   11c8e:	89 e5                	mov    %esp,%ebp
   11c90:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c93:	e8 2b 17 00 00       	call   133c3 <idt_enter_protection>
   11c98:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c9b:	e8 11 fd ff ff       	call   119b1 <task_current>
   11ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11ca3:	83 ec 0c             	sub    $0xc,%esp
   11ca6:	ff 75 f0             	push   -0x10(%ebp)
   11ca9:	e8 93 fc ff ff       	call   11941 <task_set_unready>
   11cae:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11cb1:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb4:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11cb7:	83 ec 08             	sub    $0x8,%esp
   11cba:	ff 75 ec             	push   -0x14(%ebp)
   11cbd:	ff 75 f0             	push   -0x10(%ebp)
   11cc0:	e8 7c fe ff ff       	call   11b41 <task_set_sleep>
   11cc5:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11cc8:	e8 ee fc ff ff       	call   119bb <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11ccd:	83 ec 0c             	sub    $0xc,%esp
   11cd0:	ff 75 f4             	push   -0xc(%ebp)
   11cd3:	e8 03 17 00 00       	call   133db <idt_leave_protection>
   11cd8:	83 c4 10             	add    $0x10,%esp
}
   11cdb:	90                   	nop
   11cdc:	c9                   	leave  
   11cdd:	c3                   	ret    

00011cde <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cde:	55                   	push   %ebp
   11cdf:	89 e5                	mov    %esp,%ebp
   11ce1:	e8 cb fc ff ff       	call   119b1 <task_current>
   11ce6:	8b 40 08             	mov    0x8(%eax),%eax
   11ce9:	5d                   	pop    %ebp
   11cea:	c3                   	ret    

00011ceb <copy_opened_files>:
/**
 * @brief 将当前进程的打开文件表复制给传入进程
 * 
 * @param child_task 
 */
static void copy_opened_files(task_t *child_task) {
   11ceb:	55                   	push   %ebp
   11cec:	89 e5                	mov    %esp,%ebp
   11cee:	83 ec 18             	sub    $0x18,%esp
  task_t *parent = task_current();
   11cf1:	e8 bb fc ff ff       	call   119b1 <task_current>
   11cf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11cf9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d00:	eb 38                	jmp    11d3a <copy_opened_files+0x4f>
    file_t *file = parent->file_table[i];
   11d02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d05:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d08:	83 c2 30             	add    $0x30,%edx
   11d0b:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11d0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file) {
   11d12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d16:	74 1e                	je     11d36 <copy_opened_files+0x4b>
      file_inc_ref(file);
   11d18:	83 ec 0c             	sub    $0xc,%esp
   11d1b:	ff 75 ec             	push   -0x14(%ebp)
   11d1e:	e8 f8 53 00 00       	call   1711b <file_inc_ref>
   11d23:	83 c4 10             	add    $0x10,%esp
      child_task->file_table[i] = file;
   11d26:	8b 45 08             	mov    0x8(%ebp),%eax
   11d29:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d2c:	8d 4a 30             	lea    0x30(%edx),%ecx
   11d2f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11d32:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11d36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d3a:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11d3e:	7e c2                	jle    11d02 <copy_opened_files+0x17>
    }
  }
}
   11d40:	90                   	nop
   11d41:	90                   	nop
   11d42:	c9                   	leave  
   11d43:	c3                   	ret    

00011d44 <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11d44:	55                   	push   %ebp
   11d45:	89 e5                	mov    %esp,%ebp
   11d47:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11d4a:	e8 62 fc ff ff       	call   119b1 <task_current>
   11d4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11d52:	e8 91 fe ff ff       	call   11be8 <alloc_task>
   11d57:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11d5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d5e:	0f 84 51 01 00 00    	je     11eb5 <sys_fork+0x171>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d67:	8b 40 60             	mov    0x60(%eax),%eax
   11d6a:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11d6d:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11d70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d73:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11d76:	8d 48 14             	lea    0x14(%eax),%ecx
   11d79:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d7c:	8b 40 34             	mov    0x34(%eax),%eax
   11d7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d82:	83 c2 24             	add    $0x24,%edx
   11d85:	83 ec 0c             	sub    $0xc,%esp
   11d88:	6a 00                	push   $0x0
   11d8a:	51                   	push   %ecx
   11d8b:	50                   	push   %eax
   11d8c:	52                   	push   %edx
   11d8d:	ff 75 f0             	push   -0x10(%ebp)
   11d90:	e8 b4 f7 ff ff       	call   11549 <task_init>
   11d95:	83 c4 20             	add    $0x20,%esp
   11d98:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d9b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d9f:	0f 88 13 01 00 00    	js     11eb8 <sys_fork+0x174>

  //让子进程继承父进程的打开文件表
  copy_opened_files(child_task);
   11da5:	83 ec 0c             	sub    $0xc,%esp
   11da8:	ff 75 f0             	push   -0x10(%ebp)
   11dab:	e8 3b ff ff ff       	call   11ceb <copy_opened_files>
   11db0:	83 c4 10             	add    $0x10,%esp


  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11db6:	83 c0 5c             	add    $0x5c,%eax
   11db9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11dbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dbf:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11dc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dc9:	8b 50 24             	mov    0x24(%eax),%edx
   11dcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dcf:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11dd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dd5:	8b 50 2c             	mov    0x2c(%eax),%edx
   11dd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ddb:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11dde:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11de1:	8b 50 28             	mov    0x28(%eax),%edx
   11de4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11de7:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ded:	8b 50 14             	mov    0x14(%eax),%edx
   11df0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11df3:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11df9:	8b 50 18             	mov    0x18(%eax),%edx
   11dfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dff:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11e02:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e05:	8b 10                	mov    (%eax),%edx
   11e07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e0a:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11e0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e10:	8b 50 1c             	mov    0x1c(%eax),%edx
   11e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e16:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11e19:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e1c:	8b 50 38             	mov    0x38(%eax),%edx
   11e1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e22:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11e25:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e28:	8b 50 10             	mov    0x10(%eax),%edx
   11e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e2e:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11e31:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e34:	8b 50 0c             	mov    0xc(%eax),%edx
   11e37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e3a:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11e3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e40:	8b 50 08             	mov    0x8(%eax),%edx
   11e43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e46:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11e49:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e4c:	8b 50 04             	mov    0x4(%eax),%edx
   11e4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e52:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11e55:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e58:	8b 50 54             	mov    0x54(%eax),%edx
   11e5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e5e:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11e61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e64:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e67:	89 50 04             	mov    %edx,0x4(%eax)

  //记录父进程堆空间
  child_task->heap_start = parent_task->heap_start;
   11e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e6d:	8b 50 10             	mov    0x10(%eax),%edx
   11e70:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e73:	89 50 10             	mov    %edx,0x10(%eax)
  child_task->heap_end = parent_task->heap_end;
   11e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e79:	8b 50 14             	mov    0x14(%eax),%edx
   11e7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e7f:	89 50 14             	mov    %edx,0x14(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e85:	8b 50 78             	mov    0x78(%eax),%edx
   11e88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e8b:	8b 40 1c             	mov    0x1c(%eax),%eax
   11e8e:	83 ec 08             	sub    $0x8,%esp
   11e91:	52                   	push   %edx
   11e92:	50                   	push   %eax
   11e93:	e8 6a eb ff ff       	call   10a02 <memory_copy_uvm>
   11e98:	83 c4 10             	add    $0x10,%esp
   11e9b:	85 c0                	test   %eax,%eax
   11e9d:	78 1c                	js     11ebb <sys_fork+0x177>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11e9f:	83 ec 0c             	sub    $0xc,%esp
   11ea2:	ff 75 f0             	push   -0x10(%ebp)
   11ea5:	e8 69 f6 ff ff       	call   11513 <task_start>
   11eaa:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11ead:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11eb0:	8b 40 08             	mov    0x8(%eax),%eax
   11eb3:	eb 2e                	jmp    11ee3 <sys_fork+0x19f>
  if (child_task == (task_t *)0) goto fork_failed;
   11eb5:	90                   	nop
   11eb6:	eb 04                	jmp    11ebc <sys_fork+0x178>
  if (err < 0) goto fork_failed;
   11eb8:	90                   	nop
   11eb9:	eb 01                	jmp    11ebc <sys_fork+0x178>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11ebb:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11ebc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ec0:	74 1c                	je     11ede <sys_fork+0x19a>
    task_uninit(child_task);
   11ec2:	83 ec 0c             	sub    $0xc,%esp
   11ec5:	ff 75 f0             	push   -0x10(%ebp)
   11ec8:	e8 ab f7 ff ff       	call   11678 <task_uninit>
   11ecd:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11ed0:	83 ec 0c             	sub    $0xc,%esp
   11ed3:	ff 75 f0             	push   -0x10(%ebp)
   11ed6:	e8 75 fd ff ff       	call   11c50 <free_task>
   11edb:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11ede:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11ee3:	c9                   	leave  
   11ee4:	c3                   	ret    

00011ee5 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11ee5:	55                   	push   %ebp
   11ee6:	89 e5                	mov    %esp,%ebp
   11ee8:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11eeb:	e8 d3 14 00 00       	call   133c3 <idt_enter_protection>
   11ef0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11ef3:	83 ec 0c             	sub    $0xc,%esp
   11ef6:	68 04 50 02 00       	push   $0x25004
   11efb:	e8 f4 f2 ff ff       	call   111f4 <list_get_size>
   11f00:	83 c4 10             	add    $0x10,%esp
   11f03:	83 f8 01             	cmp    $0x1,%eax
   11f06:	7e 29                	jle    11f31 <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11f08:	e8 a4 fa ff ff       	call   119b1 <task_current>
   11f0d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11f10:	83 ec 0c             	sub    $0xc,%esp
   11f13:	ff 75 f0             	push   -0x10(%ebp)
   11f16:	e8 26 fa ff ff       	call   11941 <task_set_unready>
   11f1b:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11f1e:	83 ec 0c             	sub    $0xc,%esp
   11f21:	ff 75 f0             	push   -0x10(%ebp)
   11f24:	e8 d6 f9 ff ff       	call   118ff <task_set_ready>
   11f29:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11f2c:	e8 8a fa ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11f31:	83 ec 0c             	sub    $0xc,%esp
   11f34:	ff 75 f4             	push   -0xc(%ebp)
   11f37:	e8 9f 14 00 00       	call   133db <idt_leave_protection>
   11f3c:	83 c4 10             	add    $0x10,%esp
  return 0;
   11f3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f44:	c9                   	leave  
   11f45:	c3                   	ret    

00011f46 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11f46:	55                   	push   %ebp
   11f47:	89 e5                	mov    %esp,%ebp
   11f49:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11f4c:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11f53:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f56:	8b 40 18             	mov    0x18(%eax),%eax
   11f59:	83 e0 02             	and    $0x2,%eax
   11f5c:	85 c0                	test   %eax,%eax
   11f5e:	74 04                	je     11f64 <load_phdr+0x1e>
    privilege |= PTE_W;
   11f60:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11f64:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f67:	8b 50 14             	mov    0x14(%eax),%edx
   11f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f6d:	8b 40 08             	mov    0x8(%eax),%eax
   11f70:	ff 75 f4             	push   -0xc(%ebp)
   11f73:	52                   	push   %edx
   11f74:	50                   	push   %eax
   11f75:	ff 75 10             	push   0x10(%ebp)
   11f78:	e8 f2 ed ff ff       	call   10d6f <memory_alloc_for_page_dir>
   11f7d:	83 c4 10             	add    $0x10,%esp
   11f80:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11f83:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f87:	79 1a                	jns    11fa3 <load_phdr+0x5d>
    log_printf("no memory\n");
   11f89:	83 ec 0c             	sub    $0xc,%esp
   11f8c:	68 7e 98 01 00       	push   $0x1987e
   11f91:	e8 8a 75 00 00       	call   19520 <log_printf>
   11f96:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f99:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f9e:	e9 b5 00 00 00       	jmp    12058 <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11fa3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fa6:	8b 40 04             	mov    0x4(%eax),%eax
   11fa9:	83 ec 04             	sub    $0x4,%esp
   11fac:	6a 00                	push   $0x0
   11fae:	50                   	push   %eax
   11faf:	ff 75 08             	push   0x8(%ebp)
   11fb2:	e8 e5 56 00 00       	call   1769c <sys_lseek>
   11fb7:	83 c4 10             	add    $0x10,%esp
   11fba:	85 c0                	test   %eax,%eax
   11fbc:	79 1a                	jns    11fd8 <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11fbe:	83 ec 0c             	sub    $0xc,%esp
   11fc1:	68 89 98 01 00       	push   $0x19889
   11fc6:	e8 55 75 00 00       	call   19520 <log_printf>
   11fcb:	83 c4 10             	add    $0x10,%esp
    return -1;
   11fce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11fd3:	e9 80 00 00 00       	jmp    12058 <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fdb:	8b 40 08             	mov    0x8(%eax),%eax
   11fde:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11fe1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fe4:	8b 40 10             	mov    0x10(%eax),%eax
   11fe7:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11fea:	eb 61                	jmp    1204d <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11fec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fef:	ba 00 10 00 00       	mov    $0x1000,%edx
   11ff4:	39 d0                	cmp    %edx,%eax
   11ff6:	0f 47 c2             	cmova  %edx,%eax
   11ff9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11ffc:	83 ec 08             	sub    $0x8,%esp
   11fff:	ff 75 f0             	push   -0x10(%ebp)
   12002:	ff 75 10             	push   0x10(%ebp)
   12005:	e8 08 ef ff ff       	call   10f12 <memory_get_paddr>
   1200a:	83 c4 10             	add    $0x10,%esp
   1200d:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   12010:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12013:	83 ec 04             	sub    $0x4,%esp
   12016:	ff 75 e4             	push   -0x1c(%ebp)
   12019:	50                   	push   %eax
   1201a:	ff 75 08             	push   0x8(%ebp)
   1201d:	e8 f1 54 00 00       	call   17513 <sys_read>
   12022:	83 c4 10             	add    $0x10,%esp
   12025:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   12028:	7e 17                	jle    12041 <load_phdr+0xfb>
      log_printf("read file failed\n");
   1202a:	83 ec 0c             	sub    $0xc,%esp
   1202d:	68 9c 98 01 00       	push   $0x1989c
   12032:	e8 e9 74 00 00       	call   19520 <log_printf>
   12037:	83 c4 10             	add    $0x10,%esp
      return -1;
   1203a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1203f:	eb 17                	jmp    12058 <load_phdr+0x112>
    }

    size -= curr_size;
   12041:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12044:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   12047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1204a:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   1204d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12051:	75 99                	jne    11fec <load_phdr+0xa6>
  }

  return 0;
   12053:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12058:	c9                   	leave  
   12059:	c3                   	ret    

0001205a <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   1205a:	55                   	push   %ebp
   1205b:	89 e5                	mov    %esp,%ebp
   1205d:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   12060:	83 ec 08             	sub    $0x8,%esp
   12063:	6a 00                	push   $0x0
   12065:	ff 75 0c             	push   0xc(%ebp)
   12068:	e8 11 53 00 00       	call   1737e <sys_open>
   1206d:	83 c4 10             	add    $0x10,%esp
   12070:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   12073:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12077:	79 18                	jns    12091 <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   12079:	83 ec 08             	sub    $0x8,%esp
   1207c:	ff 75 0c             	push   0xc(%ebp)
   1207f:	68 ae 98 01 00       	push   $0x198ae
   12084:	e8 97 74 00 00       	call   19520 <log_printf>
   12089:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1208c:	e9 c1 01 00 00       	jmp    12252 <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   12091:	83 ec 04             	sub    $0x4,%esp
   12094:	6a 34                	push   $0x34
   12096:	8d 45 b0             	lea    -0x50(%ebp),%eax
   12099:	50                   	push   %eax
   1209a:	ff 75 ec             	push   -0x14(%ebp)
   1209d:	e8 71 54 00 00       	call   17513 <sys_read>
   120a2:	83 c4 10             	add    $0x10,%esp
   120a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   120a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   120ab:	83 f8 33             	cmp    $0x33,%eax
   120ae:	77 18                	ja     120c8 <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   120b0:	83 ec 08             	sub    $0x8,%esp
   120b3:	ff 75 e8             	push   -0x18(%ebp)
   120b6:	68 be 98 01 00       	push   $0x198be
   120bb:	e8 60 74 00 00       	call   19520 <log_printf>
   120c0:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120c3:	e9 8a 01 00 00       	jmp    12252 <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120c8:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   120cc:	3c 7f                	cmp    $0x7f,%al
   120ce:	75 18                	jne    120e8 <load_elf_file+0x8e>
   120d0:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   120d4:	3c 45                	cmp    $0x45,%al
   120d6:	75 10                	jne    120e8 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120d8:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120dc:	3c 4c                	cmp    $0x4c,%al
   120de:	75 08                	jne    120e8 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120e0:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   120e4:	3c 46                	cmp    $0x46,%al
   120e6:	74 15                	je     120fd <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   120e8:	83 ec 0c             	sub    $0xc,%esp
   120eb:	68 da 98 01 00       	push   $0x198da
   120f0:	e8 2b 74 00 00       	call   19520 <log_printf>
   120f5:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120f8:	e9 55 01 00 00       	jmp    12252 <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120fd:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   12101:	66 83 f8 02          	cmp    $0x2,%ax
   12105:	75 11                	jne    12118 <load_elf_file+0xbe>
   12107:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   1210b:	66 83 f8 03          	cmp    $0x3,%ax
   1210f:	75 07                	jne    12118 <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   12111:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   12114:	85 c0                	test   %eax,%eax
   12116:	75 15                	jne    1212d <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   12118:	83 ec 0c             	sub    $0xc,%esp
   1211b:	68 f4 98 01 00       	push   $0x198f4
   12120:	e8 fb 73 00 00       	call   19520 <log_printf>
   12125:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12128:	e9 25 01 00 00       	jmp    12252 <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   1212d:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12131:	66 85 c0             	test   %ax,%ax
   12134:	74 07                	je     1213d <load_elf_file+0xe3>
   12136:	8b 45 cc             	mov    -0x34(%ebp),%eax
   12139:	85 c0                	test   %eax,%eax
   1213b:	75 15                	jne    12152 <load_elf_file+0xf8>
    log_printf("none programe header\n");
   1213d:	83 ec 0c             	sub    $0xc,%esp
   12140:	68 15 99 01 00       	push   $0x19915
   12145:	e8 d6 73 00 00       	call   19520 <log_printf>
   1214a:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1214d:	e9 00 01 00 00       	jmp    12252 <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   12152:	8b 45 cc             	mov    -0x34(%ebp),%eax
   12155:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12158:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1215f:	e9 cb 00 00 00       	jmp    1222f <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   12164:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12167:	83 ec 04             	sub    $0x4,%esp
   1216a:	6a 00                	push   $0x0
   1216c:	50                   	push   %eax
   1216d:	ff 75 ec             	push   -0x14(%ebp)
   12170:	e8 27 55 00 00       	call   1769c <sys_lseek>
   12175:	83 c4 10             	add    $0x10,%esp
   12178:	85 c0                	test   %eax,%eax
   1217a:	79 15                	jns    12191 <load_elf_file+0x137>
      log_printf("read file failed\n");
   1217c:	83 ec 0c             	sub    $0xc,%esp
   1217f:	68 9c 98 01 00       	push   $0x1989c
   12184:	e8 97 73 00 00       	call   19520 <log_printf>
   12189:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   1218c:	e9 c1 00 00 00       	jmp    12252 <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   12191:	83 ec 04             	sub    $0x4,%esp
   12194:	6a 20                	push   $0x20
   12196:	8d 45 90             	lea    -0x70(%ebp),%eax
   12199:	50                   	push   %eax
   1219a:	ff 75 ec             	push   -0x14(%ebp)
   1219d:	e8 71 53 00 00       	call   17513 <sys_read>
   121a2:	83 c4 10             	add    $0x10,%esp
   121a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   121a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   121ab:	83 f8 1f             	cmp    $0x1f,%eax
   121ae:	77 15                	ja     121c5 <load_elf_file+0x16b>
      log_printf("read file failed\n");
   121b0:	83 ec 0c             	sub    $0xc,%esp
   121b3:	68 9c 98 01 00       	push   $0x1989c
   121b8:	e8 63 73 00 00       	call   19520 <log_printf>
   121bd:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   121c0:	e9 8d 00 00 00       	jmp    12252 <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   121c5:	8b 45 90             	mov    -0x70(%ebp),%eax
   121c8:	83 f8 01             	cmp    $0x1,%eax
   121cb:	75 53                	jne    12220 <load_elf_file+0x1c6>
   121cd:	8b 45 98             	mov    -0x68(%ebp),%eax
   121d0:	85 c0                	test   %eax,%eax
   121d2:	79 4c                	jns    12220 <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   121d4:	83 ec 04             	sub    $0x4,%esp
   121d7:	ff 75 10             	push   0x10(%ebp)
   121da:	8d 45 90             	lea    -0x70(%ebp),%eax
   121dd:	50                   	push   %eax
   121de:	ff 75 ec             	push   -0x14(%ebp)
   121e1:	e8 60 fd ff ff       	call   11f46 <load_phdr>
   121e6:	83 c4 10             	add    $0x10,%esp
   121e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   121ec:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   121f0:	79 12                	jns    12204 <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   121f2:	83 ec 0c             	sub    $0xc,%esp
   121f5:	68 2b 99 01 00       	push   $0x1992b
   121fa:	e8 21 73 00 00       	call   19520 <log_printf>
   121ff:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12202:	eb 4e                	jmp    12252 <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   12204:	8b 55 98             	mov    -0x68(%ebp),%edx
   12207:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   1220a:	01 c2                	add    %eax,%edx
   1220c:	8b 45 08             	mov    0x8(%ebp),%eax
   1220f:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   12212:	8b 45 08             	mov    0x8(%ebp),%eax
   12215:	8b 50 10             	mov    0x10(%eax),%edx
   12218:	8b 45 08             	mov    0x8(%ebp),%eax
   1221b:	89 50 14             	mov    %edx,0x14(%eax)
   1221e:	eb 01                	jmp    12221 <load_elf_file+0x1c7>
      continue;
   12220:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12221:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12225:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12229:	0f b7 c0             	movzwl %ax,%eax
   1222c:	01 45 f4             	add    %eax,-0xc(%ebp)
   1222f:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   12233:	0f b7 c0             	movzwl %ax,%eax
   12236:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12239:	0f 8c 25 ff ff ff    	jl     12164 <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   1223f:	83 ec 0c             	sub    $0xc,%esp
   12242:	ff 75 ec             	push   -0x14(%ebp)
   12245:	e8 e7 54 00 00       	call   17731 <sys_close>
   1224a:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   1224d:	8b 45 c8             	mov    -0x38(%ebp),%eax
   12250:	eb 19                	jmp    1226b <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   12252:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12256:	78 0e                	js     12266 <load_elf_file+0x20c>
    sys_close(file);
   12258:	83 ec 0c             	sub    $0xc,%esp
   1225b:	ff 75 ec             	push   -0x14(%ebp)
   1225e:	e8 ce 54 00 00       	call   17731 <sys_close>
   12263:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   12266:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1226b:	c9                   	leave  
   1226c:	c3                   	ret    

0001226d <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   1226d:	55                   	push   %ebp
   1226e:	89 e5                	mov    %esp,%ebp
   12270:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   12273:	8b 45 14             	mov    0x14(%ebp),%eax
   12276:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   12279:	8b 45 0c             	mov    0xc(%ebp),%eax
   1227c:	83 c0 0c             	add    $0xc,%eax
   1227f:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **dest_argv_tb =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   12282:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12285:	83 ec 08             	sub    $0x8,%esp
   12288:	50                   	push   %eax
   12289:	ff 75 08             	push   0x8(%ebp)
   1228c:	e8 81 ec ff ff       	call   10f12 <memory_get_paddr>
   12291:	83 c4 10             	add    $0x10,%esp
  char **dest_argv_tb =
   12294:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小
  //TODO:多给一个空指针位置，不然在解析参数的时候没有结束标志可能会访问异常
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * (argc + 1);
   12297:	8b 45 14             	mov    0x14(%ebp),%eax
   1229a:	83 c0 04             	add    $0x4,%eax
   1229d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   122a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a7:	01 d0                	add    %edx,%eax
   122a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   122ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   122b3:	e9 82 00 00 00       	jmp    1233a <copy_args+0xcd>
    char *from = argv[i];
   122b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   122c2:	8b 45 10             	mov    0x10(%ebp),%eax
   122c5:	01 d0                	add    %edx,%eax
   122c7:	8b 00                	mov    (%eax),%eax
   122c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   122cc:	83 ec 0c             	sub    $0xc,%esp
   122cf:	ff 75 e8             	push   -0x18(%ebp)
   122d2:	e8 c8 69 00 00       	call   18c9f <kernel_strlen>
   122d7:	83 c4 10             	add    $0x10,%esp
   122da:	83 c0 01             	add    $0x1,%eax
   122dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //将每个字符串的内容陆续拷贝到dest_arg处，即task_arg以及指针数组的紧邻上方
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   122e0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   122e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122e9:	51                   	push   %ecx
   122ea:	52                   	push   %edx
   122eb:	ff 75 08             	push   0x8(%ebp)
   122ee:	50                   	push   %eax
   122ef:	e8 71 ec ff ff       	call   10f65 <memory_copy_uvm_data>
   122f4:	83 c4 10             	add    $0x10,%esp
   122f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   122fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   122fe:	79 1c                	jns    1231c <copy_args+0xaf>
   12300:	68 40 99 01 00       	push   $0x19940
   12305:	68 08 9a 01 00       	push   $0x19a08
   1230a:	68 a0 03 00 00       	push   $0x3a0
   1230f:	68 1c 98 01 00       	push   $0x1981c
   12314:	e8 eb 64 00 00       	call   18804 <pannic>
   12319:	83 c4 10             	add    $0x10,%esp
    dest_argv_tb[i] = dest_arg;
   1231c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1231f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12326:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12329:	01 c2                	add    %eax,%edx
   1232b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1232e:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   12330:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12333:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   12336:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1233a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1233d:	3b 45 14             	cmp    0x14(%ebp),%eax
   12340:	0f 8c 72 ff ff ff    	jl     122b8 <copy_args+0x4b>
  }

  //将字符串指针数组的最后一项
  if (argc) {
   12346:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1234a:	74 15                	je     12361 <copy_args+0xf4>
    dest_argv_tb[argc] = (char *)0; 
   1234c:	8b 45 14             	mov    0x14(%ebp),%eax
   1234f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12356:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12359:	01 d0                	add    %edx,%eax
   1235b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  return memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   12361:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   12364:	8b 45 0c             	mov    0xc(%ebp),%eax
   12367:	6a 0c                	push   $0xc
   12369:	52                   	push   %edx
   1236a:	ff 75 08             	push   0x8(%ebp)
   1236d:	50                   	push   %eax
   1236e:	e8 f2 eb ff ff       	call   10f65 <memory_copy_uvm_data>
   12373:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   12376:	c9                   	leave  
   12377:	c3                   	ret    

00012378 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   12378:	55                   	push   %ebp
   12379:	89 e5                	mov    %esp,%ebp
   1237b:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   1237e:	e8 2e f6 ff ff       	call   119b1 <task_current>
   12383:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   12386:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12389:	8b 40 78             	mov    0x78(%eax),%eax
   1238c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   1238f:	e8 e9 e5 ff ff       	call   1097d <memory_creat_uvm>
   12394:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   12397:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1239b:	0f 84 4a 01 00 00    	je     124eb <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   123a1:	83 ec 04             	sub    $0x4,%esp
   123a4:	ff 75 ec             	push   -0x14(%ebp)
   123a7:	ff 75 08             	push   0x8(%ebp)
   123aa:	ff 75 f4             	push   -0xc(%ebp)
   123ad:	e8 a8 fc ff ff       	call   1205a <load_elf_file>
   123b2:	83 c4 10             	add    $0x10,%esp
   123b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   123b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   123bc:	0f 84 2c 01 00 00    	je     124ee <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   123c2:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   123c9:	6a 07                	push   $0x7
   123cb:	68 00 20 03 00       	push   $0x32000
   123d0:	68 00 e0 fc df       	push   $0xdffce000
   123d5:	ff 75 ec             	push   -0x14(%ebp)
   123d8:	e8 92 e9 ff ff       	call   10d6f <memory_alloc_for_page_dir>
   123dd:	83 c4 10             	add    $0x10,%esp
   123e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   123e3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123e7:	0f 88 04 01 00 00    	js     124f1 <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   123ed:	83 ec 0c             	sub    $0xc,%esp
   123f0:	ff 75 0c             	push   0xc(%ebp)
   123f3:	e8 db 6c 00 00       	call   190d3 <strings_count>
   123f8:	83 c4 10             	add    $0x10,%esp
   123fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   123fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12401:	ff 75 dc             	push   -0x24(%ebp)
   12404:	ff 75 0c             	push   0xc(%ebp)
   12407:	50                   	push   %eax
   12408:	ff 75 ec             	push   -0x14(%ebp)
   1240b:	e8 5d fe ff ff       	call   1226d <copy_args>
   12410:	83 c4 10             	add    $0x10,%esp
   12413:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   12416:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1241a:	0f 88 d4 00 00 00    	js     124f4 <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   12420:	e8 8c f5 ff ff       	call   119b1 <task_current>
   12425:	8b 40 60             	mov    0x60(%eax),%eax
   12428:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   1242b:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   1242e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12431:	8d 50 ec             	lea    -0x14(%eax),%edx
   12434:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12437:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   1243a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1243d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12440:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   12443:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12446:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1244d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12450:	8b 50 28             	mov    0x28(%eax),%edx
   12453:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12456:	89 50 2c             	mov    %edx,0x2c(%eax)
   12459:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1245c:	8b 50 2c             	mov    0x2c(%eax),%edx
   1245f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12462:	89 50 24             	mov    %edx,0x24(%eax)
   12465:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12468:	8b 50 24             	mov    0x24(%eax),%edx
   1246b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1246e:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   12471:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12474:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   1247b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1247e:	8b 50 1c             	mov    0x1c(%eax),%edx
   12481:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12484:	89 50 14             	mov    %edx,0x14(%eax)
   12487:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1248a:	8b 50 14             	mov    0x14(%eax),%edx
   1248d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12490:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   12493:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12496:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   1249c:	83 ec 0c             	sub    $0xc,%esp
   1249f:	ff 75 08             	push   0x8(%ebp)
   124a2:	e8 59 6c 00 00       	call   19100 <get_file_name>
   124a7:	83 c4 10             	add    $0x10,%esp
   124aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   124ad:	83 c2 24             	add    $0x24,%edx
   124b0:	83 ec 04             	sub    $0x4,%esp
   124b3:	6a 20                	push   $0x20
   124b5:	50                   	push   %eax
   124b6:	52                   	push   %edx
   124b7:	e8 11 67 00 00       	call   18bcd <kernel_strncpy>
   124bc:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   124bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   124c5:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   124c8:	83 ec 0c             	sub    $0xc,%esp
   124cb:	ff 75 ec             	push   -0x14(%ebp)
   124ce:	e8 be ed ff ff       	call   11291 <mmu_set_page_dir>
   124d3:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   124d6:	83 ec 0c             	sub    $0xc,%esp
   124d9:	ff 75 f0             	push   -0x10(%ebp)
   124dc:	e8 ae e6 ff ff       	call   10b8f <memory_destroy_uvm>
   124e1:	83 c4 10             	add    $0x10,%esp
  return 0;
   124e4:	b8 00 00 00 00       	mov    $0x0,%eax
   124e9:	eb 3a                	jmp    12525 <sys_execve+0x1ad>
    goto exec_failed;
   124eb:	90                   	nop
   124ec:	eb 07                	jmp    124f5 <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   124ee:	90                   	nop
   124ef:	eb 04                	jmp    124f5 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124f1:	90                   	nop
   124f2:	eb 01                	jmp    124f5 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124f4:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   124f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   124f9:	74 25                	je     12520 <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   124fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12501:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   12504:	83 ec 0c             	sub    $0xc,%esp
   12507:	ff 75 f0             	push   -0x10(%ebp)
   1250a:	e8 82 ed ff ff       	call   11291 <mmu_set_page_dir>
   1250f:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   12512:	83 ec 0c             	sub    $0xc,%esp
   12515:	ff 75 ec             	push   -0x14(%ebp)
   12518:	e8 72 e6 ff ff       	call   10b8f <memory_destroy_uvm>
   1251d:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   12520:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12525:	c9                   	leave  
   12526:	c3                   	ret    

00012527 <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   12527:	55                   	push   %ebp
   12528:	89 e5                	mov    %esp,%ebp
   1252a:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   1252d:	e8 7f f4 ff ff       	call   119b1 <task_current>
   12532:	89 45 e8             	mov    %eax,-0x18(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12535:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1253c:	eb 39                	jmp    12577 <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   1253e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12541:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12544:	83 c2 30             	add    $0x30,%edx
   12547:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1254b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (file) {
   1254e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   12552:	74 1f                	je     12573 <sys_exit+0x4c>
      sys_close(fd);
   12554:	83 ec 0c             	sub    $0xc,%esp
   12557:	ff 75 f4             	push   -0xc(%ebp)
   1255a:	e8 d2 51 00 00       	call   17731 <sys_close>
   1255f:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   12562:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12565:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12568:	83 c2 30             	add    $0x30,%edx
   1256b:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   12572:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12573:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12577:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1257b:	7e c1                	jle    1253e <sys_exit+0x17>
    }
  }

  //3.将该进程的子进程的父进程设为first_task，由其进行统一回收
  int move_child = 0; //标志位，判断是否当前进程已有子进程进入僵尸态
   1257d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  //TODO:加锁
  mutex_lock(&task_table_lock);
   12584:	83 ec 0c             	sub    $0xc,%esp
   12587:	68 c0 b9 03 00       	push   $0x3b9c0
   1258c:	e8 48 5b 00 00       	call   180d9 <mutex_lock>
   12591:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < TASK_COUNT; ++i) {
   12594:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1259b:	eb 3b                	jmp    125d8 <sys_exit+0xb1>
    task_t *task = task_table + i;
   1259d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   125a0:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   125a6:	05 c0 55 02 00       	add    $0x255c0,%eax
   125ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (task->parent == curr_task) {
   125ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125b1:	8b 40 04             	mov    0x4(%eax),%eax
   125b4:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   125b7:	75 1b                	jne    125d4 <sys_exit+0xad>
      task->parent = &task_manager.first_task;
   125b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125bc:	c7 40 04 28 50 02 00 	movl   $0x25028,0x4(%eax)
      if (task->state == TASK_ZOMBIE) { //已有子进程提前退出进入僵尸态，则设置标志位
   125c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125c6:	8b 00                	mov    (%eax),%eax
   125c8:	83 f8 06             	cmp    $0x6,%eax
   125cb:	75 07                	jne    125d4 <sys_exit+0xad>
        move_child = 1;
   125cd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  for (int i = 0; i < TASK_COUNT; ++i) {
   125d4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   125d8:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   125dc:	7e bf                	jle    1259d <sys_exit+0x76>
      }
    }
  }
  //TODO:解锁
  mutex_unlock(&task_table_lock);
   125de:	83 ec 0c             	sub    $0xc,%esp
   125e1:	68 c0 b9 03 00       	push   $0x3b9c0
   125e6:	e8 94 5b 00 00       	call   1817f <mutex_unlock>
   125eb:	83 c4 10             	add    $0x10,%esp
 

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   125ee:	e8 d0 0d 00 00       	call   133c3 <idt_enter_protection>
   125f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)


  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   125f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125f9:	8b 40 04             	mov    0x4(%eax),%eax
   125fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  if (move_child && (parent != &task_manager.first_task)) {  
   125ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12603:	74 23                	je     12628 <sys_exit+0x101>
   12605:	81 7d e0 28 50 02 00 	cmpl   $0x25028,-0x20(%ebp)
   1260c:	74 1a                	je     12628 <sys_exit+0x101>
    //当前进程的父进程不是first_task,
    //需要对first_task进行唤醒，以使first_task
    //对当前进程的提前死亡的子进程进行资源回收
    if (task_manager.first_task.state == TASK_WAITTING) {
   1260e:	a1 28 50 02 00       	mov    0x25028,%eax
   12613:	83 f8 04             	cmp    $0x4,%eax
   12616:	75 10                	jne    12628 <sys_exit+0x101>
      task_set_ready(&task_manager.first_task);
   12618:	83 ec 0c             	sub    $0xc,%esp
   1261b:	68 28 50 02 00       	push   $0x25028
   12620:	e8 da f2 ff ff       	call   118ff <task_set_ready>
   12625:	83 c4 10             	add    $0x10,%esp
    }

  }
  

  if (parent->state ==
   12628:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1262b:	8b 00                	mov    (%eax),%eax
   1262d:	83 f8 04             	cmp    $0x4,%eax
   12630:	75 17                	jne    12649 <sys_exit+0x122>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   12632:	83 ec 0c             	sub    $0xc,%esp
   12635:	ff 75 e0             	push   -0x20(%ebp)
   12638:	e8 c2 f2 ff ff       	call   118ff <task_set_ready>
   1263d:	83 c4 10             	add    $0x10,%esp
    parent->state = TASK_READY;
   12640:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12643:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   12649:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1264c:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   12652:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12655:	8b 55 08             	mov    0x8(%ebp),%edx
   12658:	89 50 0c             	mov    %edx,0xc(%eax)

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   1265b:	83 ec 0c             	sub    $0xc,%esp
   1265e:	ff 75 e8             	push   -0x18(%ebp)
   12661:	e8 db f2 ff ff       	call   11941 <task_set_unready>
   12666:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   12669:	e8 4d f3 ff ff       	call   119bb <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   1266e:	83 ec 0c             	sub    $0xc,%esp
   12671:	ff 75 e4             	push   -0x1c(%ebp)
   12674:	e8 62 0d 00 00       	call   133db <idt_leave_protection>
   12679:	83 c4 10             	add    $0x10,%esp
}
   1267c:	90                   	nop
   1267d:	c9                   	leave  
   1267e:	c3                   	ret    

0001267f <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   1267f:	55                   	push   %ebp
   12680:	89 e5                	mov    %esp,%ebp
   12682:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   12685:	e8 27 f3 ff ff       	call   119b1 <task_current>
   1268a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   1268d:	83 ec 0c             	sub    $0xc,%esp
   12690:	68 c0 b9 03 00       	push   $0x3b9c0
   12695:	e8 3f 5a 00 00       	call   180d9 <mutex_lock>
   1269a:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   1269d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   126a4:	eb 6c                	jmp    12712 <sys_wait+0x93>
      task_t *task = task_table + i;
   126a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126a9:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   126af:	05 c0 55 02 00       	add    $0x255c0,%eax
   126b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->pid == 0 || task->parent != curr_task) {
   126b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126ba:	8b 40 08             	mov    0x8(%eax),%eax
   126bd:	85 c0                	test   %eax,%eax
   126bf:	74 4c                	je     1270d <sys_wait+0x8e>
   126c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126c4:	8b 40 04             	mov    0x4(%eax),%eax
   126c7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   126ca:	75 41                	jne    1270d <sys_wait+0x8e>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   126cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126cf:	8b 00                	mov    (%eax),%eax
   126d1:	83 f8 06             	cmp    $0x6,%eax
   126d4:	75 38                	jne    1270e <sys_wait+0x8f>
        int pid = task->pid;
   126d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126d9:	8b 40 08             	mov    0x8(%eax),%eax
   126dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   126df:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126e2:	8b 50 0c             	mov    0xc(%eax),%edx
   126e5:	8b 45 08             	mov    0x8(%ebp),%eax
   126e8:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   126ea:	83 ec 0c             	sub    $0xc,%esp
   126ed:	ff 75 e8             	push   -0x18(%ebp)
   126f0:	e8 83 ef ff ff       	call   11678 <task_uninit>
   126f5:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   126f8:	83 ec 0c             	sub    $0xc,%esp
   126fb:	68 c0 b9 03 00       	push   $0x3b9c0
   12700:	e8 7a 5a 00 00       	call   1817f <mutex_unlock>
   12705:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   12708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1270b:	eb 52                	jmp    1275f <sys_wait+0xe0>
        continue;
   1270d:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   1270e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12712:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12716:	7e 8e                	jle    126a6 <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   12718:	83 ec 0c             	sub    $0xc,%esp
   1271b:	68 c0 b9 03 00       	push   $0x3b9c0
   12720:	e8 5a 5a 00 00       	call   1817f <mutex_unlock>
   12725:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   12728:	e8 96 0c 00 00       	call   133c3 <idt_enter_protection>
   1272d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   12730:	83 ec 0c             	sub    $0xc,%esp
   12733:	ff 75 f0             	push   -0x10(%ebp)
   12736:	e8 06 f2 ff ff       	call   11941 <task_set_unready>
   1273b:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   1273e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12741:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   12747:	e8 6f f2 ff ff       	call   119bb <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   1274c:	83 ec 0c             	sub    $0xc,%esp
   1274f:	ff 75 ec             	push   -0x14(%ebp)
   12752:	e8 84 0c 00 00       	call   133db <idt_leave_protection>
   12757:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   1275a:	e9 2e ff ff ff       	jmp    1268d <sys_wait+0xe>
  }
  return 0;
   1275f:	c9                   	leave  
   12760:	c3                   	ret    

00012761 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   12761:	55                   	push   %ebp
   12762:	89 e5                	mov    %esp,%ebp
   12764:	83 ec 08             	sub    $0x8,%esp
   12767:	8b 55 0c             	mov    0xc(%ebp),%edx
   1276a:	8b 45 14             	mov    0x14(%ebp),%eax
   1276d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12771:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12775:	8b 45 10             	mov    0x10(%ebp),%eax
   12778:	89 c2                	mov    %eax,%edx
   1277a:	8b 45 08             	mov    0x8(%ebp),%eax
   1277d:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   12780:	8b 45 10             	mov    0x10(%ebp),%eax
   12783:	c1 e8 10             	shr    $0x10,%eax
   12786:	89 c2                	mov    %eax,%edx
   12788:	8b 45 08             	mov    0x8(%ebp),%eax
   1278b:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1278f:	8b 45 08             	mov    0x8(%ebp),%eax
   12792:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12796:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1279a:	8b 45 08             	mov    0x8(%ebp),%eax
   1279d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   127a1:	66 89 50 04          	mov    %dx,0x4(%eax)
   127a5:	90                   	nop
   127a6:	c9                   	leave  
   127a7:	c3                   	ret    

000127a8 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   127a8:	55                   	push   %ebp
   127a9:	89 e5                	mov    %esp,%ebp
   127ab:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   127ae:	8b 45 08             	mov    0x8(%ebp),%eax
   127b1:	c1 e8 10             	shr    $0x10,%eax
   127b4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   127b8:	8b 45 08             	mov    0x8(%ebp),%eax
   127bb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   127bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   127c2:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   127c5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   127c9:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   127cd:	90                   	nop
   127ce:	c9                   	leave  
   127cf:	c3                   	ret    

000127d0 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   127d0:	55                   	push   %ebp
   127d1:	89 e5                	mov    %esp,%ebp
   127d3:	83 ec 18             	sub    $0x18,%esp
   127d6:	8b 55 08             	mov    0x8(%ebp),%edx
   127d9:	8b 45 14             	mov    0x14(%ebp),%eax
   127dc:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   127e0:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   127e4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   127e8:	66 c1 e8 03          	shr    $0x3,%ax
   127ec:	0f b7 c0             	movzwl %ax,%eax
   127ef:	c1 e0 03             	shl    $0x3,%eax
   127f2:	05 e0 bb 03 00       	add    $0x3bbe0,%eax
   127f7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   127fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   127fd:	89 c2                	mov    %eax,%edx
   127ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12802:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   12806:	8b 45 0c             	mov    0xc(%ebp),%eax
   12809:	c1 e8 10             	shr    $0x10,%eax
   1280c:	89 c2                	mov    %eax,%edx
   1280e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12811:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   12814:	8b 45 0c             	mov    0xc(%ebp),%eax
   12817:	c1 e8 18             	shr    $0x18,%eax
   1281a:	89 c2                	mov    %eax,%edx
   1281c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1281f:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   12822:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12829:	76 1d                	jbe    12848 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1282b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1282e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12832:	66 0d 00 80          	or     $0x8000,%ax
   12836:	89 c2                	mov    %eax,%edx
   12838:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1283b:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1283f:	8b 45 10             	mov    0x10(%ebp),%eax
   12842:	c1 e8 0c             	shr    $0xc,%eax
   12845:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12848:	8b 45 10             	mov    0x10(%ebp),%eax
   1284b:	89 c2                	mov    %eax,%edx
   1284d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12850:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   12853:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12856:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1285a:	89 c2                	mov    %eax,%edx
   1285c:	8b 45 10             	mov    0x10(%ebp),%eax
   1285f:	c1 e8 08             	shr    $0x8,%eax
   12862:	66 25 00 0f          	and    $0xf00,%ax
   12866:	09 d0                	or     %edx,%eax
   12868:	89 c2                	mov    %eax,%edx
   1286a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1286d:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   12871:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12874:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12878:	89 c2                	mov    %eax,%edx
   1287a:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1287e:	80 e4 f0             	and    $0xf0,%ah
   12881:	09 d0                	or     %edx,%eax
   12883:	89 c2                	mov    %eax,%edx
   12885:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12888:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1288c:	90                   	nop
   1288d:	c9                   	leave  
   1288e:	c3                   	ret    

0001288f <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1288f:	55                   	push   %ebp
   12890:	89 e5                	mov    %esp,%ebp
   12892:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1289c:	eb 1c                	jmp    128ba <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1289e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128a1:	c1 e0 03             	shl    $0x3,%eax
   128a4:	0f b7 c0             	movzwl %ax,%eax
   128a7:	6a 00                	push   $0x0
   128a9:	6a 00                	push   $0x0
   128ab:	6a 00                	push   $0x0
   128ad:	50                   	push   %eax
   128ae:	e8 1d ff ff ff       	call   127d0 <segment_desc_set>
   128b3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   128b6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   128ba:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   128c1:	7e db                	jle    1289e <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   128c3:	68 92 40 00 00       	push   $0x4092
   128c8:	6a ff                	push   $0xffffffff
   128ca:	6a 00                	push   $0x0
   128cc:	6a 10                	push   $0x10
   128ce:	e8 fd fe ff ff       	call   127d0 <segment_desc_set>
   128d3:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   128d6:	c6 05 e2 bb 04 00 01 	movb   $0x1,0x4bbe2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   128dd:	68 9a 40 00 00       	push   $0x409a
   128e2:	6a ff                	push   $0xffffffff
   128e4:	6a 00                	push   $0x0
   128e6:	6a 08                	push   $0x8
   128e8:	e8 e3 fe ff ff       	call   127d0 <segment_desc_set>
   128ed:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   128f0:	c6 05 e1 bb 04 00 01 	movb   $0x1,0x4bbe1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   128f7:	ba e7 02 01 00       	mov    $0x102e7,%edx
   128fc:	b8 f8 bb 03 00       	mov    $0x3bbf8,%eax
   12901:	68 05 ec 00 00       	push   $0xec05
   12906:	52                   	push   %edx
   12907:	6a 08                	push   $0x8
   12909:	50                   	push   %eax
   1290a:	e8 52 fe ff ff       	call   12761 <gate_desc_set>
   1290f:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   12912:	c6 05 e3 bb 04 00 01 	movb   $0x1,0x4bbe3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12919:	b8 e0 bb 03 00       	mov    $0x3bbe0,%eax
   1291e:	83 ec 08             	sub    $0x8,%esp
   12921:	68 00 00 01 00       	push   $0x10000
   12926:	50                   	push   %eax
   12927:	e8 7c fe ff ff       	call   127a8 <lgdt>
   1292c:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   1292f:	83 ec 0c             	sub    $0xc,%esp
   12932:	68 e0 db 04 00       	push   $0x4dbe0
   12937:	e8 50 57 00 00       	call   1808c <mutex_init>
   1293c:	83 c4 10             	add    $0x10,%esp
}
   1293f:	90                   	nop
   12940:	c9                   	leave  
   12941:	c3                   	ret    

00012942 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   12942:	55                   	push   %ebp
   12943:	89 e5                	mov    %esp,%ebp
   12945:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12948:	83 ec 0c             	sub    $0xc,%esp
   1294b:	68 e0 db 04 00       	push   $0x4dbe0
   12950:	e8 84 57 00 00       	call   180d9 <mutex_lock>
   12955:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12958:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1295f:	eb 36                	jmp    12997 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   12961:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12964:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   12969:	0f b6 00             	movzbl (%eax),%eax
   1296c:	84 c0                	test   %al,%al
   1296e:	75 23                	jne    12993 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   12970:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12973:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   12978:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   1297b:	83 ec 0c             	sub    $0xc,%esp
   1297e:	68 e0 db 04 00       	push   $0x4dbe0
   12983:	e8 f7 57 00 00       	call   1817f <mutex_unlock>
   12988:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1298b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1298e:	c1 e0 03             	shl    $0x3,%eax
   12991:	eb 22                	jmp    129b5 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12993:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12997:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1299e:	7e c1                	jle    12961 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   129a0:	83 ec 0c             	sub    $0xc,%esp
   129a3:	68 e0 db 04 00       	push   $0x4dbe0
   129a8:	e8 d2 57 00 00       	call   1817f <mutex_unlock>
   129ad:	83 c4 10             	add    $0x10,%esp
    return -1;
   129b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   129b5:	c9                   	leave  
   129b6:	c3                   	ret    

000129b7 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   129b7:	55                   	push   %ebp
   129b8:	89 e5                	mov    %esp,%ebp
   129ba:	83 ec 14             	sub    $0x14,%esp
   129bd:	8b 45 08             	mov    0x8(%ebp),%eax
   129c0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   129c4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129c8:	66 c1 e8 03          	shr    $0x3,%ax
   129cc:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   129d0:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   129d4:	c6 80 e0 bb 04 00 00 	movb   $0x0,0x4bbe0(%eax)
}
   129db:	90                   	nop
   129dc:	c9                   	leave  
   129dd:	c3                   	ret    

000129de <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   129de:	55                   	push   %ebp
   129df:	89 e5                	mov    %esp,%ebp
   129e1:	fa                   	cli    
   129e2:	90                   	nop
   129e3:	5d                   	pop    %ebp
   129e4:	c3                   	ret    

000129e5 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   129e5:	55                   	push   %ebp
   129e6:	89 e5                	mov    %esp,%ebp
   129e8:	fb                   	sti    
   129e9:	90                   	nop
   129ea:	5d                   	pop    %ebp
   129eb:	c3                   	ret    

000129ec <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   129ec:	55                   	push   %ebp
   129ed:	89 e5                	mov    %esp,%ebp
   129ef:	f4                   	hlt    
   129f0:	90                   	nop
   129f1:	5d                   	pop    %ebp
   129f2:	c3                   	ret    

000129f3 <inb>:
static inline uint8_t inb(uint16_t port) {
   129f3:	55                   	push   %ebp
   129f4:	89 e5                	mov    %esp,%ebp
   129f6:	83 ec 14             	sub    $0x14,%esp
   129f9:	8b 45 08             	mov    0x8(%ebp),%eax
   129fc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12a00:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12a04:	89 c2                	mov    %eax,%edx
   12a06:	ec                   	in     (%dx),%al
   12a07:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12a0a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12a0e:	c9                   	leave  
   12a0f:	c3                   	ret    

00012a10 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12a10:	55                   	push   %ebp
   12a11:	89 e5                	mov    %esp,%ebp
   12a13:	83 ec 08             	sub    $0x8,%esp
   12a16:	8b 45 08             	mov    0x8(%ebp),%eax
   12a19:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a1c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12a20:	89 d0                	mov    %edx,%eax
   12a22:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12a25:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12a29:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12a2d:	ee                   	out    %al,(%dx)
}
   12a2e:	90                   	nop
   12a2f:	c9                   	leave  
   12a30:	c3                   	ret    

00012a31 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12a31:	55                   	push   %ebp
   12a32:	89 e5                	mov    %esp,%ebp
   12a34:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   12a37:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3a:	c1 e8 10             	shr    $0x10,%eax
   12a3d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   12a41:	8b 45 08             	mov    0x8(%ebp),%eax
   12a44:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12a48:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a4b:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12a4e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12a52:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12a56:	90                   	nop
   12a57:	c9                   	leave  
   12a58:	c3                   	ret    

00012a59 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12a59:	55                   	push   %ebp
   12a5a:	89 e5                	mov    %esp,%ebp
   12a5c:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12a5f:	0f 20 d0             	mov    %cr2,%eax
   12a62:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12a65:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a68:	c9                   	leave  
   12a69:	c3                   	ret    

00012a6a <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12a6a:	55                   	push   %ebp
   12a6b:	89 e5                	mov    %esp,%ebp
   12a6d:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12a70:	9c                   	pushf  
   12a71:	58                   	pop    %eax
   12a72:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12a75:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a78:	c9                   	leave  
   12a79:	c3                   	ret    

00012a7a <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12a7a:	55                   	push   %ebp
   12a7b:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12a7d:	8b 45 08             	mov    0x8(%ebp),%eax
   12a80:	50                   	push   %eax
   12a81:	9d                   	popf   
}
   12a82:	90                   	nop
   12a83:	5d                   	pop    %ebp
   12a84:	c3                   	ret    

00012a85 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12a85:	55                   	push   %ebp
   12a86:	89 e5                	mov    %esp,%ebp
   12a88:	57                   	push   %edi
   12a89:	56                   	push   %esi
   12a8a:	53                   	push   %ebx
   12a8b:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   12a8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a91:	8b 40 3c             	mov    0x3c(%eax),%eax
   12a94:	83 e0 03             	and    $0x3,%eax
   12a97:	85 c0                	test   %eax,%eax
   12a99:	74 14                	je     12aaf <print_exception_fram+0x2a>
    ss = frame->ss3;
   12a9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9e:	8b 40 48             	mov    0x48(%eax),%eax
   12aa1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa7:	8b 40 44             	mov    0x44(%eax),%eax
   12aaa:	89 45 e0             	mov    %eax,-0x20(%ebp)
   12aad:	eb 12                	jmp    12ac1 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   12aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab2:	8b 40 0c             	mov    0xc(%eax),%eax
   12ab5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12ab8:	8b 45 08             	mov    0x8(%ebp),%eax
   12abb:	8b 40 1c             	mov    0x1c(%eax),%eax
   12abe:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   12ac1:	83 ec 0c             	sub    $0xc,%esp
   12ac4:	68 14 9a 01 00       	push   $0x19a14
   12ac9:	e8 52 6a 00 00       	call   19520 <log_printf>
   12ace:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12ad1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad4:	8b 50 34             	mov    0x34(%eax),%edx
   12ad7:	8b 45 08             	mov    0x8(%ebp),%eax
   12ada:	8b 40 30             	mov    0x30(%eax),%eax
   12add:	83 ec 04             	sub    $0x4,%esp
   12ae0:	52                   	push   %edx
   12ae1:	50                   	push   %eax
   12ae2:	68 53 9a 01 00       	push   $0x19a53
   12ae7:	e8 34 6a 00 00       	call   19520 <log_printf>
   12aec:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t\t%d\nDS:\t\t\t%d\nSS:\t\t\t%d\nES:\t\t\t%d\nFS:\t\t\t%d\nGS:\t\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12aef:	8b 45 08             	mov    0x8(%ebp),%eax
   12af2:	8b 30                	mov    (%eax),%esi
   12af4:	8b 45 08             	mov    0x8(%ebp),%eax
   12af7:	8b 58 04             	mov    0x4(%eax),%ebx
   12afa:	8b 45 08             	mov    0x8(%ebp),%eax
   12afd:	8b 48 08             	mov    0x8(%eax),%ecx
   12b00:	8b 45 08             	mov    0x8(%ebp),%eax
   12b03:	8b 50 0c             	mov    0xc(%eax),%edx
   12b06:	8b 45 08             	mov    0x8(%ebp),%eax
   12b09:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t\t%d\nDS:\t\t\t%d\nSS:\t\t\t%d\nES:\t\t\t%d\nFS:\t\t\t%d\nGS:\t\t\t%d\n", 
   12b0c:	83 ec 04             	sub    $0x4,%esp
   12b0f:	56                   	push   %esi
   12b10:	53                   	push   %ebx
   12b11:	51                   	push   %ecx
   12b12:	ff 75 e4             	push   -0x1c(%ebp)
   12b15:	52                   	push   %edx
   12b16:	50                   	push   %eax
   12b17:	68 6c 9a 01 00       	push   $0x19a6c
   12b1c:	e8 ff 69 00 00       	call   19520 <log_printf>
   12b21:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12b24:	8b 45 08             	mov    0x8(%ebp),%eax
   12b27:	8b 40 18             	mov    0x18(%eax),%eax
   12b2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b30:	8b 78 10             	mov    0x10(%eax),%edi
   12b33:	8b 45 08             	mov    0x8(%ebp),%eax
   12b36:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12b39:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3c:	8b 58 24             	mov    0x24(%eax),%ebx
   12b3f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b42:	8b 48 28             	mov    0x28(%eax),%ecx
   12b45:	8b 45 08             	mov    0x8(%ebp),%eax
   12b48:	8b 50 20             	mov    0x20(%eax),%edx
   12b4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4e:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12b51:	83 ec 0c             	sub    $0xc,%esp
   12b54:	ff 75 e0             	push   -0x20(%ebp)
   12b57:	ff 75 d4             	push   -0x2c(%ebp)
   12b5a:	57                   	push   %edi
   12b5b:	56                   	push   %esi
   12b5c:	53                   	push   %ebx
   12b5d:	51                   	push   %ecx
   12b5e:	52                   	push   %edx
   12b5f:	50                   	push   %eax
   12b60:	68 a4 9a 01 00       	push   $0x19aa4
   12b65:	e8 b6 69 00 00       	call   19520 <log_printf>
   12b6a:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b70:	8b 50 40             	mov    0x40(%eax),%edx
   12b73:	8b 45 08             	mov    0x8(%ebp),%eax
   12b76:	8b 40 38             	mov    0x38(%eax),%eax
   12b79:	83 ec 04             	sub    $0x4,%esp
   12b7c:	52                   	push   %edx
   12b7d:	50                   	push   %eax
   12b7e:	68 fd 9a 01 00       	push   $0x19afd
   12b83:	e8 98 69 00 00       	call   19520 <log_printf>
   12b88:	83 c4 10             	add    $0x10,%esp
}
   12b8b:	90                   	nop
   12b8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12b8f:	5b                   	pop    %ebx
   12b90:	5e                   	pop    %esi
   12b91:	5f                   	pop    %edi
   12b92:	5d                   	pop    %ebp
   12b93:	c3                   	ret    

00012b94 <exit_excption_handler>:
/**
 * @brief 进程退出异常处理
 * 
 * @param frame 
 */
static void exit_excption_handler(const exception_frame_t *frame) {
   12b94:	55                   	push   %ebp
   12b95:	89 e5                	mov    %esp,%ebp
   12b97:	83 ec 08             	sub    $0x8,%esp
  if (frame->cs & 0x3) {  //用户进程异常，直接退出用户进程
   12b9a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9d:	8b 40 3c             	mov    0x3c(%eax),%eax
   12ba0:	83 e0 03             	and    $0x3,%eax
   12ba3:	85 c0                	test   %eax,%eax
   12ba5:	74 14                	je     12bbb <exit_excption_handler+0x27>
        sys_exit(frame->error_code);
   12ba7:	8b 45 08             	mov    0x8(%ebp),%eax
   12baa:	8b 40 34             	mov    0x34(%eax),%eax
   12bad:	83 ec 0c             	sub    $0xc,%esp
   12bb0:	50                   	push   %eax
   12bb1:	e8 71 f9 ff ff       	call   12527 <sys_exit>
   12bb6:	83 c4 10             	add    $0x10,%esp
  } else {  //内核异常直接死机
      for (;;) {
          hlt();
      }
  }
}
   12bb9:	eb 07                	jmp    12bc2 <exit_excption_handler+0x2e>
          hlt();
   12bbb:	e8 2c fe ff ff       	call   129ec <hlt>
   12bc0:	eb f9                	jmp    12bbb <exit_excption_handler+0x27>
}
   12bc2:	c9                   	leave  
   12bc3:	c3                   	ret    

00012bc4 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12bc4:	55                   	push   %ebp
   12bc5:	89 e5                	mov    %esp,%ebp
   12bc7:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12bca:	83 ec 0c             	sub    $0xc,%esp
   12bcd:	68 18 9b 01 00       	push   $0x19b18
   12bd2:	e8 49 69 00 00       	call   19520 <log_printf>
   12bd7:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12bda:	83 ec 08             	sub    $0x8,%esp
   12bdd:	ff 75 0c             	push   0xc(%ebp)
   12be0:	68 4d 9b 01 00       	push   $0x19b4d
   12be5:	e8 36 69 00 00       	call   19520 <log_printf>
   12bea:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12bed:	83 ec 0c             	sub    $0xc,%esp
   12bf0:	ff 75 08             	push   0x8(%ebp)
   12bf3:	e8 8d fe ff ff       	call   12a85 <print_exception_fram>
   12bf8:	83 c4 10             	add    $0x10,%esp
                              
  
  exit_excption_handler(frame);
   12bfb:	83 ec 0c             	sub    $0xc,%esp
   12bfe:	ff 75 08             	push   0x8(%ebp)
   12c01:	e8 8e ff ff ff       	call   12b94 <exit_excption_handler>
   12c06:	83 c4 10             	add    $0x10,%esp
}
   12c09:	90                   	nop
   12c0a:	c9                   	leave  
   12c0b:	c3                   	ret    

00012c0c <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12c0c:	55                   	push   %ebp
   12c0d:	89 e5                	mov    %esp,%ebp
   12c0f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12c12:	83 ec 08             	sub    $0x8,%esp
   12c15:	68 68 9b 01 00       	push   $0x19b68
   12c1a:	ff 75 08             	push   0x8(%ebp)
   12c1d:	e8 a2 ff ff ff       	call   12bc4 <do_default_handler>
   12c22:	83 c4 10             	add    $0x10,%esp
}
   12c25:	90                   	nop
   12c26:	c9                   	leave  
   12c27:	c3                   	ret    

00012c28 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12c28:	55                   	push   %ebp
   12c29:	89 e5                	mov    %esp,%ebp
   12c2b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12c2e:	83 ec 08             	sub    $0x8,%esp
   12c31:	68 7a 9b 01 00       	push   $0x19b7a
   12c36:	ff 75 08             	push   0x8(%ebp)
   12c39:	e8 86 ff ff ff       	call   12bc4 <do_default_handler>
   12c3e:	83 c4 10             	add    $0x10,%esp
}
   12c41:	90                   	nop
   12c42:	c9                   	leave  
   12c43:	c3                   	ret    

00012c44 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12c44:	55                   	push   %ebp
   12c45:	89 e5                	mov    %esp,%ebp
   12c47:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12c4a:	83 ec 08             	sub    $0x8,%esp
   12c4d:	68 8c 9b 01 00       	push   $0x19b8c
   12c52:	ff 75 08             	push   0x8(%ebp)
   12c55:	e8 6a ff ff ff       	call   12bc4 <do_default_handler>
   12c5a:	83 c4 10             	add    $0x10,%esp
}
   12c5d:	90                   	nop
   12c5e:	c9                   	leave  
   12c5f:	c3                   	ret    

00012c60 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12c60:	55                   	push   %ebp
   12c61:	89 e5                	mov    %esp,%ebp
   12c63:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12c66:	83 ec 08             	sub    $0x8,%esp
   12c69:	68 9c 9b 01 00       	push   $0x19b9c
   12c6e:	ff 75 08             	push   0x8(%ebp)
   12c71:	e8 4e ff ff ff       	call   12bc4 <do_default_handler>
   12c76:	83 c4 10             	add    $0x10,%esp
}
   12c79:	90                   	nop
   12c7a:	c9                   	leave  
   12c7b:	c3                   	ret    

00012c7c <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12c7c:	55                   	push   %ebp
   12c7d:	89 e5                	mov    %esp,%ebp
   12c7f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12c82:	83 ec 08             	sub    $0x8,%esp
   12c85:	68 aa 9b 01 00       	push   $0x19baa
   12c8a:	ff 75 08             	push   0x8(%ebp)
   12c8d:	e8 32 ff ff ff       	call   12bc4 <do_default_handler>
   12c92:	83 c4 10             	add    $0x10,%esp
}
   12c95:	90                   	nop
   12c96:	c9                   	leave  
   12c97:	c3                   	ret    

00012c98 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12c98:	55                   	push   %ebp
   12c99:	89 e5                	mov    %esp,%ebp
   12c9b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12c9e:	83 ec 08             	sub    $0x8,%esp
   12ca1:	68 bf 9b 01 00       	push   $0x19bbf
   12ca6:	ff 75 08             	push   0x8(%ebp)
   12ca9:	e8 16 ff ff ff       	call   12bc4 <do_default_handler>
   12cae:	83 c4 10             	add    $0x10,%esp
}
   12cb1:	90                   	nop
   12cb2:	c9                   	leave  
   12cb3:	c3                   	ret    

00012cb4 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12cb4:	55                   	push   %ebp
   12cb5:	89 e5                	mov    %esp,%ebp
   12cb7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12cba:	83 ec 08             	sub    $0x8,%esp
   12cbd:	68 d2 9b 01 00       	push   $0x19bd2
   12cc2:	ff 75 08             	push   0x8(%ebp)
   12cc5:	e8 fa fe ff ff       	call   12bc4 <do_default_handler>
   12cca:	83 c4 10             	add    $0x10,%esp
}
   12ccd:	90                   	nop
   12cce:	c9                   	leave  
   12ccf:	c3                   	ret    

00012cd0 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12cd0:	55                   	push   %ebp
   12cd1:	89 e5                	mov    %esp,%ebp
   12cd3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12cd6:	83 ec 08             	sub    $0x8,%esp
   12cd9:	68 e8 9b 01 00       	push   $0x19be8
   12cde:	ff 75 08             	push   0x8(%ebp)
   12ce1:	e8 de fe ff ff       	call   12bc4 <do_default_handler>
   12ce6:	83 c4 10             	add    $0x10,%esp
}
   12ce9:	90                   	nop
   12cea:	c9                   	leave  
   12ceb:	c3                   	ret    

00012cec <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12cec:	55                   	push   %ebp
   12ced:	89 e5                	mov    %esp,%ebp
   12cef:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12cf2:	83 ec 08             	sub    $0x8,%esp
   12cf5:	68 01 9c 01 00       	push   $0x19c01
   12cfa:	ff 75 08             	push   0x8(%ebp)
   12cfd:	e8 c2 fe ff ff       	call   12bc4 <do_default_handler>
   12d02:	83 c4 10             	add    $0x10,%esp
}
   12d05:	90                   	nop
   12d06:	c9                   	leave  
   12d07:	c3                   	ret    

00012d08 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12d08:	55                   	push   %ebp
   12d09:	89 e5                	mov    %esp,%ebp
   12d0b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12d0e:	83 ec 08             	sub    $0x8,%esp
   12d11:	68 1e 9c 01 00       	push   $0x19c1e
   12d16:	ff 75 08             	push   0x8(%ebp)
   12d19:	e8 a6 fe ff ff       	call   12bc4 <do_default_handler>
   12d1e:	83 c4 10             	add    $0x10,%esp
}
   12d21:	90                   	nop
   12d22:	c9                   	leave  
   12d23:	c3                   	ret    

00012d24 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12d24:	55                   	push   %ebp
   12d25:	89 e5                	mov    %esp,%ebp
   12d27:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12d2a:	83 ec 08             	sub    $0x8,%esp
   12d2d:	68 35 9c 01 00       	push   $0x19c35
   12d32:	ff 75 08             	push   0x8(%ebp)
   12d35:	e8 8a fe ff ff       	call   12bc4 <do_default_handler>
   12d3a:	83 c4 10             	add    $0x10,%esp
}
   12d3d:	90                   	nop
   12d3e:	c9                   	leave  
   12d3f:	c3                   	ret    

00012d40 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12d40:	55                   	push   %ebp
   12d41:	89 e5                	mov    %esp,%ebp
   12d43:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12d46:	83 ec 08             	sub    $0x8,%esp
   12d49:	68 4b 9c 01 00       	push   $0x19c4b
   12d4e:	ff 75 08             	push   0x8(%ebp)
   12d51:	e8 6e fe ff ff       	call   12bc4 <do_default_handler>
   12d56:	83 c4 10             	add    $0x10,%esp
}
   12d59:	90                   	nop
   12d5a:	c9                   	leave  
   12d5b:	c3                   	ret    

00012d5c <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12d5c:	55                   	push   %ebp
   12d5d:	89 e5                	mov    %esp,%ebp
   12d5f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12d62:	83 ec 08             	sub    $0x8,%esp
   12d65:	68 69 9c 01 00       	push   $0x19c69
   12d6a:	ff 75 08             	push   0x8(%ebp)
   12d6d:	e8 52 fe ff ff       	call   12bc4 <do_default_handler>
   12d72:	83 c4 10             	add    $0x10,%esp
}
   12d75:	90                   	nop
   12d76:	c9                   	leave  
   12d77:	c3                   	ret    

00012d78 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12d78:	55                   	push   %ebp
   12d79:	89 e5                	mov    %esp,%ebp
   12d7b:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12d7e:	83 ec 0c             	sub    $0xc,%esp
   12d81:	68 88 9c 01 00       	push   $0x19c88
   12d86:	e8 95 67 00 00       	call   19520 <log_printf>
   12d8b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12d8e:	83 ec 0c             	sub    $0xc,%esp
   12d91:	68 ac 9c 01 00       	push   $0x19cac
   12d96:	e8 85 67 00 00       	call   19520 <log_printf>
   12d9b:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12d9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12da1:	8b 40 34             	mov    0x34(%eax),%eax
   12da4:	83 e0 01             	and    $0x1,%eax
   12da7:	85 c0                	test   %eax,%eax
   12da9:	74 12                	je     12dbd <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12dab:	83 ec 0c             	sub    $0xc,%esp
   12dae:	68 d8 9c 01 00       	push   $0x19cd8
   12db3:	e8 68 67 00 00       	call   19520 <log_printf>
   12db8:	83 c4 10             	add    $0x10,%esp
   12dbb:	eb 10                	jmp    12dcd <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12dbd:	83 ec 0c             	sub    $0xc,%esp
   12dc0:	68 54 9d 01 00       	push   $0x19d54
   12dc5:	e8 56 67 00 00       	call   19520 <log_printf>
   12dca:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12dcd:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd0:	8b 40 34             	mov    0x34(%eax),%eax
   12dd3:	83 e0 02             	and    $0x2,%eax
   12dd6:	85 c0                	test   %eax,%eax
   12dd8:	74 12                	je     12dec <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12dda:	83 ec 0c             	sub    $0xc,%esp
   12ddd:	68 ac 9d 01 00       	push   $0x19dac
   12de2:	e8 39 67 00 00       	call   19520 <log_printf>
   12de7:	83 c4 10             	add    $0x10,%esp
   12dea:	eb 10                	jmp    12dfc <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12dec:	83 ec 0c             	sub    $0xc,%esp
   12def:	68 f8 9d 01 00       	push   $0x19df8
   12df4:	e8 27 67 00 00       	call   19520 <log_printf>
   12df9:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12dfc:	8b 45 08             	mov    0x8(%ebp),%eax
   12dff:	8b 40 34             	mov    0x34(%eax),%eax
   12e02:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12e07:	83 ec 08             	sub    $0x8,%esp
   12e0a:	50                   	push   %eax
   12e0b:	68 25 9e 01 00       	push   $0x19e25
   12e10:	e8 0b 67 00 00       	call   19520 <log_printf>
   12e15:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12e18:	83 ec 0c             	sub    $0xc,%esp
   12e1b:	ff 75 08             	push   0x8(%ebp)
   12e1e:	e8 62 fc ff ff       	call   12a85 <print_exception_fram>
   12e23:	83 c4 10             	add    $0x10,%esp

    //进程退出异常
    exit_excption_handler(frame);
   12e26:	83 ec 0c             	sub    $0xc,%esp
   12e29:	ff 75 08             	push   0x8(%ebp)
   12e2c:	e8 63 fd ff ff       	call   12b94 <exit_excption_handler>
   12e31:	83 c4 10             	add    $0x10,%esp
}
   12e34:	90                   	nop
   12e35:	c9                   	leave  
   12e36:	c3                   	ret    

00012e37 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12e37:	55                   	push   %ebp
   12e38:	89 e5                	mov    %esp,%ebp
   12e3a:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12e3d:	83 ec 0c             	sub    $0xc,%esp
   12e40:	68 88 9c 01 00       	push   $0x19c88
   12e45:	e8 d6 66 00 00       	call   19520 <log_printf>
   12e4a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12e4d:	83 ec 0c             	sub    $0xc,%esp
   12e50:	68 38 9e 01 00       	push   $0x19e38
   12e55:	e8 c6 66 00 00       	call   19520 <log_printf>
   12e5a:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12e5d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e60:	8b 40 34             	mov    0x34(%eax),%eax
   12e63:	83 e0 01             	and    $0x1,%eax
   12e66:	85 c0                	test   %eax,%eax
   12e68:	74 18                	je     12e82 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12e6a:	e8 ea fb ff ff       	call   12a59 <read_cr2>
   12e6f:	83 ec 08             	sub    $0x8,%esp
   12e72:	50                   	push   %eax
   12e73:	68 5c 9e 01 00       	push   $0x19e5c
   12e78:	e8 a3 66 00 00       	call   19520 <log_printf>
   12e7d:	83 c4 10             	add    $0x10,%esp
   12e80:	eb 16                	jmp    12e98 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12e82:	e8 d2 fb ff ff       	call   12a59 <read_cr2>
   12e87:	83 ec 08             	sub    $0x8,%esp
   12e8a:	50                   	push   %eax
   12e8b:	68 84 9e 01 00       	push   $0x19e84
   12e90:	e8 8b 66 00 00       	call   19520 <log_printf>
   12e95:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12e98:	8b 45 08             	mov    0x8(%ebp),%eax
   12e9b:	8b 40 34             	mov    0x34(%eax),%eax
   12e9e:	83 e0 02             	and    $0x2,%eax
   12ea1:	85 c0                	test   %eax,%eax
   12ea3:	74 12                	je     12eb7 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12ea5:	83 ec 0c             	sub    $0xc,%esp
   12ea8:	68 a0 9e 01 00       	push   $0x19ea0
   12ead:	e8 6e 66 00 00       	call   19520 <log_printf>
   12eb2:	83 c4 10             	add    $0x10,%esp
   12eb5:	eb 10                	jmp    12ec7 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12eb7:	83 ec 0c             	sub    $0xc,%esp
   12eba:	68 cc 9e 01 00       	push   $0x19ecc
   12ebf:	e8 5c 66 00 00       	call   19520 <log_printf>
   12ec4:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12ec7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eca:	8b 40 34             	mov    0x34(%eax),%eax
   12ecd:	83 e0 04             	and    $0x4,%eax
   12ed0:	85 c0                	test   %eax,%eax
   12ed2:	74 12                	je     12ee6 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12ed4:	83 ec 0c             	sub    $0xc,%esp
   12ed7:	68 f8 9e 01 00       	push   $0x19ef8
   12edc:	e8 3f 66 00 00       	call   19520 <log_printf>
   12ee1:	83 c4 10             	add    $0x10,%esp
   12ee4:	eb 10                	jmp    12ef6 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12ee6:	83 ec 0c             	sub    $0xc,%esp
   12ee9:	68 20 9f 01 00       	push   $0x19f20
   12eee:	e8 2d 66 00 00       	call   19520 <log_printf>
   12ef3:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12ef6:	83 ec 0c             	sub    $0xc,%esp
   12ef9:	ff 75 08             	push   0x8(%ebp)
   12efc:	e8 84 fb ff ff       	call   12a85 <print_exception_fram>
   12f01:	83 c4 10             	add    $0x10,%esp
  
    //进程退出异常
    exit_excption_handler(frame);
   12f04:	83 ec 0c             	sub    $0xc,%esp
   12f07:	ff 75 08             	push   0x8(%ebp)
   12f0a:	e8 85 fc ff ff       	call   12b94 <exit_excption_handler>
   12f0f:	83 c4 10             	add    $0x10,%esp
}
   12f12:	90                   	nop
   12f13:	c9                   	leave  
   12f14:	c3                   	ret    

00012f15 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12f15:	55                   	push   %ebp
   12f16:	89 e5                	mov    %esp,%ebp
   12f18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12f1b:	83 ec 08             	sub    $0x8,%esp
   12f1e:	68 4c 9f 01 00       	push   $0x19f4c
   12f23:	ff 75 08             	push   0x8(%ebp)
   12f26:	e8 99 fc ff ff       	call   12bc4 <do_default_handler>
   12f2b:	83 c4 10             	add    $0x10,%esp
}
   12f2e:	90                   	nop
   12f2f:	c9                   	leave  
   12f30:	c3                   	ret    

00012f31 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12f31:	55                   	push   %ebp
   12f32:	89 e5                	mov    %esp,%ebp
   12f34:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12f37:	83 ec 08             	sub    $0x8,%esp
   12f3a:	68 61 9f 01 00       	push   $0x19f61
   12f3f:	ff 75 08             	push   0x8(%ebp)
   12f42:	e8 7d fc ff ff       	call   12bc4 <do_default_handler>
   12f47:	83 c4 10             	add    $0x10,%esp
}
   12f4a:	90                   	nop
   12f4b:	c9                   	leave  
   12f4c:	c3                   	ret    

00012f4d <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12f4d:	55                   	push   %ebp
   12f4e:	89 e5                	mov    %esp,%ebp
   12f50:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12f53:	83 ec 08             	sub    $0x8,%esp
   12f56:	68 7c 9f 01 00       	push   $0x19f7c
   12f5b:	ff 75 08             	push   0x8(%ebp)
   12f5e:	e8 61 fc ff ff       	call   12bc4 <do_default_handler>
   12f63:	83 c4 10             	add    $0x10,%esp
}
   12f66:	90                   	nop
   12f67:	c9                   	leave  
   12f68:	c3                   	ret    

00012f69 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12f69:	55                   	push   %ebp
   12f6a:	89 e5                	mov    %esp,%ebp
   12f6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12f6f:	83 ec 08             	sub    $0x8,%esp
   12f72:	68 95 9f 01 00       	push   $0x19f95
   12f77:	ff 75 08             	push   0x8(%ebp)
   12f7a:	e8 45 fc ff ff       	call   12bc4 <do_default_handler>
   12f7f:	83 c4 10             	add    $0x10,%esp
}
   12f82:	90                   	nop
   12f83:	c9                   	leave  
   12f84:	c3                   	ret    

00012f85 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12f85:	55                   	push   %ebp
   12f86:	89 e5                	mov    %esp,%ebp
   12f88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12f8b:	83 ec 08             	sub    $0x8,%esp
   12f8e:	68 ae 9f 01 00       	push   $0x19fae
   12f93:	ff 75 08             	push   0x8(%ebp)
   12f96:	e8 29 fc ff ff       	call   12bc4 <do_default_handler>
   12f9b:	83 c4 10             	add    $0x10,%esp
}
   12f9e:	90                   	nop
   12f9f:	c9                   	leave  
   12fa0:	c3                   	ret    

00012fa1 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12fa1:	55                   	push   %ebp
   12fa2:	89 e5                	mov    %esp,%ebp
   12fa4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12fa7:	83 ec 08             	sub    $0x8,%esp
   12faa:	68 cb 9f 01 00       	push   $0x19fcb
   12faf:	ff 75 08             	push   0x8(%ebp)
   12fb2:	e8 0d fc ff ff       	call   12bc4 <do_default_handler>
   12fb7:	83 c4 10             	add    $0x10,%esp
}
   12fba:	90                   	nop
   12fbb:	c9                   	leave  
   12fbc:	c3                   	ret    

00012fbd <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12fbd:	55                   	push   %ebp
   12fbe:	89 e5                	mov    %esp,%ebp
   12fc0:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12fc3:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12fca:	7f 06                	jg     12fd2 <idt_install+0x15>
   12fcc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12fd0:	79 07                	jns    12fd9 <idt_install+0x1c>
   12fd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fd7:	eb 25                	jmp    12ffe <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fdc:	8b 55 08             	mov    0x8(%ebp),%edx
   12fdf:	c1 e2 03             	shl    $0x3,%edx
   12fe2:	81 c2 00 dc 04 00    	add    $0x4dc00,%edx
   12fe8:	68 00 8e 00 00       	push   $0x8e00
   12fed:	50                   	push   %eax
   12fee:	6a 08                	push   $0x8
   12ff0:	52                   	push   %edx
   12ff1:	e8 6b f7 ff ff       	call   12761 <gate_desc_set>
   12ff6:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12ff9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12ffe:	c9                   	leave  
   12fff:	c3                   	ret    

00013000 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   13000:	55                   	push   %ebp
   13001:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   13003:	6a 11                	push   $0x11
   13005:	6a 20                	push   $0x20
   13007:	e8 04 fa ff ff       	call   12a10 <outb>
   1300c:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   1300f:	6a 20                	push   $0x20
   13011:	6a 21                	push   $0x21
   13013:	e8 f8 f9 ff ff       	call   12a10 <outb>
   13018:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   1301b:	6a 04                	push   $0x4
   1301d:	6a 21                	push   $0x21
   1301f:	e8 ec f9 ff ff       	call   12a10 <outb>
   13024:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   13027:	6a 01                	push   $0x1
   13029:	6a 21                	push   $0x21
   1302b:	e8 e0 f9 ff ff       	call   12a10 <outb>
   13030:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   13033:	6a 11                	push   $0x11
   13035:	68 a0 00 00 00       	push   $0xa0
   1303a:	e8 d1 f9 ff ff       	call   12a10 <outb>
   1303f:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   13042:	6a 28                	push   $0x28
   13044:	68 a1 00 00 00       	push   $0xa1
   13049:	e8 c2 f9 ff ff       	call   12a10 <outb>
   1304e:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   13051:	6a 02                	push   $0x2
   13053:	68 a1 00 00 00       	push   $0xa1
   13058:	e8 b3 f9 ff ff       	call   12a10 <outb>
   1305d:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   13060:	6a 01                	push   $0x1
   13062:	68 a1 00 00 00       	push   $0xa1
   13067:	e8 a4 f9 ff ff       	call   12a10 <outb>
   1306c:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   1306f:	68 fb 00 00 00       	push   $0xfb
   13074:	6a 21                	push   $0x21
   13076:	e8 95 f9 ff ff       	call   12a10 <outb>
   1307b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   1307e:	68 ff 00 00 00       	push   $0xff
   13083:	68 a1 00 00 00       	push   $0xa1
   13088:	e8 83 f9 ff ff       	call   12a10 <outb>
   1308d:	83 c4 08             	add    $0x8,%esp


}
   13090:	90                   	nop
   13091:	c9                   	leave  
   13092:	c3                   	ret    

00013093 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   13093:	55                   	push   %ebp
   13094:	89 e5                	mov    %esp,%ebp
   13096:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   13099:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   130a0:	eb 17                	jmp    130b9 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   130a2:	83 ec 08             	sub    $0x8,%esp
   130a5:	68 2a 00 01 00       	push   $0x1002a
   130aa:	ff 75 f4             	push   -0xc(%ebp)
   130ad:	e8 0b ff ff ff       	call   12fbd <idt_install>
   130b2:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   130b5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   130b9:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   130c0:	7e e0                	jle    130a2 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   130c2:	83 ec 08             	sub    $0x8,%esp
   130c5:	68 47 00 01 00       	push   $0x10047
   130ca:	6a 00                	push   $0x0
   130cc:	e8 ec fe ff ff       	call   12fbd <idt_install>
   130d1:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   130d4:	83 ec 08             	sub    $0x8,%esp
   130d7:	68 64 00 01 00       	push   $0x10064
   130dc:	6a 01                	push   $0x1
   130de:	e8 da fe ff ff       	call   12fbd <idt_install>
   130e3:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   130e6:	83 ec 08             	sub    $0x8,%esp
   130e9:	68 81 00 01 00       	push   $0x10081
   130ee:	6a 02                	push   $0x2
   130f0:	e8 c8 fe ff ff       	call   12fbd <idt_install>
   130f5:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   130f8:	83 ec 08             	sub    $0x8,%esp
   130fb:	68 9e 00 01 00       	push   $0x1009e
   13100:	6a 03                	push   $0x3
   13102:	e8 b6 fe ff ff       	call   12fbd <idt_install>
   13107:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1310a:	83 ec 08             	sub    $0x8,%esp
   1310d:	68 bb 00 01 00       	push   $0x100bb
   13112:	6a 04                	push   $0x4
   13114:	e8 a4 fe ff ff       	call   12fbd <idt_install>
   13119:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   1311c:	83 ec 08             	sub    $0x8,%esp
   1311f:	68 d8 00 01 00       	push   $0x100d8
   13124:	6a 05                	push   $0x5
   13126:	e8 92 fe ff ff       	call   12fbd <idt_install>
   1312b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   1312e:	83 ec 08             	sub    $0x8,%esp
   13131:	68 f5 00 01 00       	push   $0x100f5
   13136:	6a 06                	push   $0x6
   13138:	e8 80 fe ff ff       	call   12fbd <idt_install>
   1313d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   13140:	83 ec 08             	sub    $0x8,%esp
   13143:	68 12 01 01 00       	push   $0x10112
   13148:	6a 07                	push   $0x7
   1314a:	e8 6e fe ff ff       	call   12fbd <idt_install>
   1314f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   13152:	83 ec 08             	sub    $0x8,%esp
   13155:	68 2f 01 01 00       	push   $0x1012f
   1315a:	6a 08                	push   $0x8
   1315c:	e8 5c fe ff ff       	call   12fbd <idt_install>
   13161:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   13164:	83 ec 08             	sub    $0x8,%esp
   13167:	68 4a 01 01 00       	push   $0x1014a
   1316c:	6a 0a                	push   $0xa
   1316e:	e8 4a fe ff ff       	call   12fbd <idt_install>
   13173:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   13176:	83 ec 08             	sub    $0x8,%esp
   13179:	68 65 01 01 00       	push   $0x10165
   1317e:	6a 0b                	push   $0xb
   13180:	e8 38 fe ff ff       	call   12fbd <idt_install>
   13185:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   13188:	83 ec 08             	sub    $0x8,%esp
   1318b:	68 80 01 01 00       	push   $0x10180
   13190:	6a 0c                	push   $0xc
   13192:	e8 26 fe ff ff       	call   12fbd <idt_install>
   13197:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1319a:	83 ec 08             	sub    $0x8,%esp
   1319d:	68 9b 01 01 00       	push   $0x1019b
   131a2:	6a 0d                	push   $0xd
   131a4:	e8 14 fe ff ff       	call   12fbd <idt_install>
   131a9:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   131ac:	83 ec 08             	sub    $0x8,%esp
   131af:	68 b6 01 01 00       	push   $0x101b6
   131b4:	6a 0e                	push   $0xe
   131b6:	e8 02 fe ff ff       	call   12fbd <idt_install>
   131bb:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   131be:	83 ec 08             	sub    $0x8,%esp
   131c1:	68 d1 01 01 00       	push   $0x101d1
   131c6:	6a 10                	push   $0x10
   131c8:	e8 f0 fd ff ff       	call   12fbd <idt_install>
   131cd:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   131d0:	83 ec 08             	sub    $0x8,%esp
   131d3:	68 ee 01 01 00       	push   $0x101ee
   131d8:	6a 11                	push   $0x11
   131da:	e8 de fd ff ff       	call   12fbd <idt_install>
   131df:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   131e2:	83 ec 08             	sub    $0x8,%esp
   131e5:	68 09 02 01 00       	push   $0x10209
   131ea:	6a 12                	push   $0x12
   131ec:	e8 cc fd ff ff       	call   12fbd <idt_install>
   131f1:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   131f4:	83 ec 08             	sub    $0x8,%esp
   131f7:	68 26 02 01 00       	push   $0x10226
   131fc:	6a 13                	push   $0x13
   131fe:	e8 ba fd ff ff       	call   12fbd <idt_install>
   13203:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   13206:	83 ec 08             	sub    $0x8,%esp
   13209:	68 43 02 01 00       	push   $0x10243
   1320e:	6a 14                	push   $0x14
   13210:	e8 a8 fd ff ff       	call   12fbd <idt_install>
   13215:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   13218:	83 ec 08             	sub    $0x8,%esp
   1321b:	68 60 02 01 00       	push   $0x10260
   13220:	6a 15                	push   $0x15
   13222:	e8 96 fd ff ff       	call   12fbd <idt_install>
   13227:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1322a:	b8 00 dc 04 00       	mov    $0x4dc00,%eax
   1322f:	83 ec 08             	sub    $0x8,%esp
   13232:	68 00 08 00 00       	push   $0x800
   13237:	50                   	push   %eax
   13238:	e8 f4 f7 ff ff       	call   12a31 <lidt>
   1323d:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   13240:	e8 bb fd ff ff       	call   13000 <init_pic>
}
   13245:	90                   	nop
   13246:	c9                   	leave  
   13247:	c3                   	ret    

00013248 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   13248:	55                   	push   %ebp
   13249:	89 e5                	mov    %esp,%ebp
   1324b:	53                   	push   %ebx
   1324c:	83 ec 14             	sub    $0x14,%esp
   1324f:	8b 45 08             	mov    0x8(%ebp),%eax
   13252:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   13255:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   13259:	76 7f                	jbe    132da <idt_enable+0x92>
   1325b:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   1325f:	77 79                	ja     132da <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   13261:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   13265:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   13269:	77 33                	ja     1329e <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1326b:	6a 21                	push   $0x21
   1326d:	e8 81 f7 ff ff       	call   129f3 <inb>
   13272:	83 c4 04             	add    $0x4,%esp
   13275:	89 c3                	mov    %eax,%ebx
   13277:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1327b:	ba 01 00 00 00       	mov    $0x1,%edx
   13280:	89 c1                	mov    %eax,%ecx
   13282:	d3 e2                	shl    %cl,%edx
   13284:	89 d0                	mov    %edx,%eax
   13286:	f7 d0                	not    %eax
   13288:	21 d8                	and    %ebx,%eax
   1328a:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1328d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13291:	50                   	push   %eax
   13292:	6a 21                	push   $0x21
   13294:	e8 77 f7 ff ff       	call   12a10 <outb>
   13299:	83 c4 08             	add    $0x8,%esp
   1329c:	eb 3d                	jmp    132db <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1329e:	68 a1 00 00 00       	push   $0xa1
   132a3:	e8 4b f7 ff ff       	call   129f3 <inb>
   132a8:	83 c4 04             	add    $0x4,%esp
   132ab:	89 c3                	mov    %eax,%ebx
   132ad:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   132b1:	83 e8 08             	sub    $0x8,%eax
   132b4:	ba 01 00 00 00       	mov    $0x1,%edx
   132b9:	89 c1                	mov    %eax,%ecx
   132bb:	d3 e2                	shl    %cl,%edx
   132bd:	89 d0                	mov    %edx,%eax
   132bf:	f7 d0                	not    %eax
   132c1:	21 d8                	and    %ebx,%eax
   132c3:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   132c6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   132ca:	50                   	push   %eax
   132cb:	68 a1 00 00 00       	push   $0xa1
   132d0:	e8 3b f7 ff ff       	call   12a10 <outb>
   132d5:	83 c4 08             	add    $0x8,%esp
   132d8:	eb 01                	jmp    132db <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   132da:	90                   	nop
  }
  
}
   132db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   132de:	c9                   	leave  
   132df:	c3                   	ret    

000132e0 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   132e0:	55                   	push   %ebp
   132e1:	89 e5                	mov    %esp,%ebp
   132e3:	53                   	push   %ebx
   132e4:	83 ec 14             	sub    $0x14,%esp
   132e7:	8b 45 08             	mov    0x8(%ebp),%eax
   132ea:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   132ed:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   132f1:	76 7b                	jbe    1336e <idt_disable+0x8e>
   132f3:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   132f7:	77 75                	ja     1336e <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   132f9:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   132fd:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   13301:	77 31                	ja     13334 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   13303:	6a 21                	push   $0x21
   13305:	e8 e9 f6 ff ff       	call   129f3 <inb>
   1330a:	83 c4 04             	add    $0x4,%esp
   1330d:	89 c3                	mov    %eax,%ebx
   1330f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13313:	ba 01 00 00 00       	mov    $0x1,%edx
   13318:	89 c1                	mov    %eax,%ecx
   1331a:	d3 e2                	shl    %cl,%edx
   1331c:	89 d0                	mov    %edx,%eax
   1331e:	09 d8                	or     %ebx,%eax
   13320:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   13323:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13327:	50                   	push   %eax
   13328:	6a 21                	push   $0x21
   1332a:	e8 e1 f6 ff ff       	call   12a10 <outb>
   1332f:	83 c4 08             	add    $0x8,%esp
   13332:	eb 3b                	jmp    1336f <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   13334:	68 a1 00 00 00       	push   $0xa1
   13339:	e8 b5 f6 ff ff       	call   129f3 <inb>
   1333e:	83 c4 04             	add    $0x4,%esp
   13341:	89 c3                	mov    %eax,%ebx
   13343:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13347:	83 e8 08             	sub    $0x8,%eax
   1334a:	ba 01 00 00 00       	mov    $0x1,%edx
   1334f:	89 c1                	mov    %eax,%ecx
   13351:	d3 e2                	shl    %cl,%edx
   13353:	89 d0                	mov    %edx,%eax
   13355:	09 d8                	or     %ebx,%eax
   13357:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1335a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1335e:	50                   	push   %eax
   1335f:	68 a1 00 00 00       	push   $0xa1
   13364:	e8 a7 f6 ff ff       	call   12a10 <outb>
   13369:	83 c4 08             	add    $0x8,%esp
   1336c:	eb 01                	jmp    1336f <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1336e:	90                   	nop
  }
  
}
   1336f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13372:	c9                   	leave  
   13373:	c3                   	ret    

00013374 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   13374:	55                   	push   %ebp
   13375:	89 e5                	mov    %esp,%ebp
  cli();
   13377:	e8 62 f6 ff ff       	call   129de <cli>
}
   1337c:	90                   	nop
   1337d:	5d                   	pop    %ebp
   1337e:	c3                   	ret    

0001337f <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   1337f:	55                   	push   %ebp
   13380:	89 e5                	mov    %esp,%ebp
  sti();
   13382:	e8 5e f6 ff ff       	call   129e5 <sti>
}
   13387:	90                   	nop
   13388:	5d                   	pop    %ebp
   13389:	c3                   	ret    

0001338a <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   1338a:	55                   	push   %ebp
   1338b:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   1338d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   13391:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13395:	78 29                	js     133c0 <pic_send_eoi+0x36>
   13397:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   1339b:	7f 23                	jg     133c0 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   1339d:	6a 20                	push   $0x20
   1339f:	6a 20                	push   $0x20
   133a1:	e8 6a f6 ff ff       	call   12a10 <outb>
   133a6:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   133a9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   133ad:	7e 12                	jle    133c1 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   133af:	6a 20                	push   $0x20
   133b1:	68 a0 00 00 00       	push   $0xa0
   133b6:	e8 55 f6 ff ff       	call   12a10 <outb>
   133bb:	83 c4 08             	add    $0x8,%esp
   133be:	eb 01                	jmp    133c1 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   133c0:	90                   	nop
  }

}
   133c1:	c9                   	leave  
   133c2:	c3                   	ret    

000133c3 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   133c3:	55                   	push   %ebp
   133c4:	89 e5                	mov    %esp,%ebp
   133c6:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   133c9:	e8 9c f6 ff ff       	call   12a6a <read_eflags>
   133ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   133d1:	e8 9e ff ff ff       	call   13374 <idt_disable_global>
  return state;;
   133d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   133d9:	c9                   	leave  
   133da:	c3                   	ret    

000133db <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   133db:	55                   	push   %ebp
   133dc:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   133de:	ff 75 08             	push   0x8(%ebp)
   133e1:	e8 94 f6 ff ff       	call   12a7a <write_eflags>
   133e6:	83 c4 04             	add    $0x4,%esp
}
   133e9:	90                   	nop
   133ea:	c9                   	leave  
   133eb:	c3                   	ret    

000133ec <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   133ec:	55                   	push   %ebp
   133ed:	89 e5                	mov    %esp,%ebp
   133ef:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   133f2:	83 ec 08             	sub    $0x8,%esp
   133f5:	ff 75 0c             	push   0xc(%ebp)
   133f8:	ff 75 08             	push   0x8(%ebp)
   133fb:	e8 20 61 00 00       	call   19520 <log_printf>
   13400:	83 c4 10             	add    $0x10,%esp
}
   13403:	90                   	nop
   13404:	c9                   	leave  
   13405:	c3                   	ret    

00013406 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   13406:	55                   	push   %ebp
   13407:	89 e5                	mov    %esp,%ebp
   13409:	53                   	push   %ebx
   1340a:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   1340d:	8b 45 08             	mov    0x8(%ebp),%eax
   13410:	8b 40 3c             	mov    0x3c(%eax),%eax
   13413:	83 f8 3f             	cmp    $0x3f,%eax
   13416:	77 48                	ja     13460 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   13418:	8b 45 08             	mov    0x8(%ebp),%eax
   1341b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1341e:	8b 04 85 00 a0 01 00 	mov    0x1a000(,%eax,4),%eax
   13425:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   13428:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1342c:	74 32                	je     13460 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   1342e:	8b 45 08             	mov    0x8(%ebp),%eax
   13431:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13434:	8b 45 08             	mov    0x8(%ebp),%eax
   13437:	8b 48 48             	mov    0x48(%eax),%ecx
   1343a:	8b 45 08             	mov    0x8(%ebp),%eax
   1343d:	8b 50 44             	mov    0x44(%eax),%edx
   13440:	8b 45 08             	mov    0x8(%ebp),%eax
   13443:	8b 40 40             	mov    0x40(%eax),%eax
   13446:	53                   	push   %ebx
   13447:	51                   	push   %ecx
   13448:	52                   	push   %edx
   13449:	50                   	push   %eax
   1344a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1344d:	ff d0                	call   *%eax
   1344f:	83 c4 10             	add    $0x10,%esp
   13452:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   13455:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13458:	8b 45 08             	mov    0x8(%ebp),%eax
   1345b:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   1345e:	eb 30                	jmp    13490 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   13460:	e8 4c e5 ff ff       	call   119b1 <task_current>
   13465:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   13468:	8b 45 08             	mov    0x8(%ebp),%eax
   1346b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1346e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13471:	83 c2 24             	add    $0x24,%edx
   13474:	83 ec 04             	sub    $0x4,%esp
   13477:	50                   	push   %eax
   13478:	52                   	push   %edx
   13479:	68 00 a1 01 00       	push   $0x1a100
   1347e:	e8 9d 60 00 00       	call   19520 <log_printf>
   13483:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   13486:	8b 45 08             	mov    0x8(%ebp),%eax
   13489:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   13490:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13493:	c9                   	leave  
   13494:	c3                   	ret    

00013495 <inb>:
static inline uint8_t inb(uint16_t port) {
   13495:	55                   	push   %ebp
   13496:	89 e5                	mov    %esp,%ebp
   13498:	83 ec 14             	sub    $0x14,%esp
   1349b:	8b 45 08             	mov    0x8(%ebp),%eax
   1349e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   134a2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   134a6:	89 c2                	mov    %eax,%edx
   134a8:	ec                   	in     (%dx),%al
   134a9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   134ac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   134b0:	c9                   	leave  
   134b1:	c3                   	ret    

000134b2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   134b2:	55                   	push   %ebp
   134b3:	89 e5                	mov    %esp,%ebp
   134b5:	83 ec 08             	sub    $0x8,%esp
   134b8:	8b 45 08             	mov    0x8(%ebp),%eax
   134bb:	8b 55 0c             	mov    0xc(%ebp),%edx
   134be:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   134c2:	89 d0                	mov    %edx,%eax
   134c4:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   134c7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   134cb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   134cf:	ee                   	out    %al,(%dx)
}
   134d0:	90                   	nop
   134d1:	c9                   	leave  
   134d2:	c3                   	ret    

000134d3 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   134d3:	55                   	push   %ebp
   134d4:	89 e5                	mov    %esp,%ebp
   134d6:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   134d9:	e8 e5 fe ff ff       	call   133c3 <idt_enter_protection>
   134de:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   134e1:	83 ec 08             	sub    $0x8,%esp
   134e4:	6a 0f                	push   $0xf
   134e6:	68 d4 03 00 00       	push   $0x3d4
   134eb:	e8 c2 ff ff ff       	call   134b2 <outb>
   134f0:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   134f3:	83 ec 0c             	sub    $0xc,%esp
   134f6:	68 d5 03 00 00       	push   $0x3d5
   134fb:	e8 95 ff ff ff       	call   13495 <inb>
   13500:	83 c4 10             	add    $0x10,%esp
   13503:	0f b6 c0             	movzbl %al,%eax
   13506:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   13509:	83 ec 08             	sub    $0x8,%esp
   1350c:	6a 0e                	push   $0xe
   1350e:	68 d4 03 00 00       	push   $0x3d4
   13513:	e8 9a ff ff ff       	call   134b2 <outb>
   13518:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   1351b:	83 ec 0c             	sub    $0xc,%esp
   1351e:	68 d5 03 00 00       	push   $0x3d5
   13523:	e8 6d ff ff ff       	call   13495 <inb>
   13528:	83 c4 10             	add    $0x10,%esp
   1352b:	0f b6 c0             	movzbl %al,%eax
   1352e:	c1 e0 08             	shl    $0x8,%eax
   13531:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   13534:	83 ec 0c             	sub    $0xc,%esp
   13537:	ff 75 f4             	push   -0xc(%ebp)
   1353a:	e8 9c fe ff ff       	call   133db <idt_leave_protection>
   1353f:	83 c4 10             	add    $0x10,%esp
  return pos;
   13542:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13545:	c9                   	leave  
   13546:	c3                   	ret    

00013547 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   13547:	55                   	push   %ebp
   13548:	89 e5                	mov    %esp,%ebp
   1354a:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   1354d:	e8 71 fe ff ff       	call   133c3 <idt_enter_protection>
   13552:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   13555:	8b 45 08             	mov    0x8(%ebp),%eax
   13558:	8b 40 10             	mov    0x10(%eax),%eax
   1355b:	89 c2                	mov    %eax,%edx
   1355d:	8b 45 08             	mov    0x8(%ebp),%eax
   13560:	8b 40 0c             	mov    0xc(%eax),%eax
   13563:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   13566:	8b 45 08             	mov    0x8(%ebp),%eax
   13569:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   1356c:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   1356e:	8b 45 08             	mov    0x8(%ebp),%eax
   13571:	8b 40 04             	mov    0x4(%eax),%eax
   13574:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   13579:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   1357b:	01 d0                	add    %edx,%eax
   1357d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13581:	83 ec 08             	sub    $0x8,%esp
   13584:	6a 0f                	push   $0xf
   13586:	68 d4 03 00 00       	push   $0x3d4
   1358b:	e8 22 ff ff ff       	call   134b2 <outb>
   13590:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   13593:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13597:	0f b6 c0             	movzbl %al,%eax
   1359a:	83 ec 08             	sub    $0x8,%esp
   1359d:	50                   	push   %eax
   1359e:	68 d5 03 00 00       	push   $0x3d5
   135a3:	e8 0a ff ff ff       	call   134b2 <outb>
   135a8:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   135ab:	83 ec 08             	sub    $0x8,%esp
   135ae:	6a 0e                	push   $0xe
   135b0:	68 d4 03 00 00       	push   $0x3d4
   135b5:	e8 f8 fe ff ff       	call   134b2 <outb>
   135ba:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   135bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   135c1:	66 c1 e8 08          	shr    $0x8,%ax
   135c5:	0f b6 c0             	movzbl %al,%eax
   135c8:	83 ec 08             	sub    $0x8,%esp
   135cb:	50                   	push   %eax
   135cc:	68 d5 03 00 00       	push   $0x3d5
   135d1:	e8 dc fe ff ff       	call   134b2 <outb>
   135d6:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   135d9:	83 ec 0c             	sub    $0xc,%esp
   135dc:	ff 75 f4             	push   -0xc(%ebp)
   135df:	e8 f7 fd ff ff       	call   133db <idt_leave_protection>
   135e4:	83 c4 10             	add    $0x10,%esp
  return pos;
   135e7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   135eb:	c9                   	leave  
   135ec:	c3                   	ret    

000135ed <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   135ed:	55                   	push   %ebp
   135ee:	89 e5                	mov    %esp,%ebp
   135f0:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   135f3:	8b 45 08             	mov    0x8(%ebp),%eax
   135f6:	8b 48 04             	mov    0x4(%eax),%ecx
   135f9:	8b 45 08             	mov    0x8(%ebp),%eax
   135fc:	8b 50 0c             	mov    0xc(%eax),%edx
   135ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   13602:	0f af c2             	imul   %edx,%eax
   13605:	01 c0                	add    %eax,%eax
   13607:	01 c8                	add    %ecx,%eax
   13609:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   1360c:	8b 45 08             	mov    0x8(%ebp),%eax
   1360f:	8b 48 04             	mov    0x4(%eax),%ecx
   13612:	8b 45 08             	mov    0x8(%ebp),%eax
   13615:	8b 40 0c             	mov    0xc(%eax),%eax
   13618:	8b 55 10             	mov    0x10(%ebp),%edx
   1361b:	83 c2 01             	add    $0x1,%edx
   1361e:	0f af c2             	imul   %edx,%eax
   13621:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   13623:	01 c8                	add    %ecx,%eax
   13625:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   13628:	eb 24                	jmp    1364e <erase_rows+0x61>
    disp_start->c = ' ';
   1362a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1362d:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = COLOR_White;
   13630:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13633:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13637:	83 ca 0f             	or     $0xf,%edx
   1363a:	88 50 01             	mov    %dl,0x1(%eax)
    disp_start->background = COLOR_Black;
   1363d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13640:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13644:	83 e2 8f             	and    $0xffffff8f,%edx
   13647:	88 50 01             	mov    %dl,0x1(%eax)

    disp_start++;
   1364a:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   1364e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13651:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13654:	72 d4                	jb     1362a <erase_rows+0x3d>
  }
}
   13656:	90                   	nop
   13657:	90                   	nop
   13658:	c9                   	leave  
   13659:	c3                   	ret    

0001365a <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   1365a:	55                   	push   %ebp
   1365b:	89 e5                	mov    %esp,%ebp
   1365d:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   13660:	8b 45 08             	mov    0x8(%ebp),%eax
   13663:	8b 40 04             	mov    0x4(%eax),%eax
   13666:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   13669:	8b 45 08             	mov    0x8(%ebp),%eax
   1366c:	8b 48 04             	mov    0x4(%eax),%ecx
   1366f:	8b 45 08             	mov    0x8(%ebp),%eax
   13672:	8b 50 0c             	mov    0xc(%eax),%edx
   13675:	8b 45 0c             	mov    0xc(%ebp),%eax
   13678:	0f af c2             	imul   %edx,%eax
   1367b:	01 c0                	add    %eax,%eax
   1367d:	01 c8                	add    %ecx,%eax
   1367f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   13682:	8b 45 08             	mov    0x8(%ebp),%eax
   13685:	8b 40 08             	mov    0x8(%eax),%eax
   13688:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   1368b:	29 c8                	sub    %ecx,%eax
   1368d:	89 c2                	mov    %eax,%edx
   1368f:	8b 45 08             	mov    0x8(%ebp),%eax
   13692:	8b 40 0c             	mov    0xc(%eax),%eax
   13695:	0f af c2             	imul   %edx,%eax
   13698:	01 c0                	add    %eax,%eax
   1369a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   1369d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   136a0:	83 ec 04             	sub    $0x4,%esp
   136a3:	50                   	push   %eax
   136a4:	ff 75 f0             	push   -0x10(%ebp)
   136a7:	ff 75 f4             	push   -0xc(%ebp)
   136aa:	e8 25 56 00 00       	call   18cd4 <kernel_memcpy>
   136af:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   136b2:	8b 45 08             	mov    0x8(%ebp),%eax
   136b5:	8b 40 08             	mov    0x8(%eax),%eax
   136b8:	83 e8 01             	sub    $0x1,%eax
   136bb:	89 c2                	mov    %eax,%edx
   136bd:	8b 45 08             	mov    0x8(%ebp),%eax
   136c0:	8b 40 08             	mov    0x8(%eax),%eax
   136c3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   136c6:	29 c8                	sub    %ecx,%eax
   136c8:	83 ec 04             	sub    $0x4,%esp
   136cb:	52                   	push   %edx
   136cc:	50                   	push   %eax
   136cd:	ff 75 08             	push   0x8(%ebp)
   136d0:	e8 18 ff ff ff       	call   135ed <erase_rows>
   136d5:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   136d8:	8b 45 08             	mov    0x8(%ebp),%eax
   136db:	8b 40 10             	mov    0x10(%eax),%eax
   136de:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   136e1:	29 c8                	sub    %ecx,%eax
   136e3:	89 c2                	mov    %eax,%edx
   136e5:	8b 45 08             	mov    0x8(%ebp),%eax
   136e8:	89 50 10             	mov    %edx,0x10(%eax)
}
   136eb:	90                   	nop
   136ec:	c9                   	leave  
   136ed:	c3                   	ret    

000136ee <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   136ee:	55                   	push   %ebp
   136ef:	89 e5                	mov    %esp,%ebp
   136f1:	8b 45 08             	mov    0x8(%ebp),%eax
   136f4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   136fb:	90                   	nop
   136fc:	5d                   	pop    %ebp
   136fd:	c3                   	ret    

000136fe <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   136fe:	55                   	push   %ebp
   136ff:	89 e5                	mov    %esp,%ebp
   13701:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   13704:	8b 45 08             	mov    0x8(%ebp),%eax
   13707:	8b 40 10             	mov    0x10(%eax),%eax
   1370a:	8d 50 01             	lea    0x1(%eax),%edx
   1370d:	8b 45 08             	mov    0x8(%ebp),%eax
   13710:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   13713:	8b 45 08             	mov    0x8(%ebp),%eax
   13716:	8b 50 10             	mov    0x10(%eax),%edx
   13719:	8b 45 08             	mov    0x8(%ebp),%eax
   1371c:	8b 40 08             	mov    0x8(%eax),%eax
   1371f:	39 c2                	cmp    %eax,%edx
   13721:	72 10                	jb     13733 <move_to_next_line+0x35>
    scroll_up(console, 1);
   13723:	83 ec 08             	sub    $0x8,%esp
   13726:	6a 01                	push   $0x1
   13728:	ff 75 08             	push   0x8(%ebp)
   1372b:	e8 2a ff ff ff       	call   1365a <scroll_up>
   13730:	83 c4 10             	add    $0x10,%esp
  }
}
   13733:	90                   	nop
   13734:	c9                   	leave  
   13735:	c3                   	ret    

00013736 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   13736:	55                   	push   %ebp
   13737:	89 e5                	mov    %esp,%ebp
   13739:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   1373c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13743:	eb 5c                	jmp    137a1 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   13745:	8b 45 08             	mov    0x8(%ebp),%eax
   13748:	8b 40 14             	mov    0x14(%eax),%eax
   1374b:	8d 50 01             	lea    0x1(%eax),%edx
   1374e:	8b 45 08             	mov    0x8(%ebp),%eax
   13751:	89 50 14             	mov    %edx,0x14(%eax)
   13754:	8b 45 08             	mov    0x8(%ebp),%eax
   13757:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   1375a:	8b 45 08             	mov    0x8(%ebp),%eax
   1375d:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   13760:	39 c2                	cmp    %eax,%edx
   13762:	72 39                	jb     1379d <move_forward+0x67>
      console->cursor_row++;
   13764:	8b 45 08             	mov    0x8(%ebp),%eax
   13767:	8b 40 10             	mov    0x10(%eax),%eax
   1376a:	8d 50 01             	lea    0x1(%eax),%edx
   1376d:	8b 45 08             	mov    0x8(%ebp),%eax
   13770:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   13773:	8b 45 08             	mov    0x8(%ebp),%eax
   13776:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   1377d:	8b 45 08             	mov    0x8(%ebp),%eax
   13780:	8b 50 10             	mov    0x10(%eax),%edx
   13783:	8b 45 08             	mov    0x8(%ebp),%eax
   13786:	8b 40 08             	mov    0x8(%eax),%eax
   13789:	39 c2                	cmp    %eax,%edx
   1378b:	72 10                	jb     1379d <move_forward+0x67>
        scroll_up(console, 1);
   1378d:	83 ec 08             	sub    $0x8,%esp
   13790:	6a 01                	push   $0x1
   13792:	ff 75 08             	push   0x8(%ebp)
   13795:	e8 c0 fe ff ff       	call   1365a <scroll_up>
   1379a:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   1379d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   137a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
   137a7:	7c 9c                	jl     13745 <move_forward+0xf>
      }
    }
  }
}
   137a9:	90                   	nop
   137aa:	90                   	nop
   137ab:	c9                   	leave  
   137ac:	c3                   	ret    

000137ad <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   137ad:	55                   	push   %ebp
   137ae:	89 e5                	mov    %esp,%ebp
   137b0:	83 ec 28             	sub    $0x28,%esp
   137b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   137b6:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   137b9:	8b 45 08             	mov    0x8(%ebp),%eax
   137bc:	8b 48 14             	mov    0x14(%eax),%ecx
   137bf:	8b 45 08             	mov    0x8(%ebp),%eax
   137c2:	8b 50 10             	mov    0x10(%eax),%edx
   137c5:	8b 45 08             	mov    0x8(%ebp),%eax
   137c8:	8b 40 0c             	mov    0xc(%eax),%eax
   137cb:	0f af c2             	imul   %edx,%eax
   137ce:	01 c8                	add    %ecx,%eax
  int offset =
   137d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   137d3:	8b 45 08             	mov    0x8(%ebp),%eax
   137d6:	8b 50 04             	mov    0x4(%eax),%edx
   137d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137dc:	01 c0                	add    %eax,%eax
   137de:	01 d0                	add    %edx,%eax
   137e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   137e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137e6:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   137ea:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   137ec:	8b 45 08             	mov    0x8(%ebp),%eax
   137ef:	8b 40 18             	mov    0x18(%eax),%eax
   137f2:	c1 e0 04             	shl    $0x4,%eax
   137f5:	c0 f8 04             	sar    $0x4,%al
   137f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   137fb:	83 e0 0f             	and    $0xf,%eax
   137fe:	89 c1                	mov    %eax,%ecx
   13800:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13804:	83 e0 f0             	and    $0xfffffff0,%eax
   13807:	09 c8                	or     %ecx,%eax
   13809:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   1380c:	8b 45 08             	mov    0x8(%ebp),%eax
   1380f:	8b 40 1c             	mov    0x1c(%eax),%eax
   13812:	c1 e0 05             	shl    $0x5,%eax
   13815:	c0 f8 05             	sar    $0x5,%al
   13818:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1381b:	83 e0 07             	and    $0x7,%eax
   1381e:	c1 e0 04             	shl    $0x4,%eax
   13821:	89 c1                	mov    %eax,%ecx
   13823:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13827:	83 e0 8f             	and    $0xffffff8f,%eax
   1382a:	09 c8                	or     %ecx,%eax
   1382c:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   1382f:	83 ec 08             	sub    $0x8,%esp
   13832:	6a 01                	push   $0x1
   13834:	ff 75 08             	push   0x8(%ebp)
   13837:	e8 fa fe ff ff       	call   13736 <move_forward>
   1383c:	83 c4 10             	add    $0x10,%esp
}
   1383f:	90                   	nop
   13840:	c9                   	leave  
   13841:	c3                   	ret    

00013842 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   13842:	55                   	push   %ebp
   13843:	89 e5                	mov    %esp,%ebp
   13845:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   13848:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1384f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13856:	eb 55                	jmp    138ad <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   13858:	8b 45 08             	mov    0x8(%ebp),%eax
   1385b:	8b 40 14             	mov    0x14(%eax),%eax
   1385e:	85 c0                	test   %eax,%eax
   13860:	74 18                	je     1387a <move_backword+0x38>
      console->cursor_col--;
   13862:	8b 45 08             	mov    0x8(%ebp),%eax
   13865:	8b 40 14             	mov    0x14(%eax),%eax
   13868:	8d 50 ff             	lea    -0x1(%eax),%edx
   1386b:	8b 45 08             	mov    0x8(%ebp),%eax
   1386e:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13871:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13878:	eb 2f                	jmp    138a9 <move_backword+0x67>
    } else if (console->cursor_row >
   1387a:	8b 45 08             	mov    0x8(%ebp),%eax
   1387d:	8b 40 10             	mov    0x10(%eax),%eax
   13880:	85 c0                	test   %eax,%eax
   13882:	74 25                	je     138a9 <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   13884:	8b 45 08             	mov    0x8(%ebp),%eax
   13887:	8b 40 10             	mov    0x10(%eax),%eax
   1388a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1388d:	8b 45 08             	mov    0x8(%ebp),%eax
   13890:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   13893:	8b 45 08             	mov    0x8(%ebp),%eax
   13896:	8b 40 0c             	mov    0xc(%eax),%eax
   13899:	8d 50 ff             	lea    -0x1(%eax),%edx
   1389c:	8b 45 08             	mov    0x8(%ebp),%eax
   1389f:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   138a2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   138a9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   138ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   138b0:	3b 45 0c             	cmp    0xc(%ebp),%eax
   138b3:	7c a3                	jl     13858 <move_backword+0x16>
    }
  }

  return status;
   138b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   138b8:	c9                   	leave  
   138b9:	c3                   	ret    

000138ba <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   138ba:	55                   	push   %ebp
   138bb:	89 e5                	mov    %esp,%ebp
   138bd:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   138c0:	6a 01                	push   $0x1
   138c2:	ff 75 08             	push   0x8(%ebp)
   138c5:	e8 78 ff ff ff       	call   13842 <move_backword>
   138ca:	83 c4 08             	add    $0x8,%esp
   138cd:	85 c0                	test   %eax,%eax
   138cf:	75 20                	jne    138f1 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   138d1:	83 ec 08             	sub    $0x8,%esp
   138d4:	6a 20                	push   $0x20
   138d6:	ff 75 08             	push   0x8(%ebp)
   138d9:	e8 cf fe ff ff       	call   137ad <show_char>
   138de:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   138e1:	83 ec 08             	sub    $0x8,%esp
   138e4:	6a 01                	push   $0x1
   138e6:	ff 75 08             	push   0x8(%ebp)
   138e9:	e8 54 ff ff ff       	call   13842 <move_backword>
   138ee:	83 c4 10             	add    $0x10,%esp
  }
}
   138f1:	90                   	nop
   138f2:	c9                   	leave  
   138f3:	c3                   	ret    

000138f4 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   138f4:	55                   	push   %ebp
   138f5:	89 e5                	mov    %esp,%ebp
   138f7:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   138fa:	8b 45 08             	mov    0x8(%ebp),%eax
   138fd:	8b 50 0c             	mov    0xc(%eax),%edx
   13900:	8b 45 08             	mov    0x8(%ebp),%eax
   13903:	8b 40 08             	mov    0x8(%eax),%eax
   13906:	0f af c2             	imul   %edx,%eax
   13909:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   1390c:	8b 45 08             	mov    0x8(%ebp),%eax
   1390f:	8b 40 04             	mov    0x4(%eax),%eax
   13912:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   13915:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1391c:	eb 51                	jmp    1396f <clear_display+0x7b>
    start->c = ' ';
   1391e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13921:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   13924:	8b 45 08             	mov    0x8(%ebp),%eax
   13927:	8b 40 18             	mov    0x18(%eax),%eax
   1392a:	c1 e0 04             	shl    $0x4,%eax
   1392d:	c0 f8 04             	sar    $0x4,%al
   13930:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13933:	83 e0 0f             	and    $0xf,%eax
   13936:	89 c1                	mov    %eax,%ecx
   13938:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1393c:	83 e0 f0             	and    $0xfffffff0,%eax
   1393f:	09 c8                	or     %ecx,%eax
   13941:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   13944:	8b 45 08             	mov    0x8(%ebp),%eax
   13947:	8b 40 1c             	mov    0x1c(%eax),%eax
   1394a:	c1 e0 05             	shl    $0x5,%eax
   1394d:	c0 f8 05             	sar    $0x5,%al
   13950:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13953:	83 e0 07             	and    $0x7,%eax
   13956:	c1 e0 04             	shl    $0x4,%eax
   13959:	89 c1                	mov    %eax,%ecx
   1395b:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1395f:	83 e0 8f             	and    $0xffffff8f,%eax
   13962:	09 c8                	or     %ecx,%eax
   13964:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   13967:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1396b:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   1396f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13972:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13975:	7c a7                	jl     1391e <clear_display+0x2a>
  }
}
   13977:	90                   	nop
   13978:	90                   	nop
   13979:	c9                   	leave  
   1397a:	c3                   	ret    

0001397b <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   1397b:	55                   	push   %ebp
   1397c:	89 e5                	mov    %esp,%ebp
   1397e:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   13981:	8b 45 08             	mov    0x8(%ebp),%eax
   13984:	8b 40 14             	mov    0x14(%eax),%eax
   13987:	83 e0 03             	and    $0x3,%eax
   1398a:	89 c2                	mov    %eax,%edx
   1398c:	b8 04 00 00 00       	mov    $0x4,%eax
   13991:	29 d0                	sub    %edx,%eax
   13993:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   13996:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1399d:	eb 14                	jmp    139b3 <print_table+0x38>
    show_char(console, ' ');
   1399f:	83 ec 08             	sub    $0x8,%esp
   139a2:	6a 20                	push   $0x20
   139a4:	ff 75 08             	push   0x8(%ebp)
   139a7:	e8 01 fe ff ff       	call   137ad <show_char>
   139ac:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   139af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   139b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   139b9:	7c e4                	jl     1399f <print_table+0x24>
  }

  update_cursor_pos(console);
   139bb:	83 ec 0c             	sub    $0xc,%esp
   139be:	ff 75 08             	push   0x8(%ebp)
   139c1:	e8 81 fb ff ff       	call   13547 <update_cursor_pos>
   139c6:	83 c4 10             	add    $0x10,%esp
}
   139c9:	90                   	nop
   139ca:	c9                   	leave  
   139cb:	c3                   	ret    

000139cc <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   139cc:	55                   	push   %ebp
   139cd:	89 e5                	mov    %esp,%ebp
   139cf:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   139d2:	8b 45 08             	mov    0x8(%ebp),%eax
   139d5:	6b c0 68             	imul   $0x68,%eax,%eax
   139d8:	05 00 e4 04 00       	add    $0x4e400,%eax
   139dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   139e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139e3:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   139ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139ed:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   139f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139f7:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   139fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a01:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   13a08:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13a0c:	75 38                	jne    13a46 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   13a0e:	e8 c0 fa ff ff       	call   134d3 <read_cursor_pos>
   13a13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   13a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a19:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13a1c:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13a1f:	ba 00 00 00 00       	mov    $0x0,%edx
   13a24:	f7 f1                	div    %ecx
   13a26:	89 c2                	mov    %eax,%edx
   13a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a2b:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   13a2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a31:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13a34:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13a37:	ba 00 00 00 00       	mov    $0x0,%edx
   13a3c:	f7 f1                	div    %ecx
   13a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a41:	89 50 14             	mov    %edx,0x14(%eax)
   13a44:	eb 22                	jmp    13a68 <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   13a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a49:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a53:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   13a5a:	83 ec 0c             	sub    $0xc,%esp
   13a5d:	ff 75 f4             	push   -0xc(%ebp)
   13a60:	e8 8f fe ff ff       	call   138f4 <clear_display>
   13a65:	83 c4 10             	add    $0x10,%esp
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   13a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a6b:	8b 50 14             	mov    0x14(%eax),%edx
   13a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a71:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a77:	8b 50 10             	mov    0x10(%eax),%edx
   13a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a7d:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(console->esc_param[0]) * ESC_PARAM_MAX);
   13a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a83:	83 c0 28             	add    $0x28,%eax
   13a86:	83 ec 04             	sub    $0x4,%esp
   13a89:	6a 28                	push   $0x28
   13a8b:	6a 00                	push   $0x0
   13a8d:	50                   	push   %eax
   13a8e:	e8 90 52 00 00       	call   18d23 <kernel_memset>
   13a93:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a99:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   13aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13aa3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13aa9:	8b 45 08             	mov    0x8(%ebp),%eax
   13aac:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13ab2:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13abb:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  //初始化终端互斥锁
  mutex_init(&console->mutex);
   13abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ac1:	83 c0 54             	add    $0x54,%eax
   13ac4:	83 ec 0c             	sub    $0xc,%esp
   13ac7:	50                   	push   %eax
   13ac8:	e8 bf 45 00 00       	call   1808c <mutex_init>
   13acd:	83 c4 10             	add    $0x10,%esp
  return 0;
   13ad0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13ad5:	c9                   	leave  
   13ad6:	c3                   	ret    

00013ad7 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13ad7:	55                   	push   %ebp
   13ad8:	89 e5                	mov    %esp,%ebp
   13ada:	83 ec 18             	sub    $0x18,%esp
   13add:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ae0:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13ae3:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13ae7:	83 f8 1b             	cmp    $0x1b,%eax
   13aea:	7f 16                	jg     13b02 <write_normal+0x2b>
   13aec:	83 f8 08             	cmp    $0x8,%eax
   13aef:	7c 75                	jl     13b66 <write_normal+0x8f>
   13af1:	83 e8 08             	sub    $0x8,%eax
   13af4:	83 f8 13             	cmp    $0x13,%eax
   13af7:	77 6d                	ja     13b66 <write_normal+0x8f>
   13af9:	8b 04 85 40 a1 01 00 	mov    0x1a140(,%eax,4),%eax
   13b00:	ff e0                	jmp    *%eax
   13b02:	83 f8 7f             	cmp    $0x7f,%eax
   13b05:	74 0d                	je     13b14 <write_normal+0x3d>
   13b07:	eb 5d                	jmp    13b66 <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   13b09:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13b12:	eb 72                	jmp    13b86 <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   13b14:	83 ec 0c             	sub    $0xc,%esp
   13b17:	ff 75 08             	push   0x8(%ebp)
   13b1a:	e8 9b fd ff ff       	call   138ba <erase_backword>
   13b1f:	83 c4 10             	add    $0x10,%esp
      break;
   13b22:	eb 62                	jmp    13b86 <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13b24:	83 ec 08             	sub    $0x8,%esp
   13b27:	6a 01                	push   $0x1
   13b29:	ff 75 08             	push   0x8(%ebp)
   13b2c:	e8 11 fd ff ff       	call   13842 <move_backword>
   13b31:	83 c4 10             	add    $0x10,%esp
      break;
   13b34:	eb 50                	jmp    13b86 <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13b36:	83 ec 0c             	sub    $0xc,%esp
   13b39:	ff 75 08             	push   0x8(%ebp)
   13b3c:	e8 3a fe ff ff       	call   1397b <print_table>
   13b41:	83 c4 10             	add    $0x10,%esp
      break;
   13b44:	eb 40                	jmp    13b86 <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13b46:	83 ec 0c             	sub    $0xc,%esp
   13b49:	ff 75 08             	push   0x8(%ebp)
   13b4c:	e8 9d fb ff ff       	call   136ee <move_to_col0>
   13b51:	83 c4 10             	add    $0x10,%esp
      break;
   13b54:	eb 30                	jmp    13b86 <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   13b56:	83 ec 0c             	sub    $0xc,%esp
   13b59:	ff 75 08             	push   0x8(%ebp)
   13b5c:	e8 9d fb ff ff       	call   136fe <move_to_next_line>
   13b61:	83 c4 10             	add    $0x10,%esp
      break;
   13b64:	eb 20                	jmp    13b86 <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   13b66:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13b6a:	7e 19                	jle    13b85 <write_normal+0xae>
   13b6c:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13b70:	74 13                	je     13b85 <write_normal+0xae>
        show_char(console, c);
   13b72:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13b76:	83 ec 08             	sub    $0x8,%esp
   13b79:	50                   	push   %eax
   13b7a:	ff 75 08             	push   0x8(%ebp)
   13b7d:	e8 2b fc ff ff       	call   137ad <show_char>
   13b82:	83 c4 10             	add    $0x10,%esp
      }
      break;
   13b85:	90                   	nop
  }
}
   13b86:	90                   	nop
   13b87:	c9                   	leave  
   13b88:	c3                   	ret    

00013b89 <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   13b89:	55                   	push   %ebp
   13b8a:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   13b8c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8f:	8b 50 14             	mov    0x14(%eax),%edx
   13b92:	8b 45 08             	mov    0x8(%ebp),%eax
   13b95:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13b98:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9b:	8b 50 10             	mov    0x10(%eax),%edx
   13b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba1:	89 50 24             	mov    %edx,0x24(%eax)
}
   13ba4:	90                   	nop
   13ba5:	5d                   	pop    %ebp
   13ba6:	c3                   	ret    

00013ba7 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13ba7:	55                   	push   %ebp
   13ba8:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13baa:	8b 45 08             	mov    0x8(%ebp),%eax
   13bad:	8b 50 20             	mov    0x20(%eax),%edx
   13bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb3:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13bb6:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb9:	8b 50 24             	mov    0x24(%eax),%edx
   13bbc:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbf:	89 50 10             	mov    %edx,0x10(%eax)
}
   13bc2:	90                   	nop
   13bc3:	5d                   	pop    %ebp
   13bc4:	c3                   	ret    

00013bc5 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13bc5:	55                   	push   %ebp
   13bc6:	89 e5                	mov    %esp,%ebp
   13bc8:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   13bce:	83 c0 28             	add    $0x28,%eax
   13bd1:	83 ec 04             	sub    $0x4,%esp
   13bd4:	6a 28                	push   $0x28
   13bd6:	6a 00                	push   $0x0
   13bd8:	50                   	push   %eax
   13bd9:	e8 45 51 00 00       	call   18d23 <kernel_memset>
   13bde:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13be1:	8b 45 08             	mov    0x8(%ebp),%eax
   13be4:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13beb:	90                   	nop
   13bec:	c9                   	leave  
   13bed:	c3                   	ret    

00013bee <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13bee:	55                   	push   %ebp
   13bef:	89 e5                	mov    %esp,%ebp
   13bf1:	83 ec 18             	sub    $0x18,%esp
   13bf4:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bf7:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13bfa:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13bfe:	83 f8 5b             	cmp    $0x5b,%eax
   13c01:	74 11                	je     13c14 <write_esc+0x26>
   13c03:	83 f8 5b             	cmp    $0x5b,%eax
   13c06:	7f 57                	jg     13c5f <write_esc+0x71>
   13c08:	83 f8 37             	cmp    $0x37,%eax
   13c0b:	74 20                	je     13c2d <write_esc+0x3f>
   13c0d:	83 f8 38             	cmp    $0x38,%eax
   13c10:	74 34                	je     13c46 <write_esc+0x58>
   13c12:	eb 4b                	jmp    13c5f <write_esc+0x71>
    case '[':
      clear_esc_param(console);
   13c14:	83 ec 0c             	sub    $0xc,%esp
   13c17:	ff 75 08             	push   0x8(%ebp)
   13c1a:	e8 a6 ff ff ff       	call   13bc5 <clear_esc_param>
   13c1f:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13c22:	8b 45 08             	mov    0x8(%ebp),%eax
   13c25:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13c2b:	eb 3c                	jmp    13c69 <write_esc+0x7b>
    case '7':
      save_cursor(console);
   13c2d:	83 ec 0c             	sub    $0xc,%esp
   13c30:	ff 75 08             	push   0x8(%ebp)
   13c33:	e8 51 ff ff ff       	call   13b89 <save_cursor>
   13c38:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c44:	eb 23                	jmp    13c69 <write_esc+0x7b>
    case '8':
      restore_cursor(console);
   13c46:	83 ec 0c             	sub    $0xc,%esp
   13c49:	ff 75 08             	push   0x8(%ebp)
   13c4c:	e8 56 ff ff ff       	call   13ba7 <restore_cursor>
   13c51:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c54:	8b 45 08             	mov    0x8(%ebp),%eax
   13c57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c5d:	eb 0a                	jmp    13c69 <write_esc+0x7b>
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c68:	90                   	nop
  }
}
   13c69:	90                   	nop
   13c6a:	c9                   	leave  
   13c6b:	c3                   	ret    

00013c6c <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13c6c:	55                   	push   %ebp
   13c6d:	89 e5                	mov    %esp,%ebp
   13c6f:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13c72:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13c79:	eb 78                	jmp    13cf3 <set_font_style+0x87>
    int param = console->esc_param[i];
   13c7b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c7e:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13c81:	83 c2 08             	add    $0x8,%edx
   13c84:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13c88:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13c8b:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13c8f:	7e 1b                	jle    13cac <set_font_style+0x40>
   13c91:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13c95:	7f 15                	jg     13cac <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13c97:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c9a:	83 e8 1e             	sub    $0x1e,%eax
   13c9d:	8b 14 85 a0 a1 01 00 	mov    0x1a1a0(,%eax,4),%edx
   13ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ca7:	89 50 18             	mov    %edx,0x18(%eax)
   13caa:	eb 43                	jmp    13cef <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13cac:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13cb0:	7e 1b                	jle    13ccd <set_font_style+0x61>
   13cb2:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13cb6:	7f 15                	jg     13ccd <set_font_style+0x61>
      console->background = color_table[param - 40];
   13cb8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13cbb:	83 e8 28             	sub    $0x28,%eax
   13cbe:	8b 14 85 a0 a1 01 00 	mov    0x1a1a0(,%eax,4),%edx
   13cc5:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc8:	89 50 1c             	mov    %edx,0x1c(%eax)
   13ccb:	eb 22                	jmp    13cef <set_font_style+0x83>
    } else if (param == 39) {
   13ccd:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13cd1:	75 0c                	jne    13cdf <set_font_style+0x73>
      console->foreground = COLOR_White;
   13cd3:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd6:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13cdd:	eb 10                	jmp    13cef <set_font_style+0x83>
    } else if (param == 49) {
   13cdf:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13ce3:	75 0a                	jne    13cef <set_font_style+0x83>
      console->background = COLOR_Black;
   13ce5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ce8:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13cef:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   13cf6:	8b 40 50             	mov    0x50(%eax),%eax
   13cf9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13cfc:	0f 8e 79 ff ff ff    	jle    13c7b <set_font_style+0xf>
    }
  }
}
   13d02:	90                   	nop
   13d03:	90                   	nop
   13d04:	c9                   	leave  
   13d05:	c3                   	ret    

00013d06 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13d06:	55                   	push   %ebp
   13d07:	89 e5                	mov    %esp,%ebp
   13d09:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13d0c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d0f:	8b 40 50             	mov    0x50(%eax),%eax
   13d12:	85 c0                	test   %eax,%eax
   13d14:	78 3c                	js     13d52 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13d16:	8b 45 08             	mov    0x8(%ebp),%eax
   13d19:	8b 40 28             	mov    0x28(%eax),%eax
   13d1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13d1f:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13d23:	75 2e                	jne    13d53 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13d25:	8b 45 08             	mov    0x8(%ebp),%eax
   13d28:	8b 40 08             	mov    0x8(%eax),%eax
   13d2b:	83 e8 01             	sub    $0x1,%eax
   13d2e:	50                   	push   %eax
   13d2f:	6a 00                	push   $0x0
   13d31:	ff 75 08             	push   0x8(%ebp)
   13d34:	e8 b4 f8 ff ff       	call   135ed <erase_rows>
   13d39:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13d3c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d3f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13d46:	8b 45 08             	mov    0x8(%ebp),%eax
   13d49:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13d50:	eb 01                	jmp    13d53 <erase_in_display+0x4d>
    return;
   13d52:	90                   	nop
  }
}
   13d53:	c9                   	leave  
   13d54:	c3                   	ret    

00013d55 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13d55:	55                   	push   %ebp
   13d56:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13d58:	8b 45 08             	mov    0x8(%ebp),%eax
   13d5b:	8b 40 28             	mov    0x28(%eax),%eax
   13d5e:	89 c2                	mov    %eax,%edx
   13d60:	8b 45 08             	mov    0x8(%ebp),%eax
   13d63:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13d66:	8b 45 08             	mov    0x8(%ebp),%eax
   13d69:	8b 40 2c             	mov    0x2c(%eax),%eax
   13d6c:	89 c2                	mov    %eax,%edx
   13d6e:	8b 45 08             	mov    0x8(%ebp),%eax
   13d71:	89 50 14             	mov    %edx,0x14(%eax)
}
   13d74:	90                   	nop
   13d75:	5d                   	pop    %ebp
   13d76:	c3                   	ret    

00013d77 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13d77:	55                   	push   %ebp
   13d78:	89 e5                	mov    %esp,%ebp
   13d7a:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13d7d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13d81:	75 07                	jne    13d8a <move_left+0x13>
    n = 1;
   13d83:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13d8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d8d:	8b 40 14             	mov    0x14(%eax),%eax
   13d90:	8b 55 0c             	mov    0xc(%ebp),%edx
   13d93:	29 d0                	sub    %edx,%eax
   13d95:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13d98:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d9b:	ba 00 00 00 00       	mov    $0x0,%edx
   13da0:	85 c0                	test   %eax,%eax
   13da2:	0f 48 c2             	cmovs  %edx,%eax
   13da5:	89 c2                	mov    %eax,%edx
   13da7:	8b 45 08             	mov    0x8(%ebp),%eax
   13daa:	89 50 14             	mov    %edx,0x14(%eax)
}
   13dad:	90                   	nop
   13dae:	c9                   	leave  
   13daf:	c3                   	ret    

00013db0 <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13db0:	55                   	push   %ebp
   13db1:	89 e5                	mov    %esp,%ebp
   13db3:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13db6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13dba:	75 07                	jne    13dc3 <move_right+0x13>
    n = 1;
   13dbc:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc6:	8b 50 14             	mov    0x14(%eax),%edx
   13dc9:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dcc:	01 d0                	add    %edx,%eax
   13dce:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13dd1:	8b 45 08             	mov    0x8(%ebp),%eax
   13dd4:	8b 50 0c             	mov    0xc(%eax),%edx
   13dd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13dda:	39 c2                	cmp    %eax,%edx
   13ddc:	77 0b                	ja     13de9 <move_right+0x39>
   13dde:	8b 45 08             	mov    0x8(%ebp),%eax
   13de1:	8b 40 0c             	mov    0xc(%eax),%eax
   13de4:	83 e8 01             	sub    $0x1,%eax
   13de7:	eb 03                	jmp    13dec <move_right+0x3c>
   13de9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13dec:	8b 55 08             	mov    0x8(%ebp),%edx
   13def:	89 42 14             	mov    %eax,0x14(%edx)
}
   13df2:	90                   	nop
   13df3:	c9                   	leave  
   13df4:	c3                   	ret    

00013df5 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13df5:	55                   	push   %ebp
   13df6:	89 e5                	mov    %esp,%ebp
   13df8:	83 ec 14             	sub    $0x14,%esp
   13dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dfe:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13e01:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13e05:	7e 44                	jle    13e4b <write_esc_square+0x56>
   13e07:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13e0b:	7f 3e                	jg     13e4b <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13e0d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e10:	8b 40 50             	mov    0x50(%eax),%eax
   13e13:	83 c0 08             	add    $0x8,%eax
   13e16:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13e1d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e20:	01 d0                	add    %edx,%eax
   13e22:	83 c0 08             	add    $0x8,%eax
   13e25:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13e28:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e2b:	8b 10                	mov    (%eax),%edx
   13e2d:	89 d0                	mov    %edx,%eax
   13e2f:	c1 e0 02             	shl    $0x2,%eax
   13e32:	01 d0                	add    %edx,%eax
   13e34:	01 c0                	add    %eax,%eax
   13e36:	89 c2                	mov    %eax,%edx
   13e38:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13e3c:	01 d0                	add    %edx,%eax
   13e3e:	8d 50 d0             	lea    -0x30(%eax),%edx
   13e41:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e44:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13e46:	e9 ab 00 00 00       	jmp    13ef6 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13e4b:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13e4f:	75 1f                	jne    13e70 <write_esc_square+0x7b>
   13e51:	8b 45 08             	mov    0x8(%ebp),%eax
   13e54:	8b 40 50             	mov    0x50(%eax),%eax
   13e57:	83 f8 09             	cmp    $0x9,%eax
   13e5a:	7f 14                	jg     13e70 <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13e5c:	8b 45 08             	mov    0x8(%ebp),%eax
   13e5f:	8b 40 50             	mov    0x50(%eax),%eax
   13e62:	8d 50 01             	lea    0x1(%eax),%edx
   13e65:	8b 45 08             	mov    0x8(%ebp),%eax
   13e68:	89 50 50             	mov    %edx,0x50(%eax)
   13e6b:	e9 86 00 00 00       	jmp    13ef6 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13e70:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13e74:	83 f8 6d             	cmp    $0x6d,%eax
   13e77:	74 25                	je     13e9e <write_esc_square+0xa9>
   13e79:	83 f8 6d             	cmp    $0x6d,%eax
   13e7c:	7f 6d                	jg     13eeb <write_esc_square+0xf6>
   13e7e:	83 f8 4a             	cmp    $0x4a,%eax
   13e81:	74 5d                	je     13ee0 <write_esc_square+0xeb>
   13e83:	83 f8 4a             	cmp    $0x4a,%eax
   13e86:	7f 63                	jg     13eeb <write_esc_square+0xf6>
   13e88:	83 f8 48             	cmp    $0x48,%eax
   13e8b:	74 46                	je     13ed3 <write_esc_square+0xde>
   13e8d:	83 f8 48             	cmp    $0x48,%eax
   13e90:	7f 59                	jg     13eeb <write_esc_square+0xf6>
   13e92:	83 f8 43             	cmp    $0x43,%eax
   13e95:	74 28                	je     13ebf <write_esc_square+0xca>
   13e97:	83 f8 44             	cmp    $0x44,%eax
   13e9a:	74 0f                	je     13eab <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13e9c:	eb 4d                	jmp    13eeb <write_esc_square+0xf6>
        set_font_style(console);
   13e9e:	ff 75 08             	push   0x8(%ebp)
   13ea1:	e8 c6 fd ff ff       	call   13c6c <set_font_style>
   13ea6:	83 c4 04             	add    $0x4,%esp
        break;
   13ea9:	eb 41                	jmp    13eec <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13eab:	8b 45 08             	mov    0x8(%ebp),%eax
   13eae:	8b 40 28             	mov    0x28(%eax),%eax
   13eb1:	50                   	push   %eax
   13eb2:	ff 75 08             	push   0x8(%ebp)
   13eb5:	e8 bd fe ff ff       	call   13d77 <move_left>
   13eba:	83 c4 08             	add    $0x8,%esp
        break;
   13ebd:	eb 2d                	jmp    13eec <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13ebf:	8b 45 08             	mov    0x8(%ebp),%eax
   13ec2:	8b 40 28             	mov    0x28(%eax),%eax
   13ec5:	50                   	push   %eax
   13ec6:	ff 75 08             	push   0x8(%ebp)
   13ec9:	e8 e2 fe ff ff       	call   13db0 <move_right>
   13ece:	83 c4 08             	add    $0x8,%esp
        break;
   13ed1:	eb 19                	jmp    13eec <write_esc_square+0xf7>
        move_cursor(console);
   13ed3:	ff 75 08             	push   0x8(%ebp)
   13ed6:	e8 7a fe ff ff       	call   13d55 <move_cursor>
   13edb:	83 c4 04             	add    $0x4,%esp
        break;
   13ede:	eb 0c                	jmp    13eec <write_esc_square+0xf7>
        erase_in_display(console);
   13ee0:	ff 75 08             	push   0x8(%ebp)
   13ee3:	e8 1e fe ff ff       	call   13d06 <erase_in_display>
   13ee8:	83 c4 04             	add    $0x4,%esp
        break;
   13eeb:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13eec:	8b 45 08             	mov    0x8(%ebp),%eax
   13eef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13ef5:	90                   	nop
   13ef6:	90                   	nop
   13ef7:	c9                   	leave  
   13ef8:	c3                   	ret    

00013ef9 <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13ef9:	55                   	push   %ebp
   13efa:	89 e5                	mov    %esp,%ebp
   13efc:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13eff:	8b 45 08             	mov    0x8(%ebp),%eax
   13f02:	8b 40 08             	mov    0x8(%eax),%eax
   13f05:	6b c0 68             	imul   $0x68,%eax,%eax
   13f08:	05 00 e4 04 00       	add    $0x4e400,%eax
   13f0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13f10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&console->mutex);
   13f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f1a:	83 c0 54             	add    $0x54,%eax
   13f1d:	83 ec 0c             	sub    $0xc,%esp
   13f20:	50                   	push   %eax
   13f21:	e8 b3 41 00 00       	call   180d9 <mutex_lock>
   13f26:	83 c4 10             	add    $0x10,%esp

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13f29:	8b 45 08             	mov    0x8(%ebp),%eax
   13f2c:	8d 50 0c             	lea    0xc(%eax),%edx
   13f2f:	83 ec 08             	sub    $0x8,%esp
   13f32:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13f35:	50                   	push   %eax
   13f36:	52                   	push   %edx
   13f37:	e8 28 15 00 00       	call   15464 <tty_fifo_get>
   13f3c:	83 c4 10             	add    $0x10,%esp
   13f3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13f42:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f46:	79 2a                	jns    13f72 <console_write+0x79>
    len++;
  } while (1);


  //TODO:解锁
  mutex_unlock(&console->mutex);
   13f48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f4b:	83 c0 54             	add    $0x54,%eax
   13f4e:	83 ec 0c             	sub    $0xc,%esp
   13f51:	50                   	push   %eax
   13f52:	e8 28 42 00 00       	call   1817f <mutex_unlock>
   13f57:	83 c4 10             	add    $0x10,%esp

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13f5a:	8b 45 08             	mov    0x8(%ebp),%eax
   13f5d:	8b 50 08             	mov    0x8(%eax),%edx
   13f60:	a1 40 e7 04 00       	mov    0x4e740,%eax
   13f65:	39 c2                	cmp    %eax,%edx
   13f67:	0f 84 83 00 00 00    	je     13ff0 <console_write+0xf7>
   13f6d:	e9 8c 00 00 00       	jmp    13ffe <console_write+0x105>
    sem_notify(&tty->out_sem);
   13f72:	8b 45 08             	mov    0x8(%ebp),%eax
   13f75:	83 c0 34             	add    $0x34,%eax
   13f78:	83 ec 0c             	sub    $0xc,%esp
   13f7b:	50                   	push   %eax
   13f7c:	e8 0c 44 00 00       	call   1838d <sem_notify>
   13f81:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f87:	8b 00                	mov    (%eax),%eax
   13f89:	83 f8 02             	cmp    $0x2,%eax
   13f8c:	74 40                	je     13fce <console_write+0xd5>
   13f8e:	83 f8 02             	cmp    $0x2,%eax
   13f91:	77 53                	ja     13fe6 <console_write+0xed>
   13f93:	85 c0                	test   %eax,%eax
   13f95:	74 07                	je     13f9e <console_write+0xa5>
   13f97:	83 f8 01             	cmp    $0x1,%eax
   13f9a:	74 1a                	je     13fb6 <console_write+0xbd>
        break;
   13f9c:	eb 48                	jmp    13fe6 <console_write+0xed>
        write_normal(console, c);
   13f9e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13fa2:	0f be c0             	movsbl %al,%eax
   13fa5:	83 ec 08             	sub    $0x8,%esp
   13fa8:	50                   	push   %eax
   13fa9:	ff 75 f0             	push   -0x10(%ebp)
   13fac:	e8 26 fb ff ff       	call   13ad7 <write_normal>
   13fb1:	83 c4 10             	add    $0x10,%esp
        break;
   13fb4:	eb 31                	jmp    13fe7 <console_write+0xee>
        write_esc(console, c);
   13fb6:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13fba:	0f be c0             	movsbl %al,%eax
   13fbd:	83 ec 08             	sub    $0x8,%esp
   13fc0:	50                   	push   %eax
   13fc1:	ff 75 f0             	push   -0x10(%ebp)
   13fc4:	e8 25 fc ff ff       	call   13bee <write_esc>
   13fc9:	83 c4 10             	add    $0x10,%esp
        break;
   13fcc:	eb 19                	jmp    13fe7 <console_write+0xee>
        write_esc_square(console, c);
   13fce:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13fd2:	0f be c0             	movsbl %al,%eax
   13fd5:	83 ec 08             	sub    $0x8,%esp
   13fd8:	50                   	push   %eax
   13fd9:	ff 75 f0             	push   -0x10(%ebp)
   13fdc:	e8 14 fe ff ff       	call   13df5 <write_esc_square>
   13fe1:	83 c4 10             	add    $0x10,%esp
        break;
   13fe4:	eb 01                	jmp    13fe7 <console_write+0xee>
        break;
   13fe6:	90                   	nop
    len++;
   13fe7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13feb:	e9 39 ff ff ff       	jmp    13f29 <console_write+0x30>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13ff0:	83 ec 0c             	sub    $0xc,%esp
   13ff3:	ff 75 f0             	push   -0x10(%ebp)
   13ff6:	e8 4c f5 ff ff       	call   13547 <update_cursor_pos>
   13ffb:	83 c4 10             	add    $0x10,%esp
  }


  return len;
   13ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14001:	c9                   	leave  
   14002:	c3                   	ret    

00014003 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   14003:	55                   	push   %ebp
   14004:	89 e5                	mov    %esp,%ebp
   14006:	90                   	nop
   14007:	5d                   	pop    %ebp
   14008:	c3                   	ret    

00014009 <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   14009:	55                   	push   %ebp
   1400a:	89 e5                	mov    %esp,%ebp
   1400c:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   1400f:	8b 45 08             	mov    0x8(%ebp),%eax
   14012:	6b c0 68             	imul   $0x68,%eax,%eax
   14015:	05 00 e4 04 00       	add    $0x4e400,%eax
   1401a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   1401d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14020:	8b 40 04             	mov    0x4(%eax),%eax
   14023:	85 c0                	test   %eax,%eax
   14025:	75 0e                	jne    14035 <console_select+0x2c>
      console_init(console_index);
   14027:	83 ec 0c             	sub    $0xc,%esp
   1402a:	ff 75 08             	push   0x8(%ebp)
   1402d:	e8 9a f9 ff ff       	call   139cc <console_init>
   14032:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   14035:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14038:	8b 40 08             	mov    0x8(%eax),%eax
   1403b:	89 c2                	mov    %eax,%edx
   1403d:	8b 45 08             	mov    0x8(%ebp),%eax
   14040:	0f af d0             	imul   %eax,%edx
   14043:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14046:	8b 40 0c             	mov    0xc(%eax),%eax
   14049:	0f af c2             	imul   %edx,%eax
   1404c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   14050:	83 ec 08             	sub    $0x8,%esp
   14053:	6a 0c                	push   $0xc
   14055:	68 d4 03 00 00       	push   $0x3d4
   1405a:	e8 53 f4 ff ff       	call   134b2 <outb>
   1405f:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   14062:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   14066:	66 c1 e8 08          	shr    $0x8,%ax
   1406a:	0f b6 c0             	movzbl %al,%eax
   1406d:	83 ec 08             	sub    $0x8,%esp
   14070:	50                   	push   %eax
   14071:	68 d5 03 00 00       	push   $0x3d5
   14076:	e8 37 f4 ff ff       	call   134b2 <outb>
   1407b:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   1407e:	83 ec 08             	sub    $0x8,%esp
   14081:	6a 0d                	push   $0xd
   14083:	68 d4 03 00 00       	push   $0x3d4
   14088:	e8 25 f4 ff ff       	call   134b2 <outb>
   1408d:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   14090:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   14094:	0f b6 c0             	movzbl %al,%eax
   14097:	83 ec 08             	sub    $0x8,%esp
   1409a:	50                   	push   %eax
   1409b:	68 d5 03 00 00       	push   $0x3d5
   140a0:	e8 0d f4 ff ff       	call   134b2 <outb>
   140a5:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   140a8:	8b 45 08             	mov    0x8(%ebp),%eax
   140ab:	a3 40 e7 04 00       	mov    %eax,0x4e740

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   140b0:	8b 45 08             	mov    0x8(%ebp),%eax
   140b3:	83 c0 30             	add    $0x30,%eax
   140b6:	0f be c0             	movsbl %al,%eax
   140b9:	83 ec 08             	sub    $0x8,%esp
   140bc:	50                   	push   %eax
   140bd:	ff 75 f4             	push   -0xc(%ebp)
   140c0:	e8 e8 f6 ff ff       	call   137ad <show_char>
   140c5:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   140c8:	83 ec 0c             	sub    $0xc,%esp
   140cb:	ff 75 f4             	push   -0xc(%ebp)
   140ce:	e8 74 f4 ff ff       	call   13547 <update_cursor_pos>
   140d3:	83 c4 10             	add    $0x10,%esp

   

   140d6:	90                   	nop
   140d7:	c9                   	leave  
   140d8:	c3                   	ret    

000140d9 <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   140d9:	55                   	push   %ebp
   140da:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   140dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   140e0:	78 06                	js     140e8 <is_dev_exist+0xf>
   140e2:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   140e6:	7e 07                	jle    140ef <is_dev_exist+0x16>
        return 0;
   140e8:	b8 00 00 00 00       	mov    $0x0,%eax
   140ed:	eb 3a                	jmp    14129 <is_dev_exist+0x50>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   140ef:	8b 55 08             	mov    0x8(%ebp),%edx
   140f2:	89 d0                	mov    %edx,%eax
   140f4:	01 c0                	add    %eax,%eax
   140f6:	01 d0                	add    %edx,%eax
   140f8:	c1 e0 03             	shl    $0x3,%eax
   140fb:	05 70 e7 04 00       	add    $0x4e770,%eax
   14100:	8b 00                	mov    (%eax),%eax
   14102:	85 c0                	test   %eax,%eax
   14104:	74 17                	je     1411d <is_dev_exist+0x44>
   14106:	8b 55 08             	mov    0x8(%ebp),%edx
   14109:	89 d0                	mov    %edx,%eax
   1410b:	01 c0                	add    %eax,%eax
   1410d:	01 d0                	add    %edx,%eax
   1410f:	c1 e0 03             	shl    $0x3,%eax
   14112:	05 74 e7 04 00       	add    $0x4e774,%eax
   14117:	8b 00                	mov    (%eax),%eax
   14119:	85 c0                	test   %eax,%eax
   1411b:	75 07                	jne    14124 <is_dev_exist+0x4b>
        return 0;
   1411d:	b8 00 00 00 00       	mov    $0x0,%eax
   14122:	eb 05                	jmp    14129 <is_dev_exist+0x50>
    }

    return 1;
   14124:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14129:	5d                   	pop    %ebp
   1412a:	c3                   	ret    

0001412b <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   1412b:	55                   	push   %ebp
   1412c:	89 e5                	mov    %esp,%ebp
   1412e:	83 ec 28             	sub    $0x28,%esp
    //TODO:加锁 1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   14131:	e8 8d f2 ff ff       	call   133c3 <idt_enter_protection>
   14136:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   14139:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14140:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14147:	eb 64                	jmp    141ad <dev_open+0x82>
        device_t *dev = dev_table + i;
   14149:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1414c:	89 d0                	mov    %edx,%eax
   1414e:	01 c0                	add    %eax,%eax
   14150:	01 d0                	add    %edx,%eax
   14152:	c1 e0 03             	shl    $0x3,%eax
   14155:	05 60 e7 04 00       	add    $0x4e760,%eax
   1415a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev->open_count == 0) { 
   1415d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14160:	8b 40 10             	mov    0x10(%eax),%eax
   14163:	85 c0                	test   %eax,%eax
   14165:	75 08                	jne    1416f <dev_open+0x44>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   14167:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1416a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1416d:	eb 46                	jmp    141b5 <dev_open+0x8a>
        } else if (dev->dev_type == dev_type && dev->dev_index == dev_index) {
   1416f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14172:	8b 00                	mov    (%eax),%eax
   14174:	39 45 08             	cmp    %eax,0x8(%ebp)
   14177:	75 30                	jne    141a9 <dev_open+0x7e>
   14179:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1417c:	8b 40 08             	mov    0x8(%eax),%eax
   1417f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14182:	75 25                	jne    141a9 <dev_open+0x7e>
            //设备已打开过,增加打开次数
            dev->open_count++;
   14184:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14187:	8b 40 10             	mov    0x10(%eax),%eax
   1418a:	8d 50 01             	lea    0x1(%eax),%edx
   1418d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14190:	89 50 10             	mov    %edx,0x10(%eax)
            //TODO:解锁
            idt_leave_protection(state);
   14193:	83 ec 0c             	sub    $0xc,%esp
   14196:	ff 75 ec             	push   -0x14(%ebp)
   14199:	e8 3d f2 ff ff       	call   133db <idt_leave_protection>
   1419e:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   141a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   141a4:	e9 a9 00 00 00       	jmp    14252 <dev_open+0x127>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   141a9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   141ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   141b0:	83 f8 7f             	cmp    $0x7f,%eax
   141b3:	76 94                	jbe    14149 <dev_open+0x1e>
        }
    }

    //3.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (free_dev && dev_type > DEV_UNKNOWN && dev_type < sizeof(dev_des_table) / sizeof(dev_des_table[0])) {
   141b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   141b9:	0f 84 80 00 00 00    	je     1423f <dev_open+0x114>
   141bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   141c3:	7e 7a                	jle    1423f <dev_open+0x114>
   141c5:	8b 45 08             	mov    0x8(%ebp),%eax
   141c8:	83 f8 02             	cmp    $0x2,%eax
   141cb:	77 72                	ja     1423f <dev_open+0x114>
        free_dev->dev_type = dev_type;
   141cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141d0:	8b 55 08             	mov    0x8(%ebp),%edx
   141d3:	89 10                	mov    %edx,(%eax)
        free_dev->desc = dev_des_table[dev_type];
   141d5:	8b 45 08             	mov    0x8(%ebp),%eax
   141d8:	8b 14 85 50 b0 01 00 	mov    0x1b050(,%eax,4),%edx
   141df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141e2:	89 50 14             	mov    %edx,0x14(%eax)
        free_dev->data = data;
   141e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141e8:	8b 55 10             	mov    0x10(%ebp),%edx
   141eb:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   141ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141f1:	8b 55 0c             	mov    0xc(%ebp),%edx
   141f4:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = free_dev->desc->open(free_dev);
   141f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141fa:	8b 40 14             	mov    0x14(%eax),%eax
   141fd:	8b 40 14             	mov    0x14(%eax),%eax
   14200:	83 ec 0c             	sub    $0xc,%esp
   14203:	ff 75 f4             	push   -0xc(%ebp)
   14206:	ff d0                	call   *%eax
   14208:	83 c4 10             	add    $0x10,%esp
   1420b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err == 0) { //打开成功
   1420e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14212:	75 2b                	jne    1423f <dev_open+0x114>
            free_dev->open_count = 1;
   14214:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14217:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            //TODO:解锁
            idt_leave_protection(state);
   1421e:	83 ec 0c             	sub    $0xc,%esp
   14221:	ff 75 ec             	push   -0x14(%ebp)
   14224:	e8 b2 f1 ff ff       	call   133db <idt_leave_protection>
   14229:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   1422c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1422f:	2d 60 e7 04 00       	sub    $0x4e760,%eax
   14234:	c1 f8 03             	sar    $0x3,%eax
   14237:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
   1423d:	eb 13                	jmp    14252 <dev_open+0x127>

        }
    }
  
    //TODO:解锁
    idt_leave_protection(state);
   1423f:	83 ec 0c             	sub    $0xc,%esp
   14242:	ff 75 ec             	push   -0x14(%ebp)
   14245:	e8 91 f1 ff ff       	call   133db <idt_leave_protection>
   1424a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1424d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14252:	c9                   	leave  
   14253:	c3                   	ret    

00014254 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   14254:	55                   	push   %ebp
   14255:	89 e5                	mov    %esp,%ebp
   14257:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1425a:	ff 75 08             	push   0x8(%ebp)
   1425d:	e8 77 fe ff ff       	call   140d9 <is_dev_exist>
   14262:	83 c4 04             	add    $0x4,%esp
   14265:	85 c0                	test   %eax,%eax
   14267:	75 07                	jne    14270 <dev_read+0x1c>
        return -1;
   14269:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1426e:	eb 2e                	jmp    1429e <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   14270:	8b 55 08             	mov    0x8(%ebp),%edx
   14273:	89 d0                	mov    %edx,%eax
   14275:	01 c0                	add    %eax,%eax
   14277:	01 d0                	add    %edx,%eax
   14279:	c1 e0 03             	shl    $0x3,%eax
   1427c:	05 60 e7 04 00       	add    $0x4e760,%eax
   14281:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14284:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14287:	8b 40 14             	mov    0x14(%eax),%eax
   1428a:	8b 40 18             	mov    0x18(%eax),%eax
   1428d:	ff 75 14             	push   0x14(%ebp)
   14290:	ff 75 10             	push   0x10(%ebp)
   14293:	ff 75 0c             	push   0xc(%ebp)
   14296:	ff 75 f4             	push   -0xc(%ebp)
   14299:	ff d0                	call   *%eax
   1429b:	83 c4 10             	add    $0x10,%esp
}
   1429e:	c9                   	leave  
   1429f:	c3                   	ret    

000142a0 <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   142a0:	55                   	push   %ebp
   142a1:	89 e5                	mov    %esp,%ebp
   142a3:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   142a6:	ff 75 08             	push   0x8(%ebp)
   142a9:	e8 2b fe ff ff       	call   140d9 <is_dev_exist>
   142ae:	83 c4 04             	add    $0x4,%esp
   142b1:	85 c0                	test   %eax,%eax
   142b3:	75 07                	jne    142bc <dev_write+0x1c>
        return -1;
   142b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142ba:	eb 2e                	jmp    142ea <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   142bc:	8b 55 08             	mov    0x8(%ebp),%edx
   142bf:	89 d0                	mov    %edx,%eax
   142c1:	01 c0                	add    %eax,%eax
   142c3:	01 d0                	add    %edx,%eax
   142c5:	c1 e0 03             	shl    $0x3,%eax
   142c8:	05 60 e7 04 00       	add    $0x4e760,%eax
   142cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   142d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142d3:	8b 40 14             	mov    0x14(%eax),%eax
   142d6:	8b 40 1c             	mov    0x1c(%eax),%eax
   142d9:	ff 75 14             	push   0x14(%ebp)
   142dc:	ff 75 10             	push   0x10(%ebp)
   142df:	ff 75 0c             	push   0xc(%ebp)
   142e2:	ff 75 f4             	push   -0xc(%ebp)
   142e5:	ff d0                	call   *%eax
   142e7:	83 c4 10             	add    $0x10,%esp
}
   142ea:	c9                   	leave  
   142eb:	c3                   	ret    

000142ec <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   142ec:	55                   	push   %ebp
   142ed:	89 e5                	mov    %esp,%ebp
   142ef:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   142f2:	ff 75 08             	push   0x8(%ebp)
   142f5:	e8 df fd ff ff       	call   140d9 <is_dev_exist>
   142fa:	83 c4 04             	add    $0x4,%esp
   142fd:	85 c0                	test   %eax,%eax
   142ff:	75 07                	jne    14308 <dev_control+0x1c>
        return -1;
   14301:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14306:	eb 2e                	jmp    14336 <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   14308:	8b 55 08             	mov    0x8(%ebp),%edx
   1430b:	89 d0                	mov    %edx,%eax
   1430d:	01 c0                	add    %eax,%eax
   1430f:	01 d0                	add    %edx,%eax
   14311:	c1 e0 03             	shl    $0x3,%eax
   14314:	05 60 e7 04 00       	add    $0x4e760,%eax
   14319:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   1431c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1431f:	8b 40 14             	mov    0x14(%eax),%eax
   14322:	8b 40 20             	mov    0x20(%eax),%eax
   14325:	ff 75 14             	push   0x14(%ebp)
   14328:	ff 75 10             	push   0x10(%ebp)
   1432b:	ff 75 0c             	push   0xc(%ebp)
   1432e:	ff 75 f4             	push   -0xc(%ebp)
   14331:	ff d0                	call   *%eax
   14333:	83 c4 10             	add    $0x10,%esp
}
   14336:	c9                   	leave  
   14337:	c3                   	ret    

00014338 <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   14338:	55                   	push   %ebp
   14339:	89 e5                	mov    %esp,%ebp
   1433b:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1433e:	ff 75 08             	push   0x8(%ebp)
   14341:	e8 93 fd ff ff       	call   140d9 <is_dev_exist>
   14346:	83 c4 04             	add    $0x4,%esp
   14349:	85 c0                	test   %eax,%eax
   1434b:	74 6b                	je     143b8 <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   1434d:	8b 55 08             	mov    0x8(%ebp),%edx
   14350:	89 d0                	mov    %edx,%eax
   14352:	01 c0                	add    %eax,%eax
   14354:	01 d0                	add    %edx,%eax
   14356:	c1 e0 03             	shl    $0x3,%eax
   14359:	05 60 e7 04 00       	add    $0x4e760,%eax
   1435e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   14361:	e8 5d f0 ff ff       	call   133c3 <idt_enter_protection>
   14366:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   14369:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1436c:	8b 40 10             	mov    0x10(%eax),%eax
   1436f:	8d 50 ff             	lea    -0x1(%eax),%edx
   14372:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14375:	89 50 10             	mov    %edx,0x10(%eax)
   14378:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1437b:	8b 40 10             	mov    0x10(%eax),%eax
   1437e:	85 c0                	test   %eax,%eax
   14380:	75 26                	jne    143a8 <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   14382:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14385:	8b 40 14             	mov    0x14(%eax),%eax
   14388:	8b 40 24             	mov    0x24(%eax),%eax
   1438b:	83 ec 0c             	sub    $0xc,%esp
   1438e:	ff 75 f4             	push   -0xc(%ebp)
   14391:	ff d0                	call   *%eax
   14393:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   14396:	83 ec 04             	sub    $0x4,%esp
   14399:	6a 18                	push   $0x18
   1439b:	6a 00                	push   $0x0
   1439d:	ff 75 f4             	push   -0xc(%ebp)
   143a0:	e8 7e 49 00 00       	call   18d23 <kernel_memset>
   143a5:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   143a8:	83 ec 0c             	sub    $0xc,%esp
   143ab:	ff 75 f0             	push   -0x10(%ebp)
   143ae:	e8 28 f0 ff ff       	call   133db <idt_leave_protection>
   143b3:	83 c4 10             	add    $0x10,%esp
   143b6:	eb 01                	jmp    143b9 <dev_close+0x81>
        return;
   143b8:	90                   	nop
}
   143b9:	c9                   	leave  
   143ba:	c3                   	ret    

000143bb <inb>:
static inline uint8_t inb(uint16_t port) {
   143bb:	55                   	push   %ebp
   143bc:	89 e5                	mov    %esp,%ebp
   143be:	83 ec 14             	sub    $0x14,%esp
   143c1:	8b 45 08             	mov    0x8(%ebp),%eax
   143c4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   143c8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   143cc:	89 c2                	mov    %eax,%edx
   143ce:	ec                   	in     (%dx),%al
   143cf:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   143d2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   143d6:	c9                   	leave  
   143d7:	c3                   	ret    

000143d8 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   143d8:	55                   	push   %ebp
   143d9:	89 e5                	mov    %esp,%ebp
   143db:	83 ec 08             	sub    $0x8,%esp
   143de:	8b 45 08             	mov    0x8(%ebp),%eax
   143e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   143e4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   143e8:	89 d0                	mov    %edx,%eax
   143ea:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   143ed:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   143f1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   143f5:	ee                   	out    %al,(%dx)
}
   143f6:	90                   	nop
   143f7:	c9                   	leave  
   143f8:	c3                   	ret    

000143f9 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   143f9:	55                   	push   %ebp
   143fa:	89 e5                	mov    %esp,%ebp
   143fc:	83 ec 08             	sub    $0x8,%esp
   143ff:	8b 55 08             	mov    0x8(%ebp),%edx
   14402:	8b 45 0c             	mov    0xc(%ebp),%eax
   14405:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14409:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  __asm__ __volatile__(
   1440d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14411:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   14415:	66 ef                	out    %ax,(%dx)
}
   14417:	90                   	nop
   14418:	c9                   	leave  
   14419:	c3                   	ret    

0001441a <inw>:
static inline uint16_t inw(uint16_t port) {
   1441a:	55                   	push   %ebp
   1441b:	89 e5                	mov    %esp,%ebp
   1441d:	83 ec 14             	sub    $0x14,%esp
   14420:	8b 45 08             	mov    0x8(%ebp),%eax
   14423:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   14427:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1442b:	89 c2                	mov    %eax,%edx
   1442d:	66 ed                	in     (%dx),%ax
   1442f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14433:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14437:	c9                   	leave  
   14438:	c3                   	ret    

00014439 <disk_send_cmd>:
 * @param start_sector
 * @param sector_count
 * @param cmd
 */
static void disk_send_cmd(disk_t *disk, uint32_t start_sector,
                          uint32_t sector_count, int cmd) {
   14439:	55                   	push   %ebp
   1443a:	89 e5                	mov    %esp,%ebp
  // 1.LBA模式下指定磁盘的驱动器号，即master或者slave
  // 将drive寄存器的对应位置为即可
  outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);
   1443c:	8b 45 08             	mov    0x8(%ebp),%eax
   1443f:	8b 40 20             	mov    0x20(%eax),%eax
   14442:	83 c8 e0             	or     $0xffffffe0,%eax
   14445:	0f b6 d0             	movzbl %al,%edx
   14448:	8b 45 08             	mov    0x8(%ebp),%eax
   1444b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1444f:	83 c0 06             	add    $0x6,%eax
   14452:	0f b7 c0             	movzwl %ax,%eax
   14455:	52                   	push   %edx
   14456:	50                   	push   %eax
   14457:	e8 7c ff ff ff       	call   143d8 <outb>
   1445c:	83 c4 08             	add    $0x8,%esp

  // 2.指定扇区数的高八位和起始扇区即LBA值的高24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 8));
   1445f:	8b 45 10             	mov    0x10(%ebp),%eax
   14462:	c1 e8 08             	shr    $0x8,%eax
   14465:	0f b6 d0             	movzbl %al,%edx
   14468:	8b 45 08             	mov    0x8(%ebp),%eax
   1446b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1446f:	83 c0 02             	add    $0x2,%eax
   14472:	0f b7 c0             	movzwl %ax,%eax
   14475:	52                   	push   %edx
   14476:	50                   	push   %eax
   14477:	e8 5c ff ff ff       	call   143d8 <outb>
   1447c:	83 c4 08             	add    $0x8,%esp
  // 6字节LBA值，先初始化第456个字节
  // 暂时只用到了4个字节的LBA值, 所以第5, 6个字节置0即可
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 24));  // LBA4
   1447f:	8b 45 0c             	mov    0xc(%ebp),%eax
   14482:	c1 e8 18             	shr    $0x18,%eax
   14485:	0f b6 d0             	movzbl %al,%edx
   14488:	8b 45 08             	mov    0x8(%ebp),%eax
   1448b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1448f:	83 c0 03             	add    $0x3,%eax
   14492:	0f b7 c0             	movzwl %ax,%eax
   14495:	52                   	push   %edx
   14496:	50                   	push   %eax
   14497:	e8 3c ff ff ff       	call   143d8 <outb>
   1449c:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), 0x00);                          // LBA5
   1449f:	8b 45 08             	mov    0x8(%ebp),%eax
   144a2:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144a6:	83 c0 04             	add    $0x4,%eax
   144a9:	0f b7 c0             	movzwl %ax,%eax
   144ac:	6a 00                	push   $0x0
   144ae:	50                   	push   %eax
   144af:	e8 24 ff ff ff       	call   143d8 <outb>
   144b4:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), 0x00);                           // LBA6
   144b7:	8b 45 08             	mov    0x8(%ebp),%eax
   144ba:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144be:	83 c0 05             	add    $0x5,%eax
   144c1:	0f b7 c0             	movzwl %ax,%eax
   144c4:	6a 00                	push   $0x0
   144c6:	50                   	push   %eax
   144c7:	e8 0c ff ff ff       	call   143d8 <outb>
   144cc:	83 c4 08             	add    $0x8,%esp

  // 3.指定读取扇区的低8位和起始扇区即LBA值的低24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 0));
   144cf:	8b 45 10             	mov    0x10(%ebp),%eax
   144d2:	0f b6 d0             	movzbl %al,%edx
   144d5:	8b 45 08             	mov    0x8(%ebp),%eax
   144d8:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144dc:	83 c0 02             	add    $0x2,%eax
   144df:	0f b7 c0             	movzwl %ax,%eax
   144e2:	52                   	push   %edx
   144e3:	50                   	push   %eax
   144e4:	e8 ef fe ff ff       	call   143d8 <outb>
   144e9:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 0));   // LBA1
   144ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   144ef:	0f b6 d0             	movzbl %al,%edx
   144f2:	8b 45 08             	mov    0x8(%ebp),%eax
   144f5:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144f9:	83 c0 03             	add    $0x3,%eax
   144fc:	0f b7 c0             	movzwl %ax,%eax
   144ff:	52                   	push   %edx
   14500:	50                   	push   %eax
   14501:	e8 d2 fe ff ff       	call   143d8 <outb>
   14506:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), (uint8_t)(start_sector >> 8));  // LBA2
   14509:	8b 45 0c             	mov    0xc(%ebp),%eax
   1450c:	c1 e8 08             	shr    $0x8,%eax
   1450f:	0f b6 d0             	movzbl %al,%edx
   14512:	8b 45 08             	mov    0x8(%ebp),%eax
   14515:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14519:	83 c0 04             	add    $0x4,%eax
   1451c:	0f b7 c0             	movzwl %ax,%eax
   1451f:	52                   	push   %edx
   14520:	50                   	push   %eax
   14521:	e8 b2 fe ff ff       	call   143d8 <outb>
   14526:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), (uint8_t)(start_sector >> 16));  // LBA3
   14529:	8b 45 0c             	mov    0xc(%ebp),%eax
   1452c:	c1 e8 10             	shr    $0x10,%eax
   1452f:	0f b6 d0             	movzbl %al,%edx
   14532:	8b 45 08             	mov    0x8(%ebp),%eax
   14535:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14539:	83 c0 05             	add    $0x5,%eax
   1453c:	0f b7 c0             	movzwl %ax,%eax
   1453f:	52                   	push   %edx
   14540:	50                   	push   %eax
   14541:	e8 92 fe ff ff       	call   143d8 <outb>
   14546:	83 c4 08             	add    $0x8,%esp

  // 4.对指定的区域执行cmd指令操作
  outb(DISK_CMD(disk), (uint8_t)cmd);
   14549:	8b 45 14             	mov    0x14(%ebp),%eax
   1454c:	0f b6 d0             	movzbl %al,%edx
   1454f:	8b 45 08             	mov    0x8(%ebp),%eax
   14552:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14556:	83 c0 07             	add    $0x7,%eax
   14559:	0f b7 c0             	movzwl %ax,%eax
   1455c:	52                   	push   %edx
   1455d:	50                   	push   %eax
   1455e:	e8 75 fe ff ff       	call   143d8 <outb>
   14563:	83 c4 08             	add    $0x8,%esp
}
   14566:	90                   	nop
   14567:	c9                   	leave  
   14568:	c3                   	ret    

00014569 <disk_read_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_read_data(disk_t *disk, void *buf, int size) {
   14569:	55                   	push   %ebp
   1456a:	89 e5                	mov    %esp,%ebp
   1456c:	53                   	push   %ebx
   1456d:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   14570:	8b 45 0c             	mov    0xc(%ebp),%eax
   14573:	89 45 f8             	mov    %eax,-0x8(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   14576:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1457d:	eb 23                	jmp    145a2 <disk_read_data+0x39>
    *(c++) = inw(DISK_DATA(disk));
   1457f:	8b 45 08             	mov    0x8(%ebp),%eax
   14582:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14586:	0f b7 c0             	movzwl %ax,%eax
   14589:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   1458c:	8d 53 02             	lea    0x2(%ebx),%edx
   1458f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14592:	50                   	push   %eax
   14593:	e8 82 fe ff ff       	call   1441a <inw>
   14598:	83 c4 04             	add    $0x4,%esp
   1459b:	66 89 03             	mov    %ax,(%ebx)
  for (int i = 0; i < size / 2; ++i) {
   1459e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   145a2:	8b 45 10             	mov    0x10(%ebp),%eax
   145a5:	89 c2                	mov    %eax,%edx
   145a7:	c1 ea 1f             	shr    $0x1f,%edx
   145aa:	01 d0                	add    %edx,%eax
   145ac:	d1 f8                	sar    %eax
   145ae:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   145b1:	7c cc                	jl     1457f <disk_read_data+0x16>
  }
}
   145b3:	90                   	nop
   145b4:	90                   	nop
   145b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   145b8:	c9                   	leave  
   145b9:	c3                   	ret    

000145ba <disk_write_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_write_data(disk_t *disk, void *buf, int size) {
   145ba:	55                   	push   %ebp
   145bb:	89 e5                	mov    %esp,%ebp
   145bd:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   145c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   145c3:	89 45 fc             	mov    %eax,-0x4(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   145c6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   145cd:	eb 27                	jmp    145f6 <disk_write_data+0x3c>
    outw(DISK_DATA(disk), *(c++));
   145cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145d2:	8d 50 02             	lea    0x2(%eax),%edx
   145d5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   145d8:	0f b7 00             	movzwl (%eax),%eax
   145db:	0f b7 d0             	movzwl %ax,%edx
   145de:	8b 45 08             	mov    0x8(%ebp),%eax
   145e1:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   145e5:	0f b7 c0             	movzwl %ax,%eax
   145e8:	52                   	push   %edx
   145e9:	50                   	push   %eax
   145ea:	e8 0a fe ff ff       	call   143f9 <outw>
   145ef:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < size / 2; ++i) {
   145f2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   145f6:	8b 45 10             	mov    0x10(%ebp),%eax
   145f9:	89 c2                	mov    %eax,%edx
   145fb:	c1 ea 1f             	shr    $0x1f,%edx
   145fe:	01 d0                	add    %edx,%eax
   14600:	d1 f8                	sar    %eax
   14602:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   14605:	7c c8                	jl     145cf <disk_write_data+0x15>
  }
}
   14607:	90                   	nop
   14608:	90                   	nop
   14609:	c9                   	leave  
   1460a:	c3                   	ret    

0001460b <disk_wait_data>:
 *        并检测磁盘是否发生错误
 * 
 * @param disk 
 * @return int 
 */
static int disk_wait_data(disk_t *disk) {
   1460b:	55                   	push   %ebp
   1460c:	89 e5                	mov    %esp,%ebp
   1460e:	83 ec 10             	sub    $0x10,%esp
  uint8_t status = 0;
   14611:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
  do {

    //轮询状态寄存器
    //若磁盘空闲则进行下一步操作
    //若磁盘忙碌 但有数据就绪又或者有错误发生，则进行下一步操作
    status = inb(DISK_STATUS(disk));
   14615:	8b 45 08             	mov    0x8(%ebp),%eax
   14618:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1461c:	83 c0 07             	add    $0x7,%eax
   1461f:	0f b7 c0             	movzwl %ax,%eax
   14622:	50                   	push   %eax
   14623:	e8 93 fd ff ff       	call   143bb <inb>
   14628:	83 c4 04             	add    $0x4,%esp
   1462b:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((status & ( DISK_STATUS_BUSY 
   1462e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   14632:	25 89 00 00 00       	and    $0x89,%eax
   14637:	3d 80 00 00 00       	cmp    $0x80,%eax
   1463c:	75 02                	jne    14640 <disk_wait_data+0x35>
    status = inb(DISK_STATUS(disk));
   1463e:	eb d5                	jmp    14615 <disk_wait_data+0xa>
                    | DISK_STATUS_DRQ 
                    | DISK_STATUS_ERR)) 
                    != DISK_STATUS_BUSY) {

        break;
   14640:	90                   	nop
    }
  } while (1);


  return (status & DISK_STATUS_ERR) ? -1 : 0;
   14641:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   14645:	83 e0 01             	and    $0x1,%eax
   14648:	85 c0                	test   %eax,%eax
   1464a:	74 07                	je     14653 <disk_wait_data+0x48>
   1464c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14651:	eb 05                	jmp    14658 <disk_wait_data+0x4d>
   14653:	b8 00 00 00 00       	mov    $0x0,%eax
  
}
   14658:	c9                   	leave  
   14659:	c3                   	ret    

0001465a <detect_part_info>:
 * @brief 检测磁盘disk的分区表信息
 * 
 * @param disk 
 * @return int 
 */
static int detect_part_info(disk_t *disk) {
   1465a:	55                   	push   %ebp
   1465b:	89 e5                	mov    %esp,%ebp
   1465d:	81 ec 18 02 00 00    	sub    $0x218,%esp
  mbr_t mbr;
  //1.发送读取指令
  disk_send_cmd(disk, 0, 1, DISK_CMD_READ);
   14663:	6a 24                	push   $0x24
   14665:	6a 01                	push   $0x1
   14667:	6a 00                	push   $0x0
   14669:	ff 75 08             	push   0x8(%ebp)
   1466c:	e8 c8 fd ff ff       	call   14439 <disk_send_cmd>
   14671:	83 c4 10             	add    $0x10,%esp
  //2.等待磁盘数据就绪
  int err = disk_wait_data(disk);
   14674:	ff 75 08             	push   0x8(%ebp)
   14677:	e8 8f ff ff ff       	call   1460b <disk_wait_data>
   1467c:	83 c4 04             	add    $0x4,%esp
   1467f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (err < 0) {
   14682:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14686:	79 18                	jns    146a0 <detect_part_info+0x46>
    log_printf("read mbr failed!\n");
   14688:	83 ec 0c             	sub    $0xc,%esp
   1468b:	68 c0 a1 01 00       	push   $0x1a1c0
   14690:	e8 8b 4e 00 00       	call   19520 <log_printf>
   14695:	83 c4 10             	add    $0x10,%esp
    return err;
   14698:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1469b:	e9 cd 00 00 00       	jmp    1476d <detect_part_info+0x113>
  }

  //3.读取0扇区的mbr,并将由bios检测并填充的分区表信息
  //读取到disk的partinfo结构中
  disk_read_data(disk, &mbr, sizeof(mbr));
   146a0:	83 ec 04             	sub    $0x4,%esp
   146a3:	68 00 02 00 00       	push   $0x200
   146a8:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   146ae:	50                   	push   %eax
   146af:	ff 75 08             	push   0x8(%ebp)
   146b2:	e8 b2 fe ff ff       	call   14569 <disk_read_data>
   146b7:	83 c4 10             	add    $0x10,%esp
  part_item_t *item = mbr.part_item;
   146ba:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   146c0:	05 be 01 00 00       	add    $0x1be,%eax
   146c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  partinfo_t *part_info = disk->partinfo + 1;
   146c8:	8b 45 08             	mov    0x8(%ebp),%eax
   146cb:	83 c0 30             	add    $0x30,%eax
   146ce:	83 c0 30             	add    $0x30,%eax
   146d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 1; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   146d4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   146db:	e9 83 00 00 00       	jmp    14763 <detect_part_info+0x109>
    part_info->type = item->system_id;
   146e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146e3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   146e7:	0f b6 d0             	movzbl %al,%edx
   146ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ed:	89 50 24             	mov    %edx,0x24(%eax)
    if (part_info->type == FS_INVALID) {  //无效分区，不使用
   146f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f3:	8b 40 24             	mov    0x24(%eax),%eax
   146f6:	85 c0                	test   %eax,%eax
   146f8:	75 20                	jne    1471a <detect_part_info+0xc0>
      part_info->total_sectors = 0;
   146fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146fd:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
      part_info->start_sector = 0;
   14704:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14707:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
      part_info->disk = (disk_t *)0;
   1470e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14711:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   14718:	eb 3d                	jmp    14757 <detect_part_info+0xfd>
    } else {  //分区有效，记录分区信息
      kernel_sprintf(part_info->name, "%s%d", disk->name, i);
   1471a:	8b 55 08             	mov    0x8(%ebp),%edx
   1471d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14720:	ff 75 ec             	push   -0x14(%ebp)
   14723:	52                   	push   %edx
   14724:	68 d2 a1 01 00       	push   $0x1a1d2
   14729:	50                   	push   %eax
   1472a:	e8 b9 46 00 00       	call   18de8 <kernel_sprintf>
   1472f:	83 c4 10             	add    $0x10,%esp
      part_info->disk = disk;
   14732:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14735:	8b 55 08             	mov    0x8(%ebp),%edx
   14738:	89 50 20             	mov    %edx,0x20(%eax)
      part_info->start_sector = item->relative_sector;
   1473b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1473e:	8b 40 08             	mov    0x8(%eax),%eax
   14741:	89 c2                	mov    %eax,%edx
   14743:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14746:	89 50 28             	mov    %edx,0x28(%eax)
      part_info->total_sectors = item->total_sectors;
   14749:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1474c:	8b 40 0c             	mov    0xc(%eax),%eax
   1474f:	89 c2                	mov    %eax,%edx
   14751:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14754:	89 50 2c             	mov    %edx,0x2c(%eax)
  for (int i = 1; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   14757:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1475b:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   1475f:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   14763:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   14767:	0f 8e 73 ff ff ff    	jle    146e0 <detect_part_info+0x86>
    }
  }
}
   1476d:	c9                   	leave  
   1476e:	c3                   	ret    

0001476f <identify_disk>:
 * @brief 检测磁盘
 * 
 * @param disk 
 * @return int 
 */
static int identify_disk(disk_t *disk) {
   1476f:	55                   	push   %ebp
   14770:	89 e5                	mov    %esp,%ebp
   14772:	81 ec 18 02 00 00    	sub    $0x218,%esp
    //将扇区数量和起始扇区即LBA lo,mid,hi 寄存器都设为0，并发送检测指令
    disk_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   14778:	68 ec 00 00 00       	push   $0xec
   1477d:	6a 00                	push   $0x0
   1477f:	6a 00                	push   $0x0
   14781:	ff 75 08             	push   0x8(%ebp)
   14784:	e8 b0 fc ff ff       	call   14439 <disk_send_cmd>
   14789:	83 c4 10             	add    $0x10,%esp

    //读取状态寄存器判断是否出错，不出错则存在磁盘
    int err = inb(DISK_STATUS(disk));
   1478c:	8b 45 08             	mov    0x8(%ebp),%eax
   1478f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14793:	83 c0 07             	add    $0x7,%eax
   14796:	0f b7 c0             	movzwl %ax,%eax
   14799:	50                   	push   %eax
   1479a:	e8 1c fc ff ff       	call   143bb <inb>
   1479f:	83 c4 04             	add    $0x4,%esp
   147a2:	0f b6 c0             	movzbl %al,%eax
   147a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   147a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   147ac:	75 1e                	jne    147cc <identify_disk+0x5d>
        log_printf("%s doesn't exist", disk->name);
   147ae:	8b 45 08             	mov    0x8(%ebp),%eax
   147b1:	83 ec 08             	sub    $0x8,%esp
   147b4:	50                   	push   %eax
   147b5:	68 d7 a1 01 00       	push   $0x1a1d7
   147ba:	e8 61 4d 00 00       	call   19520 <log_printf>
   147bf:	83 c4 10             	add    $0x10,%esp
        return -1;
   147c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147c7:	e9 ca 00 00 00       	jmp    14896 <identify_disk+0x127>
    }

    //等待磁盘数据就绪
    err = disk_wait_data(disk);
   147cc:	83 ec 0c             	sub    $0xc,%esp
   147cf:	ff 75 08             	push   0x8(%ebp)
   147d2:	e8 34 fe ff ff       	call   1460b <disk_wait_data>
   147d7:	83 c4 10             	add    $0x10,%esp
   147da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   147dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   147e1:	79 1e                	jns    14801 <identify_disk+0x92>
        log_printf("disk[%s]: read failed", disk->name);
   147e3:	8b 45 08             	mov    0x8(%ebp),%eax
   147e6:	83 ec 08             	sub    $0x8,%esp
   147e9:	50                   	push   %eax
   147ea:	68 e8 a1 01 00       	push   $0x1a1e8
   147ef:	e8 2c 4d 00 00       	call   19520 <log_printf>
   147f4:	83 c4 10             	add    $0x10,%esp
        return -1;
   147f7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147fc:	e9 95 00 00 00       	jmp    14896 <identify_disk+0x127>
    }

    //磁盘已准备好256个2字节的数据，其中包含了该磁盘的信息
    //用来响应 DISK_CMD_IDENTIFY 指令
    uint16_t buf[256];
    disk_read_data(disk, buf, sizeof(buf));
   14801:	83 ec 04             	sub    $0x4,%esp
   14804:	68 00 02 00 00       	push   $0x200
   14809:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   1480f:	50                   	push   %eax
   14810:	ff 75 08             	push   0x8(%ebp)
   14813:	e8 51 fd ff ff       	call   14569 <disk_read_data>
   14818:	83 c4 10             	add    $0x10,%esp

    //第100 到 103个数据，一共64位，保存了该磁盘的扇区总数量
    disk->sector_count = *(uint32_t *)(buf + 100);
   1481b:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14821:	05 c8 00 00 00       	add    $0xc8,%eax
   14826:	8b 00                	mov    (%eax),%eax
   14828:	89 c2                	mov    %eax,%edx
   1482a:	8b 45 08             	mov    0x8(%ebp),%eax
   1482d:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;
   14830:	8b 45 08             	mov    0x8(%ebp),%eax
   14833:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    //初始化磁盘分区信息
    //用partinfo将整个磁盘视为一个大分区
    partinfo_t *part_info = disk->partinfo + 0;
   1483a:	8b 45 08             	mov    0x8(%ebp),%eax
   1483d:	83 c0 30             	add    $0x30,%eax
   14840:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part_info->disk = disk;
   14843:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14846:	8b 55 08             	mov    0x8(%ebp),%edx
   14849:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part_info->name, "%s%d", disk->name, 0);
   1484c:	8b 55 08             	mov    0x8(%ebp),%edx
   1484f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14852:	6a 00                	push   $0x0
   14854:	52                   	push   %edx
   14855:	68 d2 a1 01 00       	push   $0x1a1d2
   1485a:	50                   	push   %eax
   1485b:	e8 88 45 00 00       	call   18de8 <kernel_sprintf>
   14860:	83 c4 10             	add    $0x10,%esp
    part_info->start_sector = 0;
   14863:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14866:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part_info->total_sectors = disk->sector_count;
   1486d:	8b 45 08             	mov    0x8(%ebp),%eax
   14870:	8b 50 2c             	mov    0x2c(%eax),%edx
   14873:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14876:	89 50 2c             	mov    %edx,0x2c(%eax)
    part_info->type = FS_INVALID;
   14879:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1487c:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    //读取并检测磁盘的分区表信息
    detect_part_info(disk);
   14883:	83 ec 0c             	sub    $0xc,%esp
   14886:	ff 75 08             	push   0x8(%ebp)
   14889:	e8 cc fd ff ff       	call   1465a <detect_part_info>
   1488e:	83 c4 10             	add    $0x10,%esp

    return 0;
   14891:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14896:	c9                   	leave  
   14897:	c3                   	ret    

00014898 <print_disk_info>:
/**
 * @brief 打印磁盘相关信息
 * 
 * @param disk 
 */
static void print_disk_info(disk_t *disk) {
   14898:	55                   	push   %ebp
   14899:	89 e5                	mov    %esp,%ebp
   1489b:	53                   	push   %ebx
   1489c:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s\n", disk->name);
   1489f:	8b 45 08             	mov    0x8(%ebp),%eax
   148a2:	83 ec 08             	sub    $0x8,%esp
   148a5:	50                   	push   %eax
   148a6:	68 fe a1 01 00       	push   $0x1a1fe
   148ab:	e8 70 4c 00 00       	call   19520 <log_printf>
   148b0:	83 c4 10             	add    $0x10,%esp
    log_printf("\tport base: %x\n", disk->port_base);
   148b3:	8b 45 08             	mov    0x8(%ebp),%eax
   148b6:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   148ba:	0f b7 c0             	movzwl %ax,%eax
   148bd:	83 ec 08             	sub    $0x8,%esp
   148c0:	50                   	push   %eax
   148c1:	68 02 a2 01 00       	push   $0x1a202
   148c6:	e8 55 4c 00 00       	call   19520 <log_printf>
   148cb:	83 c4 10             	add    $0x10,%esp
    log_printf("\ttotal size: %d m\n", disk->sector_count * disk->sector_size / (1024*1024));
   148ce:	8b 45 08             	mov    0x8(%ebp),%eax
   148d1:	8b 50 2c             	mov    0x2c(%eax),%edx
   148d4:	8b 45 08             	mov    0x8(%ebp),%eax
   148d7:	8b 40 28             	mov    0x28(%eax),%eax
   148da:	0f af c2             	imul   %edx,%eax
   148dd:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   148e3:	85 c0                	test   %eax,%eax
   148e5:	0f 48 c2             	cmovs  %edx,%eax
   148e8:	c1 f8 14             	sar    $0x14,%eax
   148eb:	83 ec 08             	sub    $0x8,%esp
   148ee:	50                   	push   %eax
   148ef:	68 12 a2 01 00       	push   $0x1a212
   148f4:	e8 27 4c 00 00       	call   19520 <log_printf>
   148f9:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   148fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14903:	eb 4e                	jmp    14953 <print_disk_info+0xbb>
      partinfo_t *part_info = disk->partinfo + i;
   14905:	8b 45 08             	mov    0x8(%ebp),%eax
   14908:	8d 48 30             	lea    0x30(%eax),%ecx
   1490b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1490e:	89 d0                	mov    %edx,%eax
   14910:	01 c0                	add    %eax,%eax
   14912:	01 d0                	add    %edx,%eax
   14914:	c1 e0 04             	shl    $0x4,%eax
   14917:	01 c8                	add    %ecx,%eax
   14919:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if (part_info->type != FS_INVALID) {
   1491c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1491f:	8b 40 24             	mov    0x24(%eax),%eax
   14922:	85 c0                	test   %eax,%eax
   14924:	74 29                	je     1494f <print_disk_info+0xb7>
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   14926:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14929:	8b 58 2c             	mov    0x2c(%eax),%ebx
   1492c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1492f:	8b 48 28             	mov    0x28(%eax),%ecx
            part_info->name, part_info->type, part_info->start_sector, 
   14932:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14935:	8b 50 24             	mov    0x24(%eax),%edx
   14938:	8b 45 f0             	mov    -0x10(%ebp),%eax
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   1493b:	83 ec 0c             	sub    $0xc,%esp
   1493e:	53                   	push   %ebx
   1493f:	51                   	push   %ecx
   14940:	52                   	push   %edx
   14941:	50                   	push   %eax
   14942:	68 28 a2 01 00       	push   $0x1a228
   14947:	e8 d4 4b 00 00       	call   19520 <log_printf>
   1494c:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   1494f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14953:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   14957:	7e ac                	jle    14905 <print_disk_info+0x6d>
            part_info->total_sectors);
      }
    }
}
   14959:	90                   	nop
   1495a:	90                   	nop
   1495b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1495e:	c9                   	leave  
   1495f:	c3                   	ret    

00014960 <disk_init>:

/**
 * @brief 初始化系统磁盘信息
 *
 */
void disk_init(void) {
   14960:	55                   	push   %ebp
   14961:	89 e5                	mov    %esp,%ebp
   14963:	83 ec 18             	sub    $0x18,%esp
  log_printf("Check disk...\n");
   14966:	83 ec 0c             	sub    $0xc,%esp
   14969:	68 5b a2 01 00       	push   $0x1a25b
   1496e:	e8 ad 4b 00 00       	call   19520 <log_printf>
   14973:	83 c4 10             	add    $0x10,%esp

  kernel_memset(disk_table, 0, sizeof(disk_table));
   14976:	83 ec 04             	sub    $0x4,%esp
   14979:	68 50 02 00 00       	push   $0x250
   1497e:	6a 00                	push   $0x0
   14980:	68 60 f3 04 00       	push   $0x4f360
   14985:	e8 99 43 00 00       	call   18d23 <kernel_memset>
   1498a:	83 c4 10             	add    $0x10,%esp

  //初始化磁盘锁与操作信号量
  mutex_init(&mutex);
   1498d:	83 ec 0c             	sub    $0xc,%esp
   14990:	68 b0 f5 04 00       	push   $0x4f5b0
   14995:	e8 f2 36 00 00       	call   1808c <mutex_init>
   1499a:	83 c4 10             	add    $0x10,%esp
  sem_init(&op_sem, 0);
   1499d:	83 ec 08             	sub    $0x8,%esp
   149a0:	6a 00                	push   $0x0
   149a2:	68 c4 f5 04 00       	push   $0x4f5c4
   149a7:	e8 1f 39 00 00       	call   182cb <sem_init>
   149ac:	83 c4 10             	add    $0x10,%esp

  // 遍历并初始化化primary信道上的磁盘信息
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   149af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149b6:	e9 90 00 00 00       	jmp    14a4b <disk_init+0xeb>
    disk_t *disk = disk_table + i;
   149bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149be:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   149c4:	05 60 f3 04 00       	add    $0x4f360,%eax
   149c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kernel_sprintf(disk->name, "sd%c", i + 'a');
   149cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149cf:	8d 50 61             	lea    0x61(%eax),%edx
   149d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149d5:	83 ec 04             	sub    $0x4,%esp
   149d8:	52                   	push   %edx
   149d9:	68 6a a2 01 00       	push   $0x1a26a
   149de:	50                   	push   %eax
   149df:	e8 04 44 00 00       	call   18de8 <kernel_sprintf>
   149e4:	83 c4 10             	add    $0x10,%esp
    disk->drive = i == 0 ? DISK_MASTER : DISK_SLAVE;
   149e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   149eb:	75 07                	jne    149f4 <disk_init+0x94>
   149ed:	ba 00 00 00 00       	mov    $0x0,%edx
   149f2:	eb 05                	jmp    149f9 <disk_init+0x99>
   149f4:	ba 10 00 00 00       	mov    $0x10,%edx
   149f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149fc:	89 50 20             	mov    %edx,0x20(%eax)
    disk->port_base = IOBASE_PRIMARY;
   149ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a02:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
    disk->mutex = &mutex;
   14a08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a0b:	c7 80 20 01 00 00 b0 	movl   $0x4f5b0,0x120(%eax)
   14a12:	f5 04 00 
    disk->op_sem = &op_sem;
   14a15:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a18:	c7 80 24 01 00 00 c4 	movl   $0x4f5c4,0x124(%eax)
   14a1f:	f5 04 00 

    int err = identify_disk(disk);
   14a22:	83 ec 0c             	sub    $0xc,%esp
   14a25:	ff 75 f0             	push   -0x10(%ebp)
   14a28:	e8 42 fd ff ff       	call   1476f <identify_disk>
   14a2d:	83 c4 10             	add    $0x10,%esp
   14a30:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err == 0) {
   14a33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14a37:	75 0e                	jne    14a47 <disk_init+0xe7>
      print_disk_info(disk);
   14a39:	83 ec 0c             	sub    $0xc,%esp
   14a3c:	ff 75 f0             	push   -0x10(%ebp)
   14a3f:	e8 54 fe ff ff       	call   14898 <print_disk_info>
   14a44:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   14a47:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a4b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a4f:	0f 8e 66 ff ff ff    	jle    149bb <disk_init+0x5b>
    }
  }
}
   14a55:	90                   	nop
   14a56:	90                   	nop
   14a57:	c9                   	leave  
   14a58:	c3                   	ret    

00014a59 <disk_open>:
 * @brief 打开磁盘设备
 * 
 * @param dev 
 * @return int 
 */
int disk_open (device_t *dev) {
   14a59:	55                   	push   %ebp
   14a5a:	89 e5                	mov    %esp,%ebp
   14a5c:	83 ec 18             	sub    $0x18,%esp
  //对磁盘的编号为 a , b
  //对扇区的编号为0, 1, 2, 3, 4, 0分区包含整个磁盘
  //设备索引编号0xa0表示 a磁盘上的0分区

  //获取磁盘在系统磁盘表中的索引
  int disk_index = (dev->dev_index >> 4) - 0xa;   
   14a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   14a62:	8b 40 08             	mov    0x8(%eax),%eax
   14a65:	c1 f8 04             	sar    $0x4,%eax
   14a68:	83 e8 0a             	sub    $0xa,%eax
   14a6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //获取分区的索引
  int part_index = dev->dev_index & 0xf;
   14a6e:	8b 45 08             	mov    0x8(%ebp),%eax
   14a71:	8b 40 08             	mov    0x8(%eax),%eax
   14a74:	83 e0 0f             	and    $0xf,%eax
   14a77:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (disk_index >= DISK_CNT || part_index >= DISK_PRIMARY_PART_CNT) {
   14a7a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a7e:	7f 06                	jg     14a86 <disk_open+0x2d>
   14a80:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14a84:	7e 21                	jle    14aa7 <disk_open+0x4e>
      log_printf("device index error: %d\n", dev->dev_index);
   14a86:	8b 45 08             	mov    0x8(%ebp),%eax
   14a89:	8b 40 08             	mov    0x8(%eax),%eax
   14a8c:	83 ec 08             	sub    $0x8,%esp
   14a8f:	50                   	push   %eax
   14a90:	68 6f a2 01 00       	push   $0x1a26f
   14a95:	e8 86 4a 00 00       	call   19520 <log_printf>
   14a9a:	83 c4 10             	add    $0x10,%esp
      return -1;
   14a9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14aa2:	e9 9e 00 00 00       	jmp    14b45 <disk_open+0xec>
  }

  //获取磁盘对象
  disk_t *disk = disk_table + disk_index;
   14aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14aaa:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14ab0:	05 60 f3 04 00       	add    $0x4f360,%eax
   14ab5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk->sector_count == 0) {
   14ab8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14abb:	8b 40 2c             	mov    0x2c(%eax),%eax
   14abe:	85 c0                	test   %eax,%eax
   14ac0:	75 1e                	jne    14ae0 <disk_open+0x87>
    log_printf("disk not exist, device: sd%d", dev->dev_index);
   14ac2:	8b 45 08             	mov    0x8(%ebp),%eax
   14ac5:	8b 40 08             	mov    0x8(%eax),%eax
   14ac8:	83 ec 08             	sub    $0x8,%esp
   14acb:	50                   	push   %eax
   14acc:	68 87 a2 01 00       	push   $0x1a287
   14ad1:	e8 4a 4a 00 00       	call   19520 <log_printf>
   14ad6:	83 c4 10             	add    $0x10,%esp
    return -1;
   14ad9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ade:	eb 65                	jmp    14b45 <disk_open+0xec>
  }

  //获取分区对象
  partinfo_t *part_info = disk->partinfo + part_index;
   14ae0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ae3:	8d 48 30             	lea    0x30(%eax),%ecx
   14ae6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14ae9:	89 d0                	mov    %edx,%eax
   14aeb:	01 c0                	add    %eax,%eax
   14aed:	01 d0                	add    %edx,%eax
   14aef:	c1 e0 04             	shl    $0x4,%eax
   14af2:	01 c8                	add    %ecx,%eax
   14af4:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (part_info->total_sectors == 0) {
   14af7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14afa:	8b 40 2c             	mov    0x2c(%eax),%eax
   14afd:	85 c0                	test   %eax,%eax
   14aff:	75 17                	jne    14b18 <disk_open+0xbf>
    log_printf("part not exist\n");
   14b01:	83 ec 0c             	sub    $0xc,%esp
   14b04:	68 a4 a2 01 00       	push   $0x1a2a4
   14b09:	e8 12 4a 00 00       	call   19520 <log_printf>
   14b0e:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b16:	eb 2d                	jmp    14b45 <disk_open+0xec>
  }

  //记录分区信息
  dev->data = (void *)part_info;
   14b18:	8b 45 08             	mov    0x8(%ebp),%eax
   14b1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14b1e:	89 50 0c             	mov    %edx,0xc(%eax)

  //注册中断处理程序,并开启中断
  idt_install(IRQ14_HARDDISK_PRIMARY, (idt_handler_t)exception_handler_primary_disk);
   14b21:	83 ec 08             	sub    $0x8,%esp
   14b24:	68 b5 02 01 00       	push   $0x102b5
   14b29:	6a 2e                	push   $0x2e
   14b2b:	e8 8d e4 ff ff       	call   12fbd <idt_install>
   14b30:	83 c4 10             	add    $0x10,%esp
  idt_enable(IRQ14_HARDDISK_PRIMARY);
   14b33:	83 ec 0c             	sub    $0xc,%esp
   14b36:	6a 2e                	push   $0x2e
   14b38:	e8 0b e7 ff ff       	call   13248 <idt_enable>
   14b3d:	83 c4 10             	add    $0x10,%esp

  return 0;
   14b40:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b45:	c9                   	leave  
   14b46:	c3                   	ret    

00014b47 <disk_read>:
 * @param addr 读取的起始扇区相对于dev指定分区的偏移量
 * @param buf 读取缓冲区
 * @param size 读取扇区数
 * @return * int 
 */
int disk_read(device_t *dev, int addr, char *buf, int size) {
   14b47:	55                   	push   %ebp
   14b48:	89 e5                	mov    %esp,%ebp
   14b4a:	83 ec 18             	sub    $0x18,%esp

  //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14b4d:	8b 45 08             	mov    0x8(%ebp),%eax
   14b50:	8b 40 0c             	mov    0xc(%eax),%eax
   14b53:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14b56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14b5a:	75 21                	jne    14b7d <disk_read+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   14b5f:	8b 40 08             	mov    0x8(%eax),%eax
   14b62:	83 ec 08             	sub    $0x8,%esp
   14b65:	50                   	push   %eax
   14b66:	68 b4 a2 01 00       	push   $0x1a2b4
   14b6b:	e8 b0 49 00 00       	call   19520 <log_printf>
   14b70:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b78:	e9 0c 01 00 00       	jmp    14c89 <disk_read+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b80:	8b 40 20             	mov    0x20(%eax),%eax
   14b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14b86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14b8a:	75 21                	jne    14bad <disk_read+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14b8c:	8b 45 08             	mov    0x8(%ebp),%eax
   14b8f:	8b 40 08             	mov    0x8(%eax),%eax
   14b92:	83 ec 08             	sub    $0x8,%esp
   14b95:	50                   	push   %eax
   14b96:	68 d5 a2 01 00       	push   $0x1a2d5
   14b9b:	e8 80 49 00 00       	call   19520 <log_printf>
   14ba0:	83 c4 10             	add    $0x10,%esp
    return -1;
   14ba3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ba8:	e9 dc 00 00 00       	jmp    14c89 <disk_read+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14bad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bb0:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14bb6:	83 ec 0c             	sub    $0xc,%esp
   14bb9:	50                   	push   %eax
   14bba:	e8 1a 35 00 00       	call   180d9 <mutex_lock>
   14bbf:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14bc2:	e8 ea cd ff ff       	call   119b1 <task_current>
   14bc7:	85 c0                	test   %eax,%eax
   14bc9:	74 07                	je     14bd2 <disk_read+0x8b>
    task_on_op = 1; //将标志位置1，表示用户在执行磁盘操作
   14bcb:	c6 05 d4 f5 04 00 01 	movb   $0x1,0x4f5d4
  }

  //发送读取指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_READ);
   14bd2:	8b 45 14             	mov    0x14(%ebp),%eax
   14bd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14bd8:	8b 4a 28             	mov    0x28(%edx),%ecx
   14bdb:	8b 55 0c             	mov    0xc(%ebp),%edx
   14bde:	01 ca                	add    %ecx,%edx
   14be0:	6a 24                	push   $0x24
   14be2:	50                   	push   %eax
   14be3:	52                   	push   %edx
   14be4:	ff 75 ec             	push   -0x14(%ebp)
   14be7:	e8 4d f8 ff ff       	call   14439 <disk_send_cmd>
   14bec:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14bef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14bf6:	eb 71                	jmp    14c69 <disk_read+0x122>
    //等待磁盘的中断，代表准备就绪
    sem_wait(disk->op_sem);
   14bf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bfb:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14c01:	83 ec 0c             	sub    $0xc,%esp
   14c04:	50                   	push   %eax
   14c05:	e8 03 37 00 00       	call   1830d <sem_wait>
   14c0a:	83 c4 10             	add    $0x10,%esp

    //因为信号量已经让进程等待了，所以此处只是检测是否发生错误
    int err = disk_wait_data(disk);
   14c0d:	83 ec 0c             	sub    $0xc,%esp
   14c10:	ff 75 ec             	push   -0x14(%ebp)
   14c13:	e8 f3 f9 ff ff       	call   1460b <disk_wait_data>
   14c18:	83 c4 10             	add    $0x10,%esp
   14c1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14c1e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14c22:	79 20                	jns    14c44 <disk_read+0xfd>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14c24:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14c27:	ff 75 14             	push   0x14(%ebp)
   14c2a:	ff 75 0c             	push   0xc(%ebp)
   14c2d:	50                   	push   %eax
   14c2e:	68 ec a2 01 00       	push   $0x1a2ec
   14c33:	e8 e8 48 00 00       	call   19520 <log_printf>
   14c38:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14c3b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14c42:	eb 2d                	jmp    14c71 <disk_read+0x12a>
    }

    //磁盘每次读取都是按一个扇区的大小进行读取
    disk_read_data(disk, buf, disk->sector_size);
   14c44:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c47:	8b 40 28             	mov    0x28(%eax),%eax
   14c4a:	83 ec 04             	sub    $0x4,%esp
   14c4d:	50                   	push   %eax
   14c4e:	ff 75 10             	push   0x10(%ebp)
   14c51:	ff 75 ec             	push   -0x14(%ebp)
   14c54:	e8 10 f9 ff ff       	call   14569 <disk_read_data>
   14c59:	83 c4 10             	add    $0x10,%esp
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14c5c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14c60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c63:	8b 40 28             	mov    0x28(%eax),%eax
   14c66:	01 45 10             	add    %eax,0x10(%ebp)
   14c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c6c:	3b 45 14             	cmp    0x14(%ebp),%eax
   14c6f:	7c 87                	jl     14bf8 <disk_read+0xb1>
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14c71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c74:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14c7a:	83 ec 0c             	sub    $0xc,%esp
   14c7d:	50                   	push   %eax
   14c7e:	e8 fc 34 00 00       	call   1817f <mutex_unlock>
   14c83:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14c89:	c9                   	leave  
   14c8a:	c3                   	ret    

00014c8b <disk_write>:
 * @param addr 
 * @param buf 
 * @param size 
 * @return int 
 */
int disk_write(device_t *dev, int addr, char *buf, int size) {
   14c8b:	55                   	push   %ebp
   14c8c:	89 e5                	mov    %esp,%ebp
   14c8e:	83 ec 18             	sub    $0x18,%esp

   //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14c91:	8b 45 08             	mov    0x8(%ebp),%eax
   14c94:	8b 40 0c             	mov    0xc(%eax),%eax
   14c97:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14c9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14c9e:	75 21                	jne    14cc1 <disk_write+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   14ca3:	8b 40 08             	mov    0x8(%eax),%eax
   14ca6:	83 ec 08             	sub    $0x8,%esp
   14ca9:	50                   	push   %eax
   14caa:	68 b4 a2 01 00       	push   $0x1a2b4
   14caf:	e8 6c 48 00 00       	call   19520 <log_printf>
   14cb4:	83 c4 10             	add    $0x10,%esp
    return -1;
   14cb7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14cbc:	e9 0c 01 00 00       	jmp    14dcd <disk_write+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cc4:	8b 40 20             	mov    0x20(%eax),%eax
   14cc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14cca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14cce:	75 21                	jne    14cf1 <disk_write+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14cd0:	8b 45 08             	mov    0x8(%ebp),%eax
   14cd3:	8b 40 08             	mov    0x8(%eax),%eax
   14cd6:	83 ec 08             	sub    $0x8,%esp
   14cd9:	50                   	push   %eax
   14cda:	68 d5 a2 01 00       	push   $0x1a2d5
   14cdf:	e8 3c 48 00 00       	call   19520 <log_printf>
   14ce4:	83 c4 10             	add    $0x10,%esp
    return -1;
   14ce7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14cec:	e9 dc 00 00 00       	jmp    14dcd <disk_write+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14cf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14cf4:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14cfa:	83 ec 0c             	sub    $0xc,%esp
   14cfd:	50                   	push   %eax
   14cfe:	e8 d6 33 00 00       	call   180d9 <mutex_lock>
   14d03:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14d06:	e8 a6 cc ff ff       	call   119b1 <task_current>
   14d0b:	85 c0                	test   %eax,%eax
   14d0d:	74 07                	je     14d16 <disk_write+0x8b>
    task_on_op = 1; //将标志位置1，表示用户进程在执行磁盘操作
   14d0f:	c6 05 d4 f5 04 00 01 	movb   $0x1,0x4f5d4
  }

  //发送写入指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_WRITE);
   14d16:	8b 45 14             	mov    0x14(%ebp),%eax
   14d19:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14d1c:	8b 4a 28             	mov    0x28(%edx),%ecx
   14d1f:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d22:	01 ca                	add    %ecx,%edx
   14d24:	6a 34                	push   $0x34
   14d26:	50                   	push   %eax
   14d27:	52                   	push   %edx
   14d28:	ff 75 ec             	push   -0x14(%ebp)
   14d2b:	e8 09 f7 ff ff       	call   14439 <disk_send_cmd>
   14d30:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14d33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14d3a:	eb 71                	jmp    14dad <disk_write+0x122>
    //磁盘每次写入都是按一个扇区的大小进行写入
    disk_write_data(disk, buf, disk->sector_size);
   14d3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d3f:	8b 40 28             	mov    0x28(%eax),%eax
   14d42:	83 ec 04             	sub    $0x4,%esp
   14d45:	50                   	push   %eax
   14d46:	ff 75 10             	push   0x10(%ebp)
   14d49:	ff 75 ec             	push   -0x14(%ebp)
   14d4c:	e8 69 f8 ff ff       	call   145ba <disk_write_data>
   14d51:	83 c4 10             	add    $0x10,%esp
    //等待磁盘的中断，代表写入完成
    sem_wait(disk->op_sem);
   14d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d57:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14d5d:	83 ec 0c             	sub    $0xc,%esp
   14d60:	50                   	push   %eax
   14d61:	e8 a7 35 00 00       	call   1830d <sem_wait>
   14d66:	83 c4 10             	add    $0x10,%esp
    

    //检测是否发生错误
    int err = disk_wait_data(disk);
   14d69:	83 ec 0c             	sub    $0xc,%esp
   14d6c:	ff 75 ec             	push   -0x14(%ebp)
   14d6f:	e8 97 f8 ff ff       	call   1460b <disk_wait_data>
   14d74:	83 c4 10             	add    $0x10,%esp
   14d77:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14d7a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14d7e:	79 20                	jns    14da0 <disk_write+0x115>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14d83:	ff 75 14             	push   0x14(%ebp)
   14d86:	ff 75 0c             	push   0xc(%ebp)
   14d89:	50                   	push   %eax
   14d8a:	68 ec a2 01 00       	push   $0x1a2ec
   14d8f:	e8 8c 47 00 00       	call   19520 <log_printf>
   14d94:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14d97:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14d9e:	eb 15                	jmp    14db5 <disk_write+0x12a>
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14da0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14da4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14da7:	8b 40 28             	mov    0x28(%eax),%eax
   14daa:	01 45 10             	add    %eax,0x10(%ebp)
   14dad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14db0:	3b 45 14             	cmp    0x14(%ebp),%eax
   14db3:	7c 87                	jl     14d3c <disk_write+0xb1>
    } 
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14db5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14db8:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14dbe:	83 ec 0c             	sub    $0xc,%esp
   14dc1:	50                   	push   %eax
   14dc2:	e8 b8 33 00 00       	call   1817f <mutex_unlock>
   14dc7:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14dcd:	c9                   	leave  
   14dce:	c3                   	ret    

00014dcf <disk_control>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int disk_control(device_t *dev, int cmd, int arg0, int arg1) {
   14dcf:	55                   	push   %ebp
   14dd0:	89 e5                	mov    %esp,%ebp

  return -1;
   14dd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14dd7:	5d                   	pop    %ebp
   14dd8:	c3                   	ret    

00014dd9 <do_handler_primary_disk>:
 * @brief 磁盘的中断处理函数
 *        磁盘执行完读操作或写操作后会触发中断
 * 
 * @param frame 
 */
void do_handler_primary_disk(exception_frame_t *frame) {
   14dd9:	55                   	push   %ebp
   14dda:	89 e5                	mov    %esp,%ebp
   14ddc:	83 ec 08             	sub    $0x8,%esp
  //中断抢占成功，发送eoi信号，清除中断请求
  pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14ddf:	83 ec 0c             	sub    $0xc,%esp
   14de2:	6a 2e                	push   $0x2e
   14de4:	e8 a1 e5 ff ff       	call   1338a <pic_send_eoi>
   14de9:	83 c4 10             	add    $0x10,%esp

  //当用户程序触发磁盘中断时，唤醒等待进程
  if (task_on_op) {
   14dec:	0f b6 05 d4 f5 04 00 	movzbl 0x4f5d4,%eax
   14df3:	84 c0                	test   %al,%al
   14df5:	74 10                	je     14e07 <do_handler_primary_disk+0x2e>
    //磁盘数据准备就绪或磁盘写入完成，唤醒等待进程
    sem_notify(&op_sem);
   14df7:	83 ec 0c             	sub    $0xc,%esp
   14dfa:	68 c4 f5 04 00       	push   $0x4f5c4
   14dff:	e8 89 35 00 00       	call   1838d <sem_notify>
   14e04:	83 c4 10             	add    $0x10,%esp
  }
}
   14e07:	90                   	nop
   14e08:	c9                   	leave  
   14e09:	c3                   	ret    

00014e0a <disk_close>:
/**
 * @brief 关闭磁盘
 * 
 * @param dev 
 */
void disk_close(device_t *dev) {
   14e0a:	55                   	push   %ebp
   14e0b:	89 e5                	mov    %esp,%ebp

}
   14e0d:	90                   	nop
   14e0e:	5d                   	pop    %ebp
   14e0f:	c3                   	ret    

00014e10 <inb>:
static inline uint8_t inb(uint16_t port) {
   14e10:	55                   	push   %ebp
   14e11:	89 e5                	mov    %esp,%ebp
   14e13:	83 ec 14             	sub    $0x14,%esp
   14e16:	8b 45 08             	mov    0x8(%ebp),%eax
   14e19:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14e1d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14e21:	89 c2                	mov    %eax,%edx
   14e23:	ec                   	in     (%dx),%al
   14e24:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14e27:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14e2b:	c9                   	leave  
   14e2c:	c3                   	ret    

00014e2d <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   14e2d:	55                   	push   %ebp
   14e2e:	89 e5                	mov    %esp,%ebp
   14e30:	83 ec 04             	sub    $0x4,%esp
   14e33:	8b 45 08             	mov    0x8(%ebp),%eax
   14e36:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14e39:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14e3d:	f7 d0                	not    %eax
   14e3f:	c0 e8 07             	shr    $0x7,%al
   14e42:	0f b6 c0             	movzbl %al,%eax
}
   14e45:	c9                   	leave  
   14e46:	c3                   	ret    

00014e47 <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   14e47:	55                   	push   %ebp
   14e48:	89 e5                	mov    %esp,%ebp
   14e4a:	83 ec 04             	sub    $0x4,%esp
   14e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   14e50:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   14e53:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14e57:	83 e0 7f             	and    $0x7f,%eax
}
   14e5a:	c9                   	leave  
   14e5b:	c3                   	ret    

00014e5c <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   14e5c:	55                   	push   %ebp
   14e5d:	89 e5                	mov    %esp,%ebp
   14e5f:	83 ec 28             	sub    $0x28,%esp
   14e62:	8b 45 08             	mov    0x8(%ebp),%eax
   14e65:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14e68:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14e6c:	83 e8 3b             	sub    $0x3b,%eax
   14e6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14e72:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14e79:	83 e0 20             	and    $0x20,%eax
   14e7c:	84 c0                	test   %al,%al
   14e7e:	75 0e                	jne    14e8e <do_fx_key+0x32>
   14e80:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14e87:	83 e0 40             	and    $0x40,%eax
   14e8a:	84 c0                	test   %al,%al
   14e8c:	74 0e                	je     14e9c <do_fx_key+0x40>
        tty_select(index);
   14e8e:	83 ec 0c             	sub    $0xc,%esp
   14e91:	ff 75 f4             	push   -0xc(%ebp)
   14e94:	e8 33 0a 00 00       	call   158cc <tty_select>
   14e99:	83 c4 10             	add    $0x10,%esp
    }
}
   14e9c:	90                   	nop
   14e9d:	c9                   	leave  
   14e9e:	c3                   	ret    

00014e9f <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   14e9f:	55                   	push   %ebp
   14ea0:	89 e5                	mov    %esp,%ebp
   14ea2:	83 ec 28             	sub    $0x28,%esp
   14ea5:	8b 45 08             	mov    0x8(%ebp),%eax
   14ea8:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   14eab:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14eaf:	50                   	push   %eax
   14eb0:	e8 92 ff ff ff       	call   14e47 <get_key>
   14eb5:	83 c4 04             	add    $0x4,%esp
   14eb8:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   14ebb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14ebf:	50                   	push   %eax
   14ec0:	e8 68 ff ff ff       	call   14e2d <is_make_code>
   14ec5:	83 c4 04             	add    $0x4,%esp
   14ec8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   14ecb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ecf:	83 e8 1d             	sub    $0x1d,%eax
   14ed2:	83 f8 3b             	cmp    $0x3b,%eax
   14ed5:	0f 87 06 01 00 00    	ja     14fe1 <do_normal_key+0x142>
   14edb:	8b 04 85 2c a5 01 00 	mov    0x1a52c(,%eax,4),%eax
   14ee2:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   14ee4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ee8:	0f 95 c0             	setne  %al
   14eeb:	c1 e0 07             	shl    $0x7,%eax
   14eee:	c0 f8 07             	sar    $0x7,%al
   14ef1:	83 e0 01             	and    $0x1,%eax
   14ef4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14efb:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f02:	83 e0 fb             	and    $0xfffffffb,%eax
   14f05:	09 d0                	or     %edx,%eax
   14f07:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;
   14f0c:	e9 ca 01 00 00       	jmp    150db <do_normal_key+0x23c>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14f11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f15:	0f 95 c0             	setne  %al
   14f18:	c1 e0 07             	shl    $0x7,%eax
   14f1b:	c0 f8 07             	sar    $0x7,%al
   14f1e:	83 e0 01             	and    $0x1,%eax
   14f21:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14f24:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f2b:	83 e0 fd             	and    $0xfffffffd,%eax
   14f2e:	09 d0                	or     %edx,%eax
   14f30:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;  
   14f35:	e9 a1 01 00 00       	jmp    150db <do_normal_key+0x23c>
        case KEY_CAPS:
            if (is_make) {
   14f3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f3e:	0f 84 90 01 00 00    	je     150d4 <do_normal_key+0x235>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   14f44:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f4b:	c1 e0 07             	shl    $0x7,%eax
   14f4e:	c0 f8 07             	sar    $0x7,%al
   14f51:	f7 d0                	not    %eax
   14f53:	c1 e0 07             	shl    $0x7,%eax
   14f56:	c0 f8 07             	sar    $0x7,%al
   14f59:	83 e0 01             	and    $0x1,%eax
   14f5c:	89 c2                	mov    %eax,%edx
   14f5e:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f65:	83 e0 fe             	and    $0xfffffffe,%eax
   14f68:	09 d0                	or     %edx,%eax
   14f6a:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            }
            break;
   14f6f:	e9 60 01 00 00       	jmp    150d4 <do_normal_key+0x235>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   14f74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f78:	0f 95 c0             	setne  %al
   14f7b:	c1 e0 07             	shl    $0x7,%eax
   14f7e:	c0 f8 07             	sar    $0x7,%al
   14f81:	83 e0 01             	and    $0x1,%eax
   14f84:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14f8b:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f92:	83 e0 f7             	and    $0xfffffff7,%eax
   14f95:	09 d0                	or     %edx,%eax
   14f97:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;
   14f9c:	e9 3a 01 00 00       	jmp    150db <do_normal_key+0x23c>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   14fa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14fa5:	0f 95 c0             	setne  %al
   14fa8:	c1 e0 07             	shl    $0x7,%eax
   14fab:	c0 f8 07             	sar    $0x7,%al
   14fae:	83 e0 01             	and    $0x1,%eax
   14fb1:	c1 e0 05             	shl    $0x5,%eax
   14fb4:	89 c2                	mov    %eax,%edx
   14fb6:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14fbd:	83 e0 df             	and    $0xffffffdf,%eax
   14fc0:	09 d0                	or     %edx,%eax
   14fc2:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;
   14fc7:	e9 0f 01 00 00       	jmp    150db <do_normal_key+0x23c>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   14fcc:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14fd0:	83 ec 0c             	sub    $0xc,%esp
   14fd3:	50                   	push   %eax
   14fd4:	e8 83 fe ff ff       	call   14e5c <do_fx_key>
   14fd9:	83 c4 10             	add    $0x10,%esp
            break;
   14fdc:	e9 fa 00 00 00       	jmp    150db <do_normal_key+0x23c>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   14fe1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14fe5:	0f 84 ec 00 00 00    	je     150d7 <do_normal_key+0x238>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14feb:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14ff2:	83 e0 04             	and    $0x4,%eax
   14ff5:	84 c0                	test   %al,%al
   14ff7:	75 0e                	jne    15007 <do_normal_key+0x168>
   14ff9:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   15000:	83 e0 02             	and    $0x2,%eax
   15003:	84 c0                	test   %al,%al
   15005:	74 11                	je     15018 <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   15007:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1500b:	0f b6 84 00 21 a3 01 	movzbl 0x1a321(%eax,%eax,1),%eax
   15012:	00 
   15013:	88 45 f7             	mov    %al,-0x9(%ebp)
   15016:	eb 0f                	jmp    15027 <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   15018:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1501c:	0f b6 84 00 20 a3 01 	movzbl 0x1a320(%eax,%eax,1),%eax
   15023:	00 
   15024:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }


                    //判断是否是进程退出指令
                    if (kbd_state.lctrl_press) {
   15027:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   1502e:	83 e0 20             	and    $0x20,%eax
   15031:	84 c0                	test   %al,%al
   15033:	74 4e                	je     15083 <do_normal_key+0x1e4>
                        if (key == 'c' || key == 'z') {
   15035:	80 7d f7 63          	cmpb   $0x63,-0x9(%ebp)
   15039:	74 06                	je     15041 <do_normal_key+0x1a2>
   1503b:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   1503f:	75 42                	jne    15083 <do_normal_key+0x1e4>
                            task_t *curr = task_current();
   15041:	e8 6b c9 ff ff       	call   119b1 <task_current>
   15046:	89 45 ec             	mov    %eax,-0x14(%ebp)
                            if (curr->state == TASK_RUNNING 
   15049:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1504c:	8b 00                	mov    (%eax),%eax
   1504e:	83 f8 01             	cmp    $0x1,%eax
   15051:	0f 85 83 00 00 00    	jne    150da <do_normal_key+0x23b>
                                && kernel_strncmp(curr->name, "empty_task", 10) != 0) {
   15057:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1505a:	83 c0 24             	add    $0x24,%eax
   1505d:	83 ec 04             	sub    $0x4,%esp
   15060:	6a 0a                	push   $0xa
   15062:	68 20 a5 01 00       	push   $0x1a520
   15067:	50                   	push   %eax
   15068:	e8 b1 3b 00 00       	call   18c1e <kernel_strncmp>
   1506d:	83 c4 10             	add    $0x10,%esp
   15070:	85 c0                	test   %eax,%eax
   15072:	74 66                	je     150da <do_normal_key+0x23b>
                                sys_exit(-9);
   15074:	83 ec 0c             	sub    $0xc,%esp
   15077:	6a f7                	push   $0xfffffff7
   15079:	e8 a9 d4 ff ff       	call   12527 <sys_exit>
   1507e:	83 c4 10             	add    $0x10,%esp
                            }
                            return;
   15081:	eb 57                	jmp    150da <do_normal_key+0x23b>
                        }
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   15083:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   1508a:	83 e0 01             	and    $0x1,%eax
   1508d:	84 c0                	test   %al,%al
   1508f:	74 2e                	je     150bf <do_normal_key+0x220>
                        if ((key >= 'A' && key <= 'Z')) {
   15091:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   15095:	7e 12                	jle    150a9 <do_normal_key+0x20a>
   15097:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   1509b:	7f 0c                	jg     150a9 <do_normal_key+0x20a>
                            key = key - 'A' + 'a';
   1509d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   150a1:	83 c0 20             	add    $0x20,%eax
   150a4:	88 45 f7             	mov    %al,-0x9(%ebp)
   150a7:	eb 16                	jmp    150bf <do_normal_key+0x220>
                        } else if (key >= 'a' && key <= 'z') {
   150a9:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   150ad:	7e 10                	jle    150bf <do_normal_key+0x220>
   150af:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   150b3:	7f 0a                	jg     150bf <do_normal_key+0x220>
                            key = key -'a' + 'A';
   150b5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   150b9:	83 e8 20             	sub    $0x20,%eax
   150bc:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }

        
                tty_in(key);
   150bf:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   150c3:	83 ec 0c             	sub    $0xc,%esp
   150c6:	50                   	push   %eax
   150c7:	e8 9a 07 00 00       	call   15866 <tty_in>
   150cc:	83 c4 10             	add    $0x10,%esp
            }
            break;
   150cf:	eb 06                	jmp    150d7 <do_normal_key+0x238>
            break;
   150d1:	90                   	nop
   150d2:	eb 07                	jmp    150db <do_normal_key+0x23c>
            break;
   150d4:	90                   	nop
   150d5:	eb 04                	jmp    150db <do_normal_key+0x23c>
            break;
   150d7:	90                   	nop
   150d8:	eb 01                	jmp    150db <do_normal_key+0x23c>
                            return;
   150da:	90                   	nop
    }
}
   150db:	c9                   	leave  
   150dc:	c3                   	ret    

000150dd <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   150dd:	55                   	push   %ebp
   150de:	89 e5                	mov    %esp,%ebp
   150e0:	83 ec 14             	sub    $0x14,%esp
   150e3:	8b 45 08             	mov    0x8(%ebp),%eax
   150e6:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   150e9:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   150ed:	50                   	push   %eax
   150ee:	e8 54 fd ff ff       	call   14e47 <get_key>
   150f3:	83 c4 04             	add    $0x4,%esp
   150f6:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   150f9:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   150fd:	50                   	push   %eax
   150fe:	e8 2a fd ff ff       	call   14e2d <is_make_code>
   15103:	83 c4 04             	add    $0x4,%esp
   15106:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   15109:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   1510d:	83 f8 1d             	cmp    $0x1d,%eax
   15110:	74 07                	je     15119 <do_e0_key+0x3c>
   15112:	83 f8 38             	cmp    $0x38,%eax
   15115:	74 2a                	je     15141 <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   15117:	eb 4f                	jmp    15168 <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   15119:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   1511d:	0f 95 c0             	setne  %al
   15120:	c1 e0 07             	shl    $0x7,%eax
   15123:	c0 f8 07             	sar    $0x7,%al
   15126:	83 e0 01             	and    $0x1,%eax
   15129:	c1 e0 06             	shl    $0x6,%eax
   1512c:	89 c2                	mov    %eax,%edx
   1512e:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   15135:	83 e0 bf             	and    $0xffffffbf,%eax
   15138:	09 d0                	or     %edx,%eax
   1513a:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
        break;
   1513f:	eb 27                	jmp    15168 <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   15141:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   15145:	0f 95 c0             	setne  %al
   15148:	c1 e0 07             	shl    $0x7,%eax
   1514b:	c0 f8 07             	sar    $0x7,%al
   1514e:	83 e0 01             	and    $0x1,%eax
   15151:	c1 e0 04             	shl    $0x4,%eax
   15154:	89 c2                	mov    %eax,%edx
   15156:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   1515d:	83 e0 ef             	and    $0xffffffef,%eax
   15160:	09 d0                	or     %edx,%eax
   15162:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
        break;
   15167:	90                   	nop
    }
}
   15168:	90                   	nop
   15169:	c9                   	leave  
   1516a:	c3                   	ret    

0001516b <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   1516b:	55                   	push   %ebp
   1516c:	89 e5                	mov    %esp,%ebp
   1516e:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   15171:	0f b6 05 dc f5 04 00 	movzbl 0x4f5dc,%eax
   15178:	84 c0                	test   %al,%al
   1517a:	75 3a                	jne    151b6 <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   1517c:	83 ec 08             	sub    $0x8,%esp
   1517f:	68 98 02 01 00       	push   $0x10298
   15184:	6a 21                	push   $0x21
   15186:	e8 32 de ff ff       	call   12fbd <idt_install>
   1518b:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   1518e:	83 ec 0c             	sub    $0xc,%esp
   15191:	6a 21                	push   $0x21
   15193:	e8 b0 e0 ff ff       	call   13248 <idt_enable>
   15198:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   1519b:	83 ec 04             	sub    $0x4,%esp
   1519e:	6a 04                	push   $0x4
   151a0:	6a 00                	push   $0x0
   151a2:	68 d8 f5 04 00       	push   $0x4f5d8
   151a7:	e8 77 3b 00 00       	call   18d23 <kernel_memset>
   151ac:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   151af:	c6 05 dc f5 04 00 01 	movb   $0x1,0x4f5dc
    }
}
   151b6:	90                   	nop
   151b7:	c9                   	leave  
   151b8:	c3                   	ret    

000151b9 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   151b9:	55                   	push   %ebp
   151ba:	89 e5                	mov    %esp,%ebp
   151bc:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   151bf:	6a 64                	push   $0x64
   151c1:	e8 4a fc ff ff       	call   14e10 <inb>
   151c6:	83 c4 04             	add    $0x4,%esp
   151c9:	0f b6 c0             	movzbl %al,%eax
   151cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   151cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   151d2:	83 e0 01             	and    $0x1,%eax
   151d5:	85 c0                	test   %eax,%eax
   151d7:	75 12                	jne    151eb <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   151d9:	83 ec 0c             	sub    $0xc,%esp
   151dc:	6a 21                	push   $0x21
   151de:	e8 a7 e1 ff ff       	call   1338a <pic_send_eoi>
   151e3:	83 c4 10             	add    $0x10,%esp
        return;
   151e6:	e9 96 00 00 00       	jmp    15281 <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   151eb:	83 ec 0c             	sub    $0xc,%esp
   151ee:	6a 60                	push   $0x60
   151f0:	e8 1b fc ff ff       	call   14e10 <inb>
   151f5:	83 c4 10             	add    $0x10,%esp
   151f8:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   151fb:	83 ec 0c             	sub    $0xc,%esp
   151fe:	6a 21                	push   $0x21
   15200:	e8 85 e1 ff ff       	call   1338a <pic_send_eoi>
   15205:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   15208:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   1520c:	75 0c                	jne    1521a <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   1520e:	c7 05 e0 f5 04 00 01 	movl   $0x1,0x4f5e0
   15215:	00 00 00 
   15218:	eb 67                	jmp    15281 <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   1521a:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   1521e:	75 0c                	jne    1522c <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   15220:	c7 05 e0 f5 04 00 02 	movl   $0x2,0x4f5e0
   15227:	00 00 00 
   1522a:	eb 55                	jmp    15281 <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   1522c:	a1 e0 f5 04 00       	mov    0x4f5e0,%eax
   15231:	83 f8 02             	cmp    $0x2,%eax
   15234:	74 3e                	je     15274 <do_handler_kbd+0xbb>
   15236:	83 f8 02             	cmp    $0x2,%eax
   15239:	77 45                	ja     15280 <do_handler_kbd+0xc7>
   1523b:	85 c0                	test   %eax,%eax
   1523d:	74 07                	je     15246 <do_handler_kbd+0x8d>
   1523f:	83 f8 01             	cmp    $0x1,%eax
   15242:	74 14                	je     15258 <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   15244:	eb 3a                	jmp    15280 <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   15246:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   1524a:	83 ec 0c             	sub    $0xc,%esp
   1524d:	50                   	push   %eax
   1524e:	e8 4c fc ff ff       	call   14e9f <do_normal_key>
   15253:	83 c4 10             	add    $0x10,%esp
                break;
   15256:	eb 29                	jmp    15281 <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   15258:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   1525c:	83 ec 0c             	sub    $0xc,%esp
   1525f:	50                   	push   %eax
   15260:	e8 78 fe ff ff       	call   150dd <do_e0_key>
   15265:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   15268:	c7 05 e0 f5 04 00 00 	movl   $0x0,0x4f5e0
   1526f:	00 00 00 
                break;
   15272:	eb 0d                	jmp    15281 <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   15274:	c7 05 e0 f5 04 00 00 	movl   $0x0,0x4f5e0
   1527b:	00 00 00 
                break;
   1527e:	eb 01                	jmp    15281 <do_handler_kbd+0xc8>
                break;
   15280:	90                   	nop
        }
    }

   15281:	c9                   	leave  
   15282:	c3                   	ret    

00015283 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   15283:	55                   	push   %ebp
   15284:	89 e5                	mov    %esp,%ebp
   15286:	83 ec 08             	sub    $0x8,%esp
   15289:	8b 45 08             	mov    0x8(%ebp),%eax
   1528c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1528f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   15293:	89 d0                	mov    %edx,%eax
   15295:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   15298:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1529c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   152a0:	ee                   	out    %al,(%dx)
}
   152a1:	90                   	nop
   152a2:	c9                   	leave  
   152a3:	c3                   	ret    

000152a4 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   152a4:	55                   	push   %ebp
   152a5:	89 e5                	mov    %esp,%ebp
   152a7:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   152aa:	a1 e4 f5 04 00       	mov    0x4f5e4,%eax
   152af:	83 c0 01             	add    $0x1,%eax
   152b2:	a3 e4 f5 04 00       	mov    %eax,0x4f5e4

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   152b7:	83 ec 0c             	sub    $0xc,%esp
   152ba:	6a 20                	push   $0x20
   152bc:	e8 c9 e0 ff ff       	call   1338a <pic_send_eoi>
   152c1:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   152c4:	e8 6d c7 ff ff       	call   11a36 <task_slice_end>
}
   152c9:	90                   	nop
   152ca:	c9                   	leave  
   152cb:	c3                   	ret    

000152cc <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   152cc:	55                   	push   %ebp
   152cd:	89 e5                	mov    %esp,%ebp
   152cf:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   152d2:	6a 36                	push   $0x36
   152d4:	6a 43                	push   $0x43
   152d6:	e8 a8 ff ff ff       	call   15283 <outb>
   152db:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   152de:	66 c7 45 f6 a9 04    	movw   $0x4a9,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   152e4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   152e8:	0f b6 c0             	movzbl %al,%eax
   152eb:	50                   	push   %eax
   152ec:	6a 40                	push   $0x40
   152ee:	e8 90 ff ff ff       	call   15283 <outb>
   152f3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   152f6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   152fa:	66 c1 e8 08          	shr    $0x8,%ax
   152fe:	0f b6 c0             	movzbl %al,%eax
   15301:	50                   	push   %eax
   15302:	6a 40                	push   $0x40
   15304:	e8 7a ff ff ff       	call   15283 <outb>
   15309:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1530c:	83 ec 08             	sub    $0x8,%esp
   1530f:	68 7b 02 01 00       	push   $0x1027b
   15314:	6a 20                	push   $0x20
   15316:	e8 a2 dc ff ff       	call   12fbd <idt_install>
   1531b:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1531e:	83 ec 0c             	sub    $0xc,%esp
   15321:	6a 20                	push   $0x20
   15323:	e8 20 df ff ff       	call   13248 <idt_enable>
   15328:	83 c4 10             	add    $0x10,%esp

}
   1532b:	90                   	nop
   1532c:	c9                   	leave  
   1532d:	c3                   	ret    

0001532e <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1532e:	55                   	push   %ebp
   1532f:	89 e5                	mov    %esp,%ebp
   15331:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   15334:	c7 05 e4 f5 04 00 00 	movl   $0x0,0x4f5e4
   1533b:	00 00 00 
    init_pit();
   1533e:	e8 89 ff ff ff       	call   152cc <init_pit>
   15343:	90                   	nop
   15344:	c9                   	leave  
   15345:	c3                   	ret    

00015346 <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   15346:	55                   	push   %ebp
   15347:	89 e5                	mov    %esp,%ebp
   15349:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   1534c:	8b 45 08             	mov    0x8(%ebp),%eax
   1534f:	8b 40 08             	mov    0x8(%eax),%eax
   15352:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   15355:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15359:	78 10                	js     1536b <get_tty+0x25>
   1535b:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1535f:	7f 0a                	jg     1536b <get_tty+0x25>
   15361:	8b 45 08             	mov    0x8(%ebp),%eax
   15364:	8b 40 10             	mov    0x10(%eax),%eax
   15367:	85 c0                	test   %eax,%eax
   15369:	75 1a                	jne    15385 <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   1536b:	83 ec 08             	sub    $0x8,%esp
   1536e:	ff 75 f4             	push   -0xc(%ebp)
   15371:	68 1c a6 01 00       	push   $0x1a61c
   15376:	e8 a5 41 00 00       	call   19520 <log_printf>
   1537b:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   1537e:	b8 00 00 00 00       	mov    $0x0,%eax
   15383:	eb 0e                	jmp    15393 <get_tty+0x4d>
    }

    return tty_table + tty_index;
   15385:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15388:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1538e:	05 00 f6 04 00       	add    $0x4f600,%eax
}
   15393:	c9                   	leave  
   15394:	c3                   	ret    

00015395 <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   15395:	55                   	push   %ebp
   15396:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   15398:	8b 45 08             	mov    0x8(%ebp),%eax
   1539b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1539e:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   153a0:	8b 45 08             	mov    0x8(%ebp),%eax
   153a3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   153aa:	8b 45 08             	mov    0x8(%ebp),%eax
   153ad:	8b 55 10             	mov    0x10(%ebp),%edx
   153b0:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   153b3:	8b 45 08             	mov    0x8(%ebp),%eax
   153b6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   153bd:	8b 45 08             	mov    0x8(%ebp),%eax
   153c0:	8b 50 0c             	mov    0xc(%eax),%edx
   153c3:	8b 45 08             	mov    0x8(%ebp),%eax
   153c6:	89 50 08             	mov    %edx,0x8(%eax)
}
   153c9:	90                   	nop
   153ca:	5d                   	pop    %ebp
   153cb:	c3                   	ret    

000153cc <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   153cc:	55                   	push   %ebp
   153cd:	89 e5                	mov    %esp,%ebp
   153cf:	53                   	push   %ebx
   153d0:	83 ec 24             	sub    $0x24,%esp
   153d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   153d6:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   153d9:	e8 e5 df ff ff       	call   133c3 <idt_enter_protection>
   153de:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   153e1:	8b 45 08             	mov    0x8(%ebp),%eax
   153e4:	8b 50 10             	mov    0x10(%eax),%edx
   153e7:	8b 45 08             	mov    0x8(%ebp),%eax
   153ea:	8b 40 04             	mov    0x4(%eax),%eax
   153ed:	39 c2                	cmp    %eax,%edx
   153ef:	7c 15                	jl     15406 <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   153f1:	83 ec 0c             	sub    $0xc,%esp
   153f4:	ff 75 f4             	push   -0xc(%ebp)
   153f7:	e8 df df ff ff       	call   133db <idt_leave_protection>
   153fc:	83 c4 10             	add    $0x10,%esp
        return -1;
   153ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15404:	eb 59                	jmp    1545f <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   15406:	8b 45 08             	mov    0x8(%ebp),%eax
   15409:	8b 18                	mov    (%eax),%ebx
   1540b:	8b 45 08             	mov    0x8(%ebp),%eax
   1540e:	8b 40 0c             	mov    0xc(%eax),%eax
   15411:	8d 48 01             	lea    0x1(%eax),%ecx
   15414:	8b 55 08             	mov    0x8(%ebp),%edx
   15417:	89 4a 0c             	mov    %ecx,0xc(%edx)
   1541a:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1541d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   15421:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   15423:	8b 45 08             	mov    0x8(%ebp),%eax
   15426:	8b 50 0c             	mov    0xc(%eax),%edx
   15429:	8b 45 08             	mov    0x8(%ebp),%eax
   1542c:	8b 40 04             	mov    0x4(%eax),%eax
   1542f:	39 c2                	cmp    %eax,%edx
   15431:	7c 0a                	jl     1543d <tty_fifo_put+0x71>
        fifo->write = 0;
   15433:	8b 45 08             	mov    0x8(%ebp),%eax
   15436:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   1543d:	8b 45 08             	mov    0x8(%ebp),%eax
   15440:	8b 40 10             	mov    0x10(%eax),%eax
   15443:	8d 50 01             	lea    0x1(%eax),%edx
   15446:	8b 45 08             	mov    0x8(%ebp),%eax
   15449:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   1544c:	83 ec 0c             	sub    $0xc,%esp
   1544f:	ff 75 f4             	push   -0xc(%ebp)
   15452:	e8 84 df ff ff       	call   133db <idt_leave_protection>
   15457:	83 c4 10             	add    $0x10,%esp
    return 0;
   1545a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1545f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15462:	c9                   	leave  
   15463:	c3                   	ret    

00015464 <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   15464:	55                   	push   %ebp
   15465:	89 e5                	mov    %esp,%ebp
   15467:	53                   	push   %ebx
   15468:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   1546b:	e8 53 df ff ff       	call   133c3 <idt_enter_protection>
   15470:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   15473:	8b 45 08             	mov    0x8(%ebp),%eax
   15476:	8b 40 10             	mov    0x10(%eax),%eax
   15479:	85 c0                	test   %eax,%eax
   1547b:	7f 15                	jg     15492 <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   1547d:	83 ec 0c             	sub    $0xc,%esp
   15480:	ff 75 f4             	push   -0xc(%ebp)
   15483:	e8 53 df ff ff       	call   133db <idt_leave_protection>
   15488:	83 c4 10             	add    $0x10,%esp
        return -1;
   1548b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15490:	eb 5a                	jmp    154ec <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   15492:	8b 45 08             	mov    0x8(%ebp),%eax
   15495:	8b 18                	mov    (%eax),%ebx
   15497:	8b 45 08             	mov    0x8(%ebp),%eax
   1549a:	8b 40 08             	mov    0x8(%eax),%eax
   1549d:	8d 48 01             	lea    0x1(%eax),%ecx
   154a0:	8b 55 08             	mov    0x8(%ebp),%edx
   154a3:	89 4a 08             	mov    %ecx,0x8(%edx)
   154a6:	01 d8                	add    %ebx,%eax
   154a8:	0f b6 10             	movzbl (%eax),%edx
   154ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   154ae:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   154b0:	8b 45 08             	mov    0x8(%ebp),%eax
   154b3:	8b 50 08             	mov    0x8(%eax),%edx
   154b6:	8b 45 08             	mov    0x8(%ebp),%eax
   154b9:	8b 40 04             	mov    0x4(%eax),%eax
   154bc:	39 c2                	cmp    %eax,%edx
   154be:	7c 0a                	jl     154ca <tty_fifo_get+0x66>
        fifo->read = 0;
   154c0:	8b 45 08             	mov    0x8(%ebp),%eax
   154c3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   154ca:	8b 45 08             	mov    0x8(%ebp),%eax
   154cd:	8b 40 10             	mov    0x10(%eax),%eax
   154d0:	8d 50 ff             	lea    -0x1(%eax),%edx
   154d3:	8b 45 08             	mov    0x8(%ebp),%eax
   154d6:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   154d9:	83 ec 0c             	sub    $0xc,%esp
   154dc:	ff 75 f4             	push   -0xc(%ebp)
   154df:	e8 f7 de ff ff       	call   133db <idt_leave_protection>
   154e4:	83 c4 10             	add    $0x10,%esp
    return 0;
   154e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   154ec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   154ef:	c9                   	leave  
   154f0:	c3                   	ret    

000154f1 <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   154f1:	55                   	push   %ebp
   154f2:	89 e5                	mov    %esp,%ebp
   154f4:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   154f7:	8b 45 08             	mov    0x8(%ebp),%eax
   154fa:	8b 40 08             	mov    0x8(%eax),%eax
   154fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   15500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15504:	78 06                	js     1550c <tty_open+0x1b>
   15506:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1550a:	7e 1d                	jle    15529 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   1550c:	83 ec 08             	sub    $0x8,%esp
   1550f:	ff 75 f4             	push   -0xc(%ebp)
   15512:	68 3c a6 01 00       	push   $0x1a63c
   15517:	e8 04 40 00 00       	call   19520 <log_printf>
   1551c:	83 c4 10             	add    $0x10,%esp
        return -1;
   1551f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15524:	e9 af 00 00 00       	jmp    155d8 <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   15529:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1552c:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15532:	05 00 f6 04 00       	add    $0x4f600,%eax
   15537:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   1553a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1553d:	8d 50 54             	lea    0x54(%eax),%edx
   15540:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15543:	83 c0 0c             	add    $0xc,%eax
   15546:	83 ec 04             	sub    $0x4,%esp
   15549:	68 00 02 00 00       	push   $0x200
   1554e:	52                   	push   %edx
   1554f:	50                   	push   %eax
   15550:	e8 40 fe ff ff       	call   15395 <tty_fifo_init>
   15555:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   15558:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1555b:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   15561:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15564:	83 c0 20             	add    $0x20,%eax
   15567:	83 ec 04             	sub    $0x4,%esp
   1556a:	68 00 02 00 00       	push   $0x200
   1556f:	52                   	push   %edx
   15570:	50                   	push   %eax
   15571:	e8 1f fe ff ff       	call   15395 <tty_fifo_init>
   15576:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   15579:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1557c:	83 c0 34             	add    $0x34,%eax
   1557f:	83 ec 08             	sub    $0x8,%esp
   15582:	68 00 02 00 00       	push   $0x200
   15587:	50                   	push   %eax
   15588:	e8 3e 2d 00 00       	call   182cb <sem_init>
   1558d:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   15590:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15593:	83 c0 44             	add    $0x44,%eax
   15596:	83 ec 08             	sub    $0x8,%esp
   15599:	6a 00                	push   $0x0
   1559b:	50                   	push   %eax
   1559c:	e8 2a 2d 00 00       	call   182cb <sem_init>
   155a1:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   155a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   155aa:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   155ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   155b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155b9:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   155c0:	e8 a6 fb ff ff       	call   1516b <kbd_init>
    console_init(index);
   155c5:	83 ec 0c             	sub    $0xc,%esp
   155c8:	ff 75 f4             	push   -0xc(%ebp)
   155cb:	e8 fc e3 ff ff       	call   139cc <console_init>
   155d0:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   155d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   155d8:	c9                   	leave  
   155d9:	c3                   	ret    

000155da <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   155da:	55                   	push   %ebp
   155db:	89 e5                	mov    %esp,%ebp
   155dd:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   155e0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   155e4:	79 0a                	jns    155f0 <tty_write+0x16>
        return -1;
   155e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   155eb:	e9 d8 00 00 00       	jmp    156c8 <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   155f0:	83 ec 0c             	sub    $0xc,%esp
   155f3:	ff 75 08             	push   0x8(%ebp)
   155f6:	e8 4b fd ff ff       	call   15346 <get_tty>
   155fb:	83 c4 10             	add    $0x10,%esp
   155fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   15601:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15605:	75 0a                	jne    15611 <tty_write+0x37>
        return -1;
   15607:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1560c:	e9 b7 00 00 00       	jmp    156c8 <tty_write+0xee>
    }

    int len = 0;
   15611:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   15618:	e9 98 00 00 00       	jmp    156b5 <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   1561d:	8b 45 10             	mov    0x10(%ebp),%eax
   15620:	8d 50 01             	lea    0x1(%eax),%edx
   15623:	89 55 10             	mov    %edx,0x10(%ebp)
   15626:	0f b6 00             	movzbl (%eax),%eax
   15629:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   1562c:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   15630:	75 3b                	jne    1566d <tty_write+0x93>
   15632:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15635:	8b 00                	mov    (%eax),%eax
   15637:	83 e0 01             	and    $0x1,%eax
   1563a:	85 c0                	test   %eax,%eax
   1563c:	74 2f                	je     1566d <tty_write+0x93>
            sem_wait(&tty->out_sem);
   1563e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15641:	83 c0 34             	add    $0x34,%eax
   15644:	83 ec 0c             	sub    $0xc,%esp
   15647:	50                   	push   %eax
   15648:	e8 c0 2c 00 00       	call   1830d <sem_wait>
   1564d:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   15650:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15653:	83 c0 0c             	add    $0xc,%eax
   15656:	83 ec 08             	sub    $0x8,%esp
   15659:	6a 0d                	push   $0xd
   1565b:	50                   	push   %eax
   1565c:	e8 6b fd ff ff       	call   153cc <tty_fifo_put>
   15661:	83 c4 10             	add    $0x10,%esp
   15664:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   15667:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1566b:	78 54                	js     156c1 <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   1566d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15670:	83 c0 34             	add    $0x34,%eax
   15673:	83 ec 0c             	sub    $0xc,%esp
   15676:	50                   	push   %eax
   15677:	e8 91 2c 00 00       	call   1830d <sem_wait>
   1567c:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   1567f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   15683:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15686:	83 c2 0c             	add    $0xc,%edx
   15689:	83 ec 08             	sub    $0x8,%esp
   1568c:	50                   	push   %eax
   1568d:	52                   	push   %edx
   1568e:	e8 39 fd ff ff       	call   153cc <tty_fifo_put>
   15693:	83 c4 10             	add    $0x10,%esp
   15696:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15699:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1569d:	78 25                	js     156c4 <tty_write+0xea>
            break;
        }

        len++;
   1569f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   156a3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   156a7:	83 ec 0c             	sub    $0xc,%esp
   156aa:	ff 75 f0             	push   -0x10(%ebp)
   156ad:	e8 47 e8 ff ff       	call   13ef9 <console_write>
   156b2:	83 c4 10             	add    $0x10,%esp
    while (size) {
   156b5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   156b9:	0f 85 5e ff ff ff    	jne    1561d <tty_write+0x43>
   156bf:	eb 04                	jmp    156c5 <tty_write+0xeb>
                break;
   156c1:	90                   	nop
   156c2:	eb 01                	jmp    156c5 <tty_write+0xeb>
            break;
   156c4:	90                   	nop
    }
    


    return len;
   156c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   156c8:	c9                   	leave  
   156c9:	c3                   	ret    

000156ca <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   156ca:	55                   	push   %ebp
   156cb:	89 e5                	mov    %esp,%ebp
   156cd:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   156d0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   156d4:	79 0a                	jns    156e0 <tty_read+0x16>
        return -1;
   156d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   156db:	e9 04 01 00 00       	jmp    157e4 <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   156e0:	83 ec 0c             	sub    $0xc,%esp
   156e3:	ff 75 08             	push   0x8(%ebp)
   156e6:	e8 5b fc ff ff       	call   15346 <get_tty>
   156eb:	83 c4 10             	add    $0x10,%esp
   156ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   156f1:	8b 45 10             	mov    0x10(%ebp),%eax
   156f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   156f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   156fe:	e9 d2 00 00 00       	jmp    157d5 <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   15703:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15706:	83 c0 44             	add    $0x44,%eax
   15709:	83 ec 0c             	sub    $0xc,%esp
   1570c:	50                   	push   %eax
   1570d:	e8 fb 2b 00 00       	call   1830d <sem_wait>
   15712:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   15715:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15718:	8d 50 20             	lea    0x20(%eax),%edx
   1571b:	83 ec 08             	sub    $0x8,%esp
   1571e:	8d 45 eb             	lea    -0x15(%ebp),%eax
   15721:	50                   	push   %eax
   15722:	52                   	push   %edx
   15723:	e8 3c fd ff ff       	call   15464 <tty_fifo_get>
   15728:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   1572b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1572f:	0f be c0             	movsbl %al,%eax
   15732:	83 f8 0a             	cmp    $0xa,%eax
   15735:	74 20                	je     15757 <tty_read+0x8d>
   15737:	83 f8 7f             	cmp    $0x7f,%eax
   1573a:	75 55                	jne    15791 <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   1573c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15740:	75 05                	jne    15747 <tty_read+0x7d>
   15742:	e9 8e 00 00 00       	jmp    157d5 <tty_read+0x10b>
                continue;
            } else {
                len--;
   15747:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   1574b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   1574f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15752:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   15755:	eb 4e                	jmp    157a5 <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   15757:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1575a:	8b 40 04             	mov    0x4(%eax),%eax
   1575d:	83 e0 01             	and    $0x1,%eax
   15760:	85 c0                	test   %eax,%eax
   15762:	74 1b                	je     1577f <tty_read+0xb5>
   15764:	8b 45 14             	mov    0x14(%ebp),%eax
   15767:	83 e8 01             	sub    $0x1,%eax
   1576a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1576d:	7d 10                	jge    1577f <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   1576f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15772:	8d 50 01             	lea    0x1(%eax),%edx
   15775:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15778:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   1577b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   1577f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15782:	8d 50 01             	lea    0x1(%eax),%edx
   15785:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15788:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   1578b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   1578f:	eb 14                	jmp    157a5 <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   15791:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15794:	8d 50 01             	lea    0x1(%eax),%edx
   15797:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1579a:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   1579e:	88 10                	mov    %dl,(%eax)
            len++;
   157a0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   157a4:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   157a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   157a8:	8b 40 04             	mov    0x4(%eax),%eax
   157ab:	83 e0 02             	and    $0x2,%eax
   157ae:	85 c0                	test   %eax,%eax
   157b0:	74 13                	je     157c5 <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   157b2:	6a 01                	push   $0x1
   157b4:	8d 45 eb             	lea    -0x15(%ebp),%eax
   157b7:	50                   	push   %eax
   157b8:	6a 00                	push   $0x0
   157ba:	ff 75 08             	push   0x8(%ebp)
   157bd:	e8 18 fe ff ff       	call   155da <tty_write>
   157c2:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   157c5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   157c9:	3c 0a                	cmp    $0xa,%al
   157cb:	74 14                	je     157e1 <tty_read+0x117>
   157cd:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   157d1:	3c 0d                	cmp    $0xd,%al
   157d3:	74 0c                	je     157e1 <tty_read+0x117>
    while (len < size) {
   157d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157d8:	3b 45 14             	cmp    0x14(%ebp),%eax
   157db:	0f 8c 22 ff ff ff    	jl     15703 <tty_read+0x39>
            break;
        }

    }

    return len;
   157e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   157e4:	c9                   	leave  
   157e5:	c3                   	ret    

000157e6 <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   157e6:	55                   	push   %ebp
   157e7:	89 e5                	mov    %esp,%ebp
   157e9:	53                   	push   %ebx
   157ea:	83 ec 14             	sub    $0x14,%esp
    tty_t *tty = get_tty(dev);
   157ed:	83 ec 0c             	sub    $0xc,%esp
   157f0:	ff 75 08             	push   0x8(%ebp)
   157f3:	e8 4e fb ff ff       	call   15346 <get_tty>
   157f8:	83 c4 10             	add    $0x10,%esp
   157fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    switch (cmd) {
   157fe:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
   15802:	74 08                	je     1580c <tty_control+0x26>
   15804:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
   15808:	74 2e                	je     15838 <tty_control+0x52>
		    if (arg0) {
			    *(int *)arg0 = sem_count(&tty->in_sem); 
		    }
		    break;
        default :
            break;
   1580a:	eb 4a                	jmp    15856 <tty_control+0x70>
            if (arg0) {
   1580c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15810:	74 13                	je     15825 <tty_control+0x3f>
                tty->iflags |= TTY_IECHO;
   15812:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15815:	8b 40 04             	mov    0x4(%eax),%eax
   15818:	83 c8 02             	or     $0x2,%eax
   1581b:	89 c2                	mov    %eax,%edx
   1581d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15820:	89 50 04             	mov    %edx,0x4(%eax)
            break;
   15823:	eb 31                	jmp    15856 <tty_control+0x70>
                tty->iflags &= ~TTY_IECHO;
   15825:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15828:	8b 40 04             	mov    0x4(%eax),%eax
   1582b:	83 e0 fd             	and    $0xfffffffd,%eax
   1582e:	89 c2                	mov    %eax,%edx
   15830:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15833:	89 50 04             	mov    %edx,0x4(%eax)
            break;
   15836:	eb 1e                	jmp    15856 <tty_control+0x70>
		    if (arg0) {
   15838:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1583c:	74 17                	je     15855 <tty_control+0x6f>
			    *(int *)arg0 = sem_count(&tty->in_sem); 
   1583e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15841:	83 c0 44             	add    $0x44,%eax
   15844:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15847:	83 ec 0c             	sub    $0xc,%esp
   1584a:	50                   	push   %eax
   1584b:	e8 dc 2b 00 00       	call   1842c <sem_count>
   15850:	83 c4 10             	add    $0x10,%esp
   15853:	89 03                	mov    %eax,(%ebx)
		    break;
   15855:	90                   	nop
    }
    return 0;
   15856:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1585b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1585e:	c9                   	leave  
   1585f:	c3                   	ret    

00015860 <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   15860:	55                   	push   %ebp
   15861:	89 e5                	mov    %esp,%ebp

}
   15863:	90                   	nop
   15864:	5d                   	pop    %ebp
   15865:	c3                   	ret    

00015866 <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   15866:	55                   	push   %ebp
   15867:	89 e5                	mov    %esp,%ebp
   15869:	83 ec 28             	sub    $0x28,%esp
   1586c:	8b 45 08             	mov    0x8(%ebp),%eax
   1586f:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   15872:	a1 a0 18 05 00       	mov    0x518a0,%eax
   15877:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1587d:	05 00 f6 04 00       	add    $0x4f600,%eax
   15882:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   15885:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15888:	83 c0 44             	add    $0x44,%eax
   1588b:	83 ec 0c             	sub    $0xc,%esp
   1588e:	50                   	push   %eax
   1588f:	e8 98 2b 00 00       	call   1842c <sem_count>
   15894:	83 c4 10             	add    $0x10,%esp
   15897:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1589c:	7f 2b                	jg     158c9 <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   1589e:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   158a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   158a5:	83 c2 20             	add    $0x20,%edx
   158a8:	83 ec 08             	sub    $0x8,%esp
   158ab:	50                   	push   %eax
   158ac:	52                   	push   %edx
   158ad:	e8 1a fb ff ff       	call   153cc <tty_fifo_put>
   158b2:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   158b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158b8:	83 c0 44             	add    $0x44,%eax
   158bb:	83 ec 0c             	sub    $0xc,%esp
   158be:	50                   	push   %eax
   158bf:	e8 c9 2a 00 00       	call   1838d <sem_notify>
   158c4:	83 c4 10             	add    $0x10,%esp
   158c7:	eb 01                	jmp    158ca <tty_in+0x64>
        return;
   158c9:	90                   	nop
}
   158ca:	c9                   	leave  
   158cb:	c3                   	ret    

000158cc <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   158cc:	55                   	push   %ebp
   158cd:	89 e5                	mov    %esp,%ebp
   158cf:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   158d2:	a1 a0 18 05 00       	mov    0x518a0,%eax
   158d7:	39 45 08             	cmp    %eax,0x8(%ebp)
   158da:	74 16                	je     158f2 <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   158dc:	83 ec 0c             	sub    $0xc,%esp
   158df:	ff 75 08             	push   0x8(%ebp)
   158e2:	e8 22 e7 ff ff       	call   14009 <console_select>
   158e7:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   158ea:	8b 45 08             	mov    0x8(%ebp),%eax
   158ed:	a3 a0 18 05 00       	mov    %eax,0x518a0
    }
}
   158f2:	90                   	nop
   158f3:	c9                   	leave  
   158f4:	c3                   	ret    

000158f5 <devfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int devfs_mount(struct _fs_t *fs, int major, int minor) {
   158f5:	55                   	push   %ebp
   158f6:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   158f8:	8b 45 08             	mov    0x8(%ebp),%eax
   158fb:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   15902:	00 00 00 
    return fs->type;
   15905:	8b 45 08             	mov    0x8(%ebp),%eax
   15908:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
}
   1590e:	5d                   	pop    %ebp
   1590f:	c3                   	ret    

00015910 <devfs_unmount>:
/**
 * @brief 卸载设备文件系统
 * 
 * @param fs 
 */
void devfs_unmount(struct _fs_t *fs) {
   15910:	55                   	push   %ebp
   15911:	89 e5                	mov    %esp,%ebp
} 
   15913:	90                   	nop
   15914:	5d                   	pop    %ebp
   15915:	c3                   	ret    

00015916 <devfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int devfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   15916:	55                   	push   %ebp
   15917:	89 e5                	mov    %esp,%ebp
   15919:	83 ec 28             	sub    $0x28,%esp
    //遍历设备类型表，获取需要打开的设备的信息
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   1591c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15923:	e9 04 01 00 00       	jmp    15a2c <devfs_open+0x116>
        devfs_type_t *type = devfs_type_list + i;
   15928:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1592b:	89 d0                	mov    %edx,%eax
   1592d:	01 c0                	add    %eax,%eax
   1592f:	01 d0                	add    %edx,%eax
   15931:	c1 e0 02             	shl    $0x2,%eax
   15934:	05 e0 b0 01 00       	add    $0x1b0e0,%eax
   15939:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int type_name_len = kernel_strlen(type->name);
   1593c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1593f:	8b 00                	mov    (%eax),%eax
   15941:	83 ec 0c             	sub    $0xc,%esp
   15944:	50                   	push   %eax
   15945:	e8 55 33 00 00       	call   18c9f <kernel_strlen>
   1594a:	83 c4 10             	add    $0x10,%esp
   1594d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   15950:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15953:	8b 00                	mov    (%eax),%eax
   15955:	83 ec 04             	sub    $0x4,%esp
   15958:	ff 75 ec             	push   -0x14(%ebp)
   1595b:	50                   	push   %eax
   1595c:	ff 75 0c             	push   0xc(%ebp)
   1595f:	e8 ba 32 00 00       	call   18c1e <kernel_strncmp>
   15964:	83 c4 10             	add    $0x10,%esp
   15967:	85 c0                	test   %eax,%eax
   15969:	0f 85 b9 00 00 00    	jne    15a28 <devfs_open+0x112>
            int minor;
            //判断路径是否正确并读取路径中的设备号
            if (kernel_strlen(path) > type_name_len && path_to_num(path + type_name_len, &minor) < 0) {
   1596f:	83 ec 0c             	sub    $0xc,%esp
   15972:	ff 75 0c             	push   0xc(%ebp)
   15975:	e8 25 33 00 00       	call   18c9f <kernel_strlen>
   1597a:	83 c4 10             	add    $0x10,%esp
   1597d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15980:	7d 34                	jge    159b6 <devfs_open+0xa0>
   15982:	8b 55 ec             	mov    -0x14(%ebp),%edx
   15985:	8b 45 0c             	mov    0xc(%ebp),%eax
   15988:	01 c2                	add    %eax,%edx
   1598a:	83 ec 08             	sub    $0x8,%esp
   1598d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   15990:	50                   	push   %eax
   15991:	52                   	push   %edx
   15992:	e8 f2 18 00 00       	call   17289 <path_to_num>
   15997:	83 c4 10             	add    $0x10,%esp
   1599a:	85 c0                	test   %eax,%eax
   1599c:	79 18                	jns    159b6 <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   1599e:	83 ec 08             	sub    $0x8,%esp
   159a1:	ff 75 0c             	push   0xc(%ebp)
   159a4:	68 69 a6 01 00       	push   $0x1a669
   159a9:	e8 72 3b 00 00       	call   19520 <log_printf>
   159ae:	83 c4 10             	add    $0x10,%esp
                break;
   159b1:	e9 80 00 00 00       	jmp    15a36 <devfs_open+0x120>
            }

            //打开设备
            int dev_id = dev_open(type->dev_type, minor, (void*)0);
   159b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   159b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159bc:	8b 40 04             	mov    0x4(%eax),%eax
   159bf:	83 ec 04             	sub    $0x4,%esp
   159c2:	6a 00                	push   $0x0
   159c4:	52                   	push   %edx
   159c5:	50                   	push   %eax
   159c6:	e8 60 e7 ff ff       	call   1412b <dev_open>
   159cb:	83 c4 10             	add    $0x10,%esp
   159ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   159d1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   159d5:	79 15                	jns    159ec <devfs_open+0xd6>
                log_printf("open device failed: %s", path);
   159d7:	83 ec 08             	sub    $0x8,%esp
   159da:	ff 75 0c             	push   0xc(%ebp)
   159dd:	68 83 a6 01 00       	push   $0x1a683
   159e2:	e8 39 3b 00 00       	call   19520 <log_printf>
   159e7:	83 c4 10             	add    $0x10,%esp
                break;
   159ea:	eb 4a                	jmp    15a36 <devfs_open+0x120>
            }

            //打开成功，初始化file结构，用file记录文件信息
            file->dev_id = dev_id;
   159ec:	8b 45 10             	mov    0x10(%ebp),%eax
   159ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
   159f2:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->pos = 0;
   159f5:	8b 45 10             	mov    0x10(%ebp),%eax
   159f8:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   159ff:	8b 45 10             	mov    0x10(%ebp),%eax
   15a02:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
            file->type = type->file_type;
   15a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a0c:	8b 40 08             	mov    0x8(%eax),%eax
   15a0f:	89 c2                	mov    %eax,%edx
   15a11:	8b 45 10             	mov    0x10(%ebp),%eax
   15a14:	89 50 20             	mov    %edx,0x20(%eax)
            file->ref = 1;
   15a17:	8b 45 10             	mov    0x10(%ebp),%eax
   15a1a:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)

            return 0;
   15a21:	b8 00 00 00 00       	mov    $0x0,%eax
   15a26:	eb 13                	jmp    15a3b <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   15a28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15a2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15a30:	0f 84 f2 fe ff ff    	je     15928 <devfs_open+0x12>
        }
    }

    return -1;
   15a36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
};
   15a3b:	c9                   	leave  
   15a3c:	c3                   	ret    

00015a3d <devfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_read(char *buf, int size, file_t *file) {
   15a3d:	55                   	push   %ebp
   15a3e:	89 e5                	mov    %esp,%ebp
   15a40:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   15a43:	8b 45 10             	mov    0x10(%ebp),%eax
   15a46:	8b 50 30             	mov    0x30(%eax),%edx
   15a49:	8b 45 10             	mov    0x10(%ebp),%eax
   15a4c:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a4f:	ff 75 0c             	push   0xc(%ebp)
   15a52:	ff 75 08             	push   0x8(%ebp)
   15a55:	52                   	push   %edx
   15a56:	50                   	push   %eax
   15a57:	e8 f8 e7 ff ff       	call   14254 <dev_read>
   15a5c:	83 c4 10             	add    $0x10,%esp
}
   15a5f:	c9                   	leave  
   15a60:	c3                   	ret    

00015a61 <devfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_write(char *buf, int size, file_t *file) {
   15a61:	55                   	push   %ebp
   15a62:	89 e5                	mov    %esp,%ebp
   15a64:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   15a67:	8b 45 10             	mov    0x10(%ebp),%eax
   15a6a:	8b 50 30             	mov    0x30(%eax),%edx
   15a6d:	8b 45 10             	mov    0x10(%ebp),%eax
   15a70:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a73:	ff 75 0c             	push   0xc(%ebp)
   15a76:	ff 75 08             	push   0x8(%ebp)
   15a79:	52                   	push   %edx
   15a7a:	50                   	push   %eax
   15a7b:	e8 20 e8 ff ff       	call   142a0 <dev_write>
   15a80:	83 c4 10             	add    $0x10,%esp
}
   15a83:	c9                   	leave  
   15a84:	c3                   	ret    

00015a85 <devfs_close>:
/**
 * @brief 关闭设备文件系统
 * 
 * @param file 
 */
void devfs_close(file_t *file) {
   15a85:	55                   	push   %ebp
   15a86:	89 e5                	mov    %esp,%ebp
   15a88:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   15a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   15a8e:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a91:	83 ec 0c             	sub    $0xc,%esp
   15a94:	50                   	push   %eax
   15a95:	e8 9e e8 ff ff       	call   14338 <dev_close>
   15a9a:	83 c4 10             	add    $0x10,%esp
}
   15a9d:	90                   	nop
   15a9e:	c9                   	leave  
   15a9f:	c3                   	ret    

00015aa0 <devfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int devfs_seek(file_t *file, uint32_t offset, int dir) {
   15aa0:	55                   	push   %ebp
   15aa1:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持偏移调用，直接返回-1;
    return -1;
   15aa3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15aa8:	5d                   	pop    %ebp
   15aa9:	c3                   	ret    

00015aaa <devfs_stat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int devfs_stat(file_t *file, struct stat *st) {
   15aaa:	55                   	push   %ebp
   15aab:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持该调用
    return -1;
   15aad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15ab2:	5d                   	pop    %ebp
   15ab3:	c3                   	ret    

00015ab4 <devfs_ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int devfs_ioctl(file_t *file, int cmd, int arg0, int arg1) {
   15ab4:	55                   	push   %ebp
   15ab5:	89 e5                	mov    %esp,%ebp
   15ab7:	83 ec 08             	sub    $0x8,%esp
    dev_control(file->dev_id, cmd, arg0, arg1);
   15aba:	8b 45 08             	mov    0x8(%ebp),%eax
   15abd:	8b 40 2c             	mov    0x2c(%eax),%eax
   15ac0:	ff 75 14             	push   0x14(%ebp)
   15ac3:	ff 75 10             	push   0x10(%ebp)
   15ac6:	ff 75 0c             	push   0xc(%ebp)
   15ac9:	50                   	push   %eax
   15aca:	e8 1d e8 ff ff       	call   142ec <dev_control>
   15acf:	83 c4 10             	add    $0x10,%esp
}
   15ad2:	90                   	nop
   15ad3:	c9                   	leave  
   15ad4:	c3                   	ret    

00015ad5 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   15ad5:	55                   	push   %ebp
   15ad6:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   15ad8:	8b 55 08             	mov    0x8(%ebp),%edx
   15adb:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ade:	01 d0                	add    %edx,%eax
   15ae0:	8d 50 ff             	lea    -0x1(%eax),%edx
   15ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ae6:	f7 d8                	neg    %eax
   15ae8:	21 d0                	and    %edx,%eax
}
   15aea:	5d                   	pop    %ebp
   15aeb:	c3                   	ret    

00015aec <to_sfn>:
 *         拓展名不为空，则8个字节的最后一个字节为'.'
 * 
 * @param dest 
 * @param src 
 */
static void to_sfn(char* dest, const char* src) {
   15aec:	55                   	push   %ebp
   15aed:	89 e5                	mov    %esp,%ebp
   15aef:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15af2:	83 ec 04             	sub    $0x4,%esp
   15af5:	6a 0b                	push   $0xb
   15af7:	6a 20                	push   $0x20
   15af9:	ff 75 08             	push   0x8(%ebp)
   15afc:	e8 22 32 00 00       	call   18d23 <kernel_memset>
   15b01:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char * curr = dest;
   15b04:	8b 45 08             	mov    0x8(%ebp),%eax
   15b07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * end = dest + SFN_LEN;
   15b0a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b0d:	83 c0 0b             	add    $0xb,%eax
   15b10:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end)) {
   15b13:	eb 49                	jmp    15b5e <to_sfn+0x72>
        char c = *src++;
   15b15:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b18:	8d 50 01             	lea    0x1(%eax),%edx
   15b1b:	89 55 0c             	mov    %edx,0xc(%ebp)
   15b1e:	0f b6 00             	movzbl (%eax),%eax
   15b21:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c) {
   15b24:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15b28:	83 f8 2e             	cmp    $0x2e,%eax
   15b2b:	75 0b                	jne    15b38 <to_sfn+0x4c>
        case '.':       // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   15b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   15b30:	83 c0 08             	add    $0x8,%eax
   15b33:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15b36:	eb 26                	jmp    15b5e <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z')) {
   15b38:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15b3c:	7e 10                	jle    15b4e <to_sfn+0x62>
   15b3e:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15b42:	7f 0a                	jg     15b4e <to_sfn+0x62>
                c = c - 'a' + 'A';
   15b44:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15b48:	83 e8 20             	sub    $0x20,%eax
   15b4b:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b51:	8d 50 01             	lea    0x1(%eax),%edx
   15b54:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15b57:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15b5b:	88 10                	mov    %dl,(%eax)
            break;
   15b5d:	90                   	nop
    while (*src && (curr < end)) {
   15b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b61:	0f b6 00             	movzbl (%eax),%eax
   15b64:	84 c0                	test   %al,%al
   15b66:	74 08                	je     15b70 <to_sfn+0x84>
   15b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b6b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15b6e:	72 a5                	jb     15b15 <to_sfn+0x29>
        }
    }
}
   15b70:	90                   	nop
   15b71:	c9                   	leave  
   15b72:	c3                   	ret    

00015b73 <diritem_init>:
 * @param item 
 * @param attr 
 * @param path 
 * @return int 
 */
static int diritem_init(diritem_t *item, uint8_t attr, const char *name) {
   15b73:	55                   	push   %ebp
   15b74:	89 e5                	mov    %esp,%ebp
   15b76:	83 ec 18             	sub    $0x18,%esp
   15b79:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b7c:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   15b82:	83 ec 08             	sub    $0x8,%esp
   15b85:	ff 75 10             	push   0x10(%ebp)
   15b88:	50                   	push   %eax
   15b89:	e8 5e ff ff ff       	call   15aec <to_sfn>
   15b8e:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t)(FAT_CLUSTER_INVALID >> 16);
   15b91:	8b 45 08             	mov    0x8(%ebp),%eax
   15b94:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusLo = (uint16_t)(FAT_CLUSTER_INVALID & 0xffff);
   15b9a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b9d:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba6:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15bad:	8b 45 08             	mov    0x8(%ebp),%eax
   15bb0:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15bb4:	88 50 0b             	mov    %dl,0xb(%eax)

    //以下数据本系统直接忽略
    //由kbos完成当天在windows磁盘管理器
    //创建的文件得到
    item->DIR_NTRes = 0x18;
   15bb7:	8b 45 08             	mov    0x8(%ebp),%eax
   15bba:	c6 40 0c 18          	movb   $0x18,0xc(%eax)
    item->DIR_CrtDate = 0x570f;
   15bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc1:	66 c7 40 10 0f 57    	movw   $0x570f,0x10(%eax)
    item->DIR_CrtTime = 0x86d8;
   15bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   15bca:	66 c7 40 0e d8 86    	movw   $0x86d8,0xe(%eax)
    item->DIR_WrtDate = 0x570f;
   15bd0:	8b 45 08             	mov    0x8(%ebp),%eax
   15bd3:	66 c7 40 18 0f 57    	movw   $0x570f,0x18(%eax)
    item->DIR_WrtTime = 0x86e9;
   15bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   15bdc:	66 c7 40 16 e9 86    	movw   $0x86e9,0x16(%eax)
    item->DIR_LastAccDate = 0x570f;
   15be2:	8b 45 08             	mov    0x8(%ebp),%eax
   15be5:	66 c7 40 12 0f 57    	movw   $0x570f,0x12(%eax)
    item->DIR_CrtTimeTeenth = 0x51;
   15beb:	8b 45 08             	mov    0x8(%ebp),%eax
   15bee:	c6 40 0d 51          	movb   $0x51,0xd(%eax)

    return 0;
   15bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15bf7:	c9                   	leave  
   15bf8:	c3                   	ret    

00015bf9 <cluster_is_valid>:
 * @brief 判断簇号是否有效
 * 
 * @param cluster 
 * @return int 
 */
static int cluster_is_valid(cluster_t cluster) {
   15bf9:	55                   	push   %ebp
   15bfa:	89 e5                	mov    %esp,%ebp
   15bfc:	83 ec 04             	sub    $0x4,%esp
   15bff:	8b 45 08             	mov    0x8(%ebp),%eax
   15c02:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < FAT_CLUSTER_INVALID) && (cluster >= 0x2);
   15c06:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   15c0b:	77 0e                	ja     15c1b <cluster_is_valid+0x22>
   15c0d:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15c12:	76 07                	jbe    15c1b <cluster_is_valid+0x22>
   15c14:	b8 01 00 00 00       	mov    $0x1,%eax
   15c19:	eb 05                	jmp    15c20 <cluster_is_valid+0x27>
   15c1b:	b8 00 00 00 00       	mov    $0x0,%eax
} 
   15c20:	c9                   	leave  
   15c21:	c3                   	ret    

00015c22 <fat_read_sector>:
 * 
 * @param fat 
 * @param sector 
 * @return int 
 */
static int fat_read_sector(fat_t *fat, int sector) {
   15c22:	55                   	push   %ebp
   15c23:	89 e5                	mov    %esp,%ebp
   15c25:	83 ec 18             	sub    $0x18,%esp
    //要读扇区已被缓存，直接返回即可
    if (sector == fat->curr_sector) {
   15c28:	8b 45 08             	mov    0x8(%ebp),%eax
   15c2b:	8b 50 24             	mov    0x24(%eax),%edx
   15c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c31:	39 c2                	cmp    %eax,%edx
   15c33:	75 07                	jne    15c3c <fat_read_sector+0x1a>
        return 0;
   15c35:	b8 00 00 00 00       	mov    $0x0,%eax
   15c3a:	eb 3f                	jmp    15c7b <fat_read_sector+0x59>
    }

    //读取信的扇区，并记录扇区号
    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c3f:	8b 50 28             	mov    0x28(%eax),%edx
   15c42:	8b 45 08             	mov    0x8(%ebp),%eax
   15c45:	8b 40 2c             	mov    0x2c(%eax),%eax
   15c48:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   15c4e:	6a 01                	push   $0x1
   15c50:	52                   	push   %edx
   15c51:	ff 75 0c             	push   0xc(%ebp)
   15c54:	50                   	push   %eax
   15c55:	e8 fa e5 ff ff       	call   14254 <dev_read>
   15c5a:	83 c4 10             	add    $0x10,%esp
   15c5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   15c60:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15c64:	75 10                	jne    15c76 <fat_read_sector+0x54>
        fat->curr_sector = sector;
   15c66:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c69:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6c:	89 50 24             	mov    %edx,0x24(%eax)
        return 0;
   15c6f:	b8 00 00 00 00       	mov    $0x0,%eax
   15c74:	eb 05                	jmp    15c7b <fat_read_sector+0x59>
    }

    return -1;
   15c76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15c7b:	c9                   	leave  
   15c7c:	c3                   	ret    

00015c7d <fat_write_sector>:
 * 
 * @param fat 
 * @param sector 
 * @return int 
 */
static int fat_write_sector(fat_t *fat, int sector) {
   15c7d:	55                   	push   %ebp
   15c7e:	89 e5                	mov    %esp,%ebp
   15c80:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15c83:	8b 45 08             	mov    0x8(%ebp),%eax
   15c86:	8b 50 28             	mov    0x28(%eax),%edx
   15c89:	8b 45 08             	mov    0x8(%ebp),%eax
   15c8c:	8b 40 2c             	mov    0x2c(%eax),%eax
   15c8f:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   15c95:	6a 01                	push   $0x1
   15c97:	52                   	push   %edx
   15c98:	ff 75 0c             	push   0xc(%ebp)
   15c9b:	50                   	push   %eax
   15c9c:	e8 ff e5 ff ff       	call   142a0 <dev_write>
   15ca1:	83 c4 10             	add    $0x10,%esp
   15ca4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return (cnt == 1) ? 0 : -1;
   15ca7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15cab:	75 07                	jne    15cb4 <fat_write_sector+0x37>
   15cad:	b8 00 00 00 00       	mov    $0x0,%eax
   15cb2:	eb 05                	jmp    15cb9 <fat_write_sector+0x3c>
   15cb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15cb9:	c9                   	leave  
   15cba:	c3                   	ret    

00015cbb <cluster_get_next>:
 * 
 * @param fat 
 * @param cblk 
 * @return int 
 */
static int cluster_get_next(fat_t *fat, cluster_t cblk) {
   15cbb:	55                   	push   %ebp
   15cbc:	89 e5                	mov    %esp,%ebp
   15cbe:	83 ec 28             	sub    $0x28,%esp
   15cc1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cc4:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    //簇号无效
    if (!cluster_is_valid(cblk)) {
   15cc8:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ccc:	50                   	push   %eax
   15ccd:	e8 27 ff ff ff       	call   15bf9 <cluster_is_valid>
   15cd2:	83 c4 04             	add    $0x4,%esp
   15cd5:	85 c0                	test   %eax,%eax
   15cd7:	75 0a                	jne    15ce3 <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15cd9:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15cde:	e9 94 00 00 00       	jmp    15d77 <cluster_get_next+0xbc>
    }

    //计算当前簇cblk在对应分区中的扇区号
    //fat表保存了簇链关系，
    int offset = cblk * sizeof(cluster_t);
   15ce3:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ce7:	01 c0                	add    %eax,%eax
   15ce9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sector;
   15cec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cef:	8b 55 08             	mov    0x8(%ebp),%edx
   15cf2:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15cf5:	ba 00 00 00 00       	mov    $0x0,%edx
   15cfa:	f7 f1                	div    %ecx
   15cfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //计算该簇在扇区中的偏移量
    int off_in_sector = offset % fat->bytes_per_sector;
   15cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d02:	8b 55 08             	mov    0x8(%ebp),%edx
   15d05:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15d08:	ba 00 00 00 00       	mov    $0x0,%edx
   15d0d:	f7 f1                	div    %ecx
   15d0f:	89 d0                	mov    %edx,%eax
   15d11:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if (sector >= fat->tbl_sectors) {
   15d14:	8b 45 08             	mov    0x8(%ebp),%eax
   15d17:	8b 50 08             	mov    0x8(%eax),%edx
   15d1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15d1d:	39 c2                	cmp    %eax,%edx
   15d1f:	77 1c                	ja     15d3d <cluster_get_next+0x82>
        log_printf("cluster too big: %d\n", cblk);
   15d21:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15d25:	83 ec 08             	sub    $0x8,%esp
   15d28:	50                   	push   %eax
   15d29:	68 9c a6 01 00       	push   $0x1a69c
   15d2e:	e8 ed 37 00 00       	call   19520 <log_printf>
   15d33:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15d36:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15d3b:	eb 3a                	jmp    15d77 <cluster_get_next+0xbc>
    }

    int err = fat_read_sector(fat, fat->tbl_start_sector + sector);
   15d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   15d40:	8b 10                	mov    (%eax),%edx
   15d42:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15d45:	01 d0                	add    %edx,%eax
   15d47:	83 ec 08             	sub    $0x8,%esp
   15d4a:	50                   	push   %eax
   15d4b:	ff 75 08             	push   0x8(%ebp)
   15d4e:	e8 cf fe ff ff       	call   15c22 <fat_read_sector>
   15d53:	83 c4 10             	add    $0x10,%esp
   15d56:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15d59:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15d5d:	79 07                	jns    15d66 <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15d5f:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15d64:	eb 11                	jmp    15d77 <cluster_get_next+0xbc>
    }

    return *(cluster_t *)(fat->fat_buffer + off_in_sector);
   15d66:	8b 45 08             	mov    0x8(%ebp),%eax
   15d69:	8b 50 28             	mov    0x28(%eax),%edx
   15d6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15d6f:	01 d0                	add    %edx,%eax
   15d71:	0f b7 00             	movzwl (%eax),%eax
   15d74:	0f b7 c0             	movzwl %ax,%eax
}
   15d77:	c9                   	leave  
   15d78:	c3                   	ret    

00015d79 <cluster_set_next>:
 * 
 * @param fat 
 * @param start 
 * @param next 
 */
static int cluster_set_next(fat_t *fat, cluster_t start, cluster_t next) {
   15d79:	55                   	push   %ebp
   15d7a:	89 e5                	mov    %esp,%ebp
   15d7c:	83 ec 38             	sub    $0x38,%esp
   15d7f:	8b 55 0c             	mov    0xc(%ebp),%edx
   15d82:	8b 45 10             	mov    0x10(%ebp),%eax
   15d85:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   15d89:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
     //簇号无效
    if (!cluster_is_valid(start)) {
   15d8d:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15d91:	50                   	push   %eax
   15d92:	e8 62 fe ff ff       	call   15bf9 <cluster_is_valid>
   15d97:	83 c4 04             	add    $0x4,%esp
   15d9a:	85 c0                	test   %eax,%eax
   15d9c:	75 0a                	jne    15da8 <cluster_set_next+0x2f>
        return FAT_CLUSTER_INVALID;
   15d9e:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15da3:	e9 fe 00 00 00       	jmp    15ea6 <cluster_set_next+0x12d>
    }

    //计算当前簇cblk在对应分区中的扇区号
    //fat表保存了簇链关系，
    int offset = start * sizeof(cluster_t);
   15da8:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15dac:	01 c0                	add    %eax,%eax
   15dae:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sector;
   15db1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15db4:	8b 55 08             	mov    0x8(%ebp),%edx
   15db7:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15dba:	ba 00 00 00 00       	mov    $0x0,%edx
   15dbf:	f7 f1                	div    %ecx
   15dc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //计算该簇在扇区中的偏移量
    int off_in_sector = offset % fat->bytes_per_sector;
   15dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15dc7:	8b 55 08             	mov    0x8(%ebp),%edx
   15dca:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15dcd:	ba 00 00 00 00       	mov    $0x0,%edx
   15dd2:	f7 f1                	div    %ecx
   15dd4:	89 d0                	mov    %edx,%eax
   15dd6:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (sector >= fat->tbl_sectors) {
   15dd9:	8b 45 08             	mov    0x8(%ebp),%eax
   15ddc:	8b 50 08             	mov    0x8(%eax),%edx
   15ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15de2:	39 c2                	cmp    %eax,%edx
   15de4:	77 1f                	ja     15e05 <cluster_set_next+0x8c>
        log_printf("cluster too big: %d\n", start);
   15de6:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15dea:	83 ec 08             	sub    $0x8,%esp
   15ded:	50                   	push   %eax
   15dee:	68 9c a6 01 00       	push   $0x1a69c
   15df3:	e8 28 37 00 00       	call   19520 <log_printf>
   15df8:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15dfb:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15e00:	e9 a1 00 00 00       	jmp    15ea6 <cluster_set_next+0x12d>
    }

    //将该簇号所在的扇区读到缓冲区fat_buffer中
    int err = fat_read_sector(fat, fat->tbl_start_sector + sector);
   15e05:	8b 45 08             	mov    0x8(%ebp),%eax
   15e08:	8b 10                	mov    (%eax),%edx
   15e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e0d:	01 d0                	add    %edx,%eax
   15e0f:	83 ec 08             	sub    $0x8,%esp
   15e12:	50                   	push   %eax
   15e13:	ff 75 08             	push   0x8(%ebp)
   15e16:	e8 07 fe ff ff       	call   15c22 <fat_read_sector>
   15e1b:	83 c4 10             	add    $0x10,%esp
   15e1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   15e21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15e25:	79 07                	jns    15e2e <cluster_set_next+0xb5>
        return FAT_CLUSTER_INVALID;
   15e27:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15e2c:	eb 78                	jmp    15ea6 <cluster_set_next+0x12d>
    }

    //将缓冲区中该表项的值设未next
    *(cluster_t *)(fat->fat_buffer + off_in_sector) = next;
   15e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15e31:	8b 50 28             	mov    0x28(%eax),%edx
   15e34:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e37:	01 c2                	add    %eax,%edx
   15e39:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15e3d:	66 89 02             	mov    %ax,(%edx)
    //再将缓冲区覆盖到磁盘对应区域
    for (int i = 0; i < fat->tbl_cnt; ++i) {
   15e40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15e47:	eb 4b                	jmp    15e94 <cluster_set_next+0x11b>
        err = fat_write_sector(fat, fat->tbl_start_sector + sector);
   15e49:	8b 45 08             	mov    0x8(%ebp),%eax
   15e4c:	8b 10                	mov    (%eax),%edx
   15e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e51:	01 d0                	add    %edx,%eax
   15e53:	83 ec 08             	sub    $0x8,%esp
   15e56:	50                   	push   %eax
   15e57:	ff 75 08             	push   0x8(%ebp)
   15e5a:	e8 1e fe ff ff       	call   15c7d <fat_write_sector>
   15e5f:	83 c4 10             	add    $0x10,%esp
   15e62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15e65:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15e69:	79 17                	jns    15e82 <cluster_set_next+0x109>
            log_printf("write cluster failed.\n");
   15e6b:	83 ec 0c             	sub    $0xc,%esp
   15e6e:	68 b1 a6 01 00       	push   $0x1a6b1
   15e73:	e8 a8 36 00 00       	call   19520 <log_printf>
   15e78:	83 c4 10             	add    $0x10,%esp
            return -1;
   15e7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15e80:	eb 24                	jmp    15ea6 <cluster_set_next+0x12d>
        }

        //偏移一个fat表的大小，将相邻的第二个fat表的对应位置也清空
        sector += fat->tbl_sectors;
   15e82:	8b 45 08             	mov    0x8(%ebp),%eax
   15e85:	8b 50 08             	mov    0x8(%eax),%edx
   15e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e8b:	01 d0                	add    %edx,%eax
   15e8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; ++i) {
   15e90:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15e94:	8b 45 08             	mov    0x8(%ebp),%eax
   15e97:	8b 50 04             	mov    0x4(%eax),%edx
   15e9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e9d:	39 c2                	cmp    %eax,%edx
   15e9f:	77 a8                	ja     15e49 <cluster_set_next+0xd0>
    }

    return 0;
   15ea1:	b8 00 00 00 00       	mov    $0x0,%eax

}
   15ea6:	c9                   	leave  
   15ea7:	c3                   	ret    

00015ea8 <cluster_free_chain>:
 * @brief 清除fat表中的簇链关系
 * 
 * @param fat 
 * @param start 
 */
void cluster_free_chain(fat_t *fat, cluster_t start) {
   15ea8:	55                   	push   %ebp
   15ea9:	89 e5                	mov    %esp,%ebp
   15eab:	83 ec 28             	sub    $0x28,%esp
   15eae:	8b 45 0c             	mov    0xc(%ebp),%eax
   15eb1:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    //链式清空
    while (cluster_is_valid(start)) {
   15eb5:	eb 34                	jmp    15eeb <cluster_free_chain+0x43>
        cluster_t next = cluster_get_next(fat, start);
   15eb7:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ebb:	83 ec 08             	sub    $0x8,%esp
   15ebe:	50                   	push   %eax
   15ebf:	ff 75 08             	push   0x8(%ebp)
   15ec2:	e8 f4 fd ff ff       	call   15cbb <cluster_get_next>
   15ec7:	83 c4 10             	add    $0x10,%esp
   15eca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, CLUSTER_FAT_FREE);
   15ece:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ed2:	83 ec 04             	sub    $0x4,%esp
   15ed5:	6a 00                	push   $0x0
   15ed7:	50                   	push   %eax
   15ed8:	ff 75 08             	push   0x8(%ebp)
   15edb:	e8 99 fe ff ff       	call   15d79 <cluster_set_next>
   15ee0:	83 c4 10             	add    $0x10,%esp
        start = next;
   15ee3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ee7:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15eeb:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15eef:	83 ec 0c             	sub    $0xc,%esp
   15ef2:	50                   	push   %eax
   15ef3:	e8 01 fd ff ff       	call   15bf9 <cluster_is_valid>
   15ef8:	83 c4 10             	add    $0x10,%esp
   15efb:	85 c0                	test   %eax,%eax
   15efd:	75 b8                	jne    15eb7 <cluster_free_chain+0xf>
    }
}
   15eff:	90                   	nop
   15f00:	90                   	nop
   15f01:	c9                   	leave  
   15f02:	c3                   	ret    

00015f03 <cluster_alloc_free>:
 * 
 * @param fat 
 * @param cnt 
 * @return cluster_t 
 */
static cluster_t cluster_alloc_free(fat_t *fat, int cnt) {
   15f03:	55                   	push   %ebp
   15f04:	89 e5                	mov    %esp,%ebp
   15f06:	83 ec 28             	sub    $0x28,%esp
    cluster_t start = FAT_CLUSTER_INVALID;
   15f09:	66 c7 45 f6 f8 ff    	movw   $0xfff8,-0xa(%ebp)
    cluster_t pre = FAT_CLUSTER_INVALID;
   15f0f:	66 c7 45 f4 f8 ff    	movw   $0xfff8,-0xc(%ebp)
    cluster_t curr;
    
    //计算一个fat表中有多少个簇号
    int c_total = fat->tbl_sectors * fat->bytes_per_sector / sizeof(cluster_t);
   15f15:	8b 45 08             	mov    0x8(%ebp),%eax
   15f18:	8b 50 08             	mov    0x8(%eax),%edx
   15f1b:	8b 45 08             	mov    0x8(%ebp),%eax
   15f1e:	8b 40 0c             	mov    0xc(%eax),%eax
   15f21:	0f af c2             	imul   %edx,%eax
   15f24:	d1 e8                	shr    %eax
   15f26:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //0,1簇号未使用
    for (curr = 2; cnt && (curr < c_total); ++curr) {
   15f29:	66 c7 45 f2 02 00    	movw   $0x2,-0xe(%ebp)
   15f2f:	e9 9a 00 00 00       	jmp    15fce <cluster_alloc_free+0xcb>
        cluster_t free = cluster_get_next(fat, curr);
   15f34:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15f38:	83 ec 08             	sub    $0x8,%esp
   15f3b:	50                   	push   %eax
   15f3c:	ff 75 08             	push   0x8(%ebp)
   15f3f:	e8 77 fd ff ff       	call   15cbb <cluster_get_next>
   15f44:	83 c4 10             	add    $0x10,%esp
   15f47:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        //当前簇curr没有链接关系，可供分配
        if (free == CLUSTER_FAT_FREE) {
   15f4b:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15f50:	75 77                	jne    15fc9 <cluster_alloc_free+0xc6>
            if (!cluster_is_valid(start)) {
   15f52:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15f56:	83 ec 0c             	sub    $0xc,%esp
   15f59:	50                   	push   %eax
   15f5a:	e8 9a fc ff ff       	call   15bf9 <cluster_is_valid>
   15f5f:	83 c4 10             	add    $0x10,%esp
   15f62:	85 c0                	test   %eax,%eax
   15f64:	75 08                	jne    15f6e <cluster_alloc_free+0x6b>
                //链头还未分配，先分配链头
                start = curr;
   15f66:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15f6a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            }

            if (cluster_is_valid(pre)) {
   15f6e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15f72:	83 ec 0c             	sub    $0xc,%esp
   15f75:	50                   	push   %eax
   15f76:	e8 7e fc ff ff       	call   15bf9 <cluster_is_valid>
   15f7b:	83 c4 10             	add    $0x10,%esp
   15f7e:	85 c0                	test   %eax,%eax
   15f80:	74 3b                	je     15fbd <cluster_alloc_free+0xba>
                //前驱簇号有效且刚分配，则设置curr为pre的后继
                int err = cluster_set_next(fat, pre, curr);
   15f82:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
   15f86:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15f8a:	83 ec 04             	sub    $0x4,%esp
   15f8d:	52                   	push   %edx
   15f8e:	50                   	push   %eax
   15f8f:	ff 75 08             	push   0x8(%ebp)
   15f92:	e8 e2 fd ff ff       	call   15d79 <cluster_set_next>
   15f97:	83 c4 10             	add    $0x10,%esp
   15f9a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0) {
   15f9d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15fa1:	79 1a                	jns    15fbd <cluster_alloc_free+0xba>
                    cluster_free_chain(fat, start);
   15fa3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15fa7:	83 ec 08             	sub    $0x8,%esp
   15faa:	50                   	push   %eax
   15fab:	ff 75 08             	push   0x8(%ebp)
   15fae:	e8 f5 fe ff ff       	call   15ea8 <cluster_free_chain>
   15fb3:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15fb6:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15fbb:	eb 69                	jmp    16026 <cluster_alloc_free+0x123>
                }
            }
            
            //分配成功一个簇，更新pre和cnt
            pre = curr;
   15fbd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15fc1:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
            cnt--;
   15fc5:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; cnt && (curr < c_total); ++curr) {
   15fc9:	66 83 45 f2 01       	addw   $0x1,-0xe(%ebp)
   15fce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fd2:	74 0d                	je     15fe1 <cluster_alloc_free+0xde>
   15fd4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15fd8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15fdb:	0f 8f 53 ff ff ff    	jg     15f34 <cluster_alloc_free+0x31>
        }
    }

    //设置最后一个簇的后继为无效簇标志
    if (cnt == 0) {
   15fe1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fe5:	75 3b                	jne    16022 <cluster_alloc_free+0x11f>
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15fe7:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15feb:	83 ec 04             	sub    $0x4,%esp
   15fee:	68 f8 ff 00 00       	push   $0xfff8
   15ff3:	50                   	push   %eax
   15ff4:	ff 75 08             	push   0x8(%ebp)
   15ff7:	e8 7d fd ff ff       	call   15d79 <cluster_set_next>
   15ffc:	83 c4 10             	add    $0x10,%esp
   15fff:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   16002:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16006:	79 1a                	jns    16022 <cluster_alloc_free+0x11f>
            cluster_free_chain(fat, start);
   16008:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1600c:	83 ec 08             	sub    $0x8,%esp
   1600f:	50                   	push   %eax
   16010:	ff 75 08             	push   0x8(%ebp)
   16013:	e8 90 fe ff ff       	call   15ea8 <cluster_free_chain>
   16018:	83 c4 10             	add    $0x10,%esp
            return FAT_CLUSTER_INVALID;
   1601b:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   16020:	eb 04                	jmp    16026 <cluster_alloc_free+0x123>
        }
    }

    return start;
   16022:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
}
   16026:	c9                   	leave  
   16027:	c3                   	ret    

00016028 <expand_file>:
 * 
 * @param file 
 * @param inc_size 
 * @return int 
 */
static int expand_file(file_t *file, int inc_bytes) {
   16028:	55                   	push   %ebp
   16029:	89 e5                	mov    %esp,%ebp
   1602b:	53                   	push   %ebx
   1602c:	83 ec 24             	sub    $0x24,%esp
    fat_t *fat = (fat_t*)file->fs->data;
   1602f:	8b 45 08             	mov    0x8(%ebp),%eax
   16032:	8b 40 28             	mov    0x28(%eax),%eax
   16035:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1603b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //计算文件需要拓展多少个簇
    int  cluster_cnt;
    if (file->size % fat->cluster_bytes_size == 0) {
   1603e:	8b 45 08             	mov    0x8(%ebp),%eax
   16041:	8b 40 38             	mov    0x38(%eax),%eax
   16044:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16047:	8b 4a 20             	mov    0x20(%edx),%ecx
   1604a:	ba 00 00 00 00       	mov    $0x0,%edx
   1604f:	f7 f1                	div    %ecx
   16051:	89 d0                	mov    %edx,%eax
   16053:	85 c0                	test   %eax,%eax
   16055:	75 25                	jne    1607c <expand_file+0x54>
        //文件原始大小刚好装满已分配的最后一簇
        //以簇为单位，计算需要拓展的簇的数量
        cluster_cnt = up2(inc_bytes, fat->cluster_bytes_size) / fat->cluster_bytes_size;
   16057:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1605a:	8b 50 20             	mov    0x20(%eax),%edx
   1605d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16060:	52                   	push   %edx
   16061:	50                   	push   %eax
   16062:	e8 6e fa ff ff       	call   15ad5 <up2>
   16067:	83 c4 08             	add    $0x8,%esp
   1606a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1606d:	8b 5a 20             	mov    0x20(%edx),%ebx
   16070:	ba 00 00 00 00       	mov    $0x0,%edx
   16075:	f7 f3                	div    %ebx
   16077:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1607a:	eb 58                	jmp    160d4 <expand_file+0xac>
    } else {
        //文件原始分配的最后一个簇空间还未装满
        //计算最后一个簇的空间余量
        int cluster_free = fat->cluster_bytes_size - (file->size % fat->cluster_bytes_size);
   1607c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1607f:	8b 48 20             	mov    0x20(%eax),%ecx
   16082:	8b 45 08             	mov    0x8(%ebp),%eax
   16085:	8b 40 38             	mov    0x38(%eax),%eax
   16088:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1608b:	8b 5a 20             	mov    0x20(%edx),%ebx
   1608e:	ba 00 00 00 00       	mov    $0x0,%edx
   16093:	f7 f3                	div    %ebx
   16095:	89 c8                	mov    %ecx,%eax
   16097:	29 d0                	sub    %edx,%eax
   16099:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_free >= inc_bytes) {
   1609c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1609f:	3b 45 0c             	cmp    0xc(%ebp),%eax
   160a2:	7c 0a                	jl     160ae <expand_file+0x86>
            //余量足够支持需要拓展的字节量，则不需要分配新簇
            return 0;
   160a4:	b8 00 00 00 00       	mov    $0x0,%eax
   160a9:	e9 c9 00 00 00       	jmp    16177 <expand_file+0x14f>
        }

        //余量不足以支持拓展字节量，需要分配新簇
        cluster_cnt = up2(inc_bytes - cluster_free, fat->cluster_bytes_size) / fat->cluster_bytes_size;
   160ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   160b1:	8b 40 20             	mov    0x20(%eax),%eax
   160b4:	8b 55 0c             	mov    0xc(%ebp),%edx
   160b7:	2b 55 ec             	sub    -0x14(%ebp),%edx
   160ba:	50                   	push   %eax
   160bb:	52                   	push   %edx
   160bc:	e8 14 fa ff ff       	call   15ad5 <up2>
   160c1:	83 c4 08             	add    $0x8,%esp
   160c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   160c7:	8b 4a 20             	mov    0x20(%edx),%ecx
   160ca:	ba 00 00 00 00       	mov    $0x0,%edx
   160cf:	f7 f1                	div    %ecx
   160d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //分配空闲簇，即在fat表中建立簇链关系
    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   160d4:	83 ec 08             	sub    $0x8,%esp
   160d7:	ff 75 f4             	push   -0xc(%ebp)
   160da:	ff 75 f0             	push   -0x10(%ebp)
   160dd:	e8 21 fe ff ff       	call   15f03 <cluster_alloc_free>
   160e2:	83 c4 10             	add    $0x10,%esp
   160e5:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start)) {
   160e9:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   160ed:	83 ec 0c             	sub    $0xc,%esp
   160f0:	50                   	push   %eax
   160f1:	e8 03 fb ff ff       	call   15bf9 <cluster_is_valid>
   160f6:	83 c4 10             	add    $0x10,%esp
   160f9:	85 c0                	test   %eax,%eax
   160fb:	75 17                	jne    16114 <expand_file+0xec>
        log_printf("no cluster for file write.\n");
   160fd:	83 ec 0c             	sub    $0xc,%esp
   16100:	68 c8 a6 01 00       	push   $0x1a6c8
   16105:	e8 16 34 00 00       	call   19520 <log_printf>
   1610a:	83 c4 10             	add    $0x10,%esp
        return -1;
   1610d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16112:	eb 63                	jmp    16177 <expand_file+0x14f>
    }

    //文件还没有原始数据，则直接用分配的簇链初始化文件
    if (!cluster_is_valid(file->sblk)) {
   16114:	8b 45 08             	mov    0x8(%ebp),%eax
   16117:	8b 40 3c             	mov    0x3c(%eax),%eax
   1611a:	0f b7 c0             	movzwl %ax,%eax
   1611d:	83 ec 0c             	sub    $0xc,%esp
   16120:	50                   	push   %eax
   16121:	e8 d3 fa ff ff       	call   15bf9 <cluster_is_valid>
   16126:	83 c4 10             	add    $0x10,%esp
   16129:	85 c0                	test   %eax,%eax
   1612b:	75 18                	jne    16145 <expand_file+0x11d>
        file->sblk = file->cblk = start;
   1612d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16131:	8b 45 08             	mov    0x8(%ebp),%eax
   16134:	89 50 40             	mov    %edx,0x40(%eax)
   16137:	8b 45 08             	mov    0x8(%ebp),%eax
   1613a:	8b 50 40             	mov    0x40(%eax),%edx
   1613d:	8b 45 08             	mov    0x8(%ebp),%eax
   16140:	89 50 3c             	mov    %edx,0x3c(%eax)
   16143:	eb 2d                	jmp    16172 <expand_file+0x14a>
    } else {
        //文件已有原始数据，将新分配的簇链开头设为文件当前簇cblk的下一个簇
        int err = cluster_set_next(fat, file->cblk, start);
   16145:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16149:	8b 45 08             	mov    0x8(%ebp),%eax
   1614c:	8b 40 40             	mov    0x40(%eax),%eax
   1614f:	0f b7 c0             	movzwl %ax,%eax
   16152:	83 ec 04             	sub    $0x4,%esp
   16155:	52                   	push   %edx
   16156:	50                   	push   %eax
   16157:	ff 75 f0             	push   -0x10(%ebp)
   1615a:	e8 1a fc ff ff       	call   15d79 <cluster_set_next>
   1615f:	83 c4 10             	add    $0x10,%esp
   16162:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   16165:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16169:	79 07                	jns    16172 <expand_file+0x14a>
            return -1;
   1616b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16170:	eb 05                	jmp    16177 <expand_file+0x14f>
        }
    }

    return 0;
   16172:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16177:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1617a:	c9                   	leave  
   1617b:	c3                   	ret    

0001617c <move_file_pos>:
 * @param move_bytes 
 * @param expand 
 * @return int 
 */
static int move_file_pos(file_t *file, 
    fat_t *fat, uint32_t move_bytes, int expand) {
   1617c:	55                   	push   %ebp
   1617d:	89 e5                	mov    %esp,%ebp
   1617f:	83 ec 18             	sub    $0x18,%esp
        //判断移动pos后是否当前读取簇号是否需要更改
        uint32_t c_offset = file->pos % fat->cluster_bytes_size;
   16182:	8b 45 08             	mov    0x8(%ebp),%eax
   16185:	8b 40 30             	mov    0x30(%eax),%eax
   16188:	89 c2                	mov    %eax,%edx
   1618a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1618d:	8b 48 20             	mov    0x20(%eax),%ecx
   16190:	89 d0                	mov    %edx,%eax
   16192:	ba 00 00 00 00       	mov    $0x0,%edx
   16197:	f7 f1                	div    %ecx
   16199:	89 55 f0             	mov    %edx,-0x10(%ebp)
        if (c_offset + move_bytes >= fat->cluster_bytes_size) {
   1619c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1619f:	8b 45 10             	mov    0x10(%ebp),%eax
   161a2:	01 c2                	add    %eax,%edx
   161a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   161a7:	8b 40 20             	mov    0x20(%eax),%eax
   161aa:	39 c2                	cmp    %eax,%edx
   161ac:	72 74                	jb     16222 <move_file_pos+0xa6>
            //当前簇已读取完毕需更改当前簇号
            //通过fat的簇链获取当前簇的下一个簇
            cluster_t next = cluster_get_next(fat, file->cblk);
   161ae:	8b 45 08             	mov    0x8(%ebp),%eax
   161b1:	8b 40 40             	mov    0x40(%eax),%eax
   161b4:	0f b7 c0             	movzwl %ax,%eax
   161b7:	83 ec 08             	sub    $0x8,%esp
   161ba:	50                   	push   %eax
   161bb:	ff 75 0c             	push   0xc(%ebp)
   161be:	e8 f8 fa ff ff       	call   15cbb <cluster_get_next>
   161c3:	83 c4 10             	add    $0x10,%esp
   161c6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            if (next == FAT_CLUSTER_INVALID && expand) {  
   161ca:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   161cf:	75 47                	jne    16218 <move_file_pos+0x9c>
   161d1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   161d5:	74 41                	je     16218 <move_file_pos+0x9c>
                //当前簇cblk为簇链的最后一个簇，需要分配一个新簇再移动pos
                int err = expand_file(file, fat->cluster_bytes_size);
   161d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   161da:	8b 40 20             	mov    0x20(%eax),%eax
   161dd:	83 ec 08             	sub    $0x8,%esp
   161e0:	50                   	push   %eax
   161e1:	ff 75 08             	push   0x8(%ebp)
   161e4:	e8 3f fe ff ff       	call   16028 <expand_file>
   161e9:	83 c4 10             	add    $0x10,%esp
   161ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (err < 0) {
   161ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   161f3:	79 07                	jns    161fc <move_file_pos+0x80>
                    return -1;
   161f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   161fa:	eb 40                	jmp    1623c <move_file_pos+0xc0>
                }
                //获取新分配的链尾簇
                next = cluster_get_next(fat, file->cblk);
   161fc:	8b 45 08             	mov    0x8(%ebp),%eax
   161ff:	8b 40 40             	mov    0x40(%eax),%eax
   16202:	0f b7 c0             	movzwl %ax,%eax
   16205:	83 ec 08             	sub    $0x8,%esp
   16208:	50                   	push   %eax
   16209:	ff 75 0c             	push   0xc(%ebp)
   1620c:	e8 aa fa ff ff       	call   15cbb <cluster_get_next>
   16211:	83 c4 10             	add    $0x10,%esp
   16214:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            }

            file->cblk = next;
   16218:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   1621c:	8b 45 08             	mov    0x8(%ebp),%eax
   1621f:	89 50 40             	mov    %edx,0x40(%eax)
        }

        file->pos += move_bytes;
   16222:	8b 45 08             	mov    0x8(%ebp),%eax
   16225:	8b 40 30             	mov    0x30(%eax),%eax
   16228:	89 c2                	mov    %eax,%edx
   1622a:	8b 45 10             	mov    0x10(%ebp),%eax
   1622d:	01 d0                	add    %edx,%eax
   1622f:	89 c2                	mov    %eax,%edx
   16231:	8b 45 08             	mov    0x8(%ebp),%eax
   16234:	89 50 30             	mov    %edx,0x30(%eax)
        return 0;
   16237:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1623c:	c9                   	leave  
   1623d:	c3                   	ret    

0001623e <diritem_get_type>:
 * @brief 从根目录项中获取该项的文件类型
 * 
 * @param diritem 
 * @return file_type_t 
 */
file_type_t diritem_get_type(diritem_t *diritem) {
   1623e:	55                   	push   %ebp
   1623f:	89 e5                	mov    %esp,%ebp
   16241:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   16244:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (diritem->DIR_Attr & 
   1624b:	8b 45 08             	mov    0x8(%ebp),%eax
   1624e:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   16252:	0f b6 c0             	movzbl %al,%eax
   16255:	83 e0 0e             	and    $0xe,%eax
   16258:	85 c0                	test   %eax,%eax
   1625a:	74 07                	je     16263 <diritem_get_type+0x25>
    (DIRITEM_ATTR_VOLUME_ID 
    | DIRITEM_ATTR_SYSTEM 
    | DIRITEM_ATTR_HIDDEN)) {   //该项是卷标，隐藏或系统文件时直接跳过
        return FILE_UNKNOWN;
   1625c:	b8 00 00 00 00       	mov    $0x0,%eax
   16261:	eb 36                	jmp    16299 <diritem_get_type+0x5b>
    }

    //该项为LONG_NAME项时也跳过
    if ((diritem->DIR_Attr & DIRITEM_ATTR_LONG_NAME) == DIRITEM_ATTR_LONG_NAME) {
   16263:	8b 45 08             	mov    0x8(%ebp),%eax
   16266:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   1626a:	0f b6 c0             	movzbl %al,%eax
   1626d:	83 e0 0f             	and    $0xf,%eax
   16270:	83 f8 0f             	cmp    $0xf,%eax
   16273:	75 07                	jne    1627c <diritem_get_type+0x3e>
        return FILE_UNKNOWN;
   16275:	b8 00 00 00 00       	mov    $0x0,%eax
   1627a:	eb 1d                	jmp    16299 <diritem_get_type+0x5b>

    }


    return diritem->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   1627c:	8b 45 08             	mov    0x8(%ebp),%eax
   1627f:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   16283:	0f b6 c0             	movzbl %al,%eax
   16286:	83 e0 10             	and    $0x10,%eax
   16289:	85 c0                	test   %eax,%eax
   1628b:	74 07                	je     16294 <diritem_get_type+0x56>
   1628d:	b8 02 00 00 00       	mov    $0x2,%eax
   16292:	eb 05                	jmp    16299 <diritem_get_type+0x5b>
   16294:	b8 03 00 00 00       	mov    $0x3,%eax
}
   16299:	c9                   	leave  
   1629a:	c3                   	ret    

0001629b <read_from_diritem>:
 * @param file
 * @param file_item 
 * @param p_index 
 */
static void read_from_diritem(fat_t *fat, 
    file_t *file, diritem_t *item, int index) {
   1629b:	55                   	push   %ebp
   1629c:	89 e5                	mov    %esp,%ebp
        file->type = diritem_get_type(item);
   1629e:	ff 75 10             	push   0x10(%ebp)
   162a1:	e8 98 ff ff ff       	call   1623e <diritem_get_type>
   162a6:	83 c4 04             	add    $0x4,%esp
   162a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   162ac:	89 42 20             	mov    %eax,0x20(%edx)
        file->size = item->DIR_FileSize;
   162af:	8b 45 10             	mov    0x10(%ebp),%eax
   162b2:	8b 50 1c             	mov    0x1c(%eax),%edx
   162b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   162b8:	89 50 38             	mov    %edx,0x38(%eax)
        file->pos = 0;
   162bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   162be:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->p_index = index;
   162c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   162c8:	8b 55 14             	mov    0x14(%ebp),%edx
   162cb:	89 50 44             	mov    %edx,0x44(%eax)
        file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusLo;
   162ce:	8b 45 10             	mov    0x10(%ebp),%eax
   162d1:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   162d5:	0f b7 c0             	movzwl %ax,%eax
   162d8:	c1 e0 10             	shl    $0x10,%eax
   162db:	89 c2                	mov    %eax,%edx
   162dd:	8b 45 10             	mov    0x10(%ebp),%eax
   162e0:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   162e4:	0f b7 c0             	movzwl %ax,%eax
   162e7:	09 c2                	or     %eax,%edx
   162e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   162ec:	89 50 3c             	mov    %edx,0x3c(%eax)
        file->cblk = file->sblk;
   162ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   162f2:	8b 50 3c             	mov    0x3c(%eax),%edx
   162f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   162f8:	89 50 40             	mov    %edx,0x40(%eax)
}
   162fb:	90                   	nop
   162fc:	c9                   	leave  
   162fd:	c3                   	ret    

000162fe <diritem_get_name>:
 * @brief 从当前目录项中获取文件名到dest中
 * 
 * @param diritem 
 * @param dest
 */
static void diritem_get_name(diritem_t *diritem, char *dest) {
   162fe:	55                   	push   %ebp
   162ff:	89 e5                	mov    %esp,%ebp
   16301:	83 ec 18             	sub    $0x18,%esp
    //file.c 存储在目录项中的形式为 "FILE    C  "
    //8字节的文件名，三字节的拓展名
    char *c = dest;
   16304:	8b 45 0c             	mov    0xc(%ebp),%eax
   16307:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *ext = (char*)0;
   1630a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    //8字节文件名 + '.' + 3字节拓展名，一共最大12字节空间
    kernel_memset(dest, 0, 12);
   16311:	83 ec 04             	sub    $0x4,%esp
   16314:	6a 0c                	push   $0xc
   16316:	6a 00                	push   $0x0
   16318:	ff 75 0c             	push   0xc(%ebp)
   1631b:	e8 03 2a 00 00       	call   18d23 <kernel_memset>
   16320:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; ++i) {
   16323:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1632a:	eb 65                	jmp    16391 <diritem_get_name+0x93>
        if (diritem->DIR_Name[i] != ' ') {
   1632c:	8b 55 08             	mov    0x8(%ebp),%edx
   1632f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16332:	01 d0                	add    %edx,%eax
   16334:	0f b6 00             	movzbl (%eax),%eax
   16337:	3c 20                	cmp    $0x20,%al
   16339:	74 3a                	je     16375 <diritem_get_name+0x77>
            *c = diritem->DIR_Name[i];
   1633b:	8b 55 08             	mov    0x8(%ebp),%edx
   1633e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16341:	01 d0                	add    %edx,%eax
   16343:	0f b6 00             	movzbl (%eax),%eax
   16346:	89 c2                	mov    %eax,%edx
   16348:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1634b:	88 10                	mov    %dl,(%eax)
            if (*c >= 'A' && *c <= 'Z') {
   1634d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16350:	0f b6 00             	movzbl (%eax),%eax
   16353:	3c 40                	cmp    $0x40,%al
   16355:	7e 1a                	jle    16371 <diritem_get_name+0x73>
   16357:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1635a:	0f b6 00             	movzbl (%eax),%eax
   1635d:	3c 5a                	cmp    $0x5a,%al
   1635f:	7f 10                	jg     16371 <diritem_get_name+0x73>
                *c -= ('A' - 'a');
   16361:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16364:	0f b6 00             	movzbl (%eax),%eax
   16367:	83 c0 20             	add    $0x20,%eax
   1636a:	89 c2                	mov    %eax,%edx
   1636c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1636f:	88 10                	mov    %dl,(%eax)
            }
            c++;
   16371:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        }

        //读完8字节的文件名，用ext记录".拓展名""
        if (i == 7) {
   16375:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   16379:	75 12                	jne    1638d <diritem_get_name+0x8f>
            ext = c;
   1637b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1637e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *(c++) = '.';
   16381:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16384:	8d 50 01             	lea    0x1(%eax),%edx
   16387:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1638a:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; ++i) {
   1638d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16391:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   16395:	7e 95                	jle    1632c <diritem_get_name+0x2e>
        }
    }

    //文件无拓展名，将之前写入的'.'设置为'\0'
    if (ext && (ext[1] == '\0')) {
   16397:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1639b:	74 13                	je     163b0 <diritem_get_name+0xb2>
   1639d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163a0:	83 c0 01             	add    $0x1,%eax
   163a3:	0f b6 00             	movzbl (%eax),%eax
   163a6:	84 c0                	test   %al,%al
   163a8:	75 06                	jne    163b0 <diritem_get_name+0xb2>
        ext[0] = '\0';
   163aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163ad:	c6 00 00             	movb   $0x0,(%eax)
    }

}
   163b0:	90                   	nop
   163b1:	c9                   	leave  
   163b2:	c3                   	ret    

000163b3 <diritem_name_match>:
 * 
 * @param item 
 * @param dest 
 * @return int 
 */
static int diritem_name_match(diritem_t *item, const char *dest) {
   163b3:	55                   	push   %ebp
   163b4:	89 e5                	mov    %esp,%ebp
   163b6:	83 ec 18             	sub    $0x18,%esp
    char buf[12];
    diritem_get_name(item, buf);
   163b9:	83 ec 08             	sub    $0x8,%esp
   163bc:	8d 45 ec             	lea    -0x14(%ebp),%eax
   163bf:	50                   	push   %eax
   163c0:	ff 75 08             	push   0x8(%ebp)
   163c3:	e8 36 ff ff ff       	call   162fe <diritem_get_name>
   163c8:	83 c4 10             	add    $0x10,%esp
    return kernel_strncmp(buf, dest, 11) == 0;
   163cb:	83 ec 04             	sub    $0x4,%esp
   163ce:	6a 0b                	push   $0xb
   163d0:	ff 75 0c             	push   0xc(%ebp)
   163d3:	8d 45 ec             	lea    -0x14(%ebp),%eax
   163d6:	50                   	push   %eax
   163d7:	e8 42 28 00 00       	call   18c1e <kernel_strncmp>
   163dc:	83 c4 10             	add    $0x10,%esp
   163df:	85 c0                	test   %eax,%eax
   163e1:	0f 94 c0             	sete   %al
   163e4:	0f b6 c0             	movzbl %al,%eax
}
   163e7:	c9                   	leave  
   163e8:	c3                   	ret    

000163e9 <write_dir_entry>:
 * 
 * @param fat 
 * @param dir_index 
 * @return diritem_t* 
 */
static int write_dir_entry(fat_t *fat, diritem_t *item, int dir_index) {
   163e9:	55                   	push   %ebp
   163ea:	89 e5                	mov    %esp,%ebp
   163ec:	53                   	push   %ebx
   163ed:	83 ec 14             	sub    $0x14,%esp
    if (dir_index < 0 || dir_index >= fat->root_ent_cnt) {
   163f0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   163f4:	78 0d                	js     16403 <write_dir_entry+0x1a>
   163f6:	8b 45 08             	mov    0x8(%ebp),%eax
   163f9:	8b 50 18             	mov    0x18(%eax),%edx
   163fc:	8b 45 10             	mov    0x10(%ebp),%eax
   163ff:	39 c2                	cmp    %eax,%edx
   16401:	77 0a                	ja     1640d <write_dir_entry+0x24>
        return -1;
   16403:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16408:	e9 86 00 00 00       	jmp    16493 <write_dir_entry+0xaa>
    }

    //计算该目录项所在根目录区的扇区的扇区号
    int offset = dir_index * sizeof(diritem_t);
   1640d:	8b 45 10             	mov    0x10(%ebp),%eax
   16410:	c1 e0 05             	shl    $0x5,%eax
   16413:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start_sector + offset / fat->bytes_per_sector;
   16416:	8b 45 08             	mov    0x8(%ebp),%eax
   16419:	8b 48 14             	mov    0x14(%eax),%ecx
   1641c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1641f:	8b 55 08             	mov    0x8(%ebp),%edx
   16422:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16425:	ba 00 00 00 00       	mov    $0x0,%edx
   1642a:	f7 f3                	div    %ebx
   1642c:	01 c8                	add    %ecx,%eax
   1642e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = fat_read_sector(fat, sector);
   16431:	83 ec 08             	sub    $0x8,%esp
   16434:	ff 75 f0             	push   -0x10(%ebp)
   16437:	ff 75 08             	push   0x8(%ebp)
   1643a:	e8 e3 f7 ff ff       	call   15c22 <fat_read_sector>
   1643f:	83 c4 10             	add    $0x10,%esp
   16442:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   16445:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16449:	79 07                	jns    16452 <write_dir_entry+0x69>
        return -1;
   1644b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16450:	eb 41                	jmp    16493 <write_dir_entry+0xaa>
    }

    //将该目录项拷贝到扇区缓存的指定对应位置
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sector, item, sizeof(diritem_t));
   16452:	8b 45 08             	mov    0x8(%ebp),%eax
   16455:	8b 58 28             	mov    0x28(%eax),%ebx
   16458:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1645b:	8b 55 08             	mov    0x8(%ebp),%edx
   1645e:	8b 4a 0c             	mov    0xc(%edx),%ecx
   16461:	ba 00 00 00 00       	mov    $0x0,%edx
   16466:	f7 f1                	div    %ecx
   16468:	89 d0                	mov    %edx,%eax
   1646a:	01 d8                	add    %ebx,%eax
   1646c:	83 ec 04             	sub    $0x4,%esp
   1646f:	6a 20                	push   $0x20
   16471:	ff 75 0c             	push   0xc(%ebp)
   16474:	50                   	push   %eax
   16475:	e8 5a 28 00 00       	call   18cd4 <kernel_memcpy>
   1647a:	83 c4 10             	add    $0x10,%esp

    //将扇区重新覆盖到磁盘上
    fat_write_sector(fat, sector);
   1647d:	83 ec 08             	sub    $0x8,%esp
   16480:	ff 75 f0             	push   -0x10(%ebp)
   16483:	ff 75 08             	push   0x8(%ebp)
   16486:	e8 f2 f7 ff ff       	call   15c7d <fat_write_sector>
   1648b:	83 c4 10             	add    $0x10,%esp
    
    return 0;
   1648e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16493:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16496:	c9                   	leave  
   16497:	c3                   	ret    

00016498 <read_dir_entry>:
 * 
 * @param fat 
 * @param dir_index 
 * @return diritem_t* 
 */
static diritem_t * read_dir_entry(fat_t *fat, int dir_index) {
   16498:	55                   	push   %ebp
   16499:	89 e5                	mov    %esp,%ebp
   1649b:	53                   	push   %ebx
   1649c:	83 ec 14             	sub    $0x14,%esp
    if (dir_index < 0 || dir_index >= fat->root_ent_cnt) {
   1649f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   164a3:	78 0d                	js     164b2 <read_dir_entry+0x1a>
   164a5:	8b 45 08             	mov    0x8(%ebp),%eax
   164a8:	8b 50 18             	mov    0x18(%eax),%edx
   164ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   164ae:	39 c2                	cmp    %eax,%edx
   164b0:	77 07                	ja     164b9 <read_dir_entry+0x21>
        return (diritem_t*)0;
   164b2:	b8 00 00 00 00       	mov    $0x0,%eax
   164b7:	eb 5f                	jmp    16518 <read_dir_entry+0x80>
    }

    //计算该目录项所在根目录区的扇区的扇区号
    int offset = dir_index * sizeof(diritem_t);
   164b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   164bc:	c1 e0 05             	shl    $0x5,%eax
   164bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start_sector + offset / fat->bytes_per_sector;
   164c2:	8b 45 08             	mov    0x8(%ebp),%eax
   164c5:	8b 48 14             	mov    0x14(%eax),%ecx
   164c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   164cb:	8b 55 08             	mov    0x8(%ebp),%edx
   164ce:	8b 5a 0c             	mov    0xc(%edx),%ebx
   164d1:	ba 00 00 00 00       	mov    $0x0,%edx
   164d6:	f7 f3                	div    %ebx
   164d8:	01 c8                	add    %ecx,%eax
   164da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = fat_read_sector(fat, sector);
   164dd:	83 ec 08             	sub    $0x8,%esp
   164e0:	ff 75 f0             	push   -0x10(%ebp)
   164e3:	ff 75 08             	push   0x8(%ebp)
   164e6:	e8 37 f7 ff ff       	call   15c22 <fat_read_sector>
   164eb:	83 c4 10             	add    $0x10,%esp
   164ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   164f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   164f5:	79 07                	jns    164fe <read_dir_entry+0x66>
        return (diritem_t*)0;
   164f7:	b8 00 00 00 00       	mov    $0x0,%eax
   164fc:	eb 1a                	jmp    16518 <read_dir_entry+0x80>
    }

    //计算出该目录项的起始地址并返回
    return (diritem_t*)(fat->fat_buffer + offset % fat->bytes_per_sector);
   164fe:	8b 45 08             	mov    0x8(%ebp),%eax
   16501:	8b 58 28             	mov    0x28(%eax),%ebx
   16504:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16507:	8b 55 08             	mov    0x8(%ebp),%edx
   1650a:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1650d:	ba 00 00 00 00       	mov    $0x0,%edx
   16512:	f7 f1                	div    %ecx
   16514:	89 d0                	mov    %edx,%eax
   16516:	01 d8                	add    %ebx,%eax
}
   16518:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1651b:	c9                   	leave  
   1651c:	c3                   	ret    

0001651d <fatfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int fatfs_mount(struct _fs_t *fs, int major, int minor) {
   1651d:	55                   	push   %ebp
   1651e:	89 e5                	mov    %esp,%ebp
   16520:	56                   	push   %esi
   16521:	53                   	push   %ebx
   16522:	83 ec 10             	sub    $0x10,%esp

    //打开对应设备 即对应磁盘的对应分区
    int dev_id = dev_open(major, minor, (void *)0);
   16525:	83 ec 04             	sub    $0x4,%esp
   16528:	6a 00                	push   $0x0
   1652a:	ff 75 10             	push   0x10(%ebp)
   1652d:	ff 75 0c             	push   0xc(%ebp)
   16530:	e8 f6 db ff ff       	call   1412b <dev_open>
   16535:	83 c4 10             	add    $0x10,%esp
   16538:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev_id < 0) {
   1653b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1653f:	79 1b                	jns    1655c <fatfs_mount+0x3f>
        log_printf("open disk failed, major: %x, minor: %x\n", major, minor);
   16541:	83 ec 04             	sub    $0x4,%esp
   16544:	ff 75 10             	push   0x10(%ebp)
   16547:	ff 75 0c             	push   0xc(%ebp)
   1654a:	68 e4 a6 01 00       	push   $0x1a6e4
   1654f:	e8 cc 2f 00 00       	call   19520 <log_printf>
   16554:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16557:	e9 c6 01 00 00       	jmp    16722 <fatfs_mount+0x205>
    }

    //分配一页来作为dbr区域的缓冲区
    dbr_t *dbr = (dbr_t *)memory_alloc_page();
   1655c:	e8 f8 a8 ff ff       	call   10e59 <memory_alloc_page>
   16561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!dbr) {
   16564:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16568:	75 15                	jne    1657f <fatfs_mount+0x62>
        log_printf("mount failed: can't alloc buf\n");
   1656a:	83 ec 0c             	sub    $0xc,%esp
   1656d:	68 0c a7 01 00       	push   $0x1a70c
   16572:	e8 a9 2f 00 00       	call   19520 <log_printf>
   16577:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   1657a:	e9 a3 01 00 00       	jmp    16722 <fatfs_mount+0x205>
    }


    //读取该分区的0号扇区，获取dbr的信息
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   1657f:	6a 01                	push   $0x1
   16581:	ff 75 f4             	push   -0xc(%ebp)
   16584:	6a 00                	push   $0x0
   16586:	ff 75 f0             	push   -0x10(%ebp)
   16589:	e8 c6 dc ff ff       	call   14254 <dev_read>
   1658e:	83 c4 10             	add    $0x10,%esp
   16591:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   16594:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16598:	7f 15                	jg     165af <fatfs_mount+0x92>
        log_printf("read dbr failed\n");
   1659a:	83 ec 0c             	sub    $0xc,%esp
   1659d:	68 2b a7 01 00       	push   $0x1a72b
   165a2:	e8 79 2f 00 00       	call   19520 <log_printf>
   165a7:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   165aa:	e9 73 01 00 00       	jmp    16722 <fatfs_mount+0x205>
    }

    //解析fat表的信息到文件系统中
    fat_t *fat = &fs->fat_data;
   165af:	8b 45 08             	mov    0x8(%ebp),%eax
   165b2:	05 1c 02 00 00       	add    $0x21c,%eax
   165b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->bytes_per_sector = dbr->BPB_BytsPerSec;
   165ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165bd:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   165c1:	0f b7 d0             	movzwl %ax,%edx
   165c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165c7:	89 50 0c             	mov    %edx,0xc(%eax)
    //因为保留区dbr从0扇区开始，且fat表紧邻dbr区
    //所以fat表的起始扇区，也就是保留区dbr的扇区总数
    fat->tbl_start_sector = dbr->BPB_RsvdSecCnt;
   165ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165cd:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   165d1:	0f b7 d0             	movzwl %ax,%edx
   165d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165d7:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   165d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165dc:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   165e0:	0f b7 d0             	movzwl %ax,%edx
   165e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165e6:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   165e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165ec:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   165f0:	0f b6 d0             	movzbl %al,%edx
   165f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165f6:	89 50 04             	mov    %edx,0x4(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   165f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165fc:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16600:	0f b6 d0             	movzbl %al,%edx
   16603:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16606:	89 50 10             	mov    %edx,0x10(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   16609:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1660c:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   16610:	0f b7 d0             	movzwl %ax,%edx
   16613:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16616:	89 50 18             	mov    %edx,0x18(%eax)
    fat->root_start_sector = fat->tbl_start_sector + fat->tbl_sectors * fat->tbl_cnt;
   16619:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1661c:	8b 08                	mov    (%eax),%ecx
   1661e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16621:	8b 50 08             	mov    0x8(%eax),%edx
   16624:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16627:	8b 40 04             	mov    0x4(%eax),%eax
   1662a:	0f af c2             	imul   %edx,%eax
   1662d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   16630:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16633:	89 50 14             	mov    %edx,0x14(%eax)
    fat->data_start_sector = fat->root_start_sector + fat->root_ent_cnt * 32 / dbr->BPB_BytsPerSec;
   16636:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16639:	8b 58 14             	mov    0x14(%eax),%ebx
   1663c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1663f:	8b 40 18             	mov    0x18(%eax),%eax
   16642:	c1 e0 05             	shl    $0x5,%eax
   16645:	89 c1                	mov    %eax,%ecx
   16647:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1664a:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   1664e:	0f b7 f0             	movzwl %ax,%esi
   16651:	89 c8                	mov    %ecx,%eax
   16653:	ba 00 00 00 00       	mov    $0x0,%edx
   16658:	f7 f6                	div    %esi
   1665a:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1665d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16660:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->cluster_bytes_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   16663:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16666:	8b 50 10             	mov    0x10(%eax),%edx
   16669:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1666c:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   16670:	0f b7 c0             	movzwl %ax,%eax
   16673:	0f af d0             	imul   %eax,%edx
   16676:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16679:	89 50 20             	mov    %edx,0x20(%eax)
    fat->fat_buffer = (uint8_t*)dbr;
   1667c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1667f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   16682:	89 50 28             	mov    %edx,0x28(%eax)
    fat->fs = fs;
   16685:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16688:	8b 55 08             	mov    0x8(%ebp),%edx
   1668b:	89 50 2c             	mov    %edx,0x2c(%eax)
    fat->curr_sector = -1;
   1668e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16691:	c7 40 24 ff ff ff ff 	movl   $0xffffffff,0x24(%eax)

    if (fat->tbl_cnt != 2) {    //fat表数量一般为2， 不为2则出错
   16698:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1669b:	8b 40 04             	mov    0x4(%eax),%eax
   1669e:	83 f8 02             	cmp    $0x2,%eax
   166a1:	74 18                	je     166bb <fatfs_mount+0x19e>
        log_printf("%s: fat table error: major: %x, minor: %x\n", major, minor);
   166a3:	83 ec 04             	sub    $0x4,%esp
   166a6:	ff 75 10             	push   0x10(%ebp)
   166a9:	ff 75 0c             	push   0xc(%ebp)
   166ac:	68 3c a7 01 00       	push   $0x1a73c
   166b1:	e8 6a 2e 00 00       	call   19520 <log_printf>
   166b6:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   166b9:	eb 67                	jmp    16722 <fatfs_mount+0x205>
    }

    if (kernel_strncmp((char*)(dbr->BS_FilSysType), "FAT16", 5) != 0) { //不是FAT16文件系统，出错
   166bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   166be:	83 c0 36             	add    $0x36,%eax
   166c1:	83 ec 04             	sub    $0x4,%esp
   166c4:	6a 05                	push   $0x5
   166c6:	68 67 a7 01 00       	push   $0x1a767
   166cb:	50                   	push   %eax
   166cc:	e8 4d 25 00 00       	call   18c1e <kernel_strncmp>
   166d1:	83 c4 10             	add    $0x10,%esp
   166d4:	85 c0                	test   %eax,%eax
   166d6:	74 18                	je     166f0 <fatfs_mount+0x1d3>
        log_printf("not a fat filesystem: major: %x, minor: %x\n", major, minor);
   166d8:	83 ec 04             	sub    $0x4,%esp
   166db:	ff 75 10             	push   0x10(%ebp)
   166de:	ff 75 0c             	push   0xc(%ebp)
   166e1:	68 70 a7 01 00       	push   $0x1a770
   166e6:	e8 35 2e 00 00       	call   19520 <log_printf>
   166eb:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   166ee:	eb 32                	jmp    16722 <fatfs_mount+0x205>

    }

    fs->type = FS_FAT16;
   166f0:	8b 45 08             	mov    0x8(%ebp),%eax
   166f3:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   166fa:	00 00 00 
    fs->data = &fs->fat_data;
   166fd:	8b 45 08             	mov    0x8(%ebp),%eax
   16700:	8d 90 1c 02 00 00    	lea    0x21c(%eax),%edx
   16706:	8b 45 08             	mov    0x8(%ebp),%eax
   16709:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   1670f:	8b 45 08             	mov    0x8(%ebp),%eax
   16712:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16715:	89 90 18 02 00 00    	mov    %edx,0x218(%eax)

    return 0;
   1671b:	b8 00 00 00 00       	mov    $0x0,%eax
   16720:	eb 28                	jmp    1674a <fatfs_mount+0x22d>

mount_failed:
    if (dbr) {
   16722:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16726:	74 0f                	je     16737 <fatfs_mount+0x21a>
        memory_free_page((uint32_t)dbr);
   16728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1672b:	83 ec 0c             	sub    $0xc,%esp
   1672e:	50                   	push   %eax
   1672f:	e8 45 a7 ff ff       	call   10e79 <memory_free_page>
   16734:	83 c4 10             	add    $0x10,%esp
    }

    dev_close(dev_id);
   16737:	83 ec 0c             	sub    $0xc,%esp
   1673a:	ff 75 f0             	push   -0x10(%ebp)
   1673d:	e8 f6 db ff ff       	call   14338 <dev_close>
   16742:	83 c4 10             	add    $0x10,%esp

    return -1;
   16745:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

} 
   1674a:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1674d:	5b                   	pop    %ebx
   1674e:	5e                   	pop    %esi
   1674f:	5d                   	pop    %ebp
   16750:	c3                   	ret    

00016751 <fatfs_unmount>:
/**
 * @brief 卸载fat文件系统
 * 
 * @param fs 
 */
void fatfs_unmount(struct _fs_t *fs) {
   16751:	55                   	push   %ebp
   16752:	89 e5                	mov    %esp,%ebp
   16754:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16757:	8b 45 08             	mov    0x8(%ebp),%eax
   1675a:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16760:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dev_close(fs->dev_id);
   16763:	8b 45 08             	mov    0x8(%ebp),%eax
   16766:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   1676c:	83 ec 0c             	sub    $0xc,%esp
   1676f:	50                   	push   %eax
   16770:	e8 c3 db ff ff       	call   14338 <dev_close>
   16775:	83 c4 10             	add    $0x10,%esp

    memory_free_page((uint32_t)fat->fat_buffer);
   16778:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1677b:	8b 40 28             	mov    0x28(%eax),%eax
   1677e:	83 ec 0c             	sub    $0xc,%esp
   16781:	50                   	push   %eax
   16782:	e8 f2 a6 ff ff       	call   10e79 <memory_free_page>
   16787:	83 c4 10             	add    $0x10,%esp
}
   1678a:	90                   	nop
   1678b:	c9                   	leave  
   1678c:	c3                   	ret    

0001678d <fatfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int fatfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   1678d:	55                   	push   %ebp
   1678e:	89 e5                	mov    %esp,%ebp
   16790:	83 ec 48             	sub    $0x48,%esp
    //获取fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16793:	8b 45 08             	mov    0x8(%ebp),%eax
   16796:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1679c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //遍历读取根目录区的目录项,按路径path匹配对应目录项
    diritem_t *file_item = (diritem_t*)0;
   1679f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;   //记录匹配到的目录项的索引
   167a6:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   167ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   167b4:	eb 63                	jmp    16819 <fatfs_open+0x8c>
        diritem_t * item = read_dir_entry(fat, i);
   167b6:	83 ec 08             	sub    $0x8,%esp
   167b9:	ff 75 ec             	push   -0x14(%ebp)
   167bc:	ff 75 e8             	push   -0x18(%ebp)
   167bf:	e8 d4 fc ff ff       	call   16498 <read_dir_entry>
   167c4:	83 c4 10             	add    $0x10,%esp
   167c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   167ca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   167ce:	75 0a                	jne    167da <fatfs_open+0x4d>
            return -1;
   167d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   167d5:	e9 33 01 00 00       	jmp    1690d <fatfs_open+0x180>
        }

        //记录所遍历到的目录项的索引
        p_index = i;
   167da:	8b 45 ec             	mov    -0x14(%ebp),%eax
   167dd:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   167e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   167e3:	0f b6 00             	movzbl (%eax),%eax
   167e6:	84 c0                	test   %al,%al
   167e8:	74 27                	je     16811 <fatfs_open+0x84>
            continue;
        }

        if (item->DIR_Name[0] == DIRITEM_NAEM_FREE) {
   167ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   167ed:	0f b6 00             	movzbl (%eax),%eax
   167f0:	3c e5                	cmp    $0xe5,%al
   167f2:	74 20                	je     16814 <fatfs_open+0x87>
            continue;
        }

        //进行路径匹配
        if (diritem_name_match(item, path)) {
   167f4:	83 ec 08             	sub    $0x8,%esp
   167f7:	ff 75 0c             	push   0xc(%ebp)
   167fa:	ff 75 e4             	push   -0x1c(%ebp)
   167fd:	e8 b1 fb ff ff       	call   163b3 <diritem_name_match>
   16802:	83 c4 10             	add    $0x10,%esp
   16805:	85 c0                	test   %eax,%eax
   16807:	74 0c                	je     16815 <fatfs_open+0x88>
            file_item = item;
   16809:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1680c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1680f:	eb 15                	jmp    16826 <fatfs_open+0x99>
            continue;
   16811:	90                   	nop
   16812:	eb 01                	jmp    16815 <fatfs_open+0x88>
            continue;
   16814:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16815:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16819:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1681c:	8b 50 18             	mov    0x18(%eax),%edx
   1681f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16822:	39 c2                	cmp    %eax,%edx
   16824:	77 90                	ja     167b6 <fatfs_open+0x29>
        }
    }

    
    if (file_item) {//从目录项中读取文件信息到file结构中
   16826:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1682a:	74 62                	je     1688e <fatfs_open+0x101>
        read_from_diritem(fat, file, file_item, p_index);
   1682c:	ff 75 f0             	push   -0x10(%ebp)
   1682f:	ff 75 f4             	push   -0xc(%ebp)
   16832:	ff 75 10             	push   0x10(%ebp)
   16835:	ff 75 e8             	push   -0x18(%ebp)
   16838:	e8 5e fa ff ff       	call   1629b <read_from_diritem>
   1683d:	83 c4 10             	add    $0x10,%esp

        if (file->mode & O_TRUNC) { //以截断模式打开文件，需清空文件
   16840:	8b 45 10             	mov    0x10(%ebp),%eax
   16843:	8b 40 34             	mov    0x34(%eax),%eax
   16846:	25 00 04 00 00       	and    $0x400,%eax
   1684b:	85 c0                	test   %eax,%eax
   1684d:	74 38                	je     16887 <fatfs_open+0xfa>
            cluster_free_chain(fat, file->sblk);
   1684f:	8b 45 10             	mov    0x10(%ebp),%eax
   16852:	8b 40 3c             	mov    0x3c(%eax),%eax
   16855:	0f b7 c0             	movzwl %ax,%eax
   16858:	83 ec 08             	sub    $0x8,%esp
   1685b:	50                   	push   %eax
   1685c:	ff 75 e8             	push   -0x18(%ebp)
   1685f:	e8 44 f6 ff ff       	call   15ea8 <cluster_free_chain>
   16864:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   16867:	8b 45 10             	mov    0x10(%ebp),%eax
   1686a:	c7 40 3c f8 ff 00 00 	movl   $0xfff8,0x3c(%eax)
   16871:	8b 45 10             	mov    0x10(%ebp),%eax
   16874:	8b 50 3c             	mov    0x3c(%eax),%edx
   16877:	8b 45 10             	mov    0x10(%ebp),%eax
   1687a:	89 50 40             	mov    %edx,0x40(%eax)
            file->size = 0;
   1687d:	8b 45 10             	mov    0x10(%ebp),%eax
   16880:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
        }
        return 0;
   16887:	b8 00 00 00 00       	mov    $0x0,%eax
   1688c:	eb 7f                	jmp    1690d <fatfs_open+0x180>
    } else if ((file->mode & O_CREAT) && p_index >= 0){//创建文件模式下未找到对应的目录项，创建新一个文件
   1688e:	8b 45 10             	mov    0x10(%ebp),%eax
   16891:	8b 40 34             	mov    0x34(%eax),%eax
   16894:	25 00 02 00 00       	and    $0x200,%eax
   16899:	85 c0                	test   %eax,%eax
   1689b:	74 6b                	je     16908 <fatfs_open+0x17b>
   1689d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   168a1:	78 65                	js     16908 <fatfs_open+0x17b>
        //初始化一个目录项信息
        diritem_t item;
        diritem_init(&item, DIRITEM_ATTR_ARCHIVE, path);
   168a3:	83 ec 04             	sub    $0x4,%esp
   168a6:	ff 75 0c             	push   0xc(%ebp)
   168a9:	6a 20                	push   $0x20
   168ab:	8d 45 c0             	lea    -0x40(%ebp),%eax
   168ae:	50                   	push   %eax
   168af:	e8 bf f2 ff ff       	call   15b73 <diritem_init>
   168b4:	83 c4 10             	add    $0x10,%esp

        //将目录项信息写入到根目录区
        int err = write_dir_entry(fat, &item, p_index);
   168b7:	83 ec 04             	sub    $0x4,%esp
   168ba:	ff 75 f0             	push   -0x10(%ebp)
   168bd:	8d 45 c0             	lea    -0x40(%ebp),%eax
   168c0:	50                   	push   %eax
   168c1:	ff 75 e8             	push   -0x18(%ebp)
   168c4:	e8 20 fb ff ff       	call   163e9 <write_dir_entry>
   168c9:	83 c4 10             	add    $0x10,%esp
   168cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   168cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   168d3:	79 17                	jns    168ec <fatfs_open+0x15f>
            log_printf("create file failed\n");
   168d5:	83 ec 0c             	sub    $0xc,%esp
   168d8:	68 9c a7 01 00       	push   $0x1a79c
   168dd:	e8 3e 2c 00 00       	call   19520 <log_printf>
   168e2:	83 c4 10             	add    $0x10,%esp
            return -1;
   168e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   168ea:	eb 21                	jmp    1690d <fatfs_open+0x180>
        }

        //将目录项信息读到file结构中
        read_from_diritem(fat, file, &item, p_index);
   168ec:	ff 75 f0             	push   -0x10(%ebp)
   168ef:	8d 45 c0             	lea    -0x40(%ebp),%eax
   168f2:	50                   	push   %eax
   168f3:	ff 75 10             	push   0x10(%ebp)
   168f6:	ff 75 e8             	push   -0x18(%ebp)
   168f9:	e8 9d f9 ff ff       	call   1629b <read_from_diritem>
   168fe:	83 c4 10             	add    $0x10,%esp
        return 0;
   16901:	b8 00 00 00 00       	mov    $0x0,%eax
   16906:	eb 05                	jmp    1690d <fatfs_open+0x180>

    }

    return -1;
   16908:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1690d:	c9                   	leave  
   1690e:	c3                   	ret    

0001690f <fatfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int fatfs_read(char *buf, int size, file_t *file) {
   1690f:	55                   	push   %ebp
   16910:	89 e5                	mov    %esp,%ebp
   16912:	53                   	push   %ebx
   16913:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t*)file->fs->data;
   16916:	8b 45 10             	mov    0x10(%ebp),%eax
   16919:	8b 40 28             	mov    0x28(%eax),%eax
   1691c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16922:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //修正读取字节数
    uint32_t nbytes = size;
   16925:	8b 45 0c             	mov    0xc(%ebp),%eax
   16928:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   1692b:	8b 45 10             	mov    0x10(%ebp),%eax
   1692e:	8b 40 30             	mov    0x30(%eax),%eax
   16931:	89 c2                	mov    %eax,%edx
   16933:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16936:	01 c2                	add    %eax,%edx
   16938:	8b 45 10             	mov    0x10(%ebp),%eax
   1693b:	8b 40 38             	mov    0x38(%eax),%eax
   1693e:	39 c2                	cmp    %eax,%edx
   16940:	76 15                	jbe    16957 <fatfs_read+0x48>
        nbytes = file->size - file->pos;
   16942:	8b 45 10             	mov    0x10(%ebp),%eax
   16945:	8b 50 38             	mov    0x38(%eax),%edx
   16948:	8b 45 10             	mov    0x10(%ebp),%eax
   1694b:	8b 40 30             	mov    0x30(%eax),%eax
   1694e:	89 c1                	mov    %eax,%ecx
   16950:	89 d0                	mov    %edx,%eax
   16952:	29 c8                	sub    %ecx,%eax
   16954:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   16957:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  
    //读取nbytes个字节到buf中
    while (nbytes > 0) {
   1695e:	e9 40 01 00 00       	jmp    16aa3 <fatfs_read+0x194>
        //记录每次循环读取的字节数
        uint32_t curr_read = nbytes;
   16963:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16966:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //计算当前读取位置pos在当前读取的簇中的偏移量
        uint32_t cluster_offset = file->pos % fat->cluster_bytes_size;
   16969:	8b 45 10             	mov    0x10(%ebp),%eax
   1696c:	8b 40 30             	mov    0x30(%eax),%eax
   1696f:	89 c2                	mov    %eax,%edx
   16971:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16974:	8b 48 20             	mov    0x20(%eax),%ecx
   16977:	89 d0                	mov    %edx,%eax
   16979:	ba 00 00 00 00       	mov    $0x0,%edx
   1697e:	f7 f1                	div    %ecx
   16980:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //计算文件在该分区中的起始扇区号
        //fat文件系统中，在分区的文件数据区中，簇号从2开始编号
        //[2],[3],[4]
        //[0] = 0xfff8, [1] = 0xffff 固定值
        uint32_t start_sector = fat->data_start_sector + (file->cblk - 2) * fat->sec_per_cluster;
   16983:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16986:	8b 50 1c             	mov    0x1c(%eax),%edx
   16989:	8b 45 10             	mov    0x10(%ebp),%eax
   1698c:	8b 40 40             	mov    0x40(%eax),%eax
   1698f:	83 e8 02             	sub    $0x2,%eax
   16992:	89 c1                	mov    %eax,%ecx
   16994:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16997:	8b 40 10             	mov    0x10(%eax),%eax
   1699a:	0f af c1             	imul   %ecx,%eax
   1699d:	01 d0                	add    %edx,%eax
   1699f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //当前读取位置刚好在簇的开头，且读取大小为一个簇，直接进行整簇读取即可
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   169a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   169a6:	75 4c                	jne    169f4 <fatfs_read+0xe5>
   169a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ab:	8b 40 20             	mov    0x20(%eax),%eax
   169ae:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   169b1:	75 41                	jne    169f4 <fatfs_read+0xe5>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   169b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169b6:	8b 40 10             	mov    0x10(%eax),%eax
   169b9:	89 c1                	mov    %eax,%ecx
   169bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
   169be:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169c1:	8b 40 2c             	mov    0x2c(%eax),%eax
   169c4:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   169ca:	51                   	push   %ecx
   169cb:	ff 75 08             	push   0x8(%ebp)
   169ce:	52                   	push   %edx
   169cf:	50                   	push   %eax
   169d0:	e8 7f d8 ff ff       	call   14254 <dev_read>
   169d5:	83 c4 10             	add    $0x10,%esp
   169d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   169db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   169df:	79 08                	jns    169e9 <fatfs_read+0xda>
                return total_read;
   169e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   169e4:	e9 c7 00 00 00       	jmp    16ab0 <fatfs_read+0x1a1>
            }

            curr_read = fat->cluster_bytes_size;
   169e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ec:	8b 40 20             	mov    0x20(%eax),%eax
   169ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   169f2:	eb 7c                	jmp    16a70 <fatfs_read+0x161>
        } else {//当前读取内容需要进行跨簇读取
            if (cluster_offset + curr_read > fat->cluster_bytes_size) {
   169f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   169f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   169fa:	01 c2                	add    %eax,%edx
   169fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ff:	8b 40 20             	mov    0x20(%eax),%eax
   16a02:	39 c2                	cmp    %eax,%edx
   16a04:	76 0c                	jbe    16a12 <fatfs_read+0x103>
                curr_read = fat->cluster_bytes_size - cluster_offset;
   16a06:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a09:	8b 40 20             	mov    0x20(%eax),%eax
   16a0c:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16a0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            //先将当前簇中的内容读取到fat_buffer中
            fat->curr_sector = start_sector;
   16a12:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a15:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16a18:	89 50 24             	mov    %edx,0x24(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16a1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a1e:	8b 40 10             	mov    0x10(%eax),%eax
   16a21:	89 c3                	mov    %eax,%ebx
   16a23:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a26:	8b 48 28             	mov    0x28(%eax),%ecx
   16a29:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16a2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a2f:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a32:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16a38:	53                   	push   %ebx
   16a39:	51                   	push   %ecx
   16a3a:	52                   	push   %edx
   16a3b:	50                   	push   %eax
   16a3c:	e8 13 d8 ff ff       	call   14254 <dev_read>
   16a41:	83 c4 10             	add    $0x10,%esp
   16a44:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   16a47:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   16a4b:	79 05                	jns    16a52 <fatfs_read+0x143>
                return total_read;
   16a4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a50:	eb 5e                	jmp    16ab0 <fatfs_read+0x1a1>
            }
            //再从fat_buffer中读取文件相关部分到buf中
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   16a52:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a55:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16a58:	8b 4a 28             	mov    0x28(%edx),%ecx
   16a5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16a5e:	01 ca                	add    %ecx,%edx
   16a60:	83 ec 04             	sub    $0x4,%esp
   16a63:	50                   	push   %eax
   16a64:	52                   	push   %edx
   16a65:	ff 75 08             	push   0x8(%ebp)
   16a68:	e8 67 22 00 00       	call   18cd4 <kernel_memcpy>
   16a6d:	83 c4 10             	add    $0x10,%esp
        }
        buf += curr_read;
   16a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a73:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   16a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a79:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   16a7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a7f:	01 45 f0             	add    %eax,-0x10(%ebp)

        //移动文件的读取位置file->pos
        int err = move_file_pos(file, fat, curr_read, 0);
   16a82:	6a 00                	push   $0x0
   16a84:	ff 75 ec             	push   -0x14(%ebp)
   16a87:	ff 75 e8             	push   -0x18(%ebp)
   16a8a:	ff 75 10             	push   0x10(%ebp)
   16a8d:	e8 ea f6 ff ff       	call   1617c <move_file_pos>
   16a92:	83 c4 10             	add    $0x10,%esp
   16a95:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   16a98:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16a9c:	79 05                	jns    16aa3 <fatfs_read+0x194>
            return total_read;
   16a9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16aa1:	eb 0d                	jmp    16ab0 <fatfs_read+0x1a1>
    while (nbytes > 0) {
   16aa3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16aa7:	0f 85 b6 fe ff ff    	jne    16963 <fatfs_read+0x54>
        }
    
    }
    return total_read;
   16aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16ab0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16ab3:	c9                   	leave  
   16ab4:	c3                   	ret    

00016ab5 <fatfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int fatfs_write(char *buf, int size, file_t *file) {
   16ab5:	55                   	push   %ebp
   16ab6:	89 e5                	mov    %esp,%ebp
   16ab8:	53                   	push   %ebx
   16ab9:	83 ec 34             	sub    $0x34,%esp

    fat_t *fat = (fat_t*)file->fs->data;
   16abc:	8b 45 10             	mov    0x10(%ebp),%eax
   16abf:	8b 40 28             	mov    0x28(%eax),%eax
   16ac2:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16ac8:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //文件空间大小不足以写入，需要拓展空间
    if (file->pos + size > file->size) {
   16acb:	8b 45 10             	mov    0x10(%ebp),%eax
   16ace:	8b 50 30             	mov    0x30(%eax),%edx
   16ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
   16ad4:	01 d0                	add    %edx,%eax
   16ad6:	89 c2                	mov    %eax,%edx
   16ad8:	8b 45 10             	mov    0x10(%ebp),%eax
   16adb:	8b 40 38             	mov    0x38(%eax),%eax
   16ade:	39 c2                	cmp    %eax,%edx
   16ae0:	76 3e                	jbe    16b20 <fatfs_write+0x6b>
        //计算文件当前空间大小与待写入的大小的差值
        int inc_size = file->pos + size - file->size;
   16ae2:	8b 45 10             	mov    0x10(%ebp),%eax
   16ae5:	8b 50 30             	mov    0x30(%eax),%edx
   16ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
   16aeb:	01 d0                	add    %edx,%eax
   16aed:	89 c1                	mov    %eax,%ecx
   16aef:	8b 45 10             	mov    0x10(%ebp),%eax
   16af2:	8b 50 38             	mov    0x38(%eax),%edx
   16af5:	89 c8                	mov    %ecx,%eax
   16af7:	29 d0                	sub    %edx,%eax
   16af9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //拓展文件大小
        int err = expand_file(file, inc_size);
   16afc:	83 ec 08             	sub    $0x8,%esp
   16aff:	ff 75 e4             	push   -0x1c(%ebp)
   16b02:	ff 75 10             	push   0x10(%ebp)
   16b05:	e8 1e f5 ff ff       	call   16028 <expand_file>
   16b0a:	83 c4 10             	add    $0x10,%esp
   16b0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   16b10:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16b14:	79 0a                	jns    16b20 <fatfs_write+0x6b>
            return 0;
   16b16:	b8 00 00 00 00       	mov    $0x0,%eax
   16b1b:	e9 ad 01 00 00       	jmp    16ccd <fatfs_write+0x218>
        }
    }

    uint32_t nbytes = size;
   16b20:	8b 45 0c             	mov    0xc(%ebp),%eax
   16b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   16b26:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0) {
   16b2d:	e9 8e 01 00 00       	jmp    16cc0 <fatfs_write+0x20b>
        //记录每次循环读取的字节数
        uint32_t curr_write = nbytes;
   16b32:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16b35:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //计算当前读取位置pos在当前写入的簇中的偏移量
        uint32_t cluster_offset = file->pos % fat->cluster_bytes_size;
   16b38:	8b 45 10             	mov    0x10(%ebp),%eax
   16b3b:	8b 40 30             	mov    0x30(%eax),%eax
   16b3e:	89 c2                	mov    %eax,%edx
   16b40:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b43:	8b 48 20             	mov    0x20(%eax),%ecx
   16b46:	89 d0                	mov    %edx,%eax
   16b48:	ba 00 00 00 00       	mov    $0x0,%edx
   16b4d:	f7 f1                	div    %ecx
   16b4f:	89 55 dc             	mov    %edx,-0x24(%ebp)
        //计算文件在该分区中的起始扇区号
        //fat文件系统中，在分区的文件数据区中，簇号从2开始编号
        //[2],[3],[4]
        uint32_t start_sector = fat->data_start_sector + (file->cblk - 2) * fat->sec_per_cluster;
   16b52:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b55:	8b 50 1c             	mov    0x1c(%eax),%edx
   16b58:	8b 45 10             	mov    0x10(%ebp),%eax
   16b5b:	8b 40 40             	mov    0x40(%eax),%eax
   16b5e:	83 e8 02             	sub    $0x2,%eax
   16b61:	89 c1                	mov    %eax,%ecx
   16b63:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b66:	8b 40 10             	mov    0x10(%eax),%eax
   16b69:	0f af c1             	imul   %ecx,%eax
   16b6c:	01 d0                	add    %edx,%eax
   16b6e:	89 45 d8             	mov    %eax,-0x28(%ebp)

        //当前写入位置刚好在簇的开头，且大小为一个簇，直接进行整簇写入即可
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16b71:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   16b75:	75 4f                	jne    16bc6 <fatfs_write+0x111>
   16b77:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b7a:	8b 40 20             	mov    0x20(%eax),%eax
   16b7d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16b80:	75 44                	jne    16bc6 <fatfs_write+0x111>
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16b82:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b85:	8b 40 10             	mov    0x10(%eax),%eax
   16b88:	89 c1                	mov    %eax,%ecx
   16b8a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16b8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b90:	8b 40 2c             	mov    0x2c(%eax),%eax
   16b93:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16b99:	51                   	push   %ecx
   16b9a:	ff 75 08             	push   0x8(%ebp)
   16b9d:	52                   	push   %edx
   16b9e:	50                   	push   %eax
   16b9f:	e8 fc d6 ff ff       	call   142a0 <dev_write>
   16ba4:	83 c4 10             	add    $0x10,%esp
   16ba7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   16baa:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16bae:	79 08                	jns    16bb8 <fatfs_write+0x103>
                return total_write;
   16bb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16bb3:	e9 15 01 00 00       	jmp    16ccd <fatfs_write+0x218>
            }

            curr_write = fat->cluster_bytes_size;
   16bb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bbb:	8b 40 20             	mov    0x20(%eax),%eax
   16bbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16bc1:	e9 b6 00 00 00       	jmp    16c7c <fatfs_write+0x1c7>
        } else {//当前写入内容需要进行跨簇写入
            if (cluster_offset + curr_write > fat->cluster_bytes_size) {
   16bc6:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16bcc:	01 c2                	add    %eax,%edx
   16bce:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bd1:	8b 40 20             	mov    0x20(%eax),%eax
   16bd4:	39 c2                	cmp    %eax,%edx
   16bd6:	76 0c                	jbe    16be4 <fatfs_write+0x12f>
                curr_write = fat->cluster_bytes_size - cluster_offset;
   16bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bdb:	8b 40 20             	mov    0x20(%eax),%eax
   16bde:	2b 45 dc             	sub    -0x24(%ebp),%eax
   16be1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            //先将当前簇中的内容读取到fat_buffer中
            fat->curr_sector = start_sector;
   16be4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16be7:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16bea:	89 50 24             	mov    %edx,0x24(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16bed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bf0:	8b 40 10             	mov    0x10(%eax),%eax
   16bf3:	89 c3                	mov    %eax,%ebx
   16bf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bf8:	8b 48 28             	mov    0x28(%eax),%ecx
   16bfb:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16bfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c01:	8b 40 2c             	mov    0x2c(%eax),%eax
   16c04:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16c0a:	53                   	push   %ebx
   16c0b:	51                   	push   %ecx
   16c0c:	52                   	push   %edx
   16c0d:	50                   	push   %eax
   16c0e:	e8 41 d6 ff ff       	call   14254 <dev_read>
   16c13:	83 c4 10             	add    $0x10,%esp
   16c16:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16c19:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16c1d:	79 08                	jns    16c27 <fatfs_write+0x172>
                return total_write;
   16c1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c22:	e9 a6 00 00 00       	jmp    16ccd <fatfs_write+0x218>
            }
            //再将需要写入的内容写入fat_buffer中对应位置
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);
   16c27:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16c2d:	8b 4a 28             	mov    0x28(%edx),%ecx
   16c30:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16c33:	01 ca                	add    %ecx,%edx
   16c35:	83 ec 04             	sub    $0x4,%esp
   16c38:	50                   	push   %eax
   16c39:	ff 75 08             	push   0x8(%ebp)
   16c3c:	52                   	push   %edx
   16c3d:	e8 92 20 00 00       	call   18cd4 <kernel_memcpy>
   16c42:	83 c4 10             	add    $0x10,%esp

            //再将fat_buffer覆盖回磁盘
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16c45:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c48:	8b 40 10             	mov    0x10(%eax),%eax
   16c4b:	89 c3                	mov    %eax,%ebx
   16c4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c50:	8b 48 28             	mov    0x28(%eax),%ecx
   16c53:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16c56:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c59:	8b 40 2c             	mov    0x2c(%eax),%eax
   16c5c:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16c62:	53                   	push   %ebx
   16c63:	51                   	push   %ecx
   16c64:	52                   	push   %edx
   16c65:	50                   	push   %eax
   16c66:	e8 35 d6 ff ff       	call   142a0 <dev_write>
   16c6b:	83 c4 10             	add    $0x10,%esp
   16c6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16c71:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16c75:	79 05                	jns    16c7c <fatfs_write+0x1c7>
                return total_write;
   16c77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c7a:	eb 51                	jmp    16ccd <fatfs_write+0x218>
            }
        }
        buf += curr_write;
   16c7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c7f:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   16c82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c85:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16c88:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c8b:	01 45 f0             	add    %eax,-0x10(%ebp)
        file->size += curr_write;
   16c8e:	8b 45 10             	mov    0x10(%ebp),%eax
   16c91:	8b 50 38             	mov    0x38(%eax),%edx
   16c94:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c97:	01 c2                	add    %eax,%edx
   16c99:	8b 45 10             	mov    0x10(%ebp),%eax
   16c9c:	89 50 38             	mov    %edx,0x38(%eax)

        //移动文件的读取位置file->pos
        int err = move_file_pos(file, fat, curr_write, 1);
   16c9f:	6a 01                	push   $0x1
   16ca1:	ff 75 ec             	push   -0x14(%ebp)
   16ca4:	ff 75 e8             	push   -0x18(%ebp)
   16ca7:	ff 75 10             	push   0x10(%ebp)
   16caa:	e8 cd f4 ff ff       	call   1617c <move_file_pos>
   16caf:	83 c4 10             	add    $0x10,%esp
   16cb2:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if (err < 0) {
   16cb5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   16cb9:	79 05                	jns    16cc0 <fatfs_write+0x20b>
            return total_write;
   16cbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16cbe:	eb 0d                	jmp    16ccd <fatfs_write+0x218>
    while (nbytes > 0) {
   16cc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16cc4:	0f 85 68 fe ff ff    	jne    16b32 <fatfs_write+0x7d>
        }
    }

    return total_write;
   16cca:	8b 45 f0             	mov    -0x10(%ebp),%eax

}
   16ccd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16cd0:	c9                   	leave  
   16cd1:	c3                   	ret    

00016cd2 <fatfs_close>:
/**
 * @brief fat文件系统关闭文件
 * 
 * @param file 
 */
void fatfs_close(file_t *file) {
   16cd2:	55                   	push   %ebp
   16cd3:	89 e5                	mov    %esp,%ebp
   16cd5:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY) {
   16cd8:	8b 45 08             	mov    0x8(%ebp),%eax
   16cdb:	8b 40 34             	mov    0x34(%eax),%eax
   16cde:	85 c0                	test   %eax,%eax
   16ce0:	74 6b                	je     16d4d <fatfs_close+0x7b>
        //文件只进行读操作，不需要回写到磁盘上
        return;
    }

    fat_t *fat = (fat_t*)file->fs->data;
   16ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   16ce5:	8b 40 28             	mov    0x28(%eax),%eax
   16ce8:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16cee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //读取文件所属的根目录区的目录项
    diritem_t *item = read_dir_entry(fat, file->p_index);
   16cf1:	8b 45 08             	mov    0x8(%ebp),%eax
   16cf4:	8b 40 44             	mov    0x44(%eax),%eax
   16cf7:	83 ec 08             	sub    $0x8,%esp
   16cfa:	50                   	push   %eax
   16cfb:	ff 75 f4             	push   -0xc(%ebp)
   16cfe:	e8 95 f7 ff ff       	call   16498 <read_dir_entry>
   16d03:	83 c4 10             	add    $0x10,%esp
   16d06:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0) {
   16d09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16d0d:	74 41                	je     16d50 <fatfs_close+0x7e>
        return;
    }

    //更新目录项信息,并回写到磁盘上
    item->DIR_FileSize = file->size;
   16d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   16d12:	8b 50 38             	mov    0x38(%eax),%edx
   16d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d18:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t)(file->sblk << 16);
   16d1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d1e:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusLo = (uint16_t)(file->sblk & 0xffff);
   16d24:	8b 45 08             	mov    0x8(%ebp),%eax
   16d27:	8b 40 3c             	mov    0x3c(%eax),%eax
   16d2a:	89 c2                	mov    %eax,%edx
   16d2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d2f:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16d33:	8b 45 08             	mov    0x8(%ebp),%eax
   16d36:	8b 40 44             	mov    0x44(%eax),%eax
   16d39:	83 ec 04             	sub    $0x4,%esp
   16d3c:	50                   	push   %eax
   16d3d:	ff 75 f0             	push   -0x10(%ebp)
   16d40:	ff 75 f4             	push   -0xc(%ebp)
   16d43:	e8 a1 f6 ff ff       	call   163e9 <write_dir_entry>
   16d48:	83 c4 10             	add    $0x10,%esp
   16d4b:	eb 04                	jmp    16d51 <fatfs_close+0x7f>
        return;
   16d4d:	90                   	nop
   16d4e:	eb 01                	jmp    16d51 <fatfs_close+0x7f>
        return;
   16d50:	90                   	nop
}
   16d51:	c9                   	leave  
   16d52:	c3                   	ret    

00016d53 <fatfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int fatfs_seek(file_t *file, uint32_t offset, int dir) {
   16d53:	55                   	push   %ebp
   16d54:	89 e5                	mov    %esp,%ebp
   16d56:	83 ec 28             	sub    $0x28,%esp
    if (dir != 0) {
   16d59:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16d5d:	74 0a                	je     16d69 <fatfs_seek+0x16>
        return -1;
   16d5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d64:	e9 c7 00 00 00       	jmp    16e30 <fatfs_seek+0xdd>
    }

    fat_t *fat = (fat_t *)file->fs->data;
   16d69:	8b 45 08             	mov    0x8(%ebp),%eax
   16d6c:	8b 40 28             	mov    0x28(%eax),%eax
   16d6f:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16d75:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t current_cluster = file->cblk;
   16d78:	8b 45 08             	mov    0x8(%ebp),%eax
   16d7b:	8b 40 40             	mov    0x40(%eax),%eax
   16d7e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16d82:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16d89:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d8c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //进行偏移处理
    while (offset_to_move) {
   16d8f:	eb 7d                	jmp    16e0e <fatfs_seek+0xbb>
        //计算文件pos在当前簇中的偏移量
        uint32_t c_offset = curr_pos % fat->cluster_bytes_size;
   16d91:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16d94:	8b 48 20             	mov    0x20(%eax),%ecx
   16d97:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d9a:	ba 00 00 00 00       	mov    $0x0,%edx
   16d9f:	f7 f1                	div    %ecx
   16da1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //初始化此次循环预备移动的字节量
        uint32_t curr_move = offset_to_move;
   16da4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16da7:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if (c_offset + curr_move < fat->cluster_bytes_size) {
   16daa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16dad:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16db0:	01 c2                	add    %eax,%edx
   16db2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16db5:	8b 40 20             	mov    0x20(%eax),%eax
   16db8:	39 c2                	cmp    %eax,%edx
   16dba:	73 08                	jae    16dc4 <fatfs_seek+0x71>
            //此处循环移动后，pos还在当前簇中
            curr_pos += curr_move;
   16dbc:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16dbf:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16dc2:	eb 54                	jmp    16e18 <fatfs_seek+0xc5>
        }

        //此次循环移动后pos将移动到下一个簇
        //所以先将本簇中的剩余字节量偏移
        curr_move = fat->cluster_bytes_size - c_offset;
   16dc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16dc7:	8b 40 20             	mov    0x20(%eax),%eax
   16dca:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16dcd:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16dd0:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16dd3:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16dd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16dd9:	29 45 ec             	sub    %eax,-0x14(%ebp)

        //获取下一个簇号
        current_cluster = cluster_get_next(fat, current_cluster);
   16ddc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16de0:	83 ec 08             	sub    $0x8,%esp
   16de3:	50                   	push   %eax
   16de4:	ff 75 e8             	push   -0x18(%ebp)
   16de7:	e8 cf ee ff ff       	call   15cbb <cluster_get_next>
   16dec:	83 c4 10             	add    $0x10,%esp
   16def:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(current_cluster)) {
   16df3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16df7:	83 ec 0c             	sub    $0xc,%esp
   16dfa:	50                   	push   %eax
   16dfb:	e8 f9 ed ff ff       	call   15bf9 <cluster_is_valid>
   16e00:	83 c4 10             	add    $0x10,%esp
   16e03:	85 c0                	test   %eax,%eax
   16e05:	75 07                	jne    16e0e <fatfs_seek+0xbb>
            return -1;
   16e07:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e0c:	eb 22                	jmp    16e30 <fatfs_seek+0xdd>
    while (offset_to_move) {
   16e0e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16e12:	0f 85 79 ff ff ff    	jne    16d91 <fatfs_seek+0x3e>
        }

    }

    file->cblk = current_cluster;
   16e18:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16e1c:	8b 45 08             	mov    0x8(%ebp),%eax
   16e1f:	89 50 40             	mov    %edx,0x40(%eax)
    file->pos = curr_pos;
   16e22:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16e25:	8b 45 08             	mov    0x8(%ebp),%eax
   16e28:	89 50 30             	mov    %edx,0x30(%eax)
    
    return 0;
   16e2b:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16e30:	c9                   	leave  
   16e31:	c3                   	ret    

00016e32 <fatfs_stat>:
int fatfs_stat(file_t *file, struct stat *st) {
   16e32:	55                   	push   %ebp
   16e33:	89 e5                	mov    %esp,%ebp
    return 0;
   16e35:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16e3a:	5d                   	pop    %ebp
   16e3b:	c3                   	ret    

00016e3c <fatfs_opendir>:
 * @param fs 
 * @param name 
 * @param dir 
 * @return int 
 */
int fatfs_opendir(struct _fs_t *fs, const char *name, DIR *dir) {
   16e3c:	55                   	push   %ebp
   16e3d:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16e3f:	8b 45 10             	mov    0x10(%ebp),%eax
   16e42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16e4d:	5d                   	pop    %ebp
   16e4e:	c3                   	ret    

00016e4f <fatfs_readdir>:
 * @param fs 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int fatfs_readdir(struct _fs_t *fs, DIR *dir, struct dirent *dirent) {
   16e4f:	55                   	push   %ebp
   16e50:	89 e5                	mov    %esp,%ebp
   16e52:	83 ec 18             	sub    $0x18,%esp
    //获取当前fat文件系统的fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16e55:	8b 45 08             	mov    0x8(%ebp),%eax
   16e58:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (dir->index < fat->root_ent_cnt) {
   16e61:	e9 aa 00 00 00       	jmp    16f10 <fatfs_readdir+0xc1>
        diritem_t *item = read_dir_entry(fat, dir->index);
   16e66:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e69:	8b 00                	mov    (%eax),%eax
   16e6b:	83 ec 08             	sub    $0x8,%esp
   16e6e:	50                   	push   %eax
   16e6f:	ff 75 f4             	push   -0xc(%ebp)
   16e72:	e8 21 f6 ff ff       	call   16498 <read_dir_entry>
   16e77:	83 c4 10             	add    $0x10,%esp
   16e7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16e7d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16e81:	75 0a                	jne    16e8d <fatfs_readdir+0x3e>
            return -1;
   16e83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e88:	e9 9d 00 00 00       	jmp    16f2a <fatfs_readdir+0xdb>
        }


        //该目录项有效,获取目录项信息到dirent中
        if (item->DIR_Name[0] != DIRITEM_NAEM_FREE && item->DIR_Name[0] != DIRITEM_NAME_END) {
   16e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e90:	0f b6 00             	movzbl (%eax),%eax
   16e93:	3c e5                	cmp    $0xe5,%al
   16e95:	74 6c                	je     16f03 <fatfs_readdir+0xb4>
   16e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e9a:	0f b6 00             	movzbl (%eax),%eax
   16e9d:	84 c0                	test   %al,%al
   16e9f:	74 62                	je     16f03 <fatfs_readdir+0xb4>
            file_type_t type = diritem_get_type(item);
   16ea1:	83 ec 0c             	sub    $0xc,%esp
   16ea4:	ff 75 f0             	push   -0x10(%ebp)
   16ea7:	e8 92 f3 ff ff       	call   1623e <diritem_get_type>
   16eac:	83 c4 10             	add    $0x10,%esp
   16eaf:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   16eb2:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16eb6:	74 06                	je     16ebe <fatfs_readdir+0x6f>
   16eb8:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16ebc:	75 45                	jne    16f03 <fatfs_readdir+0xb4>
                dirent->size = item->DIR_FileSize;
   16ebe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ec1:	8b 40 1c             	mov    0x1c(%eax),%eax
   16ec4:	89 c2                	mov    %eax,%edx
   16ec6:	8b 45 10             	mov    0x10(%ebp),%eax
   16ec9:	89 50 18             	mov    %edx,0x18(%eax)
                dirent->type = type;
   16ecc:	8b 55 ec             	mov    -0x14(%ebp),%edx
   16ecf:	8b 45 10             	mov    0x10(%ebp),%eax
   16ed2:	89 50 04             	mov    %edx,0x4(%eax)
                diritem_get_name(item, dirent->name);
   16ed5:	8b 45 10             	mov    0x10(%ebp),%eax
   16ed8:	83 c0 08             	add    $0x8,%eax
   16edb:	83 ec 08             	sub    $0x8,%esp
   16ede:	50                   	push   %eax
   16edf:	ff 75 f0             	push   -0x10(%ebp)
   16ee2:	e8 17 f4 ff ff       	call   162fe <diritem_get_name>
   16ee7:	83 c4 10             	add    $0x10,%esp

                //记录目录项在该目录中的索引
                dirent->index = dir->index++;
   16eea:	8b 45 0c             	mov    0xc(%ebp),%eax
   16eed:	8b 00                	mov    (%eax),%eax
   16eef:	8d 48 01             	lea    0x1(%eax),%ecx
   16ef2:	8b 55 0c             	mov    0xc(%ebp),%edx
   16ef5:	89 0a                	mov    %ecx,(%edx)
   16ef7:	8b 55 10             	mov    0x10(%ebp),%edx
   16efa:	89 02                	mov    %eax,(%edx)
                return 0;
   16efc:	b8 00 00 00 00       	mov    $0x0,%eax
   16f01:	eb 27                	jmp    16f2a <fatfs_readdir+0xdb>
            }
        }

        //该目录项无效，继续获取下一个目录项
        dir->index++;
   16f03:	8b 45 0c             	mov    0xc(%ebp),%eax
   16f06:	8b 00                	mov    (%eax),%eax
   16f08:	8d 50 01             	lea    0x1(%eax),%edx
   16f0b:	8b 45 0c             	mov    0xc(%ebp),%eax
   16f0e:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16f10:	8b 45 0c             	mov    0xc(%ebp),%eax
   16f13:	8b 00                	mov    (%eax),%eax
   16f15:	89 c2                	mov    %eax,%edx
   16f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16f1a:	8b 40 18             	mov    0x18(%eax),%eax
   16f1d:	39 c2                	cmp    %eax,%edx
   16f1f:	0f 82 41 ff ff ff    	jb     16e66 <fatfs_readdir+0x17>
    }


    return -1;
   16f25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16f2a:	c9                   	leave  
   16f2b:	c3                   	ret    

00016f2c <fatfs_closedir>:
 * 
 * @param fs 
 * @param dir 
 * @return int 
 */
int fatfs_closedir(struct _fs_t *fs, DIR *dir) {
   16f2c:	55                   	push   %ebp
   16f2d:	89 e5                	mov    %esp,%ebp
 return 0;
   16f2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16f34:	5d                   	pop    %ebp
   16f35:	c3                   	ret    

00016f36 <fatfs_unlink>:
 * 
 * @param fs 
 * @param path 
 * @return int 
 */
int fatfs_unlink(struct _fs_t *fs, const char *path) {
   16f36:	55                   	push   %ebp
   16f37:	89 e5                	mov    %esp,%ebp
   16f39:	83 ec 38             	sub    $0x38,%esp
     //获取fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16f3c:	8b 45 08             	mov    0x8(%ebp),%eax
   16f3f:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16f45:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16f48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16f4f:	e9 b2 00 00 00       	jmp    17006 <fatfs_unlink+0xd0>
        diritem_t * item = read_dir_entry(fat, i);
   16f54:	83 ec 08             	sub    $0x8,%esp
   16f57:	ff 75 f4             	push   -0xc(%ebp)
   16f5a:	ff 75 f0             	push   -0x10(%ebp)
   16f5d:	e8 36 f5 ff ff       	call   16498 <read_dir_entry>
   16f62:	83 c4 10             	add    $0x10,%esp
   16f65:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0) {
   16f68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16f6c:	75 0a                	jne    16f78 <fatfs_unlink+0x42>
            return -1;
   16f6e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16f73:	e9 a4 00 00 00       	jmp    1701c <fatfs_unlink+0xe6>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16f78:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f7b:	0f b6 00             	movzbl (%eax),%eax
   16f7e:	84 c0                	test   %al,%al
   16f80:	74 7c                	je     16ffe <fatfs_unlink+0xc8>
            continue;
        }

        if (item->DIR_Name[0] == DIRITEM_NAEM_FREE) {
   16f82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f85:	0f b6 00             	movzbl (%eax),%eax
   16f88:	3c e5                	cmp    $0xe5,%al
   16f8a:	74 75                	je     17001 <fatfs_unlink+0xcb>
            continue;
        }

        //进行路径匹配
        if (diritem_name_match(item, path)) {
   16f8c:	83 ec 08             	sub    $0x8,%esp
   16f8f:	ff 75 0c             	push   0xc(%ebp)
   16f92:	ff 75 ec             	push   -0x14(%ebp)
   16f95:	e8 19 f4 ff ff       	call   163b3 <diritem_name_match>
   16f9a:	83 c4 10             	add    $0x10,%esp
   16f9d:	85 c0                	test   %eax,%eax
   16f9f:	74 61                	je     17002 <fatfs_unlink+0xcc>
            //找到文件，进行删除操作
            //获取文件的起始簇号，并清除fat表中的簇链关系
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusLo;
   16fa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16fa4:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16fa8:	0f b7 c0             	movzwl %ax,%eax
   16fab:	c1 e0 10             	shl    $0x10,%eax
   16fae:	89 c2                	mov    %eax,%edx
   16fb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16fb3:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16fb7:	0f b7 c0             	movzwl %ax,%eax
   16fba:	09 d0                	or     %edx,%eax
   16fbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16fbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16fc2:	0f b7 c0             	movzwl %ax,%eax
   16fc5:	83 ec 08             	sub    $0x8,%esp
   16fc8:	50                   	push   %eax
   16fc9:	ff 75 f0             	push   -0x10(%ebp)
   16fcc:	e8 d7 ee ff ff       	call   15ea8 <cluster_free_chain>
   16fd1:	83 c4 10             	add    $0x10,%esp

            //将磁盘上该目录项的位置清空
            diritem_t file_item;
            kernel_memset(&file_item, 0, sizeof(diritem_t));
   16fd4:	83 ec 04             	sub    $0x4,%esp
   16fd7:	6a 20                	push   $0x20
   16fd9:	6a 00                	push   $0x0
   16fdb:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16fde:	50                   	push   %eax
   16fdf:	e8 3f 1d 00 00       	call   18d23 <kernel_memset>
   16fe4:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &file_item, i);
   16fe7:	83 ec 04             	sub    $0x4,%esp
   16fea:	ff 75 f4             	push   -0xc(%ebp)
   16fed:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16ff0:	50                   	push   %eax
   16ff1:	ff 75 f0             	push   -0x10(%ebp)
   16ff4:	e8 f0 f3 ff ff       	call   163e9 <write_dir_entry>
   16ff9:	83 c4 10             	add    $0x10,%esp
   16ffc:	eb 1e                	jmp    1701c <fatfs_unlink+0xe6>
            continue;
   16ffe:	90                   	nop
   16fff:	eb 01                	jmp    17002 <fatfs_unlink+0xcc>
            continue;
   17001:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   17002:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17006:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17009:	8b 50 18             	mov    0x18(%eax),%edx
   1700c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1700f:	39 c2                	cmp    %eax,%edx
   17011:	0f 87 3d ff ff ff    	ja     16f54 <fatfs_unlink+0x1e>
        }
    }

    return -1;
   17017:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1701c:	c9                   	leave  
   1701d:	c3                   	ret    

0001701e <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   1701e:	55                   	push   %ebp
   1701f:	89 e5                	mov    %esp,%ebp
   17021:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   17024:	83 ec 0c             	sub    $0xc,%esp
   17027:	68 c0 58 07 00       	push   $0x758c0
   1702c:	e8 5b 10 00 00       	call   1808c <mutex_init>
   17031:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   17034:	83 ec 04             	sub    $0x4,%esp
   17037:	68 00 40 02 00       	push   $0x24000
   1703c:	6a 00                	push   $0x0
   1703e:	68 c0 18 05 00       	push   $0x518c0
   17043:	e8 db 1c 00 00       	call   18d23 <kernel_memset>
   17048:	83 c4 10             	add    $0x10,%esp
}
   1704b:	90                   	nop
   1704c:	c9                   	leave  
   1704d:	c3                   	ret    

0001704e <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   1704e:	55                   	push   %ebp
   1704f:	89 e5                	mov    %esp,%ebp
   17051:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   17054:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   1705b:	83 ec 0c             	sub    $0xc,%esp
   1705e:	68 c0 58 07 00       	push   $0x758c0
   17063:	e8 71 10 00 00       	call   180d9 <mutex_lock>
   17068:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   1706b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   17072:	eb 47                	jmp    170bb <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   17074:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17077:	89 d0                	mov    %edx,%eax
   17079:	c1 e0 03             	shl    $0x3,%eax
   1707c:	01 d0                	add    %edx,%eax
   1707e:	c1 e0 03             	shl    $0x3,%eax
   17081:	05 c0 18 05 00       	add    $0x518c0,%eax
   17086:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   17089:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1708c:	8b 40 24             	mov    0x24(%eax),%eax
   1708f:	85 c0                	test   %eax,%eax
   17091:	75 24                	jne    170b7 <file_alloc+0x69>
            kernel_memset(p_file, 0, sizeof(file_t));
   17093:	83 ec 04             	sub    $0x4,%esp
   17096:	6a 48                	push   $0x48
   17098:	6a 00                	push   $0x0
   1709a:	ff 75 ec             	push   -0x14(%ebp)
   1709d:	e8 81 1c 00 00       	call   18d23 <kernel_memset>
   170a2:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   170a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   170a8:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
            file = p_file;
   170af:	8b 45 ec             	mov    -0x14(%ebp),%eax
   170b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   170b5:	eb 0d                	jmp    170c4 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   170b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   170bb:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   170c2:	7e b0                	jle    17074 <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   170c4:	83 ec 0c             	sub    $0xc,%esp
   170c7:	68 c0 58 07 00       	push   $0x758c0
   170cc:	e8 ae 10 00 00       	call   1817f <mutex_unlock>
   170d1:	83 c4 10             	add    $0x10,%esp
    return file;
   170d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   170d7:	c9                   	leave  
   170d8:	c3                   	ret    

000170d9 <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   170d9:	55                   	push   %ebp
   170da:	89 e5                	mov    %esp,%ebp
   170dc:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   170df:	83 ec 0c             	sub    $0xc,%esp
   170e2:	68 c0 58 07 00       	push   $0x758c0
   170e7:	e8 ed 0f 00 00       	call   180d9 <mutex_lock>
   170ec:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   170ef:	8b 45 08             	mov    0x8(%ebp),%eax
   170f2:	8b 40 24             	mov    0x24(%eax),%eax
   170f5:	85 c0                	test   %eax,%eax
   170f7:	7e 0f                	jle    17108 <file_free+0x2f>
        file->ref--;
   170f9:	8b 45 08             	mov    0x8(%ebp),%eax
   170fc:	8b 40 24             	mov    0x24(%eax),%eax
   170ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   17102:	8b 45 08             	mov    0x8(%ebp),%eax
   17105:	89 50 24             	mov    %edx,0x24(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   17108:	83 ec 0c             	sub    $0xc,%esp
   1710b:	68 c0 58 07 00       	push   $0x758c0
   17110:	e8 6a 10 00 00       	call   1817f <mutex_unlock>
   17115:	83 c4 10             	add    $0x10,%esp
}
   17118:	90                   	nop
   17119:	c9                   	leave  
   1711a:	c3                   	ret    

0001711b <file_inc_ref>:
/**
 * @brief 增加文件file的引用计数
 * 
 * @param file 
 */
void file_inc_ref(file_t *file) {
   1711b:	55                   	push   %ebp
   1711c:	89 e5                	mov    %esp,%ebp
   1711e:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   17121:	83 ec 0c             	sub    $0xc,%esp
   17124:	68 c0 58 07 00       	push   $0x758c0
   17129:	e8 ab 0f 00 00       	call   180d9 <mutex_lock>
   1712e:	83 c4 10             	add    $0x10,%esp
    
    file->ref++;
   17131:	8b 45 08             	mov    0x8(%ebp),%eax
   17134:	8b 40 24             	mov    0x24(%eax),%eax
   17137:	8d 50 01             	lea    0x1(%eax),%edx
   1713a:	8b 45 08             	mov    0x8(%ebp),%eax
   1713d:	89 50 24             	mov    %edx,0x24(%eax)

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   17140:	83 ec 0c             	sub    $0xc,%esp
   17143:	68 c0 58 07 00       	push   $0x758c0
   17148:	e8 32 10 00 00       	call   1817f <mutex_unlock>
   1714d:	83 c4 10             	add    $0x10,%esp
   17150:	90                   	nop
   17151:	c9                   	leave  
   17152:	c3                   	ret    

00017153 <list_node_next>:
static inline list_node_t *list_node_next(list_node_t *node) {
   17153:	55                   	push   %ebp
   17154:	89 e5                	mov    %esp,%ebp
   17156:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   17159:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1715d:	75 19                	jne    17178 <list_node_next+0x25>
   1715f:	68 b0 a7 01 00       	push   $0x1a7b0
   17164:	68 c8 a9 01 00       	push   $0x1a9c8
   17169:	6a 2b                	push   $0x2b
   1716b:	68 c8 a7 01 00       	push   $0x1a7c8
   17170:	e8 8f 16 00 00       	call   18804 <pannic>
   17175:	83 c4 10             	add    $0x10,%esp
    return node->next;
   17178:	8b 45 08             	mov    0x8(%ebp),%eax
   1717b:	8b 40 04             	mov    0x4(%eax),%eax
}
   1717e:	c9                   	leave  
   1717f:	c3                   	ret    

00017180 <list_init>:
static inline void list_init(list_t *list) {
   17180:	55                   	push   %ebp
   17181:	89 e5                	mov    %esp,%ebp
   17183:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17186:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1718a:	75 19                	jne    171a5 <list_init+0x25>
   1718c:	68 06 a8 01 00       	push   $0x1a806
   17191:	68 e4 a9 01 00       	push   $0x1a9e4
   17196:	6a 31                	push   $0x31
   17198:	68 c8 a7 01 00       	push   $0x1a7c8
   1719d:	e8 62 16 00 00       	call   18804 <pannic>
   171a2:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   171a5:	8b 45 08             	mov    0x8(%ebp),%eax
   171a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   171af:	8b 45 08             	mov    0x8(%ebp),%eax
   171b2:	8b 50 04             	mov    0x4(%eax),%edx
   171b5:	8b 45 08             	mov    0x8(%ebp),%eax
   171b8:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   171ba:	8b 45 08             	mov    0x8(%ebp),%eax
   171bd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   171c4:	90                   	nop
   171c5:	c9                   	leave  
   171c6:	c3                   	ret    

000171c7 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   171c7:	55                   	push   %ebp
   171c8:	89 e5                	mov    %esp,%ebp
   171ca:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   171cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   171d1:	75 19                	jne    171ec <list_get_first+0x25>
   171d3:	68 06 a8 01 00       	push   $0x1a806
   171d8:	68 b8 a9 01 00       	push   $0x1a9b8
   171dd:	6a 44                	push   $0x44
   171df:	68 c8 a7 01 00       	push   $0x1a7c8
   171e4:	e8 1b 16 00 00       	call   18804 <pannic>
   171e9:	83 c4 10             	add    $0x10,%esp
    return list->first;
   171ec:	8b 45 08             	mov    0x8(%ebp),%eax
   171ef:	8b 00                	mov    (%eax),%eax
}
   171f1:	c9                   	leave  
   171f2:	c3                   	ret    

000171f3 <is_fd_bad>:
 * @brief 检验文件描述符fd是否有效
 *
 * @param fd
 * @return int
 */
static int is_fd_bad(int fd) {
   171f3:	55                   	push   %ebp
   171f4:	89 e5                	mov    %esp,%ebp
  if (fd < 0 && fd >= TASK_OFILE_SIZE) {
   171f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   171fa:	79 0d                	jns    17209 <is_fd_bad+0x16>
   171fc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   17200:	7e 07                	jle    17209 <is_fd_bad+0x16>
    return 1;
   17202:	b8 01 00 00 00       	mov    $0x1,%eax
   17207:	eb 05                	jmp    1720e <is_fd_bad+0x1b>
  }

  return 0;
   17209:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1720e:	5d                   	pop    %ebp
   1720f:	c3                   	ret    

00017210 <is_path_valid>:
 * @brief 判断文件路径是否有效
 *
 * @param path
 * @return int
 */
static int is_path_valid(const char *path) {
   17210:	55                   	push   %ebp
   17211:	89 e5                	mov    %esp,%ebp
  if (path == (const char *)0 || path[0] == '\0') {  // 路径无效
   17213:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17217:	74 0a                	je     17223 <is_path_valid+0x13>
   17219:	8b 45 08             	mov    0x8(%ebp),%eax
   1721c:	0f b6 00             	movzbl (%eax),%eax
   1721f:	84 c0                	test   %al,%al
   17221:	75 07                	jne    1722a <is_path_valid+0x1a>
    return 0;
   17223:	b8 00 00 00 00       	mov    $0x0,%eax
   17228:	eb 05                	jmp    1722f <is_path_valid+0x1f>
  }

  return 1;
   1722a:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1722f:	5d                   	pop    %ebp
   17230:	c3                   	ret    

00017231 <path_next_child>:
 * @brief 获取路径path下一级路径
 *
 * @param path
 * @return const char*
 */
const char *path_next_child(const char *path) {
   17231:	55                   	push   %ebp
   17232:	89 e5                	mov    %esp,%ebp
   17234:	83 ec 10             	sub    $0x10,%esp
  const char *c = path;
   17237:	8b 45 08             	mov    0x8(%ebp),%eax
   1723a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*c && (*(c++) == '/')) {
   1723d:	90                   	nop
   1723e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17241:	0f b6 00             	movzbl (%eax),%eax
   17244:	84 c0                	test   %al,%al
   17246:	74 10                	je     17258 <path_next_child+0x27>
   17248:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1724b:	8d 50 01             	lea    0x1(%eax),%edx
   1724e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   17251:	0f b6 00             	movzbl (%eax),%eax
   17254:	3c 2f                	cmp    $0x2f,%al
   17256:	74 e6                	je     1723e <path_next_child+0xd>
  };  // 跳过第一个'/'
  while (*c && (*(c++) != '/')) {
   17258:	90                   	nop
   17259:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1725c:	0f b6 00             	movzbl (%eax),%eax
   1725f:	84 c0                	test   %al,%al
   17261:	74 10                	je     17273 <path_next_child+0x42>
   17263:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17266:	8d 50 01             	lea    0x1(%eax),%edx
   17269:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1726c:	0f b6 00             	movzbl (%eax),%eax
   1726f:	3c 2f                	cmp    $0x2f,%al
   17271:	75 e6                	jne    17259 <path_next_child+0x28>
  };  // 跳过一级目录到下一个'/'

  return *c ? c : (const char *)0;  // 返回第二个'/'后的部分
   17273:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17276:	0f b6 00             	movzbl (%eax),%eax
   17279:	84 c0                	test   %al,%al
   1727b:	74 05                	je     17282 <path_next_child+0x51>
   1727d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17280:	eb 05                	jmp    17287 <path_next_child+0x56>
   17282:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17287:	c9                   	leave  
   17288:	c3                   	ret    

00017289 <path_to_num>:
 *
 * @param path
 * @param num
 * @return int
 */
int path_to_num(const char *path, int *num) {
   17289:	55                   	push   %ebp
   1728a:	89 e5                	mov    %esp,%ebp
   1728c:	83 ec 10             	sub    $0x10,%esp
  int n = 0;
   1728f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  const char *c = path;
   17296:	8b 45 08             	mov    0x8(%ebp),%eax
   17299:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (*c) {
   1729c:	eb 23                	jmp    172c1 <path_to_num+0x38>
    n = n * 10 + *c - '0';
   1729e:	8b 55 fc             	mov    -0x4(%ebp),%edx
   172a1:	89 d0                	mov    %edx,%eax
   172a3:	c1 e0 02             	shl    $0x2,%eax
   172a6:	01 d0                	add    %edx,%eax
   172a8:	01 c0                	add    %eax,%eax
   172aa:	89 c2                	mov    %eax,%edx
   172ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
   172af:	0f b6 00             	movzbl (%eax),%eax
   172b2:	0f be c0             	movsbl %al,%eax
   172b5:	01 d0                	add    %edx,%eax
   172b7:	83 e8 30             	sub    $0x30,%eax
   172ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    c++;
   172bd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*c) {
   172c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   172c4:	0f b6 00             	movzbl (%eax),%eax
   172c7:	84 c0                	test   %al,%al
   172c9:	75 d3                	jne    1729e <path_to_num+0x15>
  }

  *num = n;
   172cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   172ce:	8b 55 fc             	mov    -0x4(%ebp),%edx
   172d1:	89 10                	mov    %edx,(%eax)

  return n;
   172d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   172d6:	c9                   	leave  
   172d7:	c3                   	ret    

000172d8 <path_begin_with>:
 *
 * @param path
 * @param str
 * @return int
 */
int path_begin_with(const char *path, const char *str) {
   172d8:	55                   	push   %ebp
   172d9:	89 e5                	mov    %esp,%ebp
   172db:	83 ec 10             	sub    $0x10,%esp
  const char *s1 = path, *s2 = str;
   172de:	8b 45 08             	mov    0x8(%ebp),%eax
   172e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
   172e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   172e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   172ea:	eb 08                	jmp    172f4 <path_begin_with+0x1c>
    s1++;
   172ec:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    s2++;
   172f0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   172f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   172f7:	0f b6 00             	movzbl (%eax),%eax
   172fa:	84 c0                	test   %al,%al
   172fc:	74 1a                	je     17318 <path_begin_with+0x40>
   172fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17301:	0f b6 00             	movzbl (%eax),%eax
   17304:	84 c0                	test   %al,%al
   17306:	74 10                	je     17318 <path_begin_with+0x40>
   17308:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1730b:	0f b6 10             	movzbl (%eax),%edx
   1730e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17311:	0f b6 00             	movzbl (%eax),%eax
   17314:	38 c2                	cmp    %al,%dl
   17316:	74 d4                	je     172ec <path_begin_with+0x14>
  }

  return *s2 == '\0';
   17318:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1731b:	0f b6 00             	movzbl (%eax),%eax
   1731e:	84 c0                	test   %al,%al
   17320:	0f 94 c0             	sete   %al
   17323:	0f b6 c0             	movzbl %al,%eax
}
   17326:	c9                   	leave  
   17327:	c3                   	ret    

00017328 <fs_protect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_protect(fs_t *fs) {
   17328:	55                   	push   %ebp
   17329:	89 e5                	mov    %esp,%ebp
   1732b:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   1732e:	8b 45 08             	mov    0x8(%ebp),%eax
   17331:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   17337:	85 c0                	test   %eax,%eax
   17339:	74 15                	je     17350 <fs_protect+0x28>
    mutex_lock(fs->mutex);
   1733b:	8b 45 08             	mov    0x8(%ebp),%eax
   1733e:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   17344:	83 ec 0c             	sub    $0xc,%esp
   17347:	50                   	push   %eax
   17348:	e8 8c 0d 00 00       	call   180d9 <mutex_lock>
   1734d:	83 c4 10             	add    $0x10,%esp
  }
}
   17350:	90                   	nop
   17351:	c9                   	leave  
   17352:	c3                   	ret    

00017353 <fs_unprotect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_unprotect(fs_t *fs) {
   17353:	55                   	push   %ebp
   17354:	89 e5                	mov    %esp,%ebp
   17356:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   17359:	8b 45 08             	mov    0x8(%ebp),%eax
   1735c:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   17362:	85 c0                	test   %eax,%eax
   17364:	74 15                	je     1737b <fs_unprotect+0x28>
    mutex_unlock(fs->mutex);
   17366:	8b 45 08             	mov    0x8(%ebp),%eax
   17369:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   1736f:	83 ec 0c             	sub    $0xc,%esp
   17372:	50                   	push   %eax
   17373:	e8 07 0e 00 00       	call   1817f <mutex_unlock>
   17378:	83 c4 10             	add    $0x10,%esp
  }
}
   1737b:	90                   	nop
   1737c:	c9                   	leave  
   1737d:	c3                   	ret    

0001737e <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ...
 * @return int 文件描述符
 */
int sys_open(const char *name, int flags, ...) {
   1737e:	55                   	push   %ebp
   1737f:	89 e5                	mov    %esp,%ebp
   17381:	83 ec 28             	sub    $0x28,%esp
  // 1.判断路径是否有效
  if (!is_path_valid(name)) {  // 文件路径无效
   17384:	ff 75 08             	push   0x8(%ebp)
   17387:	e8 84 fe ff ff       	call   17210 <is_path_valid>
   1738c:	83 c4 04             	add    $0x4,%esp
   1738f:	85 c0                	test   %eax,%eax
   17391:	75 1a                	jne    173ad <sys_open+0x2f>
    log_printf("path is not valid\n");
   17393:	83 ec 0c             	sub    $0xc,%esp
   17396:	68 19 a8 01 00       	push   $0x1a819
   1739b:	e8 80 21 00 00       	call   19520 <log_printf>
   173a0:	83 c4 10             	add    $0x10,%esp
    return -1;
   173a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   173a8:	e9 64 01 00 00       	jmp    17511 <sys_open+0x193>
  }

  // 2.从系统file_table中分配一个文件结构
  file_t *file = file_alloc();
   173ad:	e8 9c fc ff ff       	call   1704e <file_alloc>
   173b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!file) {
   173b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   173b9:	75 0a                	jne    173c5 <sys_open+0x47>
    return -1;
   173bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   173c0:	e9 4c 01 00 00       	jmp    17511 <sys_open+0x193>
  }
  // 3.将文件结构放入当前进程的打开文件表中并得到文件描述符
  int fd = task_alloc_fd(file);
   173c5:	83 ec 0c             	sub    $0xc,%esp
   173c8:	ff 75 ec             	push   -0x14(%ebp)
   173cb:	e8 19 9f ff ff       	call   112e9 <task_alloc_fd>
   173d0:	83 c4 10             	add    $0x10,%esp
   173d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (fd < 0) {  // 放入失败
   173d6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   173da:	0f 88 09 01 00 00    	js     174e9 <sys_open+0x16b>
    goto sys_open_failed;
  }

  // 遍历文件系统挂载链表mounted_list,寻找需要打开的文件对应的文件系统
  fs_t *fs = (fs_t *)0;
   173e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  list_node_t *node = list_get_first(&mounted_list);
   173e7:	83 ec 0c             	sub    $0xc,%esp
   173ea:	68 e0 58 07 00       	push   $0x758e0
   173ef:	e8 d3 fd ff ff       	call   171c7 <list_get_first>
   173f4:	83 c4 10             	add    $0x10,%esp
   173f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   173fa:	eb 47                	jmp    17443 <sys_open+0xc5>
    fs_t *curr = list_node_parent(node, fs_t, node);
   173fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17400:	74 0a                	je     1740c <sys_open+0x8e>
   17402:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17405:	2d 0c 02 00 00       	sub    $0x20c,%eax
   1740a:	eb 05                	jmp    17411 <sys_open+0x93>
   1740c:	b8 00 00 00 00       	mov    $0x0,%eax
   17411:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (path_begin_with(name,
                        curr->mount_point)) {  // 该文件属于curr这个文件系统
   17414:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    if (path_begin_with(name,
   17417:	83 ec 08             	sub    $0x8,%esp
   1741a:	50                   	push   %eax
   1741b:	ff 75 08             	push   0x8(%ebp)
   1741e:	e8 b5 fe ff ff       	call   172d8 <path_begin_with>
   17423:	83 c4 10             	add    $0x10,%esp
   17426:	85 c0                	test   %eax,%eax
   17428:	74 08                	je     17432 <sys_open+0xb4>
      fs = curr;
   1742a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1742d:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   17430:	eb 17                	jmp    17449 <sys_open+0xcb>
    }

    node = list_node_next(node);
   17432:	83 ec 0c             	sub    $0xc,%esp
   17435:	ff 75 f0             	push   -0x10(%ebp)
   17438:	e8 16 fd ff ff       	call   17153 <list_node_next>
   1743d:	83 c4 10             	add    $0x10,%esp
   17440:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   17443:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17447:	75 b3                	jne    173fc <sys_open+0x7e>
  }

  if (fs) {  // 找到对应的文件系统
   17449:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1744d:	74 13                	je     17462 <sys_open+0xe4>
    // 获取下一级路径
    name = path_next_child(name);
   1744f:	83 ec 0c             	sub    $0xc,%esp
   17452:	ff 75 08             	push   0x8(%ebp)
   17455:	e8 d7 fd ff ff       	call   17231 <path_next_child>
   1745a:	83 c4 10             	add    $0x10,%esp
   1745d:	89 45 08             	mov    %eax,0x8(%ebp)
   17460:	eb 08                	jmp    1746a <sys_open+0xec>
  } else {  // 未找到对应文件系统，使用默认的根文件系统
    fs = root_fs;
   17462:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17467:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  // 为文件绑定模式参数和文件系统
  file->mode = flags;
   1746a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1746d:	8b 55 0c             	mov    0xc(%ebp),%edx
   17470:	89 50 34             	mov    %edx,0x34(%eax)
  file->fs = fs;
   17473:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17476:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17479:	89 50 28             	mov    %edx,0x28(%eax)
  kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   1747c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1747f:	83 ec 04             	sub    $0x4,%esp
   17482:	6a 20                	push   $0x20
   17484:	ff 75 08             	push   0x8(%ebp)
   17487:	50                   	push   %eax
   17488:	e8 40 17 00 00       	call   18bcd <kernel_strncpy>
   1748d:	83 c4 10             	add    $0x10,%esp

  // 使用该文件系统打开该文件
  fs_protect(fs);
   17490:	83 ec 0c             	sub    $0xc,%esp
   17493:	ff 75 f4             	push   -0xc(%ebp)
   17496:	e8 8d fe ff ff       	call   17328 <fs_protect>
   1749b:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->open(fs, name, file);
   1749e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   174a1:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   174a7:	8b 40 08             	mov    0x8(%eax),%eax
   174aa:	83 ec 04             	sub    $0x4,%esp
   174ad:	ff 75 ec             	push   -0x14(%ebp)
   174b0:	ff 75 08             	push   0x8(%ebp)
   174b3:	ff 75 f4             	push   -0xc(%ebp)
   174b6:	ff d0                	call   *%eax
   174b8:	83 c4 10             	add    $0x10,%esp
   174bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
  fs_unprotect(fs);
   174be:	83 ec 0c             	sub    $0xc,%esp
   174c1:	ff 75 f4             	push   -0xc(%ebp)
   174c4:	e8 8a fe ff ff       	call   17353 <fs_unprotect>
   174c9:	83 c4 10             	add    $0x10,%esp

  if (err < 0) {
   174cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   174d0:	79 12                	jns    174e4 <sys_open+0x166>
    log_printf("open failed!");
   174d2:	83 ec 0c             	sub    $0xc,%esp
   174d5:	68 2c a8 01 00       	push   $0x1a82c
   174da:	e8 41 20 00 00       	call   19520 <log_printf>
   174df:	83 c4 10             	add    $0x10,%esp
    goto sys_open_failed;
   174e2:	eb 06                	jmp    174ea <sys_open+0x16c>
  }

  // 6.返回文件描述符
  return fd;
   174e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   174e7:	eb 28                	jmp    17511 <sys_open+0x193>
    goto sys_open_failed;
   174e9:	90                   	nop

// 打开失败，回收资源
sys_open_failed:
  // 释放掉已分配的file
  file_free(file);
   174ea:	83 ec 0c             	sub    $0xc,%esp
   174ed:	ff 75 ec             	push   -0x14(%ebp)
   174f0:	e8 e4 fb ff ff       	call   170d9 <file_free>
   174f5:	83 c4 10             	add    $0x10,%esp
  if (fd >= 0) {  // 释放掉已分配的打开文件表的资源
   174f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   174fc:	78 0e                	js     1750c <sys_open+0x18e>
    task_remove_fd(fd);
   174fe:	83 ec 0c             	sub    $0xc,%esp
   17501:	ff 75 e8             	push   -0x18(%ebp)
   17504:	e8 33 9e ff ff       	call   1133c <task_remove_fd>
   17509:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   1750c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17511:	c9                   	leave  
   17512:	c3                   	ret    

00017513 <sys_read>:
 * @param fd 文件描述符
 * @param buf 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int fd, char *buf, int len) {
   17513:	55                   	push   %ebp
   17514:	89 e5                	mov    %esp,%ebp
   17516:	83 ec 18             	sub    $0x18,%esp

  if (is_fd_bad(fd) || !buf || !len) {
   17519:	ff 75 08             	push   0x8(%ebp)
   1751c:	e8 d2 fc ff ff       	call   171f3 <is_fd_bad>
   17521:	83 c4 04             	add    $0x4,%esp
   17524:	85 c0                	test   %eax,%eax
   17526:	75 0c                	jne    17534 <sys_read+0x21>
   17528:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1752c:	74 06                	je     17534 <sys_read+0x21>
   1752e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17532:	75 0a                	jne    1753e <sys_read+0x2b>
    return -1;
   17534:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17539:	e9 98 00 00 00       	jmp    175d6 <sys_read+0xc3>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   1753e:	83 ec 0c             	sub    $0xc,%esp
   17541:	ff 75 08             	push   0x8(%ebp)
   17544:	e8 70 9d ff ff       	call   112b9 <task_file>
   17549:	83 c4 10             	add    $0x10,%esp
   1754c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   1754f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17553:	75 17                	jne    1756c <sys_read+0x59>
    log_printf("file not opened!\n");
   17555:	83 ec 0c             	sub    $0xc,%esp
   17558:	68 39 a8 01 00       	push   $0x1a839
   1755d:	e8 be 1f 00 00       	call   19520 <log_printf>
   17562:	83 c4 10             	add    $0x10,%esp
    return -1;
   17565:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1756a:	eb 6a                	jmp    175d6 <sys_read+0xc3>
  }

  //2.判断文件的读写模式
  if (file->mode == O_WRONLY) { //文件只写，不可读
   1756c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1756f:	8b 40 34             	mov    0x34(%eax),%eax
   17572:	83 f8 01             	cmp    $0x1,%eax
   17575:	75 17                	jne    1758e <sys_read+0x7b>
    log_printf("file is write only!\n");
   17577:	83 ec 0c             	sub    $0xc,%esp
   1757a:	68 4b a8 01 00       	push   $0x1a84b
   1757f:	e8 9c 1f 00 00       	call   19520 <log_printf>
   17584:	83 c4 10             	add    $0x10,%esp
    return -1;
   17587:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1758c:	eb 48                	jmp    175d6 <sys_read+0xc3>
  }

  //3.获取文件对应的文件系统，并执行读操作
  fs_t *fs = file->fs;
   1758e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17591:	8b 40 28             	mov    0x28(%eax),%eax
   17594:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   17597:	83 ec 0c             	sub    $0xc,%esp
   1759a:	ff 75 f0             	push   -0x10(%ebp)
   1759d:	e8 86 fd ff ff       	call   17328 <fs_protect>
   175a2:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->read(buf, len, file);
   175a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   175a8:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   175ae:	8b 40 0c             	mov    0xc(%eax),%eax
   175b1:	83 ec 04             	sub    $0x4,%esp
   175b4:	ff 75 f4             	push   -0xc(%ebp)
   175b7:	ff 75 10             	push   0x10(%ebp)
   175ba:	ff 75 0c             	push   0xc(%ebp)
   175bd:	ff d0                	call   *%eax
   175bf:	83 c4 10             	add    $0x10,%esp
   175c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   175c5:	83 ec 0c             	sub    $0xc,%esp
   175c8:	ff 75 f0             	push   -0x10(%ebp)
   175cb:	e8 83 fd ff ff       	call   17353 <fs_unprotect>
   175d0:	83 c4 10             	add    $0x10,%esp

  return err;
   175d3:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
   175d6:	c9                   	leave  
   175d7:	c3                   	ret    

000175d8 <sys_write>:
 * @param fd 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int fd, char *buf, int len) {
   175d8:	55                   	push   %ebp
   175d9:	89 e5                	mov    %esp,%ebp
   175db:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd) || !buf || !len) {
   175de:	ff 75 08             	push   0x8(%ebp)
   175e1:	e8 0d fc ff ff       	call   171f3 <is_fd_bad>
   175e6:	83 c4 04             	add    $0x4,%esp
   175e9:	85 c0                	test   %eax,%eax
   175eb:	75 0c                	jne    175f9 <sys_write+0x21>
   175ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   175f1:	74 06                	je     175f9 <sys_write+0x21>
   175f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   175f7:	75 0a                	jne    17603 <sys_write+0x2b>
    return -1;
   175f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175fe:	e9 97 00 00 00       	jmp    1769a <sys_write+0xc2>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   17603:	83 ec 0c             	sub    $0xc,%esp
   17606:	ff 75 08             	push   0x8(%ebp)
   17609:	e8 ab 9c ff ff       	call   112b9 <task_file>
   1760e:	83 c4 10             	add    $0x10,%esp
   17611:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   17614:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17618:	75 17                	jne    17631 <sys_write+0x59>
    log_printf("file not opened!\n");
   1761a:	83 ec 0c             	sub    $0xc,%esp
   1761d:	68 39 a8 01 00       	push   $0x1a839
   17622:	e8 f9 1e 00 00       	call   19520 <log_printf>
   17627:	83 c4 10             	add    $0x10,%esp
    return -1;
   1762a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1762f:	eb 69                	jmp    1769a <sys_write+0xc2>
  }

  //2.判断文件的读写模式
  if (file->mode == O_RDONLY) { //文件只读，不可写
   17631:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17634:	8b 40 34             	mov    0x34(%eax),%eax
   17637:	85 c0                	test   %eax,%eax
   17639:	75 17                	jne    17652 <sys_write+0x7a>
    log_printf("file is read only!\n");
   1763b:	83 ec 0c             	sub    $0xc,%esp
   1763e:	68 60 a8 01 00       	push   $0x1a860
   17643:	e8 d8 1e 00 00       	call   19520 <log_printf>
   17648:	83 c4 10             	add    $0x10,%esp
    return -1;
   1764b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17650:	eb 48                	jmp    1769a <sys_write+0xc2>
  }

  //3.获取文件对应的文件系统，并执行写操作
  fs_t *fs = file->fs;
   17652:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17655:	8b 40 28             	mov    0x28(%eax),%eax
   17658:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   1765b:	83 ec 0c             	sub    $0xc,%esp
   1765e:	ff 75 f0             	push   -0x10(%ebp)
   17661:	e8 c2 fc ff ff       	call   17328 <fs_protect>
   17666:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->write(buf, len, file);
   17669:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1766c:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17672:	8b 40 10             	mov    0x10(%eax),%eax
   17675:	83 ec 04             	sub    $0x4,%esp
   17678:	ff 75 f4             	push   -0xc(%ebp)
   1767b:	ff 75 10             	push   0x10(%ebp)
   1767e:	ff 75 0c             	push   0xc(%ebp)
   17681:	ff d0                	call   *%eax
   17683:	83 c4 10             	add    $0x10,%esp
   17686:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   17689:	83 ec 0c             	sub    $0xc,%esp
   1768c:	ff 75 f0             	push   -0x10(%ebp)
   1768f:	e8 bf fc ff ff       	call   17353 <fs_unprotect>
   17694:	83 c4 10             	add    $0x10,%esp
  
  return err;
   17697:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1769a:	c9                   	leave  
   1769b:	c3                   	ret    

0001769c <sys_lseek>:
 * @param fd
 * @param offset
 * @param pos
 * @return int
 */
int sys_lseek(int fd, int offset, int dir) {
   1769c:	55                   	push   %ebp
   1769d:	89 e5                	mov    %esp,%ebp
   1769f:	83 ec 18             	sub    $0x18,%esp

  if (is_fd_bad(fd)) {
   176a2:	ff 75 08             	push   0x8(%ebp)
   176a5:	e8 49 fb ff ff       	call   171f3 <is_fd_bad>
   176aa:	83 c4 04             	add    $0x4,%esp
   176ad:	85 c0                	test   %eax,%eax
   176af:	74 07                	je     176b8 <sys_lseek+0x1c>
    return -1;
   176b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176b6:	eb 77                	jmp    1772f <sys_lseek+0x93>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   176b8:	83 ec 0c             	sub    $0xc,%esp
   176bb:	ff 75 08             	push   0x8(%ebp)
   176be:	e8 f6 9b ff ff       	call   112b9 <task_file>
   176c3:	83 c4 10             	add    $0x10,%esp
   176c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   176c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   176cd:	75 17                	jne    176e6 <sys_lseek+0x4a>
    log_printf("file not opened!\n");
   176cf:	83 ec 0c             	sub    $0xc,%esp
   176d2:	68 39 a8 01 00       	push   $0x1a839
   176d7:	e8 44 1e 00 00       	call   19520 <log_printf>
   176dc:	83 c4 10             	add    $0x10,%esp
    return -1;
   176df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176e4:	eb 49                	jmp    1772f <sys_lseek+0x93>
  }


  //2.获取文件对应的文件系统，并执行偏移操作
  fs_t *fs = file->fs;
   176e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176e9:	8b 40 28             	mov    0x28(%eax),%eax
   176ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   176ef:	83 ec 0c             	sub    $0xc,%esp
   176f2:	ff 75 f0             	push   -0x10(%ebp)
   176f5:	e8 2e fc ff ff       	call   17328 <fs_protect>
   176fa:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->seek(file, offset, dir);
   176fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17700:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17706:	8b 40 18             	mov    0x18(%eax),%eax
   17709:	8b 55 0c             	mov    0xc(%ebp),%edx
   1770c:	83 ec 04             	sub    $0x4,%esp
   1770f:	ff 75 10             	push   0x10(%ebp)
   17712:	52                   	push   %edx
   17713:	ff 75 f4             	push   -0xc(%ebp)
   17716:	ff d0                	call   *%eax
   17718:	83 c4 10             	add    $0x10,%esp
   1771b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   1771e:	83 ec 0c             	sub    $0xc,%esp
   17721:	ff 75 f0             	push   -0x10(%ebp)
   17724:	e8 2a fc ff ff       	call   17353 <fs_unprotect>
   17729:	83 c4 10             	add    $0x10,%esp
  
  return err;
   1772c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1772f:	c9                   	leave  
   17730:	c3                   	ret    

00017731 <sys_close>:
 * @brief 关闭文件
 *
 * @param fd
 * @return int
 */
int sys_close(int fd) {
   17731:	55                   	push   %ebp
   17732:	89 e5                	mov    %esp,%ebp
   17734:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   17737:	ff 75 08             	push   0x8(%ebp)
   1773a:	e8 b4 fa ff ff       	call   171f3 <is_fd_bad>
   1773f:	83 c4 04             	add    $0x4,%esp
   17742:	85 c0                	test   %eax,%eax
   17744:	74 1a                	je     17760 <sys_close+0x2f>
    log_printf("file error");
   17746:	83 ec 0c             	sub    $0xc,%esp
   17749:	68 74 a8 01 00       	push   $0x1a874
   1774e:	e8 cd 1d 00 00       	call   19520 <log_printf>
   17753:	83 c4 10             	add    $0x10,%esp
    return -1;
   17756:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1775b:	e9 c8 00 00 00       	jmp    17828 <sys_close+0xf7>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   17760:	83 ec 0c             	sub    $0xc,%esp
   17763:	ff 75 08             	push   0x8(%ebp)
   17766:	e8 4e 9b ff ff       	call   112b9 <task_file>
   1776b:	83 c4 10             	add    $0x10,%esp
   1776e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   17771:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17775:	75 1a                	jne    17791 <sys_close+0x60>
    log_printf("file not opened!\n");
   17777:	83 ec 0c             	sub    $0xc,%esp
   1777a:	68 39 a8 01 00       	push   $0x1a839
   1777f:	e8 9c 1d 00 00       	call   19520 <log_printf>
   17784:	83 c4 10             	add    $0x10,%esp
    return -1;
   17787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1778c:	e9 97 00 00 00       	jmp    17828 <sys_close+0xf7>
  }

  ASSERT(file->ref > 0);  //文件必须为打开状态
   17791:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17794:	8b 40 24             	mov    0x24(%eax),%eax
   17797:	85 c0                	test   %eax,%eax
   17799:	7f 1c                	jg     177b7 <sys_close+0x86>
   1779b:	68 7f a8 01 00       	push   $0x1a87f
   177a0:	68 d8 a9 01 00       	push   $0x1a9d8
   177a5:	68 5a 01 00 00       	push   $0x15a
   177aa:	68 90 a8 01 00       	push   $0x1a890
   177af:	e8 50 10 00 00       	call   18804 <pannic>
   177b4:	83 c4 10             	add    $0x10,%esp

  //2.若当前文件只被一个进程引用则获取对应文件系统并执行关闭操作
  if (file->ref-- == 1) {
   177b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   177ba:	8b 40 24             	mov    0x24(%eax),%eax
   177bd:	8d 48 ff             	lea    -0x1(%eax),%ecx
   177c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   177c3:	89 4a 24             	mov    %ecx,0x24(%edx)
   177c6:	83 f8 01             	cmp    $0x1,%eax
   177c9:	75 4a                	jne    17815 <sys_close+0xe4>
    fs_t *fs = file->fs;
   177cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   177ce:	8b 40 28             	mov    0x28(%eax),%eax
   177d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   177d4:	83 ec 0c             	sub    $0xc,%esp
   177d7:	ff 75 f0             	push   -0x10(%ebp)
   177da:	e8 49 fb ff ff       	call   17328 <fs_protect>
   177df:	83 c4 10             	add    $0x10,%esp
    fs->op->close(file);
   177e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   177e5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   177eb:	8b 40 14             	mov    0x14(%eax),%eax
   177ee:	83 ec 0c             	sub    $0xc,%esp
   177f1:	ff 75 f4             	push   -0xc(%ebp)
   177f4:	ff d0                	call   *%eax
   177f6:	83 c4 10             	add    $0x10,%esp
    fs_protect(fs);
   177f9:	83 ec 0c             	sub    $0xc,%esp
   177fc:	ff 75 f0             	push   -0x10(%ebp)
   177ff:	e8 24 fb ff ff       	call   17328 <fs_protect>
   17804:	83 c4 10             	add    $0x10,%esp

    //关闭文件后释放文件结构
    file_free(file);
   17807:	83 ec 0c             	sub    $0xc,%esp
   1780a:	ff 75 f4             	push   -0xc(%ebp)
   1780d:	e8 c7 f8 ff ff       	call   170d9 <file_free>
   17812:	83 c4 10             	add    $0x10,%esp
  }

  //3.当前文件还被其它进程所引用，只在当前进程的打开文件表中释放该文件即可
  task_remove_fd(fd);
   17815:	83 ec 0c             	sub    $0xc,%esp
   17818:	ff 75 08             	push   0x8(%ebp)
   1781b:	e8 1c 9b ff ff       	call   1133c <task_remove_fd>
   17820:	83 c4 10             	add    $0x10,%esp

  return 0;
   17823:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17828:	c9                   	leave  
   17829:	c3                   	ret    

0001782a <sys_fstat>:
 *
 * @param fd
 * @param st
 * @return int
 */
int sys_fstat(int fd, struct stat *st) { 
   1782a:	55                   	push   %ebp
   1782b:	89 e5                	mov    %esp,%ebp
   1782d:	83 ec 18             	sub    $0x18,%esp
  
   if (is_fd_bad(fd)) {
   17830:	ff 75 08             	push   0x8(%ebp)
   17833:	e8 bb f9 ff ff       	call   171f3 <is_fd_bad>
   17838:	83 c4 04             	add    $0x4,%esp
   1783b:	85 c0                	test   %eax,%eax
   1783d:	74 1a                	je     17859 <sys_fstat+0x2f>
    log_printf("file error");
   1783f:	83 ec 0c             	sub    $0xc,%esp
   17842:	68 74 a8 01 00       	push   $0x1a874
   17847:	e8 d4 1c 00 00       	call   19520 <log_printf>
   1784c:	83 c4 10             	add    $0x10,%esp
    return -1;
   1784f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17854:	e9 85 00 00 00       	jmp    178de <sys_fstat+0xb4>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   17859:	83 ec 0c             	sub    $0xc,%esp
   1785c:	ff 75 08             	push   0x8(%ebp)
   1785f:	e8 55 9a ff ff       	call   112b9 <task_file>
   17864:	83 c4 10             	add    $0x10,%esp
   17867:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   1786a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1786e:	75 17                	jne    17887 <sys_fstat+0x5d>
    log_printf("file not opened!\n");
   17870:	83 ec 0c             	sub    $0xc,%esp
   17873:	68 39 a8 01 00       	push   $0x1a839
   17878:	e8 a3 1c 00 00       	call   19520 <log_printf>
   1787d:	83 c4 10             	add    $0x10,%esp
    return -1;
   17880:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17885:	eb 57                	jmp    178de <sys_fstat+0xb4>
  }

  //2.获取对应文件系统进行状态获取操作
  fs_t *fs = file->fs;
   17887:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1788a:	8b 40 28             	mov    0x28(%eax),%eax
   1788d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kernel_memset(st, 0, sizeof(struct stat));
   17890:	83 ec 04             	sub    $0x4,%esp
   17893:	6a 48                	push   $0x48
   17895:	6a 00                	push   $0x0
   17897:	ff 75 0c             	push   0xc(%ebp)
   1789a:	e8 84 14 00 00       	call   18d23 <kernel_memset>
   1789f:	83 c4 10             	add    $0x10,%esp
  fs_protect(fs);
   178a2:	83 ec 0c             	sub    $0xc,%esp
   178a5:	ff 75 f0             	push   -0x10(%ebp)
   178a8:	e8 7b fa ff ff       	call   17328 <fs_protect>
   178ad:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->stat(file, st);
   178b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   178b3:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   178b9:	8b 40 1c             	mov    0x1c(%eax),%eax
   178bc:	83 ec 08             	sub    $0x8,%esp
   178bf:	ff 75 0c             	push   0xc(%ebp)
   178c2:	ff 75 f4             	push   -0xc(%ebp)
   178c5:	ff d0                	call   *%eax
   178c7:	83 c4 10             	add    $0x10,%esp
   178ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   178cd:	83 ec 0c             	sub    $0xc,%esp
   178d0:	ff 75 f0             	push   -0x10(%ebp)
   178d3:	e8 7b fa ff ff       	call   17353 <fs_unprotect>
   178d8:	83 c4 10             	add    $0x10,%esp


  return err;
   178db:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   178de:	c9                   	leave  
   178df:	c3                   	ret    

000178e0 <sys_isatty>:
 * @brief
 *
 * @param fd
 * @return int
 */
int sys_isatty(int fd) { 
   178e0:	55                   	push   %ebp
   178e1:	89 e5                	mov    %esp,%ebp
   178e3:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   178e6:	ff 75 08             	push   0x8(%ebp)
   178e9:	e8 05 f9 ff ff       	call   171f3 <is_fd_bad>
   178ee:	83 c4 04             	add    $0x4,%esp
   178f1:	85 c0                	test   %eax,%eax
   178f3:	74 17                	je     1790c <sys_isatty+0x2c>
    log_printf("file error");
   178f5:	83 ec 0c             	sub    $0xc,%esp
   178f8:	68 74 a8 01 00       	push   $0x1a874
   178fd:	e8 1e 1c 00 00       	call   19520 <log_printf>
   17902:	83 c4 10             	add    $0x10,%esp
    return -1;
   17905:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1790a:	eb 3d                	jmp    17949 <sys_isatty+0x69>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   1790c:	83 ec 0c             	sub    $0xc,%esp
   1790f:	ff 75 08             	push   0x8(%ebp)
   17912:	e8 a2 99 ff ff       	call   112b9 <task_file>
   17917:	83 c4 10             	add    $0x10,%esp
   1791a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   1791d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17921:	75 17                	jne    1793a <sys_isatty+0x5a>
    log_printf("file not opened!\n");
   17923:	83 ec 0c             	sub    $0xc,%esp
   17926:	68 39 a8 01 00       	push   $0x1a839
   1792b:	e8 f0 1b 00 00       	call   19520 <log_printf>
   17930:	83 c4 10             	add    $0x10,%esp
    return -1;
   17933:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17938:	eb 0f                	jmp    17949 <sys_isatty+0x69>
  }

  return file->type == FILE_TTY;
   1793a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1793d:	8b 40 20             	mov    0x20(%eax),%eax
   17940:	83 f8 01             	cmp    $0x1,%eax
   17943:	0f 94 c0             	sete   %al
   17946:	0f b6 c0             	movzbl %al,%eax
}
   17949:	c9                   	leave  
   1794a:	c3                   	ret    

0001794b <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 *
 * @param fd 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int fd) {
   1794b:	55                   	push   %ebp
   1794c:	89 e5                	mov    %esp,%ebp
   1794e:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   17951:	ff 75 08             	push   0x8(%ebp)
   17954:	e8 9a f8 ff ff       	call   171f3 <is_fd_bad>
   17959:	83 c4 04             	add    $0x4,%esp
   1795c:	85 c0                	test   %eax,%eax
   1795e:	74 1a                	je     1797a <sys_dup+0x2f>
    log_printf("fd %d is not valid.", fd);
   17960:	83 ec 08             	sub    $0x8,%esp
   17963:	ff 75 08             	push   0x8(%ebp)
   17966:	68 c1 a8 01 00       	push   $0x1a8c1
   1796b:	e8 b0 1b 00 00       	call   19520 <log_printf>
   17970:	83 c4 10             	add    $0x10,%esp
    return -1;
   17973:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17978:	eb 6d                	jmp    179e7 <sys_dup+0x9c>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   1797a:	83 ec 0c             	sub    $0xc,%esp
   1797d:	ff 75 08             	push   0x8(%ebp)
   17980:	e8 34 99 ff ff       	call   112b9 <task_file>
   17985:	83 c4 10             	add    $0x10,%esp
   17988:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   1798b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1798f:	75 17                	jne    179a8 <sys_dup+0x5d>
    log_printf("file not opend!\n");
   17991:	83 ec 0c             	sub    $0xc,%esp
   17994:	68 d5 a8 01 00       	push   $0x1a8d5
   17999:	e8 82 1b 00 00       	call   19520 <log_printf>
   1799e:	83 c4 10             	add    $0x10,%esp
    return -1;
   179a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   179a6:	eb 3f                	jmp    179e7 <sys_dup+0x9c>
  }

  // 2.在打开文件表中新分配一项给该文件指针
  int new_fd = task_alloc_fd(file);
   179a8:	83 ec 0c             	sub    $0xc,%esp
   179ab:	ff 75 f4             	push   -0xc(%ebp)
   179ae:	e8 36 99 ff ff       	call   112e9 <task_alloc_fd>
   179b3:	83 c4 10             	add    $0x10,%esp
   179b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (new_fd < 0) {
   179b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   179bd:	79 17                	jns    179d6 <sys_dup+0x8b>
    log_printf("no task file avaliable\n");
   179bf:	83 ec 0c             	sub    $0xc,%esp
   179c2:	68 e6 a8 01 00       	push   $0x1a8e6
   179c7:	e8 54 1b 00 00       	call   19520 <log_printf>
   179cc:	83 c4 10             	add    $0x10,%esp
    return -1;
   179cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   179d4:	eb 11                	jmp    179e7 <sys_dup+0x9c>
  }

  file_inc_ref(file);  // 分配成功，该文件引用次数加一
   179d6:	83 ec 0c             	sub    $0xc,%esp
   179d9:	ff 75 f4             	push   -0xc(%ebp)
   179dc:	e8 3a f7 ff ff       	call   1711b <file_inc_ref>
   179e1:	83 c4 10             	add    $0x10,%esp
  return fd;
   179e4:	8b 45 08             	mov    0x8(%ebp),%eax
}
   179e7:	c9                   	leave  
   179e8:	c3                   	ret    

000179e9 <sys_opendir>:
 * 
 * @param path 
 * @param dir 
 * @return int 
 */
int sys_opendir(const char *path, DIR *dir) {
   179e9:	55                   	push   %ebp
   179ea:	89 e5                	mov    %esp,%ebp
   179ec:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统打开该目录
  fs_protect(root_fs);
   179ef:	a1 2c 70 07 00       	mov    0x7702c,%eax
   179f4:	83 ec 0c             	sub    $0xc,%esp
   179f7:	50                   	push   %eax
   179f8:	e8 2b f9 ff ff       	call   17328 <fs_protect>
   179fd:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->opendir(root_fs, path, dir);
   17a00:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17a05:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a0b:	8b 40 28             	mov    0x28(%eax),%eax
   17a0e:	8b 15 2c 70 07 00    	mov    0x7702c,%edx
   17a14:	83 ec 04             	sub    $0x4,%esp
   17a17:	ff 75 0c             	push   0xc(%ebp)
   17a1a:	ff 75 08             	push   0x8(%ebp)
   17a1d:	52                   	push   %edx
   17a1e:	ff d0                	call   *%eax
   17a20:	83 c4 10             	add    $0x10,%esp
   17a23:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17a26:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17a2b:	83 ec 0c             	sub    $0xc,%esp
   17a2e:	50                   	push   %eax
   17a2f:	e8 1f f9 ff ff       	call   17353 <fs_unprotect>
   17a34:	83 c4 10             	add    $0x10,%esp
  return err;
   17a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17a3a:	c9                   	leave  
   17a3b:	c3                   	ret    

00017a3c <sys_readdir>:
 * 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int sys_readdir(DIR *dir, struct dirent *dirent) {
   17a3c:	55                   	push   %ebp
   17a3d:	89 e5                	mov    %esp,%ebp
   17a3f:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统遍历该目录
  fs_protect(root_fs);
   17a42:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17a47:	83 ec 0c             	sub    $0xc,%esp
   17a4a:	50                   	push   %eax
   17a4b:	e8 d8 f8 ff ff       	call   17328 <fs_protect>
   17a50:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->readdir(root_fs, dir, dirent);
   17a53:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17a58:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a5e:	8b 40 2c             	mov    0x2c(%eax),%eax
   17a61:	8b 15 2c 70 07 00    	mov    0x7702c,%edx
   17a67:	83 ec 04             	sub    $0x4,%esp
   17a6a:	ff 75 0c             	push   0xc(%ebp)
   17a6d:	ff 75 08             	push   0x8(%ebp)
   17a70:	52                   	push   %edx
   17a71:	ff d0                	call   *%eax
   17a73:	83 c4 10             	add    $0x10,%esp
   17a76:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17a79:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17a7e:	83 ec 0c             	sub    $0xc,%esp
   17a81:	50                   	push   %eax
   17a82:	e8 cc f8 ff ff       	call   17353 <fs_unprotect>
   17a87:	83 c4 10             	add    $0x10,%esp
  return err;
   17a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17a8d:	c9                   	leave  
   17a8e:	c3                   	ret    

00017a8f <sys_closedir>:
 * @brief 关闭目录
 * 
 * @param dir 
 * @return int 
 */
int sys_closedir(DIR *dir) {
   17a8f:	55                   	push   %ebp
   17a90:	89 e5                	mov    %esp,%ebp
   17a92:	83 ec 18             	sub    $0x18,%esp
  // 使用该文件系统关闭该目录
  fs_protect(root_fs);
   17a95:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17a9a:	83 ec 0c             	sub    $0xc,%esp
   17a9d:	50                   	push   %eax
   17a9e:	e8 85 f8 ff ff       	call   17328 <fs_protect>
   17aa3:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->closedir(root_fs, dir);
   17aa6:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17aab:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17ab1:	8b 40 30             	mov    0x30(%eax),%eax
   17ab4:	8b 15 2c 70 07 00    	mov    0x7702c,%edx
   17aba:	83 ec 08             	sub    $0x8,%esp
   17abd:	ff 75 08             	push   0x8(%ebp)
   17ac0:	52                   	push   %edx
   17ac1:	ff d0                	call   *%eax
   17ac3:	83 c4 10             	add    $0x10,%esp
   17ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17ac9:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17ace:	83 ec 0c             	sub    $0xc,%esp
   17ad1:	50                   	push   %eax
   17ad2:	e8 7c f8 ff ff       	call   17353 <fs_unprotect>
   17ad7:	83 c4 10             	add    $0x10,%esp
  return err;
   17ada:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
   17add:	c9                   	leave  
   17ade:	c3                   	ret    

00017adf <sys_ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   17adf:	55                   	push   %ebp
   17ae0:	89 e5                	mov    %esp,%ebp
   17ae2:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   17ae5:	ff 75 08             	push   0x8(%ebp)
   17ae8:	e8 06 f7 ff ff       	call   171f3 <is_fd_bad>
   17aed:	83 c4 04             	add    $0x4,%esp
   17af0:	85 c0                	test   %eax,%eax
   17af2:	74 1a                	je     17b0e <sys_ioctl+0x2f>
    log_printf("fd %d is not valid.", fd);
   17af4:	83 ec 08             	sub    $0x8,%esp
   17af7:	ff 75 08             	push   0x8(%ebp)
   17afa:	68 c1 a8 01 00       	push   $0x1a8c1
   17aff:	e8 1c 1a 00 00       	call   19520 <log_printf>
   17b04:	83 c4 10             	add    $0x10,%esp
    return -1;
   17b07:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17b0c:	eb 76                	jmp    17b84 <sys_ioctl+0xa5>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   17b0e:	83 ec 0c             	sub    $0xc,%esp
   17b11:	ff 75 08             	push   0x8(%ebp)
   17b14:	e8 a0 97 ff ff       	call   112b9 <task_file>
   17b19:	83 c4 10             	add    $0x10,%esp
   17b1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   17b1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17b23:	75 17                	jne    17b3c <sys_ioctl+0x5d>
    log_printf("file not opend!\n");
   17b25:	83 ec 0c             	sub    $0xc,%esp
   17b28:	68 d5 a8 01 00       	push   $0x1a8d5
   17b2d:	e8 ee 19 00 00       	call   19520 <log_printf>
   17b32:	83 c4 10             	add    $0x10,%esp
    return -1;
   17b35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17b3a:	eb 48                	jmp    17b84 <sys_ioctl+0xa5>
  }

  fs_t *fs = file->fs;
   17b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b3f:	8b 40 28             	mov    0x28(%eax),%eax
   17b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   17b45:	83 ec 0c             	sub    $0xc,%esp
   17b48:	ff 75 f0             	push   -0x10(%ebp)
   17b4b:	e8 d8 f7 ff ff       	call   17328 <fs_protect>
   17b50:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->ioctl(file, cmd, arg0, arg1);
   17b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17b56:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b5c:	8b 40 20             	mov    0x20(%eax),%eax
   17b5f:	ff 75 14             	push   0x14(%ebp)
   17b62:	ff 75 10             	push   0x10(%ebp)
   17b65:	ff 75 0c             	push   0xc(%ebp)
   17b68:	ff 75 f4             	push   -0xc(%ebp)
   17b6b:	ff d0                	call   *%eax
   17b6d:	83 c4 10             	add    $0x10,%esp
   17b70:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   17b73:	83 ec 0c             	sub    $0xc,%esp
   17b76:	ff 75 f0             	push   -0x10(%ebp)
   17b79:	e8 d5 f7 ff ff       	call   17353 <fs_unprotect>
   17b7e:	83 c4 10             	add    $0x10,%esp

  return err;
   17b81:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17b84:	c9                   	leave  
   17b85:	c3                   	ret    

00017b86 <sys_unlink>:
 * @brief 根据文件路径删除文件
 * 
 * @param path_name 
 * @return int 
 */
int sys_unlink(const char *path) {
   17b86:	55                   	push   %ebp
   17b87:	89 e5                	mov    %esp,%ebp
   17b89:	83 ec 18             	sub    $0x18,%esp
  fs_protect(root_fs);
   17b8c:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17b91:	83 ec 0c             	sub    $0xc,%esp
   17b94:	50                   	push   %eax
   17b95:	e8 8e f7 ff ff       	call   17328 <fs_protect>
   17b9a:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->unlink(root_fs, path);
   17b9d:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17ba2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17ba8:	8b 40 24             	mov    0x24(%eax),%eax
   17bab:	8b 15 2c 70 07 00    	mov    0x7702c,%edx
   17bb1:	83 ec 08             	sub    $0x8,%esp
   17bb4:	ff 75 08             	push   0x8(%ebp)
   17bb7:	52                   	push   %edx
   17bb8:	ff d0                	call   *%eax
   17bba:	83 c4 10             	add    $0x10,%esp
   17bbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17bc0:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17bc5:	83 ec 0c             	sub    $0xc,%esp
   17bc8:	50                   	push   %eax
   17bc9:	e8 85 f7 ff ff       	call   17353 <fs_unprotect>
   17bce:	83 c4 10             	add    $0x10,%esp
}
   17bd1:	90                   	nop
   17bd2:	c9                   	leave  
   17bd3:	c3                   	ret    

00017bd4 <mount_list_init>:

/**
 * @brief 初始化free_list和mount_list
 *
 */
static void mount_list_init(void) {
   17bd4:	55                   	push   %ebp
   17bd5:	89 e5                	mov    %esp,%ebp
   17bd7:	83 ec 18             	sub    $0x18,%esp
  list_init(&free_list);
   17bda:	83 ec 0c             	sub    $0xc,%esp
   17bdd:	68 f8 6f 07 00       	push   $0x76ff8
   17be2:	e8 99 f5 ff ff       	call   17180 <list_init>
   17be7:	83 c4 10             	add    $0x10,%esp
  // 将全局文件系统加入到free_list，等待被挂载
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   17bea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17bf1:	eb 2b                	jmp    17c1e <mount_list_init+0x4a>
    list_insert_first(&free_list, &(fs_table[i].node));
   17bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17bf6:	69 c0 4c 02 00 00    	imul   $0x24c,%eax,%eax
   17bfc:	05 00 02 00 00       	add    $0x200,%eax
   17c01:	05 00 59 07 00       	add    $0x75900,%eax
   17c06:	83 c0 0c             	add    $0xc,%eax
   17c09:	83 ec 08             	sub    $0x8,%esp
   17c0c:	50                   	push   %eax
   17c0d:	68 f8 6f 07 00       	push   $0x76ff8
   17c12:	e8 91 15 00 00       	call   191a8 <list_insert_first>
   17c17:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   17c1a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17c1e:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   17c22:	7e cf                	jle    17bf3 <mount_list_init+0x1f>
  }

  list_init(&mounted_list);
   17c24:	83 ec 0c             	sub    $0xc,%esp
   17c27:	68 e0 58 07 00       	push   $0x758e0
   17c2c:	e8 4f f5 ff ff       	call   17180 <list_init>
   17c31:	83 c4 10             	add    $0x10,%esp
}
   17c34:	90                   	nop
   17c35:	c9                   	leave  
   17c36:	c3                   	ret    

00017c37 <get_fs_op>:
 *
 * @param type
 * @param major
 * @return fs_op_t*
 */
static fs_op_t *get_fs_op(fs_type_t type, int major) {
   17c37:	55                   	push   %ebp
   17c38:	89 e5                	mov    %esp,%ebp
  switch (type) {
   17c3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17c3e:	74 08                	je     17c48 <get_fs_op+0x11>
   17c40:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   17c44:	74 09                	je     17c4f <get_fs_op+0x18>
   17c46:	eb 0e                	jmp    17c56 <get_fs_op+0x1f>
    case FS_DEVFS:
      return &devfs_op;
   17c48:	b8 00 b1 01 00       	mov    $0x1b100,%eax
   17c4d:	eb 0c                	jmp    17c5b <get_fs_op+0x24>
      break;
    case FS_FAT16:
      return &fatfs_op;
   17c4f:	b8 40 b1 01 00       	mov    $0x1b140,%eax
   17c54:	eb 05                	jmp    17c5b <get_fs_op+0x24>
      break;
    default:
      return 0;
   17c56:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
}
   17c5b:	5d                   	pop    %ebp
   17c5c:	c3                   	ret    

00017c5d <get_fs_mutex>:
 * @brief 根据文件系统类型获取锁
 * 
 * @param type 
 * @return mutex_t* 
 */
static mutex_t *get_fs_mutex(fs_type_t type) {
   17c5d:	55                   	push   %ebp
   17c5e:	89 e5                	mov    %esp,%ebp
   17c60:	83 ec 08             	sub    $0x8,%esp
  switch (type) {
   17c63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17c67:	74 08                	je     17c71 <get_fs_mutex+0x14>
   17c69:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   17c6d:	74 19                	je     17c88 <get_fs_mutex+0x2b>
   17c6f:	eb 2e                	jmp    17c9f <get_fs_mutex+0x42>
    case FS_DEVFS:
      mutex_init(&devfs_mutex);
   17c71:	83 ec 0c             	sub    $0xc,%esp
   17c74:	68 04 70 07 00       	push   $0x77004
   17c79:	e8 0e 04 00 00       	call   1808c <mutex_init>
   17c7e:	83 c4 10             	add    $0x10,%esp
      return &devfs_mutex;
   17c81:	b8 04 70 07 00       	mov    $0x77004,%eax
   17c86:	eb 1c                	jmp    17ca4 <get_fs_mutex+0x47>
      break;
    case FS_FAT16:
      mutex_init(&fatfs_mutex);
   17c88:	83 ec 0c             	sub    $0xc,%esp
   17c8b:	68 18 70 07 00       	push   $0x77018
   17c90:	e8 f7 03 00 00       	call   1808c <mutex_init>
   17c95:	83 c4 10             	add    $0x10,%esp
      return &fatfs_mutex;
   17c98:	b8 18 70 07 00       	mov    $0x77018,%eax
   17c9d:	eb 05                	jmp    17ca4 <get_fs_mutex+0x47>
      break;
    default:
      return 0;
   17c9f:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
}
   17ca4:	c9                   	leave  
   17ca5:	c3                   	ret    

00017ca6 <mount>:
 * @param dev_major 具体文件的主设备号
 * @param dev_minor 具体文件的次设备号
 * @return fs_t*
 */
static fs_t *mount(fs_type_t type, const char *mount_point, int dev_major,
                   int dev_minor) {
   17ca6:	55                   	push   %ebp
   17ca7:	89 e5                	mov    %esp,%ebp
   17ca9:	83 ec 28             	sub    $0x28,%esp
  fs_t *fs = (fs_t *)0;
   17cac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  log_printf("mount file system, name: %s, dev: %x\n", mount_point, dev_major);
   17cb3:	83 ec 04             	sub    $0x4,%esp
   17cb6:	ff 75 10             	push   0x10(%ebp)
   17cb9:	ff 75 0c             	push   0xc(%ebp)
   17cbc:	68 00 a9 01 00       	push   $0x1a900
   17cc1:	e8 5a 18 00 00       	call   19520 <log_printf>
   17cc6:	83 c4 10             	add    $0x10,%esp

  // 1.检查当前文件系统是否已被挂载
  list_node_t *curr = list_get_first(&mounted_list);
   17cc9:	83 ec 0c             	sub    $0xc,%esp
   17ccc:	68 e0 58 07 00       	push   $0x758e0
   17cd1:	e8 f1 f4 ff ff       	call   171c7 <list_get_first>
   17cd6:	83 c4 10             	add    $0x10,%esp
   17cd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   17cdc:	eb 59                	jmp    17d37 <mount+0x91>
    fs_t *fs = list_node_parent(curr, fs_t, node);
   17cde:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17ce2:	74 0a                	je     17cee <mount+0x48>
   17ce4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17ce7:	2d 0c 02 00 00       	sub    $0x20c,%eax
   17cec:	eb 05                	jmp    17cf3 <mount+0x4d>
   17cee:	b8 00 00 00 00       	mov    $0x0,%eax
   17cf3:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE) ==
   17cf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
   17cf9:	83 ec 04             	sub    $0x4,%esp
   17cfc:	68 00 02 00 00       	push   $0x200
   17d01:	ff 75 0c             	push   0xc(%ebp)
   17d04:	50                   	push   %eax
   17d05:	e8 14 0f 00 00       	call   18c1e <kernel_strncmp>
   17d0a:	83 c4 10             	add    $0x10,%esp
   17d0d:	85 c0                	test   %eax,%eax
   17d0f:	75 15                	jne    17d26 <mount+0x80>
        0) {
      log_printf("fs already mounted!\n");
   17d11:	83 ec 0c             	sub    $0xc,%esp
   17d14:	68 26 a9 01 00       	push   $0x1a926
   17d19:	e8 02 18 00 00       	call   19520 <log_printf>
   17d1e:	83 c4 10             	add    $0x10,%esp
      goto mount_failed;
   17d21:	e9 40 01 00 00       	jmp    17e66 <mount+0x1c0>
    }

    curr = list_node_next(curr);
   17d26:	83 ec 0c             	sub    $0xc,%esp
   17d29:	ff 75 f0             	push   -0x10(%ebp)
   17d2c:	e8 22 f4 ff ff       	call   17153 <list_node_next>
   17d31:	83 c4 10             	add    $0x10,%esp
   17d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   17d37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17d3b:	75 a1                	jne    17cde <mount+0x38>
  }

  // 2.从空闲链表中取下一个待挂载的fs对象进行挂载
  list_node_t *free_node = list_remove_first(&free_list);
   17d3d:	83 ec 0c             	sub    $0xc,%esp
   17d40:	68 f8 6f 07 00       	push   $0x76ff8
   17d45:	e8 78 15 00 00       	call   192c2 <list_remove_first>
   17d4a:	83 c4 10             	add    $0x10,%esp
   17d4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!free_node) {
   17d50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17d54:	75 15                	jne    17d6b <mount+0xc5>
    log_printf("no free fs, mount failed!\n");
   17d56:	83 ec 0c             	sub    $0xc,%esp
   17d59:	68 3b a9 01 00       	push   $0x1a93b
   17d5e:	e8 bd 17 00 00       	call   19520 <log_printf>
   17d63:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17d66:	e9 fb 00 00 00       	jmp    17e66 <mount+0x1c0>
  }
  fs = list_node_parent(free_node, fs_t, node);
   17d6b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17d6f:	74 0a                	je     17d7b <mount+0xd5>
   17d71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17d74:	2d 0c 02 00 00       	sub    $0x20c,%eax
   17d79:	eb 05                	jmp    17d80 <mount+0xda>
   17d7b:	b8 00 00 00 00       	mov    $0x0,%eax
   17d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_memset(fs, 0, sizeof(fs_t));
   17d83:	83 ec 04             	sub    $0x4,%esp
   17d86:	68 4c 02 00 00       	push   $0x24c
   17d8b:	6a 00                	push   $0x0
   17d8d:	ff 75 f4             	push   -0xc(%ebp)
   17d90:	e8 8e 0f 00 00       	call   18d23 <kernel_memset>
   17d95:	83 c4 10             	add    $0x10,%esp
  kernel_strncpy(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE);
   17d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17d9b:	83 ec 04             	sub    $0x4,%esp
   17d9e:	68 00 02 00 00       	push   $0x200
   17da3:	ff 75 0c             	push   0xc(%ebp)
   17da6:	50                   	push   %eax
   17da7:	e8 21 0e 00 00       	call   18bcd <kernel_strncpy>
   17dac:	83 c4 10             	add    $0x10,%esp
  
  //3.获取文件系统锁
  mutex_t* mutex = get_fs_mutex(type);
   17daf:	83 ec 0c             	sub    $0xc,%esp
   17db2:	ff 75 08             	push   0x8(%ebp)
   17db5:	e8 a3 fe ff ff       	call   17c5d <get_fs_mutex>
   17dba:	83 c4 10             	add    $0x10,%esp
   17dbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (!mutex) {
   17dc0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17dc4:	75 18                	jne    17dde <mount+0x138>
    log_printf("unsupported fs type: %du\n", type);
   17dc6:	83 ec 08             	sub    $0x8,%esp
   17dc9:	ff 75 08             	push   0x8(%ebp)
   17dcc:	68 56 a9 01 00       	push   $0x1a956
   17dd1:	e8 4a 17 00 00       	call   19520 <log_printf>
   17dd6:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17dd9:	e9 88 00 00 00       	jmp    17e66 <mount+0x1c0>
  }
  // fs->mutex = mutex;

  // 4.获取该fs对象的操作函数表并交给该对象
  fs_op_t *op = get_fs_op(type, dev_major);
   17dde:	83 ec 08             	sub    $0x8,%esp
   17de1:	ff 75 10             	push   0x10(%ebp)
   17de4:	ff 75 08             	push   0x8(%ebp)
   17de7:	e8 4b fe ff ff       	call   17c37 <get_fs_op>
   17dec:	83 c4 10             	add    $0x10,%esp
   17def:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (!op) {
   17df2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   17df6:	75 15                	jne    17e0d <mount+0x167>
    log_printf("unsupported fs type: %du\n", type);
   17df8:	83 ec 08             	sub    $0x8,%esp
   17dfb:	ff 75 08             	push   0x8(%ebp)
   17dfe:	68 56 a9 01 00       	push   $0x1a956
   17e03:	e8 18 17 00 00       	call   19520 <log_printf>
   17e08:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17e0b:	eb 59                	jmp    17e66 <mount+0x1c0>
  }
  fs->op = op;
   17e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17e10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   17e13:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)

  // 5.挂载该文件系统类型下具体的设备
  if (op->mount(fs, dev_major, dev_minor) < 0) {
   17e19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17e1c:	8b 00                	mov    (%eax),%eax
   17e1e:	83 ec 04             	sub    $0x4,%esp
   17e21:	ff 75 14             	push   0x14(%ebp)
   17e24:	ff 75 10             	push   0x10(%ebp)
   17e27:	ff 75 f4             	push   -0xc(%ebp)
   17e2a:	ff d0                	call   *%eax
   17e2c:	83 c4 10             	add    $0x10,%esp
   17e2f:	85 c0                	test   %eax,%eax
   17e31:	79 15                	jns    17e48 <mount+0x1a2>
    log_printf("mount fs %s failed!\n", mount_point);
   17e33:	83 ec 08             	sub    $0x8,%esp
   17e36:	ff 75 0c             	push   0xc(%ebp)
   17e39:	68 70 a9 01 00       	push   $0x1a970
   17e3e:	e8 dd 16 00 00       	call   19520 <log_printf>
   17e43:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17e46:	eb 1e                	jmp    17e66 <mount+0x1c0>
  }

  // 6.将该文件系统挂载到mounted_list上
  list_insert_last(&mounted_list, &fs->node);
   17e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17e4b:	05 0c 02 00 00       	add    $0x20c,%eax
   17e50:	83 ec 08             	sub    $0x8,%esp
   17e53:	50                   	push   %eax
   17e54:	68 e0 58 07 00       	push   $0x758e0
   17e59:	e8 d5 13 00 00       	call   19233 <list_insert_last>
   17e5e:	83 c4 10             	add    $0x10,%esp

  return fs;
   17e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17e64:	eb 24                	jmp    17e8a <mount+0x1e4>

// 挂载失败的异常处理
mount_failed:
  // fs不为空，证明已从free_list上取下，需要将其插回去
  if (fs) {
   17e66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17e6a:	74 19                	je     17e85 <mount+0x1df>
    list_insert_last(&free_list, &fs->node);
   17e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17e6f:	05 0c 02 00 00       	add    $0x20c,%eax
   17e74:	83 ec 08             	sub    $0x8,%esp
   17e77:	50                   	push   %eax
   17e78:	68 f8 6f 07 00       	push   $0x76ff8
   17e7d:	e8 b1 13 00 00       	call   19233 <list_insert_last>
   17e82:	83 c4 10             	add    $0x10,%esp
  }
  return (fs_t *)0;
   17e85:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17e8a:	c9                   	leave  
   17e8b:	c3                   	ret    

00017e8c <fs_init>:

/**
 * @brief 初始化文件系统
 *
 */
void fs_init(void) {
   17e8c:	55                   	push   %ebp
   17e8d:	89 e5                	mov    %esp,%ebp
   17e8f:	83 ec 18             	sub    $0x18,%esp
  mount_list_init();
   17e92:	e8 3d fd ff ff       	call   17bd4 <mount_list_init>
  file_table_init();
   17e97:	e8 82 f1 ff ff       	call   1701e <file_table_init>

  disk_init();
   17e9c:	e8 bf ca ff ff       	call   14960 <disk_init>

  fs_t *fs = mount(FS_DEVFS, "/dev", 0, 0);
   17ea1:	6a 00                	push   $0x0
   17ea3:	6a 00                	push   $0x0
   17ea5:	68 85 a9 01 00       	push   $0x1a985
   17eaa:	6a 00                	push   $0x0
   17eac:	e8 f5 fd ff ff       	call   17ca6 <mount>
   17eb1:	83 c4 10             	add    $0x10,%esp
   17eb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT(fs != (fs_t *)0);
   17eb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17ebb:	75 1c                	jne    17ed9 <fs_init+0x4d>
   17ebd:	68 8a a9 01 00       	push   $0x1a98a
   17ec2:	68 f0 a9 01 00       	push   $0x1a9f0
   17ec7:	68 a6 02 00 00       	push   $0x2a6
   17ecc:	68 90 a8 01 00       	push   $0x1a890
   17ed1:	e8 2e 09 00 00       	call   18804 <pannic>
   17ed6:	83 c4 10             	add    $0x10,%esp

  root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   17ed9:	68 b1 00 00 00       	push   $0xb1
   17ede:	6a 02                	push   $0x2
   17ee0:	68 9a a9 01 00       	push   $0x1a99a
   17ee5:	6a 01                	push   $0x1
   17ee7:	e8 ba fd ff ff       	call   17ca6 <mount>
   17eec:	83 c4 10             	add    $0x10,%esp
   17eef:	a3 2c 70 07 00       	mov    %eax,0x7702c
  ASSERT(root_fs != (fs_t *)0);
   17ef4:	a1 2c 70 07 00       	mov    0x7702c,%eax
   17ef9:	85 c0                	test   %eax,%eax
   17efb:	75 1c                	jne    17f19 <fs_init+0x8d>
   17efd:	68 a0 a9 01 00       	push   $0x1a9a0
   17f02:	68 f0 a9 01 00       	push   $0x1a9f0
   17f07:	68 a9 02 00 00       	push   $0x2a9
   17f0c:	68 90 a8 01 00       	push   $0x1a890
   17f11:	e8 ee 08 00 00       	call   18804 <pannic>
   17f16:	83 c4 10             	add    $0x10,%esp
}
   17f19:	90                   	nop
   17f1a:	c9                   	leave  
   17f1b:	c3                   	ret    

00017f1c <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   17f1c:	55                   	push   %ebp
   17f1d:	89 e5                	mov    %esp,%ebp
   17f1f:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   17f22:	8b 45 08             	mov    0x8(%ebp),%eax
   17f25:	8b 40 50             	mov    0x50(%eax),%eax
   17f28:	85 c0                	test   %eax,%eax
   17f2a:	75 19                	jne    17f45 <kernel_init+0x29>
   17f2c:	68 f8 a9 01 00       	push   $0x1a9f8
   17f31:	68 94 aa 01 00       	push   $0x1aa94
   17f36:	6a 25                	push   $0x25
   17f38:	68 1c aa 01 00       	push   $0x1aa1c
   17f3d:	e8 c2 08 00 00       	call   18804 <pannic>
   17f42:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   17f45:	e8 45 a9 ff ff       	call   1288f <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   17f4a:	e8 44 b1 ff ff       	call   13093 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   17f4f:	e8 9d 15 00 00       	call   194f1 <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   17f54:	83 ec 0c             	sub    $0xc,%esp
   17f57:	ff 75 08             	push   0x8(%ebp)
   17f5a:	e8 17 8d ff ff       	call   10c76 <memory_init>
   17f5f:	83 c4 10             	add    $0x10,%esp
    
    //6.初始化文件系统
    fs_init();
   17f62:	e8 25 ff ff ff       	call   17e8c <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   17f67:	e8 c2 d3 ff ff       	call   1532e <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   17f6c:	e8 a1 97 ff ff       	call   11712 <task_manager_init>
    
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   17f71:	90                   	nop
   17f72:	c9                   	leave  
   17f73:	c3                   	ret    

00017f74 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   17f74:	55                   	push   %ebp
   17f75:	89 e5                	mov    %esp,%ebp
   17f77:	56                   	push   %esi
   17f78:	53                   	push   %ebx
   17f79:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   17f7c:	e8 30 9a ff ff       	call   119b1 <task_current>
   17f81:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17f84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17f88:	75 19                	jne    17fa3 <move_to_first_task+0x2f>
   17f8a:	68 51 aa 01 00       	push   $0x1aa51
   17f8f:	68 a0 aa 01 00       	push   $0x1aaa0
   17f94:	6a 49                	push   $0x49
   17f96:	68 1c aa 01 00       	push   $0x1aa1c
   17f9b:	e8 64 08 00 00       	call   18804 <pannic>
   17fa0:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   17fa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17fa6:	83 c0 5c             	add    $0x5c,%eax
   17fa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   17fac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17faf:	8b 40 50             	mov    0x50(%eax),%eax
   17fb2:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17fb5:	8b 52 38             	mov    0x38(%edx),%edx
   17fb8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17fbb:	8b 49 24             	mov    0x24(%ecx),%ecx
   17fbe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17fc1:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17fc4:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17fc7:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   17fca:	50                   	push   %eax
   17fcb:	52                   	push   %edx
   17fcc:	51                   	push   %ecx
   17fcd:	53                   	push   %ebx
   17fce:	56                   	push   %esi
   17fcf:	cf                   	iret   

        
    );
}
   17fd0:	90                   	nop
   17fd1:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17fd4:	5b                   	pop    %ebx
   17fd5:	5e                   	pop    %esi
   17fd6:	5d                   	pop    %ebp
   17fd7:	c3                   	ret    

00017fd8 <init_main>:


void init_main(void) {
   17fd8:	55                   	push   %ebp
   17fd9:	89 e5                	mov    %esp,%ebp
   17fdb:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   17fde:	83 ec 0c             	sub    $0xc,%esp
   17fe1:	68 5b aa 01 00       	push   $0x1aa5b
   17fe6:	e8 35 15 00 00       	call   19520 <log_printf>
   17feb:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: KBOS, Version: %s\n", OS_VERSION);
   17fee:	83 ec 08             	sub    $0x8,%esp
   17ff1:	68 74 aa 01 00       	push   $0x1aa74
   17ff6:	68 7a aa 01 00       	push   $0x1aa7a
   17ffb:	e8 20 15 00 00       	call   19520 <log_printf>
   18000:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   18003:	e8 e7 97 ff ff       	call   117ef <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   18008:	e8 67 ff ff ff       	call   17f74 <move_to_first_task>
   1800d:	90                   	nop
   1800e:	c9                   	leave  
   1800f:	c3                   	ret    

00018010 <list_init>:
static inline void list_init(list_t *list) {
   18010:	55                   	push   %ebp
   18011:	89 e5                	mov    %esp,%ebp
   18013:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18016:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1801a:	75 19                	jne    18035 <list_init+0x25>
   1801c:	68 b4 aa 01 00       	push   $0x1aab4
   18021:	68 60 ab 01 00       	push   $0x1ab60
   18026:	6a 31                	push   $0x31
   18028:	68 c8 aa 01 00       	push   $0x1aac8
   1802d:	e8 d2 07 00 00       	call   18804 <pannic>
   18032:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   18035:	8b 45 08             	mov    0x8(%ebp),%eax
   18038:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1803f:	8b 45 08             	mov    0x8(%ebp),%eax
   18042:	8b 50 04             	mov    0x4(%eax),%edx
   18045:	8b 45 08             	mov    0x8(%ebp),%eax
   18048:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1804a:	8b 45 08             	mov    0x8(%ebp),%eax
   1804d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   18054:	90                   	nop
   18055:	c9                   	leave  
   18056:	c3                   	ret    

00018057 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   18057:	55                   	push   %ebp
   18058:	89 e5                	mov    %esp,%ebp
   1805a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1805d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18061:	75 19                	jne    1807c <list_is_empty+0x25>
   18063:	68 b4 aa 01 00       	push   $0x1aab4
   18068:	68 6c ab 01 00       	push   $0x1ab6c
   1806d:	6a 38                	push   $0x38
   1806f:	68 c8 aa 01 00       	push   $0x1aac8
   18074:	e8 8b 07 00 00       	call   18804 <pannic>
   18079:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1807c:	8b 45 08             	mov    0x8(%ebp),%eax
   1807f:	8b 40 08             	mov    0x8(%eax),%eax
   18082:	85 c0                	test   %eax,%eax
   18084:	0f 94 c0             	sete   %al
   18087:	0f b6 c0             	movzbl %al,%eax
}
   1808a:	c9                   	leave  
   1808b:	c3                   	ret    

0001808c <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   1808c:	55                   	push   %ebp
   1808d:	89 e5                	mov    %esp,%ebp
   1808f:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   18092:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18096:	75 19                	jne    180b1 <mutex_init+0x25>
   18098:	68 06 ab 01 00       	push   $0x1ab06
   1809d:	68 54 ab 01 00       	push   $0x1ab54
   180a2:	6a 15                	push   $0x15
   180a4:	68 1c ab 01 00       	push   $0x1ab1c
   180a9:	e8 56 07 00 00       	call   18804 <pannic>
   180ae:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   180b1:	8b 45 08             	mov    0x8(%ebp),%eax
   180b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   180bb:	8b 45 08             	mov    0x8(%ebp),%eax
   180be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   180c4:	8b 45 08             	mov    0x8(%ebp),%eax
   180c7:	83 c0 08             	add    $0x8,%eax
   180ca:	83 ec 0c             	sub    $0xc,%esp
   180cd:	50                   	push   %eax
   180ce:	e8 3d ff ff ff       	call   18010 <list_init>
   180d3:	83 c4 10             	add    $0x10,%esp
}
   180d6:	90                   	nop
   180d7:	c9                   	leave  
   180d8:	c3                   	ret    

000180d9 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   180d9:	55                   	push   %ebp
   180da:	89 e5                	mov    %esp,%ebp
   180dc:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   180df:	e8 df b2 ff ff       	call   133c3 <idt_enter_protection>
   180e4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   180e7:	e8 c5 98 ff ff       	call   119b1 <task_current>
   180ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   180ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   180f3:	75 10                	jne    18105 <mutex_lock+0x2c>
    idt_leave_protection(state);  // TODO:解锁
   180f5:	83 ec 0c             	sub    $0xc,%esp
   180f8:	ff 75 f4             	push   -0xc(%ebp)
   180fb:	e8 db b2 ff ff       	call   133db <idt_leave_protection>
   18100:	83 c4 10             	add    $0x10,%esp
    return;
   18103:	eb 78                	jmp    1817d <mutex_lock+0xa4>
  }

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   18105:	8b 45 08             	mov    0x8(%ebp),%eax
   18108:	8b 40 04             	mov    0x4(%eax),%eax
   1810b:	85 c0                	test   %eax,%eax
   1810d:	75 19                	jne    18128 <mutex_lock+0x4f>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   1810f:	8b 45 08             	mov    0x8(%ebp),%eax
   18112:	8b 40 04             	mov    0x4(%eax),%eax
   18115:	8d 50 01             	lea    0x1(%eax),%edx
   18118:	8b 45 08             	mov    0x8(%ebp),%eax
   1811b:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   1811e:	8b 45 08             	mov    0x8(%ebp),%eax
   18121:	8b 55 f0             	mov    -0x10(%ebp),%edx
   18124:	89 10                	mov    %edx,(%eax)
   18126:	eb 47                	jmp    1816f <mutex_lock+0x96>
  } else if (mutex->owner == curr) {
   18128:	8b 45 08             	mov    0x8(%ebp),%eax
   1812b:	8b 00                	mov    (%eax),%eax
   1812d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   18130:	75 11                	jne    18143 <mutex_lock+0x6a>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   18132:	8b 45 08             	mov    0x8(%ebp),%eax
   18135:	8b 40 04             	mov    0x4(%eax),%eax
   18138:	8d 50 01             	lea    0x1(%eax),%edx
   1813b:	8b 45 08             	mov    0x8(%ebp),%eax
   1813e:	89 50 04             	mov    %edx,0x4(%eax)
   18141:	eb 2c                	jmp    1816f <mutex_lock+0x96>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   18143:	83 ec 0c             	sub    $0xc,%esp
   18146:	ff 75 f0             	push   -0x10(%ebp)
   18149:	e8 f3 97 ff ff       	call   11941 <task_set_unready>
   1814e:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   18151:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18154:	8d 50 54             	lea    0x54(%eax),%edx
   18157:	8b 45 08             	mov    0x8(%ebp),%eax
   1815a:	83 c0 08             	add    $0x8,%eax
   1815d:	83 ec 08             	sub    $0x8,%esp
   18160:	52                   	push   %edx
   18161:	50                   	push   %eax
   18162:	e8 cc 10 00 00       	call   19233 <list_insert_last>
   18167:	83 c4 10             	add    $0x10,%esp
    task_switch();
   1816a:	e8 4c 98 ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   1816f:	83 ec 0c             	sub    $0xc,%esp
   18172:	ff 75 f4             	push   -0xc(%ebp)
   18175:	e8 61 b2 ff ff       	call   133db <idt_leave_protection>
   1817a:	83 c4 10             	add    $0x10,%esp
}
   1817d:	c9                   	leave  
   1817e:	c3                   	ret    

0001817f <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   1817f:	55                   	push   %ebp
   18180:	89 e5                	mov    %esp,%ebp
   18182:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   18185:	e8 39 b2 ff ff       	call   133c3 <idt_enter_protection>
   1818a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   1818d:	e8 1f 98 ff ff       	call   119b1 <task_current>
   18192:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   18195:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   18199:	75 13                	jne    181ae <mutex_unlock+0x2f>
    idt_leave_protection(state);  // TODO:解锁
   1819b:	83 ec 0c             	sub    $0xc,%esp
   1819e:	ff 75 f4             	push   -0xc(%ebp)
   181a1:	e8 35 b2 ff ff       	call   133db <idt_leave_protection>
   181a6:	83 c4 10             	add    $0x10,%esp
    return;
   181a9:	e9 9f 00 00 00       	jmp    1824d <mutex_unlock+0xce>
  }

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   181ae:	8b 45 08             	mov    0x8(%ebp),%eax
   181b1:	8b 00                	mov    (%eax),%eax
   181b3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   181b6:	0f 85 83 00 00 00    	jne    1823f <mutex_unlock+0xc0>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   181bc:	8b 45 08             	mov    0x8(%ebp),%eax
   181bf:	8b 40 04             	mov    0x4(%eax),%eax
   181c2:	8d 50 ff             	lea    -0x1(%eax),%edx
   181c5:	8b 45 08             	mov    0x8(%ebp),%eax
   181c8:	89 50 04             	mov    %edx,0x4(%eax)
   181cb:	8b 45 08             	mov    0x8(%ebp),%eax
   181ce:	8b 40 04             	mov    0x4(%eax),%eax
   181d1:	85 c0                	test   %eax,%eax
   181d3:	75 6a                	jne    1823f <mutex_unlock+0xc0>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   181d5:	8b 45 08             	mov    0x8(%ebp),%eax
   181d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   181de:	8b 45 08             	mov    0x8(%ebp),%eax
   181e1:	83 c0 08             	add    $0x8,%eax
   181e4:	83 ec 0c             	sub    $0xc,%esp
   181e7:	50                   	push   %eax
   181e8:	e8 6a fe ff ff       	call   18057 <list_is_empty>
   181ed:	83 c4 10             	add    $0x10,%esp
   181f0:	85 c0                	test   %eax,%eax
   181f2:	75 4b                	jne    1823f <mutex_unlock+0xc0>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   181f4:	8b 45 08             	mov    0x8(%ebp),%eax
   181f7:	83 c0 08             	add    $0x8,%eax
   181fa:	83 ec 0c             	sub    $0xc,%esp
   181fd:	50                   	push   %eax
   181fe:	e8 bf 10 00 00       	call   192c2 <list_remove_first>
   18203:	83 c4 10             	add    $0x10,%esp
   18206:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   18209:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1820d:	74 08                	je     18217 <mutex_unlock+0x98>
   1820f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18212:	83 e8 54             	sub    $0x54,%eax
   18215:	eb 05                	jmp    1821c <mutex_unlock+0x9d>
   18217:	b8 00 00 00 00       	mov    $0x0,%eax
   1821c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   1821f:	8b 45 08             	mov    0x8(%ebp),%eax
   18222:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   18229:	8b 45 08             	mov    0x8(%ebp),%eax
   1822c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1822f:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   18231:	83 ec 0c             	sub    $0xc,%esp
   18234:	ff 75 e8             	push   -0x18(%ebp)
   18237:	e8 c3 96 ff ff       	call   118ff <task_set_ready>
   1823c:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   1823f:	83 ec 0c             	sub    $0xc,%esp
   18242:	ff 75 f4             	push   -0xc(%ebp)
   18245:	e8 91 b1 ff ff       	call   133db <idt_leave_protection>
   1824a:	83 c4 10             	add    $0x10,%esp
}
   1824d:	c9                   	leave  
   1824e:	c3                   	ret    

0001824f <list_init>:
static inline void list_init(list_t *list) {
   1824f:	55                   	push   %ebp
   18250:	89 e5                	mov    %esp,%ebp
   18252:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18259:	75 19                	jne    18274 <list_init+0x25>
   1825b:	68 7c ab 01 00       	push   $0x1ab7c
   18260:	68 20 ac 01 00       	push   $0x1ac20
   18265:	6a 31                	push   $0x31
   18267:	68 90 ab 01 00       	push   $0x1ab90
   1826c:	e8 93 05 00 00       	call   18804 <pannic>
   18271:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   18274:	8b 45 08             	mov    0x8(%ebp),%eax
   18277:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1827e:	8b 45 08             	mov    0x8(%ebp),%eax
   18281:	8b 50 04             	mov    0x4(%eax),%edx
   18284:	8b 45 08             	mov    0x8(%ebp),%eax
   18287:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   18289:	8b 45 08             	mov    0x8(%ebp),%eax
   1828c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   18293:	90                   	nop
   18294:	c9                   	leave  
   18295:	c3                   	ret    

00018296 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   18296:	55                   	push   %ebp
   18297:	89 e5                	mov    %esp,%ebp
   18299:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1829c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182a0:	75 19                	jne    182bb <list_is_empty+0x25>
   182a2:	68 7c ab 01 00       	push   $0x1ab7c
   182a7:	68 2c ac 01 00       	push   $0x1ac2c
   182ac:	6a 38                	push   $0x38
   182ae:	68 90 ab 01 00       	push   $0x1ab90
   182b3:	e8 4c 05 00 00       	call   18804 <pannic>
   182b8:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   182bb:	8b 45 08             	mov    0x8(%ebp),%eax
   182be:	8b 40 08             	mov    0x8(%eax),%eax
   182c1:	85 c0                	test   %eax,%eax
   182c3:	0f 94 c0             	sete   %al
   182c6:	0f b6 c0             	movzbl %al,%eax
}
   182c9:	c9                   	leave  
   182ca:	c3                   	ret    

000182cb <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   182cb:	55                   	push   %ebp
   182cc:	89 e5                	mov    %esp,%ebp
   182ce:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   182d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182d5:	75 19                	jne    182f0 <sem_init+0x25>
   182d7:	68 ce ab 01 00       	push   $0x1abce
   182dc:	68 14 ac 01 00       	push   $0x1ac14
   182e1:	6a 18                	push   $0x18
   182e3:	68 e0 ab 01 00       	push   $0x1abe0
   182e8:	e8 17 05 00 00       	call   18804 <pannic>
   182ed:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   182f0:	8b 45 08             	mov    0x8(%ebp),%eax
   182f3:	8b 55 0c             	mov    0xc(%ebp),%edx
   182f6:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   182f8:	8b 45 08             	mov    0x8(%ebp),%eax
   182fb:	83 c0 04             	add    $0x4,%eax
   182fe:	83 ec 0c             	sub    $0xc,%esp
   18301:	50                   	push   %eax
   18302:	e8 48 ff ff ff       	call   1824f <list_init>
   18307:	83 c4 10             	add    $0x10,%esp
}
   1830a:	90                   	nop
   1830b:	c9                   	leave  
   1830c:	c3                   	ret    

0001830d <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   1830d:	55                   	push   %ebp
   1830e:	89 e5                	mov    %esp,%ebp
   18310:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   18313:	e8 ab b0 ff ff       	call   133c3 <idt_enter_protection>
   18318:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   1831b:	e8 91 96 ff ff       	call   119b1 <task_current>
   18320:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   18323:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   18327:	75 10                	jne    18339 <sem_wait+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   18329:	83 ec 0c             	sub    $0xc,%esp
   1832c:	ff 75 f4             	push   -0xc(%ebp)
   1832f:	e8 a7 b0 ff ff       	call   133db <idt_leave_protection>
   18334:	83 c4 10             	add    $0x10,%esp
        return;
   18337:	eb 52                	jmp    1838b <sem_wait+0x7e>
    }

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   18339:	8b 45 08             	mov    0x8(%ebp),%eax
   1833c:	8b 00                	mov    (%eax),%eax
   1833e:	85 c0                	test   %eax,%eax
   18340:	7e 0f                	jle    18351 <sem_wait+0x44>
        --sem->count;   
   18342:	8b 45 08             	mov    0x8(%ebp),%eax
   18345:	8b 00                	mov    (%eax),%eax
   18347:	8d 50 ff             	lea    -0x1(%eax),%edx
   1834a:	8b 45 08             	mov    0x8(%ebp),%eax
   1834d:	89 10                	mov    %edx,(%eax)
   1834f:	eb 2c                	jmp    1837d <sem_wait+0x70>
    } else {//没有剩余，任务进入延时队列等待信号量
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   18351:	83 ec 0c             	sub    $0xc,%esp
   18354:	ff 75 f0             	push   -0x10(%ebp)
   18357:	e8 e5 95 ff ff       	call   11941 <task_set_unready>
   1835c:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   1835f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18362:	8d 50 54             	lea    0x54(%eax),%edx
   18365:	8b 45 08             	mov    0x8(%ebp),%eax
   18368:	83 c0 04             	add    $0x4,%eax
   1836b:	83 ec 08             	sub    $0x8,%esp
   1836e:	52                   	push   %edx
   1836f:	50                   	push   %eax
   18370:	e8 be 0e 00 00       	call   19233 <list_insert_last>
   18375:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   18378:	e8 3e 96 ff ff       	call   119bb <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   1837d:	83 ec 0c             	sub    $0xc,%esp
   18380:	ff 75 f4             	push   -0xc(%ebp)
   18383:	e8 53 b0 ff ff       	call   133db <idt_leave_protection>
   18388:	83 c4 10             	add    $0x10,%esp
}
   1838b:	c9                   	leave  
   1838c:	c3                   	ret    

0001838d <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   1838d:	55                   	push   %ebp
   1838e:	89 e5                	mov    %esp,%ebp
   18390:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   18393:	e8 2b b0 ff ff       	call   133c3 <idt_enter_protection>
   18398:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   1839b:	e8 11 96 ff ff       	call   119b1 <task_current>
   183a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   183a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   183a7:	75 10                	jne    183b9 <sem_notify+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   183a9:	83 ec 0c             	sub    $0xc,%esp
   183ac:	ff 75 f4             	push   -0xc(%ebp)
   183af:	e8 27 b0 ff ff       	call   133db <idt_leave_protection>
   183b4:	83 c4 10             	add    $0x10,%esp
        return;
   183b7:	eb 71                	jmp    1842a <sem_notify+0x9d>
    }

    if (!list_is_empty(&sem->wait_list)) {
   183b9:	8b 45 08             	mov    0x8(%ebp),%eax
   183bc:	83 c0 04             	add    $0x4,%eax
   183bf:	83 ec 0c             	sub    $0xc,%esp
   183c2:	50                   	push   %eax
   183c3:	e8 ce fe ff ff       	call   18296 <list_is_empty>
   183c8:	83 c4 10             	add    $0x10,%esp
   183cb:	85 c0                	test   %eax,%eax
   183cd:	75 40                	jne    1840f <sem_notify+0x82>
        list_node_t *node = list_remove_first(&sem->wait_list);
   183cf:	8b 45 08             	mov    0x8(%ebp),%eax
   183d2:	83 c0 04             	add    $0x4,%eax
   183d5:	83 ec 0c             	sub    $0xc,%esp
   183d8:	50                   	push   %eax
   183d9:	e8 e4 0e 00 00       	call   192c2 <list_remove_first>
   183de:	83 c4 10             	add    $0x10,%esp
   183e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   183e4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   183e8:	74 08                	je     183f2 <sem_notify+0x65>
   183ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   183ed:	83 e8 54             	sub    $0x54,%eax
   183f0:	eb 05                	jmp    183f7 <sem_notify+0x6a>
   183f2:	b8 00 00 00 00       	mov    $0x0,%eax
   183f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_set_ready(task);
   183fa:	83 ec 0c             	sub    $0xc,%esp
   183fd:	ff 75 e8             	push   -0x18(%ebp)
   18400:	e8 fa 94 ff ff       	call   118ff <task_set_ready>
   18405:	83 c4 10             	add    $0x10,%esp
        task_switch();
   18408:	e8 ae 95 ff ff       	call   119bb <task_switch>
   1840d:	eb 0d                	jmp    1841c <sem_notify+0x8f>
    } else {
        sem->count++;
   1840f:	8b 45 08             	mov    0x8(%ebp),%eax
   18412:	8b 00                	mov    (%eax),%eax
   18414:	8d 50 01             	lea    0x1(%eax),%edx
   18417:	8b 45 08             	mov    0x8(%ebp),%eax
   1841a:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   1841c:	83 ec 0c             	sub    $0xc,%esp
   1841f:	ff 75 f4             	push   -0xc(%ebp)
   18422:	e8 b4 af ff ff       	call   133db <idt_leave_protection>
   18427:	83 c4 10             	add    $0x10,%esp

}
   1842a:	c9                   	leave  
   1842b:	c3                   	ret    

0001842c <sem_count>:

int sem_count(sem_t *sem) {
   1842c:	55                   	push   %ebp
   1842d:	89 e5                	mov    %esp,%ebp
   1842f:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   18432:	e8 8c af ff ff       	call   133c3 <idt_enter_protection>
   18437:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1843a:	8b 45 08             	mov    0x8(%ebp),%eax
   1843d:	8b 00                	mov    (%eax),%eax
   1843f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   18442:	83 ec 0c             	sub    $0xc,%esp
   18445:	ff 75 f4             	push   -0xc(%ebp)
   18448:	e8 8e af ff ff       	call   133db <idt_leave_protection>
   1844d:	83 c4 10             	add    $0x10,%esp

    return count;
   18450:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18453:	c9                   	leave  
   18454:	c3                   	ret    

00018455 <list_init>:
static inline void list_init(list_t *list) {
   18455:	55                   	push   %ebp
   18456:	89 e5                	mov    %esp,%ebp
   18458:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1845b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1845f:	75 19                	jne    1847a <list_init+0x25>
   18461:	68 3c ac 01 00       	push   $0x1ac3c
   18466:	68 40 ad 01 00       	push   $0x1ad40
   1846b:	6a 31                	push   $0x31
   1846d:	68 50 ac 01 00       	push   $0x1ac50
   18472:	e8 8d 03 00 00       	call   18804 <pannic>
   18477:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1847a:	8b 45 08             	mov    0x8(%ebp),%eax
   1847d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18484:	8b 45 08             	mov    0x8(%ebp),%eax
   18487:	8b 50 04             	mov    0x4(%eax),%edx
   1848a:	8b 45 08             	mov    0x8(%ebp),%eax
   1848d:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1848f:	8b 45 08             	mov    0x8(%ebp),%eax
   18492:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   18499:	90                   	nop
   1849a:	c9                   	leave  
   1849b:	c3                   	ret    

0001849c <list_get_size>:
static inline int list_get_size(list_t *list) {
   1849c:	55                   	push   %ebp
   1849d:	89 e5                	mov    %esp,%ebp
   1849f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   184a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184a6:	75 19                	jne    184c1 <list_get_size+0x25>
   184a8:	68 3c ac 01 00       	push   $0x1ac3c
   184ad:	68 4c ad 01 00       	push   $0x1ad4c
   184b2:	6a 3e                	push   $0x3e
   184b4:	68 50 ac 01 00       	push   $0x1ac50
   184b9:	e8 46 03 00 00       	call   18804 <pannic>
   184be:	83 c4 10             	add    $0x10,%esp
    return list->size;
   184c1:	8b 45 08             	mov    0x8(%ebp),%eax
   184c4:	8b 40 08             	mov    0x8(%eax),%eax
}
   184c7:	c9                   	leave  
   184c8:	c3                   	ret    

000184c9 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   184c9:	55                   	push   %ebp
   184ca:	89 e5                	mov    %esp,%ebp
   184cc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   184cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184d3:	75 19                	jne    184ee <list_get_first+0x25>
   184d5:	68 3c ac 01 00       	push   $0x1ac3c
   184da:	68 6c ad 01 00       	push   $0x1ad6c
   184df:	6a 44                	push   $0x44
   184e1:	68 50 ac 01 00       	push   $0x1ac50
   184e6:	e8 19 03 00 00       	call   18804 <pannic>
   184eb:	83 c4 10             	add    $0x10,%esp
    return list->first;
   184ee:	8b 45 08             	mov    0x8(%ebp),%eax
   184f1:	8b 00                	mov    (%eax),%eax
}
   184f3:	c9                   	leave  
   184f4:	c3                   	ret    

000184f5 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   184f5:	55                   	push   %ebp
   184f6:	89 e5                	mov    %esp,%ebp
   184f8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   184fb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184ff:	75 19                	jne    1851a <list_get_last+0x25>
   18501:	68 3c ac 01 00       	push   $0x1ac3c
   18506:	68 5c ad 01 00       	push   $0x1ad5c
   1850b:	6a 4a                	push   $0x4a
   1850d:	68 50 ac 01 00       	push   $0x1ac50
   18512:	e8 ed 02 00 00       	call   18804 <pannic>
   18517:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1851a:	8b 45 08             	mov    0x8(%ebp),%eax
   1851d:	8b 40 04             	mov    0x4(%eax),%eax
}
   18520:	c9                   	leave  
   18521:	c3                   	ret    

00018522 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   18522:	55                   	push   %ebp
   18523:	89 e5                	mov    %esp,%ebp
   18525:	56                   	push   %esi
   18526:	53                   	push   %ebx
   18527:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1852a:	83 ec 0c             	sub    $0xc,%esp
   1852d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18530:	50                   	push   %eax
   18531:	e8 1f ff ff ff       	call   18455 <list_init>
   18536:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   18539:	83 ec 0c             	sub    $0xc,%esp
   1853c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1853f:	50                   	push   %eax
   18540:	e8 57 ff ff ff       	call   1849c <list_get_size>
   18545:	83 c4 10             	add    $0x10,%esp
   18548:	89 c6                	mov    %eax,%esi
   1854a:	83 ec 0c             	sub    $0xc,%esp
   1854d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18550:	50                   	push   %eax
   18551:	e8 9f ff ff ff       	call   184f5 <list_get_last>
   18556:	83 c4 10             	add    $0x10,%esp
   18559:	89 c3                	mov    %eax,%ebx
   1855b:	83 ec 0c             	sub    $0xc,%esp
   1855e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18561:	50                   	push   %eax
   18562:	e8 62 ff ff ff       	call   184c9 <list_get_first>
   18567:	83 c4 10             	add    $0x10,%esp
   1856a:	56                   	push   %esi
   1856b:	53                   	push   %ebx
   1856c:	50                   	push   %eax
   1856d:	68 90 ac 01 00       	push   $0x1ac90
   18572:	e8 a9 0f 00 00       	call   19520 <log_printf>
   18577:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   1857a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   18581:	eb 3f                	jmp    185c2 <list_test+0xa0>
        list_node_t *node = nodes + i;
   18583:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18586:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1858d:	8d 45 9c             	lea    -0x64(%ebp),%eax
   18590:	01 d0                	add    %edx,%eax
   18592:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   18595:	8b 45 d0             	mov    -0x30(%ebp),%eax
   18598:	83 ec 04             	sub    $0x4,%esp
   1859b:	50                   	push   %eax
   1859c:	ff 75 f4             	push   -0xc(%ebp)
   1859f:	68 b8 ac 01 00       	push   $0x1acb8
   185a4:	e8 77 0f 00 00       	call   19520 <log_printf>
   185a9:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   185ac:	83 ec 08             	sub    $0x8,%esp
   185af:	ff 75 d0             	push   -0x30(%ebp)
   185b2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185b5:	50                   	push   %eax
   185b6:	e8 ed 0b 00 00       	call   191a8 <list_insert_first>
   185bb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   185be:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   185c2:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   185c6:	7e bb                	jle    18583 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   185c8:	83 ec 0c             	sub    $0xc,%esp
   185cb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185ce:	50                   	push   %eax
   185cf:	e8 c8 fe ff ff       	call   1849c <list_get_size>
   185d4:	83 c4 10             	add    $0x10,%esp
   185d7:	89 c6                	mov    %eax,%esi
   185d9:	83 ec 0c             	sub    $0xc,%esp
   185dc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185df:	50                   	push   %eax
   185e0:	e8 10 ff ff ff       	call   184f5 <list_get_last>
   185e5:	83 c4 10             	add    $0x10,%esp
   185e8:	89 c3                	mov    %eax,%ebx
   185ea:	83 ec 0c             	sub    $0xc,%esp
   185ed:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185f0:	50                   	push   %eax
   185f1:	e8 d3 fe ff ff       	call   184c9 <list_get_first>
   185f6:	83 c4 10             	add    $0x10,%esp
   185f9:	56                   	push   %esi
   185fa:	53                   	push   %ebx
   185fb:	50                   	push   %eax
   185fc:	68 90 ac 01 00       	push   $0x1ac90
   18601:	e8 1a 0f 00 00       	call   19520 <log_printf>
   18606:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   18609:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   18610:	eb 2d                	jmp    1863f <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   18612:	83 ec 0c             	sub    $0xc,%esp
   18615:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18618:	50                   	push   %eax
   18619:	e8 a4 0c 00 00       	call   192c2 <list_remove_first>
   1861e:	83 c4 10             	add    $0x10,%esp
   18621:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   18624:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   18627:	83 ec 04             	sub    $0x4,%esp
   1862a:	50                   	push   %eax
   1862b:	ff 75 f0             	push   -0x10(%ebp)
   1862e:	68 d7 ac 01 00       	push   $0x1acd7
   18633:	e8 e8 0e 00 00       	call   19520 <log_printf>
   18638:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1863b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1863f:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   18643:	7e cd                	jle    18612 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   18645:	83 ec 0c             	sub    $0xc,%esp
   18648:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1864b:	50                   	push   %eax
   1864c:	e8 4b fe ff ff       	call   1849c <list_get_size>
   18651:	83 c4 10             	add    $0x10,%esp
   18654:	89 c6                	mov    %eax,%esi
   18656:	83 ec 0c             	sub    $0xc,%esp
   18659:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1865c:	50                   	push   %eax
   1865d:	e8 93 fe ff ff       	call   184f5 <list_get_last>
   18662:	83 c4 10             	add    $0x10,%esp
   18665:	89 c3                	mov    %eax,%ebx
   18667:	83 ec 0c             	sub    $0xc,%esp
   1866a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1866d:	50                   	push   %eax
   1866e:	e8 56 fe ff ff       	call   184c9 <list_get_first>
   18673:	83 c4 10             	add    $0x10,%esp
   18676:	56                   	push   %esi
   18677:	53                   	push   %ebx
   18678:	50                   	push   %eax
   18679:	68 90 ac 01 00       	push   $0x1ac90
   1867e:	e8 9d 0e 00 00       	call   19520 <log_printf>
   18683:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   18686:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1868d:	eb 3f                	jmp    186ce <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1868f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18692:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   18699:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1869c:	01 d0                	add    %edx,%eax
   1869e:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   186a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   186a4:	83 ec 04             	sub    $0x4,%esp
   186a7:	50                   	push   %eax
   186a8:	ff 75 ec             	push   -0x14(%ebp)
   186ab:	68 ee ac 01 00       	push   $0x1acee
   186b0:	e8 6b 0e 00 00       	call   19520 <log_printf>
   186b5:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   186b8:	83 ec 08             	sub    $0x8,%esp
   186bb:	ff 75 d8             	push   -0x28(%ebp)
   186be:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186c1:	50                   	push   %eax
   186c2:	e8 6c 0b 00 00       	call   19233 <list_insert_last>
   186c7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   186ca:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   186ce:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   186d2:	7e bb                	jle    1868f <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   186d4:	83 ec 0c             	sub    $0xc,%esp
   186d7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186da:	50                   	push   %eax
   186db:	e8 bc fd ff ff       	call   1849c <list_get_size>
   186e0:	83 c4 10             	add    $0x10,%esp
   186e3:	89 c6                	mov    %eax,%esi
   186e5:	83 ec 0c             	sub    $0xc,%esp
   186e8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186eb:	50                   	push   %eax
   186ec:	e8 04 fe ff ff       	call   184f5 <list_get_last>
   186f1:	83 c4 10             	add    $0x10,%esp
   186f4:	89 c3                	mov    %eax,%ebx
   186f6:	83 ec 0c             	sub    $0xc,%esp
   186f9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186fc:	50                   	push   %eax
   186fd:	e8 c7 fd ff ff       	call   184c9 <list_get_first>
   18702:	83 c4 10             	add    $0x10,%esp
   18705:	56                   	push   %esi
   18706:	53                   	push   %ebx
   18707:	50                   	push   %eax
   18708:	68 90 ac 01 00       	push   $0x1ac90
   1870d:	e8 0e 0e 00 00       	call   19520 <log_printf>
   18712:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   18715:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1871c:	eb 2d                	jmp    1874b <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1871e:	83 ec 0c             	sub    $0xc,%esp
   18721:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18724:	50                   	push   %eax
   18725:	e8 49 0c 00 00       	call   19373 <list_remove_last>
   1872a:	83 c4 10             	add    $0x10,%esp
   1872d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   18730:	8b 45 dc             	mov    -0x24(%ebp),%eax
   18733:	83 ec 04             	sub    $0x4,%esp
   18736:	50                   	push   %eax
   18737:	ff 75 e8             	push   -0x18(%ebp)
   1873a:	68 0c ad 01 00       	push   $0x1ad0c
   1873f:	e8 dc 0d 00 00       	call   19520 <log_printf>
   18744:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   18747:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1874b:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1874f:	7e cd                	jle    1871e <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   18751:	83 ec 0c             	sub    $0xc,%esp
   18754:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18757:	50                   	push   %eax
   18758:	e8 3f fd ff ff       	call   1849c <list_get_size>
   1875d:	83 c4 10             	add    $0x10,%esp
   18760:	89 c6                	mov    %eax,%esi
   18762:	83 ec 0c             	sub    $0xc,%esp
   18765:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18768:	50                   	push   %eax
   18769:	e8 87 fd ff ff       	call   184f5 <list_get_last>
   1876e:	83 c4 10             	add    $0x10,%esp
   18771:	89 c3                	mov    %eax,%ebx
   18773:	83 ec 0c             	sub    $0xc,%esp
   18776:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18779:	50                   	push   %eax
   1877a:	e8 4a fd ff ff       	call   184c9 <list_get_first>
   1877f:	83 c4 10             	add    $0x10,%esp
   18782:	56                   	push   %esi
   18783:	53                   	push   %ebx
   18784:	50                   	push   %eax
   18785:	68 90 ac 01 00       	push   $0x1ac90
   1878a:	e8 91 0d 00 00       	call   19520 <log_printf>
   1878f:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   18792:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   18799:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   187a0:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   187a7:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   187ae:	8d 45 90             	lea    -0x70(%ebp),%eax
   187b1:	83 c0 04             	add    $0x4,%eax
   187b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   187b7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   187bb:	74 08                	je     187c5 <list_test+0x2a3>
   187bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   187c0:	83 e8 04             	sub    $0x4,%eax
   187c3:	eb 05                	jmp    187ca <list_test+0x2a8>
   187c5:	b8 00 00 00 00       	mov    $0x0,%eax
   187ca:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   187cd:	8d 45 90             	lea    -0x70(%ebp),%eax
   187d0:	83 ec 08             	sub    $0x8,%esp
   187d3:	50                   	push   %eax
   187d4:	68 22 ad 01 00       	push   $0x1ad22
   187d9:	e8 42 0d 00 00       	call   19520 <log_printf>
   187de:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   187e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
   187e4:	83 ec 08             	sub    $0x8,%esp
   187e7:	50                   	push   %eax
   187e8:	68 30 ad 01 00       	push   $0x1ad30
   187ed:	e8 2e 0d 00 00       	call   19520 <log_printf>
   187f2:	83 c4 10             	add    $0x10,%esp

 }
   187f5:	90                   	nop
   187f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
   187f9:	5b                   	pop    %ebx
   187fa:	5e                   	pop    %esi
   187fb:	5d                   	pop    %ebp
   187fc:	c3                   	ret    

000187fd <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   187fd:	55                   	push   %ebp
   187fe:	89 e5                	mov    %esp,%ebp
   18800:	f4                   	hlt    
   18801:	90                   	nop
   18802:	5d                   	pop    %ebp
   18803:	c3                   	ret    

00018804 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   18804:	55                   	push   %ebp
   18805:	89 e5                	mov    %esp,%ebp
   18807:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   1880a:	83 ec 08             	sub    $0x8,%esp
   1880d:	ff 75 14             	push   0x14(%ebp)
   18810:	68 7b ad 01 00       	push   $0x1ad7b
   18815:	e8 06 0d 00 00       	call   19520 <log_printf>
   1881a:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   1881d:	ff 75 10             	push   0x10(%ebp)
   18820:	ff 75 0c             	push   0xc(%ebp)
   18823:	ff 75 08             	push   0x8(%ebp)
   18826:	68 8d ad 01 00       	push   $0x1ad8d
   1882b:	e8 f0 0c 00 00       	call   19520 <log_printf>
   18830:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   18833:	e8 c5 ff ff ff       	call   187fd <hlt>
   18838:	eb f9                	jmp    18833 <pannic+0x2f>

0001883a <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   1883a:	55                   	push   %ebp
   1883b:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   1883d:	8b 45 08             	mov    0x8(%ebp),%eax
   18840:	83 c0 07             	add    $0x7,%eax
   18843:	8d 50 07             	lea    0x7(%eax),%edx
   18846:	85 c0                	test   %eax,%eax
   18848:	0f 48 c2             	cmovs  %edx,%eax
   1884b:	c1 f8 03             	sar    $0x3,%eax
}
   1884e:	5d                   	pop    %ebp
   1884f:	c3                   	ret    

00018850 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   18850:	55                   	push   %ebp
   18851:	89 e5                	mov    %esp,%ebp
   18853:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   18856:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1885a:	75 19                	jne    18875 <bitmap_init+0x25>
   1885c:	68 ac ad 01 00       	push   $0x1adac
   18861:	68 40 ae 01 00       	push   $0x1ae40
   18866:	6a 24                	push   $0x24
   18868:	68 c4 ad 01 00       	push   $0x1adc4
   1886d:	e8 92 ff ff ff       	call   18804 <pannic>
   18872:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   18875:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18879:	75 19                	jne    18894 <bitmap_init+0x44>
   1887b:	68 fc ad 01 00       	push   $0x1adfc
   18880:	68 40 ae 01 00       	push   $0x1ae40
   18885:	6a 25                	push   $0x25
   18887:	68 c4 ad 01 00       	push   $0x1adc4
   1888c:	e8 73 ff ff ff       	call   18804 <pannic>
   18891:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   18894:	8b 45 08             	mov    0x8(%ebp),%eax
   18897:	8b 55 10             	mov    0x10(%ebp),%edx
   1889a:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1889c:	8b 45 08             	mov    0x8(%ebp),%eax
   1889f:	8b 55 0c             	mov    0xc(%ebp),%edx
   188a2:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   188a5:	8b 45 08             	mov    0x8(%ebp),%eax
   188a8:	8b 00                	mov    (%eax),%eax
   188aa:	83 ec 0c             	sub    $0xc,%esp
   188ad:	50                   	push   %eax
   188ae:	e8 87 ff ff ff       	call   1883a <bitmap_byte_count>
   188b3:	83 c4 10             	add    $0x10,%esp
   188b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   188b9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   188bd:	74 07                	je     188c6 <bitmap_init+0x76>
   188bf:	ba ff 00 00 00       	mov    $0xff,%edx
   188c4:	eb 05                	jmp    188cb <bitmap_init+0x7b>
   188c6:	ba 00 00 00 00       	mov    $0x0,%edx
   188cb:	8b 45 08             	mov    0x8(%ebp),%eax
   188ce:	8b 40 04             	mov    0x4(%eax),%eax
   188d1:	83 ec 04             	sub    $0x4,%esp
   188d4:	ff 75 f4             	push   -0xc(%ebp)
   188d7:	52                   	push   %edx
   188d8:	50                   	push   %eax
   188d9:	e8 45 04 00 00       	call   18d23 <kernel_memset>
   188de:	83 c4 10             	add    $0x10,%esp

}
   188e1:	90                   	nop
   188e2:	c9                   	leave  
   188e3:	c3                   	ret    

000188e4 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   188e4:	55                   	push   %ebp
   188e5:	89 e5                	mov    %esp,%ebp
   188e7:	53                   	push   %ebx
   188e8:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   188eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   188ef:	75 19                	jne    1890a <bitmap_get_bit+0x26>
   188f1:	68 ac ad 01 00       	push   $0x1adac
   188f6:	68 4c ae 01 00       	push   $0x1ae4c
   188fb:	6a 39                	push   $0x39
   188fd:	68 c4 ad 01 00       	push   $0x1adc4
   18902:	e8 fd fe ff ff       	call   18804 <pannic>
   18907:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   1890a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1890e:	79 19                	jns    18929 <bitmap_get_bit+0x45>
   18910:	68 10 ae 01 00       	push   $0x1ae10
   18915:	68 4c ae 01 00       	push   $0x1ae4c
   1891a:	6a 3a                	push   $0x3a
   1891c:	68 c4 ad 01 00       	push   $0x1adc4
   18921:	e8 de fe ff ff       	call   18804 <pannic>
   18926:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   18929:	8b 45 08             	mov    0x8(%ebp),%eax
   1892c:	8b 48 04             	mov    0x4(%eax),%ecx
   1892f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18932:	8d 50 07             	lea    0x7(%eax),%edx
   18935:	85 c0                	test   %eax,%eax
   18937:	0f 48 c2             	cmovs  %edx,%eax
   1893a:	c1 f8 03             	sar    $0x3,%eax
   1893d:	01 c8                	add    %ecx,%eax
   1893f:	0f b6 00             	movzbl (%eax),%eax
   18942:	89 c3                	mov    %eax,%ebx
   18944:	8b 45 0c             	mov    0xc(%ebp),%eax
   18947:	83 e0 07             	and    $0x7,%eax
   1894a:	ba 01 00 00 00       	mov    $0x1,%edx
   1894f:	89 c1                	mov    %eax,%ecx
   18951:	d3 e2                	shl    %cl,%edx
   18953:	89 d0                	mov    %edx,%eax
   18955:	21 d8                	and    %ebx,%eax
}
   18957:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1895a:	c9                   	leave  
   1895b:	c3                   	ret    

0001895c <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   1895c:	55                   	push   %ebp
   1895d:	89 e5                	mov    %esp,%ebp
   1895f:	56                   	push   %esi
   18960:	53                   	push   %ebx
   18961:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   18964:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18968:	75 19                	jne    18983 <bitmap_set_bit+0x27>
   1896a:	68 ac ad 01 00       	push   $0x1adac
   1896f:	68 5c ae 01 00       	push   $0x1ae5c
   18974:	6a 48                	push   $0x48
   18976:	68 c4 ad 01 00       	push   $0x1adc4
   1897b:	e8 84 fe ff ff       	call   18804 <pannic>
   18980:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   18983:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18987:	78 06                	js     1898f <bitmap_set_bit+0x33>
   18989:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1898d:	79 19                	jns    189a8 <bitmap_set_bit+0x4c>
   1898f:	68 1b ae 01 00       	push   $0x1ae1b
   18994:	68 5c ae 01 00       	push   $0x1ae5c
   18999:	6a 49                	push   $0x49
   1899b:	68 c4 ad 01 00       	push   $0x1adc4
   189a0:	e8 5f fe ff ff       	call   18804 <pannic>
   189a5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   189a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   189af:	e9 92 00 00 00       	jmp    18a46 <bitmap_set_bit+0xea>
        if (bit) {
   189b4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   189b8:	74 42                	je     189fc <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   189ba:	8b 45 08             	mov    0x8(%ebp),%eax
   189bd:	8b 48 04             	mov    0x4(%eax),%ecx
   189c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   189c3:	8d 50 07             	lea    0x7(%eax),%edx
   189c6:	85 c0                	test   %eax,%eax
   189c8:	0f 48 c2             	cmovs  %edx,%eax
   189cb:	c1 f8 03             	sar    $0x3,%eax
   189ce:	89 c2                	mov    %eax,%edx
   189d0:	89 d0                	mov    %edx,%eax
   189d2:	01 c8                	add    %ecx,%eax
   189d4:	0f b6 00             	movzbl (%eax),%eax
   189d7:	89 c6                	mov    %eax,%esi
   189d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   189dc:	83 e0 07             	and    $0x7,%eax
   189df:	bb 01 00 00 00       	mov    $0x1,%ebx
   189e4:	89 c1                	mov    %eax,%ecx
   189e6:	d3 e3                	shl    %cl,%ebx
   189e8:	89 d8                	mov    %ebx,%eax
   189ea:	89 f1                	mov    %esi,%ecx
   189ec:	09 c1                	or     %eax,%ecx
   189ee:	8b 45 08             	mov    0x8(%ebp),%eax
   189f1:	8b 40 04             	mov    0x4(%eax),%eax
   189f4:	01 d0                	add    %edx,%eax
   189f6:	89 ca                	mov    %ecx,%edx
   189f8:	88 10                	mov    %dl,(%eax)
   189fa:	eb 42                	jmp    18a3e <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   189fc:	8b 45 08             	mov    0x8(%ebp),%eax
   189ff:	8b 48 04             	mov    0x4(%eax),%ecx
   18a02:	8b 45 0c             	mov    0xc(%ebp),%eax
   18a05:	8d 50 07             	lea    0x7(%eax),%edx
   18a08:	85 c0                	test   %eax,%eax
   18a0a:	0f 48 c2             	cmovs  %edx,%eax
   18a0d:	c1 f8 03             	sar    $0x3,%eax
   18a10:	89 c2                	mov    %eax,%edx
   18a12:	89 d0                	mov    %edx,%eax
   18a14:	01 c8                	add    %ecx,%eax
   18a16:	0f b6 00             	movzbl (%eax),%eax
   18a19:	89 c6                	mov    %eax,%esi
   18a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   18a1e:	83 e0 07             	and    $0x7,%eax
   18a21:	bb 01 00 00 00       	mov    $0x1,%ebx
   18a26:	89 c1                	mov    %eax,%ecx
   18a28:	d3 e3                	shl    %cl,%ebx
   18a2a:	89 d8                	mov    %ebx,%eax
   18a2c:	f7 d0                	not    %eax
   18a2e:	89 f1                	mov    %esi,%ecx
   18a30:	21 c1                	and    %eax,%ecx
   18a32:	8b 45 08             	mov    0x8(%ebp),%eax
   18a35:	8b 40 04             	mov    0x4(%eax),%eax
   18a38:	01 d0                	add    %edx,%eax
   18a3a:	89 ca                	mov    %ecx,%edx
   18a3c:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   18a3e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18a42:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   18a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18a49:	3b 45 10             	cmp    0x10(%ebp),%eax
   18a4c:	7d 0e                	jge    18a5c <bitmap_set_bit+0x100>
   18a4e:	8b 45 08             	mov    0x8(%ebp),%eax
   18a51:	8b 00                	mov    (%eax),%eax
   18a53:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18a56:	0f 8c 58 ff ff ff    	jl     189b4 <bitmap_set_bit+0x58>
        }
    }
}
   18a5c:	90                   	nop
   18a5d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   18a60:	5b                   	pop    %ebx
   18a61:	5e                   	pop    %esi
   18a62:	5d                   	pop    %ebp
   18a63:	c3                   	ret    

00018a64 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   18a64:	55                   	push   %ebp
   18a65:	89 e5                	mov    %esp,%ebp
   18a67:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   18a6a:	83 ec 08             	sub    $0x8,%esp
   18a6d:	ff 75 0c             	push   0xc(%ebp)
   18a70:	ff 75 08             	push   0x8(%ebp)
   18a73:	e8 6c fe ff ff       	call   188e4 <bitmap_get_bit>
   18a78:	83 c4 10             	add    $0x10,%esp
   18a7b:	84 c0                	test   %al,%al
   18a7d:	0f 95 c0             	setne  %al
   18a80:	0f b6 c0             	movzbl %al,%eax
}
   18a83:	c9                   	leave  
   18a84:	c3                   	ret    

00018a85 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   18a85:	55                   	push   %ebp
   18a86:	89 e5                	mov    %esp,%ebp
   18a88:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   18a8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18a8f:	75 19                	jne    18aaa <bitmap_alloc_nbits+0x25>
   18a91:	68 ac ad 01 00       	push   $0x1adac
   18a96:	68 6c ae 01 00       	push   $0x1ae6c
   18a9b:	6a 68                	push   $0x68
   18a9d:	68 c4 ad 01 00       	push   $0x1adc4
   18aa2:	e8 5d fd ff ff       	call   18804 <pannic>
   18aa7:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   18aaa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18aae:	79 19                	jns    18ac9 <bitmap_alloc_nbits+0x44>
   18ab0:	68 34 ae 01 00       	push   $0x1ae34
   18ab5:	68 6c ae 01 00       	push   $0x1ae6c
   18aba:	6a 69                	push   $0x69
   18abc:	68 c4 ad 01 00       	push   $0x1adc4
   18ac1:	e8 3e fd ff ff       	call   18804 <pannic>
   18ac6:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   18ac9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   18ad0:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   18ad7:	e9 95 00 00 00       	jmp    18b71 <bitmap_alloc_nbits+0xec>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   18adc:	83 ec 08             	sub    $0x8,%esp
   18adf:	ff 75 f4             	push   -0xc(%ebp)
   18ae2:	ff 75 08             	push   0x8(%ebp)
   18ae5:	e8 fa fd ff ff       	call   188e4 <bitmap_get_bit>
   18aea:	83 c4 10             	add    $0x10,%esp
   18aed:	0f b6 c0             	movzbl %al,%eax
   18af0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18af3:	74 06                	je     18afb <bitmap_alloc_nbits+0x76>
            search_index++;
   18af5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   18af9:	eb 76                	jmp    18b71 <bitmap_alloc_nbits+0xec>
        }

        //记录可分配空间的起始索引
        ok_index = search_index++;
   18afb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18afe:	8d 50 01             	lea    0x1(%eax),%edx
   18b01:	89 55 f4             	mov    %edx,-0xc(%ebp)
   18b04:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   18b07:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   18b0e:	eb 2d                	jmp    18b3d <bitmap_alloc_nbits+0xb8>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   18b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18b13:	8d 50 01             	lea    0x1(%eax),%edx
   18b16:	89 55 f4             	mov    %edx,-0xc(%ebp)
   18b19:	83 ec 08             	sub    $0x8,%esp
   18b1c:	50                   	push   %eax
   18b1d:	ff 75 08             	push   0x8(%ebp)
   18b20:	e8 bf fd ff ff       	call   188e4 <bitmap_get_bit>
   18b25:	83 c4 10             	add    $0x10,%esp
   18b28:	0f b6 c0             	movzbl %al,%eax
   18b2b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18b2e:	74 09                	je     18b39 <bitmap_alloc_nbits+0xb4>
                ok_index = -1;
   18b30:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   18b37:	eb 16                	jmp    18b4f <bitmap_alloc_nbits+0xca>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   18b39:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   18b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18b40:	3b 45 10             	cmp    0x10(%ebp),%eax
   18b43:	7d 0a                	jge    18b4f <bitmap_alloc_nbits+0xca>
   18b45:	8b 45 08             	mov    0x8(%ebp),%eax
   18b48:	8b 00                	mov    (%eax),%eax
   18b4a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   18b4d:	7c c1                	jl     18b10 <bitmap_alloc_nbits+0x8b>
            }
        }

        if (ok_index != -1) {//分配成功
   18b4f:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   18b53:	74 1c                	je     18b71 <bitmap_alloc_nbits+0xec>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   18b55:	8b 45 0c             	mov    0xc(%ebp),%eax
   18b58:	f7 d0                	not    %eax
   18b5a:	50                   	push   %eax
   18b5b:	ff 75 10             	push   0x10(%ebp)
   18b5e:	ff 75 f0             	push   -0x10(%ebp)
   18b61:	ff 75 08             	push   0x8(%ebp)
   18b64:	e8 f3 fd ff ff       	call   1895c <bitmap_set_bit>
   18b69:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   18b6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18b6f:	eb 13                	jmp    18b84 <bitmap_alloc_nbits+0xff>
    while (search_index < bitmap->bit_count) {
   18b71:	8b 45 08             	mov    0x8(%ebp),%eax
   18b74:	8b 00                	mov    (%eax),%eax
   18b76:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   18b79:	0f 8c 5d ff ff ff    	jl     18adc <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   18b7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   18b84:	c9                   	leave  
   18b85:	c3                   	ret    

00018b86 <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   18b86:	55                   	push   %ebp
   18b87:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   18b89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18b8d:	74 3b                	je     18bca <kernel_strcpy+0x44>
   18b8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18b93:	74 35                	je     18bca <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   18b95:	eb 17                	jmp    18bae <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   18b97:	8b 55 0c             	mov    0xc(%ebp),%edx
   18b9a:	8d 42 01             	lea    0x1(%edx),%eax
   18b9d:	89 45 0c             	mov    %eax,0xc(%ebp)
   18ba0:	8b 45 08             	mov    0x8(%ebp),%eax
   18ba3:	8d 48 01             	lea    0x1(%eax),%ecx
   18ba6:	89 4d 08             	mov    %ecx,0x8(%ebp)
   18ba9:	0f b6 12             	movzbl (%edx),%edx
   18bac:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   18bae:	8b 45 08             	mov    0x8(%ebp),%eax
   18bb1:	0f b6 00             	movzbl (%eax),%eax
   18bb4:	84 c0                	test   %al,%al
   18bb6:	74 0a                	je     18bc2 <kernel_strcpy+0x3c>
   18bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bbb:	0f b6 00             	movzbl (%eax),%eax
   18bbe:	84 c0                	test   %al,%al
   18bc0:	75 d5                	jne    18b97 <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   18bc2:	8b 45 08             	mov    0x8(%ebp),%eax
   18bc5:	c6 00 00             	movb   $0x0,(%eax)
   18bc8:	eb 01                	jmp    18bcb <kernel_strcpy+0x45>
  if (!dest || !src) return;
   18bca:	90                   	nop
}
   18bcb:	5d                   	pop    %ebp
   18bcc:	c3                   	ret    

00018bcd <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   18bcd:	55                   	push   %ebp
   18bce:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   18bd0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18bd4:	74 45                	je     18c1b <kernel_strncpy+0x4e>
   18bd6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18bda:	74 3f                	je     18c1b <kernel_strncpy+0x4e>
   18bdc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18be0:	74 39                	je     18c1b <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   18be2:	eb 17                	jmp    18bfb <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   18be4:	8b 55 0c             	mov    0xc(%ebp),%edx
   18be7:	8d 42 01             	lea    0x1(%edx),%eax
   18bea:	89 45 0c             	mov    %eax,0xc(%ebp)
   18bed:	8b 45 08             	mov    0x8(%ebp),%eax
   18bf0:	8d 48 01             	lea    0x1(%eax),%ecx
   18bf3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   18bf6:	0f b6 12             	movzbl (%edx),%edx
   18bf9:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   18bfb:	8b 45 10             	mov    0x10(%ebp),%eax
   18bfe:	8d 50 ff             	lea    -0x1(%eax),%edx
   18c01:	89 55 10             	mov    %edx,0x10(%ebp)
   18c04:	83 f8 01             	cmp    $0x1,%eax
   18c07:	7e 0a                	jle    18c13 <kernel_strncpy+0x46>
   18c09:	8b 45 0c             	mov    0xc(%ebp),%eax
   18c0c:	0f b6 00             	movzbl (%eax),%eax
   18c0f:	84 c0                	test   %al,%al
   18c11:	75 d1                	jne    18be4 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   18c13:	8b 45 08             	mov    0x8(%ebp),%eax
   18c16:	c6 00 00             	movb   $0x0,(%eax)
   18c19:	eb 01                	jmp    18c1c <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   18c1b:	90                   	nop
}
   18c1c:	5d                   	pop    %ebp
   18c1d:	c3                   	ret    

00018c1e <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   18c1e:	55                   	push   %ebp
   18c1f:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   18c21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18c25:	74 06                	je     18c2d <kernel_strncmp+0xf>
   18c27:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18c2b:	75 0f                	jne    18c3c <kernel_strncmp+0x1e>
   18c2d:	b8 00 00 00 00       	mov    $0x0,%eax
   18c32:	eb 69                	jmp    18c9d <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   18c34:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   18c38:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   18c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   18c3f:	0f b6 00             	movzbl (%eax),%eax
   18c42:	84 c0                	test   %al,%al
   18c44:	74 24                	je     18c6a <kernel_strncmp+0x4c>
   18c46:	8b 45 0c             	mov    0xc(%ebp),%eax
   18c49:	0f b6 00             	movzbl (%eax),%eax
   18c4c:	84 c0                	test   %al,%al
   18c4e:	74 1a                	je     18c6a <kernel_strncmp+0x4c>
   18c50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   18c54:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18c58:	74 10                	je     18c6a <kernel_strncmp+0x4c>
   18c5a:	8b 45 08             	mov    0x8(%ebp),%eax
   18c5d:	0f b6 10             	movzbl (%eax),%edx
   18c60:	8b 45 0c             	mov    0xc(%ebp),%eax
   18c63:	0f b6 00             	movzbl (%eax),%eax
   18c66:	38 c2                	cmp    %al,%dl
   18c68:	74 ca                	je     18c34 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   18c6a:	8b 45 08             	mov    0x8(%ebp),%eax
   18c6d:	0f b6 10             	movzbl (%eax),%edx
   18c70:	8b 45 0c             	mov    0xc(%ebp),%eax
   18c73:	0f b6 00             	movzbl (%eax),%eax
   18c76:	38 c2                	cmp    %al,%dl
   18c78:	7e 07                	jle    18c81 <kernel_strncmp+0x63>
    return 1;
   18c7a:	b8 01 00 00 00       	mov    $0x1,%eax
   18c7f:	eb 1c                	jmp    18c9d <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   18c81:	8b 45 08             	mov    0x8(%ebp),%eax
   18c84:	0f b6 10             	movzbl (%eax),%edx
   18c87:	8b 45 0c             	mov    0xc(%ebp),%eax
   18c8a:	0f b6 00             	movzbl (%eax),%eax
   18c8d:	38 c2                	cmp    %al,%dl
   18c8f:	7d 07                	jge    18c98 <kernel_strncmp+0x7a>
    return -1;
   18c91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18c96:	eb 05                	jmp    18c9d <kernel_strncmp+0x7f>
  } else {
    return 0;
   18c98:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   18c9d:	5d                   	pop    %ebp
   18c9e:	c3                   	ret    

00018c9f <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   18c9f:	55                   	push   %ebp
   18ca0:	89 e5                	mov    %esp,%ebp
   18ca2:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   18ca5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18ca9:	75 07                	jne    18cb2 <kernel_strlen+0x13>
   18cab:	b8 00 00 00 00       	mov    $0x0,%eax
   18cb0:	eb 20                	jmp    18cd2 <kernel_strlen+0x33>

  int len = 0;
   18cb2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   18cb9:	eb 04                	jmp    18cbf <kernel_strlen+0x20>
   18cbb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   18cbf:	8b 45 08             	mov    0x8(%ebp),%eax
   18cc2:	8d 50 01             	lea    0x1(%eax),%edx
   18cc5:	89 55 08             	mov    %edx,0x8(%ebp)
   18cc8:	0f b6 00             	movzbl (%eax),%eax
   18ccb:	84 c0                	test   %al,%al
   18ccd:	75 ec                	jne    18cbb <kernel_strlen+0x1c>

  return len;
   18ccf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18cd2:	c9                   	leave  
   18cd3:	c3                   	ret    

00018cd4 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   18cd4:	55                   	push   %ebp
   18cd5:	89 e5                	mov    %esp,%ebp
   18cd7:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   18cda:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18cde:	74 40                	je     18d20 <kernel_memcpy+0x4c>
   18ce0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18ce4:	74 3a                	je     18d20 <kernel_memcpy+0x4c>
   18ce6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18cea:	74 34                	je     18d20 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   18cec:	8b 45 08             	mov    0x8(%ebp),%eax
   18cef:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   18cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
   18cf5:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   18cf8:	eb 17                	jmp    18d11 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   18cfa:	8b 55 f8             	mov    -0x8(%ebp),%edx
   18cfd:	8d 42 01             	lea    0x1(%edx),%eax
   18d00:	89 45 f8             	mov    %eax,-0x8(%ebp)
   18d03:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18d06:	8d 48 01             	lea    0x1(%eax),%ecx
   18d09:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   18d0c:	0f b6 12             	movzbl (%edx),%edx
   18d0f:	88 10                	mov    %dl,(%eax)
  while (size--) {
   18d11:	8b 45 10             	mov    0x10(%ebp),%eax
   18d14:	8d 50 ff             	lea    -0x1(%eax),%edx
   18d17:	89 55 10             	mov    %edx,0x10(%ebp)
   18d1a:	85 c0                	test   %eax,%eax
   18d1c:	75 dc                	jne    18cfa <kernel_memcpy+0x26>
   18d1e:	eb 01                	jmp    18d21 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   18d20:	90                   	nop
  }
}
   18d21:	c9                   	leave  
   18d22:	c3                   	ret    

00018d23 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   18d23:	55                   	push   %ebp
   18d24:	89 e5                	mov    %esp,%ebp
   18d26:	83 ec 14             	sub    $0x14,%esp
   18d29:	8b 45 0c             	mov    0xc(%ebp),%eax
   18d2c:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   18d2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18d33:	74 2c                	je     18d61 <kernel_memset+0x3e>
   18d35:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18d39:	74 26                	je     18d61 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   18d3b:	8b 45 08             	mov    0x8(%ebp),%eax
   18d3e:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   18d41:	eb 0f                	jmp    18d52 <kernel_memset+0x2f>
    *(d++) = v;
   18d43:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18d46:	8d 50 01             	lea    0x1(%eax),%edx
   18d49:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18d4c:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   18d50:	88 10                	mov    %dl,(%eax)
  while (size--) {
   18d52:	8b 45 10             	mov    0x10(%ebp),%eax
   18d55:	8d 50 ff             	lea    -0x1(%eax),%edx
   18d58:	89 55 10             	mov    %edx,0x10(%ebp)
   18d5b:	85 c0                	test   %eax,%eax
   18d5d:	75 e4                	jne    18d43 <kernel_memset+0x20>
   18d5f:	eb 01                	jmp    18d62 <kernel_memset+0x3f>
  if (!dest || !size) return;
   18d61:	90                   	nop
  }
}
   18d62:	c9                   	leave  
   18d63:	c3                   	ret    

00018d64 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   18d64:	55                   	push   %ebp
   18d65:	89 e5                	mov    %esp,%ebp
   18d67:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   18d6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18d6e:	74 0c                	je     18d7c <kernel_memcmp+0x18>
   18d70:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18d74:	74 06                	je     18d7c <kernel_memcmp+0x18>
   18d76:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18d7a:	75 07                	jne    18d83 <kernel_memcmp+0x1f>
   18d7c:	b8 00 00 00 00       	mov    $0x0,%eax
   18d81:	eb 63                	jmp    18de6 <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   18d83:	8b 45 08             	mov    0x8(%ebp),%eax
   18d86:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   18d89:	8b 45 0c             	mov    0xc(%ebp),%eax
   18d8c:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   18d8f:	eb 08                	jmp    18d99 <kernel_memcmp+0x35>
    d1++;
   18d91:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   18d95:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   18d99:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   18d9d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18da1:	74 10                	je     18db3 <kernel_memcmp+0x4f>
   18da3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18da6:	0f b6 10             	movzbl (%eax),%edx
   18da9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18dac:	0f b6 00             	movzbl (%eax),%eax
   18daf:	38 c2                	cmp    %al,%dl
   18db1:	74 de                	je     18d91 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   18db3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18db6:	0f b6 10             	movzbl (%eax),%edx
   18db9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18dbc:	0f b6 00             	movzbl (%eax),%eax
   18dbf:	38 c2                	cmp    %al,%dl
   18dc1:	76 07                	jbe    18dca <kernel_memcmp+0x66>
    return 1;
   18dc3:	b8 01 00 00 00       	mov    $0x1,%eax
   18dc8:	eb 1c                	jmp    18de6 <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   18dca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18dcd:	0f b6 10             	movzbl (%eax),%edx
   18dd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18dd3:	0f b6 00             	movzbl (%eax),%eax
   18dd6:	38 c2                	cmp    %al,%dl
   18dd8:	73 07                	jae    18de1 <kernel_memcmp+0x7d>
    return -1;
   18dda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18ddf:	eb 05                	jmp    18de6 <kernel_memcmp+0x82>
  else
    return 0;
   18de1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18de6:	c9                   	leave  
   18de7:	c3                   	ret    

00018de8 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   18de8:	55                   	push   %ebp
   18de9:	89 e5                	mov    %esp,%ebp
   18deb:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   18dee:	8d 45 10             	lea    0x10(%ebp),%eax
   18df1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   18df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18df7:	83 ec 04             	sub    $0x4,%esp
   18dfa:	50                   	push   %eax
   18dfb:	ff 75 0c             	push   0xc(%ebp)
   18dfe:	ff 75 08             	push   0x8(%ebp)
   18e01:	e8 06 00 00 00       	call   18e0c <kernel_vsprintf>
   18e06:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   18e09:	90                   	nop
   18e0a:	c9                   	leave  
   18e0b:	c3                   	ret    

00018e0c <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   18e0c:	55                   	push   %ebp
   18e0d:	89 e5                	mov    %esp,%ebp
   18e0f:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   18e12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   18e19:	8b 45 08             	mov    0x8(%ebp),%eax
   18e1c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   18e1f:	e9 68 01 00 00       	jmp    18f8c <kernel_vsprintf+0x180>
    switch (state) {
   18e24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18e28:	74 0b                	je     18e35 <kernel_vsprintf+0x29>
   18e2a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   18e2e:	74 2b                	je     18e5b <kernel_vsprintf+0x4f>
   18e30:	e9 56 01 00 00       	jmp    18f8b <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   18e35:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   18e39:	75 0c                	jne    18e47 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   18e3b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   18e42:	e9 45 01 00 00       	jmp    18f8c <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   18e47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18e4a:	8d 50 01             	lea    0x1(%eax),%edx
   18e4d:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18e50:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   18e54:	88 10                	mov    %dl,(%eax)
        break;
   18e56:	e9 31 01 00 00       	jmp    18f8c <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   18e5b:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   18e5f:	75 47                	jne    18ea8 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   18e61:	8b 45 10             	mov    0x10(%ebp),%eax
   18e64:	8d 50 04             	lea    0x4(%eax),%edx
   18e67:	89 55 10             	mov    %edx,0x10(%ebp)
   18e6a:	8b 00                	mov    (%eax),%eax
   18e6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   18e6f:	ff 75 ec             	push   -0x14(%ebp)
   18e72:	e8 28 fe ff ff       	call   18c9f <kernel_strlen>
   18e77:	83 c4 04             	add    $0x4,%esp
   18e7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   18e7d:	eb 17                	jmp    18e96 <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   18e7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   18e82:	8d 42 01             	lea    0x1(%edx),%eax
   18e85:	89 45 ec             	mov    %eax,-0x14(%ebp)
   18e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18e8b:	8d 48 01             	lea    0x1(%eax),%ecx
   18e8e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   18e91:	0f b6 12             	movzbl (%edx),%edx
   18e94:	88 10                	mov    %dl,(%eax)
          while (len--) {
   18e96:	8b 45 e8             	mov    -0x18(%ebp),%eax
   18e99:	8d 50 ff             	lea    -0x1(%eax),%edx
   18e9c:	89 55 e8             	mov    %edx,-0x18(%ebp)
   18e9f:	85 c0                	test   %eax,%eax
   18ea1:	75 dc                	jne    18e7f <kernel_vsprintf+0x73>
   18ea3:	e9 da 00 00 00       	jmp    18f82 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   18ea8:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   18eac:	75 37                	jne    18ee5 <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   18eae:	8b 45 10             	mov    0x10(%ebp),%eax
   18eb1:	8d 50 04             	lea    0x4(%eax),%edx
   18eb4:	89 55 10             	mov    %edx,0x10(%ebp)
   18eb7:	8b 00                	mov    (%eax),%eax
   18eb9:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   18ebc:	83 ec 04             	sub    $0x4,%esp
   18ebf:	6a 0a                	push   $0xa
   18ec1:	ff 75 d8             	push   -0x28(%ebp)
   18ec4:	ff 75 f0             	push   -0x10(%ebp)
   18ec7:	e8 dd 00 00 00       	call   18fa9 <kernel_itoa>
   18ecc:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18ecf:	83 ec 0c             	sub    $0xc,%esp
   18ed2:	ff 75 f0             	push   -0x10(%ebp)
   18ed5:	e8 c5 fd ff ff       	call   18c9f <kernel_strlen>
   18eda:	83 c4 10             	add    $0x10,%esp
   18edd:	01 45 f0             	add    %eax,-0x10(%ebp)
   18ee0:	e9 9d 00 00 00       	jmp    18f82 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   18ee5:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   18ee9:	74 06                	je     18ef1 <kernel_vsprintf+0xe5>
   18eeb:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   18eef:	75 34                	jne    18f25 <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   18ef1:	8b 45 10             	mov    0x10(%ebp),%eax
   18ef4:	8d 50 04             	lea    0x4(%eax),%edx
   18ef7:	89 55 10             	mov    %edx,0x10(%ebp)
   18efa:	8b 00                	mov    (%eax),%eax
   18efc:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   18eff:	83 ec 04             	sub    $0x4,%esp
   18f02:	6a 10                	push   $0x10
   18f04:	ff 75 dc             	push   -0x24(%ebp)
   18f07:	ff 75 f0             	push   -0x10(%ebp)
   18f0a:	e8 9a 00 00 00       	call   18fa9 <kernel_itoa>
   18f0f:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18f12:	83 ec 0c             	sub    $0xc,%esp
   18f15:	ff 75 f0             	push   -0x10(%ebp)
   18f18:	e8 82 fd ff ff       	call   18c9f <kernel_strlen>
   18f1d:	83 c4 10             	add    $0x10,%esp
   18f20:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   18f23:	eb 5d                	jmp    18f82 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   18f25:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   18f29:	75 34                	jne    18f5f <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   18f2b:	8b 45 10             	mov    0x10(%ebp),%eax
   18f2e:	8d 50 04             	lea    0x4(%eax),%edx
   18f31:	89 55 10             	mov    %edx,0x10(%ebp)
   18f34:	8b 00                	mov    (%eax),%eax
   18f36:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   18f39:	83 ec 04             	sub    $0x4,%esp
   18f3c:	6a 02                	push   $0x2
   18f3e:	ff 75 e0             	push   -0x20(%ebp)
   18f41:	ff 75 f0             	push   -0x10(%ebp)
   18f44:	e8 60 00 00 00       	call   18fa9 <kernel_itoa>
   18f49:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18f4c:	83 ec 0c             	sub    $0xc,%esp
   18f4f:	ff 75 f0             	push   -0x10(%ebp)
   18f52:	e8 48 fd ff ff       	call   18c9f <kernel_strlen>
   18f57:	83 c4 10             	add    $0x10,%esp
   18f5a:	01 45 f0             	add    %eax,-0x10(%ebp)
   18f5d:	eb 23                	jmp    18f82 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   18f5f:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   18f63:	75 1d                	jne    18f82 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   18f65:	8b 45 10             	mov    0x10(%ebp),%eax
   18f68:	8d 50 04             	lea    0x4(%eax),%edx
   18f6b:	89 55 10             	mov    %edx,0x10(%ebp)
   18f6e:	8b 00                	mov    (%eax),%eax
   18f70:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   18f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18f76:	8d 50 01             	lea    0x1(%eax),%edx
   18f79:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18f7c:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   18f80:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   18f82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   18f89:	eb 01                	jmp    18f8c <kernel_vsprintf+0x180>
      default:
        break;
   18f8b:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   18f8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   18f8f:	8d 50 01             	lea    0x1(%eax),%edx
   18f92:	89 55 0c             	mov    %edx,0xc(%ebp)
   18f95:	0f b6 00             	movzbl (%eax),%eax
   18f98:	88 45 e7             	mov    %al,-0x19(%ebp)
   18f9b:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   18f9f:	0f 85 7f fe ff ff    	jne    18e24 <kernel_vsprintf+0x18>
    }
  }
}
   18fa5:	90                   	nop
   18fa6:	90                   	nop
   18fa7:	c9                   	leave  
   18fa8:	c3                   	ret    

00018fa9 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   18fa9:	55                   	push   %ebp
   18faa:	89 e5                	mov    %esp,%ebp
   18fac:	53                   	push   %ebx
   18fad:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   18fb3:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   18fb7:	74 1d                	je     18fd6 <kernel_itoa+0x2d>
   18fb9:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   18fbd:	74 17                	je     18fd6 <kernel_itoa+0x2d>
   18fbf:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18fc3:	74 11                	je     18fd6 <kernel_itoa+0x2d>
   18fc5:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   18fc9:	74 0b                	je     18fd6 <kernel_itoa+0x2d>
    *buf = '\0';
   18fcb:	8b 45 08             	mov    0x8(%ebp),%eax
   18fce:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18fd1:	e9 f8 00 00 00       	jmp    190ce <kernel_itoa+0x125>
  }

  if (num == 0) {
   18fd6:	8b 45 0c             	mov    0xc(%ebp),%eax
   18fd9:	85 c0                	test   %eax,%eax
   18fdb:	75 17                	jne    18ff4 <kernel_itoa+0x4b>
    *(buf++) = '0';
   18fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   18fe0:	8d 50 01             	lea    0x1(%eax),%edx
   18fe3:	89 55 08             	mov    %edx,0x8(%ebp)
   18fe6:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   18fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   18fec:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18fef:	e9 da 00 00 00       	jmp    190ce <kernel_itoa+0x125>
  }

  char *p = buf;
   18ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   18ff7:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   18ffa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   19001:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   19005:	75 41                	jne    19048 <kernel_itoa+0x9f>
    u_num = num;
   19007:	8b 45 0c             	mov    0xc(%ebp),%eax
   1900a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   1900d:	8b 45 0c             	mov    0xc(%ebp),%eax
   19010:	85 c0                	test   %eax,%eax
   19012:	79 16                	jns    1902a <kernel_itoa+0x81>
      *(p++) = '-';
   19014:	8b 45 f8             	mov    -0x8(%ebp),%eax
   19017:	8d 50 01             	lea    0x1(%eax),%edx
   1901a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1901d:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   19020:	8b 45 0c             	mov    0xc(%ebp),%eax
   19023:	f7 d8                	neg    %eax
   19025:	89 45 f4             	mov    %eax,-0xc(%ebp)
   19028:	eb 26                	jmp    19050 <kernel_itoa+0xa7>
    } else if (num == 0) {
   1902a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1902d:	85 c0                	test   %eax,%eax
   1902f:	75 1f                	jne    19050 <kernel_itoa+0xa7>
      *(p++) = '0';
   19031:	8b 45 f8             	mov    -0x8(%ebp),%eax
   19034:	8d 50 01             	lea    0x1(%eax),%edx
   19037:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1903a:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   1903d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   19040:	c6 00 00             	movb   $0x0,(%eax)
      return;
   19043:	e9 86 00 00 00       	jmp    190ce <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   19048:	8d 45 0c             	lea    0xc(%ebp),%eax
   1904b:	8b 00                	mov    (%eax),%eax
   1904d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   19050:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   19057:	eb 3b                	jmp    19094 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   19059:	8b 1d 74 b1 01 00    	mov    0x1b174,%ebx
   1905f:	8b 4d 10             	mov    0x10(%ebp),%ecx
   19062:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19065:	ba 00 00 00 00       	mov    $0x0,%edx
   1906a:	f7 f1                	div    %ecx
   1906c:	89 d0                	mov    %edx,%eax
   1906e:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   19071:	8b 45 f0             	mov    -0x10(%ebp),%eax
   19074:	8d 50 01             	lea    0x1(%eax),%edx
   19077:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1907a:	0f b6 11             	movzbl (%ecx),%edx
   1907d:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   19084:	8b 5d 10             	mov    0x10(%ebp),%ebx
   19087:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1908a:	ba 00 00 00 00       	mov    $0x0,%edx
   1908f:	f7 f3                	div    %ebx
   19091:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   19094:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   19098:	75 bf                	jne    19059 <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   1909a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1909d:	83 e8 01             	sub    $0x1,%eax
   190a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
   190a3:	eb 1d                	jmp    190c2 <kernel_itoa+0x119>
    *(p++) = arr[i];
   190a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   190a8:	8d 50 01             	lea    0x1(%eax),%edx
   190ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
   190ae:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   190b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   190b7:	01 ca                	add    %ecx,%edx
   190b9:	0f b6 12             	movzbl (%edx),%edx
   190bc:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   190be:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   190c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   190c6:	79 dd                	jns    190a5 <kernel_itoa+0xfc>
  }
  *p = '\0';
   190c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   190cb:	c6 00 00             	movb   $0x0,(%eax)
}
   190ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   190d1:	c9                   	leave  
   190d2:	c3                   	ret    

000190d3 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   190d3:	55                   	push   %ebp
   190d4:	89 e5                	mov    %esp,%ebp
   190d6:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   190d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   190e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   190e4:	74 15                	je     190fb <strings_count+0x28>
    while (*(strs++)) {
   190e6:	eb 04                	jmp    190ec <strings_count+0x19>
      count++;
   190e8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   190ec:	8b 45 08             	mov    0x8(%ebp),%eax
   190ef:	8d 50 04             	lea    0x4(%eax),%edx
   190f2:	89 55 08             	mov    %edx,0x8(%ebp)
   190f5:	8b 00                	mov    (%eax),%eax
   190f7:	85 c0                	test   %eax,%eax
   190f9:	75 ed                	jne    190e8 <strings_count+0x15>
    }
  }

  return count;
   190fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   190fe:	c9                   	leave  
   190ff:	c3                   	ret    

00019100 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   19100:	55                   	push   %ebp
   19101:	89 e5                	mov    %esp,%ebp
   19103:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   19106:	8b 45 08             	mov    0x8(%ebp),%eax
   19109:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   1910c:	eb 04                	jmp    19112 <get_file_name+0x12>
    s++;
   1910e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   19112:	8b 45 fc             	mov    -0x4(%ebp),%eax
   19115:	0f b6 00             	movzbl (%eax),%eax
   19118:	84 c0                	test   %al,%al
   1911a:	75 f2                	jne    1910e <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   1911c:	eb 04                	jmp    19122 <get_file_name+0x22>
    s--;
   1911e:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   19122:	8b 45 fc             	mov    -0x4(%ebp),%eax
   19125:	0f b6 00             	movzbl (%eax),%eax
   19128:	3c 2f                	cmp    $0x2f,%al
   1912a:	74 12                	je     1913e <get_file_name+0x3e>
   1912c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1912f:	0f b6 00             	movzbl (%eax),%eax
   19132:	3c 5c                	cmp    $0x5c,%al
   19134:	74 08                	je     1913e <get_file_name+0x3e>
   19136:	8b 45 fc             	mov    -0x4(%ebp),%eax
   19139:	3b 45 08             	cmp    0x8(%ebp),%eax
   1913c:	73 e0                	jae    1911e <get_file_name+0x1e>
  }

  return s + 1;
   1913e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   19141:	83 c0 01             	add    $0x1,%eax
   19144:	c9                   	leave  
   19145:	c3                   	ret    

00019146 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   19146:	55                   	push   %ebp
   19147:	89 e5                	mov    %esp,%ebp
   19149:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1914c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   19150:	75 19                	jne    1916b <list_is_empty+0x25>
   19152:	68 90 ae 01 00       	push   $0x1ae90
   19157:	68 74 af 01 00       	push   $0x1af74
   1915c:	6a 38                	push   $0x38
   1915e:	68 a4 ae 01 00       	push   $0x1aea4
   19163:	e8 9c f6 ff ff       	call   18804 <pannic>
   19168:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1916b:	8b 45 08             	mov    0x8(%ebp),%eax
   1916e:	8b 40 08             	mov    0x8(%eax),%eax
   19171:	85 c0                	test   %eax,%eax
   19173:	0f 94 c0             	sete   %al
   19176:	0f b6 c0             	movzbl %al,%eax
}
   19179:	c9                   	leave  
   1917a:	c3                   	ret    

0001917b <list_get_size>:
static inline int list_get_size(list_t *list) {
   1917b:	55                   	push   %ebp
   1917c:	89 e5                	mov    %esp,%ebp
   1917e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   19181:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   19185:	75 19                	jne    191a0 <list_get_size+0x25>
   19187:	68 90 ae 01 00       	push   $0x1ae90
   1918c:	68 ac af 01 00       	push   $0x1afac
   19191:	6a 3e                	push   $0x3e
   19193:	68 a4 ae 01 00       	push   $0x1aea4
   19198:	e8 67 f6 ff ff       	call   18804 <pannic>
   1919d:	83 c4 10             	add    $0x10,%esp
    return list->size;
   191a0:	8b 45 08             	mov    0x8(%ebp),%eax
   191a3:	8b 40 08             	mov    0x8(%eax),%eax
}
   191a6:	c9                   	leave  
   191a7:	c3                   	ret    

000191a8 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   191a8:	55                   	push   %ebp
   191a9:	89 e5                	mov    %esp,%ebp
   191ab:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   191ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   191b2:	74 06                	je     191ba <list_insert_first+0x12>
   191b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   191b8:	75 19                	jne    191d3 <list_insert_first+0x2b>
   191ba:	68 e4 ae 01 00       	push   $0x1aee4
   191bf:	68 60 af 01 00       	push   $0x1af60
   191c4:	6a 0f                	push   $0xf
   191c6:	68 14 af 01 00       	push   $0x1af14
   191cb:	e8 34 f6 ff ff       	call   18804 <pannic>
   191d0:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   191d3:	8b 45 08             	mov    0x8(%ebp),%eax
   191d6:	8b 10                	mov    (%eax),%edx
   191d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   191db:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   191de:	8b 45 0c             	mov    0xc(%ebp),%eax
   191e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   191e7:	83 ec 0c             	sub    $0xc,%esp
   191ea:	ff 75 08             	push   0x8(%ebp)
   191ed:	e8 54 ff ff ff       	call   19146 <list_is_empty>
   191f2:	83 c4 10             	add    $0x10,%esp
   191f5:	85 c0                	test   %eax,%eax
   191f7:	74 16                	je     1920f <list_insert_first+0x67>
        list->first = list->last = node;
   191f9:	8b 45 08             	mov    0x8(%ebp),%eax
   191fc:	8b 55 0c             	mov    0xc(%ebp),%edx
   191ff:	89 50 04             	mov    %edx,0x4(%eax)
   19202:	8b 45 08             	mov    0x8(%ebp),%eax
   19205:	8b 50 04             	mov    0x4(%eax),%edx
   19208:	8b 45 08             	mov    0x8(%ebp),%eax
   1920b:	89 10                	mov    %edx,(%eax)
   1920d:	eb 12                	jmp    19221 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1920f:	8b 45 08             	mov    0x8(%ebp),%eax
   19212:	8b 00                	mov    (%eax),%eax
   19214:	8b 55 0c             	mov    0xc(%ebp),%edx
   19217:	89 10                	mov    %edx,(%eax)
        list->first = node;
   19219:	8b 45 08             	mov    0x8(%ebp),%eax
   1921c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1921f:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   19221:	8b 45 08             	mov    0x8(%ebp),%eax
   19224:	8b 40 08             	mov    0x8(%eax),%eax
   19227:	8d 50 01             	lea    0x1(%eax),%edx
   1922a:	8b 45 08             	mov    0x8(%ebp),%eax
   1922d:	89 50 08             	mov    %edx,0x8(%eax)
}
   19230:	90                   	nop
   19231:	c9                   	leave  
   19232:	c3                   	ret    

00019233 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   19233:	55                   	push   %ebp
   19234:	89 e5                	mov    %esp,%ebp
   19236:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   19239:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1923d:	74 06                	je     19245 <list_insert_last+0x12>
   1923f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   19243:	75 19                	jne    1925e <list_insert_last+0x2b>
   19245:	68 e4 ae 01 00       	push   $0x1aee4
   1924a:	68 84 af 01 00       	push   $0x1af84
   1924f:	6a 21                	push   $0x21
   19251:	68 14 af 01 00       	push   $0x1af14
   19256:	e8 a9 f5 ff ff       	call   18804 <pannic>
   1925b:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   1925e:	8b 45 08             	mov    0x8(%ebp),%eax
   19261:	8b 50 04             	mov    0x4(%eax),%edx
   19264:	8b 45 0c             	mov    0xc(%ebp),%eax
   19267:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   19269:	8b 45 0c             	mov    0xc(%ebp),%eax
   1926c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   19273:	83 ec 0c             	sub    $0xc,%esp
   19276:	ff 75 08             	push   0x8(%ebp)
   19279:	e8 c8 fe ff ff       	call   19146 <list_is_empty>
   1927e:	83 c4 10             	add    $0x10,%esp
   19281:	85 c0                	test   %eax,%eax
   19283:	74 16                	je     1929b <list_insert_last+0x68>
        list->first = list->last = node;
   19285:	8b 45 08             	mov    0x8(%ebp),%eax
   19288:	8b 55 0c             	mov    0xc(%ebp),%edx
   1928b:	89 50 04             	mov    %edx,0x4(%eax)
   1928e:	8b 45 08             	mov    0x8(%ebp),%eax
   19291:	8b 50 04             	mov    0x4(%eax),%edx
   19294:	8b 45 08             	mov    0x8(%ebp),%eax
   19297:	89 10                	mov    %edx,(%eax)
   19299:	eb 15                	jmp    192b0 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   1929b:	8b 45 08             	mov    0x8(%ebp),%eax
   1929e:	8b 40 04             	mov    0x4(%eax),%eax
   192a1:	8b 55 0c             	mov    0xc(%ebp),%edx
   192a4:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   192a7:	8b 45 08             	mov    0x8(%ebp),%eax
   192aa:	8b 55 0c             	mov    0xc(%ebp),%edx
   192ad:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   192b0:	8b 45 08             	mov    0x8(%ebp),%eax
   192b3:	8b 40 08             	mov    0x8(%eax),%eax
   192b6:	8d 50 01             	lea    0x1(%eax),%edx
   192b9:	8b 45 08             	mov    0x8(%ebp),%eax
   192bc:	89 50 08             	mov    %edx,0x8(%eax)

}
   192bf:	90                   	nop
   192c0:	c9                   	leave  
   192c1:	c3                   	ret    

000192c2 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   192c2:	55                   	push   %ebp
   192c3:	89 e5                	mov    %esp,%ebp
   192c5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   192c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   192cc:	75 19                	jne    192e7 <list_remove_first+0x25>
   192ce:	68 4a af 01 00       	push   $0x1af4a
   192d3:	68 98 af 01 00       	push   $0x1af98
   192d8:	6a 34                	push   $0x34
   192da:	68 14 af 01 00       	push   $0x1af14
   192df:	e8 20 f5 ff ff       	call   18804 <pannic>
   192e4:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   192e7:	83 ec 0c             	sub    $0xc,%esp
   192ea:	ff 75 08             	push   0x8(%ebp)
   192ed:	e8 54 fe ff ff       	call   19146 <list_is_empty>
   192f2:	83 c4 10             	add    $0x10,%esp
   192f5:	85 c0                	test   %eax,%eax
   192f7:	74 07                	je     19300 <list_remove_first+0x3e>
        return (list_node_t*)0;
   192f9:	b8 00 00 00 00       	mov    $0x0,%eax
   192fe:	eb 71                	jmp    19371 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   19300:	8b 45 08             	mov    0x8(%ebp),%eax
   19303:	8b 00                	mov    (%eax),%eax
   19305:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   19308:	83 ec 0c             	sub    $0xc,%esp
   1930b:	ff 75 08             	push   0x8(%ebp)
   1930e:	e8 68 fe ff ff       	call   1917b <list_get_size>
   19313:	83 c4 10             	add    $0x10,%esp
   19316:	83 f8 01             	cmp    $0x1,%eax
   19319:	75 17                	jne    19332 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1931b:	8b 45 08             	mov    0x8(%ebp),%eax
   1931e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19325:	8b 45 08             	mov    0x8(%ebp),%eax
   19328:	8b 50 04             	mov    0x4(%eax),%edx
   1932b:	8b 45 08             	mov    0x8(%ebp),%eax
   1932e:	89 10                	mov    %edx,(%eax)
   19330:	eb 18                	jmp    1934a <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   19332:	8b 45 08             	mov    0x8(%ebp),%eax
   19335:	8b 00                	mov    (%eax),%eax
   19337:	8b 50 04             	mov    0x4(%eax),%edx
   1933a:	8b 45 08             	mov    0x8(%ebp),%eax
   1933d:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   1933f:	8b 45 08             	mov    0x8(%ebp),%eax
   19342:	8b 00                	mov    (%eax),%eax
   19344:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1934a:	8b 45 08             	mov    0x8(%ebp),%eax
   1934d:	8b 40 08             	mov    0x8(%eax),%eax
   19350:	8d 50 ff             	lea    -0x1(%eax),%edx
   19353:	8b 45 08             	mov    0x8(%ebp),%eax
   19356:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   19359:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1935c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19363:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19366:	8b 50 04             	mov    0x4(%eax),%edx
   19369:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1936c:	89 10                	mov    %edx,(%eax)
    return ret;
   1936e:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   19371:	c9                   	leave  
   19372:	c3                   	ret    

00019373 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   19373:	55                   	push   %ebp
   19374:	89 e5                	mov    %esp,%ebp
   19376:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   19379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1937d:	75 19                	jne    19398 <list_remove_last+0x25>
   1937f:	68 4a af 01 00       	push   $0x1af4a
   19384:	68 bc af 01 00       	push   $0x1afbc
   19389:	6a 4a                	push   $0x4a
   1938b:	68 14 af 01 00       	push   $0x1af14
   19390:	e8 6f f4 ff ff       	call   18804 <pannic>
   19395:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   19398:	83 ec 0c             	sub    $0xc,%esp
   1939b:	ff 75 08             	push   0x8(%ebp)
   1939e:	e8 a3 fd ff ff       	call   19146 <list_is_empty>
   193a3:	83 c4 10             	add    $0x10,%esp
   193a6:	85 c0                	test   %eax,%eax
   193a8:	74 07                	je     193b1 <list_remove_last+0x3e>
        return (list_node_t*)0;
   193aa:	b8 00 00 00 00       	mov    $0x0,%eax
   193af:	eb 75                	jmp    19426 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   193b1:	8b 45 08             	mov    0x8(%ebp),%eax
   193b4:	8b 40 04             	mov    0x4(%eax),%eax
   193b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   193ba:	83 ec 0c             	sub    $0xc,%esp
   193bd:	ff 75 08             	push   0x8(%ebp)
   193c0:	e8 b6 fd ff ff       	call   1917b <list_get_size>
   193c5:	83 c4 10             	add    $0x10,%esp
   193c8:	83 f8 01             	cmp    $0x1,%eax
   193cb:	75 17                	jne    193e4 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   193cd:	8b 45 08             	mov    0x8(%ebp),%eax
   193d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   193d7:	8b 45 08             	mov    0x8(%ebp),%eax
   193da:	8b 50 04             	mov    0x4(%eax),%edx
   193dd:	8b 45 08             	mov    0x8(%ebp),%eax
   193e0:	89 10                	mov    %edx,(%eax)
   193e2:	eb 1b                	jmp    193ff <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   193e4:	8b 45 08             	mov    0x8(%ebp),%eax
   193e7:	8b 40 04             	mov    0x4(%eax),%eax
   193ea:	8b 10                	mov    (%eax),%edx
   193ec:	8b 45 08             	mov    0x8(%ebp),%eax
   193ef:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   193f2:	8b 45 08             	mov    0x8(%ebp),%eax
   193f5:	8b 40 04             	mov    0x4(%eax),%eax
   193f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   193ff:	8b 45 08             	mov    0x8(%ebp),%eax
   19402:	8b 40 08             	mov    0x8(%eax),%eax
   19405:	8d 50 ff             	lea    -0x1(%eax),%edx
   19408:	8b 45 08             	mov    0x8(%ebp),%eax
   1940b:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1940e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19411:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19418:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1941b:	8b 50 04             	mov    0x4(%eax),%edx
   1941e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19421:	89 10                	mov    %edx,(%eax)
    return ret;
   19423:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   19426:	c9                   	leave  
   19427:	c3                   	ret    

00019428 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   19428:	55                   	push   %ebp
   19429:	89 e5                	mov    %esp,%ebp
   1942b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1942e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   19432:	74 06                	je     1943a <list_remove+0x12>
   19434:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   19438:	75 19                	jne    19453 <list_remove+0x2b>
   1943a:	68 e4 ae 01 00       	push   $0x1aee4
   1943f:	68 d0 af 01 00       	push   $0x1afd0
   19444:	6a 60                	push   $0x60
   19446:	68 14 af 01 00       	push   $0x1af14
   1944b:	e8 b4 f3 ff ff       	call   18804 <pannic>
   19450:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   19453:	83 ec 0c             	sub    $0xc,%esp
   19456:	ff 75 08             	push   0x8(%ebp)
   19459:	e8 e8 fc ff ff       	call   19146 <list_is_empty>
   1945e:	83 c4 10             	add    $0x10,%esp
   19461:	85 c0                	test   %eax,%eax
   19463:	74 0a                	je     1946f <list_remove+0x47>
        return (list_node_t*)0;
   19465:	b8 00 00 00 00       	mov    $0x0,%eax
   1946a:	e9 80 00 00 00       	jmp    194ef <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   1946f:	8b 45 08             	mov    0x8(%ebp),%eax
   19472:	8b 00                	mov    (%eax),%eax
   19474:	39 45 0c             	cmp    %eax,0xc(%ebp)
   19477:	75 0b                	jne    19484 <list_remove+0x5c>
   19479:	8b 45 0c             	mov    0xc(%ebp),%eax
   1947c:	8b 50 04             	mov    0x4(%eax),%edx
   1947f:	8b 45 08             	mov    0x8(%ebp),%eax
   19482:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   19484:	8b 45 08             	mov    0x8(%ebp),%eax
   19487:	8b 40 04             	mov    0x4(%eax),%eax
   1948a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1948d:	75 0b                	jne    1949a <list_remove+0x72>
   1948f:	8b 45 0c             	mov    0xc(%ebp),%eax
   19492:	8b 10                	mov    (%eax),%edx
   19494:	8b 45 08             	mov    0x8(%ebp),%eax
   19497:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   1949a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1949d:	8b 00                	mov    (%eax),%eax
   1949f:	85 c0                	test   %eax,%eax
   194a1:	74 0e                	je     194b1 <list_remove+0x89>
   194a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   194a6:	8b 00                	mov    (%eax),%eax
   194a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   194ab:	8b 52 04             	mov    0x4(%edx),%edx
   194ae:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   194b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   194b4:	8b 40 04             	mov    0x4(%eax),%eax
   194b7:	85 c0                	test   %eax,%eax
   194b9:	74 0d                	je     194c8 <list_remove+0xa0>
   194bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   194be:	8b 40 04             	mov    0x4(%eax),%eax
   194c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   194c4:	8b 12                	mov    (%edx),%edx
   194c6:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   194c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   194cb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   194d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   194d5:	8b 50 04             	mov    0x4(%eax),%edx
   194d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   194db:	89 10                	mov    %edx,(%eax)
    list->size--;
   194dd:	8b 45 08             	mov    0x8(%ebp),%eax
   194e0:	8b 40 08             	mov    0x8(%eax),%eax
   194e3:	8d 50 ff             	lea    -0x1(%eax),%edx
   194e6:	8b 45 08             	mov    0x8(%ebp),%eax
   194e9:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   194ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   194ef:	c9                   	leave  
   194f0:	c3                   	ret    

000194f1 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   194f1:	55                   	push   %ebp
   194f2:	89 e5                	mov    %esp,%ebp
   194f4:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   194f7:	83 ec 0c             	sub    $0xc,%esp
   194fa:	68 30 70 07 00       	push   $0x77030
   194ff:	e8 88 eb ff ff       	call   1808c <mutex_init>
   19504:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   19507:	83 ec 04             	sub    $0x4,%esp
   1950a:	6a 00                	push   $0x0
   1950c:	6a 00                	push   $0x0
   1950e:	6a 01                	push   $0x1
   19510:	e8 16 ac ff ff       	call   1412b <dev_open>
   19515:	83 c4 10             	add    $0x10,%esp
   19518:	a3 44 70 07 00       	mov    %eax,0x77044
}
   1951d:	90                   	nop
   1951e:	c9                   	leave  
   1951f:	c3                   	ret    

00019520 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   19520:	55                   	push   %ebp
   19521:	89 e5                	mov    %esp,%ebp
   19523:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   19529:	83 ec 04             	sub    $0x4,%esp
   1952c:	68 80 00 00 00       	push   $0x80
   19531:	6a 00                	push   $0x0
   19533:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   19539:	50                   	push   %eax
   1953a:	e8 e4 f7 ff ff       	call   18d23 <kernel_memset>
   1953f:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   19542:	8d 45 0c             	lea    0xc(%ebp),%eax
   19545:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1954b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   19551:	83 ec 04             	sub    $0x4,%esp
   19554:	50                   	push   %eax
   19555:	ff 75 08             	push   0x8(%ebp)
   19558:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1955e:	50                   	push   %eax
   1955f:	e8 a8 f8 ff ff       	call   18e0c <kernel_vsprintf>
   19564:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   19567:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1956d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   19570:	83 ec 0c             	sub    $0xc,%esp
   19573:	68 30 70 07 00       	push   $0x77030
   19578:	e8 5c eb ff ff       	call   180d9 <mutex_lock>
   1957d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   19580:	83 ec 0c             	sub    $0xc,%esp
   19583:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   19589:	50                   	push   %eax
   1958a:	e8 10 f7 ff ff       	call   18c9f <kernel_strlen>
   1958f:	83 c4 10             	add    $0x10,%esp
   19592:	8b 15 44 70 07 00    	mov    0x77044,%edx
   19598:	50                   	push   %eax
   19599:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1959f:	50                   	push   %eax
   195a0:	6a 00                	push   $0x0
   195a2:	52                   	push   %edx
   195a3:	e8 f8 ac ff ff       	call   142a0 <dev_write>
   195a8:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   195ab:	83 ec 0c             	sub    $0xc,%esp
   195ae:	68 30 70 07 00       	push   $0x77030
   195b3:	e8 c7 eb ff ff       	call   1817f <mutex_unlock>
   195b8:	83 c4 10             	add    $0x10,%esp
   195bb:	90                   	nop
   195bc:	c9                   	leave  
   195bd:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu自动将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < 1; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 7e                	jmp    8000009d <first_main+0x8d>
        int pid = fork();
8000001f:	e8 73 01 00 00       	call   80000197 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 bf 00 00 80       	push   $0x800000bf
80000037:	e8 33 01 00 00       	call   8000016f <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 66                	jmp    800000a7 <first_main+0x97>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 52                	jne    80000099 <first_main+0x89>
            char tty_num[] = "/dev/tty?";
80000047:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
8000004e:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000055:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8000005e:	83 c0 30             	add    $0x30,%eax
80000061:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * const argv[] = {tty_num, 0};
80000064:	8d 45 e6             	lea    -0x1a(%ebp),%eax
80000067:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, 0);
80000071:	83 ec 04             	sub    $0x4,%esp
80000074:	6a 00                	push   $0x0
80000076:	8d 45 dc             	lea    -0x24(%ebp),%eax
80000079:	50                   	push   %eax
8000007a:	68 d4 00 00 80       	push   $0x800000d4
8000007f:	e8 2e 01 00 00       	call   800001b2 <execve>
80000084:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
80000087:	83 ec 0c             	sub    $0xc,%esp
8000008a:	68 e8 03 00 00       	push   $0x3e8
8000008f:	e8 96 00 00 00       	call   8000012a <msleep>
80000094:	83 c4 10             	add    $0x10,%esp
80000097:	eb ee                	jmp    80000087 <first_main+0x77>
    for (int i = 0; i < 1; ++i) {
80000099:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8000009d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
800000a1:	0f 8e 78 ff ff ff    	jle    8000001f <first_main+0xf>
        }
    }    

    for (;;) {
        //回收所有孤儿进程
        int status = 0;
800000a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        wait(&status);
800000ae:	83 ec 0c             	sub    $0xc,%esp
800000b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000b4:	50                   	push   %eax
800000b5:	e8 bb 02 00 00       	call   80000375 <wait>
800000ba:	83 c4 10             	add    $0x10,%esp
    for (;;) {
800000bd:	eb e8                	jmp    800000a7 <first_main+0x97>
800000bf:	63 72 65             	arpl   %si,0x65(%edx)
800000c2:	61                   	popa   
800000c3:	74 65                	je     8000012a <msleep>
800000c5:	20 73 68             	and    %dh,0x68(%ebx)
800000c8:	65 6c                	gs insb (%dx),%es:(%edi)
800000ca:	6c                   	insb   (%dx),%es:(%edi)
800000cb:	20 66 61             	and    %ah,0x61(%esi)
800000ce:	69 6c 65 64 2e 00 73 	imul   $0x6873002e,0x64(%ebp,%eiz,2),%ebp
800000d5:	68 
800000d6:	65 6c                	gs insb (%dx),%es:(%edi)
800000d8:	6c                   	insb   (%dx),%es:(%edi)
800000d9:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
800000dc:	66                   	data16
	...

800000de <sys_call>:
#include    "os_cfg.h"
#include    "applib/lib_syscall.h"
#include    <stdlib.h>


int sys_call(syscall_args_t *args) {
800000de:	55                   	push   %ebp
800000df:	89 e5                	mov    %esp,%ebp
800000e1:	57                   	push   %edi
800000e2:	56                   	push   %esi
800000e3:	53                   	push   %ebx
800000e4:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000ee:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000f5:	8b 45 08             	mov    0x8(%ebp),%eax
800000f8:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000fb:	8b 55 08             	mov    0x8(%ebp),%edx
800000fe:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000101:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000104:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000107:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000010a:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000010d:	8b 75 08             	mov    0x8(%ebp),%esi
80000110:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000112:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000115:	50                   	push   %eax
80000116:	52                   	push   %edx
80000117:	51                   	push   %ecx
80000118:	53                   	push   %ebx
80000119:	56                   	push   %esi
8000011a:	ff 1f                	lcall  *(%edi)
8000011c:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8000011f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000122:	83 c4 10             	add    $0x10,%esp
80000125:	5b                   	pop    %ebx
80000126:	5e                   	pop    %esi
80000127:	5f                   	pop    %edi
80000128:	5d                   	pop    %ebp
80000129:	c3                   	ret    

8000012a <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8000012a:	55                   	push   %ebp
8000012b:	89 e5                	mov    %esp,%ebp
8000012d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000130:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000134:	7e 1b                	jle    80000151 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000136:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000013d:	8b 45 08             	mov    0x8(%ebp),%eax
80000140:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000143:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000146:	50                   	push   %eax
80000147:	e8 92 ff ff ff       	call   800000de <sys_call>
8000014c:	83 c4 04             	add    $0x4,%esp
8000014f:	eb 01                	jmp    80000152 <msleep+0x28>
    if (ms <= 0) return;
80000151:	90                   	nop

}
80000152:	c9                   	leave  
80000153:	c3                   	ret    

80000154 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000154:	55                   	push   %ebp
80000155:	89 e5                	mov    %esp,%ebp
80000157:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000015a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000161:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000164:	50                   	push   %eax
80000165:	e8 74 ff ff ff       	call   800000de <sys_call>
8000016a:	83 c4 04             	add    $0x4,%esp
}
8000016d:	c9                   	leave  
8000016e:	c3                   	ret    

8000016f <print_msg>:

void print_msg(const char *fmt, int arg) {
8000016f:	55                   	push   %ebp
80000170:	89 e5                	mov    %esp,%ebp
80000172:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000175:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000017c:	8b 45 08             	mov    0x8(%ebp),%eax
8000017f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000182:	8b 45 0c             	mov    0xc(%ebp),%eax
80000185:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000188:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000018b:	50                   	push   %eax
8000018c:	e8 4d ff ff ff       	call   800000de <sys_call>
80000191:	83 c4 04             	add    $0x4,%esp
}
80000194:	90                   	nop
80000195:	c9                   	leave  
80000196:	c3                   	ret    

80000197 <fork>:

int fork (void) {
80000197:	55                   	push   %ebp
80000198:	89 e5                	mov    %esp,%ebp
8000019a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000019d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800001a4:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001a7:	50                   	push   %eax
800001a8:	e8 31 ff ff ff       	call   800000de <sys_call>
800001ad:	83 c4 04             	add    $0x4,%esp
}
800001b0:	c9                   	leave  
800001b1:	c3                   	ret    

800001b2 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001b2:	55                   	push   %ebp
800001b3:	89 e5                	mov    %esp,%ebp
800001b5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001b8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001bf:	8b 45 08             	mov    0x8(%ebp),%eax
800001c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001c5:	8b 45 0c             	mov    0xc(%ebp),%eax
800001c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001cb:	8b 45 10             	mov    0x10(%ebp),%eax
800001ce:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d4:	50                   	push   %eax
800001d5:	e8 04 ff ff ff       	call   800000de <sys_call>
800001da:	83 c4 04             	add    $0x4,%esp
}
800001dd:	c9                   	leave  
800001de:	c3                   	ret    

800001df <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001df:	55                   	push   %ebp
800001e0:	89 e5                	mov    %esp,%ebp
800001e2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001e5:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001ec:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ef:	50                   	push   %eax
800001f0:	e8 e9 fe ff ff       	call   800000de <sys_call>
800001f5:	83 c4 04             	add    $0x4,%esp
}
800001f8:	c9                   	leave  
800001f9:	c3                   	ret    

800001fa <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001fa:	55                   	push   %ebp
800001fb:	89 e5                	mov    %esp,%ebp
800001fd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
80000200:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000207:	8b 45 08             	mov    0x8(%ebp),%eax
8000020a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8000020d:	8b 45 0c             	mov    0xc(%ebp),%eax
80000210:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000213:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000216:	50                   	push   %eax
80000217:	e8 c2 fe ff ff       	call   800000de <sys_call>
8000021c:	83 c4 04             	add    $0x4,%esp
}
8000021f:	c9                   	leave  
80000220:	c3                   	ret    

80000221 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000221:	55                   	push   %ebp
80000222:	89 e5                	mov    %esp,%ebp
80000224:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000227:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000022e:	8b 45 08             	mov    0x8(%ebp),%eax
80000231:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000234:	8b 45 0c             	mov    0xc(%ebp),%eax
80000237:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000023a:	8b 45 10             	mov    0x10(%ebp),%eax
8000023d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000240:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000243:	50                   	push   %eax
80000244:	e8 95 fe ff ff       	call   800000de <sys_call>
80000249:	83 c4 04             	add    $0x4,%esp
}
8000024c:	c9                   	leave  
8000024d:	c3                   	ret    

8000024e <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000024e:	55                   	push   %ebp
8000024f:	89 e5                	mov    %esp,%ebp
80000251:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000254:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000025b:	8b 45 08             	mov    0x8(%ebp),%eax
8000025e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000261:	8b 45 0c             	mov    0xc(%ebp),%eax
80000264:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000267:	8b 45 10             	mov    0x10(%ebp),%eax
8000026a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000026d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000270:	50                   	push   %eax
80000271:	e8 68 fe ff ff       	call   800000de <sys_call>
80000276:	83 c4 04             	add    $0x4,%esp
}
80000279:	c9                   	leave  
8000027a:	c3                   	ret    

8000027b <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000027b:	55                   	push   %ebp
8000027c:	89 e5                	mov    %esp,%ebp
8000027e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000281:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000288:	8b 45 08             	mov    0x8(%ebp),%eax
8000028b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000028e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000291:	50                   	push   %eax
80000292:	e8 47 fe ff ff       	call   800000de <sys_call>
80000297:	83 c4 04             	add    $0x4,%esp
}
8000029a:	c9                   	leave  
8000029b:	c3                   	ret    

8000029c <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000029c:	55                   	push   %ebp
8000029d:	89 e5                	mov    %esp,%ebp
8000029f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002a2:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
800002a9:	8b 45 08             	mov    0x8(%ebp),%eax
800002ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002af:	8b 45 0c             	mov    0xc(%ebp),%eax
800002b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002b5:	8b 45 10             	mov    0x10(%ebp),%eax
800002b8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002be:	50                   	push   %eax
800002bf:	e8 1a fe ff ff       	call   800000de <sys_call>
800002c4:	83 c4 04             	add    $0x4,%esp
}
800002c7:	c9                   	leave  
800002c8:	c3                   	ret    

800002c9 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002c9:	55                   	push   %ebp
800002ca:	89 e5                	mov    %esp,%ebp
800002cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002cf:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002d6:	8b 45 08             	mov    0x8(%ebp),%eax
800002d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002df:	50                   	push   %eax
800002e0:	e8 f9 fd ff ff       	call   800000de <sys_call>
800002e5:	83 c4 04             	add    $0x4,%esp
}
800002e8:	c9                   	leave  
800002e9:	c3                   	ret    

800002ea <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002ea:	55                   	push   %ebp
800002eb:	89 e5                	mov    %esp,%ebp
800002ed:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002f0:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002f7:	8b 45 08             	mov    0x8(%ebp),%eax
800002fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002fd:	8b 45 0c             	mov    0xc(%ebp),%eax
80000300:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000303:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000306:	50                   	push   %eax
80000307:	e8 d2 fd ff ff       	call   800000de <sys_call>
8000030c:	83 c4 04             	add    $0x4,%esp
}
8000030f:	c9                   	leave  
80000310:	c3                   	ret    

80000311 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000311:	55                   	push   %ebp
80000312:	89 e5                	mov    %esp,%ebp
80000314:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000317:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)incr;
8000031e:	8b 45 08             	mov    0x8(%ebp),%eax
80000321:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000324:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000327:	50                   	push   %eax
80000328:	e8 b1 fd ff ff       	call   800000de <sys_call>
8000032d:	83 c4 04             	add    $0x4,%esp
}
80000330:	c9                   	leave  
80000331:	c3                   	ret    

80000332 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000332:	55                   	push   %ebp
80000333:	89 e5                	mov    %esp,%ebp
80000335:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000338:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = file;
8000033f:	8b 45 08             	mov    0x8(%ebp),%eax
80000342:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000345:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000348:	50                   	push   %eax
80000349:	e8 90 fd ff ff       	call   800000de <sys_call>
8000034e:	83 c4 04             	add    $0x4,%esp
}
80000351:	c9                   	leave  
80000352:	c3                   	ret    

80000353 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000353:	55                   	push   %ebp
80000354:	89 e5                	mov    %esp,%ebp
80000356:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000359:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
80000360:	8b 45 08             	mov    0x8(%ebp),%eax
80000363:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
80000366:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000369:	50                   	push   %eax
8000036a:	e8 6f fd ff ff       	call   800000de <sys_call>
8000036f:	83 c4 04             	add    $0x4,%esp
}
80000372:	90                   	nop
80000373:	c9                   	leave  
80000374:	c3                   	ret    

80000375 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000375:	55                   	push   %ebp
80000376:	89 e5                	mov    %esp,%ebp
80000378:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
8000037b:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000382:	8b 45 08             	mov    0x8(%ebp),%eax
80000385:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
80000388:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000038b:	50                   	push   %eax
8000038c:	e8 4d fd ff ff       	call   800000de <sys_call>
80000391:	83 c4 04             	add    $0x4,%esp
}
80000394:	c9                   	leave  
80000395:	c3                   	ret    
