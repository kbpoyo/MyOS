
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000d14 memsz 0x00024540 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b2d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000001e7  00010b2d  00010b2d  00001b2d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00023820  00010d20  00010d20  00001d14  2**5
                  ALLOC
  3 .debug_line   00000566  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_line_str 00000260  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000f66  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000580  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 000000a0  00000000  00000000  000039c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000829  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  00000000  00000000  00004289  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000608  00000000  00000000  000042b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 gdt.c
00010298 l     F .text	00000028 lgdt
00010d20 l     O .bss	00010000 gdt_table
000102c0 l     F .text	000000bf segment_desc_set
00000000 l    df *ABS*	00000000 idt.c
000103ef l     F .text	00000007 cli
000103f6 l     F .text	00000007 sti
000103fd l     F .text	00000007 hlt
00010404 l     F .text	0000001d inb
00010421 l     F .text	00000021 outb
00010442 l     F .text	00000028 lidt
00020d20 l     O .bss	00000800 idt_table
0001046a l     F .text	0000000a do_default_handler
00010642 l     F .text	00000047 gate_desc_set
000106c9 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010a4a l     F .text	00000021 outb
00021520 l     O .bss	00000800 idt_table
00021d20 l     O .bss	00000004 sys_tick
00010a8e l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00021d40 l     O .bss	00010000 gdt_table
00031d40 l     O .bss	00000800 idt_table
000108cf g     F .text	00000098 idt_enable
00010566 g     F .text	00000016 do_handler_segment_not_present
00010a06 g     F .text	0000000b idt_enable_global
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00010b20 g     F .text	0000000d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000109fb g     F .text	0000000b idt_disable_global
00010689 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000104e2 g     F .text	00000016 do_handler_overflow
000105d4 g     F .text	00000016 do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010592 g     F .text	00000016 do_handler_general_protection
0001062c g     F .text	00000016 do_handler_control_exception
0001048a g     F .text	00000016 do_handler_divider
0001053a g     F .text	00000016 do_handler_double_fault
000105a8 g     F .text	00000016 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00010a11 g     F .text	00000039 pic_send_eoi
00010180 g       .text	00000000 exception_handler_stack_segment_fault
0001037f g     F .text	00000070 gdt_init
00010616 g     F .text	00000016 do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
0001027b g       .text	00000000 exception_handler_time
000104a0 g     F .text	00000016 do_handler_debug
00032540 g     O .bss	00002000 stack
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
0001075c g     F .text	00000173 idt_init
0001050e g     F .text	00000016 do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000105be g     F .text	00000016 do_handler_fpu_error
000105ea g     F .text	00000016 do_handler_machine_check
00010047 g       .text	00000000 exception_handler_divider
00010b08 g     F .text	00000018 kernel_init
00010000 g       .text	00000000 _start
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010550 g     F .text	00000016 do_handler_invalid_tss
00010967 g     F .text	00000094 idt_disable
000104b6 g     F .text	00000016 do_handler_nmi
00010226 g       .text	00000000 exception_handler_smd_exception
00010524 g     F .text	00000016 do_handler_device_unavailable
00010600 g     F .text	00000016 do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010474 g     F .text	00000016 do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010064 g       .text	00000000 exception_handler_debug
000104f8 g     F .text	00000016 do_handler_bound_range
00010165 g       .text	00000000 exception_handler_segment_not_present
0001057c g     F .text	00000016 do_handler_stack_segment_fault
000104cc g     F .text	00000016 do_handler_breakpoint
00010a6b g     F .text	00000023 do_handler_time
00010af0 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 fd 0a 00 00       	call   10b08 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 45 03 00       	mov    $0x34540,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 f6 0a 00 00       	jmp    10b20 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 39 04 00 00       	call   10474 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 32 04 00 00       	call   1048a <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 2b 04 00 00       	call   104a0 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 24 04 00 00       	call   104b6 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 1d 04 00 00       	call   104cc <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 16 04 00 00       	call   104e2 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 0f 04 00 00       	call   104f8 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 08 04 00 00       	call   1050e <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 01 04 00 00       	call   10524 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 fc 03 00 00       	call   1053a <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 f7 03 00 00       	call   10550 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 f2 03 00 00       	call   10566 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 ed 03 00 00       	call   1057c <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 e8 03 00 00       	call   10592 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 e3 03 00 00       	call   105a8 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 dc 03 00 00       	call   105be <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 d7 03 00 00       	call   105d4 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 d0 03 00 00       	call   105ea <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 c9 03 00 00       	call   10600 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 c2 03 00 00       	call   10616 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 bd 03 00 00       	call   1062c <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 df 07 00 00       	call   10a6b <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <lgdt>:
 * @brief  加载全局描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lgdt(uint32_t start, uint32_t size) {
   10298:	55                   	push   %ebp
   10299:	89 e5                	mov    %esp,%ebp
   1029b:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // GDT的在内存中的逻辑边界
    uint16_t start15_0;   // GDT地址的低16位
    uint16_t start31_16;  // GDT地址的高16位
  } gdt;

  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1029e:	8b 45 08             	mov    0x8(%ebp),%eax
   102a1:	c1 e8 10             	shr    $0x10,%eax
   102a4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   102a8:	8b 45 08             	mov    0x8(%ebp),%eax
   102ab:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  gdt.limit =
      size -
   102af:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b2:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   102b5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化GDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   102b9:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
      "lgdt %[g]"
      :
      : [g] "m"(gdt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lgdt直接加载gdt所在的内存区域的内容
}
   102bd:	90                   	nop
   102be:	c9                   	leave  
   102bf:	c3                   	ret    

000102c0 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
static void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   102c0:	55                   	push   %ebp
   102c1:	89 e5                	mov    %esp,%ebp
   102c3:	83 ec 18             	sub    $0x18,%esp
   102c6:	8b 55 08             	mov    0x8(%ebp),%edx
   102c9:	8b 45 14             	mov    0x14(%ebp),%eax
   102cc:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   102d0:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   102d4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   102d8:	66 c1 e8 03          	shr    $0x3,%ax
   102dc:	0f b7 c0             	movzwl %ax,%eax
   102df:	c1 e0 03             	shl    $0x3,%eax
   102e2:	05 20 0d 01 00       	add    $0x10d20,%eax
   102e7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	89 c2                	mov    %eax,%edx
   102ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   102f2:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	c1 e8 10             	shr    $0x10,%eax
   102fc:	89 c2                	mov    %eax,%edx
   102fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10301:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10304:	8b 45 0c             	mov    0xc(%ebp),%eax
   10307:	c1 e8 18             	shr    $0x18,%eax
   1030a:	89 c2                	mov    %eax,%edx
   1030c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1030f:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10312:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10319:	76 1d                	jbe    10338 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1031e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10322:	66 0d 00 80          	or     $0x8000,%ax
   10326:	89 c2                	mov    %eax,%edx
   10328:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1032b:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1032f:	8b 45 10             	mov    0x10(%ebp),%eax
   10332:	c1 e8 0c             	shr    $0xc,%eax
   10335:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10338:	8b 45 10             	mov    0x10(%ebp),%eax
   1033b:	89 c2                	mov    %eax,%edx
   1033d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10340:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10343:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10346:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1034a:	89 c2                	mov    %eax,%edx
   1034c:	8b 45 10             	mov    0x10(%ebp),%eax
   1034f:	c1 e8 08             	shr    $0x8,%eax
   10352:	66 25 00 0f          	and    $0xf00,%ax
   10356:	09 d0                	or     %edx,%eax
   10358:	89 c2                	mov    %eax,%edx
   1035a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1035d:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10361:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10364:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10368:	89 c2                	mov    %eax,%edx
   1036a:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1036e:	80 e4 f0             	and    $0xf0,%ah
   10371:	09 d0                	or     %edx,%eax
   10373:	89 c2                	mov    %eax,%edx
   10375:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10378:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1037c:	90                   	nop
   1037d:	c9                   	leave  
   1037e:	c3                   	ret    

0001037f <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1037f:	55                   	push   %ebp
   10380:	89 e5                	mov    %esp,%ebp
   10382:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10385:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1038c:	eb 1c                	jmp    103aa <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1038e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10391:	c1 e0 03             	shl    $0x3,%eax
   10394:	0f b7 c0             	movzwl %ax,%eax
   10397:	6a 00                	push   $0x0
   10399:	6a 00                	push   $0x0
   1039b:	6a 00                	push   $0x0
   1039d:	50                   	push   %eax
   1039e:	e8 1d ff ff ff       	call   102c0 <segment_desc_set>
   103a3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   103a6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   103aa:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   103b1:	7e db                	jle    1038e <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   103b3:	68 92 40 00 00       	push   $0x4092
   103b8:	6a ff                	push   $0xffffffff
   103ba:	6a 00                	push   $0x0
   103bc:	6a 10                	push   $0x10
   103be:	e8 fd fe ff ff       	call   102c0 <segment_desc_set>
   103c3:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   103c6:	68 9a 40 00 00       	push   $0x409a
   103cb:	6a ff                	push   $0xffffffff
   103cd:	6a 00                	push   $0x0
   103cf:	6a 08                	push   $0x8
   103d1:	e8 ea fe ff ff       	call   102c0 <segment_desc_set>
   103d6:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   103d9:	b8 20 0d 01 00       	mov    $0x10d20,%eax
   103de:	68 00 00 01 00       	push   $0x10000
   103e3:	50                   	push   %eax
   103e4:	e8 af fe ff ff       	call   10298 <lgdt>
   103e9:	83 c4 08             	add    $0x8,%esp
}
   103ec:	90                   	nop
   103ed:	c9                   	leave  
   103ee:	c3                   	ret    

000103ef <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   103ef:	55                   	push   %ebp
   103f0:	89 e5                	mov    %esp,%ebp
   103f2:	fa                   	cli    
   103f3:	90                   	nop
   103f4:	5d                   	pop    %ebp
   103f5:	c3                   	ret    

000103f6 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   103f6:	55                   	push   %ebp
   103f7:	89 e5                	mov    %esp,%ebp
   103f9:	fb                   	sti    
   103fa:	90                   	nop
   103fb:	5d                   	pop    %ebp
   103fc:	c3                   	ret    

000103fd <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   103fd:	55                   	push   %ebp
   103fe:	89 e5                	mov    %esp,%ebp
   10400:	f4                   	hlt    
   10401:	90                   	nop
   10402:	5d                   	pop    %ebp
   10403:	c3                   	ret    

00010404 <inb>:
static inline uint8_t inb(uint16_t port) {
   10404:	55                   	push   %ebp
   10405:	89 e5                	mov    %esp,%ebp
   10407:	83 ec 14             	sub    $0x14,%esp
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10411:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10415:	89 c2                	mov    %eax,%edx
   10417:	ec                   	in     (%dx),%al
   10418:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1041b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1041f:	c9                   	leave  
   10420:	c3                   	ret    

00010421 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10421:	55                   	push   %ebp
   10422:	89 e5                	mov    %esp,%ebp
   10424:	83 ec 08             	sub    $0x8,%esp
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1042d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10431:	89 d0                	mov    %edx,%eax
   10433:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10436:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1043a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1043e:	ee                   	out    %al,(%dx)
}
   1043f:	90                   	nop
   10440:	c9                   	leave  
   10441:	c3                   	ret    

00010442 <lidt>:
 * @brief  加载中断描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lidt(uint32_t start, uint32_t size) {
   10442:	55                   	push   %ebp
   10443:	89 e5                	mov    %esp,%ebp
   10445:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // IDT的在内存中的逻辑边界
    uint16_t start15_0;   // IDT地址的低16位
    uint16_t start31_16;  // IDT地址的高16位
  } idt;

  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10448:	8b 45 08             	mov    0x8(%ebp),%eax
   1044b:	c1 e8 10             	shr    $0x10,%eax
   1044e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10452:	8b 45 08             	mov    0x8(%ebp),%eax
   10455:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  idt.limit =
      size -
   10459:	8b 45 0c             	mov    0xc(%ebp),%eax
   1045c:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   1045f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化IDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   10463:	0f 01 5d fa          	lidtl  -0x6(%ebp)
      "lidt %[g]"
      :
      : [g] "m"(idt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lidt直接加载idt所在的内存区域的内容
}
   10467:	90                   	nop
   10468:	c9                   	leave  
   10469:	c3                   	ret    

0001046a <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1046a:	55                   	push   %ebp
   1046b:	89 e5                	mov    %esp,%ebp
  for (;;) {
    hlt();
   1046d:	e8 8b ff ff ff       	call   103fd <hlt>
   10472:	eb f9                	jmp    1046d <do_default_handler+0x3>

00010474 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10474:	55                   	push   %ebp
   10475:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "unknown exception");
   10477:	68 2d 0b 01 00       	push   $0x10b2d
   1047c:	ff 75 08             	push   0x8(%ebp)
   1047f:	e8 e6 ff ff ff       	call   1046a <do_default_handler>
   10484:	83 c4 08             	add    $0x8,%esp
}
   10487:	90                   	nop
   10488:	c9                   	leave  
   10489:	c3                   	ret    

0001048a <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   1048a:	55                   	push   %ebp
   1048b:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "divider exception");
   1048d:	68 3f 0b 01 00       	push   $0x10b3f
   10492:	ff 75 08             	push   0x8(%ebp)
   10495:	e8 d0 ff ff ff       	call   1046a <do_default_handler>
   1049a:	83 c4 08             	add    $0x8,%esp
}
   1049d:	90                   	nop
   1049e:	c9                   	leave  
   1049f:	c3                   	ret    

000104a0 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   104a0:	55                   	push   %ebp
   104a1:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "debug exception");
   104a3:	68 51 0b 01 00       	push   $0x10b51
   104a8:	ff 75 08             	push   0x8(%ebp)
   104ab:	e8 ba ff ff ff       	call   1046a <do_default_handler>
   104b0:	83 c4 08             	add    $0x8,%esp
}
   104b3:	90                   	nop
   104b4:	c9                   	leave  
   104b5:	c3                   	ret    

000104b6 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   104b6:	55                   	push   %ebp
   104b7:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "nmi exception");
   104b9:	68 61 0b 01 00       	push   $0x10b61
   104be:	ff 75 08             	push   0x8(%ebp)
   104c1:	e8 a4 ff ff ff       	call   1046a <do_default_handler>
   104c6:	83 c4 08             	add    $0x8,%esp
}
   104c9:	90                   	nop
   104ca:	c9                   	leave  
   104cb:	c3                   	ret    

000104cc <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   104cc:	55                   	push   %ebp
   104cd:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "breakpoint exception");
   104cf:	68 6f 0b 01 00       	push   $0x10b6f
   104d4:	ff 75 08             	push   0x8(%ebp)
   104d7:	e8 8e ff ff ff       	call   1046a <do_default_handler>
   104dc:	83 c4 08             	add    $0x8,%esp
}
   104df:	90                   	nop
   104e0:	c9                   	leave  
   104e1:	c3                   	ret    

000104e2 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   104e2:	55                   	push   %ebp
   104e3:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "overflow exception");
   104e5:	68 84 0b 01 00       	push   $0x10b84
   104ea:	ff 75 08             	push   0x8(%ebp)
   104ed:	e8 78 ff ff ff       	call   1046a <do_default_handler>
   104f2:	83 c4 08             	add    $0x8,%esp
}
   104f5:	90                   	nop
   104f6:	c9                   	leave  
   104f7:	c3                   	ret    

000104f8 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   104f8:	55                   	push   %ebp
   104f9:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "bound_range exception");
   104fb:	68 97 0b 01 00       	push   $0x10b97
   10500:	ff 75 08             	push   0x8(%ebp)
   10503:	e8 62 ff ff ff       	call   1046a <do_default_handler>
   10508:	83 c4 08             	add    $0x8,%esp
}
   1050b:	90                   	nop
   1050c:	c9                   	leave  
   1050d:	c3                   	ret    

0001050e <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1050e:	55                   	push   %ebp
   1050f:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "invalid_opcode exception");
   10511:	68 ad 0b 01 00       	push   $0x10bad
   10516:	ff 75 08             	push   0x8(%ebp)
   10519:	e8 4c ff ff ff       	call   1046a <do_default_handler>
   1051e:	83 c4 08             	add    $0x8,%esp
}
   10521:	90                   	nop
   10522:	c9                   	leave  
   10523:	c3                   	ret    

00010524 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10524:	55                   	push   %ebp
   10525:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "device_unavailable exception");
   10527:	68 c6 0b 01 00       	push   $0x10bc6
   1052c:	ff 75 08             	push   0x8(%ebp)
   1052f:	e8 36 ff ff ff       	call   1046a <do_default_handler>
   10534:	83 c4 08             	add    $0x8,%esp
}
   10537:	90                   	nop
   10538:	c9                   	leave  
   10539:	c3                   	ret    

0001053a <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   1053a:	55                   	push   %ebp
   1053b:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "double_fault exception");
   1053d:	68 e3 0b 01 00       	push   $0x10be3
   10542:	ff 75 08             	push   0x8(%ebp)
   10545:	e8 20 ff ff ff       	call   1046a <do_default_handler>
   1054a:	83 c4 08             	add    $0x8,%esp
}
   1054d:	90                   	nop
   1054e:	c9                   	leave  
   1054f:	c3                   	ret    

00010550 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10550:	55                   	push   %ebp
   10551:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "invalid_tss exception");
   10553:	68 fa 0b 01 00       	push   $0x10bfa
   10558:	ff 75 08             	push   0x8(%ebp)
   1055b:	e8 0a ff ff ff       	call   1046a <do_default_handler>
   10560:	83 c4 08             	add    $0x8,%esp
}
   10563:	90                   	nop
   10564:	c9                   	leave  
   10565:	c3                   	ret    

00010566 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10566:	55                   	push   %ebp
   10567:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "segment_not_present exception");
   10569:	68 10 0c 01 00       	push   $0x10c10
   1056e:	ff 75 08             	push   0x8(%ebp)
   10571:	e8 f4 fe ff ff       	call   1046a <do_default_handler>
   10576:	83 c4 08             	add    $0x8,%esp
}
   10579:	90                   	nop
   1057a:	c9                   	leave  
   1057b:	c3                   	ret    

0001057c <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   1057c:	55                   	push   %ebp
   1057d:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "stack_segment_fault exception");
   1057f:	68 2e 0c 01 00       	push   $0x10c2e
   10584:	ff 75 08             	push   0x8(%ebp)
   10587:	e8 de fe ff ff       	call   1046a <do_default_handler>
   1058c:	83 c4 08             	add    $0x8,%esp
}
   1058f:	90                   	nop
   10590:	c9                   	leave  
   10591:	c3                   	ret    

00010592 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10592:	55                   	push   %ebp
   10593:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "general_protection exception");
   10595:	68 4c 0c 01 00       	push   $0x10c4c
   1059a:	ff 75 08             	push   0x8(%ebp)
   1059d:	e8 c8 fe ff ff       	call   1046a <do_default_handler>
   105a2:	83 c4 08             	add    $0x8,%esp
}
   105a5:	90                   	nop
   105a6:	c9                   	leave  
   105a7:	c3                   	ret    

000105a8 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   105a8:	55                   	push   %ebp
   105a9:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "page_fault exception");
   105ab:	68 69 0c 01 00       	push   $0x10c69
   105b0:	ff 75 08             	push   0x8(%ebp)
   105b3:	e8 b2 fe ff ff       	call   1046a <do_default_handler>
   105b8:	83 c4 08             	add    $0x8,%esp
}
   105bb:	90                   	nop
   105bc:	c9                   	leave  
   105bd:	c3                   	ret    

000105be <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   105be:	55                   	push   %ebp
   105bf:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "fpu_error exception");
   105c1:	68 7e 0c 01 00       	push   $0x10c7e
   105c6:	ff 75 08             	push   0x8(%ebp)
   105c9:	e8 9c fe ff ff       	call   1046a <do_default_handler>
   105ce:	83 c4 08             	add    $0x8,%esp
}
   105d1:	90                   	nop
   105d2:	c9                   	leave  
   105d3:	c3                   	ret    

000105d4 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   105d4:	55                   	push   %ebp
   105d5:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "alignment_check exception");
   105d7:	68 92 0c 01 00       	push   $0x10c92
   105dc:	ff 75 08             	push   0x8(%ebp)
   105df:	e8 86 fe ff ff       	call   1046a <do_default_handler>
   105e4:	83 c4 08             	add    $0x8,%esp
}
   105e7:	90                   	nop
   105e8:	c9                   	leave  
   105e9:	c3                   	ret    

000105ea <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   105ea:	55                   	push   %ebp
   105eb:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "machine_check exception");
   105ed:	68 ac 0c 01 00       	push   $0x10cac
   105f2:	ff 75 08             	push   0x8(%ebp)
   105f5:	e8 70 fe ff ff       	call   1046a <do_default_handler>
   105fa:	83 c4 08             	add    $0x8,%esp
}
   105fd:	90                   	nop
   105fe:	c9                   	leave  
   105ff:	c3                   	ret    

00010600 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10600:	55                   	push   %ebp
   10601:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "smd_exception exception");
   10603:	68 c4 0c 01 00       	push   $0x10cc4
   10608:	ff 75 08             	push   0x8(%ebp)
   1060b:	e8 5a fe ff ff       	call   1046a <do_default_handler>
   10610:	83 c4 08             	add    $0x8,%esp
}
   10613:	90                   	nop
   10614:	c9                   	leave  
   10615:	c3                   	ret    

00010616 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   10616:	55                   	push   %ebp
   10617:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "virtual_exception exception");
   10619:	68 dc 0c 01 00       	push   $0x10cdc
   1061e:	ff 75 08             	push   0x8(%ebp)
   10621:	e8 44 fe ff ff       	call   1046a <do_default_handler>
   10626:	83 c4 08             	add    $0x8,%esp
}
   10629:	90                   	nop
   1062a:	c9                   	leave  
   1062b:	c3                   	ret    

0001062c <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   1062c:	55                   	push   %ebp
   1062d:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "control_exception exception");
   1062f:	68 f8 0c 01 00       	push   $0x10cf8
   10634:	ff 75 08             	push   0x8(%ebp)
   10637:	e8 2e fe ff ff       	call   1046a <do_default_handler>
   1063c:	83 c4 08             	add    $0x8,%esp
}
   1063f:	90                   	nop
   10640:	c9                   	leave  
   10641:	c3                   	ret    

00010642 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10642:	55                   	push   %ebp
   10643:	89 e5                	mov    %esp,%ebp
   10645:	83 ec 08             	sub    $0x8,%esp
   10648:	8b 55 0c             	mov    0xc(%ebp),%edx
   1064b:	8b 45 14             	mov    0x14(%ebp),%eax
   1064e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10652:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10656:	8b 45 10             	mov    0x10(%ebp),%eax
   10659:	89 c2                	mov    %eax,%edx
   1065b:	8b 45 08             	mov    0x8(%ebp),%eax
   1065e:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   10661:	8b 45 10             	mov    0x10(%ebp),%eax
   10664:	c1 e8 10             	shr    $0x10,%eax
   10667:	89 c2                	mov    %eax,%edx
   10669:	8b 45 08             	mov    0x8(%ebp),%eax
   1066c:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10670:	8b 45 08             	mov    0x8(%ebp),%eax
   10673:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10677:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1067b:	8b 45 08             	mov    0x8(%ebp),%eax
   1067e:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10682:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10686:	90                   	nop
   10687:	c9                   	leave  
   10688:	c3                   	ret    

00010689 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   10689:	55                   	push   %ebp
   1068a:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   1068c:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   10693:	7f 06                	jg     1069b <idt_install+0x12>
   10695:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10699:	79 07                	jns    106a2 <idt_install+0x19>
   1069b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106a0:	eb 25                	jmp    106c7 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   106a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   106a5:	8b 55 08             	mov    0x8(%ebp),%edx
   106a8:	c1 e2 03             	shl    $0x3,%edx
   106ab:	81 c2 20 0d 02 00    	add    $0x20d20,%edx
   106b1:	68 00 8e 00 00       	push   $0x8e00
   106b6:	50                   	push   %eax
   106b7:	6a 08                	push   $0x8
   106b9:	52                   	push   %edx
   106ba:	e8 83 ff ff ff       	call   10642 <gate_desc_set>
   106bf:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   106c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106c7:	c9                   	leave  
   106c8:	c3                   	ret    

000106c9 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   106c9:	55                   	push   %ebp
   106ca:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   106cc:	6a 11                	push   $0x11
   106ce:	6a 20                	push   $0x20
   106d0:	e8 4c fd ff ff       	call   10421 <outb>
   106d5:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   106d8:	6a 20                	push   $0x20
   106da:	6a 21                	push   $0x21
   106dc:	e8 40 fd ff ff       	call   10421 <outb>
   106e1:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   106e4:	6a 04                	push   $0x4
   106e6:	6a 21                	push   $0x21
   106e8:	e8 34 fd ff ff       	call   10421 <outb>
   106ed:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   106f0:	6a 01                	push   $0x1
   106f2:	6a 21                	push   $0x21
   106f4:	e8 28 fd ff ff       	call   10421 <outb>
   106f9:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   106fc:	6a 11                	push   $0x11
   106fe:	68 a0 00 00 00       	push   $0xa0
   10703:	e8 19 fd ff ff       	call   10421 <outb>
   10708:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1070b:	6a 28                	push   $0x28
   1070d:	68 a1 00 00 00       	push   $0xa1
   10712:	e8 0a fd ff ff       	call   10421 <outb>
   10717:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1071a:	6a 02                	push   $0x2
   1071c:	68 a1 00 00 00       	push   $0xa1
   10721:	e8 fb fc ff ff       	call   10421 <outb>
   10726:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   10729:	6a 01                	push   $0x1
   1072b:	68 a1 00 00 00       	push   $0xa1
   10730:	e8 ec fc ff ff       	call   10421 <outb>
   10735:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   10738:	68 fb 00 00 00       	push   $0xfb
   1073d:	6a 21                	push   $0x21
   1073f:	e8 dd fc ff ff       	call   10421 <outb>
   10744:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   10747:	68 ff 00 00 00       	push   $0xff
   1074c:	68 a1 00 00 00       	push   $0xa1
   10751:	e8 cb fc ff ff       	call   10421 <outb>
   10756:	83 c4 08             	add    $0x8,%esp


}
   10759:	90                   	nop
   1075a:	c9                   	leave  
   1075b:	c3                   	ret    

0001075c <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1075c:	55                   	push   %ebp
   1075d:	89 e5                	mov    %esp,%ebp
   1075f:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10762:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10769:	eb 14                	jmp    1077f <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   1076b:	68 2a 00 01 00       	push   $0x1002a
   10770:	ff 75 fc             	push   -0x4(%ebp)
   10773:	e8 11 ff ff ff       	call   10689 <idt_install>
   10778:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1077b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1077f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10786:	7e e3                	jle    1076b <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10788:	68 47 00 01 00       	push   $0x10047
   1078d:	6a 00                	push   $0x0
   1078f:	e8 f5 fe ff ff       	call   10689 <idt_install>
   10794:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10797:	68 64 00 01 00       	push   $0x10064
   1079c:	6a 01                	push   $0x1
   1079e:	e8 e6 fe ff ff       	call   10689 <idt_install>
   107a3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   107a6:	68 81 00 01 00       	push   $0x10081
   107ab:	6a 02                	push   $0x2
   107ad:	e8 d7 fe ff ff       	call   10689 <idt_install>
   107b2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   107b5:	68 9e 00 01 00       	push   $0x1009e
   107ba:	6a 03                	push   $0x3
   107bc:	e8 c8 fe ff ff       	call   10689 <idt_install>
   107c1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   107c4:	68 bb 00 01 00       	push   $0x100bb
   107c9:	6a 04                	push   $0x4
   107cb:	e8 b9 fe ff ff       	call   10689 <idt_install>
   107d0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   107d3:	68 d8 00 01 00       	push   $0x100d8
   107d8:	6a 05                	push   $0x5
   107da:	e8 aa fe ff ff       	call   10689 <idt_install>
   107df:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   107e2:	68 f5 00 01 00       	push   $0x100f5
   107e7:	6a 06                	push   $0x6
   107e9:	e8 9b fe ff ff       	call   10689 <idt_install>
   107ee:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   107f1:	68 12 01 01 00       	push   $0x10112
   107f6:	6a 07                	push   $0x7
   107f8:	e8 8c fe ff ff       	call   10689 <idt_install>
   107fd:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   10800:	68 2f 01 01 00       	push   $0x1012f
   10805:	6a 08                	push   $0x8
   10807:	e8 7d fe ff ff       	call   10689 <idt_install>
   1080c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   1080f:	68 4a 01 01 00       	push   $0x1014a
   10814:	6a 0a                	push   $0xa
   10816:	e8 6e fe ff ff       	call   10689 <idt_install>
   1081b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1081e:	68 65 01 01 00       	push   $0x10165
   10823:	6a 0b                	push   $0xb
   10825:	e8 5f fe ff ff       	call   10689 <idt_install>
   1082a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1082d:	68 80 01 01 00       	push   $0x10180
   10832:	6a 0c                	push   $0xc
   10834:	e8 50 fe ff ff       	call   10689 <idt_install>
   10839:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1083c:	68 9b 01 01 00       	push   $0x1019b
   10841:	6a 0d                	push   $0xd
   10843:	e8 41 fe ff ff       	call   10689 <idt_install>
   10848:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1084b:	68 b6 01 01 00       	push   $0x101b6
   10850:	6a 0e                	push   $0xe
   10852:	e8 32 fe ff ff       	call   10689 <idt_install>
   10857:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1085a:	68 d1 01 01 00       	push   $0x101d1
   1085f:	6a 10                	push   $0x10
   10861:	e8 23 fe ff ff       	call   10689 <idt_install>
   10866:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10869:	68 ee 01 01 00       	push   $0x101ee
   1086e:	6a 11                	push   $0x11
   10870:	e8 14 fe ff ff       	call   10689 <idt_install>
   10875:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10878:	68 09 02 01 00       	push   $0x10209
   1087d:	6a 12                	push   $0x12
   1087f:	e8 05 fe ff ff       	call   10689 <idt_install>
   10884:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10887:	68 26 02 01 00       	push   $0x10226
   1088c:	6a 13                	push   $0x13
   1088e:	e8 f6 fd ff ff       	call   10689 <idt_install>
   10893:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10896:	68 43 02 01 00       	push   $0x10243
   1089b:	6a 14                	push   $0x14
   1089d:	e8 e7 fd ff ff       	call   10689 <idt_install>
   108a2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   108a5:	68 60 02 01 00       	push   $0x10260
   108aa:	6a 15                	push   $0x15
   108ac:	e8 d8 fd ff ff       	call   10689 <idt_install>
   108b1:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   108b4:	b8 20 0d 02 00       	mov    $0x20d20,%eax
   108b9:	68 00 08 00 00       	push   $0x800
   108be:	50                   	push   %eax
   108bf:	e8 7e fb ff ff       	call   10442 <lidt>
   108c4:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   108c7:	e8 fd fd ff ff       	call   106c9 <init_pic>
}
   108cc:	90                   	nop
   108cd:	c9                   	leave  
   108ce:	c3                   	ret    

000108cf <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   108cf:	55                   	push   %ebp
   108d0:	89 e5                	mov    %esp,%ebp
   108d2:	53                   	push   %ebx
   108d3:	83 ec 14             	sub    $0x14,%esp
   108d6:	8b 45 08             	mov    0x8(%ebp),%eax
   108d9:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   108dc:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   108e0:	76 7f                	jbe    10961 <idt_enable+0x92>
   108e2:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   108e6:	77 79                	ja     10961 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   108e8:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   108ec:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   108f0:	77 33                	ja     10925 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   108f2:	6a 21                	push   $0x21
   108f4:	e8 0b fb ff ff       	call   10404 <inb>
   108f9:	83 c4 04             	add    $0x4,%esp
   108fc:	89 c3                	mov    %eax,%ebx
   108fe:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10902:	ba 01 00 00 00       	mov    $0x1,%edx
   10907:	89 c1                	mov    %eax,%ecx
   10909:	d3 e2                	shl    %cl,%edx
   1090b:	89 d0                	mov    %edx,%eax
   1090d:	f7 d0                	not    %eax
   1090f:	21 d8                	and    %ebx,%eax
   10911:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10914:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10918:	50                   	push   %eax
   10919:	6a 21                	push   $0x21
   1091b:	e8 01 fb ff ff       	call   10421 <outb>
   10920:	83 c4 08             	add    $0x8,%esp
   10923:	eb 3d                	jmp    10962 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10925:	68 a1 00 00 00       	push   $0xa1
   1092a:	e8 d5 fa ff ff       	call   10404 <inb>
   1092f:	83 c4 04             	add    $0x4,%esp
   10932:	89 c3                	mov    %eax,%ebx
   10934:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10938:	83 e8 08             	sub    $0x8,%eax
   1093b:	ba 01 00 00 00       	mov    $0x1,%edx
   10940:	89 c1                	mov    %eax,%ecx
   10942:	d3 e2                	shl    %cl,%edx
   10944:	89 d0                	mov    %edx,%eax
   10946:	f7 d0                	not    %eax
   10948:	21 d8                	and    %ebx,%eax
   1094a:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1094d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10951:	50                   	push   %eax
   10952:	68 a1 00 00 00       	push   $0xa1
   10957:	e8 c5 fa ff ff       	call   10421 <outb>
   1095c:	83 c4 08             	add    $0x8,%esp
   1095f:	eb 01                	jmp    10962 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10961:	90                   	nop
  }
  
}
   10962:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10965:	c9                   	leave  
   10966:	c3                   	ret    

00010967 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   10967:	55                   	push   %ebp
   10968:	89 e5                	mov    %esp,%ebp
   1096a:	53                   	push   %ebx
   1096b:	83 ec 14             	sub    $0x14,%esp
   1096e:	8b 45 08             	mov    0x8(%ebp),%eax
   10971:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10974:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10978:	76 7b                	jbe    109f5 <idt_disable+0x8e>
   1097a:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   1097e:	77 75                	ja     109f5 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10980:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10984:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10988:	77 31                	ja     109bb <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1098a:	6a 21                	push   $0x21
   1098c:	e8 73 fa ff ff       	call   10404 <inb>
   10991:	83 c4 04             	add    $0x4,%esp
   10994:	89 c3                	mov    %eax,%ebx
   10996:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1099a:	ba 01 00 00 00       	mov    $0x1,%edx
   1099f:	89 c1                	mov    %eax,%ecx
   109a1:	d3 e2                	shl    %cl,%edx
   109a3:	89 d0                	mov    %edx,%eax
   109a5:	09 d8                	or     %ebx,%eax
   109a7:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   109aa:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   109ae:	50                   	push   %eax
   109af:	6a 21                	push   $0x21
   109b1:	e8 6b fa ff ff       	call   10421 <outb>
   109b6:	83 c4 08             	add    $0x8,%esp
   109b9:	eb 3b                	jmp    109f6 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   109bb:	68 a1 00 00 00       	push   $0xa1
   109c0:	e8 3f fa ff ff       	call   10404 <inb>
   109c5:	83 c4 04             	add    $0x4,%esp
   109c8:	89 c3                	mov    %eax,%ebx
   109ca:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   109ce:	83 e8 08             	sub    $0x8,%eax
   109d1:	ba 01 00 00 00       	mov    $0x1,%edx
   109d6:	89 c1                	mov    %eax,%ecx
   109d8:	d3 e2                	shl    %cl,%edx
   109da:	89 d0                	mov    %edx,%eax
   109dc:	09 d8                	or     %ebx,%eax
   109de:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   109e1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   109e5:	50                   	push   %eax
   109e6:	68 a1 00 00 00       	push   $0xa1
   109eb:	e8 31 fa ff ff       	call   10421 <outb>
   109f0:	83 c4 08             	add    $0x8,%esp
   109f3:	eb 01                	jmp    109f6 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   109f5:	90                   	nop
  }
  
}
   109f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   109f9:	c9                   	leave  
   109fa:	c3                   	ret    

000109fb <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   109fb:	55                   	push   %ebp
   109fc:	89 e5                	mov    %esp,%ebp
  cli();
   109fe:	e8 ec f9 ff ff       	call   103ef <cli>
}
   10a03:	90                   	nop
   10a04:	5d                   	pop    %ebp
   10a05:	c3                   	ret    

00010a06 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   10a06:	55                   	push   %ebp
   10a07:	89 e5                	mov    %esp,%ebp
  sti();
   10a09:	e8 e8 f9 ff ff       	call   103f6 <sti>
}
   10a0e:	90                   	nop
   10a0f:	5d                   	pop    %ebp
   10a10:	c3                   	ret    

00010a11 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   10a11:	55                   	push   %ebp
   10a12:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   10a14:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   10a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a1c:	78 29                	js     10a47 <pic_send_eoi+0x36>
   10a1e:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   10a22:	7f 23                	jg     10a47 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   10a24:	6a 20                	push   $0x20
   10a26:	6a 20                	push   $0x20
   10a28:	e8 f4 f9 ff ff       	call   10421 <outb>
   10a2d:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   10a30:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10a34:	7e 12                	jle    10a48 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   10a36:	6a 20                	push   $0x20
   10a38:	68 a0 00 00 00       	push   $0xa0
   10a3d:	e8 df f9 ff ff       	call   10421 <outb>
   10a42:	83 c4 08             	add    $0x8,%esp
   10a45:	eb 01                	jmp    10a48 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   10a47:	90                   	nop
  }

   10a48:	c9                   	leave  
   10a49:	c3                   	ret    

00010a4a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10a4a:	55                   	push   %ebp
   10a4b:	89 e5                	mov    %esp,%ebp
   10a4d:	83 ec 08             	sub    $0x8,%esp
   10a50:	8b 45 08             	mov    0x8(%ebp),%eax
   10a53:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a56:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10a5a:	89 d0                	mov    %edx,%eax
   10a5c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10a5f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a63:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10a67:	ee                   	out    %al,(%dx)
}
   10a68:	90                   	nop
   10a69:	c9                   	leave  
   10a6a:	c3                   	ret    

00010a6b <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   10a6b:	55                   	push   %ebp
   10a6c:	89 e5                	mov    %esp,%ebp
   10a6e:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10a71:	a1 20 1d 02 00       	mov    0x21d20,%eax
   10a76:	83 c0 01             	add    $0x1,%eax
   10a79:	a3 20 1d 02 00       	mov    %eax,0x21d20

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   10a7e:	83 ec 0c             	sub    $0xc,%esp
   10a81:	6a 20                	push   $0x20
   10a83:	e8 89 ff ff ff       	call   10a11 <pic_send_eoi>
   10a88:	83 c4 10             	add    $0x10,%esp
}
   10a8b:	90                   	nop
   10a8c:	c9                   	leave  
   10a8d:	c3                   	ret    

00010a8e <init_pit>:


static void init_pit(void) {
   10a8e:	55                   	push   %ebp
   10a8f:	89 e5                	mov    %esp,%ebp
   10a91:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   10a94:	6a 36                	push   $0x36
   10a96:	6a 43                	push   $0x43
   10a98:	e8 ad ff ff ff       	call   10a4a <outb>
   10a9d:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   10aa0:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   10aa6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10aaa:	0f b6 c0             	movzbl %al,%eax
   10aad:	50                   	push   %eax
   10aae:	6a 40                	push   $0x40
   10ab0:	e8 95 ff ff ff       	call   10a4a <outb>
   10ab5:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   10ab8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10abc:	66 c1 e8 08          	shr    $0x8,%ax
   10ac0:	0f b6 c0             	movzbl %al,%eax
   10ac3:	50                   	push   %eax
   10ac4:	6a 40                	push   $0x40
   10ac6:	e8 7f ff ff ff       	call   10a4a <outb>
   10acb:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   10ace:	83 ec 08             	sub    $0x8,%esp
   10ad1:	68 7b 02 01 00       	push   $0x1027b
   10ad6:	6a 20                	push   $0x20
   10ad8:	e8 ac fb ff ff       	call   10689 <idt_install>
   10add:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   10ae0:	83 ec 0c             	sub    $0xc,%esp
   10ae3:	6a 20                	push   $0x20
   10ae5:	e8 e5 fd ff ff       	call   108cf <idt_enable>
   10aea:	83 c4 10             	add    $0x10,%esp

}
   10aed:	90                   	nop
   10aee:	c9                   	leave  
   10aef:	c3                   	ret    

00010af0 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   10af0:	55                   	push   %ebp
   10af1:	89 e5                	mov    %esp,%ebp
   10af3:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10af6:	c7 05 20 1d 02 00 00 	movl   $0x0,0x21d20
   10afd:	00 00 00 
    init_pit();
   10b00:	e8 89 ff ff ff       	call   10a8e <init_pit>
   10b05:	90                   	nop
   10b06:	c9                   	leave  
   10b07:	c3                   	ret    

00010b08 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   10b08:	55                   	push   %ebp
   10b09:	89 e5                	mov    %esp,%ebp
   10b0b:	83 ec 08             	sub    $0x8,%esp
    //1.初始化并重新加载GDT表
    gdt_init();
   10b0e:	e8 6c f8 ff ff       	call   1037f <gdt_init>

    //2.初始化并加载中断描述符表IDT
    idt_init();
   10b13:	e8 44 fc ff ff       	call   1075c <idt_init>

    //3.初始化定时器的中断处理
    time_init();
   10b18:	e8 d3 ff ff ff       	call   10af0 <time_init>



    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   10b1d:	90                   	nop
   10b1e:	c9                   	leave  
   10b1f:	c3                   	ret    

00010b20 <init_main>:


void init_main(void) {
   10b20:	55                   	push   %ebp
   10b21:	89 e5                	mov    %esp,%ebp
   10b23:	83 ec 08             	sub    $0x8,%esp
    idt_enable_global(); 
   10b26:	e8 db fe ff ff       	call   10a06 <idt_enable_global>
    for (;;){}
   10b2b:	eb fe                	jmp    10b2b <init_main+0xb>
