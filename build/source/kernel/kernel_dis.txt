
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00004930 memsz 0x00004930 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x0001da20 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x00033000 align 2**12
         filesz 0x00000124 memsz 0x00000124 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a02  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000f10  00013a20  00013a20  00004a20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001ca20  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   00000124  80000000  00033000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00002089  00000000  00000000  00007124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000780  00000000  00000000  000091ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005eaf  00000000  00000000  0000992d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001ca7  00000000  00000000  0000f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000260  00000000  00000000  00011488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000130c  00000000  00000000  000116e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  000129f4  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001618  00000000  00000000  00012a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
00010371 l     F .text	0000005d addr_alloc_init
000103ce l     F .text	00000067 addr_alloc_page
00010435 l     F .text	00000061 addr_free_page
00010496 l     F .text	00000066 show_mem_info
000104fc l     F .text	00000037 total_mem_size
00013b68 l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
00013b7c l     O .rodata	0000000c __func__.1
0001099a l     F .text	00000010 curr_page_dir
00013b88 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010a43 l     F .text	0000003d list_node_init
00013c88 l     O .rodata	0000000f __func__.10
00010a80 l     F .text	0000002d list_node_next
00013cf8 l     O .rodata	0000000f __func__.3
00010aad l     F .text	00000047 list_init
00013c98 l     O .rodata	0000000a __func__.9
00010af4 l     F .text	00000035 list_is_empty
00013d08 l     O .rodata	0000000e __func__.2
00010b29 l     F .text	0000002d list_get_size
00013ce8 l     O .rodata	0000000e __func__.4
00010b56 l     F .text	0000002c list_get_first
00013cd8 l     O .rodata	0000000f __func__.5
00010b82 l     F .text	00000017 up2
00010b99 l     F .text	00000007 hlt
00010ba0 l     F .text	0000000c write_cr3
00010bac l     F .text	0000001a far_jump
00010bc6 l     F .text	00000017 write_tr
00010bdd l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a8 task_manager
000181c0 l     O .bss	00005e00 task_table
0001dfc0 l     O .bss	00000014 task_table_lock
00010bee l     F .text	0000001f switch_to_tss
00010c28 l     F .text	00000172 tss_init
00013c7c l     O .rodata	0000000a __func__.11
0001dfe0 l     O .bss	00000200 empty_task_stack
00010ea1 l     F .text	0000000a empty_task
00013ca4 l     O .rodata	00000010 __func__.8
00013cb4 l     O .rodata	0000000f __func__.7
00013cc4 l     O .rodata	00000011 __func__.6
00013d18 l     O .rodata	0000000f __func__.1
00013d28 l     O .rodata	00000010 __func__.0
000113d7 l     F .text	00000068 alloc_task
0001143f l     F .text	00000033 free_task
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
0001165a l     F .text	00000028 lgdt
0001e1e0 l     O .bss	00010000 gdt_table
0002e1e0 l     O .bss	00002000 is_alloc
000301e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011890 l     F .text	00000007 cli
00011897 l     F .text	00000007 sti
0001189e l     F .text	00000007 hlt
000118a5 l     F .text	0000001d inb
000118c2 l     F .text	00000021 outb
000118e3 l     F .text	00000028 lidt
0001190b l     F .text	00000011 read_cr2
0001191c l     F .text	00000010 read_eflags
0001192c l     F .text	0000000b write_eflags
00030200 l     O .bss	00000800 idt_table
00011937 l     F .text	0000010f print_exception_fram
00011a46 l     F .text	0000003e do_default_handler
00011e5c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00014300 l     O .rodata	0000002c sys_table
00000000 l    df *ABS*	00000000 time.c
000122f1 l     F .text	00000021 outb
00030a00 l     O .bss	00000004 sys_tick
0001233a l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000143ec l     O .rodata	0000000c __func__.1
000143f8 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
000124a8 l     F .text	00000047 list_init
000144b8 l     O .rodata	0000000a __func__.1
000124ef l     F .text	00000035 list_is_empty
000144c4 l     O .rodata	0000000e __func__.0
000144ac l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000126ba l     F .text	00000047 list_init
00014578 l     O .rodata	0000000a __func__.1
00012701 l     F .text	00000035 list_is_empty
00014584 l     O .rodata	0000000e __func__.0
0001456c l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
0001288a l     F .text	00000047 list_init
00014698 l     O .rodata	0000000a __func__.3
000128d1 l     F .text	0000002d list_get_size
000146a4 l     O .rodata	0000000e __func__.2
000128fe l     F .text	0000002c list_get_first
000146c4 l     O .rodata	0000000f __func__.0
0001292a l     F .text	0000002d list_get_last
000146b4 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012c32 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00014794 l     O .rodata	0000000c __func__.3
000147a0 l     O .rodata	0000000f __func__.2
000147b0 l     O .rodata	0000000f __func__.1
000147c0 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00013497 l     F .text	00000035 list_is_empty
000148c8 l     O .rodata	0000000e __func__.5
000134cc l     F .text	0000002d list_get_size
00014900 l     O .rodata	0000000e __func__.2
000148b4 l     O .rodata	00000012 __func__.6
000148d8 l     O .rodata	00000011 __func__.4
000148ec l     O .rodata	00000012 __func__.3
00014910 l     O .rodata	00000011 __func__.1
00014924 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00013842 l     F .text	0000001d inb
0001385f l     F .text	00000021 outb
00030a04 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
800000c9 l     F .first_task	0000001b fork
00012d19 g     F .text	00000078 bitmap_get_bit
000130ec g     F .text	0000004f kernel_memcpy
000120a4 g     F .text	00000098 idt_enable
00011152 g     F .text	0000000a task_current
00013584 g     F .text	0000008f list_insert_last
000111c4 g     F .text	00000061 sys_yield
00011bb8 g     F .text	0000001c do_handler_segment_not_present
0001108e g     F .text	0000004b task_set_ready
00012e99 g     F .text	00000021 bitmap_is_set
000121db g     F .text	0000000b idt_enable_global
0001313b g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012262 g     F .text	0000008f do_handler_syscall
00013880 g     F .text	00000088 log_init
000114df g     F .text	00000134 sys_fork
0001246b g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012248 g     F .text	0000001a sys_print_msg
00012fb5 g     F .text	00000047 kernel_strcpy
000121d0 g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
800000e4 g     F .first_task	00000035 first_main
00011e19 g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011b10 g     F .text	0000001c do_handler_overflow
00011d8d g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011bf0 g     F .text	000000b1 do_handler_general_protection
00011dfd g     F .text	0000001c do_handler_control_exception
00012861 g     F .text	00000029 sem_count
00011aa0 g     F .text	0000001c do_handler_divider
00012d91 g     F .text	00000108 bitmap_set_bit
00011b80 g     F .text	0000001c do_handler_double_fault
00011ca1 g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000121e6 g     F .text	00000039 pic_send_eoi
000136c4 g     F .text	000000b5 list_remove_last
00011084 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012779 g     F .text	0000006b sem_wait
00010958 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011741 g     F .text	000000b3 gdt_init
00011de1 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011abc g     F .text	0000001c do_handler_debug
00030a20 g     O .bss	00002000 stack
00011472 g     F .text	00000060 sys_sleep
000109aa g     F .text	00000099 memory_free_page
00012957 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00033000 g       *ABS*	00000000 s_first_task
000108a0 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00011eef g     F .text	000001b5 idt_init
000127e4 g     F .text	0000007d sem_notify
00011869 g     F .text	00000027 gdt_free
00011b48 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011d71 g     F .text	0000001c do_handler_fpu_error
00010fa2 g     F .text	000000e2 task_first_init
00011da9 g     F .text	0000001c do_handler_machine_check
000134f9 g     F .text	0000008b list_insert_first
0001138c g     F .text	0000004b task_set_wakeup
00011124 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010722 g     F .text	00000085 memory_creat_uvm
00012ffc g     F .text	00000051 kernel_strncpy
00033124 g       *ABS*	00000000 mem_free_start
000123b4 g     F .text	00000053 kernel_init
00012736 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00013224 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00033000 g       .first_task	00000000 e_data
00012571 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011b9c g     F .text	0000001c do_handler_invalid_tss
0001213c g     F .text	00000094 idt_disable
00033124 g       *ABS*	00000000 e_first_task
00011330 g     F .text	0000005c task_set_sleep
000105e3 g     F .text	0000009b memory_creat_map
00011ad8 g     F .text	0000001c do_handler_nmi
00012524 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
00012c6f g     F .text	00000016 bitmap_byte_count
00011b64 g     F .text	0000001c do_handler_device_unavailable
0001221f g     F .text	00000018 idt_enter_protection
0001067e g     F .text	000000a4 create_kernal_table
00011225 g     F .text	0000010b task_slice_end
00012407 g     F .text	00000064 move_to_first_task
0001317c g     F .text	00000084 kernel_memcmp
00011dc5 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011a84 g     F .text	0000001c do_handler_unknown
0001097a g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00010c0d g     F .text	0000001b task_switch_from_to
00012602 g     F .text	000000b8 mutex_unlock
0001115c g     F .text	00000068 task_switch
000130b7 g     F .text	00000035 kernel_strlen
000110d9 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00011682 g     F .text	000000bf segment_desc_set
00011b2c g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
00013613 g     F .text	000000b1 list_remove_first
00014930 g       .rodata	00000000 e_text
0001304d g     F .text	0000006a kernel_strncmp
00012c85 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012eba g     F .text	000000fb bitmap_alloc_nbits
00010eab g     F .text	000000f7 task_manager_init
000107a7 g     F .text	000000f9 memory_init
00012c39 g     F .text	00000036 pannic
00011bd4 g     F .text	0000001c do_handler_stack_segment_fault
00011af4 g     F .text	0000001c do_handler_breakpoint
00013908 g     F .text	000000fa log_printf
00010d9a g     F .text	00000107 task_init
00013200 g     F .text	00000024 kernel_sprintf
000114d2 g     F .text	0000000d sys_getpid
000117f4 g     F .text	00000075 gdt_alloc_desc
000133c1 g     F .text	000000d6 kernel_itoa
00013779 g     F .text	000000c9 list_remove
00011613 g     F .text	00000047 gate_desc_set
00012237 g     F .text	00000011 idt_leave_protection
00010533 g     F .text	000000b0 find_pte
00012312 g     F .text	00000028 do_handler_time
0001239c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 a9 23 00 00       	call   123b4 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 2a 03 00       	mov    $0x32a20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 41 24 00 00       	jmp    1246b <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 49 1a 00 00       	call   11a84 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 48 1a 00 00       	call   11aa0 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 47 1a 00 00       	call   11abc <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 46 1a 00 00       	call   11ad8 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 45 1a 00 00       	call   11af4 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 44 1a 00 00       	call   11b10 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 43 1a 00 00       	call   11b2c <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 42 1a 00 00       	call   11b48 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 41 1a 00 00       	call   11b64 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 42 1a 00 00       	call   11b80 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 43 1a 00 00       	call   11b9c <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 44 1a 00 00       	call   11bb8 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 45 1a 00 00       	call   11bd4 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 46 1a 00 00       	call   11bf0 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 dc 1a 00 00       	call   11ca1 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 8f 1b 00 00       	call   11d71 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 90 1b 00 00       	call   11d8d <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 8f 1b 00 00       	call   11da9 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 8e 1b 00 00       	call   11dc5 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 8d 1b 00 00       	call   11de1 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 8e 1b 00 00       	call   11dfd <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 86 20 00 00       	call   12312 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 a7 1f 00 00       	call   12262 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10363:	ff 75 08             	push   0x8(%ebp)
   10366:	e8 80 ff ff ff       	call   102eb <write_cr3>
   1036b:	83 c4 04             	add    $0x4,%esp
}
   1036e:	90                   	nop
   1036f:	c9                   	leave  
   10370:	c3                   	ret    

00010371 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10371:	55                   	push   %ebp
   10372:	89 e5                	mov    %esp,%ebp
   10374:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10377:	8b 45 08             	mov    0x8(%ebp),%eax
   1037a:	83 ec 0c             	sub    $0xc,%esp
   1037d:	50                   	push   %eax
   1037e:	e8 a1 21 00 00       	call   12524 <mutex_init>
   10383:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	8b 55 10             	mov    0x10(%ebp),%edx
   1038c:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	8b 55 14             	mov    0x14(%ebp),%edx
   10395:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	8b 55 18             	mov    0x18(%ebp),%edx
   1039e:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 40 20             	mov    0x20(%eax),%eax
   103a7:	8b 55 08             	mov    0x8(%ebp),%edx
   103aa:	8b 4a 24             	mov    0x24(%edx),%ecx
   103ad:	ba 00 00 00 00       	mov    $0x0,%edx
   103b2:	f7 f1                	div    %ecx
   103b4:	89 c2                	mov    %eax,%edx
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	83 c0 14             	add    $0x14,%eax
   103bc:	6a 00                	push   $0x0
   103be:	52                   	push   %edx
   103bf:	ff 75 0c             	push   0xc(%ebp)
   103c2:	50                   	push   %eax
   103c3:	e8 bd 28 00 00       	call   12c85 <bitmap_init>
   103c8:	83 c4 10             	add    $0x10,%esp
}
   103cb:	90                   	nop
   103cc:	c9                   	leave  
   103cd:	c3                   	ret    

000103ce <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   103ce:	55                   	push   %ebp
   103cf:	89 e5                	mov    %esp,%ebp
   103d1:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   103d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   103db:	8b 45 08             	mov    0x8(%ebp),%eax
   103de:	83 ec 0c             	sub    $0xc,%esp
   103e1:	50                   	push   %eax
   103e2:	e8 8a 21 00 00       	call   12571 <mutex_lock>
   103e7:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	83 c0 14             	add    $0x14,%eax
   103f0:	83 ec 04             	sub    $0x4,%esp
   103f3:	ff 75 0c             	push   0xc(%ebp)
   103f6:	6a 00                	push   $0x0
   103f8:	50                   	push   %eax
   103f9:	e8 bc 2a 00 00       	call   12eba <bitmap_alloc_nbits>
   103fe:	83 c4 10             	add    $0x10,%esp
   10401:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   10404:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10408:	78 17                	js     10421 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10410:	8b 45 08             	mov    0x8(%ebp),%eax
   10413:	8b 50 24             	mov    0x24(%eax),%edx
   10416:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10419:	0f af c2             	imul   %edx,%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10421:	8b 45 08             	mov    0x8(%ebp),%eax
   10424:	83 ec 0c             	sub    $0xc,%esp
   10427:	50                   	push   %eax
   10428:	e8 d5 21 00 00       	call   12602 <mutex_unlock>
   1042d:	83 c4 10             	add    $0x10,%esp

  return addr;
   10430:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	53                   	push   %ebx
   10439:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   1043c:	8b 45 08             	mov    0x8(%ebp),%eax
   1043f:	83 ec 0c             	sub    $0xc,%esp
   10442:	50                   	push   %eax
   10443:	e8 29 21 00 00       	call   12571 <mutex_lock>
   10448:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1044b:	8b 45 08             	mov    0x8(%ebp),%eax
   1044e:	8b 50 1c             	mov    0x1c(%eax),%edx
   10451:	8b 45 0c             	mov    0xc(%ebp),%eax
   10454:	29 d0                	sub    %edx,%eax
   10456:	89 c1                	mov    %eax,%ecx
   10458:	8b 45 08             	mov    0x8(%ebp),%eax
   1045b:	8b 58 24             	mov    0x24(%eax),%ebx
   1045e:	89 c8                	mov    %ecx,%eax
   10460:	ba 00 00 00 00       	mov    $0x0,%edx
   10465:	f7 f3                	div    %ebx
   10467:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   1046a:	8b 45 08             	mov    0x8(%ebp),%eax
   1046d:	83 c0 14             	add    $0x14,%eax
   10470:	6a 00                	push   $0x0
   10472:	ff 75 10             	push   0x10(%ebp)
   10475:	ff 75 f4             	push   -0xc(%ebp)
   10478:	50                   	push   %eax
   10479:	e8 13 29 00 00       	call   12d91 <bitmap_set_bit>
   1047e:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10481:	8b 45 08             	mov    0x8(%ebp),%eax
   10484:	83 ec 0c             	sub    $0xc,%esp
   10487:	50                   	push   %eax
   10488:	e8 75 21 00 00       	call   12602 <mutex_unlock>
   1048d:	83 c4 10             	add    $0x10,%esp
}
   10490:	90                   	nop
   10491:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10494:	c9                   	leave  
   10495:	c3                   	ret    

00010496 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   10496:	55                   	push   %ebp
   10497:	89 e5                	mov    %esp,%ebp
   10499:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1049c:	83 ec 0c             	sub    $0xc,%esp
   1049f:	68 20 3a 01 00       	push   $0x13a20
   104a4:	e8 5f 34 00 00       	call   13908 <log_printf>
   104a9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104b3:	eb 29                	jmp    104de <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   104b5:	8b 45 08             	mov    0x8(%ebp),%eax
   104b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104bb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104bf:	8b 45 08             	mov    0x8(%ebp),%eax
   104c2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104c5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c8:	52                   	push   %edx
   104c9:	50                   	push   %eax
   104ca:	ff 75 f4             	push   -0xc(%ebp)
   104cd:	68 2c 3a 01 00       	push   $0x13a2c
   104d2:	e8 31 34 00 00       	call   13908 <log_printf>
   104d7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 50             	mov    0x50(%eax),%eax
   104e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104e7:	7c cc                	jl     104b5 <show_mem_info+0x1f>
    }

    log_printf("");
   104e9:	83 ec 0c             	sub    $0xc,%esp
   104ec:	68 3e 3a 01 00       	push   $0x13a3e
   104f1:	e8 12 34 00 00       	call   13908 <log_printf>
   104f6:	83 c4 10             	add    $0x10,%esp
}
   104f9:	90                   	nop
   104fa:	c9                   	leave  
   104fb:	c3                   	ret    

000104fc <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104fc:	55                   	push   %ebp
   104fd:	89 e5                	mov    %esp,%ebp
   104ff:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10502:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10509:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10510:	eb 11                	jmp    10523 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10512:	8b 45 08             	mov    0x8(%ebp),%eax
   10515:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10518:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1051c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1051f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	8b 40 50             	mov    0x50(%eax),%eax
   10529:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1052c:	7c e4                	jl     10512 <total_mem_size+0x16>
    }

    return mem_size;
   1052e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10531:	c9                   	leave  
   10532:	c3                   	ret    

00010533 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10533:	55                   	push   %ebp
   10534:	89 e5                	mov    %esp,%ebp
   10536:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10539:	ff 75 0c             	push   0xc(%ebp)
   1053c:	e8 b6 fd ff ff       	call   102f7 <pde_index>
   10541:	83 c4 04             	add    $0x4,%esp
   10544:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	01 d0                	add    %edx,%eax
   10550:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10553:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10556:	0f b6 00             	movzbl (%eax),%eax
   10559:	83 e0 01             	and    $0x1,%eax
   1055c:	84 c0                	test   %al,%al
   1055e:	74 10                	je     10570 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10560:	ff 75 f0             	push   -0x10(%ebp)
   10563:	e8 aa fd ff ff       	call   10312 <pde_to_pt_addr>
   10568:	83 c4 04             	add    $0x4,%esp
   1056b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1056e:	eb 57                	jmp    105c7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10570:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10574:	75 07                	jne    1057d <find_pte+0x4a>
      return (pte_t*)0;
   10576:	b8 00 00 00 00       	mov    $0x0,%eax
   1057b:	eb 64                	jmp    105e1 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1057d:	83 ec 08             	sub    $0x8,%esp
   10580:	6a 01                	push   $0x1
   10582:	68 00 60 01 00       	push   $0x16000
   10587:	e8 42 fe ff ff       	call   103ce <addr_alloc_page>
   1058c:	83 c4 10             	add    $0x10,%esp
   1058f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10592:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10596:	75 07                	jne    1059f <find_pte+0x6c>
      return (pte_t*)0;
   10598:	b8 00 00 00 00       	mov    $0x0,%eax
   1059d:	eb 42                	jmp    105e1 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   1059f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   105a5:	83 ec 04             	sub    $0x4,%esp
   105a8:	68 00 10 00 00       	push   $0x1000
   105ad:	6a 00                	push   $0x0
   105af:	ff 75 f4             	push   -0xc(%ebp)
   105b2:	e8 84 2b 00 00       	call   1313b <kernel_memset>
   105b7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   105ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105bd:	83 c8 07             	or     $0x7,%eax
   105c0:	89 c2                	mov    %eax,%edx
   105c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105c5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105c7:	83 ec 0c             	sub    $0xc,%esp
   105ca:	ff 75 0c             	push   0xc(%ebp)
   105cd:	e8 30 fd ff ff       	call   10302 <pte_index>
   105d2:	83 c4 10             	add    $0x10,%esp
   105d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105df:	01 d0                	add    %edx,%eax

}
   105e1:	c9                   	leave  
   105e2:	c3                   	ret    

000105e3 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105e3:	55                   	push   %ebp
   105e4:	89 e5                	mov    %esp,%ebp
   105e6:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105f0:	eb 7e                	jmp    10670 <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105f2:	83 ec 04             	sub    $0x4,%esp
   105f5:	6a 01                	push   $0x1
   105f7:	ff 75 0c             	push   0xc(%ebp)
   105fa:	ff 75 08             	push   0x8(%ebp)
   105fd:	e8 31 ff ff ff       	call   10533 <find_pte>
   10602:	83 c4 10             	add    $0x10,%esp
   10605:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10608:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1060c:	75 17                	jne    10625 <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   1060e:	83 ec 0c             	sub    $0xc,%esp
   10611:	68 3f 3a 01 00       	push   $0x13a3f
   10616:	e8 ed 32 00 00       	call   13908 <log_printf>
   1061b:	83 c4 10             	add    $0x10,%esp
      return -1;
   1061e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10623:	eb 57                	jmp    1067c <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10625:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10628:	0f b6 00             	movzbl (%eax),%eax
   1062b:	83 e0 01             	and    $0x1,%eax
   1062e:	84 c0                	test   %al,%al
   10630:	74 1c                	je     1064e <memory_creat_map+0x6b>
   10632:	68 59 3a 01 00       	push   $0x13a59
   10637:	68 68 3b 01 00       	push   $0x13b68
   1063c:	68 c1 00 00 00       	push   $0xc1
   10641:	68 6c 3a 01 00       	push   $0x13a6c
   10646:	e8 ee 25 00 00       	call   12c39 <pannic>
   1064b:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   1064e:	8b 45 10             	mov    0x10(%ebp),%eax
   10651:	0b 45 18             	or     0x18(%ebp),%eax
   10654:	83 c8 01             	or     $0x1,%eax
   10657:	89 c2                	mov    %eax,%edx
   10659:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065c:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1065e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10665:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1066c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10670:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10673:	3b 45 14             	cmp    0x14(%ebp),%eax
   10676:	0f 8c 76 ff ff ff    	jl     105f2 <memory_creat_map+0xf>

  }
 }
   1067c:	c9                   	leave  
   1067d:	c3                   	ret    

0001067e <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1067e:	55                   	push   %ebp
   1067f:	89 e5                	mov    %esp,%ebp
   10681:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068b:	e9 82 00 00 00       	jmp    10712 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   10690:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10693:	c1 e0 04             	shl    $0x4,%eax
   10696:	05 00 50 01 00       	add    $0x15000,%eax
   1069b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a1:	8b 00                	mov    (%eax),%eax
   106a3:	68 00 10 00 00       	push   $0x1000
   106a8:	50                   	push   %eax
   106a9:	e8 19 fc ff ff       	call   102c7 <down2>
   106ae:	83 c4 08             	add    $0x8,%esp
   106b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b7:	8b 40 08             	mov    0x8(%eax),%eax
   106ba:	68 00 10 00 00       	push   $0x1000
   106bf:	50                   	push   %eax
   106c0:	e8 02 fc ff ff       	call   102c7 <down2>
   106c5:	83 c4 08             	add    $0x8,%esp
   106c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ce:	8b 40 04             	mov    0x4(%eax),%eax
   106d1:	68 00 10 00 00       	push   $0x1000
   106d6:	50                   	push   %eax
   106d7:	e8 f8 fb ff ff       	call   102d4 <up2>
   106dc:	83 c4 08             	add    $0x8,%esp
   106df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106e5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106e8:	c1 e8 0c             	shr    $0xc,%eax
   106eb:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106f1:	8b 40 0c             	mov    0xc(%eax),%eax
   106f4:	83 ec 0c             	sub    $0xc,%esp
   106f7:	50                   	push   %eax
   106f8:	ff 75 e0             	push   -0x20(%ebp)
   106fb:	ff 75 e8             	push   -0x18(%ebp)
   106fe:	ff 75 ec             	push   -0x14(%ebp)
   10701:	68 00 70 01 00       	push   $0x17000
   10706:	e8 d8 fe ff ff       	call   105e3 <memory_creat_map>
   1070b:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1070e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10712:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10715:	83 f8 03             	cmp    $0x3,%eax
   10718:	0f 86 72 ff ff ff    	jbe    10690 <create_kernal_table+0x12>

  }
}
   1071e:	90                   	nop
   1071f:	90                   	nop
   10720:	c9                   	leave  
   10721:	c3                   	ret    

00010722 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10722:	55                   	push   %ebp
   10723:	89 e5                	mov    %esp,%ebp
   10725:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10728:	83 ec 08             	sub    $0x8,%esp
   1072b:	6a 01                	push   $0x1
   1072d:	68 00 60 01 00       	push   $0x16000
   10732:	e8 97 fc ff ff       	call   103ce <addr_alloc_page>
   10737:	83 c4 10             	add    $0x10,%esp
   1073a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1073d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10741:	75 07                	jne    1074a <memory_creat_uvm+0x28>
   10743:	b8 00 00 00 00       	mov    $0x0,%eax
   10748:	eb 5b                	jmp    107a5 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1074a:	83 ec 04             	sub    $0x4,%esp
   1074d:	68 00 10 00 00       	push   $0x1000
   10752:	6a 00                	push   $0x0
   10754:	ff 75 f0             	push   -0x10(%ebp)
   10757:	e8 df 29 00 00       	call   1313b <kernel_memset>
   1075c:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1075f:	83 ec 0c             	sub    $0xc,%esp
   10762:	68 00 00 00 80       	push   $0x80000000
   10767:	e8 8b fb ff ff       	call   102f7 <pde_index>
   1076c:	83 c4 10             	add    $0x10,%esp
   1076f:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10772:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10779:	eb 1f                	jmp    1079a <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1077b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1077e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10785:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10788:	01 c2                	add    %eax,%edx
   1078a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1078d:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   10794:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   10796:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1079a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1079d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   107a0:	77 d9                	ja     1077b <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   107a5:	c9                   	leave  
   107a6:	c3                   	ret    

000107a7 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   107a7:	55                   	push   %ebp
   107a8:	89 e5                	mov    %esp,%ebp
   107aa:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   107ad:	83 ec 0c             	sub    $0xc,%esp
   107b0:	68 a3 3a 01 00       	push   $0x13aa3
   107b5:	e8 4e 31 00 00       	call   13908 <log_printf>
   107ba:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   107bd:	83 ec 08             	sub    $0x8,%esp
   107c0:	68 24 31 03 00       	push   $0x33124
   107c5:	68 af 3a 01 00       	push   $0x13aaf
   107ca:	e8 39 31 00 00       	call   13908 <log_printf>
   107cf:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107d2:	83 ec 0c             	sub    $0xc,%esp
   107d5:	ff 75 08             	push   0x8(%ebp)
   107d8:	e8 b9 fc ff ff       	call   10496 <show_mem_info>
   107dd:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107e0:	83 ec 0c             	sub    $0xc,%esp
   107e3:	ff 75 08             	push   0x8(%ebp)
   107e6:	e8 11 fd ff ff       	call   104fc <total_mem_size>
   107eb:	83 c4 10             	add    $0x10,%esp
   107ee:	2d 00 00 10 00       	sub    $0x100000,%eax
   107f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107f6:	83 ec 08             	sub    $0x8,%esp
   107f9:	68 00 10 00 00       	push   $0x1000
   107fe:	ff 75 f4             	push   -0xc(%ebp)
   10801:	e8 c1 fa ff ff       	call   102c7 <down2>
   10806:	83 c4 10             	add    $0x10,%esp
   10809:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   1080c:	83 ec 04             	sub    $0x4,%esp
   1080f:	ff 75 f4             	push   -0xc(%ebp)
   10812:	68 00 00 10 00       	push   $0x100000
   10817:	68 c4 3a 01 00       	push   $0x13ac4
   1081c:	e8 e7 30 00 00       	call   13908 <log_printf>
   10821:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10824:	c7 45 f0 24 31 03 00 	movl   $0x33124,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   1082b:	83 ec 0c             	sub    $0xc,%esp
   1082e:	68 00 10 00 00       	push   $0x1000
   10833:	ff 75 f4             	push   -0xc(%ebp)
   10836:	68 00 00 10 00       	push   $0x100000
   1083b:	ff 75 f0             	push   -0x10(%ebp)
   1083e:	68 00 60 01 00       	push   $0x16000
   10843:	e8 29 fb ff ff       	call   10371 <addr_alloc_init>
   10848:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   1084b:	a1 20 60 01 00       	mov    0x16020,%eax
   10850:	c1 e8 0c             	shr    $0xc,%eax
   10853:	83 ec 0c             	sub    $0xc,%esp
   10856:	50                   	push   %eax
   10857:	e8 13 24 00 00       	call   12c6f <bitmap_byte_count>
   1085c:	83 c4 10             	add    $0x10,%esp
   1085f:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10862:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10869:	76 1c                	jbe    10887 <memory_init+0xe0>
   1086b:	68 e4 3a 01 00       	push   $0x13ae4
   10870:	68 7c 3b 01 00       	push   $0x13b7c
   10875:	68 2e 01 00 00       	push   $0x12e
   1087a:	68 6c 3a 01 00       	push   $0x13a6c
   1087f:	e8 b5 23 00 00       	call   12c39 <pannic>
   10884:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10887:	e8 f2 fd ff ff       	call   1067e <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1088c:	b8 00 70 01 00       	mov    $0x17000,%eax
   10891:	83 ec 0c             	sub    $0xc,%esp
   10894:	50                   	push   %eax
   10895:	e8 c6 fa ff ff       	call   10360 <mmu_set_page_dir>
   1089a:	83 c4 10             	add    $0x10,%esp
}
   1089d:	90                   	nop
   1089e:	c9                   	leave  
   1089f:	c3                   	ret    

000108a0 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   108a0:	55                   	push   %ebp
   108a1:	89 e5                	mov    %esp,%ebp
   108a3:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   108a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   108a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   108ac:	68 00 10 00 00       	push   $0x1000
   108b1:	ff 75 10             	push   0x10(%ebp)
   108b4:	e8 1b fa ff ff       	call   102d4 <up2>
   108b9:	83 c4 08             	add    $0x8,%esp
   108bc:	c1 e8 0c             	shr    $0xc,%eax
   108bf:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   108c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108c9:	eb 7a                	jmp    10945 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108cb:	83 ec 08             	sub    $0x8,%esp
   108ce:	6a 01                	push   $0x1
   108d0:	68 00 60 01 00       	push   $0x16000
   108d5:	e8 f4 fa ff ff       	call   103ce <addr_alloc_page>
   108da:	83 c4 10             	add    $0x10,%esp
   108dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   108e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108e4:	75 17                	jne    108fd <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   108e6:	83 ec 0c             	sub    $0xc,%esp
   108e9:	68 08 3b 01 00       	push   $0x13b08
   108ee:	e8 15 30 00 00       	call   13908 <log_printf>
   108f3:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   108f6:	b8 00 00 00 00       	mov    $0x0,%eax
   108fb:	eb 59                	jmp    10956 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   108fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10900:	83 ec 0c             	sub    $0xc,%esp
   10903:	ff 75 14             	push   0x14(%ebp)
   10906:	6a 01                	push   $0x1
   10908:	ff 75 e8             	push   -0x18(%ebp)
   1090b:	ff 75 f4             	push   -0xc(%ebp)
   1090e:	50                   	push   %eax
   1090f:	e8 cf fc ff ff       	call   105e3 <memory_creat_map>
   10914:	83 c4 20             	add    $0x20,%esp
   10917:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   1091a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1091e:	79 1a                	jns    1093a <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10920:	83 ec 08             	sub    $0x8,%esp
   10923:	ff 75 e4             	push   -0x1c(%ebp)
   10926:	68 24 3b 01 00       	push   $0x13b24
   1092b:	e8 d8 2f 00 00       	call   13908 <log_printf>
   10930:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10933:	b8 00 00 00 00       	mov    $0x0,%eax
   10938:	eb 1c                	jmp    10956 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   1093a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10941:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10945:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10948:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   1094b:	0f 8c 7a ff ff ff    	jl     108cb <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10951:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10956:	c9                   	leave  
   10957:	c3                   	ret    

00010958 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10958:	55                   	push   %ebp
   10959:	89 e5                	mov    %esp,%ebp
   1095b:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   1095e:	e8 ef 07 00 00       	call   11152 <task_current>
   10963:	8b 40 6c             	mov    0x6c(%eax),%eax
   10966:	ff 75 10             	push   0x10(%ebp)
   10969:	ff 75 0c             	push   0xc(%ebp)
   1096c:	ff 75 08             	push   0x8(%ebp)
   1096f:	50                   	push   %eax
   10970:	e8 2b ff ff ff       	call   108a0 <memory_alloc_for_page_dir>
   10975:	83 c4 10             	add    $0x10,%esp
}
   10978:	c9                   	leave  
   10979:	c3                   	ret    

0001097a <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   1097a:	55                   	push   %ebp
   1097b:	89 e5                	mov    %esp,%ebp
   1097d:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10980:	83 ec 08             	sub    $0x8,%esp
   10983:	6a 01                	push   $0x1
   10985:	68 00 60 01 00       	push   $0x16000
   1098a:	e8 3f fa ff ff       	call   103ce <addr_alloc_page>
   1098f:	83 c4 10             	add    $0x10,%esp
   10992:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10995:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10998:	c9                   	leave  
   10999:	c3                   	ret    

0001099a <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   1099a:	55                   	push   %ebp
   1099b:	89 e5                	mov    %esp,%ebp
   1099d:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   109a0:	e8 ad 07 00 00       	call   11152 <task_current>
   109a5:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   109a8:	c9                   	leave  
   109a9:	c3                   	ret    

000109aa <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   109aa:	55                   	push   %ebp
   109ab:	89 e5                	mov    %esp,%ebp
   109ad:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   109b0:	8b 45 08             	mov    0x8(%ebp),%eax
   109b3:	85 c0                	test   %eax,%eax
   109b5:	78 17                	js     109ce <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   109b7:	83 ec 04             	sub    $0x4,%esp
   109ba:	6a 01                	push   $0x1
   109bc:	ff 75 08             	push   0x8(%ebp)
   109bf:	68 00 60 01 00       	push   $0x16000
   109c4:	e8 6c fa ff ff       	call   10435 <addr_free_page>
   109c9:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

   109cc:	eb 72                	jmp    10a40 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   109ce:	e8 c7 ff ff ff       	call   1099a <curr_page_dir>
   109d3:	83 ec 04             	sub    $0x4,%esp
   109d6:	6a 00                	push   $0x0
   109d8:	ff 75 08             	push   0x8(%ebp)
   109db:	50                   	push   %eax
   109dc:	e8 52 fb ff ff       	call   10533 <find_pte>
   109e1:	83 c4 10             	add    $0x10,%esp
   109e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   109e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109eb:	74 0d                	je     109fa <memory_free_page+0x50>
   109ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109f0:	0f b6 00             	movzbl (%eax),%eax
   109f3:	83 e0 01             	and    $0x1,%eax
   109f6:	84 c0                	test   %al,%al
   109f8:	75 1c                	jne    10a16 <memory_free_page+0x6c>
   109fa:	68 44 3b 01 00       	push   $0x13b44
   109ff:	68 88 3b 01 00       	push   $0x13b88
   10a04:	68 8c 01 00 00       	push   $0x18c
   10a09:	68 6c 3a 01 00       	push   $0x13a6c
   10a0e:	e8 26 22 00 00       	call   12c39 <pannic>
   10a13:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10a16:	83 ec 0c             	sub    $0xc,%esp
   10a19:	ff 75 f4             	push   -0xc(%ebp)
   10a1c:	e8 18 f9 ff ff       	call   10339 <pte_to_pg_addr>
   10a21:	83 c4 10             	add    $0x10,%esp
   10a24:	83 ec 04             	sub    $0x4,%esp
   10a27:	6a 01                	push   $0x1
   10a29:	50                   	push   %eax
   10a2a:	68 00 60 01 00       	push   $0x16000
   10a2f:	e8 01 fa ff ff       	call   10435 <addr_free_page>
   10a34:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10a40:	90                   	nop
   10a41:	c9                   	leave  
   10a42:	c3                   	ret    

00010a43 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10a43:	55                   	push   %ebp
   10a44:	89 e5                	mov    %esp,%ebp
   10a46:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a4d:	75 19                	jne    10a68 <list_node_init+0x25>
   10a4f:	68 9c 3b 01 00       	push   $0x13b9c
   10a54:	68 88 3c 01 00       	push   $0x13c88
   10a59:	6a 20                	push   $0x20
   10a5b:	68 b4 3b 01 00       	push   $0x13bb4
   10a60:	e8 d4 21 00 00       	call   12c39 <pannic>
   10a65:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10a68:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10a72:	8b 45 08             	mov    0x8(%ebp),%eax
   10a75:	8b 50 04             	mov    0x4(%eax),%edx
   10a78:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7b:	89 10                	mov    %edx,(%eax)
}
   10a7d:	90                   	nop
   10a7e:	c9                   	leave  
   10a7f:	c3                   	ret    

00010a80 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
   10a83:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a8a:	75 19                	jne    10aa5 <list_node_next+0x25>
   10a8c:	68 9c 3b 01 00       	push   $0x13b9c
   10a91:	68 f8 3c 01 00       	push   $0x13cf8
   10a96:	6a 2b                	push   $0x2b
   10a98:	68 b4 3b 01 00       	push   $0x13bb4
   10a9d:	e8 97 21 00 00       	call   12c39 <pannic>
   10aa2:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa8:	8b 40 04             	mov    0x4(%eax),%eax
}
   10aab:	c9                   	leave  
   10aac:	c3                   	ret    

00010aad <list_init>:

static inline void list_init(list_t *list) {
   10aad:	55                   	push   %ebp
   10aae:	89 e5                	mov    %esp,%ebp
   10ab0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10ab3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ab7:	75 19                	jne    10ad2 <list_init+0x25>
   10ab9:	68 f2 3b 01 00       	push   $0x13bf2
   10abe:	68 98 3c 01 00       	push   $0x13c98
   10ac3:	6a 31                	push   $0x31
   10ac5:	68 b4 3b 01 00       	push   $0x13bb4
   10aca:	e8 6a 21 00 00       	call   12c39 <pannic>
   10acf:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10adc:	8b 45 08             	mov    0x8(%ebp),%eax
   10adf:	8b 50 04             	mov    0x4(%eax),%edx
   10ae2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae5:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   10aea:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10af1:	90                   	nop
   10af2:	c9                   	leave  
   10af3:	c3                   	ret    

00010af4 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10af4:	55                   	push   %ebp
   10af5:	89 e5                	mov    %esp,%ebp
   10af7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10afa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10afe:	75 19                	jne    10b19 <list_is_empty+0x25>
   10b00:	68 f2 3b 01 00       	push   $0x13bf2
   10b05:	68 08 3d 01 00       	push   $0x13d08
   10b0a:	6a 38                	push   $0x38
   10b0c:	68 b4 3b 01 00       	push   $0x13bb4
   10b11:	e8 23 21 00 00       	call   12c39 <pannic>
   10b16:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10b19:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1c:	8b 40 08             	mov    0x8(%eax),%eax
   10b1f:	85 c0                	test   %eax,%eax
   10b21:	0f 94 c0             	sete   %al
   10b24:	0f b6 c0             	movzbl %al,%eax
}
   10b27:	c9                   	leave  
   10b28:	c3                   	ret    

00010b29 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10b29:	55                   	push   %ebp
   10b2a:	89 e5                	mov    %esp,%ebp
   10b2c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b33:	75 19                	jne    10b4e <list_get_size+0x25>
   10b35:	68 f2 3b 01 00       	push   $0x13bf2
   10b3a:	68 e8 3c 01 00       	push   $0x13ce8
   10b3f:	6a 3e                	push   $0x3e
   10b41:	68 b4 3b 01 00       	push   $0x13bb4
   10b46:	e8 ee 20 00 00       	call   12c39 <pannic>
   10b4b:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b51:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b54:	c9                   	leave  
   10b55:	c3                   	ret    

00010b56 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10b56:	55                   	push   %ebp
   10b57:	89 e5                	mov    %esp,%ebp
   10b59:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b60:	75 19                	jne    10b7b <list_get_first+0x25>
   10b62:	68 f2 3b 01 00       	push   $0x13bf2
   10b67:	68 d8 3c 01 00       	push   $0x13cd8
   10b6c:	6a 44                	push   $0x44
   10b6e:	68 b4 3b 01 00       	push   $0x13bb4
   10b73:	e8 c1 20 00 00       	call   12c39 <pannic>
   10b78:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7e:	8b 00                	mov    (%eax),%eax
}
   10b80:	c9                   	leave  
   10b81:	c3                   	ret    

00010b82 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10b82:	55                   	push   %ebp
   10b83:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10b85:	8b 55 08             	mov    0x8(%ebp),%edx
   10b88:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b8b:	01 d0                	add    %edx,%eax
   10b8d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b90:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b93:	f7 d8                	neg    %eax
   10b95:	21 d0                	and    %edx,%eax
}
   10b97:	5d                   	pop    %ebp
   10b98:	c3                   	ret    

00010b99 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10b99:	55                   	push   %ebp
   10b9a:	89 e5                	mov    %esp,%ebp
   10b9c:	f4                   	hlt    
   10b9d:	90                   	nop
   10b9e:	5d                   	pop    %ebp
   10b9f:	c3                   	ret    

00010ba0 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10ba0:	55                   	push   %ebp
   10ba1:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba6:	0f 22 d8             	mov    %eax,%cr3
}
   10ba9:	90                   	nop
   10baa:	5d                   	pop    %ebp
   10bab:	c3                   	ret    

00010bac <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
   10baf:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10bb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bb5:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbb:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10bbe:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10bc1:	ff 28                	ljmp   *(%eax)
}
   10bc3:	90                   	nop
   10bc4:	c9                   	leave  
   10bc5:	c3                   	ret    

00010bc6 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10bc6:	55                   	push   %ebp
   10bc7:	89 e5                	mov    %esp,%ebp
   10bc9:	83 ec 04             	sub    $0x4,%esp
   10bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10bd3:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bd7:	0f 00 d8             	ltr    %ax
}
   10bda:	90                   	nop
   10bdb:	c9                   	leave  
   10bdc:	c3                   	ret    

00010bdd <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10bdd:	55                   	push   %ebp
   10bde:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10be0:	ff 75 08             	push   0x8(%ebp)
   10be3:	e8 b8 ff ff ff       	call   10ba0 <write_cr3>
   10be8:	83 c4 04             	add    $0x4,%esp
}
   10beb:	90                   	nop
   10bec:	c9                   	leave  
   10bed:	c3                   	ret    

00010bee <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   10bee:	55                   	push   %ebp
   10bef:	89 e5                	mov    %esp,%ebp
   10bf1:	83 ec 04             	sub    $0x4,%esp
   10bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10bfb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bff:	6a 00                	push   $0x0
   10c01:	50                   	push   %eax
   10c02:	e8 a5 ff ff ff       	call   10bac <far_jump>
   10c07:	83 c4 08             	add    $0x8,%esp
}
   10c0a:	90                   	nop
   10c0b:	c9                   	leave  
   10c0c:	c3                   	ret    

00010c0d <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10c0d:	55                   	push   %ebp
   10c0e:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10c10:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c13:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   10c19:	0f b7 c0             	movzwl %ax,%eax
   10c1c:	50                   	push   %eax
   10c1d:	e8 cc ff ff ff       	call   10bee <switch_to_tss>
   10c22:	83 c4 04             	add    $0x4,%esp
}
   10c25:	90                   	nop
   10c26:	c9                   	leave  
   10c27:	c3                   	ret    

00010c28 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   10c28:	55                   	push   %ebp
   10c29:	89 e5                	mov    %esp,%ebp
   10c2b:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10c2e:	e8 c1 0b 00 00       	call   117f4 <gdt_alloc_desc>
   10c33:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10c36:	8b 45 08             	mov    0x8(%ebp),%eax
   10c39:	83 c0 50             	add    $0x50,%eax
   10c3c:	89 c2                	mov    %eax,%edx
   10c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c41:	0f b7 c0             	movzwl %ax,%eax
   10c44:	68 89 00 00 00       	push   $0x89
   10c49:	6a 68                	push   $0x68
   10c4b:	52                   	push   %edx
   10c4c:	50                   	push   %eax
   10c4d:	e8 30 0a 00 00       	call   11682 <segment_desc_set>
   10c52:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10c55:	8b 45 08             	mov    0x8(%ebp),%eax
   10c58:	83 c0 50             	add    $0x50,%eax
   10c5b:	83 ec 04             	sub    $0x4,%esp
   10c5e:	6a 68                	push   $0x68
   10c60:	6a 00                	push   $0x0
   10c62:	50                   	push   %eax
   10c63:	e8 d3 24 00 00       	call   1313b <kernel_memset>
   10c68:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c71:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   10c77:	8b 45 14             	mov    0x14(%ebp),%eax
   10c7a:	83 e0 01             	and    $0x1,%eax
   10c7d:	85 c0                	test   %eax,%eax
   10c7f:	74 10                	je     10c91 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   10c81:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   10c88:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c8f:	eb 16                	jmp    10ca7 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   10c91:	a1 a0 81 01 00       	mov    0x181a0,%eax
   10c96:	83 c8 03             	or     $0x3,%eax
   10c99:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   10c9c:	a1 a4 81 01 00       	mov    0x181a4,%eax
   10ca1:	83 c8 03             	or     $0x3,%eax
   10ca4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   10caa:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cad:	89 50 70             	mov    %edx,0x70(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   10cb0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb3:	8b 55 10             	mov    0x10(%ebp),%edx
   10cb6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   10cbc:	e8 b9 fc ff ff       	call   1097a <memory_alloc_page>
   10cc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   10cc4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10cc8:	0f 84 9b 00 00 00    	je     10d69 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   10cce:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cd1:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cda:	89 50 54             	mov    %edx,0x54(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   10cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ce3:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   10ce9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cec:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cf9:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10cff:	8b 45 08             	mov    0x8(%ebp),%eax
   10d02:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d08:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0b:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   10d11:	8b 45 08             	mov    0x8(%ebp),%eax
   10d14:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   10d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1d:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d23:	8b 45 08             	mov    0x8(%ebp),%eax
   10d26:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10d35:	8b 45 08             	mov    0x8(%ebp),%eax
   10d38:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d3b:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10d41:	8b 45 08             	mov    0x8(%ebp),%eax
   10d44:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10d4b:	e8 d2 f9 ff ff       	call   10722 <memory_creat_uvm>
   10d50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   10d53:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d57:	74 13                	je     10d6c <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   10d59:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d5f:	89 50 6c             	mov    %edx,0x6c(%eax)
    
    return 0;
   10d62:	b8 00 00 00 00       	mov    $0x0,%eax
   10d67:	eb 2f                	jmp    10d98 <tss_init+0x170>
        goto tss_init_failed;   
   10d69:	90                   	nop
   10d6a:	eb 01                	jmp    10d6d <tss_init+0x145>
        goto tss_init_failed;
   10d6c:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   10d6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d70:	0f b7 c0             	movzwl %ax,%eax
   10d73:	83 ec 0c             	sub    $0xc,%esp
   10d76:	50                   	push   %eax
   10d77:	e8 ed 0a 00 00       	call   11869 <gdt_free>
   10d7c:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   10d7f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d83:	74 0e                	je     10d93 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   10d85:	83 ec 0c             	sub    $0xc,%esp
   10d88:	ff 75 e8             	push   -0x18(%ebp)
   10d8b:	e8 1a fc ff ff       	call   109aa <memory_free_page>
   10d90:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d98:	c9                   	leave  
   10d99:	c3                   	ret    

00010d9a <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   10d9a:	55                   	push   %ebp
   10d9b:	89 e5                	mov    %esp,%ebp
   10d9d:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10da0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10da4:	75 1c                	jne    10dc2 <task_init+0x28>
   10da6:	68 05 3c 01 00       	push   $0x13c05
   10dab:	68 7c 3c 01 00       	push   $0x13c7c
   10db0:	68 8b 00 00 00       	push   $0x8b
   10db5:	68 18 3c 01 00       	push   $0x13c18
   10dba:	e8 7a 1e 00 00       	call   12c39 <pannic>
   10dbf:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp, flag);
   10dc2:	ff 75 18             	push   0x18(%ebp)
   10dc5:	ff 75 14             	push   0x14(%ebp)
   10dc8:	ff 75 10             	push   0x10(%ebp)
   10dcb:	ff 75 08             	push   0x8(%ebp)
   10dce:	e8 55 fe ff ff       	call   10c28 <tss_init>
   10dd3:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd9:	83 c0 18             	add    $0x18,%eax
   10ddc:	83 ec 04             	sub    $0x4,%esp
   10ddf:	6a 20                	push   $0x20
   10de1:	ff 75 0c             	push   0xc(%ebp)
   10de4:	50                   	push   %eax
   10de5:	e8 12 22 00 00       	call   12ffc <kernel_strncpy>
   10dea:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10ded:	8b 45 08             	mov    0x8(%ebp),%eax
   10df0:	83 c0 38             	add    $0x38,%eax
   10df3:	83 ec 0c             	sub    $0xc,%esp
   10df6:	50                   	push   %eax
   10df7:	e8 47 fc ff ff       	call   10a43 <list_node_init>
   10dfc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10dff:	8b 45 08             	mov    0x8(%ebp),%eax
   10e02:	83 c0 40             	add    $0x40,%eax
   10e05:	83 ec 0c             	sub    $0xc,%esp
   10e08:	50                   	push   %eax
   10e09:	e8 35 fc ff ff       	call   10a43 <list_node_init>
   10e0e:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10e11:	8b 45 08             	mov    0x8(%ebp),%eax
   10e14:	83 c0 48             	add    $0x48,%eax
   10e17:	83 ec 0c             	sub    $0xc,%esp
   10e1a:	50                   	push   %eax
   10e1b:	e8 23 fc ff ff       	call   10a43 <list_node_init>
   10e20:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   10e23:	8b 45 08             	mov    0x8(%ebp),%eax
   10e26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2f:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
   10e36:	8b 45 08             	mov    0x8(%ebp),%eax
   10e39:	8b 50 10             	mov    0x10(%eax),%edx
   10e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3f:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep = 0;
   10e42:	8b 45 08             	mov    0x8(%ebp),%eax
   10e45:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    task->pid = (uint32_t)task;
   10e4c:	8b 55 08             	mov    0x8(%ebp),%edx
   10e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e52:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   10e55:	8b 45 08             	mov    0x8(%ebp),%eax
   10e58:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10e5f:	e8 bb 13 00 00       	call   1221f <idt_enter_protection>
   10e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10e67:	8b 45 08             	mov    0x8(%ebp),%eax
   10e6a:	83 c0 40             	add    $0x40,%eax
   10e6d:	83 ec 08             	sub    $0x8,%esp
   10e70:	50                   	push   %eax
   10e71:	68 10 80 01 00       	push   $0x18010
   10e76:	e8 09 27 00 00       	call   13584 <list_insert_last>
   10e7b:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10e7e:	83 ec 0c             	sub    $0xc,%esp
   10e81:	ff 75 08             	push   0x8(%ebp)
   10e84:	e8 05 02 00 00       	call   1108e <task_set_ready>
   10e89:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10e8c:	83 ec 0c             	sub    $0xc,%esp
   10e8f:	ff 75 f4             	push   -0xc(%ebp)
   10e92:	e8 a0 13 00 00       	call   12237 <idt_leave_protection>
   10e97:	83 c4 10             	add    $0x10,%esp

    return 1;
   10e9a:	b8 01 00 00 00       	mov    $0x1,%eax
}
   10e9f:	c9                   	leave  
   10ea0:	c3                   	ret    

00010ea1 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10ea1:	55                   	push   %ebp
   10ea2:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10ea4:	e8 f0 fc ff ff       	call   10b99 <hlt>
   10ea9:	eb f9                	jmp    10ea4 <empty_task+0x3>

00010eab <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10eab:	55                   	push   %ebp
   10eac:	89 e5                	mov    %esp,%ebp
   10eae:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   10eb1:	e8 3e 09 00 00       	call   117f4 <gdt_alloc_desc>
   10eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   10eb9:	e8 36 09 00 00       	call   117f4 <gdt_alloc_desc>
   10ebe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ec4:	0f b7 c0             	movzwl %ax,%eax
   10ec7:	68 f2 40 00 00       	push   $0x40f2
   10ecc:	6a ff                	push   $0xffffffff
   10ece:	6a 00                	push   $0x0
   10ed0:	50                   	push   %eax
   10ed1:	e8 ac 07 00 00       	call   11682 <segment_desc_set>
   10ed6:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10ed9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10edc:	0f b7 c0             	movzwl %ax,%eax
   10edf:	68 fa 40 00 00       	push   $0x40fa
   10ee4:	6a ff                	push   $0xffffffff
   10ee6:	6a 00                	push   $0x0
   10ee8:	50                   	push   %eax
   10ee9:	e8 94 07 00 00       	call   11682 <segment_desc_set>
   10eee:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   10ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ef4:	a3 a0 81 01 00       	mov    %eax,0x181a0
    task_manager.app_data_selector = data_selector;
   10ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10efc:	a3 a4 81 01 00       	mov    %eax,0x181a4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10f01:	83 ec 0c             	sub    $0xc,%esp
   10f04:	68 04 80 01 00       	push   $0x18004
   10f09:	e8 9f fb ff ff       	call   10aad <list_init>
   10f0e:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10f11:	83 ec 0c             	sub    $0xc,%esp
   10f14:	68 10 80 01 00       	push   $0x18010
   10f19:	e8 8f fb ff ff       	call   10aad <list_init>
   10f1e:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10f21:	83 ec 0c             	sub    $0xc,%esp
   10f24:	68 1c 80 01 00       	push   $0x1801c
   10f29:	e8 7f fb ff ff       	call   10aad <list_init>
   10f2e:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10f31:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10f38:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10f3b:	ba e0 e1 01 00       	mov    $0x1e1e0,%edx
   10f40:	b8 a1 0e 01 00       	mov    $0x10ea1,%eax
   10f45:	83 ec 0c             	sub    $0xc,%esp
   10f48:	6a 01                	push   $0x1
   10f4a:	52                   	push   %edx
   10f4b:	50                   	push   %eax
   10f4c:	68 4d 3c 01 00       	push   $0x13c4d
   10f51:	68 e4 80 01 00       	push   $0x180e4
   10f56:	e8 3f fe ff ff       	call   10d9a <task_init>
   10f5b:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 

    //5.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10f5e:	83 ec 0c             	sub    $0xc,%esp
   10f61:	68 e4 80 01 00       	push   $0x180e4
   10f66:	e8 6e 01 00 00       	call   110d9 <task_set_unready>
   10f6b:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10f6e:	c7 05 e4 80 01 00 00 	movl   $0x0,0x180e4
   10f75:	00 00 00 


    //6.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   10f78:	83 ec 04             	sub    $0x4,%esp
   10f7b:	68 00 5e 00 00       	push   $0x5e00
   10f80:	6a 00                	push   $0x0
   10f82:	68 c0 81 01 00       	push   $0x181c0
   10f87:	e8 af 21 00 00       	call   1313b <kernel_memset>
   10f8c:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   10f8f:	83 ec 0c             	sub    $0xc,%esp
   10f92:	68 c0 df 01 00       	push   $0x1dfc0
   10f97:	e8 88 15 00 00       	call   12524 <mutex_init>
   10f9c:	83 c4 10             	add    $0x10,%esp

  
}
   10f9f:	90                   	nop
   10fa0:	c9                   	leave  
   10fa1:	c3                   	ret    

00010fa2 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   10fa2:	55                   	push   %ebp
   10fa3:	89 e5                	mov    %esp,%ebp
   10fa5:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   10fa8:	b8 24 31 03 00       	mov    $0x33124,%eax
   10fad:	2d 00 30 03 00       	sub    $0x33000,%eax
   10fb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   10fb5:	68 00 10 00 00       	push   $0x1000
   10fba:	ff 75 f4             	push   -0xc(%ebp)
   10fbd:	e8 c0 fb ff ff       	call   10b82 <up2>
   10fc2:	83 c4 08             	add    $0x8,%esp
   10fc5:	05 00 a0 00 00       	add    $0xa000,%eax
   10fca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10fd3:	72 1c                	jb     10ff1 <task_first_init+0x4f>
   10fd5:	68 58 3c 01 00       	push   $0x13c58
   10fda:	68 a4 3c 01 00       	push   $0x13ca4
   10fdf:	68 17 01 00 00       	push   $0x117
   10fe4:	68 18 3c 01 00       	push   $0x13c18
   10fe9:	e8 4b 1c 00 00       	call   12c39 <pannic>
   10fee:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start = (uint32_t)first_task_entry;
   10ff1:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start, task_start + alloc_size, TASK_FLAGS_USER);
   10ff8:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffe:	01 d0                	add    %edx,%eax
   11000:	83 ec 0c             	sub    $0xc,%esp
   11003:	6a 00                	push   $0x0
   11005:	50                   	push   %eax
   11006:	ff 75 ec             	push   -0x14(%ebp)
   11009:	68 6f 3c 01 00       	push   $0x13c6f
   1100e:	68 28 80 01 00       	push   $0x18028
   11013:	e8 82 fd ff ff       	call   10d9a <task_init>
   11018:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   1101b:	a1 e0 80 01 00       	mov    0x180e0,%eax
   11020:	0f b7 c0             	movzwl %ax,%eax
   11023:	83 ec 0c             	sub    $0xc,%esp
   11026:	50                   	push   %eax
   11027:	e8 9a fb ff ff       	call   10bc6 <write_tr>
   1102c:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   1102f:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   11036:	80 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11039:	a1 94 80 01 00       	mov    0x18094,%eax
   1103e:	83 ec 0c             	sub    $0xc,%esp
   11041:	50                   	push   %eax
   11042:	e8 96 fb ff ff       	call   10bdd <mmu_set_page_dir>
   11047:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   1104a:	a1 00 80 01 00       	mov    0x18000,%eax
   1104f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start, alloc_size, PTE_P | PTE_W | PTE_U);
   11055:	83 ec 04             	sub    $0x4,%esp
   11058:	6a 07                	push   $0x7
   1105a:	ff 75 f0             	push   -0x10(%ebp)
   1105d:	ff 75 ec             	push   -0x14(%ebp)
   11060:	e8 f3 f8 ff ff       	call   10958 <memory_alloc_page_for>
   11065:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   11068:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1106b:	83 ec 04             	sub    $0x4,%esp
   1106e:	50                   	push   %eax
   1106f:	68 00 30 03 00       	push   $0x33000
   11074:	68 00 00 00 80       	push   $0x80000000
   11079:	e8 6e 20 00 00       	call   130ec <kernel_memcpy>
   1107e:	83 c4 10             	add    $0x10,%esp
}
   11081:	90                   	nop
   11082:	c9                   	leave  
   11083:	c3                   	ret    

00011084 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   11084:	55                   	push   %ebp
   11085:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11087:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   1108c:	5d                   	pop    %ebp
   1108d:	c3                   	ret    

0001108e <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   1108e:	55                   	push   %ebp
   1108f:	89 e5                	mov    %esp,%ebp
   11091:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11094:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11098:	75 1c                	jne    110b6 <task_set_ready+0x28>
   1109a:	68 05 3c 01 00       	push   $0x13c05
   1109f:	68 b4 3c 01 00       	push   $0x13cb4
   110a4:	68 41 01 00 00       	push   $0x141
   110a9:	68 18 3c 01 00       	push   $0x13c18
   110ae:	e8 86 1b 00 00       	call   12c39 <pannic>
   110b3:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   110b6:	8b 45 08             	mov    0x8(%ebp),%eax
   110b9:	83 c0 38             	add    $0x38,%eax
   110bc:	83 ec 08             	sub    $0x8,%esp
   110bf:	50                   	push   %eax
   110c0:	68 04 80 01 00       	push   $0x18004
   110c5:	e8 ba 24 00 00       	call   13584 <list_insert_last>
   110ca:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   110cd:	8b 45 08             	mov    0x8(%ebp),%eax
   110d0:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   110d6:	90                   	nop
   110d7:	c9                   	leave  
   110d8:	c3                   	ret    

000110d9 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   110d9:	55                   	push   %ebp
   110da:	89 e5                	mov    %esp,%ebp
   110dc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   110df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110e3:	75 1c                	jne    11101 <task_set_unready+0x28>
   110e5:	68 05 3c 01 00       	push   $0x13c05
   110ea:	68 c4 3c 01 00       	push   $0x13cc4
   110ef:	68 50 01 00 00       	push   $0x150
   110f4:	68 18 3c 01 00       	push   $0x13c18
   110f9:	e8 3b 1b 00 00       	call   12c39 <pannic>
   110fe:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   11101:	8b 45 08             	mov    0x8(%ebp),%eax
   11104:	83 c0 38             	add    $0x38,%eax
   11107:	83 ec 08             	sub    $0x8,%esp
   1110a:	50                   	push   %eax
   1110b:	68 04 80 01 00       	push   $0x18004
   11110:	e8 64 26 00 00       	call   13779 <list_remove>
   11115:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11118:	8b 45 08             	mov    0x8(%ebp),%eax
   1111b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11121:	90                   	nop
   11122:	c9                   	leave  
   11123:	c3                   	ret    

00011124 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   11124:	55                   	push   %ebp
   11125:	89 e5                	mov    %esp,%ebp
   11127:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1112a:	83 ec 0c             	sub    $0xc,%esp
   1112d:	68 04 80 01 00       	push   $0x18004
   11132:	e8 1f fa ff ff       	call   10b56 <list_get_first>
   11137:	83 c4 10             	add    $0x10,%esp
   1113a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   1113d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11141:	74 08                	je     1114b <task_ready_first+0x27>
   11143:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11146:	83 e8 38             	sub    $0x38,%eax
   11149:	eb 05                	jmp    11150 <task_ready_first+0x2c>
   1114b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11150:	c9                   	leave  
   11151:	c3                   	ret    

00011152 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   11152:	55                   	push   %ebp
   11153:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11155:	a1 00 80 01 00       	mov    0x18000,%eax
}
   1115a:	5d                   	pop    %ebp
   1115b:	c3                   	ret    

0001115c <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   1115c:	55                   	push   %ebp
   1115d:	89 e5                	mov    %esp,%ebp
   1115f:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11162:	e8 b8 10 00 00       	call   1221f <idt_enter_protection>
   11167:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   1116a:	e8 b5 ff ff ff       	call   11124 <task_ready_first>
   1116f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   11172:	a1 00 80 01 00       	mov    0x18000,%eax
   11177:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1117a:	74 37                	je     111b3 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   1117c:	a1 00 80 01 00       	mov    0x18000,%eax
   11181:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   11184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11188:	75 07                	jne    11191 <task_switch+0x35>
            to = &task_manager.empty_task;
   1118a:	c7 45 f4 e4 80 01 00 	movl   $0x180e4,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   11191:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11194:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   1119a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1119d:	a3 00 80 01 00       	mov    %eax,0x18000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   111a2:	83 ec 08             	sub    $0x8,%esp
   111a5:	ff 75 f4             	push   -0xc(%ebp)
   111a8:	ff 75 ec             	push   -0x14(%ebp)
   111ab:	e8 5d fa ff ff       	call   10c0d <task_switch_from_to>
   111b0:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   111b3:	83 ec 0c             	sub    $0xc,%esp
   111b6:	ff 75 f0             	push   -0x10(%ebp)
   111b9:	e8 79 10 00 00       	call   12237 <idt_leave_protection>
   111be:	83 c4 10             	add    $0x10,%esp
}
   111c1:	90                   	nop
   111c2:	c9                   	leave  
   111c3:	c3                   	ret    

000111c4 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   111c4:	55                   	push   %ebp
   111c5:	89 e5                	mov    %esp,%ebp
   111c7:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   111ca:	e8 50 10 00 00       	call   1221f <idt_enter_protection>
   111cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   111d2:	83 ec 0c             	sub    $0xc,%esp
   111d5:	68 04 80 01 00       	push   $0x18004
   111da:	e8 4a f9 ff ff       	call   10b29 <list_get_size>
   111df:	83 c4 10             	add    $0x10,%esp
   111e2:	83 f8 01             	cmp    $0x1,%eax
   111e5:	7e 29                	jle    11210 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   111e7:	e8 66 ff ff ff       	call   11152 <task_current>
   111ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   111ef:	83 ec 0c             	sub    $0xc,%esp
   111f2:	ff 75 f0             	push   -0x10(%ebp)
   111f5:	e8 df fe ff ff       	call   110d9 <task_set_unready>
   111fa:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   111fd:	83 ec 0c             	sub    $0xc,%esp
   11200:	ff 75 f0             	push   -0x10(%ebp)
   11203:	e8 86 fe ff ff       	call   1108e <task_set_ready>
   11208:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   1120b:	e8 4c ff ff ff       	call   1115c <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11210:	83 ec 0c             	sub    $0xc,%esp
   11213:	ff 75 f4             	push   -0xc(%ebp)
   11216:	e8 1c 10 00 00       	call   12237 <idt_leave_protection>
   1121b:	83 c4 10             	add    $0x10,%esp
    return 0;
   1121e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11223:	c9                   	leave  
   11224:	c3                   	ret    

00011225 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   11225:	55                   	push   %ebp
   11226:	89 e5                	mov    %esp,%ebp
   11228:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   1122b:	83 ec 0c             	sub    $0xc,%esp
   1122e:	68 1c 80 01 00       	push   $0x1801c
   11233:	e8 1e f9 ff ff       	call   10b56 <list_get_first>
   11238:	83 c4 10             	add    $0x10,%esp
   1123b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   1123e:	eb 62                	jmp    112a2 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11240:	83 ec 0c             	sub    $0xc,%esp
   11243:	ff 75 f4             	push   -0xc(%ebp)
   11246:	e8 35 f8 ff ff       	call   10a80 <list_node_next>
   1124b:	83 c4 10             	add    $0x10,%esp
   1124e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   11251:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11255:	74 08                	je     1125f <task_slice_end+0x3a>
   11257:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1125a:	83 e8 38             	sub    $0x38,%eax
   1125d:	eb 05                	jmp    11264 <task_slice_end+0x3f>
   1125f:	b8 00 00 00 00       	mov    $0x0,%eax
   11264:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11267:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1126a:	8b 40 14             	mov    0x14(%eax),%eax
   1126d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11270:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11273:	89 50 14             	mov    %edx,0x14(%eax)
   11276:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11279:	8b 40 14             	mov    0x14(%eax),%eax
   1127c:	85 c0                	test   %eax,%eax
   1127e:	75 1c                	jne    1129c <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11280:	83 ec 0c             	sub    $0xc,%esp
   11283:	ff 75 e8             	push   -0x18(%ebp)
   11286:	e8 01 01 00 00       	call   1138c <task_set_wakeup>
   1128b:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   1128e:	83 ec 0c             	sub    $0xc,%esp
   11291:	ff 75 e8             	push   -0x18(%ebp)
   11294:	e8 f5 fd ff ff       	call   1108e <task_set_ready>
   11299:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1129c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1129f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   112a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112a6:	75 98                	jne    11240 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   112a8:	e8 a5 fe ff ff       	call   11152 <task_current>
   112ad:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   112b0:	81 7d f0 e4 80 01 00 	cmpl   $0x180e4,-0x10(%ebp)
   112b7:	75 23                	jne    112dc <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   112b9:	83 ec 0c             	sub    $0xc,%esp
   112bc:	68 04 80 01 00       	push   $0x18004
   112c1:	e8 2e f8 ff ff       	call   10af4 <list_is_empty>
   112c6:	83 c4 10             	add    $0x10,%esp
   112c9:	85 c0                	test   %eax,%eax
   112cb:	75 60                	jne    1132d <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   112cd:	c7 05 e4 80 01 00 00 	movl   $0x0,0x180e4
   112d4:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   112d7:	e8 80 fe ff ff       	call   1115c <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   112dc:	81 7d f0 e4 80 01 00 	cmpl   $0x180e4,-0x10(%ebp)
   112e3:	74 49                	je     1132e <task_slice_end+0x109>
   112e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e8:	8b 40 10             	mov    0x10(%eax),%eax
   112eb:	8d 50 ff             	lea    -0x1(%eax),%edx
   112ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112f1:	89 50 10             	mov    %edx,0x10(%eax)
   112f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112f7:	8b 40 10             	mov    0x10(%eax),%eax
   112fa:	85 c0                	test   %eax,%eax
   112fc:	75 30                	jne    1132e <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   112fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11301:	8b 50 0c             	mov    0xc(%eax),%edx
   11304:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11307:	89 50 10             	mov    %edx,0x10(%eax)
        task_set_unready(curr_task);
   1130a:	83 ec 0c             	sub    $0xc,%esp
   1130d:	ff 75 f0             	push   -0x10(%ebp)
   11310:	e8 c4 fd ff ff       	call   110d9 <task_set_unready>
   11315:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11318:	83 ec 0c             	sub    $0xc,%esp
   1131b:	ff 75 f0             	push   -0x10(%ebp)
   1131e:	e8 6b fd ff ff       	call   1108e <task_set_ready>
   11323:	83 c4 10             	add    $0x10,%esp
        task_switch();
   11326:	e8 31 fe ff ff       	call   1115c <task_switch>
   1132b:	eb 01                	jmp    1132e <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   1132d:	90                   	nop
    }
}
   1132e:	c9                   	leave  
   1132f:	c3                   	ret    

00011330 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11330:	55                   	push   %ebp
   11331:	89 e5                	mov    %esp,%ebp
   11333:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11336:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1133a:	75 1c                	jne    11358 <task_set_sleep+0x28>
   1133c:	68 05 3c 01 00       	push   $0x13c05
   11341:	68 18 3d 01 00       	push   $0x13d18
   11346:	68 de 01 00 00       	push   $0x1de
   1134b:	68 18 3c 01 00       	push   $0x13c18
   11350:	e8 e4 18 00 00       	call   12c39 <pannic>
   11355:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   11358:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1135c:	74 2b                	je     11389 <task_set_sleep+0x59>

    task->sleep = slice;
   1135e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11361:	8b 45 08             	mov    0x8(%ebp),%eax
   11364:	89 50 14             	mov    %edx,0x14(%eax)
    task->state = TASK_SLEEP;
   11367:	8b 45 08             	mov    0x8(%ebp),%eax
   1136a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11370:	8b 45 08             	mov    0x8(%ebp),%eax
   11373:	83 c0 38             	add    $0x38,%eax
   11376:	83 ec 08             	sub    $0x8,%esp
   11379:	50                   	push   %eax
   1137a:	68 1c 80 01 00       	push   $0x1801c
   1137f:	e8 00 22 00 00       	call   13584 <list_insert_last>
   11384:	83 c4 10             	add    $0x10,%esp
   11387:	eb 01                	jmp    1138a <task_set_sleep+0x5a>
    if (slice == 0) return;
   11389:	90                   	nop
}
   1138a:	c9                   	leave  
   1138b:	c3                   	ret    

0001138c <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   1138c:	55                   	push   %ebp
   1138d:	89 e5                	mov    %esp,%ebp
   1138f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11392:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11396:	75 1c                	jne    113b4 <task_set_wakeup+0x28>
   11398:	68 05 3c 01 00       	push   $0x13c05
   1139d:	68 28 3d 01 00       	push   $0x13d28
   113a2:	68 ec 01 00 00       	push   $0x1ec
   113a7:	68 18 3c 01 00       	push   $0x13c18
   113ac:	e8 88 18 00 00       	call   12c39 <pannic>
   113b1:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   113b4:	8b 45 08             	mov    0x8(%ebp),%eax
   113b7:	83 c0 38             	add    $0x38,%eax
   113ba:	83 ec 08             	sub    $0x8,%esp
   113bd:	50                   	push   %eax
   113be:	68 1c 80 01 00       	push   $0x1801c
   113c3:	e8 b1 23 00 00       	call   13779 <list_remove>
   113c8:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   113cb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   113d4:	90                   	nop
   113d5:	c9                   	leave  
   113d6:	c3                   	ret    

000113d7 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   113d7:	55                   	push   %ebp
   113d8:	89 e5                	mov    %esp,%ebp
   113da:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   113dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   113e4:	83 ec 0c             	sub    $0xc,%esp
   113e7:	68 c0 df 01 00       	push   $0x1dfc0
   113ec:	e8 80 11 00 00       	call   12571 <mutex_lock>
   113f1:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   113f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   113fb:	eb 27                	jmp    11424 <alloc_task+0x4d>
        task_t *curr = task_table + i;
   113fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11400:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   11406:	05 c0 81 01 00       	add    $0x181c0,%eax
   1140b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   1140e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11411:	8b 40 08             	mov    0x8(%eax),%eax
   11414:	85 c0                	test   %eax,%eax
   11416:	75 08                	jne    11420 <alloc_task+0x49>
            task = curr;
   11418:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1141b:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1141e:	eb 0a                	jmp    1142a <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   11420:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11424:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11428:	7e d3                	jle    113fd <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   1142a:	83 ec 0c             	sub    $0xc,%esp
   1142d:	68 c0 df 01 00       	push   $0x1dfc0
   11432:	e8 cb 11 00 00       	call   12602 <mutex_unlock>
   11437:	83 c4 10             	add    $0x10,%esp

    return task;
   1143a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1143d:	c9                   	leave  
   1143e:	c3                   	ret    

0001143f <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   1143f:	55                   	push   %ebp
   11440:	89 e5                	mov    %esp,%ebp
   11442:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   11445:	83 ec 0c             	sub    $0xc,%esp
   11448:	68 c0 df 01 00       	push   $0x1dfc0
   1144d:	e8 1f 11 00 00       	call   12571 <mutex_lock>
   11452:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   11455:	8b 45 08             	mov    0x8(%ebp),%eax
   11458:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   1145f:	83 ec 0c             	sub    $0xc,%esp
   11462:	68 c0 df 01 00       	push   $0x1dfc0
   11467:	e8 96 11 00 00       	call   12602 <mutex_unlock>
   1146c:	83 c4 10             	add    $0x10,%esp
}
   1146f:	90                   	nop
   11470:	c9                   	leave  
   11471:	c3                   	ret    

00011472 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11472:	55                   	push   %ebp
   11473:	89 e5                	mov    %esp,%ebp
   11475:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11478:	e8 a2 0d 00 00       	call   1221f <idt_enter_protection>
   1147d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11480:	e8 cd fc ff ff       	call   11152 <task_current>
   11485:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11488:	83 ec 0c             	sub    $0xc,%esp
   1148b:	ff 75 f0             	push   -0x10(%ebp)
   1148e:	e8 46 fc ff ff       	call   110d9 <task_set_unready>
   11493:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11496:	8b 45 08             	mov    0x8(%ebp),%eax
   11499:	83 c0 09             	add    $0x9,%eax
   1149c:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   114a1:	f7 e2                	mul    %edx
   114a3:	89 d0                	mov    %edx,%eax
   114a5:	c1 e8 03             	shr    $0x3,%eax
   114a8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   114ab:	83 ec 08             	sub    $0x8,%esp
   114ae:	ff 75 ec             	push   -0x14(%ebp)
   114b1:	ff 75 f0             	push   -0x10(%ebp)
   114b4:	e8 77 fe ff ff       	call   11330 <task_set_sleep>
   114b9:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   114bc:	e8 9b fc ff ff       	call   1115c <task_switch>

    idt_leave_protection(state); //TODO:解锁
   114c1:	83 ec 0c             	sub    $0xc,%esp
   114c4:	ff 75 f4             	push   -0xc(%ebp)
   114c7:	e8 6b 0d 00 00       	call   12237 <idt_leave_protection>
   114cc:	83 c4 10             	add    $0x10,%esp
}
   114cf:	90                   	nop
   114d0:	c9                   	leave  
   114d1:	c3                   	ret    

000114d2 <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   114d2:	55                   	push   %ebp
   114d3:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   114d5:	e8 78 fc ff ff       	call   11152 <task_current>
   114da:	8b 40 08             	mov    0x8(%eax),%eax
}
   114dd:	5d                   	pop    %ebp
   114de:	c3                   	ret    

000114df <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   114df:	55                   	push   %ebp
   114e0:	89 e5                	mov    %esp,%ebp
   114e2:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   114e5:	e8 68 fc ff ff       	call   11152 <task_current>
   114ea:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   114ed:	e8 e5 fe ff ff       	call   113d7 <alloc_task>
   114f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   114f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   114f9:	0f 84 09 01 00 00    	je     11608 <sys_fork+0x129>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   114ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11502:	8b 40 54             	mov    0x54(%eax),%eax
   11505:	83 e8 58             	sub    $0x58,%eax
   11508:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp, TASK_FLAGS_USER);
   1150b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1150e:	8b 50 50             	mov    0x50(%eax),%edx
   11511:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11514:	8b 40 34             	mov    0x34(%eax),%eax
   11517:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1151a:	83 c1 18             	add    $0x18,%ecx
   1151d:	83 ec 0c             	sub    $0xc,%esp
   11520:	6a 00                	push   $0x0
   11522:	52                   	push   %edx
   11523:	50                   	push   %eax
   11524:	51                   	push   %ecx
   11525:	ff 75 f0             	push   -0x10(%ebp)
   11528:	e8 6d f8 ff ff       	call   10d9a <task_init>
   1152d:	83 c4 20             	add    $0x20,%esp
   11530:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11533:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11537:	0f 88 ce 00 00 00    	js     1160b <sys_fork+0x12c>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   1153d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11540:	83 c0 50             	add    $0x50,%eax
   11543:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11546:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11549:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11550:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11553:	8b 50 24             	mov    0x24(%eax),%edx
   11556:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11559:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   1155c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1155f:	8b 50 2c             	mov    0x2c(%eax),%edx
   11562:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11565:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11568:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1156b:	8b 50 28             	mov    0x28(%eax),%edx
   1156e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11571:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11574:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11577:	8b 50 14             	mov    0x14(%eax),%edx
   1157a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1157d:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11580:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11583:	8b 50 18             	mov    0x18(%eax),%edx
   11586:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11589:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   1158c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1158f:	8b 10                	mov    (%eax),%edx
   11591:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11594:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11597:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1159a:	8b 50 1c             	mov    0x1c(%eax),%edx
   1159d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115a0:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   115a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115a6:	8b 50 38             	mov    0x38(%eax),%edx
   115a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115ac:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   115af:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115b2:	8b 50 10             	mov    0x10(%eax),%edx
   115b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115b8:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   115bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115be:	8b 50 0c             	mov    0xc(%eax),%edx
   115c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115c4:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   115c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115ca:	8b 50 08             	mov    0x8(%eax),%edx
   115cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115d0:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   115d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115d6:	8b 50 04             	mov    0x4(%eax),%edx
   115d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115dc:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   115df:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115e2:	8b 50 54             	mov    0x54(%eax),%edx
   115e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115e8:	89 50 50             	mov    %edx,0x50(%eax)

    //复用父进程的页目录，之后会复用父进程的只读段，进行读共享写复制
    tss->cr3 = parent_task->tss.cr3;
   115eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115ee:	8b 50 6c             	mov    0x6c(%eax),%edx
   115f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115f4:	89 50 1c             	mov    %edx,0x1c(%eax)


    //记录父进程地址
    child_task->parent = parent_task;
   115f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   115fd:	89 50 04             	mov    %edx,0x4(%eax)

    //反回子进程id
    return child_task->pid;
   11600:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11603:	8b 40 08             	mov    0x8(%eax),%eax
   11606:	eb 09                	jmp    11611 <sys_fork+0x132>
        goto fork_failed;
   11608:	90                   	nop
   11609:	eb 01                	jmp    1160c <sys_fork+0x12d>
        goto fork_failed;
   1160b:	90                   	nop

//fork失败，清理资源
fork_failed:

    return -1;
   1160c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11611:	c9                   	leave  
   11612:	c3                   	ret    

00011613 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11613:	55                   	push   %ebp
   11614:	89 e5                	mov    %esp,%ebp
   11616:	83 ec 08             	sub    $0x8,%esp
   11619:	8b 55 0c             	mov    0xc(%ebp),%edx
   1161c:	8b 45 14             	mov    0x14(%ebp),%eax
   1161f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11623:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11627:	8b 45 10             	mov    0x10(%ebp),%eax
   1162a:	89 c2                	mov    %eax,%edx
   1162c:	8b 45 08             	mov    0x8(%ebp),%eax
   1162f:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11632:	8b 45 10             	mov    0x10(%ebp),%eax
   11635:	c1 e8 10             	shr    $0x10,%eax
   11638:	89 c2                	mov    %eax,%edx
   1163a:	8b 45 08             	mov    0x8(%ebp),%eax
   1163d:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11641:	8b 45 08             	mov    0x8(%ebp),%eax
   11644:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11648:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1164c:	8b 45 08             	mov    0x8(%ebp),%eax
   1164f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11653:	66 89 50 04          	mov    %dx,0x4(%eax)
   11657:	90                   	nop
   11658:	c9                   	leave  
   11659:	c3                   	ret    

0001165a <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1165a:	55                   	push   %ebp
   1165b:	89 e5                	mov    %esp,%ebp
   1165d:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   11660:	8b 45 08             	mov    0x8(%ebp),%eax
   11663:	c1 e8 10             	shr    $0x10,%eax
   11666:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1166a:	8b 45 08             	mov    0x8(%ebp),%eax
   1166d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11671:	8b 45 0c             	mov    0xc(%ebp),%eax
   11674:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   11677:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1167b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1167f:	90                   	nop
   11680:	c9                   	leave  
   11681:	c3                   	ret    

00011682 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   11682:	55                   	push   %ebp
   11683:	89 e5                	mov    %esp,%ebp
   11685:	83 ec 18             	sub    $0x18,%esp
   11688:	8b 55 08             	mov    0x8(%ebp),%edx
   1168b:	8b 45 14             	mov    0x14(%ebp),%eax
   1168e:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11692:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11696:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1169a:	66 c1 e8 03          	shr    $0x3,%ax
   1169e:	0f b7 c0             	movzwl %ax,%eax
   116a1:	c1 e0 03             	shl    $0x3,%eax
   116a4:	05 e0 e1 01 00       	add    $0x1e1e0,%eax
   116a9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   116ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   116af:	89 c2                	mov    %eax,%edx
   116b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116b4:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   116b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   116bb:	c1 e8 10             	shr    $0x10,%eax
   116be:	89 c2                	mov    %eax,%edx
   116c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116c3:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   116c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c9:	c1 e8 18             	shr    $0x18,%eax
   116cc:	89 c2                	mov    %eax,%edx
   116ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116d1:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   116d4:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   116db:	76 1d                	jbe    116fa <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   116dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116e0:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   116e4:	66 0d 00 80          	or     $0x8000,%ax
   116e8:	89 c2                	mov    %eax,%edx
   116ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116ed:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   116f1:	8b 45 10             	mov    0x10(%ebp),%eax
   116f4:	c1 e8 0c             	shr    $0xc,%eax
   116f7:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   116fa:	8b 45 10             	mov    0x10(%ebp),%eax
   116fd:	89 c2                	mov    %eax,%edx
   116ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11702:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   11705:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11708:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1170c:	89 c2                	mov    %eax,%edx
   1170e:	8b 45 10             	mov    0x10(%ebp),%eax
   11711:	c1 e8 08             	shr    $0x8,%eax
   11714:	66 25 00 0f          	and    $0xf00,%ax
   11718:	09 d0                	or     %edx,%eax
   1171a:	89 c2                	mov    %eax,%edx
   1171c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1171f:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   11723:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11726:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1172a:	89 c2                	mov    %eax,%edx
   1172c:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   11730:	80 e4 f0             	and    $0xf0,%ah
   11733:	09 d0                	or     %edx,%eax
   11735:	89 c2                	mov    %eax,%edx
   11737:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1173a:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1173e:	90                   	nop
   1173f:	c9                   	leave  
   11740:	c3                   	ret    

00011741 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11741:	55                   	push   %ebp
   11742:	89 e5                	mov    %esp,%ebp
   11744:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11747:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1174e:	eb 1c                	jmp    1176c <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11750:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11753:	c1 e0 03             	shl    $0x3,%eax
   11756:	0f b7 c0             	movzwl %ax,%eax
   11759:	6a 00                	push   $0x0
   1175b:	6a 00                	push   $0x0
   1175d:	6a 00                	push   $0x0
   1175f:	50                   	push   %eax
   11760:	e8 1d ff ff ff       	call   11682 <segment_desc_set>
   11765:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11768:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1176c:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11773:	7e db                	jle    11750 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11775:	68 92 40 00 00       	push   $0x4092
   1177a:	6a ff                	push   $0xffffffff
   1177c:	6a 00                	push   $0x0
   1177e:	6a 10                	push   $0x10
   11780:	e8 fd fe ff ff       	call   11682 <segment_desc_set>
   11785:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   11788:	c6 05 e2 e1 02 00 01 	movb   $0x1,0x2e1e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   1178f:	68 9a 40 00 00       	push   $0x409a
   11794:	6a ff                	push   $0xffffffff
   11796:	6a 00                	push   $0x0
   11798:	6a 08                	push   $0x8
   1179a:	e8 e3 fe ff ff       	call   11682 <segment_desc_set>
   1179f:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   117a2:	c6 05 e1 e1 02 00 01 	movb   $0x1,0x2e1e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL && DPL >= RPL, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   117a9:	ba ad 02 01 00       	mov    $0x102ad,%edx
   117ae:	b8 f8 e1 01 00       	mov    $0x1e1f8,%eax
   117b3:	68 05 ec 00 00       	push   $0xec05
   117b8:	52                   	push   %edx
   117b9:	6a 08                	push   $0x8
   117bb:	50                   	push   %eax
   117bc:	e8 52 fe ff ff       	call   11613 <gate_desc_set>
   117c1:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   117c4:	c6 05 e3 e1 02 00 01 	movb   $0x1,0x2e1e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   117cb:	b8 e0 e1 01 00       	mov    $0x1e1e0,%eax
   117d0:	83 ec 08             	sub    $0x8,%esp
   117d3:	68 00 00 01 00       	push   $0x10000
   117d8:	50                   	push   %eax
   117d9:	e8 7c fe ff ff       	call   1165a <lgdt>
   117de:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   117e1:	83 ec 0c             	sub    $0xc,%esp
   117e4:	68 e0 01 03 00       	push   $0x301e0
   117e9:	e8 36 0d 00 00       	call   12524 <mutex_init>
   117ee:	83 c4 10             	add    $0x10,%esp
}
   117f1:	90                   	nop
   117f2:	c9                   	leave  
   117f3:	c3                   	ret    

000117f4 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   117f4:	55                   	push   %ebp
   117f5:	89 e5                	mov    %esp,%ebp
   117f7:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   117fa:	83 ec 0c             	sub    $0xc,%esp
   117fd:	68 e0 01 03 00       	push   $0x301e0
   11802:	e8 6a 0d 00 00       	call   12571 <mutex_lock>
   11807:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1180a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11811:	eb 36                	jmp    11849 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   11813:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11816:	05 e0 e1 02 00       	add    $0x2e1e0,%eax
   1181b:	0f b6 00             	movzbl (%eax),%eax
   1181e:	84 c0                	test   %al,%al
   11820:	75 23                	jne    11845 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   11822:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11825:	05 e0 e1 02 00       	add    $0x2e1e0,%eax
   1182a:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   1182d:	83 ec 0c             	sub    $0xc,%esp
   11830:	68 e0 01 03 00       	push   $0x301e0
   11835:	e8 c8 0d 00 00       	call   12602 <mutex_unlock>
   1183a:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1183d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11840:	c1 e0 03             	shl    $0x3,%eax
   11843:	eb 22                	jmp    11867 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11845:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11849:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11850:	7e c1                	jle    11813 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11852:	83 ec 0c             	sub    $0xc,%esp
   11855:	68 e0 01 03 00       	push   $0x301e0
   1185a:	e8 a3 0d 00 00       	call   12602 <mutex_unlock>
   1185f:	83 c4 10             	add    $0x10,%esp
    return -1;
   11862:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11867:	c9                   	leave  
   11868:	c3                   	ret    

00011869 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   11869:	55                   	push   %ebp
   1186a:	89 e5                	mov    %esp,%ebp
   1186c:	83 ec 14             	sub    $0x14,%esp
   1186f:	8b 45 08             	mov    0x8(%ebp),%eax
   11872:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   11876:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1187a:	66 c1 e8 03          	shr    $0x3,%ax
   1187e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   11882:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   11886:	c6 80 e0 e1 02 00 00 	movb   $0x0,0x2e1e0(%eax)
}
   1188d:	90                   	nop
   1188e:	c9                   	leave  
   1188f:	c3                   	ret    

00011890 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11890:	55                   	push   %ebp
   11891:	89 e5                	mov    %esp,%ebp
   11893:	fa                   	cli    
   11894:	90                   	nop
   11895:	5d                   	pop    %ebp
   11896:	c3                   	ret    

00011897 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11897:	55                   	push   %ebp
   11898:	89 e5                	mov    %esp,%ebp
   1189a:	fb                   	sti    
   1189b:	90                   	nop
   1189c:	5d                   	pop    %ebp
   1189d:	c3                   	ret    

0001189e <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1189e:	55                   	push   %ebp
   1189f:	89 e5                	mov    %esp,%ebp
   118a1:	f4                   	hlt    
   118a2:	90                   	nop
   118a3:	5d                   	pop    %ebp
   118a4:	c3                   	ret    

000118a5 <inb>:
static inline uint8_t inb(uint16_t port) {
   118a5:	55                   	push   %ebp
   118a6:	89 e5                	mov    %esp,%ebp
   118a8:	83 ec 14             	sub    $0x14,%esp
   118ab:	8b 45 08             	mov    0x8(%ebp),%eax
   118ae:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   118b2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118b6:	89 c2                	mov    %eax,%edx
   118b8:	ec                   	in     (%dx),%al
   118b9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   118bc:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   118c0:	c9                   	leave  
   118c1:	c3                   	ret    

000118c2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   118c2:	55                   	push   %ebp
   118c3:	89 e5                	mov    %esp,%ebp
   118c5:	83 ec 08             	sub    $0x8,%esp
   118c8:	8b 45 08             	mov    0x8(%ebp),%eax
   118cb:	8b 55 0c             	mov    0xc(%ebp),%edx
   118ce:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   118d2:	89 d0                	mov    %edx,%eax
   118d4:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   118d7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118db:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118df:	ee                   	out    %al,(%dx)
}
   118e0:	90                   	nop
   118e1:	c9                   	leave  
   118e2:	c3                   	ret    

000118e3 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   118e3:	55                   	push   %ebp
   118e4:	89 e5                	mov    %esp,%ebp
   118e6:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   118e9:	8b 45 08             	mov    0x8(%ebp),%eax
   118ec:	c1 e8 10             	shr    $0x10,%eax
   118ef:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   118f3:	8b 45 08             	mov    0x8(%ebp),%eax
   118f6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   118fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   118fd:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11900:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11904:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11908:	90                   	nop
   11909:	c9                   	leave  
   1190a:	c3                   	ret    

0001190b <read_cr2>:
static inline uint32_t read_cr2(void) {
   1190b:	55                   	push   %ebp
   1190c:	89 e5                	mov    %esp,%ebp
   1190e:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   11911:	0f 20 d0             	mov    %cr2,%eax
   11914:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   11917:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1191a:	c9                   	leave  
   1191b:	c3                   	ret    

0001191c <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   1191c:	55                   	push   %ebp
   1191d:	89 e5                	mov    %esp,%ebp
   1191f:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11922:	9c                   	pushf  
   11923:	58                   	pop    %eax
   11924:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   11927:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1192a:	c9                   	leave  
   1192b:	c3                   	ret    

0001192c <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   1192c:	55                   	push   %ebp
   1192d:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   1192f:	8b 45 08             	mov    0x8(%ebp),%eax
   11932:	50                   	push   %eax
   11933:	9d                   	popf   
}
   11934:	90                   	nop
   11935:	5d                   	pop    %ebp
   11936:	c3                   	ret    

00011937 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   11937:	55                   	push   %ebp
   11938:	89 e5                	mov    %esp,%ebp
   1193a:	57                   	push   %edi
   1193b:	56                   	push   %esi
   1193c:	53                   	push   %ebx
   1193d:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11940:	8b 45 08             	mov    0x8(%ebp),%eax
   11943:	8b 40 3c             	mov    0x3c(%eax),%eax
   11946:	83 e0 03             	and    $0x3,%eax
   11949:	85 c0                	test   %eax,%eax
   1194b:	74 14                	je     11961 <print_exception_fram+0x2a>
    ss = frame->ss3;
   1194d:	8b 45 08             	mov    0x8(%ebp),%eax
   11950:	8b 40 48             	mov    0x48(%eax),%eax
   11953:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   11956:	8b 45 08             	mov    0x8(%ebp),%eax
   11959:	8b 40 44             	mov    0x44(%eax),%eax
   1195c:	89 45 e0             	mov    %eax,-0x20(%ebp)
   1195f:	eb 12                	jmp    11973 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   11961:	8b 45 08             	mov    0x8(%ebp),%eax
   11964:	8b 40 0c             	mov    0xc(%eax),%eax
   11967:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   1196a:	8b 45 08             	mov    0x8(%ebp),%eax
   1196d:	8b 40 1c             	mov    0x1c(%eax),%eax
   11970:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   11973:	83 ec 0c             	sub    $0xc,%esp
   11976:	68 38 3d 01 00       	push   $0x13d38
   1197b:	e8 88 1f 00 00       	call   13908 <log_printf>
   11980:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11983:	8b 45 08             	mov    0x8(%ebp),%eax
   11986:	8b 50 34             	mov    0x34(%eax),%edx
   11989:	8b 45 08             	mov    0x8(%ebp),%eax
   1198c:	8b 40 30             	mov    0x30(%eax),%eax
   1198f:	83 ec 04             	sub    $0x4,%esp
   11992:	52                   	push   %edx
   11993:	50                   	push   %eax
   11994:	68 76 3d 01 00       	push   $0x13d76
   11999:	e8 6a 1f 00 00       	call   13908 <log_printf>
   1199e:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   119a1:	8b 45 08             	mov    0x8(%ebp),%eax
   119a4:	8b 30                	mov    (%eax),%esi
   119a6:	8b 45 08             	mov    0x8(%ebp),%eax
   119a9:	8b 58 04             	mov    0x4(%eax),%ebx
   119ac:	8b 45 08             	mov    0x8(%ebp),%eax
   119af:	8b 48 08             	mov    0x8(%eax),%ecx
   119b2:	8b 45 08             	mov    0x8(%ebp),%eax
   119b5:	8b 50 0c             	mov    0xc(%eax),%edx
   119b8:	8b 45 08             	mov    0x8(%ebp),%eax
   119bb:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   119be:	83 ec 04             	sub    $0x4,%esp
   119c1:	56                   	push   %esi
   119c2:	53                   	push   %ebx
   119c3:	51                   	push   %ecx
   119c4:	ff 75 e4             	push   -0x1c(%ebp)
   119c7:	52                   	push   %edx
   119c8:	50                   	push   %eax
   119c9:	68 90 3d 01 00       	push   $0x13d90
   119ce:	e8 35 1f 00 00       	call   13908 <log_printf>
   119d3:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   119d6:	8b 45 08             	mov    0x8(%ebp),%eax
   119d9:	8b 40 18             	mov    0x18(%eax),%eax
   119dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   119df:	8b 45 08             	mov    0x8(%ebp),%eax
   119e2:	8b 78 10             	mov    0x10(%eax),%edi
   119e5:	8b 45 08             	mov    0x8(%ebp),%eax
   119e8:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   119eb:	8b 45 08             	mov    0x8(%ebp),%eax
   119ee:	8b 58 24             	mov    0x24(%eax),%ebx
   119f1:	8b 45 08             	mov    0x8(%ebp),%eax
   119f4:	8b 48 28             	mov    0x28(%eax),%ecx
   119f7:	8b 45 08             	mov    0x8(%ebp),%eax
   119fa:	8b 50 20             	mov    0x20(%eax),%edx
   119fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11a00:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11a03:	83 ec 0c             	sub    $0xc,%esp
   11a06:	ff 75 e0             	push   -0x20(%ebp)
   11a09:	ff 75 d4             	push   -0x2c(%ebp)
   11a0c:	57                   	push   %edi
   11a0d:	56                   	push   %esi
   11a0e:	53                   	push   %ebx
   11a0f:	51                   	push   %ecx
   11a10:	52                   	push   %edx
   11a11:	50                   	push   %eax
   11a12:	68 c0 3d 01 00       	push   $0x13dc0
   11a17:	e8 ec 1e 00 00       	call   13908 <log_printf>
   11a1c:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a22:	8b 50 40             	mov    0x40(%eax),%edx
   11a25:	8b 45 08             	mov    0x8(%ebp),%eax
   11a28:	8b 40 38             	mov    0x38(%eax),%eax
   11a2b:	83 ec 04             	sub    $0x4,%esp
   11a2e:	52                   	push   %edx
   11a2f:	50                   	push   %eax
   11a30:	68 18 3e 01 00       	push   $0x13e18
   11a35:	e8 ce 1e 00 00       	call   13908 <log_printf>
   11a3a:	83 c4 10             	add    $0x10,%esp
}
   11a3d:	90                   	nop
   11a3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11a41:	5b                   	pop    %ebx
   11a42:	5e                   	pop    %esi
   11a43:	5f                   	pop    %edi
   11a44:	5d                   	pop    %ebp
   11a45:	c3                   	ret    

00011a46 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11a46:	55                   	push   %ebp
   11a47:	89 e5                	mov    %esp,%ebp
   11a49:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11a4c:	83 ec 0c             	sub    $0xc,%esp
   11a4f:	68 34 3e 01 00       	push   $0x13e34
   11a54:	e8 af 1e 00 00       	call   13908 <log_printf>
   11a59:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11a5c:	83 ec 08             	sub    $0x8,%esp
   11a5f:	ff 75 0c             	push   0xc(%ebp)
   11a62:	68 68 3e 01 00       	push   $0x13e68
   11a67:	e8 9c 1e 00 00       	call   13908 <log_printf>
   11a6c:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11a6f:	83 ec 0c             	sub    $0xc,%esp
   11a72:	ff 75 08             	push   0x8(%ebp)
   11a75:	e8 bd fe ff ff       	call   11937 <print_exception_fram>
   11a7a:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11a7d:	e8 1c fe ff ff       	call   1189e <hlt>
   11a82:	eb f9                	jmp    11a7d <do_default_handler+0x37>

00011a84 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11a84:	55                   	push   %ebp
   11a85:	89 e5                	mov    %esp,%ebp
   11a87:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   11a8a:	83 ec 08             	sub    $0x8,%esp
   11a8d:	68 82 3e 01 00       	push   $0x13e82
   11a92:	ff 75 08             	push   0x8(%ebp)
   11a95:	e8 ac ff ff ff       	call   11a46 <do_default_handler>
   11a9a:	83 c4 10             	add    $0x10,%esp
}
   11a9d:	90                   	nop
   11a9e:	c9                   	leave  
   11a9f:	c3                   	ret    

00011aa0 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11aa0:	55                   	push   %ebp
   11aa1:	89 e5                	mov    %esp,%ebp
   11aa3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11aa6:	83 ec 08             	sub    $0x8,%esp
   11aa9:	68 94 3e 01 00       	push   $0x13e94
   11aae:	ff 75 08             	push   0x8(%ebp)
   11ab1:	e8 90 ff ff ff       	call   11a46 <do_default_handler>
   11ab6:	83 c4 10             	add    $0x10,%esp
}
   11ab9:	90                   	nop
   11aba:	c9                   	leave  
   11abb:	c3                   	ret    

00011abc <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11abc:	55                   	push   %ebp
   11abd:	89 e5                	mov    %esp,%ebp
   11abf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11ac2:	83 ec 08             	sub    $0x8,%esp
   11ac5:	68 a6 3e 01 00       	push   $0x13ea6
   11aca:	ff 75 08             	push   0x8(%ebp)
   11acd:	e8 74 ff ff ff       	call   11a46 <do_default_handler>
   11ad2:	83 c4 10             	add    $0x10,%esp
}
   11ad5:	90                   	nop
   11ad6:	c9                   	leave  
   11ad7:	c3                   	ret    

00011ad8 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11ad8:	55                   	push   %ebp
   11ad9:	89 e5                	mov    %esp,%ebp
   11adb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   11ade:	83 ec 08             	sub    $0x8,%esp
   11ae1:	68 b6 3e 01 00       	push   $0x13eb6
   11ae6:	ff 75 08             	push   0x8(%ebp)
   11ae9:	e8 58 ff ff ff       	call   11a46 <do_default_handler>
   11aee:	83 c4 10             	add    $0x10,%esp
}
   11af1:	90                   	nop
   11af2:	c9                   	leave  
   11af3:	c3                   	ret    

00011af4 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11af4:	55                   	push   %ebp
   11af5:	89 e5                	mov    %esp,%ebp
   11af7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11afa:	83 ec 08             	sub    $0x8,%esp
   11afd:	68 c4 3e 01 00       	push   $0x13ec4
   11b02:	ff 75 08             	push   0x8(%ebp)
   11b05:	e8 3c ff ff ff       	call   11a46 <do_default_handler>
   11b0a:	83 c4 10             	add    $0x10,%esp
}
   11b0d:	90                   	nop
   11b0e:	c9                   	leave  
   11b0f:	c3                   	ret    

00011b10 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11b10:	55                   	push   %ebp
   11b11:	89 e5                	mov    %esp,%ebp
   11b13:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11b16:	83 ec 08             	sub    $0x8,%esp
   11b19:	68 d9 3e 01 00       	push   $0x13ed9
   11b1e:	ff 75 08             	push   0x8(%ebp)
   11b21:	e8 20 ff ff ff       	call   11a46 <do_default_handler>
   11b26:	83 c4 10             	add    $0x10,%esp
}
   11b29:	90                   	nop
   11b2a:	c9                   	leave  
   11b2b:	c3                   	ret    

00011b2c <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11b2c:	55                   	push   %ebp
   11b2d:	89 e5                	mov    %esp,%ebp
   11b2f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11b32:	83 ec 08             	sub    $0x8,%esp
   11b35:	68 ec 3e 01 00       	push   $0x13eec
   11b3a:	ff 75 08             	push   0x8(%ebp)
   11b3d:	e8 04 ff ff ff       	call   11a46 <do_default_handler>
   11b42:	83 c4 10             	add    $0x10,%esp
}
   11b45:	90                   	nop
   11b46:	c9                   	leave  
   11b47:	c3                   	ret    

00011b48 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   11b48:	55                   	push   %ebp
   11b49:	89 e5                	mov    %esp,%ebp
   11b4b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11b4e:	83 ec 08             	sub    $0x8,%esp
   11b51:	68 02 3f 01 00       	push   $0x13f02
   11b56:	ff 75 08             	push   0x8(%ebp)
   11b59:	e8 e8 fe ff ff       	call   11a46 <do_default_handler>
   11b5e:	83 c4 10             	add    $0x10,%esp
}
   11b61:	90                   	nop
   11b62:	c9                   	leave  
   11b63:	c3                   	ret    

00011b64 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11b64:	55                   	push   %ebp
   11b65:	89 e5                	mov    %esp,%ebp
   11b67:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   11b6a:	83 ec 08             	sub    $0x8,%esp
   11b6d:	68 1b 3f 01 00       	push   $0x13f1b
   11b72:	ff 75 08             	push   0x8(%ebp)
   11b75:	e8 cc fe ff ff       	call   11a46 <do_default_handler>
   11b7a:	83 c4 10             	add    $0x10,%esp
}
   11b7d:	90                   	nop
   11b7e:	c9                   	leave  
   11b7f:	c3                   	ret    

00011b80 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11b80:	55                   	push   %ebp
   11b81:	89 e5                	mov    %esp,%ebp
   11b83:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11b86:	83 ec 08             	sub    $0x8,%esp
   11b89:	68 38 3f 01 00       	push   $0x13f38
   11b8e:	ff 75 08             	push   0x8(%ebp)
   11b91:	e8 b0 fe ff ff       	call   11a46 <do_default_handler>
   11b96:	83 c4 10             	add    $0x10,%esp
}
   11b99:	90                   	nop
   11b9a:	c9                   	leave  
   11b9b:	c3                   	ret    

00011b9c <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11b9c:	55                   	push   %ebp
   11b9d:	89 e5                	mov    %esp,%ebp
   11b9f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11ba2:	83 ec 08             	sub    $0x8,%esp
   11ba5:	68 4f 3f 01 00       	push   $0x13f4f
   11baa:	ff 75 08             	push   0x8(%ebp)
   11bad:	e8 94 fe ff ff       	call   11a46 <do_default_handler>
   11bb2:	83 c4 10             	add    $0x10,%esp
}
   11bb5:	90                   	nop
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11bb8:	55                   	push   %ebp
   11bb9:	89 e5                	mov    %esp,%ebp
   11bbb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11bbe:	83 ec 08             	sub    $0x8,%esp
   11bc1:	68 65 3f 01 00       	push   $0x13f65
   11bc6:	ff 75 08             	push   0x8(%ebp)
   11bc9:	e8 78 fe ff ff       	call   11a46 <do_default_handler>
   11bce:	83 c4 10             	add    $0x10,%esp
}
   11bd1:	90                   	nop
   11bd2:	c9                   	leave  
   11bd3:	c3                   	ret    

00011bd4 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11bd4:	55                   	push   %ebp
   11bd5:	89 e5                	mov    %esp,%ebp
   11bd7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   11bda:	83 ec 08             	sub    $0x8,%esp
   11bdd:	68 83 3f 01 00       	push   $0x13f83
   11be2:	ff 75 08             	push   0x8(%ebp)
   11be5:	e8 5c fe ff ff       	call   11a46 <do_default_handler>
   11bea:	83 c4 10             	add    $0x10,%esp
}
   11bed:	90                   	nop
   11bee:	c9                   	leave  
   11bef:	c3                   	ret    

00011bf0 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11bf0:	55                   	push   %ebp
   11bf1:	89 e5                	mov    %esp,%ebp
   11bf3:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11bf6:	83 ec 0c             	sub    $0xc,%esp
   11bf9:	68 a4 3f 01 00       	push   $0x13fa4
   11bfe:	e8 05 1d 00 00       	call   13908 <log_printf>
   11c03:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11c06:	83 ec 0c             	sub    $0xc,%esp
   11c09:	68 c8 3f 01 00       	push   $0x13fc8
   11c0e:	e8 f5 1c 00 00       	call   13908 <log_printf>
   11c13:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11c16:	8b 45 08             	mov    0x8(%ebp),%eax
   11c19:	8b 40 34             	mov    0x34(%eax),%eax
   11c1c:	83 e0 01             	and    $0x1,%eax
   11c1f:	85 c0                	test   %eax,%eax
   11c21:	74 12                	je     11c35 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   11c23:	83 ec 0c             	sub    $0xc,%esp
   11c26:	68 f4 3f 01 00       	push   $0x13ff4
   11c2b:	e8 d8 1c 00 00       	call   13908 <log_printf>
   11c30:	83 c4 10             	add    $0x10,%esp
   11c33:	eb 10                	jmp    11c45 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   11c35:	83 ec 0c             	sub    $0xc,%esp
   11c38:	68 70 40 01 00       	push   $0x14070
   11c3d:	e8 c6 1c 00 00       	call   13908 <log_printf>
   11c42:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11c45:	8b 45 08             	mov    0x8(%ebp),%eax
   11c48:	8b 40 34             	mov    0x34(%eax),%eax
   11c4b:	83 e0 02             	and    $0x2,%eax
   11c4e:	85 c0                	test   %eax,%eax
   11c50:	74 12                	je     11c64 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11c52:	83 ec 0c             	sub    $0xc,%esp
   11c55:	68 c8 40 01 00       	push   $0x140c8
   11c5a:	e8 a9 1c 00 00       	call   13908 <log_printf>
   11c5f:	83 c4 10             	add    $0x10,%esp
   11c62:	eb 10                	jmp    11c74 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11c64:	83 ec 0c             	sub    $0xc,%esp
   11c67:	68 14 41 01 00       	push   $0x14114
   11c6c:	e8 97 1c 00 00       	call   13908 <log_printf>
   11c71:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11c74:	8b 45 08             	mov    0x8(%ebp),%eax
   11c77:	8b 40 34             	mov    0x34(%eax),%eax
   11c7a:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11c7f:	83 ec 08             	sub    $0x8,%esp
   11c82:	50                   	push   %eax
   11c83:	68 40 41 01 00       	push   $0x14140
   11c88:	e8 7b 1c 00 00       	call   13908 <log_printf>
   11c8d:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   11c90:	83 ec 0c             	sub    $0xc,%esp
   11c93:	ff 75 08             	push   0x8(%ebp)
   11c96:	e8 9c fc ff ff       	call   11937 <print_exception_fram>
   11c9b:	83 c4 10             	add    $0x10,%esp
}
   11c9e:	90                   	nop
   11c9f:	c9                   	leave  
   11ca0:	c3                   	ret    

00011ca1 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   11ca1:	55                   	push   %ebp
   11ca2:	89 e5                	mov    %esp,%ebp
   11ca4:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11ca7:	83 ec 0c             	sub    $0xc,%esp
   11caa:	68 a4 3f 01 00       	push   $0x13fa4
   11caf:	e8 54 1c 00 00       	call   13908 <log_printf>
   11cb4:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11cb7:	83 ec 0c             	sub    $0xc,%esp
   11cba:	68 54 41 01 00       	push   $0x14154
   11cbf:	e8 44 1c 00 00       	call   13908 <log_printf>
   11cc4:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   11cc7:	8b 45 08             	mov    0x8(%ebp),%eax
   11cca:	8b 40 34             	mov    0x34(%eax),%eax
   11ccd:	83 e0 01             	and    $0x1,%eax
   11cd0:	85 c0                	test   %eax,%eax
   11cd2:	74 18                	je     11cec <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   11cd4:	e8 32 fc ff ff       	call   1190b <read_cr2>
   11cd9:	83 ec 08             	sub    $0x8,%esp
   11cdc:	50                   	push   %eax
   11cdd:	68 78 41 01 00       	push   $0x14178
   11ce2:	e8 21 1c 00 00       	call   13908 <log_printf>
   11ce7:	83 c4 10             	add    $0x10,%esp
   11cea:	eb 16                	jmp    11d02 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   11cec:	e8 1a fc ff ff       	call   1190b <read_cr2>
   11cf1:	83 ec 08             	sub    $0x8,%esp
   11cf4:	50                   	push   %eax
   11cf5:	68 9f 41 01 00       	push   $0x1419f
   11cfa:	e8 09 1c 00 00       	call   13908 <log_printf>
   11cff:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11d02:	8b 45 08             	mov    0x8(%ebp),%eax
   11d05:	8b 40 34             	mov    0x34(%eax),%eax
   11d08:	83 e0 02             	and    $0x2,%eax
   11d0b:	85 c0                	test   %eax,%eax
   11d0d:	74 12                	je     11d21 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   11d0f:	83 ec 0c             	sub    $0xc,%esp
   11d12:	68 bc 41 01 00       	push   $0x141bc
   11d17:	e8 ec 1b 00 00       	call   13908 <log_printf>
   11d1c:	83 c4 10             	add    $0x10,%esp
   11d1f:	eb 10                	jmp    11d31 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   11d21:	83 ec 0c             	sub    $0xc,%esp
   11d24:	68 e8 41 01 00       	push   $0x141e8
   11d29:	e8 da 1b 00 00       	call   13908 <log_printf>
   11d2e:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11d31:	8b 45 08             	mov    0x8(%ebp),%eax
   11d34:	8b 40 34             	mov    0x34(%eax),%eax
   11d37:	83 e0 04             	and    $0x4,%eax
   11d3a:	85 c0                	test   %eax,%eax
   11d3c:	74 12                	je     11d50 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   11d3e:	83 ec 0c             	sub    $0xc,%esp
   11d41:	68 14 42 01 00       	push   $0x14214
   11d46:	e8 bd 1b 00 00       	call   13908 <log_printf>
   11d4b:	83 c4 10             	add    $0x10,%esp
   11d4e:	eb 10                	jmp    11d60 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   11d50:	83 ec 0c             	sub    $0xc,%esp
   11d53:	68 3c 42 01 00       	push   $0x1423c
   11d58:	e8 ab 1b 00 00       	call   13908 <log_printf>
   11d5d:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   11d60:	83 ec 0c             	sub    $0xc,%esp
   11d63:	ff 75 08             	push   0x8(%ebp)
   11d66:	e8 cc fb ff ff       	call   11937 <print_exception_fram>
   11d6b:	83 c4 10             	add    $0x10,%esp
}
   11d6e:	90                   	nop
   11d6f:	c9                   	leave  
   11d70:	c3                   	ret    

00011d71 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   11d71:	55                   	push   %ebp
   11d72:	89 e5                	mov    %esp,%ebp
   11d74:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11d77:	83 ec 08             	sub    $0x8,%esp
   11d7a:	68 67 42 01 00       	push   $0x14267
   11d7f:	ff 75 08             	push   0x8(%ebp)
   11d82:	e8 bf fc ff ff       	call   11a46 <do_default_handler>
   11d87:	83 c4 10             	add    $0x10,%esp
}
   11d8a:	90                   	nop
   11d8b:	c9                   	leave  
   11d8c:	c3                   	ret    

00011d8d <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11d8d:	55                   	push   %ebp
   11d8e:	89 e5                	mov    %esp,%ebp
   11d90:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11d93:	83 ec 08             	sub    $0x8,%esp
   11d96:	68 7b 42 01 00       	push   $0x1427b
   11d9b:	ff 75 08             	push   0x8(%ebp)
   11d9e:	e8 a3 fc ff ff       	call   11a46 <do_default_handler>
   11da3:	83 c4 10             	add    $0x10,%esp
}
   11da6:	90                   	nop
   11da7:	c9                   	leave  
   11da8:	c3                   	ret    

00011da9 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11da9:	55                   	push   %ebp
   11daa:	89 e5                	mov    %esp,%ebp
   11dac:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11daf:	83 ec 08             	sub    $0x8,%esp
   11db2:	68 95 42 01 00       	push   $0x14295
   11db7:	ff 75 08             	push   0x8(%ebp)
   11dba:	e8 87 fc ff ff       	call   11a46 <do_default_handler>
   11dbf:	83 c4 10             	add    $0x10,%esp
}
   11dc2:	90                   	nop
   11dc3:	c9                   	leave  
   11dc4:	c3                   	ret    

00011dc5 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11dc5:	55                   	push   %ebp
   11dc6:	89 e5                	mov    %esp,%ebp
   11dc8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11dcb:	83 ec 08             	sub    $0x8,%esp
   11dce:	68 ad 42 01 00       	push   $0x142ad
   11dd3:	ff 75 08             	push   0x8(%ebp)
   11dd6:	e8 6b fc ff ff       	call   11a46 <do_default_handler>
   11ddb:	83 c4 10             	add    $0x10,%esp
}
   11dde:	90                   	nop
   11ddf:	c9                   	leave  
   11de0:	c3                   	ret    

00011de1 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11de1:	55                   	push   %ebp
   11de2:	89 e5                	mov    %esp,%ebp
   11de4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11de7:	83 ec 08             	sub    $0x8,%esp
   11dea:	68 c5 42 01 00       	push   $0x142c5
   11def:	ff 75 08             	push   0x8(%ebp)
   11df2:	e8 4f fc ff ff       	call   11a46 <do_default_handler>
   11df7:	83 c4 10             	add    $0x10,%esp
}
   11dfa:	90                   	nop
   11dfb:	c9                   	leave  
   11dfc:	c3                   	ret    

00011dfd <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11dfd:	55                   	push   %ebp
   11dfe:	89 e5                	mov    %esp,%ebp
   11e00:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11e03:	83 ec 08             	sub    $0x8,%esp
   11e06:	68 e1 42 01 00       	push   $0x142e1
   11e0b:	ff 75 08             	push   0x8(%ebp)
   11e0e:	e8 33 fc ff ff       	call   11a46 <do_default_handler>
   11e13:	83 c4 10             	add    $0x10,%esp
}
   11e16:	90                   	nop
   11e17:	c9                   	leave  
   11e18:	c3                   	ret    

00011e19 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11e19:	55                   	push   %ebp
   11e1a:	89 e5                	mov    %esp,%ebp
   11e1c:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11e1f:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11e26:	7f 06                	jg     11e2e <idt_install+0x15>
   11e28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e2c:	79 07                	jns    11e35 <idt_install+0x1c>
   11e2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e33:	eb 25                	jmp    11e5a <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11e35:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e38:	8b 55 08             	mov    0x8(%ebp),%edx
   11e3b:	c1 e2 03             	shl    $0x3,%edx
   11e3e:	81 c2 00 02 03 00    	add    $0x30200,%edx
   11e44:	68 00 8e 00 00       	push   $0x8e00
   11e49:	50                   	push   %eax
   11e4a:	6a 08                	push   $0x8
   11e4c:	52                   	push   %edx
   11e4d:	e8 c1 f7 ff ff       	call   11613 <gate_desc_set>
   11e52:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11e55:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e5a:	c9                   	leave  
   11e5b:	c3                   	ret    

00011e5c <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11e5c:	55                   	push   %ebp
   11e5d:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11e5f:	6a 11                	push   $0x11
   11e61:	6a 20                	push   $0x20
   11e63:	e8 5a fa ff ff       	call   118c2 <outb>
   11e68:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11e6b:	6a 20                	push   $0x20
   11e6d:	6a 21                	push   $0x21
   11e6f:	e8 4e fa ff ff       	call   118c2 <outb>
   11e74:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11e77:	6a 04                	push   $0x4
   11e79:	6a 21                	push   $0x21
   11e7b:	e8 42 fa ff ff       	call   118c2 <outb>
   11e80:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11e83:	6a 01                	push   $0x1
   11e85:	6a 21                	push   $0x21
   11e87:	e8 36 fa ff ff       	call   118c2 <outb>
   11e8c:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11e8f:	6a 11                	push   $0x11
   11e91:	68 a0 00 00 00       	push   $0xa0
   11e96:	e8 27 fa ff ff       	call   118c2 <outb>
   11e9b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11e9e:	6a 28                	push   $0x28
   11ea0:	68 a1 00 00 00       	push   $0xa1
   11ea5:	e8 18 fa ff ff       	call   118c2 <outb>
   11eaa:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11ead:	6a 02                	push   $0x2
   11eaf:	68 a1 00 00 00       	push   $0xa1
   11eb4:	e8 09 fa ff ff       	call   118c2 <outb>
   11eb9:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11ebc:	6a 01                	push   $0x1
   11ebe:	68 a1 00 00 00       	push   $0xa1
   11ec3:	e8 fa f9 ff ff       	call   118c2 <outb>
   11ec8:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11ecb:	68 fb 00 00 00       	push   $0xfb
   11ed0:	6a 21                	push   $0x21
   11ed2:	e8 eb f9 ff ff       	call   118c2 <outb>
   11ed7:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11eda:	68 ff 00 00 00       	push   $0xff
   11edf:	68 a1 00 00 00       	push   $0xa1
   11ee4:	e8 d9 f9 ff ff       	call   118c2 <outb>
   11ee9:	83 c4 08             	add    $0x8,%esp


}
   11eec:	90                   	nop
   11eed:	c9                   	leave  
   11eee:	c3                   	ret    

00011eef <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11eef:	55                   	push   %ebp
   11ef0:	89 e5                	mov    %esp,%ebp
   11ef2:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11ef5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11efc:	eb 17                	jmp    11f15 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11efe:	83 ec 08             	sub    $0x8,%esp
   11f01:	68 2a 00 01 00       	push   $0x1002a
   11f06:	ff 75 f4             	push   -0xc(%ebp)
   11f09:	e8 0b ff ff ff       	call   11e19 <idt_install>
   11f0e:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11f11:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f15:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11f1c:	7e e0                	jle    11efe <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11f1e:	83 ec 08             	sub    $0x8,%esp
   11f21:	68 47 00 01 00       	push   $0x10047
   11f26:	6a 00                	push   $0x0
   11f28:	e8 ec fe ff ff       	call   11e19 <idt_install>
   11f2d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11f30:	83 ec 08             	sub    $0x8,%esp
   11f33:	68 64 00 01 00       	push   $0x10064
   11f38:	6a 01                	push   $0x1
   11f3a:	e8 da fe ff ff       	call   11e19 <idt_install>
   11f3f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11f42:	83 ec 08             	sub    $0x8,%esp
   11f45:	68 81 00 01 00       	push   $0x10081
   11f4a:	6a 02                	push   $0x2
   11f4c:	e8 c8 fe ff ff       	call   11e19 <idt_install>
   11f51:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11f54:	83 ec 08             	sub    $0x8,%esp
   11f57:	68 9e 00 01 00       	push   $0x1009e
   11f5c:	6a 03                	push   $0x3
   11f5e:	e8 b6 fe ff ff       	call   11e19 <idt_install>
   11f63:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11f66:	83 ec 08             	sub    $0x8,%esp
   11f69:	68 bb 00 01 00       	push   $0x100bb
   11f6e:	6a 04                	push   $0x4
   11f70:	e8 a4 fe ff ff       	call   11e19 <idt_install>
   11f75:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11f78:	83 ec 08             	sub    $0x8,%esp
   11f7b:	68 d8 00 01 00       	push   $0x100d8
   11f80:	6a 05                	push   $0x5
   11f82:	e8 92 fe ff ff       	call   11e19 <idt_install>
   11f87:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11f8a:	83 ec 08             	sub    $0x8,%esp
   11f8d:	68 f5 00 01 00       	push   $0x100f5
   11f92:	6a 06                	push   $0x6
   11f94:	e8 80 fe ff ff       	call   11e19 <idt_install>
   11f99:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11f9c:	83 ec 08             	sub    $0x8,%esp
   11f9f:	68 12 01 01 00       	push   $0x10112
   11fa4:	6a 07                	push   $0x7
   11fa6:	e8 6e fe ff ff       	call   11e19 <idt_install>
   11fab:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11fae:	83 ec 08             	sub    $0x8,%esp
   11fb1:	68 2f 01 01 00       	push   $0x1012f
   11fb6:	6a 08                	push   $0x8
   11fb8:	e8 5c fe ff ff       	call   11e19 <idt_install>
   11fbd:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11fc0:	83 ec 08             	sub    $0x8,%esp
   11fc3:	68 4a 01 01 00       	push   $0x1014a
   11fc8:	6a 0a                	push   $0xa
   11fca:	e8 4a fe ff ff       	call   11e19 <idt_install>
   11fcf:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11fd2:	83 ec 08             	sub    $0x8,%esp
   11fd5:	68 65 01 01 00       	push   $0x10165
   11fda:	6a 0b                	push   $0xb
   11fdc:	e8 38 fe ff ff       	call   11e19 <idt_install>
   11fe1:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11fe4:	83 ec 08             	sub    $0x8,%esp
   11fe7:	68 80 01 01 00       	push   $0x10180
   11fec:	6a 0c                	push   $0xc
   11fee:	e8 26 fe ff ff       	call   11e19 <idt_install>
   11ff3:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11ff6:	83 ec 08             	sub    $0x8,%esp
   11ff9:	68 9b 01 01 00       	push   $0x1019b
   11ffe:	6a 0d                	push   $0xd
   12000:	e8 14 fe ff ff       	call   11e19 <idt_install>
   12005:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12008:	83 ec 08             	sub    $0x8,%esp
   1200b:	68 b6 01 01 00       	push   $0x101b6
   12010:	6a 0e                	push   $0xe
   12012:	e8 02 fe ff ff       	call   11e19 <idt_install>
   12017:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1201a:	83 ec 08             	sub    $0x8,%esp
   1201d:	68 d1 01 01 00       	push   $0x101d1
   12022:	6a 10                	push   $0x10
   12024:	e8 f0 fd ff ff       	call   11e19 <idt_install>
   12029:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   1202c:	83 ec 08             	sub    $0x8,%esp
   1202f:	68 ee 01 01 00       	push   $0x101ee
   12034:	6a 11                	push   $0x11
   12036:	e8 de fd ff ff       	call   11e19 <idt_install>
   1203b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   1203e:	83 ec 08             	sub    $0x8,%esp
   12041:	68 09 02 01 00       	push   $0x10209
   12046:	6a 12                	push   $0x12
   12048:	e8 cc fd ff ff       	call   11e19 <idt_install>
   1204d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   12050:	83 ec 08             	sub    $0x8,%esp
   12053:	68 26 02 01 00       	push   $0x10226
   12058:	6a 13                	push   $0x13
   1205a:	e8 ba fd ff ff       	call   11e19 <idt_install>
   1205f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12062:	83 ec 08             	sub    $0x8,%esp
   12065:	68 43 02 01 00       	push   $0x10243
   1206a:	6a 14                	push   $0x14
   1206c:	e8 a8 fd ff ff       	call   11e19 <idt_install>
   12071:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12074:	83 ec 08             	sub    $0x8,%esp
   12077:	68 60 02 01 00       	push   $0x10260
   1207c:	6a 15                	push   $0x15
   1207e:	e8 96 fd ff ff       	call   11e19 <idt_install>
   12083:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12086:	b8 00 02 03 00       	mov    $0x30200,%eax
   1208b:	83 ec 08             	sub    $0x8,%esp
   1208e:	68 00 08 00 00       	push   $0x800
   12093:	50                   	push   %eax
   12094:	e8 4a f8 ff ff       	call   118e3 <lidt>
   12099:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   1209c:	e8 bb fd ff ff       	call   11e5c <init_pic>
}
   120a1:	90                   	nop
   120a2:	c9                   	leave  
   120a3:	c3                   	ret    

000120a4 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   120a4:	55                   	push   %ebp
   120a5:	89 e5                	mov    %esp,%ebp
   120a7:	53                   	push   %ebx
   120a8:	83 ec 14             	sub    $0x14,%esp
   120ab:	8b 45 08             	mov    0x8(%ebp),%eax
   120ae:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   120b1:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   120b5:	76 7f                	jbe    12136 <idt_enable+0x92>
   120b7:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   120bb:	77 79                	ja     12136 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   120bd:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   120c1:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   120c5:	77 33                	ja     120fa <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   120c7:	6a 21                	push   $0x21
   120c9:	e8 d7 f7 ff ff       	call   118a5 <inb>
   120ce:	83 c4 04             	add    $0x4,%esp
   120d1:	89 c3                	mov    %eax,%ebx
   120d3:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   120d7:	ba 01 00 00 00       	mov    $0x1,%edx
   120dc:	89 c1                	mov    %eax,%ecx
   120de:	d3 e2                	shl    %cl,%edx
   120e0:	89 d0                	mov    %edx,%eax
   120e2:	f7 d0                	not    %eax
   120e4:	21 d8                	and    %ebx,%eax
   120e6:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   120e9:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   120ed:	50                   	push   %eax
   120ee:	6a 21                	push   $0x21
   120f0:	e8 cd f7 ff ff       	call   118c2 <outb>
   120f5:	83 c4 08             	add    $0x8,%esp
   120f8:	eb 3d                	jmp    12137 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   120fa:	68 a1 00 00 00       	push   $0xa1
   120ff:	e8 a1 f7 ff ff       	call   118a5 <inb>
   12104:	83 c4 04             	add    $0x4,%esp
   12107:	89 c3                	mov    %eax,%ebx
   12109:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1210d:	83 e8 08             	sub    $0x8,%eax
   12110:	ba 01 00 00 00       	mov    $0x1,%edx
   12115:	89 c1                	mov    %eax,%ecx
   12117:	d3 e2                	shl    %cl,%edx
   12119:	89 d0                	mov    %edx,%eax
   1211b:	f7 d0                	not    %eax
   1211d:	21 d8                	and    %ebx,%eax
   1211f:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12122:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12126:	50                   	push   %eax
   12127:	68 a1 00 00 00       	push   $0xa1
   1212c:	e8 91 f7 ff ff       	call   118c2 <outb>
   12131:	83 c4 08             	add    $0x8,%esp
   12134:	eb 01                	jmp    12137 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12136:	90                   	nop
  }
  
}
   12137:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1213a:	c9                   	leave  
   1213b:	c3                   	ret    

0001213c <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   1213c:	55                   	push   %ebp
   1213d:	89 e5                	mov    %esp,%ebp
   1213f:	53                   	push   %ebx
   12140:	83 ec 14             	sub    $0x14,%esp
   12143:	8b 45 08             	mov    0x8(%ebp),%eax
   12146:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12149:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1214d:	76 7b                	jbe    121ca <idt_disable+0x8e>
   1214f:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12153:	77 75                	ja     121ca <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12155:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12159:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1215d:	77 31                	ja     12190 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1215f:	6a 21                	push   $0x21
   12161:	e8 3f f7 ff ff       	call   118a5 <inb>
   12166:	83 c4 04             	add    $0x4,%esp
   12169:	89 c3                	mov    %eax,%ebx
   1216b:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1216f:	ba 01 00 00 00       	mov    $0x1,%edx
   12174:	89 c1                	mov    %eax,%ecx
   12176:	d3 e2                	shl    %cl,%edx
   12178:	89 d0                	mov    %edx,%eax
   1217a:	09 d8                	or     %ebx,%eax
   1217c:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1217f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12183:	50                   	push   %eax
   12184:	6a 21                	push   $0x21
   12186:	e8 37 f7 ff ff       	call   118c2 <outb>
   1218b:	83 c4 08             	add    $0x8,%esp
   1218e:	eb 3b                	jmp    121cb <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12190:	68 a1 00 00 00       	push   $0xa1
   12195:	e8 0b f7 ff ff       	call   118a5 <inb>
   1219a:	83 c4 04             	add    $0x4,%esp
   1219d:	89 c3                	mov    %eax,%ebx
   1219f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   121a3:	83 e8 08             	sub    $0x8,%eax
   121a6:	ba 01 00 00 00       	mov    $0x1,%edx
   121ab:	89 c1                	mov    %eax,%ecx
   121ad:	d3 e2                	shl    %cl,%edx
   121af:	89 d0                	mov    %edx,%eax
   121b1:	09 d8                	or     %ebx,%eax
   121b3:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   121b6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   121ba:	50                   	push   %eax
   121bb:	68 a1 00 00 00       	push   $0xa1
   121c0:	e8 fd f6 ff ff       	call   118c2 <outb>
   121c5:	83 c4 08             	add    $0x8,%esp
   121c8:	eb 01                	jmp    121cb <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   121ca:	90                   	nop
  }
  
}
   121cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   121ce:	c9                   	leave  
   121cf:	c3                   	ret    

000121d0 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   121d0:	55                   	push   %ebp
   121d1:	89 e5                	mov    %esp,%ebp
  cli();
   121d3:	e8 b8 f6 ff ff       	call   11890 <cli>
}
   121d8:	90                   	nop
   121d9:	5d                   	pop    %ebp
   121da:	c3                   	ret    

000121db <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   121db:	55                   	push   %ebp
   121dc:	89 e5                	mov    %esp,%ebp
  sti();
   121de:	e8 b4 f6 ff ff       	call   11897 <sti>
}
   121e3:	90                   	nop
   121e4:	5d                   	pop    %ebp
   121e5:	c3                   	ret    

000121e6 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   121e6:	55                   	push   %ebp
   121e7:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   121e9:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   121ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121f1:	78 29                	js     1221c <pic_send_eoi+0x36>
   121f3:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   121f7:	7f 23                	jg     1221c <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   121f9:	6a 20                	push   $0x20
   121fb:	6a 20                	push   $0x20
   121fd:	e8 c0 f6 ff ff       	call   118c2 <outb>
   12202:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   12205:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12209:	7e 12                	jle    1221d <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   1220b:	6a 20                	push   $0x20
   1220d:	68 a0 00 00 00       	push   $0xa0
   12212:	e8 ab f6 ff ff       	call   118c2 <outb>
   12217:	83 c4 08             	add    $0x8,%esp
   1221a:	eb 01                	jmp    1221d <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   1221c:	90                   	nop
  }

}
   1221d:	c9                   	leave  
   1221e:	c3                   	ret    

0001221f <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   1221f:	55                   	push   %ebp
   12220:	89 e5                	mov    %esp,%ebp
   12222:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   12225:	e8 f2 f6 ff ff       	call   1191c <read_eflags>
   1222a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   1222d:	e8 9e ff ff ff       	call   121d0 <idt_disable_global>
  return state;;
   12232:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12235:	c9                   	leave  
   12236:	c3                   	ret    

00012237 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   12237:	55                   	push   %ebp
   12238:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   1223a:	ff 75 08             	push   0x8(%ebp)
   1223d:	e8 ea f6 ff ff       	call   1192c <write_eflags>
   12242:	83 c4 04             	add    $0x4,%esp
}
   12245:	90                   	nop
   12246:	c9                   	leave  
   12247:	c3                   	ret    

00012248 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   12248:	55                   	push   %ebp
   12249:	89 e5                	mov    %esp,%ebp
   1224b:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   1224e:	83 ec 08             	sub    $0x8,%esp
   12251:	ff 75 0c             	push   0xc(%ebp)
   12254:	ff 75 08             	push   0x8(%ebp)
   12257:	e8 ac 16 00 00       	call   13908 <log_printf>
   1225c:	83 c4 10             	add    $0x10,%esp
}
   1225f:	90                   	nop
   12260:	c9                   	leave  
   12261:	c3                   	ret    

00012262 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   12262:	55                   	push   %ebp
   12263:	89 e5                	mov    %esp,%ebp
   12265:	53                   	push   %ebx
   12266:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12269:	8b 45 08             	mov    0x8(%ebp),%eax
   1226c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1226f:	83 f8 0a             	cmp    $0xa,%eax
   12272:	77 48                	ja     122bc <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   12274:	8b 45 08             	mov    0x8(%ebp),%eax
   12277:	8b 40 3c             	mov    0x3c(%eax),%eax
   1227a:	8b 04 85 00 43 01 00 	mov    0x14300(,%eax,4),%eax
   12281:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   12284:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12288:	74 32                	je     122bc <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   1228a:	8b 45 08             	mov    0x8(%ebp),%eax
   1228d:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12290:	8b 45 08             	mov    0x8(%ebp),%eax
   12293:	8b 48 48             	mov    0x48(%eax),%ecx
   12296:	8b 45 08             	mov    0x8(%ebp),%eax
   12299:	8b 50 44             	mov    0x44(%eax),%edx
   1229c:	8b 45 08             	mov    0x8(%ebp),%eax
   1229f:	8b 40 40             	mov    0x40(%eax),%eax
   122a2:	53                   	push   %ebx
   122a3:	51                   	push   %ecx
   122a4:	52                   	push   %edx
   122a5:	50                   	push   %eax
   122a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122a9:	ff d0                	call   *%eax
   122ab:	83 c4 10             	add    $0x10,%esp
   122ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   122b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122b4:	8b 45 08             	mov    0x8(%ebp),%eax
   122b7:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   122ba:	eb 30                	jmp    122ec <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   122bc:	e8 91 ee ff ff       	call   11152 <task_current>
   122c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   122c4:	8b 45 08             	mov    0x8(%ebp),%eax
   122c7:	8b 40 3c             	mov    0x3c(%eax),%eax
   122ca:	8b 55 ec             	mov    -0x14(%ebp),%edx
   122cd:	83 c2 18             	add    $0x18,%edx
   122d0:	83 ec 04             	sub    $0x4,%esp
   122d3:	50                   	push   %eax
   122d4:	52                   	push   %edx
   122d5:	68 2c 43 01 00       	push   $0x1432c
   122da:	e8 29 16 00 00       	call   13908 <log_printf>
   122df:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   122e2:	8b 45 08             	mov    0x8(%ebp),%eax
   122e5:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   122ec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   122ef:	c9                   	leave  
   122f0:	c3                   	ret    

000122f1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   122f1:	55                   	push   %ebp
   122f2:	89 e5                	mov    %esp,%ebp
   122f4:	83 ec 08             	sub    $0x8,%esp
   122f7:	8b 45 08             	mov    0x8(%ebp),%eax
   122fa:	8b 55 0c             	mov    0xc(%ebp),%edx
   122fd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12301:	89 d0                	mov    %edx,%eax
   12303:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12306:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1230a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1230e:	ee                   	out    %al,(%dx)
}
   1230f:	90                   	nop
   12310:	c9                   	leave  
   12311:	c3                   	ret    

00012312 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   12312:	55                   	push   %ebp
   12313:	89 e5                	mov    %esp,%ebp
   12315:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12318:	a1 00 0a 03 00       	mov    0x30a00,%eax
   1231d:	83 c0 01             	add    $0x1,%eax
   12320:	a3 00 0a 03 00       	mov    %eax,0x30a00

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   12325:	83 ec 0c             	sub    $0xc,%esp
   12328:	6a 20                	push   $0x20
   1232a:	e8 b7 fe ff ff       	call   121e6 <pic_send_eoi>
   1232f:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   12332:	e8 ee ee ff ff       	call   11225 <task_slice_end>
}
   12337:	90                   	nop
   12338:	c9                   	leave  
   12339:	c3                   	ret    

0001233a <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1233a:	55                   	push   %ebp
   1233b:	89 e5                	mov    %esp,%ebp
   1233d:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   12340:	6a 36                	push   $0x36
   12342:	6a 43                	push   $0x43
   12344:	e8 a8 ff ff ff       	call   122f1 <outb>
   12349:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   1234c:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   12352:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12356:	0f b6 c0             	movzbl %al,%eax
   12359:	50                   	push   %eax
   1235a:	6a 40                	push   $0x40
   1235c:	e8 90 ff ff ff       	call   122f1 <outb>
   12361:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   12364:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12368:	66 c1 e8 08          	shr    $0x8,%ax
   1236c:	0f b6 c0             	movzbl %al,%eax
   1236f:	50                   	push   %eax
   12370:	6a 40                	push   $0x40
   12372:	e8 7a ff ff ff       	call   122f1 <outb>
   12377:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1237a:	83 ec 08             	sub    $0x8,%esp
   1237d:	68 7b 02 01 00       	push   $0x1027b
   12382:	6a 20                	push   $0x20
   12384:	e8 90 fa ff ff       	call   11e19 <idt_install>
   12389:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1238c:	83 ec 0c             	sub    $0xc,%esp
   1238f:	6a 20                	push   $0x20
   12391:	e8 0e fd ff ff       	call   120a4 <idt_enable>
   12396:	83 c4 10             	add    $0x10,%esp

}
   12399:	90                   	nop
   1239a:	c9                   	leave  
   1239b:	c3                   	ret    

0001239c <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1239c:	55                   	push   %ebp
   1239d:	89 e5                	mov    %esp,%ebp
   1239f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   123a2:	c7 05 00 0a 03 00 00 	movl   $0x0,0x30a00
   123a9:	00 00 00 
    init_pit();
   123ac:	e8 89 ff ff ff       	call   1233a <init_pit>
   123b1:	90                   	nop
   123b2:	c9                   	leave  
   123b3:	c3                   	ret    

000123b4 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   123b4:	55                   	push   %ebp
   123b5:	89 e5                	mov    %esp,%ebp
   123b7:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   123ba:	8b 45 08             	mov    0x8(%ebp),%eax
   123bd:	8b 40 50             	mov    0x50(%eax),%eax
   123c0:	85 c0                	test   %eax,%eax
   123c2:	75 19                	jne    123dd <kernel_init+0x29>
   123c4:	68 50 43 01 00       	push   $0x14350
   123c9:	68 ec 43 01 00       	push   $0x143ec
   123ce:	6a 22                	push   $0x22
   123d0:	68 74 43 01 00       	push   $0x14374
   123d5:	e8 5f 08 00 00       	call   12c39 <pannic>
   123da:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   123dd:	e8 9e 14 00 00       	call   13880 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   123e2:	83 ec 0c             	sub    $0xc,%esp
   123e5:	ff 75 08             	push   0x8(%ebp)
   123e8:	e8 ba e3 ff ff       	call   107a7 <memory_init>
   123ed:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   123f0:	e8 4c f3 ff ff       	call   11741 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   123f5:	e8 f5 fa ff ff       	call   11eef <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   123fa:	e8 9d ff ff ff       	call   1239c <time_init>

    //7.初始化任务管理器
    task_manager_init();
   123ff:	e8 a7 ea ff ff       	call   10eab <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   12404:	90                   	nop
   12405:	c9                   	leave  
   12406:	c3                   	ret    

00012407 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   12407:	55                   	push   %ebp
   12408:	89 e5                	mov    %esp,%ebp
   1240a:	56                   	push   %esi
   1240b:	53                   	push   %ebx
   1240c:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   1240f:	e8 3e ed ff ff       	call   11152 <task_current>
   12414:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   12417:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1241b:	75 19                	jne    12436 <move_to_first_task+0x2f>
   1241d:	68 a9 43 01 00       	push   $0x143a9
   12422:	68 f8 43 01 00       	push   $0x143f8
   12427:	6a 42                	push   $0x42
   12429:	68 74 43 01 00       	push   $0x14374
   1242e:	e8 06 08 00 00       	call   12c39 <pannic>
   12433:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   12436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12439:	83 c0 50             	add    $0x50,%eax
   1243c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   1243f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12442:	8b 40 50             	mov    0x50(%eax),%eax
   12445:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12448:	8b 52 38             	mov    0x38(%edx),%edx
   1244b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1244e:	8b 49 24             	mov    0x24(%ecx),%ecx
   12451:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   12454:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12457:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1245a:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   1245d:	50                   	push   %eax
   1245e:	52                   	push   %edx
   1245f:	51                   	push   %ecx
   12460:	53                   	push   %ebx
   12461:	56                   	push   %esi
   12462:	cf                   	iret   

        
    );
}
   12463:	90                   	nop
   12464:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12467:	5b                   	pop    %ebx
   12468:	5e                   	pop    %esi
   12469:	5d                   	pop    %ebp
   1246a:	c3                   	ret    

0001246b <init_main>:


void init_main(void) {
   1246b:	55                   	push   %ebp
   1246c:	89 e5                	mov    %esp,%ebp
   1246e:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   12471:	83 ec 0c             	sub    $0xc,%esp
   12474:	68 b3 43 01 00       	push   $0x143b3
   12479:	e8 8a 14 00 00       	call   13908 <log_printf>
   1247e:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   12481:	83 ec 04             	sub    $0x4,%esp
   12484:	68 cb 43 01 00       	push   $0x143cb
   12489:	68 d1 43 01 00       	push   $0x143d1
   1248e:	68 d6 43 01 00       	push   $0x143d6
   12493:	e8 70 14 00 00       	call   13908 <log_printf>
   12498:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   1249b:	e8 02 eb ff ff       	call   10fa2 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   124a0:	e8 62 ff ff ff       	call   12407 <move_to_first_task>
   124a5:	90                   	nop
   124a6:	c9                   	leave  
   124a7:	c3                   	ret    

000124a8 <list_init>:
static inline void list_init(list_t *list) {
   124a8:	55                   	push   %ebp
   124a9:	89 e5                	mov    %esp,%ebp
   124ab:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   124ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124b2:	75 19                	jne    124cd <list_init+0x25>
   124b4:	68 0c 44 01 00       	push   $0x1440c
   124b9:	68 b8 44 01 00       	push   $0x144b8
   124be:	6a 31                	push   $0x31
   124c0:	68 20 44 01 00       	push   $0x14420
   124c5:	e8 6f 07 00 00       	call   12c39 <pannic>
   124ca:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   124cd:	8b 45 08             	mov    0x8(%ebp),%eax
   124d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   124d7:	8b 45 08             	mov    0x8(%ebp),%eax
   124da:	8b 50 04             	mov    0x4(%eax),%edx
   124dd:	8b 45 08             	mov    0x8(%ebp),%eax
   124e0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   124e2:	8b 45 08             	mov    0x8(%ebp),%eax
   124e5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   124ec:	90                   	nop
   124ed:	c9                   	leave  
   124ee:	c3                   	ret    

000124ef <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   124ef:	55                   	push   %ebp
   124f0:	89 e5                	mov    %esp,%ebp
   124f2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   124f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124f9:	75 19                	jne    12514 <list_is_empty+0x25>
   124fb:	68 0c 44 01 00       	push   $0x1440c
   12500:	68 c4 44 01 00       	push   $0x144c4
   12505:	6a 38                	push   $0x38
   12507:	68 20 44 01 00       	push   $0x14420
   1250c:	e8 28 07 00 00       	call   12c39 <pannic>
   12511:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12514:	8b 45 08             	mov    0x8(%ebp),%eax
   12517:	8b 40 08             	mov    0x8(%eax),%eax
   1251a:	85 c0                	test   %eax,%eax
   1251c:	0f 94 c0             	sete   %al
   1251f:	0f b6 c0             	movzbl %al,%eax
}
   12522:	c9                   	leave  
   12523:	c3                   	ret    

00012524 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   12524:	55                   	push   %ebp
   12525:	89 e5                	mov    %esp,%ebp
   12527:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1252a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1252e:	75 19                	jne    12549 <mutex_init+0x25>
   12530:	68 5e 44 01 00       	push   $0x1445e
   12535:	68 ac 44 01 00       	push   $0x144ac
   1253a:	6a 15                	push   $0x15
   1253c:	68 74 44 01 00       	push   $0x14474
   12541:	e8 f3 06 00 00       	call   12c39 <pannic>
   12546:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   12549:	8b 45 08             	mov    0x8(%ebp),%eax
   1254c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   12553:	8b 45 08             	mov    0x8(%ebp),%eax
   12556:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1255c:	8b 45 08             	mov    0x8(%ebp),%eax
   1255f:	83 c0 08             	add    $0x8,%eax
   12562:	83 ec 0c             	sub    $0xc,%esp
   12565:	50                   	push   %eax
   12566:	e8 3d ff ff ff       	call   124a8 <list_init>
   1256b:	83 c4 10             	add    $0x10,%esp
}
   1256e:	90                   	nop
   1256f:	c9                   	leave  
   12570:	c3                   	ret    

00012571 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   12571:	55                   	push   %ebp
   12572:	89 e5                	mov    %esp,%ebp
   12574:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12577:	e8 a3 fc ff ff       	call   1221f <idt_enter_protection>
   1257c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   1257f:	e8 ce eb ff ff       	call   11152 <task_current>
   12584:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   12587:	8b 45 08             	mov    0x8(%ebp),%eax
   1258a:	8b 40 04             	mov    0x4(%eax),%eax
   1258d:	85 c0                	test   %eax,%eax
   1258f:	75 19                	jne    125aa <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   12591:	8b 45 08             	mov    0x8(%ebp),%eax
   12594:	8b 40 04             	mov    0x4(%eax),%eax
   12597:	8d 50 01             	lea    0x1(%eax),%edx
   1259a:	8b 45 08             	mov    0x8(%ebp),%eax
   1259d:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   125a0:	8b 45 08             	mov    0x8(%ebp),%eax
   125a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   125a6:	89 10                	mov    %edx,(%eax)
   125a8:	eb 47                	jmp    125f1 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   125aa:	8b 45 08             	mov    0x8(%ebp),%eax
   125ad:	8b 00                	mov    (%eax),%eax
   125af:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   125b2:	75 11                	jne    125c5 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   125b4:	8b 45 08             	mov    0x8(%ebp),%eax
   125b7:	8b 40 04             	mov    0x4(%eax),%eax
   125ba:	8d 50 01             	lea    0x1(%eax),%edx
   125bd:	8b 45 08             	mov    0x8(%ebp),%eax
   125c0:	89 50 04             	mov    %edx,0x4(%eax)
   125c3:	eb 2c                	jmp    125f1 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   125c5:	83 ec 0c             	sub    $0xc,%esp
   125c8:	ff 75 f0             	push   -0x10(%ebp)
   125cb:	e8 09 eb ff ff       	call   110d9 <task_set_unready>
   125d0:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   125d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125d6:	8d 50 48             	lea    0x48(%eax),%edx
   125d9:	8b 45 08             	mov    0x8(%ebp),%eax
   125dc:	83 c0 08             	add    $0x8,%eax
   125df:	83 ec 08             	sub    $0x8,%esp
   125e2:	52                   	push   %edx
   125e3:	50                   	push   %eax
   125e4:	e8 9b 0f 00 00       	call   13584 <list_insert_last>
   125e9:	83 c4 10             	add    $0x10,%esp
    task_switch();
   125ec:	e8 6b eb ff ff       	call   1115c <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   125f1:	83 ec 0c             	sub    $0xc,%esp
   125f4:	ff 75 f4             	push   -0xc(%ebp)
   125f7:	e8 3b fc ff ff       	call   12237 <idt_leave_protection>
   125fc:	83 c4 10             	add    $0x10,%esp
}
   125ff:	90                   	nop
   12600:	c9                   	leave  
   12601:	c3                   	ret    

00012602 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   12602:	55                   	push   %ebp
   12603:	89 e5                	mov    %esp,%ebp
   12605:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12608:	e8 12 fc ff ff       	call   1221f <idt_enter_protection>
   1260d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   12610:	e8 3d eb ff ff       	call   11152 <task_current>
   12615:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   12618:	8b 45 08             	mov    0x8(%ebp),%eax
   1261b:	8b 00                	mov    (%eax),%eax
   1261d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12620:	0f 85 83 00 00 00    	jne    126a9 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   12626:	8b 45 08             	mov    0x8(%ebp),%eax
   12629:	8b 40 04             	mov    0x4(%eax),%eax
   1262c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1262f:	8b 45 08             	mov    0x8(%ebp),%eax
   12632:	89 50 04             	mov    %edx,0x4(%eax)
   12635:	8b 45 08             	mov    0x8(%ebp),%eax
   12638:	8b 40 04             	mov    0x4(%eax),%eax
   1263b:	85 c0                	test   %eax,%eax
   1263d:	75 6a                	jne    126a9 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   1263f:	8b 45 08             	mov    0x8(%ebp),%eax
   12642:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   12648:	8b 45 08             	mov    0x8(%ebp),%eax
   1264b:	83 c0 08             	add    $0x8,%eax
   1264e:	83 ec 0c             	sub    $0xc,%esp
   12651:	50                   	push   %eax
   12652:	e8 98 fe ff ff       	call   124ef <list_is_empty>
   12657:	83 c4 10             	add    $0x10,%esp
   1265a:	85 c0                	test   %eax,%eax
   1265c:	75 4b                	jne    126a9 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1265e:	8b 45 08             	mov    0x8(%ebp),%eax
   12661:	83 c0 08             	add    $0x8,%eax
   12664:	83 ec 0c             	sub    $0xc,%esp
   12667:	50                   	push   %eax
   12668:	e8 a6 0f 00 00       	call   13613 <list_remove_first>
   1266d:	83 c4 10             	add    $0x10,%esp
   12670:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   12673:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12677:	74 08                	je     12681 <mutex_unlock+0x7f>
   12679:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1267c:	83 e8 48             	sub    $0x48,%eax
   1267f:	eb 05                	jmp    12686 <mutex_unlock+0x84>
   12681:	b8 00 00 00 00       	mov    $0x0,%eax
   12686:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   12689:	8b 45 08             	mov    0x8(%ebp),%eax
   1268c:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   12693:	8b 45 08             	mov    0x8(%ebp),%eax
   12696:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12699:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   1269b:	83 ec 0c             	sub    $0xc,%esp
   1269e:	ff 75 e8             	push   -0x18(%ebp)
   126a1:	e8 e8 e9 ff ff       	call   1108e <task_set_ready>
   126a6:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   126a9:	83 ec 0c             	sub    $0xc,%esp
   126ac:	ff 75 f4             	push   -0xc(%ebp)
   126af:	e8 83 fb ff ff       	call   12237 <idt_leave_protection>
   126b4:	83 c4 10             	add    $0x10,%esp
}
   126b7:	90                   	nop
   126b8:	c9                   	leave  
   126b9:	c3                   	ret    

000126ba <list_init>:
static inline void list_init(list_t *list) {
   126ba:	55                   	push   %ebp
   126bb:	89 e5                	mov    %esp,%ebp
   126bd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   126c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126c4:	75 19                	jne    126df <list_init+0x25>
   126c6:	68 d4 44 01 00       	push   $0x144d4
   126cb:	68 78 45 01 00       	push   $0x14578
   126d0:	6a 31                	push   $0x31
   126d2:	68 e8 44 01 00       	push   $0x144e8
   126d7:	e8 5d 05 00 00       	call   12c39 <pannic>
   126dc:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   126df:	8b 45 08             	mov    0x8(%ebp),%eax
   126e2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   126e9:	8b 45 08             	mov    0x8(%ebp),%eax
   126ec:	8b 50 04             	mov    0x4(%eax),%edx
   126ef:	8b 45 08             	mov    0x8(%ebp),%eax
   126f2:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   126f4:	8b 45 08             	mov    0x8(%ebp),%eax
   126f7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   126fe:	90                   	nop
   126ff:	c9                   	leave  
   12700:	c3                   	ret    

00012701 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12701:	55                   	push   %ebp
   12702:	89 e5                	mov    %esp,%ebp
   12704:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12707:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1270b:	75 19                	jne    12726 <list_is_empty+0x25>
   1270d:	68 d4 44 01 00       	push   $0x144d4
   12712:	68 84 45 01 00       	push   $0x14584
   12717:	6a 38                	push   $0x38
   12719:	68 e8 44 01 00       	push   $0x144e8
   1271e:	e8 16 05 00 00       	call   12c39 <pannic>
   12723:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12726:	8b 45 08             	mov    0x8(%ebp),%eax
   12729:	8b 40 08             	mov    0x8(%eax),%eax
   1272c:	85 c0                	test   %eax,%eax
   1272e:	0f 94 c0             	sete   %al
   12731:	0f b6 c0             	movzbl %al,%eax
}
   12734:	c9                   	leave  
   12735:	c3                   	ret    

00012736 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   12736:	55                   	push   %ebp
   12737:	89 e5                	mov    %esp,%ebp
   12739:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   1273c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12740:	75 19                	jne    1275b <sem_init+0x25>
   12742:	68 26 45 01 00       	push   $0x14526
   12747:	68 6c 45 01 00       	push   $0x1456c
   1274c:	6a 18                	push   $0x18
   1274e:	68 38 45 01 00       	push   $0x14538
   12753:	e8 e1 04 00 00       	call   12c39 <pannic>
   12758:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   1275b:	8b 45 08             	mov    0x8(%ebp),%eax
   1275e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   12764:	8b 45 08             	mov    0x8(%ebp),%eax
   12767:	83 c0 04             	add    $0x4,%eax
   1276a:	83 ec 0c             	sub    $0xc,%esp
   1276d:	50                   	push   %eax
   1276e:	e8 47 ff ff ff       	call   126ba <list_init>
   12773:	83 c4 10             	add    $0x10,%esp
}
   12776:	90                   	nop
   12777:	c9                   	leave  
   12778:	c3                   	ret    

00012779 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12779:	55                   	push   %ebp
   1277a:	89 e5                	mov    %esp,%ebp
   1277c:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1277f:	e8 9b fa ff ff       	call   1221f <idt_enter_protection>
   12784:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12787:	8b 45 08             	mov    0x8(%ebp),%eax
   1278a:	8b 00                	mov    (%eax),%eax
   1278c:	85 c0                	test   %eax,%eax
   1278e:	7e 0f                	jle    1279f <sem_wait+0x26>
        --sem->count;   
   12790:	8b 45 08             	mov    0x8(%ebp),%eax
   12793:	8b 00                	mov    (%eax),%eax
   12795:	8d 50 ff             	lea    -0x1(%eax),%edx
   12798:	8b 45 08             	mov    0x8(%ebp),%eax
   1279b:	89 10                	mov    %edx,(%eax)
   1279d:	eb 34                	jmp    127d3 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   1279f:	e8 ae e9 ff ff       	call   11152 <task_current>
   127a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   127a7:	83 ec 0c             	sub    $0xc,%esp
   127aa:	ff 75 f0             	push   -0x10(%ebp)
   127ad:	e8 27 e9 ff ff       	call   110d9 <task_set_unready>
   127b2:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   127b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127b8:	8d 50 48             	lea    0x48(%eax),%edx
   127bb:	8b 45 08             	mov    0x8(%ebp),%eax
   127be:	83 c0 04             	add    $0x4,%eax
   127c1:	83 ec 08             	sub    $0x8,%esp
   127c4:	52                   	push   %edx
   127c5:	50                   	push   %eax
   127c6:	e8 b9 0d 00 00       	call   13584 <list_insert_last>
   127cb:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   127ce:	e8 89 e9 ff ff       	call   1115c <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   127d3:	83 ec 0c             	sub    $0xc,%esp
   127d6:	ff 75 f4             	push   -0xc(%ebp)
   127d9:	e8 59 fa ff ff       	call   12237 <idt_leave_protection>
   127de:	83 c4 10             	add    $0x10,%esp
}
   127e1:	90                   	nop
   127e2:	c9                   	leave  
   127e3:	c3                   	ret    

000127e4 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   127e4:	55                   	push   %ebp
   127e5:	89 e5                	mov    %esp,%ebp
   127e7:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   127ea:	e8 30 fa ff ff       	call   1221f <idt_enter_protection>
   127ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   127f2:	8b 45 08             	mov    0x8(%ebp),%eax
   127f5:	83 c0 04             	add    $0x4,%eax
   127f8:	83 ec 0c             	sub    $0xc,%esp
   127fb:	50                   	push   %eax
   127fc:	e8 00 ff ff ff       	call   12701 <list_is_empty>
   12801:	83 c4 10             	add    $0x10,%esp
   12804:	85 c0                	test   %eax,%eax
   12806:	75 3b                	jne    12843 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   12808:	8b 45 08             	mov    0x8(%ebp),%eax
   1280b:	83 c0 04             	add    $0x4,%eax
   1280e:	83 ec 0c             	sub    $0xc,%esp
   12811:	50                   	push   %eax
   12812:	e8 fc 0d 00 00       	call   13613 <list_remove_first>
   12817:	83 c4 10             	add    $0x10,%esp
   1281a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   1281d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12821:	74 08                	je     1282b <sem_notify+0x47>
   12823:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12826:	83 e8 48             	sub    $0x48,%eax
   12829:	eb 05                	jmp    12830 <sem_notify+0x4c>
   1282b:	b8 00 00 00 00       	mov    $0x0,%eax
   12830:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12833:	83 ec 0c             	sub    $0xc,%esp
   12836:	ff 75 ec             	push   -0x14(%ebp)
   12839:	e8 50 e8 ff ff       	call   1108e <task_set_ready>
   1283e:	83 c4 10             	add    $0x10,%esp
   12841:	eb 0d                	jmp    12850 <sem_notify+0x6c>
    } else {
        sem->count++;
   12843:	8b 45 08             	mov    0x8(%ebp),%eax
   12846:	8b 00                	mov    (%eax),%eax
   12848:	8d 50 01             	lea    0x1(%eax),%edx
   1284b:	8b 45 08             	mov    0x8(%ebp),%eax
   1284e:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   12850:	83 ec 0c             	sub    $0xc,%esp
   12853:	ff 75 f4             	push   -0xc(%ebp)
   12856:	e8 dc f9 ff ff       	call   12237 <idt_leave_protection>
   1285b:	83 c4 10             	add    $0x10,%esp

}
   1285e:	90                   	nop
   1285f:	c9                   	leave  
   12860:	c3                   	ret    

00012861 <sem_count>:

int sem_count(sem_t *sem) {
   12861:	55                   	push   %ebp
   12862:	89 e5                	mov    %esp,%ebp
   12864:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12867:	e8 b3 f9 ff ff       	call   1221f <idt_enter_protection>
   1286c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1286f:	8b 45 08             	mov    0x8(%ebp),%eax
   12872:	8b 00                	mov    (%eax),%eax
   12874:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12877:	83 ec 0c             	sub    $0xc,%esp
   1287a:	ff 75 f4             	push   -0xc(%ebp)
   1287d:	e8 b5 f9 ff ff       	call   12237 <idt_leave_protection>
   12882:	83 c4 10             	add    $0x10,%esp

    return count;
   12885:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12888:	c9                   	leave  
   12889:	c3                   	ret    

0001288a <list_init>:
static inline void list_init(list_t *list) {
   1288a:	55                   	push   %ebp
   1288b:	89 e5                	mov    %esp,%ebp
   1288d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12890:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12894:	75 19                	jne    128af <list_init+0x25>
   12896:	68 94 45 01 00       	push   $0x14594
   1289b:	68 98 46 01 00       	push   $0x14698
   128a0:	6a 31                	push   $0x31
   128a2:	68 a8 45 01 00       	push   $0x145a8
   128a7:	e8 8d 03 00 00       	call   12c39 <pannic>
   128ac:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   128af:	8b 45 08             	mov    0x8(%ebp),%eax
   128b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   128b9:	8b 45 08             	mov    0x8(%ebp),%eax
   128bc:	8b 50 04             	mov    0x4(%eax),%edx
   128bf:	8b 45 08             	mov    0x8(%ebp),%eax
   128c2:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   128c4:	8b 45 08             	mov    0x8(%ebp),%eax
   128c7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   128ce:	90                   	nop
   128cf:	c9                   	leave  
   128d0:	c3                   	ret    

000128d1 <list_get_size>:
static inline int list_get_size(list_t *list) {
   128d1:	55                   	push   %ebp
   128d2:	89 e5                	mov    %esp,%ebp
   128d4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   128d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128db:	75 19                	jne    128f6 <list_get_size+0x25>
   128dd:	68 94 45 01 00       	push   $0x14594
   128e2:	68 a4 46 01 00       	push   $0x146a4
   128e7:	6a 3e                	push   $0x3e
   128e9:	68 a8 45 01 00       	push   $0x145a8
   128ee:	e8 46 03 00 00       	call   12c39 <pannic>
   128f3:	83 c4 10             	add    $0x10,%esp
    return list->size;
   128f6:	8b 45 08             	mov    0x8(%ebp),%eax
   128f9:	8b 40 08             	mov    0x8(%eax),%eax
}
   128fc:	c9                   	leave  
   128fd:	c3                   	ret    

000128fe <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   128fe:	55                   	push   %ebp
   128ff:	89 e5                	mov    %esp,%ebp
   12901:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12904:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12908:	75 19                	jne    12923 <list_get_first+0x25>
   1290a:	68 94 45 01 00       	push   $0x14594
   1290f:	68 c4 46 01 00       	push   $0x146c4
   12914:	6a 44                	push   $0x44
   12916:	68 a8 45 01 00       	push   $0x145a8
   1291b:	e8 19 03 00 00       	call   12c39 <pannic>
   12920:	83 c4 10             	add    $0x10,%esp
    return list->first;
   12923:	8b 45 08             	mov    0x8(%ebp),%eax
   12926:	8b 00                	mov    (%eax),%eax
}
   12928:	c9                   	leave  
   12929:	c3                   	ret    

0001292a <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1292a:	55                   	push   %ebp
   1292b:	89 e5                	mov    %esp,%ebp
   1292d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12934:	75 19                	jne    1294f <list_get_last+0x25>
   12936:	68 94 45 01 00       	push   $0x14594
   1293b:	68 b4 46 01 00       	push   $0x146b4
   12940:	6a 4a                	push   $0x4a
   12942:	68 a8 45 01 00       	push   $0x145a8
   12947:	e8 ed 02 00 00       	call   12c39 <pannic>
   1294c:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1294f:	8b 45 08             	mov    0x8(%ebp),%eax
   12952:	8b 40 04             	mov    0x4(%eax),%eax
}
   12955:	c9                   	leave  
   12956:	c3                   	ret    

00012957 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12957:	55                   	push   %ebp
   12958:	89 e5                	mov    %esp,%ebp
   1295a:	56                   	push   %esi
   1295b:	53                   	push   %ebx
   1295c:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1295f:	83 ec 0c             	sub    $0xc,%esp
   12962:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12965:	50                   	push   %eax
   12966:	e8 1f ff ff ff       	call   1288a <list_init>
   1296b:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1296e:	83 ec 0c             	sub    $0xc,%esp
   12971:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12974:	50                   	push   %eax
   12975:	e8 57 ff ff ff       	call   128d1 <list_get_size>
   1297a:	83 c4 10             	add    $0x10,%esp
   1297d:	89 c6                	mov    %eax,%esi
   1297f:	83 ec 0c             	sub    $0xc,%esp
   12982:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12985:	50                   	push   %eax
   12986:	e8 9f ff ff ff       	call   1292a <list_get_last>
   1298b:	83 c4 10             	add    $0x10,%esp
   1298e:	89 c3                	mov    %eax,%ebx
   12990:	83 ec 0c             	sub    $0xc,%esp
   12993:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12996:	50                   	push   %eax
   12997:	e8 62 ff ff ff       	call   128fe <list_get_first>
   1299c:	83 c4 10             	add    $0x10,%esp
   1299f:	56                   	push   %esi
   129a0:	53                   	push   %ebx
   129a1:	50                   	push   %eax
   129a2:	68 e8 45 01 00       	push   $0x145e8
   129a7:	e8 5c 0f 00 00       	call   13908 <log_printf>
   129ac:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   129af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   129b6:	eb 3f                	jmp    129f7 <list_test+0xa0>
        list_node_t *node = nodes + i;
   129b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129bb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   129c2:	8d 45 9c             	lea    -0x64(%ebp),%eax
   129c5:	01 d0                	add    %edx,%eax
   129c7:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   129ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
   129cd:	83 ec 04             	sub    $0x4,%esp
   129d0:	50                   	push   %eax
   129d1:	ff 75 f4             	push   -0xc(%ebp)
   129d4:	68 10 46 01 00       	push   $0x14610
   129d9:	e8 2a 0f 00 00       	call   13908 <log_printf>
   129de:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   129e1:	83 ec 08             	sub    $0x8,%esp
   129e4:	ff 75 d0             	push   -0x30(%ebp)
   129e7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   129ea:	50                   	push   %eax
   129eb:	e8 09 0b 00 00       	call   134f9 <list_insert_first>
   129f0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   129f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   129f7:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   129fb:	7e bb                	jle    129b8 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   129fd:	83 ec 0c             	sub    $0xc,%esp
   12a00:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a03:	50                   	push   %eax
   12a04:	e8 c8 fe ff ff       	call   128d1 <list_get_size>
   12a09:	83 c4 10             	add    $0x10,%esp
   12a0c:	89 c6                	mov    %eax,%esi
   12a0e:	83 ec 0c             	sub    $0xc,%esp
   12a11:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a14:	50                   	push   %eax
   12a15:	e8 10 ff ff ff       	call   1292a <list_get_last>
   12a1a:	83 c4 10             	add    $0x10,%esp
   12a1d:	89 c3                	mov    %eax,%ebx
   12a1f:	83 ec 0c             	sub    $0xc,%esp
   12a22:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a25:	50                   	push   %eax
   12a26:	e8 d3 fe ff ff       	call   128fe <list_get_first>
   12a2b:	83 c4 10             	add    $0x10,%esp
   12a2e:	56                   	push   %esi
   12a2f:	53                   	push   %ebx
   12a30:	50                   	push   %eax
   12a31:	68 e8 45 01 00       	push   $0x145e8
   12a36:	e8 cd 0e 00 00       	call   13908 <log_printf>
   12a3b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   12a3e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12a45:	eb 2d                	jmp    12a74 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12a47:	83 ec 0c             	sub    $0xc,%esp
   12a4a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a4d:	50                   	push   %eax
   12a4e:	e8 c0 0b 00 00       	call   13613 <list_remove_first>
   12a53:	83 c4 10             	add    $0x10,%esp
   12a56:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12a59:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   12a5c:	83 ec 04             	sub    $0x4,%esp
   12a5f:	50                   	push   %eax
   12a60:	ff 75 f0             	push   -0x10(%ebp)
   12a63:	68 2f 46 01 00       	push   $0x1462f
   12a68:	e8 9b 0e 00 00       	call   13908 <log_printf>
   12a6d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12a70:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12a74:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12a78:	7e cd                	jle    12a47 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12a7a:	83 ec 0c             	sub    $0xc,%esp
   12a7d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a80:	50                   	push   %eax
   12a81:	e8 4b fe ff ff       	call   128d1 <list_get_size>
   12a86:	83 c4 10             	add    $0x10,%esp
   12a89:	89 c6                	mov    %eax,%esi
   12a8b:	83 ec 0c             	sub    $0xc,%esp
   12a8e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a91:	50                   	push   %eax
   12a92:	e8 93 fe ff ff       	call   1292a <list_get_last>
   12a97:	83 c4 10             	add    $0x10,%esp
   12a9a:	89 c3                	mov    %eax,%ebx
   12a9c:	83 ec 0c             	sub    $0xc,%esp
   12a9f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12aa2:	50                   	push   %eax
   12aa3:	e8 56 fe ff ff       	call   128fe <list_get_first>
   12aa8:	83 c4 10             	add    $0x10,%esp
   12aab:	56                   	push   %esi
   12aac:	53                   	push   %ebx
   12aad:	50                   	push   %eax
   12aae:	68 e8 45 01 00       	push   $0x145e8
   12ab3:	e8 50 0e 00 00       	call   13908 <log_printf>
   12ab8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   12abb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12ac2:	eb 3f                	jmp    12b03 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12ac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12ac7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12ace:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12ad1:	01 d0                	add    %edx,%eax
   12ad3:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12ad6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12ad9:	83 ec 04             	sub    $0x4,%esp
   12adc:	50                   	push   %eax
   12add:	ff 75 ec             	push   -0x14(%ebp)
   12ae0:	68 46 46 01 00       	push   $0x14646
   12ae5:	e8 1e 0e 00 00       	call   13908 <log_printf>
   12aea:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   12aed:	83 ec 08             	sub    $0x8,%esp
   12af0:	ff 75 d8             	push   -0x28(%ebp)
   12af3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12af6:	50                   	push   %eax
   12af7:	e8 88 0a 00 00       	call   13584 <list_insert_last>
   12afc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12aff:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12b03:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12b07:	7e bb                	jle    12ac4 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12b09:	83 ec 0c             	sub    $0xc,%esp
   12b0c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b0f:	50                   	push   %eax
   12b10:	e8 bc fd ff ff       	call   128d1 <list_get_size>
   12b15:	83 c4 10             	add    $0x10,%esp
   12b18:	89 c6                	mov    %eax,%esi
   12b1a:	83 ec 0c             	sub    $0xc,%esp
   12b1d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b20:	50                   	push   %eax
   12b21:	e8 04 fe ff ff       	call   1292a <list_get_last>
   12b26:	83 c4 10             	add    $0x10,%esp
   12b29:	89 c3                	mov    %eax,%ebx
   12b2b:	83 ec 0c             	sub    $0xc,%esp
   12b2e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b31:	50                   	push   %eax
   12b32:	e8 c7 fd ff ff       	call   128fe <list_get_first>
   12b37:	83 c4 10             	add    $0x10,%esp
   12b3a:	56                   	push   %esi
   12b3b:	53                   	push   %ebx
   12b3c:	50                   	push   %eax
   12b3d:	68 e8 45 01 00       	push   $0x145e8
   12b42:	e8 c1 0d 00 00       	call   13908 <log_printf>
   12b47:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12b4a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12b51:	eb 2d                	jmp    12b80 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12b53:	83 ec 0c             	sub    $0xc,%esp
   12b56:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b59:	50                   	push   %eax
   12b5a:	e8 65 0b 00 00       	call   136c4 <list_remove_last>
   12b5f:	83 c4 10             	add    $0x10,%esp
   12b62:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12b65:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12b68:	83 ec 04             	sub    $0x4,%esp
   12b6b:	50                   	push   %eax
   12b6c:	ff 75 e8             	push   -0x18(%ebp)
   12b6f:	68 64 46 01 00       	push   $0x14664
   12b74:	e8 8f 0d 00 00       	call   13908 <log_printf>
   12b79:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12b7c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12b80:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12b84:	7e cd                	jle    12b53 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12b86:	83 ec 0c             	sub    $0xc,%esp
   12b89:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b8c:	50                   	push   %eax
   12b8d:	e8 3f fd ff ff       	call   128d1 <list_get_size>
   12b92:	83 c4 10             	add    $0x10,%esp
   12b95:	89 c6                	mov    %eax,%esi
   12b97:	83 ec 0c             	sub    $0xc,%esp
   12b9a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b9d:	50                   	push   %eax
   12b9e:	e8 87 fd ff ff       	call   1292a <list_get_last>
   12ba3:	83 c4 10             	add    $0x10,%esp
   12ba6:	89 c3                	mov    %eax,%ebx
   12ba8:	83 ec 0c             	sub    $0xc,%esp
   12bab:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12bae:	50                   	push   %eax
   12baf:	e8 4a fd ff ff       	call   128fe <list_get_first>
   12bb4:	83 c4 10             	add    $0x10,%esp
   12bb7:	56                   	push   %esi
   12bb8:	53                   	push   %ebx
   12bb9:	50                   	push   %eax
   12bba:	68 e8 45 01 00       	push   $0x145e8
   12bbf:	e8 44 0d 00 00       	call   13908 <log_printf>
   12bc4:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12bc7:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12bce:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12bd5:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12bdc:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12be3:	8d 45 90             	lea    -0x70(%ebp),%eax
   12be6:	83 c0 04             	add    $0x4,%eax
   12be9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12bec:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12bf0:	74 08                	je     12bfa <list_test+0x2a3>
   12bf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12bf5:	83 e8 04             	sub    $0x4,%eax
   12bf8:	eb 05                	jmp    12bff <list_test+0x2a8>
   12bfa:	b8 00 00 00 00       	mov    $0x0,%eax
   12bff:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12c02:	8d 45 90             	lea    -0x70(%ebp),%eax
   12c05:	83 ec 08             	sub    $0x8,%esp
   12c08:	50                   	push   %eax
   12c09:	68 7a 46 01 00       	push   $0x1467a
   12c0e:	e8 f5 0c 00 00       	call   13908 <log_printf>
   12c13:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12c16:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12c19:	83 ec 08             	sub    $0x8,%esp
   12c1c:	50                   	push   %eax
   12c1d:	68 88 46 01 00       	push   $0x14688
   12c22:	e8 e1 0c 00 00       	call   13908 <log_printf>
   12c27:	83 c4 10             	add    $0x10,%esp

 }
   12c2a:	90                   	nop
   12c2b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12c2e:	5b                   	pop    %ebx
   12c2f:	5e                   	pop    %esi
   12c30:	5d                   	pop    %ebp
   12c31:	c3                   	ret    

00012c32 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12c32:	55                   	push   %ebp
   12c33:	89 e5                	mov    %esp,%ebp
   12c35:	f4                   	hlt    
   12c36:	90                   	nop
   12c37:	5d                   	pop    %ebp
   12c38:	c3                   	ret    

00012c39 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   12c39:	55                   	push   %ebp
   12c3a:	89 e5                	mov    %esp,%ebp
   12c3c:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12c3f:	83 ec 08             	sub    $0x8,%esp
   12c42:	ff 75 14             	push   0x14(%ebp)
   12c45:	68 d3 46 01 00       	push   $0x146d3
   12c4a:	e8 b9 0c 00 00       	call   13908 <log_printf>
   12c4f:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12c52:	ff 75 10             	push   0x10(%ebp)
   12c55:	ff 75 0c             	push   0xc(%ebp)
   12c58:	ff 75 08             	push   0x8(%ebp)
   12c5b:	68 e4 46 01 00       	push   $0x146e4
   12c60:	e8 a3 0c 00 00       	call   13908 <log_printf>
   12c65:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12c68:	e8 c5 ff ff ff       	call   12c32 <hlt>
   12c6d:	eb f9                	jmp    12c68 <pannic+0x2f>

00012c6f <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12c6f:	55                   	push   %ebp
   12c70:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12c72:	8b 45 08             	mov    0x8(%ebp),%eax
   12c75:	83 c0 07             	add    $0x7,%eax
   12c78:	8d 50 07             	lea    0x7(%eax),%edx
   12c7b:	85 c0                	test   %eax,%eax
   12c7d:	0f 48 c2             	cmovs  %edx,%eax
   12c80:	c1 f8 03             	sar    $0x3,%eax
}
   12c83:	5d                   	pop    %ebp
   12c84:	c3                   	ret    

00012c85 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12c85:	55                   	push   %ebp
   12c86:	89 e5                	mov    %esp,%ebp
   12c88:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12c8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c8f:	75 19                	jne    12caa <bitmap_init+0x25>
   12c91:	68 00 47 01 00       	push   $0x14700
   12c96:	68 94 47 01 00       	push   $0x14794
   12c9b:	6a 24                	push   $0x24
   12c9d:	68 18 47 01 00       	push   $0x14718
   12ca2:	e8 92 ff ff ff       	call   12c39 <pannic>
   12ca7:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12caa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12cae:	75 19                	jne    12cc9 <bitmap_init+0x44>
   12cb0:	68 50 47 01 00       	push   $0x14750
   12cb5:	68 94 47 01 00       	push   $0x14794
   12cba:	6a 25                	push   $0x25
   12cbc:	68 18 47 01 00       	push   $0x14718
   12cc1:	e8 73 ff ff ff       	call   12c39 <pannic>
   12cc6:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ccc:	8b 55 10             	mov    0x10(%ebp),%edx
   12ccf:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd4:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cd7:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   12cda:	8b 45 08             	mov    0x8(%ebp),%eax
   12cdd:	8b 00                	mov    (%eax),%eax
   12cdf:	83 ec 0c             	sub    $0xc,%esp
   12ce2:	50                   	push   %eax
   12ce3:	e8 87 ff ff ff       	call   12c6f <bitmap_byte_count>
   12ce8:	83 c4 10             	add    $0x10,%esp
   12ceb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12cee:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12cf2:	74 07                	je     12cfb <bitmap_init+0x76>
   12cf4:	ba ff 00 00 00       	mov    $0xff,%edx
   12cf9:	eb 05                	jmp    12d00 <bitmap_init+0x7b>
   12cfb:	ba 00 00 00 00       	mov    $0x0,%edx
   12d00:	8b 45 08             	mov    0x8(%ebp),%eax
   12d03:	8b 40 04             	mov    0x4(%eax),%eax
   12d06:	83 ec 04             	sub    $0x4,%esp
   12d09:	ff 75 f4             	push   -0xc(%ebp)
   12d0c:	52                   	push   %edx
   12d0d:	50                   	push   %eax
   12d0e:	e8 28 04 00 00       	call   1313b <kernel_memset>
   12d13:	83 c4 10             	add    $0x10,%esp

}
   12d16:	90                   	nop
   12d17:	c9                   	leave  
   12d18:	c3                   	ret    

00012d19 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   12d19:	55                   	push   %ebp
   12d1a:	89 e5                	mov    %esp,%ebp
   12d1c:	53                   	push   %ebx
   12d1d:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12d20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d24:	75 19                	jne    12d3f <bitmap_get_bit+0x26>
   12d26:	68 00 47 01 00       	push   $0x14700
   12d2b:	68 a0 47 01 00       	push   $0x147a0
   12d30:	6a 39                	push   $0x39
   12d32:	68 18 47 01 00       	push   $0x14718
   12d37:	e8 fd fe ff ff       	call   12c39 <pannic>
   12d3c:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12d3f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d43:	79 19                	jns    12d5e <bitmap_get_bit+0x45>
   12d45:	68 64 47 01 00       	push   $0x14764
   12d4a:	68 a0 47 01 00       	push   $0x147a0
   12d4f:	6a 3a                	push   $0x3a
   12d51:	68 18 47 01 00       	push   $0x14718
   12d56:	e8 de fe ff ff       	call   12c39 <pannic>
   12d5b:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12d61:	8b 48 04             	mov    0x4(%eax),%ecx
   12d64:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d67:	8d 50 07             	lea    0x7(%eax),%edx
   12d6a:	85 c0                	test   %eax,%eax
   12d6c:	0f 48 c2             	cmovs  %edx,%eax
   12d6f:	c1 f8 03             	sar    $0x3,%eax
   12d72:	01 c8                	add    %ecx,%eax
   12d74:	0f b6 00             	movzbl (%eax),%eax
   12d77:	89 c3                	mov    %eax,%ebx
   12d79:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d7c:	83 e0 07             	and    $0x7,%eax
   12d7f:	ba 01 00 00 00       	mov    $0x1,%edx
   12d84:	89 c1                	mov    %eax,%ecx
   12d86:	d3 e2                	shl    %cl,%edx
   12d88:	89 d0                	mov    %edx,%eax
   12d8a:	21 d8                	and    %ebx,%eax
}
   12d8c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12d8f:	c9                   	leave  
   12d90:	c3                   	ret    

00012d91 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12d91:	55                   	push   %ebp
   12d92:	89 e5                	mov    %esp,%ebp
   12d94:	56                   	push   %esi
   12d95:	53                   	push   %ebx
   12d96:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12d99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d9d:	75 19                	jne    12db8 <bitmap_set_bit+0x27>
   12d9f:	68 00 47 01 00       	push   $0x14700
   12da4:	68 b0 47 01 00       	push   $0x147b0
   12da9:	6a 48                	push   $0x48
   12dab:	68 18 47 01 00       	push   $0x14718
   12db0:	e8 84 fe ff ff       	call   12c39 <pannic>
   12db5:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12db8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12dbc:	78 06                	js     12dc4 <bitmap_set_bit+0x33>
   12dbe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12dc2:	79 19                	jns    12ddd <bitmap_set_bit+0x4c>
   12dc4:	68 6f 47 01 00       	push   $0x1476f
   12dc9:	68 b0 47 01 00       	push   $0x147b0
   12dce:	6a 49                	push   $0x49
   12dd0:	68 18 47 01 00       	push   $0x14718
   12dd5:	e8 5f fe ff ff       	call   12c39 <pannic>
   12dda:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12ddd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12de4:	e9 92 00 00 00       	jmp    12e7b <bitmap_set_bit+0xea>
        if (bit) {
   12de9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12ded:	74 42                	je     12e31 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12def:	8b 45 08             	mov    0x8(%ebp),%eax
   12df2:	8b 48 04             	mov    0x4(%eax),%ecx
   12df5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12df8:	8d 50 07             	lea    0x7(%eax),%edx
   12dfb:	85 c0                	test   %eax,%eax
   12dfd:	0f 48 c2             	cmovs  %edx,%eax
   12e00:	c1 f8 03             	sar    $0x3,%eax
   12e03:	89 c2                	mov    %eax,%edx
   12e05:	89 d0                	mov    %edx,%eax
   12e07:	01 c8                	add    %ecx,%eax
   12e09:	0f b6 00             	movzbl (%eax),%eax
   12e0c:	89 c6                	mov    %eax,%esi
   12e0e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e11:	83 e0 07             	and    $0x7,%eax
   12e14:	bb 01 00 00 00       	mov    $0x1,%ebx
   12e19:	89 c1                	mov    %eax,%ecx
   12e1b:	d3 e3                	shl    %cl,%ebx
   12e1d:	89 d8                	mov    %ebx,%eax
   12e1f:	89 f1                	mov    %esi,%ecx
   12e21:	09 c1                	or     %eax,%ecx
   12e23:	8b 45 08             	mov    0x8(%ebp),%eax
   12e26:	8b 40 04             	mov    0x4(%eax),%eax
   12e29:	01 d0                	add    %edx,%eax
   12e2b:	89 ca                	mov    %ecx,%edx
   12e2d:	88 10                	mov    %dl,(%eax)
   12e2f:	eb 42                	jmp    12e73 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12e31:	8b 45 08             	mov    0x8(%ebp),%eax
   12e34:	8b 48 04             	mov    0x4(%eax),%ecx
   12e37:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e3a:	8d 50 07             	lea    0x7(%eax),%edx
   12e3d:	85 c0                	test   %eax,%eax
   12e3f:	0f 48 c2             	cmovs  %edx,%eax
   12e42:	c1 f8 03             	sar    $0x3,%eax
   12e45:	89 c2                	mov    %eax,%edx
   12e47:	89 d0                	mov    %edx,%eax
   12e49:	01 c8                	add    %ecx,%eax
   12e4b:	0f b6 00             	movzbl (%eax),%eax
   12e4e:	89 c6                	mov    %eax,%esi
   12e50:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e53:	83 e0 07             	and    $0x7,%eax
   12e56:	bb 01 00 00 00       	mov    $0x1,%ebx
   12e5b:	89 c1                	mov    %eax,%ecx
   12e5d:	d3 e3                	shl    %cl,%ebx
   12e5f:	89 d8                	mov    %ebx,%eax
   12e61:	f7 d0                	not    %eax
   12e63:	89 f1                	mov    %esi,%ecx
   12e65:	21 c1                	and    %eax,%ecx
   12e67:	8b 45 08             	mov    0x8(%ebp),%eax
   12e6a:	8b 40 04             	mov    0x4(%eax),%eax
   12e6d:	01 d0                	add    %edx,%eax
   12e6f:	89 ca                	mov    %ecx,%edx
   12e71:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12e73:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e77:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e7e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12e81:	7d 0e                	jge    12e91 <bitmap_set_bit+0x100>
   12e83:	8b 45 08             	mov    0x8(%ebp),%eax
   12e86:	8b 00                	mov    (%eax),%eax
   12e88:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12e8b:	0f 8c 58 ff ff ff    	jl     12de9 <bitmap_set_bit+0x58>
        }
    }
}
   12e91:	90                   	nop
   12e92:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12e95:	5b                   	pop    %ebx
   12e96:	5e                   	pop    %esi
   12e97:	5d                   	pop    %ebp
   12e98:	c3                   	ret    

00012e99 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12e99:	55                   	push   %ebp
   12e9a:	89 e5                	mov    %esp,%ebp
   12e9c:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12e9f:	83 ec 08             	sub    $0x8,%esp
   12ea2:	ff 75 0c             	push   0xc(%ebp)
   12ea5:	ff 75 08             	push   0x8(%ebp)
   12ea8:	e8 6c fe ff ff       	call   12d19 <bitmap_get_bit>
   12ead:	83 c4 10             	add    $0x10,%esp
   12eb0:	84 c0                	test   %al,%al
   12eb2:	0f 95 c0             	setne  %al
   12eb5:	0f b6 c0             	movzbl %al,%eax
}
   12eb8:	c9                   	leave  
   12eb9:	c3                   	ret    

00012eba <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12eba:	55                   	push   %ebp
   12ebb:	89 e5                	mov    %esp,%ebp
   12ebd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12ec0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ec4:	75 19                	jne    12edf <bitmap_alloc_nbits+0x25>
   12ec6:	68 00 47 01 00       	push   $0x14700
   12ecb:	68 c0 47 01 00       	push   $0x147c0
   12ed0:	6a 68                	push   $0x68
   12ed2:	68 18 47 01 00       	push   $0x14718
   12ed7:	e8 5d fd ff ff       	call   12c39 <pannic>
   12edc:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12edf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12ee3:	79 19                	jns    12efe <bitmap_alloc_nbits+0x44>
   12ee5:	68 88 47 01 00       	push   $0x14788
   12eea:	68 c0 47 01 00       	push   $0x147c0
   12eef:	6a 69                	push   $0x69
   12ef1:	68 18 47 01 00       	push   $0x14718
   12ef6:	e8 3e fd ff ff       	call   12c39 <pannic>
   12efb:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12efe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12f05:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12f0c:	e9 8f 00 00 00       	jmp    12fa0 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12f11:	83 ec 08             	sub    $0x8,%esp
   12f14:	ff 75 f4             	push   -0xc(%ebp)
   12f17:	ff 75 08             	push   0x8(%ebp)
   12f1a:	e8 fa fd ff ff       	call   12d19 <bitmap_get_bit>
   12f1f:	83 c4 10             	add    $0x10,%esp
   12f22:	0f b6 c0             	movzbl %al,%eax
   12f25:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f28:	74 06                	je     12f30 <bitmap_alloc_nbits+0x76>
            search_index++;
   12f2a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12f2e:	eb 70                	jmp    12fa0 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f33:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12f36:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12f3d:	eb 2d                	jmp    12f6c <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f42:	8d 50 01             	lea    0x1(%eax),%edx
   12f45:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12f48:	83 ec 08             	sub    $0x8,%esp
   12f4b:	50                   	push   %eax
   12f4c:	ff 75 08             	push   0x8(%ebp)
   12f4f:	e8 c5 fd ff ff       	call   12d19 <bitmap_get_bit>
   12f54:	83 c4 10             	add    $0x10,%esp
   12f57:	0f b6 c0             	movzbl %al,%eax
   12f5a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f5d:	74 09                	je     12f68 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12f5f:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12f66:	eb 16                	jmp    12f7e <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12f68:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12f6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12f6f:	3b 45 10             	cmp    0x10(%ebp),%eax
   12f72:	7d 0a                	jge    12f7e <bitmap_alloc_nbits+0xc4>
   12f74:	8b 45 08             	mov    0x8(%ebp),%eax
   12f77:	8b 00                	mov    (%eax),%eax
   12f79:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12f7c:	7c c1                	jl     12f3f <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12f7e:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12f82:	74 1c                	je     12fa0 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12f84:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f87:	f7 d0                	not    %eax
   12f89:	50                   	push   %eax
   12f8a:	ff 75 10             	push   0x10(%ebp)
   12f8d:	ff 75 f0             	push   -0x10(%ebp)
   12f90:	ff 75 08             	push   0x8(%ebp)
   12f93:	e8 f9 fd ff ff       	call   12d91 <bitmap_set_bit>
   12f98:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12f9e:	eb 13                	jmp    12fb3 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12fa0:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa3:	8b 00                	mov    (%eax),%eax
   12fa5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12fa8:	0f 8c 63 ff ff ff    	jl     12f11 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12fae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12fb3:	c9                   	leave  
   12fb4:	c3                   	ret    

00012fb5 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12fb5:	55                   	push   %ebp
   12fb6:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12fb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12fbc:	74 3b                	je     12ff9 <kernel_strcpy+0x44>
   12fbe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12fc2:	74 35                	je     12ff9 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12fc4:	eb 17                	jmp    12fdd <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12fc6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fc9:	8d 42 01             	lea    0x1(%edx),%eax
   12fcc:	89 45 0c             	mov    %eax,0xc(%ebp)
   12fcf:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd2:	8d 48 01             	lea    0x1(%eax),%ecx
   12fd5:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12fd8:	0f b6 12             	movzbl (%edx),%edx
   12fdb:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe0:	0f b6 00             	movzbl (%eax),%eax
   12fe3:	84 c0                	test   %al,%al
   12fe5:	74 0a                	je     12ff1 <kernel_strcpy+0x3c>
   12fe7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fea:	0f b6 00             	movzbl (%eax),%eax
   12fed:	84 c0                	test   %al,%al
   12fef:	75 d5                	jne    12fc6 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ff4:	c6 00 00             	movb   $0x0,(%eax)
   12ff7:	eb 01                	jmp    12ffa <kernel_strcpy+0x45>
    if (!dest || !src) return;
   12ff9:	90                   	nop
    
}
   12ffa:	5d                   	pop    %ebp
   12ffb:	c3                   	ret    

00012ffc <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12ffc:	55                   	push   %ebp
   12ffd:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12fff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13003:	74 45                	je     1304a <kernel_strncpy+0x4e>
   13005:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13009:	74 3f                	je     1304a <kernel_strncpy+0x4e>
   1300b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1300f:	74 39                	je     1304a <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   13011:	eb 17                	jmp    1302a <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   13013:	8b 55 0c             	mov    0xc(%ebp),%edx
   13016:	8d 42 01             	lea    0x1(%edx),%eax
   13019:	89 45 0c             	mov    %eax,0xc(%ebp)
   1301c:	8b 45 08             	mov    0x8(%ebp),%eax
   1301f:	8d 48 01             	lea    0x1(%eax),%ecx
   13022:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13025:	0f b6 12             	movzbl (%edx),%edx
   13028:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   1302a:	8b 45 10             	mov    0x10(%ebp),%eax
   1302d:	8d 50 ff             	lea    -0x1(%eax),%edx
   13030:	89 55 10             	mov    %edx,0x10(%ebp)
   13033:	83 f8 01             	cmp    $0x1,%eax
   13036:	7e 0a                	jle    13042 <kernel_strncpy+0x46>
   13038:	8b 45 0c             	mov    0xc(%ebp),%eax
   1303b:	0f b6 00             	movzbl (%eax),%eax
   1303e:	84 c0                	test   %al,%al
   13040:	75 d1                	jne    13013 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   13042:	8b 45 08             	mov    0x8(%ebp),%eax
   13045:	c6 00 00             	movb   $0x0,(%eax)
   13048:	eb 01                	jmp    1304b <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   1304a:	90                   	nop
}
   1304b:	5d                   	pop    %ebp
   1304c:	c3                   	ret    

0001304d <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1304d:	55                   	push   %ebp
   1304e:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   13050:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13054:	74 06                	je     1305c <kernel_strncmp+0xf>
   13056:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1305a:	75 0f                	jne    1306b <kernel_strncmp+0x1e>
   1305c:	b8 00 00 00 00       	mov    $0x0,%eax
   13061:	eb 52                	jmp    130b5 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   13063:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   13067:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1306b:	8b 45 08             	mov    0x8(%ebp),%eax
   1306e:	0f b6 00             	movzbl (%eax),%eax
   13071:	84 c0                	test   %al,%al
   13073:	74 24                	je     13099 <kernel_strncmp+0x4c>
   13075:	8b 45 0c             	mov    0xc(%ebp),%eax
   13078:	0f b6 00             	movzbl (%eax),%eax
   1307b:	84 c0                	test   %al,%al
   1307d:	74 1a                	je     13099 <kernel_strncmp+0x4c>
   1307f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   13083:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13087:	74 10                	je     13099 <kernel_strncmp+0x4c>
   13089:	8b 45 08             	mov    0x8(%ebp),%eax
   1308c:	0f b6 10             	movzbl (%eax),%edx
   1308f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13092:	0f b6 00             	movzbl (%eax),%eax
   13095:	38 c2                	cmp    %al,%dl
   13097:	74 ca                	je     13063 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   13099:	8b 45 08             	mov    0x8(%ebp),%eax
   1309c:	0f b6 10             	movzbl (%eax),%edx
   1309f:	8b 45 0c             	mov    0xc(%ebp),%eax
   130a2:	0f b6 00             	movzbl (%eax),%eax
   130a5:	38 c2                	cmp    %al,%dl
   130a7:	7e 07                	jle    130b0 <kernel_strncmp+0x63>
   130a9:	b8 01 00 00 00       	mov    $0x1,%eax
   130ae:	eb 05                	jmp    130b5 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   130b0:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   130b5:	5d                   	pop    %ebp
   130b6:	c3                   	ret    

000130b7 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   130b7:	55                   	push   %ebp
   130b8:	89 e5                	mov    %esp,%ebp
   130ba:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   130bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   130c1:	75 07                	jne    130ca <kernel_strlen+0x13>
   130c3:	b8 00 00 00 00       	mov    $0x0,%eax
   130c8:	eb 20                	jmp    130ea <kernel_strlen+0x33>

    int len = 0;
   130ca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   130d1:	eb 04                	jmp    130d7 <kernel_strlen+0x20>
   130d3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   130d7:	8b 45 08             	mov    0x8(%ebp),%eax
   130da:	8d 50 01             	lea    0x1(%eax),%edx
   130dd:	89 55 08             	mov    %edx,0x8(%ebp)
   130e0:	0f b6 00             	movzbl (%eax),%eax
   130e3:	84 c0                	test   %al,%al
   130e5:	75 ec                	jne    130d3 <kernel_strlen+0x1c>

    return len;
   130e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   130ea:	c9                   	leave  
   130eb:	c3                   	ret    

000130ec <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   130ec:	55                   	push   %ebp
   130ed:	89 e5                	mov    %esp,%ebp
   130ef:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   130f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   130f6:	74 40                	je     13138 <kernel_memcpy+0x4c>
   130f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   130fc:	74 3a                	je     13138 <kernel_memcpy+0x4c>
   130fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13102:	74 34                	je     13138 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   13104:	8b 45 08             	mov    0x8(%ebp),%eax
   13107:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   1310a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1310d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   13110:	eb 17                	jmp    13129 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   13112:	8b 55 f8             	mov    -0x8(%ebp),%edx
   13115:	8d 42 01             	lea    0x1(%edx),%eax
   13118:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1311b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1311e:	8d 48 01             	lea    0x1(%eax),%ecx
   13121:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   13124:	0f b6 12             	movzbl (%edx),%edx
   13127:	88 10                	mov    %dl,(%eax)
    while (size--) {
   13129:	8b 45 10             	mov    0x10(%ebp),%eax
   1312c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1312f:	89 55 10             	mov    %edx,0x10(%ebp)
   13132:	85 c0                	test   %eax,%eax
   13134:	75 dc                	jne    13112 <kernel_memcpy+0x26>
   13136:	eb 01                	jmp    13139 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   13138:	90                   	nop
    }
    
}
   13139:	c9                   	leave  
   1313a:	c3                   	ret    

0001313b <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1313b:	55                   	push   %ebp
   1313c:	89 e5                	mov    %esp,%ebp
   1313e:	83 ec 14             	sub    $0x14,%esp
   13141:	8b 45 0c             	mov    0xc(%ebp),%eax
   13144:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   13147:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1314b:	74 2c                	je     13179 <kernel_memset+0x3e>
   1314d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13151:	74 26                	je     13179 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   13153:	8b 45 08             	mov    0x8(%ebp),%eax
   13156:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   13159:	eb 0f                	jmp    1316a <kernel_memset+0x2f>
        *(d++) = v;
   1315b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1315e:	8d 50 01             	lea    0x1(%eax),%edx
   13161:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13164:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13168:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1316a:	8b 45 10             	mov    0x10(%ebp),%eax
   1316d:	8d 50 ff             	lea    -0x1(%eax),%edx
   13170:	89 55 10             	mov    %edx,0x10(%ebp)
   13173:	85 c0                	test   %eax,%eax
   13175:	75 e4                	jne    1315b <kernel_memset+0x20>
   13177:	eb 01                	jmp    1317a <kernel_memset+0x3f>
    if (!dest || !size) return;
   13179:	90                   	nop
    }
    
}
   1317a:	c9                   	leave  
   1317b:	c3                   	ret    

0001317c <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1317c:	55                   	push   %ebp
   1317d:	89 e5                	mov    %esp,%ebp
   1317f:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   13182:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13186:	74 0c                	je     13194 <kernel_memcmp+0x18>
   13188:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1318c:	74 06                	je     13194 <kernel_memcmp+0x18>
   1318e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13192:	75 07                	jne    1319b <kernel_memcmp+0x1f>
   13194:	b8 00 00 00 00       	mov    $0x0,%eax
   13199:	eb 63                	jmp    131fe <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1319b:	8b 45 08             	mov    0x8(%ebp),%eax
   1319e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   131a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   131a4:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   131a7:	eb 08                	jmp    131b1 <kernel_memcmp+0x35>
        d1++;
   131a9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   131ad:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   131b1:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   131b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   131b9:	74 10                	je     131cb <kernel_memcmp+0x4f>
   131bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131be:	0f b6 10             	movzbl (%eax),%edx
   131c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   131c4:	0f b6 00             	movzbl (%eax),%eax
   131c7:	38 c2                	cmp    %al,%dl
   131c9:	74 de                	je     131a9 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   131cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131ce:	0f b6 10             	movzbl (%eax),%edx
   131d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   131d4:	0f b6 00             	movzbl (%eax),%eax
   131d7:	38 c2                	cmp    %al,%dl
   131d9:	76 07                	jbe    131e2 <kernel_memcmp+0x66>
   131db:	b8 01 00 00 00       	mov    $0x1,%eax
   131e0:	eb 1c                	jmp    131fe <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   131e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131e5:	0f b6 10             	movzbl (%eax),%edx
   131e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   131eb:	0f b6 00             	movzbl (%eax),%eax
   131ee:	38 c2                	cmp    %al,%dl
   131f0:	73 07                	jae    131f9 <kernel_memcmp+0x7d>
   131f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   131f7:	eb 05                	jmp    131fe <kernel_memcmp+0x82>
    else return 0;
   131f9:	b8 00 00 00 00       	mov    $0x0,%eax

}
   131fe:	c9                   	leave  
   131ff:	c3                   	ret    

00013200 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   13200:	55                   	push   %ebp
   13201:	89 e5                	mov    %esp,%ebp
   13203:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   13206:	8d 45 10             	lea    0x10(%ebp),%eax
   13209:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   1320c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1320f:	83 ec 04             	sub    $0x4,%esp
   13212:	50                   	push   %eax
   13213:	ff 75 0c             	push   0xc(%ebp)
   13216:	ff 75 08             	push   0x8(%ebp)
   13219:	e8 06 00 00 00       	call   13224 <kernel_vsprintf>
   1321e:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   13221:	90                   	nop
   13222:	c9                   	leave  
   13223:	c3                   	ret    

00013224 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   13224:	55                   	push   %ebp
   13225:	89 e5                	mov    %esp,%ebp
   13227:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   1322a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   13231:	8b 45 08             	mov    0x8(%ebp),%eax
   13234:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   13237:	e9 68 01 00 00       	jmp    133a4 <kernel_vsprintf+0x180>
        switch (state) {
   1323c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13240:	74 0b                	je     1324d <kernel_vsprintf+0x29>
   13242:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   13246:	74 2b                	je     13273 <kernel_vsprintf+0x4f>
   13248:	e9 56 01 00 00       	jmp    133a3 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1324d:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   13251:	75 0c                	jne    1325f <kernel_vsprintf+0x3b>
   13253:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1325a:	e9 45 01 00 00       	jmp    133a4 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   1325f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13262:	8d 50 01             	lea    0x1(%eax),%edx
   13265:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13268:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1326c:	88 10                	mov    %dl,(%eax)
            break;
   1326e:	e9 31 01 00 00       	jmp    133a4 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   13273:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   13277:	75 47                	jne    132c0 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   13279:	8b 45 10             	mov    0x10(%ebp),%eax
   1327c:	8d 50 04             	lea    0x4(%eax),%edx
   1327f:	89 55 10             	mov    %edx,0x10(%ebp)
   13282:	8b 00                	mov    (%eax),%eax
   13284:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   13287:	ff 75 ec             	push   -0x14(%ebp)
   1328a:	e8 28 fe ff ff       	call   130b7 <kernel_strlen>
   1328f:	83 c4 04             	add    $0x4,%esp
   13292:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   13295:	eb 17                	jmp    132ae <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   13297:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1329a:	8d 42 01             	lea    0x1(%edx),%eax
   1329d:	89 45 ec             	mov    %eax,-0x14(%ebp)
   132a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   132a3:	8d 48 01             	lea    0x1(%eax),%ecx
   132a6:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   132a9:	0f b6 12             	movzbl (%edx),%edx
   132ac:	88 10                	mov    %dl,(%eax)
                while (len--) {
   132ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   132b1:	8d 50 ff             	lea    -0x1(%eax),%edx
   132b4:	89 55 e8             	mov    %edx,-0x18(%ebp)
   132b7:	85 c0                	test   %eax,%eax
   132b9:	75 dc                	jne    13297 <kernel_vsprintf+0x73>
   132bb:	e9 da 00 00 00       	jmp    1339a <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   132c0:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   132c4:	75 37                	jne    132fd <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   132c6:	8b 45 10             	mov    0x10(%ebp),%eax
   132c9:	8d 50 04             	lea    0x4(%eax),%edx
   132cc:	89 55 10             	mov    %edx,0x10(%ebp)
   132cf:	8b 00                	mov    (%eax),%eax
   132d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   132d4:	83 ec 04             	sub    $0x4,%esp
   132d7:	6a 0a                	push   $0xa
   132d9:	ff 75 d8             	push   -0x28(%ebp)
   132dc:	ff 75 f0             	push   -0x10(%ebp)
   132df:	e8 dd 00 00 00       	call   133c1 <kernel_itoa>
   132e4:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   132e7:	83 ec 0c             	sub    $0xc,%esp
   132ea:	ff 75 f0             	push   -0x10(%ebp)
   132ed:	e8 c5 fd ff ff       	call   130b7 <kernel_strlen>
   132f2:	83 c4 10             	add    $0x10,%esp
   132f5:	01 45 f0             	add    %eax,-0x10(%ebp)
   132f8:	e9 9d 00 00 00       	jmp    1339a <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   132fd:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   13301:	74 06                	je     13309 <kernel_vsprintf+0xe5>
   13303:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   13307:	75 34                	jne    1333d <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   13309:	8b 45 10             	mov    0x10(%ebp),%eax
   1330c:	8d 50 04             	lea    0x4(%eax),%edx
   1330f:	89 55 10             	mov    %edx,0x10(%ebp)
   13312:	8b 00                	mov    (%eax),%eax
   13314:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   13317:	83 ec 04             	sub    $0x4,%esp
   1331a:	6a 10                	push   $0x10
   1331c:	ff 75 dc             	push   -0x24(%ebp)
   1331f:	ff 75 f0             	push   -0x10(%ebp)
   13322:	e8 9a 00 00 00       	call   133c1 <kernel_itoa>
   13327:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1332a:	83 ec 0c             	sub    $0xc,%esp
   1332d:	ff 75 f0             	push   -0x10(%ebp)
   13330:	e8 82 fd ff ff       	call   130b7 <kernel_strlen>
   13335:	83 c4 10             	add    $0x10,%esp
   13338:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   1333b:	eb 5d                	jmp    1339a <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1333d:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   13341:	75 34                	jne    13377 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   13343:	8b 45 10             	mov    0x10(%ebp),%eax
   13346:	8d 50 04             	lea    0x4(%eax),%edx
   13349:	89 55 10             	mov    %edx,0x10(%ebp)
   1334c:	8b 00                	mov    (%eax),%eax
   1334e:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   13351:	83 ec 04             	sub    $0x4,%esp
   13354:	6a 02                	push   $0x2
   13356:	ff 75 e0             	push   -0x20(%ebp)
   13359:	ff 75 f0             	push   -0x10(%ebp)
   1335c:	e8 60 00 00 00       	call   133c1 <kernel_itoa>
   13361:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   13364:	83 ec 0c             	sub    $0xc,%esp
   13367:	ff 75 f0             	push   -0x10(%ebp)
   1336a:	e8 48 fd ff ff       	call   130b7 <kernel_strlen>
   1336f:	83 c4 10             	add    $0x10,%esp
   13372:	01 45 f0             	add    %eax,-0x10(%ebp)
   13375:	eb 23                	jmp    1339a <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   13377:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1337b:	75 1d                	jne    1339a <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1337d:	8b 45 10             	mov    0x10(%ebp),%eax
   13380:	8d 50 04             	lea    0x4(%eax),%edx
   13383:	89 55 10             	mov    %edx,0x10(%ebp)
   13386:	8b 00                	mov    (%eax),%eax
   13388:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   1338b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1338e:	8d 50 01             	lea    0x1(%eax),%edx
   13391:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13394:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13398:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   1339a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   133a1:	eb 01                	jmp    133a4 <kernel_vsprintf+0x180>
        default:
            break;
   133a3:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   133a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   133a7:	8d 50 01             	lea    0x1(%eax),%edx
   133aa:	89 55 0c             	mov    %edx,0xc(%ebp)
   133ad:	0f b6 00             	movzbl (%eax),%eax
   133b0:	88 45 e7             	mov    %al,-0x19(%ebp)
   133b3:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   133b7:	0f 85 7f fe ff ff    	jne    1323c <kernel_vsprintf+0x18>
        }
    }
    

}
   133bd:	90                   	nop
   133be:	90                   	nop
   133bf:	c9                   	leave  
   133c0:	c3                   	ret    

000133c1 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   133c1:	55                   	push   %ebp
   133c2:	89 e5                	mov    %esp,%ebp
   133c4:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   133ca:	8b 45 08             	mov    0x8(%ebp),%eax
   133cd:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   133d0:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   133d4:	74 1d                	je     133f3 <kernel_itoa+0x32>
   133d6:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   133da:	74 17                	je     133f3 <kernel_itoa+0x32>
   133dc:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   133e0:	74 11                	je     133f3 <kernel_itoa+0x32>
   133e2:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   133e6:	74 0b                	je     133f3 <kernel_itoa+0x32>
        *buf = '\0';
   133e8:	8b 45 08             	mov    0x8(%ebp),%eax
   133eb:	c6 00 00             	movb   $0x0,(%eax)
        return;
   133ee:	e9 a2 00 00 00       	jmp    13495 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   133f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   133f7:	79 11                	jns    1340a <kernel_itoa+0x49>
        *(p++) = '-';
   133f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   133fc:	8d 50 01             	lea    0x1(%eax),%edx
   133ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13402:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   13405:	f7 5d 0c             	negl   0xc(%ebp)
   13408:	eb 1a                	jmp    13424 <kernel_itoa+0x63>
    } else if (num == 0) {
   1340a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1340e:	75 14                	jne    13424 <kernel_itoa+0x63>
        *(p++) = '0';
   13410:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13413:	8d 50 01             	lea    0x1(%eax),%edx
   13416:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13419:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   1341c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1341f:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13422:	eb 71                	jmp    13495 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   13424:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   1342b:	eb 2e                	jmp    1345b <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   1342d:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13433:	8b 45 0c             	mov    0xc(%ebp),%eax
   13436:	99                   	cltd   
   13437:	f7 7d 10             	idivl  0x10(%ebp)
   1343a:	89 d0                	mov    %edx,%eax
   1343c:	01 c1                	add    %eax,%ecx
   1343e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13441:	8d 50 01             	lea    0x1(%eax),%edx
   13444:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13447:	0f b6 11             	movzbl (%ecx),%edx
   1344a:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   13451:	8b 45 0c             	mov    0xc(%ebp),%eax
   13454:	99                   	cltd   
   13455:	f7 7d 10             	idivl  0x10(%ebp)
   13458:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1345b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1345f:	7f cc                	jg     1342d <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   13461:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13464:	83 e8 01             	sub    $0x1,%eax
   13467:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1346a:	eb 1d                	jmp    13489 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1346c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1346f:	8d 50 01             	lea    0x1(%eax),%edx
   13472:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13475:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   1347b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1347e:	01 ca                	add    %ecx,%edx
   13480:	0f b6 12             	movzbl (%edx),%edx
   13483:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   13485:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   13489:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1348d:	79 dd                	jns    1346c <kernel_itoa+0xab>
    }
    *p = '\0';
   1348f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13492:	c6 00 00             	movb   $0x0,(%eax)
   13495:	c9                   	leave  
   13496:	c3                   	ret    

00013497 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13497:	55                   	push   %ebp
   13498:	89 e5                	mov    %esp,%ebp
   1349a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1349d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   134a1:	75 19                	jne    134bc <list_is_empty+0x25>
   134a3:	68 e4 47 01 00       	push   $0x147e4
   134a8:	68 c8 48 01 00       	push   $0x148c8
   134ad:	6a 38                	push   $0x38
   134af:	68 f8 47 01 00       	push   $0x147f8
   134b4:	e8 80 f7 ff ff       	call   12c39 <pannic>
   134b9:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   134bc:	8b 45 08             	mov    0x8(%ebp),%eax
   134bf:	8b 40 08             	mov    0x8(%eax),%eax
   134c2:	85 c0                	test   %eax,%eax
   134c4:	0f 94 c0             	sete   %al
   134c7:	0f b6 c0             	movzbl %al,%eax
}
   134ca:	c9                   	leave  
   134cb:	c3                   	ret    

000134cc <list_get_size>:
static inline int list_get_size(list_t *list) {
   134cc:	55                   	push   %ebp
   134cd:	89 e5                	mov    %esp,%ebp
   134cf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   134d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   134d6:	75 19                	jne    134f1 <list_get_size+0x25>
   134d8:	68 e4 47 01 00       	push   $0x147e4
   134dd:	68 00 49 01 00       	push   $0x14900
   134e2:	6a 3e                	push   $0x3e
   134e4:	68 f8 47 01 00       	push   $0x147f8
   134e9:	e8 4b f7 ff ff       	call   12c39 <pannic>
   134ee:	83 c4 10             	add    $0x10,%esp
    return list->size;
   134f1:	8b 45 08             	mov    0x8(%ebp),%eax
   134f4:	8b 40 08             	mov    0x8(%eax),%eax
}
   134f7:	c9                   	leave  
   134f8:	c3                   	ret    

000134f9 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   134f9:	55                   	push   %ebp
   134fa:	89 e5                	mov    %esp,%ebp
   134fc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   134ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13503:	74 06                	je     1350b <list_insert_first+0x12>
   13505:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13509:	75 19                	jne    13524 <list_insert_first+0x2b>
   1350b:	68 38 48 01 00       	push   $0x14838
   13510:	68 b4 48 01 00       	push   $0x148b4
   13515:	6a 0f                	push   $0xf
   13517:	68 68 48 01 00       	push   $0x14868
   1351c:	e8 18 f7 ff ff       	call   12c39 <pannic>
   13521:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   13524:	8b 45 08             	mov    0x8(%ebp),%eax
   13527:	8b 10                	mov    (%eax),%edx
   13529:	8b 45 0c             	mov    0xc(%ebp),%eax
   1352c:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1352f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13532:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13538:	83 ec 0c             	sub    $0xc,%esp
   1353b:	ff 75 08             	push   0x8(%ebp)
   1353e:	e8 54 ff ff ff       	call   13497 <list_is_empty>
   13543:	83 c4 10             	add    $0x10,%esp
   13546:	85 c0                	test   %eax,%eax
   13548:	74 16                	je     13560 <list_insert_first+0x67>
        list->first = list->last = node;
   1354a:	8b 45 08             	mov    0x8(%ebp),%eax
   1354d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13550:	89 50 04             	mov    %edx,0x4(%eax)
   13553:	8b 45 08             	mov    0x8(%ebp),%eax
   13556:	8b 50 04             	mov    0x4(%eax),%edx
   13559:	8b 45 08             	mov    0x8(%ebp),%eax
   1355c:	89 10                	mov    %edx,(%eax)
   1355e:	eb 12                	jmp    13572 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   13560:	8b 45 08             	mov    0x8(%ebp),%eax
   13563:	8b 00                	mov    (%eax),%eax
   13565:	8b 55 0c             	mov    0xc(%ebp),%edx
   13568:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1356a:	8b 45 08             	mov    0x8(%ebp),%eax
   1356d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13570:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   13572:	8b 45 08             	mov    0x8(%ebp),%eax
   13575:	8b 40 08             	mov    0x8(%eax),%eax
   13578:	8d 50 01             	lea    0x1(%eax),%edx
   1357b:	8b 45 08             	mov    0x8(%ebp),%eax
   1357e:	89 50 08             	mov    %edx,0x8(%eax)
}
   13581:	90                   	nop
   13582:	c9                   	leave  
   13583:	c3                   	ret    

00013584 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   13584:	55                   	push   %ebp
   13585:	89 e5                	mov    %esp,%ebp
   13587:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1358a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1358e:	74 06                	je     13596 <list_insert_last+0x12>
   13590:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13594:	75 19                	jne    135af <list_insert_last+0x2b>
   13596:	68 38 48 01 00       	push   $0x14838
   1359b:	68 d8 48 01 00       	push   $0x148d8
   135a0:	6a 1f                	push   $0x1f
   135a2:	68 68 48 01 00       	push   $0x14868
   135a7:	e8 8d f6 ff ff       	call   12c39 <pannic>
   135ac:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   135af:	8b 45 08             	mov    0x8(%ebp),%eax
   135b2:	8b 50 04             	mov    0x4(%eax),%edx
   135b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   135b8:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   135ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   135bd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   135c4:	83 ec 0c             	sub    $0xc,%esp
   135c7:	ff 75 08             	push   0x8(%ebp)
   135ca:	e8 c8 fe ff ff       	call   13497 <list_is_empty>
   135cf:	83 c4 10             	add    $0x10,%esp
   135d2:	85 c0                	test   %eax,%eax
   135d4:	74 16                	je     135ec <list_insert_last+0x68>
        list->first = list->last = node;
   135d6:	8b 45 08             	mov    0x8(%ebp),%eax
   135d9:	8b 55 0c             	mov    0xc(%ebp),%edx
   135dc:	89 50 04             	mov    %edx,0x4(%eax)
   135df:	8b 45 08             	mov    0x8(%ebp),%eax
   135e2:	8b 50 04             	mov    0x4(%eax),%edx
   135e5:	8b 45 08             	mov    0x8(%ebp),%eax
   135e8:	89 10                	mov    %edx,(%eax)
   135ea:	eb 15                	jmp    13601 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   135ec:	8b 45 08             	mov    0x8(%ebp),%eax
   135ef:	8b 40 04             	mov    0x4(%eax),%eax
   135f2:	8b 55 0c             	mov    0xc(%ebp),%edx
   135f5:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   135f8:	8b 45 08             	mov    0x8(%ebp),%eax
   135fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   135fe:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   13601:	8b 45 08             	mov    0x8(%ebp),%eax
   13604:	8b 40 08             	mov    0x8(%eax),%eax
   13607:	8d 50 01             	lea    0x1(%eax),%edx
   1360a:	8b 45 08             	mov    0x8(%ebp),%eax
   1360d:	89 50 08             	mov    %edx,0x8(%eax)

}
   13610:	90                   	nop
   13611:	c9                   	leave  
   13612:	c3                   	ret    

00013613 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   13613:	55                   	push   %ebp
   13614:	89 e5                	mov    %esp,%ebp
   13616:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   13619:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1361d:	75 19                	jne    13638 <list_remove_first+0x25>
   1361f:	68 9e 48 01 00       	push   $0x1489e
   13624:	68 ec 48 01 00       	push   $0x148ec
   13629:	6a 31                	push   $0x31
   1362b:	68 68 48 01 00       	push   $0x14868
   13630:	e8 04 f6 ff ff       	call   12c39 <pannic>
   13635:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   13638:	83 ec 0c             	sub    $0xc,%esp
   1363b:	ff 75 08             	push   0x8(%ebp)
   1363e:	e8 54 fe ff ff       	call   13497 <list_is_empty>
   13643:	83 c4 10             	add    $0x10,%esp
   13646:	85 c0                	test   %eax,%eax
   13648:	74 07                	je     13651 <list_remove_first+0x3e>
        return (list_node_t*)0;
   1364a:	b8 00 00 00 00       	mov    $0x0,%eax
   1364f:	eb 71                	jmp    136c2 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   13651:	8b 45 08             	mov    0x8(%ebp),%eax
   13654:	8b 00                	mov    (%eax),%eax
   13656:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13659:	83 ec 0c             	sub    $0xc,%esp
   1365c:	ff 75 08             	push   0x8(%ebp)
   1365f:	e8 68 fe ff ff       	call   134cc <list_get_size>
   13664:	83 c4 10             	add    $0x10,%esp
   13667:	83 f8 01             	cmp    $0x1,%eax
   1366a:	75 17                	jne    13683 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1366c:	8b 45 08             	mov    0x8(%ebp),%eax
   1366f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13676:	8b 45 08             	mov    0x8(%ebp),%eax
   13679:	8b 50 04             	mov    0x4(%eax),%edx
   1367c:	8b 45 08             	mov    0x8(%ebp),%eax
   1367f:	89 10                	mov    %edx,(%eax)
   13681:	eb 18                	jmp    1369b <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   13683:	8b 45 08             	mov    0x8(%ebp),%eax
   13686:	8b 00                	mov    (%eax),%eax
   13688:	8b 50 04             	mov    0x4(%eax),%edx
   1368b:	8b 45 08             	mov    0x8(%ebp),%eax
   1368e:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   13690:	8b 45 08             	mov    0x8(%ebp),%eax
   13693:	8b 00                	mov    (%eax),%eax
   13695:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1369b:	8b 45 08             	mov    0x8(%ebp),%eax
   1369e:	8b 40 08             	mov    0x8(%eax),%eax
   136a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   136a4:	8b 45 08             	mov    0x8(%ebp),%eax
   136a7:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   136aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   136b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136b7:	8b 50 04             	mov    0x4(%eax),%edx
   136ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136bd:	89 10                	mov    %edx,(%eax)
    return ret;
   136bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   136c2:	c9                   	leave  
   136c3:	c3                   	ret    

000136c4 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   136c4:	55                   	push   %ebp
   136c5:	89 e5                	mov    %esp,%ebp
   136c7:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   136ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   136ce:	75 19                	jne    136e9 <list_remove_last+0x25>
   136d0:	68 9e 48 01 00       	push   $0x1489e
   136d5:	68 10 49 01 00       	push   $0x14910
   136da:	6a 46                	push   $0x46
   136dc:	68 68 48 01 00       	push   $0x14868
   136e1:	e8 53 f5 ff ff       	call   12c39 <pannic>
   136e6:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   136e9:	83 ec 0c             	sub    $0xc,%esp
   136ec:	ff 75 08             	push   0x8(%ebp)
   136ef:	e8 a3 fd ff ff       	call   13497 <list_is_empty>
   136f4:	83 c4 10             	add    $0x10,%esp
   136f7:	85 c0                	test   %eax,%eax
   136f9:	74 07                	je     13702 <list_remove_last+0x3e>
        return (list_node_t*)0;
   136fb:	b8 00 00 00 00       	mov    $0x0,%eax
   13700:	eb 75                	jmp    13777 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   13702:	8b 45 08             	mov    0x8(%ebp),%eax
   13705:	8b 40 04             	mov    0x4(%eax),%eax
   13708:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1370b:	83 ec 0c             	sub    $0xc,%esp
   1370e:	ff 75 08             	push   0x8(%ebp)
   13711:	e8 b6 fd ff ff       	call   134cc <list_get_size>
   13716:	83 c4 10             	add    $0x10,%esp
   13719:	83 f8 01             	cmp    $0x1,%eax
   1371c:	75 17                	jne    13735 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   1371e:	8b 45 08             	mov    0x8(%ebp),%eax
   13721:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13728:	8b 45 08             	mov    0x8(%ebp),%eax
   1372b:	8b 50 04             	mov    0x4(%eax),%edx
   1372e:	8b 45 08             	mov    0x8(%ebp),%eax
   13731:	89 10                	mov    %edx,(%eax)
   13733:	eb 1b                	jmp    13750 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   13735:	8b 45 08             	mov    0x8(%ebp),%eax
   13738:	8b 40 04             	mov    0x4(%eax),%eax
   1373b:	8b 10                	mov    (%eax),%edx
   1373d:	8b 45 08             	mov    0x8(%ebp),%eax
   13740:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   13743:	8b 45 08             	mov    0x8(%ebp),%eax
   13746:	8b 40 04             	mov    0x4(%eax),%eax
   13749:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   13750:	8b 45 08             	mov    0x8(%ebp),%eax
   13753:	8b 40 08             	mov    0x8(%eax),%eax
   13756:	8d 50 ff             	lea    -0x1(%eax),%edx
   13759:	8b 45 08             	mov    0x8(%ebp),%eax
   1375c:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1375f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13762:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13769:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1376c:	8b 50 04             	mov    0x4(%eax),%edx
   1376f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13772:	89 10                	mov    %edx,(%eax)
    return ret;
   13774:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13777:	c9                   	leave  
   13778:	c3                   	ret    

00013779 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13779:	55                   	push   %ebp
   1377a:	89 e5                	mov    %esp,%ebp
   1377c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1377f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13783:	74 06                	je     1378b <list_remove+0x12>
   13785:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13789:	75 19                	jne    137a4 <list_remove+0x2b>
   1378b:	68 38 48 01 00       	push   $0x14838
   13790:	68 24 49 01 00       	push   $0x14924
   13795:	6a 5b                	push   $0x5b
   13797:	68 68 48 01 00       	push   $0x14868
   1379c:	e8 98 f4 ff ff       	call   12c39 <pannic>
   137a1:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   137a4:	83 ec 0c             	sub    $0xc,%esp
   137a7:	ff 75 08             	push   0x8(%ebp)
   137aa:	e8 e8 fc ff ff       	call   13497 <list_is_empty>
   137af:	83 c4 10             	add    $0x10,%esp
   137b2:	85 c0                	test   %eax,%eax
   137b4:	74 0a                	je     137c0 <list_remove+0x47>
        return (list_node_t*)0;
   137b6:	b8 00 00 00 00       	mov    $0x0,%eax
   137bb:	e9 80 00 00 00       	jmp    13840 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   137c0:	8b 45 08             	mov    0x8(%ebp),%eax
   137c3:	8b 00                	mov    (%eax),%eax
   137c5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   137c8:	75 0b                	jne    137d5 <list_remove+0x5c>
   137ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   137cd:	8b 50 04             	mov    0x4(%eax),%edx
   137d0:	8b 45 08             	mov    0x8(%ebp),%eax
   137d3:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   137d5:	8b 45 08             	mov    0x8(%ebp),%eax
   137d8:	8b 40 04             	mov    0x4(%eax),%eax
   137db:	39 45 0c             	cmp    %eax,0xc(%ebp)
   137de:	75 0b                	jne    137eb <list_remove+0x72>
   137e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   137e3:	8b 10                	mov    (%eax),%edx
   137e5:	8b 45 08             	mov    0x8(%ebp),%eax
   137e8:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   137eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   137ee:	8b 00                	mov    (%eax),%eax
   137f0:	85 c0                	test   %eax,%eax
   137f2:	74 0e                	je     13802 <list_remove+0x89>
   137f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   137f7:	8b 00                	mov    (%eax),%eax
   137f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   137fc:	8b 52 04             	mov    0x4(%edx),%edx
   137ff:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   13802:	8b 45 0c             	mov    0xc(%ebp),%eax
   13805:	8b 40 04             	mov    0x4(%eax),%eax
   13808:	85 c0                	test   %eax,%eax
   1380a:	74 0d                	je     13819 <list_remove+0xa0>
   1380c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1380f:	8b 40 04             	mov    0x4(%eax),%eax
   13812:	8b 55 0c             	mov    0xc(%ebp),%edx
   13815:	8b 12                	mov    (%edx),%edx
   13817:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   13819:	8b 45 0c             	mov    0xc(%ebp),%eax
   1381c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13823:	8b 45 0c             	mov    0xc(%ebp),%eax
   13826:	8b 50 04             	mov    0x4(%eax),%edx
   13829:	8b 45 0c             	mov    0xc(%ebp),%eax
   1382c:	89 10                	mov    %edx,(%eax)
    list->size--;
   1382e:	8b 45 08             	mov    0x8(%ebp),%eax
   13831:	8b 40 08             	mov    0x8(%eax),%eax
   13834:	8d 50 ff             	lea    -0x1(%eax),%edx
   13837:	8b 45 08             	mov    0x8(%ebp),%eax
   1383a:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   1383d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13840:	c9                   	leave  
   13841:	c3                   	ret    

00013842 <inb>:
static inline uint8_t inb(uint16_t port) {
   13842:	55                   	push   %ebp
   13843:	89 e5                	mov    %esp,%ebp
   13845:	83 ec 14             	sub    $0x14,%esp
   13848:	8b 45 08             	mov    0x8(%ebp),%eax
   1384b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1384f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13853:	89 c2                	mov    %eax,%edx
   13855:	ec                   	in     (%dx),%al
   13856:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13859:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1385d:	c9                   	leave  
   1385e:	c3                   	ret    

0001385f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1385f:	55                   	push   %ebp
   13860:	89 e5                	mov    %esp,%ebp
   13862:	83 ec 08             	sub    $0x8,%esp
   13865:	8b 45 08             	mov    0x8(%ebp),%eax
   13868:	8b 55 0c             	mov    0xc(%ebp),%edx
   1386b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1386f:	89 d0                	mov    %edx,%eax
   13871:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13874:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13878:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1387c:	ee                   	out    %al,(%dx)
}
   1387d:	90                   	nop
   1387e:	c9                   	leave  
   1387f:	c3                   	ret    

00013880 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13880:	55                   	push   %ebp
   13881:	89 e5                	mov    %esp,%ebp
   13883:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13886:	6a 00                	push   $0x0
   13888:	68 f9 03 00 00       	push   $0x3f9
   1388d:	e8 cd ff ff ff       	call   1385f <outb>
   13892:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13895:	68 80 00 00 00       	push   $0x80
   1389a:	68 fb 03 00 00       	push   $0x3fb
   1389f:	e8 bb ff ff ff       	call   1385f <outb>
   138a4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   138a7:	6a 03                	push   $0x3
   138a9:	68 f8 03 00 00       	push   $0x3f8
   138ae:	e8 ac ff ff ff       	call   1385f <outb>
   138b3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   138b6:	6a 00                	push   $0x0
   138b8:	68 f9 03 00 00       	push   $0x3f9
   138bd:	e8 9d ff ff ff       	call   1385f <outb>
   138c2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   138c5:	6a 03                	push   $0x3
   138c7:	68 fb 03 00 00       	push   $0x3fb
   138cc:	e8 8e ff ff ff       	call   1385f <outb>
   138d1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   138d4:	68 c7 00 00 00       	push   $0xc7
   138d9:	68 fa 03 00 00       	push   $0x3fa
   138de:	e8 7c ff ff ff       	call   1385f <outb>
   138e3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   138e6:	6a 0f                	push   $0xf
   138e8:	68 fc 03 00 00       	push   $0x3fc
   138ed:	e8 6d ff ff ff       	call   1385f <outb>
   138f2:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   138f5:	83 ec 0c             	sub    $0xc,%esp
   138f8:	68 04 0a 03 00       	push   $0x30a04
   138fd:	e8 22 ec ff ff       	call   12524 <mutex_init>
   13902:	83 c4 10             	add    $0x10,%esp
}
   13905:	90                   	nop
   13906:	c9                   	leave  
   13907:	c3                   	ret    

00013908 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   13908:	55                   	push   %ebp
   13909:	89 e5                	mov    %esp,%ebp
   1390b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   13911:	83 ec 04             	sub    $0x4,%esp
   13914:	68 80 00 00 00       	push   $0x80
   13919:	6a 00                	push   $0x0
   1391b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13921:	50                   	push   %eax
   13922:	e8 14 f8 ff ff       	call   1313b <kernel_memset>
   13927:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1392a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1392d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   13933:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13939:	83 ec 04             	sub    $0x4,%esp
   1393c:	50                   	push   %eax
   1393d:	ff 75 08             	push   0x8(%ebp)
   13940:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13946:	50                   	push   %eax
   13947:	e8 d8 f8 ff ff       	call   13224 <kernel_vsprintf>
   1394c:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1394f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13955:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13958:	83 ec 0c             	sub    $0xc,%esp
   1395b:	68 04 0a 03 00       	push   $0x30a04
   13960:	e8 0c ec ff ff       	call   12571 <mutex_lock>
   13965:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13968:	eb 57                	jmp    139c1 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1396a:	90                   	nop
   1396b:	83 ec 0c             	sub    $0xc,%esp
   1396e:	68 fd 03 00 00       	push   $0x3fd
   13973:	e8 ca fe ff ff       	call   13842 <inb>
   13978:	83 c4 10             	add    $0x10,%esp
   1397b:	0f b6 c0             	movzbl %al,%eax
   1397e:	83 e0 40             	and    $0x40,%eax
   13981:	85 c0                	test   %eax,%eax
   13983:	74 e6                	je     1396b <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13985:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13988:	0f b6 00             	movzbl (%eax),%eax
   1398b:	3c 0a                	cmp    $0xa,%al
   1398d:	75 12                	jne    139a1 <log_printf+0x99>
   1398f:	83 ec 08             	sub    $0x8,%esp
   13992:	6a 0d                	push   $0xd
   13994:	68 f8 03 00 00       	push   $0x3f8
   13999:	e8 c1 fe ff ff       	call   1385f <outb>
   1399e:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   139a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139a4:	8d 50 01             	lea    0x1(%eax),%edx
   139a7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   139aa:	0f b6 00             	movzbl (%eax),%eax
   139ad:	0f b6 c0             	movzbl %al,%eax
   139b0:	83 ec 08             	sub    $0x8,%esp
   139b3:	50                   	push   %eax
   139b4:	68 f8 03 00 00       	push   $0x3f8
   139b9:	e8 a1 fe ff ff       	call   1385f <outb>
   139be:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   139c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139c4:	0f b6 00             	movzbl (%eax),%eax
   139c7:	84 c0                	test   %al,%al
   139c9:	75 9f                	jne    1396a <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   139cb:	83 ec 08             	sub    $0x8,%esp
   139ce:	6a 0d                	push   $0xd
   139d0:	68 f8 03 00 00       	push   $0x3f8
   139d5:	e8 85 fe ff ff       	call   1385f <outb>
   139da:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   139dd:	83 ec 08             	sub    $0x8,%esp
   139e0:	6a 0a                	push   $0xa
   139e2:	68 f8 03 00 00       	push   $0x3f8
   139e7:	e8 73 fe ff ff       	call   1385f <outb>
   139ec:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   139ef:	83 ec 0c             	sub    $0xc,%esp
   139f2:	68 04 0a 03 00       	push   $0x30a04
   139f7:	e8 06 ec ff ff       	call   12602 <mutex_unlock>
   139fc:	83 c4 10             	add    $0x10,%esp
   139ff:	90                   	nop
   13a00:	c9                   	leave  
   13a01:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 d4 00 00 00       	jmp    800000e4 <first_main>

80000010 <sys_call>:
}syscall_args_t;




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <sys_call>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
    if (ms <= 0) return;
80000083:	90                   	nop

}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <sys_call>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:

static inline void print_msg(const char *fmt, int arg) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
800000a7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <sys_call>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <fork>:

static inline int fork (void) {
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000cf:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800000d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000d9:	50                   	push   %eax
800000da:	e8 31 ff ff ff       	call   80000010 <sys_call>
800000df:	83 c4 04             	add    $0x4,%esp
}
800000e2:	c9                   	leave  
800000e3:	c3                   	ret    

800000e4 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
800000e4:	55                   	push   %ebp
800000e5:	89 e5                	mov    %esp,%ebp
800000e7:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000ea:	e8 97 ff ff ff       	call   80000086 <getpid>
800000ef:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int cpid = fork();
800000f2:	e8 d2 ff ff ff       	call   800000c9 <fork>
800000f7:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (;;) {
        print_msg("task id=%d", pid);
800000fa:	ff 75 fc             	push   -0x4(%ebp)
800000fd:	68 19 01 00 80       	push   $0x80000119
80000102:	e8 9a ff ff ff       	call   800000a1 <print_msg>
80000107:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
8000010a:	68 e8 03 00 00       	push   $0x3e8
8000010f:	e8 48 ff ff ff       	call   8000005c <msleep>
80000114:	83 c4 04             	add    $0x4,%esp
        print_msg("task id=%d", pid);
80000117:	eb e1                	jmp    800000fa <first_main+0x16>
80000119:	74 61                	je     8000017c <first_main+0x98>
8000011b:	73 6b                	jae    80000188 <first_main+0xa4>
8000011d:	20 69 64             	and    %ch,0x64(%ecx)
80000120:	3d                   	.byte 0x3d
80000121:	25                   	.byte 0x25
80000122:	64                   	fs
	...
