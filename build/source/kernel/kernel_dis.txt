
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002c08 memsz 0x00017940 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023eb  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000080c  000123ec  000123ec  000033ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00012bf8  00012bf8  00003bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00014d20  00012c20  00012c20  00003c08  2**5
                  ALLOC
  4 .debug_line   000012f9  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000534  00000000  00000000  00004f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00002b6e  00000000  00000000  00005435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000fd1  00000000  00000000  00007fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000160  00000000  00000000  00008f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000d4d  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  00009e25  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000e74  00000000  00000000  00009e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000003d list_node_init
000124c0 l     O .rodata	0000000f __func__.5
000102ea l     F .text	0000002d list_node_next
000124fc l     O .rodata	0000000f __func__.1
00010317 l     F .text	00000047 list_init
000124d0 l     O .rodata	0000000a __func__.4
0001035e l     F .text	00000035 list_is_empty
0001250c l     O .rodata	0000000e __func__.0
00010393 l     F .text	0000002d list_get_size
000124ec l     O .rodata	0000000e __func__.2
000103c0 l     F .text	0000002c list_get_first
000124dc l     O .rodata	0000000f __func__.3
000103ec l     F .text	00000007 hlt
000103f3 l     F .text	0000001a far_jump
0001040d l     F .text	00000017 write_tr
00012c20 l     O .bss	00000180 task_manager
00010424 l     F .text	0000001f switch_to_tss
0001045e l     F .text	000000f8 tss_init
000124b4 l     O .rodata	0000000a __func__.6
00012da0 l     O .bss	00000200 empty_task_stack
00010628 l     F .text	0000000a empty_task
0001077f l     F .text	0000000a task_current
00000000 l    df *ABS*	00000000 gdt.c
00010a11 l     F .text	00000028 lgdt
00012fa0 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
00010bac l     F .text	00000007 cli
00010bb3 l     F .text	00000007 sti
00010bba l     F .text	00000007 hlt
00010bc1 l     F .text	0000001d inb
00010bde l     F .text	00000021 outb
00010bff l     F .text	00000028 lidt
00010c27 l     F .text	00000010 read_eflags
00010c37 l     F .text	0000000b write_eflags
00022fa0 l     O .bss	00000800 idt_table
00010c42 l     F .text	000000e9 print_exception_fram
00010d2b l     F .text	0000003e do_default_handler
00010fb5 l     F .text	00000047 gate_desc_set
0001103c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000113e6 l     F .text	00000021 outb
000237a0 l     O .bss	00000004 sys_tick
0001142f l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000114a9 l     F .text	00000007 sti
00012924 l     O .rodata	0000000c __func__.0
000237c0 l     O .bss	000000ac task_test_task_1
00023880 l     O .bss	000000ac task_test_task_2
00023940 l     O .bss	00001000 test_task_1_stack
00024940 l     O .bss	00001000 test_task_2_stack
00000000 l    df *ABS*	00000000 test.c
000115d6 l     F .text	00000047 list_init
00012a34 l     O .rodata	0000000a __func__.3
0001161d l     F .text	0000002d list_get_size
00012a40 l     O .rodata	0000000e __func__.2
0001164a l     F .text	0000002c list_get_first
00012a60 l     O .rodata	0000000f __func__.0
00011676 l     F .text	0000002d list_get_last
00012a50 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
0001197e l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
00012c04 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00011e9d l     F .text	00000035 list_is_empty
00012b90 l     O .rodata	0000000e __func__.5
00011ed2 l     F .text	0000002d list_get_size
00012bc8 l     O .rodata	0000000e __func__.2
00012b7c l     O .rodata	00000012 __func__.6
00012ba0 l     O .rodata	00000011 __func__.4
00012bb4 l     O .rodata	00000012 __func__.3
00012bd8 l     O .rodata	00000011 __func__.1
00012bec l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012248 l     F .text	0000001d inb
00012265 l     F .text	00000021 outb
00011af2 g     F .text	0000004f kernel_memcpy
00011242 g     F .text	00000098 idt_enable
00011f8a g     F .text	0000008f list_insert_last
000107f1 g     F .text	00000061 sys_yield
00010e9d g     F .text	0000001c do_handler_segment_not_present
000106ff g     F .text	00000029 task_set_ready
00011379 g     F .text	0000000b idt_enable_global
00011b41 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012286 g     F .text	00000075 log_init
00011559 g     F .text	0000007d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000119bb g     F .text	00000047 kernel_strcpy
0001136e g     F .text	0000000b idt_disable_global
00010ffc g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010df5 g     F .text	0000001c do_handler_overflow
00010f29 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010ed5 g     F .text	0000001c do_handler_general_protection
00010f99 g     F .text	0000001c do_handler_control_exception
00010d85 g     F .text	0000001c do_handler_divider
00010e65 g     F .text	0000001c do_handler_double_fault
00010ef1 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011384 g     F .text	00000039 pic_send_eoi
000120ca g     F .text	000000b5 list_remove_last
000106f5 g     F .text	0000000a task_first_task
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010af8 g     F .text	00000070 gdt_init
00010f7d g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010da1 g     F .text	0000001c do_handler_debug
00025940 g     O .bss	00002000 stack
000109c0 g     F .text	00000051 sys_sleep
00011527 g     F .text	00000032 test_task_2
000116a3 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000110cf g     F .text	00000173 idt_init
00010e2d g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010f0d g     F .text	0000001c do_handler_fpu_error
000106ad g     F .text	00000048 task_first_init
00010f45 g     F .text	0000001c do_handler_machine_check
00011eff g     F .text	0000008b list_insert_first
00010997 g     F .text	00000029 task_set_wakeup
00010751 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00011a02 g     F .text	00000051 kernel_strncpy
000114b0 g     F .text	00000045 kernel_init
00010000 g       .text	00000000 _start
00011c2a g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010e81 g     F .text	0000001c do_handler_invalid_tss
000112da g     F .text	00000094 idt_disable
0001095d g     F .text	0000003a task_set_sleep
00010dbd g     F .text	0000001c do_handler_nmi
000114f5 g     F .text	00000032 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010e49 g     F .text	0000001c do_handler_device_unavailable
000113bd g     F .text	00000018 idt_enter_protection
00010852 g     F .text	0000010b task_slice_end
00011b82 g     F .text	00000084 kernel_memcmp
00010f61 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010d69 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010443 g     F .text	0000001b task_switch_from_to
00010789 g     F .text	00000068 task_switch
00011abd g     F .text	00000035 kernel_strlen
00010728 g     F .text	00000029 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010a39 g     F .text	000000bf segment_desc_set
00010e11 g     F .text	0000001c do_handler_bound_range
00012019 g     F .text	000000b1 list_remove_first
00011a53 g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00012bf8 g     O .data	0000000a str
00010632 g     F .text	0000007b task_manager_init
00011985 g     F .text	00000036 pannic
00010eb9 g     F .text	0000001c do_handler_stack_segment_fault
00010dd9 g     F .text	0000001c do_handler_breakpoint
000122fb g     F .text	000000f0 log_printf
00010556 g     F .text	000000d2 task_init
00011c06 g     F .text	00000024 kernel_sprintf
00010b68 g     F .text	00000044 gdt_alloc_desc
00011dc7 g     F .text	000000d6 kernel_itoa
0001217f g     F .text	000000c9 list_remove
000113d5 g     F .text	00000011 idt_leave_protection
00011407 g     F .text	00000028 do_handler_time
00011491 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 a5 14 00 00       	call   114b0 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 79 02 00       	mov    $0x27940,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 2f 15 00 00       	jmp    11559 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 2e 0d 00 00       	call   10d69 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 2d 0d 00 00       	call   10d85 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 2c 0d 00 00       	call   10da1 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 2b 0d 00 00       	call   10dbd <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 2a 0d 00 00       	call   10dd9 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 29 0d 00 00       	call   10df5 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 28 0d 00 00       	call   10e11 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 27 0d 00 00       	call   10e2d <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 26 0d 00 00       	call   10e49 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 27 0d 00 00       	call   10e65 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 28 0d 00 00       	call   10e81 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 29 0d 00 00       	call   10e9d <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 2a 0d 00 00       	call   10eb9 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 2b 0d 00 00       	call   10ed5 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 2c 0d 00 00       	call   10ef1 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 2b 0d 00 00       	call   10f0d <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 2c 0d 00 00       	call   10f29 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 2b 0d 00 00       	call   10f45 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 2a 0d 00 00       	call   10f61 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 29 0d 00 00       	call   10f7d <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 2a 0d 00 00       	call   10f99 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 7b 11 00 00       	call   11407 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <list_node_init+0x25>
   102b9:	68 ec 23 01 00       	push   $0x123ec
   102be:	68 c0 24 01 00       	push   $0x124c0
   102c3:	6a 20                	push   $0x20
   102c5:	68 04 24 01 00       	push   $0x12404
   102ca:	e8 b6 16 00 00       	call   11985 <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	8b 50 04             	mov    0x4(%eax),%edx
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	89 10                	mov    %edx,(%eax)
}
   102e7:	90                   	nop
   102e8:	c9                   	leave  
   102e9:	c3                   	ret    

000102ea <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   102ea:	55                   	push   %ebp
   102eb:	89 e5                	mov    %esp,%ebp
   102ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102f4:	75 19                	jne    1030f <list_node_next+0x25>
   102f6:	68 ec 23 01 00       	push   $0x123ec
   102fb:	68 fc 24 01 00       	push   $0x124fc
   10300:	6a 2b                	push   $0x2b
   10302:	68 04 24 01 00       	push   $0x12404
   10307:	e8 79 16 00 00       	call   11985 <pannic>
   1030c:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	8b 40 04             	mov    0x4(%eax),%eax
}
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <list_init>:

static inline void list_init(list_t *list) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1031d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10321:	75 19                	jne    1033c <list_init+0x25>
   10323:	68 42 24 01 00       	push   $0x12442
   10328:	68 d0 24 01 00       	push   $0x124d0
   1032d:	6a 31                	push   $0x31
   1032f:	68 04 24 01 00       	push   $0x12404
   10334:	e8 4c 16 00 00       	call   11985 <pannic>
   10339:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 04             	mov    0x4(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10351:	8b 45 08             	mov    0x8(%ebp),%eax
   10354:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1035b:	90                   	nop
   1035c:	c9                   	leave  
   1035d:	c3                   	ret    

0001035e <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10368:	75 19                	jne    10383 <list_is_empty+0x25>
   1036a:	68 42 24 01 00       	push   $0x12442
   1036f:	68 0c 25 01 00       	push   $0x1250c
   10374:	6a 38                	push   $0x38
   10376:	68 04 24 01 00       	push   $0x12404
   1037b:	e8 05 16 00 00       	call   11985 <pannic>
   10380:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 40 08             	mov    0x8(%eax),%eax
   10389:	85 c0                	test   %eax,%eax
   1038b:	0f 94 c0             	sete   %al
   1038e:	0f b6 c0             	movzbl %al,%eax
}
   10391:	c9                   	leave  
   10392:	c3                   	ret    

00010393 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10393:	55                   	push   %ebp
   10394:	89 e5                	mov    %esp,%ebp
   10396:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10399:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1039d:	75 19                	jne    103b8 <list_get_size+0x25>
   1039f:	68 42 24 01 00       	push   $0x12442
   103a4:	68 ec 24 01 00       	push   $0x124ec
   103a9:	6a 3e                	push   $0x3e
   103ab:	68 04 24 01 00       	push   $0x12404
   103b0:	e8 d0 15 00 00       	call   11985 <pannic>
   103b5:	83 c4 10             	add    $0x10,%esp

    return list->size;
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 40 08             	mov    0x8(%eax),%eax
}
   103be:	c9                   	leave  
   103bf:	c3                   	ret    

000103c0 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   103c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103ca:	75 19                	jne    103e5 <list_get_first+0x25>
   103cc:	68 42 24 01 00       	push   $0x12442
   103d1:	68 dc 24 01 00       	push   $0x124dc
   103d6:	6a 44                	push   $0x44
   103d8:	68 04 24 01 00       	push   $0x12404
   103dd:	e8 a3 15 00 00       	call   11985 <pannic>
   103e2:	83 c4 10             	add    $0x10,%esp

    return list->first;
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	8b 00                	mov    (%eax),%eax
}
   103ea:	c9                   	leave  
   103eb:	c3                   	ret    

000103ec <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   103ec:	55                   	push   %ebp
   103ed:	89 e5                	mov    %esp,%ebp
   103ef:	f4                   	hlt    
   103f0:	90                   	nop
   103f1:	5d                   	pop    %ebp
   103f2:	c3                   	ret    

000103f3 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   103f3:	55                   	push   %ebp
   103f4:	89 e5                	mov    %esp,%ebp
   103f6:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   103f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   103fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
   103ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10402:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10405:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10408:	ff 28                	ljmp   *(%eax)
}
   1040a:	90                   	nop
   1040b:	c9                   	leave  
   1040c:	c3                   	ret    

0001040d <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1040d:	55                   	push   %ebp
   1040e:	89 e5                	mov    %esp,%ebp
   10410:	83 ec 04             	sub    $0x4,%esp
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1041a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1041e:	0f 00 d8             	ltr    %ax
}
   10421:	90                   	nop
   10422:	c9                   	leave  
   10423:	c3                   	ret    

00010424 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10424:	55                   	push   %ebp
   10425:	89 e5                	mov    %esp,%ebp
   10427:	83 ec 04             	sub    $0x4,%esp
   1042a:	8b 45 08             	mov    0x8(%ebp),%eax
   1042d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10431:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10435:	6a 00                	push   $0x0
   10437:	50                   	push   %eax
   10438:	e8 b6 ff ff ff       	call   103f3 <far_jump>
   1043d:	83 c4 08             	add    $0x8,%esp
}
   10440:	90                   	nop
   10441:	c9                   	leave  
   10442:	c3                   	ret    

00010443 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10443:	55                   	push   %ebp
   10444:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10446:	8b 45 0c             	mov    0xc(%ebp),%eax
   10449:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   1044f:	0f b7 c0             	movzwl %ax,%eax
   10452:	50                   	push   %eax
   10453:	e8 cc ff ff ff       	call   10424 <switch_to_tss>
   10458:	83 c4 04             	add    $0x4,%esp
}
   1045b:	90                   	nop
   1045c:	c9                   	leave  
   1045d:	c3                   	ret    

0001045e <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   1045e:	55                   	push   %ebp
   1045f:	89 e5                	mov    %esp,%ebp
   10461:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10464:	8b 45 08             	mov    0x8(%ebp),%eax
   10467:	83 c0 40             	add    $0x40,%eax
   1046a:	83 ec 04             	sub    $0x4,%esp
   1046d:	6a 68                	push   $0x68
   1046f:	6a 00                	push   $0x0
   10471:	50                   	push   %eax
   10472:	e8 ca 16 00 00       	call   11b41 <kernel_memset>
   10477:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10480:	89 50 60             	mov    %edx,0x60(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10483:	8b 45 08             	mov    0x8(%ebp),%eax
   10486:	8b 55 10             	mov    0x10(%ebp),%edx
   10489:	89 50 44             	mov    %edx,0x44(%eax)
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 44             	mov    0x44(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	89 50 78             	mov    %edx,0x78(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10498:	8b 45 08             	mov    0x8(%ebp),%eax
   1049b:	c7 40 48 10 00 00 00 	movl   $0x10,0x48(%eax)
   104a2:	8b 45 08             	mov    0x8(%ebp),%eax
   104a5:	8b 50 48             	mov    0x48(%eax),%edx
   104a8:	8b 45 08             	mov    0x8(%ebp),%eax
   104ab:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   104b1:	8b 45 08             	mov    0x8(%ebp),%eax
   104b4:	c7 80 94 00 00 00 10 	movl   $0x10,0x94(%eax)
   104bb:	00 00 00 
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   104c7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ca:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   104d0:	8b 45 08             	mov    0x8(%ebp),%eax
   104d3:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   104d9:	8b 45 08             	mov    0x8(%ebp),%eax
   104dc:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   104eb:	8b 45 08             	mov    0x8(%ebp),%eax
   104ee:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   104f4:	8b 45 08             	mov    0x8(%ebp),%eax
   104f7:	c7 80 8c 00 00 00 08 	movl   $0x8,0x8c(%eax)
   104fe:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10501:	8b 45 08             	mov    0x8(%ebp),%eax
   10504:	c7 40 64 02 02 00 00 	movl   $0x202,0x64(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1050b:	e8 ad 0e 00 00       	call   113bd <idt_enter_protection>
   10510:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10513:	e8 50 06 00 00       	call   10b68 <gdt_alloc_desc>
   10518:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   1051b:	8b 45 08             	mov    0x8(%ebp),%eax
   1051e:	83 c0 40             	add    $0x40,%eax
   10521:	89 c2                	mov    %eax,%edx
   10523:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10526:	0f b7 c0             	movzwl %ax,%eax
   10529:	68 89 00 00 00       	push   $0x89
   1052e:	6a 68                	push   $0x68
   10530:	52                   	push   %edx
   10531:	50                   	push   %eax
   10532:	e8 02 05 00 00       	call   10a39 <segment_desc_set>
   10537:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    idt_leave_protection(state);//TODO:解锁 
   1053a:	83 ec 0c             	sub    $0xc,%esp
   1053d:	ff 75 f4             	push   -0xc(%ebp)
   10540:	e8 90 0e 00 00       	call   113d5 <idt_leave_protection>
   10545:	83 c4 10             	add    $0x10,%esp

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10548:	8b 45 08             	mov    0x8(%ebp),%eax
   1054b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1054e:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
   10554:	c9                   	leave  
   10555:	c3                   	ret    

00010556 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10556:	55                   	push   %ebp
   10557:	89 e5                	mov    %esp,%ebp
   10559:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1055c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10560:	75 19                	jne    1057b <task_init+0x25>
   10562:	68 55 24 01 00       	push   $0x12455
   10567:	68 b4 24 01 00       	push   $0x124b4
   1056c:	6a 65                	push   $0x65
   1056e:	68 68 24 01 00       	push   $0x12468
   10573:	e8 0d 14 00 00       	call   11985 <pannic>
   10578:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   1057b:	83 ec 04             	sub    $0x4,%esp
   1057e:	ff 75 14             	push   0x14(%ebp)
   10581:	ff 75 10             	push   0x10(%ebp)
   10584:	ff 75 08             	push   0x8(%ebp)
   10587:	e8 d2 fe ff ff       	call   1045e <tss_init>
   1058c:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1058f:	8b 45 08             	mov    0x8(%ebp),%eax
   10592:	83 c0 10             	add    $0x10,%eax
   10595:	83 ec 04             	sub    $0x4,%esp
   10598:	6a 20                	push   $0x20
   1059a:	ff 75 0c             	push   0xc(%ebp)
   1059d:	50                   	push   %eax
   1059e:	e8 5f 14 00 00       	call   11a02 <kernel_strncpy>
   105a3:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   105a6:	8b 45 08             	mov    0x8(%ebp),%eax
   105a9:	83 c0 30             	add    $0x30,%eax
   105ac:	83 ec 0c             	sub    $0xc,%esp
   105af:	50                   	push   %eax
   105b0:	e8 f8 fc ff ff       	call   102ad <list_node_init>
   105b5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   105b8:	8b 45 08             	mov    0x8(%ebp),%eax
   105bb:	83 c0 38             	add    $0x38,%eax
   105be:	83 ec 0c             	sub    $0xc,%esp
   105c1:	50                   	push   %eax
   105c2:	e8 e6 fc ff ff       	call   102ad <list_node_init>
   105c7:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   105ca:	8b 45 08             	mov    0x8(%ebp),%eax
   105cd:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   105d4:	8b 45 08             	mov    0x8(%ebp),%eax
   105d7:	8b 50 08             	mov    0x8(%eax),%edx
   105da:	8b 45 08             	mov    0x8(%ebp),%eax
   105dd:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   105ea:	e8 ce 0d 00 00       	call   113bd <idt_enter_protection>
   105ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   105f2:	8b 45 08             	mov    0x8(%ebp),%eax
   105f5:	83 c0 38             	add    $0x38,%eax
   105f8:	83 ec 08             	sub    $0x8,%esp
   105fb:	50                   	push   %eax
   105fc:	68 30 2c 01 00       	push   $0x12c30
   10601:	e8 84 19 00 00       	call   11f8a <list_insert_last>
   10606:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10609:	83 ec 0c             	sub    $0xc,%esp
   1060c:	ff 75 08             	push   0x8(%ebp)
   1060f:	e8 eb 00 00 00       	call   106ff <task_set_ready>
   10614:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10617:	83 ec 0c             	sub    $0xc,%esp
   1061a:	ff 75 f4             	push   -0xc(%ebp)
   1061d:	e8 b3 0d 00 00       	call   113d5 <idt_leave_protection>
   10622:	83 c4 10             	add    $0x10,%esp
}
   10625:	90                   	nop
   10626:	c9                   	leave  
   10627:	c3                   	ret    

00010628 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10628:	55                   	push   %ebp
   10629:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   1062b:	e8 bc fd ff ff       	call   103ec <hlt>
   10630:	eb f9                	jmp    1062b <empty_task+0x3>

00010632 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10632:	55                   	push   %ebp
   10633:	89 e5                	mov    %esp,%ebp
   10635:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10638:	83 ec 0c             	sub    $0xc,%esp
   1063b:	68 24 2c 01 00       	push   $0x12c24
   10640:	e8 d2 fc ff ff       	call   10317 <list_init>
   10645:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10648:	83 ec 0c             	sub    $0xc,%esp
   1064b:	68 30 2c 01 00       	push   $0x12c30
   10650:	e8 c2 fc ff ff       	call   10317 <list_init>
   10655:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10658:	83 ec 0c             	sub    $0xc,%esp
   1065b:	68 3c 2c 01 00       	push   $0x12c3c
   10660:	e8 b2 fc ff ff       	call   10317 <list_init>
   10665:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10668:	c7 05 20 2c 01 00 00 	movl   $0x0,0x12c20
   1066f:	00 00 00 

    //3.初始化空闲进程
    //TODO:有问题，进程切换混乱
    task_init(  &task_manager.empty_task,
   10672:	ba a0 2f 01 00       	mov    $0x12fa0,%edx
   10677:	b8 28 06 01 00       	mov    $0x10628,%eax
   1067c:	52                   	push   %edx
   1067d:	50                   	push   %eax
   1067e:	68 9d 24 01 00       	push   $0x1249d
   10683:	68 f4 2c 01 00       	push   $0x12cf4
   10688:	e8 c9 fe ff ff       	call   10556 <task_init>
   1068d:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10690:	83 ec 0c             	sub    $0xc,%esp
   10693:	68 f4 2c 01 00       	push   $0x12cf4
   10698:	e8 8b 00 00 00       	call   10728 <task_set_unready>
   1069d:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   106a0:	c7 05 f4 2c 01 00 00 	movl   $0x0,0x12cf4
   106a7:	00 00 00 
}
   106aa:	90                   	nop
   106ab:	c9                   	leave  
   106ac:	c3                   	ret    

000106ad <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   106ad:	55                   	push   %ebp
   106ae:	89 e5                	mov    %esp,%ebp
   106b0:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   106b3:	6a 00                	push   $0x0
   106b5:	6a 00                	push   $0x0
   106b7:	68 a8 24 01 00       	push   $0x124a8
   106bc:	68 48 2c 01 00       	push   $0x12c48
   106c1:	e8 90 fe ff ff       	call   10556 <task_init>
   106c6:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   106c9:	a1 f0 2c 01 00       	mov    0x12cf0,%eax
   106ce:	0f b7 c0             	movzwl %ax,%eax
   106d1:	83 ec 0c             	sub    $0xc,%esp
   106d4:	50                   	push   %eax
   106d5:	e8 33 fd ff ff       	call   1040d <write_tr>
   106da:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   106dd:	c7 05 20 2c 01 00 48 	movl   $0x12c48,0x12c20
   106e4:	2c 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   106e7:	a1 20 2c 01 00       	mov    0x12c20,%eax
   106ec:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   106f2:	90                   	nop
   106f3:	c9                   	leave  
   106f4:	c3                   	ret    

000106f5 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   106f5:	55                   	push   %ebp
   106f6:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   106f8:	b8 48 2c 01 00       	mov    $0x12c48,%eax
}
   106fd:	5d                   	pop    %ebp
   106fe:	c3                   	ret    

000106ff <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   106ff:	55                   	push   %ebp
   10700:	89 e5                	mov    %esp,%ebp
   10702:	83 ec 08             	sub    $0x8,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10705:	8b 45 08             	mov    0x8(%ebp),%eax
   10708:	83 c0 30             	add    $0x30,%eax
   1070b:	83 ec 08             	sub    $0x8,%esp
   1070e:	50                   	push   %eax
   1070f:	68 24 2c 01 00       	push   $0x12c24
   10714:	e8 71 18 00 00       	call   11f8a <list_insert_last>
   10719:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1071c:	8b 45 08             	mov    0x8(%ebp),%eax
   1071f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10725:	90                   	nop
   10726:	c9                   	leave  
   10727:	c3                   	ret    

00010728 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10728:	55                   	push   %ebp
   10729:	89 e5                	mov    %esp,%ebp
   1072b:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   1072e:	8b 45 08             	mov    0x8(%ebp),%eax
   10731:	83 c0 30             	add    $0x30,%eax
   10734:	83 ec 08             	sub    $0x8,%esp
   10737:	50                   	push   %eax
   10738:	68 24 2c 01 00       	push   $0x12c24
   1073d:	e8 3d 1a 00 00       	call   1217f <list_remove>
   10742:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10745:	8b 45 08             	mov    0x8(%ebp),%eax
   10748:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1074e:	90                   	nop
   1074f:	c9                   	leave  
   10750:	c3                   	ret    

00010751 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10751:	55                   	push   %ebp
   10752:	89 e5                	mov    %esp,%ebp
   10754:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10757:	83 ec 0c             	sub    $0xc,%esp
   1075a:	68 24 2c 01 00       	push   $0x12c24
   1075f:	e8 5c fc ff ff       	call   103c0 <list_get_first>
   10764:	83 c4 10             	add    $0x10,%esp
   10767:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list_node_parent(ready_node, task_t, ready_node);
   1076a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1076e:	74 08                	je     10778 <task_ready_first+0x27>
   10770:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10773:	83 e8 30             	sub    $0x30,%eax
   10776:	eb 05                	jmp    1077d <task_ready_first+0x2c>
   10778:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1077d:	c9                   	leave  
   1077e:	c3                   	ret    

0001077f <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
static task_t *task_current(void) {
   1077f:	55                   	push   %ebp
   10780:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10782:	a1 20 2c 01 00       	mov    0x12c20,%eax
}
   10787:	5d                   	pop    %ebp
   10788:	c3                   	ret    

00010789 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10789:	55                   	push   %ebp
   1078a:	89 e5                	mov    %esp,%ebp
   1078c:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   1078f:	e8 29 0c 00 00       	call   113bd <idt_enter_protection>
   10794:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10797:	e8 b5 ff ff ff       	call   10751 <task_ready_first>
   1079c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   1079f:	a1 20 2c 01 00       	mov    0x12c20,%eax
   107a4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   107a7:	74 37                	je     107e0 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   107a9:	a1 20 2c 01 00       	mov    0x12c20,%eax
   107ae:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   107b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b5:	75 07                	jne    107be <task_switch+0x35>
            to = &task_manager.empty_task;
   107b7:	c7 45 f4 f4 2c 01 00 	movl   $0x12cf4,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   107be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107c1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   107c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107ca:	a3 20 2c 01 00       	mov    %eax,0x12c20
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   107cf:	83 ec 08             	sub    $0x8,%esp
   107d2:	ff 75 f4             	push   -0xc(%ebp)
   107d5:	ff 75 ec             	push   -0x14(%ebp)
   107d8:	e8 66 fc ff ff       	call   10443 <task_switch_from_to>
   107dd:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   107e0:	83 ec 0c             	sub    $0xc,%esp
   107e3:	ff 75 f0             	push   -0x10(%ebp)
   107e6:	e8 ea 0b 00 00       	call   113d5 <idt_leave_protection>
   107eb:	83 c4 10             	add    $0x10,%esp
}
   107ee:	90                   	nop
   107ef:	c9                   	leave  
   107f0:	c3                   	ret    

000107f1 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   107f1:	55                   	push   %ebp
   107f2:	89 e5                	mov    %esp,%ebp
   107f4:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   107f7:	e8 c1 0b 00 00       	call   113bd <idt_enter_protection>
   107fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   107ff:	83 ec 0c             	sub    $0xc,%esp
   10802:	68 24 2c 01 00       	push   $0x12c24
   10807:	e8 87 fb ff ff       	call   10393 <list_get_size>
   1080c:	83 c4 10             	add    $0x10,%esp
   1080f:	83 f8 01             	cmp    $0x1,%eax
   10812:	7e 29                	jle    1083d <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10814:	e8 66 ff ff ff       	call   1077f <task_current>
   10819:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1081c:	83 ec 0c             	sub    $0xc,%esp
   1081f:	ff 75 f0             	push   -0x10(%ebp)
   10822:	e8 01 ff ff ff       	call   10728 <task_set_unready>
   10827:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1082a:	83 ec 0c             	sub    $0xc,%esp
   1082d:	ff 75 f0             	push   -0x10(%ebp)
   10830:	e8 ca fe ff ff       	call   106ff <task_set_ready>
   10835:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10838:	e8 4c ff ff ff       	call   10789 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   1083d:	83 ec 0c             	sub    $0xc,%esp
   10840:	ff 75 f4             	push   -0xc(%ebp)
   10843:	e8 8d 0b 00 00       	call   113d5 <idt_leave_protection>
   10848:	83 c4 10             	add    $0x10,%esp
    return 0;
   1084b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10850:	c9                   	leave  
   10851:	c3                   	ret    

00010852 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10852:	55                   	push   %ebp
   10853:	89 e5                	mov    %esp,%ebp
   10855:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10858:	83 ec 0c             	sub    $0xc,%esp
   1085b:	68 3c 2c 01 00       	push   $0x12c3c
   10860:	e8 5b fb ff ff       	call   103c0 <list_get_first>
   10865:	83 c4 10             	add    $0x10,%esp
   10868:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   1086b:	eb 62                	jmp    108cf <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   1086d:	83 ec 0c             	sub    $0xc,%esp
   10870:	ff 75 f4             	push   -0xc(%ebp)
   10873:	e8 72 fa ff ff       	call   102ea <list_node_next>
   10878:	83 c4 10             	add    $0x10,%esp
   1087b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   1087e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10882:	74 08                	je     1088c <task_slice_end+0x3a>
   10884:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10887:	83 e8 30             	sub    $0x30,%eax
   1088a:	eb 05                	jmp    10891 <task_slice_end+0x3f>
   1088c:	b8 00 00 00 00       	mov    $0x0,%eax
   10891:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10894:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10897:	8b 40 0c             	mov    0xc(%eax),%eax
   1089a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1089d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108a0:	89 50 0c             	mov    %edx,0xc(%eax)
   108a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108a6:	8b 40 0c             	mov    0xc(%eax),%eax
   108a9:	85 c0                	test   %eax,%eax
   108ab:	75 1c                	jne    108c9 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   108ad:	83 ec 0c             	sub    $0xc,%esp
   108b0:	ff 75 e8             	push   -0x18(%ebp)
   108b3:	e8 df 00 00 00       	call   10997 <task_set_wakeup>
   108b8:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   108bb:	83 ec 0c             	sub    $0xc,%esp
   108be:	ff 75 e8             	push   -0x18(%ebp)
   108c1:	e8 39 fe ff ff       	call   106ff <task_set_ready>
   108c6:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   108c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   108cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   108d3:	75 98                	jne    1086d <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   108d5:	e8 a5 fe ff ff       	call   1077f <task_current>
   108da:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   108dd:	81 7d f0 f4 2c 01 00 	cmpl   $0x12cf4,-0x10(%ebp)
   108e4:	75 23                	jne    10909 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   108e6:	83 ec 0c             	sub    $0xc,%esp
   108e9:	68 24 2c 01 00       	push   $0x12c24
   108ee:	e8 6b fa ff ff       	call   1035e <list_is_empty>
   108f3:	83 c4 10             	add    $0x10,%esp
   108f6:	85 c0                	test   %eax,%eax
   108f8:	75 60                	jne    1095a <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   108fa:	c7 05 f4 2c 01 00 00 	movl   $0x0,0x12cf4
   10901:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10904:	e8 80 fe ff ff       	call   10789 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10909:	81 7d f0 f4 2c 01 00 	cmpl   $0x12cf4,-0x10(%ebp)
   10910:	74 49                	je     1095b <task_slice_end+0x109>
   10912:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10915:	8b 40 08             	mov    0x8(%eax),%eax
   10918:	8d 50 ff             	lea    -0x1(%eax),%edx
   1091b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1091e:	89 50 08             	mov    %edx,0x8(%eax)
   10921:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10924:	8b 40 08             	mov    0x8(%eax),%eax
   10927:	85 c0                	test   %eax,%eax
   10929:	75 30                	jne    1095b <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1092b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1092e:	8b 50 04             	mov    0x4(%eax),%edx
   10931:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10934:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10937:	83 ec 0c             	sub    $0xc,%esp
   1093a:	ff 75 f0             	push   -0x10(%ebp)
   1093d:	e8 e6 fd ff ff       	call   10728 <task_set_unready>
   10942:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10945:	83 ec 0c             	sub    $0xc,%esp
   10948:	ff 75 f0             	push   -0x10(%ebp)
   1094b:	e8 af fd ff ff       	call   106ff <task_set_ready>
   10950:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10953:	e8 31 fe ff ff       	call   10789 <task_switch>
   10958:	eb 01                	jmp    1095b <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   1095a:	90                   	nop
    }
}
   1095b:	c9                   	leave  
   1095c:	c3                   	ret    

0001095d <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   1095d:	55                   	push   %ebp
   1095e:	89 e5                	mov    %esp,%ebp
   10960:	83 ec 08             	sub    $0x8,%esp
    if (slice == 0) return;
   10963:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10967:	74 2b                	je     10994 <task_set_sleep+0x37>

    task->sleep = slice;
   10969:	8b 55 0c             	mov    0xc(%ebp),%edx
   1096c:	8b 45 08             	mov    0x8(%ebp),%eax
   1096f:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10972:	8b 45 08             	mov    0x8(%ebp),%eax
   10975:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   1097b:	8b 45 08             	mov    0x8(%ebp),%eax
   1097e:	83 c0 30             	add    $0x30,%eax
   10981:	83 ec 08             	sub    $0x8,%esp
   10984:	50                   	push   %eax
   10985:	68 3c 2c 01 00       	push   $0x12c3c
   1098a:	e8 fb 15 00 00       	call   11f8a <list_insert_last>
   1098f:	83 c4 10             	add    $0x10,%esp
   10992:	eb 01                	jmp    10995 <task_set_sleep+0x38>
    if (slice == 0) return;
   10994:	90                   	nop
}
   10995:	c9                   	leave  
   10996:	c3                   	ret    

00010997 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10997:	55                   	push   %ebp
   10998:	89 e5                	mov    %esp,%ebp
   1099a:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   1099d:	8b 45 08             	mov    0x8(%ebp),%eax
   109a0:	83 c0 30             	add    $0x30,%eax
   109a3:	83 ec 08             	sub    $0x8,%esp
   109a6:	50                   	push   %eax
   109a7:	68 3c 2c 01 00       	push   $0x12c3c
   109ac:	e8 ce 17 00 00       	call   1217f <list_remove>
   109b1:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   109b4:	8b 45 08             	mov    0x8(%ebp),%eax
   109b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   109bd:	90                   	nop
   109be:	c9                   	leave  
   109bf:	c3                   	ret    

000109c0 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   109c0:	55                   	push   %ebp
   109c1:	89 e5                	mov    %esp,%ebp
   109c3:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   109c6:	e8 f2 09 00 00       	call   113bd <idt_enter_protection>
   109cb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   109ce:	e8 ac fd ff ff       	call   1077f <task_current>
   109d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   109d6:	83 ec 0c             	sub    $0xc,%esp
   109d9:	ff 75 f0             	push   -0x10(%ebp)
   109dc:	e8 47 fd ff ff       	call   10728 <task_set_unready>
   109e1:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   109e4:	8b 45 08             	mov    0x8(%ebp),%eax
   109e7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   109ea:	83 ec 08             	sub    $0x8,%esp
   109ed:	ff 75 ec             	push   -0x14(%ebp)
   109f0:	ff 75 f0             	push   -0x10(%ebp)
   109f3:	e8 65 ff ff ff       	call   1095d <task_set_sleep>
   109f8:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   109fb:	e8 89 fd ff ff       	call   10789 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10a00:	83 ec 0c             	sub    $0xc,%esp
   10a03:	ff 75 f4             	push   -0xc(%ebp)
   10a06:	e8 ca 09 00 00       	call   113d5 <idt_leave_protection>
   10a0b:	83 c4 10             	add    $0x10,%esp
   10a0e:	90                   	nop
   10a0f:	c9                   	leave  
   10a10:	c3                   	ret    

00010a11 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10a11:	55                   	push   %ebp
   10a12:	89 e5                	mov    %esp,%ebp
   10a14:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10a17:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1a:	c1 e8 10             	shr    $0x10,%eax
   10a1d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10a21:	8b 45 08             	mov    0x8(%ebp),%eax
   10a24:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10a28:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a2b:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10a2e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10a32:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10a36:	90                   	nop
   10a37:	c9                   	leave  
   10a38:	c3                   	ret    

00010a39 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10a39:	55                   	push   %ebp
   10a3a:	89 e5                	mov    %esp,%ebp
   10a3c:	83 ec 18             	sub    $0x18,%esp
   10a3f:	8b 55 08             	mov    0x8(%ebp),%edx
   10a42:	8b 45 14             	mov    0x14(%ebp),%eax
   10a45:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10a49:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10a4d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10a51:	66 c1 e8 03          	shr    $0x3,%ax
   10a55:	0f b7 c0             	movzwl %ax,%eax
   10a58:	c1 e0 03             	shl    $0x3,%eax
   10a5b:	05 a0 2f 01 00       	add    $0x12fa0,%eax
   10a60:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10a63:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a66:	89 c2                	mov    %eax,%edx
   10a68:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a6b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10a6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a72:	c1 e8 10             	shr    $0x10,%eax
   10a75:	89 c2                	mov    %eax,%edx
   10a77:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a7a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10a7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a80:	c1 e8 18             	shr    $0x18,%eax
   10a83:	89 c2                	mov    %eax,%edx
   10a85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a88:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10a8b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10a92:	76 1d                	jbe    10ab1 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10a94:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a97:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a9b:	66 0d 00 80          	or     $0x8000,%ax
   10a9f:	89 c2                	mov    %eax,%edx
   10aa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10aa4:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10aa8:	8b 45 10             	mov    0x10(%ebp),%eax
   10aab:	c1 e8 0c             	shr    $0xc,%eax
   10aae:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10ab1:	8b 45 10             	mov    0x10(%ebp),%eax
   10ab4:	89 c2                	mov    %eax,%edx
   10ab6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ab9:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10abc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10abf:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10ac3:	89 c2                	mov    %eax,%edx
   10ac5:	8b 45 10             	mov    0x10(%ebp),%eax
   10ac8:	c1 e8 08             	shr    $0x8,%eax
   10acb:	66 25 00 0f          	and    $0xf00,%ax
   10acf:	09 d0                	or     %edx,%eax
   10ad1:	89 c2                	mov    %eax,%edx
   10ad3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ad6:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10ada:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10add:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10ae1:	89 c2                	mov    %eax,%edx
   10ae3:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10ae7:	80 e4 f0             	and    $0xf0,%ah
   10aea:	09 d0                	or     %edx,%eax
   10aec:	89 c2                	mov    %eax,%edx
   10aee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10af1:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10af5:	90                   	nop
   10af6:	c9                   	leave  
   10af7:	c3                   	ret    

00010af8 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10af8:	55                   	push   %ebp
   10af9:	89 e5                	mov    %esp,%ebp
   10afb:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10afe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b05:	eb 1c                	jmp    10b23 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10b07:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b0a:	c1 e0 03             	shl    $0x3,%eax
   10b0d:	0f b7 c0             	movzwl %ax,%eax
   10b10:	6a 00                	push   $0x0
   10b12:	6a 00                	push   $0x0
   10b14:	6a 00                	push   $0x0
   10b16:	50                   	push   %eax
   10b17:	e8 1d ff ff ff       	call   10a39 <segment_desc_set>
   10b1c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10b1f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b23:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10b2a:	7e db                	jle    10b07 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10b2c:	68 92 40 00 00       	push   $0x4092
   10b31:	6a ff                	push   $0xffffffff
   10b33:	6a 00                	push   $0x0
   10b35:	6a 10                	push   $0x10
   10b37:	e8 fd fe ff ff       	call   10a39 <segment_desc_set>
   10b3c:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10b3f:	68 9a 40 00 00       	push   $0x409a
   10b44:	6a ff                	push   $0xffffffff
   10b46:	6a 00                	push   $0x0
   10b48:	6a 08                	push   $0x8
   10b4a:	e8 ea fe ff ff       	call   10a39 <segment_desc_set>
   10b4f:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10b52:	b8 a0 2f 01 00       	mov    $0x12fa0,%eax
   10b57:	68 00 00 01 00       	push   $0x10000
   10b5c:	50                   	push   %eax
   10b5d:	e8 af fe ff ff       	call   10a11 <lgdt>
   10b62:	83 c4 08             	add    $0x8,%esp
}
   10b65:	90                   	nop
   10b66:	c9                   	leave  
   10b67:	c3                   	ret    

00010b68 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10b68:	55                   	push   %ebp
   10b69:	89 e5                	mov    %esp,%ebp
   10b6b:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10b6e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10b75:	eb 25                	jmp    10b9c <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   10b77:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b7a:	c1 e0 03             	shl    $0x3,%eax
   10b7d:	05 a0 2f 01 00       	add    $0x12fa0,%eax
   10b82:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   10b85:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10b88:	0f b7 00             	movzwl (%eax),%eax
   10b8b:	66 85 c0             	test   %ax,%ax
   10b8e:	75 08                	jne    10b98 <gdt_alloc_desc+0x30>
            return i << 3;
   10b90:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b93:	c1 e0 03             	shl    $0x3,%eax
   10b96:	eb 12                	jmp    10baa <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10b98:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b9c:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10ba3:	7e d2                	jle    10b77 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10ba5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10baa:	c9                   	leave  
   10bab:	c3                   	ret    

00010bac <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
   10baf:	fa                   	cli    
   10bb0:	90                   	nop
   10bb1:	5d                   	pop    %ebp
   10bb2:	c3                   	ret    

00010bb3 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10bb3:	55                   	push   %ebp
   10bb4:	89 e5                	mov    %esp,%ebp
   10bb6:	fb                   	sti    
   10bb7:	90                   	nop
   10bb8:	5d                   	pop    %ebp
   10bb9:	c3                   	ret    

00010bba <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10bba:	55                   	push   %ebp
   10bbb:	89 e5                	mov    %esp,%ebp
   10bbd:	f4                   	hlt    
   10bbe:	90                   	nop
   10bbf:	5d                   	pop    %ebp
   10bc0:	c3                   	ret    

00010bc1 <inb>:
static inline uint8_t inb(uint16_t port) {
   10bc1:	55                   	push   %ebp
   10bc2:	89 e5                	mov    %esp,%ebp
   10bc4:	83 ec 14             	sub    $0x14,%esp
   10bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bca:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10bce:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10bd2:	89 c2                	mov    %eax,%edx
   10bd4:	ec                   	in     (%dx),%al
   10bd5:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10bd8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10bdc:	c9                   	leave  
   10bdd:	c3                   	ret    

00010bde <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10bde:	55                   	push   %ebp
   10bdf:	89 e5                	mov    %esp,%ebp
   10be1:	83 ec 08             	sub    $0x8,%esp
   10be4:	8b 45 08             	mov    0x8(%ebp),%eax
   10be7:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bea:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10bee:	89 d0                	mov    %edx,%eax
   10bf0:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10bf3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bf7:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10bfb:	ee                   	out    %al,(%dx)
}
   10bfc:	90                   	nop
   10bfd:	c9                   	leave  
   10bfe:	c3                   	ret    

00010bff <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10bff:	55                   	push   %ebp
   10c00:	89 e5                	mov    %esp,%ebp
   10c02:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10c05:	8b 45 08             	mov    0x8(%ebp),%eax
   10c08:	c1 e8 10             	shr    $0x10,%eax
   10c0b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10c0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c12:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10c16:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c19:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10c1c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10c20:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10c24:	90                   	nop
   10c25:	c9                   	leave  
   10c26:	c3                   	ret    

00010c27 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10c27:	55                   	push   %ebp
   10c28:	89 e5                	mov    %esp,%ebp
   10c2a:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10c2d:	9c                   	pushf  
   10c2e:	58                   	pop    %eax
   10c2f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10c32:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10c35:	c9                   	leave  
   10c36:	c3                   	ret    

00010c37 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10c37:	55                   	push   %ebp
   10c38:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10c3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3d:	50                   	push   %eax
   10c3e:	9d                   	popf   
}
   10c3f:	90                   	nop
   10c40:	5d                   	pop    %ebp
   10c41:	c3                   	ret    

00010c42 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10c42:	55                   	push   %ebp
   10c43:	89 e5                	mov    %esp,%ebp
   10c45:	57                   	push   %edi
   10c46:	56                   	push   %esi
   10c47:	53                   	push   %ebx
   10c48:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10c4b:	83 ec 0c             	sub    $0xc,%esp
   10c4e:	68 1c 25 01 00       	push   $0x1251c
   10c53:	e8 a3 16 00 00       	call   122fb <log_printf>
   10c58:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10c5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5e:	8b 50 34             	mov    0x34(%eax),%edx
   10c61:	8b 45 08             	mov    0x8(%ebp),%eax
   10c64:	8b 40 30             	mov    0x30(%eax),%eax
   10c67:	83 ec 04             	sub    $0x4,%esp
   10c6a:	52                   	push   %edx
   10c6b:	50                   	push   %eax
   10c6c:	68 5a 25 01 00       	push   $0x1255a
   10c71:	e8 85 16 00 00       	call   122fb <log_printf>
   10c76:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10c79:	8b 45 08             	mov    0x8(%ebp),%eax
   10c7c:	8b 38                	mov    (%eax),%edi
   10c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c81:	8b 70 04             	mov    0x4(%eax),%esi
   10c84:	8b 45 08             	mov    0x8(%ebp),%eax
   10c87:	8b 58 08             	mov    0x8(%eax),%ebx
   10c8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8d:	8b 48 0c             	mov    0xc(%eax),%ecx
   10c90:	8b 45 08             	mov    0x8(%ebp),%eax
   10c93:	8b 50 0c             	mov    0xc(%eax),%edx
   10c96:	8b 45 08             	mov    0x8(%ebp),%eax
   10c99:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10c9c:	83 ec 04             	sub    $0x4,%esp
   10c9f:	57                   	push   %edi
   10ca0:	56                   	push   %esi
   10ca1:	53                   	push   %ebx
   10ca2:	51                   	push   %ecx
   10ca3:	52                   	push   %edx
   10ca4:	50                   	push   %eax
   10ca5:	68 74 25 01 00       	push   $0x12574
   10caa:	e8 4c 16 00 00       	call   122fb <log_printf>
   10caf:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10cb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10cb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbb:	8b 40 18             	mov    0x18(%eax),%eax
   10cbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc4:	8b 58 10             	mov    0x10(%eax),%ebx
   10cc7:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10cca:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccd:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10cd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd3:	8b 70 24             	mov    0x24(%eax),%esi
   10cd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd9:	8b 58 28             	mov    0x28(%eax),%ebx
   10cdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdf:	8b 50 20             	mov    0x20(%eax),%edx
   10ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce5:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10ce8:	83 ec 0c             	sub    $0xc,%esp
   10ceb:	51                   	push   %ecx
   10cec:	ff 75 e4             	push   -0x1c(%ebp)
   10cef:	ff 75 e0             	push   -0x20(%ebp)
   10cf2:	57                   	push   %edi
   10cf3:	56                   	push   %esi
   10cf4:	53                   	push   %ebx
   10cf5:	52                   	push   %edx
   10cf6:	50                   	push   %eax
   10cf7:	68 a4 25 01 00       	push   $0x125a4
   10cfc:	e8 fa 15 00 00       	call   122fb <log_printf>
   10d01:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10d04:	8b 45 08             	mov    0x8(%ebp),%eax
   10d07:	8b 50 40             	mov    0x40(%eax),%edx
   10d0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0d:	8b 40 38             	mov    0x38(%eax),%eax
   10d10:	83 ec 04             	sub    $0x4,%esp
   10d13:	52                   	push   %edx
   10d14:	50                   	push   %eax
   10d15:	68 fc 25 01 00       	push   $0x125fc
   10d1a:	e8 dc 15 00 00       	call   122fb <log_printf>
   10d1f:	83 c4 10             	add    $0x10,%esp
}
   10d22:	90                   	nop
   10d23:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10d26:	5b                   	pop    %ebx
   10d27:	5e                   	pop    %esi
   10d28:	5f                   	pop    %edi
   10d29:	5d                   	pop    %ebp
   10d2a:	c3                   	ret    

00010d2b <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10d2b:	55                   	push   %ebp
   10d2c:	89 e5                	mov    %esp,%ebp
   10d2e:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   10d31:	83 ec 0c             	sub    $0xc,%esp
   10d34:	68 18 26 01 00       	push   $0x12618
   10d39:	e8 bd 15 00 00       	call   122fb <log_printf>
   10d3e:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10d41:	83 ec 08             	sub    $0x8,%esp
   10d44:	ff 75 0c             	push   0xc(%ebp)
   10d47:	68 4c 26 01 00       	push   $0x1264c
   10d4c:	e8 aa 15 00 00       	call   122fb <log_printf>
   10d51:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10d54:	83 ec 0c             	sub    $0xc,%esp
   10d57:	ff 75 08             	push   0x8(%ebp)
   10d5a:	e8 e3 fe ff ff       	call   10c42 <print_exception_fram>
   10d5f:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10d62:	e8 53 fe ff ff       	call   10bba <hlt>
   10d67:	eb f9                	jmp    10d62 <do_default_handler+0x37>

00010d69 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10d69:	55                   	push   %ebp
   10d6a:	89 e5                	mov    %esp,%ebp
   10d6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10d6f:	83 ec 08             	sub    $0x8,%esp
   10d72:	68 66 26 01 00       	push   $0x12666
   10d77:	ff 75 08             	push   0x8(%ebp)
   10d7a:	e8 ac ff ff ff       	call   10d2b <do_default_handler>
   10d7f:	83 c4 10             	add    $0x10,%esp
}
   10d82:	90                   	nop
   10d83:	c9                   	leave  
   10d84:	c3                   	ret    

00010d85 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10d85:	55                   	push   %ebp
   10d86:	89 e5                	mov    %esp,%ebp
   10d88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10d8b:	83 ec 08             	sub    $0x8,%esp
   10d8e:	68 78 26 01 00       	push   $0x12678
   10d93:	ff 75 08             	push   0x8(%ebp)
   10d96:	e8 90 ff ff ff       	call   10d2b <do_default_handler>
   10d9b:	83 c4 10             	add    $0x10,%esp
}
   10d9e:	90                   	nop
   10d9f:	c9                   	leave  
   10da0:	c3                   	ret    

00010da1 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10da1:	55                   	push   %ebp
   10da2:	89 e5                	mov    %esp,%ebp
   10da4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10da7:	83 ec 08             	sub    $0x8,%esp
   10daa:	68 8a 26 01 00       	push   $0x1268a
   10daf:	ff 75 08             	push   0x8(%ebp)
   10db2:	e8 74 ff ff ff       	call   10d2b <do_default_handler>
   10db7:	83 c4 10             	add    $0x10,%esp
}
   10dba:	90                   	nop
   10dbb:	c9                   	leave  
   10dbc:	c3                   	ret    

00010dbd <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10dbd:	55                   	push   %ebp
   10dbe:	89 e5                	mov    %esp,%ebp
   10dc0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10dc3:	83 ec 08             	sub    $0x8,%esp
   10dc6:	68 9a 26 01 00       	push   $0x1269a
   10dcb:	ff 75 08             	push   0x8(%ebp)
   10dce:	e8 58 ff ff ff       	call   10d2b <do_default_handler>
   10dd3:	83 c4 10             	add    $0x10,%esp
}
   10dd6:	90                   	nop
   10dd7:	c9                   	leave  
   10dd8:	c3                   	ret    

00010dd9 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10dd9:	55                   	push   %ebp
   10dda:	89 e5                	mov    %esp,%ebp
   10ddc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10ddf:	83 ec 08             	sub    $0x8,%esp
   10de2:	68 a8 26 01 00       	push   $0x126a8
   10de7:	ff 75 08             	push   0x8(%ebp)
   10dea:	e8 3c ff ff ff       	call   10d2b <do_default_handler>
   10def:	83 c4 10             	add    $0x10,%esp
}
   10df2:	90                   	nop
   10df3:	c9                   	leave  
   10df4:	c3                   	ret    

00010df5 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10df5:	55                   	push   %ebp
   10df6:	89 e5                	mov    %esp,%ebp
   10df8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10dfb:	83 ec 08             	sub    $0x8,%esp
   10dfe:	68 bd 26 01 00       	push   $0x126bd
   10e03:	ff 75 08             	push   0x8(%ebp)
   10e06:	e8 20 ff ff ff       	call   10d2b <do_default_handler>
   10e0b:	83 c4 10             	add    $0x10,%esp
}
   10e0e:	90                   	nop
   10e0f:	c9                   	leave  
   10e10:	c3                   	ret    

00010e11 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10e11:	55                   	push   %ebp
   10e12:	89 e5                	mov    %esp,%ebp
   10e14:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10e17:	83 ec 08             	sub    $0x8,%esp
   10e1a:	68 d0 26 01 00       	push   $0x126d0
   10e1f:	ff 75 08             	push   0x8(%ebp)
   10e22:	e8 04 ff ff ff       	call   10d2b <do_default_handler>
   10e27:	83 c4 10             	add    $0x10,%esp
}
   10e2a:	90                   	nop
   10e2b:	c9                   	leave  
   10e2c:	c3                   	ret    

00010e2d <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10e2d:	55                   	push   %ebp
   10e2e:	89 e5                	mov    %esp,%ebp
   10e30:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10e33:	83 ec 08             	sub    $0x8,%esp
   10e36:	68 e6 26 01 00       	push   $0x126e6
   10e3b:	ff 75 08             	push   0x8(%ebp)
   10e3e:	e8 e8 fe ff ff       	call   10d2b <do_default_handler>
   10e43:	83 c4 10             	add    $0x10,%esp
}
   10e46:	90                   	nop
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp
   10e4c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10e4f:	83 ec 08             	sub    $0x8,%esp
   10e52:	68 ff 26 01 00       	push   $0x126ff
   10e57:	ff 75 08             	push   0x8(%ebp)
   10e5a:	e8 cc fe ff ff       	call   10d2b <do_default_handler>
   10e5f:	83 c4 10             	add    $0x10,%esp
}
   10e62:	90                   	nop
   10e63:	c9                   	leave  
   10e64:	c3                   	ret    

00010e65 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10e65:	55                   	push   %ebp
   10e66:	89 e5                	mov    %esp,%ebp
   10e68:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10e6b:	83 ec 08             	sub    $0x8,%esp
   10e6e:	68 1c 27 01 00       	push   $0x1271c
   10e73:	ff 75 08             	push   0x8(%ebp)
   10e76:	e8 b0 fe ff ff       	call   10d2b <do_default_handler>
   10e7b:	83 c4 10             	add    $0x10,%esp
}
   10e7e:	90                   	nop
   10e7f:	c9                   	leave  
   10e80:	c3                   	ret    

00010e81 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10e81:	55                   	push   %ebp
   10e82:	89 e5                	mov    %esp,%ebp
   10e84:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10e87:	83 ec 08             	sub    $0x8,%esp
   10e8a:	68 33 27 01 00       	push   $0x12733
   10e8f:	ff 75 08             	push   0x8(%ebp)
   10e92:	e8 94 fe ff ff       	call   10d2b <do_default_handler>
   10e97:	83 c4 10             	add    $0x10,%esp
}
   10e9a:	90                   	nop
   10e9b:	c9                   	leave  
   10e9c:	c3                   	ret    

00010e9d <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10e9d:	55                   	push   %ebp
   10e9e:	89 e5                	mov    %esp,%ebp
   10ea0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10ea3:	83 ec 08             	sub    $0x8,%esp
   10ea6:	68 49 27 01 00       	push   $0x12749
   10eab:	ff 75 08             	push   0x8(%ebp)
   10eae:	e8 78 fe ff ff       	call   10d2b <do_default_handler>
   10eb3:	83 c4 10             	add    $0x10,%esp
}
   10eb6:	90                   	nop
   10eb7:	c9                   	leave  
   10eb8:	c3                   	ret    

00010eb9 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10eb9:	55                   	push   %ebp
   10eba:	89 e5                	mov    %esp,%ebp
   10ebc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   10ebf:	83 ec 08             	sub    $0x8,%esp
   10ec2:	68 67 27 01 00       	push   $0x12767
   10ec7:	ff 75 08             	push   0x8(%ebp)
   10eca:	e8 5c fe ff ff       	call   10d2b <do_default_handler>
   10ecf:	83 c4 10             	add    $0x10,%esp
}
   10ed2:	90                   	nop
   10ed3:	c9                   	leave  
   10ed4:	c3                   	ret    

00010ed5 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10ed5:	55                   	push   %ebp
   10ed6:	89 e5                	mov    %esp,%ebp
   10ed8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10edb:	83 ec 08             	sub    $0x8,%esp
   10ede:	68 85 27 01 00       	push   $0x12785
   10ee3:	ff 75 08             	push   0x8(%ebp)
   10ee6:	e8 40 fe ff ff       	call   10d2b <do_default_handler>
   10eeb:	83 c4 10             	add    $0x10,%esp
}
   10eee:	90                   	nop
   10eef:	c9                   	leave  
   10ef0:	c3                   	ret    

00010ef1 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10ef1:	55                   	push   %ebp
   10ef2:	89 e5                	mov    %esp,%ebp
   10ef4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10ef7:	83 ec 08             	sub    $0x8,%esp
   10efa:	68 a2 27 01 00       	push   $0x127a2
   10eff:	ff 75 08             	push   0x8(%ebp)
   10f02:	e8 24 fe ff ff       	call   10d2b <do_default_handler>
   10f07:	83 c4 10             	add    $0x10,%esp
}
   10f0a:	90                   	nop
   10f0b:	c9                   	leave  
   10f0c:	c3                   	ret    

00010f0d <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10f0d:	55                   	push   %ebp
   10f0e:	89 e5                	mov    %esp,%ebp
   10f10:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   10f13:	83 ec 08             	sub    $0x8,%esp
   10f16:	68 b7 27 01 00       	push   $0x127b7
   10f1b:	ff 75 08             	push   0x8(%ebp)
   10f1e:	e8 08 fe ff ff       	call   10d2b <do_default_handler>
   10f23:	83 c4 10             	add    $0x10,%esp
}
   10f26:	90                   	nop
   10f27:	c9                   	leave  
   10f28:	c3                   	ret    

00010f29 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10f29:	55                   	push   %ebp
   10f2a:	89 e5                	mov    %esp,%ebp
   10f2c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   10f2f:	83 ec 08             	sub    $0x8,%esp
   10f32:	68 cb 27 01 00       	push   $0x127cb
   10f37:	ff 75 08             	push   0x8(%ebp)
   10f3a:	e8 ec fd ff ff       	call   10d2b <do_default_handler>
   10f3f:	83 c4 10             	add    $0x10,%esp
}
   10f42:	90                   	nop
   10f43:	c9                   	leave  
   10f44:	c3                   	ret    

00010f45 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10f45:	55                   	push   %ebp
   10f46:	89 e5                	mov    %esp,%ebp
   10f48:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10f4b:	83 ec 08             	sub    $0x8,%esp
   10f4e:	68 e5 27 01 00       	push   $0x127e5
   10f53:	ff 75 08             	push   0x8(%ebp)
   10f56:	e8 d0 fd ff ff       	call   10d2b <do_default_handler>
   10f5b:	83 c4 10             	add    $0x10,%esp
}
   10f5e:	90                   	nop
   10f5f:	c9                   	leave  
   10f60:	c3                   	ret    

00010f61 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10f61:	55                   	push   %ebp
   10f62:	89 e5                	mov    %esp,%ebp
   10f64:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10f67:	83 ec 08             	sub    $0x8,%esp
   10f6a:	68 fd 27 01 00       	push   $0x127fd
   10f6f:	ff 75 08             	push   0x8(%ebp)
   10f72:	e8 b4 fd ff ff       	call   10d2b <do_default_handler>
   10f77:	83 c4 10             	add    $0x10,%esp
}
   10f7a:	90                   	nop
   10f7b:	c9                   	leave  
   10f7c:	c3                   	ret    

00010f7d <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   10f7d:	55                   	push   %ebp
   10f7e:	89 e5                	mov    %esp,%ebp
   10f80:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   10f83:	83 ec 08             	sub    $0x8,%esp
   10f86:	68 15 28 01 00       	push   $0x12815
   10f8b:	ff 75 08             	push   0x8(%ebp)
   10f8e:	e8 98 fd ff ff       	call   10d2b <do_default_handler>
   10f93:	83 c4 10             	add    $0x10,%esp
}
   10f96:	90                   	nop
   10f97:	c9                   	leave  
   10f98:	c3                   	ret    

00010f99 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   10f99:	55                   	push   %ebp
   10f9a:	89 e5                	mov    %esp,%ebp
   10f9c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   10f9f:	83 ec 08             	sub    $0x8,%esp
   10fa2:	68 31 28 01 00       	push   $0x12831
   10fa7:	ff 75 08             	push   0x8(%ebp)
   10faa:	e8 7c fd ff ff       	call   10d2b <do_default_handler>
   10faf:	83 c4 10             	add    $0x10,%esp
}
   10fb2:	90                   	nop
   10fb3:	c9                   	leave  
   10fb4:	c3                   	ret    

00010fb5 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10fb5:	55                   	push   %ebp
   10fb6:	89 e5                	mov    %esp,%ebp
   10fb8:	83 ec 08             	sub    $0x8,%esp
   10fbb:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fbe:	8b 45 14             	mov    0x14(%ebp),%eax
   10fc1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10fc5:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10fc9:	8b 45 10             	mov    0x10(%ebp),%eax
   10fcc:	89 c2                	mov    %eax,%edx
   10fce:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd1:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   10fd4:	8b 45 10             	mov    0x10(%ebp),%eax
   10fd7:	c1 e8 10             	shr    $0x10,%eax
   10fda:	89 c2                	mov    %eax,%edx
   10fdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdf:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10fea:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   10fee:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff1:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10ff5:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10ff9:	90                   	nop
   10ffa:	c9                   	leave  
   10ffb:	c3                   	ret    

00010ffc <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   10ffc:	55                   	push   %ebp
   10ffd:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   10fff:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11006:	7f 06                	jg     1100e <idt_install+0x12>
   11008:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100c:	79 07                	jns    11015 <idt_install+0x19>
   1100e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11013:	eb 25                	jmp    1103a <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11015:	8b 45 0c             	mov    0xc(%ebp),%eax
   11018:	8b 55 08             	mov    0x8(%ebp),%edx
   1101b:	c1 e2 03             	shl    $0x3,%edx
   1101e:	81 c2 a0 2f 02 00    	add    $0x22fa0,%edx
   11024:	68 00 8e 00 00       	push   $0x8e00
   11029:	50                   	push   %eax
   1102a:	6a 08                	push   $0x8
   1102c:	52                   	push   %edx
   1102d:	e8 83 ff ff ff       	call   10fb5 <gate_desc_set>
   11032:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11035:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1103a:	c9                   	leave  
   1103b:	c3                   	ret    

0001103c <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   1103c:	55                   	push   %ebp
   1103d:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   1103f:	6a 11                	push   $0x11
   11041:	6a 20                	push   $0x20
   11043:	e8 96 fb ff ff       	call   10bde <outb>
   11048:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   1104b:	6a 20                	push   $0x20
   1104d:	6a 21                	push   $0x21
   1104f:	e8 8a fb ff ff       	call   10bde <outb>
   11054:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11057:	6a 04                	push   $0x4
   11059:	6a 21                	push   $0x21
   1105b:	e8 7e fb ff ff       	call   10bde <outb>
   11060:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11063:	6a 01                	push   $0x1
   11065:	6a 21                	push   $0x21
   11067:	e8 72 fb ff ff       	call   10bde <outb>
   1106c:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1106f:	6a 11                	push   $0x11
   11071:	68 a0 00 00 00       	push   $0xa0
   11076:	e8 63 fb ff ff       	call   10bde <outb>
   1107b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1107e:	6a 28                	push   $0x28
   11080:	68 a1 00 00 00       	push   $0xa1
   11085:	e8 54 fb ff ff       	call   10bde <outb>
   1108a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1108d:	6a 02                	push   $0x2
   1108f:	68 a1 00 00 00       	push   $0xa1
   11094:	e8 45 fb ff ff       	call   10bde <outb>
   11099:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   1109c:	6a 01                	push   $0x1
   1109e:	68 a1 00 00 00       	push   $0xa1
   110a3:	e8 36 fb ff ff       	call   10bde <outb>
   110a8:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   110ab:	68 fb 00 00 00       	push   $0xfb
   110b0:	6a 21                	push   $0x21
   110b2:	e8 27 fb ff ff       	call   10bde <outb>
   110b7:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   110ba:	68 ff 00 00 00       	push   $0xff
   110bf:	68 a1 00 00 00       	push   $0xa1
   110c4:	e8 15 fb ff ff       	call   10bde <outb>
   110c9:	83 c4 08             	add    $0x8,%esp


}
   110cc:	90                   	nop
   110cd:	c9                   	leave  
   110ce:	c3                   	ret    

000110cf <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   110cf:	55                   	push   %ebp
   110d0:	89 e5                	mov    %esp,%ebp
   110d2:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   110d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   110dc:	eb 14                	jmp    110f2 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   110de:	68 2a 00 01 00       	push   $0x1002a
   110e3:	ff 75 fc             	push   -0x4(%ebp)
   110e6:	e8 11 ff ff ff       	call   10ffc <idt_install>
   110eb:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   110ee:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   110f2:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   110f9:	7e e3                	jle    110de <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   110fb:	68 47 00 01 00       	push   $0x10047
   11100:	6a 00                	push   $0x0
   11102:	e8 f5 fe ff ff       	call   10ffc <idt_install>
   11107:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   1110a:	68 64 00 01 00       	push   $0x10064
   1110f:	6a 01                	push   $0x1
   11111:	e8 e6 fe ff ff       	call   10ffc <idt_install>
   11116:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11119:	68 81 00 01 00       	push   $0x10081
   1111e:	6a 02                	push   $0x2
   11120:	e8 d7 fe ff ff       	call   10ffc <idt_install>
   11125:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11128:	68 9e 00 01 00       	push   $0x1009e
   1112d:	6a 03                	push   $0x3
   1112f:	e8 c8 fe ff ff       	call   10ffc <idt_install>
   11134:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11137:	68 bb 00 01 00       	push   $0x100bb
   1113c:	6a 04                	push   $0x4
   1113e:	e8 b9 fe ff ff       	call   10ffc <idt_install>
   11143:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11146:	68 d8 00 01 00       	push   $0x100d8
   1114b:	6a 05                	push   $0x5
   1114d:	e8 aa fe ff ff       	call   10ffc <idt_install>
   11152:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11155:	68 f5 00 01 00       	push   $0x100f5
   1115a:	6a 06                	push   $0x6
   1115c:	e8 9b fe ff ff       	call   10ffc <idt_install>
   11161:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11164:	68 12 01 01 00       	push   $0x10112
   11169:	6a 07                	push   $0x7
   1116b:	e8 8c fe ff ff       	call   10ffc <idt_install>
   11170:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11173:	68 2f 01 01 00       	push   $0x1012f
   11178:	6a 08                	push   $0x8
   1117a:	e8 7d fe ff ff       	call   10ffc <idt_install>
   1117f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11182:	68 4a 01 01 00       	push   $0x1014a
   11187:	6a 0a                	push   $0xa
   11189:	e8 6e fe ff ff       	call   10ffc <idt_install>
   1118e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11191:	68 65 01 01 00       	push   $0x10165
   11196:	6a 0b                	push   $0xb
   11198:	e8 5f fe ff ff       	call   10ffc <idt_install>
   1119d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   111a0:	68 80 01 01 00       	push   $0x10180
   111a5:	6a 0c                	push   $0xc
   111a7:	e8 50 fe ff ff       	call   10ffc <idt_install>
   111ac:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   111af:	68 9b 01 01 00       	push   $0x1019b
   111b4:	6a 0d                	push   $0xd
   111b6:	e8 41 fe ff ff       	call   10ffc <idt_install>
   111bb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   111be:	68 b6 01 01 00       	push   $0x101b6
   111c3:	6a 0e                	push   $0xe
   111c5:	e8 32 fe ff ff       	call   10ffc <idt_install>
   111ca:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   111cd:	68 d1 01 01 00       	push   $0x101d1
   111d2:	6a 10                	push   $0x10
   111d4:	e8 23 fe ff ff       	call   10ffc <idt_install>
   111d9:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   111dc:	68 ee 01 01 00       	push   $0x101ee
   111e1:	6a 11                	push   $0x11
   111e3:	e8 14 fe ff ff       	call   10ffc <idt_install>
   111e8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   111eb:	68 09 02 01 00       	push   $0x10209
   111f0:	6a 12                	push   $0x12
   111f2:	e8 05 fe ff ff       	call   10ffc <idt_install>
   111f7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   111fa:	68 26 02 01 00       	push   $0x10226
   111ff:	6a 13                	push   $0x13
   11201:	e8 f6 fd ff ff       	call   10ffc <idt_install>
   11206:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11209:	68 43 02 01 00       	push   $0x10243
   1120e:	6a 14                	push   $0x14
   11210:	e8 e7 fd ff ff       	call   10ffc <idt_install>
   11215:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11218:	68 60 02 01 00       	push   $0x10260
   1121d:	6a 15                	push   $0x15
   1121f:	e8 d8 fd ff ff       	call   10ffc <idt_install>
   11224:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11227:	b8 a0 2f 02 00       	mov    $0x22fa0,%eax
   1122c:	68 00 08 00 00       	push   $0x800
   11231:	50                   	push   %eax
   11232:	e8 c8 f9 ff ff       	call   10bff <lidt>
   11237:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   1123a:	e8 fd fd ff ff       	call   1103c <init_pic>
}
   1123f:	90                   	nop
   11240:	c9                   	leave  
   11241:	c3                   	ret    

00011242 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11242:	55                   	push   %ebp
   11243:	89 e5                	mov    %esp,%ebp
   11245:	53                   	push   %ebx
   11246:	83 ec 14             	sub    $0x14,%esp
   11249:	8b 45 08             	mov    0x8(%ebp),%eax
   1124c:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1124f:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11253:	76 7f                	jbe    112d4 <idt_enable+0x92>
   11255:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11259:	77 79                	ja     112d4 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1125b:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1125f:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11263:	77 33                	ja     11298 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11265:	6a 21                	push   $0x21
   11267:	e8 55 f9 ff ff       	call   10bc1 <inb>
   1126c:	83 c4 04             	add    $0x4,%esp
   1126f:	89 c3                	mov    %eax,%ebx
   11271:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11275:	ba 01 00 00 00       	mov    $0x1,%edx
   1127a:	89 c1                	mov    %eax,%ecx
   1127c:	d3 e2                	shl    %cl,%edx
   1127e:	89 d0                	mov    %edx,%eax
   11280:	f7 d0                	not    %eax
   11282:	21 d8                	and    %ebx,%eax
   11284:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11287:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1128b:	50                   	push   %eax
   1128c:	6a 21                	push   $0x21
   1128e:	e8 4b f9 ff ff       	call   10bde <outb>
   11293:	83 c4 08             	add    $0x8,%esp
   11296:	eb 3d                	jmp    112d5 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11298:	68 a1 00 00 00       	push   $0xa1
   1129d:	e8 1f f9 ff ff       	call   10bc1 <inb>
   112a2:	83 c4 04             	add    $0x4,%esp
   112a5:	89 c3                	mov    %eax,%ebx
   112a7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   112ab:	83 e8 08             	sub    $0x8,%eax
   112ae:	ba 01 00 00 00       	mov    $0x1,%edx
   112b3:	89 c1                	mov    %eax,%ecx
   112b5:	d3 e2                	shl    %cl,%edx
   112b7:	89 d0                	mov    %edx,%eax
   112b9:	f7 d0                	not    %eax
   112bb:	21 d8                	and    %ebx,%eax
   112bd:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   112c0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   112c4:	50                   	push   %eax
   112c5:	68 a1 00 00 00       	push   $0xa1
   112ca:	e8 0f f9 ff ff       	call   10bde <outb>
   112cf:	83 c4 08             	add    $0x8,%esp
   112d2:	eb 01                	jmp    112d5 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   112d4:	90                   	nop
  }
  
}
   112d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   112d8:	c9                   	leave  
   112d9:	c3                   	ret    

000112da <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   112da:	55                   	push   %ebp
   112db:	89 e5                	mov    %esp,%ebp
   112dd:	53                   	push   %ebx
   112de:	83 ec 14             	sub    $0x14,%esp
   112e1:	8b 45 08             	mov    0x8(%ebp),%eax
   112e4:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   112e7:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   112eb:	76 7b                	jbe    11368 <idt_disable+0x8e>
   112ed:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   112f1:	77 75                	ja     11368 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   112f3:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   112f7:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   112fb:	77 31                	ja     1132e <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   112fd:	6a 21                	push   $0x21
   112ff:	e8 bd f8 ff ff       	call   10bc1 <inb>
   11304:	83 c4 04             	add    $0x4,%esp
   11307:	89 c3                	mov    %eax,%ebx
   11309:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1130d:	ba 01 00 00 00       	mov    $0x1,%edx
   11312:	89 c1                	mov    %eax,%ecx
   11314:	d3 e2                	shl    %cl,%edx
   11316:	89 d0                	mov    %edx,%eax
   11318:	09 d8                	or     %ebx,%eax
   1131a:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1131d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11321:	50                   	push   %eax
   11322:	6a 21                	push   $0x21
   11324:	e8 b5 f8 ff ff       	call   10bde <outb>
   11329:	83 c4 08             	add    $0x8,%esp
   1132c:	eb 3b                	jmp    11369 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1132e:	68 a1 00 00 00       	push   $0xa1
   11333:	e8 89 f8 ff ff       	call   10bc1 <inb>
   11338:	83 c4 04             	add    $0x4,%esp
   1133b:	89 c3                	mov    %eax,%ebx
   1133d:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11341:	83 e8 08             	sub    $0x8,%eax
   11344:	ba 01 00 00 00       	mov    $0x1,%edx
   11349:	89 c1                	mov    %eax,%ecx
   1134b:	d3 e2                	shl    %cl,%edx
   1134d:	89 d0                	mov    %edx,%eax
   1134f:	09 d8                	or     %ebx,%eax
   11351:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11354:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11358:	50                   	push   %eax
   11359:	68 a1 00 00 00       	push   $0xa1
   1135e:	e8 7b f8 ff ff       	call   10bde <outb>
   11363:	83 c4 08             	add    $0x8,%esp
   11366:	eb 01                	jmp    11369 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11368:	90                   	nop
  }
  
}
   11369:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1136c:	c9                   	leave  
   1136d:	c3                   	ret    

0001136e <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1136e:	55                   	push   %ebp
   1136f:	89 e5                	mov    %esp,%ebp
  cli();
   11371:	e8 36 f8 ff ff       	call   10bac <cli>
}
   11376:	90                   	nop
   11377:	5d                   	pop    %ebp
   11378:	c3                   	ret    

00011379 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11379:	55                   	push   %ebp
   1137a:	89 e5                	mov    %esp,%ebp
  sti();
   1137c:	e8 32 f8 ff ff       	call   10bb3 <sti>
}
   11381:	90                   	nop
   11382:	5d                   	pop    %ebp
   11383:	c3                   	ret    

00011384 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11384:	55                   	push   %ebp
   11385:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11387:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   1138b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1138f:	78 29                	js     113ba <pic_send_eoi+0x36>
   11391:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11395:	7f 23                	jg     113ba <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11397:	6a 20                	push   $0x20
   11399:	6a 20                	push   $0x20
   1139b:	e8 3e f8 ff ff       	call   10bde <outb>
   113a0:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   113a3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   113a7:	7e 12                	jle    113bb <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   113a9:	6a 20                	push   $0x20
   113ab:	68 a0 00 00 00       	push   $0xa0
   113b0:	e8 29 f8 ff ff       	call   10bde <outb>
   113b5:	83 c4 08             	add    $0x8,%esp
   113b8:	eb 01                	jmp    113bb <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   113ba:	90                   	nop
  }

}
   113bb:	c9                   	leave  
   113bc:	c3                   	ret    

000113bd <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   113bd:	55                   	push   %ebp
   113be:	89 e5                	mov    %esp,%ebp
   113c0:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   113c3:	e8 5f f8 ff ff       	call   10c27 <read_eflags>
   113c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   113cb:	e8 9e ff ff ff       	call   1136e <idt_disable_global>
  return state;;
   113d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   113d3:	c9                   	leave  
   113d4:	c3                   	ret    

000113d5 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   113d5:	55                   	push   %ebp
   113d6:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   113d8:	ff 75 08             	push   0x8(%ebp)
   113db:	e8 57 f8 ff ff       	call   10c37 <write_eflags>
   113e0:	83 c4 04             	add    $0x4,%esp
}
   113e3:	90                   	nop
   113e4:	c9                   	leave  
   113e5:	c3                   	ret    

000113e6 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   113e6:	55                   	push   %ebp
   113e7:	89 e5                	mov    %esp,%ebp
   113e9:	83 ec 08             	sub    $0x8,%esp
   113ec:	8b 45 08             	mov    0x8(%ebp),%eax
   113ef:	8b 55 0c             	mov    0xc(%ebp),%edx
   113f2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   113f6:	89 d0                	mov    %edx,%eax
   113f8:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   113fb:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113ff:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11403:	ee                   	out    %al,(%dx)
}
   11404:	90                   	nop
   11405:	c9                   	leave  
   11406:	c3                   	ret    

00011407 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11407:	55                   	push   %ebp
   11408:	89 e5                	mov    %esp,%ebp
   1140a:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1140d:	a1 a0 37 02 00       	mov    0x237a0,%eax
   11412:	83 c0 01             	add    $0x1,%eax
   11415:	a3 a0 37 02 00       	mov    %eax,0x237a0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   1141a:	83 ec 0c             	sub    $0xc,%esp
   1141d:	6a 20                	push   $0x20
   1141f:	e8 60 ff ff ff       	call   11384 <pic_send_eoi>
   11424:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11427:	e8 26 f4 ff ff       	call   10852 <task_slice_end>
}
   1142c:	90                   	nop
   1142d:	c9                   	leave  
   1142e:	c3                   	ret    

0001142f <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1142f:	55                   	push   %ebp
   11430:	89 e5                	mov    %esp,%ebp
   11432:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11435:	6a 36                	push   $0x36
   11437:	6a 43                	push   $0x43
   11439:	e8 a8 ff ff ff       	call   113e6 <outb>
   1143e:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11441:	66 c7 45 f6 a9 04    	movw   $0x4a9,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11447:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1144b:	0f b6 c0             	movzbl %al,%eax
   1144e:	50                   	push   %eax
   1144f:	6a 40                	push   $0x40
   11451:	e8 90 ff ff ff       	call   113e6 <outb>
   11456:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11459:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1145d:	66 c1 e8 08          	shr    $0x8,%ax
   11461:	0f b6 c0             	movzbl %al,%eax
   11464:	50                   	push   %eax
   11465:	6a 40                	push   $0x40
   11467:	e8 7a ff ff ff       	call   113e6 <outb>
   1146c:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1146f:	83 ec 08             	sub    $0x8,%esp
   11472:	68 7b 02 01 00       	push   $0x1027b
   11477:	6a 20                	push   $0x20
   11479:	e8 7e fb ff ff       	call   10ffc <idt_install>
   1147e:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11481:	83 ec 0c             	sub    $0xc,%esp
   11484:	6a 20                	push   $0x20
   11486:	e8 b7 fd ff ff       	call   11242 <idt_enable>
   1148b:	83 c4 10             	add    $0x10,%esp

}
   1148e:	90                   	nop
   1148f:	c9                   	leave  
   11490:	c3                   	ret    

00011491 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   11491:	55                   	push   %ebp
   11492:	89 e5                	mov    %esp,%ebp
   11494:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11497:	c7 05 a0 37 02 00 00 	movl   $0x0,0x237a0
   1149e:	00 00 00 
    init_pit();
   114a1:	e8 89 ff ff ff       	call   1142f <init_pit>
   114a6:	90                   	nop
   114a7:	c9                   	leave  
   114a8:	c3                   	ret    

000114a9 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   114a9:	55                   	push   %ebp
   114aa:	89 e5                	mov    %esp,%ebp
   114ac:	fb                   	sti    
   114ad:	90                   	nop
   114ae:	5d                   	pop    %ebp
   114af:	c3                   	ret    

000114b0 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   114b0:	55                   	push   %ebp
   114b1:	89 e5                	mov    %esp,%ebp
   114b3:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   114b6:	8b 45 08             	mov    0x8(%ebp),%eax
   114b9:	8b 40 50             	mov    0x50(%eax),%eax
   114bc:	85 c0                	test   %eax,%eax
   114be:	75 19                	jne    114d9 <kernel_init+0x29>
   114c0:	68 50 28 01 00       	push   $0x12850
   114c5:	68 24 29 01 00       	push   $0x12924
   114ca:	6a 20                	push   $0x20
   114cc:	68 74 28 01 00       	push   $0x12874
   114d1:	e8 af 04 00 00       	call   11985 <pannic>
   114d6:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   114d9:	e8 a8 0d 00 00       	call   12286 <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   114de:	e8 15 f6 ff ff       	call   10af8 <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   114e3:	e8 e7 fb ff ff       	call   110cf <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   114e8:	e8 a4 ff ff ff       	call   11491 <time_init>

    //6.初始化任务管理器
    task_manager_init();
   114ed:	e8 40 f1 ff ff       	call   10632 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   114f2:	90                   	nop
   114f3:	c9                   	leave  
   114f4:	c3                   	ret    

000114f5 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 

char str[10] = {"wwwwwwww"};

void test_task_1(void) {
   114f5:	55                   	push   %ebp
   114f6:	89 e5                	mov    %esp,%ebp
   114f8:	83 ec 08             	sub    $0x8,%esp

    for (;;) {
        kernel_strcpy(str, "hhhhhhhhh");
   114fb:	83 ec 08             	sub    $0x8,%esp
   114fe:	68 a9 28 01 00       	push   $0x128a9
   11503:	68 f8 2b 01 00       	push   $0x12bf8
   11508:	e8 ae 04 00 00       	call   119bb <kernel_strcpy>
   1150d:	83 c4 10             	add    $0x10,%esp
        log_printf("task_1: %s", str);
   11510:	83 ec 08             	sub    $0x8,%esp
   11513:	68 f8 2b 01 00       	push   $0x12bf8
   11518:	68 b3 28 01 00       	push   $0x128b3
   1151d:	e8 d9 0d 00 00       	call   122fb <log_printf>
   11522:	83 c4 10             	add    $0x10,%esp
        kernel_strcpy(str, "hhhhhhhhh");
   11525:	eb d4                	jmp    114fb <test_task_1+0x6>

00011527 <test_task_2>:
        // sys_sleep(100);
     }
}

void test_task_2(void) {
   11527:	55                   	push   %ebp
   11528:	89 e5                	mov    %esp,%ebp
   1152a:	83 ec 08             	sub    $0x8,%esp


    for (;;) {
        kernel_strcpy(str, "aaaaaaaaa");
   1152d:	83 ec 08             	sub    $0x8,%esp
   11530:	68 be 28 01 00       	push   $0x128be
   11535:	68 f8 2b 01 00       	push   $0x12bf8
   1153a:	e8 7c 04 00 00       	call   119bb <kernel_strcpy>
   1153f:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %s", str);
   11542:	83 ec 08             	sub    $0x8,%esp
   11545:	68 f8 2b 01 00       	push   $0x12bf8
   1154a:	68 c8 28 01 00       	push   $0x128c8
   1154f:	e8 a7 0d 00 00       	call   122fb <log_printf>
   11554:	83 c4 10             	add    $0x10,%esp
        kernel_strcpy(str, "aaaaaaaaa");
   11557:	eb d4                	jmp    1152d <test_task_2+0x6>

00011559 <init_main>:
     }
}



void init_main(void) {
   11559:	55                   	push   %ebp
   1155a:	89 e5                	mov    %esp,%ebp
   1155c:	83 ec 08             	sub    $0x8,%esp


    list_test();
   1155f:	e8 3f 01 00 00       	call   116a3 <list_test>

    log_printf("Kernel is running......");
   11564:	83 ec 0c             	sub    $0xc,%esp
   11567:	68 d3 28 01 00       	push   $0x128d3
   1156c:	e8 8a 0d 00 00       	call   122fb <log_printf>
   11571:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11574:	83 ec 04             	sub    $0x4,%esp
   11577:	68 eb 28 01 00       	push   $0x128eb
   1157c:	68 f1 28 01 00       	push   $0x128f1
   11581:	68 f6 28 01 00       	push   $0x128f6
   11586:	e8 70 0d 00 00       	call   122fb <log_printf>
   1158b:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   1158e:	e8 1a f1 ff ff       	call   106ad <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11593:	ba 40 49 02 00       	mov    $0x24940,%edx
   11598:	b8 f5 14 01 00       	mov    $0x114f5,%eax
   1159d:	52                   	push   %edx
   1159e:	50                   	push   %eax
   1159f:	68 0c 29 01 00       	push   $0x1290c
   115a4:	68 c0 37 02 00       	push   $0x237c0
   115a9:	e8 a8 ef ff ff       	call   10556 <task_init>
   115ae:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   115b1:	ba 40 59 02 00       	mov    $0x25940,%edx
   115b6:	b8 27 15 01 00       	mov    $0x11527,%eax
   115bb:	52                   	push   %edx
   115bc:	50                   	push   %eax
   115bd:	68 18 29 01 00       	push   $0x12918
   115c2:	68 80 38 02 00       	push   $0x23880
   115c7:	e8 8a ef ff ff       	call   10556 <task_init>
   115cc:	83 c4 10             	add    $0x10,%esp


    sti();
   115cf:	e8 d5 fe ff ff       	call   114a9 <sti>

    for (;;) {
   115d4:	eb fe                	jmp    115d4 <init_main+0x7b>

000115d6 <list_init>:
static inline void list_init(list_t *list) {
   115d6:	55                   	push   %ebp
   115d7:	89 e5                	mov    %esp,%ebp
   115d9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   115dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115e0:	75 19                	jne    115fb <list_init+0x25>
   115e2:	68 30 29 01 00       	push   $0x12930
   115e7:	68 34 2a 01 00       	push   $0x12a34
   115ec:	6a 31                	push   $0x31
   115ee:	68 44 29 01 00       	push   $0x12944
   115f3:	e8 8d 03 00 00       	call   11985 <pannic>
   115f8:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   115fb:	8b 45 08             	mov    0x8(%ebp),%eax
   115fe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11605:	8b 45 08             	mov    0x8(%ebp),%eax
   11608:	8b 50 04             	mov    0x4(%eax),%edx
   1160b:	8b 45 08             	mov    0x8(%ebp),%eax
   1160e:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11610:	8b 45 08             	mov    0x8(%ebp),%eax
   11613:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1161a:	90                   	nop
   1161b:	c9                   	leave  
   1161c:	c3                   	ret    

0001161d <list_get_size>:
static inline int list_get_size(list_t *list) {
   1161d:	55                   	push   %ebp
   1161e:	89 e5                	mov    %esp,%ebp
   11620:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11623:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11627:	75 19                	jne    11642 <list_get_size+0x25>
   11629:	68 30 29 01 00       	push   $0x12930
   1162e:	68 40 2a 01 00       	push   $0x12a40
   11633:	6a 3e                	push   $0x3e
   11635:	68 44 29 01 00       	push   $0x12944
   1163a:	e8 46 03 00 00       	call   11985 <pannic>
   1163f:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11642:	8b 45 08             	mov    0x8(%ebp),%eax
   11645:	8b 40 08             	mov    0x8(%eax),%eax
}
   11648:	c9                   	leave  
   11649:	c3                   	ret    

0001164a <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   1164a:	55                   	push   %ebp
   1164b:	89 e5                	mov    %esp,%ebp
   1164d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11650:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11654:	75 19                	jne    1166f <list_get_first+0x25>
   11656:	68 30 29 01 00       	push   $0x12930
   1165b:	68 60 2a 01 00       	push   $0x12a60
   11660:	6a 44                	push   $0x44
   11662:	68 44 29 01 00       	push   $0x12944
   11667:	e8 19 03 00 00       	call   11985 <pannic>
   1166c:	83 c4 10             	add    $0x10,%esp
    return list->first;
   1166f:	8b 45 08             	mov    0x8(%ebp),%eax
   11672:	8b 00                	mov    (%eax),%eax
}
   11674:	c9                   	leave  
   11675:	c3                   	ret    

00011676 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11676:	55                   	push   %ebp
   11677:	89 e5                	mov    %esp,%ebp
   11679:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1167c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11680:	75 19                	jne    1169b <list_get_last+0x25>
   11682:	68 30 29 01 00       	push   $0x12930
   11687:	68 50 2a 01 00       	push   $0x12a50
   1168c:	6a 4a                	push   $0x4a
   1168e:	68 44 29 01 00       	push   $0x12944
   11693:	e8 ed 02 00 00       	call   11985 <pannic>
   11698:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1169b:	8b 45 08             	mov    0x8(%ebp),%eax
   1169e:	8b 40 04             	mov    0x4(%eax),%eax
}
   116a1:	c9                   	leave  
   116a2:	c3                   	ret    

000116a3 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   116a3:	55                   	push   %ebp
   116a4:	89 e5                	mov    %esp,%ebp
   116a6:	56                   	push   %esi
   116a7:	53                   	push   %ebx
   116a8:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   116ab:	83 ec 0c             	sub    $0xc,%esp
   116ae:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116b1:	50                   	push   %eax
   116b2:	e8 1f ff ff ff       	call   115d6 <list_init>
   116b7:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   116ba:	83 ec 0c             	sub    $0xc,%esp
   116bd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116c0:	50                   	push   %eax
   116c1:	e8 57 ff ff ff       	call   1161d <list_get_size>
   116c6:	83 c4 10             	add    $0x10,%esp
   116c9:	89 c6                	mov    %eax,%esi
   116cb:	83 ec 0c             	sub    $0xc,%esp
   116ce:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116d1:	50                   	push   %eax
   116d2:	e8 9f ff ff ff       	call   11676 <list_get_last>
   116d7:	83 c4 10             	add    $0x10,%esp
   116da:	89 c3                	mov    %eax,%ebx
   116dc:	83 ec 0c             	sub    $0xc,%esp
   116df:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116e2:	50                   	push   %eax
   116e3:	e8 62 ff ff ff       	call   1164a <list_get_first>
   116e8:	83 c4 10             	add    $0x10,%esp
   116eb:	56                   	push   %esi
   116ec:	53                   	push   %ebx
   116ed:	50                   	push   %eax
   116ee:	68 84 29 01 00       	push   $0x12984
   116f3:	e8 03 0c 00 00       	call   122fb <log_printf>
   116f8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   116fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11702:	eb 3f                	jmp    11743 <list_test+0xa0>
        list_node_t *node = nodes + i;
   11704:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11707:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1170e:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11711:	01 d0                	add    %edx,%eax
   11713:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11716:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11719:	83 ec 04             	sub    $0x4,%esp
   1171c:	50                   	push   %eax
   1171d:	ff 75 f4             	push   -0xc(%ebp)
   11720:	68 ac 29 01 00       	push   $0x129ac
   11725:	e8 d1 0b 00 00       	call   122fb <log_printf>
   1172a:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   1172d:	83 ec 08             	sub    $0x8,%esp
   11730:	ff 75 d0             	push   -0x30(%ebp)
   11733:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11736:	50                   	push   %eax
   11737:	e8 c3 07 00 00       	call   11eff <list_insert_first>
   1173c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1173f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11743:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11747:	7e bb                	jle    11704 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11749:	83 ec 0c             	sub    $0xc,%esp
   1174c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1174f:	50                   	push   %eax
   11750:	e8 c8 fe ff ff       	call   1161d <list_get_size>
   11755:	83 c4 10             	add    $0x10,%esp
   11758:	89 c6                	mov    %eax,%esi
   1175a:	83 ec 0c             	sub    $0xc,%esp
   1175d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11760:	50                   	push   %eax
   11761:	e8 10 ff ff ff       	call   11676 <list_get_last>
   11766:	83 c4 10             	add    $0x10,%esp
   11769:	89 c3                	mov    %eax,%ebx
   1176b:	83 ec 0c             	sub    $0xc,%esp
   1176e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11771:	50                   	push   %eax
   11772:	e8 d3 fe ff ff       	call   1164a <list_get_first>
   11777:	83 c4 10             	add    $0x10,%esp
   1177a:	56                   	push   %esi
   1177b:	53                   	push   %ebx
   1177c:	50                   	push   %eax
   1177d:	68 84 29 01 00       	push   $0x12984
   11782:	e8 74 0b 00 00       	call   122fb <log_printf>
   11787:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   1178a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11791:	eb 2d                	jmp    117c0 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11793:	83 ec 0c             	sub    $0xc,%esp
   11796:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11799:	50                   	push   %eax
   1179a:	e8 7a 08 00 00       	call   12019 <list_remove_first>
   1179f:	83 c4 10             	add    $0x10,%esp
   117a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   117a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	50                   	push   %eax
   117ac:	ff 75 f0             	push   -0x10(%ebp)
   117af:	68 cb 29 01 00       	push   $0x129cb
   117b4:	e8 42 0b 00 00       	call   122fb <log_printf>
   117b9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   117bc:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   117c0:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   117c4:	7e cd                	jle    11793 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   117c6:	83 ec 0c             	sub    $0xc,%esp
   117c9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   117cc:	50                   	push   %eax
   117cd:	e8 4b fe ff ff       	call   1161d <list_get_size>
   117d2:	83 c4 10             	add    $0x10,%esp
   117d5:	89 c6                	mov    %eax,%esi
   117d7:	83 ec 0c             	sub    $0xc,%esp
   117da:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   117dd:	50                   	push   %eax
   117de:	e8 93 fe ff ff       	call   11676 <list_get_last>
   117e3:	83 c4 10             	add    $0x10,%esp
   117e6:	89 c3                	mov    %eax,%ebx
   117e8:	83 ec 0c             	sub    $0xc,%esp
   117eb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   117ee:	50                   	push   %eax
   117ef:	e8 56 fe ff ff       	call   1164a <list_get_first>
   117f4:	83 c4 10             	add    $0x10,%esp
   117f7:	56                   	push   %esi
   117f8:	53                   	push   %ebx
   117f9:	50                   	push   %eax
   117fa:	68 84 29 01 00       	push   $0x12984
   117ff:	e8 f7 0a 00 00       	call   122fb <log_printf>
   11804:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11807:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1180e:	eb 3f                	jmp    1184f <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11810:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11813:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1181a:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1181d:	01 d0                	add    %edx,%eax
   1181f:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11822:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11825:	83 ec 04             	sub    $0x4,%esp
   11828:	50                   	push   %eax
   11829:	ff 75 ec             	push   -0x14(%ebp)
   1182c:	68 e2 29 01 00       	push   $0x129e2
   11831:	e8 c5 0a 00 00       	call   122fb <log_printf>
   11836:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11839:	83 ec 08             	sub    $0x8,%esp
   1183c:	ff 75 d8             	push   -0x28(%ebp)
   1183f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11842:	50                   	push   %eax
   11843:	e8 42 07 00 00       	call   11f8a <list_insert_last>
   11848:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1184b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1184f:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11853:	7e bb                	jle    11810 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11855:	83 ec 0c             	sub    $0xc,%esp
   11858:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1185b:	50                   	push   %eax
   1185c:	e8 bc fd ff ff       	call   1161d <list_get_size>
   11861:	83 c4 10             	add    $0x10,%esp
   11864:	89 c6                	mov    %eax,%esi
   11866:	83 ec 0c             	sub    $0xc,%esp
   11869:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1186c:	50                   	push   %eax
   1186d:	e8 04 fe ff ff       	call   11676 <list_get_last>
   11872:	83 c4 10             	add    $0x10,%esp
   11875:	89 c3                	mov    %eax,%ebx
   11877:	83 ec 0c             	sub    $0xc,%esp
   1187a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1187d:	50                   	push   %eax
   1187e:	e8 c7 fd ff ff       	call   1164a <list_get_first>
   11883:	83 c4 10             	add    $0x10,%esp
   11886:	56                   	push   %esi
   11887:	53                   	push   %ebx
   11888:	50                   	push   %eax
   11889:	68 84 29 01 00       	push   $0x12984
   1188e:	e8 68 0a 00 00       	call   122fb <log_printf>
   11893:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11896:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1189d:	eb 2d                	jmp    118cc <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   118a5:	50                   	push   %eax
   118a6:	e8 1f 08 00 00       	call   120ca <list_remove_last>
   118ab:	83 c4 10             	add    $0x10,%esp
   118ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   118b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
   118b4:	83 ec 04             	sub    $0x4,%esp
   118b7:	50                   	push   %eax
   118b8:	ff 75 e8             	push   -0x18(%ebp)
   118bb:	68 00 2a 01 00       	push   $0x12a00
   118c0:	e8 36 0a 00 00       	call   122fb <log_printf>
   118c5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   118c8:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   118cc:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   118d0:	7e cd                	jle    1189f <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   118d2:	83 ec 0c             	sub    $0xc,%esp
   118d5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   118d8:	50                   	push   %eax
   118d9:	e8 3f fd ff ff       	call   1161d <list_get_size>
   118de:	83 c4 10             	add    $0x10,%esp
   118e1:	89 c6                	mov    %eax,%esi
   118e3:	83 ec 0c             	sub    $0xc,%esp
   118e6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   118e9:	50                   	push   %eax
   118ea:	e8 87 fd ff ff       	call   11676 <list_get_last>
   118ef:	83 c4 10             	add    $0x10,%esp
   118f2:	89 c3                	mov    %eax,%ebx
   118f4:	83 ec 0c             	sub    $0xc,%esp
   118f7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   118fa:	50                   	push   %eax
   118fb:	e8 4a fd ff ff       	call   1164a <list_get_first>
   11900:	83 c4 10             	add    $0x10,%esp
   11903:	56                   	push   %esi
   11904:	53                   	push   %ebx
   11905:	50                   	push   %eax
   11906:	68 84 29 01 00       	push   $0x12984
   1190b:	e8 eb 09 00 00       	call   122fb <log_printf>
   11910:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   11913:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   1191a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   11921:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   11928:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   1192f:	8d 45 90             	lea    -0x70(%ebp),%eax
   11932:	83 c0 04             	add    $0x4,%eax
   11935:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   11938:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1193c:	74 08                	je     11946 <list_test+0x2a3>
   1193e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11941:	83 e8 04             	sub    $0x4,%eax
   11944:	eb 05                	jmp    1194b <list_test+0x2a8>
   11946:	b8 00 00 00 00       	mov    $0x0,%eax
   1194b:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   1194e:	8d 45 90             	lea    -0x70(%ebp),%eax
   11951:	83 ec 08             	sub    $0x8,%esp
   11954:	50                   	push   %eax
   11955:	68 16 2a 01 00       	push   $0x12a16
   1195a:	e8 9c 09 00 00       	call   122fb <log_printf>
   1195f:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   11962:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11965:	83 ec 08             	sub    $0x8,%esp
   11968:	50                   	push   %eax
   11969:	68 24 2a 01 00       	push   $0x12a24
   1196e:	e8 88 09 00 00       	call   122fb <log_printf>
   11973:	83 c4 10             	add    $0x10,%esp

 }
   11976:	90                   	nop
   11977:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1197a:	5b                   	pop    %ebx
   1197b:	5e                   	pop    %esi
   1197c:	5d                   	pop    %ebp
   1197d:	c3                   	ret    

0001197e <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1197e:	55                   	push   %ebp
   1197f:	89 e5                	mov    %esp,%ebp
   11981:	f4                   	hlt    
   11982:	90                   	nop
   11983:	5d                   	pop    %ebp
   11984:	c3                   	ret    

00011985 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   11985:	55                   	push   %ebp
   11986:	89 e5                	mov    %esp,%ebp
   11988:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   1198b:	83 ec 08             	sub    $0x8,%esp
   1198e:	ff 75 14             	push   0x14(%ebp)
   11991:	68 6f 2a 01 00       	push   $0x12a6f
   11996:	e8 60 09 00 00       	call   122fb <log_printf>
   1199b:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   1199e:	ff 75 10             	push   0x10(%ebp)
   119a1:	ff 75 0c             	push   0xc(%ebp)
   119a4:	ff 75 08             	push   0x8(%ebp)
   119a7:	68 80 2a 01 00       	push   $0x12a80
   119ac:	e8 4a 09 00 00       	call   122fb <log_printf>
   119b1:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   119b4:	e8 c5 ff ff ff       	call   1197e <hlt>
   119b9:	eb f9                	jmp    119b4 <pannic+0x2f>

000119bb <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   119bb:	55                   	push   %ebp
   119bc:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   119be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119c2:	74 3b                	je     119ff <kernel_strcpy+0x44>
   119c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   119c8:	74 35                	je     119ff <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   119ca:	eb 17                	jmp    119e3 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   119cc:	8b 55 0c             	mov    0xc(%ebp),%edx
   119cf:	8d 42 01             	lea    0x1(%edx),%eax
   119d2:	89 45 0c             	mov    %eax,0xc(%ebp)
   119d5:	8b 45 08             	mov    0x8(%ebp),%eax
   119d8:	8d 48 01             	lea    0x1(%eax),%ecx
   119db:	89 4d 08             	mov    %ecx,0x8(%ebp)
   119de:	0f b6 12             	movzbl (%edx),%edx
   119e1:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   119e3:	8b 45 08             	mov    0x8(%ebp),%eax
   119e6:	0f b6 00             	movzbl (%eax),%eax
   119e9:	84 c0                	test   %al,%al
   119eb:	74 0a                	je     119f7 <kernel_strcpy+0x3c>
   119ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   119f0:	0f b6 00             	movzbl (%eax),%eax
   119f3:	84 c0                	test   %al,%al
   119f5:	75 d5                	jne    119cc <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   119f7:	8b 45 08             	mov    0x8(%ebp),%eax
   119fa:	c6 00 00             	movb   $0x0,(%eax)
   119fd:	eb 01                	jmp    11a00 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   119ff:	90                   	nop
    
}
   11a00:	5d                   	pop    %ebp
   11a01:	c3                   	ret    

00011a02 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   11a02:	55                   	push   %ebp
   11a03:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   11a05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a09:	74 45                	je     11a50 <kernel_strncpy+0x4e>
   11a0b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a0f:	74 3f                	je     11a50 <kernel_strncpy+0x4e>
   11a11:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11a15:	74 39                	je     11a50 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   11a17:	eb 17                	jmp    11a30 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   11a19:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a1c:	8d 42 01             	lea    0x1(%edx),%eax
   11a1f:	89 45 0c             	mov    %eax,0xc(%ebp)
   11a22:	8b 45 08             	mov    0x8(%ebp),%eax
   11a25:	8d 48 01             	lea    0x1(%eax),%ecx
   11a28:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11a2b:	0f b6 12             	movzbl (%edx),%edx
   11a2e:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   11a30:	8b 45 10             	mov    0x10(%ebp),%eax
   11a33:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a36:	89 55 10             	mov    %edx,0x10(%ebp)
   11a39:	83 f8 01             	cmp    $0x1,%eax
   11a3c:	7e 0a                	jle    11a48 <kernel_strncpy+0x46>
   11a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a41:	0f b6 00             	movzbl (%eax),%eax
   11a44:	84 c0                	test   %al,%al
   11a46:	75 d1                	jne    11a19 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   11a48:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4b:	c6 00 00             	movb   $0x0,(%eax)
   11a4e:	eb 01                	jmp    11a51 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11a50:	90                   	nop
}
   11a51:	5d                   	pop    %ebp
   11a52:	c3                   	ret    

00011a53 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   11a53:	55                   	push   %ebp
   11a54:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   11a56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a5a:	74 06                	je     11a62 <kernel_strncmp+0xf>
   11a5c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a60:	75 0f                	jne    11a71 <kernel_strncmp+0x1e>
   11a62:	b8 00 00 00 00       	mov    $0x0,%eax
   11a67:	eb 52                	jmp    11abb <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   11a69:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11a6d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11a71:	8b 45 08             	mov    0x8(%ebp),%eax
   11a74:	0f b6 00             	movzbl (%eax),%eax
   11a77:	84 c0                	test   %al,%al
   11a79:	74 24                	je     11a9f <kernel_strncmp+0x4c>
   11a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a7e:	0f b6 00             	movzbl (%eax),%eax
   11a81:	84 c0                	test   %al,%al
   11a83:	74 1a                	je     11a9f <kernel_strncmp+0x4c>
   11a85:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11a89:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11a8d:	74 10                	je     11a9f <kernel_strncmp+0x4c>
   11a8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a92:	0f b6 10             	movzbl (%eax),%edx
   11a95:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a98:	0f b6 00             	movzbl (%eax),%eax
   11a9b:	38 c2                	cmp    %al,%dl
   11a9d:	74 ca                	je     11a69 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11a9f:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa2:	0f b6 10             	movzbl (%eax),%edx
   11aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aa8:	0f b6 00             	movzbl (%eax),%eax
   11aab:	38 c2                	cmp    %al,%dl
   11aad:	7e 07                	jle    11ab6 <kernel_strncmp+0x63>
   11aaf:	b8 01 00 00 00       	mov    $0x1,%eax
   11ab4:	eb 05                	jmp    11abb <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   11ab6:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   11abb:	5d                   	pop    %ebp
   11abc:	c3                   	ret    

00011abd <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11abd:	55                   	push   %ebp
   11abe:	89 e5                	mov    %esp,%ebp
   11ac0:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   11ac3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ac7:	75 07                	jne    11ad0 <kernel_strlen+0x13>
   11ac9:	b8 00 00 00 00       	mov    $0x0,%eax
   11ace:	eb 20                	jmp    11af0 <kernel_strlen+0x33>

    int len = 0;
   11ad0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   11ad7:	eb 04                	jmp    11add <kernel_strlen+0x20>
   11ad9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11add:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae0:	8d 50 01             	lea    0x1(%eax),%edx
   11ae3:	89 55 08             	mov    %edx,0x8(%ebp)
   11ae6:	0f b6 00             	movzbl (%eax),%eax
   11ae9:	84 c0                	test   %al,%al
   11aeb:	75 ec                	jne    11ad9 <kernel_strlen+0x1c>

    return len;
   11aed:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   11af0:	c9                   	leave  
   11af1:	c3                   	ret    

00011af2 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   11af2:	55                   	push   %ebp
   11af3:	89 e5                	mov    %esp,%ebp
   11af5:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   11af8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11afc:	74 40                	je     11b3e <kernel_memcpy+0x4c>
   11afe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b02:	74 3a                	je     11b3e <kernel_memcpy+0x4c>
   11b04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b08:	74 34                	je     11b3e <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   11b0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   11b10:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b13:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   11b16:	eb 17                	jmp    11b2f <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   11b18:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11b1b:	8d 42 01             	lea    0x1(%edx),%eax
   11b1e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11b21:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b24:	8d 48 01             	lea    0x1(%eax),%ecx
   11b27:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11b2a:	0f b6 12             	movzbl (%edx),%edx
   11b2d:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11b2f:	8b 45 10             	mov    0x10(%ebp),%eax
   11b32:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b35:	89 55 10             	mov    %edx,0x10(%ebp)
   11b38:	85 c0                	test   %eax,%eax
   11b3a:	75 dc                	jne    11b18 <kernel_memcpy+0x26>
   11b3c:	eb 01                	jmp    11b3f <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   11b3e:	90                   	nop
    }
    
}
   11b3f:	c9                   	leave  
   11b40:	c3                   	ret    

00011b41 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   11b41:	55                   	push   %ebp
   11b42:	89 e5                	mov    %esp,%ebp
   11b44:	83 ec 14             	sub    $0x14,%esp
   11b47:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b4a:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11b4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b51:	74 2c                	je     11b7f <kernel_memset+0x3e>
   11b53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b57:	74 26                	je     11b7f <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   11b59:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   11b5f:	eb 0f                	jmp    11b70 <kernel_memset+0x2f>
        *(d++) = v;
   11b61:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b64:	8d 50 01             	lea    0x1(%eax),%edx
   11b67:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b6a:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11b6e:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11b70:	8b 45 10             	mov    0x10(%ebp),%eax
   11b73:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b76:	89 55 10             	mov    %edx,0x10(%ebp)
   11b79:	85 c0                	test   %eax,%eax
   11b7b:	75 e4                	jne    11b61 <kernel_memset+0x20>
   11b7d:	eb 01                	jmp    11b80 <kernel_memset+0x3f>
    if (!dest || !size) return;
   11b7f:	90                   	nop
    }
    
}
   11b80:	c9                   	leave  
   11b81:	c3                   	ret    

00011b82 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   11b82:	55                   	push   %ebp
   11b83:	89 e5                	mov    %esp,%ebp
   11b85:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   11b88:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b8c:	74 0c                	je     11b9a <kernel_memcmp+0x18>
   11b8e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b92:	74 06                	je     11b9a <kernel_memcmp+0x18>
   11b94:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b98:	75 07                	jne    11ba1 <kernel_memcmp+0x1f>
   11b9a:	b8 00 00 00 00       	mov    $0x0,%eax
   11b9f:	eb 63                	jmp    11c04 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   11ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   11ba7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11baa:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11bad:	eb 08                	jmp    11bb7 <kernel_memcmp+0x35>
        d1++;
   11baf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   11bb3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   11bb7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11bbb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11bbf:	74 10                	je     11bd1 <kernel_memcmp+0x4f>
   11bc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bc4:	0f b6 10             	movzbl (%eax),%edx
   11bc7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bca:	0f b6 00             	movzbl (%eax),%eax
   11bcd:	38 c2                	cmp    %al,%dl
   11bcf:	74 de                	je     11baf <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   11bd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bd4:	0f b6 10             	movzbl (%eax),%edx
   11bd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bda:	0f b6 00             	movzbl (%eax),%eax
   11bdd:	38 c2                	cmp    %al,%dl
   11bdf:	76 07                	jbe    11be8 <kernel_memcmp+0x66>
   11be1:	b8 01 00 00 00       	mov    $0x1,%eax
   11be6:	eb 1c                	jmp    11c04 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   11be8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11beb:	0f b6 10             	movzbl (%eax),%edx
   11bee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bf1:	0f b6 00             	movzbl (%eax),%eax
   11bf4:	38 c2                	cmp    %al,%dl
   11bf6:	73 07                	jae    11bff <kernel_memcmp+0x7d>
   11bf8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bfd:	eb 05                	jmp    11c04 <kernel_memcmp+0x82>
    else return 0;
   11bff:	b8 00 00 00 00       	mov    $0x0,%eax

}
   11c04:	c9                   	leave  
   11c05:	c3                   	ret    

00011c06 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   11c06:	55                   	push   %ebp
   11c07:	89 e5                	mov    %esp,%ebp
   11c09:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11c0c:	8d 45 10             	lea    0x10(%ebp),%eax
   11c0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   11c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c15:	83 ec 04             	sub    $0x4,%esp
   11c18:	50                   	push   %eax
   11c19:	ff 75 0c             	push   0xc(%ebp)
   11c1c:	ff 75 08             	push   0x8(%ebp)
   11c1f:	e8 06 00 00 00       	call   11c2a <kernel_vsprintf>
   11c24:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11c27:	90                   	nop
   11c28:	c9                   	leave  
   11c29:	c3                   	ret    

00011c2a <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   11c2a:	55                   	push   %ebp
   11c2b:	89 e5                	mov    %esp,%ebp
   11c2d:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   11c30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   11c37:	8b 45 08             	mov    0x8(%ebp),%eax
   11c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11c3d:	e9 68 01 00 00       	jmp    11daa <kernel_vsprintf+0x180>
        switch (state) {
   11c42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11c46:	74 0b                	je     11c53 <kernel_vsprintf+0x29>
   11c48:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11c4c:	74 2b                	je     11c79 <kernel_vsprintf+0x4f>
   11c4e:	e9 56 01 00 00       	jmp    11da9 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   11c53:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   11c57:	75 0c                	jne    11c65 <kernel_vsprintf+0x3b>
   11c59:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11c60:	e9 45 01 00 00       	jmp    11daa <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   11c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c68:	8d 50 01             	lea    0x1(%eax),%edx
   11c6b:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11c6e:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11c72:	88 10                	mov    %dl,(%eax)
            break;
   11c74:	e9 31 01 00 00       	jmp    11daa <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   11c79:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11c7d:	75 47                	jne    11cc6 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11c7f:	8b 45 10             	mov    0x10(%ebp),%eax
   11c82:	8d 50 04             	lea    0x4(%eax),%edx
   11c85:	89 55 10             	mov    %edx,0x10(%ebp)
   11c88:	8b 00                	mov    (%eax),%eax
   11c8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11c8d:	ff 75 ec             	push   -0x14(%ebp)
   11c90:	e8 28 fe ff ff       	call   11abd <kernel_strlen>
   11c95:	83 c4 04             	add    $0x4,%esp
   11c98:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11c9b:	eb 17                	jmp    11cb4 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11c9d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11ca0:	8d 42 01             	lea    0x1(%edx),%eax
   11ca3:	89 45 ec             	mov    %eax,-0x14(%ebp)
   11ca6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ca9:	8d 48 01             	lea    0x1(%eax),%ecx
   11cac:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11caf:	0f b6 12             	movzbl (%edx),%edx
   11cb2:	88 10                	mov    %dl,(%eax)
                while (len--) {
   11cb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11cb7:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cba:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11cbd:	85 c0                	test   %eax,%eax
   11cbf:	75 dc                	jne    11c9d <kernel_vsprintf+0x73>
   11cc1:	e9 da 00 00 00       	jmp    11da0 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   11cc6:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   11cca:	75 37                	jne    11d03 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   11ccc:	8b 45 10             	mov    0x10(%ebp),%eax
   11ccf:	8d 50 04             	lea    0x4(%eax),%edx
   11cd2:	89 55 10             	mov    %edx,0x10(%ebp)
   11cd5:	8b 00                	mov    (%eax),%eax
   11cd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   11cda:	83 ec 04             	sub    $0x4,%esp
   11cdd:	6a 0a                	push   $0xa
   11cdf:	ff 75 d8             	push   -0x28(%ebp)
   11ce2:	ff 75 f0             	push   -0x10(%ebp)
   11ce5:	e8 dd 00 00 00       	call   11dc7 <kernel_itoa>
   11cea:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   11ced:	83 ec 0c             	sub    $0xc,%esp
   11cf0:	ff 75 f0             	push   -0x10(%ebp)
   11cf3:	e8 c5 fd ff ff       	call   11abd <kernel_strlen>
   11cf8:	83 c4 10             	add    $0x10,%esp
   11cfb:	01 45 f0             	add    %eax,-0x10(%ebp)
   11cfe:	e9 9d 00 00 00       	jmp    11da0 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   11d03:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   11d07:	74 06                	je     11d0f <kernel_vsprintf+0xe5>
   11d09:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   11d0d:	75 34                	jne    11d43 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   11d0f:	8b 45 10             	mov    0x10(%ebp),%eax
   11d12:	8d 50 04             	lea    0x4(%eax),%edx
   11d15:	89 55 10             	mov    %edx,0x10(%ebp)
   11d18:	8b 00                	mov    (%eax),%eax
   11d1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   11d1d:	83 ec 04             	sub    $0x4,%esp
   11d20:	6a 10                	push   $0x10
   11d22:	ff 75 dc             	push   -0x24(%ebp)
   11d25:	ff 75 f0             	push   -0x10(%ebp)
   11d28:	e8 9a 00 00 00       	call   11dc7 <kernel_itoa>
   11d2d:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11d30:	83 ec 0c             	sub    $0xc,%esp
   11d33:	ff 75 f0             	push   -0x10(%ebp)
   11d36:	e8 82 fd ff ff       	call   11abd <kernel_strlen>
   11d3b:	83 c4 10             	add    $0x10,%esp
   11d3e:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   11d41:	eb 5d                	jmp    11da0 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   11d43:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   11d47:	75 34                	jne    11d7d <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   11d49:	8b 45 10             	mov    0x10(%ebp),%eax
   11d4c:	8d 50 04             	lea    0x4(%eax),%edx
   11d4f:	89 55 10             	mov    %edx,0x10(%ebp)
   11d52:	8b 00                	mov    (%eax),%eax
   11d54:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   11d57:	83 ec 04             	sub    $0x4,%esp
   11d5a:	6a 02                	push   $0x2
   11d5c:	ff 75 e0             	push   -0x20(%ebp)
   11d5f:	ff 75 f0             	push   -0x10(%ebp)
   11d62:	e8 60 00 00 00       	call   11dc7 <kernel_itoa>
   11d67:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11d6a:	83 ec 0c             	sub    $0xc,%esp
   11d6d:	ff 75 f0             	push   -0x10(%ebp)
   11d70:	e8 48 fd ff ff       	call   11abd <kernel_strlen>
   11d75:	83 c4 10             	add    $0x10,%esp
   11d78:	01 45 f0             	add    %eax,-0x10(%ebp)
   11d7b:	eb 23                	jmp    11da0 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11d7d:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11d81:	75 1d                	jne    11da0 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   11d83:	8b 45 10             	mov    0x10(%ebp),%eax
   11d86:	8d 50 04             	lea    0x4(%eax),%edx
   11d89:	89 55 10             	mov    %edx,0x10(%ebp)
   11d8c:	8b 00                	mov    (%eax),%eax
   11d8e:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11d91:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d94:	8d 50 01             	lea    0x1(%eax),%edx
   11d97:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11d9a:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11d9e:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11da0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   11da7:	eb 01                	jmp    11daa <kernel_vsprintf+0x180>
        default:
            break;
   11da9:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   11daa:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dad:	8d 50 01             	lea    0x1(%eax),%edx
   11db0:	89 55 0c             	mov    %edx,0xc(%ebp)
   11db3:	0f b6 00             	movzbl (%eax),%eax
   11db6:	88 45 e7             	mov    %al,-0x19(%ebp)
   11db9:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11dbd:	0f 85 7f fe ff ff    	jne    11c42 <kernel_vsprintf+0x18>
        }
    }
    

}
   11dc3:	90                   	nop
   11dc4:	90                   	nop
   11dc5:	c9                   	leave  
   11dc6:	c3                   	ret    

00011dc7 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   11dc7:	55                   	push   %ebp
   11dc8:	89 e5                	mov    %esp,%ebp
   11dca:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11dd0:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd3:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   11dd6:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11dda:	74 1d                	je     11df9 <kernel_itoa+0x32>
   11ddc:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11de0:	74 17                	je     11df9 <kernel_itoa+0x32>
   11de2:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11de6:	74 11                	je     11df9 <kernel_itoa+0x32>
   11de8:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11dec:	74 0b                	je     11df9 <kernel_itoa+0x32>
        *buf = '\0';
   11dee:	8b 45 08             	mov    0x8(%ebp),%eax
   11df1:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11df4:	e9 a2 00 00 00       	jmp    11e9b <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   11df9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11dfd:	79 11                	jns    11e10 <kernel_itoa+0x49>
        *(p++) = '-';
   11dff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e02:	8d 50 01             	lea    0x1(%eax),%edx
   11e05:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e08:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   11e0b:	f7 5d 0c             	negl   0xc(%ebp)
   11e0e:	eb 1a                	jmp    11e2a <kernel_itoa+0x63>
    } else if (num == 0) {
   11e10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e14:	75 14                	jne    11e2a <kernel_itoa+0x63>
        *(p++) = '0';
   11e16:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e19:	8d 50 01             	lea    0x1(%eax),%edx
   11e1c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e1f:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   11e22:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e25:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11e28:	eb 71                	jmp    11e9b <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   11e2a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   11e31:	eb 2e                	jmp    11e61 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   11e33:	8b 0d 04 2c 01 00    	mov    0x12c04,%ecx
   11e39:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e3c:	99                   	cltd   
   11e3d:	f7 7d 10             	idivl  0x10(%ebp)
   11e40:	89 d0                	mov    %edx,%eax
   11e42:	01 c1                	add    %eax,%ecx
   11e44:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e47:	8d 50 01             	lea    0x1(%eax),%edx
   11e4a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e4d:	0f b6 11             	movzbl (%ecx),%edx
   11e50:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   11e57:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e5a:	99                   	cltd   
   11e5b:	f7 7d 10             	idivl  0x10(%ebp)
   11e5e:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11e61:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e65:	7f cc                	jg     11e33 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   11e67:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e6a:	83 e8 01             	sub    $0x1,%eax
   11e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11e70:	eb 1d                	jmp    11e8f <kernel_itoa+0xc8>
            *(p++) = arr[i];
   11e72:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e75:	8d 50 01             	lea    0x1(%eax),%edx
   11e78:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e7b:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11e81:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e84:	01 ca                	add    %ecx,%edx
   11e86:	0f b6 12             	movzbl (%edx),%edx
   11e89:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   11e8b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e93:	79 dd                	jns    11e72 <kernel_itoa+0xab>
    }
    *p = '\0';
   11e95:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e98:	c6 00 00             	movb   $0x0,(%eax)
   11e9b:	c9                   	leave  
   11e9c:	c3                   	ret    

00011e9d <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11e9d:	55                   	push   %ebp
   11e9e:	89 e5                	mov    %esp,%ebp
   11ea0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ea3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ea7:	75 19                	jne    11ec2 <list_is_empty+0x25>
   11ea9:	68 ac 2a 01 00       	push   $0x12aac
   11eae:	68 90 2b 01 00       	push   $0x12b90
   11eb3:	6a 38                	push   $0x38
   11eb5:	68 c0 2a 01 00       	push   $0x12ac0
   11eba:	e8 c6 fa ff ff       	call   11985 <pannic>
   11ebf:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11ec2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec5:	8b 40 08             	mov    0x8(%eax),%eax
   11ec8:	85 c0                	test   %eax,%eax
   11eca:	0f 94 c0             	sete   %al
   11ecd:	0f b6 c0             	movzbl %al,%eax
}
   11ed0:	c9                   	leave  
   11ed1:	c3                   	ret    

00011ed2 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11ed2:	55                   	push   %ebp
   11ed3:	89 e5                	mov    %esp,%ebp
   11ed5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ed8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11edc:	75 19                	jne    11ef7 <list_get_size+0x25>
   11ede:	68 ac 2a 01 00       	push   $0x12aac
   11ee3:	68 c8 2b 01 00       	push   $0x12bc8
   11ee8:	6a 3e                	push   $0x3e
   11eea:	68 c0 2a 01 00       	push   $0x12ac0
   11eef:	e8 91 fa ff ff       	call   11985 <pannic>
   11ef4:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11ef7:	8b 45 08             	mov    0x8(%ebp),%eax
   11efa:	8b 40 08             	mov    0x8(%eax),%eax
}
   11efd:	c9                   	leave  
   11efe:	c3                   	ret    

00011eff <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   11eff:	55                   	push   %ebp
   11f00:	89 e5                	mov    %esp,%ebp
   11f02:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11f05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f09:	74 06                	je     11f11 <list_insert_first+0x12>
   11f0b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f0f:	75 19                	jne    11f2a <list_insert_first+0x2b>
   11f11:	68 00 2b 01 00       	push   $0x12b00
   11f16:	68 7c 2b 01 00       	push   $0x12b7c
   11f1b:	6a 0f                	push   $0xf
   11f1d:	68 30 2b 01 00       	push   $0x12b30
   11f22:	e8 5e fa ff ff       	call   11985 <pannic>
   11f27:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   11f2a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2d:	8b 10                	mov    (%eax),%edx
   11f2f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f32:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11f35:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11f3e:	83 ec 0c             	sub    $0xc,%esp
   11f41:	ff 75 08             	push   0x8(%ebp)
   11f44:	e8 54 ff ff ff       	call   11e9d <list_is_empty>
   11f49:	83 c4 10             	add    $0x10,%esp
   11f4c:	85 c0                	test   %eax,%eax
   11f4e:	74 16                	je     11f66 <list_insert_first+0x67>
        list->first = list->last = node;
   11f50:	8b 45 08             	mov    0x8(%ebp),%eax
   11f53:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f56:	89 50 04             	mov    %edx,0x4(%eax)
   11f59:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5c:	8b 50 04             	mov    0x4(%eax),%edx
   11f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f62:	89 10                	mov    %edx,(%eax)
   11f64:	eb 12                	jmp    11f78 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   11f66:	8b 45 08             	mov    0x8(%ebp),%eax
   11f69:	8b 00                	mov    (%eax),%eax
   11f6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f6e:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11f70:	8b 45 08             	mov    0x8(%ebp),%eax
   11f73:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f76:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   11f78:	8b 45 08             	mov    0x8(%ebp),%eax
   11f7b:	8b 40 08             	mov    0x8(%eax),%eax
   11f7e:	8d 50 01             	lea    0x1(%eax),%edx
   11f81:	8b 45 08             	mov    0x8(%ebp),%eax
   11f84:	89 50 08             	mov    %edx,0x8(%eax)
}
   11f87:	90                   	nop
   11f88:	c9                   	leave  
   11f89:	c3                   	ret    

00011f8a <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11f8a:	55                   	push   %ebp
   11f8b:	89 e5                	mov    %esp,%ebp
   11f8d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11f90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f94:	74 06                	je     11f9c <list_insert_last+0x12>
   11f96:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f9a:	75 19                	jne    11fb5 <list_insert_last+0x2b>
   11f9c:	68 00 2b 01 00       	push   $0x12b00
   11fa1:	68 a0 2b 01 00       	push   $0x12ba0
   11fa6:	6a 1f                	push   $0x1f
   11fa8:	68 30 2b 01 00       	push   $0x12b30
   11fad:	e8 d3 f9 ff ff       	call   11985 <pannic>
   11fb2:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   11fb5:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb8:	8b 50 04             	mov    0x4(%eax),%edx
   11fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fbe:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11fc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fc3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   11fca:	83 ec 0c             	sub    $0xc,%esp
   11fcd:	ff 75 08             	push   0x8(%ebp)
   11fd0:	e8 c8 fe ff ff       	call   11e9d <list_is_empty>
   11fd5:	83 c4 10             	add    $0x10,%esp
   11fd8:	85 c0                	test   %eax,%eax
   11fda:	74 16                	je     11ff2 <list_insert_last+0x68>
        list->first = list->last = node;
   11fdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11fdf:	8b 55 0c             	mov    0xc(%ebp),%edx
   11fe2:	89 50 04             	mov    %edx,0x4(%eax)
   11fe5:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe8:	8b 50 04             	mov    0x4(%eax),%edx
   11feb:	8b 45 08             	mov    0x8(%ebp),%eax
   11fee:	89 10                	mov    %edx,(%eax)
   11ff0:	eb 15                	jmp    12007 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   11ff2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff5:	8b 40 04             	mov    0x4(%eax),%eax
   11ff8:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ffb:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11ffe:	8b 45 08             	mov    0x8(%ebp),%eax
   12001:	8b 55 0c             	mov    0xc(%ebp),%edx
   12004:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12007:	8b 45 08             	mov    0x8(%ebp),%eax
   1200a:	8b 40 08             	mov    0x8(%eax),%eax
   1200d:	8d 50 01             	lea    0x1(%eax),%edx
   12010:	8b 45 08             	mov    0x8(%ebp),%eax
   12013:	89 50 08             	mov    %edx,0x8(%eax)

}
   12016:	90                   	nop
   12017:	c9                   	leave  
   12018:	c3                   	ret    

00012019 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12019:	55                   	push   %ebp
   1201a:	89 e5                	mov    %esp,%ebp
   1201c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1201f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12023:	75 19                	jne    1203e <list_remove_first+0x25>
   12025:	68 66 2b 01 00       	push   $0x12b66
   1202a:	68 b4 2b 01 00       	push   $0x12bb4
   1202f:	6a 31                	push   $0x31
   12031:	68 30 2b 01 00       	push   $0x12b30
   12036:	e8 4a f9 ff ff       	call   11985 <pannic>
   1203b:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   1203e:	83 ec 0c             	sub    $0xc,%esp
   12041:	ff 75 08             	push   0x8(%ebp)
   12044:	e8 54 fe ff ff       	call   11e9d <list_is_empty>
   12049:	83 c4 10             	add    $0x10,%esp
   1204c:	85 c0                	test   %eax,%eax
   1204e:	74 07                	je     12057 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12050:	b8 00 00 00 00       	mov    $0x0,%eax
   12055:	eb 71                	jmp    120c8 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12057:	8b 45 08             	mov    0x8(%ebp),%eax
   1205a:	8b 00                	mov    (%eax),%eax
   1205c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1205f:	83 ec 0c             	sub    $0xc,%esp
   12062:	ff 75 08             	push   0x8(%ebp)
   12065:	e8 68 fe ff ff       	call   11ed2 <list_get_size>
   1206a:	83 c4 10             	add    $0x10,%esp
   1206d:	83 f8 01             	cmp    $0x1,%eax
   12070:	75 17                	jne    12089 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12072:	8b 45 08             	mov    0x8(%ebp),%eax
   12075:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1207c:	8b 45 08             	mov    0x8(%ebp),%eax
   1207f:	8b 50 04             	mov    0x4(%eax),%edx
   12082:	8b 45 08             	mov    0x8(%ebp),%eax
   12085:	89 10                	mov    %edx,(%eax)
   12087:	eb 18                	jmp    120a1 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12089:	8b 45 08             	mov    0x8(%ebp),%eax
   1208c:	8b 00                	mov    (%eax),%eax
   1208e:	8b 50 04             	mov    0x4(%eax),%edx
   12091:	8b 45 08             	mov    0x8(%ebp),%eax
   12094:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12096:	8b 45 08             	mov    0x8(%ebp),%eax
   12099:	8b 00                	mov    (%eax),%eax
   1209b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   120a1:	8b 45 08             	mov    0x8(%ebp),%eax
   120a4:	8b 40 08             	mov    0x8(%eax),%eax
   120a7:	8d 50 ff             	lea    -0x1(%eax),%edx
   120aa:	8b 45 08             	mov    0x8(%ebp),%eax
   120ad:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   120b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120b3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   120ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120bd:	8b 50 04             	mov    0x4(%eax),%edx
   120c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120c3:	89 10                	mov    %edx,(%eax)
    return ret;
   120c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   120c8:	c9                   	leave  
   120c9:	c3                   	ret    

000120ca <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   120ca:	55                   	push   %ebp
   120cb:	89 e5                	mov    %esp,%ebp
   120cd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   120d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120d4:	75 19                	jne    120ef <list_remove_last+0x25>
   120d6:	68 66 2b 01 00       	push   $0x12b66
   120db:	68 d8 2b 01 00       	push   $0x12bd8
   120e0:	6a 46                	push   $0x46
   120e2:	68 30 2b 01 00       	push   $0x12b30
   120e7:	e8 99 f8 ff ff       	call   11985 <pannic>
   120ec:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   120ef:	83 ec 0c             	sub    $0xc,%esp
   120f2:	ff 75 08             	push   0x8(%ebp)
   120f5:	e8 a3 fd ff ff       	call   11e9d <list_is_empty>
   120fa:	83 c4 10             	add    $0x10,%esp
   120fd:	85 c0                	test   %eax,%eax
   120ff:	74 07                	je     12108 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12101:	b8 00 00 00 00       	mov    $0x0,%eax
   12106:	eb 75                	jmp    1217d <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12108:	8b 45 08             	mov    0x8(%ebp),%eax
   1210b:	8b 40 04             	mov    0x4(%eax),%eax
   1210e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12111:	83 ec 0c             	sub    $0xc,%esp
   12114:	ff 75 08             	push   0x8(%ebp)
   12117:	e8 b6 fd ff ff       	call   11ed2 <list_get_size>
   1211c:	83 c4 10             	add    $0x10,%esp
   1211f:	83 f8 01             	cmp    $0x1,%eax
   12122:	75 17                	jne    1213b <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12124:	8b 45 08             	mov    0x8(%ebp),%eax
   12127:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1212e:	8b 45 08             	mov    0x8(%ebp),%eax
   12131:	8b 50 04             	mov    0x4(%eax),%edx
   12134:	8b 45 08             	mov    0x8(%ebp),%eax
   12137:	89 10                	mov    %edx,(%eax)
   12139:	eb 1b                	jmp    12156 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   1213b:	8b 45 08             	mov    0x8(%ebp),%eax
   1213e:	8b 40 04             	mov    0x4(%eax),%eax
   12141:	8b 10                	mov    (%eax),%edx
   12143:	8b 45 08             	mov    0x8(%ebp),%eax
   12146:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12149:	8b 45 08             	mov    0x8(%ebp),%eax
   1214c:	8b 40 04             	mov    0x4(%eax),%eax
   1214f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12156:	8b 45 08             	mov    0x8(%ebp),%eax
   12159:	8b 40 08             	mov    0x8(%eax),%eax
   1215c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1215f:	8b 45 08             	mov    0x8(%ebp),%eax
   12162:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12165:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12168:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1216f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12172:	8b 50 04             	mov    0x4(%eax),%edx
   12175:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12178:	89 10                	mov    %edx,(%eax)
    return ret;
   1217a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1217d:	c9                   	leave  
   1217e:	c3                   	ret    

0001217f <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1217f:	55                   	push   %ebp
   12180:	89 e5                	mov    %esp,%ebp
   12182:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12185:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12189:	74 06                	je     12191 <list_remove+0x12>
   1218b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1218f:	75 19                	jne    121aa <list_remove+0x2b>
   12191:	68 00 2b 01 00       	push   $0x12b00
   12196:	68 ec 2b 01 00       	push   $0x12bec
   1219b:	6a 5b                	push   $0x5b
   1219d:	68 30 2b 01 00       	push   $0x12b30
   121a2:	e8 de f7 ff ff       	call   11985 <pannic>
   121a7:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   121aa:	83 ec 0c             	sub    $0xc,%esp
   121ad:	ff 75 08             	push   0x8(%ebp)
   121b0:	e8 e8 fc ff ff       	call   11e9d <list_is_empty>
   121b5:	83 c4 10             	add    $0x10,%esp
   121b8:	85 c0                	test   %eax,%eax
   121ba:	74 0a                	je     121c6 <list_remove+0x47>
        return (list_node_t*)0;
   121bc:	b8 00 00 00 00       	mov    $0x0,%eax
   121c1:	e9 80 00 00 00       	jmp    12246 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   121c6:	8b 45 08             	mov    0x8(%ebp),%eax
   121c9:	8b 00                	mov    (%eax),%eax
   121cb:	39 45 0c             	cmp    %eax,0xc(%ebp)
   121ce:	75 0b                	jne    121db <list_remove+0x5c>
   121d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d3:	8b 50 04             	mov    0x4(%eax),%edx
   121d6:	8b 45 08             	mov    0x8(%ebp),%eax
   121d9:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   121db:	8b 45 08             	mov    0x8(%ebp),%eax
   121de:	8b 40 04             	mov    0x4(%eax),%eax
   121e1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   121e4:	75 0b                	jne    121f1 <list_remove+0x72>
   121e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   121e9:	8b 10                	mov    (%eax),%edx
   121eb:	8b 45 08             	mov    0x8(%ebp),%eax
   121ee:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   121f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   121f4:	8b 00                	mov    (%eax),%eax
   121f6:	85 c0                	test   %eax,%eax
   121f8:	74 0e                	je     12208 <list_remove+0x89>
   121fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   121fd:	8b 00                	mov    (%eax),%eax
   121ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   12202:	8b 52 04             	mov    0x4(%edx),%edx
   12205:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12208:	8b 45 0c             	mov    0xc(%ebp),%eax
   1220b:	8b 40 04             	mov    0x4(%eax),%eax
   1220e:	85 c0                	test   %eax,%eax
   12210:	74 0d                	je     1221f <list_remove+0xa0>
   12212:	8b 45 0c             	mov    0xc(%ebp),%eax
   12215:	8b 40 04             	mov    0x4(%eax),%eax
   12218:	8b 55 0c             	mov    0xc(%ebp),%edx
   1221b:	8b 12                	mov    (%edx),%edx
   1221d:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   1221f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12222:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12229:	8b 45 0c             	mov    0xc(%ebp),%eax
   1222c:	8b 50 04             	mov    0x4(%eax),%edx
   1222f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12232:	89 10                	mov    %edx,(%eax)
    list->size--;
   12234:	8b 45 08             	mov    0x8(%ebp),%eax
   12237:	8b 40 08             	mov    0x8(%eax),%eax
   1223a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1223d:	8b 45 08             	mov    0x8(%ebp),%eax
   12240:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12243:	8b 45 0c             	mov    0xc(%ebp),%eax
   12246:	c9                   	leave  
   12247:	c3                   	ret    

00012248 <inb>:
static inline uint8_t inb(uint16_t port) {
   12248:	55                   	push   %ebp
   12249:	89 e5                	mov    %esp,%ebp
   1224b:	83 ec 14             	sub    $0x14,%esp
   1224e:	8b 45 08             	mov    0x8(%ebp),%eax
   12251:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12255:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12259:	89 c2                	mov    %eax,%edx
   1225b:	ec                   	in     (%dx),%al
   1225c:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1225f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12263:	c9                   	leave  
   12264:	c3                   	ret    

00012265 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12265:	55                   	push   %ebp
   12266:	89 e5                	mov    %esp,%ebp
   12268:	83 ec 08             	sub    $0x8,%esp
   1226b:	8b 45 08             	mov    0x8(%ebp),%eax
   1226e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12271:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12275:	89 d0                	mov    %edx,%eax
   12277:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1227a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1227e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12282:	ee                   	out    %al,(%dx)
}
   12283:	90                   	nop
   12284:	c9                   	leave  
   12285:	c3                   	ret    

00012286 <log_init>:
#include "cpu/idt.h"
/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12286:	55                   	push   %ebp
   12287:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   12289:	6a 00                	push   $0x0
   1228b:	68 f9 03 00 00       	push   $0x3f9
   12290:	e8 d0 ff ff ff       	call   12265 <outb>
   12295:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12298:	68 80 00 00 00       	push   $0x80
   1229d:	68 fb 03 00 00       	push   $0x3fb
   122a2:	e8 be ff ff ff       	call   12265 <outb>
   122a7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   122aa:	6a 03                	push   $0x3
   122ac:	68 f8 03 00 00       	push   $0x3f8
   122b1:	e8 af ff ff ff       	call   12265 <outb>
   122b6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   122b9:	6a 00                	push   $0x0
   122bb:	68 f9 03 00 00       	push   $0x3f9
   122c0:	e8 a0 ff ff ff       	call   12265 <outb>
   122c5:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   122c8:	6a 03                	push   $0x3
   122ca:	68 fb 03 00 00       	push   $0x3fb
   122cf:	e8 91 ff ff ff       	call   12265 <outb>
   122d4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   122d7:	68 c7 00 00 00       	push   $0xc7
   122dc:	68 fa 03 00 00       	push   $0x3fa
   122e1:	e8 7f ff ff ff       	call   12265 <outb>
   122e6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   122e9:	6a 0f                	push   $0xf
   122eb:	68 fc 03 00 00       	push   $0x3fc
   122f0:	e8 70 ff ff ff       	call   12265 <outb>
   122f5:	83 c4 08             	add    $0x8,%esp
}
   122f8:	90                   	nop
   122f9:	c9                   	leave  
   122fa:	c3                   	ret    

000122fb <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   122fb:	55                   	push   %ebp
   122fc:	89 e5                	mov    %esp,%ebp
   122fe:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12304:	83 ec 04             	sub    $0x4,%esp
   12307:	68 80 00 00 00       	push   $0x80
   1230c:	6a 00                	push   $0x0
   1230e:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   12314:	50                   	push   %eax
   12315:	e8 27 f8 ff ff       	call   11b41 <kernel_memset>
   1231a:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1231d:	8d 45 0c             	lea    0xc(%ebp),%eax
   12320:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12326:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   1232c:	83 ec 04             	sub    $0x4,%esp
   1232f:	50                   	push   %eax
   12330:	ff 75 08             	push   0x8(%ebp)
   12333:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   12339:	50                   	push   %eax
   1233a:	e8 eb f8 ff ff       	call   11c2a <kernel_vsprintf>
   1233f:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12342:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   12348:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1234b:	e8 6d f0 ff ff       	call   113bd <idt_enter_protection>
   12350:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   12353:	eb 57                	jmp    123ac <log_printf+0xb1>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12355:	90                   	nop
   12356:	83 ec 0c             	sub    $0xc,%esp
   12359:	68 fd 03 00 00       	push   $0x3fd
   1235e:	e8 e5 fe ff ff       	call   12248 <inb>
   12363:	83 c4 10             	add    $0x10,%esp
   12366:	0f b6 c0             	movzbl %al,%eax
   12369:	83 e0 40             	and    $0x40,%eax
   1236c:	85 c0                	test   %eax,%eax
   1236e:	74 e6                	je     12356 <log_printf+0x5b>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12370:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12373:	0f b6 00             	movzbl (%eax),%eax
   12376:	3c 0a                	cmp    $0xa,%al
   12378:	75 12                	jne    1238c <log_printf+0x91>
   1237a:	83 ec 08             	sub    $0x8,%esp
   1237d:	6a 0d                	push   $0xd
   1237f:	68 f8 03 00 00       	push   $0x3f8
   12384:	e8 dc fe ff ff       	call   12265 <outb>
   12389:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1238c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1238f:	8d 50 01             	lea    0x1(%eax),%edx
   12392:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12395:	0f b6 00             	movzbl (%eax),%eax
   12398:	0f b6 c0             	movzbl %al,%eax
   1239b:	83 ec 08             	sub    $0x8,%esp
   1239e:	50                   	push   %eax
   1239f:	68 f8 03 00 00       	push   $0x3f8
   123a4:	e8 bc fe ff ff       	call   12265 <outb>
   123a9:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   123ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123af:	0f b6 00             	movzbl (%eax),%eax
   123b2:	84 c0                	test   %al,%al
   123b4:	75 9f                	jne    12355 <log_printf+0x5a>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   123b6:	83 ec 08             	sub    $0x8,%esp
   123b9:	6a 0d                	push   $0xd
   123bb:	68 f8 03 00 00       	push   $0x3f8
   123c0:	e8 a0 fe ff ff       	call   12265 <outb>
   123c5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   123c8:	83 ec 08             	sub    $0x8,%esp
   123cb:	6a 0a                	push   $0xa
   123cd:	68 f8 03 00 00       	push   $0x3f8
   123d2:	e8 8e fe ff ff       	call   12265 <outb>
   123d7:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    idt_leave_protection(state);    //TODO:解锁
   123da:	83 ec 0c             	sub    $0xc,%esp
   123dd:	ff 75 f0             	push   -0x10(%ebp)
   123e0:	e8 f0 ef ff ff       	call   113d5 <idt_leave_protection>
   123e5:	83 c4 10             	add    $0x10,%esp
   123e8:	90                   	nop
   123e9:	c9                   	leave  
   123ea:	c3                   	ret    
