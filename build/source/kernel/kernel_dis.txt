
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000045e0 memsz 0x000045e0 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x00017be0 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x0002d000 align 2**12
         filesz 0x00000093 memsz 0x00000093 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000371d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ec0  00013720  00013720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00016be0  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   00000093  80000000  0002d000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001e86  00000000  00000000  00007093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000749  00000000  00000000  00008f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000549d  00000000  00000000  00009662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001a6a  00000000  00000000  0000eaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000240  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001239  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  000119e9  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000014e0  00000000  00000000  00011a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ae l     F .text	0000000d down2
000102bb l     F .text	00000017 up2
000102d2 l     F .text	0000000c write_cr3
000102de l     F .text	0000000b pde_index
000102e9 l     F .text	00000010 pte_index
000102f9 l     F .text	00000027 pde_to_pt_addr
00010320 l     F .text	00000027 pte_to_pg_addr
00010347 l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
00010358 l     F .text	0000005d addr_alloc_init
000103b5 l     F .text	00000067 addr_alloc_page
0001041c l     F .text	00000061 addr_free_page
0001047d l     F .text	00000066 show_mem_info
000104e3 l     F .text	00000037 total_mem_size
00013868 l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
0001387c l     O .rodata	0000000c __func__.1
00010981 l     F .text	00000010 curr_page_dir
00013888 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010a2a l     F .text	0000003d list_node_init
00013988 l     O .rodata	0000000f __func__.10
00010a67 l     F .text	0000002d list_node_next
000139f8 l     O .rodata	0000000f __func__.3
00010a94 l     F .text	00000047 list_init
00013998 l     O .rodata	0000000a __func__.9
00010adb l     F .text	00000035 list_is_empty
00013a08 l     O .rodata	0000000e __func__.2
00010b10 l     F .text	0000002d list_get_size
000139e8 l     O .rodata	0000000e __func__.4
00010b3d l     F .text	0000002c list_get_first
000139d8 l     O .rodata	0000000f __func__.5
00010b69 l     F .text	00000017 up2
00010b80 l     F .text	00000007 hlt
00010b87 l     F .text	0000000c write_cr3
00010b93 l     F .text	0000001a far_jump
00010bad l     F .text	00000017 write_tr
00010bc4 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	00000198 task_manager
00010bd5 l     F .text	0000001f switch_to_tss
00010c0f l     F .text	00000172 tss_init
0001397c l     O .rodata	0000000a __func__.11
000181a0 l     O .bss	00000200 empty_task_stack
00010e68 l     F .text	0000000a empty_task
000139a4 l     O .rodata	00000010 __func__.8
000139b4 l     O .rodata	0000000f __func__.7
000139c4 l     O .rodata	00000011 __func__.6
00013a18 l     O .rodata	0000000f __func__.1
00013a28 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
0001141e l     F .text	00000028 lgdt
000183a0 l     O .bss	00010000 gdt_table
000283a0 l     O .bss	00002000 is_alloc
0002a3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011654 l     F .text	00000007 cli
0001165b l     F .text	00000007 sti
00011662 l     F .text	00000007 hlt
00011669 l     F .text	0000001d inb
00011686 l     F .text	00000021 outb
000116a7 l     F .text	00000028 lidt
000116cf l     F .text	00000011 read_cr2
000116e0 l     F .text	00000010 read_eflags
000116f0 l     F .text	0000000b write_eflags
0002a3c0 l     O .bss	00000800 idt_table
000116fb l     F .text	0000010f print_exception_fram
0001180a l     F .text	0000003e do_default_handler
00011c20 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
0001200c l     F .text	00000021 outb
0002abc0 l     O .bss	00000004 sys_tick
00012055 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
0001409c l     O .rodata	0000000c __func__.1
000140a8 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
000121c3 l     F .text	00000047 list_init
00014168 l     O .rodata	0000000a __func__.1
0001220a l     F .text	00000035 list_is_empty
00014174 l     O .rodata	0000000e __func__.0
0001415c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000123d5 l     F .text	00000047 list_init
00014228 l     O .rodata	0000000a __func__.1
0001241c l     F .text	00000035 list_is_empty
00014234 l     O .rodata	0000000e __func__.0
0001421c l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
000125a5 l     F .text	00000047 list_init
00014348 l     O .rodata	0000000a __func__.3
000125ec l     F .text	0000002d list_get_size
00014354 l     O .rodata	0000000e __func__.2
00012619 l     F .text	0000002c list_get_first
00014374 l     O .rodata	0000000f __func__.0
00012645 l     F .text	0000002d list_get_last
00014364 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
0001294d l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00014444 l     O .rodata	0000000c __func__.3
00014450 l     O .rodata	0000000f __func__.2
00014460 l     O .rodata	0000000f __func__.1
00014470 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000131b2 l     F .text	00000035 list_is_empty
00014578 l     O .rodata	0000000e __func__.5
000131e7 l     F .text	0000002d list_get_size
000145b0 l     O .rodata	0000000e __func__.2
00014564 l     O .rodata	00000012 __func__.6
00014588 l     O .rodata	00000011 __func__.4
0001459c l     O .rodata	00000012 __func__.3
000145c0 l     O .rodata	00000011 __func__.1
000145d4 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0001355d l     F .text	0000001d inb
0001357a l     F .text	00000021 outb
0002abc4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	00000047 sys_call
80000057 l     F .first_task	0000002a msleep
00012a34 g     F .text	00000078 bitmap_get_bit
00012e07 g     F .text	0000004f kernel_memcpy
00011e68 g     F .text	00000098 idt_enable
000110f2 g     F .text	0000000a task_current
0001329f g     F .text	0000008f list_insert_last
00011164 g     F .text	00000061 sys_yield
0001197c g     F .text	0000001c do_handler_segment_not_present
0001102e g     F .text	0000004b task_set_ready
00012bb4 g     F .text	00000021 bitmap_is_set
00011f9f g     F .text	0000000b idt_enable_global
00012e56 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001359b g     F .text	00000088 log_init
00012186 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012cd0 g     F .text	00000047 kernel_strcpy
00011f94 g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
80000081 g     F .first_task	00000012 first_main
00011bdd g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000118d4 g     F .text	0000001c do_handler_overflow
00011b51 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000119b4 g     F .text	000000b1 do_handler_general_protection
00011bc1 g     F .text	0000001c do_handler_control_exception
0001257c g     F .text	00000029 sem_count
00011864 g     F .text	0000001c do_handler_divider
00012aac g     F .text	00000108 bitmap_set_bit
00011944 g     F .text	0000001c do_handler_double_fault
00011a65 g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011faa g     F .text	00000039 pic_send_eoi
000133df g     F .text	000000b5 list_remove_last
00011024 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012494 g     F .text	0000006b sem_wait
0001093f g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011505 g     F .text	000000b3 gdt_init
00011ba5 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011880 g     F .text	0000001c do_handler_debug
0002abe0 g     O .bss	00002000 stack
00011377 g     F .text	00000060 sys_sleep
00010991 g     F .text	00000099 memory_free_page
00012672 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0002d000 g       *ABS*	00000000 s_first_task
00010887 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00011cb3 g     F .text	000001b5 idt_init
000124ff g     F .text	0000007d sem_notify
0001162d g     F .text	00000027 gdt_free
0001190c g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011b35 g     F .text	0000001c do_handler_fpu_error
00010f42 g     F .text	000000e2 task_first_init
00011b6d g     F .text	0000001c do_handler_machine_check
00013214 g     F .text	0000008b list_insert_first
0001132c g     F .text	0000004b task_set_wakeup
000110c4 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010709 g     F .text	00000085 memory_creat_uvm
00012d17 g     F .text	00000051 kernel_strncpy
0002d093 g       *ABS*	00000000 mem_free_start
000120cf g     F .text	00000053 kernel_init
00012451 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012f3f g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0002d000 g       .first_task	00000000 e_data
0001228c g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011960 g     F .text	0000001c do_handler_invalid_tss
00011f00 g     F .text	00000094 idt_disable
0002d093 g       *ABS*	00000000 e_first_task
000112d0 g     F .text	0000005c task_set_sleep
000105ca g     F .text	0000009b memory_creat_map
0001189c g     F .text	0000001c do_handler_nmi
0001223f g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
0001298a g     F .text	00000016 bitmap_byte_count
00011928 g     F .text	0000001c do_handler_device_unavailable
00011fe3 g     F .text	00000018 idt_enter_protection
00010665 g     F .text	000000a4 create_kernal_table
000111c5 g     F .text	0000010b task_slice_end
00012122 g     F .text	00000064 move_to_first_task
00012e97 g     F .text	00000084 kernel_memcmp
00011b89 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011848 g     F .text	0000001c do_handler_unknown
00010961 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00010bf4 g     F .text	0000001b task_switch_from_to
0001231d g     F .text	000000b8 mutex_unlock
000110fc g     F .text	00000068 task_switch
00012dd2 g     F .text	00000035 kernel_strlen
00011079 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00011446 g     F .text	000000bf segment_desc_set
000118f0 g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
0001332e g     F .text	000000b1 list_remove_first
000145e0 g       .rodata	00000000 e_text
00012d68 g     F .text	0000006a kernel_strncmp
000129a0 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012bd5 g     F .text	000000fb bitmap_alloc_nbits
00010e72 g     F .text	000000d0 task_manager_init
0001078e g     F .text	000000f9 memory_init
00012954 g     F .text	00000036 pannic
00011998 g     F .text	0000001c do_handler_stack_segment_fault
000118b8 g     F .text	0000001c do_handler_breakpoint
00013623 g     F .text	000000fa log_printf
00010d81 g     F .text	000000e7 task_init
00012f1b g     F .text	00000024 kernel_sprintf
000115b8 g     F .text	00000075 gdt_alloc_desc
000130dc g     F .text	000000d6 kernel_itoa
00013494 g     F .text	000000c9 list_remove
000113d7 g     F .text	00000047 gate_desc_set
00011ffb g     F .text	00000011 idt_leave_protection
0001051a g     F .text	000000b0 find_pte
0001202d g     F .text	00000028 do_handler_time
000120b7 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 c4 20 00 00       	call   120cf <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc e0 cb 02 00       	mov    $0x2cbe0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 5c 21 00 00       	jmp    12186 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 0d 18 00 00       	call   11848 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 0c 18 00 00       	call   11864 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 0b 18 00 00       	call   11880 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 0a 18 00 00       	call   1189c <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 09 18 00 00       	call   118b8 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 08 18 00 00       	call   118d4 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 07 18 00 00       	call   118f0 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 06 18 00 00       	call   1190c <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 05 18 00 00       	call   11928 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 06 18 00 00       	call   11944 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 07 18 00 00       	call   11960 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 08 18 00 00       	call   1197c <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 09 18 00 00       	call   11998 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 0a 18 00 00       	call   119b4 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 a0 18 00 00       	call   11a65 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 53 19 00 00       	call   11b35 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 54 19 00 00       	call   11b51 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 53 19 00 00       	call   11b6d <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 52 19 00 00       	call   11b89 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 51 19 00 00       	call   11ba5 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 52 19 00 00       	call   11bc1 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 a1 1d 00 00       	call   1202d <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:


    .text
    .global exception_handler_syscall
exception_handler_syscall:
   102ad:	c3                   	ret    

000102ae <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ae:	55                   	push   %ebp
   102af:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b4:	f7 d8                	neg    %eax
   102b6:	23 45 08             	and    0x8(%ebp),%eax
}
   102b9:	5d                   	pop    %ebp
   102ba:	c3                   	ret    

000102bb <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102be:	8b 55 08             	mov    0x8(%ebp),%edx
   102c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c4:	01 d0                	add    %edx,%eax
   102c6:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cc:	f7 d8                	neg    %eax
   102ce:	21 d0                	and    %edx,%eax
}
   102d0:	5d                   	pop    %ebp
   102d1:	c3                   	ret    

000102d2 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102d2:	55                   	push   %ebp
   102d3:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102d5:	8b 45 08             	mov    0x8(%ebp),%eax
   102d8:	0f 22 d8             	mov    %eax,%cr3
}
   102db:	90                   	nop
   102dc:	5d                   	pop    %ebp
   102dd:	c3                   	ret    

000102de <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102de:	55                   	push   %ebp
   102df:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102e1:	8b 45 08             	mov    0x8(%ebp),%eax
   102e4:	c1 e8 16             	shr    $0x16,%eax
}
   102e7:	5d                   	pop    %ebp
   102e8:	c3                   	ret    

000102e9 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   102e9:	55                   	push   %ebp
   102ea:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   102ec:	8b 45 08             	mov    0x8(%ebp),%eax
   102ef:	c1 e8 0c             	shr    $0xc,%eax
   102f2:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   102f7:	5d                   	pop    %ebp
   102f8:	c3                   	ret    

000102f9 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   102f9:	55                   	push   %ebp
   102fa:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   102fc:	8b 45 08             	mov    0x8(%ebp),%eax
   102ff:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10303:	c0 ea 04             	shr    $0x4,%dl
   10306:	0f b6 ca             	movzbl %dl,%ecx
   10309:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1030d:	c1 e2 04             	shl    $0x4,%edx
   10310:	09 ca                	or     %ecx,%edx
   10312:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10316:	c1 e0 0c             	shl    $0xc,%eax
   10319:	09 d0                	or     %edx,%eax
   1031b:	c1 e0 0c             	shl    $0xc,%eax
}
   1031e:	5d                   	pop    %ebp
   1031f:	c3                   	ret    

00010320 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 ca             	movzbl %dl,%ecx
   10330:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10334:	c1 e2 04             	shl    $0x4,%edx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1034a:	ff 75 08             	push   0x8(%ebp)
   1034d:	e8 80 ff ff ff       	call   102d2 <write_cr3>
   10352:	83 c4 04             	add    $0x4,%esp
}
   10355:	90                   	nop
   10356:	c9                   	leave  
   10357:	c3                   	ret    

00010358 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10358:	55                   	push   %ebp
   10359:	89 e5                	mov    %esp,%ebp
   1035b:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	83 ec 0c             	sub    $0xc,%esp
   10364:	50                   	push   %eax
   10365:	e8 d5 1e 00 00       	call   1223f <mutex_init>
   1036a:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 55 10             	mov    0x10(%ebp),%edx
   10373:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	8b 55 14             	mov    0x14(%ebp),%edx
   1037c:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   1037f:	8b 45 08             	mov    0x8(%ebp),%eax
   10382:	8b 55 18             	mov    0x18(%ebp),%edx
   10385:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	8b 40 20             	mov    0x20(%eax),%eax
   1038e:	8b 55 08             	mov    0x8(%ebp),%edx
   10391:	8b 4a 24             	mov    0x24(%edx),%ecx
   10394:	ba 00 00 00 00       	mov    $0x0,%edx
   10399:	f7 f1                	div    %ecx
   1039b:	89 c2                	mov    %eax,%edx
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	83 c0 14             	add    $0x14,%eax
   103a3:	6a 00                	push   $0x0
   103a5:	52                   	push   %edx
   103a6:	ff 75 0c             	push   0xc(%ebp)
   103a9:	50                   	push   %eax
   103aa:	e8 f1 25 00 00       	call   129a0 <bitmap_init>
   103af:	83 c4 10             	add    $0x10,%esp
}
   103b2:	90                   	nop
   103b3:	c9                   	leave  
   103b4:	c3                   	ret    

000103b5 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   103b5:	55                   	push   %ebp
   103b6:	89 e5                	mov    %esp,%ebp
   103b8:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   103bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   103c2:	8b 45 08             	mov    0x8(%ebp),%eax
   103c5:	83 ec 0c             	sub    $0xc,%esp
   103c8:	50                   	push   %eax
   103c9:	e8 be 1e 00 00       	call   1228c <mutex_lock>
   103ce:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103d1:	8b 45 08             	mov    0x8(%ebp),%eax
   103d4:	83 c0 14             	add    $0x14,%eax
   103d7:	83 ec 04             	sub    $0x4,%esp
   103da:	ff 75 0c             	push   0xc(%ebp)
   103dd:	6a 00                	push   $0x0
   103df:	50                   	push   %eax
   103e0:	e8 f0 27 00 00       	call   12bd5 <bitmap_alloc_nbits>
   103e5:	83 c4 10             	add    $0x10,%esp
   103e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   103eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   103ef:	78 17                	js     10408 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   103f1:	8b 45 08             	mov    0x8(%ebp),%eax
   103f4:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103f7:	8b 45 08             	mov    0x8(%ebp),%eax
   103fa:	8b 50 24             	mov    0x24(%eax),%edx
   103fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10400:	0f af c2             	imul   %edx,%eax
   10403:	01 c8                	add    %ecx,%eax
   10405:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	83 ec 0c             	sub    $0xc,%esp
   1040e:	50                   	push   %eax
   1040f:	e8 09 1f 00 00       	call   1231d <mutex_unlock>
   10414:	83 c4 10             	add    $0x10,%esp

  return addr;
   10417:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1041a:	c9                   	leave  
   1041b:	c3                   	ret    

0001041c <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1041c:	55                   	push   %ebp
   1041d:	89 e5                	mov    %esp,%ebp
   1041f:	53                   	push   %ebx
   10420:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	83 ec 0c             	sub    $0xc,%esp
   10429:	50                   	push   %eax
   1042a:	e8 5d 1e 00 00       	call   1228c <mutex_lock>
   1042f:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10432:	8b 45 08             	mov    0x8(%ebp),%eax
   10435:	8b 50 1c             	mov    0x1c(%eax),%edx
   10438:	8b 45 0c             	mov    0xc(%ebp),%eax
   1043b:	29 d0                	sub    %edx,%eax
   1043d:	89 c1                	mov    %eax,%ecx
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	8b 58 24             	mov    0x24(%eax),%ebx
   10445:	89 c8                	mov    %ecx,%eax
   10447:	ba 00 00 00 00       	mov    $0x0,%edx
   1044c:	f7 f3                	div    %ebx
   1044e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10451:	8b 45 08             	mov    0x8(%ebp),%eax
   10454:	83 c0 14             	add    $0x14,%eax
   10457:	6a 00                	push   $0x0
   10459:	ff 75 10             	push   0x10(%ebp)
   1045c:	ff 75 f4             	push   -0xc(%ebp)
   1045f:	50                   	push   %eax
   10460:	e8 47 26 00 00       	call   12aac <bitmap_set_bit>
   10465:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10468:	8b 45 08             	mov    0x8(%ebp),%eax
   1046b:	83 ec 0c             	sub    $0xc,%esp
   1046e:	50                   	push   %eax
   1046f:	e8 a9 1e 00 00       	call   1231d <mutex_unlock>
   10474:	83 c4 10             	add    $0x10,%esp
}
   10477:	90                   	nop
   10478:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1047b:	c9                   	leave  
   1047c:	c3                   	ret    

0001047d <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1047d:	55                   	push   %ebp
   1047e:	89 e5                	mov    %esp,%ebp
   10480:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10483:	83 ec 0c             	sub    $0xc,%esp
   10486:	68 20 37 01 00       	push   $0x13720
   1048b:	e8 93 31 00 00       	call   13623 <log_printf>
   10490:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10493:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1049a:	eb 29                	jmp    104c5 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   1049c:	8b 45 08             	mov    0x8(%ebp),%eax
   1049f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104a2:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104a6:	8b 45 08             	mov    0x8(%ebp),%eax
   104a9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104ac:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104af:	52                   	push   %edx
   104b0:	50                   	push   %eax
   104b1:	ff 75 f4             	push   -0xc(%ebp)
   104b4:	68 2c 37 01 00       	push   $0x1372c
   104b9:	e8 65 31 00 00       	call   13623 <log_printf>
   104be:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104c1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104c5:	8b 45 08             	mov    0x8(%ebp),%eax
   104c8:	8b 40 50             	mov    0x50(%eax),%eax
   104cb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104ce:	7c cc                	jl     1049c <show_mem_info+0x1f>
    }

    log_printf("");
   104d0:	83 ec 0c             	sub    $0xc,%esp
   104d3:	68 3e 37 01 00       	push   $0x1373e
   104d8:	e8 46 31 00 00       	call   13623 <log_printf>
   104dd:	83 c4 10             	add    $0x10,%esp
}
   104e0:	90                   	nop
   104e1:	c9                   	leave  
   104e2:	c3                   	ret    

000104e3 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104e3:	55                   	push   %ebp
   104e4:	89 e5                	mov    %esp,%ebp
   104e6:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104f7:	eb 11                	jmp    1050a <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   104f9:	8b 45 08             	mov    0x8(%ebp),%eax
   104fc:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104ff:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10503:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10506:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	8b 40 50             	mov    0x50(%eax),%eax
   10510:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10513:	7c e4                	jl     104f9 <total_mem_size+0x16>
    }

    return mem_size;
   10515:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10518:	c9                   	leave  
   10519:	c3                   	ret    

0001051a <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   1051a:	55                   	push   %ebp
   1051b:	89 e5                	mov    %esp,%ebp
   1051d:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10520:	ff 75 0c             	push   0xc(%ebp)
   10523:	e8 b6 fd ff ff       	call   102de <pde_index>
   10528:	83 c4 04             	add    $0x4,%esp
   1052b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	01 d0                	add    %edx,%eax
   10537:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   1053a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1053d:	0f b6 00             	movzbl (%eax),%eax
   10540:	83 e0 01             	and    $0x1,%eax
   10543:	84 c0                	test   %al,%al
   10545:	74 10                	je     10557 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10547:	ff 75 f0             	push   -0x10(%ebp)
   1054a:	e8 aa fd ff ff       	call   102f9 <pde_to_pt_addr>
   1054f:	83 c4 04             	add    $0x4,%esp
   10552:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10555:	eb 57                	jmp    105ae <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10557:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1055b:	75 07                	jne    10564 <find_pte+0x4a>
      return (pte_t*)0;
   1055d:	b8 00 00 00 00       	mov    $0x0,%eax
   10562:	eb 64                	jmp    105c8 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10564:	83 ec 08             	sub    $0x8,%esp
   10567:	6a 01                	push   $0x1
   10569:	68 00 60 01 00       	push   $0x16000
   1056e:	e8 42 fe ff ff       	call   103b5 <addr_alloc_page>
   10573:	83 c4 10             	add    $0x10,%esp
   10576:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10579:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1057d:	75 07                	jne    10586 <find_pte+0x6c>
      return (pte_t*)0;
   1057f:	b8 00 00 00 00       	mov    $0x0,%eax
   10584:	eb 42                	jmp    105c8 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10586:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10589:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1058c:	83 ec 04             	sub    $0x4,%esp
   1058f:	68 00 10 00 00       	push   $0x1000
   10594:	6a 00                	push   $0x0
   10596:	ff 75 f4             	push   -0xc(%ebp)
   10599:	e8 b8 28 00 00       	call   12e56 <kernel_memset>
   1059e:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   105a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105a4:	83 c8 07             	or     $0x7,%eax
   105a7:	89 c2                	mov    %eax,%edx
   105a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105ac:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105ae:	83 ec 0c             	sub    $0xc,%esp
   105b1:	ff 75 0c             	push   0xc(%ebp)
   105b4:	e8 30 fd ff ff       	call   102e9 <pte_index>
   105b9:	83 c4 10             	add    $0x10,%esp
   105bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105c6:	01 d0                	add    %edx,%eax

}
   105c8:	c9                   	leave  
   105c9:	c3                   	ret    

000105ca <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105ca:	55                   	push   %ebp
   105cb:	89 e5                	mov    %esp,%ebp
   105cd:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105d7:	eb 7e                	jmp    10657 <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105d9:	83 ec 04             	sub    $0x4,%esp
   105dc:	6a 01                	push   $0x1
   105de:	ff 75 0c             	push   0xc(%ebp)
   105e1:	ff 75 08             	push   0x8(%ebp)
   105e4:	e8 31 ff ff ff       	call   1051a <find_pte>
   105e9:	83 c4 10             	add    $0x10,%esp
   105ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   105ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105f3:	75 17                	jne    1060c <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   105f5:	83 ec 0c             	sub    $0xc,%esp
   105f8:	68 3f 37 01 00       	push   $0x1373f
   105fd:	e8 21 30 00 00       	call   13623 <log_printf>
   10602:	83 c4 10             	add    $0x10,%esp
      return -1;
   10605:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1060a:	eb 57                	jmp    10663 <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1060c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060f:	0f b6 00             	movzbl (%eax),%eax
   10612:	83 e0 01             	and    $0x1,%eax
   10615:	84 c0                	test   %al,%al
   10617:	74 1c                	je     10635 <memory_creat_map+0x6b>
   10619:	68 59 37 01 00       	push   $0x13759
   1061e:	68 68 38 01 00       	push   $0x13868
   10623:	68 c1 00 00 00       	push   $0xc1
   10628:	68 6c 37 01 00       	push   $0x1376c
   1062d:	e8 22 23 00 00       	call   12954 <pannic>
   10632:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10635:	8b 45 10             	mov    0x10(%ebp),%eax
   10638:	0b 45 18             	or     0x18(%ebp),%eax
   1063b:	83 c8 01             	or     $0x1,%eax
   1063e:	89 c2                	mov    %eax,%edx
   10640:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10643:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10645:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1064c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10653:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10657:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1065a:	3b 45 14             	cmp    0x14(%ebp),%eax
   1065d:	0f 8c 76 ff ff ff    	jl     105d9 <memory_creat_map+0xf>

  }
 }
   10663:	c9                   	leave  
   10664:	c3                   	ret    

00010665 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   10665:	55                   	push   %ebp
   10666:	89 e5                	mov    %esp,%ebp
   10668:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1066b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10672:	e9 82 00 00 00       	jmp    106f9 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   10677:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067a:	c1 e0 04             	shl    $0x4,%eax
   1067d:	05 00 50 01 00       	add    $0x15000,%eax
   10682:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10685:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10688:	8b 00                	mov    (%eax),%eax
   1068a:	68 00 10 00 00       	push   $0x1000
   1068f:	50                   	push   %eax
   10690:	e8 19 fc ff ff       	call   102ae <down2>
   10695:	83 c4 08             	add    $0x8,%esp
   10698:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   1069b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069e:	8b 40 08             	mov    0x8(%eax),%eax
   106a1:	68 00 10 00 00       	push   $0x1000
   106a6:	50                   	push   %eax
   106a7:	e8 02 fc ff ff       	call   102ae <down2>
   106ac:	83 c4 08             	add    $0x8,%esp
   106af:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	8b 40 04             	mov    0x4(%eax),%eax
   106b8:	68 00 10 00 00       	push   $0x1000
   106bd:	50                   	push   %eax
   106be:	e8 f8 fb ff ff       	call   102bb <up2>
   106c3:	83 c4 08             	add    $0x8,%esp
   106c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106cc:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106cf:	c1 e8 0c             	shr    $0xc,%eax
   106d2:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d8:	8b 40 0c             	mov    0xc(%eax),%eax
   106db:	83 ec 0c             	sub    $0xc,%esp
   106de:	50                   	push   %eax
   106df:	ff 75 e0             	push   -0x20(%ebp)
   106e2:	ff 75 e8             	push   -0x18(%ebp)
   106e5:	ff 75 ec             	push   -0x14(%ebp)
   106e8:	68 00 70 01 00       	push   $0x17000
   106ed:	e8 d8 fe ff ff       	call   105ca <memory_creat_map>
   106f2:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   106f5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106fc:	83 f8 03             	cmp    $0x3,%eax
   106ff:	0f 86 72 ff ff ff    	jbe    10677 <create_kernal_table+0x12>

  }
}
   10705:	90                   	nop
   10706:	90                   	nop
   10707:	c9                   	leave  
   10708:	c3                   	ret    

00010709 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10709:	55                   	push   %ebp
   1070a:	89 e5                	mov    %esp,%ebp
   1070c:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   1070f:	83 ec 08             	sub    $0x8,%esp
   10712:	6a 01                	push   $0x1
   10714:	68 00 60 01 00       	push   $0x16000
   10719:	e8 97 fc ff ff       	call   103b5 <addr_alloc_page>
   1071e:	83 c4 10             	add    $0x10,%esp
   10721:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10724:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10728:	75 07                	jne    10731 <memory_creat_uvm+0x28>
   1072a:	b8 00 00 00 00       	mov    $0x0,%eax
   1072f:	eb 5b                	jmp    1078c <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10731:	83 ec 04             	sub    $0x4,%esp
   10734:	68 00 10 00 00       	push   $0x1000
   10739:	6a 00                	push   $0x0
   1073b:	ff 75 f0             	push   -0x10(%ebp)
   1073e:	e8 13 27 00 00       	call   12e56 <kernel_memset>
   10743:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10746:	83 ec 0c             	sub    $0xc,%esp
   10749:	68 00 00 00 80       	push   $0x80000000
   1074e:	e8 8b fb ff ff       	call   102de <pde_index>
   10753:	83 c4 10             	add    $0x10,%esp
   10756:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10760:	eb 1f                	jmp    10781 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   10762:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10765:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1076c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076f:	01 c2                	add    %eax,%edx
   10771:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10774:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   1077b:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   1077d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10781:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10784:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10787:	77 d9                	ja     10762 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   10789:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1078c:	c9                   	leave  
   1078d:	c3                   	ret    

0001078e <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1078e:	55                   	push   %ebp
   1078f:	89 e5                	mov    %esp,%ebp
   10791:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10794:	83 ec 0c             	sub    $0xc,%esp
   10797:	68 a3 37 01 00       	push   $0x137a3
   1079c:	e8 82 2e 00 00       	call   13623 <log_printf>
   107a1:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   107a4:	83 ec 08             	sub    $0x8,%esp
   107a7:	68 93 d0 02 00       	push   $0x2d093
   107ac:	68 af 37 01 00       	push   $0x137af
   107b1:	e8 6d 2e 00 00       	call   13623 <log_printf>
   107b6:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107b9:	83 ec 0c             	sub    $0xc,%esp
   107bc:	ff 75 08             	push   0x8(%ebp)
   107bf:	e8 b9 fc ff ff       	call   1047d <show_mem_info>
   107c4:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107c7:	83 ec 0c             	sub    $0xc,%esp
   107ca:	ff 75 08             	push   0x8(%ebp)
   107cd:	e8 11 fd ff ff       	call   104e3 <total_mem_size>
   107d2:	83 c4 10             	add    $0x10,%esp
   107d5:	2d 00 00 10 00       	sub    $0x100000,%eax
   107da:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	68 00 10 00 00       	push   $0x1000
   107e5:	ff 75 f4             	push   -0xc(%ebp)
   107e8:	e8 c1 fa ff ff       	call   102ae <down2>
   107ed:	83 c4 10             	add    $0x10,%esp
   107f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   107f3:	83 ec 04             	sub    $0x4,%esp
   107f6:	ff 75 f4             	push   -0xc(%ebp)
   107f9:	68 00 00 10 00       	push   $0x100000
   107fe:	68 c4 37 01 00       	push   $0x137c4
   10803:	e8 1b 2e 00 00       	call   13623 <log_printf>
   10808:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   1080b:	c7 45 f0 93 d0 02 00 	movl   $0x2d093,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10812:	83 ec 0c             	sub    $0xc,%esp
   10815:	68 00 10 00 00       	push   $0x1000
   1081a:	ff 75 f4             	push   -0xc(%ebp)
   1081d:	68 00 00 10 00       	push   $0x100000
   10822:	ff 75 f0             	push   -0x10(%ebp)
   10825:	68 00 60 01 00       	push   $0x16000
   1082a:	e8 29 fb ff ff       	call   10358 <addr_alloc_init>
   1082f:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10832:	a1 20 60 01 00       	mov    0x16020,%eax
   10837:	c1 e8 0c             	shr    $0xc,%eax
   1083a:	83 ec 0c             	sub    $0xc,%esp
   1083d:	50                   	push   %eax
   1083e:	e8 47 21 00 00       	call   1298a <bitmap_byte_count>
   10843:	83 c4 10             	add    $0x10,%esp
   10846:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10849:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10850:	76 1c                	jbe    1086e <memory_init+0xe0>
   10852:	68 e4 37 01 00       	push   $0x137e4
   10857:	68 7c 38 01 00       	push   $0x1387c
   1085c:	68 2e 01 00 00       	push   $0x12e
   10861:	68 6c 37 01 00       	push   $0x1376c
   10866:	e8 e9 20 00 00       	call   12954 <pannic>
   1086b:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   1086e:	e8 f2 fd ff ff       	call   10665 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10873:	b8 00 70 01 00       	mov    $0x17000,%eax
   10878:	83 ec 0c             	sub    $0xc,%esp
   1087b:	50                   	push   %eax
   1087c:	e8 c6 fa ff ff       	call   10347 <mmu_set_page_dir>
   10881:	83 c4 10             	add    $0x10,%esp
}
   10884:	90                   	nop
   10885:	c9                   	leave  
   10886:	c3                   	ret    

00010887 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10887:	55                   	push   %ebp
   10888:	89 e5                	mov    %esp,%ebp
   1088a:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   1088d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10890:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10893:	68 00 10 00 00       	push   $0x1000
   10898:	ff 75 10             	push   0x10(%ebp)
   1089b:	e8 1b fa ff ff       	call   102bb <up2>
   108a0:	83 c4 08             	add    $0x8,%esp
   108a3:	c1 e8 0c             	shr    $0xc,%eax
   108a6:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   108a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108b0:	eb 7a                	jmp    1092c <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108b2:	83 ec 08             	sub    $0x8,%esp
   108b5:	6a 01                	push   $0x1
   108b7:	68 00 60 01 00       	push   $0x16000
   108bc:	e8 f4 fa ff ff       	call   103b5 <addr_alloc_page>
   108c1:	83 c4 10             	add    $0x10,%esp
   108c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   108c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108cb:	75 17                	jne    108e4 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   108cd:	83 ec 0c             	sub    $0xc,%esp
   108d0:	68 08 38 01 00       	push   $0x13808
   108d5:	e8 49 2d 00 00       	call   13623 <log_printf>
   108da:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   108dd:	b8 00 00 00 00       	mov    $0x0,%eax
   108e2:	eb 59                	jmp    1093d <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   108e4:	8b 45 08             	mov    0x8(%ebp),%eax
   108e7:	83 ec 0c             	sub    $0xc,%esp
   108ea:	ff 75 14             	push   0x14(%ebp)
   108ed:	6a 01                	push   $0x1
   108ef:	ff 75 e8             	push   -0x18(%ebp)
   108f2:	ff 75 f4             	push   -0xc(%ebp)
   108f5:	50                   	push   %eax
   108f6:	e8 cf fc ff ff       	call   105ca <memory_creat_map>
   108fb:	83 c4 20             	add    $0x20,%esp
   108fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10901:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10905:	79 1a                	jns    10921 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10907:	83 ec 08             	sub    $0x8,%esp
   1090a:	ff 75 e4             	push   -0x1c(%ebp)
   1090d:	68 24 38 01 00       	push   $0x13824
   10912:	e8 0c 2d 00 00       	call   13623 <log_printf>
   10917:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   1091a:	b8 00 00 00 00       	mov    $0x0,%eax
   1091f:	eb 1c                	jmp    1093d <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10921:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10928:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1092c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1092f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10932:	0f 8c 7a ff ff ff    	jl     108b2 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10938:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1093d:	c9                   	leave  
   1093e:	c3                   	ret    

0001093f <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   1093f:	55                   	push   %ebp
   10940:	89 e5                	mov    %esp,%ebp
   10942:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10945:	e8 a8 07 00 00       	call   110f2 <task_current>
   1094a:	8b 40 64             	mov    0x64(%eax),%eax
   1094d:	ff 75 10             	push   0x10(%ebp)
   10950:	ff 75 0c             	push   0xc(%ebp)
   10953:	ff 75 08             	push   0x8(%ebp)
   10956:	50                   	push   %eax
   10957:	e8 2b ff ff ff       	call   10887 <memory_alloc_for_page_dir>
   1095c:	83 c4 10             	add    $0x10,%esp
}
   1095f:	c9                   	leave  
   10960:	c3                   	ret    

00010961 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10961:	55                   	push   %ebp
   10962:	89 e5                	mov    %esp,%ebp
   10964:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10967:	83 ec 08             	sub    $0x8,%esp
   1096a:	6a 01                	push   $0x1
   1096c:	68 00 60 01 00       	push   $0x16000
   10971:	e8 3f fa ff ff       	call   103b5 <addr_alloc_page>
   10976:	83 c4 10             	add    $0x10,%esp
   10979:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   1097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1097f:	c9                   	leave  
   10980:	c3                   	ret    

00010981 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10981:	55                   	push   %ebp
   10982:	89 e5                	mov    %esp,%ebp
   10984:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10987:	e8 66 07 00 00       	call   110f2 <task_current>
   1098c:	8b 40 64             	mov    0x64(%eax),%eax
}
   1098f:	c9                   	leave  
   10990:	c3                   	ret    

00010991 <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10991:	55                   	push   %ebp
   10992:	89 e5                	mov    %esp,%ebp
   10994:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10997:	8b 45 08             	mov    0x8(%ebp),%eax
   1099a:	85 c0                	test   %eax,%eax
   1099c:	78 17                	js     109b5 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   1099e:	83 ec 04             	sub    $0x4,%esp
   109a1:	6a 01                	push   $0x1
   109a3:	ff 75 08             	push   0x8(%ebp)
   109a6:	68 00 60 01 00       	push   $0x16000
   109ab:	e8 6c fa ff ff       	call   1041c <addr_free_page>
   109b0:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

   109b3:	eb 72                	jmp    10a27 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   109b5:	e8 c7 ff ff ff       	call   10981 <curr_page_dir>
   109ba:	83 ec 04             	sub    $0x4,%esp
   109bd:	6a 00                	push   $0x0
   109bf:	ff 75 08             	push   0x8(%ebp)
   109c2:	50                   	push   %eax
   109c3:	e8 52 fb ff ff       	call   1051a <find_pte>
   109c8:	83 c4 10             	add    $0x10,%esp
   109cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   109ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109d2:	74 0d                	je     109e1 <memory_free_page+0x50>
   109d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d7:	0f b6 00             	movzbl (%eax),%eax
   109da:	83 e0 01             	and    $0x1,%eax
   109dd:	84 c0                	test   %al,%al
   109df:	75 1c                	jne    109fd <memory_free_page+0x6c>
   109e1:	68 44 38 01 00       	push   $0x13844
   109e6:	68 88 38 01 00       	push   $0x13888
   109eb:	68 8c 01 00 00       	push   $0x18c
   109f0:	68 6c 37 01 00       	push   $0x1376c
   109f5:	e8 5a 1f 00 00       	call   12954 <pannic>
   109fa:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   109fd:	83 ec 0c             	sub    $0xc,%esp
   10a00:	ff 75 f4             	push   -0xc(%ebp)
   10a03:	e8 18 f9 ff ff       	call   10320 <pte_to_pg_addr>
   10a08:	83 c4 10             	add    $0x10,%esp
   10a0b:	83 ec 04             	sub    $0x4,%esp
   10a0e:	6a 01                	push   $0x1
   10a10:	50                   	push   %eax
   10a11:	68 00 60 01 00       	push   $0x16000
   10a16:	e8 01 fa ff ff       	call   1041c <addr_free_page>
   10a1b:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10a27:	90                   	nop
   10a28:	c9                   	leave  
   10a29:	c3                   	ret    

00010a2a <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10a2a:	55                   	push   %ebp
   10a2b:	89 e5                	mov    %esp,%ebp
   10a2d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a34:	75 19                	jne    10a4f <list_node_init+0x25>
   10a36:	68 9c 38 01 00       	push   $0x1389c
   10a3b:	68 88 39 01 00       	push   $0x13988
   10a40:	6a 20                	push   $0x20
   10a42:	68 b4 38 01 00       	push   $0x138b4
   10a47:	e8 08 1f 00 00       	call   12954 <pannic>
   10a4c:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10a4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10a59:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5c:	8b 50 04             	mov    0x4(%eax),%edx
   10a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a62:	89 10                	mov    %edx,(%eax)
}
   10a64:	90                   	nop
   10a65:	c9                   	leave  
   10a66:	c3                   	ret    

00010a67 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10a67:	55                   	push   %ebp
   10a68:	89 e5                	mov    %esp,%ebp
   10a6a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a6d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a71:	75 19                	jne    10a8c <list_node_next+0x25>
   10a73:	68 9c 38 01 00       	push   $0x1389c
   10a78:	68 f8 39 01 00       	push   $0x139f8
   10a7d:	6a 2b                	push   $0x2b
   10a7f:	68 b4 38 01 00       	push   $0x138b4
   10a84:	e8 cb 1e 00 00       	call   12954 <pannic>
   10a89:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8f:	8b 40 04             	mov    0x4(%eax),%eax
}
   10a92:	c9                   	leave  
   10a93:	c3                   	ret    

00010a94 <list_init>:

static inline void list_init(list_t *list) {
   10a94:	55                   	push   %ebp
   10a95:	89 e5                	mov    %esp,%ebp
   10a97:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10a9a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a9e:	75 19                	jne    10ab9 <list_init+0x25>
   10aa0:	68 f2 38 01 00       	push   $0x138f2
   10aa5:	68 98 39 01 00       	push   $0x13998
   10aaa:	6a 31                	push   $0x31
   10aac:	68 b4 38 01 00       	push   $0x138b4
   10ab1:	e8 9e 1e 00 00       	call   12954 <pannic>
   10ab6:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   10abc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ac3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac6:	8b 50 04             	mov    0x4(%eax),%edx
   10ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   10acc:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10ace:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10ad8:	90                   	nop
   10ad9:	c9                   	leave  
   10ada:	c3                   	ret    

00010adb <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10adb:	55                   	push   %ebp
   10adc:	89 e5                	mov    %esp,%ebp
   10ade:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10ae1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ae5:	75 19                	jne    10b00 <list_is_empty+0x25>
   10ae7:	68 f2 38 01 00       	push   $0x138f2
   10aec:	68 08 3a 01 00       	push   $0x13a08
   10af1:	6a 38                	push   $0x38
   10af3:	68 b4 38 01 00       	push   $0x138b4
   10af8:	e8 57 1e 00 00       	call   12954 <pannic>
   10afd:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10b00:	8b 45 08             	mov    0x8(%ebp),%eax
   10b03:	8b 40 08             	mov    0x8(%eax),%eax
   10b06:	85 c0                	test   %eax,%eax
   10b08:	0f 94 c0             	sete   %al
   10b0b:	0f b6 c0             	movzbl %al,%eax
}
   10b0e:	c9                   	leave  
   10b0f:	c3                   	ret    

00010b10 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10b10:	55                   	push   %ebp
   10b11:	89 e5                	mov    %esp,%ebp
   10b13:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b1a:	75 19                	jne    10b35 <list_get_size+0x25>
   10b1c:	68 f2 38 01 00       	push   $0x138f2
   10b21:	68 e8 39 01 00       	push   $0x139e8
   10b26:	6a 3e                	push   $0x3e
   10b28:	68 b4 38 01 00       	push   $0x138b4
   10b2d:	e8 22 1e 00 00       	call   12954 <pannic>
   10b32:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10b35:	8b 45 08             	mov    0x8(%ebp),%eax
   10b38:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b3b:	c9                   	leave  
   10b3c:	c3                   	ret    

00010b3d <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10b3d:	55                   	push   %ebp
   10b3e:	89 e5                	mov    %esp,%ebp
   10b40:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b47:	75 19                	jne    10b62 <list_get_first+0x25>
   10b49:	68 f2 38 01 00       	push   $0x138f2
   10b4e:	68 d8 39 01 00       	push   $0x139d8
   10b53:	6a 44                	push   $0x44
   10b55:	68 b4 38 01 00       	push   $0x138b4
   10b5a:	e8 f5 1d 00 00       	call   12954 <pannic>
   10b5f:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	8b 00                	mov    (%eax),%eax
}
   10b67:	c9                   	leave  
   10b68:	c3                   	ret    

00010b69 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10b69:	55                   	push   %ebp
   10b6a:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10b6c:	8b 55 08             	mov    0x8(%ebp),%edx
   10b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b72:	01 d0                	add    %edx,%eax
   10b74:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b77:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b7a:	f7 d8                	neg    %eax
   10b7c:	21 d0                	and    %edx,%eax
}
   10b7e:	5d                   	pop    %ebp
   10b7f:	c3                   	ret    

00010b80 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10b80:	55                   	push   %ebp
   10b81:	89 e5                	mov    %esp,%ebp
   10b83:	f4                   	hlt    
   10b84:	90                   	nop
   10b85:	5d                   	pop    %ebp
   10b86:	c3                   	ret    

00010b87 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10b87:	55                   	push   %ebp
   10b88:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8d:	0f 22 d8             	mov    %eax,%cr3
}
   10b90:	90                   	nop
   10b91:	5d                   	pop    %ebp
   10b92:	c3                   	ret    

00010b93 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10b93:	55                   	push   %ebp
   10b94:	89 e5                	mov    %esp,%ebp
   10b96:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10b99:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b9c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba2:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10ba5:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10ba8:	ff 28                	ljmp   *(%eax)
}
   10baa:	90                   	nop
   10bab:	c9                   	leave  
   10bac:	c3                   	ret    

00010bad <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10bad:	55                   	push   %ebp
   10bae:	89 e5                	mov    %esp,%ebp
   10bb0:	83 ec 04             	sub    $0x4,%esp
   10bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10bba:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bbe:	0f 00 d8             	ltr    %ax
}
   10bc1:	90                   	nop
   10bc2:	c9                   	leave  
   10bc3:	c3                   	ret    

00010bc4 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10bc4:	55                   	push   %ebp
   10bc5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10bc7:	ff 75 08             	push   0x8(%ebp)
   10bca:	e8 b8 ff ff ff       	call   10b87 <write_cr3>
   10bcf:	83 c4 04             	add    $0x4,%esp
}
   10bd2:	90                   	nop
   10bd3:	c9                   	leave  
   10bd4:	c3                   	ret    

00010bd5 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10bd5:	55                   	push   %ebp
   10bd6:	89 e5                	mov    %esp,%ebp
   10bd8:	83 ec 04             	sub    $0x4,%esp
   10bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bde:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10be2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10be6:	6a 00                	push   $0x0
   10be8:	50                   	push   %eax
   10be9:	e8 a5 ff ff ff       	call   10b93 <far_jump>
   10bee:	83 c4 08             	add    $0x8,%esp
}
   10bf1:	90                   	nop
   10bf2:	c9                   	leave  
   10bf3:	c3                   	ret    

00010bf4 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10bf4:	55                   	push   %ebp
   10bf5:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10bf7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bfa:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10c00:	0f b7 c0             	movzwl %ax,%eax
   10c03:	50                   	push   %eax
   10c04:	e8 cc ff ff ff       	call   10bd5 <switch_to_tss>
   10c09:	83 c4 04             	add    $0x4,%esp
}
   10c0c:	90                   	nop
   10c0d:	c9                   	leave  
   10c0e:	c3                   	ret    

00010c0f <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   10c0f:	55                   	push   %ebp
   10c10:	89 e5                	mov    %esp,%ebp
   10c12:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10c15:	e8 9e 09 00 00       	call   115b8 <gdt_alloc_desc>
   10c1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10c1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c20:	83 c0 48             	add    $0x48,%eax
   10c23:	89 c2                	mov    %eax,%edx
   10c25:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c28:	0f b7 c0             	movzwl %ax,%eax
   10c2b:	68 89 00 00 00       	push   $0x89
   10c30:	6a 68                	push   $0x68
   10c32:	52                   	push   %edx
   10c33:	50                   	push   %eax
   10c34:	e8 0d 08 00 00       	call   11446 <segment_desc_set>
   10c39:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10c3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3f:	83 c0 48             	add    $0x48,%eax
   10c42:	83 ec 04             	sub    $0x4,%esp
   10c45:	6a 68                	push   $0x68
   10c47:	6a 00                	push   $0x0
   10c49:	50                   	push   %eax
   10c4a:	e8 07 22 00 00       	call   12e56 <kernel_memset>
   10c4f:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10c52:	8b 45 08             	mov    0x8(%ebp),%eax
   10c55:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c58:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   10c5e:	8b 45 14             	mov    0x14(%ebp),%eax
   10c61:	83 e0 01             	and    $0x1,%eax
   10c64:	85 c0                	test   %eax,%eax
   10c66:	74 10                	je     10c78 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   10c68:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   10c6f:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c76:	eb 16                	jmp    10c8e <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   10c78:	a1 90 81 01 00       	mov    0x18190,%eax
   10c7d:	83 c8 03             	or     $0x3,%eax
   10c80:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   10c83:	a1 94 81 01 00       	mov    0x18194,%eax
   10c88:	83 c8 03             	or     $0x3,%eax
   10c8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10c8e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c91:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c94:	89 50 68             	mov    %edx,0x68(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   10c97:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9a:	8b 55 10             	mov    0x10(%ebp),%edx
   10c9d:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   10ca3:	e8 b9 fc ff ff       	call   10961 <memory_alloc_page>
   10ca8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   10cab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10caf:	0f 84 9b 00 00 00    	je     10d50 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   10cb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cb8:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cbe:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc1:	89 50 4c             	mov    %edx,0x4c(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   10cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cca:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   10cd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd3:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10cda:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ce0:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10ce6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce9:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10cef:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf2:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cfb:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d01:	8b 45 08             	mov    0x8(%ebp),%eax
   10d04:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10d0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0d:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d13:	8b 45 08             	mov    0x8(%ebp),%eax
   10d16:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10d1c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d22:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10d28:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2b:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10d32:	e8 d2 f9 ff ff       	call   10709 <memory_creat_uvm>
   10d37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   10d3a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d3e:	74 13                	je     10d53 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   10d40:	8b 45 08             	mov    0x8(%ebp),%eax
   10d43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d46:	89 50 64             	mov    %edx,0x64(%eax)
    
    return 0;
   10d49:	b8 00 00 00 00       	mov    $0x0,%eax
   10d4e:	eb 2f                	jmp    10d7f <tss_init+0x170>
        goto tss_init_failed;   
   10d50:	90                   	nop
   10d51:	eb 01                	jmp    10d54 <tss_init+0x145>
        goto tss_init_failed;
   10d53:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   10d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d57:	0f b7 c0             	movzwl %ax,%eax
   10d5a:	83 ec 0c             	sub    $0xc,%esp
   10d5d:	50                   	push   %eax
   10d5e:	e8 ca 08 00 00       	call   1162d <gdt_free>
   10d63:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   10d66:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d6a:	74 0e                	je     10d7a <tss_init+0x16b>
        memory_free_page(kernel_stack);
   10d6c:	83 ec 0c             	sub    $0xc,%esp
   10d6f:	ff 75 e8             	push   -0x18(%ebp)
   10d72:	e8 1a fc ff ff       	call   10991 <memory_free_page>
   10d77:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d7a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d7f:	c9                   	leave  
   10d80:	c3                   	ret    

00010d81 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   10d81:	55                   	push   %ebp
   10d82:	89 e5                	mov    %esp,%ebp
   10d84:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10d87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d8b:	75 1c                	jne    10da9 <task_init+0x28>
   10d8d:	68 05 39 01 00       	push   $0x13905
   10d92:	68 7c 39 01 00       	push   $0x1397c
   10d97:	68 86 00 00 00       	push   $0x86
   10d9c:	68 18 39 01 00       	push   $0x13918
   10da1:	e8 ae 1b 00 00       	call   12954 <pannic>
   10da6:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp, flag);
   10da9:	ff 75 18             	push   0x18(%ebp)
   10dac:	ff 75 14             	push   0x14(%ebp)
   10daf:	ff 75 10             	push   0x10(%ebp)
   10db2:	ff 75 08             	push   0x8(%ebp)
   10db5:	e8 55 fe ff ff       	call   10c0f <tss_init>
   10dba:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10dbd:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc0:	83 c0 10             	add    $0x10,%eax
   10dc3:	83 ec 04             	sub    $0x4,%esp
   10dc6:	6a 20                	push   $0x20
   10dc8:	ff 75 0c             	push   0xc(%ebp)
   10dcb:	50                   	push   %eax
   10dcc:	e8 46 1f 00 00       	call   12d17 <kernel_strncpy>
   10dd1:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10dd4:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd7:	83 c0 30             	add    $0x30,%eax
   10dda:	83 ec 0c             	sub    $0xc,%esp
   10ddd:	50                   	push   %eax
   10dde:	e8 47 fc ff ff       	call   10a2a <list_node_init>
   10de3:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10de6:	8b 45 08             	mov    0x8(%ebp),%eax
   10de9:	83 c0 38             	add    $0x38,%eax
   10dec:	83 ec 0c             	sub    $0xc,%esp
   10def:	50                   	push   %eax
   10df0:	e8 35 fc ff ff       	call   10a2a <list_node_init>
   10df5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10df8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfb:	83 c0 40             	add    $0x40,%eax
   10dfe:	83 ec 0c             	sub    $0xc,%esp
   10e01:	50                   	push   %eax
   10e02:	e8 23 fc ff ff       	call   10a2a <list_node_init>
   10e07:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0d:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10e14:	8b 45 08             	mov    0x8(%ebp),%eax
   10e17:	8b 50 08             	mov    0x8(%eax),%edx
   10e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1d:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10e20:	8b 45 08             	mov    0x8(%ebp),%eax
   10e23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10e2a:	e8 b4 11 00 00       	call   11fe3 <idt_enter_protection>
   10e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10e32:	8b 45 08             	mov    0x8(%ebp),%eax
   10e35:	83 c0 38             	add    $0x38,%eax
   10e38:	83 ec 08             	sub    $0x8,%esp
   10e3b:	50                   	push   %eax
   10e3c:	68 10 80 01 00       	push   $0x18010
   10e41:	e8 59 24 00 00       	call   1329f <list_insert_last>
   10e46:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10e49:	83 ec 0c             	sub    $0xc,%esp
   10e4c:	ff 75 08             	push   0x8(%ebp)
   10e4f:	e8 da 01 00 00       	call   1102e <task_set_ready>
   10e54:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10e57:	83 ec 0c             	sub    $0xc,%esp
   10e5a:	ff 75 f4             	push   -0xc(%ebp)
   10e5d:	e8 99 11 00 00       	call   11ffb <idt_leave_protection>
   10e62:	83 c4 10             	add    $0x10,%esp
}
   10e65:	90                   	nop
   10e66:	c9                   	leave  
   10e67:	c3                   	ret    

00010e68 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10e68:	55                   	push   %ebp
   10e69:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10e6b:	e8 10 fd ff ff       	call   10b80 <hlt>
   10e70:	eb f9                	jmp    10e6b <empty_task+0x3>

00010e72 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10e72:	55                   	push   %ebp
   10e73:	89 e5                	mov    %esp,%ebp
   10e75:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   10e78:	e8 3b 07 00 00       	call   115b8 <gdt_alloc_desc>
   10e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   10e80:	e8 33 07 00 00       	call   115b8 <gdt_alloc_desc>
   10e85:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e8b:	0f b7 c0             	movzwl %ax,%eax
   10e8e:	68 f2 40 00 00       	push   $0x40f2
   10e93:	6a ff                	push   $0xffffffff
   10e95:	6a 00                	push   $0x0
   10e97:	50                   	push   %eax
   10e98:	e8 a9 05 00 00       	call   11446 <segment_desc_set>
   10e9d:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10ea0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ea3:	0f b7 c0             	movzwl %ax,%eax
   10ea6:	68 fa 40 00 00       	push   $0x40fa
   10eab:	6a ff                	push   $0xffffffff
   10ead:	6a 00                	push   $0x0
   10eaf:	50                   	push   %eax
   10eb0:	e8 91 05 00 00       	call   11446 <segment_desc_set>
   10eb5:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   10eb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ebb:	a3 90 81 01 00       	mov    %eax,0x18190
    task_manager.app_data_selector = data_selector;
   10ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ec3:	a3 94 81 01 00       	mov    %eax,0x18194
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	68 04 80 01 00       	push   $0x18004
   10ed0:	e8 bf fb ff ff       	call   10a94 <list_init>
   10ed5:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10ed8:	83 ec 0c             	sub    $0xc,%esp
   10edb:	68 10 80 01 00       	push   $0x18010
   10ee0:	e8 af fb ff ff       	call   10a94 <list_init>
   10ee5:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10ee8:	83 ec 0c             	sub    $0xc,%esp
   10eeb:	68 1c 80 01 00       	push   $0x1801c
   10ef0:	e8 9f fb ff ff       	call   10a94 <list_init>
   10ef5:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10ef8:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10eff:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10f02:	ba a0 83 01 00       	mov    $0x183a0,%edx
   10f07:	b8 68 0e 01 00       	mov    $0x10e68,%eax
   10f0c:	83 ec 0c             	sub    $0xc,%esp
   10f0f:	6a 01                	push   $0x1
   10f11:	52                   	push   %edx
   10f12:	50                   	push   %eax
   10f13:	68 4d 39 01 00       	push   $0x1394d
   10f18:	68 dc 80 01 00       	push   $0x180dc
   10f1d:	e8 5f fe ff ff       	call   10d81 <task_init>
   10f22:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 

    //5.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10f25:	83 ec 0c             	sub    $0xc,%esp
   10f28:	68 dc 80 01 00       	push   $0x180dc
   10f2d:	e8 47 01 00 00       	call   11079 <task_set_unready>
   10f32:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10f35:	c7 05 dc 80 01 00 00 	movl   $0x0,0x180dc
   10f3c:	00 00 00 

  
}
   10f3f:	90                   	nop
   10f40:	c9                   	leave  
   10f41:	c3                   	ret    

00010f42 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   10f42:	55                   	push   %ebp
   10f43:	89 e5                	mov    %esp,%ebp
   10f45:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   10f48:	b8 93 d0 02 00       	mov    $0x2d093,%eax
   10f4d:	2d 00 d0 02 00       	sub    $0x2d000,%eax
   10f52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   10f55:	68 00 10 00 00       	push   $0x1000
   10f5a:	ff 75 f4             	push   -0xc(%ebp)
   10f5d:	e8 07 fc ff ff       	call   10b69 <up2>
   10f62:	83 c4 08             	add    $0x8,%esp
   10f65:	05 00 a0 00 00       	add    $0xa000,%eax
   10f6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10f73:	72 1c                	jb     10f91 <task_first_init+0x4f>
   10f75:	68 58 39 01 00       	push   $0x13958
   10f7a:	68 a4 39 01 00       	push   $0x139a4
   10f7f:	68 09 01 00 00       	push   $0x109
   10f84:	68 18 39 01 00       	push   $0x13918
   10f89:	e8 c6 19 00 00       	call   12954 <pannic>
   10f8e:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start = (uint32_t)first_task_entry;
   10f91:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start, task_start + alloc_size, TASK_FLAGS_USER);
   10f98:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9e:	01 d0                	add    %edx,%eax
   10fa0:	83 ec 0c             	sub    $0xc,%esp
   10fa3:	6a 00                	push   $0x0
   10fa5:	50                   	push   %eax
   10fa6:	ff 75 ec             	push   -0x14(%ebp)
   10fa9:	68 6f 39 01 00       	push   $0x1396f
   10fae:	68 28 80 01 00       	push   $0x18028
   10fb3:	e8 c9 fd ff ff       	call   10d81 <task_init>
   10fb8:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   10fbb:	a1 d8 80 01 00       	mov    0x180d8,%eax
   10fc0:	0f b7 c0             	movzwl %ax,%eax
   10fc3:	83 ec 0c             	sub    $0xc,%esp
   10fc6:	50                   	push   %eax
   10fc7:	e8 e1 fb ff ff       	call   10bad <write_tr>
   10fcc:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   10fcf:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   10fd6:	80 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10fd9:	a1 8c 80 01 00       	mov    0x1808c,%eax
   10fde:	83 ec 0c             	sub    $0xc,%esp
   10fe1:	50                   	push   %eax
   10fe2:	e8 dd fb ff ff       	call   10bc4 <mmu_set_page_dir>
   10fe7:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   10fea:	a1 00 80 01 00       	mov    0x18000,%eax
   10fef:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10ff5:	83 ec 04             	sub    $0x4,%esp
   10ff8:	6a 07                	push   $0x7
   10ffa:	ff 75 f0             	push   -0x10(%ebp)
   10ffd:	ff 75 ec             	push   -0x14(%ebp)
   11000:	e8 3a f9 ff ff       	call   1093f <memory_alloc_page_for>
   11005:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   11008:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1100b:	83 ec 04             	sub    $0x4,%esp
   1100e:	50                   	push   %eax
   1100f:	68 00 d0 02 00       	push   $0x2d000
   11014:	68 00 00 00 80       	push   $0x80000000
   11019:	e8 e9 1d 00 00       	call   12e07 <kernel_memcpy>
   1101e:	83 c4 10             	add    $0x10,%esp
}
   11021:	90                   	nop
   11022:	c9                   	leave  
   11023:	c3                   	ret    

00011024 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   11024:	55                   	push   %ebp
   11025:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11027:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   1102c:	5d                   	pop    %ebp
   1102d:	c3                   	ret    

0001102e <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   1102e:	55                   	push   %ebp
   1102f:	89 e5                	mov    %esp,%ebp
   11031:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11034:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11038:	75 1c                	jne    11056 <task_set_ready+0x28>
   1103a:	68 05 39 01 00       	push   $0x13905
   1103f:	68 b4 39 01 00       	push   $0x139b4
   11044:	68 33 01 00 00       	push   $0x133
   11049:	68 18 39 01 00       	push   $0x13918
   1104e:	e8 01 19 00 00       	call   12954 <pannic>
   11053:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   11056:	8b 45 08             	mov    0x8(%ebp),%eax
   11059:	83 c0 30             	add    $0x30,%eax
   1105c:	83 ec 08             	sub    $0x8,%esp
   1105f:	50                   	push   %eax
   11060:	68 04 80 01 00       	push   $0x18004
   11065:	e8 35 22 00 00       	call   1329f <list_insert_last>
   1106a:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1106d:	8b 45 08             	mov    0x8(%ebp),%eax
   11070:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11076:	90                   	nop
   11077:	c9                   	leave  
   11078:	c3                   	ret    

00011079 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11079:	55                   	push   %ebp
   1107a:	89 e5                	mov    %esp,%ebp
   1107c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1107f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11083:	75 1c                	jne    110a1 <task_set_unready+0x28>
   11085:	68 05 39 01 00       	push   $0x13905
   1108a:	68 c4 39 01 00       	push   $0x139c4
   1108f:	68 42 01 00 00       	push   $0x142
   11094:	68 18 39 01 00       	push   $0x13918
   11099:	e8 b6 18 00 00       	call   12954 <pannic>
   1109e:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   110a1:	8b 45 08             	mov    0x8(%ebp),%eax
   110a4:	83 c0 30             	add    $0x30,%eax
   110a7:	83 ec 08             	sub    $0x8,%esp
   110aa:	50                   	push   %eax
   110ab:	68 04 80 01 00       	push   $0x18004
   110b0:	e8 df 23 00 00       	call   13494 <list_remove>
   110b5:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   110b8:	8b 45 08             	mov    0x8(%ebp),%eax
   110bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   110c1:	90                   	nop
   110c2:	c9                   	leave  
   110c3:	c3                   	ret    

000110c4 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   110c4:	55                   	push   %ebp
   110c5:	89 e5                	mov    %esp,%ebp
   110c7:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   110ca:	83 ec 0c             	sub    $0xc,%esp
   110cd:	68 04 80 01 00       	push   $0x18004
   110d2:	e8 66 fa ff ff       	call   10b3d <list_get_first>
   110d7:	83 c4 10             	add    $0x10,%esp
   110da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   110dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   110e1:	74 08                	je     110eb <task_ready_first+0x27>
   110e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110e6:	83 e8 30             	sub    $0x30,%eax
   110e9:	eb 05                	jmp    110f0 <task_ready_first+0x2c>
   110eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110f0:	c9                   	leave  
   110f1:	c3                   	ret    

000110f2 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   110f2:	55                   	push   %ebp
   110f3:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   110f5:	a1 00 80 01 00       	mov    0x18000,%eax
}
   110fa:	5d                   	pop    %ebp
   110fb:	c3                   	ret    

000110fc <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   110fc:	55                   	push   %ebp
   110fd:	89 e5                	mov    %esp,%ebp
   110ff:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11102:	e8 dc 0e 00 00       	call   11fe3 <idt_enter_protection>
   11107:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   1110a:	e8 b5 ff ff ff       	call   110c4 <task_ready_first>
   1110f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   11112:	a1 00 80 01 00       	mov    0x18000,%eax
   11117:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1111a:	74 37                	je     11153 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   1111c:	a1 00 80 01 00       	mov    0x18000,%eax
   11121:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   11124:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11128:	75 07                	jne    11131 <task_switch+0x35>
            to = &task_manager.empty_task;
   1112a:	c7 45 f4 dc 80 01 00 	movl   $0x180dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   11131:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11134:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   1113a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1113d:	a3 00 80 01 00       	mov    %eax,0x18000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   11142:	83 ec 08             	sub    $0x8,%esp
   11145:	ff 75 f4             	push   -0xc(%ebp)
   11148:	ff 75 ec             	push   -0x14(%ebp)
   1114b:	e8 a4 fa ff ff       	call   10bf4 <task_switch_from_to>
   11150:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   11153:	83 ec 0c             	sub    $0xc,%esp
   11156:	ff 75 f0             	push   -0x10(%ebp)
   11159:	e8 9d 0e 00 00       	call   11ffb <idt_leave_protection>
   1115e:	83 c4 10             	add    $0x10,%esp
}
   11161:	90                   	nop
   11162:	c9                   	leave  
   11163:	c3                   	ret    

00011164 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11164:	55                   	push   %ebp
   11165:	89 e5                	mov    %esp,%ebp
   11167:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1116a:	e8 74 0e 00 00       	call   11fe3 <idt_enter_protection>
   1116f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11172:	83 ec 0c             	sub    $0xc,%esp
   11175:	68 04 80 01 00       	push   $0x18004
   1117a:	e8 91 f9 ff ff       	call   10b10 <list_get_size>
   1117f:	83 c4 10             	add    $0x10,%esp
   11182:	83 f8 01             	cmp    $0x1,%eax
   11185:	7e 29                	jle    111b0 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11187:	e8 66 ff ff ff       	call   110f2 <task_current>
   1118c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1118f:	83 ec 0c             	sub    $0xc,%esp
   11192:	ff 75 f0             	push   -0x10(%ebp)
   11195:	e8 df fe ff ff       	call   11079 <task_set_unready>
   1119a:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1119d:	83 ec 0c             	sub    $0xc,%esp
   111a0:	ff 75 f0             	push   -0x10(%ebp)
   111a3:	e8 86 fe ff ff       	call   1102e <task_set_ready>
   111a8:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   111ab:	e8 4c ff ff ff       	call   110fc <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   111b0:	83 ec 0c             	sub    $0xc,%esp
   111b3:	ff 75 f4             	push   -0xc(%ebp)
   111b6:	e8 40 0e 00 00       	call   11ffb <idt_leave_protection>
   111bb:	83 c4 10             	add    $0x10,%esp
    return 0;
   111be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111c3:	c9                   	leave  
   111c4:	c3                   	ret    

000111c5 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   111c5:	55                   	push   %ebp
   111c6:	89 e5                	mov    %esp,%ebp
   111c8:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   111cb:	83 ec 0c             	sub    $0xc,%esp
   111ce:	68 1c 80 01 00       	push   $0x1801c
   111d3:	e8 65 f9 ff ff       	call   10b3d <list_get_first>
   111d8:	83 c4 10             	add    $0x10,%esp
   111db:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   111de:	eb 62                	jmp    11242 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   111e0:	83 ec 0c             	sub    $0xc,%esp
   111e3:	ff 75 f4             	push   -0xc(%ebp)
   111e6:	e8 7c f8 ff ff       	call   10a67 <list_node_next>
   111eb:	83 c4 10             	add    $0x10,%esp
   111ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   111f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111f5:	74 08                	je     111ff <task_slice_end+0x3a>
   111f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111fa:	83 e8 30             	sub    $0x30,%eax
   111fd:	eb 05                	jmp    11204 <task_slice_end+0x3f>
   111ff:	b8 00 00 00 00       	mov    $0x0,%eax
   11204:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11207:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1120a:	8b 40 0c             	mov    0xc(%eax),%eax
   1120d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11210:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11213:	89 50 0c             	mov    %edx,0xc(%eax)
   11216:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11219:	8b 40 0c             	mov    0xc(%eax),%eax
   1121c:	85 c0                	test   %eax,%eax
   1121e:	75 1c                	jne    1123c <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11220:	83 ec 0c             	sub    $0xc,%esp
   11223:	ff 75 e8             	push   -0x18(%ebp)
   11226:	e8 01 01 00 00       	call   1132c <task_set_wakeup>
   1122b:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   1122e:	83 ec 0c             	sub    $0xc,%esp
   11231:	ff 75 e8             	push   -0x18(%ebp)
   11234:	e8 f5 fd ff ff       	call   1102e <task_set_ready>
   11239:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1123c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1123f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11242:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11246:	75 98                	jne    111e0 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11248:	e8 a5 fe ff ff       	call   110f2 <task_current>
   1124d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   11250:	81 7d f0 dc 80 01 00 	cmpl   $0x180dc,-0x10(%ebp)
   11257:	75 23                	jne    1127c <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11259:	83 ec 0c             	sub    $0xc,%esp
   1125c:	68 04 80 01 00       	push   $0x18004
   11261:	e8 75 f8 ff ff       	call   10adb <list_is_empty>
   11266:	83 c4 10             	add    $0x10,%esp
   11269:	85 c0                	test   %eax,%eax
   1126b:	75 60                	jne    112cd <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1126d:	c7 05 dc 80 01 00 00 	movl   $0x0,0x180dc
   11274:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11277:	e8 80 fe ff ff       	call   110fc <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   1127c:	81 7d f0 dc 80 01 00 	cmpl   $0x180dc,-0x10(%ebp)
   11283:	74 49                	je     112ce <task_slice_end+0x109>
   11285:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11288:	8b 40 08             	mov    0x8(%eax),%eax
   1128b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1128e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11291:	89 50 08             	mov    %edx,0x8(%eax)
   11294:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11297:	8b 40 08             	mov    0x8(%eax),%eax
   1129a:	85 c0                	test   %eax,%eax
   1129c:	75 30                	jne    112ce <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1129e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112a1:	8b 50 04             	mov    0x4(%eax),%edx
   112a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112a7:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   112aa:	83 ec 0c             	sub    $0xc,%esp
   112ad:	ff 75 f0             	push   -0x10(%ebp)
   112b0:	e8 c4 fd ff ff       	call   11079 <task_set_unready>
   112b5:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   112b8:	83 ec 0c             	sub    $0xc,%esp
   112bb:	ff 75 f0             	push   -0x10(%ebp)
   112be:	e8 6b fd ff ff       	call   1102e <task_set_ready>
   112c3:	83 c4 10             	add    $0x10,%esp
        task_switch();
   112c6:	e8 31 fe ff ff       	call   110fc <task_switch>
   112cb:	eb 01                	jmp    112ce <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   112cd:	90                   	nop
    }
}
   112ce:	c9                   	leave  
   112cf:	c3                   	ret    

000112d0 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   112d0:	55                   	push   %ebp
   112d1:	89 e5                	mov    %esp,%ebp
   112d3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   112d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112da:	75 1c                	jne    112f8 <task_set_sleep+0x28>
   112dc:	68 05 39 01 00       	push   $0x13905
   112e1:	68 18 3a 01 00       	push   $0x13a18
   112e6:	68 d0 01 00 00       	push   $0x1d0
   112eb:	68 18 39 01 00       	push   $0x13918
   112f0:	e8 5f 16 00 00       	call   12954 <pannic>
   112f5:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   112f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112fc:	74 2b                	je     11329 <task_set_sleep+0x59>

    task->sleep = slice;
   112fe:	8b 55 0c             	mov    0xc(%ebp),%edx
   11301:	8b 45 08             	mov    0x8(%ebp),%eax
   11304:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   11307:	8b 45 08             	mov    0x8(%ebp),%eax
   1130a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11310:	8b 45 08             	mov    0x8(%ebp),%eax
   11313:	83 c0 30             	add    $0x30,%eax
   11316:	83 ec 08             	sub    $0x8,%esp
   11319:	50                   	push   %eax
   1131a:	68 1c 80 01 00       	push   $0x1801c
   1131f:	e8 7b 1f 00 00       	call   1329f <list_insert_last>
   11324:	83 c4 10             	add    $0x10,%esp
   11327:	eb 01                	jmp    1132a <task_set_sleep+0x5a>
    if (slice == 0) return;
   11329:	90                   	nop
}
   1132a:	c9                   	leave  
   1132b:	c3                   	ret    

0001132c <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   1132c:	55                   	push   %ebp
   1132d:	89 e5                	mov    %esp,%ebp
   1132f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11332:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11336:	75 1c                	jne    11354 <task_set_wakeup+0x28>
   11338:	68 05 39 01 00       	push   $0x13905
   1133d:	68 28 3a 01 00       	push   $0x13a28
   11342:	68 de 01 00 00       	push   $0x1de
   11347:	68 18 39 01 00       	push   $0x13918
   1134c:	e8 03 16 00 00       	call   12954 <pannic>
   11351:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11354:	8b 45 08             	mov    0x8(%ebp),%eax
   11357:	83 c0 30             	add    $0x30,%eax
   1135a:	83 ec 08             	sub    $0x8,%esp
   1135d:	50                   	push   %eax
   1135e:	68 1c 80 01 00       	push   $0x1801c
   11363:	e8 2c 21 00 00       	call   13494 <list_remove>
   11368:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1136b:	8b 45 08             	mov    0x8(%ebp),%eax
   1136e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11374:	90                   	nop
   11375:	c9                   	leave  
   11376:	c3                   	ret    

00011377 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11377:	55                   	push   %ebp
   11378:	89 e5                	mov    %esp,%ebp
   1137a:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1137d:	e8 61 0c 00 00       	call   11fe3 <idt_enter_protection>
   11382:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11385:	e8 68 fd ff ff       	call   110f2 <task_current>
   1138a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   1138d:	83 ec 0c             	sub    $0xc,%esp
   11390:	ff 75 f0             	push   -0x10(%ebp)
   11393:	e8 e1 fc ff ff       	call   11079 <task_set_unready>
   11398:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   1139b:	8b 45 08             	mov    0x8(%ebp),%eax
   1139e:	83 c0 09             	add    $0x9,%eax
   113a1:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   113a6:	f7 e2                	mul    %edx
   113a8:	89 d0                	mov    %edx,%eax
   113aa:	c1 e8 03             	shr    $0x3,%eax
   113ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   113b0:	83 ec 08             	sub    $0x8,%esp
   113b3:	ff 75 ec             	push   -0x14(%ebp)
   113b6:	ff 75 f0             	push   -0x10(%ebp)
   113b9:	e8 12 ff ff ff       	call   112d0 <task_set_sleep>
   113be:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   113c1:	e8 36 fd ff ff       	call   110fc <task_switch>

    idt_leave_protection(state); //TODO:解锁
   113c6:	83 ec 0c             	sub    $0xc,%esp
   113c9:	ff 75 f4             	push   -0xc(%ebp)
   113cc:	e8 2a 0c 00 00       	call   11ffb <idt_leave_protection>
   113d1:	83 c4 10             	add    $0x10,%esp
   113d4:	90                   	nop
   113d5:	c9                   	leave  
   113d6:	c3                   	ret    

000113d7 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   113d7:	55                   	push   %ebp
   113d8:	89 e5                	mov    %esp,%ebp
   113da:	83 ec 08             	sub    $0x8,%esp
   113dd:	8b 55 0c             	mov    0xc(%ebp),%edx
   113e0:	8b 45 14             	mov    0x14(%ebp),%eax
   113e3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113e7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   113eb:	8b 45 10             	mov    0x10(%ebp),%eax
   113ee:	89 c2                	mov    %eax,%edx
   113f0:	8b 45 08             	mov    0x8(%ebp),%eax
   113f3:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   113f6:	8b 45 10             	mov    0x10(%ebp),%eax
   113f9:	c1 e8 10             	shr    $0x10,%eax
   113fc:	89 c2                	mov    %eax,%edx
   113fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11401:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11405:	8b 45 08             	mov    0x8(%ebp),%eax
   11408:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1140c:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11410:	8b 45 08             	mov    0x8(%ebp),%eax
   11413:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11417:	66 89 50 04          	mov    %dx,0x4(%eax)
   1141b:	90                   	nop
   1141c:	c9                   	leave  
   1141d:	c3                   	ret    

0001141e <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1141e:	55                   	push   %ebp
   1141f:	89 e5                	mov    %esp,%ebp
   11421:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   11424:	8b 45 08             	mov    0x8(%ebp),%eax
   11427:	c1 e8 10             	shr    $0x10,%eax
   1142a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1142e:	8b 45 08             	mov    0x8(%ebp),%eax
   11431:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11435:	8b 45 0c             	mov    0xc(%ebp),%eax
   11438:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   1143b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1143f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11443:	90                   	nop
   11444:	c9                   	leave  
   11445:	c3                   	ret    

00011446 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   11446:	55                   	push   %ebp
   11447:	89 e5                	mov    %esp,%ebp
   11449:	83 ec 18             	sub    $0x18,%esp
   1144c:	8b 55 08             	mov    0x8(%ebp),%edx
   1144f:	8b 45 14             	mov    0x14(%ebp),%eax
   11452:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11456:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   1145a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1145e:	66 c1 e8 03          	shr    $0x3,%ax
   11462:	0f b7 c0             	movzwl %ax,%eax
   11465:	c1 e0 03             	shl    $0x3,%eax
   11468:	05 a0 83 01 00       	add    $0x183a0,%eax
   1146d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   11470:	8b 45 0c             	mov    0xc(%ebp),%eax
   11473:	89 c2                	mov    %eax,%edx
   11475:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11478:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   1147c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1147f:	c1 e8 10             	shr    $0x10,%eax
   11482:	89 c2                	mov    %eax,%edx
   11484:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11487:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   1148a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1148d:	c1 e8 18             	shr    $0x18,%eax
   11490:	89 c2                	mov    %eax,%edx
   11492:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11495:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   11498:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1149f:	76 1d                	jbe    114be <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   114a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114a4:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114a8:	66 0d 00 80          	or     $0x8000,%ax
   114ac:	89 c2                	mov    %eax,%edx
   114ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b1:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   114b5:	8b 45 10             	mov    0x10(%ebp),%eax
   114b8:	c1 e8 0c             	shr    $0xc,%eax
   114bb:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   114be:	8b 45 10             	mov    0x10(%ebp),%eax
   114c1:	89 c2                	mov    %eax,%edx
   114c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114c6:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   114c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114cc:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114d0:	89 c2                	mov    %eax,%edx
   114d2:	8b 45 10             	mov    0x10(%ebp),%eax
   114d5:	c1 e8 08             	shr    $0x8,%eax
   114d8:	66 25 00 0f          	and    $0xf00,%ax
   114dc:	09 d0                	or     %edx,%eax
   114de:	89 c2                	mov    %eax,%edx
   114e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e3:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   114e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ea:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114ee:	89 c2                	mov    %eax,%edx
   114f0:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   114f4:	80 e4 f0             	and    $0xf0,%ah
   114f7:	09 d0                	or     %edx,%eax
   114f9:	89 c2                	mov    %eax,%edx
   114fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114fe:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11502:	90                   	nop
   11503:	c9                   	leave  
   11504:	c3                   	ret    

00011505 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11505:	55                   	push   %ebp
   11506:	89 e5                	mov    %esp,%ebp
   11508:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1150b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11512:	eb 1c                	jmp    11530 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11514:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11517:	c1 e0 03             	shl    $0x3,%eax
   1151a:	0f b7 c0             	movzwl %ax,%eax
   1151d:	6a 00                	push   $0x0
   1151f:	6a 00                	push   $0x0
   11521:	6a 00                	push   $0x0
   11523:	50                   	push   %eax
   11524:	e8 1d ff ff ff       	call   11446 <segment_desc_set>
   11529:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1152c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11530:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11537:	7e db                	jle    11514 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11539:	68 92 40 00 00       	push   $0x4092
   1153e:	6a ff                	push   $0xffffffff
   11540:	6a 00                	push   $0x0
   11542:	6a 10                	push   $0x10
   11544:	e8 fd fe ff ff       	call   11446 <segment_desc_set>
   11549:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   1154c:	c6 05 a2 83 02 00 01 	movb   $0x1,0x283a2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   11553:	68 9a 40 00 00       	push   $0x409a
   11558:	6a ff                	push   $0xffffffff
   1155a:	6a 00                	push   $0x0
   1155c:	6a 08                	push   $0x8
   1155e:	e8 e3 fe ff ff       	call   11446 <segment_desc_set>
   11563:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   11566:	c6 05 a1 83 02 00 01 	movb   $0x1,0x283a1

    //3.初始化调用门描述符
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   1156d:	ba ad 02 01 00       	mov    $0x102ad,%edx
   11572:	b8 b8 83 01 00       	mov    $0x183b8,%eax
   11577:	68 05 ec 00 00       	push   $0xec05
   1157c:	52                   	push   %edx
   1157d:	6a 08                	push   $0x8
   1157f:	50                   	push   %eax
   11580:	e8 52 fe ff ff       	call   113d7 <gate_desc_set>
   11585:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   11588:	c6 05 a3 83 02 00 01 	movb   $0x1,0x283a3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1158f:	b8 a0 83 01 00       	mov    $0x183a0,%eax
   11594:	83 ec 08             	sub    $0x8,%esp
   11597:	68 00 00 01 00       	push   $0x10000
   1159c:	50                   	push   %eax
   1159d:	e8 7c fe ff ff       	call   1141e <lgdt>
   115a2:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   115a5:	83 ec 0c             	sub    $0xc,%esp
   115a8:	68 a0 a3 02 00       	push   $0x2a3a0
   115ad:	e8 8d 0c 00 00       	call   1223f <mutex_init>
   115b2:	83 c4 10             	add    $0x10,%esp
}
   115b5:	90                   	nop
   115b6:	c9                   	leave  
   115b7:	c3                   	ret    

000115b8 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   115b8:	55                   	push   %ebp
   115b9:	89 e5                	mov    %esp,%ebp
   115bb:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   115be:	83 ec 0c             	sub    $0xc,%esp
   115c1:	68 a0 a3 02 00       	push   $0x2a3a0
   115c6:	e8 c1 0c 00 00       	call   1228c <mutex_lock>
   115cb:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   115ce:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   115d5:	eb 36                	jmp    1160d <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   115d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115da:	05 a0 83 02 00       	add    $0x283a0,%eax
   115df:	0f b6 00             	movzbl (%eax),%eax
   115e2:	84 c0                	test   %al,%al
   115e4:	75 23                	jne    11609 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   115e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115e9:	05 a0 83 02 00       	add    $0x283a0,%eax
   115ee:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   115f1:	83 ec 0c             	sub    $0xc,%esp
   115f4:	68 a0 a3 02 00       	push   $0x2a3a0
   115f9:	e8 1f 0d 00 00       	call   1231d <mutex_unlock>
   115fe:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   11601:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11604:	c1 e0 03             	shl    $0x3,%eax
   11607:	eb 22                	jmp    1162b <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11609:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1160d:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11614:	7e c1                	jle    115d7 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11616:	83 ec 0c             	sub    $0xc,%esp
   11619:	68 a0 a3 02 00       	push   $0x2a3a0
   1161e:	e8 fa 0c 00 00       	call   1231d <mutex_unlock>
   11623:	83 c4 10             	add    $0x10,%esp
    return -1;
   11626:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1162b:	c9                   	leave  
   1162c:	c3                   	ret    

0001162d <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   1162d:	55                   	push   %ebp
   1162e:	89 e5                	mov    %esp,%ebp
   11630:	83 ec 14             	sub    $0x14,%esp
   11633:	8b 45 08             	mov    0x8(%ebp),%eax
   11636:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   1163a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1163e:	66 c1 e8 03          	shr    $0x3,%ax
   11642:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   11646:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   1164a:	c6 80 a0 83 02 00 00 	movb   $0x0,0x283a0(%eax)
}
   11651:	90                   	nop
   11652:	c9                   	leave  
   11653:	c3                   	ret    

00011654 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11654:	55                   	push   %ebp
   11655:	89 e5                	mov    %esp,%ebp
   11657:	fa                   	cli    
   11658:	90                   	nop
   11659:	5d                   	pop    %ebp
   1165a:	c3                   	ret    

0001165b <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1165b:	55                   	push   %ebp
   1165c:	89 e5                	mov    %esp,%ebp
   1165e:	fb                   	sti    
   1165f:	90                   	nop
   11660:	5d                   	pop    %ebp
   11661:	c3                   	ret    

00011662 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11662:	55                   	push   %ebp
   11663:	89 e5                	mov    %esp,%ebp
   11665:	f4                   	hlt    
   11666:	90                   	nop
   11667:	5d                   	pop    %ebp
   11668:	c3                   	ret    

00011669 <inb>:
static inline uint8_t inb(uint16_t port) {
   11669:	55                   	push   %ebp
   1166a:	89 e5                	mov    %esp,%ebp
   1166c:	83 ec 14             	sub    $0x14,%esp
   1166f:	8b 45 08             	mov    0x8(%ebp),%eax
   11672:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11676:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1167a:	89 c2                	mov    %eax,%edx
   1167c:	ec                   	in     (%dx),%al
   1167d:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11680:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11684:	c9                   	leave  
   11685:	c3                   	ret    

00011686 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11686:	55                   	push   %ebp
   11687:	89 e5                	mov    %esp,%ebp
   11689:	83 ec 08             	sub    $0x8,%esp
   1168c:	8b 45 08             	mov    0x8(%ebp),%eax
   1168f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11692:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11696:	89 d0                	mov    %edx,%eax
   11698:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1169b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1169f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   116a3:	ee                   	out    %al,(%dx)
}
   116a4:	90                   	nop
   116a5:	c9                   	leave  
   116a6:	c3                   	ret    

000116a7 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   116a7:	55                   	push   %ebp
   116a8:	89 e5                	mov    %esp,%ebp
   116aa:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	c1 e8 10             	shr    $0x10,%eax
   116b3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   116b7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ba:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   116be:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c1:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   116c4:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   116c8:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   116cc:	90                   	nop
   116cd:	c9                   	leave  
   116ce:	c3                   	ret    

000116cf <read_cr2>:
static inline uint32_t read_cr2(void) {
   116cf:	55                   	push   %ebp
   116d0:	89 e5                	mov    %esp,%ebp
   116d2:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   116d5:	0f 20 d0             	mov    %cr2,%eax
   116d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   116db:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116de:	c9                   	leave  
   116df:	c3                   	ret    

000116e0 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   116e0:	55                   	push   %ebp
   116e1:	89 e5                	mov    %esp,%ebp
   116e3:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   116e6:	9c                   	pushf  
   116e7:	58                   	pop    %eax
   116e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   116eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116ee:	c9                   	leave  
   116ef:	c3                   	ret    

000116f0 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   116f0:	55                   	push   %ebp
   116f1:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   116f3:	8b 45 08             	mov    0x8(%ebp),%eax
   116f6:	50                   	push   %eax
   116f7:	9d                   	popf   
}
   116f8:	90                   	nop
   116f9:	5d                   	pop    %ebp
   116fa:	c3                   	ret    

000116fb <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   116fb:	55                   	push   %ebp
   116fc:	89 e5                	mov    %esp,%ebp
   116fe:	57                   	push   %edi
   116ff:	56                   	push   %esi
   11700:	53                   	push   %ebx
   11701:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11704:	8b 45 08             	mov    0x8(%ebp),%eax
   11707:	8b 40 3c             	mov    0x3c(%eax),%eax
   1170a:	83 e0 03             	and    $0x3,%eax
   1170d:	85 c0                	test   %eax,%eax
   1170f:	74 14                	je     11725 <print_exception_fram+0x2a>
    ss = frame->ss3;
   11711:	8b 45 08             	mov    0x8(%ebp),%eax
   11714:	8b 40 48             	mov    0x48(%eax),%eax
   11717:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   1171a:	8b 45 08             	mov    0x8(%ebp),%eax
   1171d:	8b 40 44             	mov    0x44(%eax),%eax
   11720:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11723:	eb 12                	jmp    11737 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   11725:	8b 45 08             	mov    0x8(%ebp),%eax
   11728:	8b 40 0c             	mov    0xc(%eax),%eax
   1172b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   1172e:	8b 45 08             	mov    0x8(%ebp),%eax
   11731:	8b 40 1c             	mov    0x1c(%eax),%eax
   11734:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   11737:	83 ec 0c             	sub    $0xc,%esp
   1173a:	68 38 3a 01 00       	push   $0x13a38
   1173f:	e8 df 1e 00 00       	call   13623 <log_printf>
   11744:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11747:	8b 45 08             	mov    0x8(%ebp),%eax
   1174a:	8b 50 34             	mov    0x34(%eax),%edx
   1174d:	8b 45 08             	mov    0x8(%ebp),%eax
   11750:	8b 40 30             	mov    0x30(%eax),%eax
   11753:	83 ec 04             	sub    $0x4,%esp
   11756:	52                   	push   %edx
   11757:	50                   	push   %eax
   11758:	68 76 3a 01 00       	push   $0x13a76
   1175d:	e8 c1 1e 00 00       	call   13623 <log_printf>
   11762:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   11765:	8b 45 08             	mov    0x8(%ebp),%eax
   11768:	8b 30                	mov    (%eax),%esi
   1176a:	8b 45 08             	mov    0x8(%ebp),%eax
   1176d:	8b 58 04             	mov    0x4(%eax),%ebx
   11770:	8b 45 08             	mov    0x8(%ebp),%eax
   11773:	8b 48 08             	mov    0x8(%eax),%ecx
   11776:	8b 45 08             	mov    0x8(%ebp),%eax
   11779:	8b 50 0c             	mov    0xc(%eax),%edx
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11782:	83 ec 04             	sub    $0x4,%esp
   11785:	56                   	push   %esi
   11786:	53                   	push   %ebx
   11787:	51                   	push   %ecx
   11788:	ff 75 e4             	push   -0x1c(%ebp)
   1178b:	52                   	push   %edx
   1178c:	50                   	push   %eax
   1178d:	68 90 3a 01 00       	push   $0x13a90
   11792:	e8 8c 1e 00 00       	call   13623 <log_printf>
   11797:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   1179a:	8b 45 08             	mov    0x8(%ebp),%eax
   1179d:	8b 40 18             	mov    0x18(%eax),%eax
   117a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   117a3:	8b 45 08             	mov    0x8(%ebp),%eax
   117a6:	8b 78 10             	mov    0x10(%eax),%edi
   117a9:	8b 45 08             	mov    0x8(%ebp),%eax
   117ac:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   117af:	8b 45 08             	mov    0x8(%ebp),%eax
   117b2:	8b 58 24             	mov    0x24(%eax),%ebx
   117b5:	8b 45 08             	mov    0x8(%ebp),%eax
   117b8:	8b 48 28             	mov    0x28(%eax),%ecx
   117bb:	8b 45 08             	mov    0x8(%ebp),%eax
   117be:	8b 50 20             	mov    0x20(%eax),%edx
   117c1:	8b 45 08             	mov    0x8(%ebp),%eax
   117c4:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   117c7:	83 ec 0c             	sub    $0xc,%esp
   117ca:	ff 75 e0             	push   -0x20(%ebp)
   117cd:	ff 75 d4             	push   -0x2c(%ebp)
   117d0:	57                   	push   %edi
   117d1:	56                   	push   %esi
   117d2:	53                   	push   %ebx
   117d3:	51                   	push   %ecx
   117d4:	52                   	push   %edx
   117d5:	50                   	push   %eax
   117d6:	68 c0 3a 01 00       	push   $0x13ac0
   117db:	e8 43 1e 00 00       	call   13623 <log_printf>
   117e0:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   117e3:	8b 45 08             	mov    0x8(%ebp),%eax
   117e6:	8b 50 40             	mov    0x40(%eax),%edx
   117e9:	8b 45 08             	mov    0x8(%ebp),%eax
   117ec:	8b 40 38             	mov    0x38(%eax),%eax
   117ef:	83 ec 04             	sub    $0x4,%esp
   117f2:	52                   	push   %edx
   117f3:	50                   	push   %eax
   117f4:	68 18 3b 01 00       	push   $0x13b18
   117f9:	e8 25 1e 00 00       	call   13623 <log_printf>
   117fe:	83 c4 10             	add    $0x10,%esp
}
   11801:	90                   	nop
   11802:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11805:	5b                   	pop    %ebx
   11806:	5e                   	pop    %esi
   11807:	5f                   	pop    %edi
   11808:	5d                   	pop    %ebp
   11809:	c3                   	ret    

0001180a <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1180a:	55                   	push   %ebp
   1180b:	89 e5                	mov    %esp,%ebp
   1180d:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11810:	83 ec 0c             	sub    $0xc,%esp
   11813:	68 34 3b 01 00       	push   $0x13b34
   11818:	e8 06 1e 00 00       	call   13623 <log_printf>
   1181d:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11820:	83 ec 08             	sub    $0x8,%esp
   11823:	ff 75 0c             	push   0xc(%ebp)
   11826:	68 68 3b 01 00       	push   $0x13b68
   1182b:	e8 f3 1d 00 00       	call   13623 <log_printf>
   11830:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11833:	83 ec 0c             	sub    $0xc,%esp
   11836:	ff 75 08             	push   0x8(%ebp)
   11839:	e8 bd fe ff ff       	call   116fb <print_exception_fram>
   1183e:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11841:	e8 1c fe ff ff       	call   11662 <hlt>
   11846:	eb f9                	jmp    11841 <do_default_handler+0x37>

00011848 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11848:	55                   	push   %ebp
   11849:	89 e5                	mov    %esp,%ebp
   1184b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1184e:	83 ec 08             	sub    $0x8,%esp
   11851:	68 82 3b 01 00       	push   $0x13b82
   11856:	ff 75 08             	push   0x8(%ebp)
   11859:	e8 ac ff ff ff       	call   1180a <do_default_handler>
   1185e:	83 c4 10             	add    $0x10,%esp
}
   11861:	90                   	nop
   11862:	c9                   	leave  
   11863:	c3                   	ret    

00011864 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11864:	55                   	push   %ebp
   11865:	89 e5                	mov    %esp,%ebp
   11867:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1186a:	83 ec 08             	sub    $0x8,%esp
   1186d:	68 94 3b 01 00       	push   $0x13b94
   11872:	ff 75 08             	push   0x8(%ebp)
   11875:	e8 90 ff ff ff       	call   1180a <do_default_handler>
   1187a:	83 c4 10             	add    $0x10,%esp
}
   1187d:	90                   	nop
   1187e:	c9                   	leave  
   1187f:	c3                   	ret    

00011880 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11880:	55                   	push   %ebp
   11881:	89 e5                	mov    %esp,%ebp
   11883:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11886:	83 ec 08             	sub    $0x8,%esp
   11889:	68 a6 3b 01 00       	push   $0x13ba6
   1188e:	ff 75 08             	push   0x8(%ebp)
   11891:	e8 74 ff ff ff       	call   1180a <do_default_handler>
   11896:	83 c4 10             	add    $0x10,%esp
}
   11899:	90                   	nop
   1189a:	c9                   	leave  
   1189b:	c3                   	ret    

0001189c <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   1189c:	55                   	push   %ebp
   1189d:	89 e5                	mov    %esp,%ebp
   1189f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   118a2:	83 ec 08             	sub    $0x8,%esp
   118a5:	68 b6 3b 01 00       	push   $0x13bb6
   118aa:	ff 75 08             	push   0x8(%ebp)
   118ad:	e8 58 ff ff ff       	call   1180a <do_default_handler>
   118b2:	83 c4 10             	add    $0x10,%esp
}
   118b5:	90                   	nop
   118b6:	c9                   	leave  
   118b7:	c3                   	ret    

000118b8 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   118b8:	55                   	push   %ebp
   118b9:	89 e5                	mov    %esp,%ebp
   118bb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   118be:	83 ec 08             	sub    $0x8,%esp
   118c1:	68 c4 3b 01 00       	push   $0x13bc4
   118c6:	ff 75 08             	push   0x8(%ebp)
   118c9:	e8 3c ff ff ff       	call   1180a <do_default_handler>
   118ce:	83 c4 10             	add    $0x10,%esp
}
   118d1:	90                   	nop
   118d2:	c9                   	leave  
   118d3:	c3                   	ret    

000118d4 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   118d4:	55                   	push   %ebp
   118d5:	89 e5                	mov    %esp,%ebp
   118d7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   118da:	83 ec 08             	sub    $0x8,%esp
   118dd:	68 d9 3b 01 00       	push   $0x13bd9
   118e2:	ff 75 08             	push   0x8(%ebp)
   118e5:	e8 20 ff ff ff       	call   1180a <do_default_handler>
   118ea:	83 c4 10             	add    $0x10,%esp
}
   118ed:	90                   	nop
   118ee:	c9                   	leave  
   118ef:	c3                   	ret    

000118f0 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   118f0:	55                   	push   %ebp
   118f1:	89 e5                	mov    %esp,%ebp
   118f3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   118f6:	83 ec 08             	sub    $0x8,%esp
   118f9:	68 ec 3b 01 00       	push   $0x13bec
   118fe:	ff 75 08             	push   0x8(%ebp)
   11901:	e8 04 ff ff ff       	call   1180a <do_default_handler>
   11906:	83 c4 10             	add    $0x10,%esp
}
   11909:	90                   	nop
   1190a:	c9                   	leave  
   1190b:	c3                   	ret    

0001190c <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1190c:	55                   	push   %ebp
   1190d:	89 e5                	mov    %esp,%ebp
   1190f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11912:	83 ec 08             	sub    $0x8,%esp
   11915:	68 02 3c 01 00       	push   $0x13c02
   1191a:	ff 75 08             	push   0x8(%ebp)
   1191d:	e8 e8 fe ff ff       	call   1180a <do_default_handler>
   11922:	83 c4 10             	add    $0x10,%esp
}
   11925:	90                   	nop
   11926:	c9                   	leave  
   11927:	c3                   	ret    

00011928 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11928:	55                   	push   %ebp
   11929:	89 e5                	mov    %esp,%ebp
   1192b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1192e:	83 ec 08             	sub    $0x8,%esp
   11931:	68 1b 3c 01 00       	push   $0x13c1b
   11936:	ff 75 08             	push   0x8(%ebp)
   11939:	e8 cc fe ff ff       	call   1180a <do_default_handler>
   1193e:	83 c4 10             	add    $0x10,%esp
}
   11941:	90                   	nop
   11942:	c9                   	leave  
   11943:	c3                   	ret    

00011944 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11944:	55                   	push   %ebp
   11945:	89 e5                	mov    %esp,%ebp
   11947:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1194a:	83 ec 08             	sub    $0x8,%esp
   1194d:	68 38 3c 01 00       	push   $0x13c38
   11952:	ff 75 08             	push   0x8(%ebp)
   11955:	e8 b0 fe ff ff       	call   1180a <do_default_handler>
   1195a:	83 c4 10             	add    $0x10,%esp
}
   1195d:	90                   	nop
   1195e:	c9                   	leave  
   1195f:	c3                   	ret    

00011960 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11960:	55                   	push   %ebp
   11961:	89 e5                	mov    %esp,%ebp
   11963:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11966:	83 ec 08             	sub    $0x8,%esp
   11969:	68 4f 3c 01 00       	push   $0x13c4f
   1196e:	ff 75 08             	push   0x8(%ebp)
   11971:	e8 94 fe ff ff       	call   1180a <do_default_handler>
   11976:	83 c4 10             	add    $0x10,%esp
}
   11979:	90                   	nop
   1197a:	c9                   	leave  
   1197b:	c3                   	ret    

0001197c <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   1197c:	55                   	push   %ebp
   1197d:	89 e5                	mov    %esp,%ebp
   1197f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11982:	83 ec 08             	sub    $0x8,%esp
   11985:	68 65 3c 01 00       	push   $0x13c65
   1198a:	ff 75 08             	push   0x8(%ebp)
   1198d:	e8 78 fe ff ff       	call   1180a <do_default_handler>
   11992:	83 c4 10             	add    $0x10,%esp
}
   11995:	90                   	nop
   11996:	c9                   	leave  
   11997:	c3                   	ret    

00011998 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11998:	55                   	push   %ebp
   11999:	89 e5                	mov    %esp,%ebp
   1199b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1199e:	83 ec 08             	sub    $0x8,%esp
   119a1:	68 83 3c 01 00       	push   $0x13c83
   119a6:	ff 75 08             	push   0x8(%ebp)
   119a9:	e8 5c fe ff ff       	call   1180a <do_default_handler>
   119ae:	83 c4 10             	add    $0x10,%esp
}
   119b1:	90                   	nop
   119b2:	c9                   	leave  
   119b3:	c3                   	ret    

000119b4 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   119b4:	55                   	push   %ebp
   119b5:	89 e5                	mov    %esp,%ebp
   119b7:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   119ba:	83 ec 0c             	sub    $0xc,%esp
   119bd:	68 a4 3c 01 00       	push   $0x13ca4
   119c2:	e8 5c 1c 00 00       	call   13623 <log_printf>
   119c7:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   119ca:	83 ec 0c             	sub    $0xc,%esp
   119cd:	68 c8 3c 01 00       	push   $0x13cc8
   119d2:	e8 4c 1c 00 00       	call   13623 <log_printf>
   119d7:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   119da:	8b 45 08             	mov    0x8(%ebp),%eax
   119dd:	8b 40 34             	mov    0x34(%eax),%eax
   119e0:	83 e0 01             	and    $0x1,%eax
   119e3:	85 c0                	test   %eax,%eax
   119e5:	74 12                	je     119f9 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   119e7:	83 ec 0c             	sub    $0xc,%esp
   119ea:	68 f4 3c 01 00       	push   $0x13cf4
   119ef:	e8 2f 1c 00 00       	call   13623 <log_printf>
   119f4:	83 c4 10             	add    $0x10,%esp
   119f7:	eb 10                	jmp    11a09 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   119f9:	83 ec 0c             	sub    $0xc,%esp
   119fc:	68 70 3d 01 00       	push   $0x13d70
   11a01:	e8 1d 1c 00 00       	call   13623 <log_printf>
   11a06:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11a09:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0c:	8b 40 34             	mov    0x34(%eax),%eax
   11a0f:	83 e0 02             	and    $0x2,%eax
   11a12:	85 c0                	test   %eax,%eax
   11a14:	74 12                	je     11a28 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11a16:	83 ec 0c             	sub    $0xc,%esp
   11a19:	68 c8 3d 01 00       	push   $0x13dc8
   11a1e:	e8 00 1c 00 00       	call   13623 <log_printf>
   11a23:	83 c4 10             	add    $0x10,%esp
   11a26:	eb 10                	jmp    11a38 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11a28:	83 ec 0c             	sub    $0xc,%esp
   11a2b:	68 14 3e 01 00       	push   $0x13e14
   11a30:	e8 ee 1b 00 00       	call   13623 <log_printf>
   11a35:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11a38:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3b:	8b 40 34             	mov    0x34(%eax),%eax
   11a3e:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11a43:	83 ec 08             	sub    $0x8,%esp
   11a46:	50                   	push   %eax
   11a47:	68 40 3e 01 00       	push   $0x13e40
   11a4c:	e8 d2 1b 00 00       	call   13623 <log_printf>
   11a51:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   11a54:	83 ec 0c             	sub    $0xc,%esp
   11a57:	ff 75 08             	push   0x8(%ebp)
   11a5a:	e8 9c fc ff ff       	call   116fb <print_exception_fram>
   11a5f:	83 c4 10             	add    $0x10,%esp
}
   11a62:	90                   	nop
   11a63:	c9                   	leave  
   11a64:	c3                   	ret    

00011a65 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   11a65:	55                   	push   %ebp
   11a66:	89 e5                	mov    %esp,%ebp
   11a68:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11a6b:	83 ec 0c             	sub    $0xc,%esp
   11a6e:	68 a4 3c 01 00       	push   $0x13ca4
   11a73:	e8 ab 1b 00 00       	call   13623 <log_printf>
   11a78:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11a7b:	83 ec 0c             	sub    $0xc,%esp
   11a7e:	68 54 3e 01 00       	push   $0x13e54
   11a83:	e8 9b 1b 00 00       	call   13623 <log_printf>
   11a88:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   11a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8e:	8b 40 34             	mov    0x34(%eax),%eax
   11a91:	83 e0 01             	and    $0x1,%eax
   11a94:	85 c0                	test   %eax,%eax
   11a96:	74 18                	je     11ab0 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   11a98:	e8 32 fc ff ff       	call   116cf <read_cr2>
   11a9d:	83 ec 08             	sub    $0x8,%esp
   11aa0:	50                   	push   %eax
   11aa1:	68 78 3e 01 00       	push   $0x13e78
   11aa6:	e8 78 1b 00 00       	call   13623 <log_printf>
   11aab:	83 c4 10             	add    $0x10,%esp
   11aae:	eb 16                	jmp    11ac6 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   11ab0:	e8 1a fc ff ff       	call   116cf <read_cr2>
   11ab5:	83 ec 08             	sub    $0x8,%esp
   11ab8:	50                   	push   %eax
   11ab9:	68 9f 3e 01 00       	push   $0x13e9f
   11abe:	e8 60 1b 00 00       	call   13623 <log_printf>
   11ac3:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac9:	8b 40 34             	mov    0x34(%eax),%eax
   11acc:	83 e0 02             	and    $0x2,%eax
   11acf:	85 c0                	test   %eax,%eax
   11ad1:	74 12                	je     11ae5 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   11ad3:	83 ec 0c             	sub    $0xc,%esp
   11ad6:	68 bc 3e 01 00       	push   $0x13ebc
   11adb:	e8 43 1b 00 00       	call   13623 <log_printf>
   11ae0:	83 c4 10             	add    $0x10,%esp
   11ae3:	eb 10                	jmp    11af5 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   11ae5:	83 ec 0c             	sub    $0xc,%esp
   11ae8:	68 e8 3e 01 00       	push   $0x13ee8
   11aed:	e8 31 1b 00 00       	call   13623 <log_printf>
   11af2:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11af5:	8b 45 08             	mov    0x8(%ebp),%eax
   11af8:	8b 40 34             	mov    0x34(%eax),%eax
   11afb:	83 e0 04             	and    $0x4,%eax
   11afe:	85 c0                	test   %eax,%eax
   11b00:	74 12                	je     11b14 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   11b02:	83 ec 0c             	sub    $0xc,%esp
   11b05:	68 14 3f 01 00       	push   $0x13f14
   11b0a:	e8 14 1b 00 00       	call   13623 <log_printf>
   11b0f:	83 c4 10             	add    $0x10,%esp
   11b12:	eb 10                	jmp    11b24 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   11b14:	83 ec 0c             	sub    $0xc,%esp
   11b17:	68 3c 3f 01 00       	push   $0x13f3c
   11b1c:	e8 02 1b 00 00       	call   13623 <log_printf>
   11b21:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   11b24:	83 ec 0c             	sub    $0xc,%esp
   11b27:	ff 75 08             	push   0x8(%ebp)
   11b2a:	e8 cc fb ff ff       	call   116fb <print_exception_fram>
   11b2f:	83 c4 10             	add    $0x10,%esp
}
   11b32:	90                   	nop
   11b33:	c9                   	leave  
   11b34:	c3                   	ret    

00011b35 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   11b35:	55                   	push   %ebp
   11b36:	89 e5                	mov    %esp,%ebp
   11b38:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11b3b:	83 ec 08             	sub    $0x8,%esp
   11b3e:	68 67 3f 01 00       	push   $0x13f67
   11b43:	ff 75 08             	push   0x8(%ebp)
   11b46:	e8 bf fc ff ff       	call   1180a <do_default_handler>
   11b4b:	83 c4 10             	add    $0x10,%esp
}
   11b4e:	90                   	nop
   11b4f:	c9                   	leave  
   11b50:	c3                   	ret    

00011b51 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11b51:	55                   	push   %ebp
   11b52:	89 e5                	mov    %esp,%ebp
   11b54:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11b57:	83 ec 08             	sub    $0x8,%esp
   11b5a:	68 7b 3f 01 00       	push   $0x13f7b
   11b5f:	ff 75 08             	push   0x8(%ebp)
   11b62:	e8 a3 fc ff ff       	call   1180a <do_default_handler>
   11b67:	83 c4 10             	add    $0x10,%esp
}
   11b6a:	90                   	nop
   11b6b:	c9                   	leave  
   11b6c:	c3                   	ret    

00011b6d <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11b6d:	55                   	push   %ebp
   11b6e:	89 e5                	mov    %esp,%ebp
   11b70:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11b73:	83 ec 08             	sub    $0x8,%esp
   11b76:	68 95 3f 01 00       	push   $0x13f95
   11b7b:	ff 75 08             	push   0x8(%ebp)
   11b7e:	e8 87 fc ff ff       	call   1180a <do_default_handler>
   11b83:	83 c4 10             	add    $0x10,%esp
}
   11b86:	90                   	nop
   11b87:	c9                   	leave  
   11b88:	c3                   	ret    

00011b89 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11b89:	55                   	push   %ebp
   11b8a:	89 e5                	mov    %esp,%ebp
   11b8c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11b8f:	83 ec 08             	sub    $0x8,%esp
   11b92:	68 ad 3f 01 00       	push   $0x13fad
   11b97:	ff 75 08             	push   0x8(%ebp)
   11b9a:	e8 6b fc ff ff       	call   1180a <do_default_handler>
   11b9f:	83 c4 10             	add    $0x10,%esp
}
   11ba2:	90                   	nop
   11ba3:	c9                   	leave  
   11ba4:	c3                   	ret    

00011ba5 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11ba5:	55                   	push   %ebp
   11ba6:	89 e5                	mov    %esp,%ebp
   11ba8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11bab:	83 ec 08             	sub    $0x8,%esp
   11bae:	68 c5 3f 01 00       	push   $0x13fc5
   11bb3:	ff 75 08             	push   0x8(%ebp)
   11bb6:	e8 4f fc ff ff       	call   1180a <do_default_handler>
   11bbb:	83 c4 10             	add    $0x10,%esp
}
   11bbe:	90                   	nop
   11bbf:	c9                   	leave  
   11bc0:	c3                   	ret    

00011bc1 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11bc1:	55                   	push   %ebp
   11bc2:	89 e5                	mov    %esp,%ebp
   11bc4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11bc7:	83 ec 08             	sub    $0x8,%esp
   11bca:	68 e1 3f 01 00       	push   $0x13fe1
   11bcf:	ff 75 08             	push   0x8(%ebp)
   11bd2:	e8 33 fc ff ff       	call   1180a <do_default_handler>
   11bd7:	83 c4 10             	add    $0x10,%esp
}
   11bda:	90                   	nop
   11bdb:	c9                   	leave  
   11bdc:	c3                   	ret    

00011bdd <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11bdd:	55                   	push   %ebp
   11bde:	89 e5                	mov    %esp,%ebp
   11be0:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11be3:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11bea:	7f 06                	jg     11bf2 <idt_install+0x15>
   11bec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bf0:	79 07                	jns    11bf9 <idt_install+0x1c>
   11bf2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bf7:	eb 25                	jmp    11c1e <idt_install+0x41>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bfc:	8b 55 08             	mov    0x8(%ebp),%edx
   11bff:	c1 e2 03             	shl    $0x3,%edx
   11c02:	81 c2 c0 a3 02 00    	add    $0x2a3c0,%edx
   11c08:	68 00 8e 00 00       	push   $0x8e00
   11c0d:	50                   	push   %eax
   11c0e:	6a 08                	push   $0x8
   11c10:	52                   	push   %edx
   11c11:	e8 c1 f7 ff ff       	call   113d7 <gate_desc_set>
   11c16:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11c19:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c1e:	c9                   	leave  
   11c1f:	c3                   	ret    

00011c20 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11c20:	55                   	push   %ebp
   11c21:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11c23:	6a 11                	push   $0x11
   11c25:	6a 20                	push   $0x20
   11c27:	e8 5a fa ff ff       	call   11686 <outb>
   11c2c:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11c2f:	6a 20                	push   $0x20
   11c31:	6a 21                	push   $0x21
   11c33:	e8 4e fa ff ff       	call   11686 <outb>
   11c38:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11c3b:	6a 04                	push   $0x4
   11c3d:	6a 21                	push   $0x21
   11c3f:	e8 42 fa ff ff       	call   11686 <outb>
   11c44:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11c47:	6a 01                	push   $0x1
   11c49:	6a 21                	push   $0x21
   11c4b:	e8 36 fa ff ff       	call   11686 <outb>
   11c50:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11c53:	6a 11                	push   $0x11
   11c55:	68 a0 00 00 00       	push   $0xa0
   11c5a:	e8 27 fa ff ff       	call   11686 <outb>
   11c5f:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11c62:	6a 28                	push   $0x28
   11c64:	68 a1 00 00 00       	push   $0xa1
   11c69:	e8 18 fa ff ff       	call   11686 <outb>
   11c6e:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11c71:	6a 02                	push   $0x2
   11c73:	68 a1 00 00 00       	push   $0xa1
   11c78:	e8 09 fa ff ff       	call   11686 <outb>
   11c7d:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11c80:	6a 01                	push   $0x1
   11c82:	68 a1 00 00 00       	push   $0xa1
   11c87:	e8 fa f9 ff ff       	call   11686 <outb>
   11c8c:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11c8f:	68 fb 00 00 00       	push   $0xfb
   11c94:	6a 21                	push   $0x21
   11c96:	e8 eb f9 ff ff       	call   11686 <outb>
   11c9b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11c9e:	68 ff 00 00 00       	push   $0xff
   11ca3:	68 a1 00 00 00       	push   $0xa1
   11ca8:	e8 d9 f9 ff ff       	call   11686 <outb>
   11cad:	83 c4 08             	add    $0x8,%esp


}
   11cb0:	90                   	nop
   11cb1:	c9                   	leave  
   11cb2:	c3                   	ret    

00011cb3 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11cb3:	55                   	push   %ebp
   11cb4:	89 e5                	mov    %esp,%ebp
   11cb6:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11cb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cc0:	eb 17                	jmp    11cd9 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11cc2:	83 ec 08             	sub    $0x8,%esp
   11cc5:	68 2a 00 01 00       	push   $0x1002a
   11cca:	ff 75 f4             	push   -0xc(%ebp)
   11ccd:	e8 0b ff ff ff       	call   11bdd <idt_install>
   11cd2:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11cd5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11cd9:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11ce0:	7e e0                	jle    11cc2 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11ce2:	83 ec 08             	sub    $0x8,%esp
   11ce5:	68 47 00 01 00       	push   $0x10047
   11cea:	6a 00                	push   $0x0
   11cec:	e8 ec fe ff ff       	call   11bdd <idt_install>
   11cf1:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11cf4:	83 ec 08             	sub    $0x8,%esp
   11cf7:	68 64 00 01 00       	push   $0x10064
   11cfc:	6a 01                	push   $0x1
   11cfe:	e8 da fe ff ff       	call   11bdd <idt_install>
   11d03:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11d06:	83 ec 08             	sub    $0x8,%esp
   11d09:	68 81 00 01 00       	push   $0x10081
   11d0e:	6a 02                	push   $0x2
   11d10:	e8 c8 fe ff ff       	call   11bdd <idt_install>
   11d15:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11d18:	83 ec 08             	sub    $0x8,%esp
   11d1b:	68 9e 00 01 00       	push   $0x1009e
   11d20:	6a 03                	push   $0x3
   11d22:	e8 b6 fe ff ff       	call   11bdd <idt_install>
   11d27:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11d2a:	83 ec 08             	sub    $0x8,%esp
   11d2d:	68 bb 00 01 00       	push   $0x100bb
   11d32:	6a 04                	push   $0x4
   11d34:	e8 a4 fe ff ff       	call   11bdd <idt_install>
   11d39:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11d3c:	83 ec 08             	sub    $0x8,%esp
   11d3f:	68 d8 00 01 00       	push   $0x100d8
   11d44:	6a 05                	push   $0x5
   11d46:	e8 92 fe ff ff       	call   11bdd <idt_install>
   11d4b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11d4e:	83 ec 08             	sub    $0x8,%esp
   11d51:	68 f5 00 01 00       	push   $0x100f5
   11d56:	6a 06                	push   $0x6
   11d58:	e8 80 fe ff ff       	call   11bdd <idt_install>
   11d5d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11d60:	83 ec 08             	sub    $0x8,%esp
   11d63:	68 12 01 01 00       	push   $0x10112
   11d68:	6a 07                	push   $0x7
   11d6a:	e8 6e fe ff ff       	call   11bdd <idt_install>
   11d6f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11d72:	83 ec 08             	sub    $0x8,%esp
   11d75:	68 2f 01 01 00       	push   $0x1012f
   11d7a:	6a 08                	push   $0x8
   11d7c:	e8 5c fe ff ff       	call   11bdd <idt_install>
   11d81:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11d84:	83 ec 08             	sub    $0x8,%esp
   11d87:	68 4a 01 01 00       	push   $0x1014a
   11d8c:	6a 0a                	push   $0xa
   11d8e:	e8 4a fe ff ff       	call   11bdd <idt_install>
   11d93:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11d96:	83 ec 08             	sub    $0x8,%esp
   11d99:	68 65 01 01 00       	push   $0x10165
   11d9e:	6a 0b                	push   $0xb
   11da0:	e8 38 fe ff ff       	call   11bdd <idt_install>
   11da5:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11da8:	83 ec 08             	sub    $0x8,%esp
   11dab:	68 80 01 01 00       	push   $0x10180
   11db0:	6a 0c                	push   $0xc
   11db2:	e8 26 fe ff ff       	call   11bdd <idt_install>
   11db7:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11dba:	83 ec 08             	sub    $0x8,%esp
   11dbd:	68 9b 01 01 00       	push   $0x1019b
   11dc2:	6a 0d                	push   $0xd
   11dc4:	e8 14 fe ff ff       	call   11bdd <idt_install>
   11dc9:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11dcc:	83 ec 08             	sub    $0x8,%esp
   11dcf:	68 b6 01 01 00       	push   $0x101b6
   11dd4:	6a 0e                	push   $0xe
   11dd6:	e8 02 fe ff ff       	call   11bdd <idt_install>
   11ddb:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11dde:	83 ec 08             	sub    $0x8,%esp
   11de1:	68 d1 01 01 00       	push   $0x101d1
   11de6:	6a 10                	push   $0x10
   11de8:	e8 f0 fd ff ff       	call   11bdd <idt_install>
   11ded:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11df0:	83 ec 08             	sub    $0x8,%esp
   11df3:	68 ee 01 01 00       	push   $0x101ee
   11df8:	6a 11                	push   $0x11
   11dfa:	e8 de fd ff ff       	call   11bdd <idt_install>
   11dff:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11e02:	83 ec 08             	sub    $0x8,%esp
   11e05:	68 09 02 01 00       	push   $0x10209
   11e0a:	6a 12                	push   $0x12
   11e0c:	e8 cc fd ff ff       	call   11bdd <idt_install>
   11e11:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11e14:	83 ec 08             	sub    $0x8,%esp
   11e17:	68 26 02 01 00       	push   $0x10226
   11e1c:	6a 13                	push   $0x13
   11e1e:	e8 ba fd ff ff       	call   11bdd <idt_install>
   11e23:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11e26:	83 ec 08             	sub    $0x8,%esp
   11e29:	68 43 02 01 00       	push   $0x10243
   11e2e:	6a 14                	push   $0x14
   11e30:	e8 a8 fd ff ff       	call   11bdd <idt_install>
   11e35:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11e38:	83 ec 08             	sub    $0x8,%esp
   11e3b:	68 60 02 01 00       	push   $0x10260
   11e40:	6a 15                	push   $0x15
   11e42:	e8 96 fd ff ff       	call   11bdd <idt_install>
   11e47:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11e4a:	b8 c0 a3 02 00       	mov    $0x2a3c0,%eax
   11e4f:	83 ec 08             	sub    $0x8,%esp
   11e52:	68 00 08 00 00       	push   $0x800
   11e57:	50                   	push   %eax
   11e58:	e8 4a f8 ff ff       	call   116a7 <lidt>
   11e5d:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11e60:	e8 bb fd ff ff       	call   11c20 <init_pic>
}
   11e65:	90                   	nop
   11e66:	c9                   	leave  
   11e67:	c3                   	ret    

00011e68 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11e68:	55                   	push   %ebp
   11e69:	89 e5                	mov    %esp,%ebp
   11e6b:	53                   	push   %ebx
   11e6c:	83 ec 14             	sub    $0x14,%esp
   11e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e72:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11e75:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11e79:	76 7f                	jbe    11efa <idt_enable+0x92>
   11e7b:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11e7f:	77 79                	ja     11efa <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11e81:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11e85:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11e89:	77 33                	ja     11ebe <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11e8b:	6a 21                	push   $0x21
   11e8d:	e8 d7 f7 ff ff       	call   11669 <inb>
   11e92:	83 c4 04             	add    $0x4,%esp
   11e95:	89 c3                	mov    %eax,%ebx
   11e97:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11e9b:	ba 01 00 00 00       	mov    $0x1,%edx
   11ea0:	89 c1                	mov    %eax,%ecx
   11ea2:	d3 e2                	shl    %cl,%edx
   11ea4:	89 d0                	mov    %edx,%eax
   11ea6:	f7 d0                	not    %eax
   11ea8:	21 d8                	and    %ebx,%eax
   11eaa:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11ead:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11eb1:	50                   	push   %eax
   11eb2:	6a 21                	push   $0x21
   11eb4:	e8 cd f7 ff ff       	call   11686 <outb>
   11eb9:	83 c4 08             	add    $0x8,%esp
   11ebc:	eb 3d                	jmp    11efb <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11ebe:	68 a1 00 00 00       	push   $0xa1
   11ec3:	e8 a1 f7 ff ff       	call   11669 <inb>
   11ec8:	83 c4 04             	add    $0x4,%esp
   11ecb:	89 c3                	mov    %eax,%ebx
   11ecd:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11ed1:	83 e8 08             	sub    $0x8,%eax
   11ed4:	ba 01 00 00 00       	mov    $0x1,%edx
   11ed9:	89 c1                	mov    %eax,%ecx
   11edb:	d3 e2                	shl    %cl,%edx
   11edd:	89 d0                	mov    %edx,%eax
   11edf:	f7 d0                	not    %eax
   11ee1:	21 d8                	and    %ebx,%eax
   11ee3:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11ee6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11eea:	50                   	push   %eax
   11eeb:	68 a1 00 00 00       	push   $0xa1
   11ef0:	e8 91 f7 ff ff       	call   11686 <outb>
   11ef5:	83 c4 08             	add    $0x8,%esp
   11ef8:	eb 01                	jmp    11efb <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11efa:	90                   	nop
  }
  
}
   11efb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11efe:	c9                   	leave  
   11eff:	c3                   	ret    

00011f00 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11f00:	55                   	push   %ebp
   11f01:	89 e5                	mov    %esp,%ebp
   11f03:	53                   	push   %ebx
   11f04:	83 ec 14             	sub    $0x14,%esp
   11f07:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0a:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11f0d:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11f11:	76 7b                	jbe    11f8e <idt_disable+0x8e>
   11f13:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11f17:	77 75                	ja     11f8e <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11f19:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11f1d:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11f21:	77 31                	ja     11f54 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11f23:	6a 21                	push   $0x21
   11f25:	e8 3f f7 ff ff       	call   11669 <inb>
   11f2a:	83 c4 04             	add    $0x4,%esp
   11f2d:	89 c3                	mov    %eax,%ebx
   11f2f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11f33:	ba 01 00 00 00       	mov    $0x1,%edx
   11f38:	89 c1                	mov    %eax,%ecx
   11f3a:	d3 e2                	shl    %cl,%edx
   11f3c:	89 d0                	mov    %edx,%eax
   11f3e:	09 d8                	or     %ebx,%eax
   11f40:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11f43:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11f47:	50                   	push   %eax
   11f48:	6a 21                	push   $0x21
   11f4a:	e8 37 f7 ff ff       	call   11686 <outb>
   11f4f:	83 c4 08             	add    $0x8,%esp
   11f52:	eb 3b                	jmp    11f8f <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11f54:	68 a1 00 00 00       	push   $0xa1
   11f59:	e8 0b f7 ff ff       	call   11669 <inb>
   11f5e:	83 c4 04             	add    $0x4,%esp
   11f61:	89 c3                	mov    %eax,%ebx
   11f63:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11f67:	83 e8 08             	sub    $0x8,%eax
   11f6a:	ba 01 00 00 00       	mov    $0x1,%edx
   11f6f:	89 c1                	mov    %eax,%ecx
   11f71:	d3 e2                	shl    %cl,%edx
   11f73:	89 d0                	mov    %edx,%eax
   11f75:	09 d8                	or     %ebx,%eax
   11f77:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11f7a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11f7e:	50                   	push   %eax
   11f7f:	68 a1 00 00 00       	push   $0xa1
   11f84:	e8 fd f6 ff ff       	call   11686 <outb>
   11f89:	83 c4 08             	add    $0x8,%esp
   11f8c:	eb 01                	jmp    11f8f <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11f8e:	90                   	nop
  }
  
}
   11f8f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f92:	c9                   	leave  
   11f93:	c3                   	ret    

00011f94 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11f94:	55                   	push   %ebp
   11f95:	89 e5                	mov    %esp,%ebp
  cli();
   11f97:	e8 b8 f6 ff ff       	call   11654 <cli>
}
   11f9c:	90                   	nop
   11f9d:	5d                   	pop    %ebp
   11f9e:	c3                   	ret    

00011f9f <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11f9f:	55                   	push   %ebp
   11fa0:	89 e5                	mov    %esp,%ebp
  sti();
   11fa2:	e8 b4 f6 ff ff       	call   1165b <sti>
}
   11fa7:	90                   	nop
   11fa8:	5d                   	pop    %ebp
   11fa9:	c3                   	ret    

00011faa <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11faa:	55                   	push   %ebp
   11fab:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11fad:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11fb1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fb5:	78 29                	js     11fe0 <pic_send_eoi+0x36>
   11fb7:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11fbb:	7f 23                	jg     11fe0 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11fbd:	6a 20                	push   $0x20
   11fbf:	6a 20                	push   $0x20
   11fc1:	e8 c0 f6 ff ff       	call   11686 <outb>
   11fc6:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11fc9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11fcd:	7e 12                	jle    11fe1 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11fcf:	6a 20                	push   $0x20
   11fd1:	68 a0 00 00 00       	push   $0xa0
   11fd6:	e8 ab f6 ff ff       	call   11686 <outb>
   11fdb:	83 c4 08             	add    $0x8,%esp
   11fde:	eb 01                	jmp    11fe1 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11fe0:	90                   	nop
  }

}
   11fe1:	c9                   	leave  
   11fe2:	c3                   	ret    

00011fe3 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11fe3:	55                   	push   %ebp
   11fe4:	89 e5                	mov    %esp,%ebp
   11fe6:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11fe9:	e8 f2 f6 ff ff       	call   116e0 <read_eflags>
   11fee:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11ff1:	e8 9e ff ff ff       	call   11f94 <idt_disable_global>
  return state;;
   11ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ff9:	c9                   	leave  
   11ffa:	c3                   	ret    

00011ffb <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11ffb:	55                   	push   %ebp
   11ffc:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11ffe:	ff 75 08             	push   0x8(%ebp)
   12001:	e8 ea f6 ff ff       	call   116f0 <write_eflags>
   12006:	83 c4 04             	add    $0x4,%esp
}
   12009:	90                   	nop
   1200a:	c9                   	leave  
   1200b:	c3                   	ret    

0001200c <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1200c:	55                   	push   %ebp
   1200d:	89 e5                	mov    %esp,%ebp
   1200f:	83 ec 08             	sub    $0x8,%esp
   12012:	8b 45 08             	mov    0x8(%ebp),%eax
   12015:	8b 55 0c             	mov    0xc(%ebp),%edx
   12018:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1201c:	89 d0                	mov    %edx,%eax
   1201e:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12021:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12025:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12029:	ee                   	out    %al,(%dx)
}
   1202a:	90                   	nop
   1202b:	c9                   	leave  
   1202c:	c3                   	ret    

0001202d <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1202d:	55                   	push   %ebp
   1202e:	89 e5                	mov    %esp,%ebp
   12030:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12033:	a1 c0 ab 02 00       	mov    0x2abc0,%eax
   12038:	83 c0 01             	add    $0x1,%eax
   1203b:	a3 c0 ab 02 00       	mov    %eax,0x2abc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   12040:	83 ec 0c             	sub    $0xc,%esp
   12043:	6a 20                	push   $0x20
   12045:	e8 60 ff ff ff       	call   11faa <pic_send_eoi>
   1204a:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1204d:	e8 73 f1 ff ff       	call   111c5 <task_slice_end>
}
   12052:	90                   	nop
   12053:	c9                   	leave  
   12054:	c3                   	ret    

00012055 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   12055:	55                   	push   %ebp
   12056:	89 e5                	mov    %esp,%ebp
   12058:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1205b:	6a 36                	push   $0x36
   1205d:	6a 43                	push   $0x43
   1205f:	e8 a8 ff ff ff       	call   1200c <outb>
   12064:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   12067:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1206d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12071:	0f b6 c0             	movzbl %al,%eax
   12074:	50                   	push   %eax
   12075:	6a 40                	push   $0x40
   12077:	e8 90 ff ff ff       	call   1200c <outb>
   1207c:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1207f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12083:	66 c1 e8 08          	shr    $0x8,%ax
   12087:	0f b6 c0             	movzbl %al,%eax
   1208a:	50                   	push   %eax
   1208b:	6a 40                	push   $0x40
   1208d:	e8 7a ff ff ff       	call   1200c <outb>
   12092:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   12095:	83 ec 08             	sub    $0x8,%esp
   12098:	68 7b 02 01 00       	push   $0x1027b
   1209d:	6a 20                	push   $0x20
   1209f:	e8 39 fb ff ff       	call   11bdd <idt_install>
   120a4:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   120a7:	83 ec 0c             	sub    $0xc,%esp
   120aa:	6a 20                	push   $0x20
   120ac:	e8 b7 fd ff ff       	call   11e68 <idt_enable>
   120b1:	83 c4 10             	add    $0x10,%esp

}
   120b4:	90                   	nop
   120b5:	c9                   	leave  
   120b6:	c3                   	ret    

000120b7 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   120b7:	55                   	push   %ebp
   120b8:	89 e5                	mov    %esp,%ebp
   120ba:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   120bd:	c7 05 c0 ab 02 00 00 	movl   $0x0,0x2abc0
   120c4:	00 00 00 
    init_pit();
   120c7:	e8 89 ff ff ff       	call   12055 <init_pit>
   120cc:	90                   	nop
   120cd:	c9                   	leave  
   120ce:	c3                   	ret    

000120cf <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   120cf:	55                   	push   %ebp
   120d0:	89 e5                	mov    %esp,%ebp
   120d2:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   120d5:	8b 45 08             	mov    0x8(%ebp),%eax
   120d8:	8b 40 50             	mov    0x50(%eax),%eax
   120db:	85 c0                	test   %eax,%eax
   120dd:	75 19                	jne    120f8 <kernel_init+0x29>
   120df:	68 00 40 01 00       	push   $0x14000
   120e4:	68 9c 40 01 00       	push   $0x1409c
   120e9:	6a 22                	push   $0x22
   120eb:	68 24 40 01 00       	push   $0x14024
   120f0:	e8 5f 08 00 00       	call   12954 <pannic>
   120f5:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   120f8:	e8 9e 14 00 00       	call   1359b <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   120fd:	83 ec 0c             	sub    $0xc,%esp
   12100:	ff 75 08             	push   0x8(%ebp)
   12103:	e8 86 e6 ff ff       	call   1078e <memory_init>
   12108:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   1210b:	e8 f5 f3 ff ff       	call   11505 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   12110:	e8 9e fb ff ff       	call   11cb3 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   12115:	e8 9d ff ff ff       	call   120b7 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   1211a:	e8 53 ed ff ff       	call   10e72 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1211f:	90                   	nop
   12120:	c9                   	leave  
   12121:	c3                   	ret    

00012122 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   12122:	55                   	push   %ebp
   12123:	89 e5                	mov    %esp,%ebp
   12125:	56                   	push   %esi
   12126:	53                   	push   %ebx
   12127:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   1212a:	e8 c3 ef ff ff       	call   110f2 <task_current>
   1212f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   12132:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12136:	75 19                	jne    12151 <move_to_first_task+0x2f>
   12138:	68 59 40 01 00       	push   $0x14059
   1213d:	68 a8 40 01 00       	push   $0x140a8
   12142:	6a 42                	push   $0x42
   12144:	68 24 40 01 00       	push   $0x14024
   12149:	e8 06 08 00 00       	call   12954 <pannic>
   1214e:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   12151:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12154:	83 c0 48             	add    $0x48,%eax
   12157:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   1215a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1215d:	8b 40 50             	mov    0x50(%eax),%eax
   12160:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12163:	8b 52 38             	mov    0x38(%edx),%edx
   12166:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   12169:	8b 49 24             	mov    0x24(%ecx),%ecx
   1216c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1216f:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12172:	8b 75 f0             	mov    -0x10(%ebp),%esi
   12175:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   12178:	50                   	push   %eax
   12179:	52                   	push   %edx
   1217a:	51                   	push   %ecx
   1217b:	53                   	push   %ebx
   1217c:	56                   	push   %esi
   1217d:	cf                   	iret   

        
    );
}
   1217e:	90                   	nop
   1217f:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12182:	5b                   	pop    %ebx
   12183:	5e                   	pop    %esi
   12184:	5d                   	pop    %ebp
   12185:	c3                   	ret    

00012186 <init_main>:


void init_main(void) {
   12186:	55                   	push   %ebp
   12187:	89 e5                	mov    %esp,%ebp
   12189:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   1218c:	83 ec 0c             	sub    $0xc,%esp
   1218f:	68 63 40 01 00       	push   $0x14063
   12194:	e8 8a 14 00 00       	call   13623 <log_printf>
   12199:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   1219c:	83 ec 04             	sub    $0x4,%esp
   1219f:	68 7b 40 01 00       	push   $0x1407b
   121a4:	68 81 40 01 00       	push   $0x14081
   121a9:	68 86 40 01 00       	push   $0x14086
   121ae:	e8 70 14 00 00       	call   13623 <log_printf>
   121b3:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   121b6:	e8 87 ed ff ff       	call   10f42 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   121bb:	e8 62 ff ff ff       	call   12122 <move_to_first_task>
   121c0:	90                   	nop
   121c1:	c9                   	leave  
   121c2:	c3                   	ret    

000121c3 <list_init>:
static inline void list_init(list_t *list) {
   121c3:	55                   	push   %ebp
   121c4:	89 e5                	mov    %esp,%ebp
   121c6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   121c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121cd:	75 19                	jne    121e8 <list_init+0x25>
   121cf:	68 bc 40 01 00       	push   $0x140bc
   121d4:	68 68 41 01 00       	push   $0x14168
   121d9:	6a 31                	push   $0x31
   121db:	68 d0 40 01 00       	push   $0x140d0
   121e0:	e8 6f 07 00 00       	call   12954 <pannic>
   121e5:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   121e8:	8b 45 08             	mov    0x8(%ebp),%eax
   121eb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121f2:	8b 45 08             	mov    0x8(%ebp),%eax
   121f5:	8b 50 04             	mov    0x4(%eax),%edx
   121f8:	8b 45 08             	mov    0x8(%ebp),%eax
   121fb:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   121fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12200:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12207:	90                   	nop
   12208:	c9                   	leave  
   12209:	c3                   	ret    

0001220a <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1220a:	55                   	push   %ebp
   1220b:	89 e5                	mov    %esp,%ebp
   1220d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12210:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12214:	75 19                	jne    1222f <list_is_empty+0x25>
   12216:	68 bc 40 01 00       	push   $0x140bc
   1221b:	68 74 41 01 00       	push   $0x14174
   12220:	6a 38                	push   $0x38
   12222:	68 d0 40 01 00       	push   $0x140d0
   12227:	e8 28 07 00 00       	call   12954 <pannic>
   1222c:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1222f:	8b 45 08             	mov    0x8(%ebp),%eax
   12232:	8b 40 08             	mov    0x8(%eax),%eax
   12235:	85 c0                	test   %eax,%eax
   12237:	0f 94 c0             	sete   %al
   1223a:	0f b6 c0             	movzbl %al,%eax
}
   1223d:	c9                   	leave  
   1223e:	c3                   	ret    

0001223f <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   1223f:	55                   	push   %ebp
   12240:	89 e5                	mov    %esp,%ebp
   12242:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   12245:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12249:	75 19                	jne    12264 <mutex_init+0x25>
   1224b:	68 0e 41 01 00       	push   $0x1410e
   12250:	68 5c 41 01 00       	push   $0x1415c
   12255:	6a 15                	push   $0x15
   12257:	68 24 41 01 00       	push   $0x14124
   1225c:	e8 f3 06 00 00       	call   12954 <pannic>
   12261:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   12264:	8b 45 08             	mov    0x8(%ebp),%eax
   12267:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   1226e:	8b 45 08             	mov    0x8(%ebp),%eax
   12271:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   12277:	8b 45 08             	mov    0x8(%ebp),%eax
   1227a:	83 c0 08             	add    $0x8,%eax
   1227d:	83 ec 0c             	sub    $0xc,%esp
   12280:	50                   	push   %eax
   12281:	e8 3d ff ff ff       	call   121c3 <list_init>
   12286:	83 c4 10             	add    $0x10,%esp
}
   12289:	90                   	nop
   1228a:	c9                   	leave  
   1228b:	c3                   	ret    

0001228c <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   1228c:	55                   	push   %ebp
   1228d:	89 e5                	mov    %esp,%ebp
   1228f:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12292:	e8 4c fd ff ff       	call   11fe3 <idt_enter_protection>
   12297:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   1229a:	e8 53 ee ff ff       	call   110f2 <task_current>
   1229f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   122a2:	8b 45 08             	mov    0x8(%ebp),%eax
   122a5:	8b 40 04             	mov    0x4(%eax),%eax
   122a8:	85 c0                	test   %eax,%eax
   122aa:	75 19                	jne    122c5 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   122ac:	8b 45 08             	mov    0x8(%ebp),%eax
   122af:	8b 40 04             	mov    0x4(%eax),%eax
   122b2:	8d 50 01             	lea    0x1(%eax),%edx
   122b5:	8b 45 08             	mov    0x8(%ebp),%eax
   122b8:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   122bb:	8b 45 08             	mov    0x8(%ebp),%eax
   122be:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122c1:	89 10                	mov    %edx,(%eax)
   122c3:	eb 47                	jmp    1230c <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   122c5:	8b 45 08             	mov    0x8(%ebp),%eax
   122c8:	8b 00                	mov    (%eax),%eax
   122ca:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122cd:	75 11                	jne    122e0 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   122cf:	8b 45 08             	mov    0x8(%ebp),%eax
   122d2:	8b 40 04             	mov    0x4(%eax),%eax
   122d5:	8d 50 01             	lea    0x1(%eax),%edx
   122d8:	8b 45 08             	mov    0x8(%ebp),%eax
   122db:	89 50 04             	mov    %edx,0x4(%eax)
   122de:	eb 2c                	jmp    1230c <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   122e0:	83 ec 0c             	sub    $0xc,%esp
   122e3:	ff 75 f0             	push   -0x10(%ebp)
   122e6:	e8 8e ed ff ff       	call   11079 <task_set_unready>
   122eb:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   122ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122f1:	8d 50 40             	lea    0x40(%eax),%edx
   122f4:	8b 45 08             	mov    0x8(%ebp),%eax
   122f7:	83 c0 08             	add    $0x8,%eax
   122fa:	83 ec 08             	sub    $0x8,%esp
   122fd:	52                   	push   %edx
   122fe:	50                   	push   %eax
   122ff:	e8 9b 0f 00 00       	call   1329f <list_insert_last>
   12304:	83 c4 10             	add    $0x10,%esp
    task_switch();
   12307:	e8 f0 ed ff ff       	call   110fc <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   1230c:	83 ec 0c             	sub    $0xc,%esp
   1230f:	ff 75 f4             	push   -0xc(%ebp)
   12312:	e8 e4 fc ff ff       	call   11ffb <idt_leave_protection>
   12317:	83 c4 10             	add    $0x10,%esp
}
   1231a:	90                   	nop
   1231b:	c9                   	leave  
   1231c:	c3                   	ret    

0001231d <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   1231d:	55                   	push   %ebp
   1231e:	89 e5                	mov    %esp,%ebp
   12320:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12323:	e8 bb fc ff ff       	call   11fe3 <idt_enter_protection>
   12328:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   1232b:	e8 c2 ed ff ff       	call   110f2 <task_current>
   12330:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   12333:	8b 45 08             	mov    0x8(%ebp),%eax
   12336:	8b 00                	mov    (%eax),%eax
   12338:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1233b:	0f 85 83 00 00 00    	jne    123c4 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   12341:	8b 45 08             	mov    0x8(%ebp),%eax
   12344:	8b 40 04             	mov    0x4(%eax),%eax
   12347:	8d 50 ff             	lea    -0x1(%eax),%edx
   1234a:	8b 45 08             	mov    0x8(%ebp),%eax
   1234d:	89 50 04             	mov    %edx,0x4(%eax)
   12350:	8b 45 08             	mov    0x8(%ebp),%eax
   12353:	8b 40 04             	mov    0x4(%eax),%eax
   12356:	85 c0                	test   %eax,%eax
   12358:	75 6a                	jne    123c4 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   1235a:	8b 45 08             	mov    0x8(%ebp),%eax
   1235d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   12363:	8b 45 08             	mov    0x8(%ebp),%eax
   12366:	83 c0 08             	add    $0x8,%eax
   12369:	83 ec 0c             	sub    $0xc,%esp
   1236c:	50                   	push   %eax
   1236d:	e8 98 fe ff ff       	call   1220a <list_is_empty>
   12372:	83 c4 10             	add    $0x10,%esp
   12375:	85 c0                	test   %eax,%eax
   12377:	75 4b                	jne    123c4 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   12379:	8b 45 08             	mov    0x8(%ebp),%eax
   1237c:	83 c0 08             	add    $0x8,%eax
   1237f:	83 ec 0c             	sub    $0xc,%esp
   12382:	50                   	push   %eax
   12383:	e8 a6 0f 00 00       	call   1332e <list_remove_first>
   12388:	83 c4 10             	add    $0x10,%esp
   1238b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   1238e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12392:	74 08                	je     1239c <mutex_unlock+0x7f>
   12394:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12397:	83 e8 40             	sub    $0x40,%eax
   1239a:	eb 05                	jmp    123a1 <mutex_unlock+0x84>
   1239c:	b8 00 00 00 00       	mov    $0x0,%eax
   123a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   123a4:	8b 45 08             	mov    0x8(%ebp),%eax
   123a7:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   123ae:	8b 45 08             	mov    0x8(%ebp),%eax
   123b1:	8b 55 e8             	mov    -0x18(%ebp),%edx
   123b4:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   123b6:	83 ec 0c             	sub    $0xc,%esp
   123b9:	ff 75 e8             	push   -0x18(%ebp)
   123bc:	e8 6d ec ff ff       	call   1102e <task_set_ready>
   123c1:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   123c4:	83 ec 0c             	sub    $0xc,%esp
   123c7:	ff 75 f4             	push   -0xc(%ebp)
   123ca:	e8 2c fc ff ff       	call   11ffb <idt_leave_protection>
   123cf:	83 c4 10             	add    $0x10,%esp
}
   123d2:	90                   	nop
   123d3:	c9                   	leave  
   123d4:	c3                   	ret    

000123d5 <list_init>:
static inline void list_init(list_t *list) {
   123d5:	55                   	push   %ebp
   123d6:	89 e5                	mov    %esp,%ebp
   123d8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   123db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123df:	75 19                	jne    123fa <list_init+0x25>
   123e1:	68 84 41 01 00       	push   $0x14184
   123e6:	68 28 42 01 00       	push   $0x14228
   123eb:	6a 31                	push   $0x31
   123ed:	68 98 41 01 00       	push   $0x14198
   123f2:	e8 5d 05 00 00       	call   12954 <pannic>
   123f7:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   123fa:	8b 45 08             	mov    0x8(%ebp),%eax
   123fd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12404:	8b 45 08             	mov    0x8(%ebp),%eax
   12407:	8b 50 04             	mov    0x4(%eax),%edx
   1240a:	8b 45 08             	mov    0x8(%ebp),%eax
   1240d:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1240f:	8b 45 08             	mov    0x8(%ebp),%eax
   12412:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12419:	90                   	nop
   1241a:	c9                   	leave  
   1241b:	c3                   	ret    

0001241c <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1241c:	55                   	push   %ebp
   1241d:	89 e5                	mov    %esp,%ebp
   1241f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12422:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12426:	75 19                	jne    12441 <list_is_empty+0x25>
   12428:	68 84 41 01 00       	push   $0x14184
   1242d:	68 34 42 01 00       	push   $0x14234
   12432:	6a 38                	push   $0x38
   12434:	68 98 41 01 00       	push   $0x14198
   12439:	e8 16 05 00 00       	call   12954 <pannic>
   1243e:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12441:	8b 45 08             	mov    0x8(%ebp),%eax
   12444:	8b 40 08             	mov    0x8(%eax),%eax
   12447:	85 c0                	test   %eax,%eax
   12449:	0f 94 c0             	sete   %al
   1244c:	0f b6 c0             	movzbl %al,%eax
}
   1244f:	c9                   	leave  
   12450:	c3                   	ret    

00012451 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   12451:	55                   	push   %ebp
   12452:	89 e5                	mov    %esp,%ebp
   12454:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   12457:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1245b:	75 19                	jne    12476 <sem_init+0x25>
   1245d:	68 d6 41 01 00       	push   $0x141d6
   12462:	68 1c 42 01 00       	push   $0x1421c
   12467:	6a 18                	push   $0x18
   12469:	68 e8 41 01 00       	push   $0x141e8
   1246e:	e8 e1 04 00 00       	call   12954 <pannic>
   12473:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   12476:	8b 45 08             	mov    0x8(%ebp),%eax
   12479:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   1247f:	8b 45 08             	mov    0x8(%ebp),%eax
   12482:	83 c0 04             	add    $0x4,%eax
   12485:	83 ec 0c             	sub    $0xc,%esp
   12488:	50                   	push   %eax
   12489:	e8 47 ff ff ff       	call   123d5 <list_init>
   1248e:	83 c4 10             	add    $0x10,%esp
}
   12491:	90                   	nop
   12492:	c9                   	leave  
   12493:	c3                   	ret    

00012494 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12494:	55                   	push   %ebp
   12495:	89 e5                	mov    %esp,%ebp
   12497:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1249a:	e8 44 fb ff ff       	call   11fe3 <idt_enter_protection>
   1249f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   124a2:	8b 45 08             	mov    0x8(%ebp),%eax
   124a5:	8b 00                	mov    (%eax),%eax
   124a7:	85 c0                	test   %eax,%eax
   124a9:	7e 0f                	jle    124ba <sem_wait+0x26>
        --sem->count;   
   124ab:	8b 45 08             	mov    0x8(%ebp),%eax
   124ae:	8b 00                	mov    (%eax),%eax
   124b0:	8d 50 ff             	lea    -0x1(%eax),%edx
   124b3:	8b 45 08             	mov    0x8(%ebp),%eax
   124b6:	89 10                	mov    %edx,(%eax)
   124b8:	eb 34                	jmp    124ee <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   124ba:	e8 33 ec ff ff       	call   110f2 <task_current>
   124bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   124c2:	83 ec 0c             	sub    $0xc,%esp
   124c5:	ff 75 f0             	push   -0x10(%ebp)
   124c8:	e8 ac eb ff ff       	call   11079 <task_set_unready>
   124cd:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   124d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124d3:	8d 50 40             	lea    0x40(%eax),%edx
   124d6:	8b 45 08             	mov    0x8(%ebp),%eax
   124d9:	83 c0 04             	add    $0x4,%eax
   124dc:	83 ec 08             	sub    $0x8,%esp
   124df:	52                   	push   %edx
   124e0:	50                   	push   %eax
   124e1:	e8 b9 0d 00 00       	call   1329f <list_insert_last>
   124e6:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   124e9:	e8 0e ec ff ff       	call   110fc <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   124ee:	83 ec 0c             	sub    $0xc,%esp
   124f1:	ff 75 f4             	push   -0xc(%ebp)
   124f4:	e8 02 fb ff ff       	call   11ffb <idt_leave_protection>
   124f9:	83 c4 10             	add    $0x10,%esp
}
   124fc:	90                   	nop
   124fd:	c9                   	leave  
   124fe:	c3                   	ret    

000124ff <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   124ff:	55                   	push   %ebp
   12500:	89 e5                	mov    %esp,%ebp
   12502:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12505:	e8 d9 fa ff ff       	call   11fe3 <idt_enter_protection>
   1250a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   1250d:	8b 45 08             	mov    0x8(%ebp),%eax
   12510:	83 c0 04             	add    $0x4,%eax
   12513:	83 ec 0c             	sub    $0xc,%esp
   12516:	50                   	push   %eax
   12517:	e8 00 ff ff ff       	call   1241c <list_is_empty>
   1251c:	83 c4 10             	add    $0x10,%esp
   1251f:	85 c0                	test   %eax,%eax
   12521:	75 3b                	jne    1255e <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   12523:	8b 45 08             	mov    0x8(%ebp),%eax
   12526:	83 c0 04             	add    $0x4,%eax
   12529:	83 ec 0c             	sub    $0xc,%esp
   1252c:	50                   	push   %eax
   1252d:	e8 fc 0d 00 00       	call   1332e <list_remove_first>
   12532:	83 c4 10             	add    $0x10,%esp
   12535:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   12538:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1253c:	74 08                	je     12546 <sem_notify+0x47>
   1253e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12541:	83 e8 40             	sub    $0x40,%eax
   12544:	eb 05                	jmp    1254b <sem_notify+0x4c>
   12546:	b8 00 00 00 00       	mov    $0x0,%eax
   1254b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1254e:	83 ec 0c             	sub    $0xc,%esp
   12551:	ff 75 ec             	push   -0x14(%ebp)
   12554:	e8 d5 ea ff ff       	call   1102e <task_set_ready>
   12559:	83 c4 10             	add    $0x10,%esp
   1255c:	eb 0d                	jmp    1256b <sem_notify+0x6c>
    } else {
        sem->count++;
   1255e:	8b 45 08             	mov    0x8(%ebp),%eax
   12561:	8b 00                	mov    (%eax),%eax
   12563:	8d 50 01             	lea    0x1(%eax),%edx
   12566:	8b 45 08             	mov    0x8(%ebp),%eax
   12569:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   1256b:	83 ec 0c             	sub    $0xc,%esp
   1256e:	ff 75 f4             	push   -0xc(%ebp)
   12571:	e8 85 fa ff ff       	call   11ffb <idt_leave_protection>
   12576:	83 c4 10             	add    $0x10,%esp

}
   12579:	90                   	nop
   1257a:	c9                   	leave  
   1257b:	c3                   	ret    

0001257c <sem_count>:

int sem_count(sem_t *sem) {
   1257c:	55                   	push   %ebp
   1257d:	89 e5                	mov    %esp,%ebp
   1257f:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12582:	e8 5c fa ff ff       	call   11fe3 <idt_enter_protection>
   12587:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1258a:	8b 45 08             	mov    0x8(%ebp),%eax
   1258d:	8b 00                	mov    (%eax),%eax
   1258f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12592:	83 ec 0c             	sub    $0xc,%esp
   12595:	ff 75 f4             	push   -0xc(%ebp)
   12598:	e8 5e fa ff ff       	call   11ffb <idt_leave_protection>
   1259d:	83 c4 10             	add    $0x10,%esp

    return count;
   125a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125a3:	c9                   	leave  
   125a4:	c3                   	ret    

000125a5 <list_init>:
static inline void list_init(list_t *list) {
   125a5:	55                   	push   %ebp
   125a6:	89 e5                	mov    %esp,%ebp
   125a8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   125ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125af:	75 19                	jne    125ca <list_init+0x25>
   125b1:	68 44 42 01 00       	push   $0x14244
   125b6:	68 48 43 01 00       	push   $0x14348
   125bb:	6a 31                	push   $0x31
   125bd:	68 58 42 01 00       	push   $0x14258
   125c2:	e8 8d 03 00 00       	call   12954 <pannic>
   125c7:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   125ca:	8b 45 08             	mov    0x8(%ebp),%eax
   125cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   125d4:	8b 45 08             	mov    0x8(%ebp),%eax
   125d7:	8b 50 04             	mov    0x4(%eax),%edx
   125da:	8b 45 08             	mov    0x8(%ebp),%eax
   125dd:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   125df:	8b 45 08             	mov    0x8(%ebp),%eax
   125e2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   125e9:	90                   	nop
   125ea:	c9                   	leave  
   125eb:	c3                   	ret    

000125ec <list_get_size>:
static inline int list_get_size(list_t *list) {
   125ec:	55                   	push   %ebp
   125ed:	89 e5                	mov    %esp,%ebp
   125ef:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   125f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125f6:	75 19                	jne    12611 <list_get_size+0x25>
   125f8:	68 44 42 01 00       	push   $0x14244
   125fd:	68 54 43 01 00       	push   $0x14354
   12602:	6a 3e                	push   $0x3e
   12604:	68 58 42 01 00       	push   $0x14258
   12609:	e8 46 03 00 00       	call   12954 <pannic>
   1260e:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12611:	8b 45 08             	mov    0x8(%ebp),%eax
   12614:	8b 40 08             	mov    0x8(%eax),%eax
}
   12617:	c9                   	leave  
   12618:	c3                   	ret    

00012619 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   12619:	55                   	push   %ebp
   1261a:	89 e5                	mov    %esp,%ebp
   1261c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1261f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12623:	75 19                	jne    1263e <list_get_first+0x25>
   12625:	68 44 42 01 00       	push   $0x14244
   1262a:	68 74 43 01 00       	push   $0x14374
   1262f:	6a 44                	push   $0x44
   12631:	68 58 42 01 00       	push   $0x14258
   12636:	e8 19 03 00 00       	call   12954 <pannic>
   1263b:	83 c4 10             	add    $0x10,%esp
    return list->first;
   1263e:	8b 45 08             	mov    0x8(%ebp),%eax
   12641:	8b 00                	mov    (%eax),%eax
}
   12643:	c9                   	leave  
   12644:	c3                   	ret    

00012645 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   12645:	55                   	push   %ebp
   12646:	89 e5                	mov    %esp,%ebp
   12648:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1264b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1264f:	75 19                	jne    1266a <list_get_last+0x25>
   12651:	68 44 42 01 00       	push   $0x14244
   12656:	68 64 43 01 00       	push   $0x14364
   1265b:	6a 4a                	push   $0x4a
   1265d:	68 58 42 01 00       	push   $0x14258
   12662:	e8 ed 02 00 00       	call   12954 <pannic>
   12667:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1266a:	8b 45 08             	mov    0x8(%ebp),%eax
   1266d:	8b 40 04             	mov    0x4(%eax),%eax
}
   12670:	c9                   	leave  
   12671:	c3                   	ret    

00012672 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12672:	55                   	push   %ebp
   12673:	89 e5                	mov    %esp,%ebp
   12675:	56                   	push   %esi
   12676:	53                   	push   %ebx
   12677:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1267a:	83 ec 0c             	sub    $0xc,%esp
   1267d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12680:	50                   	push   %eax
   12681:	e8 1f ff ff ff       	call   125a5 <list_init>
   12686:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12689:	83 ec 0c             	sub    $0xc,%esp
   1268c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1268f:	50                   	push   %eax
   12690:	e8 57 ff ff ff       	call   125ec <list_get_size>
   12695:	83 c4 10             	add    $0x10,%esp
   12698:	89 c6                	mov    %eax,%esi
   1269a:	83 ec 0c             	sub    $0xc,%esp
   1269d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   126a0:	50                   	push   %eax
   126a1:	e8 9f ff ff ff       	call   12645 <list_get_last>
   126a6:	83 c4 10             	add    $0x10,%esp
   126a9:	89 c3                	mov    %eax,%ebx
   126ab:	83 ec 0c             	sub    $0xc,%esp
   126ae:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   126b1:	50                   	push   %eax
   126b2:	e8 62 ff ff ff       	call   12619 <list_get_first>
   126b7:	83 c4 10             	add    $0x10,%esp
   126ba:	56                   	push   %esi
   126bb:	53                   	push   %ebx
   126bc:	50                   	push   %eax
   126bd:	68 98 42 01 00       	push   $0x14298
   126c2:	e8 5c 0f 00 00       	call   13623 <log_printf>
   126c7:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   126ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   126d1:	eb 3f                	jmp    12712 <list_test+0xa0>
        list_node_t *node = nodes + i;
   126d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   126dd:	8d 45 9c             	lea    -0x64(%ebp),%eax
   126e0:	01 d0                	add    %edx,%eax
   126e2:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   126e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
   126e8:	83 ec 04             	sub    $0x4,%esp
   126eb:	50                   	push   %eax
   126ec:	ff 75 f4             	push   -0xc(%ebp)
   126ef:	68 c0 42 01 00       	push   $0x142c0
   126f4:	e8 2a 0f 00 00       	call   13623 <log_printf>
   126f9:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   126fc:	83 ec 08             	sub    $0x8,%esp
   126ff:	ff 75 d0             	push   -0x30(%ebp)
   12702:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12705:	50                   	push   %eax
   12706:	e8 09 0b 00 00       	call   13214 <list_insert_first>
   1270b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1270e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12712:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   12716:	7e bb                	jle    126d3 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12718:	83 ec 0c             	sub    $0xc,%esp
   1271b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1271e:	50                   	push   %eax
   1271f:	e8 c8 fe ff ff       	call   125ec <list_get_size>
   12724:	83 c4 10             	add    $0x10,%esp
   12727:	89 c6                	mov    %eax,%esi
   12729:	83 ec 0c             	sub    $0xc,%esp
   1272c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1272f:	50                   	push   %eax
   12730:	e8 10 ff ff ff       	call   12645 <list_get_last>
   12735:	83 c4 10             	add    $0x10,%esp
   12738:	89 c3                	mov    %eax,%ebx
   1273a:	83 ec 0c             	sub    $0xc,%esp
   1273d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12740:	50                   	push   %eax
   12741:	e8 d3 fe ff ff       	call   12619 <list_get_first>
   12746:	83 c4 10             	add    $0x10,%esp
   12749:	56                   	push   %esi
   1274a:	53                   	push   %ebx
   1274b:	50                   	push   %eax
   1274c:	68 98 42 01 00       	push   $0x14298
   12751:	e8 cd 0e 00 00       	call   13623 <log_printf>
   12756:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   12759:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12760:	eb 2d                	jmp    1278f <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12762:	83 ec 0c             	sub    $0xc,%esp
   12765:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12768:	50                   	push   %eax
   12769:	e8 c0 0b 00 00       	call   1332e <list_remove_first>
   1276e:	83 c4 10             	add    $0x10,%esp
   12771:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12774:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   12777:	83 ec 04             	sub    $0x4,%esp
   1277a:	50                   	push   %eax
   1277b:	ff 75 f0             	push   -0x10(%ebp)
   1277e:	68 df 42 01 00       	push   $0x142df
   12783:	e8 9b 0e 00 00       	call   13623 <log_printf>
   12788:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1278b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1278f:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12793:	7e cd                	jle    12762 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12795:	83 ec 0c             	sub    $0xc,%esp
   12798:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1279b:	50                   	push   %eax
   1279c:	e8 4b fe ff ff       	call   125ec <list_get_size>
   127a1:	83 c4 10             	add    $0x10,%esp
   127a4:	89 c6                	mov    %eax,%esi
   127a6:	83 ec 0c             	sub    $0xc,%esp
   127a9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127ac:	50                   	push   %eax
   127ad:	e8 93 fe ff ff       	call   12645 <list_get_last>
   127b2:	83 c4 10             	add    $0x10,%esp
   127b5:	89 c3                	mov    %eax,%ebx
   127b7:	83 ec 0c             	sub    $0xc,%esp
   127ba:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127bd:	50                   	push   %eax
   127be:	e8 56 fe ff ff       	call   12619 <list_get_first>
   127c3:	83 c4 10             	add    $0x10,%esp
   127c6:	56                   	push   %esi
   127c7:	53                   	push   %ebx
   127c8:	50                   	push   %eax
   127c9:	68 98 42 01 00       	push   $0x14298
   127ce:	e8 50 0e 00 00       	call   13623 <log_printf>
   127d3:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   127d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   127dd:	eb 3f                	jmp    1281e <list_test+0x1ac>
        list_node_t *node = nodes + i;
   127df:	8b 45 ec             	mov    -0x14(%ebp),%eax
   127e2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   127e9:	8d 45 9c             	lea    -0x64(%ebp),%eax
   127ec:	01 d0                	add    %edx,%eax
   127ee:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   127f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   127f4:	83 ec 04             	sub    $0x4,%esp
   127f7:	50                   	push   %eax
   127f8:	ff 75 ec             	push   -0x14(%ebp)
   127fb:	68 f6 42 01 00       	push   $0x142f6
   12800:	e8 1e 0e 00 00       	call   13623 <log_printf>
   12805:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   12808:	83 ec 08             	sub    $0x8,%esp
   1280b:	ff 75 d8             	push   -0x28(%ebp)
   1280e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12811:	50                   	push   %eax
   12812:	e8 88 0a 00 00       	call   1329f <list_insert_last>
   12817:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1281a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1281e:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12822:	7e bb                	jle    127df <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12824:	83 ec 0c             	sub    $0xc,%esp
   12827:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1282a:	50                   	push   %eax
   1282b:	e8 bc fd ff ff       	call   125ec <list_get_size>
   12830:	83 c4 10             	add    $0x10,%esp
   12833:	89 c6                	mov    %eax,%esi
   12835:	83 ec 0c             	sub    $0xc,%esp
   12838:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1283b:	50                   	push   %eax
   1283c:	e8 04 fe ff ff       	call   12645 <list_get_last>
   12841:	83 c4 10             	add    $0x10,%esp
   12844:	89 c3                	mov    %eax,%ebx
   12846:	83 ec 0c             	sub    $0xc,%esp
   12849:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1284c:	50                   	push   %eax
   1284d:	e8 c7 fd ff ff       	call   12619 <list_get_first>
   12852:	83 c4 10             	add    $0x10,%esp
   12855:	56                   	push   %esi
   12856:	53                   	push   %ebx
   12857:	50                   	push   %eax
   12858:	68 98 42 01 00       	push   $0x14298
   1285d:	e8 c1 0d 00 00       	call   13623 <log_printf>
   12862:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12865:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1286c:	eb 2d                	jmp    1289b <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1286e:	83 ec 0c             	sub    $0xc,%esp
   12871:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12874:	50                   	push   %eax
   12875:	e8 65 0b 00 00       	call   133df <list_remove_last>
   1287a:	83 c4 10             	add    $0x10,%esp
   1287d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12880:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12883:	83 ec 04             	sub    $0x4,%esp
   12886:	50                   	push   %eax
   12887:	ff 75 e8             	push   -0x18(%ebp)
   1288a:	68 14 43 01 00       	push   $0x14314
   1288f:	e8 8f 0d 00 00       	call   13623 <log_printf>
   12894:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12897:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1289b:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1289f:	7e cd                	jle    1286e <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   128a1:	83 ec 0c             	sub    $0xc,%esp
   128a4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   128a7:	50                   	push   %eax
   128a8:	e8 3f fd ff ff       	call   125ec <list_get_size>
   128ad:	83 c4 10             	add    $0x10,%esp
   128b0:	89 c6                	mov    %eax,%esi
   128b2:	83 ec 0c             	sub    $0xc,%esp
   128b5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   128b8:	50                   	push   %eax
   128b9:	e8 87 fd ff ff       	call   12645 <list_get_last>
   128be:	83 c4 10             	add    $0x10,%esp
   128c1:	89 c3                	mov    %eax,%ebx
   128c3:	83 ec 0c             	sub    $0xc,%esp
   128c6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   128c9:	50                   	push   %eax
   128ca:	e8 4a fd ff ff       	call   12619 <list_get_first>
   128cf:	83 c4 10             	add    $0x10,%esp
   128d2:	56                   	push   %esi
   128d3:	53                   	push   %ebx
   128d4:	50                   	push   %eax
   128d5:	68 98 42 01 00       	push   $0x14298
   128da:	e8 44 0d 00 00       	call   13623 <log_printf>
   128df:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   128e2:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   128e9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   128f0:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   128f7:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   128fe:	8d 45 90             	lea    -0x70(%ebp),%eax
   12901:	83 c0 04             	add    $0x4,%eax
   12904:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12907:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1290b:	74 08                	je     12915 <list_test+0x2a3>
   1290d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12910:	83 e8 04             	sub    $0x4,%eax
   12913:	eb 05                	jmp    1291a <list_test+0x2a8>
   12915:	b8 00 00 00 00       	mov    $0x0,%eax
   1291a:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   1291d:	8d 45 90             	lea    -0x70(%ebp),%eax
   12920:	83 ec 08             	sub    $0x8,%esp
   12923:	50                   	push   %eax
   12924:	68 2a 43 01 00       	push   $0x1432a
   12929:	e8 f5 0c 00 00       	call   13623 <log_printf>
   1292e:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12931:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12934:	83 ec 08             	sub    $0x8,%esp
   12937:	50                   	push   %eax
   12938:	68 38 43 01 00       	push   $0x14338
   1293d:	e8 e1 0c 00 00       	call   13623 <log_printf>
   12942:	83 c4 10             	add    $0x10,%esp

 }
   12945:	90                   	nop
   12946:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12949:	5b                   	pop    %ebx
   1294a:	5e                   	pop    %esi
   1294b:	5d                   	pop    %ebp
   1294c:	c3                   	ret    

0001294d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1294d:	55                   	push   %ebp
   1294e:	89 e5                	mov    %esp,%ebp
   12950:	f4                   	hlt    
   12951:	90                   	nop
   12952:	5d                   	pop    %ebp
   12953:	c3                   	ret    

00012954 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   12954:	55                   	push   %ebp
   12955:	89 e5                	mov    %esp,%ebp
   12957:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   1295a:	83 ec 08             	sub    $0x8,%esp
   1295d:	ff 75 14             	push   0x14(%ebp)
   12960:	68 83 43 01 00       	push   $0x14383
   12965:	e8 b9 0c 00 00       	call   13623 <log_printf>
   1296a:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   1296d:	ff 75 10             	push   0x10(%ebp)
   12970:	ff 75 0c             	push   0xc(%ebp)
   12973:	ff 75 08             	push   0x8(%ebp)
   12976:	68 94 43 01 00       	push   $0x14394
   1297b:	e8 a3 0c 00 00       	call   13623 <log_printf>
   12980:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12983:	e8 c5 ff ff ff       	call   1294d <hlt>
   12988:	eb f9                	jmp    12983 <pannic+0x2f>

0001298a <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   1298a:	55                   	push   %ebp
   1298b:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   1298d:	8b 45 08             	mov    0x8(%ebp),%eax
   12990:	83 c0 07             	add    $0x7,%eax
   12993:	8d 50 07             	lea    0x7(%eax),%edx
   12996:	85 c0                	test   %eax,%eax
   12998:	0f 48 c2             	cmovs  %edx,%eax
   1299b:	c1 f8 03             	sar    $0x3,%eax
}
   1299e:	5d                   	pop    %ebp
   1299f:	c3                   	ret    

000129a0 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   129a0:	55                   	push   %ebp
   129a1:	89 e5                	mov    %esp,%ebp
   129a3:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   129a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129aa:	75 19                	jne    129c5 <bitmap_init+0x25>
   129ac:	68 b0 43 01 00       	push   $0x143b0
   129b1:	68 44 44 01 00       	push   $0x14444
   129b6:	6a 24                	push   $0x24
   129b8:	68 c8 43 01 00       	push   $0x143c8
   129bd:	e8 92 ff ff ff       	call   12954 <pannic>
   129c2:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   129c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129c9:	75 19                	jne    129e4 <bitmap_init+0x44>
   129cb:	68 00 44 01 00       	push   $0x14400
   129d0:	68 44 44 01 00       	push   $0x14444
   129d5:	6a 25                	push   $0x25
   129d7:	68 c8 43 01 00       	push   $0x143c8
   129dc:	e8 73 ff ff ff       	call   12954 <pannic>
   129e1:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   129e4:	8b 45 08             	mov    0x8(%ebp),%eax
   129e7:	8b 55 10             	mov    0x10(%ebp),%edx
   129ea:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   129ec:	8b 45 08             	mov    0x8(%ebp),%eax
   129ef:	8b 55 0c             	mov    0xc(%ebp),%edx
   129f2:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   129f5:	8b 45 08             	mov    0x8(%ebp),%eax
   129f8:	8b 00                	mov    (%eax),%eax
   129fa:	83 ec 0c             	sub    $0xc,%esp
   129fd:	50                   	push   %eax
   129fe:	e8 87 ff ff ff       	call   1298a <bitmap_byte_count>
   12a03:	83 c4 10             	add    $0x10,%esp
   12a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12a09:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12a0d:	74 07                	je     12a16 <bitmap_init+0x76>
   12a0f:	ba ff 00 00 00       	mov    $0xff,%edx
   12a14:	eb 05                	jmp    12a1b <bitmap_init+0x7b>
   12a16:	ba 00 00 00 00       	mov    $0x0,%edx
   12a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1e:	8b 40 04             	mov    0x4(%eax),%eax
   12a21:	83 ec 04             	sub    $0x4,%esp
   12a24:	ff 75 f4             	push   -0xc(%ebp)
   12a27:	52                   	push   %edx
   12a28:	50                   	push   %eax
   12a29:	e8 28 04 00 00       	call   12e56 <kernel_memset>
   12a2e:	83 c4 10             	add    $0x10,%esp

}
   12a31:	90                   	nop
   12a32:	c9                   	leave  
   12a33:	c3                   	ret    

00012a34 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   12a34:	55                   	push   %ebp
   12a35:	89 e5                	mov    %esp,%ebp
   12a37:	53                   	push   %ebx
   12a38:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12a3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a3f:	75 19                	jne    12a5a <bitmap_get_bit+0x26>
   12a41:	68 b0 43 01 00       	push   $0x143b0
   12a46:	68 50 44 01 00       	push   $0x14450
   12a4b:	6a 39                	push   $0x39
   12a4d:	68 c8 43 01 00       	push   $0x143c8
   12a52:	e8 fd fe ff ff       	call   12954 <pannic>
   12a57:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12a5a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a5e:	79 19                	jns    12a79 <bitmap_get_bit+0x45>
   12a60:	68 14 44 01 00       	push   $0x14414
   12a65:	68 50 44 01 00       	push   $0x14450
   12a6a:	6a 3a                	push   $0x3a
   12a6c:	68 c8 43 01 00       	push   $0x143c8
   12a71:	e8 de fe ff ff       	call   12954 <pannic>
   12a76:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12a79:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7c:	8b 48 04             	mov    0x4(%eax),%ecx
   12a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a82:	8d 50 07             	lea    0x7(%eax),%edx
   12a85:	85 c0                	test   %eax,%eax
   12a87:	0f 48 c2             	cmovs  %edx,%eax
   12a8a:	c1 f8 03             	sar    $0x3,%eax
   12a8d:	01 c8                	add    %ecx,%eax
   12a8f:	0f b6 00             	movzbl (%eax),%eax
   12a92:	89 c3                	mov    %eax,%ebx
   12a94:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a97:	83 e0 07             	and    $0x7,%eax
   12a9a:	ba 01 00 00 00       	mov    $0x1,%edx
   12a9f:	89 c1                	mov    %eax,%ecx
   12aa1:	d3 e2                	shl    %cl,%edx
   12aa3:	89 d0                	mov    %edx,%eax
   12aa5:	21 d8                	and    %ebx,%eax
}
   12aa7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12aaa:	c9                   	leave  
   12aab:	c3                   	ret    

00012aac <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12aac:	55                   	push   %ebp
   12aad:	89 e5                	mov    %esp,%ebp
   12aaf:	56                   	push   %esi
   12ab0:	53                   	push   %ebx
   12ab1:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12ab4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ab8:	75 19                	jne    12ad3 <bitmap_set_bit+0x27>
   12aba:	68 b0 43 01 00       	push   $0x143b0
   12abf:	68 60 44 01 00       	push   $0x14460
   12ac4:	6a 48                	push   $0x48
   12ac6:	68 c8 43 01 00       	push   $0x143c8
   12acb:	e8 84 fe ff ff       	call   12954 <pannic>
   12ad0:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12ad3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12ad7:	78 06                	js     12adf <bitmap_set_bit+0x33>
   12ad9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12add:	79 19                	jns    12af8 <bitmap_set_bit+0x4c>
   12adf:	68 1f 44 01 00       	push   $0x1441f
   12ae4:	68 60 44 01 00       	push   $0x14460
   12ae9:	6a 49                	push   $0x49
   12aeb:	68 c8 43 01 00       	push   $0x143c8
   12af0:	e8 5f fe ff ff       	call   12954 <pannic>
   12af5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12af8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12aff:	e9 92 00 00 00       	jmp    12b96 <bitmap_set_bit+0xea>
        if (bit) {
   12b04:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12b08:	74 42                	je     12b4c <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12b0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0d:	8b 48 04             	mov    0x4(%eax),%ecx
   12b10:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b13:	8d 50 07             	lea    0x7(%eax),%edx
   12b16:	85 c0                	test   %eax,%eax
   12b18:	0f 48 c2             	cmovs  %edx,%eax
   12b1b:	c1 f8 03             	sar    $0x3,%eax
   12b1e:	89 c2                	mov    %eax,%edx
   12b20:	89 d0                	mov    %edx,%eax
   12b22:	01 c8                	add    %ecx,%eax
   12b24:	0f b6 00             	movzbl (%eax),%eax
   12b27:	89 c6                	mov    %eax,%esi
   12b29:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b2c:	83 e0 07             	and    $0x7,%eax
   12b2f:	bb 01 00 00 00       	mov    $0x1,%ebx
   12b34:	89 c1                	mov    %eax,%ecx
   12b36:	d3 e3                	shl    %cl,%ebx
   12b38:	89 d8                	mov    %ebx,%eax
   12b3a:	89 f1                	mov    %esi,%ecx
   12b3c:	09 c1                	or     %eax,%ecx
   12b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b41:	8b 40 04             	mov    0x4(%eax),%eax
   12b44:	01 d0                	add    %edx,%eax
   12b46:	89 ca                	mov    %ecx,%edx
   12b48:	88 10                	mov    %dl,(%eax)
   12b4a:	eb 42                	jmp    12b8e <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4f:	8b 48 04             	mov    0x4(%eax),%ecx
   12b52:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b55:	8d 50 07             	lea    0x7(%eax),%edx
   12b58:	85 c0                	test   %eax,%eax
   12b5a:	0f 48 c2             	cmovs  %edx,%eax
   12b5d:	c1 f8 03             	sar    $0x3,%eax
   12b60:	89 c2                	mov    %eax,%edx
   12b62:	89 d0                	mov    %edx,%eax
   12b64:	01 c8                	add    %ecx,%eax
   12b66:	0f b6 00             	movzbl (%eax),%eax
   12b69:	89 c6                	mov    %eax,%esi
   12b6b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b6e:	83 e0 07             	and    $0x7,%eax
   12b71:	bb 01 00 00 00       	mov    $0x1,%ebx
   12b76:	89 c1                	mov    %eax,%ecx
   12b78:	d3 e3                	shl    %cl,%ebx
   12b7a:	89 d8                	mov    %ebx,%eax
   12b7c:	f7 d0                	not    %eax
   12b7e:	89 f1                	mov    %esi,%ecx
   12b80:	21 c1                	and    %eax,%ecx
   12b82:	8b 45 08             	mov    0x8(%ebp),%eax
   12b85:	8b 40 04             	mov    0x4(%eax),%eax
   12b88:	01 d0                	add    %edx,%eax
   12b8a:	89 ca                	mov    %ecx,%edx
   12b8c:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12b8e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12b92:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b99:	3b 45 10             	cmp    0x10(%ebp),%eax
   12b9c:	7d 0e                	jge    12bac <bitmap_set_bit+0x100>
   12b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba1:	8b 00                	mov    (%eax),%eax
   12ba3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12ba6:	0f 8c 58 ff ff ff    	jl     12b04 <bitmap_set_bit+0x58>
        }
    }
}
   12bac:	90                   	nop
   12bad:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12bb0:	5b                   	pop    %ebx
   12bb1:	5e                   	pop    %esi
   12bb2:	5d                   	pop    %ebp
   12bb3:	c3                   	ret    

00012bb4 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12bb4:	55                   	push   %ebp
   12bb5:	89 e5                	mov    %esp,%ebp
   12bb7:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12bba:	83 ec 08             	sub    $0x8,%esp
   12bbd:	ff 75 0c             	push   0xc(%ebp)
   12bc0:	ff 75 08             	push   0x8(%ebp)
   12bc3:	e8 6c fe ff ff       	call   12a34 <bitmap_get_bit>
   12bc8:	83 c4 10             	add    $0x10,%esp
   12bcb:	84 c0                	test   %al,%al
   12bcd:	0f 95 c0             	setne  %al
   12bd0:	0f b6 c0             	movzbl %al,%eax
}
   12bd3:	c9                   	leave  
   12bd4:	c3                   	ret    

00012bd5 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12bd5:	55                   	push   %ebp
   12bd6:	89 e5                	mov    %esp,%ebp
   12bd8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12bdb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12bdf:	75 19                	jne    12bfa <bitmap_alloc_nbits+0x25>
   12be1:	68 b0 43 01 00       	push   $0x143b0
   12be6:	68 70 44 01 00       	push   $0x14470
   12beb:	6a 68                	push   $0x68
   12bed:	68 c8 43 01 00       	push   $0x143c8
   12bf2:	e8 5d fd ff ff       	call   12954 <pannic>
   12bf7:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12bfa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12bfe:	79 19                	jns    12c19 <bitmap_alloc_nbits+0x44>
   12c00:	68 38 44 01 00       	push   $0x14438
   12c05:	68 70 44 01 00       	push   $0x14470
   12c0a:	6a 69                	push   $0x69
   12c0c:	68 c8 43 01 00       	push   $0x143c8
   12c11:	e8 3e fd ff ff       	call   12954 <pannic>
   12c16:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12c19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12c20:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12c27:	e9 8f 00 00 00       	jmp    12cbb <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12c2c:	83 ec 08             	sub    $0x8,%esp
   12c2f:	ff 75 f4             	push   -0xc(%ebp)
   12c32:	ff 75 08             	push   0x8(%ebp)
   12c35:	e8 fa fd ff ff       	call   12a34 <bitmap_get_bit>
   12c3a:	83 c4 10             	add    $0x10,%esp
   12c3d:	0f b6 c0             	movzbl %al,%eax
   12c40:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c43:	74 06                	je     12c4b <bitmap_alloc_nbits+0x76>
            search_index++;
   12c45:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12c49:	eb 70                	jmp    12cbb <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c4e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12c51:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12c58:	eb 2d                	jmp    12c87 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c5d:	8d 50 01             	lea    0x1(%eax),%edx
   12c60:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12c63:	83 ec 08             	sub    $0x8,%esp
   12c66:	50                   	push   %eax
   12c67:	ff 75 08             	push   0x8(%ebp)
   12c6a:	e8 c5 fd ff ff       	call   12a34 <bitmap_get_bit>
   12c6f:	83 c4 10             	add    $0x10,%esp
   12c72:	0f b6 c0             	movzbl %al,%eax
   12c75:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c78:	74 09                	je     12c83 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12c7a:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12c81:	eb 16                	jmp    12c99 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12c83:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12c87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c8a:	3b 45 10             	cmp    0x10(%ebp),%eax
   12c8d:	7d 0a                	jge    12c99 <bitmap_alloc_nbits+0xc4>
   12c8f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c92:	8b 00                	mov    (%eax),%eax
   12c94:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12c97:	7c c1                	jl     12c5a <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12c99:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12c9d:	74 1c                	je     12cbb <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12c9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ca2:	f7 d0                	not    %eax
   12ca4:	50                   	push   %eax
   12ca5:	ff 75 10             	push   0x10(%ebp)
   12ca8:	ff 75 f0             	push   -0x10(%ebp)
   12cab:	ff 75 08             	push   0x8(%ebp)
   12cae:	e8 f9 fd ff ff       	call   12aac <bitmap_set_bit>
   12cb3:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12cb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12cb9:	eb 13                	jmp    12cce <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12cbb:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbe:	8b 00                	mov    (%eax),%eax
   12cc0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12cc3:	0f 8c 63 ff ff ff    	jl     12c2c <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12cc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12cce:	c9                   	leave  
   12ccf:	c3                   	ret    

00012cd0 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12cd0:	55                   	push   %ebp
   12cd1:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12cd3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12cd7:	74 3b                	je     12d14 <kernel_strcpy+0x44>
   12cd9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12cdd:	74 35                	je     12d14 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12cdf:	eb 17                	jmp    12cf8 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12ce1:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ce4:	8d 42 01             	lea    0x1(%edx),%eax
   12ce7:	89 45 0c             	mov    %eax,0xc(%ebp)
   12cea:	8b 45 08             	mov    0x8(%ebp),%eax
   12ced:	8d 48 01             	lea    0x1(%eax),%ecx
   12cf0:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12cf3:	0f b6 12             	movzbl (%edx),%edx
   12cf6:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   12cfb:	0f b6 00             	movzbl (%eax),%eax
   12cfe:	84 c0                	test   %al,%al
   12d00:	74 0a                	je     12d0c <kernel_strcpy+0x3c>
   12d02:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d05:	0f b6 00             	movzbl (%eax),%eax
   12d08:	84 c0                	test   %al,%al
   12d0a:	75 d5                	jne    12ce1 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12d0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0f:	c6 00 00             	movb   $0x0,(%eax)
   12d12:	eb 01                	jmp    12d15 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   12d14:	90                   	nop
    
}
   12d15:	5d                   	pop    %ebp
   12d16:	c3                   	ret    

00012d17 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12d17:	55                   	push   %ebp
   12d18:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12d1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d1e:	74 45                	je     12d65 <kernel_strncpy+0x4e>
   12d20:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d24:	74 3f                	je     12d65 <kernel_strncpy+0x4e>
   12d26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12d2a:	74 39                	je     12d65 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   12d2c:	eb 17                	jmp    12d45 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12d2e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d31:	8d 42 01             	lea    0x1(%edx),%eax
   12d34:	89 45 0c             	mov    %eax,0xc(%ebp)
   12d37:	8b 45 08             	mov    0x8(%ebp),%eax
   12d3a:	8d 48 01             	lea    0x1(%eax),%ecx
   12d3d:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12d40:	0f b6 12             	movzbl (%edx),%edx
   12d43:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   12d45:	8b 45 10             	mov    0x10(%ebp),%eax
   12d48:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d4b:	89 55 10             	mov    %edx,0x10(%ebp)
   12d4e:	83 f8 01             	cmp    $0x1,%eax
   12d51:	7e 0a                	jle    12d5d <kernel_strncpy+0x46>
   12d53:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d56:	0f b6 00             	movzbl (%eax),%eax
   12d59:	84 c0                	test   %al,%al
   12d5b:	75 d1                	jne    12d2e <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12d5d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d60:	c6 00 00             	movb   $0x0,(%eax)
   12d63:	eb 01                	jmp    12d66 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   12d65:	90                   	nop
}
   12d66:	5d                   	pop    %ebp
   12d67:	c3                   	ret    

00012d68 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   12d68:	55                   	push   %ebp
   12d69:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12d6b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d6f:	74 06                	je     12d77 <kernel_strncmp+0xf>
   12d71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d75:	75 0f                	jne    12d86 <kernel_strncmp+0x1e>
   12d77:	b8 00 00 00 00       	mov    $0x0,%eax
   12d7c:	eb 52                	jmp    12dd0 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12d7e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12d82:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   12d86:	8b 45 08             	mov    0x8(%ebp),%eax
   12d89:	0f b6 00             	movzbl (%eax),%eax
   12d8c:	84 c0                	test   %al,%al
   12d8e:	74 24                	je     12db4 <kernel_strncmp+0x4c>
   12d90:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d93:	0f b6 00             	movzbl (%eax),%eax
   12d96:	84 c0                	test   %al,%al
   12d98:	74 1a                	je     12db4 <kernel_strncmp+0x4c>
   12d9a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12d9e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12da2:	74 10                	je     12db4 <kernel_strncmp+0x4c>
   12da4:	8b 45 08             	mov    0x8(%ebp),%eax
   12da7:	0f b6 10             	movzbl (%eax),%edx
   12daa:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dad:	0f b6 00             	movzbl (%eax),%eax
   12db0:	38 c2                	cmp    %al,%dl
   12db2:	74 ca                	je     12d7e <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12db4:	8b 45 08             	mov    0x8(%ebp),%eax
   12db7:	0f b6 10             	movzbl (%eax),%edx
   12dba:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dbd:	0f b6 00             	movzbl (%eax),%eax
   12dc0:	38 c2                	cmp    %al,%dl
   12dc2:	7e 07                	jle    12dcb <kernel_strncmp+0x63>
   12dc4:	b8 01 00 00 00       	mov    $0x1,%eax
   12dc9:	eb 05                	jmp    12dd0 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12dcb:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12dd0:	5d                   	pop    %ebp
   12dd1:	c3                   	ret    

00012dd2 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12dd2:	55                   	push   %ebp
   12dd3:	89 e5                	mov    %esp,%ebp
   12dd5:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   12dd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ddc:	75 07                	jne    12de5 <kernel_strlen+0x13>
   12dde:	b8 00 00 00 00       	mov    $0x0,%eax
   12de3:	eb 20                	jmp    12e05 <kernel_strlen+0x33>

    int len = 0;
   12de5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12dec:	eb 04                	jmp    12df2 <kernel_strlen+0x20>
   12dee:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12df2:	8b 45 08             	mov    0x8(%ebp),%eax
   12df5:	8d 50 01             	lea    0x1(%eax),%edx
   12df8:	89 55 08             	mov    %edx,0x8(%ebp)
   12dfb:	0f b6 00             	movzbl (%eax),%eax
   12dfe:	84 c0                	test   %al,%al
   12e00:	75 ec                	jne    12dee <kernel_strlen+0x1c>

    return len;
   12e02:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   12e05:	c9                   	leave  
   12e06:	c3                   	ret    

00012e07 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12e07:	55                   	push   %ebp
   12e08:	89 e5                	mov    %esp,%ebp
   12e0a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12e0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e11:	74 40                	je     12e53 <kernel_memcpy+0x4c>
   12e13:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12e17:	74 3a                	je     12e53 <kernel_memcpy+0x4c>
   12e19:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e1d:	74 34                	je     12e53 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12e1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12e22:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   12e25:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e28:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12e2b:	eb 17                	jmp    12e44 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12e2d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12e30:	8d 42 01             	lea    0x1(%edx),%eax
   12e33:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12e36:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e39:	8d 48 01             	lea    0x1(%eax),%ecx
   12e3c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12e3f:	0f b6 12             	movzbl (%edx),%edx
   12e42:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12e44:	8b 45 10             	mov    0x10(%ebp),%eax
   12e47:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e4a:	89 55 10             	mov    %edx,0x10(%ebp)
   12e4d:	85 c0                	test   %eax,%eax
   12e4f:	75 dc                	jne    12e2d <kernel_memcpy+0x26>
   12e51:	eb 01                	jmp    12e54 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12e53:	90                   	nop
    }
    
}
   12e54:	c9                   	leave  
   12e55:	c3                   	ret    

00012e56 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12e56:	55                   	push   %ebp
   12e57:	89 e5                	mov    %esp,%ebp
   12e59:	83 ec 14             	sub    $0x14,%esp
   12e5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e5f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12e62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e66:	74 2c                	je     12e94 <kernel_memset+0x3e>
   12e68:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e6c:	74 26                	je     12e94 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12e6e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e71:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12e74:	eb 0f                	jmp    12e85 <kernel_memset+0x2f>
        *(d++) = v;
   12e76:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e79:	8d 50 01             	lea    0x1(%eax),%edx
   12e7c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12e7f:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12e83:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12e85:	8b 45 10             	mov    0x10(%ebp),%eax
   12e88:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e8b:	89 55 10             	mov    %edx,0x10(%ebp)
   12e8e:	85 c0                	test   %eax,%eax
   12e90:	75 e4                	jne    12e76 <kernel_memset+0x20>
   12e92:	eb 01                	jmp    12e95 <kernel_memset+0x3f>
    if (!dest || !size) return;
   12e94:	90                   	nop
    }
    
}
   12e95:	c9                   	leave  
   12e96:	c3                   	ret    

00012e97 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   12e97:	55                   	push   %ebp
   12e98:	89 e5                	mov    %esp,%ebp
   12e9a:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12e9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ea1:	74 0c                	je     12eaf <kernel_memcmp+0x18>
   12ea3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12ea7:	74 06                	je     12eaf <kernel_memcmp+0x18>
   12ea9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12ead:	75 07                	jne    12eb6 <kernel_memcmp+0x1f>
   12eaf:	b8 00 00 00 00       	mov    $0x0,%eax
   12eb4:	eb 63                	jmp    12f19 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12eb6:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12ebc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ebf:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12ec2:	eb 08                	jmp    12ecc <kernel_memcmp+0x35>
        d1++;
   12ec4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12ec8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12ecc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12ed0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12ed4:	74 10                	je     12ee6 <kernel_memcmp+0x4f>
   12ed6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ed9:	0f b6 10             	movzbl (%eax),%edx
   12edc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12edf:	0f b6 00             	movzbl (%eax),%eax
   12ee2:	38 c2                	cmp    %al,%dl
   12ee4:	74 de                	je     12ec4 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12ee6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ee9:	0f b6 10             	movzbl (%eax),%edx
   12eec:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12eef:	0f b6 00             	movzbl (%eax),%eax
   12ef2:	38 c2                	cmp    %al,%dl
   12ef4:	76 07                	jbe    12efd <kernel_memcmp+0x66>
   12ef6:	b8 01 00 00 00       	mov    $0x1,%eax
   12efb:	eb 1c                	jmp    12f19 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12efd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f00:	0f b6 10             	movzbl (%eax),%edx
   12f03:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12f06:	0f b6 00             	movzbl (%eax),%eax
   12f09:	38 c2                	cmp    %al,%dl
   12f0b:	73 07                	jae    12f14 <kernel_memcmp+0x7d>
   12f0d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12f12:	eb 05                	jmp    12f19 <kernel_memcmp+0x82>
    else return 0;
   12f14:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12f19:	c9                   	leave  
   12f1a:	c3                   	ret    

00012f1b <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12f1b:	55                   	push   %ebp
   12f1c:	89 e5                	mov    %esp,%ebp
   12f1e:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12f21:	8d 45 10             	lea    0x10(%ebp),%eax
   12f24:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f2a:	83 ec 04             	sub    $0x4,%esp
   12f2d:	50                   	push   %eax
   12f2e:	ff 75 0c             	push   0xc(%ebp)
   12f31:	ff 75 08             	push   0x8(%ebp)
   12f34:	e8 06 00 00 00       	call   12f3f <kernel_vsprintf>
   12f39:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12f3c:	90                   	nop
   12f3d:	c9                   	leave  
   12f3e:	c3                   	ret    

00012f3f <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12f3f:	55                   	push   %ebp
   12f40:	89 e5                	mov    %esp,%ebp
   12f42:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12f45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12f4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f4f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12f52:	e9 68 01 00 00       	jmp    130bf <kernel_vsprintf+0x180>
        switch (state) {
   12f57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12f5b:	74 0b                	je     12f68 <kernel_vsprintf+0x29>
   12f5d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12f61:	74 2b                	je     12f8e <kernel_vsprintf+0x4f>
   12f63:	e9 56 01 00 00       	jmp    130be <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12f68:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12f6c:	75 0c                	jne    12f7a <kernel_vsprintf+0x3b>
   12f6e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12f75:	e9 45 01 00 00       	jmp    130bf <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12f7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12f7d:	8d 50 01             	lea    0x1(%eax),%edx
   12f80:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12f83:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12f87:	88 10                	mov    %dl,(%eax)
            break;
   12f89:	e9 31 01 00 00       	jmp    130bf <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12f8e:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12f92:	75 47                	jne    12fdb <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12f94:	8b 45 10             	mov    0x10(%ebp),%eax
   12f97:	8d 50 04             	lea    0x4(%eax),%edx
   12f9a:	89 55 10             	mov    %edx,0x10(%ebp)
   12f9d:	8b 00                	mov    (%eax),%eax
   12f9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12fa2:	ff 75 ec             	push   -0x14(%ebp)
   12fa5:	e8 28 fe ff ff       	call   12dd2 <kernel_strlen>
   12faa:	83 c4 04             	add    $0x4,%esp
   12fad:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12fb0:	eb 17                	jmp    12fc9 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12fb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12fb5:	8d 42 01             	lea    0x1(%edx),%eax
   12fb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12fbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12fbe:	8d 48 01             	lea    0x1(%eax),%ecx
   12fc1:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12fc4:	0f b6 12             	movzbl (%edx),%edx
   12fc7:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12fcc:	8d 50 ff             	lea    -0x1(%eax),%edx
   12fcf:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12fd2:	85 c0                	test   %eax,%eax
   12fd4:	75 dc                	jne    12fb2 <kernel_vsprintf+0x73>
   12fd6:	e9 da 00 00 00       	jmp    130b5 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12fdb:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12fdf:	75 37                	jne    13018 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12fe1:	8b 45 10             	mov    0x10(%ebp),%eax
   12fe4:	8d 50 04             	lea    0x4(%eax),%edx
   12fe7:	89 55 10             	mov    %edx,0x10(%ebp)
   12fea:	8b 00                	mov    (%eax),%eax
   12fec:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12fef:	83 ec 04             	sub    $0x4,%esp
   12ff2:	6a 0a                	push   $0xa
   12ff4:	ff 75 d8             	push   -0x28(%ebp)
   12ff7:	ff 75 f0             	push   -0x10(%ebp)
   12ffa:	e8 dd 00 00 00       	call   130dc <kernel_itoa>
   12fff:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   13002:	83 ec 0c             	sub    $0xc,%esp
   13005:	ff 75 f0             	push   -0x10(%ebp)
   13008:	e8 c5 fd ff ff       	call   12dd2 <kernel_strlen>
   1300d:	83 c4 10             	add    $0x10,%esp
   13010:	01 45 f0             	add    %eax,-0x10(%ebp)
   13013:	e9 9d 00 00 00       	jmp    130b5 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   13018:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   1301c:	74 06                	je     13024 <kernel_vsprintf+0xe5>
   1301e:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   13022:	75 34                	jne    13058 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   13024:	8b 45 10             	mov    0x10(%ebp),%eax
   13027:	8d 50 04             	lea    0x4(%eax),%edx
   1302a:	89 55 10             	mov    %edx,0x10(%ebp)
   1302d:	8b 00                	mov    (%eax),%eax
   1302f:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   13032:	83 ec 04             	sub    $0x4,%esp
   13035:	6a 10                	push   $0x10
   13037:	ff 75 dc             	push   -0x24(%ebp)
   1303a:	ff 75 f0             	push   -0x10(%ebp)
   1303d:	e8 9a 00 00 00       	call   130dc <kernel_itoa>
   13042:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   13045:	83 ec 0c             	sub    $0xc,%esp
   13048:	ff 75 f0             	push   -0x10(%ebp)
   1304b:	e8 82 fd ff ff       	call   12dd2 <kernel_strlen>
   13050:	83 c4 10             	add    $0x10,%esp
   13053:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   13056:	eb 5d                	jmp    130b5 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   13058:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1305c:	75 34                	jne    13092 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   1305e:	8b 45 10             	mov    0x10(%ebp),%eax
   13061:	8d 50 04             	lea    0x4(%eax),%edx
   13064:	89 55 10             	mov    %edx,0x10(%ebp)
   13067:	8b 00                	mov    (%eax),%eax
   13069:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   1306c:	83 ec 04             	sub    $0x4,%esp
   1306f:	6a 02                	push   $0x2
   13071:	ff 75 e0             	push   -0x20(%ebp)
   13074:	ff 75 f0             	push   -0x10(%ebp)
   13077:	e8 60 00 00 00       	call   130dc <kernel_itoa>
   1307c:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1307f:	83 ec 0c             	sub    $0xc,%esp
   13082:	ff 75 f0             	push   -0x10(%ebp)
   13085:	e8 48 fd ff ff       	call   12dd2 <kernel_strlen>
   1308a:	83 c4 10             	add    $0x10,%esp
   1308d:	01 45 f0             	add    %eax,-0x10(%ebp)
   13090:	eb 23                	jmp    130b5 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   13092:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   13096:	75 1d                	jne    130b5 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   13098:	8b 45 10             	mov    0x10(%ebp),%eax
   1309b:	8d 50 04             	lea    0x4(%eax),%edx
   1309e:	89 55 10             	mov    %edx,0x10(%ebp)
   130a1:	8b 00                	mov    (%eax),%eax
   130a3:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   130a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   130a9:	8d 50 01             	lea    0x1(%eax),%edx
   130ac:	89 55 f0             	mov    %edx,-0x10(%ebp)
   130af:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   130b3:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   130b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   130bc:	eb 01                	jmp    130bf <kernel_vsprintf+0x180>
        default:
            break;
   130be:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   130bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   130c2:	8d 50 01             	lea    0x1(%eax),%edx
   130c5:	89 55 0c             	mov    %edx,0xc(%ebp)
   130c8:	0f b6 00             	movzbl (%eax),%eax
   130cb:	88 45 e7             	mov    %al,-0x19(%ebp)
   130ce:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   130d2:	0f 85 7f fe ff ff    	jne    12f57 <kernel_vsprintf+0x18>
        }
    }
    

}
   130d8:	90                   	nop
   130d9:	90                   	nop
   130da:	c9                   	leave  
   130db:	c3                   	ret    

000130dc <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   130dc:	55                   	push   %ebp
   130dd:	89 e5                	mov    %esp,%ebp
   130df:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   130e5:	8b 45 08             	mov    0x8(%ebp),%eax
   130e8:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   130eb:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   130ef:	74 1d                	je     1310e <kernel_itoa+0x32>
   130f1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   130f5:	74 17                	je     1310e <kernel_itoa+0x32>
   130f7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   130fb:	74 11                	je     1310e <kernel_itoa+0x32>
   130fd:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   13101:	74 0b                	je     1310e <kernel_itoa+0x32>
        *buf = '\0';
   13103:	8b 45 08             	mov    0x8(%ebp),%eax
   13106:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13109:	e9 a2 00 00 00       	jmp    131b0 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   1310e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13112:	79 11                	jns    13125 <kernel_itoa+0x49>
        *(p++) = '-';
   13114:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13117:	8d 50 01             	lea    0x1(%eax),%edx
   1311a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1311d:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   13120:	f7 5d 0c             	negl   0xc(%ebp)
   13123:	eb 1a                	jmp    1313f <kernel_itoa+0x63>
    } else if (num == 0) {
   13125:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13129:	75 14                	jne    1313f <kernel_itoa+0x63>
        *(p++) = '0';
   1312b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1312e:	8d 50 01             	lea    0x1(%eax),%edx
   13131:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13134:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   13137:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1313a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1313d:	eb 71                	jmp    131b0 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   1313f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   13146:	eb 2e                	jmp    13176 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   13148:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   1314e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13151:	99                   	cltd   
   13152:	f7 7d 10             	idivl  0x10(%ebp)
   13155:	89 d0                	mov    %edx,%eax
   13157:	01 c1                	add    %eax,%ecx
   13159:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1315c:	8d 50 01             	lea    0x1(%eax),%edx
   1315f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13162:	0f b6 11             	movzbl (%ecx),%edx
   13165:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   1316c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1316f:	99                   	cltd   
   13170:	f7 7d 10             	idivl  0x10(%ebp)
   13173:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   13176:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1317a:	7f cc                	jg     13148 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   1317c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1317f:	83 e8 01             	sub    $0x1,%eax
   13182:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13185:	eb 1d                	jmp    131a4 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   13187:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1318a:	8d 50 01             	lea    0x1(%eax),%edx
   1318d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13190:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   13196:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13199:	01 ca                	add    %ecx,%edx
   1319b:	0f b6 12             	movzbl (%edx),%edx
   1319e:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   131a0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   131a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   131a8:	79 dd                	jns    13187 <kernel_itoa+0xab>
    }
    *p = '\0';
   131aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131ad:	c6 00 00             	movb   $0x0,(%eax)
   131b0:	c9                   	leave  
   131b1:	c3                   	ret    

000131b2 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   131b2:	55                   	push   %ebp
   131b3:	89 e5                	mov    %esp,%ebp
   131b5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   131b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   131bc:	75 19                	jne    131d7 <list_is_empty+0x25>
   131be:	68 94 44 01 00       	push   $0x14494
   131c3:	68 78 45 01 00       	push   $0x14578
   131c8:	6a 38                	push   $0x38
   131ca:	68 a8 44 01 00       	push   $0x144a8
   131cf:	e8 80 f7 ff ff       	call   12954 <pannic>
   131d4:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   131d7:	8b 45 08             	mov    0x8(%ebp),%eax
   131da:	8b 40 08             	mov    0x8(%eax),%eax
   131dd:	85 c0                	test   %eax,%eax
   131df:	0f 94 c0             	sete   %al
   131e2:	0f b6 c0             	movzbl %al,%eax
}
   131e5:	c9                   	leave  
   131e6:	c3                   	ret    

000131e7 <list_get_size>:
static inline int list_get_size(list_t *list) {
   131e7:	55                   	push   %ebp
   131e8:	89 e5                	mov    %esp,%ebp
   131ea:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   131ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   131f1:	75 19                	jne    1320c <list_get_size+0x25>
   131f3:	68 94 44 01 00       	push   $0x14494
   131f8:	68 b0 45 01 00       	push   $0x145b0
   131fd:	6a 3e                	push   $0x3e
   131ff:	68 a8 44 01 00       	push   $0x144a8
   13204:	e8 4b f7 ff ff       	call   12954 <pannic>
   13209:	83 c4 10             	add    $0x10,%esp
    return list->size;
   1320c:	8b 45 08             	mov    0x8(%ebp),%eax
   1320f:	8b 40 08             	mov    0x8(%eax),%eax
}
   13212:	c9                   	leave  
   13213:	c3                   	ret    

00013214 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   13214:	55                   	push   %ebp
   13215:	89 e5                	mov    %esp,%ebp
   13217:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1321a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1321e:	74 06                	je     13226 <list_insert_first+0x12>
   13220:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13224:	75 19                	jne    1323f <list_insert_first+0x2b>
   13226:	68 e8 44 01 00       	push   $0x144e8
   1322b:	68 64 45 01 00       	push   $0x14564
   13230:	6a 0f                	push   $0xf
   13232:	68 18 45 01 00       	push   $0x14518
   13237:	e8 18 f7 ff ff       	call   12954 <pannic>
   1323c:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   1323f:	8b 45 08             	mov    0x8(%ebp),%eax
   13242:	8b 10                	mov    (%eax),%edx
   13244:	8b 45 0c             	mov    0xc(%ebp),%eax
   13247:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1324a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1324d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13253:	83 ec 0c             	sub    $0xc,%esp
   13256:	ff 75 08             	push   0x8(%ebp)
   13259:	e8 54 ff ff ff       	call   131b2 <list_is_empty>
   1325e:	83 c4 10             	add    $0x10,%esp
   13261:	85 c0                	test   %eax,%eax
   13263:	74 16                	je     1327b <list_insert_first+0x67>
        list->first = list->last = node;
   13265:	8b 45 08             	mov    0x8(%ebp),%eax
   13268:	8b 55 0c             	mov    0xc(%ebp),%edx
   1326b:	89 50 04             	mov    %edx,0x4(%eax)
   1326e:	8b 45 08             	mov    0x8(%ebp),%eax
   13271:	8b 50 04             	mov    0x4(%eax),%edx
   13274:	8b 45 08             	mov    0x8(%ebp),%eax
   13277:	89 10                	mov    %edx,(%eax)
   13279:	eb 12                	jmp    1328d <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1327b:	8b 45 08             	mov    0x8(%ebp),%eax
   1327e:	8b 00                	mov    (%eax),%eax
   13280:	8b 55 0c             	mov    0xc(%ebp),%edx
   13283:	89 10                	mov    %edx,(%eax)
        list->first = node;
   13285:	8b 45 08             	mov    0x8(%ebp),%eax
   13288:	8b 55 0c             	mov    0xc(%ebp),%edx
   1328b:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   1328d:	8b 45 08             	mov    0x8(%ebp),%eax
   13290:	8b 40 08             	mov    0x8(%eax),%eax
   13293:	8d 50 01             	lea    0x1(%eax),%edx
   13296:	8b 45 08             	mov    0x8(%ebp),%eax
   13299:	89 50 08             	mov    %edx,0x8(%eax)
}
   1329c:	90                   	nop
   1329d:	c9                   	leave  
   1329e:	c3                   	ret    

0001329f <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1329f:	55                   	push   %ebp
   132a0:	89 e5                	mov    %esp,%ebp
   132a2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   132a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132a9:	74 06                	je     132b1 <list_insert_last+0x12>
   132ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   132af:	75 19                	jne    132ca <list_insert_last+0x2b>
   132b1:	68 e8 44 01 00       	push   $0x144e8
   132b6:	68 88 45 01 00       	push   $0x14588
   132bb:	6a 1f                	push   $0x1f
   132bd:	68 18 45 01 00       	push   $0x14518
   132c2:	e8 8d f6 ff ff       	call   12954 <pannic>
   132c7:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   132ca:	8b 45 08             	mov    0x8(%ebp),%eax
   132cd:	8b 50 04             	mov    0x4(%eax),%edx
   132d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   132d3:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   132d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   132d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   132df:	83 ec 0c             	sub    $0xc,%esp
   132e2:	ff 75 08             	push   0x8(%ebp)
   132e5:	e8 c8 fe ff ff       	call   131b2 <list_is_empty>
   132ea:	83 c4 10             	add    $0x10,%esp
   132ed:	85 c0                	test   %eax,%eax
   132ef:	74 16                	je     13307 <list_insert_last+0x68>
        list->first = list->last = node;
   132f1:	8b 45 08             	mov    0x8(%ebp),%eax
   132f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   132f7:	89 50 04             	mov    %edx,0x4(%eax)
   132fa:	8b 45 08             	mov    0x8(%ebp),%eax
   132fd:	8b 50 04             	mov    0x4(%eax),%edx
   13300:	8b 45 08             	mov    0x8(%ebp),%eax
   13303:	89 10                	mov    %edx,(%eax)
   13305:	eb 15                	jmp    1331c <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   13307:	8b 45 08             	mov    0x8(%ebp),%eax
   1330a:	8b 40 04             	mov    0x4(%eax),%eax
   1330d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13310:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   13313:	8b 45 08             	mov    0x8(%ebp),%eax
   13316:	8b 55 0c             	mov    0xc(%ebp),%edx
   13319:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   1331c:	8b 45 08             	mov    0x8(%ebp),%eax
   1331f:	8b 40 08             	mov    0x8(%eax),%eax
   13322:	8d 50 01             	lea    0x1(%eax),%edx
   13325:	8b 45 08             	mov    0x8(%ebp),%eax
   13328:	89 50 08             	mov    %edx,0x8(%eax)

}
   1332b:	90                   	nop
   1332c:	c9                   	leave  
   1332d:	c3                   	ret    

0001332e <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   1332e:	55                   	push   %ebp
   1332f:	89 e5                	mov    %esp,%ebp
   13331:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   13334:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13338:	75 19                	jne    13353 <list_remove_first+0x25>
   1333a:	68 4e 45 01 00       	push   $0x1454e
   1333f:	68 9c 45 01 00       	push   $0x1459c
   13344:	6a 31                	push   $0x31
   13346:	68 18 45 01 00       	push   $0x14518
   1334b:	e8 04 f6 ff ff       	call   12954 <pannic>
   13350:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   13353:	83 ec 0c             	sub    $0xc,%esp
   13356:	ff 75 08             	push   0x8(%ebp)
   13359:	e8 54 fe ff ff       	call   131b2 <list_is_empty>
   1335e:	83 c4 10             	add    $0x10,%esp
   13361:	85 c0                	test   %eax,%eax
   13363:	74 07                	je     1336c <list_remove_first+0x3e>
        return (list_node_t*)0;
   13365:	b8 00 00 00 00       	mov    $0x0,%eax
   1336a:	eb 71                	jmp    133dd <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   1336c:	8b 45 08             	mov    0x8(%ebp),%eax
   1336f:	8b 00                	mov    (%eax),%eax
   13371:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13374:	83 ec 0c             	sub    $0xc,%esp
   13377:	ff 75 08             	push   0x8(%ebp)
   1337a:	e8 68 fe ff ff       	call   131e7 <list_get_size>
   1337f:	83 c4 10             	add    $0x10,%esp
   13382:	83 f8 01             	cmp    $0x1,%eax
   13385:	75 17                	jne    1339e <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   13387:	8b 45 08             	mov    0x8(%ebp),%eax
   1338a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13391:	8b 45 08             	mov    0x8(%ebp),%eax
   13394:	8b 50 04             	mov    0x4(%eax),%edx
   13397:	8b 45 08             	mov    0x8(%ebp),%eax
   1339a:	89 10                	mov    %edx,(%eax)
   1339c:	eb 18                	jmp    133b6 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   1339e:	8b 45 08             	mov    0x8(%ebp),%eax
   133a1:	8b 00                	mov    (%eax),%eax
   133a3:	8b 50 04             	mov    0x4(%eax),%edx
   133a6:	8b 45 08             	mov    0x8(%ebp),%eax
   133a9:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   133ab:	8b 45 08             	mov    0x8(%ebp),%eax
   133ae:	8b 00                	mov    (%eax),%eax
   133b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   133b6:	8b 45 08             	mov    0x8(%ebp),%eax
   133b9:	8b 40 08             	mov    0x8(%eax),%eax
   133bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   133bf:	8b 45 08             	mov    0x8(%ebp),%eax
   133c2:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   133c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133c8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   133cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133d2:	8b 50 04             	mov    0x4(%eax),%edx
   133d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133d8:	89 10                	mov    %edx,(%eax)
    return ret;
   133da:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   133dd:	c9                   	leave  
   133de:	c3                   	ret    

000133df <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   133df:	55                   	push   %ebp
   133e0:	89 e5                	mov    %esp,%ebp
   133e2:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   133e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   133e9:	75 19                	jne    13404 <list_remove_last+0x25>
   133eb:	68 4e 45 01 00       	push   $0x1454e
   133f0:	68 c0 45 01 00       	push   $0x145c0
   133f5:	6a 46                	push   $0x46
   133f7:	68 18 45 01 00       	push   $0x14518
   133fc:	e8 53 f5 ff ff       	call   12954 <pannic>
   13401:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   13404:	83 ec 0c             	sub    $0xc,%esp
   13407:	ff 75 08             	push   0x8(%ebp)
   1340a:	e8 a3 fd ff ff       	call   131b2 <list_is_empty>
   1340f:	83 c4 10             	add    $0x10,%esp
   13412:	85 c0                	test   %eax,%eax
   13414:	74 07                	je     1341d <list_remove_last+0x3e>
        return (list_node_t*)0;
   13416:	b8 00 00 00 00       	mov    $0x0,%eax
   1341b:	eb 75                	jmp    13492 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   1341d:	8b 45 08             	mov    0x8(%ebp),%eax
   13420:	8b 40 04             	mov    0x4(%eax),%eax
   13423:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13426:	83 ec 0c             	sub    $0xc,%esp
   13429:	ff 75 08             	push   0x8(%ebp)
   1342c:	e8 b6 fd ff ff       	call   131e7 <list_get_size>
   13431:	83 c4 10             	add    $0x10,%esp
   13434:	83 f8 01             	cmp    $0x1,%eax
   13437:	75 17                	jne    13450 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   13439:	8b 45 08             	mov    0x8(%ebp),%eax
   1343c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13443:	8b 45 08             	mov    0x8(%ebp),%eax
   13446:	8b 50 04             	mov    0x4(%eax),%edx
   13449:	8b 45 08             	mov    0x8(%ebp),%eax
   1344c:	89 10                	mov    %edx,(%eax)
   1344e:	eb 1b                	jmp    1346b <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   13450:	8b 45 08             	mov    0x8(%ebp),%eax
   13453:	8b 40 04             	mov    0x4(%eax),%eax
   13456:	8b 10                	mov    (%eax),%edx
   13458:	8b 45 08             	mov    0x8(%ebp),%eax
   1345b:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   1345e:	8b 45 08             	mov    0x8(%ebp),%eax
   13461:	8b 40 04             	mov    0x4(%eax),%eax
   13464:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   1346b:	8b 45 08             	mov    0x8(%ebp),%eax
   1346e:	8b 40 08             	mov    0x8(%eax),%eax
   13471:	8d 50 ff             	lea    -0x1(%eax),%edx
   13474:	8b 45 08             	mov    0x8(%ebp),%eax
   13477:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1347a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1347d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13484:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13487:	8b 50 04             	mov    0x4(%eax),%edx
   1348a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1348d:	89 10                	mov    %edx,(%eax)
    return ret;
   1348f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13492:	c9                   	leave  
   13493:	c3                   	ret    

00013494 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13494:	55                   	push   %ebp
   13495:	89 e5                	mov    %esp,%ebp
   13497:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1349a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1349e:	74 06                	je     134a6 <list_remove+0x12>
   134a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   134a4:	75 19                	jne    134bf <list_remove+0x2b>
   134a6:	68 e8 44 01 00       	push   $0x144e8
   134ab:	68 d4 45 01 00       	push   $0x145d4
   134b0:	6a 5b                	push   $0x5b
   134b2:	68 18 45 01 00       	push   $0x14518
   134b7:	e8 98 f4 ff ff       	call   12954 <pannic>
   134bc:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   134bf:	83 ec 0c             	sub    $0xc,%esp
   134c2:	ff 75 08             	push   0x8(%ebp)
   134c5:	e8 e8 fc ff ff       	call   131b2 <list_is_empty>
   134ca:	83 c4 10             	add    $0x10,%esp
   134cd:	85 c0                	test   %eax,%eax
   134cf:	74 0a                	je     134db <list_remove+0x47>
        return (list_node_t*)0;
   134d1:	b8 00 00 00 00       	mov    $0x0,%eax
   134d6:	e9 80 00 00 00       	jmp    1355b <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   134db:	8b 45 08             	mov    0x8(%ebp),%eax
   134de:	8b 00                	mov    (%eax),%eax
   134e0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   134e3:	75 0b                	jne    134f0 <list_remove+0x5c>
   134e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   134e8:	8b 50 04             	mov    0x4(%eax),%edx
   134eb:	8b 45 08             	mov    0x8(%ebp),%eax
   134ee:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   134f0:	8b 45 08             	mov    0x8(%ebp),%eax
   134f3:	8b 40 04             	mov    0x4(%eax),%eax
   134f6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   134f9:	75 0b                	jne    13506 <list_remove+0x72>
   134fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   134fe:	8b 10                	mov    (%eax),%edx
   13500:	8b 45 08             	mov    0x8(%ebp),%eax
   13503:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   13506:	8b 45 0c             	mov    0xc(%ebp),%eax
   13509:	8b 00                	mov    (%eax),%eax
   1350b:	85 c0                	test   %eax,%eax
   1350d:	74 0e                	je     1351d <list_remove+0x89>
   1350f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13512:	8b 00                	mov    (%eax),%eax
   13514:	8b 55 0c             	mov    0xc(%ebp),%edx
   13517:	8b 52 04             	mov    0x4(%edx),%edx
   1351a:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   1351d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13520:	8b 40 04             	mov    0x4(%eax),%eax
   13523:	85 c0                	test   %eax,%eax
   13525:	74 0d                	je     13534 <list_remove+0xa0>
   13527:	8b 45 0c             	mov    0xc(%ebp),%eax
   1352a:	8b 40 04             	mov    0x4(%eax),%eax
   1352d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13530:	8b 12                	mov    (%edx),%edx
   13532:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   13534:	8b 45 0c             	mov    0xc(%ebp),%eax
   13537:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1353e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13541:	8b 50 04             	mov    0x4(%eax),%edx
   13544:	8b 45 0c             	mov    0xc(%ebp),%eax
   13547:	89 10                	mov    %edx,(%eax)
    list->size--;
   13549:	8b 45 08             	mov    0x8(%ebp),%eax
   1354c:	8b 40 08             	mov    0x8(%eax),%eax
   1354f:	8d 50 ff             	lea    -0x1(%eax),%edx
   13552:	8b 45 08             	mov    0x8(%ebp),%eax
   13555:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   13558:	8b 45 0c             	mov    0xc(%ebp),%eax
   1355b:	c9                   	leave  
   1355c:	c3                   	ret    

0001355d <inb>:
static inline uint8_t inb(uint16_t port) {
   1355d:	55                   	push   %ebp
   1355e:	89 e5                	mov    %esp,%ebp
   13560:	83 ec 14             	sub    $0x14,%esp
   13563:	8b 45 08             	mov    0x8(%ebp),%eax
   13566:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1356a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1356e:	89 c2                	mov    %eax,%edx
   13570:	ec                   	in     (%dx),%al
   13571:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13574:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13578:	c9                   	leave  
   13579:	c3                   	ret    

0001357a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1357a:	55                   	push   %ebp
   1357b:	89 e5                	mov    %esp,%ebp
   1357d:	83 ec 08             	sub    $0x8,%esp
   13580:	8b 45 08             	mov    0x8(%ebp),%eax
   13583:	8b 55 0c             	mov    0xc(%ebp),%edx
   13586:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1358a:	89 d0                	mov    %edx,%eax
   1358c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1358f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13593:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13597:	ee                   	out    %al,(%dx)
}
   13598:	90                   	nop
   13599:	c9                   	leave  
   1359a:	c3                   	ret    

0001359b <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1359b:	55                   	push   %ebp
   1359c:	89 e5                	mov    %esp,%ebp
   1359e:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   135a1:	6a 00                	push   $0x0
   135a3:	68 f9 03 00 00       	push   $0x3f9
   135a8:	e8 cd ff ff ff       	call   1357a <outb>
   135ad:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   135b0:	68 80 00 00 00       	push   $0x80
   135b5:	68 fb 03 00 00       	push   $0x3fb
   135ba:	e8 bb ff ff ff       	call   1357a <outb>
   135bf:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   135c2:	6a 03                	push   $0x3
   135c4:	68 f8 03 00 00       	push   $0x3f8
   135c9:	e8 ac ff ff ff       	call   1357a <outb>
   135ce:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   135d1:	6a 00                	push   $0x0
   135d3:	68 f9 03 00 00       	push   $0x3f9
   135d8:	e8 9d ff ff ff       	call   1357a <outb>
   135dd:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   135e0:	6a 03                	push   $0x3
   135e2:	68 fb 03 00 00       	push   $0x3fb
   135e7:	e8 8e ff ff ff       	call   1357a <outb>
   135ec:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   135ef:	68 c7 00 00 00       	push   $0xc7
   135f4:	68 fa 03 00 00       	push   $0x3fa
   135f9:	e8 7c ff ff ff       	call   1357a <outb>
   135fe:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   13601:	6a 0f                	push   $0xf
   13603:	68 fc 03 00 00       	push   $0x3fc
   13608:	e8 6d ff ff ff       	call   1357a <outb>
   1360d:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   13610:	83 ec 0c             	sub    $0xc,%esp
   13613:	68 c4 ab 02 00       	push   $0x2abc4
   13618:	e8 22 ec ff ff       	call   1223f <mutex_init>
   1361d:	83 c4 10             	add    $0x10,%esp
}
   13620:	90                   	nop
   13621:	c9                   	leave  
   13622:	c3                   	ret    

00013623 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   13623:	55                   	push   %ebp
   13624:	89 e5                	mov    %esp,%ebp
   13626:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1362c:	83 ec 04             	sub    $0x4,%esp
   1362f:	68 80 00 00 00       	push   $0x80
   13634:	6a 00                	push   $0x0
   13636:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1363c:	50                   	push   %eax
   1363d:	e8 14 f8 ff ff       	call   12e56 <kernel_memset>
   13642:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   13645:	8d 45 0c             	lea    0xc(%ebp),%eax
   13648:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1364e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13654:	83 ec 04             	sub    $0x4,%esp
   13657:	50                   	push   %eax
   13658:	ff 75 08             	push   0x8(%ebp)
   1365b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13661:	50                   	push   %eax
   13662:	e8 d8 f8 ff ff       	call   12f3f <kernel_vsprintf>
   13667:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1366a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13670:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13673:	83 ec 0c             	sub    $0xc,%esp
   13676:	68 c4 ab 02 00       	push   $0x2abc4
   1367b:	e8 0c ec ff ff       	call   1228c <mutex_lock>
   13680:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13683:	eb 57                	jmp    136dc <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13685:	90                   	nop
   13686:	83 ec 0c             	sub    $0xc,%esp
   13689:	68 fd 03 00 00       	push   $0x3fd
   1368e:	e8 ca fe ff ff       	call   1355d <inb>
   13693:	83 c4 10             	add    $0x10,%esp
   13696:	0f b6 c0             	movzbl %al,%eax
   13699:	83 e0 40             	and    $0x40,%eax
   1369c:	85 c0                	test   %eax,%eax
   1369e:	74 e6                	je     13686 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   136a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136a3:	0f b6 00             	movzbl (%eax),%eax
   136a6:	3c 0a                	cmp    $0xa,%al
   136a8:	75 12                	jne    136bc <log_printf+0x99>
   136aa:	83 ec 08             	sub    $0x8,%esp
   136ad:	6a 0d                	push   $0xd
   136af:	68 f8 03 00 00       	push   $0x3f8
   136b4:	e8 c1 fe ff ff       	call   1357a <outb>
   136b9:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   136bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136bf:	8d 50 01             	lea    0x1(%eax),%edx
   136c2:	89 55 f4             	mov    %edx,-0xc(%ebp)
   136c5:	0f b6 00             	movzbl (%eax),%eax
   136c8:	0f b6 c0             	movzbl %al,%eax
   136cb:	83 ec 08             	sub    $0x8,%esp
   136ce:	50                   	push   %eax
   136cf:	68 f8 03 00 00       	push   $0x3f8
   136d4:	e8 a1 fe ff ff       	call   1357a <outb>
   136d9:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   136dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136df:	0f b6 00             	movzbl (%eax),%eax
   136e2:	84 c0                	test   %al,%al
   136e4:	75 9f                	jne    13685 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   136e6:	83 ec 08             	sub    $0x8,%esp
   136e9:	6a 0d                	push   $0xd
   136eb:	68 f8 03 00 00       	push   $0x3f8
   136f0:	e8 85 fe ff ff       	call   1357a <outb>
   136f5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   136f8:	83 ec 08             	sub    $0x8,%esp
   136fb:	6a 0a                	push   $0xa
   136fd:	68 f8 03 00 00       	push   $0x3f8
   13702:	e8 73 fe ff ff       	call   1357a <outb>
   13707:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   1370a:	83 ec 0c             	sub    $0xc,%esp
   1370d:	68 c4 ab 02 00       	push   $0x2abc4
   13712:	e8 06 ec ff ff       	call   1231d <mutex_unlock>
   13717:	83 c4 10             	add    $0x10,%esp
   1371a:	90                   	nop
   1371b:	c9                   	leave  
   1371c:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 71 00 00 00       	jmp    80000081 <first_main>

80000010 <sys_call>:
#define SYS_sleep   0




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80000020:	c7 45 f0 18 00 00 00 	movl   $0x18,-0x10(%ebp)
        "push %[arg3]\n\t"
        "push %[arg2]\n\t"
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])" : :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
                            [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
                            [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
                            [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
                            [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d ec             	lea    -0x14(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
                            [addr] "r"(addr)
    );
}
8000004e:	90                   	nop
8000004f:	83 c4 10             	add    $0x10,%esp
80000052:	5b                   	pop    %ebx
80000053:	5e                   	pop    %esi
80000054:	5f                   	pop    %edi
80000055:	5d                   	pop    %ebp
80000056:	c3                   	ret    

80000057 <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
static inline void msleep(int ms) {
80000057:	55                   	push   %ebp
80000058:	89 e5                	mov    %esp,%ebp
8000005a:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
8000005d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000061:	7e 1b                	jle    8000007e <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000063:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006a:	8b 45 08             	mov    0x8(%ebp),%eax
8000006d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000070:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000073:	50                   	push   %eax
80000074:	e8 97 ff ff ff       	call   80000010 <sys_call>
80000079:	83 c4 04             	add    $0x4,%esp
8000007c:	eb 01                	jmp    8000007f <msleep+0x28>
    if (ms <= 0) return;
8000007e:	90                   	nop

}
8000007f:	c9                   	leave  
80000080:	c3                   	ret    

80000081 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
80000081:	55                   	push   %ebp
80000082:	89 e5                	mov    %esp,%ebp
    for (;;) {
        //log_printf("first task.");
        msleep(1000);
80000084:	68 e8 03 00 00       	push   $0x3e8
80000089:	e8 c9 ff ff ff       	call   80000057 <msleep>
8000008e:	83 c4 04             	add    $0x4,%esp
80000091:	eb f1                	jmp    80000084 <first_main+0x3>
