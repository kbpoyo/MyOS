
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000392c memsz 0x000206d0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e57  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ad0  00012e58  00012e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00013928  00013928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cd90  00013940  00013940  0000492c  2**5
                  ALLOC
  4 .debug_line   00001959  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000650  00000000  00000000  00006285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000048f6  00000000  00000000  000068d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000166c  00000000  00000000  0000b1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000f30  00000000  00000000  0000ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000d948  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000011d4  00000000  00000000  0000d974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	0000005d addr_alloc_init
00010317 l     F .text	00000067 addr_alloc_page
0001037e l     F .text	00000061 addr_free_page
000103df l     F .text	00000066 show_mem_info
00010445 l     F .text	00000037 total_mem_size
00000000 l    df *ABS*	00000000 task.c
000104cf l     F .text	0000003d list_node_init
00012f58 l     O .rodata	0000000f __func__.9
0001050c l     F .text	0000002d list_node_next
00012fb8 l     O .rodata	0000000f __func__.3
00010539 l     F .text	00000047 list_init
00012f68 l     O .rodata	0000000a __func__.8
00010580 l     F .text	00000035 list_is_empty
00012fc8 l     O .rodata	0000000e __func__.2
000105b5 l     F .text	0000002d list_get_size
00012fa8 l     O .rodata	0000000e __func__.4
000105e2 l     F .text	0000002c list_get_first
00012f98 l     O .rodata	0000000f __func__.5
0001060e l     F .text	00000007 hlt
00010615 l     F .text	0000001a far_jump
0001062f l     F .text	00000017 write_tr
00013940 l     O .bss	00000190 task_manager
00010646 l     F .text	0000001f switch_to_tss
00010680 l     F .text	000000e5 tss_init
00012f4c l     O .rodata	0000000a __func__.10
00013ae0 l     O .bss	00000200 empty_task_stack
00010849 l     F .text	0000000a empty_task
00012f74 l     O .rodata	0000000f __func__.7
00012f84 l     O .rodata	00000011 __func__.6
00012fd8 l     O .rodata	0000000f __func__.1
00012fe8 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010cc9 l     F .text	00000028 lgdt
00013ce0 l     O .bss	00010000 gdt_table
00023ce0 l     O .bss	00008000 is_alloc
0002bce0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010ebb l     F .text	00000007 cli
00010ec2 l     F .text	00000007 sti
00010ec9 l     F .text	00000007 hlt
00010ed0 l     F .text	0000001d inb
00010eed l     F .text	00000021 outb
00010f0e l     F .text	00000028 lidt
00010f36 l     F .text	00000010 read_eflags
00010f46 l     F .text	0000000b write_eflags
0002bd00 l     O .bss	00000800 idt_table
00010f51 l     F .text	000000e9 print_exception_fram
0001103a l     F .text	0000003e do_default_handler
000112c4 l     F .text	00000047 gate_desc_set
0001134b l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000116f5 l     F .text	00000021 outb
0002c500 l     O .bss	00000004 sys_tick
0001173e l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000117b8 l     F .text	00000007 sti
000133f8 l     O .rodata	0000000c __func__.0
0002c520 l     O .bss	000000b4 task_test_task_1
0002c5e0 l     O .bss	000000b4 task_test_task_2
0002c6a0 l     O .bss	00001000 test_task_1_stack
0002d6a0 l     O .bss	00001000 test_task_2_stack
0002e6a0 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
000118fd l     F .text	00000047 list_init
000134b0 l     O .rodata	0000000a __func__.1
00011944 l     F .text	00000035 list_is_empty
000134bc l     O .rodata	0000000e __func__.0
000134a4 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011b0f l     F .text	00000047 list_init
00013570 l     O .rodata	0000000a __func__.1
00011b56 l     F .text	00000035 list_is_empty
0001357c l     O .rodata	0000000e __func__.0
00013564 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011cdf l     F .text	00000047 list_init
00013690 l     O .rodata	0000000a __func__.3
00011d26 l     F .text	0000002d list_get_size
0001369c l     O .rodata	0000000e __func__.2
00011d53 l     F .text	0000002c list_get_first
000136bc l     O .rodata	0000000f __func__.0
00011d7f l     F .text	0000002d list_get_last
000136ac l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012087 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
000120c4 l     F .text	00000016 bitmap_byte_count
0001378c l     O .rodata	0000000c __func__.3
00013798 l     O .rodata	0000000f __func__.2
000137a8 l     O .rodata	0000000f __func__.1
000137b8 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00013928 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000128ec l     F .text	00000035 list_is_empty
000138c0 l     O .rodata	0000000e __func__.5
00012921 l     F .text	0000002d list_get_size
000138f8 l     O .rodata	0000000e __func__.2
000138ac l     O .rodata	00000012 __func__.6
000138d0 l     O .rodata	00000011 __func__.4
000138e4 l     O .rodata	00000012 __func__.3
00013908 l     O .rodata	00000011 __func__.1
0001391c l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012c97 l     F .text	0000001d inb
00012cb4 l     F .text	00000021 outb
0002e6b0 l     O .bss	00000014 mutex
0001216e g     F .text	00000078 bitmap_get_bit
00012541 g     F .text	0000004f kernel_memcpy
00011551 g     F .text	00000098 idt_enable
000109e4 g     F .text	0000000a task_current
000129d9 g     F .text	0000008f list_insert_last
00010a56 g     F .text	00000061 sys_yield
000111ac g     F .text	0000001c do_handler_segment_not_present
00010920 g     F .text	0000004b task_set_ready
000122ee g     F .text	00000021 bitmap_is_set
00011688 g     F .text	0000000b idt_enable_global
00012590 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012cd5 g     F .text	00000088 log_init
00011864 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
0001240a g     F .text	00000047 kernel_strcpy
0001167d g     F .text	0000000b idt_disable_global
0001130b g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011104 g     F .text	0000001c do_handler_overflow
00011238 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000111e4 g     F .text	0000001c do_handler_general_protection
000112a8 g     F .text	0000001c do_handler_control_exception
00011cb6 g     F .text	00000029 sem_count
00011094 g     F .text	0000001c do_handler_divider
000121e6 g     F .text	00000108 bitmap_set_bit
00011174 g     F .text	0000001c do_handler_double_fault
00011200 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011693 g     F .text	00000039 pic_send_eoi
00012b19 g     F .text	000000b5 list_remove_last
00010916 g     F .text	0000000a task_first_task
00011bce g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010db0 g     F .text	00000094 gdt_init
0001128c g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
000110b0 g     F .text	0000001c do_handler_debug
0002e6d0 g     O .bss	00002000 stack
00010c69 g     F .text	00000060 sys_sleep
0001183b g     F .text	00000029 test_task_2
00011dac g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000113de g     F .text	00000173 idt_init
00011c39 g     F .text	0000007d sem_notify
0001113c g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
0001121c g     F .text	0000001c do_handler_fpu_error
000108ce g     F .text	00000048 task_first_init
00011254 g     F .text	0000001c do_handler_machine_check
0001294e g     F .text	0000008b list_insert_first
00010c1e g     F .text	0000004b task_set_wakeup
000109b6 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00012451 g     F .text	00000051 kernel_strncpy
000117bf g     F .text	00000053 kernel_init
00011b8b g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012679 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
000119c6 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011190 g     F .text	0000001c do_handler_invalid_tss
000115e9 g     F .text	00000094 idt_disable
00010bc2 g     F .text	0000005c task_set_sleep
000110cc g     F .text	0000001c do_handler_nmi
00011979 g     F .text	0000004d mutex_init
00011812 g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00011158 g     F .text	0000001c do_handler_device_unavailable
000116cc g     F .text	00000018 idt_enter_protection
00010ab7 g     F .text	0000010b task_slice_end
000125d1 g     F .text	00000084 kernel_memcmp
00011270 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011078 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010665 g     F .text	0000001b task_switch_from_to
00011a57 g     F .text	000000b8 mutex_unlock
000109ee g     F .text	00000068 task_switch
0001250c g     F .text	00000035 kernel_strlen
0001096b g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010cf1 g     F .text	000000bf segment_desc_set
00011120 g     F .text	0000001c do_handler_bound_range
00012a68 g     F .text	000000b1 list_remove_first
000124a2 g     F .text	0000006a kernel_strncmp
000120da g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
0001230f g     F .text	000000fb bitmap_alloc_nbits
00010853 g     F .text	0000007b task_manager_init
0001047c g     F .text	00000053 memory_init
0001208e g     F .text	00000036 pannic
000111c8 g     F .text	0000001c do_handler_stack_segment_fault
000110e8 g     F .text	0000001c do_handler_breakpoint
00012d5d g     F .text	000000fa log_printf
00010765 g     F .text	000000e4 task_init
00012655 g     F .text	00000024 kernel_sprintf
00010e44 g     F .text	00000077 gdt_alloc_desc
00012816 g     F .text	000000d6 kernel_itoa
00012bce g     F .text	000000c9 list_remove
000116e4 g     F .text	00000011 idt_leave_protection
00011716 g     F .text	00000028 do_handler_time
000117a0 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 b4 17 00 00       	call   117bf <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc d0 06 03 00       	mov    $0x306d0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 3a 18 00 00       	jmp    11864 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 3d 10 00 00       	call   11078 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 3c 10 00 00       	call   11094 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 3b 10 00 00       	call   110b0 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 3a 10 00 00       	call   110cc <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 39 10 00 00       	call   110e8 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 38 10 00 00       	call   11104 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 37 10 00 00       	call   11120 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 36 10 00 00       	call   1113c <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 35 10 00 00       	call   11158 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 36 10 00 00       	call   11174 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 37 10 00 00       	call   11190 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 38 10 00 00       	call   111ac <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 39 10 00 00       	call   111c8 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 3a 10 00 00       	call   111e4 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 3b 10 00 00       	call   11200 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 3a 10 00 00       	call   1121c <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 3b 10 00 00       	call   11238 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 3a 10 00 00       	call   11254 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 39 10 00 00       	call   11270 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 38 10 00 00       	call   1128c <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 39 10 00 00       	call   112a8 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 8a 14 00 00       	call   11716 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	83 ec 0c             	sub    $0xc,%esp
   102c6:	50                   	push   %eax
   102c7:	e8 ad 16 00 00       	call   11979 <mutex_init>
   102cc:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   102cf:	8b 45 08             	mov    0x8(%ebp),%eax
   102d2:	8b 55 10             	mov    0x10(%ebp),%edx
   102d5:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   102d8:	8b 45 08             	mov    0x8(%ebp),%eax
   102db:	8b 55 14             	mov    0x14(%ebp),%edx
   102de:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   102e1:	8b 45 08             	mov    0x8(%ebp),%eax
   102e4:	8b 55 18             	mov    0x18(%ebp),%edx
   102e7:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   102ea:	8b 45 08             	mov    0x8(%ebp),%eax
   102ed:	8b 40 20             	mov    0x20(%eax),%eax
   102f0:	8b 55 08             	mov    0x8(%ebp),%edx
   102f3:	8b 4a 24             	mov    0x24(%edx),%ecx
   102f6:	ba 00 00 00 00       	mov    $0x0,%edx
   102fb:	f7 f1                	div    %ecx
   102fd:	89 c2                	mov    %eax,%edx
   102ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10302:	83 c0 14             	add    $0x14,%eax
   10305:	6a 00                	push   $0x0
   10307:	52                   	push   %edx
   10308:	ff 75 0c             	push   0xc(%ebp)
   1030b:	50                   	push   %eax
   1030c:	e8 c9 1d 00 00       	call   120da <bitmap_init>
   10311:	83 c4 10             	add    $0x10,%esp
}
   10314:	90                   	nop
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1031d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	83 ec 0c             	sub    $0xc,%esp
   1032a:	50                   	push   %eax
   1032b:	e8 96 16 00 00       	call   119c6 <mutex_lock>
   10330:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	83 c0 14             	add    $0x14,%eax
   10339:	83 ec 04             	sub    $0x4,%esp
   1033c:	ff 75 0c             	push   0xc(%ebp)
   1033f:	6a 00                	push   $0x0
   10341:	50                   	push   %eax
   10342:	e8 c8 1f 00 00       	call   1230f <bitmap_alloc_nbits>
   10347:	83 c4 10             	add    $0x10,%esp
   1034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   1034d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10351:	78 17                	js     1036a <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	8b 50 24             	mov    0x24(%eax),%edx
   1035f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10362:	0f af c2             	imul   %edx,%eax
   10365:	01 c8                	add    %ecx,%eax
   10367:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	83 ec 0c             	sub    $0xc,%esp
   10370:	50                   	push   %eax
   10371:	e8 e1 16 00 00       	call   11a57 <mutex_unlock>
   10376:	83 c4 10             	add    $0x10,%esp

  return addr;
   10379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1037c:	c9                   	leave  
   1037d:	c3                   	ret    

0001037e <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1037e:	55                   	push   %ebp
   1037f:	89 e5                	mov    %esp,%ebp
   10381:	53                   	push   %ebx
   10382:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	83 ec 0c             	sub    $0xc,%esp
   1038b:	50                   	push   %eax
   1038c:	e8 35 16 00 00       	call   119c6 <mutex_lock>
   10391:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 50 1c             	mov    0x1c(%eax),%edx
   1039a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1039d:	29 d0                	sub    %edx,%eax
   1039f:	89 c1                	mov    %eax,%ecx
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 58 24             	mov    0x24(%eax),%ebx
   103a7:	89 c8                	mov    %ecx,%eax
   103a9:	ba 00 00 00 00       	mov    $0x0,%edx
   103ae:	f7 f3                	div    %ebx
   103b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   103b3:	8b 45 08             	mov    0x8(%ebp),%eax
   103b6:	83 c0 14             	add    $0x14,%eax
   103b9:	6a 00                	push   $0x0
   103bb:	ff 75 10             	push   0x10(%ebp)
   103be:	ff 75 f4             	push   -0xc(%ebp)
   103c1:	50                   	push   %eax
   103c2:	e8 1f 1e 00 00       	call   121e6 <bitmap_set_bit>
   103c7:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 ec 0c             	sub    $0xc,%esp
   103d0:	50                   	push   %eax
   103d1:	e8 81 16 00 00       	call   11a57 <mutex_unlock>
   103d6:	83 c4 10             	add    $0x10,%esp
}
   103d9:	90                   	nop
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   103e5:	83 ec 0c             	sub    $0xc,%esp
   103e8:	68 58 2e 01 00       	push   $0x12e58
   103ed:	e8 6b 29 00 00       	call   12d5d <log_printf>
   103f2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   103f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   103fc:	eb 29                	jmp    10427 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10404:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1040e:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10411:	52                   	push   %edx
   10412:	50                   	push   %eax
   10413:	ff 75 f4             	push   -0xc(%ebp)
   10416:	68 64 2e 01 00       	push   $0x12e64
   1041b:	e8 3d 29 00 00       	call   12d5d <log_printf>
   10420:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10423:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	8b 40 50             	mov    0x50(%eax),%eax
   1042d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10430:	7c cc                	jl     103fe <show_mem_info+0x1f>
    }

    log_printf("");
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	68 76 2e 01 00       	push   $0x12e76
   1043a:	e8 1e 29 00 00       	call   12d5d <log_printf>
   1043f:	83 c4 10             	add    $0x10,%esp
}
   10442:	90                   	nop
   10443:	c9                   	leave  
   10444:	c3                   	ret    

00010445 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   10445:	55                   	push   %ebp
   10446:	89 e5                	mov    %esp,%ebp
   10448:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   1044b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10459:	eb 11                	jmp    1046c <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   1045b:	8b 45 08             	mov    0x8(%ebp),%eax
   1045e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10461:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10465:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10468:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	8b 40 50             	mov    0x50(%eax),%eax
   10472:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10475:	7c e4                	jl     1045b <total_mem_size+0x16>
    }

    return mem_size;
   10477:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1047a:	c9                   	leave  
   1047b:	c3                   	ret    

0001047c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1047c:	55                   	push   %ebp
   1047d:	89 e5                	mov    %esp,%ebp
   1047f:	83 ec 18             	sub    $0x18,%esp
    log_printf("memory init");
   10482:	83 ec 0c             	sub    $0xc,%esp
   10485:	68 77 2e 01 00       	push   $0x12e77
   1048a:	e8 ce 28 00 00       	call   12d5d <log_printf>
   1048f:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10492:	83 ec 0c             	sub    $0xc,%esp
   10495:	ff 75 08             	push   0x8(%ebp)
   10498:	e8 42 ff ff ff       	call   103df <show_mem_info>
   1049d:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   104a0:	83 ec 0c             	sub    $0xc,%esp
   104a3:	ff 75 08             	push   0x8(%ebp)
   104a6:	e8 9a ff ff ff       	call   10445 <total_mem_size>
   104ab:	83 c4 10             	add    $0x10,%esp
   104ae:	2d 00 00 10 00       	sub    $0x100000,%eax
   104b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   104b6:	83 ec 08             	sub    $0x8,%esp
   104b9:	68 00 10 00 00       	push   $0x1000
   104be:	ff 75 f4             	push   -0xc(%ebp)
   104c1:	e8 e7 fd ff ff       	call   102ad <down2>
   104c6:	83 c4 10             	add    $0x10,%esp
   104c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

   104cc:	90                   	nop
   104cd:	c9                   	leave  
   104ce:	c3                   	ret    

000104cf <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   104cf:	55                   	push   %ebp
   104d0:	89 e5                	mov    %esp,%ebp
   104d2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   104d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   104d9:	75 19                	jne    104f4 <list_node_init+0x25>
   104db:	68 84 2e 01 00       	push   $0x12e84
   104e0:	68 58 2f 01 00       	push   $0x12f58
   104e5:	6a 20                	push   $0x20
   104e7:	68 9c 2e 01 00       	push   $0x12e9c
   104ec:	e8 9d 1b 00 00       	call   1208e <pannic>
   104f1:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   104f4:	8b 45 08             	mov    0x8(%ebp),%eax
   104f7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   104fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10501:	8b 50 04             	mov    0x4(%eax),%edx
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	89 10                	mov    %edx,(%eax)
}
   10509:	90                   	nop
   1050a:	c9                   	leave  
   1050b:	c3                   	ret    

0001050c <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1050c:	55                   	push   %ebp
   1050d:	89 e5                	mov    %esp,%ebp
   1050f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10512:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10516:	75 19                	jne    10531 <list_node_next+0x25>
   10518:	68 84 2e 01 00       	push   $0x12e84
   1051d:	68 b8 2f 01 00       	push   $0x12fb8
   10522:	6a 2b                	push   $0x2b
   10524:	68 9c 2e 01 00       	push   $0x12e9c
   10529:	e8 60 1b 00 00       	call   1208e <pannic>
   1052e:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	8b 40 04             	mov    0x4(%eax),%eax
}
   10537:	c9                   	leave  
   10538:	c3                   	ret    

00010539 <list_init>:

static inline void list_init(list_t *list) {
   10539:	55                   	push   %ebp
   1053a:	89 e5                	mov    %esp,%ebp
   1053c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1053f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10543:	75 19                	jne    1055e <list_init+0x25>
   10545:	68 da 2e 01 00       	push   $0x12eda
   1054a:	68 68 2f 01 00       	push   $0x12f68
   1054f:	6a 31                	push   $0x31
   10551:	68 9c 2e 01 00       	push   $0x12e9c
   10556:	e8 33 1b 00 00       	call   1208e <pannic>
   1055b:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1055e:	8b 45 08             	mov    0x8(%ebp),%eax
   10561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10568:	8b 45 08             	mov    0x8(%ebp),%eax
   1056b:	8b 50 04             	mov    0x4(%eax),%edx
   1056e:	8b 45 08             	mov    0x8(%ebp),%eax
   10571:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10573:	8b 45 08             	mov    0x8(%ebp),%eax
   10576:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1057d:	90                   	nop
   1057e:	c9                   	leave  
   1057f:	c3                   	ret    

00010580 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10580:	55                   	push   %ebp
   10581:	89 e5                	mov    %esp,%ebp
   10583:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10586:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1058a:	75 19                	jne    105a5 <list_is_empty+0x25>
   1058c:	68 da 2e 01 00       	push   $0x12eda
   10591:	68 c8 2f 01 00       	push   $0x12fc8
   10596:	6a 38                	push   $0x38
   10598:	68 9c 2e 01 00       	push   $0x12e9c
   1059d:	e8 ec 1a 00 00       	call   1208e <pannic>
   105a2:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	8b 40 08             	mov    0x8(%eax),%eax
   105ab:	85 c0                	test   %eax,%eax
   105ad:	0f 94 c0             	sete   %al
   105b0:	0f b6 c0             	movzbl %al,%eax
}
   105b3:	c9                   	leave  
   105b4:	c3                   	ret    

000105b5 <list_get_size>:

static inline int list_get_size(list_t *list) {
   105b5:	55                   	push   %ebp
   105b6:	89 e5                	mov    %esp,%ebp
   105b8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   105bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105bf:	75 19                	jne    105da <list_get_size+0x25>
   105c1:	68 da 2e 01 00       	push   $0x12eda
   105c6:	68 a8 2f 01 00       	push   $0x12fa8
   105cb:	6a 3e                	push   $0x3e
   105cd:	68 9c 2e 01 00       	push   $0x12e9c
   105d2:	e8 b7 1a 00 00       	call   1208e <pannic>
   105d7:	83 c4 10             	add    $0x10,%esp

    return list->size;
   105da:	8b 45 08             	mov    0x8(%ebp),%eax
   105dd:	8b 40 08             	mov    0x8(%eax),%eax
}
   105e0:	c9                   	leave  
   105e1:	c3                   	ret    

000105e2 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   105e2:	55                   	push   %ebp
   105e3:	89 e5                	mov    %esp,%ebp
   105e5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   105e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105ec:	75 19                	jne    10607 <list_get_first+0x25>
   105ee:	68 da 2e 01 00       	push   $0x12eda
   105f3:	68 98 2f 01 00       	push   $0x12f98
   105f8:	6a 44                	push   $0x44
   105fa:	68 9c 2e 01 00       	push   $0x12e9c
   105ff:	e8 8a 1a 00 00       	call   1208e <pannic>
   10604:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10607:	8b 45 08             	mov    0x8(%ebp),%eax
   1060a:	8b 00                	mov    (%eax),%eax
}
   1060c:	c9                   	leave  
   1060d:	c3                   	ret    

0001060e <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1060e:	55                   	push   %ebp
   1060f:	89 e5                	mov    %esp,%ebp
   10611:	f4                   	hlt    
   10612:	90                   	nop
   10613:	5d                   	pop    %ebp
   10614:	c3                   	ret    

00010615 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10615:	55                   	push   %ebp
   10616:	89 e5                	mov    %esp,%ebp
   10618:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   1061b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1061e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10621:	8b 45 08             	mov    0x8(%ebp),%eax
   10624:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10627:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1062a:	ff 28                	ljmp   *(%eax)
}
   1062c:	90                   	nop
   1062d:	c9                   	leave  
   1062e:	c3                   	ret    

0001062f <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1062f:	55                   	push   %ebp
   10630:	89 e5                	mov    %esp,%ebp
   10632:	83 ec 04             	sub    $0x4,%esp
   10635:	8b 45 08             	mov    0x8(%ebp),%eax
   10638:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1063c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10640:	0f 00 d8             	ltr    %ax
}
   10643:	90                   	nop
   10644:	c9                   	leave  
   10645:	c3                   	ret    

00010646 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10646:	55                   	push   %ebp
   10647:	89 e5                	mov    %esp,%ebp
   10649:	83 ec 04             	sub    $0x4,%esp
   1064c:	8b 45 08             	mov    0x8(%ebp),%eax
   1064f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10653:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10657:	6a 00                	push   $0x0
   10659:	50                   	push   %eax
   1065a:	e8 b6 ff ff ff       	call   10615 <far_jump>
   1065f:	83 c4 08             	add    $0x8,%esp
}
   10662:	90                   	nop
   10663:	c9                   	leave  
   10664:	c3                   	ret    

00010665 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10665:	55                   	push   %ebp
   10666:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10668:	8b 45 0c             	mov    0xc(%ebp),%eax
   1066b:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10671:	0f b7 c0             	movzwl %ax,%eax
   10674:	50                   	push   %eax
   10675:	e8 cc ff ff ff       	call   10646 <switch_to_tss>
   1067a:	83 c4 04             	add    $0x4,%esp
}
   1067d:	90                   	nop
   1067e:	c9                   	leave  
   1067f:	c3                   	ret    

00010680 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   10680:	55                   	push   %ebp
   10681:	89 e5                	mov    %esp,%ebp
   10683:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10686:	8b 45 08             	mov    0x8(%ebp),%eax
   10689:	83 c0 48             	add    $0x48,%eax
   1068c:	83 ec 04             	sub    $0x4,%esp
   1068f:	6a 68                	push   $0x68
   10691:	6a 00                	push   $0x0
   10693:	50                   	push   %eax
   10694:	e8 f7 1e 00 00       	call   12590 <kernel_memset>
   10699:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1069c:	8b 45 08             	mov    0x8(%ebp),%eax
   1069f:	8b 55 0c             	mov    0xc(%ebp),%edx
   106a2:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   106a5:	8b 45 08             	mov    0x8(%ebp),%eax
   106a8:	8b 55 10             	mov    0x10(%ebp),%edx
   106ab:	89 50 4c             	mov    %edx,0x4c(%eax)
   106ae:	8b 45 08             	mov    0x8(%ebp),%eax
   106b1:	8b 50 4c             	mov    0x4c(%eax),%edx
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   106bd:	8b 45 08             	mov    0x8(%ebp),%eax
   106c0:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   106c7:	8b 45 08             	mov    0x8(%ebp),%eax
   106ca:	8b 50 50             	mov    0x50(%eax),%edx
   106cd:	8b 45 08             	mov    0x8(%ebp),%eax
   106d0:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   106d6:	8b 45 08             	mov    0x8(%ebp),%eax
   106d9:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   106e0:	00 00 00 
   106e3:	8b 45 08             	mov    0x8(%ebp),%eax
   106e6:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   106ec:	8b 45 08             	mov    0x8(%ebp),%eax
   106ef:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   106f5:	8b 45 08             	mov    0x8(%ebp),%eax
   106f8:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   106fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10701:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10707:	8b 45 08             	mov    0x8(%ebp),%eax
   1070a:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10710:	8b 45 08             	mov    0x8(%ebp),%eax
   10713:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10719:	8b 45 08             	mov    0x8(%ebp),%eax
   1071c:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10723:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10726:	8b 45 08             	mov    0x8(%ebp),%eax
   10729:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10730:	e8 0f 07 00 00       	call   10e44 <gdt_alloc_desc>
   10735:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10738:	8b 45 08             	mov    0x8(%ebp),%eax
   1073b:	83 c0 48             	add    $0x48,%eax
   1073e:	89 c2                	mov    %eax,%edx
   10740:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10743:	0f b7 c0             	movzwl %ax,%eax
   10746:	68 89 00 00 00       	push   $0x89
   1074b:	6a 68                	push   $0x68
   1074d:	52                   	push   %edx
   1074e:	50                   	push   %eax
   1074f:	e8 9d 05 00 00       	call   10cf1 <segment_desc_set>
   10754:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10757:	8b 45 08             	mov    0x8(%ebp),%eax
   1075a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1075d:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   10763:	c9                   	leave  
   10764:	c3                   	ret    

00010765 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10765:	55                   	push   %ebp
   10766:	89 e5                	mov    %esp,%ebp
   10768:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1076b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1076f:	75 19                	jne    1078a <task_init+0x25>
   10771:	68 ed 2e 01 00       	push   $0x12eed
   10776:	68 4c 2f 01 00       	push   $0x12f4c
   1077b:	6a 60                	push   $0x60
   1077d:	68 00 2f 01 00       	push   $0x12f00
   10782:	e8 07 19 00 00       	call   1208e <pannic>
   10787:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   1078a:	83 ec 04             	sub    $0x4,%esp
   1078d:	ff 75 14             	push   0x14(%ebp)
   10790:	ff 75 10             	push   0x10(%ebp)
   10793:	ff 75 08             	push   0x8(%ebp)
   10796:	e8 e5 fe ff ff       	call   10680 <tss_init>
   1079b:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1079e:	8b 45 08             	mov    0x8(%ebp),%eax
   107a1:	83 c0 10             	add    $0x10,%eax
   107a4:	83 ec 04             	sub    $0x4,%esp
   107a7:	6a 20                	push   $0x20
   107a9:	ff 75 0c             	push   0xc(%ebp)
   107ac:	50                   	push   %eax
   107ad:	e8 9f 1c 00 00       	call   12451 <kernel_strncpy>
   107b2:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   107b5:	8b 45 08             	mov    0x8(%ebp),%eax
   107b8:	83 c0 30             	add    $0x30,%eax
   107bb:	83 ec 0c             	sub    $0xc,%esp
   107be:	50                   	push   %eax
   107bf:	e8 0b fd ff ff       	call   104cf <list_node_init>
   107c4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   107c7:	8b 45 08             	mov    0x8(%ebp),%eax
   107ca:	83 c0 38             	add    $0x38,%eax
   107cd:	83 ec 0c             	sub    $0xc,%esp
   107d0:	50                   	push   %eax
   107d1:	e8 f9 fc ff ff       	call   104cf <list_node_init>
   107d6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   107d9:	8b 45 08             	mov    0x8(%ebp),%eax
   107dc:	83 c0 40             	add    $0x40,%eax
   107df:	83 ec 0c             	sub    $0xc,%esp
   107e2:	50                   	push   %eax
   107e3:	e8 e7 fc ff ff       	call   104cf <list_node_init>
   107e8:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   107eb:	8b 45 08             	mov    0x8(%ebp),%eax
   107ee:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   107f5:	8b 45 08             	mov    0x8(%ebp),%eax
   107f8:	8b 50 08             	mov    0x8(%eax),%edx
   107fb:	8b 45 08             	mov    0x8(%ebp),%eax
   107fe:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10801:	8b 45 08             	mov    0x8(%ebp),%eax
   10804:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1080b:	e8 bc 0e 00 00       	call   116cc <idt_enter_protection>
   10810:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10813:	8b 45 08             	mov    0x8(%ebp),%eax
   10816:	83 c0 38             	add    $0x38,%eax
   10819:	83 ec 08             	sub    $0x8,%esp
   1081c:	50                   	push   %eax
   1081d:	68 50 39 01 00       	push   $0x13950
   10822:	e8 b2 21 00 00       	call   129d9 <list_insert_last>
   10827:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   1082a:	83 ec 0c             	sub    $0xc,%esp
   1082d:	ff 75 08             	push   0x8(%ebp)
   10830:	e8 eb 00 00 00       	call   10920 <task_set_ready>
   10835:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10838:	83 ec 0c             	sub    $0xc,%esp
   1083b:	ff 75 f4             	push   -0xc(%ebp)
   1083e:	e8 a1 0e 00 00       	call   116e4 <idt_leave_protection>
   10843:	83 c4 10             	add    $0x10,%esp
}
   10846:	90                   	nop
   10847:	c9                   	leave  
   10848:	c3                   	ret    

00010849 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10849:	55                   	push   %ebp
   1084a:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   1084c:	e8 bd fd ff ff       	call   1060e <hlt>
   10851:	eb f9                	jmp    1084c <empty_task+0x3>

00010853 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10853:	55                   	push   %ebp
   10854:	89 e5                	mov    %esp,%ebp
   10856:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10859:	83 ec 0c             	sub    $0xc,%esp
   1085c:	68 44 39 01 00       	push   $0x13944
   10861:	e8 d3 fc ff ff       	call   10539 <list_init>
   10866:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10869:	83 ec 0c             	sub    $0xc,%esp
   1086c:	68 50 39 01 00       	push   $0x13950
   10871:	e8 c3 fc ff ff       	call   10539 <list_init>
   10876:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10879:	83 ec 0c             	sub    $0xc,%esp
   1087c:	68 5c 39 01 00       	push   $0x1395c
   10881:	e8 b3 fc ff ff       	call   10539 <list_init>
   10886:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10889:	c7 05 40 39 01 00 00 	movl   $0x0,0x13940
   10890:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10893:	ba e0 3c 01 00       	mov    $0x13ce0,%edx
   10898:	b8 49 08 01 00       	mov    $0x10849,%eax
   1089d:	52                   	push   %edx
   1089e:	50                   	push   %eax
   1089f:	68 35 2f 01 00       	push   $0x12f35
   108a4:	68 1c 3a 01 00       	push   $0x13a1c
   108a9:	e8 b7 fe ff ff       	call   10765 <task_init>
   108ae:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   108b1:	83 ec 0c             	sub    $0xc,%esp
   108b4:	68 1c 3a 01 00       	push   $0x13a1c
   108b9:	e8 ad 00 00 00       	call   1096b <task_set_unready>
   108be:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   108c1:	c7 05 1c 3a 01 00 00 	movl   $0x0,0x13a1c
   108c8:	00 00 00 
}
   108cb:	90                   	nop
   108cc:	c9                   	leave  
   108cd:	c3                   	ret    

000108ce <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   108ce:	55                   	push   %ebp
   108cf:	89 e5                	mov    %esp,%ebp
   108d1:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   108d4:	6a 00                	push   $0x0
   108d6:	6a 00                	push   $0x0
   108d8:	68 40 2f 01 00       	push   $0x12f40
   108dd:	68 68 39 01 00       	push   $0x13968
   108e2:	e8 7e fe ff ff       	call   10765 <task_init>
   108e7:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   108ea:	a1 18 3a 01 00       	mov    0x13a18,%eax
   108ef:	0f b7 c0             	movzwl %ax,%eax
   108f2:	83 ec 0c             	sub    $0xc,%esp
   108f5:	50                   	push   %eax
   108f6:	e8 34 fd ff ff       	call   1062f <write_tr>
   108fb:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   108fe:	c7 05 40 39 01 00 68 	movl   $0x13968,0x13940
   10905:	39 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10908:	a1 40 39 01 00       	mov    0x13940,%eax
   1090d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   10913:	90                   	nop
   10914:	c9                   	leave  
   10915:	c3                   	ret    

00010916 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10916:	55                   	push   %ebp
   10917:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10919:	b8 68 39 01 00       	mov    $0x13968,%eax
}
   1091e:	5d                   	pop    %ebp
   1091f:	c3                   	ret    

00010920 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10920:	55                   	push   %ebp
   10921:	89 e5                	mov    %esp,%ebp
   10923:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10926:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1092a:	75 1c                	jne    10948 <task_set_ready+0x28>
   1092c:	68 ed 2e 01 00       	push   $0x12eed
   10931:	68 74 2f 01 00       	push   $0x12f74
   10936:	68 c9 00 00 00       	push   $0xc9
   1093b:	68 00 2f 01 00       	push   $0x12f00
   10940:	e8 49 17 00 00       	call   1208e <pannic>
   10945:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10948:	8b 45 08             	mov    0x8(%ebp),%eax
   1094b:	83 c0 30             	add    $0x30,%eax
   1094e:	83 ec 08             	sub    $0x8,%esp
   10951:	50                   	push   %eax
   10952:	68 44 39 01 00       	push   $0x13944
   10957:	e8 7d 20 00 00       	call   129d9 <list_insert_last>
   1095c:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1095f:	8b 45 08             	mov    0x8(%ebp),%eax
   10962:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10968:	90                   	nop
   10969:	c9                   	leave  
   1096a:	c3                   	ret    

0001096b <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   1096b:	55                   	push   %ebp
   1096c:	89 e5                	mov    %esp,%ebp
   1096e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10971:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10975:	75 1c                	jne    10993 <task_set_unready+0x28>
   10977:	68 ed 2e 01 00       	push   $0x12eed
   1097c:	68 84 2f 01 00       	push   $0x12f84
   10981:	68 d8 00 00 00       	push   $0xd8
   10986:	68 00 2f 01 00       	push   $0x12f00
   1098b:	e8 fe 16 00 00       	call   1208e <pannic>
   10990:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10993:	8b 45 08             	mov    0x8(%ebp),%eax
   10996:	83 c0 30             	add    $0x30,%eax
   10999:	83 ec 08             	sub    $0x8,%esp
   1099c:	50                   	push   %eax
   1099d:	68 44 39 01 00       	push   $0x13944
   109a2:	e8 27 22 00 00       	call   12bce <list_remove>
   109a7:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   109aa:	8b 45 08             	mov    0x8(%ebp),%eax
   109ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   109b3:	90                   	nop
   109b4:	c9                   	leave  
   109b5:	c3                   	ret    

000109b6 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   109b6:	55                   	push   %ebp
   109b7:	89 e5                	mov    %esp,%ebp
   109b9:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   109bc:	83 ec 0c             	sub    $0xc,%esp
   109bf:	68 44 39 01 00       	push   $0x13944
   109c4:	e8 19 fc ff ff       	call   105e2 <list_get_first>
   109c9:	83 c4 10             	add    $0x10,%esp
   109cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   109cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109d3:	74 08                	je     109dd <task_ready_first+0x27>
   109d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d8:	83 e8 30             	sub    $0x30,%eax
   109db:	eb 05                	jmp    109e2 <task_ready_first+0x2c>
   109dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   109e2:	c9                   	leave  
   109e3:	c3                   	ret    

000109e4 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   109e4:	55                   	push   %ebp
   109e5:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   109e7:	a1 40 39 01 00       	mov    0x13940,%eax
}
   109ec:	5d                   	pop    %ebp
   109ed:	c3                   	ret    

000109ee <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   109ee:	55                   	push   %ebp
   109ef:	89 e5                	mov    %esp,%ebp
   109f1:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   109f4:	e8 d3 0c 00 00       	call   116cc <idt_enter_protection>
   109f9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   109fc:	e8 b5 ff ff ff       	call   109b6 <task_ready_first>
   10a01:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10a04:	a1 40 39 01 00       	mov    0x13940,%eax
   10a09:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10a0c:	74 37                	je     10a45 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10a0e:	a1 40 39 01 00       	mov    0x13940,%eax
   10a13:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10a16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a1a:	75 07                	jne    10a23 <task_switch+0x35>
            to = &task_manager.empty_task;
   10a1c:	c7 45 f4 1c 3a 01 00 	movl   $0x13a1c,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a26:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a2f:	a3 40 39 01 00       	mov    %eax,0x13940
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10a34:	83 ec 08             	sub    $0x8,%esp
   10a37:	ff 75 f4             	push   -0xc(%ebp)
   10a3a:	ff 75 ec             	push   -0x14(%ebp)
   10a3d:	e8 23 fc ff ff       	call   10665 <task_switch_from_to>
   10a42:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10a45:	83 ec 0c             	sub    $0xc,%esp
   10a48:	ff 75 f0             	push   -0x10(%ebp)
   10a4b:	e8 94 0c 00 00       	call   116e4 <idt_leave_protection>
   10a50:	83 c4 10             	add    $0x10,%esp
}
   10a53:	90                   	nop
   10a54:	c9                   	leave  
   10a55:	c3                   	ret    

00010a56 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10a56:	55                   	push   %ebp
   10a57:	89 e5                	mov    %esp,%ebp
   10a59:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10a5c:	e8 6b 0c 00 00       	call   116cc <idt_enter_protection>
   10a61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10a64:	83 ec 0c             	sub    $0xc,%esp
   10a67:	68 44 39 01 00       	push   $0x13944
   10a6c:	e8 44 fb ff ff       	call   105b5 <list_get_size>
   10a71:	83 c4 10             	add    $0x10,%esp
   10a74:	83 f8 01             	cmp    $0x1,%eax
   10a77:	7e 29                	jle    10aa2 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10a79:	e8 66 ff ff ff       	call   109e4 <task_current>
   10a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10a81:	83 ec 0c             	sub    $0xc,%esp
   10a84:	ff 75 f0             	push   -0x10(%ebp)
   10a87:	e8 df fe ff ff       	call   1096b <task_set_unready>
   10a8c:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10a8f:	83 ec 0c             	sub    $0xc,%esp
   10a92:	ff 75 f0             	push   -0x10(%ebp)
   10a95:	e8 86 fe ff ff       	call   10920 <task_set_ready>
   10a9a:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10a9d:	e8 4c ff ff ff       	call   109ee <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10aa2:	83 ec 0c             	sub    $0xc,%esp
   10aa5:	ff 75 f4             	push   -0xc(%ebp)
   10aa8:	e8 37 0c 00 00       	call   116e4 <idt_leave_protection>
   10aad:	83 c4 10             	add    $0x10,%esp
    return 0;
   10ab0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ab5:	c9                   	leave  
   10ab6:	c3                   	ret    

00010ab7 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10ab7:	55                   	push   %ebp
   10ab8:	89 e5                	mov    %esp,%ebp
   10aba:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10abd:	83 ec 0c             	sub    $0xc,%esp
   10ac0:	68 5c 39 01 00       	push   $0x1395c
   10ac5:	e8 18 fb ff ff       	call   105e2 <list_get_first>
   10aca:	83 c4 10             	add    $0x10,%esp
   10acd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10ad0:	eb 62                	jmp    10b34 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10ad2:	83 ec 0c             	sub    $0xc,%esp
   10ad5:	ff 75 f4             	push   -0xc(%ebp)
   10ad8:	e8 2f fa ff ff       	call   1050c <list_node_next>
   10add:	83 c4 10             	add    $0x10,%esp
   10ae0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10ae3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ae7:	74 08                	je     10af1 <task_slice_end+0x3a>
   10ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10aec:	83 e8 30             	sub    $0x30,%eax
   10aef:	eb 05                	jmp    10af6 <task_slice_end+0x3f>
   10af1:	b8 00 00 00 00       	mov    $0x0,%eax
   10af6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10af9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10afc:	8b 40 0c             	mov    0xc(%eax),%eax
   10aff:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b02:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b05:	89 50 0c             	mov    %edx,0xc(%eax)
   10b08:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b0b:	8b 40 0c             	mov    0xc(%eax),%eax
   10b0e:	85 c0                	test   %eax,%eax
   10b10:	75 1c                	jne    10b2e <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10b12:	83 ec 0c             	sub    $0xc,%esp
   10b15:	ff 75 e8             	push   -0x18(%ebp)
   10b18:	e8 01 01 00 00       	call   10c1e <task_set_wakeup>
   10b1d:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10b20:	83 ec 0c             	sub    $0xc,%esp
   10b23:	ff 75 e8             	push   -0x18(%ebp)
   10b26:	e8 f5 fd ff ff       	call   10920 <task_set_ready>
   10b2b:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10b31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10b34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b38:	75 98                	jne    10ad2 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10b3a:	e8 a5 fe ff ff       	call   109e4 <task_current>
   10b3f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10b42:	81 7d f0 1c 3a 01 00 	cmpl   $0x13a1c,-0x10(%ebp)
   10b49:	75 23                	jne    10b6e <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10b4b:	83 ec 0c             	sub    $0xc,%esp
   10b4e:	68 44 39 01 00       	push   $0x13944
   10b53:	e8 28 fa ff ff       	call   10580 <list_is_empty>
   10b58:	83 c4 10             	add    $0x10,%esp
   10b5b:	85 c0                	test   %eax,%eax
   10b5d:	75 60                	jne    10bbf <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10b5f:	c7 05 1c 3a 01 00 00 	movl   $0x0,0x13a1c
   10b66:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10b69:	e8 80 fe ff ff       	call   109ee <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10b6e:	81 7d f0 1c 3a 01 00 	cmpl   $0x13a1c,-0x10(%ebp)
   10b75:	74 49                	je     10bc0 <task_slice_end+0x109>
   10b77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b7a:	8b 40 08             	mov    0x8(%eax),%eax
   10b7d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b80:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b83:	89 50 08             	mov    %edx,0x8(%eax)
   10b86:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b89:	8b 40 08             	mov    0x8(%eax),%eax
   10b8c:	85 c0                	test   %eax,%eax
   10b8e:	75 30                	jne    10bc0 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b93:	8b 50 04             	mov    0x4(%eax),%edx
   10b96:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b99:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10b9c:	83 ec 0c             	sub    $0xc,%esp
   10b9f:	ff 75 f0             	push   -0x10(%ebp)
   10ba2:	e8 c4 fd ff ff       	call   1096b <task_set_unready>
   10ba7:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10baa:	83 ec 0c             	sub    $0xc,%esp
   10bad:	ff 75 f0             	push   -0x10(%ebp)
   10bb0:	e8 6b fd ff ff       	call   10920 <task_set_ready>
   10bb5:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10bb8:	e8 31 fe ff ff       	call   109ee <task_switch>
   10bbd:	eb 01                	jmp    10bc0 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10bbf:	90                   	nop
    }
}
   10bc0:	c9                   	leave  
   10bc1:	c3                   	ret    

00010bc2 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10bc2:	55                   	push   %ebp
   10bc3:	89 e5                	mov    %esp,%ebp
   10bc5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10bc8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10bcc:	75 1c                	jne    10bea <task_set_sleep+0x28>
   10bce:	68 ed 2e 01 00       	push   $0x12eed
   10bd3:	68 d8 2f 01 00       	push   $0x12fd8
   10bd8:	68 66 01 00 00       	push   $0x166
   10bdd:	68 00 2f 01 00       	push   $0x12f00
   10be2:	e8 a7 14 00 00       	call   1208e <pannic>
   10be7:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10bea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10bee:	74 2b                	je     10c1b <task_set_sleep+0x59>

    task->sleep = slice;
   10bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf6:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10bf9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfc:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10c02:	8b 45 08             	mov    0x8(%ebp),%eax
   10c05:	83 c0 30             	add    $0x30,%eax
   10c08:	83 ec 08             	sub    $0x8,%esp
   10c0b:	50                   	push   %eax
   10c0c:	68 5c 39 01 00       	push   $0x1395c
   10c11:	e8 c3 1d 00 00       	call   129d9 <list_insert_last>
   10c16:	83 c4 10             	add    $0x10,%esp
   10c19:	eb 01                	jmp    10c1c <task_set_sleep+0x5a>
    if (slice == 0) return;
   10c1b:	90                   	nop
}
   10c1c:	c9                   	leave  
   10c1d:	c3                   	ret    

00010c1e <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10c1e:	55                   	push   %ebp
   10c1f:	89 e5                	mov    %esp,%ebp
   10c21:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c28:	75 1c                	jne    10c46 <task_set_wakeup+0x28>
   10c2a:	68 ed 2e 01 00       	push   $0x12eed
   10c2f:	68 e8 2f 01 00       	push   $0x12fe8
   10c34:	68 74 01 00 00       	push   $0x174
   10c39:	68 00 2f 01 00       	push   $0x12f00
   10c3e:	e8 4b 14 00 00       	call   1208e <pannic>
   10c43:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10c46:	8b 45 08             	mov    0x8(%ebp),%eax
   10c49:	83 c0 30             	add    $0x30,%eax
   10c4c:	83 ec 08             	sub    $0x8,%esp
   10c4f:	50                   	push   %eax
   10c50:	68 5c 39 01 00       	push   $0x1395c
   10c55:	e8 74 1f 00 00       	call   12bce <list_remove>
   10c5a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10c5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c60:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10c66:	90                   	nop
   10c67:	c9                   	leave  
   10c68:	c3                   	ret    

00010c69 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10c69:	55                   	push   %ebp
   10c6a:	89 e5                	mov    %esp,%ebp
   10c6c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10c6f:	e8 58 0a 00 00       	call   116cc <idt_enter_protection>
   10c74:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10c77:	e8 68 fd ff ff       	call   109e4 <task_current>
   10c7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10c7f:	83 ec 0c             	sub    $0xc,%esp
   10c82:	ff 75 f0             	push   -0x10(%ebp)
   10c85:	e8 e1 fc ff ff       	call   1096b <task_set_unready>
   10c8a:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c90:	83 c0 09             	add    $0x9,%eax
   10c93:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10c98:	f7 e2                	mul    %edx
   10c9a:	89 d0                	mov    %edx,%eax
   10c9c:	c1 e8 03             	shr    $0x3,%eax
   10c9f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10ca2:	83 ec 08             	sub    $0x8,%esp
   10ca5:	ff 75 ec             	push   -0x14(%ebp)
   10ca8:	ff 75 f0             	push   -0x10(%ebp)
   10cab:	e8 12 ff ff ff       	call   10bc2 <task_set_sleep>
   10cb0:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10cb3:	e8 36 fd ff ff       	call   109ee <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10cb8:	83 ec 0c             	sub    $0xc,%esp
   10cbb:	ff 75 f4             	push   -0xc(%ebp)
   10cbe:	e8 21 0a 00 00       	call   116e4 <idt_leave_protection>
   10cc3:	83 c4 10             	add    $0x10,%esp
   10cc6:	90                   	nop
   10cc7:	c9                   	leave  
   10cc8:	c3                   	ret    

00010cc9 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10cc9:	55                   	push   %ebp
   10cca:	89 e5                	mov    %esp,%ebp
   10ccc:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd2:	c1 e8 10             	shr    $0x10,%eax
   10cd5:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdc:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ce3:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10ce6:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10cea:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10cee:	90                   	nop
   10cef:	c9                   	leave  
   10cf0:	c3                   	ret    

00010cf1 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10cf1:	55                   	push   %ebp
   10cf2:	89 e5                	mov    %esp,%ebp
   10cf4:	83 ec 18             	sub    $0x18,%esp
   10cf7:	8b 55 08             	mov    0x8(%ebp),%edx
   10cfa:	8b 45 14             	mov    0x14(%ebp),%eax
   10cfd:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10d01:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10d05:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10d09:	66 c1 e8 03          	shr    $0x3,%ax
   10d0d:	0f b7 c0             	movzwl %ax,%eax
   10d10:	c1 e0 03             	shl    $0x3,%eax
   10d13:	05 e0 3c 01 00       	add    $0x13ce0,%eax
   10d18:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d1e:	89 c2                	mov    %eax,%edx
   10d20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d23:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10d27:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d2a:	c1 e8 10             	shr    $0x10,%eax
   10d2d:	89 c2                	mov    %eax,%edx
   10d2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d32:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10d35:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d38:	c1 e8 18             	shr    $0x18,%eax
   10d3b:	89 c2                	mov    %eax,%edx
   10d3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d40:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10d43:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10d4a:	76 1d                	jbe    10d69 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10d4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d4f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d53:	66 0d 00 80          	or     $0x8000,%ax
   10d57:	89 c2                	mov    %eax,%edx
   10d59:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d5c:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10d60:	8b 45 10             	mov    0x10(%ebp),%eax
   10d63:	c1 e8 0c             	shr    $0xc,%eax
   10d66:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10d69:	8b 45 10             	mov    0x10(%ebp),%eax
   10d6c:	89 c2                	mov    %eax,%edx
   10d6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d71:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10d74:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d77:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d7b:	89 c2                	mov    %eax,%edx
   10d7d:	8b 45 10             	mov    0x10(%ebp),%eax
   10d80:	c1 e8 08             	shr    $0x8,%eax
   10d83:	66 25 00 0f          	and    $0xf00,%ax
   10d87:	09 d0                	or     %edx,%eax
   10d89:	89 c2                	mov    %eax,%edx
   10d8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d8e:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10d92:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d95:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10d99:	89 c2                	mov    %eax,%edx
   10d9b:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10d9f:	80 e4 f0             	and    $0xf0,%ah
   10da2:	09 d0                	or     %edx,%eax
   10da4:	89 c2                	mov    %eax,%edx
   10da6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10da9:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10dad:	90                   	nop
   10dae:	c9                   	leave  
   10daf:	c3                   	ret    

00010db0 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10db0:	55                   	push   %ebp
   10db1:	89 e5                	mov    %esp,%ebp
   10db3:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10db6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10dbd:	eb 1c                	jmp    10ddb <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dc2:	c1 e0 03             	shl    $0x3,%eax
   10dc5:	0f b7 c0             	movzwl %ax,%eax
   10dc8:	6a 00                	push   $0x0
   10dca:	6a 00                	push   $0x0
   10dcc:	6a 00                	push   $0x0
   10dce:	50                   	push   %eax
   10dcf:	e8 1d ff ff ff       	call   10cf1 <segment_desc_set>
   10dd4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10dd7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ddb:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10de2:	7e db                	jle    10dbf <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10de4:	68 92 40 00 00       	push   $0x4092
   10de9:	6a ff                	push   $0xffffffff
   10deb:	6a 00                	push   $0x0
   10ded:	6a 10                	push   $0x10
   10def:	e8 fd fe ff ff       	call   10cf1 <segment_desc_set>
   10df4:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10df7:	c7 05 e8 3c 02 00 01 	movl   $0x1,0x23ce8
   10dfe:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10e01:	68 9a 40 00 00       	push   $0x409a
   10e06:	6a ff                	push   $0xffffffff
   10e08:	6a 00                	push   $0x0
   10e0a:	6a 08                	push   $0x8
   10e0c:	e8 e0 fe ff ff       	call   10cf1 <segment_desc_set>
   10e11:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10e14:	c7 05 e4 3c 02 00 01 	movl   $0x1,0x23ce4
   10e1b:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10e1e:	b8 e0 3c 01 00       	mov    $0x13ce0,%eax
   10e23:	68 00 00 01 00       	push   $0x10000
   10e28:	50                   	push   %eax
   10e29:	e8 9b fe ff ff       	call   10cc9 <lgdt>
   10e2e:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10e31:	83 ec 0c             	sub    $0xc,%esp
   10e34:	68 e0 bc 02 00       	push   $0x2bce0
   10e39:	e8 3b 0b 00 00       	call   11979 <mutex_init>
   10e3e:	83 c4 10             	add    $0x10,%esp
}
   10e41:	90                   	nop
   10e42:	c9                   	leave  
   10e43:	c3                   	ret    

00010e44 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10e44:	55                   	push   %ebp
   10e45:	89 e5                	mov    %esp,%ebp
   10e47:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10e4a:	83 ec 0c             	sub    $0xc,%esp
   10e4d:	68 e0 bc 02 00       	push   $0x2bce0
   10e52:	e8 6f 0b 00 00       	call   119c6 <mutex_lock>
   10e57:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10e5a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10e61:	eb 38                	jmp    10e9b <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e66:	8b 04 85 e0 3c 02 00 	mov    0x23ce0(,%eax,4),%eax
   10e6d:	85 c0                	test   %eax,%eax
   10e6f:	75 26                	jne    10e97 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e74:	c7 04 85 e0 3c 02 00 	movl   $0x1,0x23ce0(,%eax,4)
   10e7b:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10e7f:	83 ec 0c             	sub    $0xc,%esp
   10e82:	68 e0 bc 02 00       	push   $0x2bce0
   10e87:	e8 cb 0b 00 00       	call   11a57 <mutex_unlock>
   10e8c:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e92:	c1 e0 03             	shl    $0x3,%eax
   10e95:	eb 22                	jmp    10eb9 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10e97:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10e9b:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10ea2:	7e bf                	jle    10e63 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10ea4:	83 ec 0c             	sub    $0xc,%esp
   10ea7:	68 e0 bc 02 00       	push   $0x2bce0
   10eac:	e8 a6 0b 00 00       	call   11a57 <mutex_unlock>
   10eb1:	83 c4 10             	add    $0x10,%esp
    return -1;
   10eb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10eb9:	c9                   	leave  
   10eba:	c3                   	ret    

00010ebb <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10ebb:	55                   	push   %ebp
   10ebc:	89 e5                	mov    %esp,%ebp
   10ebe:	fa                   	cli    
   10ebf:	90                   	nop
   10ec0:	5d                   	pop    %ebp
   10ec1:	c3                   	ret    

00010ec2 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10ec2:	55                   	push   %ebp
   10ec3:	89 e5                	mov    %esp,%ebp
   10ec5:	fb                   	sti    
   10ec6:	90                   	nop
   10ec7:	5d                   	pop    %ebp
   10ec8:	c3                   	ret    

00010ec9 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10ec9:	55                   	push   %ebp
   10eca:	89 e5                	mov    %esp,%ebp
   10ecc:	f4                   	hlt    
   10ecd:	90                   	nop
   10ece:	5d                   	pop    %ebp
   10ecf:	c3                   	ret    

00010ed0 <inb>:
static inline uint8_t inb(uint16_t port) {
   10ed0:	55                   	push   %ebp
   10ed1:	89 e5                	mov    %esp,%ebp
   10ed3:	83 ec 14             	sub    $0x14,%esp
   10ed6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10edd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ee1:	89 c2                	mov    %eax,%edx
   10ee3:	ec                   	in     (%dx),%al
   10ee4:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10ee7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10eeb:	c9                   	leave  
   10eec:	c3                   	ret    

00010eed <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10eed:	55                   	push   %ebp
   10eee:	89 e5                	mov    %esp,%ebp
   10ef0:	83 ec 08             	sub    $0x8,%esp
   10ef3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef6:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ef9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10efd:	89 d0                	mov    %edx,%eax
   10eff:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10f02:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f06:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10f0a:	ee                   	out    %al,(%dx)
}
   10f0b:	90                   	nop
   10f0c:	c9                   	leave  
   10f0d:	c3                   	ret    

00010f0e <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10f0e:	55                   	push   %ebp
   10f0f:	89 e5                	mov    %esp,%ebp
   10f11:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10f14:	8b 45 08             	mov    0x8(%ebp),%eax
   10f17:	c1 e8 10             	shr    $0x10,%eax
   10f1a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10f1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f21:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10f25:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f28:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10f2b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10f2f:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10f33:	90                   	nop
   10f34:	c9                   	leave  
   10f35:	c3                   	ret    

00010f36 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10f36:	55                   	push   %ebp
   10f37:	89 e5                	mov    %esp,%ebp
   10f39:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10f3c:	9c                   	pushf  
   10f3d:	58                   	pop    %eax
   10f3e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10f41:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10f44:	c9                   	leave  
   10f45:	c3                   	ret    

00010f46 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10f46:	55                   	push   %ebp
   10f47:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10f49:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4c:	50                   	push   %eax
   10f4d:	9d                   	popf   
}
   10f4e:	90                   	nop
   10f4f:	5d                   	pop    %ebp
   10f50:	c3                   	ret    

00010f51 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10f51:	55                   	push   %ebp
   10f52:	89 e5                	mov    %esp,%ebp
   10f54:	57                   	push   %edi
   10f55:	56                   	push   %esi
   10f56:	53                   	push   %ebx
   10f57:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10f5a:	83 ec 0c             	sub    $0xc,%esp
   10f5d:	68 f8 2f 01 00       	push   $0x12ff8
   10f62:	e8 f6 1d 00 00       	call   12d5d <log_printf>
   10f67:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10f6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6d:	8b 50 34             	mov    0x34(%eax),%edx
   10f70:	8b 45 08             	mov    0x8(%ebp),%eax
   10f73:	8b 40 30             	mov    0x30(%eax),%eax
   10f76:	83 ec 04             	sub    $0x4,%esp
   10f79:	52                   	push   %edx
   10f7a:	50                   	push   %eax
   10f7b:	68 36 30 01 00       	push   $0x13036
   10f80:	e8 d8 1d 00 00       	call   12d5d <log_printf>
   10f85:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10f88:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8b:	8b 38                	mov    (%eax),%edi
   10f8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f90:	8b 70 04             	mov    0x4(%eax),%esi
   10f93:	8b 45 08             	mov    0x8(%ebp),%eax
   10f96:	8b 58 08             	mov    0x8(%eax),%ebx
   10f99:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9c:	8b 48 0c             	mov    0xc(%eax),%ecx
   10f9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa2:	8b 50 0c             	mov    0xc(%eax),%edx
   10fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa8:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10fab:	83 ec 04             	sub    $0x4,%esp
   10fae:	57                   	push   %edi
   10faf:	56                   	push   %esi
   10fb0:	53                   	push   %ebx
   10fb1:	51                   	push   %ecx
   10fb2:	52                   	push   %edx
   10fb3:	50                   	push   %eax
   10fb4:	68 50 30 01 00       	push   $0x13050
   10fb9:	e8 9f 1d 00 00       	call   12d5d <log_printf>
   10fbe:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc4:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fca:	8b 40 18             	mov    0x18(%eax),%eax
   10fcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd3:	8b 58 10             	mov    0x10(%eax),%ebx
   10fd6:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10fd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdc:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10fdf:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe2:	8b 70 24             	mov    0x24(%eax),%esi
   10fe5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe8:	8b 58 28             	mov    0x28(%eax),%ebx
   10feb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fee:	8b 50 20             	mov    0x20(%eax),%edx
   10ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff4:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10ff7:	83 ec 0c             	sub    $0xc,%esp
   10ffa:	51                   	push   %ecx
   10ffb:	ff 75 e4             	push   -0x1c(%ebp)
   10ffe:	ff 75 e0             	push   -0x20(%ebp)
   11001:	57                   	push   %edi
   11002:	56                   	push   %esi
   11003:	53                   	push   %ebx
   11004:	52                   	push   %edx
   11005:	50                   	push   %eax
   11006:	68 80 30 01 00       	push   $0x13080
   1100b:	e8 4d 1d 00 00       	call   12d5d <log_printf>
   11010:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11013:	8b 45 08             	mov    0x8(%ebp),%eax
   11016:	8b 50 40             	mov    0x40(%eax),%edx
   11019:	8b 45 08             	mov    0x8(%ebp),%eax
   1101c:	8b 40 38             	mov    0x38(%eax),%eax
   1101f:	83 ec 04             	sub    $0x4,%esp
   11022:	52                   	push   %edx
   11023:	50                   	push   %eax
   11024:	68 d8 30 01 00       	push   $0x130d8
   11029:	e8 2f 1d 00 00       	call   12d5d <log_printf>
   1102e:	83 c4 10             	add    $0x10,%esp
}
   11031:	90                   	nop
   11032:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11035:	5b                   	pop    %ebx
   11036:	5e                   	pop    %esi
   11037:	5f                   	pop    %edi
   11038:	5d                   	pop    %ebp
   11039:	c3                   	ret    

0001103a <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1103a:	55                   	push   %ebp
   1103b:	89 e5                	mov    %esp,%ebp
   1103d:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11040:	83 ec 0c             	sub    $0xc,%esp
   11043:	68 f4 30 01 00       	push   $0x130f4
   11048:	e8 10 1d 00 00       	call   12d5d <log_printf>
   1104d:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11050:	83 ec 08             	sub    $0x8,%esp
   11053:	ff 75 0c             	push   0xc(%ebp)
   11056:	68 28 31 01 00       	push   $0x13128
   1105b:	e8 fd 1c 00 00       	call   12d5d <log_printf>
   11060:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11063:	83 ec 0c             	sub    $0xc,%esp
   11066:	ff 75 08             	push   0x8(%ebp)
   11069:	e8 e3 fe ff ff       	call   10f51 <print_exception_fram>
   1106e:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11071:	e8 53 fe ff ff       	call   10ec9 <hlt>
   11076:	eb f9                	jmp    11071 <do_default_handler+0x37>

00011078 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11078:	55                   	push   %ebp
   11079:	89 e5                	mov    %esp,%ebp
   1107b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1107e:	83 ec 08             	sub    $0x8,%esp
   11081:	68 42 31 01 00       	push   $0x13142
   11086:	ff 75 08             	push   0x8(%ebp)
   11089:	e8 ac ff ff ff       	call   1103a <do_default_handler>
   1108e:	83 c4 10             	add    $0x10,%esp
}
   11091:	90                   	nop
   11092:	c9                   	leave  
   11093:	c3                   	ret    

00011094 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11094:	55                   	push   %ebp
   11095:	89 e5                	mov    %esp,%ebp
   11097:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1109a:	83 ec 08             	sub    $0x8,%esp
   1109d:	68 54 31 01 00       	push   $0x13154
   110a2:	ff 75 08             	push   0x8(%ebp)
   110a5:	e8 90 ff ff ff       	call   1103a <do_default_handler>
   110aa:	83 c4 10             	add    $0x10,%esp
}
   110ad:	90                   	nop
   110ae:	c9                   	leave  
   110af:	c3                   	ret    

000110b0 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   110b0:	55                   	push   %ebp
   110b1:	89 e5                	mov    %esp,%ebp
   110b3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   110b6:	83 ec 08             	sub    $0x8,%esp
   110b9:	68 66 31 01 00       	push   $0x13166
   110be:	ff 75 08             	push   0x8(%ebp)
   110c1:	e8 74 ff ff ff       	call   1103a <do_default_handler>
   110c6:	83 c4 10             	add    $0x10,%esp
}
   110c9:	90                   	nop
   110ca:	c9                   	leave  
   110cb:	c3                   	ret    

000110cc <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   110cc:	55                   	push   %ebp
   110cd:	89 e5                	mov    %esp,%ebp
   110cf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   110d2:	83 ec 08             	sub    $0x8,%esp
   110d5:	68 76 31 01 00       	push   $0x13176
   110da:	ff 75 08             	push   0x8(%ebp)
   110dd:	e8 58 ff ff ff       	call   1103a <do_default_handler>
   110e2:	83 c4 10             	add    $0x10,%esp
}
   110e5:	90                   	nop
   110e6:	c9                   	leave  
   110e7:	c3                   	ret    

000110e8 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   110e8:	55                   	push   %ebp
   110e9:	89 e5                	mov    %esp,%ebp
   110eb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   110ee:	83 ec 08             	sub    $0x8,%esp
   110f1:	68 84 31 01 00       	push   $0x13184
   110f6:	ff 75 08             	push   0x8(%ebp)
   110f9:	e8 3c ff ff ff       	call   1103a <do_default_handler>
   110fe:	83 c4 10             	add    $0x10,%esp
}
   11101:	90                   	nop
   11102:	c9                   	leave  
   11103:	c3                   	ret    

00011104 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11104:	55                   	push   %ebp
   11105:	89 e5                	mov    %esp,%ebp
   11107:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1110a:	83 ec 08             	sub    $0x8,%esp
   1110d:	68 99 31 01 00       	push   $0x13199
   11112:	ff 75 08             	push   0x8(%ebp)
   11115:	e8 20 ff ff ff       	call   1103a <do_default_handler>
   1111a:	83 c4 10             	add    $0x10,%esp
}
   1111d:	90                   	nop
   1111e:	c9                   	leave  
   1111f:	c3                   	ret    

00011120 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11120:	55                   	push   %ebp
   11121:	89 e5                	mov    %esp,%ebp
   11123:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11126:	83 ec 08             	sub    $0x8,%esp
   11129:	68 ac 31 01 00       	push   $0x131ac
   1112e:	ff 75 08             	push   0x8(%ebp)
   11131:	e8 04 ff ff ff       	call   1103a <do_default_handler>
   11136:	83 c4 10             	add    $0x10,%esp
}
   11139:	90                   	nop
   1113a:	c9                   	leave  
   1113b:	c3                   	ret    

0001113c <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1113c:	55                   	push   %ebp
   1113d:	89 e5                	mov    %esp,%ebp
   1113f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11142:	83 ec 08             	sub    $0x8,%esp
   11145:	68 c2 31 01 00       	push   $0x131c2
   1114a:	ff 75 08             	push   0x8(%ebp)
   1114d:	e8 e8 fe ff ff       	call   1103a <do_default_handler>
   11152:	83 c4 10             	add    $0x10,%esp
}
   11155:	90                   	nop
   11156:	c9                   	leave  
   11157:	c3                   	ret    

00011158 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11158:	55                   	push   %ebp
   11159:	89 e5                	mov    %esp,%ebp
   1115b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1115e:	83 ec 08             	sub    $0x8,%esp
   11161:	68 db 31 01 00       	push   $0x131db
   11166:	ff 75 08             	push   0x8(%ebp)
   11169:	e8 cc fe ff ff       	call   1103a <do_default_handler>
   1116e:	83 c4 10             	add    $0x10,%esp
}
   11171:	90                   	nop
   11172:	c9                   	leave  
   11173:	c3                   	ret    

00011174 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11174:	55                   	push   %ebp
   11175:	89 e5                	mov    %esp,%ebp
   11177:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1117a:	83 ec 08             	sub    $0x8,%esp
   1117d:	68 f8 31 01 00       	push   $0x131f8
   11182:	ff 75 08             	push   0x8(%ebp)
   11185:	e8 b0 fe ff ff       	call   1103a <do_default_handler>
   1118a:	83 c4 10             	add    $0x10,%esp
}
   1118d:	90                   	nop
   1118e:	c9                   	leave  
   1118f:	c3                   	ret    

00011190 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11190:	55                   	push   %ebp
   11191:	89 e5                	mov    %esp,%ebp
   11193:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11196:	83 ec 08             	sub    $0x8,%esp
   11199:	68 0f 32 01 00       	push   $0x1320f
   1119e:	ff 75 08             	push   0x8(%ebp)
   111a1:	e8 94 fe ff ff       	call   1103a <do_default_handler>
   111a6:	83 c4 10             	add    $0x10,%esp
}
   111a9:	90                   	nop
   111aa:	c9                   	leave  
   111ab:	c3                   	ret    

000111ac <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   111ac:	55                   	push   %ebp
   111ad:	89 e5                	mov    %esp,%ebp
   111af:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   111b2:	83 ec 08             	sub    $0x8,%esp
   111b5:	68 25 32 01 00       	push   $0x13225
   111ba:	ff 75 08             	push   0x8(%ebp)
   111bd:	e8 78 fe ff ff       	call   1103a <do_default_handler>
   111c2:	83 c4 10             	add    $0x10,%esp
}
   111c5:	90                   	nop
   111c6:	c9                   	leave  
   111c7:	c3                   	ret    

000111c8 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   111c8:	55                   	push   %ebp
   111c9:	89 e5                	mov    %esp,%ebp
   111cb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   111ce:	83 ec 08             	sub    $0x8,%esp
   111d1:	68 43 32 01 00       	push   $0x13243
   111d6:	ff 75 08             	push   0x8(%ebp)
   111d9:	e8 5c fe ff ff       	call   1103a <do_default_handler>
   111de:	83 c4 10             	add    $0x10,%esp
}
   111e1:	90                   	nop
   111e2:	c9                   	leave  
   111e3:	c3                   	ret    

000111e4 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   111e4:	55                   	push   %ebp
   111e5:	89 e5                	mov    %esp,%ebp
   111e7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   111ea:	83 ec 08             	sub    $0x8,%esp
   111ed:	68 61 32 01 00       	push   $0x13261
   111f2:	ff 75 08             	push   0x8(%ebp)
   111f5:	e8 40 fe ff ff       	call   1103a <do_default_handler>
   111fa:	83 c4 10             	add    $0x10,%esp
}
   111fd:	90                   	nop
   111fe:	c9                   	leave  
   111ff:	c3                   	ret    

00011200 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   11200:	55                   	push   %ebp
   11201:	89 e5                	mov    %esp,%ebp
   11203:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   11206:	83 ec 08             	sub    $0x8,%esp
   11209:	68 7e 32 01 00       	push   $0x1327e
   1120e:	ff 75 08             	push   0x8(%ebp)
   11211:	e8 24 fe ff ff       	call   1103a <do_default_handler>
   11216:	83 c4 10             	add    $0x10,%esp
}
   11219:	90                   	nop
   1121a:	c9                   	leave  
   1121b:	c3                   	ret    

0001121c <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   1121c:	55                   	push   %ebp
   1121d:	89 e5                	mov    %esp,%ebp
   1121f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11222:	83 ec 08             	sub    $0x8,%esp
   11225:	68 93 32 01 00       	push   $0x13293
   1122a:	ff 75 08             	push   0x8(%ebp)
   1122d:	e8 08 fe ff ff       	call   1103a <do_default_handler>
   11232:	83 c4 10             	add    $0x10,%esp
}
   11235:	90                   	nop
   11236:	c9                   	leave  
   11237:	c3                   	ret    

00011238 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11238:	55                   	push   %ebp
   11239:	89 e5                	mov    %esp,%ebp
   1123b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   1123e:	83 ec 08             	sub    $0x8,%esp
   11241:	68 a7 32 01 00       	push   $0x132a7
   11246:	ff 75 08             	push   0x8(%ebp)
   11249:	e8 ec fd ff ff       	call   1103a <do_default_handler>
   1124e:	83 c4 10             	add    $0x10,%esp
}
   11251:	90                   	nop
   11252:	c9                   	leave  
   11253:	c3                   	ret    

00011254 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
   11257:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   1125a:	83 ec 08             	sub    $0x8,%esp
   1125d:	68 c1 32 01 00       	push   $0x132c1
   11262:	ff 75 08             	push   0x8(%ebp)
   11265:	e8 d0 fd ff ff       	call   1103a <do_default_handler>
   1126a:	83 c4 10             	add    $0x10,%esp
}
   1126d:	90                   	nop
   1126e:	c9                   	leave  
   1126f:	c3                   	ret    

00011270 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11270:	55                   	push   %ebp
   11271:	89 e5                	mov    %esp,%ebp
   11273:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11276:	83 ec 08             	sub    $0x8,%esp
   11279:	68 d9 32 01 00       	push   $0x132d9
   1127e:	ff 75 08             	push   0x8(%ebp)
   11281:	e8 b4 fd ff ff       	call   1103a <do_default_handler>
   11286:	83 c4 10             	add    $0x10,%esp
}
   11289:	90                   	nop
   1128a:	c9                   	leave  
   1128b:	c3                   	ret    

0001128c <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1128c:	55                   	push   %ebp
   1128d:	89 e5                	mov    %esp,%ebp
   1128f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11292:	83 ec 08             	sub    $0x8,%esp
   11295:	68 f1 32 01 00       	push   $0x132f1
   1129a:	ff 75 08             	push   0x8(%ebp)
   1129d:	e8 98 fd ff ff       	call   1103a <do_default_handler>
   112a2:	83 c4 10             	add    $0x10,%esp
}
   112a5:	90                   	nop
   112a6:	c9                   	leave  
   112a7:	c3                   	ret    

000112a8 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   112a8:	55                   	push   %ebp
   112a9:	89 e5                	mov    %esp,%ebp
   112ab:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   112ae:	83 ec 08             	sub    $0x8,%esp
   112b1:	68 0d 33 01 00       	push   $0x1330d
   112b6:	ff 75 08             	push   0x8(%ebp)
   112b9:	e8 7c fd ff ff       	call   1103a <do_default_handler>
   112be:	83 c4 10             	add    $0x10,%esp
}
   112c1:	90                   	nop
   112c2:	c9                   	leave  
   112c3:	c3                   	ret    

000112c4 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   112c4:	55                   	push   %ebp
   112c5:	89 e5                	mov    %esp,%ebp
   112c7:	83 ec 08             	sub    $0x8,%esp
   112ca:	8b 55 0c             	mov    0xc(%ebp),%edx
   112cd:	8b 45 14             	mov    0x14(%ebp),%eax
   112d0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   112d4:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   112d8:	8b 45 10             	mov    0x10(%ebp),%eax
   112db:	89 c2                	mov    %eax,%edx
   112dd:	8b 45 08             	mov    0x8(%ebp),%eax
   112e0:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   112e3:	8b 45 10             	mov    0x10(%ebp),%eax
   112e6:	c1 e8 10             	shr    $0x10,%eax
   112e9:	89 c2                	mov    %eax,%edx
   112eb:	8b 45 08             	mov    0x8(%ebp),%eax
   112ee:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   112f2:	8b 45 08             	mov    0x8(%ebp),%eax
   112f5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   112f9:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   112fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11300:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11304:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11308:	90                   	nop
   11309:	c9                   	leave  
   1130a:	c3                   	ret    

0001130b <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   1130b:	55                   	push   %ebp
   1130c:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   1130e:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11315:	7f 06                	jg     1131d <idt_install+0x12>
   11317:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1131b:	79 07                	jns    11324 <idt_install+0x19>
   1131d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11322:	eb 25                	jmp    11349 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11324:	8b 45 0c             	mov    0xc(%ebp),%eax
   11327:	8b 55 08             	mov    0x8(%ebp),%edx
   1132a:	c1 e2 03             	shl    $0x3,%edx
   1132d:	81 c2 00 bd 02 00    	add    $0x2bd00,%edx
   11333:	68 00 8e 00 00       	push   $0x8e00
   11338:	50                   	push   %eax
   11339:	6a 08                	push   $0x8
   1133b:	52                   	push   %edx
   1133c:	e8 83 ff ff ff       	call   112c4 <gate_desc_set>
   11341:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11344:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11349:	c9                   	leave  
   1134a:	c3                   	ret    

0001134b <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   1134b:	55                   	push   %ebp
   1134c:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   1134e:	6a 11                	push   $0x11
   11350:	6a 20                	push   $0x20
   11352:	e8 96 fb ff ff       	call   10eed <outb>
   11357:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   1135a:	6a 20                	push   $0x20
   1135c:	6a 21                	push   $0x21
   1135e:	e8 8a fb ff ff       	call   10eed <outb>
   11363:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11366:	6a 04                	push   $0x4
   11368:	6a 21                	push   $0x21
   1136a:	e8 7e fb ff ff       	call   10eed <outb>
   1136f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11372:	6a 01                	push   $0x1
   11374:	6a 21                	push   $0x21
   11376:	e8 72 fb ff ff       	call   10eed <outb>
   1137b:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1137e:	6a 11                	push   $0x11
   11380:	68 a0 00 00 00       	push   $0xa0
   11385:	e8 63 fb ff ff       	call   10eed <outb>
   1138a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1138d:	6a 28                	push   $0x28
   1138f:	68 a1 00 00 00       	push   $0xa1
   11394:	e8 54 fb ff ff       	call   10eed <outb>
   11399:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1139c:	6a 02                	push   $0x2
   1139e:	68 a1 00 00 00       	push   $0xa1
   113a3:	e8 45 fb ff ff       	call   10eed <outb>
   113a8:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   113ab:	6a 01                	push   $0x1
   113ad:	68 a1 00 00 00       	push   $0xa1
   113b2:	e8 36 fb ff ff       	call   10eed <outb>
   113b7:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   113ba:	68 fb 00 00 00       	push   $0xfb
   113bf:	6a 21                	push   $0x21
   113c1:	e8 27 fb ff ff       	call   10eed <outb>
   113c6:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   113c9:	68 ff 00 00 00       	push   $0xff
   113ce:	68 a1 00 00 00       	push   $0xa1
   113d3:	e8 15 fb ff ff       	call   10eed <outb>
   113d8:	83 c4 08             	add    $0x8,%esp


}
   113db:	90                   	nop
   113dc:	c9                   	leave  
   113dd:	c3                   	ret    

000113de <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   113de:	55                   	push   %ebp
   113df:	89 e5                	mov    %esp,%ebp
   113e1:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   113e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   113eb:	eb 14                	jmp    11401 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   113ed:	68 2a 00 01 00       	push   $0x1002a
   113f2:	ff 75 fc             	push   -0x4(%ebp)
   113f5:	e8 11 ff ff ff       	call   1130b <idt_install>
   113fa:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   113fd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11401:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11408:	7e e3                	jle    113ed <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   1140a:	68 47 00 01 00       	push   $0x10047
   1140f:	6a 00                	push   $0x0
   11411:	e8 f5 fe ff ff       	call   1130b <idt_install>
   11416:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11419:	68 64 00 01 00       	push   $0x10064
   1141e:	6a 01                	push   $0x1
   11420:	e8 e6 fe ff ff       	call   1130b <idt_install>
   11425:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11428:	68 81 00 01 00       	push   $0x10081
   1142d:	6a 02                	push   $0x2
   1142f:	e8 d7 fe ff ff       	call   1130b <idt_install>
   11434:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11437:	68 9e 00 01 00       	push   $0x1009e
   1143c:	6a 03                	push   $0x3
   1143e:	e8 c8 fe ff ff       	call   1130b <idt_install>
   11443:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11446:	68 bb 00 01 00       	push   $0x100bb
   1144b:	6a 04                	push   $0x4
   1144d:	e8 b9 fe ff ff       	call   1130b <idt_install>
   11452:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11455:	68 d8 00 01 00       	push   $0x100d8
   1145a:	6a 05                	push   $0x5
   1145c:	e8 aa fe ff ff       	call   1130b <idt_install>
   11461:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11464:	68 f5 00 01 00       	push   $0x100f5
   11469:	6a 06                	push   $0x6
   1146b:	e8 9b fe ff ff       	call   1130b <idt_install>
   11470:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11473:	68 12 01 01 00       	push   $0x10112
   11478:	6a 07                	push   $0x7
   1147a:	e8 8c fe ff ff       	call   1130b <idt_install>
   1147f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11482:	68 2f 01 01 00       	push   $0x1012f
   11487:	6a 08                	push   $0x8
   11489:	e8 7d fe ff ff       	call   1130b <idt_install>
   1148e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11491:	68 4a 01 01 00       	push   $0x1014a
   11496:	6a 0a                	push   $0xa
   11498:	e8 6e fe ff ff       	call   1130b <idt_install>
   1149d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   114a0:	68 65 01 01 00       	push   $0x10165
   114a5:	6a 0b                	push   $0xb
   114a7:	e8 5f fe ff ff       	call   1130b <idt_install>
   114ac:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   114af:	68 80 01 01 00       	push   $0x10180
   114b4:	6a 0c                	push   $0xc
   114b6:	e8 50 fe ff ff       	call   1130b <idt_install>
   114bb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   114be:	68 9b 01 01 00       	push   $0x1019b
   114c3:	6a 0d                	push   $0xd
   114c5:	e8 41 fe ff ff       	call   1130b <idt_install>
   114ca:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   114cd:	68 b6 01 01 00       	push   $0x101b6
   114d2:	6a 0e                	push   $0xe
   114d4:	e8 32 fe ff ff       	call   1130b <idt_install>
   114d9:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   114dc:	68 d1 01 01 00       	push   $0x101d1
   114e1:	6a 10                	push   $0x10
   114e3:	e8 23 fe ff ff       	call   1130b <idt_install>
   114e8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   114eb:	68 ee 01 01 00       	push   $0x101ee
   114f0:	6a 11                	push   $0x11
   114f2:	e8 14 fe ff ff       	call   1130b <idt_install>
   114f7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   114fa:	68 09 02 01 00       	push   $0x10209
   114ff:	6a 12                	push   $0x12
   11501:	e8 05 fe ff ff       	call   1130b <idt_install>
   11506:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11509:	68 26 02 01 00       	push   $0x10226
   1150e:	6a 13                	push   $0x13
   11510:	e8 f6 fd ff ff       	call   1130b <idt_install>
   11515:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11518:	68 43 02 01 00       	push   $0x10243
   1151d:	6a 14                	push   $0x14
   1151f:	e8 e7 fd ff ff       	call   1130b <idt_install>
   11524:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11527:	68 60 02 01 00       	push   $0x10260
   1152c:	6a 15                	push   $0x15
   1152e:	e8 d8 fd ff ff       	call   1130b <idt_install>
   11533:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11536:	b8 00 bd 02 00       	mov    $0x2bd00,%eax
   1153b:	68 00 08 00 00       	push   $0x800
   11540:	50                   	push   %eax
   11541:	e8 c8 f9 ff ff       	call   10f0e <lidt>
   11546:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11549:	e8 fd fd ff ff       	call   1134b <init_pic>
}
   1154e:	90                   	nop
   1154f:	c9                   	leave  
   11550:	c3                   	ret    

00011551 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11551:	55                   	push   %ebp
   11552:	89 e5                	mov    %esp,%ebp
   11554:	53                   	push   %ebx
   11555:	83 ec 14             	sub    $0x14,%esp
   11558:	8b 45 08             	mov    0x8(%ebp),%eax
   1155b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1155e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11562:	76 7f                	jbe    115e3 <idt_enable+0x92>
   11564:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11568:	77 79                	ja     115e3 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1156a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1156e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11572:	77 33                	ja     115a7 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11574:	6a 21                	push   $0x21
   11576:	e8 55 f9 ff ff       	call   10ed0 <inb>
   1157b:	83 c4 04             	add    $0x4,%esp
   1157e:	89 c3                	mov    %eax,%ebx
   11580:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11584:	ba 01 00 00 00       	mov    $0x1,%edx
   11589:	89 c1                	mov    %eax,%ecx
   1158b:	d3 e2                	shl    %cl,%edx
   1158d:	89 d0                	mov    %edx,%eax
   1158f:	f7 d0                	not    %eax
   11591:	21 d8                	and    %ebx,%eax
   11593:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11596:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1159a:	50                   	push   %eax
   1159b:	6a 21                	push   $0x21
   1159d:	e8 4b f9 ff ff       	call   10eed <outb>
   115a2:	83 c4 08             	add    $0x8,%esp
   115a5:	eb 3d                	jmp    115e4 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   115a7:	68 a1 00 00 00       	push   $0xa1
   115ac:	e8 1f f9 ff ff       	call   10ed0 <inb>
   115b1:	83 c4 04             	add    $0x4,%esp
   115b4:	89 c3                	mov    %eax,%ebx
   115b6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   115ba:	83 e8 08             	sub    $0x8,%eax
   115bd:	ba 01 00 00 00       	mov    $0x1,%edx
   115c2:	89 c1                	mov    %eax,%ecx
   115c4:	d3 e2                	shl    %cl,%edx
   115c6:	89 d0                	mov    %edx,%eax
   115c8:	f7 d0                	not    %eax
   115ca:	21 d8                	and    %ebx,%eax
   115cc:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   115cf:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   115d3:	50                   	push   %eax
   115d4:	68 a1 00 00 00       	push   $0xa1
   115d9:	e8 0f f9 ff ff       	call   10eed <outb>
   115de:	83 c4 08             	add    $0x8,%esp
   115e1:	eb 01                	jmp    115e4 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   115e3:	90                   	nop
  }
  
}
   115e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   115e7:	c9                   	leave  
   115e8:	c3                   	ret    

000115e9 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   115e9:	55                   	push   %ebp
   115ea:	89 e5                	mov    %esp,%ebp
   115ec:	53                   	push   %ebx
   115ed:	83 ec 14             	sub    $0x14,%esp
   115f0:	8b 45 08             	mov    0x8(%ebp),%eax
   115f3:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   115f6:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   115fa:	76 7b                	jbe    11677 <idt_disable+0x8e>
   115fc:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11600:	77 75                	ja     11677 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11602:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11606:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1160a:	77 31                	ja     1163d <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1160c:	6a 21                	push   $0x21
   1160e:	e8 bd f8 ff ff       	call   10ed0 <inb>
   11613:	83 c4 04             	add    $0x4,%esp
   11616:	89 c3                	mov    %eax,%ebx
   11618:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1161c:	ba 01 00 00 00       	mov    $0x1,%edx
   11621:	89 c1                	mov    %eax,%ecx
   11623:	d3 e2                	shl    %cl,%edx
   11625:	89 d0                	mov    %edx,%eax
   11627:	09 d8                	or     %ebx,%eax
   11629:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1162c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11630:	50                   	push   %eax
   11631:	6a 21                	push   $0x21
   11633:	e8 b5 f8 ff ff       	call   10eed <outb>
   11638:	83 c4 08             	add    $0x8,%esp
   1163b:	eb 3b                	jmp    11678 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1163d:	68 a1 00 00 00       	push   $0xa1
   11642:	e8 89 f8 ff ff       	call   10ed0 <inb>
   11647:	83 c4 04             	add    $0x4,%esp
   1164a:	89 c3                	mov    %eax,%ebx
   1164c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11650:	83 e8 08             	sub    $0x8,%eax
   11653:	ba 01 00 00 00       	mov    $0x1,%edx
   11658:	89 c1                	mov    %eax,%ecx
   1165a:	d3 e2                	shl    %cl,%edx
   1165c:	89 d0                	mov    %edx,%eax
   1165e:	09 d8                	or     %ebx,%eax
   11660:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11663:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11667:	50                   	push   %eax
   11668:	68 a1 00 00 00       	push   $0xa1
   1166d:	e8 7b f8 ff ff       	call   10eed <outb>
   11672:	83 c4 08             	add    $0x8,%esp
   11675:	eb 01                	jmp    11678 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11677:	90                   	nop
  }
  
}
   11678:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1167b:	c9                   	leave  
   1167c:	c3                   	ret    

0001167d <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1167d:	55                   	push   %ebp
   1167e:	89 e5                	mov    %esp,%ebp
  cli();
   11680:	e8 36 f8 ff ff       	call   10ebb <cli>
}
   11685:	90                   	nop
   11686:	5d                   	pop    %ebp
   11687:	c3                   	ret    

00011688 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11688:	55                   	push   %ebp
   11689:	89 e5                	mov    %esp,%ebp
  sti();
   1168b:	e8 32 f8 ff ff       	call   10ec2 <sti>
}
   11690:	90                   	nop
   11691:	5d                   	pop    %ebp
   11692:	c3                   	ret    

00011693 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11693:	55                   	push   %ebp
   11694:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11696:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   1169a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1169e:	78 29                	js     116c9 <pic_send_eoi+0x36>
   116a0:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   116a4:	7f 23                	jg     116c9 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   116a6:	6a 20                	push   $0x20
   116a8:	6a 20                	push   $0x20
   116aa:	e8 3e f8 ff ff       	call   10eed <outb>
   116af:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   116b2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   116b6:	7e 12                	jle    116ca <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   116b8:	6a 20                	push   $0x20
   116ba:	68 a0 00 00 00       	push   $0xa0
   116bf:	e8 29 f8 ff ff       	call   10eed <outb>
   116c4:	83 c4 08             	add    $0x8,%esp
   116c7:	eb 01                	jmp    116ca <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   116c9:	90                   	nop
  }

}
   116ca:	c9                   	leave  
   116cb:	c3                   	ret    

000116cc <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   116cc:	55                   	push   %ebp
   116cd:	89 e5                	mov    %esp,%ebp
   116cf:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   116d2:	e8 5f f8 ff ff       	call   10f36 <read_eflags>
   116d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   116da:	e8 9e ff ff ff       	call   1167d <idt_disable_global>
  return state;;
   116df:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116e2:	c9                   	leave  
   116e3:	c3                   	ret    

000116e4 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   116e4:	55                   	push   %ebp
   116e5:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   116e7:	ff 75 08             	push   0x8(%ebp)
   116ea:	e8 57 f8 ff ff       	call   10f46 <write_eflags>
   116ef:	83 c4 04             	add    $0x4,%esp
}
   116f2:	90                   	nop
   116f3:	c9                   	leave  
   116f4:	c3                   	ret    

000116f5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   116f5:	55                   	push   %ebp
   116f6:	89 e5                	mov    %esp,%ebp
   116f8:	83 ec 08             	sub    $0x8,%esp
   116fb:	8b 45 08             	mov    0x8(%ebp),%eax
   116fe:	8b 55 0c             	mov    0xc(%ebp),%edx
   11701:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11705:	89 d0                	mov    %edx,%eax
   11707:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1170a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1170e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11712:	ee                   	out    %al,(%dx)
}
   11713:	90                   	nop
   11714:	c9                   	leave  
   11715:	c3                   	ret    

00011716 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11716:	55                   	push   %ebp
   11717:	89 e5                	mov    %esp,%ebp
   11719:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1171c:	a1 00 c5 02 00       	mov    0x2c500,%eax
   11721:	83 c0 01             	add    $0x1,%eax
   11724:	a3 00 c5 02 00       	mov    %eax,0x2c500

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11729:	83 ec 0c             	sub    $0xc,%esp
   1172c:	6a 20                	push   $0x20
   1172e:	e8 60 ff ff ff       	call   11693 <pic_send_eoi>
   11733:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11736:	e8 7c f3 ff ff       	call   10ab7 <task_slice_end>
}
   1173b:	90                   	nop
   1173c:	c9                   	leave  
   1173d:	c3                   	ret    

0001173e <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1173e:	55                   	push   %ebp
   1173f:	89 e5                	mov    %esp,%ebp
   11741:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11744:	6a 36                	push   $0x36
   11746:	6a 43                	push   $0x43
   11748:	e8 a8 ff ff ff       	call   116f5 <outb>
   1174d:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11750:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11756:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1175a:	0f b6 c0             	movzbl %al,%eax
   1175d:	50                   	push   %eax
   1175e:	6a 40                	push   $0x40
   11760:	e8 90 ff ff ff       	call   116f5 <outb>
   11765:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11768:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1176c:	66 c1 e8 08          	shr    $0x8,%ax
   11770:	0f b6 c0             	movzbl %al,%eax
   11773:	50                   	push   %eax
   11774:	6a 40                	push   $0x40
   11776:	e8 7a ff ff ff       	call   116f5 <outb>
   1177b:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1177e:	83 ec 08             	sub    $0x8,%esp
   11781:	68 7b 02 01 00       	push   $0x1027b
   11786:	6a 20                	push   $0x20
   11788:	e8 7e fb ff ff       	call   1130b <idt_install>
   1178d:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11790:	83 ec 0c             	sub    $0xc,%esp
   11793:	6a 20                	push   $0x20
   11795:	e8 b7 fd ff ff       	call   11551 <idt_enable>
   1179a:	83 c4 10             	add    $0x10,%esp

}
   1179d:	90                   	nop
   1179e:	c9                   	leave  
   1179f:	c3                   	ret    

000117a0 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   117a0:	55                   	push   %ebp
   117a1:	89 e5                	mov    %esp,%ebp
   117a3:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   117a6:	c7 05 00 c5 02 00 00 	movl   $0x0,0x2c500
   117ad:	00 00 00 
    init_pit();
   117b0:	e8 89 ff ff ff       	call   1173e <init_pit>
   117b5:	90                   	nop
   117b6:	c9                   	leave  
   117b7:	c3                   	ret    

000117b8 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   117b8:	55                   	push   %ebp
   117b9:	89 e5                	mov    %esp,%ebp
   117bb:	fb                   	sti    
   117bc:	90                   	nop
   117bd:	5d                   	pop    %ebp
   117be:	c3                   	ret    

000117bf <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   117bf:	55                   	push   %ebp
   117c0:	89 e5                	mov    %esp,%ebp
   117c2:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   117c5:	8b 45 08             	mov    0x8(%ebp),%eax
   117c8:	8b 40 50             	mov    0x50(%eax),%eax
   117cb:	85 c0                	test   %eax,%eax
   117cd:	75 19                	jne    117e8 <kernel_init+0x29>
   117cf:	68 2c 33 01 00       	push   $0x1332c
   117d4:	68 f8 33 01 00       	push   $0x133f8
   117d9:	6a 22                	push   $0x22
   117db:	68 50 33 01 00       	push   $0x13350
   117e0:	e8 a9 08 00 00       	call   1208e <pannic>
   117e5:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   117e8:	e8 e8 14 00 00       	call   12cd5 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   117ed:	83 ec 0c             	sub    $0xc,%esp
   117f0:	ff 75 08             	push   0x8(%ebp)
   117f3:	e8 84 ec ff ff       	call   1047c <memory_init>
   117f8:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   117fb:	e8 b0 f5 ff ff       	call   10db0 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11800:	e8 d9 fb ff ff       	call   113de <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11805:	e8 96 ff ff ff       	call   117a0 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   1180a:	e8 44 f0 ff ff       	call   10853 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1180f:	90                   	nop
   11810:	c9                   	leave  
   11811:	c3                   	ret    

00011812 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   11812:	55                   	push   %ebp
   11813:	89 e5                	mov    %esp,%ebp
   11815:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11818:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   1181f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11822:	8d 50 01             	lea    0x1(%eax),%edx
   11825:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11828:	83 ec 08             	sub    $0x8,%esp
   1182b:	50                   	push   %eax
   1182c:	68 85 33 01 00       	push   $0x13385
   11831:	e8 27 15 00 00       	call   12d5d <log_printf>
   11836:	83 c4 10             	add    $0x10,%esp
   11839:	eb e4                	jmp    1181f <test_task_1+0xd>

0001183b <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   1183b:	55                   	push   %ebp
   1183c:	89 e5                	mov    %esp,%ebp
   1183e:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11841:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   11848:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1184b:	8d 50 01             	lea    0x1(%eax),%edx
   1184e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11851:	83 ec 08             	sub    $0x8,%esp
   11854:	50                   	push   %eax
   11855:	68 90 33 01 00       	push   $0x13390
   1185a:	e8 fe 14 00 00       	call   12d5d <log_printf>
   1185f:	83 c4 10             	add    $0x10,%esp
   11862:	eb e4                	jmp    11848 <test_task_2+0xd>

00011864 <init_main>:
     }
}



void init_main(void) {
   11864:	55                   	push   %ebp
   11865:	89 e5                	mov    %esp,%ebp
   11867:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   1186a:	83 ec 0c             	sub    $0xc,%esp
   1186d:	68 9b 33 01 00       	push   $0x1339b
   11872:	e8 e6 14 00 00       	call   12d5d <log_printf>
   11877:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   1187a:	83 ec 04             	sub    $0x4,%esp
   1187d:	68 b3 33 01 00       	push   $0x133b3
   11882:	68 b9 33 01 00       	push   $0x133b9
   11887:	68 be 33 01 00       	push   $0x133be
   1188c:	e8 cc 14 00 00       	call   12d5d <log_printf>
   11891:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11894:	e8 35 f0 ff ff       	call   108ce <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11899:	ba a0 d6 02 00       	mov    $0x2d6a0,%edx
   1189e:	b8 12 18 01 00       	mov    $0x11812,%eax
   118a3:	52                   	push   %edx
   118a4:	50                   	push   %eax
   118a5:	68 d4 33 01 00       	push   $0x133d4
   118aa:	68 20 c5 02 00       	push   $0x2c520
   118af:	e8 b1 ee ff ff       	call   10765 <task_init>
   118b4:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   118b7:	ba a0 e6 02 00       	mov    $0x2e6a0,%edx
   118bc:	b8 3b 18 01 00       	mov    $0x1183b,%eax
   118c1:	52                   	push   %edx
   118c2:	50                   	push   %eax
   118c3:	68 e0 33 01 00       	push   $0x133e0
   118c8:	68 e0 c5 02 00       	push   $0x2c5e0
   118cd:	e8 93 ee ff ff       	call   10765 <task_init>
   118d2:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   118d5:	e8 de fe ff ff       	call   117b8 <sti>

    int count = 0;
   118da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   118e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118e4:	8d 50 01             	lea    0x1(%eax),%edx
   118e7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118ea:	83 ec 08             	sub    $0x8,%esp
   118ed:	50                   	push   %eax
   118ee:	68 ec 33 01 00       	push   $0x133ec
   118f3:	e8 65 14 00 00       	call   12d5d <log_printf>
   118f8:	83 c4 10             	add    $0x10,%esp
   118fb:	eb e4                	jmp    118e1 <init_main+0x7d>

000118fd <list_init>:
static inline void list_init(list_t *list) {
   118fd:	55                   	push   %ebp
   118fe:	89 e5                	mov    %esp,%ebp
   11900:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11903:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11907:	75 19                	jne    11922 <list_init+0x25>
   11909:	68 04 34 01 00       	push   $0x13404
   1190e:	68 b0 34 01 00       	push   $0x134b0
   11913:	6a 31                	push   $0x31
   11915:	68 18 34 01 00       	push   $0x13418
   1191a:	e8 6f 07 00 00       	call   1208e <pannic>
   1191f:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11922:	8b 45 08             	mov    0x8(%ebp),%eax
   11925:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1192c:	8b 45 08             	mov    0x8(%ebp),%eax
   1192f:	8b 50 04             	mov    0x4(%eax),%edx
   11932:	8b 45 08             	mov    0x8(%ebp),%eax
   11935:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11937:	8b 45 08             	mov    0x8(%ebp),%eax
   1193a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11941:	90                   	nop
   11942:	c9                   	leave  
   11943:	c3                   	ret    

00011944 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11944:	55                   	push   %ebp
   11945:	89 e5                	mov    %esp,%ebp
   11947:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1194a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1194e:	75 19                	jne    11969 <list_is_empty+0x25>
   11950:	68 04 34 01 00       	push   $0x13404
   11955:	68 bc 34 01 00       	push   $0x134bc
   1195a:	6a 38                	push   $0x38
   1195c:	68 18 34 01 00       	push   $0x13418
   11961:	e8 28 07 00 00       	call   1208e <pannic>
   11966:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11969:	8b 45 08             	mov    0x8(%ebp),%eax
   1196c:	8b 40 08             	mov    0x8(%eax),%eax
   1196f:	85 c0                	test   %eax,%eax
   11971:	0f 94 c0             	sete   %al
   11974:	0f b6 c0             	movzbl %al,%eax
}
   11977:	c9                   	leave  
   11978:	c3                   	ret    

00011979 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11979:	55                   	push   %ebp
   1197a:	89 e5                	mov    %esp,%ebp
   1197c:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1197f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11983:	75 19                	jne    1199e <mutex_init+0x25>
   11985:	68 56 34 01 00       	push   $0x13456
   1198a:	68 a4 34 01 00       	push   $0x134a4
   1198f:	6a 15                	push   $0x15
   11991:	68 6c 34 01 00       	push   $0x1346c
   11996:	e8 f3 06 00 00       	call   1208e <pannic>
   1199b:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   1199e:	8b 45 08             	mov    0x8(%ebp),%eax
   119a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   119a8:	8b 45 08             	mov    0x8(%ebp),%eax
   119ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   119b1:	8b 45 08             	mov    0x8(%ebp),%eax
   119b4:	83 c0 08             	add    $0x8,%eax
   119b7:	83 ec 0c             	sub    $0xc,%esp
   119ba:	50                   	push   %eax
   119bb:	e8 3d ff ff ff       	call   118fd <list_init>
   119c0:	83 c4 10             	add    $0x10,%esp
}
   119c3:	90                   	nop
   119c4:	c9                   	leave  
   119c5:	c3                   	ret    

000119c6 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   119c6:	55                   	push   %ebp
   119c7:	89 e5                	mov    %esp,%ebp
   119c9:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119cc:	e8 fb fc ff ff       	call   116cc <idt_enter_protection>
   119d1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   119d4:	e8 0b f0 ff ff       	call   109e4 <task_current>
   119d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   119dc:	8b 45 08             	mov    0x8(%ebp),%eax
   119df:	8b 40 04             	mov    0x4(%eax),%eax
   119e2:	85 c0                	test   %eax,%eax
   119e4:	75 19                	jne    119ff <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   119e6:	8b 45 08             	mov    0x8(%ebp),%eax
   119e9:	8b 40 04             	mov    0x4(%eax),%eax
   119ec:	8d 50 01             	lea    0x1(%eax),%edx
   119ef:	8b 45 08             	mov    0x8(%ebp),%eax
   119f2:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   119f5:	8b 45 08             	mov    0x8(%ebp),%eax
   119f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   119fb:	89 10                	mov    %edx,(%eax)
   119fd:	eb 47                	jmp    11a46 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   119ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11a02:	8b 00                	mov    (%eax),%eax
   11a04:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11a07:	75 11                	jne    11a1a <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11a09:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0c:	8b 40 04             	mov    0x4(%eax),%eax
   11a0f:	8d 50 01             	lea    0x1(%eax),%edx
   11a12:	8b 45 08             	mov    0x8(%ebp),%eax
   11a15:	89 50 04             	mov    %edx,0x4(%eax)
   11a18:	eb 2c                	jmp    11a46 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11a1a:	83 ec 0c             	sub    $0xc,%esp
   11a1d:	ff 75 f0             	push   -0x10(%ebp)
   11a20:	e8 46 ef ff ff       	call   1096b <task_set_unready>
   11a25:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11a28:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a2b:	8d 50 40             	lea    0x40(%eax),%edx
   11a2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a31:	83 c0 08             	add    $0x8,%eax
   11a34:	83 ec 08             	sub    $0x8,%esp
   11a37:	52                   	push   %edx
   11a38:	50                   	push   %eax
   11a39:	e8 9b 0f 00 00       	call   129d9 <list_insert_last>
   11a3e:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11a41:	e8 a8 ef ff ff       	call   109ee <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11a46:	83 ec 0c             	sub    $0xc,%esp
   11a49:	ff 75 f4             	push   -0xc(%ebp)
   11a4c:	e8 93 fc ff ff       	call   116e4 <idt_leave_protection>
   11a51:	83 c4 10             	add    $0x10,%esp
}
   11a54:	90                   	nop
   11a55:	c9                   	leave  
   11a56:	c3                   	ret    

00011a57 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11a57:	55                   	push   %ebp
   11a58:	89 e5                	mov    %esp,%ebp
   11a5a:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11a5d:	e8 6a fc ff ff       	call   116cc <idt_enter_protection>
   11a62:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11a65:	e8 7a ef ff ff       	call   109e4 <task_current>
   11a6a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11a6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a70:	8b 00                	mov    (%eax),%eax
   11a72:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11a75:	0f 85 83 00 00 00    	jne    11afe <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7e:	8b 40 04             	mov    0x4(%eax),%eax
   11a81:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a84:	8b 45 08             	mov    0x8(%ebp),%eax
   11a87:	89 50 04             	mov    %edx,0x4(%eax)
   11a8a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8d:	8b 40 04             	mov    0x4(%eax),%eax
   11a90:	85 c0                	test   %eax,%eax
   11a92:	75 6a                	jne    11afe <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11a94:	8b 45 08             	mov    0x8(%ebp),%eax
   11a97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11a9d:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa0:	83 c0 08             	add    $0x8,%eax
   11aa3:	83 ec 0c             	sub    $0xc,%esp
   11aa6:	50                   	push   %eax
   11aa7:	e8 98 fe ff ff       	call   11944 <list_is_empty>
   11aac:	83 c4 10             	add    $0x10,%esp
   11aaf:	85 c0                	test   %eax,%eax
   11ab1:	75 4b                	jne    11afe <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab6:	83 c0 08             	add    $0x8,%eax
   11ab9:	83 ec 0c             	sub    $0xc,%esp
   11abc:	50                   	push   %eax
   11abd:	e8 a6 0f 00 00       	call   12a68 <list_remove_first>
   11ac2:	83 c4 10             	add    $0x10,%esp
   11ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11ac8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11acc:	74 08                	je     11ad6 <mutex_unlock+0x7f>
   11ace:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ad1:	83 e8 40             	sub    $0x40,%eax
   11ad4:	eb 05                	jmp    11adb <mutex_unlock+0x84>
   11ad6:	b8 00 00 00 00       	mov    $0x0,%eax
   11adb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11ade:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae1:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   11aeb:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11aee:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11af0:	83 ec 0c             	sub    $0xc,%esp
   11af3:	ff 75 e8             	push   -0x18(%ebp)
   11af6:	e8 25 ee ff ff       	call   10920 <task_set_ready>
   11afb:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11afe:	83 ec 0c             	sub    $0xc,%esp
   11b01:	ff 75 f4             	push   -0xc(%ebp)
   11b04:	e8 db fb ff ff       	call   116e4 <idt_leave_protection>
   11b09:	83 c4 10             	add    $0x10,%esp
}
   11b0c:	90                   	nop
   11b0d:	c9                   	leave  
   11b0e:	c3                   	ret    

00011b0f <list_init>:
static inline void list_init(list_t *list) {
   11b0f:	55                   	push   %ebp
   11b10:	89 e5                	mov    %esp,%ebp
   11b12:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b15:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b19:	75 19                	jne    11b34 <list_init+0x25>
   11b1b:	68 cc 34 01 00       	push   $0x134cc
   11b20:	68 70 35 01 00       	push   $0x13570
   11b25:	6a 31                	push   $0x31
   11b27:	68 e0 34 01 00       	push   $0x134e0
   11b2c:	e8 5d 05 00 00       	call   1208e <pannic>
   11b31:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11b34:	8b 45 08             	mov    0x8(%ebp),%eax
   11b37:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b41:	8b 50 04             	mov    0x4(%eax),%edx
   11b44:	8b 45 08             	mov    0x8(%ebp),%eax
   11b47:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11b49:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11b53:	90                   	nop
   11b54:	c9                   	leave  
   11b55:	c3                   	ret    

00011b56 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11b56:	55                   	push   %ebp
   11b57:	89 e5                	mov    %esp,%ebp
   11b59:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b60:	75 19                	jne    11b7b <list_is_empty+0x25>
   11b62:	68 cc 34 01 00       	push   $0x134cc
   11b67:	68 7c 35 01 00       	push   $0x1357c
   11b6c:	6a 38                	push   $0x38
   11b6e:	68 e0 34 01 00       	push   $0x134e0
   11b73:	e8 16 05 00 00       	call   1208e <pannic>
   11b78:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7e:	8b 40 08             	mov    0x8(%eax),%eax
   11b81:	85 c0                	test   %eax,%eax
   11b83:	0f 94 c0             	sete   %al
   11b86:	0f b6 c0             	movzbl %al,%eax
}
   11b89:	c9                   	leave  
   11b8a:	c3                   	ret    

00011b8b <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11b8b:	55                   	push   %ebp
   11b8c:	89 e5                	mov    %esp,%ebp
   11b8e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11b91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b95:	75 19                	jne    11bb0 <sem_init+0x25>
   11b97:	68 1e 35 01 00       	push   $0x1351e
   11b9c:	68 64 35 01 00       	push   $0x13564
   11ba1:	6a 18                	push   $0x18
   11ba3:	68 30 35 01 00       	push   $0x13530
   11ba8:	e8 e1 04 00 00       	call   1208e <pannic>
   11bad:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bbc:	83 c0 04             	add    $0x4,%eax
   11bbf:	83 ec 0c             	sub    $0xc,%esp
   11bc2:	50                   	push   %eax
   11bc3:	e8 47 ff ff ff       	call   11b0f <list_init>
   11bc8:	83 c4 10             	add    $0x10,%esp
}
   11bcb:	90                   	nop
   11bcc:	c9                   	leave  
   11bcd:	c3                   	ret    

00011bce <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11bce:	55                   	push   %ebp
   11bcf:	89 e5                	mov    %esp,%ebp
   11bd1:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11bd4:	e8 f3 fa ff ff       	call   116cc <idt_enter_protection>
   11bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdf:	8b 00                	mov    (%eax),%eax
   11be1:	85 c0                	test   %eax,%eax
   11be3:	7e 0f                	jle    11bf4 <sem_wait+0x26>
        --sem->count;   
   11be5:	8b 45 08             	mov    0x8(%ebp),%eax
   11be8:	8b 00                	mov    (%eax),%eax
   11bea:	8d 50 ff             	lea    -0x1(%eax),%edx
   11bed:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf0:	89 10                	mov    %edx,(%eax)
   11bf2:	eb 34                	jmp    11c28 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11bf4:	e8 eb ed ff ff       	call   109e4 <task_current>
   11bf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11bfc:	83 ec 0c             	sub    $0xc,%esp
   11bff:	ff 75 f0             	push   -0x10(%ebp)
   11c02:	e8 64 ed ff ff       	call   1096b <task_set_unready>
   11c07:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c0d:	8d 50 40             	lea    0x40(%eax),%edx
   11c10:	8b 45 08             	mov    0x8(%ebp),%eax
   11c13:	83 c0 04             	add    $0x4,%eax
   11c16:	83 ec 08             	sub    $0x8,%esp
   11c19:	52                   	push   %edx
   11c1a:	50                   	push   %eax
   11c1b:	e8 b9 0d 00 00       	call   129d9 <list_insert_last>
   11c20:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11c23:	e8 c6 ed ff ff       	call   109ee <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11c28:	83 ec 0c             	sub    $0xc,%esp
   11c2b:	ff 75 f4             	push   -0xc(%ebp)
   11c2e:	e8 b1 fa ff ff       	call   116e4 <idt_leave_protection>
   11c33:	83 c4 10             	add    $0x10,%esp
}
   11c36:	90                   	nop
   11c37:	c9                   	leave  
   11c38:	c3                   	ret    

00011c39 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11c39:	55                   	push   %ebp
   11c3a:	89 e5                	mov    %esp,%ebp
   11c3c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c3f:	e8 88 fa ff ff       	call   116cc <idt_enter_protection>
   11c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11c47:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4a:	83 c0 04             	add    $0x4,%eax
   11c4d:	83 ec 0c             	sub    $0xc,%esp
   11c50:	50                   	push   %eax
   11c51:	e8 00 ff ff ff       	call   11b56 <list_is_empty>
   11c56:	83 c4 10             	add    $0x10,%esp
   11c59:	85 c0                	test   %eax,%eax
   11c5b:	75 3b                	jne    11c98 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11c5d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c60:	83 c0 04             	add    $0x4,%eax
   11c63:	83 ec 0c             	sub    $0xc,%esp
   11c66:	50                   	push   %eax
   11c67:	e8 fc 0d 00 00       	call   12a68 <list_remove_first>
   11c6c:	83 c4 10             	add    $0x10,%esp
   11c6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11c72:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c76:	74 08                	je     11c80 <sem_notify+0x47>
   11c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c7b:	83 e8 40             	sub    $0x40,%eax
   11c7e:	eb 05                	jmp    11c85 <sem_notify+0x4c>
   11c80:	b8 00 00 00 00       	mov    $0x0,%eax
   11c85:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11c88:	83 ec 0c             	sub    $0xc,%esp
   11c8b:	ff 75 ec             	push   -0x14(%ebp)
   11c8e:	e8 8d ec ff ff       	call   10920 <task_set_ready>
   11c93:	83 c4 10             	add    $0x10,%esp
   11c96:	eb 0d                	jmp    11ca5 <sem_notify+0x6c>
    } else {
        sem->count++;
   11c98:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9b:	8b 00                	mov    (%eax),%eax
   11c9d:	8d 50 01             	lea    0x1(%eax),%edx
   11ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca3:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11ca5:	83 ec 0c             	sub    $0xc,%esp
   11ca8:	ff 75 f4             	push   -0xc(%ebp)
   11cab:	e8 34 fa ff ff       	call   116e4 <idt_leave_protection>
   11cb0:	83 c4 10             	add    $0x10,%esp

}
   11cb3:	90                   	nop
   11cb4:	c9                   	leave  
   11cb5:	c3                   	ret    

00011cb6 <sem_count>:

int sem_count(sem_t *sem) {
   11cb6:	55                   	push   %ebp
   11cb7:	89 e5                	mov    %esp,%ebp
   11cb9:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11cbc:	e8 0b fa ff ff       	call   116cc <idt_enter_protection>
   11cc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc7:	8b 00                	mov    (%eax),%eax
   11cc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11ccc:	83 ec 0c             	sub    $0xc,%esp
   11ccf:	ff 75 f4             	push   -0xc(%ebp)
   11cd2:	e8 0d fa ff ff       	call   116e4 <idt_leave_protection>
   11cd7:	83 c4 10             	add    $0x10,%esp

    return count;
   11cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cdd:	c9                   	leave  
   11cde:	c3                   	ret    

00011cdf <list_init>:
static inline void list_init(list_t *list) {
   11cdf:	55                   	push   %ebp
   11ce0:	89 e5                	mov    %esp,%ebp
   11ce2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ce5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ce9:	75 19                	jne    11d04 <list_init+0x25>
   11ceb:	68 8c 35 01 00       	push   $0x1358c
   11cf0:	68 90 36 01 00       	push   $0x13690
   11cf5:	6a 31                	push   $0x31
   11cf7:	68 a0 35 01 00       	push   $0x135a0
   11cfc:	e8 8d 03 00 00       	call   1208e <pannic>
   11d01:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11d04:	8b 45 08             	mov    0x8(%ebp),%eax
   11d07:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d0e:	8b 45 08             	mov    0x8(%ebp),%eax
   11d11:	8b 50 04             	mov    0x4(%eax),%edx
   11d14:	8b 45 08             	mov    0x8(%ebp),%eax
   11d17:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11d19:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11d23:	90                   	nop
   11d24:	c9                   	leave  
   11d25:	c3                   	ret    

00011d26 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11d26:	55                   	push   %ebp
   11d27:	89 e5                	mov    %esp,%ebp
   11d29:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d2c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d30:	75 19                	jne    11d4b <list_get_size+0x25>
   11d32:	68 8c 35 01 00       	push   $0x1358c
   11d37:	68 9c 36 01 00       	push   $0x1369c
   11d3c:	6a 3e                	push   $0x3e
   11d3e:	68 a0 35 01 00       	push   $0x135a0
   11d43:	e8 46 03 00 00       	call   1208e <pannic>
   11d48:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11d51:	c9                   	leave  
   11d52:	c3                   	ret    

00011d53 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11d53:	55                   	push   %ebp
   11d54:	89 e5                	mov    %esp,%ebp
   11d56:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d5d:	75 19                	jne    11d78 <list_get_first+0x25>
   11d5f:	68 8c 35 01 00       	push   $0x1358c
   11d64:	68 bc 36 01 00       	push   $0x136bc
   11d69:	6a 44                	push   $0x44
   11d6b:	68 a0 35 01 00       	push   $0x135a0
   11d70:	e8 19 03 00 00       	call   1208e <pannic>
   11d75:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11d78:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7b:	8b 00                	mov    (%eax),%eax
}
   11d7d:	c9                   	leave  
   11d7e:	c3                   	ret    

00011d7f <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11d7f:	55                   	push   %ebp
   11d80:	89 e5                	mov    %esp,%ebp
   11d82:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d85:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d89:	75 19                	jne    11da4 <list_get_last+0x25>
   11d8b:	68 8c 35 01 00       	push   $0x1358c
   11d90:	68 ac 36 01 00       	push   $0x136ac
   11d95:	6a 4a                	push   $0x4a
   11d97:	68 a0 35 01 00       	push   $0x135a0
   11d9c:	e8 ed 02 00 00       	call   1208e <pannic>
   11da1:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11da4:	8b 45 08             	mov    0x8(%ebp),%eax
   11da7:	8b 40 04             	mov    0x4(%eax),%eax
}
   11daa:	c9                   	leave  
   11dab:	c3                   	ret    

00011dac <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11dac:	55                   	push   %ebp
   11dad:	89 e5                	mov    %esp,%ebp
   11daf:	56                   	push   %esi
   11db0:	53                   	push   %ebx
   11db1:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11db4:	83 ec 0c             	sub    $0xc,%esp
   11db7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11dba:	50                   	push   %eax
   11dbb:	e8 1f ff ff ff       	call   11cdf <list_init>
   11dc0:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11dc3:	83 ec 0c             	sub    $0xc,%esp
   11dc6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11dc9:	50                   	push   %eax
   11dca:	e8 57 ff ff ff       	call   11d26 <list_get_size>
   11dcf:	83 c4 10             	add    $0x10,%esp
   11dd2:	89 c6                	mov    %eax,%esi
   11dd4:	83 ec 0c             	sub    $0xc,%esp
   11dd7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11dda:	50                   	push   %eax
   11ddb:	e8 9f ff ff ff       	call   11d7f <list_get_last>
   11de0:	83 c4 10             	add    $0x10,%esp
   11de3:	89 c3                	mov    %eax,%ebx
   11de5:	83 ec 0c             	sub    $0xc,%esp
   11de8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11deb:	50                   	push   %eax
   11dec:	e8 62 ff ff ff       	call   11d53 <list_get_first>
   11df1:	83 c4 10             	add    $0x10,%esp
   11df4:	56                   	push   %esi
   11df5:	53                   	push   %ebx
   11df6:	50                   	push   %eax
   11df7:	68 e0 35 01 00       	push   $0x135e0
   11dfc:	e8 5c 0f 00 00       	call   12d5d <log_printf>
   11e01:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11e04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e0b:	eb 3f                	jmp    11e4c <list_test+0xa0>
        list_node_t *node = nodes + i;
   11e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11e17:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11e1a:	01 d0                	add    %edx,%eax
   11e1c:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11e1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11e22:	83 ec 04             	sub    $0x4,%esp
   11e25:	50                   	push   %eax
   11e26:	ff 75 f4             	push   -0xc(%ebp)
   11e29:	68 08 36 01 00       	push   $0x13608
   11e2e:	e8 2a 0f 00 00       	call   12d5d <log_printf>
   11e33:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11e36:	83 ec 08             	sub    $0x8,%esp
   11e39:	ff 75 d0             	push   -0x30(%ebp)
   11e3c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e3f:	50                   	push   %eax
   11e40:	e8 09 0b 00 00       	call   1294e <list_insert_first>
   11e45:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11e48:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11e4c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11e50:	7e bb                	jle    11e0d <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11e52:	83 ec 0c             	sub    $0xc,%esp
   11e55:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e58:	50                   	push   %eax
   11e59:	e8 c8 fe ff ff       	call   11d26 <list_get_size>
   11e5e:	83 c4 10             	add    $0x10,%esp
   11e61:	89 c6                	mov    %eax,%esi
   11e63:	83 ec 0c             	sub    $0xc,%esp
   11e66:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e69:	50                   	push   %eax
   11e6a:	e8 10 ff ff ff       	call   11d7f <list_get_last>
   11e6f:	83 c4 10             	add    $0x10,%esp
   11e72:	89 c3                	mov    %eax,%ebx
   11e74:	83 ec 0c             	sub    $0xc,%esp
   11e77:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e7a:	50                   	push   %eax
   11e7b:	e8 d3 fe ff ff       	call   11d53 <list_get_first>
   11e80:	83 c4 10             	add    $0x10,%esp
   11e83:	56                   	push   %esi
   11e84:	53                   	push   %ebx
   11e85:	50                   	push   %eax
   11e86:	68 e0 35 01 00       	push   $0x135e0
   11e8b:	e8 cd 0e 00 00       	call   12d5d <log_printf>
   11e90:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11e93:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e9a:	eb 2d                	jmp    11ec9 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11e9c:	83 ec 0c             	sub    $0xc,%esp
   11e9f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ea2:	50                   	push   %eax
   11ea3:	e8 c0 0b 00 00       	call   12a68 <list_remove_first>
   11ea8:	83 c4 10             	add    $0x10,%esp
   11eab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11eae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11eb1:	83 ec 04             	sub    $0x4,%esp
   11eb4:	50                   	push   %eax
   11eb5:	ff 75 f0             	push   -0x10(%ebp)
   11eb8:	68 27 36 01 00       	push   $0x13627
   11ebd:	e8 9b 0e 00 00       	call   12d5d <log_printf>
   11ec2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11ec5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11ec9:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11ecd:	7e cd                	jle    11e9c <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11ecf:	83 ec 0c             	sub    $0xc,%esp
   11ed2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ed5:	50                   	push   %eax
   11ed6:	e8 4b fe ff ff       	call   11d26 <list_get_size>
   11edb:	83 c4 10             	add    $0x10,%esp
   11ede:	89 c6                	mov    %eax,%esi
   11ee0:	83 ec 0c             	sub    $0xc,%esp
   11ee3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ee6:	50                   	push   %eax
   11ee7:	e8 93 fe ff ff       	call   11d7f <list_get_last>
   11eec:	83 c4 10             	add    $0x10,%esp
   11eef:	89 c3                	mov    %eax,%ebx
   11ef1:	83 ec 0c             	sub    $0xc,%esp
   11ef4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ef7:	50                   	push   %eax
   11ef8:	e8 56 fe ff ff       	call   11d53 <list_get_first>
   11efd:	83 c4 10             	add    $0x10,%esp
   11f00:	56                   	push   %esi
   11f01:	53                   	push   %ebx
   11f02:	50                   	push   %eax
   11f03:	68 e0 35 01 00       	push   $0x135e0
   11f08:	e8 50 0e 00 00       	call   12d5d <log_printf>
   11f0d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11f10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11f17:	eb 3f                	jmp    11f58 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f1c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11f23:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11f26:	01 d0                	add    %edx,%eax
   11f28:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11f2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11f2e:	83 ec 04             	sub    $0x4,%esp
   11f31:	50                   	push   %eax
   11f32:	ff 75 ec             	push   -0x14(%ebp)
   11f35:	68 3e 36 01 00       	push   $0x1363e
   11f3a:	e8 1e 0e 00 00       	call   12d5d <log_printf>
   11f3f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11f42:	83 ec 08             	sub    $0x8,%esp
   11f45:	ff 75 d8             	push   -0x28(%ebp)
   11f48:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f4b:	50                   	push   %eax
   11f4c:	e8 88 0a 00 00       	call   129d9 <list_insert_last>
   11f51:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11f54:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11f58:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11f5c:	7e bb                	jle    11f19 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11f5e:	83 ec 0c             	sub    $0xc,%esp
   11f61:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f64:	50                   	push   %eax
   11f65:	e8 bc fd ff ff       	call   11d26 <list_get_size>
   11f6a:	83 c4 10             	add    $0x10,%esp
   11f6d:	89 c6                	mov    %eax,%esi
   11f6f:	83 ec 0c             	sub    $0xc,%esp
   11f72:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f75:	50                   	push   %eax
   11f76:	e8 04 fe ff ff       	call   11d7f <list_get_last>
   11f7b:	83 c4 10             	add    $0x10,%esp
   11f7e:	89 c3                	mov    %eax,%ebx
   11f80:	83 ec 0c             	sub    $0xc,%esp
   11f83:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f86:	50                   	push   %eax
   11f87:	e8 c7 fd ff ff       	call   11d53 <list_get_first>
   11f8c:	83 c4 10             	add    $0x10,%esp
   11f8f:	56                   	push   %esi
   11f90:	53                   	push   %ebx
   11f91:	50                   	push   %eax
   11f92:	68 e0 35 01 00       	push   $0x135e0
   11f97:	e8 c1 0d 00 00       	call   12d5d <log_printf>
   11f9c:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11f9f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11fa6:	eb 2d                	jmp    11fd5 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   11fa8:	83 ec 0c             	sub    $0xc,%esp
   11fab:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fae:	50                   	push   %eax
   11faf:	e8 65 0b 00 00       	call   12b19 <list_remove_last>
   11fb4:	83 c4 10             	add    $0x10,%esp
   11fb7:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   11fba:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11fbd:	83 ec 04             	sub    $0x4,%esp
   11fc0:	50                   	push   %eax
   11fc1:	ff 75 e8             	push   -0x18(%ebp)
   11fc4:	68 5c 36 01 00       	push   $0x1365c
   11fc9:	e8 8f 0d 00 00       	call   12d5d <log_printf>
   11fce:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11fd1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11fd5:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11fd9:	7e cd                	jle    11fa8 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11fdb:	83 ec 0c             	sub    $0xc,%esp
   11fde:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fe1:	50                   	push   %eax
   11fe2:	e8 3f fd ff ff       	call   11d26 <list_get_size>
   11fe7:	83 c4 10             	add    $0x10,%esp
   11fea:	89 c6                	mov    %eax,%esi
   11fec:	83 ec 0c             	sub    $0xc,%esp
   11fef:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ff2:	50                   	push   %eax
   11ff3:	e8 87 fd ff ff       	call   11d7f <list_get_last>
   11ff8:	83 c4 10             	add    $0x10,%esp
   11ffb:	89 c3                	mov    %eax,%ebx
   11ffd:	83 ec 0c             	sub    $0xc,%esp
   12000:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12003:	50                   	push   %eax
   12004:	e8 4a fd ff ff       	call   11d53 <list_get_first>
   12009:	83 c4 10             	add    $0x10,%esp
   1200c:	56                   	push   %esi
   1200d:	53                   	push   %ebx
   1200e:	50                   	push   %eax
   1200f:	68 e0 35 01 00       	push   $0x135e0
   12014:	e8 44 0d 00 00       	call   12d5d <log_printf>
   12019:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   1201c:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12023:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   1202a:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12031:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12038:	8d 45 90             	lea    -0x70(%ebp),%eax
   1203b:	83 c0 04             	add    $0x4,%eax
   1203e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12041:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12045:	74 08                	je     1204f <list_test+0x2a3>
   12047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1204a:	83 e8 04             	sub    $0x4,%eax
   1204d:	eb 05                	jmp    12054 <list_test+0x2a8>
   1204f:	b8 00 00 00 00       	mov    $0x0,%eax
   12054:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12057:	8d 45 90             	lea    -0x70(%ebp),%eax
   1205a:	83 ec 08             	sub    $0x8,%esp
   1205d:	50                   	push   %eax
   1205e:	68 72 36 01 00       	push   $0x13672
   12063:	e8 f5 0c 00 00       	call   12d5d <log_printf>
   12068:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   1206b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1206e:	83 ec 08             	sub    $0x8,%esp
   12071:	50                   	push   %eax
   12072:	68 80 36 01 00       	push   $0x13680
   12077:	e8 e1 0c 00 00       	call   12d5d <log_printf>
   1207c:	83 c4 10             	add    $0x10,%esp

 }
   1207f:	90                   	nop
   12080:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12083:	5b                   	pop    %ebx
   12084:	5e                   	pop    %esi
   12085:	5d                   	pop    %ebp
   12086:	c3                   	ret    

00012087 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12087:	55                   	push   %ebp
   12088:	89 e5                	mov    %esp,%ebp
   1208a:	f4                   	hlt    
   1208b:	90                   	nop
   1208c:	5d                   	pop    %ebp
   1208d:	c3                   	ret    

0001208e <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1208e:	55                   	push   %ebp
   1208f:	89 e5                	mov    %esp,%ebp
   12091:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12094:	83 ec 08             	sub    $0x8,%esp
   12097:	ff 75 14             	push   0x14(%ebp)
   1209a:	68 cb 36 01 00       	push   $0x136cb
   1209f:	e8 b9 0c 00 00       	call   12d5d <log_printf>
   120a4:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   120a7:	ff 75 10             	push   0x10(%ebp)
   120aa:	ff 75 0c             	push   0xc(%ebp)
   120ad:	ff 75 08             	push   0x8(%ebp)
   120b0:	68 dc 36 01 00       	push   $0x136dc
   120b5:	e8 a3 0c 00 00       	call   12d5d <log_printf>
   120ba:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   120bd:	e8 c5 ff ff ff       	call   12087 <hlt>
   120c2:	eb f9                	jmp    120bd <pannic+0x2f>

000120c4 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
static int bitmap_byte_count(int bit_count) {
   120c4:	55                   	push   %ebp
   120c5:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   120c7:	8b 45 08             	mov    0x8(%ebp),%eax
   120ca:	83 c0 07             	add    $0x7,%eax
   120cd:	8d 50 07             	lea    0x7(%eax),%edx
   120d0:	85 c0                	test   %eax,%eax
   120d2:	0f 48 c2             	cmovs  %edx,%eax
   120d5:	c1 f8 03             	sar    $0x3,%eax
}
   120d8:	5d                   	pop    %ebp
   120d9:	c3                   	ret    

000120da <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   120da:	55                   	push   %ebp
   120db:	89 e5                	mov    %esp,%ebp
   120dd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   120e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120e4:	75 19                	jne    120ff <bitmap_init+0x25>
   120e6:	68 f8 36 01 00       	push   $0x136f8
   120eb:	68 8c 37 01 00       	push   $0x1378c
   120f0:	6a 24                	push   $0x24
   120f2:	68 10 37 01 00       	push   $0x13710
   120f7:	e8 92 ff ff ff       	call   1208e <pannic>
   120fc:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   120ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12103:	75 19                	jne    1211e <bitmap_init+0x44>
   12105:	68 48 37 01 00       	push   $0x13748
   1210a:	68 8c 37 01 00       	push   $0x1378c
   1210f:	6a 25                	push   $0x25
   12111:	68 10 37 01 00       	push   $0x13710
   12116:	e8 73 ff ff ff       	call   1208e <pannic>
   1211b:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   1211e:	8b 45 08             	mov    0x8(%ebp),%eax
   12121:	8b 55 10             	mov    0x10(%ebp),%edx
   12124:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12126:	8b 45 08             	mov    0x8(%ebp),%eax
   12129:	8b 55 0c             	mov    0xc(%ebp),%edx
   1212c:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1212f:	8b 45 08             	mov    0x8(%ebp),%eax
   12132:	8b 00                	mov    (%eax),%eax
   12134:	83 ec 0c             	sub    $0xc,%esp
   12137:	50                   	push   %eax
   12138:	e8 87 ff ff ff       	call   120c4 <bitmap_byte_count>
   1213d:	83 c4 10             	add    $0x10,%esp
   12140:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12143:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12147:	74 07                	je     12150 <bitmap_init+0x76>
   12149:	ba ff 00 00 00       	mov    $0xff,%edx
   1214e:	eb 05                	jmp    12155 <bitmap_init+0x7b>
   12150:	ba 00 00 00 00       	mov    $0x0,%edx
   12155:	8b 45 08             	mov    0x8(%ebp),%eax
   12158:	8b 40 04             	mov    0x4(%eax),%eax
   1215b:	83 ec 04             	sub    $0x4,%esp
   1215e:	ff 75 f4             	push   -0xc(%ebp)
   12161:	52                   	push   %edx
   12162:	50                   	push   %eax
   12163:	e8 28 04 00 00       	call   12590 <kernel_memset>
   12168:	83 c4 10             	add    $0x10,%esp

}
   1216b:	90                   	nop
   1216c:	c9                   	leave  
   1216d:	c3                   	ret    

0001216e <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1216e:	55                   	push   %ebp
   1216f:	89 e5                	mov    %esp,%ebp
   12171:	53                   	push   %ebx
   12172:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12175:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12179:	75 19                	jne    12194 <bitmap_get_bit+0x26>
   1217b:	68 f8 36 01 00       	push   $0x136f8
   12180:	68 98 37 01 00       	push   $0x13798
   12185:	6a 39                	push   $0x39
   12187:	68 10 37 01 00       	push   $0x13710
   1218c:	e8 fd fe ff ff       	call   1208e <pannic>
   12191:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12194:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12198:	79 19                	jns    121b3 <bitmap_get_bit+0x45>
   1219a:	68 5c 37 01 00       	push   $0x1375c
   1219f:	68 98 37 01 00       	push   $0x13798
   121a4:	6a 3a                	push   $0x3a
   121a6:	68 10 37 01 00       	push   $0x13710
   121ab:	e8 de fe ff ff       	call   1208e <pannic>
   121b0:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   121b3:	8b 45 08             	mov    0x8(%ebp),%eax
   121b6:	8b 48 04             	mov    0x4(%eax),%ecx
   121b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121bc:	8d 50 07             	lea    0x7(%eax),%edx
   121bf:	85 c0                	test   %eax,%eax
   121c1:	0f 48 c2             	cmovs  %edx,%eax
   121c4:	c1 f8 03             	sar    $0x3,%eax
   121c7:	01 c8                	add    %ecx,%eax
   121c9:	0f b6 00             	movzbl (%eax),%eax
   121cc:	89 c3                	mov    %eax,%ebx
   121ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d1:	83 e0 07             	and    $0x7,%eax
   121d4:	ba 01 00 00 00       	mov    $0x1,%edx
   121d9:	89 c1                	mov    %eax,%ecx
   121db:	d3 e2                	shl    %cl,%edx
   121dd:	89 d0                	mov    %edx,%eax
   121df:	21 d8                	and    %ebx,%eax
}
   121e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   121e4:	c9                   	leave  
   121e5:	c3                   	ret    

000121e6 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   121e6:	55                   	push   %ebp
   121e7:	89 e5                	mov    %esp,%ebp
   121e9:	56                   	push   %esi
   121ea:	53                   	push   %ebx
   121eb:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   121ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121f2:	75 19                	jne    1220d <bitmap_set_bit+0x27>
   121f4:	68 f8 36 01 00       	push   $0x136f8
   121f9:	68 a8 37 01 00       	push   $0x137a8
   121fe:	6a 48                	push   $0x48
   12200:	68 10 37 01 00       	push   $0x13710
   12205:	e8 84 fe ff ff       	call   1208e <pannic>
   1220a:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   1220d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12211:	78 06                	js     12219 <bitmap_set_bit+0x33>
   12213:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12217:	79 19                	jns    12232 <bitmap_set_bit+0x4c>
   12219:	68 67 37 01 00       	push   $0x13767
   1221e:	68 a8 37 01 00       	push   $0x137a8
   12223:	6a 49                	push   $0x49
   12225:	68 10 37 01 00       	push   $0x13710
   1222a:	e8 5f fe ff ff       	call   1208e <pannic>
   1222f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12232:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12239:	e9 92 00 00 00       	jmp    122d0 <bitmap_set_bit+0xea>
        if (bit) {
   1223e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12242:	74 42                	je     12286 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12244:	8b 45 08             	mov    0x8(%ebp),%eax
   12247:	8b 48 04             	mov    0x4(%eax),%ecx
   1224a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1224d:	8d 50 07             	lea    0x7(%eax),%edx
   12250:	85 c0                	test   %eax,%eax
   12252:	0f 48 c2             	cmovs  %edx,%eax
   12255:	c1 f8 03             	sar    $0x3,%eax
   12258:	89 c2                	mov    %eax,%edx
   1225a:	89 d0                	mov    %edx,%eax
   1225c:	01 c8                	add    %ecx,%eax
   1225e:	0f b6 00             	movzbl (%eax),%eax
   12261:	89 c6                	mov    %eax,%esi
   12263:	8b 45 0c             	mov    0xc(%ebp),%eax
   12266:	83 e0 07             	and    $0x7,%eax
   12269:	bb 01 00 00 00       	mov    $0x1,%ebx
   1226e:	89 c1                	mov    %eax,%ecx
   12270:	d3 e3                	shl    %cl,%ebx
   12272:	89 d8                	mov    %ebx,%eax
   12274:	89 f1                	mov    %esi,%ecx
   12276:	09 c1                	or     %eax,%ecx
   12278:	8b 45 08             	mov    0x8(%ebp),%eax
   1227b:	8b 40 04             	mov    0x4(%eax),%eax
   1227e:	01 d0                	add    %edx,%eax
   12280:	89 ca                	mov    %ecx,%edx
   12282:	88 10                	mov    %dl,(%eax)
   12284:	eb 42                	jmp    122c8 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12286:	8b 45 08             	mov    0x8(%ebp),%eax
   12289:	8b 48 04             	mov    0x4(%eax),%ecx
   1228c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1228f:	8d 50 07             	lea    0x7(%eax),%edx
   12292:	85 c0                	test   %eax,%eax
   12294:	0f 48 c2             	cmovs  %edx,%eax
   12297:	c1 f8 03             	sar    $0x3,%eax
   1229a:	89 c2                	mov    %eax,%edx
   1229c:	89 d0                	mov    %edx,%eax
   1229e:	01 c8                	add    %ecx,%eax
   122a0:	0f b6 00             	movzbl (%eax),%eax
   122a3:	89 c6                	mov    %eax,%esi
   122a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a8:	83 e0 07             	and    $0x7,%eax
   122ab:	bb 01 00 00 00       	mov    $0x1,%ebx
   122b0:	89 c1                	mov    %eax,%ecx
   122b2:	d3 e3                	shl    %cl,%ebx
   122b4:	89 d8                	mov    %ebx,%eax
   122b6:	f7 d0                	not    %eax
   122b8:	89 f1                	mov    %esi,%ecx
   122ba:	21 c1                	and    %eax,%ecx
   122bc:	8b 45 08             	mov    0x8(%ebp),%eax
   122bf:	8b 40 04             	mov    0x4(%eax),%eax
   122c2:	01 d0                	add    %edx,%eax
   122c4:	89 ca                	mov    %ecx,%edx
   122c6:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   122c8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122cc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   122d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122d3:	3b 45 10             	cmp    0x10(%ebp),%eax
   122d6:	7d 0e                	jge    122e6 <bitmap_set_bit+0x100>
   122d8:	8b 45 08             	mov    0x8(%ebp),%eax
   122db:	8b 00                	mov    (%eax),%eax
   122dd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   122e0:	0f 8c 58 ff ff ff    	jl     1223e <bitmap_set_bit+0x58>
        }
    }
}
   122e6:	90                   	nop
   122e7:	8d 65 f8             	lea    -0x8(%ebp),%esp
   122ea:	5b                   	pop    %ebx
   122eb:	5e                   	pop    %esi
   122ec:	5d                   	pop    %ebp
   122ed:	c3                   	ret    

000122ee <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   122ee:	55                   	push   %ebp
   122ef:	89 e5                	mov    %esp,%ebp
   122f1:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   122f4:	83 ec 08             	sub    $0x8,%esp
   122f7:	ff 75 0c             	push   0xc(%ebp)
   122fa:	ff 75 08             	push   0x8(%ebp)
   122fd:	e8 6c fe ff ff       	call   1216e <bitmap_get_bit>
   12302:	83 c4 10             	add    $0x10,%esp
   12305:	84 c0                	test   %al,%al
   12307:	0f 95 c0             	setne  %al
   1230a:	0f b6 c0             	movzbl %al,%eax
}
   1230d:	c9                   	leave  
   1230e:	c3                   	ret    

0001230f <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   1230f:	55                   	push   %ebp
   12310:	89 e5                	mov    %esp,%ebp
   12312:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12315:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12319:	75 19                	jne    12334 <bitmap_alloc_nbits+0x25>
   1231b:	68 f8 36 01 00       	push   $0x136f8
   12320:	68 b8 37 01 00       	push   $0x137b8
   12325:	6a 68                	push   $0x68
   12327:	68 10 37 01 00       	push   $0x13710
   1232c:	e8 5d fd ff ff       	call   1208e <pannic>
   12331:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12334:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12338:	79 19                	jns    12353 <bitmap_alloc_nbits+0x44>
   1233a:	68 80 37 01 00       	push   $0x13780
   1233f:	68 b8 37 01 00       	push   $0x137b8
   12344:	6a 69                	push   $0x69
   12346:	68 10 37 01 00       	push   $0x13710
   1234b:	e8 3e fd ff ff       	call   1208e <pannic>
   12350:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   1235a:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12361:	e9 8f 00 00 00       	jmp    123f5 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12366:	83 ec 08             	sub    $0x8,%esp
   12369:	ff 75 f4             	push   -0xc(%ebp)
   1236c:	ff 75 08             	push   0x8(%ebp)
   1236f:	e8 fa fd ff ff       	call   1216e <bitmap_get_bit>
   12374:	83 c4 10             	add    $0x10,%esp
   12377:	0f b6 c0             	movzbl %al,%eax
   1237a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1237d:	74 06                	je     12385 <bitmap_alloc_nbits+0x76>
            search_index++;
   1237f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12383:	eb 70                	jmp    123f5 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12385:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12388:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   1238b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12392:	eb 2d                	jmp    123c1 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12394:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12397:	8d 50 01             	lea    0x1(%eax),%edx
   1239a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1239d:	83 ec 08             	sub    $0x8,%esp
   123a0:	50                   	push   %eax
   123a1:	ff 75 08             	push   0x8(%ebp)
   123a4:	e8 c5 fd ff ff       	call   1216e <bitmap_get_bit>
   123a9:	83 c4 10             	add    $0x10,%esp
   123ac:	0f b6 c0             	movzbl %al,%eax
   123af:	39 45 0c             	cmp    %eax,0xc(%ebp)
   123b2:	74 09                	je     123bd <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   123b4:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   123bb:	eb 16                	jmp    123d3 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   123bd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   123c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   123c4:	3b 45 10             	cmp    0x10(%ebp),%eax
   123c7:	7d 0a                	jge    123d3 <bitmap_alloc_nbits+0xc4>
   123c9:	8b 45 08             	mov    0x8(%ebp),%eax
   123cc:	8b 00                	mov    (%eax),%eax
   123ce:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   123d1:	7c c1                	jl     12394 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   123d3:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   123d7:	74 1c                	je     123f5 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   123d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   123dc:	f7 d0                	not    %eax
   123de:	50                   	push   %eax
   123df:	ff 75 10             	push   0x10(%ebp)
   123e2:	ff 75 f0             	push   -0x10(%ebp)
   123e5:	ff 75 08             	push   0x8(%ebp)
   123e8:	e8 f9 fd ff ff       	call   121e6 <bitmap_set_bit>
   123ed:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   123f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123f3:	eb 13                	jmp    12408 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   123f5:	8b 45 08             	mov    0x8(%ebp),%eax
   123f8:	8b 00                	mov    (%eax),%eax
   123fa:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   123fd:	0f 8c 63 ff ff ff    	jl     12366 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12403:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12408:	c9                   	leave  
   12409:	c3                   	ret    

0001240a <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1240a:	55                   	push   %ebp
   1240b:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   1240d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12411:	74 3b                	je     1244e <kernel_strcpy+0x44>
   12413:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12417:	74 35                	je     1244e <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12419:	eb 17                	jmp    12432 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   1241b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1241e:	8d 42 01             	lea    0x1(%edx),%eax
   12421:	89 45 0c             	mov    %eax,0xc(%ebp)
   12424:	8b 45 08             	mov    0x8(%ebp),%eax
   12427:	8d 48 01             	lea    0x1(%eax),%ecx
   1242a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1242d:	0f b6 12             	movzbl (%edx),%edx
   12430:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12432:	8b 45 08             	mov    0x8(%ebp),%eax
   12435:	0f b6 00             	movzbl (%eax),%eax
   12438:	84 c0                	test   %al,%al
   1243a:	74 0a                	je     12446 <kernel_strcpy+0x3c>
   1243c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1243f:	0f b6 00             	movzbl (%eax),%eax
   12442:	84 c0                	test   %al,%al
   12444:	75 d5                	jne    1241b <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12446:	8b 45 08             	mov    0x8(%ebp),%eax
   12449:	c6 00 00             	movb   $0x0,(%eax)
   1244c:	eb 01                	jmp    1244f <kernel_strcpy+0x45>
    if (!dest || !src) return;
   1244e:	90                   	nop
    
}
   1244f:	5d                   	pop    %ebp
   12450:	c3                   	ret    

00012451 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12451:	55                   	push   %ebp
   12452:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12454:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12458:	74 45                	je     1249f <kernel_strncpy+0x4e>
   1245a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1245e:	74 3f                	je     1249f <kernel_strncpy+0x4e>
   12460:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12464:	74 39                	je     1249f <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   12466:	eb 17                	jmp    1247f <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12468:	8b 55 0c             	mov    0xc(%ebp),%edx
   1246b:	8d 42 01             	lea    0x1(%edx),%eax
   1246e:	89 45 0c             	mov    %eax,0xc(%ebp)
   12471:	8b 45 08             	mov    0x8(%ebp),%eax
   12474:	8d 48 01             	lea    0x1(%eax),%ecx
   12477:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1247a:	0f b6 12             	movzbl (%edx),%edx
   1247d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   1247f:	8b 45 10             	mov    0x10(%ebp),%eax
   12482:	8d 50 ff             	lea    -0x1(%eax),%edx
   12485:	89 55 10             	mov    %edx,0x10(%ebp)
   12488:	83 f8 01             	cmp    $0x1,%eax
   1248b:	7e 0a                	jle    12497 <kernel_strncpy+0x46>
   1248d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12490:	0f b6 00             	movzbl (%eax),%eax
   12493:	84 c0                	test   %al,%al
   12495:	75 d1                	jne    12468 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12497:	8b 45 08             	mov    0x8(%ebp),%eax
   1249a:	c6 00 00             	movb   $0x0,(%eax)
   1249d:	eb 01                	jmp    124a0 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   1249f:	90                   	nop
}
   124a0:	5d                   	pop    %ebp
   124a1:	c3                   	ret    

000124a2 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   124a2:	55                   	push   %ebp
   124a3:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   124a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124a9:	74 06                	je     124b1 <kernel_strncmp+0xf>
   124ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124af:	75 0f                	jne    124c0 <kernel_strncmp+0x1e>
   124b1:	b8 00 00 00 00       	mov    $0x0,%eax
   124b6:	eb 52                	jmp    1250a <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   124b8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   124bc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   124c0:	8b 45 08             	mov    0x8(%ebp),%eax
   124c3:	0f b6 00             	movzbl (%eax),%eax
   124c6:	84 c0                	test   %al,%al
   124c8:	74 24                	je     124ee <kernel_strncmp+0x4c>
   124ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   124cd:	0f b6 00             	movzbl (%eax),%eax
   124d0:	84 c0                	test   %al,%al
   124d2:	74 1a                	je     124ee <kernel_strncmp+0x4c>
   124d4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   124d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124dc:	74 10                	je     124ee <kernel_strncmp+0x4c>
   124de:	8b 45 08             	mov    0x8(%ebp),%eax
   124e1:	0f b6 10             	movzbl (%eax),%edx
   124e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e7:	0f b6 00             	movzbl (%eax),%eax
   124ea:	38 c2                	cmp    %al,%dl
   124ec:	74 ca                	je     124b8 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   124ee:	8b 45 08             	mov    0x8(%ebp),%eax
   124f1:	0f b6 10             	movzbl (%eax),%edx
   124f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124f7:	0f b6 00             	movzbl (%eax),%eax
   124fa:	38 c2                	cmp    %al,%dl
   124fc:	7e 07                	jle    12505 <kernel_strncmp+0x63>
   124fe:	b8 01 00 00 00       	mov    $0x1,%eax
   12503:	eb 05                	jmp    1250a <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12505:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   1250a:	5d                   	pop    %ebp
   1250b:	c3                   	ret    

0001250c <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   1250c:	55                   	push   %ebp
   1250d:	89 e5                	mov    %esp,%ebp
   1250f:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   12512:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12516:	75 07                	jne    1251f <kernel_strlen+0x13>
   12518:	b8 00 00 00 00       	mov    $0x0,%eax
   1251d:	eb 20                	jmp    1253f <kernel_strlen+0x33>

    int len = 0;
   1251f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12526:	eb 04                	jmp    1252c <kernel_strlen+0x20>
   12528:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1252c:	8b 45 08             	mov    0x8(%ebp),%eax
   1252f:	8d 50 01             	lea    0x1(%eax),%edx
   12532:	89 55 08             	mov    %edx,0x8(%ebp)
   12535:	0f b6 00             	movzbl (%eax),%eax
   12538:	84 c0                	test   %al,%al
   1253a:	75 ec                	jne    12528 <kernel_strlen+0x1c>

    return len;
   1253c:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   1253f:	c9                   	leave  
   12540:	c3                   	ret    

00012541 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12541:	55                   	push   %ebp
   12542:	89 e5                	mov    %esp,%ebp
   12544:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12547:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1254b:	74 40                	je     1258d <kernel_memcpy+0x4c>
   1254d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12551:	74 3a                	je     1258d <kernel_memcpy+0x4c>
   12553:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12557:	74 34                	je     1258d <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12559:	8b 45 08             	mov    0x8(%ebp),%eax
   1255c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   1255f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12562:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12565:	eb 17                	jmp    1257e <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12567:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1256a:	8d 42 01             	lea    0x1(%edx),%eax
   1256d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12570:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12573:	8d 48 01             	lea    0x1(%eax),%ecx
   12576:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12579:	0f b6 12             	movzbl (%edx),%edx
   1257c:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1257e:	8b 45 10             	mov    0x10(%ebp),%eax
   12581:	8d 50 ff             	lea    -0x1(%eax),%edx
   12584:	89 55 10             	mov    %edx,0x10(%ebp)
   12587:	85 c0                	test   %eax,%eax
   12589:	75 dc                	jne    12567 <kernel_memcpy+0x26>
   1258b:	eb 01                	jmp    1258e <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   1258d:	90                   	nop
    }
    
}
   1258e:	c9                   	leave  
   1258f:	c3                   	ret    

00012590 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12590:	55                   	push   %ebp
   12591:	89 e5                	mov    %esp,%ebp
   12593:	83 ec 14             	sub    $0x14,%esp
   12596:	8b 45 0c             	mov    0xc(%ebp),%eax
   12599:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   1259c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125a0:	74 2c                	je     125ce <kernel_memset+0x3e>
   125a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125a6:	74 26                	je     125ce <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   125a8:	8b 45 08             	mov    0x8(%ebp),%eax
   125ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   125ae:	eb 0f                	jmp    125bf <kernel_memset+0x2f>
        *(d++) = v;
   125b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125b3:	8d 50 01             	lea    0x1(%eax),%edx
   125b6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   125b9:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   125bd:	88 10                	mov    %dl,(%eax)
    while (size--) {
   125bf:	8b 45 10             	mov    0x10(%ebp),%eax
   125c2:	8d 50 ff             	lea    -0x1(%eax),%edx
   125c5:	89 55 10             	mov    %edx,0x10(%ebp)
   125c8:	85 c0                	test   %eax,%eax
   125ca:	75 e4                	jne    125b0 <kernel_memset+0x20>
   125cc:	eb 01                	jmp    125cf <kernel_memset+0x3f>
    if (!dest || !size) return;
   125ce:	90                   	nop
    }
    
}
   125cf:	c9                   	leave  
   125d0:	c3                   	ret    

000125d1 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   125d1:	55                   	push   %ebp
   125d2:	89 e5                	mov    %esp,%ebp
   125d4:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   125d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125db:	74 0c                	je     125e9 <kernel_memcmp+0x18>
   125dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125e1:	74 06                	je     125e9 <kernel_memcmp+0x18>
   125e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125e7:	75 07                	jne    125f0 <kernel_memcmp+0x1f>
   125e9:	b8 00 00 00 00       	mov    $0x0,%eax
   125ee:	eb 63                	jmp    12653 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   125f0:	8b 45 08             	mov    0x8(%ebp),%eax
   125f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   125f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   125fc:	eb 08                	jmp    12606 <kernel_memcmp+0x35>
        d1++;
   125fe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12602:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12606:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1260a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1260e:	74 10                	je     12620 <kernel_memcmp+0x4f>
   12610:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12613:	0f b6 10             	movzbl (%eax),%edx
   12616:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12619:	0f b6 00             	movzbl (%eax),%eax
   1261c:	38 c2                	cmp    %al,%dl
   1261e:	74 de                	je     125fe <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12620:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12623:	0f b6 10             	movzbl (%eax),%edx
   12626:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12629:	0f b6 00             	movzbl (%eax),%eax
   1262c:	38 c2                	cmp    %al,%dl
   1262e:	76 07                	jbe    12637 <kernel_memcmp+0x66>
   12630:	b8 01 00 00 00       	mov    $0x1,%eax
   12635:	eb 1c                	jmp    12653 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12637:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1263a:	0f b6 10             	movzbl (%eax),%edx
   1263d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12640:	0f b6 00             	movzbl (%eax),%eax
   12643:	38 c2                	cmp    %al,%dl
   12645:	73 07                	jae    1264e <kernel_memcmp+0x7d>
   12647:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1264c:	eb 05                	jmp    12653 <kernel_memcmp+0x82>
    else return 0;
   1264e:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12653:	c9                   	leave  
   12654:	c3                   	ret    

00012655 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12655:	55                   	push   %ebp
   12656:	89 e5                	mov    %esp,%ebp
   12658:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1265b:	8d 45 10             	lea    0x10(%ebp),%eax
   1265e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12661:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12664:	83 ec 04             	sub    $0x4,%esp
   12667:	50                   	push   %eax
   12668:	ff 75 0c             	push   0xc(%ebp)
   1266b:	ff 75 08             	push   0x8(%ebp)
   1266e:	e8 06 00 00 00       	call   12679 <kernel_vsprintf>
   12673:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12676:	90                   	nop
   12677:	c9                   	leave  
   12678:	c3                   	ret    

00012679 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12679:	55                   	push   %ebp
   1267a:	89 e5                	mov    %esp,%ebp
   1267c:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   1267f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12686:	8b 45 08             	mov    0x8(%ebp),%eax
   12689:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   1268c:	e9 68 01 00 00       	jmp    127f9 <kernel_vsprintf+0x180>
        switch (state) {
   12691:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12695:	74 0b                	je     126a2 <kernel_vsprintf+0x29>
   12697:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1269b:	74 2b                	je     126c8 <kernel_vsprintf+0x4f>
   1269d:	e9 56 01 00 00       	jmp    127f8 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   126a2:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   126a6:	75 0c                	jne    126b4 <kernel_vsprintf+0x3b>
   126a8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   126af:	e9 45 01 00 00       	jmp    127f9 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   126b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126b7:	8d 50 01             	lea    0x1(%eax),%edx
   126ba:	89 55 f0             	mov    %edx,-0x10(%ebp)
   126bd:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   126c1:	88 10                	mov    %dl,(%eax)
            break;
   126c3:	e9 31 01 00 00       	jmp    127f9 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   126c8:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   126cc:	75 47                	jne    12715 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   126ce:	8b 45 10             	mov    0x10(%ebp),%eax
   126d1:	8d 50 04             	lea    0x4(%eax),%edx
   126d4:	89 55 10             	mov    %edx,0x10(%ebp)
   126d7:	8b 00                	mov    (%eax),%eax
   126d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   126dc:	ff 75 ec             	push   -0x14(%ebp)
   126df:	e8 28 fe ff ff       	call   1250c <kernel_strlen>
   126e4:	83 c4 04             	add    $0x4,%esp
   126e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   126ea:	eb 17                	jmp    12703 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   126ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
   126ef:	8d 42 01             	lea    0x1(%edx),%eax
   126f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
   126f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126f8:	8d 48 01             	lea    0x1(%eax),%ecx
   126fb:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   126fe:	0f b6 12             	movzbl (%edx),%edx
   12701:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12703:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12706:	8d 50 ff             	lea    -0x1(%eax),%edx
   12709:	89 55 e8             	mov    %edx,-0x18(%ebp)
   1270c:	85 c0                	test   %eax,%eax
   1270e:	75 dc                	jne    126ec <kernel_vsprintf+0x73>
   12710:	e9 da 00 00 00       	jmp    127ef <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12715:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12719:	75 37                	jne    12752 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   1271b:	8b 45 10             	mov    0x10(%ebp),%eax
   1271e:	8d 50 04             	lea    0x4(%eax),%edx
   12721:	89 55 10             	mov    %edx,0x10(%ebp)
   12724:	8b 00                	mov    (%eax),%eax
   12726:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12729:	83 ec 04             	sub    $0x4,%esp
   1272c:	6a 0a                	push   $0xa
   1272e:	ff 75 d8             	push   -0x28(%ebp)
   12731:	ff 75 f0             	push   -0x10(%ebp)
   12734:	e8 dd 00 00 00       	call   12816 <kernel_itoa>
   12739:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   1273c:	83 ec 0c             	sub    $0xc,%esp
   1273f:	ff 75 f0             	push   -0x10(%ebp)
   12742:	e8 c5 fd ff ff       	call   1250c <kernel_strlen>
   12747:	83 c4 10             	add    $0x10,%esp
   1274a:	01 45 f0             	add    %eax,-0x10(%ebp)
   1274d:	e9 9d 00 00 00       	jmp    127ef <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12752:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12756:	74 06                	je     1275e <kernel_vsprintf+0xe5>
   12758:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   1275c:	75 34                	jne    12792 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   1275e:	8b 45 10             	mov    0x10(%ebp),%eax
   12761:	8d 50 04             	lea    0x4(%eax),%edx
   12764:	89 55 10             	mov    %edx,0x10(%ebp)
   12767:	8b 00                	mov    (%eax),%eax
   12769:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   1276c:	83 ec 04             	sub    $0x4,%esp
   1276f:	6a 10                	push   $0x10
   12771:	ff 75 dc             	push   -0x24(%ebp)
   12774:	ff 75 f0             	push   -0x10(%ebp)
   12777:	e8 9a 00 00 00       	call   12816 <kernel_itoa>
   1277c:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1277f:	83 ec 0c             	sub    $0xc,%esp
   12782:	ff 75 f0             	push   -0x10(%ebp)
   12785:	e8 82 fd ff ff       	call   1250c <kernel_strlen>
   1278a:	83 c4 10             	add    $0x10,%esp
   1278d:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12790:	eb 5d                	jmp    127ef <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12792:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12796:	75 34                	jne    127cc <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12798:	8b 45 10             	mov    0x10(%ebp),%eax
   1279b:	8d 50 04             	lea    0x4(%eax),%edx
   1279e:	89 55 10             	mov    %edx,0x10(%ebp)
   127a1:	8b 00                	mov    (%eax),%eax
   127a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   127a6:	83 ec 04             	sub    $0x4,%esp
   127a9:	6a 02                	push   $0x2
   127ab:	ff 75 e0             	push   -0x20(%ebp)
   127ae:	ff 75 f0             	push   -0x10(%ebp)
   127b1:	e8 60 00 00 00       	call   12816 <kernel_itoa>
   127b6:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   127b9:	83 ec 0c             	sub    $0xc,%esp
   127bc:	ff 75 f0             	push   -0x10(%ebp)
   127bf:	e8 48 fd ff ff       	call   1250c <kernel_strlen>
   127c4:	83 c4 10             	add    $0x10,%esp
   127c7:	01 45 f0             	add    %eax,-0x10(%ebp)
   127ca:	eb 23                	jmp    127ef <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   127cc:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   127d0:	75 1d                	jne    127ef <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   127d2:	8b 45 10             	mov    0x10(%ebp),%eax
   127d5:	8d 50 04             	lea    0x4(%eax),%edx
   127d8:	89 55 10             	mov    %edx,0x10(%ebp)
   127db:	8b 00                	mov    (%eax),%eax
   127dd:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   127e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127e3:	8d 50 01             	lea    0x1(%eax),%edx
   127e6:	89 55 f0             	mov    %edx,-0x10(%ebp)
   127e9:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   127ed:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   127ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   127f6:	eb 01                	jmp    127f9 <kernel_vsprintf+0x180>
        default:
            break;
   127f8:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   127f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   127fc:	8d 50 01             	lea    0x1(%eax),%edx
   127ff:	89 55 0c             	mov    %edx,0xc(%ebp)
   12802:	0f b6 00             	movzbl (%eax),%eax
   12805:	88 45 e7             	mov    %al,-0x19(%ebp)
   12808:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   1280c:	0f 85 7f fe ff ff    	jne    12691 <kernel_vsprintf+0x18>
        }
    }
    

}
   12812:	90                   	nop
   12813:	90                   	nop
   12814:	c9                   	leave  
   12815:	c3                   	ret    

00012816 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   12816:	55                   	push   %ebp
   12817:	89 e5                	mov    %esp,%ebp
   12819:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   1281f:	8b 45 08             	mov    0x8(%ebp),%eax
   12822:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   12825:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12829:	74 1d                	je     12848 <kernel_itoa+0x32>
   1282b:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1282f:	74 17                	je     12848 <kernel_itoa+0x32>
   12831:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12835:	74 11                	je     12848 <kernel_itoa+0x32>
   12837:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1283b:	74 0b                	je     12848 <kernel_itoa+0x32>
        *buf = '\0';
   1283d:	8b 45 08             	mov    0x8(%ebp),%eax
   12840:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12843:	e9 a2 00 00 00       	jmp    128ea <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12848:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1284c:	79 11                	jns    1285f <kernel_itoa+0x49>
        *(p++) = '-';
   1284e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12851:	8d 50 01             	lea    0x1(%eax),%edx
   12854:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12857:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   1285a:	f7 5d 0c             	negl   0xc(%ebp)
   1285d:	eb 1a                	jmp    12879 <kernel_itoa+0x63>
    } else if (num == 0) {
   1285f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12863:	75 14                	jne    12879 <kernel_itoa+0x63>
        *(p++) = '0';
   12865:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12868:	8d 50 01             	lea    0x1(%eax),%edx
   1286b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1286e:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12871:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12874:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12877:	eb 71                	jmp    128ea <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12879:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12880:	eb 2e                	jmp    128b0 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12882:	8b 0d 28 39 01 00    	mov    0x13928,%ecx
   12888:	8b 45 0c             	mov    0xc(%ebp),%eax
   1288b:	99                   	cltd   
   1288c:	f7 7d 10             	idivl  0x10(%ebp)
   1288f:	89 d0                	mov    %edx,%eax
   12891:	01 c1                	add    %eax,%ecx
   12893:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12896:	8d 50 01             	lea    0x1(%eax),%edx
   12899:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1289c:	0f b6 11             	movzbl (%ecx),%edx
   1289f:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   128a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   128a9:	99                   	cltd   
   128aa:	f7 7d 10             	idivl  0x10(%ebp)
   128ad:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   128b0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128b4:	7f cc                	jg     12882 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   128b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128b9:	83 e8 01             	sub    $0x1,%eax
   128bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
   128bf:	eb 1d                	jmp    128de <kernel_itoa+0xc8>
            *(p++) = arr[i];
   128c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128c4:	8d 50 01             	lea    0x1(%eax),%edx
   128c7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128ca:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   128d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   128d3:	01 ca                	add    %ecx,%edx
   128d5:	0f b6 12             	movzbl (%edx),%edx
   128d8:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   128da:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   128de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   128e2:	79 dd                	jns    128c1 <kernel_itoa+0xab>
    }
    *p = '\0';
   128e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128e7:	c6 00 00             	movb   $0x0,(%eax)
   128ea:	c9                   	leave  
   128eb:	c3                   	ret    

000128ec <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   128ec:	55                   	push   %ebp
   128ed:	89 e5                	mov    %esp,%ebp
   128ef:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   128f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128f6:	75 19                	jne    12911 <list_is_empty+0x25>
   128f8:	68 dc 37 01 00       	push   $0x137dc
   128fd:	68 c0 38 01 00       	push   $0x138c0
   12902:	6a 38                	push   $0x38
   12904:	68 f0 37 01 00       	push   $0x137f0
   12909:	e8 80 f7 ff ff       	call   1208e <pannic>
   1290e:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12911:	8b 45 08             	mov    0x8(%ebp),%eax
   12914:	8b 40 08             	mov    0x8(%eax),%eax
   12917:	85 c0                	test   %eax,%eax
   12919:	0f 94 c0             	sete   %al
   1291c:	0f b6 c0             	movzbl %al,%eax
}
   1291f:	c9                   	leave  
   12920:	c3                   	ret    

00012921 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12921:	55                   	push   %ebp
   12922:	89 e5                	mov    %esp,%ebp
   12924:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12927:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1292b:	75 19                	jne    12946 <list_get_size+0x25>
   1292d:	68 dc 37 01 00       	push   $0x137dc
   12932:	68 f8 38 01 00       	push   $0x138f8
   12937:	6a 3e                	push   $0x3e
   12939:	68 f0 37 01 00       	push   $0x137f0
   1293e:	e8 4b f7 ff ff       	call   1208e <pannic>
   12943:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12946:	8b 45 08             	mov    0x8(%ebp),%eax
   12949:	8b 40 08             	mov    0x8(%eax),%eax
}
   1294c:	c9                   	leave  
   1294d:	c3                   	ret    

0001294e <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   1294e:	55                   	push   %ebp
   1294f:	89 e5                	mov    %esp,%ebp
   12951:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12954:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12958:	74 06                	je     12960 <list_insert_first+0x12>
   1295a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1295e:	75 19                	jne    12979 <list_insert_first+0x2b>
   12960:	68 30 38 01 00       	push   $0x13830
   12965:	68 ac 38 01 00       	push   $0x138ac
   1296a:	6a 0f                	push   $0xf
   1296c:	68 60 38 01 00       	push   $0x13860
   12971:	e8 18 f7 ff ff       	call   1208e <pannic>
   12976:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12979:	8b 45 08             	mov    0x8(%ebp),%eax
   1297c:	8b 10                	mov    (%eax),%edx
   1297e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12981:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12984:	8b 45 0c             	mov    0xc(%ebp),%eax
   12987:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1298d:	83 ec 0c             	sub    $0xc,%esp
   12990:	ff 75 08             	push   0x8(%ebp)
   12993:	e8 54 ff ff ff       	call   128ec <list_is_empty>
   12998:	83 c4 10             	add    $0x10,%esp
   1299b:	85 c0                	test   %eax,%eax
   1299d:	74 16                	je     129b5 <list_insert_first+0x67>
        list->first = list->last = node;
   1299f:	8b 45 08             	mov    0x8(%ebp),%eax
   129a2:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a5:	89 50 04             	mov    %edx,0x4(%eax)
   129a8:	8b 45 08             	mov    0x8(%ebp),%eax
   129ab:	8b 50 04             	mov    0x4(%eax),%edx
   129ae:	8b 45 08             	mov    0x8(%ebp),%eax
   129b1:	89 10                	mov    %edx,(%eax)
   129b3:	eb 12                	jmp    129c7 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   129b5:	8b 45 08             	mov    0x8(%ebp),%eax
   129b8:	8b 00                	mov    (%eax),%eax
   129ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   129bd:	89 10                	mov    %edx,(%eax)
        list->first = node;
   129bf:	8b 45 08             	mov    0x8(%ebp),%eax
   129c2:	8b 55 0c             	mov    0xc(%ebp),%edx
   129c5:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   129c7:	8b 45 08             	mov    0x8(%ebp),%eax
   129ca:	8b 40 08             	mov    0x8(%eax),%eax
   129cd:	8d 50 01             	lea    0x1(%eax),%edx
   129d0:	8b 45 08             	mov    0x8(%ebp),%eax
   129d3:	89 50 08             	mov    %edx,0x8(%eax)
}
   129d6:	90                   	nop
   129d7:	c9                   	leave  
   129d8:	c3                   	ret    

000129d9 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   129d9:	55                   	push   %ebp
   129da:	89 e5                	mov    %esp,%ebp
   129dc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   129df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129e3:	74 06                	je     129eb <list_insert_last+0x12>
   129e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129e9:	75 19                	jne    12a04 <list_insert_last+0x2b>
   129eb:	68 30 38 01 00       	push   $0x13830
   129f0:	68 d0 38 01 00       	push   $0x138d0
   129f5:	6a 1f                	push   $0x1f
   129f7:	68 60 38 01 00       	push   $0x13860
   129fc:	e8 8d f6 ff ff       	call   1208e <pannic>
   12a01:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12a04:	8b 45 08             	mov    0x8(%ebp),%eax
   12a07:	8b 50 04             	mov    0x4(%eax),%edx
   12a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a0d:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a12:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12a19:	83 ec 0c             	sub    $0xc,%esp
   12a1c:	ff 75 08             	push   0x8(%ebp)
   12a1f:	e8 c8 fe ff ff       	call   128ec <list_is_empty>
   12a24:	83 c4 10             	add    $0x10,%esp
   12a27:	85 c0                	test   %eax,%eax
   12a29:	74 16                	je     12a41 <list_insert_last+0x68>
        list->first = list->last = node;
   12a2b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a31:	89 50 04             	mov    %edx,0x4(%eax)
   12a34:	8b 45 08             	mov    0x8(%ebp),%eax
   12a37:	8b 50 04             	mov    0x4(%eax),%edx
   12a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3d:	89 10                	mov    %edx,(%eax)
   12a3f:	eb 15                	jmp    12a56 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12a41:	8b 45 08             	mov    0x8(%ebp),%eax
   12a44:	8b 40 04             	mov    0x4(%eax),%eax
   12a47:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a4a:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12a4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12a50:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a53:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12a56:	8b 45 08             	mov    0x8(%ebp),%eax
   12a59:	8b 40 08             	mov    0x8(%eax),%eax
   12a5c:	8d 50 01             	lea    0x1(%eax),%edx
   12a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a62:	89 50 08             	mov    %edx,0x8(%eax)

}
   12a65:	90                   	nop
   12a66:	c9                   	leave  
   12a67:	c3                   	ret    

00012a68 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12a68:	55                   	push   %ebp
   12a69:	89 e5                	mov    %esp,%ebp
   12a6b:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12a6e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a72:	75 19                	jne    12a8d <list_remove_first+0x25>
   12a74:	68 96 38 01 00       	push   $0x13896
   12a79:	68 e4 38 01 00       	push   $0x138e4
   12a7e:	6a 31                	push   $0x31
   12a80:	68 60 38 01 00       	push   $0x13860
   12a85:	e8 04 f6 ff ff       	call   1208e <pannic>
   12a8a:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12a8d:	83 ec 0c             	sub    $0xc,%esp
   12a90:	ff 75 08             	push   0x8(%ebp)
   12a93:	e8 54 fe ff ff       	call   128ec <list_is_empty>
   12a98:	83 c4 10             	add    $0x10,%esp
   12a9b:	85 c0                	test   %eax,%eax
   12a9d:	74 07                	je     12aa6 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12a9f:	b8 00 00 00 00       	mov    $0x0,%eax
   12aa4:	eb 71                	jmp    12b17 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa9:	8b 00                	mov    (%eax),%eax
   12aab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12aae:	83 ec 0c             	sub    $0xc,%esp
   12ab1:	ff 75 08             	push   0x8(%ebp)
   12ab4:	e8 68 fe ff ff       	call   12921 <list_get_size>
   12ab9:	83 c4 10             	add    $0x10,%esp
   12abc:	83 f8 01             	cmp    $0x1,%eax
   12abf:	75 17                	jne    12ad8 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12ac1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12acb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ace:	8b 50 04             	mov    0x4(%eax),%edx
   12ad1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad4:	89 10                	mov    %edx,(%eax)
   12ad6:	eb 18                	jmp    12af0 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12ad8:	8b 45 08             	mov    0x8(%ebp),%eax
   12adb:	8b 00                	mov    (%eax),%eax
   12add:	8b 50 04             	mov    0x4(%eax),%edx
   12ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae3:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae8:	8b 00                	mov    (%eax),%eax
   12aea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12af0:	8b 45 08             	mov    0x8(%ebp),%eax
   12af3:	8b 40 08             	mov    0x8(%eax),%eax
   12af6:	8d 50 ff             	lea    -0x1(%eax),%edx
   12af9:	8b 45 08             	mov    0x8(%ebp),%eax
   12afc:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b02:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b0c:	8b 50 04             	mov    0x4(%eax),%edx
   12b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b12:	89 10                	mov    %edx,(%eax)
    return ret;
   12b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12b17:	c9                   	leave  
   12b18:	c3                   	ret    

00012b19 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12b19:	55                   	push   %ebp
   12b1a:	89 e5                	mov    %esp,%ebp
   12b1c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12b1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b23:	75 19                	jne    12b3e <list_remove_last+0x25>
   12b25:	68 96 38 01 00       	push   $0x13896
   12b2a:	68 08 39 01 00       	push   $0x13908
   12b2f:	6a 46                	push   $0x46
   12b31:	68 60 38 01 00       	push   $0x13860
   12b36:	e8 53 f5 ff ff       	call   1208e <pannic>
   12b3b:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12b3e:	83 ec 0c             	sub    $0xc,%esp
   12b41:	ff 75 08             	push   0x8(%ebp)
   12b44:	e8 a3 fd ff ff       	call   128ec <list_is_empty>
   12b49:	83 c4 10             	add    $0x10,%esp
   12b4c:	85 c0                	test   %eax,%eax
   12b4e:	74 07                	je     12b57 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12b50:	b8 00 00 00 00       	mov    $0x0,%eax
   12b55:	eb 75                	jmp    12bcc <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12b57:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5a:	8b 40 04             	mov    0x4(%eax),%eax
   12b5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12b60:	83 ec 0c             	sub    $0xc,%esp
   12b63:	ff 75 08             	push   0x8(%ebp)
   12b66:	e8 b6 fd ff ff       	call   12921 <list_get_size>
   12b6b:	83 c4 10             	add    $0x10,%esp
   12b6e:	83 f8 01             	cmp    $0x1,%eax
   12b71:	75 17                	jne    12b8a <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12b73:	8b 45 08             	mov    0x8(%ebp),%eax
   12b76:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b7d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b80:	8b 50 04             	mov    0x4(%eax),%edx
   12b83:	8b 45 08             	mov    0x8(%ebp),%eax
   12b86:	89 10                	mov    %edx,(%eax)
   12b88:	eb 1b                	jmp    12ba5 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8d:	8b 40 04             	mov    0x4(%eax),%eax
   12b90:	8b 10                	mov    (%eax),%edx
   12b92:	8b 45 08             	mov    0x8(%ebp),%eax
   12b95:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12b98:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9b:	8b 40 04             	mov    0x4(%eax),%eax
   12b9e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12ba5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba8:	8b 40 08             	mov    0x8(%eax),%eax
   12bab:	8d 50 ff             	lea    -0x1(%eax),%edx
   12bae:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb1:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bb7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bc1:	8b 50 04             	mov    0x4(%eax),%edx
   12bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bc7:	89 10                	mov    %edx,(%eax)
    return ret;
   12bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12bcc:	c9                   	leave  
   12bcd:	c3                   	ret    

00012bce <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12bce:	55                   	push   %ebp
   12bcf:	89 e5                	mov    %esp,%ebp
   12bd1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12bd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12bd8:	74 06                	je     12be0 <list_remove+0x12>
   12bda:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bde:	75 19                	jne    12bf9 <list_remove+0x2b>
   12be0:	68 30 38 01 00       	push   $0x13830
   12be5:	68 1c 39 01 00       	push   $0x1391c
   12bea:	6a 5b                	push   $0x5b
   12bec:	68 60 38 01 00       	push   $0x13860
   12bf1:	e8 98 f4 ff ff       	call   1208e <pannic>
   12bf6:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12bf9:	83 ec 0c             	sub    $0xc,%esp
   12bfc:	ff 75 08             	push   0x8(%ebp)
   12bff:	e8 e8 fc ff ff       	call   128ec <list_is_empty>
   12c04:	83 c4 10             	add    $0x10,%esp
   12c07:	85 c0                	test   %eax,%eax
   12c09:	74 0a                	je     12c15 <list_remove+0x47>
        return (list_node_t*)0;
   12c0b:	b8 00 00 00 00       	mov    $0x0,%eax
   12c10:	e9 80 00 00 00       	jmp    12c95 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12c15:	8b 45 08             	mov    0x8(%ebp),%eax
   12c18:	8b 00                	mov    (%eax),%eax
   12c1a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c1d:	75 0b                	jne    12c2a <list_remove+0x5c>
   12c1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c22:	8b 50 04             	mov    0x4(%eax),%edx
   12c25:	8b 45 08             	mov    0x8(%ebp),%eax
   12c28:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12c2a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2d:	8b 40 04             	mov    0x4(%eax),%eax
   12c30:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c33:	75 0b                	jne    12c40 <list_remove+0x72>
   12c35:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c38:	8b 10                	mov    (%eax),%edx
   12c3a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3d:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12c40:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c43:	8b 00                	mov    (%eax),%eax
   12c45:	85 c0                	test   %eax,%eax
   12c47:	74 0e                	je     12c57 <list_remove+0x89>
   12c49:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c4c:	8b 00                	mov    (%eax),%eax
   12c4e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c51:	8b 52 04             	mov    0x4(%edx),%edx
   12c54:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12c57:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c5a:	8b 40 04             	mov    0x4(%eax),%eax
   12c5d:	85 c0                	test   %eax,%eax
   12c5f:	74 0d                	je     12c6e <list_remove+0xa0>
   12c61:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c64:	8b 40 04             	mov    0x4(%eax),%eax
   12c67:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c6a:	8b 12                	mov    (%edx),%edx
   12c6c:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12c6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c78:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c7b:	8b 50 04             	mov    0x4(%eax),%edx
   12c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c81:	89 10                	mov    %edx,(%eax)
    list->size--;
   12c83:	8b 45 08             	mov    0x8(%ebp),%eax
   12c86:	8b 40 08             	mov    0x8(%eax),%eax
   12c89:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c8f:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12c92:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c95:	c9                   	leave  
   12c96:	c3                   	ret    

00012c97 <inb>:
static inline uint8_t inb(uint16_t port) {
   12c97:	55                   	push   %ebp
   12c98:	89 e5                	mov    %esp,%ebp
   12c9a:	83 ec 14             	sub    $0x14,%esp
   12c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12ca4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12ca8:	89 c2                	mov    %eax,%edx
   12caa:	ec                   	in     (%dx),%al
   12cab:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12cae:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12cb2:	c9                   	leave  
   12cb3:	c3                   	ret    

00012cb4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12cb4:	55                   	push   %ebp
   12cb5:	89 e5                	mov    %esp,%ebp
   12cb7:	83 ec 08             	sub    $0x8,%esp
   12cba:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbd:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cc0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12cc4:	89 d0                	mov    %edx,%eax
   12cc6:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12cc9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12ccd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12cd1:	ee                   	out    %al,(%dx)
}
   12cd2:	90                   	nop
   12cd3:	c9                   	leave  
   12cd4:	c3                   	ret    

00012cd5 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12cd5:	55                   	push   %ebp
   12cd6:	89 e5                	mov    %esp,%ebp
   12cd8:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12cdb:	6a 00                	push   $0x0
   12cdd:	68 f9 03 00 00       	push   $0x3f9
   12ce2:	e8 cd ff ff ff       	call   12cb4 <outb>
   12ce7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12cea:	68 80 00 00 00       	push   $0x80
   12cef:	68 fb 03 00 00       	push   $0x3fb
   12cf4:	e8 bb ff ff ff       	call   12cb4 <outb>
   12cf9:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12cfc:	6a 03                	push   $0x3
   12cfe:	68 f8 03 00 00       	push   $0x3f8
   12d03:	e8 ac ff ff ff       	call   12cb4 <outb>
   12d08:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12d0b:	6a 00                	push   $0x0
   12d0d:	68 f9 03 00 00       	push   $0x3f9
   12d12:	e8 9d ff ff ff       	call   12cb4 <outb>
   12d17:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12d1a:	6a 03                	push   $0x3
   12d1c:	68 fb 03 00 00       	push   $0x3fb
   12d21:	e8 8e ff ff ff       	call   12cb4 <outb>
   12d26:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12d29:	68 c7 00 00 00       	push   $0xc7
   12d2e:	68 fa 03 00 00       	push   $0x3fa
   12d33:	e8 7c ff ff ff       	call   12cb4 <outb>
   12d38:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   12d3b:	6a 0f                	push   $0xf
   12d3d:	68 fc 03 00 00       	push   $0x3fc
   12d42:	e8 6d ff ff ff       	call   12cb4 <outb>
   12d47:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   12d4a:	83 ec 0c             	sub    $0xc,%esp
   12d4d:	68 b0 e6 02 00       	push   $0x2e6b0
   12d52:	e8 22 ec ff ff       	call   11979 <mutex_init>
   12d57:	83 c4 10             	add    $0x10,%esp
}
   12d5a:	90                   	nop
   12d5b:	c9                   	leave  
   12d5c:	c3                   	ret    

00012d5d <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   12d5d:	55                   	push   %ebp
   12d5e:	89 e5                	mov    %esp,%ebp
   12d60:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12d66:	83 ec 04             	sub    $0x4,%esp
   12d69:	68 80 00 00 00       	push   $0x80
   12d6e:	6a 00                	push   $0x0
   12d70:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d76:	50                   	push   %eax
   12d77:	e8 14 f8 ff ff       	call   12590 <kernel_memset>
   12d7c:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12d7f:	8d 45 0c             	lea    0xc(%ebp),%eax
   12d82:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12d88:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12d8e:	83 ec 04             	sub    $0x4,%esp
   12d91:	50                   	push   %eax
   12d92:	ff 75 08             	push   0x8(%ebp)
   12d95:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d9b:	50                   	push   %eax
   12d9c:	e8 d8 f8 ff ff       	call   12679 <kernel_vsprintf>
   12da1:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12da4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12daa:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12dad:	83 ec 0c             	sub    $0xc,%esp
   12db0:	68 b0 e6 02 00       	push   $0x2e6b0
   12db5:	e8 0c ec ff ff       	call   119c6 <mutex_lock>
   12dba:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12dbd:	eb 57                	jmp    12e16 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12dbf:	90                   	nop
   12dc0:	83 ec 0c             	sub    $0xc,%esp
   12dc3:	68 fd 03 00 00       	push   $0x3fd
   12dc8:	e8 ca fe ff ff       	call   12c97 <inb>
   12dcd:	83 c4 10             	add    $0x10,%esp
   12dd0:	0f b6 c0             	movzbl %al,%eax
   12dd3:	83 e0 40             	and    $0x40,%eax
   12dd6:	85 c0                	test   %eax,%eax
   12dd8:	74 e6                	je     12dc0 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ddd:	0f b6 00             	movzbl (%eax),%eax
   12de0:	3c 0a                	cmp    $0xa,%al
   12de2:	75 12                	jne    12df6 <log_printf+0x99>
   12de4:	83 ec 08             	sub    $0x8,%esp
   12de7:	6a 0d                	push   $0xd
   12de9:	68 f8 03 00 00       	push   $0x3f8
   12dee:	e8 c1 fe ff ff       	call   12cb4 <outb>
   12df3:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12df9:	8d 50 01             	lea    0x1(%eax),%edx
   12dfc:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12dff:	0f b6 00             	movzbl (%eax),%eax
   12e02:	0f b6 c0             	movzbl %al,%eax
   12e05:	83 ec 08             	sub    $0x8,%esp
   12e08:	50                   	push   %eax
   12e09:	68 f8 03 00 00       	push   $0x3f8
   12e0e:	e8 a1 fe ff ff       	call   12cb4 <outb>
   12e13:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e19:	0f b6 00             	movzbl (%eax),%eax
   12e1c:	84 c0                	test   %al,%al
   12e1e:	75 9f                	jne    12dbf <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12e20:	83 ec 08             	sub    $0x8,%esp
   12e23:	6a 0d                	push   $0xd
   12e25:	68 f8 03 00 00       	push   $0x3f8
   12e2a:	e8 85 fe ff ff       	call   12cb4 <outb>
   12e2f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12e32:	83 ec 08             	sub    $0x8,%esp
   12e35:	6a 0a                	push   $0xa
   12e37:	68 f8 03 00 00       	push   $0x3f8
   12e3c:	e8 73 fe ff ff       	call   12cb4 <outb>
   12e41:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   12e44:	83 ec 0c             	sub    $0xc,%esp
   12e47:	68 b0 e6 02 00       	push   $0x2e6b0
   12e4c:	e8 06 ec ff ff       	call   11a57 <mutex_unlock>
   12e51:	83 c4 10             	add    $0x10,%esp
   12e54:	90                   	nop
   12e55:	c9                   	leave  
   12e56:	c3                   	ret    
