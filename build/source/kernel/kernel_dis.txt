
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000046c8 memsz 0x000046c8 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x00017be0 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x0002d000 align 2**12
         filesz 0x000000be memsz 0x000000be flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037db  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000eec  000137dc  000137dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00016be0  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   000000be  80000000  0002d000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001f5e  00000000  00000000  000070be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000780  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005a84  00000000  00000000  0000979c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001bfd  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000260  00000000  00000000  00010e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001299  00000000  00000000  00011080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  00012319  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001558  00000000  00000000  00012344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
00010371 l     F .text	0000005d addr_alloc_init
000103ce l     F .text	00000067 addr_alloc_page
00010435 l     F .text	00000061 addr_free_page
00010496 l     F .text	00000066 show_mem_info
000104fc l     F .text	00000037 total_mem_size
00013924 l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
00013938 l     O .rodata	0000000c __func__.1
0001099a l     F .text	00000010 curr_page_dir
00013944 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010a43 l     F .text	0000003d list_node_init
00013a44 l     O .rodata	0000000f __func__.10
00010a80 l     F .text	0000002d list_node_next
00013ab4 l     O .rodata	0000000f __func__.3
00010aad l     F .text	00000047 list_init
00013a54 l     O .rodata	0000000a __func__.9
00010af4 l     F .text	00000035 list_is_empty
00013ac4 l     O .rodata	0000000e __func__.2
00010b29 l     F .text	0000002d list_get_size
00013aa4 l     O .rodata	0000000e __func__.4
00010b56 l     F .text	0000002c list_get_first
00013a94 l     O .rodata	0000000f __func__.5
00010b82 l     F .text	00000017 up2
00010b99 l     F .text	00000007 hlt
00010ba0 l     F .text	0000000c write_cr3
00010bac l     F .text	0000001a far_jump
00010bc6 l     F .text	00000017 write_tr
00010bdd l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a0 task_manager
00010bee l     F .text	0000001f switch_to_tss
00010c28 l     F .text	00000172 tss_init
00013a38 l     O .rodata	0000000a __func__.11
000181a0 l     O .bss	00000200 empty_task_stack
00010e8a l     F .text	0000000a empty_task
00013a60 l     O .rodata	00000010 __func__.8
00013a70 l     O .rodata	0000000f __func__.7
00013a80 l     O .rodata	00000011 __func__.6
00013ad4 l     O .rodata	0000000f __func__.1
00013ae4 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
0001144d l     F .text	00000028 lgdt
000183a0 l     O .bss	00010000 gdt_table
000283a0 l     O .bss	00002000 is_alloc
0002a3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011683 l     F .text	00000007 cli
0001168a l     F .text	00000007 sti
00011691 l     F .text	00000007 hlt
00011698 l     F .text	0000001d inb
000116b5 l     F .text	00000021 outb
000116d6 l     F .text	00000028 lidt
000116fe l     F .text	00000011 read_cr2
0001170f l     F .text	00000010 read_eflags
0001171f l     F .text	0000000b write_eflags
0002a3c0 l     O .bss	00000800 idt_table
0001172a l     F .text	0000010f print_exception_fram
00011839 l     F .text	0000003e do_default_handler
00011c4f l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
000140bc l     O .rodata	00000008 sys_table
00000000 l    df *ABS*	00000000 time.c
000120ca l     F .text	00000021 outb
0002abc0 l     O .bss	00000004 sys_tick
00012113 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00014184 l     O .rodata	0000000c __func__.1
00014190 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00012281 l     F .text	00000047 list_init
00014250 l     O .rodata	0000000a __func__.1
000122c8 l     F .text	00000035 list_is_empty
0001425c l     O .rodata	0000000e __func__.0
00014244 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00012493 l     F .text	00000047 list_init
00014310 l     O .rodata	0000000a __func__.1
000124da l     F .text	00000035 list_is_empty
0001431c l     O .rodata	0000000e __func__.0
00014304 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012663 l     F .text	00000047 list_init
00014430 l     O .rodata	0000000a __func__.3
000126aa l     F .text	0000002d list_get_size
0001443c l     O .rodata	0000000e __func__.2
000126d7 l     F .text	0000002c list_get_first
0001445c l     O .rodata	0000000f __func__.0
00012703 l     F .text	0000002d list_get_last
0001444c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012a0b l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001452c l     O .rodata	0000000c __func__.3
00014538 l     O .rodata	0000000f __func__.2
00014548 l     O .rodata	0000000f __func__.1
00014558 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00013270 l     F .text	00000035 list_is_empty
00014660 l     O .rodata	0000000e __func__.5
000132a5 l     F .text	0000002d list_get_size
00014698 l     O .rodata	0000000e __func__.2
0001464c l     O .rodata	00000012 __func__.6
00014670 l     O .rodata	00000011 __func__.4
00014684 l     O .rodata	00000012 __func__.3
000146a8 l     O .rodata	00000011 __func__.1
000146bc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0001361b l     F .text	0000001d inb
00013638 l     F .text	00000021 outb
0002abc4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
00012af2 g     F .text	00000078 bitmap_get_bit
00012ec5 g     F .text	0000004f kernel_memcpy
00011e97 g     F .text	00000098 idt_enable
00011114 g     F .text	0000000a task_current
0001335d g     F .text	0000008f list_insert_last
00011186 g     F .text	00000061 sys_yield
000119ab g     F .text	0000001c do_handler_segment_not_present
00011050 g     F .text	0000004b task_set_ready
00012c72 g     F .text	00000021 bitmap_is_set
00011fce g     F .text	0000000b idt_enable_global
00012f14 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001203b g     F .text	0000008f do_handler_syscall
00013659 g     F .text	00000088 log_init
00012244 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012d8e g     F .text	00000047 kernel_strcpy
00011fc3 g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
800000a1 g     F .first_task	0000001d first_main
00011c0c g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011903 g     F .text	0000001c do_handler_overflow
00011b80 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000119e3 g     F .text	000000b1 do_handler_general_protection
00011bf0 g     F .text	0000001c do_handler_control_exception
0001263a g     F .text	00000029 sem_count
00011893 g     F .text	0000001c do_handler_divider
00012b6a g     F .text	00000108 bitmap_set_bit
00011973 g     F .text	0000001c do_handler_double_fault
00011a94 g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011fd9 g     F .text	00000039 pic_send_eoi
0001349d g     F .text	000000b5 list_remove_last
00011046 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012552 g     F .text	0000006b sem_wait
00010958 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011534 g     F .text	000000b3 gdt_init
00011bd4 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
000118af g     F .text	0000001c do_handler_debug
0002abe0 g     O .bss	00002000 stack
00011399 g     F .text	00000060 sys_sleep
000109aa g     F .text	00000099 memory_free_page
00012730 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0002d000 g       *ABS*	00000000 s_first_task
000108a0 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00011ce2 g     F .text	000001b5 idt_init
000125bd g     F .text	0000007d sem_notify
0001165c g     F .text	00000027 gdt_free
0001193b g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011b64 g     F .text	0000001c do_handler_fpu_error
00010f64 g     F .text	000000e2 task_first_init
00011b9c g     F .text	0000001c do_handler_machine_check
000132d2 g     F .text	0000008b list_insert_first
0001134e g     F .text	0000004b task_set_wakeup
000110e6 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010722 g     F .text	00000085 memory_creat_uvm
00012dd5 g     F .text	00000051 kernel_strncpy
0002d0be g       *ABS*	00000000 mem_free_start
0001218d g     F .text	00000053 kernel_init
0001250f g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012ffd g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0002d000 g       .first_task	00000000 e_data
0001234a g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
0001198f g     F .text	0000001c do_handler_invalid_tss
00011f2f g     F .text	00000094 idt_disable
0002d0be g       *ABS*	00000000 e_first_task
000112f2 g     F .text	0000005c task_set_sleep
000105e3 g     F .text	0000009b memory_creat_map
000118cb g     F .text	0000001c do_handler_nmi
000122fd g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
00012a48 g     F .text	00000016 bitmap_byte_count
00011957 g     F .text	0000001c do_handler_device_unavailable
00012012 g     F .text	00000018 idt_enter_protection
0001067e g     F .text	000000a4 create_kernal_table
000111e7 g     F .text	0000010b task_slice_end
000121e0 g     F .text	00000064 move_to_first_task
00012f55 g     F .text	00000084 kernel_memcmp
00011bb8 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011877 g     F .text	0000001c do_handler_unknown
0001097a g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00010c0d g     F .text	0000001b task_switch_from_to
000123db g     F .text	000000b8 mutex_unlock
0001111e g     F .text	00000068 task_switch
00012e90 g     F .text	00000035 kernel_strlen
0001109b g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00011475 g     F .text	000000bf segment_desc_set
0001191f g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
000133ec g     F .text	000000b1 list_remove_first
000146c8 g       .rodata	00000000 e_text
00012e26 g     F .text	0000006a kernel_strncmp
00012a5e g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012c93 g     F .text	000000fb bitmap_alloc_nbits
00010e94 g     F .text	000000d0 task_manager_init
000107a7 g     F .text	000000f9 memory_init
00012a12 g     F .text	00000036 pannic
000119c7 g     F .text	0000001c do_handler_stack_segment_fault
000118e7 g     F .text	0000001c do_handler_breakpoint
000136e1 g     F .text	000000fa log_printf
00010d9a g     F .text	000000f0 task_init
00012fd9 g     F .text	00000024 kernel_sprintf
000113f9 g     F .text	0000000d sys_getpid
000115e7 g     F .text	00000075 gdt_alloc_desc
0001319a g     F .text	000000d6 kernel_itoa
00013552 g     F .text	000000c9 list_remove
00011406 g     F .text	00000047 gate_desc_set
0001202a g     F .text	00000011 idt_leave_protection
00010533 g     F .text	000000b0 find_pte
000120eb g     F .text	00000028 do_handler_time
00012175 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 82 21 00 00       	call   1218d <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc e0 cb 02 00       	mov    $0x2cbe0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 1a 22 00 00       	jmp    12244 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 3c 18 00 00       	call   11877 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 3b 18 00 00       	call   11893 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 3a 18 00 00       	call   118af <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 39 18 00 00       	call   118cb <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 38 18 00 00       	call   118e7 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 37 18 00 00       	call   11903 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 36 18 00 00       	call   1191f <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 35 18 00 00       	call   1193b <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 34 18 00 00       	call   11957 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 35 18 00 00       	call   11973 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 36 18 00 00       	call   1198f <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 37 18 00 00       	call   119ab <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 38 18 00 00       	call   119c7 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 39 18 00 00       	call   119e3 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 cf 18 00 00       	call   11a94 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 82 19 00 00       	call   11b64 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 83 19 00 00       	call   11b80 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 82 19 00 00       	call   11b9c <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 81 19 00 00       	call   11bb8 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 80 19 00 00       	call   11bd4 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 81 19 00 00       	call   11bf0 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 5f 1e 00 00       	call   120eb <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 80 1d 00 00       	call   1203b <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10363:	ff 75 08             	push   0x8(%ebp)
   10366:	e8 80 ff ff ff       	call   102eb <write_cr3>
   1036b:	83 c4 04             	add    $0x4,%esp
}
   1036e:	90                   	nop
   1036f:	c9                   	leave  
   10370:	c3                   	ret    

00010371 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10371:	55                   	push   %ebp
   10372:	89 e5                	mov    %esp,%ebp
   10374:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10377:	8b 45 08             	mov    0x8(%ebp),%eax
   1037a:	83 ec 0c             	sub    $0xc,%esp
   1037d:	50                   	push   %eax
   1037e:	e8 7a 1f 00 00       	call   122fd <mutex_init>
   10383:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	8b 55 10             	mov    0x10(%ebp),%edx
   1038c:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	8b 55 14             	mov    0x14(%ebp),%edx
   10395:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	8b 55 18             	mov    0x18(%ebp),%edx
   1039e:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 40 20             	mov    0x20(%eax),%eax
   103a7:	8b 55 08             	mov    0x8(%ebp),%edx
   103aa:	8b 4a 24             	mov    0x24(%edx),%ecx
   103ad:	ba 00 00 00 00       	mov    $0x0,%edx
   103b2:	f7 f1                	div    %ecx
   103b4:	89 c2                	mov    %eax,%edx
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	83 c0 14             	add    $0x14,%eax
   103bc:	6a 00                	push   $0x0
   103be:	52                   	push   %edx
   103bf:	ff 75 0c             	push   0xc(%ebp)
   103c2:	50                   	push   %eax
   103c3:	e8 96 26 00 00       	call   12a5e <bitmap_init>
   103c8:	83 c4 10             	add    $0x10,%esp
}
   103cb:	90                   	nop
   103cc:	c9                   	leave  
   103cd:	c3                   	ret    

000103ce <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   103ce:	55                   	push   %ebp
   103cf:	89 e5                	mov    %esp,%ebp
   103d1:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   103d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   103db:	8b 45 08             	mov    0x8(%ebp),%eax
   103de:	83 ec 0c             	sub    $0xc,%esp
   103e1:	50                   	push   %eax
   103e2:	e8 63 1f 00 00       	call   1234a <mutex_lock>
   103e7:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	83 c0 14             	add    $0x14,%eax
   103f0:	83 ec 04             	sub    $0x4,%esp
   103f3:	ff 75 0c             	push   0xc(%ebp)
   103f6:	6a 00                	push   $0x0
   103f8:	50                   	push   %eax
   103f9:	e8 95 28 00 00       	call   12c93 <bitmap_alloc_nbits>
   103fe:	83 c4 10             	add    $0x10,%esp
   10401:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   10404:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10408:	78 17                	js     10421 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10410:	8b 45 08             	mov    0x8(%ebp),%eax
   10413:	8b 50 24             	mov    0x24(%eax),%edx
   10416:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10419:	0f af c2             	imul   %edx,%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10421:	8b 45 08             	mov    0x8(%ebp),%eax
   10424:	83 ec 0c             	sub    $0xc,%esp
   10427:	50                   	push   %eax
   10428:	e8 ae 1f 00 00       	call   123db <mutex_unlock>
   1042d:	83 c4 10             	add    $0x10,%esp

  return addr;
   10430:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	53                   	push   %ebx
   10439:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   1043c:	8b 45 08             	mov    0x8(%ebp),%eax
   1043f:	83 ec 0c             	sub    $0xc,%esp
   10442:	50                   	push   %eax
   10443:	e8 02 1f 00 00       	call   1234a <mutex_lock>
   10448:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1044b:	8b 45 08             	mov    0x8(%ebp),%eax
   1044e:	8b 50 1c             	mov    0x1c(%eax),%edx
   10451:	8b 45 0c             	mov    0xc(%ebp),%eax
   10454:	29 d0                	sub    %edx,%eax
   10456:	89 c1                	mov    %eax,%ecx
   10458:	8b 45 08             	mov    0x8(%ebp),%eax
   1045b:	8b 58 24             	mov    0x24(%eax),%ebx
   1045e:	89 c8                	mov    %ecx,%eax
   10460:	ba 00 00 00 00       	mov    $0x0,%edx
   10465:	f7 f3                	div    %ebx
   10467:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   1046a:	8b 45 08             	mov    0x8(%ebp),%eax
   1046d:	83 c0 14             	add    $0x14,%eax
   10470:	6a 00                	push   $0x0
   10472:	ff 75 10             	push   0x10(%ebp)
   10475:	ff 75 f4             	push   -0xc(%ebp)
   10478:	50                   	push   %eax
   10479:	e8 ec 26 00 00       	call   12b6a <bitmap_set_bit>
   1047e:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10481:	8b 45 08             	mov    0x8(%ebp),%eax
   10484:	83 ec 0c             	sub    $0xc,%esp
   10487:	50                   	push   %eax
   10488:	e8 4e 1f 00 00       	call   123db <mutex_unlock>
   1048d:	83 c4 10             	add    $0x10,%esp
}
   10490:	90                   	nop
   10491:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10494:	c9                   	leave  
   10495:	c3                   	ret    

00010496 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   10496:	55                   	push   %ebp
   10497:	89 e5                	mov    %esp,%ebp
   10499:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1049c:	83 ec 0c             	sub    $0xc,%esp
   1049f:	68 dc 37 01 00       	push   $0x137dc
   104a4:	e8 38 32 00 00       	call   136e1 <log_printf>
   104a9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104b3:	eb 29                	jmp    104de <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   104b5:	8b 45 08             	mov    0x8(%ebp),%eax
   104b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104bb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104bf:	8b 45 08             	mov    0x8(%ebp),%eax
   104c2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104c5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c8:	52                   	push   %edx
   104c9:	50                   	push   %eax
   104ca:	ff 75 f4             	push   -0xc(%ebp)
   104cd:	68 e8 37 01 00       	push   $0x137e8
   104d2:	e8 0a 32 00 00       	call   136e1 <log_printf>
   104d7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 50             	mov    0x50(%eax),%eax
   104e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104e7:	7c cc                	jl     104b5 <show_mem_info+0x1f>
    }

    log_printf("");
   104e9:	83 ec 0c             	sub    $0xc,%esp
   104ec:	68 fa 37 01 00       	push   $0x137fa
   104f1:	e8 eb 31 00 00       	call   136e1 <log_printf>
   104f6:	83 c4 10             	add    $0x10,%esp
}
   104f9:	90                   	nop
   104fa:	c9                   	leave  
   104fb:	c3                   	ret    

000104fc <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104fc:	55                   	push   %ebp
   104fd:	89 e5                	mov    %esp,%ebp
   104ff:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10502:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10509:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10510:	eb 11                	jmp    10523 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10512:	8b 45 08             	mov    0x8(%ebp),%eax
   10515:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10518:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1051c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1051f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	8b 40 50             	mov    0x50(%eax),%eax
   10529:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1052c:	7c e4                	jl     10512 <total_mem_size+0x16>
    }

    return mem_size;
   1052e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10531:	c9                   	leave  
   10532:	c3                   	ret    

00010533 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10533:	55                   	push   %ebp
   10534:	89 e5                	mov    %esp,%ebp
   10536:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10539:	ff 75 0c             	push   0xc(%ebp)
   1053c:	e8 b6 fd ff ff       	call   102f7 <pde_index>
   10541:	83 c4 04             	add    $0x4,%esp
   10544:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	01 d0                	add    %edx,%eax
   10550:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10553:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10556:	0f b6 00             	movzbl (%eax),%eax
   10559:	83 e0 01             	and    $0x1,%eax
   1055c:	84 c0                	test   %al,%al
   1055e:	74 10                	je     10570 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10560:	ff 75 f0             	push   -0x10(%ebp)
   10563:	e8 aa fd ff ff       	call   10312 <pde_to_pt_addr>
   10568:	83 c4 04             	add    $0x4,%esp
   1056b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1056e:	eb 57                	jmp    105c7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10570:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10574:	75 07                	jne    1057d <find_pte+0x4a>
      return (pte_t*)0;
   10576:	b8 00 00 00 00       	mov    $0x0,%eax
   1057b:	eb 64                	jmp    105e1 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1057d:	83 ec 08             	sub    $0x8,%esp
   10580:	6a 01                	push   $0x1
   10582:	68 00 60 01 00       	push   $0x16000
   10587:	e8 42 fe ff ff       	call   103ce <addr_alloc_page>
   1058c:	83 c4 10             	add    $0x10,%esp
   1058f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10592:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10596:	75 07                	jne    1059f <find_pte+0x6c>
      return (pte_t*)0;
   10598:	b8 00 00 00 00       	mov    $0x0,%eax
   1059d:	eb 42                	jmp    105e1 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   1059f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   105a5:	83 ec 04             	sub    $0x4,%esp
   105a8:	68 00 10 00 00       	push   $0x1000
   105ad:	6a 00                	push   $0x0
   105af:	ff 75 f4             	push   -0xc(%ebp)
   105b2:	e8 5d 29 00 00       	call   12f14 <kernel_memset>
   105b7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   105ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105bd:	83 c8 07             	or     $0x7,%eax
   105c0:	89 c2                	mov    %eax,%edx
   105c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105c5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105c7:	83 ec 0c             	sub    $0xc,%esp
   105ca:	ff 75 0c             	push   0xc(%ebp)
   105cd:	e8 30 fd ff ff       	call   10302 <pte_index>
   105d2:	83 c4 10             	add    $0x10,%esp
   105d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105df:	01 d0                	add    %edx,%eax

}
   105e1:	c9                   	leave  
   105e2:	c3                   	ret    

000105e3 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105e3:	55                   	push   %ebp
   105e4:	89 e5                	mov    %esp,%ebp
   105e6:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105f0:	eb 7e                	jmp    10670 <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105f2:	83 ec 04             	sub    $0x4,%esp
   105f5:	6a 01                	push   $0x1
   105f7:	ff 75 0c             	push   0xc(%ebp)
   105fa:	ff 75 08             	push   0x8(%ebp)
   105fd:	e8 31 ff ff ff       	call   10533 <find_pte>
   10602:	83 c4 10             	add    $0x10,%esp
   10605:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10608:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1060c:	75 17                	jne    10625 <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   1060e:	83 ec 0c             	sub    $0xc,%esp
   10611:	68 fb 37 01 00       	push   $0x137fb
   10616:	e8 c6 30 00 00       	call   136e1 <log_printf>
   1061b:	83 c4 10             	add    $0x10,%esp
      return -1;
   1061e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10623:	eb 57                	jmp    1067c <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10625:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10628:	0f b6 00             	movzbl (%eax),%eax
   1062b:	83 e0 01             	and    $0x1,%eax
   1062e:	84 c0                	test   %al,%al
   10630:	74 1c                	je     1064e <memory_creat_map+0x6b>
   10632:	68 15 38 01 00       	push   $0x13815
   10637:	68 24 39 01 00       	push   $0x13924
   1063c:	68 c1 00 00 00       	push   $0xc1
   10641:	68 28 38 01 00       	push   $0x13828
   10646:	e8 c7 23 00 00       	call   12a12 <pannic>
   1064b:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   1064e:	8b 45 10             	mov    0x10(%ebp),%eax
   10651:	0b 45 18             	or     0x18(%ebp),%eax
   10654:	83 c8 01             	or     $0x1,%eax
   10657:	89 c2                	mov    %eax,%edx
   10659:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065c:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1065e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10665:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1066c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10670:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10673:	3b 45 14             	cmp    0x14(%ebp),%eax
   10676:	0f 8c 76 ff ff ff    	jl     105f2 <memory_creat_map+0xf>

  }
 }
   1067c:	c9                   	leave  
   1067d:	c3                   	ret    

0001067e <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1067e:	55                   	push   %ebp
   1067f:	89 e5                	mov    %esp,%ebp
   10681:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068b:	e9 82 00 00 00       	jmp    10712 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   10690:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10693:	c1 e0 04             	shl    $0x4,%eax
   10696:	05 00 50 01 00       	add    $0x15000,%eax
   1069b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a1:	8b 00                	mov    (%eax),%eax
   106a3:	68 00 10 00 00       	push   $0x1000
   106a8:	50                   	push   %eax
   106a9:	e8 19 fc ff ff       	call   102c7 <down2>
   106ae:	83 c4 08             	add    $0x8,%esp
   106b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b7:	8b 40 08             	mov    0x8(%eax),%eax
   106ba:	68 00 10 00 00       	push   $0x1000
   106bf:	50                   	push   %eax
   106c0:	e8 02 fc ff ff       	call   102c7 <down2>
   106c5:	83 c4 08             	add    $0x8,%esp
   106c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ce:	8b 40 04             	mov    0x4(%eax),%eax
   106d1:	68 00 10 00 00       	push   $0x1000
   106d6:	50                   	push   %eax
   106d7:	e8 f8 fb ff ff       	call   102d4 <up2>
   106dc:	83 c4 08             	add    $0x8,%esp
   106df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106e5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106e8:	c1 e8 0c             	shr    $0xc,%eax
   106eb:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106f1:	8b 40 0c             	mov    0xc(%eax),%eax
   106f4:	83 ec 0c             	sub    $0xc,%esp
   106f7:	50                   	push   %eax
   106f8:	ff 75 e0             	push   -0x20(%ebp)
   106fb:	ff 75 e8             	push   -0x18(%ebp)
   106fe:	ff 75 ec             	push   -0x14(%ebp)
   10701:	68 00 70 01 00       	push   $0x17000
   10706:	e8 d8 fe ff ff       	call   105e3 <memory_creat_map>
   1070b:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1070e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10712:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10715:	83 f8 03             	cmp    $0x3,%eax
   10718:	0f 86 72 ff ff ff    	jbe    10690 <create_kernal_table+0x12>

  }
}
   1071e:	90                   	nop
   1071f:	90                   	nop
   10720:	c9                   	leave  
   10721:	c3                   	ret    

00010722 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10722:	55                   	push   %ebp
   10723:	89 e5                	mov    %esp,%ebp
   10725:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10728:	83 ec 08             	sub    $0x8,%esp
   1072b:	6a 01                	push   $0x1
   1072d:	68 00 60 01 00       	push   $0x16000
   10732:	e8 97 fc ff ff       	call   103ce <addr_alloc_page>
   10737:	83 c4 10             	add    $0x10,%esp
   1073a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1073d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10741:	75 07                	jne    1074a <memory_creat_uvm+0x28>
   10743:	b8 00 00 00 00       	mov    $0x0,%eax
   10748:	eb 5b                	jmp    107a5 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1074a:	83 ec 04             	sub    $0x4,%esp
   1074d:	68 00 10 00 00       	push   $0x1000
   10752:	6a 00                	push   $0x0
   10754:	ff 75 f0             	push   -0x10(%ebp)
   10757:	e8 b8 27 00 00       	call   12f14 <kernel_memset>
   1075c:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1075f:	83 ec 0c             	sub    $0xc,%esp
   10762:	68 00 00 00 80       	push   $0x80000000
   10767:	e8 8b fb ff ff       	call   102f7 <pde_index>
   1076c:	83 c4 10             	add    $0x10,%esp
   1076f:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10772:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10779:	eb 1f                	jmp    1079a <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1077b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1077e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10785:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10788:	01 c2                	add    %eax,%edx
   1078a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1078d:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   10794:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   10796:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1079a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1079d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   107a0:	77 d9                	ja     1077b <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   107a5:	c9                   	leave  
   107a6:	c3                   	ret    

000107a7 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   107a7:	55                   	push   %ebp
   107a8:	89 e5                	mov    %esp,%ebp
   107aa:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   107ad:	83 ec 0c             	sub    $0xc,%esp
   107b0:	68 5f 38 01 00       	push   $0x1385f
   107b5:	e8 27 2f 00 00       	call   136e1 <log_printf>
   107ba:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   107bd:	83 ec 08             	sub    $0x8,%esp
   107c0:	68 be d0 02 00       	push   $0x2d0be
   107c5:	68 6b 38 01 00       	push   $0x1386b
   107ca:	e8 12 2f 00 00       	call   136e1 <log_printf>
   107cf:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107d2:	83 ec 0c             	sub    $0xc,%esp
   107d5:	ff 75 08             	push   0x8(%ebp)
   107d8:	e8 b9 fc ff ff       	call   10496 <show_mem_info>
   107dd:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107e0:	83 ec 0c             	sub    $0xc,%esp
   107e3:	ff 75 08             	push   0x8(%ebp)
   107e6:	e8 11 fd ff ff       	call   104fc <total_mem_size>
   107eb:	83 c4 10             	add    $0x10,%esp
   107ee:	2d 00 00 10 00       	sub    $0x100000,%eax
   107f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107f6:	83 ec 08             	sub    $0x8,%esp
   107f9:	68 00 10 00 00       	push   $0x1000
   107fe:	ff 75 f4             	push   -0xc(%ebp)
   10801:	e8 c1 fa ff ff       	call   102c7 <down2>
   10806:	83 c4 10             	add    $0x10,%esp
   10809:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   1080c:	83 ec 04             	sub    $0x4,%esp
   1080f:	ff 75 f4             	push   -0xc(%ebp)
   10812:	68 00 00 10 00       	push   $0x100000
   10817:	68 80 38 01 00       	push   $0x13880
   1081c:	e8 c0 2e 00 00       	call   136e1 <log_printf>
   10821:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10824:	c7 45 f0 be d0 02 00 	movl   $0x2d0be,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   1082b:	83 ec 0c             	sub    $0xc,%esp
   1082e:	68 00 10 00 00       	push   $0x1000
   10833:	ff 75 f4             	push   -0xc(%ebp)
   10836:	68 00 00 10 00       	push   $0x100000
   1083b:	ff 75 f0             	push   -0x10(%ebp)
   1083e:	68 00 60 01 00       	push   $0x16000
   10843:	e8 29 fb ff ff       	call   10371 <addr_alloc_init>
   10848:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   1084b:	a1 20 60 01 00       	mov    0x16020,%eax
   10850:	c1 e8 0c             	shr    $0xc,%eax
   10853:	83 ec 0c             	sub    $0xc,%esp
   10856:	50                   	push   %eax
   10857:	e8 ec 21 00 00       	call   12a48 <bitmap_byte_count>
   1085c:	83 c4 10             	add    $0x10,%esp
   1085f:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10862:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10869:	76 1c                	jbe    10887 <memory_init+0xe0>
   1086b:	68 a0 38 01 00       	push   $0x138a0
   10870:	68 38 39 01 00       	push   $0x13938
   10875:	68 2e 01 00 00       	push   $0x12e
   1087a:	68 28 38 01 00       	push   $0x13828
   1087f:	e8 8e 21 00 00       	call   12a12 <pannic>
   10884:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10887:	e8 f2 fd ff ff       	call   1067e <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1088c:	b8 00 70 01 00       	mov    $0x17000,%eax
   10891:	83 ec 0c             	sub    $0xc,%esp
   10894:	50                   	push   %eax
   10895:	e8 c6 fa ff ff       	call   10360 <mmu_set_page_dir>
   1089a:	83 c4 10             	add    $0x10,%esp
}
   1089d:	90                   	nop
   1089e:	c9                   	leave  
   1089f:	c3                   	ret    

000108a0 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   108a0:	55                   	push   %ebp
   108a1:	89 e5                	mov    %esp,%ebp
   108a3:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   108a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   108a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   108ac:	68 00 10 00 00       	push   $0x1000
   108b1:	ff 75 10             	push   0x10(%ebp)
   108b4:	e8 1b fa ff ff       	call   102d4 <up2>
   108b9:	83 c4 08             	add    $0x8,%esp
   108bc:	c1 e8 0c             	shr    $0xc,%eax
   108bf:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   108c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108c9:	eb 7a                	jmp    10945 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108cb:	83 ec 08             	sub    $0x8,%esp
   108ce:	6a 01                	push   $0x1
   108d0:	68 00 60 01 00       	push   $0x16000
   108d5:	e8 f4 fa ff ff       	call   103ce <addr_alloc_page>
   108da:	83 c4 10             	add    $0x10,%esp
   108dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   108e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108e4:	75 17                	jne    108fd <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   108e6:	83 ec 0c             	sub    $0xc,%esp
   108e9:	68 c4 38 01 00       	push   $0x138c4
   108ee:	e8 ee 2d 00 00       	call   136e1 <log_printf>
   108f3:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   108f6:	b8 00 00 00 00       	mov    $0x0,%eax
   108fb:	eb 59                	jmp    10956 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   108fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10900:	83 ec 0c             	sub    $0xc,%esp
   10903:	ff 75 14             	push   0x14(%ebp)
   10906:	6a 01                	push   $0x1
   10908:	ff 75 e8             	push   -0x18(%ebp)
   1090b:	ff 75 f4             	push   -0xc(%ebp)
   1090e:	50                   	push   %eax
   1090f:	e8 cf fc ff ff       	call   105e3 <memory_creat_map>
   10914:	83 c4 20             	add    $0x20,%esp
   10917:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   1091a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1091e:	79 1a                	jns    1093a <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10920:	83 ec 08             	sub    $0x8,%esp
   10923:	ff 75 e4             	push   -0x1c(%ebp)
   10926:	68 e0 38 01 00       	push   $0x138e0
   1092b:	e8 b1 2d 00 00       	call   136e1 <log_printf>
   10930:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10933:	b8 00 00 00 00       	mov    $0x0,%eax
   10938:	eb 1c                	jmp    10956 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   1093a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10941:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10945:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10948:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   1094b:	0f 8c 7a ff ff ff    	jl     108cb <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10951:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10956:	c9                   	leave  
   10957:	c3                   	ret    

00010958 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10958:	55                   	push   %ebp
   10959:	89 e5                	mov    %esp,%ebp
   1095b:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   1095e:	e8 b1 07 00 00       	call   11114 <task_current>
   10963:	8b 40 68             	mov    0x68(%eax),%eax
   10966:	ff 75 10             	push   0x10(%ebp)
   10969:	ff 75 0c             	push   0xc(%ebp)
   1096c:	ff 75 08             	push   0x8(%ebp)
   1096f:	50                   	push   %eax
   10970:	e8 2b ff ff ff       	call   108a0 <memory_alloc_for_page_dir>
   10975:	83 c4 10             	add    $0x10,%esp
}
   10978:	c9                   	leave  
   10979:	c3                   	ret    

0001097a <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   1097a:	55                   	push   %ebp
   1097b:	89 e5                	mov    %esp,%ebp
   1097d:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10980:	83 ec 08             	sub    $0x8,%esp
   10983:	6a 01                	push   $0x1
   10985:	68 00 60 01 00       	push   $0x16000
   1098a:	e8 3f fa ff ff       	call   103ce <addr_alloc_page>
   1098f:	83 c4 10             	add    $0x10,%esp
   10992:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10995:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10998:	c9                   	leave  
   10999:	c3                   	ret    

0001099a <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   1099a:	55                   	push   %ebp
   1099b:	89 e5                	mov    %esp,%ebp
   1099d:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   109a0:	e8 6f 07 00 00       	call   11114 <task_current>
   109a5:	8b 40 68             	mov    0x68(%eax),%eax
}
   109a8:	c9                   	leave  
   109a9:	c3                   	ret    

000109aa <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   109aa:	55                   	push   %ebp
   109ab:	89 e5                	mov    %esp,%ebp
   109ad:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   109b0:	8b 45 08             	mov    0x8(%ebp),%eax
   109b3:	85 c0                	test   %eax,%eax
   109b5:	78 17                	js     109ce <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   109b7:	83 ec 04             	sub    $0x4,%esp
   109ba:	6a 01                	push   $0x1
   109bc:	ff 75 08             	push   0x8(%ebp)
   109bf:	68 00 60 01 00       	push   $0x16000
   109c4:	e8 6c fa ff ff       	call   10435 <addr_free_page>
   109c9:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

   109cc:	eb 72                	jmp    10a40 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   109ce:	e8 c7 ff ff ff       	call   1099a <curr_page_dir>
   109d3:	83 ec 04             	sub    $0x4,%esp
   109d6:	6a 00                	push   $0x0
   109d8:	ff 75 08             	push   0x8(%ebp)
   109db:	50                   	push   %eax
   109dc:	e8 52 fb ff ff       	call   10533 <find_pte>
   109e1:	83 c4 10             	add    $0x10,%esp
   109e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   109e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109eb:	74 0d                	je     109fa <memory_free_page+0x50>
   109ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109f0:	0f b6 00             	movzbl (%eax),%eax
   109f3:	83 e0 01             	and    $0x1,%eax
   109f6:	84 c0                	test   %al,%al
   109f8:	75 1c                	jne    10a16 <memory_free_page+0x6c>
   109fa:	68 00 39 01 00       	push   $0x13900
   109ff:	68 44 39 01 00       	push   $0x13944
   10a04:	68 8c 01 00 00       	push   $0x18c
   10a09:	68 28 38 01 00       	push   $0x13828
   10a0e:	e8 ff 1f 00 00       	call   12a12 <pannic>
   10a13:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10a16:	83 ec 0c             	sub    $0xc,%esp
   10a19:	ff 75 f4             	push   -0xc(%ebp)
   10a1c:	e8 18 f9 ff ff       	call   10339 <pte_to_pg_addr>
   10a21:	83 c4 10             	add    $0x10,%esp
   10a24:	83 ec 04             	sub    $0x4,%esp
   10a27:	6a 01                	push   $0x1
   10a29:	50                   	push   %eax
   10a2a:	68 00 60 01 00       	push   $0x16000
   10a2f:	e8 01 fa ff ff       	call   10435 <addr_free_page>
   10a34:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10a40:	90                   	nop
   10a41:	c9                   	leave  
   10a42:	c3                   	ret    

00010a43 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10a43:	55                   	push   %ebp
   10a44:	89 e5                	mov    %esp,%ebp
   10a46:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a4d:	75 19                	jne    10a68 <list_node_init+0x25>
   10a4f:	68 58 39 01 00       	push   $0x13958
   10a54:	68 44 3a 01 00       	push   $0x13a44
   10a59:	6a 20                	push   $0x20
   10a5b:	68 70 39 01 00       	push   $0x13970
   10a60:	e8 ad 1f 00 00       	call   12a12 <pannic>
   10a65:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10a68:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10a72:	8b 45 08             	mov    0x8(%ebp),%eax
   10a75:	8b 50 04             	mov    0x4(%eax),%edx
   10a78:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7b:	89 10                	mov    %edx,(%eax)
}
   10a7d:	90                   	nop
   10a7e:	c9                   	leave  
   10a7f:	c3                   	ret    

00010a80 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
   10a83:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a8a:	75 19                	jne    10aa5 <list_node_next+0x25>
   10a8c:	68 58 39 01 00       	push   $0x13958
   10a91:	68 b4 3a 01 00       	push   $0x13ab4
   10a96:	6a 2b                	push   $0x2b
   10a98:	68 70 39 01 00       	push   $0x13970
   10a9d:	e8 70 1f 00 00       	call   12a12 <pannic>
   10aa2:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa8:	8b 40 04             	mov    0x4(%eax),%eax
}
   10aab:	c9                   	leave  
   10aac:	c3                   	ret    

00010aad <list_init>:

static inline void list_init(list_t *list) {
   10aad:	55                   	push   %ebp
   10aae:	89 e5                	mov    %esp,%ebp
   10ab0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10ab3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ab7:	75 19                	jne    10ad2 <list_init+0x25>
   10ab9:	68 ae 39 01 00       	push   $0x139ae
   10abe:	68 54 3a 01 00       	push   $0x13a54
   10ac3:	6a 31                	push   $0x31
   10ac5:	68 70 39 01 00       	push   $0x13970
   10aca:	e8 43 1f 00 00       	call   12a12 <pannic>
   10acf:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10adc:	8b 45 08             	mov    0x8(%ebp),%eax
   10adf:	8b 50 04             	mov    0x4(%eax),%edx
   10ae2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae5:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   10aea:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10af1:	90                   	nop
   10af2:	c9                   	leave  
   10af3:	c3                   	ret    

00010af4 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10af4:	55                   	push   %ebp
   10af5:	89 e5                	mov    %esp,%ebp
   10af7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10afa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10afe:	75 19                	jne    10b19 <list_is_empty+0x25>
   10b00:	68 ae 39 01 00       	push   $0x139ae
   10b05:	68 c4 3a 01 00       	push   $0x13ac4
   10b0a:	6a 38                	push   $0x38
   10b0c:	68 70 39 01 00       	push   $0x13970
   10b11:	e8 fc 1e 00 00       	call   12a12 <pannic>
   10b16:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10b19:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1c:	8b 40 08             	mov    0x8(%eax),%eax
   10b1f:	85 c0                	test   %eax,%eax
   10b21:	0f 94 c0             	sete   %al
   10b24:	0f b6 c0             	movzbl %al,%eax
}
   10b27:	c9                   	leave  
   10b28:	c3                   	ret    

00010b29 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10b29:	55                   	push   %ebp
   10b2a:	89 e5                	mov    %esp,%ebp
   10b2c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b33:	75 19                	jne    10b4e <list_get_size+0x25>
   10b35:	68 ae 39 01 00       	push   $0x139ae
   10b3a:	68 a4 3a 01 00       	push   $0x13aa4
   10b3f:	6a 3e                	push   $0x3e
   10b41:	68 70 39 01 00       	push   $0x13970
   10b46:	e8 c7 1e 00 00       	call   12a12 <pannic>
   10b4b:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b51:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b54:	c9                   	leave  
   10b55:	c3                   	ret    

00010b56 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10b56:	55                   	push   %ebp
   10b57:	89 e5                	mov    %esp,%ebp
   10b59:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b60:	75 19                	jne    10b7b <list_get_first+0x25>
   10b62:	68 ae 39 01 00       	push   $0x139ae
   10b67:	68 94 3a 01 00       	push   $0x13a94
   10b6c:	6a 44                	push   $0x44
   10b6e:	68 70 39 01 00       	push   $0x13970
   10b73:	e8 9a 1e 00 00       	call   12a12 <pannic>
   10b78:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7e:	8b 00                	mov    (%eax),%eax
}
   10b80:	c9                   	leave  
   10b81:	c3                   	ret    

00010b82 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10b82:	55                   	push   %ebp
   10b83:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10b85:	8b 55 08             	mov    0x8(%ebp),%edx
   10b88:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b8b:	01 d0                	add    %edx,%eax
   10b8d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b90:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b93:	f7 d8                	neg    %eax
   10b95:	21 d0                	and    %edx,%eax
}
   10b97:	5d                   	pop    %ebp
   10b98:	c3                   	ret    

00010b99 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10b99:	55                   	push   %ebp
   10b9a:	89 e5                	mov    %esp,%ebp
   10b9c:	f4                   	hlt    
   10b9d:	90                   	nop
   10b9e:	5d                   	pop    %ebp
   10b9f:	c3                   	ret    

00010ba0 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10ba0:	55                   	push   %ebp
   10ba1:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba6:	0f 22 d8             	mov    %eax,%cr3
}
   10ba9:	90                   	nop
   10baa:	5d                   	pop    %ebp
   10bab:	c3                   	ret    

00010bac <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
   10baf:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10bb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bb5:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbb:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10bbe:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10bc1:	ff 28                	ljmp   *(%eax)
}
   10bc3:	90                   	nop
   10bc4:	c9                   	leave  
   10bc5:	c3                   	ret    

00010bc6 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10bc6:	55                   	push   %ebp
   10bc7:	89 e5                	mov    %esp,%ebp
   10bc9:	83 ec 04             	sub    $0x4,%esp
   10bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10bd3:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bd7:	0f 00 d8             	ltr    %ax
}
   10bda:	90                   	nop
   10bdb:	c9                   	leave  
   10bdc:	c3                   	ret    

00010bdd <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10bdd:	55                   	push   %ebp
   10bde:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10be0:	ff 75 08             	push   0x8(%ebp)
   10be3:	e8 b8 ff ff ff       	call   10ba0 <write_cr3>
   10be8:	83 c4 04             	add    $0x4,%esp
}
   10beb:	90                   	nop
   10bec:	c9                   	leave  
   10bed:	c3                   	ret    

00010bee <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10bee:	55                   	push   %ebp
   10bef:	89 e5                	mov    %esp,%ebp
   10bf1:	83 ec 04             	sub    $0x4,%esp
   10bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10bfb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bff:	6a 00                	push   $0x0
   10c01:	50                   	push   %eax
   10c02:	e8 a5 ff ff ff       	call   10bac <far_jump>
   10c07:	83 c4 08             	add    $0x8,%esp
}
   10c0a:	90                   	nop
   10c0b:	c9                   	leave  
   10c0c:	c3                   	ret    

00010c0d <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10c0d:	55                   	push   %ebp
   10c0e:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10c10:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c13:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   10c19:	0f b7 c0             	movzwl %ax,%eax
   10c1c:	50                   	push   %eax
   10c1d:	e8 cc ff ff ff       	call   10bee <switch_to_tss>
   10c22:	83 c4 04             	add    $0x4,%esp
}
   10c25:	90                   	nop
   10c26:	c9                   	leave  
   10c27:	c3                   	ret    

00010c28 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   10c28:	55                   	push   %ebp
   10c29:	89 e5                	mov    %esp,%ebp
   10c2b:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10c2e:	e8 b4 09 00 00       	call   115e7 <gdt_alloc_desc>
   10c33:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10c36:	8b 45 08             	mov    0x8(%ebp),%eax
   10c39:	83 c0 4c             	add    $0x4c,%eax
   10c3c:	89 c2                	mov    %eax,%edx
   10c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c41:	0f b7 c0             	movzwl %ax,%eax
   10c44:	68 89 00 00 00       	push   $0x89
   10c49:	6a 68                	push   $0x68
   10c4b:	52                   	push   %edx
   10c4c:	50                   	push   %eax
   10c4d:	e8 23 08 00 00       	call   11475 <segment_desc_set>
   10c52:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10c55:	8b 45 08             	mov    0x8(%ebp),%eax
   10c58:	83 c0 4c             	add    $0x4c,%eax
   10c5b:	83 ec 04             	sub    $0x4,%esp
   10c5e:	6a 68                	push   $0x68
   10c60:	6a 00                	push   $0x0
   10c62:	50                   	push   %eax
   10c63:	e8 ac 22 00 00       	call   12f14 <kernel_memset>
   10c68:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c71:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   10c77:	8b 45 14             	mov    0x14(%ebp),%eax
   10c7a:	83 e0 01             	and    $0x1,%eax
   10c7d:	85 c0                	test   %eax,%eax
   10c7f:	74 10                	je     10c91 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   10c81:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   10c88:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c8f:	eb 16                	jmp    10ca7 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   10c91:	a1 98 81 01 00       	mov    0x18198,%eax
   10c96:	83 c8 03             	or     $0x3,%eax
   10c99:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   10c9c:	a1 9c 81 01 00       	mov    0x1819c,%eax
   10ca1:	83 c8 03             	or     $0x3,%eax
   10ca4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   10caa:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cad:	89 50 6c             	mov    %edx,0x6c(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   10cb0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb3:	8b 55 10             	mov    0x10(%ebp),%edx
   10cb6:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   10cbc:	e8 b9 fc ff ff       	call   1097a <memory_alloc_page>
   10cc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   10cc4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10cc8:	0f 84 9b 00 00 00    	je     10d69 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   10cce:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cd1:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cda:	89 50 50             	mov    %edx,0x50(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   10cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ce3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   10ce9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cec:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cf9:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10cff:	8b 45 08             	mov    0x8(%ebp),%eax
   10d02:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d08:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0b:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d11:	8b 45 08             	mov    0x8(%ebp),%eax
   10d14:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1d:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10d23:	8b 45 08             	mov    0x8(%ebp),%eax
   10d26:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10d35:	8b 45 08             	mov    0x8(%ebp),%eax
   10d38:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d3b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10d41:	8b 45 08             	mov    0x8(%ebp),%eax
   10d44:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10d4b:	e8 d2 f9 ff ff       	call   10722 <memory_creat_uvm>
   10d50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   10d53:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d57:	74 13                	je     10d6c <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   10d59:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d5f:	89 50 68             	mov    %edx,0x68(%eax)
    
    return 0;
   10d62:	b8 00 00 00 00       	mov    $0x0,%eax
   10d67:	eb 2f                	jmp    10d98 <tss_init+0x170>
        goto tss_init_failed;   
   10d69:	90                   	nop
   10d6a:	eb 01                	jmp    10d6d <tss_init+0x145>
        goto tss_init_failed;
   10d6c:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   10d6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d70:	0f b7 c0             	movzwl %ax,%eax
   10d73:	83 ec 0c             	sub    $0xc,%esp
   10d76:	50                   	push   %eax
   10d77:	e8 e0 08 00 00       	call   1165c <gdt_free>
   10d7c:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   10d7f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d83:	74 0e                	je     10d93 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   10d85:	83 ec 0c             	sub    $0xc,%esp
   10d88:	ff 75 e8             	push   -0x18(%ebp)
   10d8b:	e8 1a fc ff ff       	call   109aa <memory_free_page>
   10d90:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d98:	c9                   	leave  
   10d99:	c3                   	ret    

00010d9a <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   10d9a:	55                   	push   %ebp
   10d9b:	89 e5                	mov    %esp,%ebp
   10d9d:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10da0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10da4:	75 1c                	jne    10dc2 <task_init+0x28>
   10da6:	68 c1 39 01 00       	push   $0x139c1
   10dab:	68 38 3a 01 00       	push   $0x13a38
   10db0:	68 86 00 00 00       	push   $0x86
   10db5:	68 d4 39 01 00       	push   $0x139d4
   10dba:	e8 53 1c 00 00       	call   12a12 <pannic>
   10dbf:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp, flag);
   10dc2:	ff 75 18             	push   0x18(%ebp)
   10dc5:	ff 75 14             	push   0x14(%ebp)
   10dc8:	ff 75 10             	push   0x10(%ebp)
   10dcb:	ff 75 08             	push   0x8(%ebp)
   10dce:	e8 55 fe ff ff       	call   10c28 <tss_init>
   10dd3:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd9:	83 c0 14             	add    $0x14,%eax
   10ddc:	83 ec 04             	sub    $0x4,%esp
   10ddf:	6a 20                	push   $0x20
   10de1:	ff 75 0c             	push   0xc(%ebp)
   10de4:	50                   	push   %eax
   10de5:	e8 eb 1f 00 00       	call   12dd5 <kernel_strncpy>
   10dea:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10ded:	8b 45 08             	mov    0x8(%ebp),%eax
   10df0:	83 c0 34             	add    $0x34,%eax
   10df3:	83 ec 0c             	sub    $0xc,%esp
   10df6:	50                   	push   %eax
   10df7:	e8 47 fc ff ff       	call   10a43 <list_node_init>
   10dfc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10dff:	8b 45 08             	mov    0x8(%ebp),%eax
   10e02:	83 c0 3c             	add    $0x3c,%eax
   10e05:	83 ec 0c             	sub    $0xc,%esp
   10e08:	50                   	push   %eax
   10e09:	e8 35 fc ff ff       	call   10a43 <list_node_init>
   10e0e:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10e11:	8b 45 08             	mov    0x8(%ebp),%eax
   10e14:	83 c0 44             	add    $0x44,%eax
   10e17:	83 ec 0c             	sub    $0xc,%esp
   10e1a:	50                   	push   %eax
   10e1b:	e8 23 fc ff ff       	call   10a43 <list_node_init>
   10e20:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10e23:	8b 45 08             	mov    0x8(%ebp),%eax
   10e26:	c7 40 0c 0a 00 00 00 	movl   $0xa,0xc(%eax)
   10e2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e30:	8b 50 0c             	mov    0xc(%eax),%edx
   10e33:	8b 45 08             	mov    0x8(%ebp),%eax
   10e36:	89 50 08             	mov    %edx,0x8(%eax)
    task->sleep = 0;
   10e39:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    task->pid = (uint32_t)task;
   10e43:	8b 55 08             	mov    0x8(%ebp),%edx
   10e46:	8b 45 08             	mov    0x8(%ebp),%eax
   10e49:	89 50 04             	mov    %edx,0x4(%eax)
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10e4c:	e8 c1 11 00 00       	call   12012 <idt_enter_protection>
   10e51:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10e54:	8b 45 08             	mov    0x8(%ebp),%eax
   10e57:	83 c0 3c             	add    $0x3c,%eax
   10e5a:	83 ec 08             	sub    $0x8,%esp
   10e5d:	50                   	push   %eax
   10e5e:	68 10 80 01 00       	push   $0x18010
   10e63:	e8 f5 24 00 00       	call   1335d <list_insert_last>
   10e68:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10e6b:	83 ec 0c             	sub    $0xc,%esp
   10e6e:	ff 75 08             	push   0x8(%ebp)
   10e71:	e8 da 01 00 00       	call   11050 <task_set_ready>
   10e76:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10e79:	83 ec 0c             	sub    $0xc,%esp
   10e7c:	ff 75 f4             	push   -0xc(%ebp)
   10e7f:	e8 a6 11 00 00       	call   1202a <idt_leave_protection>
   10e84:	83 c4 10             	add    $0x10,%esp
}
   10e87:	90                   	nop
   10e88:	c9                   	leave  
   10e89:	c3                   	ret    

00010e8a <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10e8a:	55                   	push   %ebp
   10e8b:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10e8d:	e8 07 fd ff ff       	call   10b99 <hlt>
   10e92:	eb f9                	jmp    10e8d <empty_task+0x3>

00010e94 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10e94:	55                   	push   %ebp
   10e95:	89 e5                	mov    %esp,%ebp
   10e97:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   10e9a:	e8 48 07 00 00       	call   115e7 <gdt_alloc_desc>
   10e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   10ea2:	e8 40 07 00 00       	call   115e7 <gdt_alloc_desc>
   10ea7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ead:	0f b7 c0             	movzwl %ax,%eax
   10eb0:	68 f2 40 00 00       	push   $0x40f2
   10eb5:	6a ff                	push   $0xffffffff
   10eb7:	6a 00                	push   $0x0
   10eb9:	50                   	push   %eax
   10eba:	e8 b6 05 00 00       	call   11475 <segment_desc_set>
   10ebf:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ec5:	0f b7 c0             	movzwl %ax,%eax
   10ec8:	68 fa 40 00 00       	push   $0x40fa
   10ecd:	6a ff                	push   $0xffffffff
   10ecf:	6a 00                	push   $0x0
   10ed1:	50                   	push   %eax
   10ed2:	e8 9e 05 00 00       	call   11475 <segment_desc_set>
   10ed7:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   10eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10edd:	a3 98 81 01 00       	mov    %eax,0x18198
    task_manager.app_data_selector = data_selector;
   10ee2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ee5:	a3 9c 81 01 00       	mov    %eax,0x1819c
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10eea:	83 ec 0c             	sub    $0xc,%esp
   10eed:	68 04 80 01 00       	push   $0x18004
   10ef2:	e8 b6 fb ff ff       	call   10aad <list_init>
   10ef7:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10efa:	83 ec 0c             	sub    $0xc,%esp
   10efd:	68 10 80 01 00       	push   $0x18010
   10f02:	e8 a6 fb ff ff       	call   10aad <list_init>
   10f07:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10f0a:	83 ec 0c             	sub    $0xc,%esp
   10f0d:	68 1c 80 01 00       	push   $0x1801c
   10f12:	e8 96 fb ff ff       	call   10aad <list_init>
   10f17:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10f1a:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10f21:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10f24:	ba a0 83 01 00       	mov    $0x183a0,%edx
   10f29:	b8 8a 0e 01 00       	mov    $0x10e8a,%eax
   10f2e:	83 ec 0c             	sub    $0xc,%esp
   10f31:	6a 01                	push   $0x1
   10f33:	52                   	push   %edx
   10f34:	50                   	push   %eax
   10f35:	68 09 3a 01 00       	push   $0x13a09
   10f3a:	68 e0 80 01 00       	push   $0x180e0
   10f3f:	e8 56 fe ff ff       	call   10d9a <task_init>
   10f44:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 

    //5.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10f47:	83 ec 0c             	sub    $0xc,%esp
   10f4a:	68 e0 80 01 00       	push   $0x180e0
   10f4f:	e8 47 01 00 00       	call   1109b <task_set_unready>
   10f54:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10f57:	c7 05 e0 80 01 00 00 	movl   $0x0,0x180e0
   10f5e:	00 00 00 

  
}
   10f61:	90                   	nop
   10f62:	c9                   	leave  
   10f63:	c3                   	ret    

00010f64 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   10f64:	55                   	push   %ebp
   10f65:	89 e5                	mov    %esp,%ebp
   10f67:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   10f6a:	b8 be d0 02 00       	mov    $0x2d0be,%eax
   10f6f:	2d 00 d0 02 00       	sub    $0x2d000,%eax
   10f74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   10f77:	68 00 10 00 00       	push   $0x1000
   10f7c:	ff 75 f4             	push   -0xc(%ebp)
   10f7f:	e8 fe fb ff ff       	call   10b82 <up2>
   10f84:	83 c4 08             	add    $0x8,%esp
   10f87:	05 00 a0 00 00       	add    $0xa000,%eax
   10f8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f92:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10f95:	72 1c                	jb     10fb3 <task_first_init+0x4f>
   10f97:	68 14 3a 01 00       	push   $0x13a14
   10f9c:	68 60 3a 01 00       	push   $0x13a60
   10fa1:	68 09 01 00 00       	push   $0x109
   10fa6:	68 d4 39 01 00       	push   $0x139d4
   10fab:	e8 62 1a 00 00       	call   12a12 <pannic>
   10fb0:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start = (uint32_t)first_task_entry;
   10fb3:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start, task_start + alloc_size, TASK_FLAGS_USER);
   10fba:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fc0:	01 d0                	add    %edx,%eax
   10fc2:	83 ec 0c             	sub    $0xc,%esp
   10fc5:	6a 00                	push   $0x0
   10fc7:	50                   	push   %eax
   10fc8:	ff 75 ec             	push   -0x14(%ebp)
   10fcb:	68 2b 3a 01 00       	push   $0x13a2b
   10fd0:	68 28 80 01 00       	push   $0x18028
   10fd5:	e8 c0 fd ff ff       	call   10d9a <task_init>
   10fda:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   10fdd:	a1 dc 80 01 00       	mov    0x180dc,%eax
   10fe2:	0f b7 c0             	movzwl %ax,%eax
   10fe5:	83 ec 0c             	sub    $0xc,%esp
   10fe8:	50                   	push   %eax
   10fe9:	e8 d8 fb ff ff       	call   10bc6 <write_tr>
   10fee:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   10ff1:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   10ff8:	80 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10ffb:	a1 90 80 01 00       	mov    0x18090,%eax
   11000:	83 ec 0c             	sub    $0xc,%esp
   11003:	50                   	push   %eax
   11004:	e8 d4 fb ff ff       	call   10bdd <mmu_set_page_dir>
   11009:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   1100c:	a1 00 80 01 00       	mov    0x18000,%eax
   11011:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start, alloc_size, PTE_P | PTE_W | PTE_U);
   11017:	83 ec 04             	sub    $0x4,%esp
   1101a:	6a 07                	push   $0x7
   1101c:	ff 75 f0             	push   -0x10(%ebp)
   1101f:	ff 75 ec             	push   -0x14(%ebp)
   11022:	e8 31 f9 ff ff       	call   10958 <memory_alloc_page_for>
   11027:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   1102a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102d:	83 ec 04             	sub    $0x4,%esp
   11030:	50                   	push   %eax
   11031:	68 00 d0 02 00       	push   $0x2d000
   11036:	68 00 00 00 80       	push   $0x80000000
   1103b:	e8 85 1e 00 00       	call   12ec5 <kernel_memcpy>
   11040:	83 c4 10             	add    $0x10,%esp
}
   11043:	90                   	nop
   11044:	c9                   	leave  
   11045:	c3                   	ret    

00011046 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   11046:	55                   	push   %ebp
   11047:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11049:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   1104e:	5d                   	pop    %ebp
   1104f:	c3                   	ret    

00011050 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   11050:	55                   	push   %ebp
   11051:	89 e5                	mov    %esp,%ebp
   11053:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11056:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1105a:	75 1c                	jne    11078 <task_set_ready+0x28>
   1105c:	68 c1 39 01 00       	push   $0x139c1
   11061:	68 70 3a 01 00       	push   $0x13a70
   11066:	68 33 01 00 00       	push   $0x133
   1106b:	68 d4 39 01 00       	push   $0x139d4
   11070:	e8 9d 19 00 00       	call   12a12 <pannic>
   11075:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   11078:	8b 45 08             	mov    0x8(%ebp),%eax
   1107b:	83 c0 34             	add    $0x34,%eax
   1107e:	83 ec 08             	sub    $0x8,%esp
   11081:	50                   	push   %eax
   11082:	68 04 80 01 00       	push   $0x18004
   11087:	e8 d1 22 00 00       	call   1335d <list_insert_last>
   1108c:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1108f:	8b 45 08             	mov    0x8(%ebp),%eax
   11092:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11098:	90                   	nop
   11099:	c9                   	leave  
   1109a:	c3                   	ret    

0001109b <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   1109b:	55                   	push   %ebp
   1109c:	89 e5                	mov    %esp,%ebp
   1109e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   110a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110a5:	75 1c                	jne    110c3 <task_set_unready+0x28>
   110a7:	68 c1 39 01 00       	push   $0x139c1
   110ac:	68 80 3a 01 00       	push   $0x13a80
   110b1:	68 42 01 00 00       	push   $0x142
   110b6:	68 d4 39 01 00       	push   $0x139d4
   110bb:	e8 52 19 00 00       	call   12a12 <pannic>
   110c0:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   110c3:	8b 45 08             	mov    0x8(%ebp),%eax
   110c6:	83 c0 34             	add    $0x34,%eax
   110c9:	83 ec 08             	sub    $0x8,%esp
   110cc:	50                   	push   %eax
   110cd:	68 04 80 01 00       	push   $0x18004
   110d2:	e8 7b 24 00 00       	call   13552 <list_remove>
   110d7:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   110da:	8b 45 08             	mov    0x8(%ebp),%eax
   110dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   110e3:	90                   	nop
   110e4:	c9                   	leave  
   110e5:	c3                   	ret    

000110e6 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   110e6:	55                   	push   %ebp
   110e7:	89 e5                	mov    %esp,%ebp
   110e9:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   110ec:	83 ec 0c             	sub    $0xc,%esp
   110ef:	68 04 80 01 00       	push   $0x18004
   110f4:	e8 5d fa ff ff       	call   10b56 <list_get_first>
   110f9:	83 c4 10             	add    $0x10,%esp
   110fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   110ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11103:	74 08                	je     1110d <task_ready_first+0x27>
   11105:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11108:	83 e8 34             	sub    $0x34,%eax
   1110b:	eb 05                	jmp    11112 <task_ready_first+0x2c>
   1110d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11112:	c9                   	leave  
   11113:	c3                   	ret    

00011114 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   11114:	55                   	push   %ebp
   11115:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11117:	a1 00 80 01 00       	mov    0x18000,%eax
}
   1111c:	5d                   	pop    %ebp
   1111d:	c3                   	ret    

0001111e <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   1111e:	55                   	push   %ebp
   1111f:	89 e5                	mov    %esp,%ebp
   11121:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11124:	e8 e9 0e 00 00       	call   12012 <idt_enter_protection>
   11129:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   1112c:	e8 b5 ff ff ff       	call   110e6 <task_ready_first>
   11131:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   11134:	a1 00 80 01 00       	mov    0x18000,%eax
   11139:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1113c:	74 37                	je     11175 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   1113e:	a1 00 80 01 00       	mov    0x18000,%eax
   11143:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   11146:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1114a:	75 07                	jne    11153 <task_switch+0x35>
            to = &task_manager.empty_task;
   1114c:	c7 45 f4 e0 80 01 00 	movl   $0x180e0,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   11153:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11156:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   1115c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1115f:	a3 00 80 01 00       	mov    %eax,0x18000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   11164:	83 ec 08             	sub    $0x8,%esp
   11167:	ff 75 f4             	push   -0xc(%ebp)
   1116a:	ff 75 ec             	push   -0x14(%ebp)
   1116d:	e8 9b fa ff ff       	call   10c0d <task_switch_from_to>
   11172:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   11175:	83 ec 0c             	sub    $0xc,%esp
   11178:	ff 75 f0             	push   -0x10(%ebp)
   1117b:	e8 aa 0e 00 00       	call   1202a <idt_leave_protection>
   11180:	83 c4 10             	add    $0x10,%esp
}
   11183:	90                   	nop
   11184:	c9                   	leave  
   11185:	c3                   	ret    

00011186 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11186:	55                   	push   %ebp
   11187:	89 e5                	mov    %esp,%ebp
   11189:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1118c:	e8 81 0e 00 00       	call   12012 <idt_enter_protection>
   11191:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11194:	83 ec 0c             	sub    $0xc,%esp
   11197:	68 04 80 01 00       	push   $0x18004
   1119c:	e8 88 f9 ff ff       	call   10b29 <list_get_size>
   111a1:	83 c4 10             	add    $0x10,%esp
   111a4:	83 f8 01             	cmp    $0x1,%eax
   111a7:	7e 29                	jle    111d2 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   111a9:	e8 66 ff ff ff       	call   11114 <task_current>
   111ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   111b1:	83 ec 0c             	sub    $0xc,%esp
   111b4:	ff 75 f0             	push   -0x10(%ebp)
   111b7:	e8 df fe ff ff       	call   1109b <task_set_unready>
   111bc:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   111bf:	83 ec 0c             	sub    $0xc,%esp
   111c2:	ff 75 f0             	push   -0x10(%ebp)
   111c5:	e8 86 fe ff ff       	call   11050 <task_set_ready>
   111ca:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   111cd:	e8 4c ff ff ff       	call   1111e <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   111d2:	83 ec 0c             	sub    $0xc,%esp
   111d5:	ff 75 f4             	push   -0xc(%ebp)
   111d8:	e8 4d 0e 00 00       	call   1202a <idt_leave_protection>
   111dd:	83 c4 10             	add    $0x10,%esp
    return 0;
   111e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111e5:	c9                   	leave  
   111e6:	c3                   	ret    

000111e7 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   111e7:	55                   	push   %ebp
   111e8:	89 e5                	mov    %esp,%ebp
   111ea:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   111ed:	83 ec 0c             	sub    $0xc,%esp
   111f0:	68 1c 80 01 00       	push   $0x1801c
   111f5:	e8 5c f9 ff ff       	call   10b56 <list_get_first>
   111fa:	83 c4 10             	add    $0x10,%esp
   111fd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   11200:	eb 62                	jmp    11264 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11202:	83 ec 0c             	sub    $0xc,%esp
   11205:	ff 75 f4             	push   -0xc(%ebp)
   11208:	e8 73 f8 ff ff       	call   10a80 <list_node_next>
   1120d:	83 c4 10             	add    $0x10,%esp
   11210:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   11213:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11217:	74 08                	je     11221 <task_slice_end+0x3a>
   11219:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1121c:	83 e8 34             	sub    $0x34,%eax
   1121f:	eb 05                	jmp    11226 <task_slice_end+0x3f>
   11221:	b8 00 00 00 00       	mov    $0x0,%eax
   11226:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11229:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1122c:	8b 40 10             	mov    0x10(%eax),%eax
   1122f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11232:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11235:	89 50 10             	mov    %edx,0x10(%eax)
   11238:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1123b:	8b 40 10             	mov    0x10(%eax),%eax
   1123e:	85 c0                	test   %eax,%eax
   11240:	75 1c                	jne    1125e <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11242:	83 ec 0c             	sub    $0xc,%esp
   11245:	ff 75 e8             	push   -0x18(%ebp)
   11248:	e8 01 01 00 00       	call   1134e <task_set_wakeup>
   1124d:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11250:	83 ec 0c             	sub    $0xc,%esp
   11253:	ff 75 e8             	push   -0x18(%ebp)
   11256:	e8 f5 fd ff ff       	call   11050 <task_set_ready>
   1125b:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1125e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11261:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11264:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11268:	75 98                	jne    11202 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   1126a:	e8 a5 fe ff ff       	call   11114 <task_current>
   1126f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   11272:	81 7d f0 e0 80 01 00 	cmpl   $0x180e0,-0x10(%ebp)
   11279:	75 23                	jne    1129e <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   1127b:	83 ec 0c             	sub    $0xc,%esp
   1127e:	68 04 80 01 00       	push   $0x18004
   11283:	e8 6c f8 ff ff       	call   10af4 <list_is_empty>
   11288:	83 c4 10             	add    $0x10,%esp
   1128b:	85 c0                	test   %eax,%eax
   1128d:	75 60                	jne    112ef <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1128f:	c7 05 e0 80 01 00 00 	movl   $0x0,0x180e0
   11296:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11299:	e8 80 fe ff ff       	call   1111e <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   1129e:	81 7d f0 e0 80 01 00 	cmpl   $0x180e0,-0x10(%ebp)
   112a5:	74 49                	je     112f0 <task_slice_end+0x109>
   112a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112aa:	8b 40 0c             	mov    0xc(%eax),%eax
   112ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112b3:	89 50 0c             	mov    %edx,0xc(%eax)
   112b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112b9:	8b 40 0c             	mov    0xc(%eax),%eax
   112bc:	85 c0                	test   %eax,%eax
   112be:	75 30                	jne    112f0 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   112c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112c3:	8b 50 08             	mov    0x8(%eax),%edx
   112c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112c9:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_unready(curr_task);
   112cc:	83 ec 0c             	sub    $0xc,%esp
   112cf:	ff 75 f0             	push   -0x10(%ebp)
   112d2:	e8 c4 fd ff ff       	call   1109b <task_set_unready>
   112d7:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   112da:	83 ec 0c             	sub    $0xc,%esp
   112dd:	ff 75 f0             	push   -0x10(%ebp)
   112e0:	e8 6b fd ff ff       	call   11050 <task_set_ready>
   112e5:	83 c4 10             	add    $0x10,%esp
        task_switch();
   112e8:	e8 31 fe ff ff       	call   1111e <task_switch>
   112ed:	eb 01                	jmp    112f0 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   112ef:	90                   	nop
    }
}
   112f0:	c9                   	leave  
   112f1:	c3                   	ret    

000112f2 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   112f2:	55                   	push   %ebp
   112f3:	89 e5                	mov    %esp,%ebp
   112f5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   112f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112fc:	75 1c                	jne    1131a <task_set_sleep+0x28>
   112fe:	68 c1 39 01 00       	push   $0x139c1
   11303:	68 d4 3a 01 00       	push   $0x13ad4
   11308:	68 d0 01 00 00       	push   $0x1d0
   1130d:	68 d4 39 01 00       	push   $0x139d4
   11312:	e8 fb 16 00 00       	call   12a12 <pannic>
   11317:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   1131a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1131e:	74 2b                	je     1134b <task_set_sleep+0x59>

    task->sleep = slice;
   11320:	8b 55 0c             	mov    0xc(%ebp),%edx
   11323:	8b 45 08             	mov    0x8(%ebp),%eax
   11326:	89 50 10             	mov    %edx,0x10(%eax)
    task->state = TASK_SLEEP;
   11329:	8b 45 08             	mov    0x8(%ebp),%eax
   1132c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11332:	8b 45 08             	mov    0x8(%ebp),%eax
   11335:	83 c0 34             	add    $0x34,%eax
   11338:	83 ec 08             	sub    $0x8,%esp
   1133b:	50                   	push   %eax
   1133c:	68 1c 80 01 00       	push   $0x1801c
   11341:	e8 17 20 00 00       	call   1335d <list_insert_last>
   11346:	83 c4 10             	add    $0x10,%esp
   11349:	eb 01                	jmp    1134c <task_set_sleep+0x5a>
    if (slice == 0) return;
   1134b:	90                   	nop
}
   1134c:	c9                   	leave  
   1134d:	c3                   	ret    

0001134e <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   1134e:	55                   	push   %ebp
   1134f:	89 e5                	mov    %esp,%ebp
   11351:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11354:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11358:	75 1c                	jne    11376 <task_set_wakeup+0x28>
   1135a:	68 c1 39 01 00       	push   $0x139c1
   1135f:	68 e4 3a 01 00       	push   $0x13ae4
   11364:	68 de 01 00 00       	push   $0x1de
   11369:	68 d4 39 01 00       	push   $0x139d4
   1136e:	e8 9f 16 00 00       	call   12a12 <pannic>
   11373:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11376:	8b 45 08             	mov    0x8(%ebp),%eax
   11379:	83 c0 34             	add    $0x34,%eax
   1137c:	83 ec 08             	sub    $0x8,%esp
   1137f:	50                   	push   %eax
   11380:	68 1c 80 01 00       	push   $0x1801c
   11385:	e8 c8 21 00 00       	call   13552 <list_remove>
   1138a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1138d:	8b 45 08             	mov    0x8(%ebp),%eax
   11390:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11396:	90                   	nop
   11397:	c9                   	leave  
   11398:	c3                   	ret    

00011399 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11399:	55                   	push   %ebp
   1139a:	89 e5                	mov    %esp,%ebp
   1139c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1139f:	e8 6e 0c 00 00       	call   12012 <idt_enter_protection>
   113a4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   113a7:	e8 68 fd ff ff       	call   11114 <task_current>
   113ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   113af:	83 ec 0c             	sub    $0xc,%esp
   113b2:	ff 75 f0             	push   -0x10(%ebp)
   113b5:	e8 e1 fc ff ff       	call   1109b <task_set_unready>
   113ba:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   113bd:	8b 45 08             	mov    0x8(%ebp),%eax
   113c0:	83 c0 09             	add    $0x9,%eax
   113c3:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   113c8:	f7 e2                	mul    %edx
   113ca:	89 d0                	mov    %edx,%eax
   113cc:	c1 e8 03             	shr    $0x3,%eax
   113cf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   113d2:	83 ec 08             	sub    $0x8,%esp
   113d5:	ff 75 ec             	push   -0x14(%ebp)
   113d8:	ff 75 f0             	push   -0x10(%ebp)
   113db:	e8 12 ff ff ff       	call   112f2 <task_set_sleep>
   113e0:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   113e3:	e8 36 fd ff ff       	call   1111e <task_switch>

    idt_leave_protection(state); //TODO:解锁
   113e8:	83 ec 0c             	sub    $0xc,%esp
   113eb:	ff 75 f4             	push   -0xc(%ebp)
   113ee:	e8 37 0c 00 00       	call   1202a <idt_leave_protection>
   113f3:	83 c4 10             	add    $0x10,%esp
}
   113f6:	90                   	nop
   113f7:	c9                   	leave  
   113f8:	c3                   	ret    

000113f9 <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   113f9:	55                   	push   %ebp
   113fa:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   113fc:	e8 13 fd ff ff       	call   11114 <task_current>
   11401:	8b 40 04             	mov    0x4(%eax),%eax
   11404:	5d                   	pop    %ebp
   11405:	c3                   	ret    

00011406 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11406:	55                   	push   %ebp
   11407:	89 e5                	mov    %esp,%ebp
   11409:	83 ec 08             	sub    $0x8,%esp
   1140c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1140f:	8b 45 14             	mov    0x14(%ebp),%eax
   11412:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11416:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   1141a:	8b 45 10             	mov    0x10(%ebp),%eax
   1141d:	89 c2                	mov    %eax,%edx
   1141f:	8b 45 08             	mov    0x8(%ebp),%eax
   11422:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11425:	8b 45 10             	mov    0x10(%ebp),%eax
   11428:	c1 e8 10             	shr    $0x10,%eax
   1142b:	89 c2                	mov    %eax,%edx
   1142d:	8b 45 08             	mov    0x8(%ebp),%eax
   11430:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11434:	8b 45 08             	mov    0x8(%ebp),%eax
   11437:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1143b:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1143f:	8b 45 08             	mov    0x8(%ebp),%eax
   11442:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11446:	66 89 50 04          	mov    %dx,0x4(%eax)
   1144a:	90                   	nop
   1144b:	c9                   	leave  
   1144c:	c3                   	ret    

0001144d <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1144d:	55                   	push   %ebp
   1144e:	89 e5                	mov    %esp,%ebp
   11450:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   11453:	8b 45 08             	mov    0x8(%ebp),%eax
   11456:	c1 e8 10             	shr    $0x10,%eax
   11459:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1145d:	8b 45 08             	mov    0x8(%ebp),%eax
   11460:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11464:	8b 45 0c             	mov    0xc(%ebp),%eax
   11467:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   1146a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1146e:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11472:	90                   	nop
   11473:	c9                   	leave  
   11474:	c3                   	ret    

00011475 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   11475:	55                   	push   %ebp
   11476:	89 e5                	mov    %esp,%ebp
   11478:	83 ec 18             	sub    $0x18,%esp
   1147b:	8b 55 08             	mov    0x8(%ebp),%edx
   1147e:	8b 45 14             	mov    0x14(%ebp),%eax
   11481:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11485:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11489:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1148d:	66 c1 e8 03          	shr    $0x3,%ax
   11491:	0f b7 c0             	movzwl %ax,%eax
   11494:	c1 e0 03             	shl    $0x3,%eax
   11497:	05 a0 83 01 00       	add    $0x183a0,%eax
   1149c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   1149f:	8b 45 0c             	mov    0xc(%ebp),%eax
   114a2:	89 c2                	mov    %eax,%edx
   114a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114a7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   114ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   114ae:	c1 e8 10             	shr    $0x10,%eax
   114b1:	89 c2                	mov    %eax,%edx
   114b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   114b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   114bc:	c1 e8 18             	shr    $0x18,%eax
   114bf:	89 c2                	mov    %eax,%edx
   114c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114c4:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   114c7:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   114ce:	76 1d                	jbe    114ed <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   114d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d3:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114d7:	66 0d 00 80          	or     $0x8000,%ax
   114db:	89 c2                	mov    %eax,%edx
   114dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e0:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   114e4:	8b 45 10             	mov    0x10(%ebp),%eax
   114e7:	c1 e8 0c             	shr    $0xc,%eax
   114ea:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   114ed:	8b 45 10             	mov    0x10(%ebp),%eax
   114f0:	89 c2                	mov    %eax,%edx
   114f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114f5:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   114f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114fb:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114ff:	89 c2                	mov    %eax,%edx
   11501:	8b 45 10             	mov    0x10(%ebp),%eax
   11504:	c1 e8 08             	shr    $0x8,%eax
   11507:	66 25 00 0f          	and    $0xf00,%ax
   1150b:	09 d0                	or     %edx,%eax
   1150d:	89 c2                	mov    %eax,%edx
   1150f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11512:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   11516:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11519:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1151d:	89 c2                	mov    %eax,%edx
   1151f:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   11523:	80 e4 f0             	and    $0xf0,%ah
   11526:	09 d0                	or     %edx,%eax
   11528:	89 c2                	mov    %eax,%edx
   1152a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1152d:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11531:	90                   	nop
   11532:	c9                   	leave  
   11533:	c3                   	ret    

00011534 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11534:	55                   	push   %ebp
   11535:	89 e5                	mov    %esp,%ebp
   11537:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1153a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11541:	eb 1c                	jmp    1155f <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11543:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11546:	c1 e0 03             	shl    $0x3,%eax
   11549:	0f b7 c0             	movzwl %ax,%eax
   1154c:	6a 00                	push   $0x0
   1154e:	6a 00                	push   $0x0
   11550:	6a 00                	push   $0x0
   11552:	50                   	push   %eax
   11553:	e8 1d ff ff ff       	call   11475 <segment_desc_set>
   11558:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1155b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1155f:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11566:	7e db                	jle    11543 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11568:	68 92 40 00 00       	push   $0x4092
   1156d:	6a ff                	push   $0xffffffff
   1156f:	6a 00                	push   $0x0
   11571:	6a 10                	push   $0x10
   11573:	e8 fd fe ff ff       	call   11475 <segment_desc_set>
   11578:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   1157b:	c6 05 a2 83 02 00 01 	movb   $0x1,0x283a2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   11582:	68 9a 40 00 00       	push   $0x409a
   11587:	6a ff                	push   $0xffffffff
   11589:	6a 00                	push   $0x0
   1158b:	6a 08                	push   $0x8
   1158d:	e8 e3 fe ff ff       	call   11475 <segment_desc_set>
   11592:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   11595:	c6 05 a1 83 02 00 01 	movb   $0x1,0x283a1

    //3.初始化调用门描述符
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   1159c:	ba ad 02 01 00       	mov    $0x102ad,%edx
   115a1:	b8 b8 83 01 00       	mov    $0x183b8,%eax
   115a6:	68 05 ec 00 00       	push   $0xec05
   115ab:	52                   	push   %edx
   115ac:	6a 08                	push   $0x8
   115ae:	50                   	push   %eax
   115af:	e8 52 fe ff ff       	call   11406 <gate_desc_set>
   115b4:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   115b7:	c6 05 a3 83 02 00 01 	movb   $0x1,0x283a3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   115be:	b8 a0 83 01 00       	mov    $0x183a0,%eax
   115c3:	83 ec 08             	sub    $0x8,%esp
   115c6:	68 00 00 01 00       	push   $0x10000
   115cb:	50                   	push   %eax
   115cc:	e8 7c fe ff ff       	call   1144d <lgdt>
   115d1:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   115d4:	83 ec 0c             	sub    $0xc,%esp
   115d7:	68 a0 a3 02 00       	push   $0x2a3a0
   115dc:	e8 1c 0d 00 00       	call   122fd <mutex_init>
   115e1:	83 c4 10             	add    $0x10,%esp
}
   115e4:	90                   	nop
   115e5:	c9                   	leave  
   115e6:	c3                   	ret    

000115e7 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   115e7:	55                   	push   %ebp
   115e8:	89 e5                	mov    %esp,%ebp
   115ea:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   115ed:	83 ec 0c             	sub    $0xc,%esp
   115f0:	68 a0 a3 02 00       	push   $0x2a3a0
   115f5:	e8 50 0d 00 00       	call   1234a <mutex_lock>
   115fa:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   115fd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11604:	eb 36                	jmp    1163c <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   11606:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11609:	05 a0 83 02 00       	add    $0x283a0,%eax
   1160e:	0f b6 00             	movzbl (%eax),%eax
   11611:	84 c0                	test   %al,%al
   11613:	75 23                	jne    11638 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   11615:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11618:	05 a0 83 02 00       	add    $0x283a0,%eax
   1161d:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   11620:	83 ec 0c             	sub    $0xc,%esp
   11623:	68 a0 a3 02 00       	push   $0x2a3a0
   11628:	e8 ae 0d 00 00       	call   123db <mutex_unlock>
   1162d:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   11630:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11633:	c1 e0 03             	shl    $0x3,%eax
   11636:	eb 22                	jmp    1165a <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11638:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1163c:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11643:	7e c1                	jle    11606 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11645:	83 ec 0c             	sub    $0xc,%esp
   11648:	68 a0 a3 02 00       	push   $0x2a3a0
   1164d:	e8 89 0d 00 00       	call   123db <mutex_unlock>
   11652:	83 c4 10             	add    $0x10,%esp
    return -1;
   11655:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1165a:	c9                   	leave  
   1165b:	c3                   	ret    

0001165c <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   1165c:	55                   	push   %ebp
   1165d:	89 e5                	mov    %esp,%ebp
   1165f:	83 ec 14             	sub    $0x14,%esp
   11662:	8b 45 08             	mov    0x8(%ebp),%eax
   11665:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   11669:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1166d:	66 c1 e8 03          	shr    $0x3,%ax
   11671:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   11675:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   11679:	c6 80 a0 83 02 00 00 	movb   $0x0,0x283a0(%eax)
}
   11680:	90                   	nop
   11681:	c9                   	leave  
   11682:	c3                   	ret    

00011683 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11683:	55                   	push   %ebp
   11684:	89 e5                	mov    %esp,%ebp
   11686:	fa                   	cli    
   11687:	90                   	nop
   11688:	5d                   	pop    %ebp
   11689:	c3                   	ret    

0001168a <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1168a:	55                   	push   %ebp
   1168b:	89 e5                	mov    %esp,%ebp
   1168d:	fb                   	sti    
   1168e:	90                   	nop
   1168f:	5d                   	pop    %ebp
   11690:	c3                   	ret    

00011691 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11691:	55                   	push   %ebp
   11692:	89 e5                	mov    %esp,%ebp
   11694:	f4                   	hlt    
   11695:	90                   	nop
   11696:	5d                   	pop    %ebp
   11697:	c3                   	ret    

00011698 <inb>:
static inline uint8_t inb(uint16_t port) {
   11698:	55                   	push   %ebp
   11699:	89 e5                	mov    %esp,%ebp
   1169b:	83 ec 14             	sub    $0x14,%esp
   1169e:	8b 45 08             	mov    0x8(%ebp),%eax
   116a1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   116a5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   116a9:	89 c2                	mov    %eax,%edx
   116ab:	ec                   	in     (%dx),%al
   116ac:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   116af:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   116b3:	c9                   	leave  
   116b4:	c3                   	ret    

000116b5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   116b5:	55                   	push   %ebp
   116b6:	89 e5                	mov    %esp,%ebp
   116b8:	83 ec 08             	sub    $0x8,%esp
   116bb:	8b 45 08             	mov    0x8(%ebp),%eax
   116be:	8b 55 0c             	mov    0xc(%ebp),%edx
   116c1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   116c5:	89 d0                	mov    %edx,%eax
   116c7:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   116ca:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   116ce:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   116d2:	ee                   	out    %al,(%dx)
}
   116d3:	90                   	nop
   116d4:	c9                   	leave  
   116d5:	c3                   	ret    

000116d6 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   116d6:	55                   	push   %ebp
   116d7:	89 e5                	mov    %esp,%ebp
   116d9:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   116dc:	8b 45 08             	mov    0x8(%ebp),%eax
   116df:	c1 e8 10             	shr    $0x10,%eax
   116e2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   116e6:	8b 45 08             	mov    0x8(%ebp),%eax
   116e9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   116ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   116f0:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   116f3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   116f7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   116fb:	90                   	nop
   116fc:	c9                   	leave  
   116fd:	c3                   	ret    

000116fe <read_cr2>:
static inline uint32_t read_cr2(void) {
   116fe:	55                   	push   %ebp
   116ff:	89 e5                	mov    %esp,%ebp
   11701:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   11704:	0f 20 d0             	mov    %cr2,%eax
   11707:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   1170a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1170d:	c9                   	leave  
   1170e:	c3                   	ret    

0001170f <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   1170f:	55                   	push   %ebp
   11710:	89 e5                	mov    %esp,%ebp
   11712:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11715:	9c                   	pushf  
   11716:	58                   	pop    %eax
   11717:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   1171a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1171d:	c9                   	leave  
   1171e:	c3                   	ret    

0001171f <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   1171f:	55                   	push   %ebp
   11720:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   11722:	8b 45 08             	mov    0x8(%ebp),%eax
   11725:	50                   	push   %eax
   11726:	9d                   	popf   
}
   11727:	90                   	nop
   11728:	5d                   	pop    %ebp
   11729:	c3                   	ret    

0001172a <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   1172a:	55                   	push   %ebp
   1172b:	89 e5                	mov    %esp,%ebp
   1172d:	57                   	push   %edi
   1172e:	56                   	push   %esi
   1172f:	53                   	push   %ebx
   11730:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11733:	8b 45 08             	mov    0x8(%ebp),%eax
   11736:	8b 40 3c             	mov    0x3c(%eax),%eax
   11739:	83 e0 03             	and    $0x3,%eax
   1173c:	85 c0                	test   %eax,%eax
   1173e:	74 14                	je     11754 <print_exception_fram+0x2a>
    ss = frame->ss3;
   11740:	8b 45 08             	mov    0x8(%ebp),%eax
   11743:	8b 40 48             	mov    0x48(%eax),%eax
   11746:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   11749:	8b 45 08             	mov    0x8(%ebp),%eax
   1174c:	8b 40 44             	mov    0x44(%eax),%eax
   1174f:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11752:	eb 12                	jmp    11766 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   11754:	8b 45 08             	mov    0x8(%ebp),%eax
   11757:	8b 40 0c             	mov    0xc(%eax),%eax
   1175a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   1175d:	8b 45 08             	mov    0x8(%ebp),%eax
   11760:	8b 40 1c             	mov    0x1c(%eax),%eax
   11763:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   11766:	83 ec 0c             	sub    $0xc,%esp
   11769:	68 f4 3a 01 00       	push   $0x13af4
   1176e:	e8 6e 1f 00 00       	call   136e1 <log_printf>
   11773:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11776:	8b 45 08             	mov    0x8(%ebp),%eax
   11779:	8b 50 34             	mov    0x34(%eax),%edx
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	8b 40 30             	mov    0x30(%eax),%eax
   11782:	83 ec 04             	sub    $0x4,%esp
   11785:	52                   	push   %edx
   11786:	50                   	push   %eax
   11787:	68 32 3b 01 00       	push   $0x13b32
   1178c:	e8 50 1f 00 00       	call   136e1 <log_printf>
   11791:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   11794:	8b 45 08             	mov    0x8(%ebp),%eax
   11797:	8b 30                	mov    (%eax),%esi
   11799:	8b 45 08             	mov    0x8(%ebp),%eax
   1179c:	8b 58 04             	mov    0x4(%eax),%ebx
   1179f:	8b 45 08             	mov    0x8(%ebp),%eax
   117a2:	8b 48 08             	mov    0x8(%eax),%ecx
   117a5:	8b 45 08             	mov    0x8(%ebp),%eax
   117a8:	8b 50 0c             	mov    0xc(%eax),%edx
   117ab:	8b 45 08             	mov    0x8(%ebp),%eax
   117ae:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   117b1:	83 ec 04             	sub    $0x4,%esp
   117b4:	56                   	push   %esi
   117b5:	53                   	push   %ebx
   117b6:	51                   	push   %ecx
   117b7:	ff 75 e4             	push   -0x1c(%ebp)
   117ba:	52                   	push   %edx
   117bb:	50                   	push   %eax
   117bc:	68 4c 3b 01 00       	push   $0x13b4c
   117c1:	e8 1b 1f 00 00       	call   136e1 <log_printf>
   117c6:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   117c9:	8b 45 08             	mov    0x8(%ebp),%eax
   117cc:	8b 40 18             	mov    0x18(%eax),%eax
   117cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   117d2:	8b 45 08             	mov    0x8(%ebp),%eax
   117d5:	8b 78 10             	mov    0x10(%eax),%edi
   117d8:	8b 45 08             	mov    0x8(%ebp),%eax
   117db:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   117de:	8b 45 08             	mov    0x8(%ebp),%eax
   117e1:	8b 58 24             	mov    0x24(%eax),%ebx
   117e4:	8b 45 08             	mov    0x8(%ebp),%eax
   117e7:	8b 48 28             	mov    0x28(%eax),%ecx
   117ea:	8b 45 08             	mov    0x8(%ebp),%eax
   117ed:	8b 50 20             	mov    0x20(%eax),%edx
   117f0:	8b 45 08             	mov    0x8(%ebp),%eax
   117f3:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   117f6:	83 ec 0c             	sub    $0xc,%esp
   117f9:	ff 75 e0             	push   -0x20(%ebp)
   117fc:	ff 75 d4             	push   -0x2c(%ebp)
   117ff:	57                   	push   %edi
   11800:	56                   	push   %esi
   11801:	53                   	push   %ebx
   11802:	51                   	push   %ecx
   11803:	52                   	push   %edx
   11804:	50                   	push   %eax
   11805:	68 7c 3b 01 00       	push   $0x13b7c
   1180a:	e8 d2 1e 00 00       	call   136e1 <log_printf>
   1180f:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11812:	8b 45 08             	mov    0x8(%ebp),%eax
   11815:	8b 50 40             	mov    0x40(%eax),%edx
   11818:	8b 45 08             	mov    0x8(%ebp),%eax
   1181b:	8b 40 38             	mov    0x38(%eax),%eax
   1181e:	83 ec 04             	sub    $0x4,%esp
   11821:	52                   	push   %edx
   11822:	50                   	push   %eax
   11823:	68 d4 3b 01 00       	push   $0x13bd4
   11828:	e8 b4 1e 00 00       	call   136e1 <log_printf>
   1182d:	83 c4 10             	add    $0x10,%esp
}
   11830:	90                   	nop
   11831:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11834:	5b                   	pop    %ebx
   11835:	5e                   	pop    %esi
   11836:	5f                   	pop    %edi
   11837:	5d                   	pop    %ebp
   11838:	c3                   	ret    

00011839 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11839:	55                   	push   %ebp
   1183a:	89 e5                	mov    %esp,%ebp
   1183c:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   1183f:	83 ec 0c             	sub    $0xc,%esp
   11842:	68 f0 3b 01 00       	push   $0x13bf0
   11847:	e8 95 1e 00 00       	call   136e1 <log_printf>
   1184c:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   1184f:	83 ec 08             	sub    $0x8,%esp
   11852:	ff 75 0c             	push   0xc(%ebp)
   11855:	68 24 3c 01 00       	push   $0x13c24
   1185a:	e8 82 1e 00 00       	call   136e1 <log_printf>
   1185f:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11862:	83 ec 0c             	sub    $0xc,%esp
   11865:	ff 75 08             	push   0x8(%ebp)
   11868:	e8 bd fe ff ff       	call   1172a <print_exception_fram>
   1186d:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11870:	e8 1c fe ff ff       	call   11691 <hlt>
   11875:	eb f9                	jmp    11870 <do_default_handler+0x37>

00011877 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11877:	55                   	push   %ebp
   11878:	89 e5                	mov    %esp,%ebp
   1187a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1187d:	83 ec 08             	sub    $0x8,%esp
   11880:	68 3e 3c 01 00       	push   $0x13c3e
   11885:	ff 75 08             	push   0x8(%ebp)
   11888:	e8 ac ff ff ff       	call   11839 <do_default_handler>
   1188d:	83 c4 10             	add    $0x10,%esp
}
   11890:	90                   	nop
   11891:	c9                   	leave  
   11892:	c3                   	ret    

00011893 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11893:	55                   	push   %ebp
   11894:	89 e5                	mov    %esp,%ebp
   11896:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11899:	83 ec 08             	sub    $0x8,%esp
   1189c:	68 50 3c 01 00       	push   $0x13c50
   118a1:	ff 75 08             	push   0x8(%ebp)
   118a4:	e8 90 ff ff ff       	call   11839 <do_default_handler>
   118a9:	83 c4 10             	add    $0x10,%esp
}
   118ac:	90                   	nop
   118ad:	c9                   	leave  
   118ae:	c3                   	ret    

000118af <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   118af:	55                   	push   %ebp
   118b0:	89 e5                	mov    %esp,%ebp
   118b2:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   118b5:	83 ec 08             	sub    $0x8,%esp
   118b8:	68 62 3c 01 00       	push   $0x13c62
   118bd:	ff 75 08             	push   0x8(%ebp)
   118c0:	e8 74 ff ff ff       	call   11839 <do_default_handler>
   118c5:	83 c4 10             	add    $0x10,%esp
}
   118c8:	90                   	nop
   118c9:	c9                   	leave  
   118ca:	c3                   	ret    

000118cb <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   118cb:	55                   	push   %ebp
   118cc:	89 e5                	mov    %esp,%ebp
   118ce:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   118d1:	83 ec 08             	sub    $0x8,%esp
   118d4:	68 72 3c 01 00       	push   $0x13c72
   118d9:	ff 75 08             	push   0x8(%ebp)
   118dc:	e8 58 ff ff ff       	call   11839 <do_default_handler>
   118e1:	83 c4 10             	add    $0x10,%esp
}
   118e4:	90                   	nop
   118e5:	c9                   	leave  
   118e6:	c3                   	ret    

000118e7 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   118e7:	55                   	push   %ebp
   118e8:	89 e5                	mov    %esp,%ebp
   118ea:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   118ed:	83 ec 08             	sub    $0x8,%esp
   118f0:	68 80 3c 01 00       	push   $0x13c80
   118f5:	ff 75 08             	push   0x8(%ebp)
   118f8:	e8 3c ff ff ff       	call   11839 <do_default_handler>
   118fd:	83 c4 10             	add    $0x10,%esp
}
   11900:	90                   	nop
   11901:	c9                   	leave  
   11902:	c3                   	ret    

00011903 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11903:	55                   	push   %ebp
   11904:	89 e5                	mov    %esp,%ebp
   11906:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11909:	83 ec 08             	sub    $0x8,%esp
   1190c:	68 95 3c 01 00       	push   $0x13c95
   11911:	ff 75 08             	push   0x8(%ebp)
   11914:	e8 20 ff ff ff       	call   11839 <do_default_handler>
   11919:	83 c4 10             	add    $0x10,%esp
}
   1191c:	90                   	nop
   1191d:	c9                   	leave  
   1191e:	c3                   	ret    

0001191f <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   1191f:	55                   	push   %ebp
   11920:	89 e5                	mov    %esp,%ebp
   11922:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11925:	83 ec 08             	sub    $0x8,%esp
   11928:	68 a8 3c 01 00       	push   $0x13ca8
   1192d:	ff 75 08             	push   0x8(%ebp)
   11930:	e8 04 ff ff ff       	call   11839 <do_default_handler>
   11935:	83 c4 10             	add    $0x10,%esp
}
   11938:	90                   	nop
   11939:	c9                   	leave  
   1193a:	c3                   	ret    

0001193b <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   1193b:	55                   	push   %ebp
   1193c:	89 e5                	mov    %esp,%ebp
   1193e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11941:	83 ec 08             	sub    $0x8,%esp
   11944:	68 be 3c 01 00       	push   $0x13cbe
   11949:	ff 75 08             	push   0x8(%ebp)
   1194c:	e8 e8 fe ff ff       	call   11839 <do_default_handler>
   11951:	83 c4 10             	add    $0x10,%esp
}
   11954:	90                   	nop
   11955:	c9                   	leave  
   11956:	c3                   	ret    

00011957 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11957:	55                   	push   %ebp
   11958:	89 e5                	mov    %esp,%ebp
   1195a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1195d:	83 ec 08             	sub    $0x8,%esp
   11960:	68 d7 3c 01 00       	push   $0x13cd7
   11965:	ff 75 08             	push   0x8(%ebp)
   11968:	e8 cc fe ff ff       	call   11839 <do_default_handler>
   1196d:	83 c4 10             	add    $0x10,%esp
}
   11970:	90                   	nop
   11971:	c9                   	leave  
   11972:	c3                   	ret    

00011973 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11973:	55                   	push   %ebp
   11974:	89 e5                	mov    %esp,%ebp
   11976:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11979:	83 ec 08             	sub    $0x8,%esp
   1197c:	68 f4 3c 01 00       	push   $0x13cf4
   11981:	ff 75 08             	push   0x8(%ebp)
   11984:	e8 b0 fe ff ff       	call   11839 <do_default_handler>
   11989:	83 c4 10             	add    $0x10,%esp
}
   1198c:	90                   	nop
   1198d:	c9                   	leave  
   1198e:	c3                   	ret    

0001198f <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   1198f:	55                   	push   %ebp
   11990:	89 e5                	mov    %esp,%ebp
   11992:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11995:	83 ec 08             	sub    $0x8,%esp
   11998:	68 0b 3d 01 00       	push   $0x13d0b
   1199d:	ff 75 08             	push   0x8(%ebp)
   119a0:	e8 94 fe ff ff       	call   11839 <do_default_handler>
   119a5:	83 c4 10             	add    $0x10,%esp
}
   119a8:	90                   	nop
   119a9:	c9                   	leave  
   119aa:	c3                   	ret    

000119ab <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   119ab:	55                   	push   %ebp
   119ac:	89 e5                	mov    %esp,%ebp
   119ae:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   119b1:	83 ec 08             	sub    $0x8,%esp
   119b4:	68 21 3d 01 00       	push   $0x13d21
   119b9:	ff 75 08             	push   0x8(%ebp)
   119bc:	e8 78 fe ff ff       	call   11839 <do_default_handler>
   119c1:	83 c4 10             	add    $0x10,%esp
}
   119c4:	90                   	nop
   119c5:	c9                   	leave  
   119c6:	c3                   	ret    

000119c7 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   119c7:	55                   	push   %ebp
   119c8:	89 e5                	mov    %esp,%ebp
   119ca:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   119cd:	83 ec 08             	sub    $0x8,%esp
   119d0:	68 3f 3d 01 00       	push   $0x13d3f
   119d5:	ff 75 08             	push   0x8(%ebp)
   119d8:	e8 5c fe ff ff       	call   11839 <do_default_handler>
   119dd:	83 c4 10             	add    $0x10,%esp
}
   119e0:	90                   	nop
   119e1:	c9                   	leave  
   119e2:	c3                   	ret    

000119e3 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   119e3:	55                   	push   %ebp
   119e4:	89 e5                	mov    %esp,%ebp
   119e6:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   119e9:	83 ec 0c             	sub    $0xc,%esp
   119ec:	68 60 3d 01 00       	push   $0x13d60
   119f1:	e8 eb 1c 00 00       	call   136e1 <log_printf>
   119f6:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   119f9:	83 ec 0c             	sub    $0xc,%esp
   119fc:	68 84 3d 01 00       	push   $0x13d84
   11a01:	e8 db 1c 00 00       	call   136e1 <log_printf>
   11a06:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11a09:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0c:	8b 40 34             	mov    0x34(%eax),%eax
   11a0f:	83 e0 01             	and    $0x1,%eax
   11a12:	85 c0                	test   %eax,%eax
   11a14:	74 12                	je     11a28 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   11a16:	83 ec 0c             	sub    $0xc,%esp
   11a19:	68 b0 3d 01 00       	push   $0x13db0
   11a1e:	e8 be 1c 00 00       	call   136e1 <log_printf>
   11a23:	83 c4 10             	add    $0x10,%esp
   11a26:	eb 10                	jmp    11a38 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   11a28:	83 ec 0c             	sub    $0xc,%esp
   11a2b:	68 2c 3e 01 00       	push   $0x13e2c
   11a30:	e8 ac 1c 00 00       	call   136e1 <log_printf>
   11a35:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11a38:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3b:	8b 40 34             	mov    0x34(%eax),%eax
   11a3e:	83 e0 02             	and    $0x2,%eax
   11a41:	85 c0                	test   %eax,%eax
   11a43:	74 12                	je     11a57 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11a45:	83 ec 0c             	sub    $0xc,%esp
   11a48:	68 84 3e 01 00       	push   $0x13e84
   11a4d:	e8 8f 1c 00 00       	call   136e1 <log_printf>
   11a52:	83 c4 10             	add    $0x10,%esp
   11a55:	eb 10                	jmp    11a67 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11a57:	83 ec 0c             	sub    $0xc,%esp
   11a5a:	68 d0 3e 01 00       	push   $0x13ed0
   11a5f:	e8 7d 1c 00 00       	call   136e1 <log_printf>
   11a64:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11a67:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6a:	8b 40 34             	mov    0x34(%eax),%eax
   11a6d:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11a72:	83 ec 08             	sub    $0x8,%esp
   11a75:	50                   	push   %eax
   11a76:	68 fc 3e 01 00       	push   $0x13efc
   11a7b:	e8 61 1c 00 00       	call   136e1 <log_printf>
   11a80:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   11a83:	83 ec 0c             	sub    $0xc,%esp
   11a86:	ff 75 08             	push   0x8(%ebp)
   11a89:	e8 9c fc ff ff       	call   1172a <print_exception_fram>
   11a8e:	83 c4 10             	add    $0x10,%esp
}
   11a91:	90                   	nop
   11a92:	c9                   	leave  
   11a93:	c3                   	ret    

00011a94 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   11a94:	55                   	push   %ebp
   11a95:	89 e5                	mov    %esp,%ebp
   11a97:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11a9a:	83 ec 0c             	sub    $0xc,%esp
   11a9d:	68 60 3d 01 00       	push   $0x13d60
   11aa2:	e8 3a 1c 00 00       	call   136e1 <log_printf>
   11aa7:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11aaa:	83 ec 0c             	sub    $0xc,%esp
   11aad:	68 10 3f 01 00       	push   $0x13f10
   11ab2:	e8 2a 1c 00 00       	call   136e1 <log_printf>
   11ab7:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   11aba:	8b 45 08             	mov    0x8(%ebp),%eax
   11abd:	8b 40 34             	mov    0x34(%eax),%eax
   11ac0:	83 e0 01             	and    $0x1,%eax
   11ac3:	85 c0                	test   %eax,%eax
   11ac5:	74 18                	je     11adf <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   11ac7:	e8 32 fc ff ff       	call   116fe <read_cr2>
   11acc:	83 ec 08             	sub    $0x8,%esp
   11acf:	50                   	push   %eax
   11ad0:	68 34 3f 01 00       	push   $0x13f34
   11ad5:	e8 07 1c 00 00       	call   136e1 <log_printf>
   11ada:	83 c4 10             	add    $0x10,%esp
   11add:	eb 16                	jmp    11af5 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   11adf:	e8 1a fc ff ff       	call   116fe <read_cr2>
   11ae4:	83 ec 08             	sub    $0x8,%esp
   11ae7:	50                   	push   %eax
   11ae8:	68 5b 3f 01 00       	push   $0x13f5b
   11aed:	e8 ef 1b 00 00       	call   136e1 <log_printf>
   11af2:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11af5:	8b 45 08             	mov    0x8(%ebp),%eax
   11af8:	8b 40 34             	mov    0x34(%eax),%eax
   11afb:	83 e0 02             	and    $0x2,%eax
   11afe:	85 c0                	test   %eax,%eax
   11b00:	74 12                	je     11b14 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   11b02:	83 ec 0c             	sub    $0xc,%esp
   11b05:	68 78 3f 01 00       	push   $0x13f78
   11b0a:	e8 d2 1b 00 00       	call   136e1 <log_printf>
   11b0f:	83 c4 10             	add    $0x10,%esp
   11b12:	eb 10                	jmp    11b24 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   11b14:	83 ec 0c             	sub    $0xc,%esp
   11b17:	68 a4 3f 01 00       	push   $0x13fa4
   11b1c:	e8 c0 1b 00 00       	call   136e1 <log_printf>
   11b21:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11b24:	8b 45 08             	mov    0x8(%ebp),%eax
   11b27:	8b 40 34             	mov    0x34(%eax),%eax
   11b2a:	83 e0 04             	and    $0x4,%eax
   11b2d:	85 c0                	test   %eax,%eax
   11b2f:	74 12                	je     11b43 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   11b31:	83 ec 0c             	sub    $0xc,%esp
   11b34:	68 d0 3f 01 00       	push   $0x13fd0
   11b39:	e8 a3 1b 00 00       	call   136e1 <log_printf>
   11b3e:	83 c4 10             	add    $0x10,%esp
   11b41:	eb 10                	jmp    11b53 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   11b43:	83 ec 0c             	sub    $0xc,%esp
   11b46:	68 f8 3f 01 00       	push   $0x13ff8
   11b4b:	e8 91 1b 00 00       	call   136e1 <log_printf>
   11b50:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   11b53:	83 ec 0c             	sub    $0xc,%esp
   11b56:	ff 75 08             	push   0x8(%ebp)
   11b59:	e8 cc fb ff ff       	call   1172a <print_exception_fram>
   11b5e:	83 c4 10             	add    $0x10,%esp
}
   11b61:	90                   	nop
   11b62:	c9                   	leave  
   11b63:	c3                   	ret    

00011b64 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   11b64:	55                   	push   %ebp
   11b65:	89 e5                	mov    %esp,%ebp
   11b67:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11b6a:	83 ec 08             	sub    $0x8,%esp
   11b6d:	68 23 40 01 00       	push   $0x14023
   11b72:	ff 75 08             	push   0x8(%ebp)
   11b75:	e8 bf fc ff ff       	call   11839 <do_default_handler>
   11b7a:	83 c4 10             	add    $0x10,%esp
}
   11b7d:	90                   	nop
   11b7e:	c9                   	leave  
   11b7f:	c3                   	ret    

00011b80 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11b80:	55                   	push   %ebp
   11b81:	89 e5                	mov    %esp,%ebp
   11b83:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11b86:	83 ec 08             	sub    $0x8,%esp
   11b89:	68 37 40 01 00       	push   $0x14037
   11b8e:	ff 75 08             	push   0x8(%ebp)
   11b91:	e8 a3 fc ff ff       	call   11839 <do_default_handler>
   11b96:	83 c4 10             	add    $0x10,%esp
}
   11b99:	90                   	nop
   11b9a:	c9                   	leave  
   11b9b:	c3                   	ret    

00011b9c <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11b9c:	55                   	push   %ebp
   11b9d:	89 e5                	mov    %esp,%ebp
   11b9f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11ba2:	83 ec 08             	sub    $0x8,%esp
   11ba5:	68 51 40 01 00       	push   $0x14051
   11baa:	ff 75 08             	push   0x8(%ebp)
   11bad:	e8 87 fc ff ff       	call   11839 <do_default_handler>
   11bb2:	83 c4 10             	add    $0x10,%esp
}
   11bb5:	90                   	nop
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11bb8:	55                   	push   %ebp
   11bb9:	89 e5                	mov    %esp,%ebp
   11bbb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11bbe:	83 ec 08             	sub    $0x8,%esp
   11bc1:	68 69 40 01 00       	push   $0x14069
   11bc6:	ff 75 08             	push   0x8(%ebp)
   11bc9:	e8 6b fc ff ff       	call   11839 <do_default_handler>
   11bce:	83 c4 10             	add    $0x10,%esp
}
   11bd1:	90                   	nop
   11bd2:	c9                   	leave  
   11bd3:	c3                   	ret    

00011bd4 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11bd4:	55                   	push   %ebp
   11bd5:	89 e5                	mov    %esp,%ebp
   11bd7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11bda:	83 ec 08             	sub    $0x8,%esp
   11bdd:	68 81 40 01 00       	push   $0x14081
   11be2:	ff 75 08             	push   0x8(%ebp)
   11be5:	e8 4f fc ff ff       	call   11839 <do_default_handler>
   11bea:	83 c4 10             	add    $0x10,%esp
}
   11bed:	90                   	nop
   11bee:	c9                   	leave  
   11bef:	c3                   	ret    

00011bf0 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11bf0:	55                   	push   %ebp
   11bf1:	89 e5                	mov    %esp,%ebp
   11bf3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11bf6:	83 ec 08             	sub    $0x8,%esp
   11bf9:	68 9d 40 01 00       	push   $0x1409d
   11bfe:	ff 75 08             	push   0x8(%ebp)
   11c01:	e8 33 fc ff ff       	call   11839 <do_default_handler>
   11c06:	83 c4 10             	add    $0x10,%esp
}
   11c09:	90                   	nop
   11c0a:	c9                   	leave  
   11c0b:	c3                   	ret    

00011c0c <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11c0c:	55                   	push   %ebp
   11c0d:	89 e5                	mov    %esp,%ebp
   11c0f:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11c12:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11c19:	7f 06                	jg     11c21 <idt_install+0x15>
   11c1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c1f:	79 07                	jns    11c28 <idt_install+0x1c>
   11c21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c26:	eb 25                	jmp    11c4d <idt_install+0x41>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11c28:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c2b:	8b 55 08             	mov    0x8(%ebp),%edx
   11c2e:	c1 e2 03             	shl    $0x3,%edx
   11c31:	81 c2 c0 a3 02 00    	add    $0x2a3c0,%edx
   11c37:	68 00 8e 00 00       	push   $0x8e00
   11c3c:	50                   	push   %eax
   11c3d:	6a 08                	push   $0x8
   11c3f:	52                   	push   %edx
   11c40:	e8 c1 f7 ff ff       	call   11406 <gate_desc_set>
   11c45:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11c48:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c4d:	c9                   	leave  
   11c4e:	c3                   	ret    

00011c4f <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11c4f:	55                   	push   %ebp
   11c50:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11c52:	6a 11                	push   $0x11
   11c54:	6a 20                	push   $0x20
   11c56:	e8 5a fa ff ff       	call   116b5 <outb>
   11c5b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11c5e:	6a 20                	push   $0x20
   11c60:	6a 21                	push   $0x21
   11c62:	e8 4e fa ff ff       	call   116b5 <outb>
   11c67:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11c6a:	6a 04                	push   $0x4
   11c6c:	6a 21                	push   $0x21
   11c6e:	e8 42 fa ff ff       	call   116b5 <outb>
   11c73:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11c76:	6a 01                	push   $0x1
   11c78:	6a 21                	push   $0x21
   11c7a:	e8 36 fa ff ff       	call   116b5 <outb>
   11c7f:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11c82:	6a 11                	push   $0x11
   11c84:	68 a0 00 00 00       	push   $0xa0
   11c89:	e8 27 fa ff ff       	call   116b5 <outb>
   11c8e:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11c91:	6a 28                	push   $0x28
   11c93:	68 a1 00 00 00       	push   $0xa1
   11c98:	e8 18 fa ff ff       	call   116b5 <outb>
   11c9d:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11ca0:	6a 02                	push   $0x2
   11ca2:	68 a1 00 00 00       	push   $0xa1
   11ca7:	e8 09 fa ff ff       	call   116b5 <outb>
   11cac:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11caf:	6a 01                	push   $0x1
   11cb1:	68 a1 00 00 00       	push   $0xa1
   11cb6:	e8 fa f9 ff ff       	call   116b5 <outb>
   11cbb:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11cbe:	68 fb 00 00 00       	push   $0xfb
   11cc3:	6a 21                	push   $0x21
   11cc5:	e8 eb f9 ff ff       	call   116b5 <outb>
   11cca:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11ccd:	68 ff 00 00 00       	push   $0xff
   11cd2:	68 a1 00 00 00       	push   $0xa1
   11cd7:	e8 d9 f9 ff ff       	call   116b5 <outb>
   11cdc:	83 c4 08             	add    $0x8,%esp


}
   11cdf:	90                   	nop
   11ce0:	c9                   	leave  
   11ce1:	c3                   	ret    

00011ce2 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11ce2:	55                   	push   %ebp
   11ce3:	89 e5                	mov    %esp,%ebp
   11ce5:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11ce8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cef:	eb 17                	jmp    11d08 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11cf1:	83 ec 08             	sub    $0x8,%esp
   11cf4:	68 2a 00 01 00       	push   $0x1002a
   11cf9:	ff 75 f4             	push   -0xc(%ebp)
   11cfc:	e8 0b ff ff ff       	call   11c0c <idt_install>
   11d01:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11d04:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d08:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11d0f:	7e e0                	jle    11cf1 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11d11:	83 ec 08             	sub    $0x8,%esp
   11d14:	68 47 00 01 00       	push   $0x10047
   11d19:	6a 00                	push   $0x0
   11d1b:	e8 ec fe ff ff       	call   11c0c <idt_install>
   11d20:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11d23:	83 ec 08             	sub    $0x8,%esp
   11d26:	68 64 00 01 00       	push   $0x10064
   11d2b:	6a 01                	push   $0x1
   11d2d:	e8 da fe ff ff       	call   11c0c <idt_install>
   11d32:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11d35:	83 ec 08             	sub    $0x8,%esp
   11d38:	68 81 00 01 00       	push   $0x10081
   11d3d:	6a 02                	push   $0x2
   11d3f:	e8 c8 fe ff ff       	call   11c0c <idt_install>
   11d44:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11d47:	83 ec 08             	sub    $0x8,%esp
   11d4a:	68 9e 00 01 00       	push   $0x1009e
   11d4f:	6a 03                	push   $0x3
   11d51:	e8 b6 fe ff ff       	call   11c0c <idt_install>
   11d56:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11d59:	83 ec 08             	sub    $0x8,%esp
   11d5c:	68 bb 00 01 00       	push   $0x100bb
   11d61:	6a 04                	push   $0x4
   11d63:	e8 a4 fe ff ff       	call   11c0c <idt_install>
   11d68:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11d6b:	83 ec 08             	sub    $0x8,%esp
   11d6e:	68 d8 00 01 00       	push   $0x100d8
   11d73:	6a 05                	push   $0x5
   11d75:	e8 92 fe ff ff       	call   11c0c <idt_install>
   11d7a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11d7d:	83 ec 08             	sub    $0x8,%esp
   11d80:	68 f5 00 01 00       	push   $0x100f5
   11d85:	6a 06                	push   $0x6
   11d87:	e8 80 fe ff ff       	call   11c0c <idt_install>
   11d8c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11d8f:	83 ec 08             	sub    $0x8,%esp
   11d92:	68 12 01 01 00       	push   $0x10112
   11d97:	6a 07                	push   $0x7
   11d99:	e8 6e fe ff ff       	call   11c0c <idt_install>
   11d9e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11da1:	83 ec 08             	sub    $0x8,%esp
   11da4:	68 2f 01 01 00       	push   $0x1012f
   11da9:	6a 08                	push   $0x8
   11dab:	e8 5c fe ff ff       	call   11c0c <idt_install>
   11db0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11db3:	83 ec 08             	sub    $0x8,%esp
   11db6:	68 4a 01 01 00       	push   $0x1014a
   11dbb:	6a 0a                	push   $0xa
   11dbd:	e8 4a fe ff ff       	call   11c0c <idt_install>
   11dc2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11dc5:	83 ec 08             	sub    $0x8,%esp
   11dc8:	68 65 01 01 00       	push   $0x10165
   11dcd:	6a 0b                	push   $0xb
   11dcf:	e8 38 fe ff ff       	call   11c0c <idt_install>
   11dd4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11dd7:	83 ec 08             	sub    $0x8,%esp
   11dda:	68 80 01 01 00       	push   $0x10180
   11ddf:	6a 0c                	push   $0xc
   11de1:	e8 26 fe ff ff       	call   11c0c <idt_install>
   11de6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11de9:	83 ec 08             	sub    $0x8,%esp
   11dec:	68 9b 01 01 00       	push   $0x1019b
   11df1:	6a 0d                	push   $0xd
   11df3:	e8 14 fe ff ff       	call   11c0c <idt_install>
   11df8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11dfb:	83 ec 08             	sub    $0x8,%esp
   11dfe:	68 b6 01 01 00       	push   $0x101b6
   11e03:	6a 0e                	push   $0xe
   11e05:	e8 02 fe ff ff       	call   11c0c <idt_install>
   11e0a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11e0d:	83 ec 08             	sub    $0x8,%esp
   11e10:	68 d1 01 01 00       	push   $0x101d1
   11e15:	6a 10                	push   $0x10
   11e17:	e8 f0 fd ff ff       	call   11c0c <idt_install>
   11e1c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11e1f:	83 ec 08             	sub    $0x8,%esp
   11e22:	68 ee 01 01 00       	push   $0x101ee
   11e27:	6a 11                	push   $0x11
   11e29:	e8 de fd ff ff       	call   11c0c <idt_install>
   11e2e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11e31:	83 ec 08             	sub    $0x8,%esp
   11e34:	68 09 02 01 00       	push   $0x10209
   11e39:	6a 12                	push   $0x12
   11e3b:	e8 cc fd ff ff       	call   11c0c <idt_install>
   11e40:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11e43:	83 ec 08             	sub    $0x8,%esp
   11e46:	68 26 02 01 00       	push   $0x10226
   11e4b:	6a 13                	push   $0x13
   11e4d:	e8 ba fd ff ff       	call   11c0c <idt_install>
   11e52:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11e55:	83 ec 08             	sub    $0x8,%esp
   11e58:	68 43 02 01 00       	push   $0x10243
   11e5d:	6a 14                	push   $0x14
   11e5f:	e8 a8 fd ff ff       	call   11c0c <idt_install>
   11e64:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11e67:	83 ec 08             	sub    $0x8,%esp
   11e6a:	68 60 02 01 00       	push   $0x10260
   11e6f:	6a 15                	push   $0x15
   11e71:	e8 96 fd ff ff       	call   11c0c <idt_install>
   11e76:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11e79:	b8 c0 a3 02 00       	mov    $0x2a3c0,%eax
   11e7e:	83 ec 08             	sub    $0x8,%esp
   11e81:	68 00 08 00 00       	push   $0x800
   11e86:	50                   	push   %eax
   11e87:	e8 4a f8 ff ff       	call   116d6 <lidt>
   11e8c:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11e8f:	e8 bb fd ff ff       	call   11c4f <init_pic>
}
   11e94:	90                   	nop
   11e95:	c9                   	leave  
   11e96:	c3                   	ret    

00011e97 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11e97:	55                   	push   %ebp
   11e98:	89 e5                	mov    %esp,%ebp
   11e9a:	53                   	push   %ebx
   11e9b:	83 ec 14             	sub    $0x14,%esp
   11e9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea1:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11ea4:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11ea8:	76 7f                	jbe    11f29 <idt_enable+0x92>
   11eaa:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11eae:	77 79                	ja     11f29 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11eb0:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11eb4:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11eb8:	77 33                	ja     11eed <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11eba:	6a 21                	push   $0x21
   11ebc:	e8 d7 f7 ff ff       	call   11698 <inb>
   11ec1:	83 c4 04             	add    $0x4,%esp
   11ec4:	89 c3                	mov    %eax,%ebx
   11ec6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11eca:	ba 01 00 00 00       	mov    $0x1,%edx
   11ecf:	89 c1                	mov    %eax,%ecx
   11ed1:	d3 e2                	shl    %cl,%edx
   11ed3:	89 d0                	mov    %edx,%eax
   11ed5:	f7 d0                	not    %eax
   11ed7:	21 d8                	and    %ebx,%eax
   11ed9:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11edc:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11ee0:	50                   	push   %eax
   11ee1:	6a 21                	push   $0x21
   11ee3:	e8 cd f7 ff ff       	call   116b5 <outb>
   11ee8:	83 c4 08             	add    $0x8,%esp
   11eeb:	eb 3d                	jmp    11f2a <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11eed:	68 a1 00 00 00       	push   $0xa1
   11ef2:	e8 a1 f7 ff ff       	call   11698 <inb>
   11ef7:	83 c4 04             	add    $0x4,%esp
   11efa:	89 c3                	mov    %eax,%ebx
   11efc:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11f00:	83 e8 08             	sub    $0x8,%eax
   11f03:	ba 01 00 00 00       	mov    $0x1,%edx
   11f08:	89 c1                	mov    %eax,%ecx
   11f0a:	d3 e2                	shl    %cl,%edx
   11f0c:	89 d0                	mov    %edx,%eax
   11f0e:	f7 d0                	not    %eax
   11f10:	21 d8                	and    %ebx,%eax
   11f12:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11f15:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11f19:	50                   	push   %eax
   11f1a:	68 a1 00 00 00       	push   $0xa1
   11f1f:	e8 91 f7 ff ff       	call   116b5 <outb>
   11f24:	83 c4 08             	add    $0x8,%esp
   11f27:	eb 01                	jmp    11f2a <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11f29:	90                   	nop
  }
  
}
   11f2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f2d:	c9                   	leave  
   11f2e:	c3                   	ret    

00011f2f <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11f2f:	55                   	push   %ebp
   11f30:	89 e5                	mov    %esp,%ebp
   11f32:	53                   	push   %ebx
   11f33:	83 ec 14             	sub    $0x14,%esp
   11f36:	8b 45 08             	mov    0x8(%ebp),%eax
   11f39:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11f3c:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11f40:	76 7b                	jbe    11fbd <idt_disable+0x8e>
   11f42:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11f46:	77 75                	ja     11fbd <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11f48:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11f4c:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11f50:	77 31                	ja     11f83 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11f52:	6a 21                	push   $0x21
   11f54:	e8 3f f7 ff ff       	call   11698 <inb>
   11f59:	83 c4 04             	add    $0x4,%esp
   11f5c:	89 c3                	mov    %eax,%ebx
   11f5e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11f62:	ba 01 00 00 00       	mov    $0x1,%edx
   11f67:	89 c1                	mov    %eax,%ecx
   11f69:	d3 e2                	shl    %cl,%edx
   11f6b:	89 d0                	mov    %edx,%eax
   11f6d:	09 d8                	or     %ebx,%eax
   11f6f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11f72:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11f76:	50                   	push   %eax
   11f77:	6a 21                	push   $0x21
   11f79:	e8 37 f7 ff ff       	call   116b5 <outb>
   11f7e:	83 c4 08             	add    $0x8,%esp
   11f81:	eb 3b                	jmp    11fbe <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11f83:	68 a1 00 00 00       	push   $0xa1
   11f88:	e8 0b f7 ff ff       	call   11698 <inb>
   11f8d:	83 c4 04             	add    $0x4,%esp
   11f90:	89 c3                	mov    %eax,%ebx
   11f92:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11f96:	83 e8 08             	sub    $0x8,%eax
   11f99:	ba 01 00 00 00       	mov    $0x1,%edx
   11f9e:	89 c1                	mov    %eax,%ecx
   11fa0:	d3 e2                	shl    %cl,%edx
   11fa2:	89 d0                	mov    %edx,%eax
   11fa4:	09 d8                	or     %ebx,%eax
   11fa6:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11fa9:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11fad:	50                   	push   %eax
   11fae:	68 a1 00 00 00       	push   $0xa1
   11fb3:	e8 fd f6 ff ff       	call   116b5 <outb>
   11fb8:	83 c4 08             	add    $0x8,%esp
   11fbb:	eb 01                	jmp    11fbe <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11fbd:	90                   	nop
  }
  
}
   11fbe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11fc1:	c9                   	leave  
   11fc2:	c3                   	ret    

00011fc3 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11fc3:	55                   	push   %ebp
   11fc4:	89 e5                	mov    %esp,%ebp
  cli();
   11fc6:	e8 b8 f6 ff ff       	call   11683 <cli>
}
   11fcb:	90                   	nop
   11fcc:	5d                   	pop    %ebp
   11fcd:	c3                   	ret    

00011fce <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11fce:	55                   	push   %ebp
   11fcf:	89 e5                	mov    %esp,%ebp
  sti();
   11fd1:	e8 b4 f6 ff ff       	call   1168a <sti>
}
   11fd6:	90                   	nop
   11fd7:	5d                   	pop    %ebp
   11fd8:	c3                   	ret    

00011fd9 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11fd9:	55                   	push   %ebp
   11fda:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11fdc:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11fe0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fe4:	78 29                	js     1200f <pic_send_eoi+0x36>
   11fe6:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11fea:	7f 23                	jg     1200f <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11fec:	6a 20                	push   $0x20
   11fee:	6a 20                	push   $0x20
   11ff0:	e8 c0 f6 ff ff       	call   116b5 <outb>
   11ff5:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11ff8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ffc:	7e 12                	jle    12010 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11ffe:	6a 20                	push   $0x20
   12000:	68 a0 00 00 00       	push   $0xa0
   12005:	e8 ab f6 ff ff       	call   116b5 <outb>
   1200a:	83 c4 08             	add    $0x8,%esp
   1200d:	eb 01                	jmp    12010 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   1200f:	90                   	nop
  }

}
   12010:	c9                   	leave  
   12011:	c3                   	ret    

00012012 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   12012:	55                   	push   %ebp
   12013:	89 e5                	mov    %esp,%ebp
   12015:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   12018:	e8 f2 f6 ff ff       	call   1170f <read_eflags>
   1201d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   12020:	e8 9e ff ff ff       	call   11fc3 <idt_disable_global>
  return state;;
   12025:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12028:	c9                   	leave  
   12029:	c3                   	ret    

0001202a <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   1202a:	55                   	push   %ebp
   1202b:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   1202d:	ff 75 08             	push   0x8(%ebp)
   12030:	e8 ea f6 ff ff       	call   1171f <write_eflags>
   12035:	83 c4 04             	add    $0x4,%esp
}
   12038:	90                   	nop
   12039:	c9                   	leave  
   1203a:	c3                   	ret    

0001203b <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   1203b:	55                   	push   %ebp
   1203c:	89 e5                	mov    %esp,%ebp
   1203e:	53                   	push   %ebx
   1203f:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12042:	8b 45 08             	mov    0x8(%ebp),%eax
   12045:	8b 40 3c             	mov    0x3c(%eax),%eax
   12048:	83 f8 01             	cmp    $0x1,%eax
   1204b:	77 48                	ja     12095 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   1204d:	8b 45 08             	mov    0x8(%ebp),%eax
   12050:	8b 40 3c             	mov    0x3c(%eax),%eax
   12053:	8b 04 85 bc 40 01 00 	mov    0x140bc(,%eax,4),%eax
   1205a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   1205d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12061:	74 32                	je     12095 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12063:	8b 45 08             	mov    0x8(%ebp),%eax
   12066:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12069:	8b 45 08             	mov    0x8(%ebp),%eax
   1206c:	8b 48 48             	mov    0x48(%eax),%ecx
   1206f:	8b 45 08             	mov    0x8(%ebp),%eax
   12072:	8b 50 44             	mov    0x44(%eax),%edx
   12075:	8b 45 08             	mov    0x8(%ebp),%eax
   12078:	8b 40 40             	mov    0x40(%eax),%eax
   1207b:	53                   	push   %ebx
   1207c:	51                   	push   %ecx
   1207d:	52                   	push   %edx
   1207e:	50                   	push   %eax
   1207f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12082:	ff d0                	call   *%eax
   12084:	83 c4 10             	add    $0x10,%esp
   12087:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   1208a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1208d:	8b 45 08             	mov    0x8(%ebp),%eax
   12090:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   12093:	eb 30                	jmp    120c5 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   12095:	e8 7a f0 ff ff       	call   11114 <task_current>
   1209a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   1209d:	8b 45 08             	mov    0x8(%ebp),%eax
   120a0:	8b 40 3c             	mov    0x3c(%eax),%eax
   120a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
   120a6:	83 c2 14             	add    $0x14,%edx
   120a9:	83 ec 04             	sub    $0x4,%esp
   120ac:	50                   	push   %eax
   120ad:	52                   	push   %edx
   120ae:	68 c4 40 01 00       	push   $0x140c4
   120b3:	e8 29 16 00 00       	call   136e1 <log_printf>
   120b8:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   120bb:	8b 45 08             	mov    0x8(%ebp),%eax
   120be:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   120c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   120c8:	c9                   	leave  
   120c9:	c3                   	ret    

000120ca <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   120ca:	55                   	push   %ebp
   120cb:	89 e5                	mov    %esp,%ebp
   120cd:	83 ec 08             	sub    $0x8,%esp
   120d0:	8b 45 08             	mov    0x8(%ebp),%eax
   120d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   120d6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   120da:	89 d0                	mov    %edx,%eax
   120dc:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   120df:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   120e3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   120e7:	ee                   	out    %al,(%dx)
}
   120e8:	90                   	nop
   120e9:	c9                   	leave  
   120ea:	c3                   	ret    

000120eb <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   120eb:	55                   	push   %ebp
   120ec:	89 e5                	mov    %esp,%ebp
   120ee:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   120f1:	a1 c0 ab 02 00       	mov    0x2abc0,%eax
   120f6:	83 c0 01             	add    $0x1,%eax
   120f9:	a3 c0 ab 02 00       	mov    %eax,0x2abc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   120fe:	83 ec 0c             	sub    $0xc,%esp
   12101:	6a 20                	push   $0x20
   12103:	e8 d1 fe ff ff       	call   11fd9 <pic_send_eoi>
   12108:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1210b:	e8 d7 f0 ff ff       	call   111e7 <task_slice_end>
}
   12110:	90                   	nop
   12111:	c9                   	leave  
   12112:	c3                   	ret    

00012113 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   12113:	55                   	push   %ebp
   12114:	89 e5                	mov    %esp,%ebp
   12116:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   12119:	6a 36                	push   $0x36
   1211b:	6a 43                	push   $0x43
   1211d:	e8 a8 ff ff ff       	call   120ca <outb>
   12122:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   12125:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1212b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1212f:	0f b6 c0             	movzbl %al,%eax
   12132:	50                   	push   %eax
   12133:	6a 40                	push   $0x40
   12135:	e8 90 ff ff ff       	call   120ca <outb>
   1213a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1213d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12141:	66 c1 e8 08          	shr    $0x8,%ax
   12145:	0f b6 c0             	movzbl %al,%eax
   12148:	50                   	push   %eax
   12149:	6a 40                	push   $0x40
   1214b:	e8 7a ff ff ff       	call   120ca <outb>
   12150:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   12153:	83 ec 08             	sub    $0x8,%esp
   12156:	68 7b 02 01 00       	push   $0x1027b
   1215b:	6a 20                	push   $0x20
   1215d:	e8 aa fa ff ff       	call   11c0c <idt_install>
   12162:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   12165:	83 ec 0c             	sub    $0xc,%esp
   12168:	6a 20                	push   $0x20
   1216a:	e8 28 fd ff ff       	call   11e97 <idt_enable>
   1216f:	83 c4 10             	add    $0x10,%esp

}
   12172:	90                   	nop
   12173:	c9                   	leave  
   12174:	c3                   	ret    

00012175 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   12175:	55                   	push   %ebp
   12176:	89 e5                	mov    %esp,%ebp
   12178:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1217b:	c7 05 c0 ab 02 00 00 	movl   $0x0,0x2abc0
   12182:	00 00 00 
    init_pit();
   12185:	e8 89 ff ff ff       	call   12113 <init_pit>
   1218a:	90                   	nop
   1218b:	c9                   	leave  
   1218c:	c3                   	ret    

0001218d <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1218d:	55                   	push   %ebp
   1218e:	89 e5                	mov    %esp,%ebp
   12190:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   12193:	8b 45 08             	mov    0x8(%ebp),%eax
   12196:	8b 40 50             	mov    0x50(%eax),%eax
   12199:	85 c0                	test   %eax,%eax
   1219b:	75 19                	jne    121b6 <kernel_init+0x29>
   1219d:	68 e8 40 01 00       	push   $0x140e8
   121a2:	68 84 41 01 00       	push   $0x14184
   121a7:	6a 22                	push   $0x22
   121a9:	68 0c 41 01 00       	push   $0x1410c
   121ae:	e8 5f 08 00 00       	call   12a12 <pannic>
   121b3:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   121b6:	e8 9e 14 00 00       	call   13659 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   121bb:	83 ec 0c             	sub    $0xc,%esp
   121be:	ff 75 08             	push   0x8(%ebp)
   121c1:	e8 e1 e5 ff ff       	call   107a7 <memory_init>
   121c6:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   121c9:	e8 66 f3 ff ff       	call   11534 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   121ce:	e8 0f fb ff ff       	call   11ce2 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   121d3:	e8 9d ff ff ff       	call   12175 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   121d8:	e8 b7 ec ff ff       	call   10e94 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   121dd:	90                   	nop
   121de:	c9                   	leave  
   121df:	c3                   	ret    

000121e0 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   121e0:	55                   	push   %ebp
   121e1:	89 e5                	mov    %esp,%ebp
   121e3:	56                   	push   %esi
   121e4:	53                   	push   %ebx
   121e5:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   121e8:	e8 27 ef ff ff       	call   11114 <task_current>
   121ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   121f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   121f4:	75 19                	jne    1220f <move_to_first_task+0x2f>
   121f6:	68 41 41 01 00       	push   $0x14141
   121fb:	68 90 41 01 00       	push   $0x14190
   12200:	6a 42                	push   $0x42
   12202:	68 0c 41 01 00       	push   $0x1410c
   12207:	e8 06 08 00 00       	call   12a12 <pannic>
   1220c:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   1220f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12212:	83 c0 4c             	add    $0x4c,%eax
   12215:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   12218:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1221b:	8b 40 50             	mov    0x50(%eax),%eax
   1221e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12221:	8b 52 38             	mov    0x38(%edx),%edx
   12224:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   12227:	8b 49 24             	mov    0x24(%ecx),%ecx
   1222a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1222d:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12230:	8b 75 f0             	mov    -0x10(%ebp),%esi
   12233:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   12236:	50                   	push   %eax
   12237:	52                   	push   %edx
   12238:	51                   	push   %ecx
   12239:	53                   	push   %ebx
   1223a:	56                   	push   %esi
   1223b:	cf                   	iret   

        
    );
}
   1223c:	90                   	nop
   1223d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12240:	5b                   	pop    %ebx
   12241:	5e                   	pop    %esi
   12242:	5d                   	pop    %ebp
   12243:	c3                   	ret    

00012244 <init_main>:


void init_main(void) {
   12244:	55                   	push   %ebp
   12245:	89 e5                	mov    %esp,%ebp
   12247:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   1224a:	83 ec 0c             	sub    $0xc,%esp
   1224d:	68 4b 41 01 00       	push   $0x1414b
   12252:	e8 8a 14 00 00       	call   136e1 <log_printf>
   12257:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   1225a:	83 ec 04             	sub    $0x4,%esp
   1225d:	68 63 41 01 00       	push   $0x14163
   12262:	68 69 41 01 00       	push   $0x14169
   12267:	68 6e 41 01 00       	push   $0x1416e
   1226c:	e8 70 14 00 00       	call   136e1 <log_printf>
   12271:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   12274:	e8 eb ec ff ff       	call   10f64 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   12279:	e8 62 ff ff ff       	call   121e0 <move_to_first_task>
   1227e:	90                   	nop
   1227f:	c9                   	leave  
   12280:	c3                   	ret    

00012281 <list_init>:
static inline void list_init(list_t *list) {
   12281:	55                   	push   %ebp
   12282:	89 e5                	mov    %esp,%ebp
   12284:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12287:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1228b:	75 19                	jne    122a6 <list_init+0x25>
   1228d:	68 a4 41 01 00       	push   $0x141a4
   12292:	68 50 42 01 00       	push   $0x14250
   12297:	6a 31                	push   $0x31
   12299:	68 b8 41 01 00       	push   $0x141b8
   1229e:	e8 6f 07 00 00       	call   12a12 <pannic>
   122a3:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   122a6:	8b 45 08             	mov    0x8(%ebp),%eax
   122a9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   122b0:	8b 45 08             	mov    0x8(%ebp),%eax
   122b3:	8b 50 04             	mov    0x4(%eax),%edx
   122b6:	8b 45 08             	mov    0x8(%ebp),%eax
   122b9:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   122bb:	8b 45 08             	mov    0x8(%ebp),%eax
   122be:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   122c5:	90                   	nop
   122c6:	c9                   	leave  
   122c7:	c3                   	ret    

000122c8 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   122c8:	55                   	push   %ebp
   122c9:	89 e5                	mov    %esp,%ebp
   122cb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   122ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122d2:	75 19                	jne    122ed <list_is_empty+0x25>
   122d4:	68 a4 41 01 00       	push   $0x141a4
   122d9:	68 5c 42 01 00       	push   $0x1425c
   122de:	6a 38                	push   $0x38
   122e0:	68 b8 41 01 00       	push   $0x141b8
   122e5:	e8 28 07 00 00       	call   12a12 <pannic>
   122ea:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   122ed:	8b 45 08             	mov    0x8(%ebp),%eax
   122f0:	8b 40 08             	mov    0x8(%eax),%eax
   122f3:	85 c0                	test   %eax,%eax
   122f5:	0f 94 c0             	sete   %al
   122f8:	0f b6 c0             	movzbl %al,%eax
}
   122fb:	c9                   	leave  
   122fc:	c3                   	ret    

000122fd <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   122fd:	55                   	push   %ebp
   122fe:	89 e5                	mov    %esp,%ebp
   12300:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   12303:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12307:	75 19                	jne    12322 <mutex_init+0x25>
   12309:	68 f6 41 01 00       	push   $0x141f6
   1230e:	68 44 42 01 00       	push   $0x14244
   12313:	6a 15                	push   $0x15
   12315:	68 0c 42 01 00       	push   $0x1420c
   1231a:	e8 f3 06 00 00       	call   12a12 <pannic>
   1231f:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   12322:	8b 45 08             	mov    0x8(%ebp),%eax
   12325:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   1232c:	8b 45 08             	mov    0x8(%ebp),%eax
   1232f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   12335:	8b 45 08             	mov    0x8(%ebp),%eax
   12338:	83 c0 08             	add    $0x8,%eax
   1233b:	83 ec 0c             	sub    $0xc,%esp
   1233e:	50                   	push   %eax
   1233f:	e8 3d ff ff ff       	call   12281 <list_init>
   12344:	83 c4 10             	add    $0x10,%esp
}
   12347:	90                   	nop
   12348:	c9                   	leave  
   12349:	c3                   	ret    

0001234a <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   1234a:	55                   	push   %ebp
   1234b:	89 e5                	mov    %esp,%ebp
   1234d:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12350:	e8 bd fc ff ff       	call   12012 <idt_enter_protection>
   12355:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   12358:	e8 b7 ed ff ff       	call   11114 <task_current>
   1235d:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   12360:	8b 45 08             	mov    0x8(%ebp),%eax
   12363:	8b 40 04             	mov    0x4(%eax),%eax
   12366:	85 c0                	test   %eax,%eax
   12368:	75 19                	jne    12383 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   1236a:	8b 45 08             	mov    0x8(%ebp),%eax
   1236d:	8b 40 04             	mov    0x4(%eax),%eax
   12370:	8d 50 01             	lea    0x1(%eax),%edx
   12373:	8b 45 08             	mov    0x8(%ebp),%eax
   12376:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   12379:	8b 45 08             	mov    0x8(%ebp),%eax
   1237c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1237f:	89 10                	mov    %edx,(%eax)
   12381:	eb 47                	jmp    123ca <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   12383:	8b 45 08             	mov    0x8(%ebp),%eax
   12386:	8b 00                	mov    (%eax),%eax
   12388:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1238b:	75 11                	jne    1239e <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   1238d:	8b 45 08             	mov    0x8(%ebp),%eax
   12390:	8b 40 04             	mov    0x4(%eax),%eax
   12393:	8d 50 01             	lea    0x1(%eax),%edx
   12396:	8b 45 08             	mov    0x8(%ebp),%eax
   12399:	89 50 04             	mov    %edx,0x4(%eax)
   1239c:	eb 2c                	jmp    123ca <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   1239e:	83 ec 0c             	sub    $0xc,%esp
   123a1:	ff 75 f0             	push   -0x10(%ebp)
   123a4:	e8 f2 ec ff ff       	call   1109b <task_set_unready>
   123a9:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   123ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123af:	8d 50 44             	lea    0x44(%eax),%edx
   123b2:	8b 45 08             	mov    0x8(%ebp),%eax
   123b5:	83 c0 08             	add    $0x8,%eax
   123b8:	83 ec 08             	sub    $0x8,%esp
   123bb:	52                   	push   %edx
   123bc:	50                   	push   %eax
   123bd:	e8 9b 0f 00 00       	call   1335d <list_insert_last>
   123c2:	83 c4 10             	add    $0x10,%esp
    task_switch();
   123c5:	e8 54 ed ff ff       	call   1111e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   123ca:	83 ec 0c             	sub    $0xc,%esp
   123cd:	ff 75 f4             	push   -0xc(%ebp)
   123d0:	e8 55 fc ff ff       	call   1202a <idt_leave_protection>
   123d5:	83 c4 10             	add    $0x10,%esp
}
   123d8:	90                   	nop
   123d9:	c9                   	leave  
   123da:	c3                   	ret    

000123db <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   123db:	55                   	push   %ebp
   123dc:	89 e5                	mov    %esp,%ebp
   123de:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   123e1:	e8 2c fc ff ff       	call   12012 <idt_enter_protection>
   123e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   123e9:	e8 26 ed ff ff       	call   11114 <task_current>
   123ee:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   123f1:	8b 45 08             	mov    0x8(%ebp),%eax
   123f4:	8b 00                	mov    (%eax),%eax
   123f6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   123f9:	0f 85 83 00 00 00    	jne    12482 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   123ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12402:	8b 40 04             	mov    0x4(%eax),%eax
   12405:	8d 50 ff             	lea    -0x1(%eax),%edx
   12408:	8b 45 08             	mov    0x8(%ebp),%eax
   1240b:	89 50 04             	mov    %edx,0x4(%eax)
   1240e:	8b 45 08             	mov    0x8(%ebp),%eax
   12411:	8b 40 04             	mov    0x4(%eax),%eax
   12414:	85 c0                	test   %eax,%eax
   12416:	75 6a                	jne    12482 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   12418:	8b 45 08             	mov    0x8(%ebp),%eax
   1241b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   12421:	8b 45 08             	mov    0x8(%ebp),%eax
   12424:	83 c0 08             	add    $0x8,%eax
   12427:	83 ec 0c             	sub    $0xc,%esp
   1242a:	50                   	push   %eax
   1242b:	e8 98 fe ff ff       	call   122c8 <list_is_empty>
   12430:	83 c4 10             	add    $0x10,%esp
   12433:	85 c0                	test   %eax,%eax
   12435:	75 4b                	jne    12482 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   12437:	8b 45 08             	mov    0x8(%ebp),%eax
   1243a:	83 c0 08             	add    $0x8,%eax
   1243d:	83 ec 0c             	sub    $0xc,%esp
   12440:	50                   	push   %eax
   12441:	e8 a6 0f 00 00       	call   133ec <list_remove_first>
   12446:	83 c4 10             	add    $0x10,%esp
   12449:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   1244c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12450:	74 08                	je     1245a <mutex_unlock+0x7f>
   12452:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12455:	83 e8 44             	sub    $0x44,%eax
   12458:	eb 05                	jmp    1245f <mutex_unlock+0x84>
   1245a:	b8 00 00 00 00       	mov    $0x0,%eax
   1245f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   12462:	8b 45 08             	mov    0x8(%ebp),%eax
   12465:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   1246c:	8b 45 08             	mov    0x8(%ebp),%eax
   1246f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12472:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   12474:	83 ec 0c             	sub    $0xc,%esp
   12477:	ff 75 e8             	push   -0x18(%ebp)
   1247a:	e8 d1 eb ff ff       	call   11050 <task_set_ready>
   1247f:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   12482:	83 ec 0c             	sub    $0xc,%esp
   12485:	ff 75 f4             	push   -0xc(%ebp)
   12488:	e8 9d fb ff ff       	call   1202a <idt_leave_protection>
   1248d:	83 c4 10             	add    $0x10,%esp
}
   12490:	90                   	nop
   12491:	c9                   	leave  
   12492:	c3                   	ret    

00012493 <list_init>:
static inline void list_init(list_t *list) {
   12493:	55                   	push   %ebp
   12494:	89 e5                	mov    %esp,%ebp
   12496:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12499:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1249d:	75 19                	jne    124b8 <list_init+0x25>
   1249f:	68 6c 42 01 00       	push   $0x1426c
   124a4:	68 10 43 01 00       	push   $0x14310
   124a9:	6a 31                	push   $0x31
   124ab:	68 80 42 01 00       	push   $0x14280
   124b0:	e8 5d 05 00 00       	call   12a12 <pannic>
   124b5:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   124b8:	8b 45 08             	mov    0x8(%ebp),%eax
   124bb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   124c2:	8b 45 08             	mov    0x8(%ebp),%eax
   124c5:	8b 50 04             	mov    0x4(%eax),%edx
   124c8:	8b 45 08             	mov    0x8(%ebp),%eax
   124cb:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   124cd:	8b 45 08             	mov    0x8(%ebp),%eax
   124d0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   124d7:	90                   	nop
   124d8:	c9                   	leave  
   124d9:	c3                   	ret    

000124da <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   124da:	55                   	push   %ebp
   124db:	89 e5                	mov    %esp,%ebp
   124dd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   124e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124e4:	75 19                	jne    124ff <list_is_empty+0x25>
   124e6:	68 6c 42 01 00       	push   $0x1426c
   124eb:	68 1c 43 01 00       	push   $0x1431c
   124f0:	6a 38                	push   $0x38
   124f2:	68 80 42 01 00       	push   $0x14280
   124f7:	e8 16 05 00 00       	call   12a12 <pannic>
   124fc:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   124ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12502:	8b 40 08             	mov    0x8(%eax),%eax
   12505:	85 c0                	test   %eax,%eax
   12507:	0f 94 c0             	sete   %al
   1250a:	0f b6 c0             	movzbl %al,%eax
}
   1250d:	c9                   	leave  
   1250e:	c3                   	ret    

0001250f <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   1250f:	55                   	push   %ebp
   12510:	89 e5                	mov    %esp,%ebp
   12512:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   12515:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12519:	75 19                	jne    12534 <sem_init+0x25>
   1251b:	68 be 42 01 00       	push   $0x142be
   12520:	68 04 43 01 00       	push   $0x14304
   12525:	6a 18                	push   $0x18
   12527:	68 d0 42 01 00       	push   $0x142d0
   1252c:	e8 e1 04 00 00       	call   12a12 <pannic>
   12531:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   12534:	8b 45 08             	mov    0x8(%ebp),%eax
   12537:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   1253d:	8b 45 08             	mov    0x8(%ebp),%eax
   12540:	83 c0 04             	add    $0x4,%eax
   12543:	83 ec 0c             	sub    $0xc,%esp
   12546:	50                   	push   %eax
   12547:	e8 47 ff ff ff       	call   12493 <list_init>
   1254c:	83 c4 10             	add    $0x10,%esp
}
   1254f:	90                   	nop
   12550:	c9                   	leave  
   12551:	c3                   	ret    

00012552 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12552:	55                   	push   %ebp
   12553:	89 e5                	mov    %esp,%ebp
   12555:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12558:	e8 b5 fa ff ff       	call   12012 <idt_enter_protection>
   1255d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12560:	8b 45 08             	mov    0x8(%ebp),%eax
   12563:	8b 00                	mov    (%eax),%eax
   12565:	85 c0                	test   %eax,%eax
   12567:	7e 0f                	jle    12578 <sem_wait+0x26>
        --sem->count;   
   12569:	8b 45 08             	mov    0x8(%ebp),%eax
   1256c:	8b 00                	mov    (%eax),%eax
   1256e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12571:	8b 45 08             	mov    0x8(%ebp),%eax
   12574:	89 10                	mov    %edx,(%eax)
   12576:	eb 34                	jmp    125ac <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   12578:	e8 97 eb ff ff       	call   11114 <task_current>
   1257d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   12580:	83 ec 0c             	sub    $0xc,%esp
   12583:	ff 75 f0             	push   -0x10(%ebp)
   12586:	e8 10 eb ff ff       	call   1109b <task_set_unready>
   1258b:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   1258e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12591:	8d 50 44             	lea    0x44(%eax),%edx
   12594:	8b 45 08             	mov    0x8(%ebp),%eax
   12597:	83 c0 04             	add    $0x4,%eax
   1259a:	83 ec 08             	sub    $0x8,%esp
   1259d:	52                   	push   %edx
   1259e:	50                   	push   %eax
   1259f:	e8 b9 0d 00 00       	call   1335d <list_insert_last>
   125a4:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   125a7:	e8 72 eb ff ff       	call   1111e <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   125ac:	83 ec 0c             	sub    $0xc,%esp
   125af:	ff 75 f4             	push   -0xc(%ebp)
   125b2:	e8 73 fa ff ff       	call   1202a <idt_leave_protection>
   125b7:	83 c4 10             	add    $0x10,%esp
}
   125ba:	90                   	nop
   125bb:	c9                   	leave  
   125bc:	c3                   	ret    

000125bd <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   125bd:	55                   	push   %ebp
   125be:	89 e5                	mov    %esp,%ebp
   125c0:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   125c3:	e8 4a fa ff ff       	call   12012 <idt_enter_protection>
   125c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   125cb:	8b 45 08             	mov    0x8(%ebp),%eax
   125ce:	83 c0 04             	add    $0x4,%eax
   125d1:	83 ec 0c             	sub    $0xc,%esp
   125d4:	50                   	push   %eax
   125d5:	e8 00 ff ff ff       	call   124da <list_is_empty>
   125da:	83 c4 10             	add    $0x10,%esp
   125dd:	85 c0                	test   %eax,%eax
   125df:	75 3b                	jne    1261c <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   125e1:	8b 45 08             	mov    0x8(%ebp),%eax
   125e4:	83 c0 04             	add    $0x4,%eax
   125e7:	83 ec 0c             	sub    $0xc,%esp
   125ea:	50                   	push   %eax
   125eb:	e8 fc 0d 00 00       	call   133ec <list_remove_first>
   125f0:	83 c4 10             	add    $0x10,%esp
   125f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   125f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125fa:	74 08                	je     12604 <sem_notify+0x47>
   125fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125ff:	83 e8 44             	sub    $0x44,%eax
   12602:	eb 05                	jmp    12609 <sem_notify+0x4c>
   12604:	b8 00 00 00 00       	mov    $0x0,%eax
   12609:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1260c:	83 ec 0c             	sub    $0xc,%esp
   1260f:	ff 75 ec             	push   -0x14(%ebp)
   12612:	e8 39 ea ff ff       	call   11050 <task_set_ready>
   12617:	83 c4 10             	add    $0x10,%esp
   1261a:	eb 0d                	jmp    12629 <sem_notify+0x6c>
    } else {
        sem->count++;
   1261c:	8b 45 08             	mov    0x8(%ebp),%eax
   1261f:	8b 00                	mov    (%eax),%eax
   12621:	8d 50 01             	lea    0x1(%eax),%edx
   12624:	8b 45 08             	mov    0x8(%ebp),%eax
   12627:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   12629:	83 ec 0c             	sub    $0xc,%esp
   1262c:	ff 75 f4             	push   -0xc(%ebp)
   1262f:	e8 f6 f9 ff ff       	call   1202a <idt_leave_protection>
   12634:	83 c4 10             	add    $0x10,%esp

}
   12637:	90                   	nop
   12638:	c9                   	leave  
   12639:	c3                   	ret    

0001263a <sem_count>:

int sem_count(sem_t *sem) {
   1263a:	55                   	push   %ebp
   1263b:	89 e5                	mov    %esp,%ebp
   1263d:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12640:	e8 cd f9 ff ff       	call   12012 <idt_enter_protection>
   12645:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12648:	8b 45 08             	mov    0x8(%ebp),%eax
   1264b:	8b 00                	mov    (%eax),%eax
   1264d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12650:	83 ec 0c             	sub    $0xc,%esp
   12653:	ff 75 f4             	push   -0xc(%ebp)
   12656:	e8 cf f9 ff ff       	call   1202a <idt_leave_protection>
   1265b:	83 c4 10             	add    $0x10,%esp

    return count;
   1265e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12661:	c9                   	leave  
   12662:	c3                   	ret    

00012663 <list_init>:
static inline void list_init(list_t *list) {
   12663:	55                   	push   %ebp
   12664:	89 e5                	mov    %esp,%ebp
   12666:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12669:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1266d:	75 19                	jne    12688 <list_init+0x25>
   1266f:	68 2c 43 01 00       	push   $0x1432c
   12674:	68 30 44 01 00       	push   $0x14430
   12679:	6a 31                	push   $0x31
   1267b:	68 40 43 01 00       	push   $0x14340
   12680:	e8 8d 03 00 00       	call   12a12 <pannic>
   12685:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12688:	8b 45 08             	mov    0x8(%ebp),%eax
   1268b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12692:	8b 45 08             	mov    0x8(%ebp),%eax
   12695:	8b 50 04             	mov    0x4(%eax),%edx
   12698:	8b 45 08             	mov    0x8(%ebp),%eax
   1269b:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1269d:	8b 45 08             	mov    0x8(%ebp),%eax
   126a0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   126a7:	90                   	nop
   126a8:	c9                   	leave  
   126a9:	c3                   	ret    

000126aa <list_get_size>:
static inline int list_get_size(list_t *list) {
   126aa:	55                   	push   %ebp
   126ab:	89 e5                	mov    %esp,%ebp
   126ad:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   126b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126b4:	75 19                	jne    126cf <list_get_size+0x25>
   126b6:	68 2c 43 01 00       	push   $0x1432c
   126bb:	68 3c 44 01 00       	push   $0x1443c
   126c0:	6a 3e                	push   $0x3e
   126c2:	68 40 43 01 00       	push   $0x14340
   126c7:	e8 46 03 00 00       	call   12a12 <pannic>
   126cc:	83 c4 10             	add    $0x10,%esp
    return list->size;
   126cf:	8b 45 08             	mov    0x8(%ebp),%eax
   126d2:	8b 40 08             	mov    0x8(%eax),%eax
}
   126d5:	c9                   	leave  
   126d6:	c3                   	ret    

000126d7 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   126d7:	55                   	push   %ebp
   126d8:	89 e5                	mov    %esp,%ebp
   126da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   126dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126e1:	75 19                	jne    126fc <list_get_first+0x25>
   126e3:	68 2c 43 01 00       	push   $0x1432c
   126e8:	68 5c 44 01 00       	push   $0x1445c
   126ed:	6a 44                	push   $0x44
   126ef:	68 40 43 01 00       	push   $0x14340
   126f4:	e8 19 03 00 00       	call   12a12 <pannic>
   126f9:	83 c4 10             	add    $0x10,%esp
    return list->first;
   126fc:	8b 45 08             	mov    0x8(%ebp),%eax
   126ff:	8b 00                	mov    (%eax),%eax
}
   12701:	c9                   	leave  
   12702:	c3                   	ret    

00012703 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   12703:	55                   	push   %ebp
   12704:	89 e5                	mov    %esp,%ebp
   12706:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12709:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1270d:	75 19                	jne    12728 <list_get_last+0x25>
   1270f:	68 2c 43 01 00       	push   $0x1432c
   12714:	68 4c 44 01 00       	push   $0x1444c
   12719:	6a 4a                	push   $0x4a
   1271b:	68 40 43 01 00       	push   $0x14340
   12720:	e8 ed 02 00 00       	call   12a12 <pannic>
   12725:	83 c4 10             	add    $0x10,%esp

    return list->last;
   12728:	8b 45 08             	mov    0x8(%ebp),%eax
   1272b:	8b 40 04             	mov    0x4(%eax),%eax
}
   1272e:	c9                   	leave  
   1272f:	c3                   	ret    

00012730 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12730:	55                   	push   %ebp
   12731:	89 e5                	mov    %esp,%ebp
   12733:	56                   	push   %esi
   12734:	53                   	push   %ebx
   12735:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   12738:	83 ec 0c             	sub    $0xc,%esp
   1273b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1273e:	50                   	push   %eax
   1273f:	e8 1f ff ff ff       	call   12663 <list_init>
   12744:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12747:	83 ec 0c             	sub    $0xc,%esp
   1274a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1274d:	50                   	push   %eax
   1274e:	e8 57 ff ff ff       	call   126aa <list_get_size>
   12753:	83 c4 10             	add    $0x10,%esp
   12756:	89 c6                	mov    %eax,%esi
   12758:	83 ec 0c             	sub    $0xc,%esp
   1275b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1275e:	50                   	push   %eax
   1275f:	e8 9f ff ff ff       	call   12703 <list_get_last>
   12764:	83 c4 10             	add    $0x10,%esp
   12767:	89 c3                	mov    %eax,%ebx
   12769:	83 ec 0c             	sub    $0xc,%esp
   1276c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1276f:	50                   	push   %eax
   12770:	e8 62 ff ff ff       	call   126d7 <list_get_first>
   12775:	83 c4 10             	add    $0x10,%esp
   12778:	56                   	push   %esi
   12779:	53                   	push   %ebx
   1277a:	50                   	push   %eax
   1277b:	68 80 43 01 00       	push   $0x14380
   12780:	e8 5c 0f 00 00       	call   136e1 <log_printf>
   12785:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   12788:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1278f:	eb 3f                	jmp    127d0 <list_test+0xa0>
        list_node_t *node = nodes + i;
   12791:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12794:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1279b:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1279e:	01 d0                	add    %edx,%eax
   127a0:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   127a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
   127a6:	83 ec 04             	sub    $0x4,%esp
   127a9:	50                   	push   %eax
   127aa:	ff 75 f4             	push   -0xc(%ebp)
   127ad:	68 a8 43 01 00       	push   $0x143a8
   127b2:	e8 2a 0f 00 00       	call   136e1 <log_printf>
   127b7:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   127ba:	83 ec 08             	sub    $0x8,%esp
   127bd:	ff 75 d0             	push   -0x30(%ebp)
   127c0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127c3:	50                   	push   %eax
   127c4:	e8 09 0b 00 00       	call   132d2 <list_insert_first>
   127c9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   127cc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   127d0:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   127d4:	7e bb                	jle    12791 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   127d6:	83 ec 0c             	sub    $0xc,%esp
   127d9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127dc:	50                   	push   %eax
   127dd:	e8 c8 fe ff ff       	call   126aa <list_get_size>
   127e2:	83 c4 10             	add    $0x10,%esp
   127e5:	89 c6                	mov    %eax,%esi
   127e7:	83 ec 0c             	sub    $0xc,%esp
   127ea:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127ed:	50                   	push   %eax
   127ee:	e8 10 ff ff ff       	call   12703 <list_get_last>
   127f3:	83 c4 10             	add    $0x10,%esp
   127f6:	89 c3                	mov    %eax,%ebx
   127f8:	83 ec 0c             	sub    $0xc,%esp
   127fb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   127fe:	50                   	push   %eax
   127ff:	e8 d3 fe ff ff       	call   126d7 <list_get_first>
   12804:	83 c4 10             	add    $0x10,%esp
   12807:	56                   	push   %esi
   12808:	53                   	push   %ebx
   12809:	50                   	push   %eax
   1280a:	68 80 43 01 00       	push   $0x14380
   1280f:	e8 cd 0e 00 00       	call   136e1 <log_printf>
   12814:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   12817:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1281e:	eb 2d                	jmp    1284d <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12820:	83 ec 0c             	sub    $0xc,%esp
   12823:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12826:	50                   	push   %eax
   12827:	e8 c0 0b 00 00       	call   133ec <list_remove_first>
   1282c:	83 c4 10             	add    $0x10,%esp
   1282f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12832:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   12835:	83 ec 04             	sub    $0x4,%esp
   12838:	50                   	push   %eax
   12839:	ff 75 f0             	push   -0x10(%ebp)
   1283c:	68 c7 43 01 00       	push   $0x143c7
   12841:	e8 9b 0e 00 00       	call   136e1 <log_printf>
   12846:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12849:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1284d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12851:	7e cd                	jle    12820 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12853:	83 ec 0c             	sub    $0xc,%esp
   12856:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12859:	50                   	push   %eax
   1285a:	e8 4b fe ff ff       	call   126aa <list_get_size>
   1285f:	83 c4 10             	add    $0x10,%esp
   12862:	89 c6                	mov    %eax,%esi
   12864:	83 ec 0c             	sub    $0xc,%esp
   12867:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1286a:	50                   	push   %eax
   1286b:	e8 93 fe ff ff       	call   12703 <list_get_last>
   12870:	83 c4 10             	add    $0x10,%esp
   12873:	89 c3                	mov    %eax,%ebx
   12875:	83 ec 0c             	sub    $0xc,%esp
   12878:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1287b:	50                   	push   %eax
   1287c:	e8 56 fe ff ff       	call   126d7 <list_get_first>
   12881:	83 c4 10             	add    $0x10,%esp
   12884:	56                   	push   %esi
   12885:	53                   	push   %ebx
   12886:	50                   	push   %eax
   12887:	68 80 43 01 00       	push   $0x14380
   1288c:	e8 50 0e 00 00       	call   136e1 <log_printf>
   12891:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   12894:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1289b:	eb 3f                	jmp    128dc <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1289d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   128a0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   128a7:	8d 45 9c             	lea    -0x64(%ebp),%eax
   128aa:	01 d0                	add    %edx,%eax
   128ac:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   128af:	8b 45 d8             	mov    -0x28(%ebp),%eax
   128b2:	83 ec 04             	sub    $0x4,%esp
   128b5:	50                   	push   %eax
   128b6:	ff 75 ec             	push   -0x14(%ebp)
   128b9:	68 de 43 01 00       	push   $0x143de
   128be:	e8 1e 0e 00 00       	call   136e1 <log_printf>
   128c3:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   128c6:	83 ec 08             	sub    $0x8,%esp
   128c9:	ff 75 d8             	push   -0x28(%ebp)
   128cc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   128cf:	50                   	push   %eax
   128d0:	e8 88 0a 00 00       	call   1335d <list_insert_last>
   128d5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   128d8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   128dc:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   128e0:	7e bb                	jle    1289d <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   128e2:	83 ec 0c             	sub    $0xc,%esp
   128e5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   128e8:	50                   	push   %eax
   128e9:	e8 bc fd ff ff       	call   126aa <list_get_size>
   128ee:	83 c4 10             	add    $0x10,%esp
   128f1:	89 c6                	mov    %eax,%esi
   128f3:	83 ec 0c             	sub    $0xc,%esp
   128f6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   128f9:	50                   	push   %eax
   128fa:	e8 04 fe ff ff       	call   12703 <list_get_last>
   128ff:	83 c4 10             	add    $0x10,%esp
   12902:	89 c3                	mov    %eax,%ebx
   12904:	83 ec 0c             	sub    $0xc,%esp
   12907:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1290a:	50                   	push   %eax
   1290b:	e8 c7 fd ff ff       	call   126d7 <list_get_first>
   12910:	83 c4 10             	add    $0x10,%esp
   12913:	56                   	push   %esi
   12914:	53                   	push   %ebx
   12915:	50                   	push   %eax
   12916:	68 80 43 01 00       	push   $0x14380
   1291b:	e8 c1 0d 00 00       	call   136e1 <log_printf>
   12920:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12923:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1292a:	eb 2d                	jmp    12959 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1292c:	83 ec 0c             	sub    $0xc,%esp
   1292f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12932:	50                   	push   %eax
   12933:	e8 65 0b 00 00       	call   1349d <list_remove_last>
   12938:	83 c4 10             	add    $0x10,%esp
   1293b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1293e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12941:	83 ec 04             	sub    $0x4,%esp
   12944:	50                   	push   %eax
   12945:	ff 75 e8             	push   -0x18(%ebp)
   12948:	68 fc 43 01 00       	push   $0x143fc
   1294d:	e8 8f 0d 00 00       	call   136e1 <log_printf>
   12952:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12955:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12959:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1295d:	7e cd                	jle    1292c <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1295f:	83 ec 0c             	sub    $0xc,%esp
   12962:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12965:	50                   	push   %eax
   12966:	e8 3f fd ff ff       	call   126aa <list_get_size>
   1296b:	83 c4 10             	add    $0x10,%esp
   1296e:	89 c6                	mov    %eax,%esi
   12970:	83 ec 0c             	sub    $0xc,%esp
   12973:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12976:	50                   	push   %eax
   12977:	e8 87 fd ff ff       	call   12703 <list_get_last>
   1297c:	83 c4 10             	add    $0x10,%esp
   1297f:	89 c3                	mov    %eax,%ebx
   12981:	83 ec 0c             	sub    $0xc,%esp
   12984:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12987:	50                   	push   %eax
   12988:	e8 4a fd ff ff       	call   126d7 <list_get_first>
   1298d:	83 c4 10             	add    $0x10,%esp
   12990:	56                   	push   %esi
   12991:	53                   	push   %ebx
   12992:	50                   	push   %eax
   12993:	68 80 43 01 00       	push   $0x14380
   12998:	e8 44 0d 00 00       	call   136e1 <log_printf>
   1299d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   129a0:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   129a7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   129ae:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   129b5:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   129bc:	8d 45 90             	lea    -0x70(%ebp),%eax
   129bf:	83 c0 04             	add    $0x4,%eax
   129c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   129c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   129c9:	74 08                	je     129d3 <list_test+0x2a3>
   129cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   129ce:	83 e8 04             	sub    $0x4,%eax
   129d1:	eb 05                	jmp    129d8 <list_test+0x2a8>
   129d3:	b8 00 00 00 00       	mov    $0x0,%eax
   129d8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   129db:	8d 45 90             	lea    -0x70(%ebp),%eax
   129de:	83 ec 08             	sub    $0x8,%esp
   129e1:	50                   	push   %eax
   129e2:	68 12 44 01 00       	push   $0x14412
   129e7:	e8 f5 0c 00 00       	call   136e1 <log_printf>
   129ec:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   129ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
   129f2:	83 ec 08             	sub    $0x8,%esp
   129f5:	50                   	push   %eax
   129f6:	68 20 44 01 00       	push   $0x14420
   129fb:	e8 e1 0c 00 00       	call   136e1 <log_printf>
   12a00:	83 c4 10             	add    $0x10,%esp

 }
   12a03:	90                   	nop
   12a04:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12a07:	5b                   	pop    %ebx
   12a08:	5e                   	pop    %esi
   12a09:	5d                   	pop    %ebp
   12a0a:	c3                   	ret    

00012a0b <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12a0b:	55                   	push   %ebp
   12a0c:	89 e5                	mov    %esp,%ebp
   12a0e:	f4                   	hlt    
   12a0f:	90                   	nop
   12a10:	5d                   	pop    %ebp
   12a11:	c3                   	ret    

00012a12 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   12a12:	55                   	push   %ebp
   12a13:	89 e5                	mov    %esp,%ebp
   12a15:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12a18:	83 ec 08             	sub    $0x8,%esp
   12a1b:	ff 75 14             	push   0x14(%ebp)
   12a1e:	68 6b 44 01 00       	push   $0x1446b
   12a23:	e8 b9 0c 00 00       	call   136e1 <log_printf>
   12a28:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12a2b:	ff 75 10             	push   0x10(%ebp)
   12a2e:	ff 75 0c             	push   0xc(%ebp)
   12a31:	ff 75 08             	push   0x8(%ebp)
   12a34:	68 7c 44 01 00       	push   $0x1447c
   12a39:	e8 a3 0c 00 00       	call   136e1 <log_printf>
   12a3e:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12a41:	e8 c5 ff ff ff       	call   12a0b <hlt>
   12a46:	eb f9                	jmp    12a41 <pannic+0x2f>

00012a48 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12a48:	55                   	push   %ebp
   12a49:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12a4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4e:	83 c0 07             	add    $0x7,%eax
   12a51:	8d 50 07             	lea    0x7(%eax),%edx
   12a54:	85 c0                	test   %eax,%eax
   12a56:	0f 48 c2             	cmovs  %edx,%eax
   12a59:	c1 f8 03             	sar    $0x3,%eax
}
   12a5c:	5d                   	pop    %ebp
   12a5d:	c3                   	ret    

00012a5e <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12a5e:	55                   	push   %ebp
   12a5f:	89 e5                	mov    %esp,%ebp
   12a61:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12a64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a68:	75 19                	jne    12a83 <bitmap_init+0x25>
   12a6a:	68 98 44 01 00       	push   $0x14498
   12a6f:	68 2c 45 01 00       	push   $0x1452c
   12a74:	6a 24                	push   $0x24
   12a76:	68 b0 44 01 00       	push   $0x144b0
   12a7b:	e8 92 ff ff ff       	call   12a12 <pannic>
   12a80:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12a83:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a87:	75 19                	jne    12aa2 <bitmap_init+0x44>
   12a89:	68 e8 44 01 00       	push   $0x144e8
   12a8e:	68 2c 45 01 00       	push   $0x1452c
   12a93:	6a 25                	push   $0x25
   12a95:	68 b0 44 01 00       	push   $0x144b0
   12a9a:	e8 73 ff ff ff       	call   12a12 <pannic>
   12a9f:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa5:	8b 55 10             	mov    0x10(%ebp),%edx
   12aa8:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   12aad:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ab0:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   12ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab6:	8b 00                	mov    (%eax),%eax
   12ab8:	83 ec 0c             	sub    $0xc,%esp
   12abb:	50                   	push   %eax
   12abc:	e8 87 ff ff ff       	call   12a48 <bitmap_byte_count>
   12ac1:	83 c4 10             	add    $0x10,%esp
   12ac4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12ac7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12acb:	74 07                	je     12ad4 <bitmap_init+0x76>
   12acd:	ba ff 00 00 00       	mov    $0xff,%edx
   12ad2:	eb 05                	jmp    12ad9 <bitmap_init+0x7b>
   12ad4:	ba 00 00 00 00       	mov    $0x0,%edx
   12ad9:	8b 45 08             	mov    0x8(%ebp),%eax
   12adc:	8b 40 04             	mov    0x4(%eax),%eax
   12adf:	83 ec 04             	sub    $0x4,%esp
   12ae2:	ff 75 f4             	push   -0xc(%ebp)
   12ae5:	52                   	push   %edx
   12ae6:	50                   	push   %eax
   12ae7:	e8 28 04 00 00       	call   12f14 <kernel_memset>
   12aec:	83 c4 10             	add    $0x10,%esp

}
   12aef:	90                   	nop
   12af0:	c9                   	leave  
   12af1:	c3                   	ret    

00012af2 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   12af2:	55                   	push   %ebp
   12af3:	89 e5                	mov    %esp,%ebp
   12af5:	53                   	push   %ebx
   12af6:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12af9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12afd:	75 19                	jne    12b18 <bitmap_get_bit+0x26>
   12aff:	68 98 44 01 00       	push   $0x14498
   12b04:	68 38 45 01 00       	push   $0x14538
   12b09:	6a 39                	push   $0x39
   12b0b:	68 b0 44 01 00       	push   $0x144b0
   12b10:	e8 fd fe ff ff       	call   12a12 <pannic>
   12b15:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12b18:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b1c:	79 19                	jns    12b37 <bitmap_get_bit+0x45>
   12b1e:	68 fc 44 01 00       	push   $0x144fc
   12b23:	68 38 45 01 00       	push   $0x14538
   12b28:	6a 3a                	push   $0x3a
   12b2a:	68 b0 44 01 00       	push   $0x144b0
   12b2f:	e8 de fe ff ff       	call   12a12 <pannic>
   12b34:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12b37:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3a:	8b 48 04             	mov    0x4(%eax),%ecx
   12b3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b40:	8d 50 07             	lea    0x7(%eax),%edx
   12b43:	85 c0                	test   %eax,%eax
   12b45:	0f 48 c2             	cmovs  %edx,%eax
   12b48:	c1 f8 03             	sar    $0x3,%eax
   12b4b:	01 c8                	add    %ecx,%eax
   12b4d:	0f b6 00             	movzbl (%eax),%eax
   12b50:	89 c3                	mov    %eax,%ebx
   12b52:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b55:	83 e0 07             	and    $0x7,%eax
   12b58:	ba 01 00 00 00       	mov    $0x1,%edx
   12b5d:	89 c1                	mov    %eax,%ecx
   12b5f:	d3 e2                	shl    %cl,%edx
   12b61:	89 d0                	mov    %edx,%eax
   12b63:	21 d8                	and    %ebx,%eax
}
   12b65:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12b68:	c9                   	leave  
   12b69:	c3                   	ret    

00012b6a <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12b6a:	55                   	push   %ebp
   12b6b:	89 e5                	mov    %esp,%ebp
   12b6d:	56                   	push   %esi
   12b6e:	53                   	push   %ebx
   12b6f:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12b72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b76:	75 19                	jne    12b91 <bitmap_set_bit+0x27>
   12b78:	68 98 44 01 00       	push   $0x14498
   12b7d:	68 48 45 01 00       	push   $0x14548
   12b82:	6a 48                	push   $0x48
   12b84:	68 b0 44 01 00       	push   $0x144b0
   12b89:	e8 84 fe ff ff       	call   12a12 <pannic>
   12b8e:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12b91:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b95:	78 06                	js     12b9d <bitmap_set_bit+0x33>
   12b97:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12b9b:	79 19                	jns    12bb6 <bitmap_set_bit+0x4c>
   12b9d:	68 07 45 01 00       	push   $0x14507
   12ba2:	68 48 45 01 00       	push   $0x14548
   12ba7:	6a 49                	push   $0x49
   12ba9:	68 b0 44 01 00       	push   $0x144b0
   12bae:	e8 5f fe ff ff       	call   12a12 <pannic>
   12bb3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12bb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12bbd:	e9 92 00 00 00       	jmp    12c54 <bitmap_set_bit+0xea>
        if (bit) {
   12bc2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12bc6:	74 42                	je     12c0a <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bcb:	8b 48 04             	mov    0x4(%eax),%ecx
   12bce:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bd1:	8d 50 07             	lea    0x7(%eax),%edx
   12bd4:	85 c0                	test   %eax,%eax
   12bd6:	0f 48 c2             	cmovs  %edx,%eax
   12bd9:	c1 f8 03             	sar    $0x3,%eax
   12bdc:	89 c2                	mov    %eax,%edx
   12bde:	89 d0                	mov    %edx,%eax
   12be0:	01 c8                	add    %ecx,%eax
   12be2:	0f b6 00             	movzbl (%eax),%eax
   12be5:	89 c6                	mov    %eax,%esi
   12be7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bea:	83 e0 07             	and    $0x7,%eax
   12bed:	bb 01 00 00 00       	mov    $0x1,%ebx
   12bf2:	89 c1                	mov    %eax,%ecx
   12bf4:	d3 e3                	shl    %cl,%ebx
   12bf6:	89 d8                	mov    %ebx,%eax
   12bf8:	89 f1                	mov    %esi,%ecx
   12bfa:	09 c1                	or     %eax,%ecx
   12bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   12bff:	8b 40 04             	mov    0x4(%eax),%eax
   12c02:	01 d0                	add    %edx,%eax
   12c04:	89 ca                	mov    %ecx,%edx
   12c06:	88 10                	mov    %dl,(%eax)
   12c08:	eb 42                	jmp    12c4c <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12c0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c0d:	8b 48 04             	mov    0x4(%eax),%ecx
   12c10:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c13:	8d 50 07             	lea    0x7(%eax),%edx
   12c16:	85 c0                	test   %eax,%eax
   12c18:	0f 48 c2             	cmovs  %edx,%eax
   12c1b:	c1 f8 03             	sar    $0x3,%eax
   12c1e:	89 c2                	mov    %eax,%edx
   12c20:	89 d0                	mov    %edx,%eax
   12c22:	01 c8                	add    %ecx,%eax
   12c24:	0f b6 00             	movzbl (%eax),%eax
   12c27:	89 c6                	mov    %eax,%esi
   12c29:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c2c:	83 e0 07             	and    $0x7,%eax
   12c2f:	bb 01 00 00 00       	mov    $0x1,%ebx
   12c34:	89 c1                	mov    %eax,%ecx
   12c36:	d3 e3                	shl    %cl,%ebx
   12c38:	89 d8                	mov    %ebx,%eax
   12c3a:	f7 d0                	not    %eax
   12c3c:	89 f1                	mov    %esi,%ecx
   12c3e:	21 c1                	and    %eax,%ecx
   12c40:	8b 45 08             	mov    0x8(%ebp),%eax
   12c43:	8b 40 04             	mov    0x4(%eax),%eax
   12c46:	01 d0                	add    %edx,%eax
   12c48:	89 ca                	mov    %ecx,%edx
   12c4a:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12c4c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12c50:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c57:	3b 45 10             	cmp    0x10(%ebp),%eax
   12c5a:	7d 0e                	jge    12c6a <bitmap_set_bit+0x100>
   12c5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5f:	8b 00                	mov    (%eax),%eax
   12c61:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c64:	0f 8c 58 ff ff ff    	jl     12bc2 <bitmap_set_bit+0x58>
        }
    }
}
   12c6a:	90                   	nop
   12c6b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12c6e:	5b                   	pop    %ebx
   12c6f:	5e                   	pop    %esi
   12c70:	5d                   	pop    %ebp
   12c71:	c3                   	ret    

00012c72 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12c72:	55                   	push   %ebp
   12c73:	89 e5                	mov    %esp,%ebp
   12c75:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12c78:	83 ec 08             	sub    $0x8,%esp
   12c7b:	ff 75 0c             	push   0xc(%ebp)
   12c7e:	ff 75 08             	push   0x8(%ebp)
   12c81:	e8 6c fe ff ff       	call   12af2 <bitmap_get_bit>
   12c86:	83 c4 10             	add    $0x10,%esp
   12c89:	84 c0                	test   %al,%al
   12c8b:	0f 95 c0             	setne  %al
   12c8e:	0f b6 c0             	movzbl %al,%eax
}
   12c91:	c9                   	leave  
   12c92:	c3                   	ret    

00012c93 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12c93:	55                   	push   %ebp
   12c94:	89 e5                	mov    %esp,%ebp
   12c96:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12c99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c9d:	75 19                	jne    12cb8 <bitmap_alloc_nbits+0x25>
   12c9f:	68 98 44 01 00       	push   $0x14498
   12ca4:	68 58 45 01 00       	push   $0x14558
   12ca9:	6a 68                	push   $0x68
   12cab:	68 b0 44 01 00       	push   $0x144b0
   12cb0:	e8 5d fd ff ff       	call   12a12 <pannic>
   12cb5:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12cb8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12cbc:	79 19                	jns    12cd7 <bitmap_alloc_nbits+0x44>
   12cbe:	68 20 45 01 00       	push   $0x14520
   12cc3:	68 58 45 01 00       	push   $0x14558
   12cc8:	6a 69                	push   $0x69
   12cca:	68 b0 44 01 00       	push   $0x144b0
   12ccf:	e8 3e fd ff ff       	call   12a12 <pannic>
   12cd4:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12cd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12cde:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12ce5:	e9 8f 00 00 00       	jmp    12d79 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12cea:	83 ec 08             	sub    $0x8,%esp
   12ced:	ff 75 f4             	push   -0xc(%ebp)
   12cf0:	ff 75 08             	push   0x8(%ebp)
   12cf3:	e8 fa fd ff ff       	call   12af2 <bitmap_get_bit>
   12cf8:	83 c4 10             	add    $0x10,%esp
   12cfb:	0f b6 c0             	movzbl %al,%eax
   12cfe:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12d01:	74 06                	je     12d09 <bitmap_alloc_nbits+0x76>
            search_index++;
   12d03:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12d07:	eb 70                	jmp    12d79 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12d0f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12d16:	eb 2d                	jmp    12d45 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d1b:	8d 50 01             	lea    0x1(%eax),%edx
   12d1e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12d21:	83 ec 08             	sub    $0x8,%esp
   12d24:	50                   	push   %eax
   12d25:	ff 75 08             	push   0x8(%ebp)
   12d28:	e8 c5 fd ff ff       	call   12af2 <bitmap_get_bit>
   12d2d:	83 c4 10             	add    $0x10,%esp
   12d30:	0f b6 c0             	movzbl %al,%eax
   12d33:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12d36:	74 09                	je     12d41 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12d38:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12d3f:	eb 16                	jmp    12d57 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12d41:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12d45:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12d48:	3b 45 10             	cmp    0x10(%ebp),%eax
   12d4b:	7d 0a                	jge    12d57 <bitmap_alloc_nbits+0xc4>
   12d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d50:	8b 00                	mov    (%eax),%eax
   12d52:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12d55:	7c c1                	jl     12d18 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12d57:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12d5b:	74 1c                	je     12d79 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12d5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d60:	f7 d0                	not    %eax
   12d62:	50                   	push   %eax
   12d63:	ff 75 10             	push   0x10(%ebp)
   12d66:	ff 75 f0             	push   -0x10(%ebp)
   12d69:	ff 75 08             	push   0x8(%ebp)
   12d6c:	e8 f9 fd ff ff       	call   12b6a <bitmap_set_bit>
   12d71:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12d74:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12d77:	eb 13                	jmp    12d8c <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12d79:	8b 45 08             	mov    0x8(%ebp),%eax
   12d7c:	8b 00                	mov    (%eax),%eax
   12d7e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12d81:	0f 8c 63 ff ff ff    	jl     12cea <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12d87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12d8c:	c9                   	leave  
   12d8d:	c3                   	ret    

00012d8e <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12d8e:	55                   	push   %ebp
   12d8f:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12d91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d95:	74 3b                	je     12dd2 <kernel_strcpy+0x44>
   12d97:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d9b:	74 35                	je     12dd2 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12d9d:	eb 17                	jmp    12db6 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12d9f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12da2:	8d 42 01             	lea    0x1(%edx),%eax
   12da5:	89 45 0c             	mov    %eax,0xc(%ebp)
   12da8:	8b 45 08             	mov    0x8(%ebp),%eax
   12dab:	8d 48 01             	lea    0x1(%eax),%ecx
   12dae:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12db1:	0f b6 12             	movzbl (%edx),%edx
   12db4:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12db6:	8b 45 08             	mov    0x8(%ebp),%eax
   12db9:	0f b6 00             	movzbl (%eax),%eax
   12dbc:	84 c0                	test   %al,%al
   12dbe:	74 0a                	je     12dca <kernel_strcpy+0x3c>
   12dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dc3:	0f b6 00             	movzbl (%eax),%eax
   12dc6:	84 c0                	test   %al,%al
   12dc8:	75 d5                	jne    12d9f <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12dca:	8b 45 08             	mov    0x8(%ebp),%eax
   12dcd:	c6 00 00             	movb   $0x0,(%eax)
   12dd0:	eb 01                	jmp    12dd3 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   12dd2:	90                   	nop
    
}
   12dd3:	5d                   	pop    %ebp
   12dd4:	c3                   	ret    

00012dd5 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12dd5:	55                   	push   %ebp
   12dd6:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12dd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ddc:	74 45                	je     12e23 <kernel_strncpy+0x4e>
   12dde:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12de2:	74 3f                	je     12e23 <kernel_strncpy+0x4e>
   12de4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12de8:	74 39                	je     12e23 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   12dea:	eb 17                	jmp    12e03 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12dec:	8b 55 0c             	mov    0xc(%ebp),%edx
   12def:	8d 42 01             	lea    0x1(%edx),%eax
   12df2:	89 45 0c             	mov    %eax,0xc(%ebp)
   12df5:	8b 45 08             	mov    0x8(%ebp),%eax
   12df8:	8d 48 01             	lea    0x1(%eax),%ecx
   12dfb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12dfe:	0f b6 12             	movzbl (%edx),%edx
   12e01:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   12e03:	8b 45 10             	mov    0x10(%ebp),%eax
   12e06:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e09:	89 55 10             	mov    %edx,0x10(%ebp)
   12e0c:	83 f8 01             	cmp    $0x1,%eax
   12e0f:	7e 0a                	jle    12e1b <kernel_strncpy+0x46>
   12e11:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e14:	0f b6 00             	movzbl (%eax),%eax
   12e17:	84 c0                	test   %al,%al
   12e19:	75 d1                	jne    12dec <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1e:	c6 00 00             	movb   $0x0,(%eax)
   12e21:	eb 01                	jmp    12e24 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   12e23:	90                   	nop
}
   12e24:	5d                   	pop    %ebp
   12e25:	c3                   	ret    

00012e26 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   12e26:	55                   	push   %ebp
   12e27:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12e29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e2d:	74 06                	je     12e35 <kernel_strncmp+0xf>
   12e2f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12e33:	75 0f                	jne    12e44 <kernel_strncmp+0x1e>
   12e35:	b8 00 00 00 00       	mov    $0x0,%eax
   12e3a:	eb 52                	jmp    12e8e <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12e3c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12e40:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   12e44:	8b 45 08             	mov    0x8(%ebp),%eax
   12e47:	0f b6 00             	movzbl (%eax),%eax
   12e4a:	84 c0                	test   %al,%al
   12e4c:	74 24                	je     12e72 <kernel_strncmp+0x4c>
   12e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e51:	0f b6 00             	movzbl (%eax),%eax
   12e54:	84 c0                	test   %al,%al
   12e56:	74 1a                	je     12e72 <kernel_strncmp+0x4c>
   12e58:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12e5c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e60:	74 10                	je     12e72 <kernel_strncmp+0x4c>
   12e62:	8b 45 08             	mov    0x8(%ebp),%eax
   12e65:	0f b6 10             	movzbl (%eax),%edx
   12e68:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e6b:	0f b6 00             	movzbl (%eax),%eax
   12e6e:	38 c2                	cmp    %al,%dl
   12e70:	74 ca                	je     12e3c <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12e72:	8b 45 08             	mov    0x8(%ebp),%eax
   12e75:	0f b6 10             	movzbl (%eax),%edx
   12e78:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e7b:	0f b6 00             	movzbl (%eax),%eax
   12e7e:	38 c2                	cmp    %al,%dl
   12e80:	7e 07                	jle    12e89 <kernel_strncmp+0x63>
   12e82:	b8 01 00 00 00       	mov    $0x1,%eax
   12e87:	eb 05                	jmp    12e8e <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12e89:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12e8e:	5d                   	pop    %ebp
   12e8f:	c3                   	ret    

00012e90 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12e90:	55                   	push   %ebp
   12e91:	89 e5                	mov    %esp,%ebp
   12e93:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   12e96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e9a:	75 07                	jne    12ea3 <kernel_strlen+0x13>
   12e9c:	b8 00 00 00 00       	mov    $0x0,%eax
   12ea1:	eb 20                	jmp    12ec3 <kernel_strlen+0x33>

    int len = 0;
   12ea3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12eaa:	eb 04                	jmp    12eb0 <kernel_strlen+0x20>
   12eac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12eb0:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb3:	8d 50 01             	lea    0x1(%eax),%edx
   12eb6:	89 55 08             	mov    %edx,0x8(%ebp)
   12eb9:	0f b6 00             	movzbl (%eax),%eax
   12ebc:	84 c0                	test   %al,%al
   12ebe:	75 ec                	jne    12eac <kernel_strlen+0x1c>

    return len;
   12ec0:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   12ec3:	c9                   	leave  
   12ec4:	c3                   	ret    

00012ec5 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12ec5:	55                   	push   %ebp
   12ec6:	89 e5                	mov    %esp,%ebp
   12ec8:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12ecb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ecf:	74 40                	je     12f11 <kernel_memcpy+0x4c>
   12ed1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12ed5:	74 3a                	je     12f11 <kernel_memcpy+0x4c>
   12ed7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12edb:	74 34                	je     12f11 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12edd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   12ee3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ee6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12ee9:	eb 17                	jmp    12f02 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12eeb:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12eee:	8d 42 01             	lea    0x1(%edx),%eax
   12ef1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12ef4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ef7:	8d 48 01             	lea    0x1(%eax),%ecx
   12efa:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12efd:	0f b6 12             	movzbl (%edx),%edx
   12f00:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12f02:	8b 45 10             	mov    0x10(%ebp),%eax
   12f05:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f08:	89 55 10             	mov    %edx,0x10(%ebp)
   12f0b:	85 c0                	test   %eax,%eax
   12f0d:	75 dc                	jne    12eeb <kernel_memcpy+0x26>
   12f0f:	eb 01                	jmp    12f12 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12f11:	90                   	nop
    }
    
}
   12f12:	c9                   	leave  
   12f13:	c3                   	ret    

00012f14 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12f14:	55                   	push   %ebp
   12f15:	89 e5                	mov    %esp,%ebp
   12f17:	83 ec 14             	sub    $0x14,%esp
   12f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f1d:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12f20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f24:	74 2c                	je     12f52 <kernel_memset+0x3e>
   12f26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12f2a:	74 26                	je     12f52 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12f2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f2f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12f32:	eb 0f                	jmp    12f43 <kernel_memset+0x2f>
        *(d++) = v;
   12f34:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f37:	8d 50 01             	lea    0x1(%eax),%edx
   12f3a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12f3d:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12f41:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12f43:	8b 45 10             	mov    0x10(%ebp),%eax
   12f46:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f49:	89 55 10             	mov    %edx,0x10(%ebp)
   12f4c:	85 c0                	test   %eax,%eax
   12f4e:	75 e4                	jne    12f34 <kernel_memset+0x20>
   12f50:	eb 01                	jmp    12f53 <kernel_memset+0x3f>
    if (!dest || !size) return;
   12f52:	90                   	nop
    }
    
}
   12f53:	c9                   	leave  
   12f54:	c3                   	ret    

00012f55 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   12f55:	55                   	push   %ebp
   12f56:	89 e5                	mov    %esp,%ebp
   12f58:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12f5b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f5f:	74 0c                	je     12f6d <kernel_memcmp+0x18>
   12f61:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12f65:	74 06                	je     12f6d <kernel_memcmp+0x18>
   12f67:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12f6b:	75 07                	jne    12f74 <kernel_memcmp+0x1f>
   12f6d:	b8 00 00 00 00       	mov    $0x0,%eax
   12f72:	eb 63                	jmp    12fd7 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12f74:	8b 45 08             	mov    0x8(%ebp),%eax
   12f77:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12f7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f7d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12f80:	eb 08                	jmp    12f8a <kernel_memcmp+0x35>
        d1++;
   12f82:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12f86:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12f8a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12f8e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12f92:	74 10                	je     12fa4 <kernel_memcmp+0x4f>
   12f94:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f97:	0f b6 10             	movzbl (%eax),%edx
   12f9a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12f9d:	0f b6 00             	movzbl (%eax),%eax
   12fa0:	38 c2                	cmp    %al,%dl
   12fa2:	74 de                	je     12f82 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12fa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fa7:	0f b6 10             	movzbl (%eax),%edx
   12faa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12fad:	0f b6 00             	movzbl (%eax),%eax
   12fb0:	38 c2                	cmp    %al,%dl
   12fb2:	76 07                	jbe    12fbb <kernel_memcmp+0x66>
   12fb4:	b8 01 00 00 00       	mov    $0x1,%eax
   12fb9:	eb 1c                	jmp    12fd7 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fbe:	0f b6 10             	movzbl (%eax),%edx
   12fc1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12fc4:	0f b6 00             	movzbl (%eax),%eax
   12fc7:	38 c2                	cmp    %al,%dl
   12fc9:	73 07                	jae    12fd2 <kernel_memcmp+0x7d>
   12fcb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fd0:	eb 05                	jmp    12fd7 <kernel_memcmp+0x82>
    else return 0;
   12fd2:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12fd7:	c9                   	leave  
   12fd8:	c3                   	ret    

00012fd9 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12fd9:	55                   	push   %ebp
   12fda:	89 e5                	mov    %esp,%ebp
   12fdc:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12fdf:	8d 45 10             	lea    0x10(%ebp),%eax
   12fe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12fe8:	83 ec 04             	sub    $0x4,%esp
   12feb:	50                   	push   %eax
   12fec:	ff 75 0c             	push   0xc(%ebp)
   12fef:	ff 75 08             	push   0x8(%ebp)
   12ff2:	e8 06 00 00 00       	call   12ffd <kernel_vsprintf>
   12ff7:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12ffa:	90                   	nop
   12ffb:	c9                   	leave  
   12ffc:	c3                   	ret    

00012ffd <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12ffd:	55                   	push   %ebp
   12ffe:	89 e5                	mov    %esp,%ebp
   13000:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   13003:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   1300a:	8b 45 08             	mov    0x8(%ebp),%eax
   1300d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   13010:	e9 68 01 00 00       	jmp    1317d <kernel_vsprintf+0x180>
        switch (state) {
   13015:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13019:	74 0b                	je     13026 <kernel_vsprintf+0x29>
   1301b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1301f:	74 2b                	je     1304c <kernel_vsprintf+0x4f>
   13021:	e9 56 01 00 00       	jmp    1317c <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   13026:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   1302a:	75 0c                	jne    13038 <kernel_vsprintf+0x3b>
   1302c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   13033:	e9 45 01 00 00       	jmp    1317d <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   13038:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1303b:	8d 50 01             	lea    0x1(%eax),%edx
   1303e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13041:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   13045:	88 10                	mov    %dl,(%eax)
            break;
   13047:	e9 31 01 00 00       	jmp    1317d <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   1304c:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   13050:	75 47                	jne    13099 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   13052:	8b 45 10             	mov    0x10(%ebp),%eax
   13055:	8d 50 04             	lea    0x4(%eax),%edx
   13058:	89 55 10             	mov    %edx,0x10(%ebp)
   1305b:	8b 00                	mov    (%eax),%eax
   1305d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   13060:	ff 75 ec             	push   -0x14(%ebp)
   13063:	e8 28 fe ff ff       	call   12e90 <kernel_strlen>
   13068:	83 c4 04             	add    $0x4,%esp
   1306b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   1306e:	eb 17                	jmp    13087 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   13070:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13073:	8d 42 01             	lea    0x1(%edx),%eax
   13076:	89 45 ec             	mov    %eax,-0x14(%ebp)
   13079:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1307c:	8d 48 01             	lea    0x1(%eax),%ecx
   1307f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   13082:	0f b6 12             	movzbl (%edx),%edx
   13085:	88 10                	mov    %dl,(%eax)
                while (len--) {
   13087:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1308a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1308d:	89 55 e8             	mov    %edx,-0x18(%ebp)
   13090:	85 c0                	test   %eax,%eax
   13092:	75 dc                	jne    13070 <kernel_vsprintf+0x73>
   13094:	e9 da 00 00 00       	jmp    13173 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   13099:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1309d:	75 37                	jne    130d6 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   1309f:	8b 45 10             	mov    0x10(%ebp),%eax
   130a2:	8d 50 04             	lea    0x4(%eax),%edx
   130a5:	89 55 10             	mov    %edx,0x10(%ebp)
   130a8:	8b 00                	mov    (%eax),%eax
   130aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   130ad:	83 ec 04             	sub    $0x4,%esp
   130b0:	6a 0a                	push   $0xa
   130b2:	ff 75 d8             	push   -0x28(%ebp)
   130b5:	ff 75 f0             	push   -0x10(%ebp)
   130b8:	e8 dd 00 00 00       	call   1319a <kernel_itoa>
   130bd:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   130c0:	83 ec 0c             	sub    $0xc,%esp
   130c3:	ff 75 f0             	push   -0x10(%ebp)
   130c6:	e8 c5 fd ff ff       	call   12e90 <kernel_strlen>
   130cb:	83 c4 10             	add    $0x10,%esp
   130ce:	01 45 f0             	add    %eax,-0x10(%ebp)
   130d1:	e9 9d 00 00 00       	jmp    13173 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   130d6:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   130da:	74 06                	je     130e2 <kernel_vsprintf+0xe5>
   130dc:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   130e0:	75 34                	jne    13116 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   130e2:	8b 45 10             	mov    0x10(%ebp),%eax
   130e5:	8d 50 04             	lea    0x4(%eax),%edx
   130e8:	89 55 10             	mov    %edx,0x10(%ebp)
   130eb:	8b 00                	mov    (%eax),%eax
   130ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   130f0:	83 ec 04             	sub    $0x4,%esp
   130f3:	6a 10                	push   $0x10
   130f5:	ff 75 dc             	push   -0x24(%ebp)
   130f8:	ff 75 f0             	push   -0x10(%ebp)
   130fb:	e8 9a 00 00 00       	call   1319a <kernel_itoa>
   13100:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   13103:	83 ec 0c             	sub    $0xc,%esp
   13106:	ff 75 f0             	push   -0x10(%ebp)
   13109:	e8 82 fd ff ff       	call   12e90 <kernel_strlen>
   1310e:	83 c4 10             	add    $0x10,%esp
   13111:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   13114:	eb 5d                	jmp    13173 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   13116:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1311a:	75 34                	jne    13150 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   1311c:	8b 45 10             	mov    0x10(%ebp),%eax
   1311f:	8d 50 04             	lea    0x4(%eax),%edx
   13122:	89 55 10             	mov    %edx,0x10(%ebp)
   13125:	8b 00                	mov    (%eax),%eax
   13127:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   1312a:	83 ec 04             	sub    $0x4,%esp
   1312d:	6a 02                	push   $0x2
   1312f:	ff 75 e0             	push   -0x20(%ebp)
   13132:	ff 75 f0             	push   -0x10(%ebp)
   13135:	e8 60 00 00 00       	call   1319a <kernel_itoa>
   1313a:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1313d:	83 ec 0c             	sub    $0xc,%esp
   13140:	ff 75 f0             	push   -0x10(%ebp)
   13143:	e8 48 fd ff ff       	call   12e90 <kernel_strlen>
   13148:	83 c4 10             	add    $0x10,%esp
   1314b:	01 45 f0             	add    %eax,-0x10(%ebp)
   1314e:	eb 23                	jmp    13173 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   13150:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   13154:	75 1d                	jne    13173 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   13156:	8b 45 10             	mov    0x10(%ebp),%eax
   13159:	8d 50 04             	lea    0x4(%eax),%edx
   1315c:	89 55 10             	mov    %edx,0x10(%ebp)
   1315f:	8b 00                	mov    (%eax),%eax
   13161:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   13164:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13167:	8d 50 01             	lea    0x1(%eax),%edx
   1316a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1316d:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13171:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   13173:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1317a:	eb 01                	jmp    1317d <kernel_vsprintf+0x180>
        default:
            break;
   1317c:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   1317d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13180:	8d 50 01             	lea    0x1(%eax),%edx
   13183:	89 55 0c             	mov    %edx,0xc(%ebp)
   13186:	0f b6 00             	movzbl (%eax),%eax
   13189:	88 45 e7             	mov    %al,-0x19(%ebp)
   1318c:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   13190:	0f 85 7f fe ff ff    	jne    13015 <kernel_vsprintf+0x18>
        }
    }
    

}
   13196:	90                   	nop
   13197:	90                   	nop
   13198:	c9                   	leave  
   13199:	c3                   	ret    

0001319a <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1319a:	55                   	push   %ebp
   1319b:	89 e5                	mov    %esp,%ebp
   1319d:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   131a3:	8b 45 08             	mov    0x8(%ebp),%eax
   131a6:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   131a9:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   131ad:	74 1d                	je     131cc <kernel_itoa+0x32>
   131af:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   131b3:	74 17                	je     131cc <kernel_itoa+0x32>
   131b5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   131b9:	74 11                	je     131cc <kernel_itoa+0x32>
   131bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   131bf:	74 0b                	je     131cc <kernel_itoa+0x32>
        *buf = '\0';
   131c1:	8b 45 08             	mov    0x8(%ebp),%eax
   131c4:	c6 00 00             	movb   $0x0,(%eax)
        return;
   131c7:	e9 a2 00 00 00       	jmp    1326e <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   131cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   131d0:	79 11                	jns    131e3 <kernel_itoa+0x49>
        *(p++) = '-';
   131d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131d5:	8d 50 01             	lea    0x1(%eax),%edx
   131d8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   131db:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   131de:	f7 5d 0c             	negl   0xc(%ebp)
   131e1:	eb 1a                	jmp    131fd <kernel_itoa+0x63>
    } else if (num == 0) {
   131e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   131e7:	75 14                	jne    131fd <kernel_itoa+0x63>
        *(p++) = '0';
   131e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131ec:	8d 50 01             	lea    0x1(%eax),%edx
   131ef:	89 55 fc             	mov    %edx,-0x4(%ebp)
   131f2:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   131f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131f8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   131fb:	eb 71                	jmp    1326e <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   131fd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   13204:	eb 2e                	jmp    13234 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   13206:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   1320c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1320f:	99                   	cltd   
   13210:	f7 7d 10             	idivl  0x10(%ebp)
   13213:	89 d0                	mov    %edx,%eax
   13215:	01 c1                	add    %eax,%ecx
   13217:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1321a:	8d 50 01             	lea    0x1(%eax),%edx
   1321d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13220:	0f b6 11             	movzbl (%ecx),%edx
   13223:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   1322a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1322d:	99                   	cltd   
   1322e:	f7 7d 10             	idivl  0x10(%ebp)
   13231:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   13234:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13238:	7f cc                	jg     13206 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   1323a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1323d:	83 e8 01             	sub    $0x1,%eax
   13240:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13243:	eb 1d                	jmp    13262 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   13245:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13248:	8d 50 01             	lea    0x1(%eax),%edx
   1324b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1324e:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   13254:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13257:	01 ca                	add    %ecx,%edx
   13259:	0f b6 12             	movzbl (%edx),%edx
   1325c:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   1325e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   13262:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13266:	79 dd                	jns    13245 <kernel_itoa+0xab>
    }
    *p = '\0';
   13268:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1326b:	c6 00 00             	movb   $0x0,(%eax)
   1326e:	c9                   	leave  
   1326f:	c3                   	ret    

00013270 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13270:	55                   	push   %ebp
   13271:	89 e5                	mov    %esp,%ebp
   13273:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13276:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1327a:	75 19                	jne    13295 <list_is_empty+0x25>
   1327c:	68 7c 45 01 00       	push   $0x1457c
   13281:	68 60 46 01 00       	push   $0x14660
   13286:	6a 38                	push   $0x38
   13288:	68 90 45 01 00       	push   $0x14590
   1328d:	e8 80 f7 ff ff       	call   12a12 <pannic>
   13292:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   13295:	8b 45 08             	mov    0x8(%ebp),%eax
   13298:	8b 40 08             	mov    0x8(%eax),%eax
   1329b:	85 c0                	test   %eax,%eax
   1329d:	0f 94 c0             	sete   %al
   132a0:	0f b6 c0             	movzbl %al,%eax
}
   132a3:	c9                   	leave  
   132a4:	c3                   	ret    

000132a5 <list_get_size>:
static inline int list_get_size(list_t *list) {
   132a5:	55                   	push   %ebp
   132a6:	89 e5                	mov    %esp,%ebp
   132a8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   132ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132af:	75 19                	jne    132ca <list_get_size+0x25>
   132b1:	68 7c 45 01 00       	push   $0x1457c
   132b6:	68 98 46 01 00       	push   $0x14698
   132bb:	6a 3e                	push   $0x3e
   132bd:	68 90 45 01 00       	push   $0x14590
   132c2:	e8 4b f7 ff ff       	call   12a12 <pannic>
   132c7:	83 c4 10             	add    $0x10,%esp
    return list->size;
   132ca:	8b 45 08             	mov    0x8(%ebp),%eax
   132cd:	8b 40 08             	mov    0x8(%eax),%eax
}
   132d0:	c9                   	leave  
   132d1:	c3                   	ret    

000132d2 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   132d2:	55                   	push   %ebp
   132d3:	89 e5                	mov    %esp,%ebp
   132d5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   132d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132dc:	74 06                	je     132e4 <list_insert_first+0x12>
   132de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   132e2:	75 19                	jne    132fd <list_insert_first+0x2b>
   132e4:	68 d0 45 01 00       	push   $0x145d0
   132e9:	68 4c 46 01 00       	push   $0x1464c
   132ee:	6a 0f                	push   $0xf
   132f0:	68 00 46 01 00       	push   $0x14600
   132f5:	e8 18 f7 ff ff       	call   12a12 <pannic>
   132fa:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   132fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13300:	8b 10                	mov    (%eax),%edx
   13302:	8b 45 0c             	mov    0xc(%ebp),%eax
   13305:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   13308:	8b 45 0c             	mov    0xc(%ebp),%eax
   1330b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13311:	83 ec 0c             	sub    $0xc,%esp
   13314:	ff 75 08             	push   0x8(%ebp)
   13317:	e8 54 ff ff ff       	call   13270 <list_is_empty>
   1331c:	83 c4 10             	add    $0x10,%esp
   1331f:	85 c0                	test   %eax,%eax
   13321:	74 16                	je     13339 <list_insert_first+0x67>
        list->first = list->last = node;
   13323:	8b 45 08             	mov    0x8(%ebp),%eax
   13326:	8b 55 0c             	mov    0xc(%ebp),%edx
   13329:	89 50 04             	mov    %edx,0x4(%eax)
   1332c:	8b 45 08             	mov    0x8(%ebp),%eax
   1332f:	8b 50 04             	mov    0x4(%eax),%edx
   13332:	8b 45 08             	mov    0x8(%ebp),%eax
   13335:	89 10                	mov    %edx,(%eax)
   13337:	eb 12                	jmp    1334b <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   13339:	8b 45 08             	mov    0x8(%ebp),%eax
   1333c:	8b 00                	mov    (%eax),%eax
   1333e:	8b 55 0c             	mov    0xc(%ebp),%edx
   13341:	89 10                	mov    %edx,(%eax)
        list->first = node;
   13343:	8b 45 08             	mov    0x8(%ebp),%eax
   13346:	8b 55 0c             	mov    0xc(%ebp),%edx
   13349:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   1334b:	8b 45 08             	mov    0x8(%ebp),%eax
   1334e:	8b 40 08             	mov    0x8(%eax),%eax
   13351:	8d 50 01             	lea    0x1(%eax),%edx
   13354:	8b 45 08             	mov    0x8(%ebp),%eax
   13357:	89 50 08             	mov    %edx,0x8(%eax)
}
   1335a:	90                   	nop
   1335b:	c9                   	leave  
   1335c:	c3                   	ret    

0001335d <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1335d:	55                   	push   %ebp
   1335e:	89 e5                	mov    %esp,%ebp
   13360:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13363:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13367:	74 06                	je     1336f <list_insert_last+0x12>
   13369:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1336d:	75 19                	jne    13388 <list_insert_last+0x2b>
   1336f:	68 d0 45 01 00       	push   $0x145d0
   13374:	68 70 46 01 00       	push   $0x14670
   13379:	6a 1f                	push   $0x1f
   1337b:	68 00 46 01 00       	push   $0x14600
   13380:	e8 8d f6 ff ff       	call   12a12 <pannic>
   13385:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   13388:	8b 45 08             	mov    0x8(%ebp),%eax
   1338b:	8b 50 04             	mov    0x4(%eax),%edx
   1338e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13391:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   13393:	8b 45 0c             	mov    0xc(%ebp),%eax
   13396:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   1339d:	83 ec 0c             	sub    $0xc,%esp
   133a0:	ff 75 08             	push   0x8(%ebp)
   133a3:	e8 c8 fe ff ff       	call   13270 <list_is_empty>
   133a8:	83 c4 10             	add    $0x10,%esp
   133ab:	85 c0                	test   %eax,%eax
   133ad:	74 16                	je     133c5 <list_insert_last+0x68>
        list->first = list->last = node;
   133af:	8b 45 08             	mov    0x8(%ebp),%eax
   133b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   133b5:	89 50 04             	mov    %edx,0x4(%eax)
   133b8:	8b 45 08             	mov    0x8(%ebp),%eax
   133bb:	8b 50 04             	mov    0x4(%eax),%edx
   133be:	8b 45 08             	mov    0x8(%ebp),%eax
   133c1:	89 10                	mov    %edx,(%eax)
   133c3:	eb 15                	jmp    133da <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   133c5:	8b 45 08             	mov    0x8(%ebp),%eax
   133c8:	8b 40 04             	mov    0x4(%eax),%eax
   133cb:	8b 55 0c             	mov    0xc(%ebp),%edx
   133ce:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   133d1:	8b 45 08             	mov    0x8(%ebp),%eax
   133d4:	8b 55 0c             	mov    0xc(%ebp),%edx
   133d7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   133da:	8b 45 08             	mov    0x8(%ebp),%eax
   133dd:	8b 40 08             	mov    0x8(%eax),%eax
   133e0:	8d 50 01             	lea    0x1(%eax),%edx
   133e3:	8b 45 08             	mov    0x8(%ebp),%eax
   133e6:	89 50 08             	mov    %edx,0x8(%eax)

}
   133e9:	90                   	nop
   133ea:	c9                   	leave  
   133eb:	c3                   	ret    

000133ec <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   133ec:	55                   	push   %ebp
   133ed:	89 e5                	mov    %esp,%ebp
   133ef:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   133f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   133f6:	75 19                	jne    13411 <list_remove_first+0x25>
   133f8:	68 36 46 01 00       	push   $0x14636
   133fd:	68 84 46 01 00       	push   $0x14684
   13402:	6a 31                	push   $0x31
   13404:	68 00 46 01 00       	push   $0x14600
   13409:	e8 04 f6 ff ff       	call   12a12 <pannic>
   1340e:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   13411:	83 ec 0c             	sub    $0xc,%esp
   13414:	ff 75 08             	push   0x8(%ebp)
   13417:	e8 54 fe ff ff       	call   13270 <list_is_empty>
   1341c:	83 c4 10             	add    $0x10,%esp
   1341f:	85 c0                	test   %eax,%eax
   13421:	74 07                	je     1342a <list_remove_first+0x3e>
        return (list_node_t*)0;
   13423:	b8 00 00 00 00       	mov    $0x0,%eax
   13428:	eb 71                	jmp    1349b <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   1342a:	8b 45 08             	mov    0x8(%ebp),%eax
   1342d:	8b 00                	mov    (%eax),%eax
   1342f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13432:	83 ec 0c             	sub    $0xc,%esp
   13435:	ff 75 08             	push   0x8(%ebp)
   13438:	e8 68 fe ff ff       	call   132a5 <list_get_size>
   1343d:	83 c4 10             	add    $0x10,%esp
   13440:	83 f8 01             	cmp    $0x1,%eax
   13443:	75 17                	jne    1345c <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   13445:	8b 45 08             	mov    0x8(%ebp),%eax
   13448:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1344f:	8b 45 08             	mov    0x8(%ebp),%eax
   13452:	8b 50 04             	mov    0x4(%eax),%edx
   13455:	8b 45 08             	mov    0x8(%ebp),%eax
   13458:	89 10                	mov    %edx,(%eax)
   1345a:	eb 18                	jmp    13474 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   1345c:	8b 45 08             	mov    0x8(%ebp),%eax
   1345f:	8b 00                	mov    (%eax),%eax
   13461:	8b 50 04             	mov    0x4(%eax),%edx
   13464:	8b 45 08             	mov    0x8(%ebp),%eax
   13467:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   13469:	8b 45 08             	mov    0x8(%ebp),%eax
   1346c:	8b 00                	mov    (%eax),%eax
   1346e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   13474:	8b 45 08             	mov    0x8(%ebp),%eax
   13477:	8b 40 08             	mov    0x8(%eax),%eax
   1347a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1347d:	8b 45 08             	mov    0x8(%ebp),%eax
   13480:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13483:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13486:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1348d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13490:	8b 50 04             	mov    0x4(%eax),%edx
   13493:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13496:	89 10                	mov    %edx,(%eax)
    return ret;
   13498:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   1349b:	c9                   	leave  
   1349c:	c3                   	ret    

0001349d <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   1349d:	55                   	push   %ebp
   1349e:	89 e5                	mov    %esp,%ebp
   134a0:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   134a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   134a7:	75 19                	jne    134c2 <list_remove_last+0x25>
   134a9:	68 36 46 01 00       	push   $0x14636
   134ae:	68 a8 46 01 00       	push   $0x146a8
   134b3:	6a 46                	push   $0x46
   134b5:	68 00 46 01 00       	push   $0x14600
   134ba:	e8 53 f5 ff ff       	call   12a12 <pannic>
   134bf:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   134c2:	83 ec 0c             	sub    $0xc,%esp
   134c5:	ff 75 08             	push   0x8(%ebp)
   134c8:	e8 a3 fd ff ff       	call   13270 <list_is_empty>
   134cd:	83 c4 10             	add    $0x10,%esp
   134d0:	85 c0                	test   %eax,%eax
   134d2:	74 07                	je     134db <list_remove_last+0x3e>
        return (list_node_t*)0;
   134d4:	b8 00 00 00 00       	mov    $0x0,%eax
   134d9:	eb 75                	jmp    13550 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   134db:	8b 45 08             	mov    0x8(%ebp),%eax
   134de:	8b 40 04             	mov    0x4(%eax),%eax
   134e1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   134e4:	83 ec 0c             	sub    $0xc,%esp
   134e7:	ff 75 08             	push   0x8(%ebp)
   134ea:	e8 b6 fd ff ff       	call   132a5 <list_get_size>
   134ef:	83 c4 10             	add    $0x10,%esp
   134f2:	83 f8 01             	cmp    $0x1,%eax
   134f5:	75 17                	jne    1350e <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   134f7:	8b 45 08             	mov    0x8(%ebp),%eax
   134fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13501:	8b 45 08             	mov    0x8(%ebp),%eax
   13504:	8b 50 04             	mov    0x4(%eax),%edx
   13507:	8b 45 08             	mov    0x8(%ebp),%eax
   1350a:	89 10                	mov    %edx,(%eax)
   1350c:	eb 1b                	jmp    13529 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   1350e:	8b 45 08             	mov    0x8(%ebp),%eax
   13511:	8b 40 04             	mov    0x4(%eax),%eax
   13514:	8b 10                	mov    (%eax),%edx
   13516:	8b 45 08             	mov    0x8(%ebp),%eax
   13519:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   1351c:	8b 45 08             	mov    0x8(%ebp),%eax
   1351f:	8b 40 04             	mov    0x4(%eax),%eax
   13522:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   13529:	8b 45 08             	mov    0x8(%ebp),%eax
   1352c:	8b 40 08             	mov    0x8(%eax),%eax
   1352f:	8d 50 ff             	lea    -0x1(%eax),%edx
   13532:	8b 45 08             	mov    0x8(%ebp),%eax
   13535:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13538:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1353b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13542:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13545:	8b 50 04             	mov    0x4(%eax),%edx
   13548:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1354b:	89 10                	mov    %edx,(%eax)
    return ret;
   1354d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13550:	c9                   	leave  
   13551:	c3                   	ret    

00013552 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13552:	55                   	push   %ebp
   13553:	89 e5                	mov    %esp,%ebp
   13555:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13558:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1355c:	74 06                	je     13564 <list_remove+0x12>
   1355e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13562:	75 19                	jne    1357d <list_remove+0x2b>
   13564:	68 d0 45 01 00       	push   $0x145d0
   13569:	68 bc 46 01 00       	push   $0x146bc
   1356e:	6a 5b                	push   $0x5b
   13570:	68 00 46 01 00       	push   $0x14600
   13575:	e8 98 f4 ff ff       	call   12a12 <pannic>
   1357a:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   1357d:	83 ec 0c             	sub    $0xc,%esp
   13580:	ff 75 08             	push   0x8(%ebp)
   13583:	e8 e8 fc ff ff       	call   13270 <list_is_empty>
   13588:	83 c4 10             	add    $0x10,%esp
   1358b:	85 c0                	test   %eax,%eax
   1358d:	74 0a                	je     13599 <list_remove+0x47>
        return (list_node_t*)0;
   1358f:	b8 00 00 00 00       	mov    $0x0,%eax
   13594:	e9 80 00 00 00       	jmp    13619 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   13599:	8b 45 08             	mov    0x8(%ebp),%eax
   1359c:	8b 00                	mov    (%eax),%eax
   1359e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   135a1:	75 0b                	jne    135ae <list_remove+0x5c>
   135a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   135a6:	8b 50 04             	mov    0x4(%eax),%edx
   135a9:	8b 45 08             	mov    0x8(%ebp),%eax
   135ac:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   135ae:	8b 45 08             	mov    0x8(%ebp),%eax
   135b1:	8b 40 04             	mov    0x4(%eax),%eax
   135b4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   135b7:	75 0b                	jne    135c4 <list_remove+0x72>
   135b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   135bc:	8b 10                	mov    (%eax),%edx
   135be:	8b 45 08             	mov    0x8(%ebp),%eax
   135c1:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   135c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   135c7:	8b 00                	mov    (%eax),%eax
   135c9:	85 c0                	test   %eax,%eax
   135cb:	74 0e                	je     135db <list_remove+0x89>
   135cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   135d0:	8b 00                	mov    (%eax),%eax
   135d2:	8b 55 0c             	mov    0xc(%ebp),%edx
   135d5:	8b 52 04             	mov    0x4(%edx),%edx
   135d8:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   135db:	8b 45 0c             	mov    0xc(%ebp),%eax
   135de:	8b 40 04             	mov    0x4(%eax),%eax
   135e1:	85 c0                	test   %eax,%eax
   135e3:	74 0d                	je     135f2 <list_remove+0xa0>
   135e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   135e8:	8b 40 04             	mov    0x4(%eax),%eax
   135eb:	8b 55 0c             	mov    0xc(%ebp),%edx
   135ee:	8b 12                	mov    (%edx),%edx
   135f0:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   135f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   135f5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   135fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   135ff:	8b 50 04             	mov    0x4(%eax),%edx
   13602:	8b 45 0c             	mov    0xc(%ebp),%eax
   13605:	89 10                	mov    %edx,(%eax)
    list->size--;
   13607:	8b 45 08             	mov    0x8(%ebp),%eax
   1360a:	8b 40 08             	mov    0x8(%eax),%eax
   1360d:	8d 50 ff             	lea    -0x1(%eax),%edx
   13610:	8b 45 08             	mov    0x8(%ebp),%eax
   13613:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   13616:	8b 45 0c             	mov    0xc(%ebp),%eax
   13619:	c9                   	leave  
   1361a:	c3                   	ret    

0001361b <inb>:
static inline uint8_t inb(uint16_t port) {
   1361b:	55                   	push   %ebp
   1361c:	89 e5                	mov    %esp,%ebp
   1361e:	83 ec 14             	sub    $0x14,%esp
   13621:	8b 45 08             	mov    0x8(%ebp),%eax
   13624:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13628:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1362c:	89 c2                	mov    %eax,%edx
   1362e:	ec                   	in     (%dx),%al
   1362f:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13632:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13636:	c9                   	leave  
   13637:	c3                   	ret    

00013638 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13638:	55                   	push   %ebp
   13639:	89 e5                	mov    %esp,%ebp
   1363b:	83 ec 08             	sub    $0x8,%esp
   1363e:	8b 45 08             	mov    0x8(%ebp),%eax
   13641:	8b 55 0c             	mov    0xc(%ebp),%edx
   13644:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13648:	89 d0                	mov    %edx,%eax
   1364a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1364d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13651:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13655:	ee                   	out    %al,(%dx)
}
   13656:	90                   	nop
   13657:	c9                   	leave  
   13658:	c3                   	ret    

00013659 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13659:	55                   	push   %ebp
   1365a:	89 e5                	mov    %esp,%ebp
   1365c:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1365f:	6a 00                	push   $0x0
   13661:	68 f9 03 00 00       	push   $0x3f9
   13666:	e8 cd ff ff ff       	call   13638 <outb>
   1366b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   1366e:	68 80 00 00 00       	push   $0x80
   13673:	68 fb 03 00 00       	push   $0x3fb
   13678:	e8 bb ff ff ff       	call   13638 <outb>
   1367d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13680:	6a 03                	push   $0x3
   13682:	68 f8 03 00 00       	push   $0x3f8
   13687:	e8 ac ff ff ff       	call   13638 <outb>
   1368c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1368f:	6a 00                	push   $0x0
   13691:	68 f9 03 00 00       	push   $0x3f9
   13696:	e8 9d ff ff ff       	call   13638 <outb>
   1369b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   1369e:	6a 03                	push   $0x3
   136a0:	68 fb 03 00 00       	push   $0x3fb
   136a5:	e8 8e ff ff ff       	call   13638 <outb>
   136aa:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   136ad:	68 c7 00 00 00       	push   $0xc7
   136b2:	68 fa 03 00 00       	push   $0x3fa
   136b7:	e8 7c ff ff ff       	call   13638 <outb>
   136bc:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   136bf:	6a 0f                	push   $0xf
   136c1:	68 fc 03 00 00       	push   $0x3fc
   136c6:	e8 6d ff ff ff       	call   13638 <outb>
   136cb:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   136ce:	83 ec 0c             	sub    $0xc,%esp
   136d1:	68 c4 ab 02 00       	push   $0x2abc4
   136d6:	e8 22 ec ff ff       	call   122fd <mutex_init>
   136db:	83 c4 10             	add    $0x10,%esp
}
   136de:	90                   	nop
   136df:	c9                   	leave  
   136e0:	c3                   	ret    

000136e1 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   136e1:	55                   	push   %ebp
   136e2:	89 e5                	mov    %esp,%ebp
   136e4:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   136ea:	83 ec 04             	sub    $0x4,%esp
   136ed:	68 80 00 00 00       	push   $0x80
   136f2:	6a 00                	push   $0x0
   136f4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   136fa:	50                   	push   %eax
   136fb:	e8 14 f8 ff ff       	call   12f14 <kernel_memset>
   13700:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   13703:	8d 45 0c             	lea    0xc(%ebp),%eax
   13706:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1370c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13712:	83 ec 04             	sub    $0x4,%esp
   13715:	50                   	push   %eax
   13716:	ff 75 08             	push   0x8(%ebp)
   13719:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1371f:	50                   	push   %eax
   13720:	e8 d8 f8 ff ff       	call   12ffd <kernel_vsprintf>
   13725:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   13728:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1372e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13731:	83 ec 0c             	sub    $0xc,%esp
   13734:	68 c4 ab 02 00       	push   $0x2abc4
   13739:	e8 0c ec ff ff       	call   1234a <mutex_lock>
   1373e:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13741:	eb 57                	jmp    1379a <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13743:	90                   	nop
   13744:	83 ec 0c             	sub    $0xc,%esp
   13747:	68 fd 03 00 00       	push   $0x3fd
   1374c:	e8 ca fe ff ff       	call   1361b <inb>
   13751:	83 c4 10             	add    $0x10,%esp
   13754:	0f b6 c0             	movzbl %al,%eax
   13757:	83 e0 40             	and    $0x40,%eax
   1375a:	85 c0                	test   %eax,%eax
   1375c:	74 e6                	je     13744 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   1375e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13761:	0f b6 00             	movzbl (%eax),%eax
   13764:	3c 0a                	cmp    $0xa,%al
   13766:	75 12                	jne    1377a <log_printf+0x99>
   13768:	83 ec 08             	sub    $0x8,%esp
   1376b:	6a 0d                	push   $0xd
   1376d:	68 f8 03 00 00       	push   $0x3f8
   13772:	e8 c1 fe ff ff       	call   13638 <outb>
   13777:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1377a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1377d:	8d 50 01             	lea    0x1(%eax),%edx
   13780:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13783:	0f b6 00             	movzbl (%eax),%eax
   13786:	0f b6 c0             	movzbl %al,%eax
   13789:	83 ec 08             	sub    $0x8,%esp
   1378c:	50                   	push   %eax
   1378d:	68 f8 03 00 00       	push   $0x3f8
   13792:	e8 a1 fe ff ff       	call   13638 <outb>
   13797:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1379a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1379d:	0f b6 00             	movzbl (%eax),%eax
   137a0:	84 c0                	test   %al,%al
   137a2:	75 9f                	jne    13743 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   137a4:	83 ec 08             	sub    $0x8,%esp
   137a7:	6a 0d                	push   $0xd
   137a9:	68 f8 03 00 00       	push   $0x3f8
   137ae:	e8 85 fe ff ff       	call   13638 <outb>
   137b3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   137b6:	83 ec 08             	sub    $0x8,%esp
   137b9:	6a 0a                	push   $0xa
   137bb:	68 f8 03 00 00       	push   $0x3f8
   137c0:	e8 73 fe ff ff       	call   13638 <outb>
   137c5:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   137c8:	83 ec 0c             	sub    $0xc,%esp
   137cb:	68 c4 ab 02 00       	push   $0x2abc4
   137d0:	e8 06 ec ff ff       	call   123db <mutex_unlock>
   137d5:	83 c4 10             	add    $0x10,%esp
   137d8:	90                   	nop
   137d9:	c9                   	leave  
   137da:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 91 00 00 00       	jmp    800000a1 <first_main>

80000010 <sys_call>:
}syscall_args_t;




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    );




    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <sys_call>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
    if (ms <= 0) return;
80000083:	90                   	nop

}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:

static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <sys_call>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000a7:	e8 da ff ff ff       	call   80000086 <getpid>
800000ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (;;) {
        //log_printf("first task.");
        msleep(1000);
800000af:	68 e8 03 00 00       	push   $0x3e8
800000b4:	e8 a3 ff ff ff       	call   8000005c <msleep>
800000b9:	83 c4 04             	add    $0x4,%esp
800000bc:	eb f1                	jmp    800000af <first_main+0xe>
