
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00004c90 memsz 0x00004c90 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x0001da20 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x00033000 align 2**12
         filesz 0x0000021a memsz 0x0000021a flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d77  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000f10  00013d80  00013d80  00004d80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001ca20  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   0000021a  80000000  00033000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00002242  00000000  00000000  0000721a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000780  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00006212  00000000  00000000  00009bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001d23  00000000  00000000  0000fdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000260  00000000  00000000  00011b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001390  00000000  00000000  00011d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000004e  00000000  00000000  00013108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  00013156  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000016f8  00000000  00000000  00013184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	0000000f get_pte_privilege
0001036f l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
00010380 l     F .text	0000005d addr_alloc_init
000103dd l     F .text	00000067 addr_alloc_page
00010444 l     F .text	00000061 addr_free_page
000104a5 l     F .text	00000066 show_mem_info
0001050b l     F .text	00000037 total_mem_size
00013ec8 l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
00013edc l     O .rodata	0000000c __func__.1
00010c12 l     F .text	00000010 curr_page_dir
00013ee8 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010cdb l     F .text	0000003d list_node_init
00013fe8 l     O .rodata	0000000f __func__.10
00010d18 l     F .text	0000002d list_node_next
00014048 l     O .rodata	0000000f __func__.4
00010d45 l     F .text	00000047 list_init
00013ff8 l     O .rodata	0000000a __func__.9
00010d8c l     F .text	00000035 list_is_empty
00014058 l     O .rodata	0000000e __func__.3
00010dc1 l     F .text	0000002d list_get_size
00014088 l     O .rodata	0000000e __func__.0
00010dee l     F .text	0000002c list_get_first
00014038 l     O .rodata	0000000f __func__.5
00010e1a l     F .text	00000017 up2
00010e31 l     F .text	00000007 hlt
00010e38 l     F .text	0000000c write_cr3
00010e44 l     F .text	0000001a far_jump
00010e5e l     F .text	00000017 write_tr
00010e75 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a8 task_manager
000181c0 l     O .bss	00005e00 task_table
0001dfc0 l     O .bss	00000014 task_table_lock
00010e86 l     F .text	0000001f switch_to_tss
00010ec0 l     F .text	00000172 tss_init
00013fdc l     O .rodata	0000000a __func__.11
0001dfe0 l     O .bss	00000200 empty_task_stack
000111d3 l     F .text	0000000a empty_task
00014004 l     O .rodata	00000010 __func__.8
00014014 l     O .rodata	0000000f __func__.7
00014024 l     O .rodata	00000011 __func__.6
00014068 l     O .rodata	0000000f __func__.2
00014078 l     O .rodata	00000010 __func__.1
0001169e l     F .text	00000068 alloc_task
00011706 l     F .text	00000033 free_task
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
000119cf l     F .text	00000028 lgdt
0001e1e0 l     O .bss	00010000 gdt_table
0002e1e0 l     O .bss	00002000 is_alloc
000301e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011c05 l     F .text	00000007 cli
00011c0c l     F .text	00000007 sti
00011c13 l     F .text	00000007 hlt
00011c1a l     F .text	0000001d inb
00011c37 l     F .text	00000021 outb
00011c58 l     F .text	00000028 lidt
00011c80 l     F .text	00000011 read_cr2
00011c91 l     F .text	00000010 read_eflags
00011ca1 l     F .text	0000000b write_eflags
00030200 l     O .bss	00000800 idt_table
00011cac l     F .text	0000010f print_exception_fram
00011dbb l     F .text	0000003e do_default_handler
000121d1 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00014660 l     O .rodata	0000002c sys_table
00000000 l    df *ABS*	00000000 time.c
00012666 l     F .text	00000021 outb
00030a00 l     O .bss	00000004 sys_tick
000126af l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
0001474c l     O .rodata	0000000c __func__.1
00014758 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
0001281d l     F .text	00000047 list_init
00014818 l     O .rodata	0000000a __func__.1
00012864 l     F .text	00000035 list_is_empty
00014824 l     O .rodata	0000000e __func__.0
0001480c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00012a2f l     F .text	00000047 list_init
000148d8 l     O .rodata	0000000a __func__.1
00012a76 l     F .text	00000035 list_is_empty
000148e4 l     O .rodata	0000000e __func__.0
000148cc l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012bff l     F .text	00000047 list_init
000149f8 l     O .rodata	0000000a __func__.3
00012c46 l     F .text	0000002d list_get_size
00014a04 l     O .rodata	0000000e __func__.2
00012c73 l     F .text	0000002c list_get_first
00014a24 l     O .rodata	0000000f __func__.0
00012c9f l     F .text	0000002d list_get_last
00014a14 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012fa7 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00014af4 l     O .rodata	0000000c __func__.3
00014b00 l     O .rodata	0000000f __func__.2
00014b10 l     O .rodata	0000000f __func__.1
00014b20 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
0001380c l     F .text	00000035 list_is_empty
00014c28 l     O .rodata	0000000e __func__.5
00013841 l     F .text	0000002d list_get_size
00014c60 l     O .rodata	0000000e __func__.2
00014c14 l     O .rodata	00000012 __func__.6
00014c38 l     O .rodata	00000011 __func__.4
00014c4c l     O .rodata	00000012 __func__.3
00014c70 l     O .rodata	00000011 __func__.1
00014c84 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00013bb7 l     F .text	0000001d inb
00013bd4 l     F .text	00000021 outb
00030a04 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
800000c9 l     F .first_task	0000001b fork
800000e4 l     F .first_task	0000002d execve
0001308e g     F .text	00000078 bitmap_get_bit
00013461 g     F .text	0000004f kernel_memcpy
00012419 g     F .text	00000098 idt_enable
0001147a g     F .text	0000000a task_current
000138f9 g     F .text	0000008f list_insert_last
00011921 g     F .text	00000061 sys_yield
00011f2d g     F .text	0000001c do_handler_segment_not_present
000113b6 g     F .text	0000004b task_set_ready
0001320e g     F .text	00000021 bitmap_is_set
00012550 g     F .text	0000000b idt_enable_global
000134b0 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
000125d7 g     F .text	0000008f do_handler_syscall
00013bf5 g     F .text	00000088 log_init
000117a6 g     F .text	0000017b sys_fork
000127e0 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000125bd g     F .text	0000001a sys_print_msg
0001332a g     F .text	00000047 kernel_strcpy
00012545 g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
80000111 g     F .first_task	000000bf first_main
0001218e g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011e85 g     F .text	0000001c do_handler_overflow
00012102 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011f65 g     F .text	000000b1 do_handler_general_protection
00012172 g     F .text	0000001c do_handler_control_exception
00012bd6 g     F .text	00000029 sem_count
00011e15 g     F .text	0000001c do_handler_divider
00013106 g     F .text	00000108 bitmap_set_bit
00011ef5 g     F .text	0000001c do_handler_double_fault
00012016 g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
0001255b g     F .text	00000039 pic_send_eoi
00013a39 g     F .text	000000b5 list_remove_last
000113ac g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012aee g     F .text	0000006b sem_wait
00010bf0 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011ab6 g     F .text	000000b3 gdt_init
00012156 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011e31 g     F .text	0000001c do_handler_debug
00030a20 g     O .bss	00002000 stack
00011739 g     F .text	00000060 sys_sleep
00010c42 g     F .text	00000099 memory_free_page
00012ccc g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00033000 g       *ABS*	00000000 s_first_task
00011153 g     F .text	00000080 task_uninit
00010b38 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00012264 g     F .text	000001b5 idt_init
00012b59 g     F .text	0000007d sem_notify
00011bde g     F .text	00000027 gdt_free
00011ebd g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000120e6 g     F .text	0000001c do_handler_fpu_error
000112ba g     F .text	000000f2 task_first_init
0001211e g     F .text	0000001c do_handler_machine_check
0001386e g     F .text	0000008b list_insert_first
00011653 g     F .text	0000004b task_set_wakeup
0001144c g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010736 g     F .text	00000085 memory_creat_uvm
00013371 g     F .text	00000051 kernel_strncpy
0003321a g       *ABS*	00000000 mem_free_start
00012729 g     F .text	00000053 kernel_init
00012aab g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00013599 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00033000 g       .first_task	00000000 e_data
000128e6 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011f11 g     F .text	0000001c do_handler_invalid_tss
000124b1 g     F .text	00000094 idt_disable
0003321a g       *ABS*	00000000 e_first_task
000115f7 g     F .text	0000005c task_set_sleep
000105f2 g     F .text	000000a0 memory_creat_map
00011e4d g     F .text	0000001c do_handler_nmi
00012899 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
00010948 g     F .text	000000f7 memory_destroy_uvm
00012fe4 g     F .text	00000016 bitmap_byte_count
00011ed9 g     F .text	0000001c do_handler_device_unavailable
00012594 g     F .text	00000018 idt_enter_protection
00010692 g     F .text	000000a4 create_kernal_table
000114ec g     F .text	0000010b task_slice_end
000107bb g     F .text	0000018d memory_copy_uvm
0001277c g     F .text	00000064 move_to_first_task
000134f1 g     F .text	00000084 kernel_memcmp
0001213a g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011df9 g     F .text	0000001c do_handler_unknown
00010c22 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00010ea5 g     F .text	0000001b task_switch_from_to
00012977 g     F .text	000000b8 mutex_unlock
00011484 g     F .text	00000068 task_switch
0001342c g     F .text	00000035 kernel_strlen
00011401 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000119f7 g     F .text	000000bf segment_desc_set
00011ea1 g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
00013988 g     F .text	000000b1 list_remove_first
00014c90 g       .rodata	00000000 e_text
000133c2 g     F .text	0000006a kernel_strncmp
00012ffa g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
0001322f g     F .text	000000fb bitmap_alloc_nbits
000111dd g     F .text	000000dd task_manager_init
00011032 g     F .text	00000044 task_start
00010a3f g     F .text	000000f9 memory_init
00011982 g     F .text	00000006 sys_execve
00012fae g     F .text	00000036 pannic
00011f49 g     F .text	0000001c do_handler_stack_segment_fault
00011e69 g     F .text	0000001c do_handler_breakpoint
00013c7d g     F .text	000000fa log_printf
00011076 g     F .text	000000dd task_init
00013575 g     F .text	00000024 kernel_sprintf
00011799 g     F .text	0000000d sys_getpid
00011b69 g     F .text	00000075 gdt_alloc_desc
00013736 g     F .text	000000d6 kernel_itoa
00013aee g     F .text	000000c9 list_remove
00011988 g     F .text	00000047 gate_desc_set
000125ac g     F .text	00000011 idt_leave_protection
00010542 g     F .text	000000b0 find_pte
00012687 g     F .text	00000028 do_handler_time
00012711 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 1e 27 00 00       	call   12729 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 2a 03 00       	mov    $0x32a20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 b6 27 00 00       	jmp    127e0 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 be 1d 00 00       	call   11df9 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 bd 1d 00 00       	call   11e15 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 bc 1d 00 00       	call   11e31 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 bb 1d 00 00       	call   11e4d <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 ba 1d 00 00       	call   11e69 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 b9 1d 00 00       	call   11e85 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 b8 1d 00 00       	call   11ea1 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 b7 1d 00 00       	call   11ebd <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 b6 1d 00 00       	call   11ed9 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 b7 1d 00 00       	call   11ef5 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 b8 1d 00 00       	call   11f11 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 b9 1d 00 00       	call   11f2d <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 ba 1d 00 00       	call   11f49 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 bb 1d 00 00       	call   11f65 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 51 1e 00 00       	call   12016 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 04 1f 00 00       	call   120e6 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 05 1f 00 00       	call   12102 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 04 1f 00 00       	call   1211e <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 03 1f 00 00       	call   1213a <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 02 1f 00 00       	call   12156 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 03 1f 00 00       	call   12172 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 fb 23 00 00       	call   12687 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 1c 23 00 00       	call   125d7 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10363:	8b 45 08             	mov    0x8(%ebp),%eax
   10366:	8b 00                	mov    (%eax),%eax
   10368:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1036d:	5d                   	pop    %ebp
   1036e:	c3                   	ret    

0001036f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1036f:	55                   	push   %ebp
   10370:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10372:	ff 75 08             	push   0x8(%ebp)
   10375:	e8 71 ff ff ff       	call   102eb <write_cr3>
   1037a:	83 c4 04             	add    $0x4,%esp
}
   1037d:	90                   	nop
   1037e:	c9                   	leave  
   1037f:	c3                   	ret    

00010380 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	83 ec 0c             	sub    $0xc,%esp
   1038c:	50                   	push   %eax
   1038d:	e8 07 25 00 00       	call   12899 <mutex_init>
   10392:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10395:	8b 45 08             	mov    0x8(%ebp),%eax
   10398:	8b 55 10             	mov    0x10(%ebp),%edx
   1039b:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1039e:	8b 45 08             	mov    0x8(%ebp),%eax
   103a1:	8b 55 14             	mov    0x14(%ebp),%edx
   103a4:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   103a7:	8b 45 08             	mov    0x8(%ebp),%eax
   103aa:	8b 55 18             	mov    0x18(%ebp),%edx
   103ad:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	8b 40 20             	mov    0x20(%eax),%eax
   103b6:	8b 55 08             	mov    0x8(%ebp),%edx
   103b9:	8b 4a 24             	mov    0x24(%edx),%ecx
   103bc:	ba 00 00 00 00       	mov    $0x0,%edx
   103c1:	f7 f1                	div    %ecx
   103c3:	89 c2                	mov    %eax,%edx
   103c5:	8b 45 08             	mov    0x8(%ebp),%eax
   103c8:	83 c0 14             	add    $0x14,%eax
   103cb:	6a 00                	push   $0x0
   103cd:	52                   	push   %edx
   103ce:	ff 75 0c             	push   0xc(%ebp)
   103d1:	50                   	push   %eax
   103d2:	e8 23 2c 00 00       	call   12ffa <bitmap_init>
   103d7:	83 c4 10             	add    $0x10,%esp
}
   103da:	90                   	nop
   103db:	c9                   	leave  
   103dc:	c3                   	ret    

000103dd <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   103dd:	55                   	push   %ebp
   103de:	89 e5                	mov    %esp,%ebp
   103e0:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   103e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	83 ec 0c             	sub    $0xc,%esp
   103f0:	50                   	push   %eax
   103f1:	e8 f0 24 00 00       	call   128e6 <mutex_lock>
   103f6:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103f9:	8b 45 08             	mov    0x8(%ebp),%eax
   103fc:	83 c0 14             	add    $0x14,%eax
   103ff:	83 ec 04             	sub    $0x4,%esp
   10402:	ff 75 0c             	push   0xc(%ebp)
   10405:	6a 00                	push   $0x0
   10407:	50                   	push   %eax
   10408:	e8 22 2e 00 00       	call   1322f <bitmap_alloc_nbits>
   1040d:	83 c4 10             	add    $0x10,%esp
   10410:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   10413:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10417:	78 17                	js     10430 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   10419:	8b 45 08             	mov    0x8(%ebp),%eax
   1041c:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 50 24             	mov    0x24(%eax),%edx
   10425:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10428:	0f af c2             	imul   %edx,%eax
   1042b:	01 c8                	add    %ecx,%eax
   1042d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10430:	8b 45 08             	mov    0x8(%ebp),%eax
   10433:	83 ec 0c             	sub    $0xc,%esp
   10436:	50                   	push   %eax
   10437:	e8 3b 25 00 00       	call   12977 <mutex_unlock>
   1043c:	83 c4 10             	add    $0x10,%esp

  return addr;
   1043f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10442:	c9                   	leave  
   10443:	c3                   	ret    

00010444 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   10444:	55                   	push   %ebp
   10445:	89 e5                	mov    %esp,%ebp
   10447:	53                   	push   %ebx
   10448:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   1044b:	8b 45 08             	mov    0x8(%ebp),%eax
   1044e:	83 ec 0c             	sub    $0xc,%esp
   10451:	50                   	push   %eax
   10452:	e8 8f 24 00 00       	call   128e6 <mutex_lock>
   10457:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	8b 50 1c             	mov    0x1c(%eax),%edx
   10460:	8b 45 0c             	mov    0xc(%ebp),%eax
   10463:	29 d0                	sub    %edx,%eax
   10465:	89 c1                	mov    %eax,%ecx
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	8b 58 24             	mov    0x24(%eax),%ebx
   1046d:	89 c8                	mov    %ecx,%eax
   1046f:	ba 00 00 00 00       	mov    $0x0,%edx
   10474:	f7 f3                	div    %ebx
   10476:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	83 c0 14             	add    $0x14,%eax
   1047f:	6a 00                	push   $0x0
   10481:	ff 75 10             	push   0x10(%ebp)
   10484:	ff 75 f4             	push   -0xc(%ebp)
   10487:	50                   	push   %eax
   10488:	e8 79 2c 00 00       	call   13106 <bitmap_set_bit>
   1048d:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10490:	8b 45 08             	mov    0x8(%ebp),%eax
   10493:	83 ec 0c             	sub    $0xc,%esp
   10496:	50                   	push   %eax
   10497:	e8 db 24 00 00       	call   12977 <mutex_unlock>
   1049c:	83 c4 10             	add    $0x10,%esp
}
   1049f:	90                   	nop
   104a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104a3:	c9                   	leave  
   104a4:	c3                   	ret    

000104a5 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   104a5:	55                   	push   %ebp
   104a6:	89 e5                	mov    %esp,%ebp
   104a8:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104ab:	83 ec 0c             	sub    $0xc,%esp
   104ae:	68 80 3d 01 00       	push   $0x13d80
   104b3:	e8 c5 37 00 00       	call   13c7d <log_printf>
   104b8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104c2:	eb 29                	jmp    104ed <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   104c4:	8b 45 08             	mov    0x8(%ebp),%eax
   104c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104ca:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104ce:	8b 45 08             	mov    0x8(%ebp),%eax
   104d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104d4:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104d7:	52                   	push   %edx
   104d8:	50                   	push   %eax
   104d9:	ff 75 f4             	push   -0xc(%ebp)
   104dc:	68 8c 3d 01 00       	push   $0x13d8c
   104e1:	e8 97 37 00 00       	call   13c7d <log_printf>
   104e6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104ed:	8b 45 08             	mov    0x8(%ebp),%eax
   104f0:	8b 40 50             	mov    0x50(%eax),%eax
   104f3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104f6:	7c cc                	jl     104c4 <show_mem_info+0x1f>
    }

    log_printf("");
   104f8:	83 ec 0c             	sub    $0xc,%esp
   104fb:	68 9e 3d 01 00       	push   $0x13d9e
   10500:	e8 78 37 00 00       	call   13c7d <log_printf>
   10505:	83 c4 10             	add    $0x10,%esp
}
   10508:	90                   	nop
   10509:	c9                   	leave  
   1050a:	c3                   	ret    

0001050b <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1050b:	55                   	push   %ebp
   1050c:	89 e5                	mov    %esp,%ebp
   1050e:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10511:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10518:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1051f:	eb 11                	jmp    10532 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10521:	8b 45 08             	mov    0x8(%ebp),%eax
   10524:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10527:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1052b:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1052e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 50             	mov    0x50(%eax),%eax
   10538:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1053b:	7c e4                	jl     10521 <total_mem_size+0x16>
    }

    return mem_size;
   1053d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10540:	c9                   	leave  
   10541:	c3                   	ret    

00010542 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10542:	55                   	push   %ebp
   10543:	89 e5                	mov    %esp,%ebp
   10545:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10548:	ff 75 0c             	push   0xc(%ebp)
   1054b:	e8 a7 fd ff ff       	call   102f7 <pde_index>
   10550:	83 c4 04             	add    $0x4,%esp
   10553:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	01 d0                	add    %edx,%eax
   1055f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10562:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10565:	0f b6 00             	movzbl (%eax),%eax
   10568:	83 e0 01             	and    $0x1,%eax
   1056b:	84 c0                	test   %al,%al
   1056d:	74 10                	je     1057f <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   1056f:	ff 75 f0             	push   -0x10(%ebp)
   10572:	e8 9b fd ff ff       	call   10312 <pde_to_pt_addr>
   10577:	83 c4 04             	add    $0x4,%esp
   1057a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1057d:	eb 57                	jmp    105d6 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   1057f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10583:	75 07                	jne    1058c <find_pte+0x4a>
      return (pte_t*)0;
   10585:	b8 00 00 00 00       	mov    $0x0,%eax
   1058a:	eb 64                	jmp    105f0 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1058c:	83 ec 08             	sub    $0x8,%esp
   1058f:	6a 01                	push   $0x1
   10591:	68 00 60 01 00       	push   $0x16000
   10596:	e8 42 fe ff ff       	call   103dd <addr_alloc_page>
   1059b:	83 c4 10             	add    $0x10,%esp
   1059e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   105a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   105a5:	75 07                	jne    105ae <find_pte+0x6c>
      return (pte_t*)0;
   105a7:	b8 00 00 00 00       	mov    $0x0,%eax
   105ac:	eb 42                	jmp    105f0 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   105ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   105b4:	83 ec 04             	sub    $0x4,%esp
   105b7:	68 00 10 00 00       	push   $0x1000
   105bc:	6a 00                	push   $0x0
   105be:	ff 75 f4             	push   -0xc(%ebp)
   105c1:	e8 ea 2e 00 00       	call   134b0 <kernel_memset>
   105c6:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   105c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105cc:	83 c8 07             	or     $0x7,%eax
   105cf:	89 c2                	mov    %eax,%edx
   105d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105d4:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105d6:	83 ec 0c             	sub    $0xc,%esp
   105d9:	ff 75 0c             	push   0xc(%ebp)
   105dc:	e8 21 fd ff ff       	call   10302 <pte_index>
   105e1:	83 c4 10             	add    $0x10,%esp
   105e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105ee:	01 d0                	add    %edx,%eax

}
   105f0:	c9                   	leave  
   105f1:	c3                   	ret    

000105f2 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105f2:	55                   	push   %ebp
   105f3:	89 e5                	mov    %esp,%ebp
   105f5:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105ff:	eb 7e                	jmp    1067f <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10601:	83 ec 04             	sub    $0x4,%esp
   10604:	6a 01                	push   $0x1
   10606:	ff 75 0c             	push   0xc(%ebp)
   10609:	ff 75 08             	push   0x8(%ebp)
   1060c:	e8 31 ff ff ff       	call   10542 <find_pte>
   10611:	83 c4 10             	add    $0x10,%esp
   10614:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10617:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1061b:	75 17                	jne    10634 <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   1061d:	83 ec 0c             	sub    $0xc,%esp
   10620:	68 9f 3d 01 00       	push   $0x13d9f
   10625:	e8 53 36 00 00       	call   13c7d <log_printf>
   1062a:	83 c4 10             	add    $0x10,%esp
      return -1;
   1062d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10632:	eb 5c                	jmp    10690 <memory_creat_map+0x9e>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10634:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10637:	0f b6 00             	movzbl (%eax),%eax
   1063a:	83 e0 01             	and    $0x1,%eax
   1063d:	84 c0                	test   %al,%al
   1063f:	74 1c                	je     1065d <memory_creat_map+0x6b>
   10641:	68 b9 3d 01 00       	push   $0x13db9
   10646:	68 c8 3e 01 00       	push   $0x13ec8
   1064b:	68 c1 00 00 00       	push   $0xc1
   10650:	68 cc 3d 01 00       	push   $0x13dcc
   10655:	e8 54 29 00 00       	call   12fae <pannic>
   1065a:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   1065d:	8b 45 10             	mov    0x10(%ebp),%eax
   10660:	0b 45 18             	or     0x18(%ebp),%eax
   10663:	83 c8 01             	or     $0x1,%eax
   10666:	89 c2                	mov    %eax,%edx
   10668:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1066b:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1066d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10674:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1067b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1067f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10682:	3b 45 14             	cmp    0x14(%ebp),%eax
   10685:	0f 8c 76 ff ff ff    	jl     10601 <memory_creat_map+0xf>

  }

  return 1;
   1068b:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   10690:	c9                   	leave  
   10691:	c3                   	ret    

00010692 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   10692:	55                   	push   %ebp
   10693:	89 e5                	mov    %esp,%ebp
   10695:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10698:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1069f:	e9 82 00 00 00       	jmp    10726 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   106a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a7:	c1 e0 04             	shl    $0x4,%eax
   106aa:	05 00 50 01 00       	add    $0x15000,%eax
   106af:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	8b 00                	mov    (%eax),%eax
   106b7:	68 00 10 00 00       	push   $0x1000
   106bc:	50                   	push   %eax
   106bd:	e8 05 fc ff ff       	call   102c7 <down2>
   106c2:	83 c4 08             	add    $0x8,%esp
   106c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106cb:	8b 40 08             	mov    0x8(%eax),%eax
   106ce:	68 00 10 00 00       	push   $0x1000
   106d3:	50                   	push   %eax
   106d4:	e8 ee fb ff ff       	call   102c7 <down2>
   106d9:	83 c4 08             	add    $0x8,%esp
   106dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106df:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e2:	8b 40 04             	mov    0x4(%eax),%eax
   106e5:	68 00 10 00 00       	push   $0x1000
   106ea:	50                   	push   %eax
   106eb:	e8 e4 fb ff ff       	call   102d4 <up2>
   106f0:	83 c4 08             	add    $0x8,%esp
   106f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106f9:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106fc:	c1 e8 0c             	shr    $0xc,%eax
   106ff:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   10702:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10705:	8b 40 0c             	mov    0xc(%eax),%eax
   10708:	83 ec 0c             	sub    $0xc,%esp
   1070b:	50                   	push   %eax
   1070c:	ff 75 e0             	push   -0x20(%ebp)
   1070f:	ff 75 e8             	push   -0x18(%ebp)
   10712:	ff 75 ec             	push   -0x14(%ebp)
   10715:	68 00 70 01 00       	push   $0x17000
   1071a:	e8 d3 fe ff ff       	call   105f2 <memory_creat_map>
   1071f:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10722:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10726:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10729:	83 f8 03             	cmp    $0x3,%eax
   1072c:	0f 86 72 ff ff ff    	jbe    106a4 <create_kernal_table+0x12>

  }
}
   10732:	90                   	nop
   10733:	90                   	nop
   10734:	c9                   	leave  
   10735:	c3                   	ret    

00010736 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10736:	55                   	push   %ebp
   10737:	89 e5                	mov    %esp,%ebp
   10739:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   1073c:	83 ec 08             	sub    $0x8,%esp
   1073f:	6a 01                	push   $0x1
   10741:	68 00 60 01 00       	push   $0x16000
   10746:	e8 92 fc ff ff       	call   103dd <addr_alloc_page>
   1074b:	83 c4 10             	add    $0x10,%esp
   1074e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10751:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10755:	75 07                	jne    1075e <memory_creat_uvm+0x28>
   10757:	b8 00 00 00 00       	mov    $0x0,%eax
   1075c:	eb 5b                	jmp    107b9 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1075e:	83 ec 04             	sub    $0x4,%esp
   10761:	68 00 10 00 00       	push   $0x1000
   10766:	6a 00                	push   $0x0
   10768:	ff 75 f0             	push   -0x10(%ebp)
   1076b:	e8 40 2d 00 00       	call   134b0 <kernel_memset>
   10770:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10773:	83 ec 0c             	sub    $0xc,%esp
   10776:	68 00 00 00 80       	push   $0x80000000
   1077b:	e8 77 fb ff ff       	call   102f7 <pde_index>
   10780:	83 c4 10             	add    $0x10,%esp
   10783:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10786:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1078d:	eb 1f                	jmp    107ae <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1078f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10792:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10799:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079c:	01 c2                	add    %eax,%edx
   1079e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a1:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   107a8:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   107aa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   107b4:	77 d9                	ja     1078f <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   107b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   107b9:	c9                   	leave  
   107ba:	c3                   	ret    

000107bb <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   107bb:	55                   	push   %ebp
   107bc:	89 e5                	mov    %esp,%ebp
   107be:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   107c1:	68 00 00 00 80       	push   $0x80000000
   107c6:	e8 2c fb ff ff       	call   102f7 <pde_index>
   107cb:	83 c4 04             	add    $0x4,%esp
   107ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   107d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   107d4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107db:	8b 45 0c             	mov    0xc(%ebp),%eax
   107de:	01 d0                	add    %edx,%eax
   107e0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   107e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   107e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
   107e9:	e9 2a 01 00 00       	jmp    10918 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   107ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f1:	0f b6 00             	movzbl (%eax),%eax
   107f4:	83 e0 01             	and    $0x1,%eax
   107f7:	84 c0                	test   %al,%al
   107f9:	0f 84 10 01 00 00    	je     1090f <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   107ff:	ff 75 f4             	push   -0xc(%ebp)
   10802:	e8 0b fb ff ff       	call   10312 <pde_to_pt_addr>
   10807:	83 c4 04             	add    $0x4,%esp
   1080a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   1080d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10814:	e9 e7 00 00 00       	jmp    10900 <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10819:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1081c:	0f b6 00             	movzbl (%eax),%eax
   1081f:	83 e0 01             	and    $0x1,%eax
   10822:	84 c0                	test   %al,%al
   10824:	0f 84 cd 00 00 00    	je     108f7 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   1082a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1082d:	c1 e0 16             	shl    $0x16,%eax
   10830:	89 c2                	mov    %eax,%edx
   10832:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10835:	c1 e0 0c             	shl    $0xc,%eax
   10838:	09 d0                	or     %edx,%eax
   1083a:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //当前页支持写操作，需进行复制操作
   1083d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10840:	8b 00                	mov    (%eax),%eax
   10842:	83 e0 02             	and    $0x2,%eax
   10845:	85 c0                	test   %eax,%eax
   10847:	74 6c                	je     108b5 <memory_copy_uvm+0xfa>
        //分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10849:	83 ec 08             	sub    $0x8,%esp
   1084c:	6a 01                	push   $0x1
   1084e:	68 00 60 01 00       	push   $0x16000
   10853:	e8 85 fb ff ff       	call   103dd <addr_alloc_page>
   10858:	83 c4 10             	add    $0x10,%esp
   1085b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   1085e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10862:	0f 84 c4 00 00 00    	je     1092c <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10868:	83 ec 0c             	sub    $0xc,%esp
   1086b:	ff 75 ec             	push   -0x14(%ebp)
   1086e:	e8 ed fa ff ff       	call   10360 <get_pte_privilege>
   10873:	83 c4 10             	add    $0x10,%esp
   10876:	8b 55 08             	mov    0x8(%ebp),%edx
   10879:	83 ec 0c             	sub    $0xc,%esp
   1087c:	50                   	push   %eax
   1087d:	6a 01                	push   $0x1
   1087f:	ff 75 d4             	push   -0x2c(%ebp)
   10882:	ff 75 e0             	push   -0x20(%ebp)
   10885:	52                   	push   %edx
   10886:	e8 67 fd ff ff       	call   105f2 <memory_creat_map>
   1088b:	83 c4 20             	add    $0x20,%esp
   1088e:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10891:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10895:	0f 88 94 00 00 00    	js     1092f <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //拷贝该页内容
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   1089b:	8b 55 e0             	mov    -0x20(%ebp),%edx
   1089e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   108a1:	83 ec 04             	sub    $0x4,%esp
   108a4:	68 00 10 00 00       	push   $0x1000
   108a9:	52                   	push   %edx
   108aa:	50                   	push   %eax
   108ab:	e8 b1 2b 00 00       	call   13461 <kernel_memcpy>
   108b0:	83 c4 10             	add    $0x10,%esp
   108b3:	eb 43                	jmp    108f8 <memory_copy_uvm+0x13d>

      } else {  //当前页为只读页，直接共享该页即可，即只复制页表项即可
        //获取该页的地址
        uint32_t page = pte_to_pg_addr(pte);
   108b5:	83 ec 0c             	sub    $0xc,%esp
   108b8:	ff 75 ec             	push   -0x14(%ebp)
   108bb:	e8 79 fa ff ff       	call   10339 <pte_to_pg_addr>
   108c0:	83 c4 10             	add    $0x10,%esp
   108c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   108c6:	83 ec 0c             	sub    $0xc,%esp
   108c9:	ff 75 ec             	push   -0x14(%ebp)
   108cc:	e8 8f fa ff ff       	call   10360 <get_pte_privilege>
   108d1:	83 c4 10             	add    $0x10,%esp
   108d4:	8b 55 08             	mov    0x8(%ebp),%edx
   108d7:	83 ec 0c             	sub    $0xc,%esp
   108da:	50                   	push   %eax
   108db:	6a 01                	push   $0x1
   108dd:	ff 75 dc             	push   -0x24(%ebp)
   108e0:	ff 75 e0             	push   -0x20(%ebp)
   108e3:	52                   	push   %edx
   108e4:	e8 09 fd ff ff       	call   105f2 <memory_creat_map>
   108e9:	83 c4 20             	add    $0x20,%esp
   108ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   108ef:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   108f3:	78 3d                	js     10932 <memory_copy_uvm+0x177>
   108f5:	eb 01                	jmp    108f8 <memory_copy_uvm+0x13d>
        continue;
   108f7:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   108f8:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108fc:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10900:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10907:	0f 8e 0c ff ff ff    	jle    10819 <memory_copy_uvm+0x5e>
   1090d:	eb 01                	jmp    10910 <memory_copy_uvm+0x155>
      continue;
   1090f:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10910:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10914:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10918:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   1091f:	0f 8e c9 fe ff ff    	jle    107ee <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10925:	b8 01 00 00 00       	mov    $0x1,%eax
   1092a:	eb 1a                	jmp    10946 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   1092c:	90                   	nop
   1092d:	eb 04                	jmp    10933 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   1092f:	90                   	nop
   10930:	eb 01                	jmp    10933 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10932:	90                   	nop


copy_uvm_failed:
  //copy虚拟空间映射失败，清理对应资源
  memory_destroy_uvm(to_page_dir);
   10933:	83 ec 0c             	sub    $0xc,%esp
   10936:	ff 75 08             	push   0x8(%ebp)
   10939:	e8 0a 00 00 00       	call   10948 <memory_destroy_uvm>
   1093e:	83 c4 10             	add    $0x10,%esp
  return -1;
   10941:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10946:	c9                   	leave  
   10947:	c3                   	ret    

00010948 <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 *        //TODO:进行了读不释放写释放的处理操作，只能供memory_copy_uvm函数失败时调用
 * 
 * @param page_dir 
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10948:	55                   	push   %ebp
   10949:	89 e5                	mov    %esp,%ebp
   1094b:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   1094e:	68 00 00 00 80       	push   $0x80000000
   10953:	e8 9f f9 ff ff       	call   102f7 <pde_index>
   10958:	83 c4 04             	add    $0x4,%esp
   1095b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   1095e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10961:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10968:	8b 45 08             	mov    0x8(%ebp),%eax
   1096b:	01 d0                	add    %edx,%eax
   1096d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10970:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10973:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10976:	e9 9f 00 00 00       	jmp    10a1a <memory_destroy_uvm+0xd2>
    if (!pde->present) 
   1097b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1097e:	0f b6 00             	movzbl (%eax),%eax
   10981:	83 e0 01             	and    $0x1,%eax
   10984:	84 c0                	test   %al,%al
   10986:	0f 84 85 00 00 00    	je     10a11 <memory_destroy_uvm+0xc9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   1098c:	ff 75 f4             	push   -0xc(%ebp)
   1098f:	e8 7e f9 ff ff       	call   10312 <pde_to_pt_addr>
   10994:	83 c4 04             	add    $0x4,%esp
   10997:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   1099a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109a1:	eb 42                	jmp    109e5 <memory_destroy_uvm+0x9d>
      if (!pte->present)
   109a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109a6:	0f b6 00             	movzbl (%eax),%eax
   109a9:	83 e0 01             	and    $0x1,%eax
   109ac:	84 c0                	test   %al,%al
   109ae:	74 2c                	je     109dc <memory_destroy_uvm+0x94>
        continue;
      
      //5.判断该页的可读属性，读则不释放关联物理页，写则释放该关联物理页
      if (pte->v & PTE_W) { //该页为可写页
   109b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109b3:	8b 00                	mov    (%eax),%eax
   109b5:	83 e0 02             	and    $0x2,%eax
   109b8:	85 c0                	test   %eax,%eax
   109ba:	74 21                	je     109dd <memory_destroy_uvm+0x95>
        //释放该页表项关联的物理页
        addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   109bc:	ff 75 ec             	push   -0x14(%ebp)
   109bf:	e8 75 f9 ff ff       	call   10339 <pte_to_pg_addr>
   109c4:	83 c4 04             	add    $0x4,%esp
   109c7:	83 ec 04             	sub    $0x4,%esp
   109ca:	6a 01                	push   $0x1
   109cc:	50                   	push   %eax
   109cd:	68 00 60 01 00       	push   $0x16000
   109d2:	e8 6d fa ff ff       	call   10444 <addr_free_page>
   109d7:	83 c4 10             	add    $0x10,%esp
   109da:	eb 01                	jmp    109dd <memory_destroy_uvm+0x95>
        continue;
   109dc:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   109dd:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   109e1:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   109e5:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   109ec:	7e b5                	jle    109a3 <memory_destroy_uvm+0x5b>
      }
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   109ee:	83 ec 0c             	sub    $0xc,%esp
   109f1:	ff 75 f4             	push   -0xc(%ebp)
   109f4:	e8 19 f9 ff ff       	call   10312 <pde_to_pt_addr>
   109f9:	83 c4 10             	add    $0x10,%esp
   109fc:	83 ec 04             	sub    $0x4,%esp
   109ff:	6a 01                	push   $0x1
   10a01:	50                   	push   %eax
   10a02:	68 00 60 01 00       	push   $0x16000
   10a07:	e8 38 fa ff ff       	call   10444 <addr_free_page>
   10a0c:	83 c4 10             	add    $0x10,%esp
   10a0f:	eb 01                	jmp    10a12 <memory_destroy_uvm+0xca>
        continue;
   10a11:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10a12:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a16:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a1a:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a21:	0f 8e 54 ff ff ff    	jle    1097b <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10a27:	83 ec 04             	sub    $0x4,%esp
   10a2a:	6a 01                	push   $0x1
   10a2c:	ff 75 08             	push   0x8(%ebp)
   10a2f:	68 00 60 01 00       	push   $0x16000
   10a34:	e8 0b fa ff ff       	call   10444 <addr_free_page>
   10a39:	83 c4 10             	add    $0x10,%esp
}
   10a3c:	90                   	nop
   10a3d:	c9                   	leave  
   10a3e:	c3                   	ret    

00010a3f <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10a3f:	55                   	push   %ebp
   10a40:	89 e5                	mov    %esp,%ebp
   10a42:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10a45:	83 ec 0c             	sub    $0xc,%esp
   10a48:	68 03 3e 01 00       	push   $0x13e03
   10a4d:	e8 2b 32 00 00       	call   13c7d <log_printf>
   10a52:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10a55:	83 ec 08             	sub    $0x8,%esp
   10a58:	68 1a 32 03 00       	push   $0x3321a
   10a5d:	68 0f 3e 01 00       	push   $0x13e0f
   10a62:	e8 16 32 00 00       	call   13c7d <log_printf>
   10a67:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10a6a:	83 ec 0c             	sub    $0xc,%esp
   10a6d:	ff 75 08             	push   0x8(%ebp)
   10a70:	e8 30 fa ff ff       	call   104a5 <show_mem_info>
   10a75:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10a78:	83 ec 0c             	sub    $0xc,%esp
   10a7b:	ff 75 08             	push   0x8(%ebp)
   10a7e:	e8 88 fa ff ff       	call   1050b <total_mem_size>
   10a83:	83 c4 10             	add    $0x10,%esp
   10a86:	2d 00 00 10 00       	sub    $0x100000,%eax
   10a8b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10a8e:	83 ec 08             	sub    $0x8,%esp
   10a91:	68 00 10 00 00       	push   $0x1000
   10a96:	ff 75 f4             	push   -0xc(%ebp)
   10a99:	e8 29 f8 ff ff       	call   102c7 <down2>
   10a9e:	83 c4 10             	add    $0x10,%esp
   10aa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10aa4:	83 ec 04             	sub    $0x4,%esp
   10aa7:	ff 75 f4             	push   -0xc(%ebp)
   10aaa:	68 00 00 10 00       	push   $0x100000
   10aaf:	68 24 3e 01 00       	push   $0x13e24
   10ab4:	e8 c4 31 00 00       	call   13c7d <log_printf>
   10ab9:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10abc:	c7 45 f0 1a 32 03 00 	movl   $0x3321a,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10ac3:	83 ec 0c             	sub    $0xc,%esp
   10ac6:	68 00 10 00 00       	push   $0x1000
   10acb:	ff 75 f4             	push   -0xc(%ebp)
   10ace:	68 00 00 10 00       	push   $0x100000
   10ad3:	ff 75 f0             	push   -0x10(%ebp)
   10ad6:	68 00 60 01 00       	push   $0x16000
   10adb:	e8 a0 f8 ff ff       	call   10380 <addr_alloc_init>
   10ae0:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10ae3:	a1 20 60 01 00       	mov    0x16020,%eax
   10ae8:	c1 e8 0c             	shr    $0xc,%eax
   10aeb:	83 ec 0c             	sub    $0xc,%esp
   10aee:	50                   	push   %eax
   10aef:	e8 f0 24 00 00       	call   12fe4 <bitmap_byte_count>
   10af4:	83 c4 10             	add    $0x10,%esp
   10af7:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10afa:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10b01:	76 1c                	jbe    10b1f <memory_init+0xe0>
   10b03:	68 44 3e 01 00       	push   $0x13e44
   10b08:	68 dc 3e 01 00       	push   $0x13edc
   10b0d:	68 9b 01 00 00       	push   $0x19b
   10b12:	68 cc 3d 01 00       	push   $0x13dcc
   10b17:	e8 92 24 00 00       	call   12fae <pannic>
   10b1c:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10b1f:	e8 6e fb ff ff       	call   10692 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10b24:	b8 00 70 01 00       	mov    $0x17000,%eax
   10b29:	83 ec 0c             	sub    $0xc,%esp
   10b2c:	50                   	push   %eax
   10b2d:	e8 3d f8 ff ff       	call   1036f <mmu_set_page_dir>
   10b32:	83 c4 10             	add    $0x10,%esp
}
   10b35:	90                   	nop
   10b36:	c9                   	leave  
   10b37:	c3                   	ret    

00010b38 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10b38:	55                   	push   %ebp
   10b39:	89 e5                	mov    %esp,%ebp
   10b3b:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10b3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b44:	68 00 10 00 00       	push   $0x1000
   10b49:	ff 75 10             	push   0x10(%ebp)
   10b4c:	e8 83 f7 ff ff       	call   102d4 <up2>
   10b51:	83 c4 08             	add    $0x8,%esp
   10b54:	c1 e8 0c             	shr    $0xc,%eax
   10b57:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10b5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10b61:	eb 7a                	jmp    10bdd <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10b63:	83 ec 08             	sub    $0x8,%esp
   10b66:	6a 01                	push   $0x1
   10b68:	68 00 60 01 00       	push   $0x16000
   10b6d:	e8 6b f8 ff ff       	call   103dd <addr_alloc_page>
   10b72:	83 c4 10             	add    $0x10,%esp
   10b75:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10b78:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10b7c:	75 17                	jne    10b95 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   10b7e:	83 ec 0c             	sub    $0xc,%esp
   10b81:	68 68 3e 01 00       	push   $0x13e68
   10b86:	e8 f2 30 00 00       	call   13c7d <log_printf>
   10b8b:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10b8e:	b8 00 00 00 00       	mov    $0x0,%eax
   10b93:	eb 59                	jmp    10bee <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10b95:	8b 45 08             	mov    0x8(%ebp),%eax
   10b98:	83 ec 0c             	sub    $0xc,%esp
   10b9b:	ff 75 14             	push   0x14(%ebp)
   10b9e:	6a 01                	push   $0x1
   10ba0:	ff 75 e8             	push   -0x18(%ebp)
   10ba3:	ff 75 f4             	push   -0xc(%ebp)
   10ba6:	50                   	push   %eax
   10ba7:	e8 46 fa ff ff       	call   105f2 <memory_creat_map>
   10bac:	83 c4 20             	add    $0x20,%esp
   10baf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10bb2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10bb6:	79 1a                	jns    10bd2 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10bb8:	83 ec 08             	sub    $0x8,%esp
   10bbb:	ff 75 e4             	push   -0x1c(%ebp)
   10bbe:	68 84 3e 01 00       	push   $0x13e84
   10bc3:	e8 b5 30 00 00       	call   13c7d <log_printf>
   10bc8:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10bcb:	b8 00 00 00 00       	mov    $0x0,%eax
   10bd0:	eb 1c                	jmp    10bee <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10bd2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10bd9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10be0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10be3:	0f 8c 7a ff ff ff    	jl     10b63 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10be9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bee:	c9                   	leave  
   10bef:	c3                   	ret    

00010bf0 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10bf0:	55                   	push   %ebp
   10bf1:	89 e5                	mov    %esp,%ebp
   10bf3:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10bf6:	e8 7f 08 00 00       	call   1147a <task_current>
   10bfb:	8b 40 6c             	mov    0x6c(%eax),%eax
   10bfe:	ff 75 10             	push   0x10(%ebp)
   10c01:	ff 75 0c             	push   0xc(%ebp)
   10c04:	ff 75 08             	push   0x8(%ebp)
   10c07:	50                   	push   %eax
   10c08:	e8 2b ff ff ff       	call   10b38 <memory_alloc_for_page_dir>
   10c0d:	83 c4 10             	add    $0x10,%esp
}
   10c10:	c9                   	leave  
   10c11:	c3                   	ret    

00010c12 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10c12:	55                   	push   %ebp
   10c13:	89 e5                	mov    %esp,%ebp
   10c15:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10c18:	e8 5d 08 00 00       	call   1147a <task_current>
   10c1d:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   10c20:	c9                   	leave  
   10c21:	c3                   	ret    

00010c22 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10c22:	55                   	push   %ebp
   10c23:	89 e5                	mov    %esp,%ebp
   10c25:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10c28:	83 ec 08             	sub    $0x8,%esp
   10c2b:	6a 01                	push   $0x1
   10c2d:	68 00 60 01 00       	push   $0x16000
   10c32:	e8 a6 f7 ff ff       	call   103dd <addr_alloc_page>
   10c37:	83 c4 10             	add    $0x10,%esp
   10c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10c40:	c9                   	leave  
   10c41:	c3                   	ret    

00010c42 <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10c42:	55                   	push   %ebp
   10c43:	89 e5                	mov    %esp,%ebp
   10c45:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10c48:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4b:	85 c0                	test   %eax,%eax
   10c4d:	78 17                	js     10c66 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10c4f:	83 ec 04             	sub    $0x4,%esp
   10c52:	6a 01                	push   $0x1
   10c54:	ff 75 08             	push   0x8(%ebp)
   10c57:	68 00 60 01 00       	push   $0x16000
   10c5c:	e8 e3 f7 ff ff       	call   10444 <addr_free_page>
   10c61:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10c64:	eb 72                	jmp    10cd8 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10c66:	e8 a7 ff ff ff       	call   10c12 <curr_page_dir>
   10c6b:	83 ec 04             	sub    $0x4,%esp
   10c6e:	6a 00                	push   $0x0
   10c70:	ff 75 08             	push   0x8(%ebp)
   10c73:	50                   	push   %eax
   10c74:	e8 c9 f8 ff ff       	call   10542 <find_pte>
   10c79:	83 c4 10             	add    $0x10,%esp
   10c7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10c7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c83:	74 0d                	je     10c92 <memory_free_page+0x50>
   10c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c88:	0f b6 00             	movzbl (%eax),%eax
   10c8b:	83 e0 01             	and    $0x1,%eax
   10c8e:	84 c0                	test   %al,%al
   10c90:	75 1c                	jne    10cae <memory_free_page+0x6c>
   10c92:	68 a4 3e 01 00       	push   $0x13ea4
   10c97:	68 e8 3e 01 00       	push   $0x13ee8
   10c9c:	68 fd 01 00 00       	push   $0x1fd
   10ca1:	68 cc 3d 01 00       	push   $0x13dcc
   10ca6:	e8 03 23 00 00       	call   12fae <pannic>
   10cab:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10cae:	83 ec 0c             	sub    $0xc,%esp
   10cb1:	ff 75 f4             	push   -0xc(%ebp)
   10cb4:	e8 80 f6 ff ff       	call   10339 <pte_to_pg_addr>
   10cb9:	83 c4 10             	add    $0x10,%esp
   10cbc:	83 ec 04             	sub    $0x4,%esp
   10cbf:	6a 01                	push   $0x1
   10cc1:	50                   	push   %eax
   10cc2:	68 00 60 01 00       	push   $0x16000
   10cc7:	e8 78 f7 ff ff       	call   10444 <addr_free_page>
   10ccc:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cd2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10cd8:	90                   	nop
   10cd9:	c9                   	leave  
   10cda:	c3                   	ret    

00010cdb <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10cdb:	55                   	push   %ebp
   10cdc:	89 e5                	mov    %esp,%ebp
   10cde:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10ce1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ce5:	75 19                	jne    10d00 <list_node_init+0x25>
   10ce7:	68 fc 3e 01 00       	push   $0x13efc
   10cec:	68 e8 3f 01 00       	push   $0x13fe8
   10cf1:	6a 20                	push   $0x20
   10cf3:	68 14 3f 01 00       	push   $0x13f14
   10cf8:	e8 b1 22 00 00       	call   12fae <pannic>
   10cfd:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10d00:	8b 45 08             	mov    0x8(%ebp),%eax
   10d03:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10d0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0d:	8b 50 04             	mov    0x4(%eax),%edx
   10d10:	8b 45 08             	mov    0x8(%ebp),%eax
   10d13:	89 10                	mov    %edx,(%eax)
}
   10d15:	90                   	nop
   10d16:	c9                   	leave  
   10d17:	c3                   	ret    

00010d18 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10d18:	55                   	push   %ebp
   10d19:	89 e5                	mov    %esp,%ebp
   10d1b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10d1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d22:	75 19                	jne    10d3d <list_node_next+0x25>
   10d24:	68 fc 3e 01 00       	push   $0x13efc
   10d29:	68 48 40 01 00       	push   $0x14048
   10d2e:	6a 2b                	push   $0x2b
   10d30:	68 14 3f 01 00       	push   $0x13f14
   10d35:	e8 74 22 00 00       	call   12fae <pannic>
   10d3a:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d40:	8b 40 04             	mov    0x4(%eax),%eax
}
   10d43:	c9                   	leave  
   10d44:	c3                   	ret    

00010d45 <list_init>:

static inline void list_init(list_t *list) {
   10d45:	55                   	push   %ebp
   10d46:	89 e5                	mov    %esp,%ebp
   10d48:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10d4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d4f:	75 19                	jne    10d6a <list_init+0x25>
   10d51:	68 52 3f 01 00       	push   $0x13f52
   10d56:	68 f8 3f 01 00       	push   $0x13ff8
   10d5b:	6a 31                	push   $0x31
   10d5d:	68 14 3f 01 00       	push   $0x13f14
   10d62:	e8 47 22 00 00       	call   12fae <pannic>
   10d67:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10d74:	8b 45 08             	mov    0x8(%ebp),%eax
   10d77:	8b 50 04             	mov    0x4(%eax),%edx
   10d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7d:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d82:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10d89:	90                   	nop
   10d8a:	c9                   	leave  
   10d8b:	c3                   	ret    

00010d8c <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10d8c:	55                   	push   %ebp
   10d8d:	89 e5                	mov    %esp,%ebp
   10d8f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10d92:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d96:	75 19                	jne    10db1 <list_is_empty+0x25>
   10d98:	68 52 3f 01 00       	push   $0x13f52
   10d9d:	68 58 40 01 00       	push   $0x14058
   10da2:	6a 38                	push   $0x38
   10da4:	68 14 3f 01 00       	push   $0x13f14
   10da9:	e8 00 22 00 00       	call   12fae <pannic>
   10dae:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10db1:	8b 45 08             	mov    0x8(%ebp),%eax
   10db4:	8b 40 08             	mov    0x8(%eax),%eax
   10db7:	85 c0                	test   %eax,%eax
   10db9:	0f 94 c0             	sete   %al
   10dbc:	0f b6 c0             	movzbl %al,%eax
}
   10dbf:	c9                   	leave  
   10dc0:	c3                   	ret    

00010dc1 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10dc1:	55                   	push   %ebp
   10dc2:	89 e5                	mov    %esp,%ebp
   10dc4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10dc7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dcb:	75 19                	jne    10de6 <list_get_size+0x25>
   10dcd:	68 52 3f 01 00       	push   $0x13f52
   10dd2:	68 88 40 01 00       	push   $0x14088
   10dd7:	6a 3e                	push   $0x3e
   10dd9:	68 14 3f 01 00       	push   $0x13f14
   10dde:	e8 cb 21 00 00       	call   12fae <pannic>
   10de3:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10de6:	8b 45 08             	mov    0x8(%ebp),%eax
   10de9:	8b 40 08             	mov    0x8(%eax),%eax
}
   10dec:	c9                   	leave  
   10ded:	c3                   	ret    

00010dee <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10dee:	55                   	push   %ebp
   10def:	89 e5                	mov    %esp,%ebp
   10df1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10df4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10df8:	75 19                	jne    10e13 <list_get_first+0x25>
   10dfa:	68 52 3f 01 00       	push   $0x13f52
   10dff:	68 38 40 01 00       	push   $0x14038
   10e04:	6a 44                	push   $0x44
   10e06:	68 14 3f 01 00       	push   $0x13f14
   10e0b:	e8 9e 21 00 00       	call   12fae <pannic>
   10e10:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10e13:	8b 45 08             	mov    0x8(%ebp),%eax
   10e16:	8b 00                	mov    (%eax),%eax
}
   10e18:	c9                   	leave  
   10e19:	c3                   	ret    

00010e1a <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10e1a:	55                   	push   %ebp
   10e1b:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10e1d:	8b 55 08             	mov    0x8(%ebp),%edx
   10e20:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e23:	01 d0                	add    %edx,%eax
   10e25:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e28:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e2b:	f7 d8                	neg    %eax
   10e2d:	21 d0                	and    %edx,%eax
}
   10e2f:	5d                   	pop    %ebp
   10e30:	c3                   	ret    

00010e31 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10e31:	55                   	push   %ebp
   10e32:	89 e5                	mov    %esp,%ebp
   10e34:	f4                   	hlt    
   10e35:	90                   	nop
   10e36:	5d                   	pop    %ebp
   10e37:	c3                   	ret    

00010e38 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10e38:	55                   	push   %ebp
   10e39:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10e3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3e:	0f 22 d8             	mov    %eax,%cr3
}
   10e41:	90                   	nop
   10e42:	5d                   	pop    %ebp
   10e43:	c3                   	ret    

00010e44 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10e44:	55                   	push   %ebp
   10e45:	89 e5                	mov    %esp,%ebp
   10e47:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10e4a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e4d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10e50:	8b 45 08             	mov    0x8(%ebp),%eax
   10e53:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10e56:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10e59:	ff 28                	ljmp   *(%eax)
}
   10e5b:	90                   	nop
   10e5c:	c9                   	leave  
   10e5d:	c3                   	ret    

00010e5e <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10e5e:	55                   	push   %ebp
   10e5f:	89 e5                	mov    %esp,%ebp
   10e61:	83 ec 04             	sub    $0x4,%esp
   10e64:	8b 45 08             	mov    0x8(%ebp),%eax
   10e67:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10e6b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e6f:	0f 00 d8             	ltr    %ax
}
   10e72:	90                   	nop
   10e73:	c9                   	leave  
   10e74:	c3                   	ret    

00010e75 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10e75:	55                   	push   %ebp
   10e76:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10e78:	ff 75 08             	push   0x8(%ebp)
   10e7b:	e8 b8 ff ff ff       	call   10e38 <write_cr3>
   10e80:	83 c4 04             	add    $0x4,%esp
}
   10e83:	90                   	nop
   10e84:	c9                   	leave  
   10e85:	c3                   	ret    

00010e86 <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   10e86:	55                   	push   %ebp
   10e87:	89 e5                	mov    %esp,%ebp
   10e89:	83 ec 04             	sub    $0x4,%esp
   10e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10e93:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e97:	6a 00                	push   $0x0
   10e99:	50                   	push   %eax
   10e9a:	e8 a5 ff ff ff       	call   10e44 <far_jump>
   10e9f:	83 c4 08             	add    $0x8,%esp
}
   10ea2:	90                   	nop
   10ea3:	c9                   	leave  
   10ea4:	c3                   	ret    

00010ea5 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10ea5:	55                   	push   %ebp
   10ea6:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10ea8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eab:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   10eb1:	0f b7 c0             	movzwl %ax,%eax
   10eb4:	50                   	push   %eax
   10eb5:	e8 cc ff ff ff       	call   10e86 <switch_to_tss>
   10eba:	83 c4 04             	add    $0x4,%esp
}
   10ebd:	90                   	nop
   10ebe:	c9                   	leave  
   10ebf:	c3                   	ret    

00010ec0 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   10ec0:	55                   	push   %ebp
   10ec1:	89 e5                	mov    %esp,%ebp
   10ec3:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10ec6:	e8 9e 0c 00 00       	call   11b69 <gdt_alloc_desc>
   10ecb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10ece:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed1:	83 c0 50             	add    $0x50,%eax
   10ed4:	89 c2                	mov    %eax,%edx
   10ed6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ed9:	0f b7 c0             	movzwl %ax,%eax
   10edc:	68 89 00 00 00       	push   $0x89
   10ee1:	6a 68                	push   $0x68
   10ee3:	52                   	push   %edx
   10ee4:	50                   	push   %eax
   10ee5:	e8 0d 0b 00 00       	call   119f7 <segment_desc_set>
   10eea:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10eed:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef0:	83 c0 50             	add    $0x50,%eax
   10ef3:	83 ec 04             	sub    $0x4,%esp
   10ef6:	6a 68                	push   $0x68
   10ef8:	6a 00                	push   $0x0
   10efa:	50                   	push   %eax
   10efb:	e8 b0 25 00 00       	call   134b0 <kernel_memset>
   10f00:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10f03:	8b 45 08             	mov    0x8(%ebp),%eax
   10f06:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f09:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   10f0f:	8b 45 14             	mov    0x14(%ebp),%eax
   10f12:	83 e0 01             	and    $0x1,%eax
   10f15:	85 c0                	test   %eax,%eax
   10f17:	74 10                	je     10f29 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   10f19:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   10f20:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10f27:	eb 16                	jmp    10f3f <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   10f29:	a1 a0 81 01 00       	mov    0x181a0,%eax
   10f2e:	83 c8 03             	or     $0x3,%eax
   10f31:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   10f34:	a1 a4 81 01 00       	mov    0x181a4,%eax
   10f39:	83 c8 03             	or     $0x3,%eax
   10f3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10f3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f42:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f45:	89 50 70             	mov    %edx,0x70(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   10f48:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4b:	8b 55 10             	mov    0x10(%ebp),%edx
   10f4e:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   10f54:	e8 c9 fc ff ff       	call   10c22 <memory_alloc_page>
   10f59:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   10f5c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10f60:	0f 84 9b 00 00 00    	je     11001 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   10f66:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10f69:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f72:	89 50 54             	mov    %edx,0x54(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   10f75:	8b 45 08             	mov    0x8(%ebp),%eax
   10f78:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f7b:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   10f81:	8b 45 08             	mov    0x8(%ebp),%eax
   10f84:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10f8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f91:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10f97:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9a:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10fa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa3:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   10fa9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fac:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   10fb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb5:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10fbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbe:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10fd3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10fd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdc:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10fe3:	e8 4e f7 ff ff       	call   10736 <memory_creat_uvm>
   10fe8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   10feb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10fef:	74 13                	je     11004 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   10ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ff7:	89 50 6c             	mov    %edx,0x6c(%eax)
    
    return 0;
   10ffa:	b8 00 00 00 00       	mov    $0x0,%eax
   10fff:	eb 2f                	jmp    11030 <tss_init+0x170>
        goto tss_init_failed;   
   11001:	90                   	nop
   11002:	eb 01                	jmp    11005 <tss_init+0x145>
        goto tss_init_failed;
   11004:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   11005:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11008:	0f b7 c0             	movzwl %ax,%eax
   1100b:	83 ec 0c             	sub    $0xc,%esp
   1100e:	50                   	push   %eax
   1100f:	e8 ca 0b 00 00       	call   11bde <gdt_free>
   11014:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   11017:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1101b:	74 0e                	je     1102b <tss_init+0x16b>
        memory_free_page(kernel_stack);
   1101d:	83 ec 0c             	sub    $0xc,%esp
   11020:	ff 75 e8             	push   -0x18(%ebp)
   11023:	e8 1a fc ff ff       	call   10c42 <memory_free_page>
   11028:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   1102b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11030:	c9                   	leave  
   11031:	c3                   	ret    

00011032 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   11032:	55                   	push   %ebp
   11033:	89 e5                	mov    %esp,%ebp
   11035:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11038:	e8 57 15 00 00       	call   12594 <idt_enter_protection>
   1103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   11040:	8b 45 08             	mov    0x8(%ebp),%eax
   11043:	83 c0 40             	add    $0x40,%eax
   11046:	83 ec 08             	sub    $0x8,%esp
   11049:	50                   	push   %eax
   1104a:	68 10 80 01 00       	push   $0x18010
   1104f:	e8 a5 28 00 00       	call   138f9 <list_insert_last>
   11054:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   11057:	83 ec 0c             	sub    $0xc,%esp
   1105a:	ff 75 08             	push   0x8(%ebp)
   1105d:	e8 54 03 00 00       	call   113b6 <task_set_ready>
   11062:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   11065:	83 ec 0c             	sub    $0xc,%esp
   11068:	ff 75 f4             	push   -0xc(%ebp)
   1106b:	e8 3c 15 00 00       	call   125ac <idt_leave_protection>
   11070:	83 c4 10             	add    $0x10,%esp
}
   11073:	90                   	nop
   11074:	c9                   	leave  
   11075:	c3                   	ret    

00011076 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   11076:	55                   	push   %ebp
   11077:	89 e5                	mov    %esp,%ebp
   11079:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1107c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11080:	75 1c                	jne    1109e <task_init+0x28>
   11082:	68 65 3f 01 00       	push   $0x13f65
   11087:	68 dc 3f 01 00       	push   $0x13fdc
   1108c:	68 9d 00 00 00       	push   $0x9d
   11091:	68 78 3f 01 00       	push   $0x13f78
   11096:	e8 13 1f 00 00       	call   12fae <pannic>
   1109b:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   1109e:	ff 75 18             	push   0x18(%ebp)
   110a1:	ff 75 14             	push   0x14(%ebp)
   110a4:	ff 75 10             	push   0x10(%ebp)
   110a7:	ff 75 08             	push   0x8(%ebp)
   110aa:	e8 11 fe ff ff       	call   10ec0 <tss_init>
   110af:	83 c4 10             	add    $0x10,%esp
   110b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   110b5:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   110b9:	75 08                	jne    110c3 <task_init+0x4d>
        return err;
   110bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110be:	e9 8e 00 00 00       	jmp    11151 <task_init+0xdb>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   110c3:	8b 45 08             	mov    0x8(%ebp),%eax
   110c6:	83 c0 18             	add    $0x18,%eax
   110c9:	83 ec 04             	sub    $0x4,%esp
   110cc:	6a 20                	push   $0x20
   110ce:	ff 75 0c             	push   0xc(%ebp)
   110d1:	50                   	push   %eax
   110d2:	e8 9a 22 00 00       	call   13371 <kernel_strncpy>
   110d7:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   110da:	8b 45 08             	mov    0x8(%ebp),%eax
   110dd:	83 c0 38             	add    $0x38,%eax
   110e0:	83 ec 0c             	sub    $0xc,%esp
   110e3:	50                   	push   %eax
   110e4:	e8 f2 fb ff ff       	call   10cdb <list_node_init>
   110e9:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   110ec:	8b 45 08             	mov    0x8(%ebp),%eax
   110ef:	83 c0 40             	add    $0x40,%eax
   110f2:	83 ec 0c             	sub    $0xc,%esp
   110f5:	50                   	push   %eax
   110f6:	e8 e0 fb ff ff       	call   10cdb <list_node_init>
   110fb:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   110fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11101:	83 c0 48             	add    $0x48,%eax
   11104:	83 ec 0c             	sub    $0xc,%esp
   11107:	50                   	push   %eax
   11108:	e8 ce fb ff ff       	call   10cdb <list_node_init>
   1110d:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   11110:	8b 45 08             	mov    0x8(%ebp),%eax
   11113:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   11119:	8b 45 08             	mov    0x8(%ebp),%eax
   1111c:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
   11123:	8b 45 08             	mov    0x8(%ebp),%eax
   11126:	8b 50 10             	mov    0x10(%eax),%edx
   11129:	8b 45 08             	mov    0x8(%ebp),%eax
   1112c:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep = 0;
   1112f:	8b 45 08             	mov    0x8(%ebp),%eax
   11132:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    task->pid = (uint32_t)task;
   11139:	8b 55 08             	mov    0x8(%ebp),%edx
   1113c:	8b 45 08             	mov    0x8(%ebp),%eax
   1113f:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   11142:	8b 45 08             	mov    0x8(%ebp),%eax
   11145:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   

    return 1;
   1114c:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11151:	c9                   	leave  
   11152:	c3                   	ret    

00011153 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   11153:	55                   	push   %ebp
   11154:	89 e5                	mov    %esp,%ebp
   11156:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   11159:	8b 45 08             	mov    0x8(%ebp),%eax
   1115c:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   11162:	85 c0                	test   %eax,%eax
   11164:	74 18                	je     1117e <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11166:	8b 45 08             	mov    0x8(%ebp),%eax
   11169:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   1116f:	0f b7 c0             	movzwl %ax,%eax
   11172:	83 ec 0c             	sub    $0xc,%esp
   11175:	50                   	push   %eax
   11176:	e8 63 0a 00 00       	call   11bde <gdt_free>
   1117b:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   1117e:	8b 45 08             	mov    0x8(%ebp),%eax
   11181:	8b 40 54             	mov    0x54(%eax),%eax
   11184:	85 c0                	test   %eax,%eax
   11186:	74 17                	je     1119f <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   11188:	8b 45 08             	mov    0x8(%ebp),%eax
   1118b:	8b 40 54             	mov    0x54(%eax),%eax
   1118e:	2d 00 10 00 00       	sub    $0x1000,%eax
   11193:	83 ec 0c             	sub    $0xc,%esp
   11196:	50                   	push   %eax
   11197:	e8 a6 fa ff ff       	call   10c42 <memory_free_page>
   1119c:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   1119f:	8b 45 08             	mov    0x8(%ebp),%eax
   111a2:	8b 40 6c             	mov    0x6c(%eax),%eax
   111a5:	85 c0                	test   %eax,%eax
   111a7:	74 12                	je     111bb <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   111a9:	8b 45 08             	mov    0x8(%ebp),%eax
   111ac:	8b 40 6c             	mov    0x6c(%eax),%eax
   111af:	83 ec 0c             	sub    $0xc,%esp
   111b2:	50                   	push   %eax
   111b3:	e8 90 f7 ff ff       	call   10948 <memory_destroy_uvm>
   111b8:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   111bb:	83 ec 04             	sub    $0x4,%esp
   111be:	68 bc 00 00 00       	push   $0xbc
   111c3:	6a 00                	push   $0x0
   111c5:	ff 75 08             	push   0x8(%ebp)
   111c8:	e8 e3 22 00 00       	call   134b0 <kernel_memset>
   111cd:	83 c4 10             	add    $0x10,%esp
}
   111d0:	90                   	nop
   111d1:	c9                   	leave  
   111d2:	c3                   	ret    

000111d3 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   111d3:	55                   	push   %ebp
   111d4:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   111d6:	e8 56 fc ff ff       	call   10e31 <hlt>
   111db:	eb f9                	jmp    111d6 <empty_task+0x3>

000111dd <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   111dd:	55                   	push   %ebp
   111de:	89 e5                	mov    %esp,%ebp
   111e0:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   111e3:	e8 81 09 00 00       	call   11b69 <gdt_alloc_desc>
   111e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   111eb:	e8 79 09 00 00       	call   11b69 <gdt_alloc_desc>
   111f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   111f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111f6:	0f b7 c0             	movzwl %ax,%eax
   111f9:	68 f2 40 00 00       	push   $0x40f2
   111fe:	6a ff                	push   $0xffffffff
   11200:	6a 00                	push   $0x0
   11202:	50                   	push   %eax
   11203:	e8 ef 07 00 00       	call   119f7 <segment_desc_set>
   11208:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   1120b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1120e:	0f b7 c0             	movzwl %ax,%eax
   11211:	68 fa 40 00 00       	push   $0x40fa
   11216:	6a ff                	push   $0xffffffff
   11218:	6a 00                	push   $0x0
   1121a:	50                   	push   %eax
   1121b:	e8 d7 07 00 00       	call   119f7 <segment_desc_set>
   11220:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   11223:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11226:	a3 a0 81 01 00       	mov    %eax,0x181a0
    task_manager.app_data_selector = data_selector;
   1122b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1122e:	a3 a4 81 01 00       	mov    %eax,0x181a4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   11233:	83 ec 0c             	sub    $0xc,%esp
   11236:	68 04 80 01 00       	push   $0x18004
   1123b:	e8 05 fb ff ff       	call   10d45 <list_init>
   11240:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11243:	83 ec 0c             	sub    $0xc,%esp
   11246:	68 10 80 01 00       	push   $0x18010
   1124b:	e8 f5 fa ff ff       	call   10d45 <list_init>
   11250:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11253:	83 ec 0c             	sub    $0xc,%esp
   11256:	68 1c 80 01 00       	push   $0x1801c
   1125b:	e8 e5 fa ff ff       	call   10d45 <list_init>
   11260:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   11263:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   1126a:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1126d:	ba e0 e1 01 00       	mov    $0x1e1e0,%edx
   11272:	b8 d3 11 01 00       	mov    $0x111d3,%eax
   11277:	83 ec 0c             	sub    $0xc,%esp
   1127a:	6a 01                	push   $0x1
   1127c:	52                   	push   %edx
   1127d:	50                   	push   %eax
   1127e:	68 ad 3f 01 00       	push   $0x13fad
   11283:	68 e4 80 01 00       	push   $0x180e4
   11288:	e8 e9 fd ff ff       	call   11076 <task_init>
   1128d:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   11290:	83 ec 04             	sub    $0x4,%esp
   11293:	68 00 5e 00 00       	push   $0x5e00
   11298:	6a 00                	push   $0x0
   1129a:	68 c0 81 01 00       	push   $0x181c0
   1129f:	e8 0c 22 00 00       	call   134b0 <kernel_memset>
   112a4:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   112a7:	83 ec 0c             	sub    $0xc,%esp
   112aa:	68 c0 df 01 00       	push   $0x1dfc0
   112af:	e8 e5 15 00 00       	call   12899 <mutex_init>
   112b4:	83 c4 10             	add    $0x10,%esp
  
}
   112b7:	90                   	nop
   112b8:	c9                   	leave  
   112b9:	c3                   	ret    

000112ba <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   112ba:	55                   	push   %ebp
   112bb:	89 e5                	mov    %esp,%ebp
   112bd:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   112c0:	b8 1a 32 03 00       	mov    $0x3321a,%eax
   112c5:	2d 00 30 03 00       	sub    $0x33000,%eax
   112ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   112cd:	68 00 10 00 00       	push   $0x1000
   112d2:	ff 75 f4             	push   -0xc(%ebp)
   112d5:	e8 40 fb ff ff       	call   10e1a <up2>
   112da:	83 c4 08             	add    $0x8,%esp
   112dd:	05 00 a0 00 00       	add    $0xa000,%eax
   112e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   112e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   112eb:	72 1c                	jb     11309 <task_first_init+0x4f>
   112ed:	68 b8 3f 01 00       	push   $0x13fb8
   112f2:	68 04 40 01 00       	push   $0x14004
   112f7:	68 32 01 00 00       	push   $0x132
   112fc:	68 78 3f 01 00       	push   $0x13f78
   11301:	e8 a8 1c 00 00       	call   12fae <pannic>
   11306:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   11309:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   11310:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11313:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11316:	01 d0                	add    %edx,%eax
   11318:	83 ec 0c             	sub    $0xc,%esp
   1131b:	6a 00                	push   $0x0
   1131d:	50                   	push   %eax
   1131e:	ff 75 ec             	push   -0x14(%ebp)
   11321:	68 cf 3f 01 00       	push   $0x13fcf
   11326:	68 28 80 01 00       	push   $0x18028
   1132b:	e8 46 fd ff ff       	call   11076 <task_init>
   11330:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   11333:	a1 e0 80 01 00       	mov    0x180e0,%eax
   11338:	0f b7 c0             	movzwl %ax,%eax
   1133b:	83 ec 0c             	sub    $0xc,%esp
   1133e:	50                   	push   %eax
   1133f:	e8 1a fb ff ff       	call   10e5e <write_tr>
   11344:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   11347:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   1134e:	80 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11351:	a1 94 80 01 00       	mov    0x18094,%eax
   11356:	83 ec 0c             	sub    $0xc,%esp
   11359:	50                   	push   %eax
   1135a:	e8 16 fb ff ff       	call   10e75 <mmu_set_page_dir>
   1135f:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   11362:	a1 00 80 01 00       	mov    0x18000,%eax
   11367:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   1136d:	83 ec 04             	sub    $0x4,%esp
   11370:	6a 07                	push   $0x7
   11372:	ff 75 f0             	push   -0x10(%ebp)
   11375:	ff 75 ec             	push   -0x14(%ebp)
   11378:	e8 73 f8 ff ff       	call   10bf0 <memory_alloc_page_for>
   1137d:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   11380:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11383:	83 ec 04             	sub    $0x4,%esp
   11386:	50                   	push   %eax
   11387:	68 00 30 03 00       	push   $0x33000
   1138c:	68 00 00 00 80       	push   $0x80000000
   11391:	e8 cb 20 00 00       	call   13461 <kernel_memcpy>
   11396:	83 c4 10             	add    $0x10,%esp

    //10.将任务设为可被调度
    task_start(&task_manager.first_task);
   11399:	83 ec 0c             	sub    $0xc,%esp
   1139c:	68 28 80 01 00       	push   $0x18028
   113a1:	e8 8c fc ff ff       	call   11032 <task_start>
   113a6:	83 c4 10             	add    $0x10,%esp
}
   113a9:	90                   	nop
   113aa:	c9                   	leave  
   113ab:	c3                   	ret    

000113ac <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   113ac:	55                   	push   %ebp
   113ad:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   113af:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   113b4:	5d                   	pop    %ebp
   113b5:	c3                   	ret    

000113b6 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   113b6:	55                   	push   %ebp
   113b7:	89 e5                	mov    %esp,%ebp
   113b9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   113bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113c0:	75 1c                	jne    113de <task_set_ready+0x28>
   113c2:	68 65 3f 01 00       	push   $0x13f65
   113c7:	68 14 40 01 00       	push   $0x14014
   113cc:	68 5f 01 00 00       	push   $0x15f
   113d1:	68 78 3f 01 00       	push   $0x13f78
   113d6:	e8 d3 1b 00 00       	call   12fae <pannic>
   113db:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   113de:	8b 45 08             	mov    0x8(%ebp),%eax
   113e1:	83 c0 38             	add    $0x38,%eax
   113e4:	83 ec 08             	sub    $0x8,%esp
   113e7:	50                   	push   %eax
   113e8:	68 04 80 01 00       	push   $0x18004
   113ed:	e8 07 25 00 00       	call   138f9 <list_insert_last>
   113f2:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   113f5:	8b 45 08             	mov    0x8(%ebp),%eax
   113f8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   113fe:	90                   	nop
   113ff:	c9                   	leave  
   11400:	c3                   	ret    

00011401 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11401:	55                   	push   %ebp
   11402:	89 e5                	mov    %esp,%ebp
   11404:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11407:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1140b:	75 1c                	jne    11429 <task_set_unready+0x28>
   1140d:	68 65 3f 01 00       	push   $0x13f65
   11412:	68 24 40 01 00       	push   $0x14024
   11417:	68 6e 01 00 00       	push   $0x16e
   1141c:	68 78 3f 01 00       	push   $0x13f78
   11421:	e8 88 1b 00 00       	call   12fae <pannic>
   11426:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   11429:	8b 45 08             	mov    0x8(%ebp),%eax
   1142c:	83 c0 38             	add    $0x38,%eax
   1142f:	83 ec 08             	sub    $0x8,%esp
   11432:	50                   	push   %eax
   11433:	68 04 80 01 00       	push   $0x18004
   11438:	e8 b1 26 00 00       	call   13aee <list_remove>
   1143d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11440:	8b 45 08             	mov    0x8(%ebp),%eax
   11443:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11449:	90                   	nop
   1144a:	c9                   	leave  
   1144b:	c3                   	ret    

0001144c <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   1144c:	55                   	push   %ebp
   1144d:	89 e5                	mov    %esp,%ebp
   1144f:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11452:	83 ec 0c             	sub    $0xc,%esp
   11455:	68 04 80 01 00       	push   $0x18004
   1145a:	e8 8f f9 ff ff       	call   10dee <list_get_first>
   1145f:	83 c4 10             	add    $0x10,%esp
   11462:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   11465:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11469:	74 08                	je     11473 <task_ready_first+0x27>
   1146b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1146e:	83 e8 38             	sub    $0x38,%eax
   11471:	eb 05                	jmp    11478 <task_ready_first+0x2c>
   11473:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11478:	c9                   	leave  
   11479:	c3                   	ret    

0001147a <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   1147a:	55                   	push   %ebp
   1147b:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1147d:	a1 00 80 01 00       	mov    0x18000,%eax
}
   11482:	5d                   	pop    %ebp
   11483:	c3                   	ret    

00011484 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   11484:	55                   	push   %ebp
   11485:	89 e5                	mov    %esp,%ebp
   11487:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   1148a:	e8 05 11 00 00       	call   12594 <idt_enter_protection>
   1148f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   11492:	e8 b5 ff ff ff       	call   1144c <task_ready_first>
   11497:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   1149a:	a1 00 80 01 00       	mov    0x18000,%eax
   1149f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   114a2:	74 37                	je     114db <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   114a4:	a1 00 80 01 00       	mov    0x18000,%eax
   114a9:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   114ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   114b0:	75 07                	jne    114b9 <task_switch+0x35>
            to = &task_manager.empty_task;
   114b2:	c7 45 f4 e4 80 01 00 	movl   $0x180e4,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   114b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114bc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   114c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114c5:	a3 00 80 01 00       	mov    %eax,0x18000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   114ca:	83 ec 08             	sub    $0x8,%esp
   114cd:	ff 75 f4             	push   -0xc(%ebp)
   114d0:	ff 75 ec             	push   -0x14(%ebp)
   114d3:	e8 cd f9 ff ff       	call   10ea5 <task_switch_from_to>
   114d8:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   114db:	83 ec 0c             	sub    $0xc,%esp
   114de:	ff 75 f0             	push   -0x10(%ebp)
   114e1:	e8 c6 10 00 00       	call   125ac <idt_leave_protection>
   114e6:	83 c4 10             	add    $0x10,%esp
}
   114e9:	90                   	nop
   114ea:	c9                   	leave  
   114eb:	c3                   	ret    

000114ec <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   114ec:	55                   	push   %ebp
   114ed:	89 e5                	mov    %esp,%ebp
   114ef:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   114f2:	83 ec 0c             	sub    $0xc,%esp
   114f5:	68 1c 80 01 00       	push   $0x1801c
   114fa:	e8 ef f8 ff ff       	call   10dee <list_get_first>
   114ff:	83 c4 10             	add    $0x10,%esp
   11502:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   11505:	eb 62                	jmp    11569 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11507:	83 ec 0c             	sub    $0xc,%esp
   1150a:	ff 75 f4             	push   -0xc(%ebp)
   1150d:	e8 06 f8 ff ff       	call   10d18 <list_node_next>
   11512:	83 c4 10             	add    $0x10,%esp
   11515:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   11518:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1151c:	74 08                	je     11526 <task_slice_end+0x3a>
   1151e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11521:	83 e8 38             	sub    $0x38,%eax
   11524:	eb 05                	jmp    1152b <task_slice_end+0x3f>
   11526:	b8 00 00 00 00       	mov    $0x0,%eax
   1152b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   1152e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11531:	8b 40 14             	mov    0x14(%eax),%eax
   11534:	8d 50 ff             	lea    -0x1(%eax),%edx
   11537:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1153a:	89 50 14             	mov    %edx,0x14(%eax)
   1153d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11540:	8b 40 14             	mov    0x14(%eax),%eax
   11543:	85 c0                	test   %eax,%eax
   11545:	75 1c                	jne    11563 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11547:	83 ec 0c             	sub    $0xc,%esp
   1154a:	ff 75 e8             	push   -0x18(%ebp)
   1154d:	e8 01 01 00 00       	call   11653 <task_set_wakeup>
   11552:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11555:	83 ec 0c             	sub    $0xc,%esp
   11558:	ff 75 e8             	push   -0x18(%ebp)
   1155b:	e8 56 fe ff ff       	call   113b6 <task_set_ready>
   11560:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   11563:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11566:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11569:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1156d:	75 98                	jne    11507 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   1156f:	e8 06 ff ff ff       	call   1147a <task_current>
   11574:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   11577:	81 7d f0 e4 80 01 00 	cmpl   $0x180e4,-0x10(%ebp)
   1157e:	75 23                	jne    115a3 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11580:	83 ec 0c             	sub    $0xc,%esp
   11583:	68 04 80 01 00       	push   $0x18004
   11588:	e8 ff f7 ff ff       	call   10d8c <list_is_empty>
   1158d:	83 c4 10             	add    $0x10,%esp
   11590:	85 c0                	test   %eax,%eax
   11592:	75 60                	jne    115f4 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   11594:	c7 05 e4 80 01 00 00 	movl   $0x0,0x180e4
   1159b:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   1159e:	e8 e1 fe ff ff       	call   11484 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   115a3:	81 7d f0 e4 80 01 00 	cmpl   $0x180e4,-0x10(%ebp)
   115aa:	74 49                	je     115f5 <task_slice_end+0x109>
   115ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115af:	8b 40 10             	mov    0x10(%eax),%eax
   115b2:	8d 50 ff             	lea    -0x1(%eax),%edx
   115b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115b8:	89 50 10             	mov    %edx,0x10(%eax)
   115bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115be:	8b 40 10             	mov    0x10(%eax),%eax
   115c1:	85 c0                	test   %eax,%eax
   115c3:	75 30                	jne    115f5 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   115c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115c8:	8b 50 0c             	mov    0xc(%eax),%edx
   115cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115ce:	89 50 10             	mov    %edx,0x10(%eax)
        task_set_unready(curr_task);
   115d1:	83 ec 0c             	sub    $0xc,%esp
   115d4:	ff 75 f0             	push   -0x10(%ebp)
   115d7:	e8 25 fe ff ff       	call   11401 <task_set_unready>
   115dc:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   115df:	83 ec 0c             	sub    $0xc,%esp
   115e2:	ff 75 f0             	push   -0x10(%ebp)
   115e5:	e8 cc fd ff ff       	call   113b6 <task_set_ready>
   115ea:	83 c4 10             	add    $0x10,%esp
        task_switch();
   115ed:	e8 92 fe ff ff       	call   11484 <task_switch>
   115f2:	eb 01                	jmp    115f5 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   115f4:	90                   	nop
    }
}
   115f5:	c9                   	leave  
   115f6:	c3                   	ret    

000115f7 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   115f7:	55                   	push   %ebp
   115f8:	89 e5                	mov    %esp,%ebp
   115fa:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   115fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11601:	75 1c                	jne    1161f <task_set_sleep+0x28>
   11603:	68 65 3f 01 00       	push   $0x13f65
   11608:	68 68 40 01 00       	push   $0x14068
   1160d:	68 e3 01 00 00       	push   $0x1e3
   11612:	68 78 3f 01 00       	push   $0x13f78
   11617:	e8 92 19 00 00       	call   12fae <pannic>
   1161c:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   1161f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11623:	74 2b                	je     11650 <task_set_sleep+0x59>

    task->sleep = slice;
   11625:	8b 55 0c             	mov    0xc(%ebp),%edx
   11628:	8b 45 08             	mov    0x8(%ebp),%eax
   1162b:	89 50 14             	mov    %edx,0x14(%eax)
    task->state = TASK_SLEEP;
   1162e:	8b 45 08             	mov    0x8(%ebp),%eax
   11631:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11637:	8b 45 08             	mov    0x8(%ebp),%eax
   1163a:	83 c0 38             	add    $0x38,%eax
   1163d:	83 ec 08             	sub    $0x8,%esp
   11640:	50                   	push   %eax
   11641:	68 1c 80 01 00       	push   $0x1801c
   11646:	e8 ae 22 00 00       	call   138f9 <list_insert_last>
   1164b:	83 c4 10             	add    $0x10,%esp
   1164e:	eb 01                	jmp    11651 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11650:	90                   	nop
}
   11651:	c9                   	leave  
   11652:	c3                   	ret    

00011653 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11653:	55                   	push   %ebp
   11654:	89 e5                	mov    %esp,%ebp
   11656:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11659:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1165d:	75 1c                	jne    1167b <task_set_wakeup+0x28>
   1165f:	68 65 3f 01 00       	push   $0x13f65
   11664:	68 78 40 01 00       	push   $0x14078
   11669:	68 f1 01 00 00       	push   $0x1f1
   1166e:	68 78 3f 01 00       	push   $0x13f78
   11673:	e8 36 19 00 00       	call   12fae <pannic>
   11678:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   1167b:	8b 45 08             	mov    0x8(%ebp),%eax
   1167e:	83 c0 38             	add    $0x38,%eax
   11681:	83 ec 08             	sub    $0x8,%esp
   11684:	50                   	push   %eax
   11685:	68 1c 80 01 00       	push   $0x1801c
   1168a:	e8 5f 24 00 00       	call   13aee <list_remove>
   1168f:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11692:	8b 45 08             	mov    0x8(%ebp),%eax
   11695:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1169b:	90                   	nop
   1169c:	c9                   	leave  
   1169d:	c3                   	ret    

0001169e <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   1169e:	55                   	push   %ebp
   1169f:	89 e5                	mov    %esp,%ebp
   116a1:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   116a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   116ab:	83 ec 0c             	sub    $0xc,%esp
   116ae:	68 c0 df 01 00       	push   $0x1dfc0
   116b3:	e8 2e 12 00 00       	call   128e6 <mutex_lock>
   116b8:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   116bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   116c2:	eb 27                	jmp    116eb <alloc_task+0x4d>
        task_t *curr = task_table + i;
   116c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c7:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   116cd:	05 c0 81 01 00       	add    $0x181c0,%eax
   116d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   116d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   116d8:	8b 40 08             	mov    0x8(%eax),%eax
   116db:	85 c0                	test   %eax,%eax
   116dd:	75 08                	jne    116e7 <alloc_task+0x49>
            task = curr;
   116df:	8b 45 ec             	mov    -0x14(%ebp),%eax
   116e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   116e5:	eb 0a                	jmp    116f1 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   116e7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   116eb:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   116ef:	7e d3                	jle    116c4 <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   116f1:	83 ec 0c             	sub    $0xc,%esp
   116f4:	68 c0 df 01 00       	push   $0x1dfc0
   116f9:	e8 79 12 00 00       	call   12977 <mutex_unlock>
   116fe:	83 c4 10             	add    $0x10,%esp

    return task;
   11701:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11704:	c9                   	leave  
   11705:	c3                   	ret    

00011706 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   11706:	55                   	push   %ebp
   11707:	89 e5                	mov    %esp,%ebp
   11709:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   1170c:	83 ec 0c             	sub    $0xc,%esp
   1170f:	68 c0 df 01 00       	push   $0x1dfc0
   11714:	e8 cd 11 00 00       	call   128e6 <mutex_lock>
   11719:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   1171c:	8b 45 08             	mov    0x8(%ebp),%eax
   1171f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   11726:	83 ec 0c             	sub    $0xc,%esp
   11729:	68 c0 df 01 00       	push   $0x1dfc0
   1172e:	e8 44 12 00 00       	call   12977 <mutex_unlock>
   11733:	83 c4 10             	add    $0x10,%esp
}
   11736:	90                   	nop
   11737:	c9                   	leave  
   11738:	c3                   	ret    

00011739 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11739:	55                   	push   %ebp
   1173a:	89 e5                	mov    %esp,%ebp
   1173c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1173f:	e8 50 0e 00 00       	call   12594 <idt_enter_protection>
   11744:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11747:	e8 2e fd ff ff       	call   1147a <task_current>
   1174c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   1174f:	83 ec 0c             	sub    $0xc,%esp
   11752:	ff 75 f0             	push   -0x10(%ebp)
   11755:	e8 a7 fc ff ff       	call   11401 <task_set_unready>
   1175a:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   1175d:	8b 45 08             	mov    0x8(%ebp),%eax
   11760:	83 c0 09             	add    $0x9,%eax
   11763:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11768:	f7 e2                	mul    %edx
   1176a:	89 d0                	mov    %edx,%eax
   1176c:	c1 e8 03             	shr    $0x3,%eax
   1176f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11772:	83 ec 08             	sub    $0x8,%esp
   11775:	ff 75 ec             	push   -0x14(%ebp)
   11778:	ff 75 f0             	push   -0x10(%ebp)
   1177b:	e8 77 fe ff ff       	call   115f7 <task_set_sleep>
   11780:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11783:	e8 fc fc ff ff       	call   11484 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11788:	83 ec 0c             	sub    $0xc,%esp
   1178b:	ff 75 f4             	push   -0xc(%ebp)
   1178e:	e8 19 0e 00 00       	call   125ac <idt_leave_protection>
   11793:	83 c4 10             	add    $0x10,%esp
}
   11796:	90                   	nop
   11797:	c9                   	leave  
   11798:	c3                   	ret    

00011799 <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11799:	55                   	push   %ebp
   1179a:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   1179c:	e8 d9 fc ff ff       	call   1147a <task_current>
   117a1:	8b 40 08             	mov    0x8(%eax),%eax
}
   117a4:	5d                   	pop    %ebp
   117a5:	c3                   	ret    

000117a6 <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   117a6:	55                   	push   %ebp
   117a7:	89 e5                	mov    %esp,%ebp
   117a9:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   117ac:	e8 c9 fc ff ff       	call   1147a <task_current>
   117b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   117b4:	e8 e5 fe ff ff       	call   1169e <alloc_task>
   117b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   117bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   117c0:	0f 84 2b 01 00 00    	je     118f1 <sys_fork+0x14b>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   117c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117c9:	8b 40 54             	mov    0x54(%eax),%eax
   117cc:	83 e8 58             	sub    $0x58,%eax
   117cf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   117d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   117d5:	8b 40 50             	mov    0x50(%eax),%eax
   117d8:	8d 48 14             	lea    0x14(%eax),%ecx
   117db:	8b 45 ec             	mov    -0x14(%ebp),%eax
   117de:	8b 40 34             	mov    0x34(%eax),%eax
   117e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   117e4:	83 c2 18             	add    $0x18,%edx
   117e7:	83 ec 0c             	sub    $0xc,%esp
   117ea:	6a 00                	push   $0x0
   117ec:	51                   	push   %ecx
   117ed:	50                   	push   %eax
   117ee:	52                   	push   %edx
   117ef:	ff 75 f0             	push   -0x10(%ebp)
   117f2:	e8 7f f8 ff ff       	call   11076 <task_init>
   117f7:	83 c4 20             	add    $0x20,%esp
   117fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   117fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11801:	0f 88 ed 00 00 00    	js     118f4 <sys_fork+0x14e>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11807:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1180a:	83 c0 50             	add    $0x50,%eax
   1180d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11813:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   1181a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1181d:	8b 50 24             	mov    0x24(%eax),%edx
   11820:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11823:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11826:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11829:	8b 50 2c             	mov    0x2c(%eax),%edx
   1182c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1182f:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11832:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11835:	8b 50 28             	mov    0x28(%eax),%edx
   11838:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1183b:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   1183e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11841:	8b 50 14             	mov    0x14(%eax),%edx
   11844:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11847:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   1184a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1184d:	8b 50 18             	mov    0x18(%eax),%edx
   11850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11853:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11856:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11859:	8b 10                	mov    (%eax),%edx
   1185b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1185e:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11861:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11864:	8b 50 1c             	mov    0x1c(%eax),%edx
   11867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1186a:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   1186d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11870:	8b 50 38             	mov    0x38(%eax),%edx
   11873:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11876:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11879:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1187c:	8b 50 10             	mov    0x10(%eax),%edx
   1187f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11882:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11885:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11888:	8b 50 0c             	mov    0xc(%eax),%edx
   1188b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1188e:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11891:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11894:	8b 50 08             	mov    0x8(%eax),%edx
   11897:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1189a:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   1189d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   118a0:	8b 50 04             	mov    0x4(%eax),%edx
   118a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118a6:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   118a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   118ac:	8b 50 54             	mov    0x54(%eax),%edx
   118af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118b2:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   118b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   118bb:	89 50 04             	mov    %edx,0x4(%eax)

    //拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   118be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118c1:	8b 50 6c             	mov    0x6c(%eax),%edx
   118c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118c7:	8b 40 1c             	mov    0x1c(%eax),%eax
   118ca:	83 ec 08             	sub    $0x8,%esp
   118cd:	52                   	push   %edx
   118ce:	50                   	push   %eax
   118cf:	e8 e7 ee ff ff       	call   107bb <memory_copy_uvm>
   118d4:	83 c4 10             	add    $0x10,%esp
   118d7:	85 c0                	test   %eax,%eax
   118d9:	78 1c                	js     118f7 <sys_fork+0x151>
        goto fork_failed;

    //子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   118db:	83 ec 0c             	sub    $0xc,%esp
   118de:	ff 75 f0             	push   -0x10(%ebp)
   118e1:	e8 4c f7 ff ff       	call   11032 <task_start>
   118e6:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   118e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118ec:	8b 40 08             	mov    0x8(%eax),%eax
   118ef:	eb 2e                	jmp    1191f <sys_fork+0x179>
        goto fork_failed;
   118f1:	90                   	nop
   118f2:	eb 04                	jmp    118f8 <sys_fork+0x152>
        goto fork_failed;
   118f4:	90                   	nop
   118f5:	eb 01                	jmp    118f8 <sys_fork+0x152>
        goto fork_failed;
   118f7:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   118f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   118fc:	74 1c                	je     1191a <sys_fork+0x174>
        task_uninit(child_task);
   118fe:	83 ec 0c             	sub    $0xc,%esp
   11901:	ff 75 f0             	push   -0x10(%ebp)
   11904:	e8 4a f8 ff ff       	call   11153 <task_uninit>
   11909:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   1190c:	83 ec 0c             	sub    $0xc,%esp
   1190f:	ff 75 f0             	push   -0x10(%ebp)
   11912:	e8 ef fd ff ff       	call   11706 <free_task>
   11917:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   1191a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1191f:	c9                   	leave  
   11920:	c3                   	ret    

00011921 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11921:	55                   	push   %ebp
   11922:	89 e5                	mov    %esp,%ebp
   11924:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11927:	e8 68 0c 00 00       	call   12594 <idt_enter_protection>
   1192c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   1192f:	83 ec 0c             	sub    $0xc,%esp
   11932:	68 04 80 01 00       	push   $0x18004
   11937:	e8 85 f4 ff ff       	call   10dc1 <list_get_size>
   1193c:	83 c4 10             	add    $0x10,%esp
   1193f:	83 f8 01             	cmp    $0x1,%eax
   11942:	7e 29                	jle    1196d <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11944:	e8 31 fb ff ff       	call   1147a <task_current>
   11949:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1194c:	83 ec 0c             	sub    $0xc,%esp
   1194f:	ff 75 f0             	push   -0x10(%ebp)
   11952:	e8 aa fa ff ff       	call   11401 <task_set_unready>
   11957:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1195a:	83 ec 0c             	sub    $0xc,%esp
   1195d:	ff 75 f0             	push   -0x10(%ebp)
   11960:	e8 51 fa ff ff       	call   113b6 <task_set_ready>
   11965:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11968:	e8 17 fb ff ff       	call   11484 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   1196d:	83 ec 0c             	sub    $0xc,%esp
   11970:	ff 75 f4             	push   -0xc(%ebp)
   11973:	e8 34 0c 00 00       	call   125ac <idt_leave_protection>
   11978:	83 c4 10             	add    $0x10,%esp
    return 0;
   1197b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11980:	c9                   	leave  
   11981:	c3                   	ret    

00011982 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   11982:	55                   	push   %ebp
   11983:	89 e5                	mov    %esp,%ebp

   11985:	90                   	nop
   11986:	5d                   	pop    %ebp
   11987:	c3                   	ret    

00011988 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11988:	55                   	push   %ebp
   11989:	89 e5                	mov    %esp,%ebp
   1198b:	83 ec 08             	sub    $0x8,%esp
   1198e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11991:	8b 45 14             	mov    0x14(%ebp),%eax
   11994:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11998:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   1199c:	8b 45 10             	mov    0x10(%ebp),%eax
   1199f:	89 c2                	mov    %eax,%edx
   119a1:	8b 45 08             	mov    0x8(%ebp),%eax
   119a4:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   119a7:	8b 45 10             	mov    0x10(%ebp),%eax
   119aa:	c1 e8 10             	shr    $0x10,%eax
   119ad:	89 c2                	mov    %eax,%edx
   119af:	8b 45 08             	mov    0x8(%ebp),%eax
   119b2:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   119b6:	8b 45 08             	mov    0x8(%ebp),%eax
   119b9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   119bd:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   119c1:	8b 45 08             	mov    0x8(%ebp),%eax
   119c4:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   119c8:	66 89 50 04          	mov    %dx,0x4(%eax)
   119cc:	90                   	nop
   119cd:	c9                   	leave  
   119ce:	c3                   	ret    

000119cf <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   119cf:	55                   	push   %ebp
   119d0:	89 e5                	mov    %esp,%ebp
   119d2:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   119d5:	8b 45 08             	mov    0x8(%ebp),%eax
   119d8:	c1 e8 10             	shr    $0x10,%eax
   119db:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   119df:	8b 45 08             	mov    0x8(%ebp),%eax
   119e2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   119e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   119e9:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   119ec:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   119f0:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   119f4:	90                   	nop
   119f5:	c9                   	leave  
   119f6:	c3                   	ret    

000119f7 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   119f7:	55                   	push   %ebp
   119f8:	89 e5                	mov    %esp,%ebp
   119fa:	83 ec 18             	sub    $0x18,%esp
   119fd:	8b 55 08             	mov    0x8(%ebp),%edx
   11a00:	8b 45 14             	mov    0x14(%ebp),%eax
   11a03:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11a07:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11a0b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11a0f:	66 c1 e8 03          	shr    $0x3,%ax
   11a13:	0f b7 c0             	movzwl %ax,%eax
   11a16:	c1 e0 03             	shl    $0x3,%eax
   11a19:	05 e0 e1 01 00       	add    $0x1e1e0,%eax
   11a1e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   11a21:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a24:	89 c2                	mov    %eax,%edx
   11a26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a29:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   11a2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a30:	c1 e8 10             	shr    $0x10,%eax
   11a33:	89 c2                	mov    %eax,%edx
   11a35:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a38:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   11a3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a3e:	c1 e8 18             	shr    $0x18,%eax
   11a41:	89 c2                	mov    %eax,%edx
   11a43:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a46:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   11a49:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11a50:	76 1d                	jbe    11a6f <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   11a52:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a55:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11a59:	66 0d 00 80          	or     $0x8000,%ax
   11a5d:	89 c2                	mov    %eax,%edx
   11a5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a62:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   11a66:	8b 45 10             	mov    0x10(%ebp),%eax
   11a69:	c1 e8 0c             	shr    $0xc,%eax
   11a6c:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   11a6f:	8b 45 10             	mov    0x10(%ebp),%eax
   11a72:	89 c2                	mov    %eax,%edx
   11a74:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a77:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   11a7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a7d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11a81:	89 c2                	mov    %eax,%edx
   11a83:	8b 45 10             	mov    0x10(%ebp),%eax
   11a86:	c1 e8 08             	shr    $0x8,%eax
   11a89:	66 25 00 0f          	and    $0xf00,%ax
   11a8d:	09 d0                	or     %edx,%eax
   11a8f:	89 c2                	mov    %eax,%edx
   11a91:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a94:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   11a98:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a9b:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11a9f:	89 c2                	mov    %eax,%edx
   11aa1:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   11aa5:	80 e4 f0             	and    $0xf0,%ah
   11aa8:	09 d0                	or     %edx,%eax
   11aaa:	89 c2                	mov    %eax,%edx
   11aac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11aaf:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11ab3:	90                   	nop
   11ab4:	c9                   	leave  
   11ab5:	c3                   	ret    

00011ab6 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11ab6:	55                   	push   %ebp
   11ab7:	89 e5                	mov    %esp,%ebp
   11ab9:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11abc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ac3:	eb 1c                	jmp    11ae1 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11ac5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ac8:	c1 e0 03             	shl    $0x3,%eax
   11acb:	0f b7 c0             	movzwl %ax,%eax
   11ace:	6a 00                	push   $0x0
   11ad0:	6a 00                	push   $0x0
   11ad2:	6a 00                	push   $0x0
   11ad4:	50                   	push   %eax
   11ad5:	e8 1d ff ff ff       	call   119f7 <segment_desc_set>
   11ada:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11add:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ae1:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11ae8:	7e db                	jle    11ac5 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11aea:	68 92 40 00 00       	push   $0x4092
   11aef:	6a ff                	push   $0xffffffff
   11af1:	6a 00                	push   $0x0
   11af3:	6a 10                	push   $0x10
   11af5:	e8 fd fe ff ff       	call   119f7 <segment_desc_set>
   11afa:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   11afd:	c6 05 e2 e1 02 00 01 	movb   $0x1,0x2e1e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   11b04:	68 9a 40 00 00       	push   $0x409a
   11b09:	6a ff                	push   $0xffffffff
   11b0b:	6a 00                	push   $0x0
   11b0d:	6a 08                	push   $0x8
   11b0f:	e8 e3 fe ff ff       	call   119f7 <segment_desc_set>
   11b14:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   11b17:	c6 05 e1 e1 02 00 01 	movb   $0x1,0x2e1e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL && DPL >= RPL, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   11b1e:	ba ad 02 01 00       	mov    $0x102ad,%edx
   11b23:	b8 f8 e1 01 00       	mov    $0x1e1f8,%eax
   11b28:	68 05 ec 00 00       	push   $0xec05
   11b2d:	52                   	push   %edx
   11b2e:	6a 08                	push   $0x8
   11b30:	50                   	push   %eax
   11b31:	e8 52 fe ff ff       	call   11988 <gate_desc_set>
   11b36:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   11b39:	c6 05 e3 e1 02 00 01 	movb   $0x1,0x2e1e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11b40:	b8 e0 e1 01 00       	mov    $0x1e1e0,%eax
   11b45:	83 ec 08             	sub    $0x8,%esp
   11b48:	68 00 00 01 00       	push   $0x10000
   11b4d:	50                   	push   %eax
   11b4e:	e8 7c fe ff ff       	call   119cf <lgdt>
   11b53:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   11b56:	83 ec 0c             	sub    $0xc,%esp
   11b59:	68 e0 01 03 00       	push   $0x301e0
   11b5e:	e8 36 0d 00 00       	call   12899 <mutex_init>
   11b63:	83 c4 10             	add    $0x10,%esp
}
   11b66:	90                   	nop
   11b67:	c9                   	leave  
   11b68:	c3                   	ret    

00011b69 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   11b69:	55                   	push   %ebp
   11b6a:	89 e5                	mov    %esp,%ebp
   11b6c:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   11b6f:	83 ec 0c             	sub    $0xc,%esp
   11b72:	68 e0 01 03 00       	push   $0x301e0
   11b77:	e8 6a 0d 00 00       	call   128e6 <mutex_lock>
   11b7c:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11b7f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11b86:	eb 36                	jmp    11bbe <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   11b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b8b:	05 e0 e1 02 00       	add    $0x2e1e0,%eax
   11b90:	0f b6 00             	movzbl (%eax),%eax
   11b93:	84 c0                	test   %al,%al
   11b95:	75 23                	jne    11bba <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   11b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b9a:	05 e0 e1 02 00       	add    $0x2e1e0,%eax
   11b9f:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   11ba2:	83 ec 0c             	sub    $0xc,%esp
   11ba5:	68 e0 01 03 00       	push   $0x301e0
   11baa:	e8 c8 0d 00 00       	call   12977 <mutex_unlock>
   11baf:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   11bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bb5:	c1 e0 03             	shl    $0x3,%eax
   11bb8:	eb 22                	jmp    11bdc <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11bba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bbe:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11bc5:	7e c1                	jle    11b88 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11bc7:	83 ec 0c             	sub    $0xc,%esp
   11bca:	68 e0 01 03 00       	push   $0x301e0
   11bcf:	e8 a3 0d 00 00       	call   12977 <mutex_unlock>
   11bd4:	83 c4 10             	add    $0x10,%esp
    return -1;
   11bd7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11bdc:	c9                   	leave  
   11bdd:	c3                   	ret    

00011bde <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   11bde:	55                   	push   %ebp
   11bdf:	89 e5                	mov    %esp,%ebp
   11be1:	83 ec 14             	sub    $0x14,%esp
   11be4:	8b 45 08             	mov    0x8(%ebp),%eax
   11be7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   11beb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11bef:	66 c1 e8 03          	shr    $0x3,%ax
   11bf3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   11bf7:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   11bfb:	c6 80 e0 e1 02 00 00 	movb   $0x0,0x2e1e0(%eax)
}
   11c02:	90                   	nop
   11c03:	c9                   	leave  
   11c04:	c3                   	ret    

00011c05 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11c05:	55                   	push   %ebp
   11c06:	89 e5                	mov    %esp,%ebp
   11c08:	fa                   	cli    
   11c09:	90                   	nop
   11c0a:	5d                   	pop    %ebp
   11c0b:	c3                   	ret    

00011c0c <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11c0c:	55                   	push   %ebp
   11c0d:	89 e5                	mov    %esp,%ebp
   11c0f:	fb                   	sti    
   11c10:	90                   	nop
   11c11:	5d                   	pop    %ebp
   11c12:	c3                   	ret    

00011c13 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11c13:	55                   	push   %ebp
   11c14:	89 e5                	mov    %esp,%ebp
   11c16:	f4                   	hlt    
   11c17:	90                   	nop
   11c18:	5d                   	pop    %ebp
   11c19:	c3                   	ret    

00011c1a <inb>:
static inline uint8_t inb(uint16_t port) {
   11c1a:	55                   	push   %ebp
   11c1b:	89 e5                	mov    %esp,%ebp
   11c1d:	83 ec 14             	sub    $0x14,%esp
   11c20:	8b 45 08             	mov    0x8(%ebp),%eax
   11c23:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11c27:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11c2b:	89 c2                	mov    %eax,%edx
   11c2d:	ec                   	in     (%dx),%al
   11c2e:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11c31:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11c35:	c9                   	leave  
   11c36:	c3                   	ret    

00011c37 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11c37:	55                   	push   %ebp
   11c38:	89 e5                	mov    %esp,%ebp
   11c3a:	83 ec 08             	sub    $0x8,%esp
   11c3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c40:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c43:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11c47:	89 d0                	mov    %edx,%eax
   11c49:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11c4c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11c50:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11c54:	ee                   	out    %al,(%dx)
}
   11c55:	90                   	nop
   11c56:	c9                   	leave  
   11c57:	c3                   	ret    

00011c58 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11c58:	55                   	push   %ebp
   11c59:	89 e5                	mov    %esp,%ebp
   11c5b:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   11c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c61:	c1 e8 10             	shr    $0x10,%eax
   11c64:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   11c68:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c72:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11c75:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11c79:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11c7d:	90                   	nop
   11c7e:	c9                   	leave  
   11c7f:	c3                   	ret    

00011c80 <read_cr2>:
static inline uint32_t read_cr2(void) {
   11c80:	55                   	push   %ebp
   11c81:	89 e5                	mov    %esp,%ebp
   11c83:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   11c86:	0f 20 d0             	mov    %cr2,%eax
   11c89:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   11c8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11c8f:	c9                   	leave  
   11c90:	c3                   	ret    

00011c91 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   11c91:	55                   	push   %ebp
   11c92:	89 e5                	mov    %esp,%ebp
   11c94:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11c97:	9c                   	pushf  
   11c98:	58                   	pop    %eax
   11c99:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   11c9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11c9f:	c9                   	leave  
   11ca0:	c3                   	ret    

00011ca1 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   11ca1:	55                   	push   %ebp
   11ca2:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   11ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca7:	50                   	push   %eax
   11ca8:	9d                   	popf   
}
   11ca9:	90                   	nop
   11caa:	5d                   	pop    %ebp
   11cab:	c3                   	ret    

00011cac <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   11cac:	55                   	push   %ebp
   11cad:	89 e5                	mov    %esp,%ebp
   11caf:	57                   	push   %edi
   11cb0:	56                   	push   %esi
   11cb1:	53                   	push   %ebx
   11cb2:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11cb5:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb8:	8b 40 3c             	mov    0x3c(%eax),%eax
   11cbb:	83 e0 03             	and    $0x3,%eax
   11cbe:	85 c0                	test   %eax,%eax
   11cc0:	74 14                	je     11cd6 <print_exception_fram+0x2a>
    ss = frame->ss3;
   11cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc5:	8b 40 48             	mov    0x48(%eax),%eax
   11cc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   11ccb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cce:	8b 40 44             	mov    0x44(%eax),%eax
   11cd1:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11cd4:	eb 12                	jmp    11ce8 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   11cd6:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd9:	8b 40 0c             	mov    0xc(%eax),%eax
   11cdc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   11cdf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce2:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ce5:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   11ce8:	83 ec 0c             	sub    $0xc,%esp
   11ceb:	68 98 40 01 00       	push   $0x14098
   11cf0:	e8 88 1f 00 00       	call   13c7d <log_printf>
   11cf5:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   11cfb:	8b 50 34             	mov    0x34(%eax),%edx
   11cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   11d01:	8b 40 30             	mov    0x30(%eax),%eax
   11d04:	83 ec 04             	sub    $0x4,%esp
   11d07:	52                   	push   %edx
   11d08:	50                   	push   %eax
   11d09:	68 d6 40 01 00       	push   $0x140d6
   11d0e:	e8 6a 1f 00 00       	call   13c7d <log_printf>
   11d13:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   11d16:	8b 45 08             	mov    0x8(%ebp),%eax
   11d19:	8b 30                	mov    (%eax),%esi
   11d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1e:	8b 58 04             	mov    0x4(%eax),%ebx
   11d21:	8b 45 08             	mov    0x8(%ebp),%eax
   11d24:	8b 48 08             	mov    0x8(%eax),%ecx
   11d27:	8b 45 08             	mov    0x8(%ebp),%eax
   11d2a:	8b 50 0c             	mov    0xc(%eax),%edx
   11d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d30:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11d33:	83 ec 04             	sub    $0x4,%esp
   11d36:	56                   	push   %esi
   11d37:	53                   	push   %ebx
   11d38:	51                   	push   %ecx
   11d39:	ff 75 e4             	push   -0x1c(%ebp)
   11d3c:	52                   	push   %edx
   11d3d:	50                   	push   %eax
   11d3e:	68 f0 40 01 00       	push   $0x140f0
   11d43:	e8 35 1f 00 00       	call   13c7d <log_printf>
   11d48:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   11d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4e:	8b 40 18             	mov    0x18(%eax),%eax
   11d51:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   11d54:	8b 45 08             	mov    0x8(%ebp),%eax
   11d57:	8b 78 10             	mov    0x10(%eax),%edi
   11d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5d:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11d60:	8b 45 08             	mov    0x8(%ebp),%eax
   11d63:	8b 58 24             	mov    0x24(%eax),%ebx
   11d66:	8b 45 08             	mov    0x8(%ebp),%eax
   11d69:	8b 48 28             	mov    0x28(%eax),%ecx
   11d6c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6f:	8b 50 20             	mov    0x20(%eax),%edx
   11d72:	8b 45 08             	mov    0x8(%ebp),%eax
   11d75:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11d78:	83 ec 0c             	sub    $0xc,%esp
   11d7b:	ff 75 e0             	push   -0x20(%ebp)
   11d7e:	ff 75 d4             	push   -0x2c(%ebp)
   11d81:	57                   	push   %edi
   11d82:	56                   	push   %esi
   11d83:	53                   	push   %ebx
   11d84:	51                   	push   %ecx
   11d85:	52                   	push   %edx
   11d86:	50                   	push   %eax
   11d87:	68 20 41 01 00       	push   $0x14120
   11d8c:	e8 ec 1e 00 00       	call   13c7d <log_printf>
   11d91:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11d94:	8b 45 08             	mov    0x8(%ebp),%eax
   11d97:	8b 50 40             	mov    0x40(%eax),%edx
   11d9a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d9d:	8b 40 38             	mov    0x38(%eax),%eax
   11da0:	83 ec 04             	sub    $0x4,%esp
   11da3:	52                   	push   %edx
   11da4:	50                   	push   %eax
   11da5:	68 78 41 01 00       	push   $0x14178
   11daa:	e8 ce 1e 00 00       	call   13c7d <log_printf>
   11daf:	83 c4 10             	add    $0x10,%esp
}
   11db2:	90                   	nop
   11db3:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11db6:	5b                   	pop    %ebx
   11db7:	5e                   	pop    %esi
   11db8:	5f                   	pop    %edi
   11db9:	5d                   	pop    %ebp
   11dba:	c3                   	ret    

00011dbb <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11dbb:	55                   	push   %ebp
   11dbc:	89 e5                	mov    %esp,%ebp
   11dbe:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11dc1:	83 ec 0c             	sub    $0xc,%esp
   11dc4:	68 94 41 01 00       	push   $0x14194
   11dc9:	e8 af 1e 00 00       	call   13c7d <log_printf>
   11dce:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11dd1:	83 ec 08             	sub    $0x8,%esp
   11dd4:	ff 75 0c             	push   0xc(%ebp)
   11dd7:	68 c8 41 01 00       	push   $0x141c8
   11ddc:	e8 9c 1e 00 00       	call   13c7d <log_printf>
   11de1:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11de4:	83 ec 0c             	sub    $0xc,%esp
   11de7:	ff 75 08             	push   0x8(%ebp)
   11dea:	e8 bd fe ff ff       	call   11cac <print_exception_fram>
   11def:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11df2:	e8 1c fe ff ff       	call   11c13 <hlt>
   11df7:	eb f9                	jmp    11df2 <do_default_handler+0x37>

00011df9 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11df9:	55                   	push   %ebp
   11dfa:	89 e5                	mov    %esp,%ebp
   11dfc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   11dff:	83 ec 08             	sub    $0x8,%esp
   11e02:	68 e2 41 01 00       	push   $0x141e2
   11e07:	ff 75 08             	push   0x8(%ebp)
   11e0a:	e8 ac ff ff ff       	call   11dbb <do_default_handler>
   11e0f:	83 c4 10             	add    $0x10,%esp
}
   11e12:	90                   	nop
   11e13:	c9                   	leave  
   11e14:	c3                   	ret    

00011e15 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11e15:	55                   	push   %ebp
   11e16:	89 e5                	mov    %esp,%ebp
   11e18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11e1b:	83 ec 08             	sub    $0x8,%esp
   11e1e:	68 f4 41 01 00       	push   $0x141f4
   11e23:	ff 75 08             	push   0x8(%ebp)
   11e26:	e8 90 ff ff ff       	call   11dbb <do_default_handler>
   11e2b:	83 c4 10             	add    $0x10,%esp
}
   11e2e:	90                   	nop
   11e2f:	c9                   	leave  
   11e30:	c3                   	ret    

00011e31 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11e31:	55                   	push   %ebp
   11e32:	89 e5                	mov    %esp,%ebp
   11e34:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11e37:	83 ec 08             	sub    $0x8,%esp
   11e3a:	68 06 42 01 00       	push   $0x14206
   11e3f:	ff 75 08             	push   0x8(%ebp)
   11e42:	e8 74 ff ff ff       	call   11dbb <do_default_handler>
   11e47:	83 c4 10             	add    $0x10,%esp
}
   11e4a:	90                   	nop
   11e4b:	c9                   	leave  
   11e4c:	c3                   	ret    

00011e4d <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11e4d:	55                   	push   %ebp
   11e4e:	89 e5                	mov    %esp,%ebp
   11e50:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   11e53:	83 ec 08             	sub    $0x8,%esp
   11e56:	68 16 42 01 00       	push   $0x14216
   11e5b:	ff 75 08             	push   0x8(%ebp)
   11e5e:	e8 58 ff ff ff       	call   11dbb <do_default_handler>
   11e63:	83 c4 10             	add    $0x10,%esp
}
   11e66:	90                   	nop
   11e67:	c9                   	leave  
   11e68:	c3                   	ret    

00011e69 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11e69:	55                   	push   %ebp
   11e6a:	89 e5                	mov    %esp,%ebp
   11e6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11e6f:	83 ec 08             	sub    $0x8,%esp
   11e72:	68 24 42 01 00       	push   $0x14224
   11e77:	ff 75 08             	push   0x8(%ebp)
   11e7a:	e8 3c ff ff ff       	call   11dbb <do_default_handler>
   11e7f:	83 c4 10             	add    $0x10,%esp
}
   11e82:	90                   	nop
   11e83:	c9                   	leave  
   11e84:	c3                   	ret    

00011e85 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11e85:	55                   	push   %ebp
   11e86:	89 e5                	mov    %esp,%ebp
   11e88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11e8b:	83 ec 08             	sub    $0x8,%esp
   11e8e:	68 39 42 01 00       	push   $0x14239
   11e93:	ff 75 08             	push   0x8(%ebp)
   11e96:	e8 20 ff ff ff       	call   11dbb <do_default_handler>
   11e9b:	83 c4 10             	add    $0x10,%esp
}
   11e9e:	90                   	nop
   11e9f:	c9                   	leave  
   11ea0:	c3                   	ret    

00011ea1 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11ea1:	55                   	push   %ebp
   11ea2:	89 e5                	mov    %esp,%ebp
   11ea4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11ea7:	83 ec 08             	sub    $0x8,%esp
   11eaa:	68 4c 42 01 00       	push   $0x1424c
   11eaf:	ff 75 08             	push   0x8(%ebp)
   11eb2:	e8 04 ff ff ff       	call   11dbb <do_default_handler>
   11eb7:	83 c4 10             	add    $0x10,%esp
}
   11eba:	90                   	nop
   11ebb:	c9                   	leave  
   11ebc:	c3                   	ret    

00011ebd <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   11ebd:	55                   	push   %ebp
   11ebe:	89 e5                	mov    %esp,%ebp
   11ec0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11ec3:	83 ec 08             	sub    $0x8,%esp
   11ec6:	68 62 42 01 00       	push   $0x14262
   11ecb:	ff 75 08             	push   0x8(%ebp)
   11ece:	e8 e8 fe ff ff       	call   11dbb <do_default_handler>
   11ed3:	83 c4 10             	add    $0x10,%esp
}
   11ed6:	90                   	nop
   11ed7:	c9                   	leave  
   11ed8:	c3                   	ret    

00011ed9 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11ed9:	55                   	push   %ebp
   11eda:	89 e5                	mov    %esp,%ebp
   11edc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   11edf:	83 ec 08             	sub    $0x8,%esp
   11ee2:	68 7b 42 01 00       	push   $0x1427b
   11ee7:	ff 75 08             	push   0x8(%ebp)
   11eea:	e8 cc fe ff ff       	call   11dbb <do_default_handler>
   11eef:	83 c4 10             	add    $0x10,%esp
}
   11ef2:	90                   	nop
   11ef3:	c9                   	leave  
   11ef4:	c3                   	ret    

00011ef5 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11ef5:	55                   	push   %ebp
   11ef6:	89 e5                	mov    %esp,%ebp
   11ef8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11efb:	83 ec 08             	sub    $0x8,%esp
   11efe:	68 98 42 01 00       	push   $0x14298
   11f03:	ff 75 08             	push   0x8(%ebp)
   11f06:	e8 b0 fe ff ff       	call   11dbb <do_default_handler>
   11f0b:	83 c4 10             	add    $0x10,%esp
}
   11f0e:	90                   	nop
   11f0f:	c9                   	leave  
   11f10:	c3                   	ret    

00011f11 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11f11:	55                   	push   %ebp
   11f12:	89 e5                	mov    %esp,%ebp
   11f14:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11f17:	83 ec 08             	sub    $0x8,%esp
   11f1a:	68 af 42 01 00       	push   $0x142af
   11f1f:	ff 75 08             	push   0x8(%ebp)
   11f22:	e8 94 fe ff ff       	call   11dbb <do_default_handler>
   11f27:	83 c4 10             	add    $0x10,%esp
}
   11f2a:	90                   	nop
   11f2b:	c9                   	leave  
   11f2c:	c3                   	ret    

00011f2d <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11f2d:	55                   	push   %ebp
   11f2e:	89 e5                	mov    %esp,%ebp
   11f30:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11f33:	83 ec 08             	sub    $0x8,%esp
   11f36:	68 c5 42 01 00       	push   $0x142c5
   11f3b:	ff 75 08             	push   0x8(%ebp)
   11f3e:	e8 78 fe ff ff       	call   11dbb <do_default_handler>
   11f43:	83 c4 10             	add    $0x10,%esp
}
   11f46:	90                   	nop
   11f47:	c9                   	leave  
   11f48:	c3                   	ret    

00011f49 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11f49:	55                   	push   %ebp
   11f4a:	89 e5                	mov    %esp,%ebp
   11f4c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   11f4f:	83 ec 08             	sub    $0x8,%esp
   11f52:	68 e3 42 01 00       	push   $0x142e3
   11f57:	ff 75 08             	push   0x8(%ebp)
   11f5a:	e8 5c fe ff ff       	call   11dbb <do_default_handler>
   11f5f:	83 c4 10             	add    $0x10,%esp
}
   11f62:	90                   	nop
   11f63:	c9                   	leave  
   11f64:	c3                   	ret    

00011f65 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11f65:	55                   	push   %ebp
   11f66:	89 e5                	mov    %esp,%ebp
   11f68:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11f6b:	83 ec 0c             	sub    $0xc,%esp
   11f6e:	68 04 43 01 00       	push   $0x14304
   11f73:	e8 05 1d 00 00       	call   13c7d <log_printf>
   11f78:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11f7b:	83 ec 0c             	sub    $0xc,%esp
   11f7e:	68 28 43 01 00       	push   $0x14328
   11f83:	e8 f5 1c 00 00       	call   13c7d <log_printf>
   11f88:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11f8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8e:	8b 40 34             	mov    0x34(%eax),%eax
   11f91:	83 e0 01             	and    $0x1,%eax
   11f94:	85 c0                	test   %eax,%eax
   11f96:	74 12                	je     11faa <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   11f98:	83 ec 0c             	sub    $0xc,%esp
   11f9b:	68 54 43 01 00       	push   $0x14354
   11fa0:	e8 d8 1c 00 00       	call   13c7d <log_printf>
   11fa5:	83 c4 10             	add    $0x10,%esp
   11fa8:	eb 10                	jmp    11fba <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   11faa:	83 ec 0c             	sub    $0xc,%esp
   11fad:	68 d0 43 01 00       	push   $0x143d0
   11fb2:	e8 c6 1c 00 00       	call   13c7d <log_printf>
   11fb7:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11fba:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbd:	8b 40 34             	mov    0x34(%eax),%eax
   11fc0:	83 e0 02             	and    $0x2,%eax
   11fc3:	85 c0                	test   %eax,%eax
   11fc5:	74 12                	je     11fd9 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11fc7:	83 ec 0c             	sub    $0xc,%esp
   11fca:	68 28 44 01 00       	push   $0x14428
   11fcf:	e8 a9 1c 00 00       	call   13c7d <log_printf>
   11fd4:	83 c4 10             	add    $0x10,%esp
   11fd7:	eb 10                	jmp    11fe9 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11fd9:	83 ec 0c             	sub    $0xc,%esp
   11fdc:	68 74 44 01 00       	push   $0x14474
   11fe1:	e8 97 1c 00 00       	call   13c7d <log_printf>
   11fe6:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fec:	8b 40 34             	mov    0x34(%eax),%eax
   11fef:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11ff4:	83 ec 08             	sub    $0x8,%esp
   11ff7:	50                   	push   %eax
   11ff8:	68 a0 44 01 00       	push   $0x144a0
   11ffd:	e8 7b 1c 00 00       	call   13c7d <log_printf>
   12002:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12005:	83 ec 0c             	sub    $0xc,%esp
   12008:	ff 75 08             	push   0x8(%ebp)
   1200b:	e8 9c fc ff ff       	call   11cac <print_exception_fram>
   12010:	83 c4 10             	add    $0x10,%esp
}
   12013:	90                   	nop
   12014:	c9                   	leave  
   12015:	c3                   	ret    

00012016 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12016:	55                   	push   %ebp
   12017:	89 e5                	mov    %esp,%ebp
   12019:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1201c:	83 ec 0c             	sub    $0xc,%esp
   1201f:	68 04 43 01 00       	push   $0x14304
   12024:	e8 54 1c 00 00       	call   13c7d <log_printf>
   12029:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   1202c:	83 ec 0c             	sub    $0xc,%esp
   1202f:	68 b4 44 01 00       	push   $0x144b4
   12034:	e8 44 1c 00 00       	call   13c7d <log_printf>
   12039:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   1203c:	8b 45 08             	mov    0x8(%ebp),%eax
   1203f:	8b 40 34             	mov    0x34(%eax),%eax
   12042:	83 e0 01             	and    $0x1,%eax
   12045:	85 c0                	test   %eax,%eax
   12047:	74 18                	je     12061 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   12049:	e8 32 fc ff ff       	call   11c80 <read_cr2>
   1204e:	83 ec 08             	sub    $0x8,%esp
   12051:	50                   	push   %eax
   12052:	68 d8 44 01 00       	push   $0x144d8
   12057:	e8 21 1c 00 00       	call   13c7d <log_printf>
   1205c:	83 c4 10             	add    $0x10,%esp
   1205f:	eb 16                	jmp    12077 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   12061:	e8 1a fc ff ff       	call   11c80 <read_cr2>
   12066:	83 ec 08             	sub    $0x8,%esp
   12069:	50                   	push   %eax
   1206a:	68 ff 44 01 00       	push   $0x144ff
   1206f:	e8 09 1c 00 00       	call   13c7d <log_printf>
   12074:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12077:	8b 45 08             	mov    0x8(%ebp),%eax
   1207a:	8b 40 34             	mov    0x34(%eax),%eax
   1207d:	83 e0 02             	and    $0x2,%eax
   12080:	85 c0                	test   %eax,%eax
   12082:	74 12                	je     12096 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   12084:	83 ec 0c             	sub    $0xc,%esp
   12087:	68 1c 45 01 00       	push   $0x1451c
   1208c:	e8 ec 1b 00 00       	call   13c7d <log_printf>
   12091:	83 c4 10             	add    $0x10,%esp
   12094:	eb 10                	jmp    120a6 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   12096:	83 ec 0c             	sub    $0xc,%esp
   12099:	68 48 45 01 00       	push   $0x14548
   1209e:	e8 da 1b 00 00       	call   13c7d <log_printf>
   120a3:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   120a6:	8b 45 08             	mov    0x8(%ebp),%eax
   120a9:	8b 40 34             	mov    0x34(%eax),%eax
   120ac:	83 e0 04             	and    $0x4,%eax
   120af:	85 c0                	test   %eax,%eax
   120b1:	74 12                	je     120c5 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   120b3:	83 ec 0c             	sub    $0xc,%esp
   120b6:	68 74 45 01 00       	push   $0x14574
   120bb:	e8 bd 1b 00 00       	call   13c7d <log_printf>
   120c0:	83 c4 10             	add    $0x10,%esp
   120c3:	eb 10                	jmp    120d5 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   120c5:	83 ec 0c             	sub    $0xc,%esp
   120c8:	68 9c 45 01 00       	push   $0x1459c
   120cd:	e8 ab 1b 00 00       	call   13c7d <log_printf>
   120d2:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   120d5:	83 ec 0c             	sub    $0xc,%esp
   120d8:	ff 75 08             	push   0x8(%ebp)
   120db:	e8 cc fb ff ff       	call   11cac <print_exception_fram>
   120e0:	83 c4 10             	add    $0x10,%esp
}
   120e3:	90                   	nop
   120e4:	c9                   	leave  
   120e5:	c3                   	ret    

000120e6 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   120e6:	55                   	push   %ebp
   120e7:	89 e5                	mov    %esp,%ebp
   120e9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   120ec:	83 ec 08             	sub    $0x8,%esp
   120ef:	68 c7 45 01 00       	push   $0x145c7
   120f4:	ff 75 08             	push   0x8(%ebp)
   120f7:	e8 bf fc ff ff       	call   11dbb <do_default_handler>
   120fc:	83 c4 10             	add    $0x10,%esp
}
   120ff:	90                   	nop
   12100:	c9                   	leave  
   12101:	c3                   	ret    

00012102 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12102:	55                   	push   %ebp
   12103:	89 e5                	mov    %esp,%ebp
   12105:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   12108:	83 ec 08             	sub    $0x8,%esp
   1210b:	68 db 45 01 00       	push   $0x145db
   12110:	ff 75 08             	push   0x8(%ebp)
   12113:	e8 a3 fc ff ff       	call   11dbb <do_default_handler>
   12118:	83 c4 10             	add    $0x10,%esp
}
   1211b:	90                   	nop
   1211c:	c9                   	leave  
   1211d:	c3                   	ret    

0001211e <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   1211e:	55                   	push   %ebp
   1211f:	89 e5                	mov    %esp,%ebp
   12121:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   12124:	83 ec 08             	sub    $0x8,%esp
   12127:	68 f5 45 01 00       	push   $0x145f5
   1212c:	ff 75 08             	push   0x8(%ebp)
   1212f:	e8 87 fc ff ff       	call   11dbb <do_default_handler>
   12134:	83 c4 10             	add    $0x10,%esp
}
   12137:	90                   	nop
   12138:	c9                   	leave  
   12139:	c3                   	ret    

0001213a <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1213a:	55                   	push   %ebp
   1213b:	89 e5                	mov    %esp,%ebp
   1213d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   12140:	83 ec 08             	sub    $0x8,%esp
   12143:	68 0d 46 01 00       	push   $0x1460d
   12148:	ff 75 08             	push   0x8(%ebp)
   1214b:	e8 6b fc ff ff       	call   11dbb <do_default_handler>
   12150:	83 c4 10             	add    $0x10,%esp
}
   12153:	90                   	nop
   12154:	c9                   	leave  
   12155:	c3                   	ret    

00012156 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12156:	55                   	push   %ebp
   12157:	89 e5                	mov    %esp,%ebp
   12159:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   1215c:	83 ec 08             	sub    $0x8,%esp
   1215f:	68 25 46 01 00       	push   $0x14625
   12164:	ff 75 08             	push   0x8(%ebp)
   12167:	e8 4f fc ff ff       	call   11dbb <do_default_handler>
   1216c:	83 c4 10             	add    $0x10,%esp
}
   1216f:	90                   	nop
   12170:	c9                   	leave  
   12171:	c3                   	ret    

00012172 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12172:	55                   	push   %ebp
   12173:	89 e5                	mov    %esp,%ebp
   12175:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   12178:	83 ec 08             	sub    $0x8,%esp
   1217b:	68 41 46 01 00       	push   $0x14641
   12180:	ff 75 08             	push   0x8(%ebp)
   12183:	e8 33 fc ff ff       	call   11dbb <do_default_handler>
   12188:	83 c4 10             	add    $0x10,%esp
}
   1218b:	90                   	nop
   1218c:	c9                   	leave  
   1218d:	c3                   	ret    

0001218e <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   1218e:	55                   	push   %ebp
   1218f:	89 e5                	mov    %esp,%ebp
   12191:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12194:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   1219b:	7f 06                	jg     121a3 <idt_install+0x15>
   1219d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121a1:	79 07                	jns    121aa <idt_install+0x1c>
   121a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   121a8:	eb 25                	jmp    121cf <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   121aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ad:	8b 55 08             	mov    0x8(%ebp),%edx
   121b0:	c1 e2 03             	shl    $0x3,%edx
   121b3:	81 c2 00 02 03 00    	add    $0x30200,%edx
   121b9:	68 00 8e 00 00       	push   $0x8e00
   121be:	50                   	push   %eax
   121bf:	6a 08                	push   $0x8
   121c1:	52                   	push   %edx
   121c2:	e8 c1 f7 ff ff       	call   11988 <gate_desc_set>
   121c7:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   121ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121cf:	c9                   	leave  
   121d0:	c3                   	ret    

000121d1 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   121d1:	55                   	push   %ebp
   121d2:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   121d4:	6a 11                	push   $0x11
   121d6:	6a 20                	push   $0x20
   121d8:	e8 5a fa ff ff       	call   11c37 <outb>
   121dd:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   121e0:	6a 20                	push   $0x20
   121e2:	6a 21                	push   $0x21
   121e4:	e8 4e fa ff ff       	call   11c37 <outb>
   121e9:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   121ec:	6a 04                	push   $0x4
   121ee:	6a 21                	push   $0x21
   121f0:	e8 42 fa ff ff       	call   11c37 <outb>
   121f5:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   121f8:	6a 01                	push   $0x1
   121fa:	6a 21                	push   $0x21
   121fc:	e8 36 fa ff ff       	call   11c37 <outb>
   12201:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12204:	6a 11                	push   $0x11
   12206:	68 a0 00 00 00       	push   $0xa0
   1220b:	e8 27 fa ff ff       	call   11c37 <outb>
   12210:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12213:	6a 28                	push   $0x28
   12215:	68 a1 00 00 00       	push   $0xa1
   1221a:	e8 18 fa ff ff       	call   11c37 <outb>
   1221f:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12222:	6a 02                	push   $0x2
   12224:	68 a1 00 00 00       	push   $0xa1
   12229:	e8 09 fa ff ff       	call   11c37 <outb>
   1222e:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12231:	6a 01                	push   $0x1
   12233:	68 a1 00 00 00       	push   $0xa1
   12238:	e8 fa f9 ff ff       	call   11c37 <outb>
   1223d:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12240:	68 fb 00 00 00       	push   $0xfb
   12245:	6a 21                	push   $0x21
   12247:	e8 eb f9 ff ff       	call   11c37 <outb>
   1224c:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   1224f:	68 ff 00 00 00       	push   $0xff
   12254:	68 a1 00 00 00       	push   $0xa1
   12259:	e8 d9 f9 ff ff       	call   11c37 <outb>
   1225e:	83 c4 08             	add    $0x8,%esp


}
   12261:	90                   	nop
   12262:	c9                   	leave  
   12263:	c3                   	ret    

00012264 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12264:	55                   	push   %ebp
   12265:	89 e5                	mov    %esp,%ebp
   12267:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1226a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12271:	eb 17                	jmp    1228a <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12273:	83 ec 08             	sub    $0x8,%esp
   12276:	68 2a 00 01 00       	push   $0x1002a
   1227b:	ff 75 f4             	push   -0xc(%ebp)
   1227e:	e8 0b ff ff ff       	call   1218e <idt_install>
   12283:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12286:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1228a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12291:	7e e0                	jle    12273 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12293:	83 ec 08             	sub    $0x8,%esp
   12296:	68 47 00 01 00       	push   $0x10047
   1229b:	6a 00                	push   $0x0
   1229d:	e8 ec fe ff ff       	call   1218e <idt_install>
   122a2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   122a5:	83 ec 08             	sub    $0x8,%esp
   122a8:	68 64 00 01 00       	push   $0x10064
   122ad:	6a 01                	push   $0x1
   122af:	e8 da fe ff ff       	call   1218e <idt_install>
   122b4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   122b7:	83 ec 08             	sub    $0x8,%esp
   122ba:	68 81 00 01 00       	push   $0x10081
   122bf:	6a 02                	push   $0x2
   122c1:	e8 c8 fe ff ff       	call   1218e <idt_install>
   122c6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   122c9:	83 ec 08             	sub    $0x8,%esp
   122cc:	68 9e 00 01 00       	push   $0x1009e
   122d1:	6a 03                	push   $0x3
   122d3:	e8 b6 fe ff ff       	call   1218e <idt_install>
   122d8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   122db:	83 ec 08             	sub    $0x8,%esp
   122de:	68 bb 00 01 00       	push   $0x100bb
   122e3:	6a 04                	push   $0x4
   122e5:	e8 a4 fe ff ff       	call   1218e <idt_install>
   122ea:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   122ed:	83 ec 08             	sub    $0x8,%esp
   122f0:	68 d8 00 01 00       	push   $0x100d8
   122f5:	6a 05                	push   $0x5
   122f7:	e8 92 fe ff ff       	call   1218e <idt_install>
   122fc:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   122ff:	83 ec 08             	sub    $0x8,%esp
   12302:	68 f5 00 01 00       	push   $0x100f5
   12307:	6a 06                	push   $0x6
   12309:	e8 80 fe ff ff       	call   1218e <idt_install>
   1230e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12311:	83 ec 08             	sub    $0x8,%esp
   12314:	68 12 01 01 00       	push   $0x10112
   12319:	6a 07                	push   $0x7
   1231b:	e8 6e fe ff ff       	call   1218e <idt_install>
   12320:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12323:	83 ec 08             	sub    $0x8,%esp
   12326:	68 2f 01 01 00       	push   $0x1012f
   1232b:	6a 08                	push   $0x8
   1232d:	e8 5c fe ff ff       	call   1218e <idt_install>
   12332:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12335:	83 ec 08             	sub    $0x8,%esp
   12338:	68 4a 01 01 00       	push   $0x1014a
   1233d:	6a 0a                	push   $0xa
   1233f:	e8 4a fe ff ff       	call   1218e <idt_install>
   12344:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12347:	83 ec 08             	sub    $0x8,%esp
   1234a:	68 65 01 01 00       	push   $0x10165
   1234f:	6a 0b                	push   $0xb
   12351:	e8 38 fe ff ff       	call   1218e <idt_install>
   12356:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12359:	83 ec 08             	sub    $0x8,%esp
   1235c:	68 80 01 01 00       	push   $0x10180
   12361:	6a 0c                	push   $0xc
   12363:	e8 26 fe ff ff       	call   1218e <idt_install>
   12368:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1236b:	83 ec 08             	sub    $0x8,%esp
   1236e:	68 9b 01 01 00       	push   $0x1019b
   12373:	6a 0d                	push   $0xd
   12375:	e8 14 fe ff ff       	call   1218e <idt_install>
   1237a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1237d:	83 ec 08             	sub    $0x8,%esp
   12380:	68 b6 01 01 00       	push   $0x101b6
   12385:	6a 0e                	push   $0xe
   12387:	e8 02 fe ff ff       	call   1218e <idt_install>
   1238c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1238f:	83 ec 08             	sub    $0x8,%esp
   12392:	68 d1 01 01 00       	push   $0x101d1
   12397:	6a 10                	push   $0x10
   12399:	e8 f0 fd ff ff       	call   1218e <idt_install>
   1239e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   123a1:	83 ec 08             	sub    $0x8,%esp
   123a4:	68 ee 01 01 00       	push   $0x101ee
   123a9:	6a 11                	push   $0x11
   123ab:	e8 de fd ff ff       	call   1218e <idt_install>
   123b0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   123b3:	83 ec 08             	sub    $0x8,%esp
   123b6:	68 09 02 01 00       	push   $0x10209
   123bb:	6a 12                	push   $0x12
   123bd:	e8 cc fd ff ff       	call   1218e <idt_install>
   123c2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   123c5:	83 ec 08             	sub    $0x8,%esp
   123c8:	68 26 02 01 00       	push   $0x10226
   123cd:	6a 13                	push   $0x13
   123cf:	e8 ba fd ff ff       	call   1218e <idt_install>
   123d4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   123d7:	83 ec 08             	sub    $0x8,%esp
   123da:	68 43 02 01 00       	push   $0x10243
   123df:	6a 14                	push   $0x14
   123e1:	e8 a8 fd ff ff       	call   1218e <idt_install>
   123e6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   123e9:	83 ec 08             	sub    $0x8,%esp
   123ec:	68 60 02 01 00       	push   $0x10260
   123f1:	6a 15                	push   $0x15
   123f3:	e8 96 fd ff ff       	call   1218e <idt_install>
   123f8:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   123fb:	b8 00 02 03 00       	mov    $0x30200,%eax
   12400:	83 ec 08             	sub    $0x8,%esp
   12403:	68 00 08 00 00       	push   $0x800
   12408:	50                   	push   %eax
   12409:	e8 4a f8 ff ff       	call   11c58 <lidt>
   1240e:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12411:	e8 bb fd ff ff       	call   121d1 <init_pic>
}
   12416:	90                   	nop
   12417:	c9                   	leave  
   12418:	c3                   	ret    

00012419 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12419:	55                   	push   %ebp
   1241a:	89 e5                	mov    %esp,%ebp
   1241c:	53                   	push   %ebx
   1241d:	83 ec 14             	sub    $0x14,%esp
   12420:	8b 45 08             	mov    0x8(%ebp),%eax
   12423:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12426:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1242a:	76 7f                	jbe    124ab <idt_enable+0x92>
   1242c:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12430:	77 79                	ja     124ab <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12432:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12436:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1243a:	77 33                	ja     1246f <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1243c:	6a 21                	push   $0x21
   1243e:	e8 d7 f7 ff ff       	call   11c1a <inb>
   12443:	83 c4 04             	add    $0x4,%esp
   12446:	89 c3                	mov    %eax,%ebx
   12448:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1244c:	ba 01 00 00 00       	mov    $0x1,%edx
   12451:	89 c1                	mov    %eax,%ecx
   12453:	d3 e2                	shl    %cl,%edx
   12455:	89 d0                	mov    %edx,%eax
   12457:	f7 d0                	not    %eax
   12459:	21 d8                	and    %ebx,%eax
   1245b:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1245e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12462:	50                   	push   %eax
   12463:	6a 21                	push   $0x21
   12465:	e8 cd f7 ff ff       	call   11c37 <outb>
   1246a:	83 c4 08             	add    $0x8,%esp
   1246d:	eb 3d                	jmp    124ac <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1246f:	68 a1 00 00 00       	push   $0xa1
   12474:	e8 a1 f7 ff ff       	call   11c1a <inb>
   12479:	83 c4 04             	add    $0x4,%esp
   1247c:	89 c3                	mov    %eax,%ebx
   1247e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12482:	83 e8 08             	sub    $0x8,%eax
   12485:	ba 01 00 00 00       	mov    $0x1,%edx
   1248a:	89 c1                	mov    %eax,%ecx
   1248c:	d3 e2                	shl    %cl,%edx
   1248e:	89 d0                	mov    %edx,%eax
   12490:	f7 d0                	not    %eax
   12492:	21 d8                	and    %ebx,%eax
   12494:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12497:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1249b:	50                   	push   %eax
   1249c:	68 a1 00 00 00       	push   $0xa1
   124a1:	e8 91 f7 ff ff       	call   11c37 <outb>
   124a6:	83 c4 08             	add    $0x8,%esp
   124a9:	eb 01                	jmp    124ac <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   124ab:	90                   	nop
  }
  
}
   124ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   124af:	c9                   	leave  
   124b0:	c3                   	ret    

000124b1 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   124b1:	55                   	push   %ebp
   124b2:	89 e5                	mov    %esp,%ebp
   124b4:	53                   	push   %ebx
   124b5:	83 ec 14             	sub    $0x14,%esp
   124b8:	8b 45 08             	mov    0x8(%ebp),%eax
   124bb:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   124be:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   124c2:	76 7b                	jbe    1253f <idt_disable+0x8e>
   124c4:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   124c8:	77 75                	ja     1253f <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   124ca:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   124ce:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   124d2:	77 31                	ja     12505 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   124d4:	6a 21                	push   $0x21
   124d6:	e8 3f f7 ff ff       	call   11c1a <inb>
   124db:	83 c4 04             	add    $0x4,%esp
   124de:	89 c3                	mov    %eax,%ebx
   124e0:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   124e4:	ba 01 00 00 00       	mov    $0x1,%edx
   124e9:	89 c1                	mov    %eax,%ecx
   124eb:	d3 e2                	shl    %cl,%edx
   124ed:	89 d0                	mov    %edx,%eax
   124ef:	09 d8                	or     %ebx,%eax
   124f1:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   124f4:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   124f8:	50                   	push   %eax
   124f9:	6a 21                	push   $0x21
   124fb:	e8 37 f7 ff ff       	call   11c37 <outb>
   12500:	83 c4 08             	add    $0x8,%esp
   12503:	eb 3b                	jmp    12540 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12505:	68 a1 00 00 00       	push   $0xa1
   1250a:	e8 0b f7 ff ff       	call   11c1a <inb>
   1250f:	83 c4 04             	add    $0x4,%esp
   12512:	89 c3                	mov    %eax,%ebx
   12514:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12518:	83 e8 08             	sub    $0x8,%eax
   1251b:	ba 01 00 00 00       	mov    $0x1,%edx
   12520:	89 c1                	mov    %eax,%ecx
   12522:	d3 e2                	shl    %cl,%edx
   12524:	89 d0                	mov    %edx,%eax
   12526:	09 d8                	or     %ebx,%eax
   12528:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1252b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1252f:	50                   	push   %eax
   12530:	68 a1 00 00 00       	push   $0xa1
   12535:	e8 fd f6 ff ff       	call   11c37 <outb>
   1253a:	83 c4 08             	add    $0x8,%esp
   1253d:	eb 01                	jmp    12540 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1253f:	90                   	nop
  }
  
}
   12540:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12543:	c9                   	leave  
   12544:	c3                   	ret    

00012545 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   12545:	55                   	push   %ebp
   12546:	89 e5                	mov    %esp,%ebp
  cli();
   12548:	e8 b8 f6 ff ff       	call   11c05 <cli>
}
   1254d:	90                   	nop
   1254e:	5d                   	pop    %ebp
   1254f:	c3                   	ret    

00012550 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   12550:	55                   	push   %ebp
   12551:	89 e5                	mov    %esp,%ebp
  sti();
   12553:	e8 b4 f6 ff ff       	call   11c0c <sti>
}
   12558:	90                   	nop
   12559:	5d                   	pop    %ebp
   1255a:	c3                   	ret    

0001255b <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   1255b:	55                   	push   %ebp
   1255c:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   1255e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   12562:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12566:	78 29                	js     12591 <pic_send_eoi+0x36>
   12568:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   1256c:	7f 23                	jg     12591 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   1256e:	6a 20                	push   $0x20
   12570:	6a 20                	push   $0x20
   12572:	e8 c0 f6 ff ff       	call   11c37 <outb>
   12577:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1257a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1257e:	7e 12                	jle    12592 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   12580:	6a 20                	push   $0x20
   12582:	68 a0 00 00 00       	push   $0xa0
   12587:	e8 ab f6 ff ff       	call   11c37 <outb>
   1258c:	83 c4 08             	add    $0x8,%esp
   1258f:	eb 01                	jmp    12592 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   12591:	90                   	nop
  }

}
   12592:	c9                   	leave  
   12593:	c3                   	ret    

00012594 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   12594:	55                   	push   %ebp
   12595:	89 e5                	mov    %esp,%ebp
   12597:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1259a:	e8 f2 f6 ff ff       	call   11c91 <read_eflags>
   1259f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   125a2:	e8 9e ff ff ff       	call   12545 <idt_disable_global>
  return state;;
   125a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   125aa:	c9                   	leave  
   125ab:	c3                   	ret    

000125ac <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   125ac:	55                   	push   %ebp
   125ad:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   125af:	ff 75 08             	push   0x8(%ebp)
   125b2:	e8 ea f6 ff ff       	call   11ca1 <write_eflags>
   125b7:	83 c4 04             	add    $0x4,%esp
}
   125ba:	90                   	nop
   125bb:	c9                   	leave  
   125bc:	c3                   	ret    

000125bd <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   125bd:	55                   	push   %ebp
   125be:	89 e5                	mov    %esp,%ebp
   125c0:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   125c3:	83 ec 08             	sub    $0x8,%esp
   125c6:	ff 75 0c             	push   0xc(%ebp)
   125c9:	ff 75 08             	push   0x8(%ebp)
   125cc:	e8 ac 16 00 00       	call   13c7d <log_printf>
   125d1:	83 c4 10             	add    $0x10,%esp
}
   125d4:	90                   	nop
   125d5:	c9                   	leave  
   125d6:	c3                   	ret    

000125d7 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   125d7:	55                   	push   %ebp
   125d8:	89 e5                	mov    %esp,%ebp
   125da:	53                   	push   %ebx
   125db:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   125de:	8b 45 08             	mov    0x8(%ebp),%eax
   125e1:	8b 40 3c             	mov    0x3c(%eax),%eax
   125e4:	83 f8 0a             	cmp    $0xa,%eax
   125e7:	77 48                	ja     12631 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   125e9:	8b 45 08             	mov    0x8(%ebp),%eax
   125ec:	8b 40 3c             	mov    0x3c(%eax),%eax
   125ef:	8b 04 85 60 46 01 00 	mov    0x14660(,%eax,4),%eax
   125f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   125f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   125fd:	74 32                	je     12631 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   125ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12602:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12605:	8b 45 08             	mov    0x8(%ebp),%eax
   12608:	8b 48 48             	mov    0x48(%eax),%ecx
   1260b:	8b 45 08             	mov    0x8(%ebp),%eax
   1260e:	8b 50 44             	mov    0x44(%eax),%edx
   12611:	8b 45 08             	mov    0x8(%ebp),%eax
   12614:	8b 40 40             	mov    0x40(%eax),%eax
   12617:	53                   	push   %ebx
   12618:	51                   	push   %ecx
   12619:	52                   	push   %edx
   1261a:	50                   	push   %eax
   1261b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1261e:	ff d0                	call   *%eax
   12620:	83 c4 10             	add    $0x10,%esp
   12623:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   12626:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12629:	8b 45 08             	mov    0x8(%ebp),%eax
   1262c:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   1262f:	eb 30                	jmp    12661 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   12631:	e8 44 ee ff ff       	call   1147a <task_current>
   12636:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   12639:	8b 45 08             	mov    0x8(%ebp),%eax
   1263c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1263f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12642:	83 c2 18             	add    $0x18,%edx
   12645:	83 ec 04             	sub    $0x4,%esp
   12648:	50                   	push   %eax
   12649:	52                   	push   %edx
   1264a:	68 8c 46 01 00       	push   $0x1468c
   1264f:	e8 29 16 00 00       	call   13c7d <log_printf>
   12654:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   12657:	8b 45 08             	mov    0x8(%ebp),%eax
   1265a:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   12661:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12664:	c9                   	leave  
   12665:	c3                   	ret    

00012666 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12666:	55                   	push   %ebp
   12667:	89 e5                	mov    %esp,%ebp
   12669:	83 ec 08             	sub    $0x8,%esp
   1266c:	8b 45 08             	mov    0x8(%ebp),%eax
   1266f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12672:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12676:	89 d0                	mov    %edx,%eax
   12678:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1267b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1267f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12683:	ee                   	out    %al,(%dx)
}
   12684:	90                   	nop
   12685:	c9                   	leave  
   12686:	c3                   	ret    

00012687 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   12687:	55                   	push   %ebp
   12688:	89 e5                	mov    %esp,%ebp
   1268a:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1268d:	a1 00 0a 03 00       	mov    0x30a00,%eax
   12692:	83 c0 01             	add    $0x1,%eax
   12695:	a3 00 0a 03 00       	mov    %eax,0x30a00

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   1269a:	83 ec 0c             	sub    $0xc,%esp
   1269d:	6a 20                	push   $0x20
   1269f:	e8 b7 fe ff ff       	call   1255b <pic_send_eoi>
   126a4:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   126a7:	e8 40 ee ff ff       	call   114ec <task_slice_end>
}
   126ac:	90                   	nop
   126ad:	c9                   	leave  
   126ae:	c3                   	ret    

000126af <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   126af:	55                   	push   %ebp
   126b0:	89 e5                	mov    %esp,%ebp
   126b2:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   126b5:	6a 36                	push   $0x36
   126b7:	6a 43                	push   $0x43
   126b9:	e8 a8 ff ff ff       	call   12666 <outb>
   126be:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   126c1:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   126c7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   126cb:	0f b6 c0             	movzbl %al,%eax
   126ce:	50                   	push   %eax
   126cf:	6a 40                	push   $0x40
   126d1:	e8 90 ff ff ff       	call   12666 <outb>
   126d6:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   126d9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   126dd:	66 c1 e8 08          	shr    $0x8,%ax
   126e1:	0f b6 c0             	movzbl %al,%eax
   126e4:	50                   	push   %eax
   126e5:	6a 40                	push   $0x40
   126e7:	e8 7a ff ff ff       	call   12666 <outb>
   126ec:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   126ef:	83 ec 08             	sub    $0x8,%esp
   126f2:	68 7b 02 01 00       	push   $0x1027b
   126f7:	6a 20                	push   $0x20
   126f9:	e8 90 fa ff ff       	call   1218e <idt_install>
   126fe:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   12701:	83 ec 0c             	sub    $0xc,%esp
   12704:	6a 20                	push   $0x20
   12706:	e8 0e fd ff ff       	call   12419 <idt_enable>
   1270b:	83 c4 10             	add    $0x10,%esp

}
   1270e:	90                   	nop
   1270f:	c9                   	leave  
   12710:	c3                   	ret    

00012711 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   12711:	55                   	push   %ebp
   12712:	89 e5                	mov    %esp,%ebp
   12714:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12717:	c7 05 00 0a 03 00 00 	movl   $0x0,0x30a00
   1271e:	00 00 00 
    init_pit();
   12721:	e8 89 ff ff ff       	call   126af <init_pit>
   12726:	90                   	nop
   12727:	c9                   	leave  
   12728:	c3                   	ret    

00012729 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   12729:	55                   	push   %ebp
   1272a:	89 e5                	mov    %esp,%ebp
   1272c:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   1272f:	8b 45 08             	mov    0x8(%ebp),%eax
   12732:	8b 40 50             	mov    0x50(%eax),%eax
   12735:	85 c0                	test   %eax,%eax
   12737:	75 19                	jne    12752 <kernel_init+0x29>
   12739:	68 b0 46 01 00       	push   $0x146b0
   1273e:	68 4c 47 01 00       	push   $0x1474c
   12743:	6a 22                	push   $0x22
   12745:	68 d4 46 01 00       	push   $0x146d4
   1274a:	e8 5f 08 00 00       	call   12fae <pannic>
   1274f:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   12752:	e8 9e 14 00 00       	call   13bf5 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   12757:	83 ec 0c             	sub    $0xc,%esp
   1275a:	ff 75 08             	push   0x8(%ebp)
   1275d:	e8 dd e2 ff ff       	call   10a3f <memory_init>
   12762:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   12765:	e8 4c f3 ff ff       	call   11ab6 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   1276a:	e8 f5 fa ff ff       	call   12264 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   1276f:	e8 9d ff ff ff       	call   12711 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   12774:	e8 64 ea ff ff       	call   111dd <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   12779:	90                   	nop
   1277a:	c9                   	leave  
   1277b:	c3                   	ret    

0001277c <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   1277c:	55                   	push   %ebp
   1277d:	89 e5                	mov    %esp,%ebp
   1277f:	56                   	push   %esi
   12780:	53                   	push   %ebx
   12781:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   12784:	e8 f1 ec ff ff       	call   1147a <task_current>
   12789:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1278c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12790:	75 19                	jne    127ab <move_to_first_task+0x2f>
   12792:	68 09 47 01 00       	push   $0x14709
   12797:	68 58 47 01 00       	push   $0x14758
   1279c:	6a 42                	push   $0x42
   1279e:	68 d4 46 01 00       	push   $0x146d4
   127a3:	e8 06 08 00 00       	call   12fae <pannic>
   127a8:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   127ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127ae:	83 c0 50             	add    $0x50,%eax
   127b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   127b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127b7:	8b 40 50             	mov    0x50(%eax),%eax
   127ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
   127bd:	8b 52 38             	mov    0x38(%edx),%edx
   127c0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   127c3:	8b 49 24             	mov    0x24(%ecx),%ecx
   127c6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   127c9:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   127cc:	8b 75 f0             	mov    -0x10(%ebp),%esi
   127cf:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   127d2:	50                   	push   %eax
   127d3:	52                   	push   %edx
   127d4:	51                   	push   %ecx
   127d5:	53                   	push   %ebx
   127d6:	56                   	push   %esi
   127d7:	cf                   	iret   

        
    );
}
   127d8:	90                   	nop
   127d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
   127dc:	5b                   	pop    %ebx
   127dd:	5e                   	pop    %esi
   127de:	5d                   	pop    %ebp
   127df:	c3                   	ret    

000127e0 <init_main>:


void init_main(void) {
   127e0:	55                   	push   %ebp
   127e1:	89 e5                	mov    %esp,%ebp
   127e3:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   127e6:	83 ec 0c             	sub    $0xc,%esp
   127e9:	68 13 47 01 00       	push   $0x14713
   127ee:	e8 8a 14 00 00       	call   13c7d <log_printf>
   127f3:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   127f6:	83 ec 04             	sub    $0x4,%esp
   127f9:	68 2b 47 01 00       	push   $0x1472b
   127fe:	68 31 47 01 00       	push   $0x14731
   12803:	68 36 47 01 00       	push   $0x14736
   12808:	e8 70 14 00 00       	call   13c7d <log_printf>
   1280d:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   12810:	e8 a5 ea ff ff       	call   112ba <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   12815:	e8 62 ff ff ff       	call   1277c <move_to_first_task>
   1281a:	90                   	nop
   1281b:	c9                   	leave  
   1281c:	c3                   	ret    

0001281d <list_init>:
static inline void list_init(list_t *list) {
   1281d:	55                   	push   %ebp
   1281e:	89 e5                	mov    %esp,%ebp
   12820:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12823:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12827:	75 19                	jne    12842 <list_init+0x25>
   12829:	68 6c 47 01 00       	push   $0x1476c
   1282e:	68 18 48 01 00       	push   $0x14818
   12833:	6a 31                	push   $0x31
   12835:	68 80 47 01 00       	push   $0x14780
   1283a:	e8 6f 07 00 00       	call   12fae <pannic>
   1283f:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12842:	8b 45 08             	mov    0x8(%ebp),%eax
   12845:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1284c:	8b 45 08             	mov    0x8(%ebp),%eax
   1284f:	8b 50 04             	mov    0x4(%eax),%edx
   12852:	8b 45 08             	mov    0x8(%ebp),%eax
   12855:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12857:	8b 45 08             	mov    0x8(%ebp),%eax
   1285a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12861:	90                   	nop
   12862:	c9                   	leave  
   12863:	c3                   	ret    

00012864 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12864:	55                   	push   %ebp
   12865:	89 e5                	mov    %esp,%ebp
   12867:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1286a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1286e:	75 19                	jne    12889 <list_is_empty+0x25>
   12870:	68 6c 47 01 00       	push   $0x1476c
   12875:	68 24 48 01 00       	push   $0x14824
   1287a:	6a 38                	push   $0x38
   1287c:	68 80 47 01 00       	push   $0x14780
   12881:	e8 28 07 00 00       	call   12fae <pannic>
   12886:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12889:	8b 45 08             	mov    0x8(%ebp),%eax
   1288c:	8b 40 08             	mov    0x8(%eax),%eax
   1288f:	85 c0                	test   %eax,%eax
   12891:	0f 94 c0             	sete   %al
   12894:	0f b6 c0             	movzbl %al,%eax
}
   12897:	c9                   	leave  
   12898:	c3                   	ret    

00012899 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   12899:	55                   	push   %ebp
   1289a:	89 e5                	mov    %esp,%ebp
   1289c:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1289f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128a3:	75 19                	jne    128be <mutex_init+0x25>
   128a5:	68 be 47 01 00       	push   $0x147be
   128aa:	68 0c 48 01 00       	push   $0x1480c
   128af:	6a 15                	push   $0x15
   128b1:	68 d4 47 01 00       	push   $0x147d4
   128b6:	e8 f3 06 00 00       	call   12fae <pannic>
   128bb:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   128be:	8b 45 08             	mov    0x8(%ebp),%eax
   128c1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   128c8:	8b 45 08             	mov    0x8(%ebp),%eax
   128cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   128d1:	8b 45 08             	mov    0x8(%ebp),%eax
   128d4:	83 c0 08             	add    $0x8,%eax
   128d7:	83 ec 0c             	sub    $0xc,%esp
   128da:	50                   	push   %eax
   128db:	e8 3d ff ff ff       	call   1281d <list_init>
   128e0:	83 c4 10             	add    $0x10,%esp
}
   128e3:	90                   	nop
   128e4:	c9                   	leave  
   128e5:	c3                   	ret    

000128e6 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   128e6:	55                   	push   %ebp
   128e7:	89 e5                	mov    %esp,%ebp
   128e9:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   128ec:	e8 a3 fc ff ff       	call   12594 <idt_enter_protection>
   128f1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   128f4:	e8 81 eb ff ff       	call   1147a <task_current>
   128f9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   128fc:	8b 45 08             	mov    0x8(%ebp),%eax
   128ff:	8b 40 04             	mov    0x4(%eax),%eax
   12902:	85 c0                	test   %eax,%eax
   12904:	75 19                	jne    1291f <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   12906:	8b 45 08             	mov    0x8(%ebp),%eax
   12909:	8b 40 04             	mov    0x4(%eax),%eax
   1290c:	8d 50 01             	lea    0x1(%eax),%edx
   1290f:	8b 45 08             	mov    0x8(%ebp),%eax
   12912:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   12915:	8b 45 08             	mov    0x8(%ebp),%eax
   12918:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1291b:	89 10                	mov    %edx,(%eax)
   1291d:	eb 47                	jmp    12966 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   1291f:	8b 45 08             	mov    0x8(%ebp),%eax
   12922:	8b 00                	mov    (%eax),%eax
   12924:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12927:	75 11                	jne    1293a <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   12929:	8b 45 08             	mov    0x8(%ebp),%eax
   1292c:	8b 40 04             	mov    0x4(%eax),%eax
   1292f:	8d 50 01             	lea    0x1(%eax),%edx
   12932:	8b 45 08             	mov    0x8(%ebp),%eax
   12935:	89 50 04             	mov    %edx,0x4(%eax)
   12938:	eb 2c                	jmp    12966 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   1293a:	83 ec 0c             	sub    $0xc,%esp
   1293d:	ff 75 f0             	push   -0x10(%ebp)
   12940:	e8 bc ea ff ff       	call   11401 <task_set_unready>
   12945:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   12948:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1294b:	8d 50 48             	lea    0x48(%eax),%edx
   1294e:	8b 45 08             	mov    0x8(%ebp),%eax
   12951:	83 c0 08             	add    $0x8,%eax
   12954:	83 ec 08             	sub    $0x8,%esp
   12957:	52                   	push   %edx
   12958:	50                   	push   %eax
   12959:	e8 9b 0f 00 00       	call   138f9 <list_insert_last>
   1295e:	83 c4 10             	add    $0x10,%esp
    task_switch();
   12961:	e8 1e eb ff ff       	call   11484 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   12966:	83 ec 0c             	sub    $0xc,%esp
   12969:	ff 75 f4             	push   -0xc(%ebp)
   1296c:	e8 3b fc ff ff       	call   125ac <idt_leave_protection>
   12971:	83 c4 10             	add    $0x10,%esp
}
   12974:	90                   	nop
   12975:	c9                   	leave  
   12976:	c3                   	ret    

00012977 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   12977:	55                   	push   %ebp
   12978:	89 e5                	mov    %esp,%ebp
   1297a:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1297d:	e8 12 fc ff ff       	call   12594 <idt_enter_protection>
   12982:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   12985:	e8 f0 ea ff ff       	call   1147a <task_current>
   1298a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   1298d:	8b 45 08             	mov    0x8(%ebp),%eax
   12990:	8b 00                	mov    (%eax),%eax
   12992:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12995:	0f 85 83 00 00 00    	jne    12a1e <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   1299b:	8b 45 08             	mov    0x8(%ebp),%eax
   1299e:	8b 40 04             	mov    0x4(%eax),%eax
   129a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   129a4:	8b 45 08             	mov    0x8(%ebp),%eax
   129a7:	89 50 04             	mov    %edx,0x4(%eax)
   129aa:	8b 45 08             	mov    0x8(%ebp),%eax
   129ad:	8b 40 04             	mov    0x4(%eax),%eax
   129b0:	85 c0                	test   %eax,%eax
   129b2:	75 6a                	jne    12a1e <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   129b4:	8b 45 08             	mov    0x8(%ebp),%eax
   129b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   129bd:	8b 45 08             	mov    0x8(%ebp),%eax
   129c0:	83 c0 08             	add    $0x8,%eax
   129c3:	83 ec 0c             	sub    $0xc,%esp
   129c6:	50                   	push   %eax
   129c7:	e8 98 fe ff ff       	call   12864 <list_is_empty>
   129cc:	83 c4 10             	add    $0x10,%esp
   129cf:	85 c0                	test   %eax,%eax
   129d1:	75 4b                	jne    12a1e <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   129d3:	8b 45 08             	mov    0x8(%ebp),%eax
   129d6:	83 c0 08             	add    $0x8,%eax
   129d9:	83 ec 0c             	sub    $0xc,%esp
   129dc:	50                   	push   %eax
   129dd:	e8 a6 0f 00 00       	call   13988 <list_remove_first>
   129e2:	83 c4 10             	add    $0x10,%esp
   129e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   129e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   129ec:	74 08                	je     129f6 <mutex_unlock+0x7f>
   129ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
   129f1:	83 e8 48             	sub    $0x48,%eax
   129f4:	eb 05                	jmp    129fb <mutex_unlock+0x84>
   129f6:	b8 00 00 00 00       	mov    $0x0,%eax
   129fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   129fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12a01:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   12a08:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0b:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12a0e:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   12a10:	83 ec 0c             	sub    $0xc,%esp
   12a13:	ff 75 e8             	push   -0x18(%ebp)
   12a16:	e8 9b e9 ff ff       	call   113b6 <task_set_ready>
   12a1b:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   12a1e:	83 ec 0c             	sub    $0xc,%esp
   12a21:	ff 75 f4             	push   -0xc(%ebp)
   12a24:	e8 83 fb ff ff       	call   125ac <idt_leave_protection>
   12a29:	83 c4 10             	add    $0x10,%esp
}
   12a2c:	90                   	nop
   12a2d:	c9                   	leave  
   12a2e:	c3                   	ret    

00012a2f <list_init>:
static inline void list_init(list_t *list) {
   12a2f:	55                   	push   %ebp
   12a30:	89 e5                	mov    %esp,%ebp
   12a32:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12a35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a39:	75 19                	jne    12a54 <list_init+0x25>
   12a3b:	68 34 48 01 00       	push   $0x14834
   12a40:	68 d8 48 01 00       	push   $0x148d8
   12a45:	6a 31                	push   $0x31
   12a47:	68 48 48 01 00       	push   $0x14848
   12a4c:	e8 5d 05 00 00       	call   12fae <pannic>
   12a51:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12a54:	8b 45 08             	mov    0x8(%ebp),%eax
   12a57:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a61:	8b 50 04             	mov    0x4(%eax),%edx
   12a64:	8b 45 08             	mov    0x8(%ebp),%eax
   12a67:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12a69:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12a73:	90                   	nop
   12a74:	c9                   	leave  
   12a75:	c3                   	ret    

00012a76 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12a76:	55                   	push   %ebp
   12a77:	89 e5                	mov    %esp,%ebp
   12a79:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12a7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a80:	75 19                	jne    12a9b <list_is_empty+0x25>
   12a82:	68 34 48 01 00       	push   $0x14834
   12a87:	68 e4 48 01 00       	push   $0x148e4
   12a8c:	6a 38                	push   $0x38
   12a8e:	68 48 48 01 00       	push   $0x14848
   12a93:	e8 16 05 00 00       	call   12fae <pannic>
   12a98:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12a9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9e:	8b 40 08             	mov    0x8(%eax),%eax
   12aa1:	85 c0                	test   %eax,%eax
   12aa3:	0f 94 c0             	sete   %al
   12aa6:	0f b6 c0             	movzbl %al,%eax
}
   12aa9:	c9                   	leave  
   12aaa:	c3                   	ret    

00012aab <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   12aab:	55                   	push   %ebp
   12aac:	89 e5                	mov    %esp,%ebp
   12aae:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   12ab1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ab5:	75 19                	jne    12ad0 <sem_init+0x25>
   12ab7:	68 86 48 01 00       	push   $0x14886
   12abc:	68 cc 48 01 00       	push   $0x148cc
   12ac1:	6a 18                	push   $0x18
   12ac3:	68 98 48 01 00       	push   $0x14898
   12ac8:	e8 e1 04 00 00       	call   12fae <pannic>
   12acd:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   12ad0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   12ad9:	8b 45 08             	mov    0x8(%ebp),%eax
   12adc:	83 c0 04             	add    $0x4,%eax
   12adf:	83 ec 0c             	sub    $0xc,%esp
   12ae2:	50                   	push   %eax
   12ae3:	e8 47 ff ff ff       	call   12a2f <list_init>
   12ae8:	83 c4 10             	add    $0x10,%esp
}
   12aeb:	90                   	nop
   12aec:	c9                   	leave  
   12aed:	c3                   	ret    

00012aee <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12aee:	55                   	push   %ebp
   12aef:	89 e5                	mov    %esp,%ebp
   12af1:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12af4:	e8 9b fa ff ff       	call   12594 <idt_enter_protection>
   12af9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12afc:	8b 45 08             	mov    0x8(%ebp),%eax
   12aff:	8b 00                	mov    (%eax),%eax
   12b01:	85 c0                	test   %eax,%eax
   12b03:	7e 0f                	jle    12b14 <sem_wait+0x26>
        --sem->count;   
   12b05:	8b 45 08             	mov    0x8(%ebp),%eax
   12b08:	8b 00                	mov    (%eax),%eax
   12b0a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b10:	89 10                	mov    %edx,(%eax)
   12b12:	eb 34                	jmp    12b48 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   12b14:	e8 61 e9 ff ff       	call   1147a <task_current>
   12b19:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   12b1c:	83 ec 0c             	sub    $0xc,%esp
   12b1f:	ff 75 f0             	push   -0x10(%ebp)
   12b22:	e8 da e8 ff ff       	call   11401 <task_set_unready>
   12b27:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   12b2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b2d:	8d 50 48             	lea    0x48(%eax),%edx
   12b30:	8b 45 08             	mov    0x8(%ebp),%eax
   12b33:	83 c0 04             	add    $0x4,%eax
   12b36:	83 ec 08             	sub    $0x8,%esp
   12b39:	52                   	push   %edx
   12b3a:	50                   	push   %eax
   12b3b:	e8 b9 0d 00 00       	call   138f9 <list_insert_last>
   12b40:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   12b43:	e8 3c e9 ff ff       	call   11484 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   12b48:	83 ec 0c             	sub    $0xc,%esp
   12b4b:	ff 75 f4             	push   -0xc(%ebp)
   12b4e:	e8 59 fa ff ff       	call   125ac <idt_leave_protection>
   12b53:	83 c4 10             	add    $0x10,%esp
}
   12b56:	90                   	nop
   12b57:	c9                   	leave  
   12b58:	c3                   	ret    

00012b59 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   12b59:	55                   	push   %ebp
   12b5a:	89 e5                	mov    %esp,%ebp
   12b5c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12b5f:	e8 30 fa ff ff       	call   12594 <idt_enter_protection>
   12b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   12b67:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6a:	83 c0 04             	add    $0x4,%eax
   12b6d:	83 ec 0c             	sub    $0xc,%esp
   12b70:	50                   	push   %eax
   12b71:	e8 00 ff ff ff       	call   12a76 <list_is_empty>
   12b76:	83 c4 10             	add    $0x10,%esp
   12b79:	85 c0                	test   %eax,%eax
   12b7b:	75 3b                	jne    12bb8 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   12b7d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b80:	83 c0 04             	add    $0x4,%eax
   12b83:	83 ec 0c             	sub    $0xc,%esp
   12b86:	50                   	push   %eax
   12b87:	e8 fc 0d 00 00       	call   13988 <list_remove_first>
   12b8c:	83 c4 10             	add    $0x10,%esp
   12b8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   12b92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12b96:	74 08                	je     12ba0 <sem_notify+0x47>
   12b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b9b:	83 e8 48             	sub    $0x48,%eax
   12b9e:	eb 05                	jmp    12ba5 <sem_notify+0x4c>
   12ba0:	b8 00 00 00 00       	mov    $0x0,%eax
   12ba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12ba8:	83 ec 0c             	sub    $0xc,%esp
   12bab:	ff 75 ec             	push   -0x14(%ebp)
   12bae:	e8 03 e8 ff ff       	call   113b6 <task_set_ready>
   12bb3:	83 c4 10             	add    $0x10,%esp
   12bb6:	eb 0d                	jmp    12bc5 <sem_notify+0x6c>
    } else {
        sem->count++;
   12bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bbb:	8b 00                	mov    (%eax),%eax
   12bbd:	8d 50 01             	lea    0x1(%eax),%edx
   12bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc3:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   12bc5:	83 ec 0c             	sub    $0xc,%esp
   12bc8:	ff 75 f4             	push   -0xc(%ebp)
   12bcb:	e8 dc f9 ff ff       	call   125ac <idt_leave_protection>
   12bd0:	83 c4 10             	add    $0x10,%esp

}
   12bd3:	90                   	nop
   12bd4:	c9                   	leave  
   12bd5:	c3                   	ret    

00012bd6 <sem_count>:

int sem_count(sem_t *sem) {
   12bd6:	55                   	push   %ebp
   12bd7:	89 e5                	mov    %esp,%ebp
   12bd9:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12bdc:	e8 b3 f9 ff ff       	call   12594 <idt_enter_protection>
   12be1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12be4:	8b 45 08             	mov    0x8(%ebp),%eax
   12be7:	8b 00                	mov    (%eax),%eax
   12be9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12bec:	83 ec 0c             	sub    $0xc,%esp
   12bef:	ff 75 f4             	push   -0xc(%ebp)
   12bf2:	e8 b5 f9 ff ff       	call   125ac <idt_leave_protection>
   12bf7:	83 c4 10             	add    $0x10,%esp

    return count;
   12bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bfd:	c9                   	leave  
   12bfe:	c3                   	ret    

00012bff <list_init>:
static inline void list_init(list_t *list) {
   12bff:	55                   	push   %ebp
   12c00:	89 e5                	mov    %esp,%ebp
   12c02:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c09:	75 19                	jne    12c24 <list_init+0x25>
   12c0b:	68 f4 48 01 00       	push   $0x148f4
   12c10:	68 f8 49 01 00       	push   $0x149f8
   12c15:	6a 31                	push   $0x31
   12c17:	68 08 49 01 00       	push   $0x14908
   12c1c:	e8 8d 03 00 00       	call   12fae <pannic>
   12c21:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12c24:	8b 45 08             	mov    0x8(%ebp),%eax
   12c27:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c31:	8b 50 04             	mov    0x4(%eax),%edx
   12c34:	8b 45 08             	mov    0x8(%ebp),%eax
   12c37:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12c39:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12c43:	90                   	nop
   12c44:	c9                   	leave  
   12c45:	c3                   	ret    

00012c46 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12c46:	55                   	push   %ebp
   12c47:	89 e5                	mov    %esp,%ebp
   12c49:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c50:	75 19                	jne    12c6b <list_get_size+0x25>
   12c52:	68 f4 48 01 00       	push   $0x148f4
   12c57:	68 04 4a 01 00       	push   $0x14a04
   12c5c:	6a 3e                	push   $0x3e
   12c5e:	68 08 49 01 00       	push   $0x14908
   12c63:	e8 46 03 00 00       	call   12fae <pannic>
   12c68:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c6e:	8b 40 08             	mov    0x8(%eax),%eax
}
   12c71:	c9                   	leave  
   12c72:	c3                   	ret    

00012c73 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   12c73:	55                   	push   %ebp
   12c74:	89 e5                	mov    %esp,%ebp
   12c76:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c7d:	75 19                	jne    12c98 <list_get_first+0x25>
   12c7f:	68 f4 48 01 00       	push   $0x148f4
   12c84:	68 24 4a 01 00       	push   $0x14a24
   12c89:	6a 44                	push   $0x44
   12c8b:	68 08 49 01 00       	push   $0x14908
   12c90:	e8 19 03 00 00       	call   12fae <pannic>
   12c95:	83 c4 10             	add    $0x10,%esp
    return list->first;
   12c98:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9b:	8b 00                	mov    (%eax),%eax
}
   12c9d:	c9                   	leave  
   12c9e:	c3                   	ret    

00012c9f <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   12c9f:	55                   	push   %ebp
   12ca0:	89 e5                	mov    %esp,%ebp
   12ca2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12ca5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ca9:	75 19                	jne    12cc4 <list_get_last+0x25>
   12cab:	68 f4 48 01 00       	push   $0x148f4
   12cb0:	68 14 4a 01 00       	push   $0x14a14
   12cb5:	6a 4a                	push   $0x4a
   12cb7:	68 08 49 01 00       	push   $0x14908
   12cbc:	e8 ed 02 00 00       	call   12fae <pannic>
   12cc1:	83 c4 10             	add    $0x10,%esp

    return list->last;
   12cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc7:	8b 40 04             	mov    0x4(%eax),%eax
}
   12cca:	c9                   	leave  
   12ccb:	c3                   	ret    

00012ccc <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12ccc:	55                   	push   %ebp
   12ccd:	89 e5                	mov    %esp,%ebp
   12ccf:	56                   	push   %esi
   12cd0:	53                   	push   %ebx
   12cd1:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   12cd4:	83 ec 0c             	sub    $0xc,%esp
   12cd7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12cda:	50                   	push   %eax
   12cdb:	e8 1f ff ff ff       	call   12bff <list_init>
   12ce0:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12ce3:	83 ec 0c             	sub    $0xc,%esp
   12ce6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ce9:	50                   	push   %eax
   12cea:	e8 57 ff ff ff       	call   12c46 <list_get_size>
   12cef:	83 c4 10             	add    $0x10,%esp
   12cf2:	89 c6                	mov    %eax,%esi
   12cf4:	83 ec 0c             	sub    $0xc,%esp
   12cf7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12cfa:	50                   	push   %eax
   12cfb:	e8 9f ff ff ff       	call   12c9f <list_get_last>
   12d00:	83 c4 10             	add    $0x10,%esp
   12d03:	89 c3                	mov    %eax,%ebx
   12d05:	83 ec 0c             	sub    $0xc,%esp
   12d08:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12d0b:	50                   	push   %eax
   12d0c:	e8 62 ff ff ff       	call   12c73 <list_get_first>
   12d11:	83 c4 10             	add    $0x10,%esp
   12d14:	56                   	push   %esi
   12d15:	53                   	push   %ebx
   12d16:	50                   	push   %eax
   12d17:	68 48 49 01 00       	push   $0x14948
   12d1c:	e8 5c 0f 00 00       	call   13c7d <log_printf>
   12d21:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   12d24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12d2b:	eb 3f                	jmp    12d6c <list_test+0xa0>
        list_node_t *node = nodes + i;
   12d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d30:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12d37:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12d3a:	01 d0                	add    %edx,%eax
   12d3c:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   12d3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
   12d42:	83 ec 04             	sub    $0x4,%esp
   12d45:	50                   	push   %eax
   12d46:	ff 75 f4             	push   -0xc(%ebp)
   12d49:	68 70 49 01 00       	push   $0x14970
   12d4e:	e8 2a 0f 00 00       	call   13c7d <log_printf>
   12d53:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   12d56:	83 ec 08             	sub    $0x8,%esp
   12d59:	ff 75 d0             	push   -0x30(%ebp)
   12d5c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12d5f:	50                   	push   %eax
   12d60:	e8 09 0b 00 00       	call   1386e <list_insert_first>
   12d65:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12d6c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   12d70:	7e bb                	jle    12d2d <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12d72:	83 ec 0c             	sub    $0xc,%esp
   12d75:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12d78:	50                   	push   %eax
   12d79:	e8 c8 fe ff ff       	call   12c46 <list_get_size>
   12d7e:	83 c4 10             	add    $0x10,%esp
   12d81:	89 c6                	mov    %eax,%esi
   12d83:	83 ec 0c             	sub    $0xc,%esp
   12d86:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12d89:	50                   	push   %eax
   12d8a:	e8 10 ff ff ff       	call   12c9f <list_get_last>
   12d8f:	83 c4 10             	add    $0x10,%esp
   12d92:	89 c3                	mov    %eax,%ebx
   12d94:	83 ec 0c             	sub    $0xc,%esp
   12d97:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12d9a:	50                   	push   %eax
   12d9b:	e8 d3 fe ff ff       	call   12c73 <list_get_first>
   12da0:	83 c4 10             	add    $0x10,%esp
   12da3:	56                   	push   %esi
   12da4:	53                   	push   %ebx
   12da5:	50                   	push   %eax
   12da6:	68 48 49 01 00       	push   $0x14948
   12dab:	e8 cd 0e 00 00       	call   13c7d <log_printf>
   12db0:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   12db3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12dba:	eb 2d                	jmp    12de9 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12dbc:	83 ec 0c             	sub    $0xc,%esp
   12dbf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12dc2:	50                   	push   %eax
   12dc3:	e8 c0 0b 00 00       	call   13988 <list_remove_first>
   12dc8:	83 c4 10             	add    $0x10,%esp
   12dcb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12dce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   12dd1:	83 ec 04             	sub    $0x4,%esp
   12dd4:	50                   	push   %eax
   12dd5:	ff 75 f0             	push   -0x10(%ebp)
   12dd8:	68 8f 49 01 00       	push   $0x1498f
   12ddd:	e8 9b 0e 00 00       	call   13c7d <log_printf>
   12de2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12de5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12de9:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12ded:	7e cd                	jle    12dbc <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12def:	83 ec 0c             	sub    $0xc,%esp
   12df2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12df5:	50                   	push   %eax
   12df6:	e8 4b fe ff ff       	call   12c46 <list_get_size>
   12dfb:	83 c4 10             	add    $0x10,%esp
   12dfe:	89 c6                	mov    %eax,%esi
   12e00:	83 ec 0c             	sub    $0xc,%esp
   12e03:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12e06:	50                   	push   %eax
   12e07:	e8 93 fe ff ff       	call   12c9f <list_get_last>
   12e0c:	83 c4 10             	add    $0x10,%esp
   12e0f:	89 c3                	mov    %eax,%ebx
   12e11:	83 ec 0c             	sub    $0xc,%esp
   12e14:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12e17:	50                   	push   %eax
   12e18:	e8 56 fe ff ff       	call   12c73 <list_get_first>
   12e1d:	83 c4 10             	add    $0x10,%esp
   12e20:	56                   	push   %esi
   12e21:	53                   	push   %ebx
   12e22:	50                   	push   %eax
   12e23:	68 48 49 01 00       	push   $0x14948
   12e28:	e8 50 0e 00 00       	call   13c7d <log_printf>
   12e2d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   12e30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12e37:	eb 3f                	jmp    12e78 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12e39:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12e3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12e43:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12e46:	01 d0                	add    %edx,%eax
   12e48:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12e4b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12e4e:	83 ec 04             	sub    $0x4,%esp
   12e51:	50                   	push   %eax
   12e52:	ff 75 ec             	push   -0x14(%ebp)
   12e55:	68 a6 49 01 00       	push   $0x149a6
   12e5a:	e8 1e 0e 00 00       	call   13c7d <log_printf>
   12e5f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   12e62:	83 ec 08             	sub    $0x8,%esp
   12e65:	ff 75 d8             	push   -0x28(%ebp)
   12e68:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12e6b:	50                   	push   %eax
   12e6c:	e8 88 0a 00 00       	call   138f9 <list_insert_last>
   12e71:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12e74:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12e78:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12e7c:	7e bb                	jle    12e39 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12e7e:	83 ec 0c             	sub    $0xc,%esp
   12e81:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12e84:	50                   	push   %eax
   12e85:	e8 bc fd ff ff       	call   12c46 <list_get_size>
   12e8a:	83 c4 10             	add    $0x10,%esp
   12e8d:	89 c6                	mov    %eax,%esi
   12e8f:	83 ec 0c             	sub    $0xc,%esp
   12e92:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12e95:	50                   	push   %eax
   12e96:	e8 04 fe ff ff       	call   12c9f <list_get_last>
   12e9b:	83 c4 10             	add    $0x10,%esp
   12e9e:	89 c3                	mov    %eax,%ebx
   12ea0:	83 ec 0c             	sub    $0xc,%esp
   12ea3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ea6:	50                   	push   %eax
   12ea7:	e8 c7 fd ff ff       	call   12c73 <list_get_first>
   12eac:	83 c4 10             	add    $0x10,%esp
   12eaf:	56                   	push   %esi
   12eb0:	53                   	push   %ebx
   12eb1:	50                   	push   %eax
   12eb2:	68 48 49 01 00       	push   $0x14948
   12eb7:	e8 c1 0d 00 00       	call   13c7d <log_printf>
   12ebc:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12ebf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12ec6:	eb 2d                	jmp    12ef5 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12ec8:	83 ec 0c             	sub    $0xc,%esp
   12ecb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ece:	50                   	push   %eax
   12ecf:	e8 65 0b 00 00       	call   13a39 <list_remove_last>
   12ed4:	83 c4 10             	add    $0x10,%esp
   12ed7:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12eda:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12edd:	83 ec 04             	sub    $0x4,%esp
   12ee0:	50                   	push   %eax
   12ee1:	ff 75 e8             	push   -0x18(%ebp)
   12ee4:	68 c4 49 01 00       	push   $0x149c4
   12ee9:	e8 8f 0d 00 00       	call   13c7d <log_printf>
   12eee:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12ef1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12ef5:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12ef9:	7e cd                	jle    12ec8 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12efb:	83 ec 0c             	sub    $0xc,%esp
   12efe:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f01:	50                   	push   %eax
   12f02:	e8 3f fd ff ff       	call   12c46 <list_get_size>
   12f07:	83 c4 10             	add    $0x10,%esp
   12f0a:	89 c6                	mov    %eax,%esi
   12f0c:	83 ec 0c             	sub    $0xc,%esp
   12f0f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f12:	50                   	push   %eax
   12f13:	e8 87 fd ff ff       	call   12c9f <list_get_last>
   12f18:	83 c4 10             	add    $0x10,%esp
   12f1b:	89 c3                	mov    %eax,%ebx
   12f1d:	83 ec 0c             	sub    $0xc,%esp
   12f20:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12f23:	50                   	push   %eax
   12f24:	e8 4a fd ff ff       	call   12c73 <list_get_first>
   12f29:	83 c4 10             	add    $0x10,%esp
   12f2c:	56                   	push   %esi
   12f2d:	53                   	push   %ebx
   12f2e:	50                   	push   %eax
   12f2f:	68 48 49 01 00       	push   $0x14948
   12f34:	e8 44 0d 00 00       	call   13c7d <log_printf>
   12f39:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12f3c:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12f43:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12f4a:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12f51:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12f58:	8d 45 90             	lea    -0x70(%ebp),%eax
   12f5b:	83 c0 04             	add    $0x4,%eax
   12f5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12f61:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12f65:	74 08                	je     12f6f <list_test+0x2a3>
   12f67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12f6a:	83 e8 04             	sub    $0x4,%eax
   12f6d:	eb 05                	jmp    12f74 <list_test+0x2a8>
   12f6f:	b8 00 00 00 00       	mov    $0x0,%eax
   12f74:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12f77:	8d 45 90             	lea    -0x70(%ebp),%eax
   12f7a:	83 ec 08             	sub    $0x8,%esp
   12f7d:	50                   	push   %eax
   12f7e:	68 da 49 01 00       	push   $0x149da
   12f83:	e8 f5 0c 00 00       	call   13c7d <log_printf>
   12f88:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12f8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12f8e:	83 ec 08             	sub    $0x8,%esp
   12f91:	50                   	push   %eax
   12f92:	68 e8 49 01 00       	push   $0x149e8
   12f97:	e8 e1 0c 00 00       	call   13c7d <log_printf>
   12f9c:	83 c4 10             	add    $0x10,%esp

 }
   12f9f:	90                   	nop
   12fa0:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12fa3:	5b                   	pop    %ebx
   12fa4:	5e                   	pop    %esi
   12fa5:	5d                   	pop    %ebp
   12fa6:	c3                   	ret    

00012fa7 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12fa7:	55                   	push   %ebp
   12fa8:	89 e5                	mov    %esp,%ebp
   12faa:	f4                   	hlt    
   12fab:	90                   	nop
   12fac:	5d                   	pop    %ebp
   12fad:	c3                   	ret    

00012fae <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   12fae:	55                   	push   %ebp
   12faf:	89 e5                	mov    %esp,%ebp
   12fb1:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12fb4:	83 ec 08             	sub    $0x8,%esp
   12fb7:	ff 75 14             	push   0x14(%ebp)
   12fba:	68 33 4a 01 00       	push   $0x14a33
   12fbf:	e8 b9 0c 00 00       	call   13c7d <log_printf>
   12fc4:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12fc7:	ff 75 10             	push   0x10(%ebp)
   12fca:	ff 75 0c             	push   0xc(%ebp)
   12fcd:	ff 75 08             	push   0x8(%ebp)
   12fd0:	68 44 4a 01 00       	push   $0x14a44
   12fd5:	e8 a3 0c 00 00       	call   13c7d <log_printf>
   12fda:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12fdd:	e8 c5 ff ff ff       	call   12fa7 <hlt>
   12fe2:	eb f9                	jmp    12fdd <pannic+0x2f>

00012fe4 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12fe4:	55                   	push   %ebp
   12fe5:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   12fea:	83 c0 07             	add    $0x7,%eax
   12fed:	8d 50 07             	lea    0x7(%eax),%edx
   12ff0:	85 c0                	test   %eax,%eax
   12ff2:	0f 48 c2             	cmovs  %edx,%eax
   12ff5:	c1 f8 03             	sar    $0x3,%eax
}
   12ff8:	5d                   	pop    %ebp
   12ff9:	c3                   	ret    

00012ffa <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12ffa:	55                   	push   %ebp
   12ffb:	89 e5                	mov    %esp,%ebp
   12ffd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13000:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13004:	75 19                	jne    1301f <bitmap_init+0x25>
   13006:	68 60 4a 01 00       	push   $0x14a60
   1300b:	68 f4 4a 01 00       	push   $0x14af4
   13010:	6a 24                	push   $0x24
   13012:	68 78 4a 01 00       	push   $0x14a78
   13017:	e8 92 ff ff ff       	call   12fae <pannic>
   1301c:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   1301f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13023:	75 19                	jne    1303e <bitmap_init+0x44>
   13025:	68 b0 4a 01 00       	push   $0x14ab0
   1302a:	68 f4 4a 01 00       	push   $0x14af4
   1302f:	6a 25                	push   $0x25
   13031:	68 78 4a 01 00       	push   $0x14a78
   13036:	e8 73 ff ff ff       	call   12fae <pannic>
   1303b:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   1303e:	8b 45 08             	mov    0x8(%ebp),%eax
   13041:	8b 55 10             	mov    0x10(%ebp),%edx
   13044:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   13046:	8b 45 08             	mov    0x8(%ebp),%eax
   13049:	8b 55 0c             	mov    0xc(%ebp),%edx
   1304c:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1304f:	8b 45 08             	mov    0x8(%ebp),%eax
   13052:	8b 00                	mov    (%eax),%eax
   13054:	83 ec 0c             	sub    $0xc,%esp
   13057:	50                   	push   %eax
   13058:	e8 87 ff ff ff       	call   12fe4 <bitmap_byte_count>
   1305d:	83 c4 10             	add    $0x10,%esp
   13060:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   13063:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13067:	74 07                	je     13070 <bitmap_init+0x76>
   13069:	ba ff 00 00 00       	mov    $0xff,%edx
   1306e:	eb 05                	jmp    13075 <bitmap_init+0x7b>
   13070:	ba 00 00 00 00       	mov    $0x0,%edx
   13075:	8b 45 08             	mov    0x8(%ebp),%eax
   13078:	8b 40 04             	mov    0x4(%eax),%eax
   1307b:	83 ec 04             	sub    $0x4,%esp
   1307e:	ff 75 f4             	push   -0xc(%ebp)
   13081:	52                   	push   %edx
   13082:	50                   	push   %eax
   13083:	e8 28 04 00 00       	call   134b0 <kernel_memset>
   13088:	83 c4 10             	add    $0x10,%esp

}
   1308b:	90                   	nop
   1308c:	c9                   	leave  
   1308d:	c3                   	ret    

0001308e <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1308e:	55                   	push   %ebp
   1308f:	89 e5                	mov    %esp,%ebp
   13091:	53                   	push   %ebx
   13092:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13095:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13099:	75 19                	jne    130b4 <bitmap_get_bit+0x26>
   1309b:	68 60 4a 01 00       	push   $0x14a60
   130a0:	68 00 4b 01 00       	push   $0x14b00
   130a5:	6a 39                	push   $0x39
   130a7:	68 78 4a 01 00       	push   $0x14a78
   130ac:	e8 fd fe ff ff       	call   12fae <pannic>
   130b1:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   130b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   130b8:	79 19                	jns    130d3 <bitmap_get_bit+0x45>
   130ba:	68 c4 4a 01 00       	push   $0x14ac4
   130bf:	68 00 4b 01 00       	push   $0x14b00
   130c4:	6a 3a                	push   $0x3a
   130c6:	68 78 4a 01 00       	push   $0x14a78
   130cb:	e8 de fe ff ff       	call   12fae <pannic>
   130d0:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   130d3:	8b 45 08             	mov    0x8(%ebp),%eax
   130d6:	8b 48 04             	mov    0x4(%eax),%ecx
   130d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   130dc:	8d 50 07             	lea    0x7(%eax),%edx
   130df:	85 c0                	test   %eax,%eax
   130e1:	0f 48 c2             	cmovs  %edx,%eax
   130e4:	c1 f8 03             	sar    $0x3,%eax
   130e7:	01 c8                	add    %ecx,%eax
   130e9:	0f b6 00             	movzbl (%eax),%eax
   130ec:	89 c3                	mov    %eax,%ebx
   130ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   130f1:	83 e0 07             	and    $0x7,%eax
   130f4:	ba 01 00 00 00       	mov    $0x1,%edx
   130f9:	89 c1                	mov    %eax,%ecx
   130fb:	d3 e2                	shl    %cl,%edx
   130fd:	89 d0                	mov    %edx,%eax
   130ff:	21 d8                	and    %ebx,%eax
}
   13101:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13104:	c9                   	leave  
   13105:	c3                   	ret    

00013106 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   13106:	55                   	push   %ebp
   13107:	89 e5                	mov    %esp,%ebp
   13109:	56                   	push   %esi
   1310a:	53                   	push   %ebx
   1310b:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1310e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13112:	75 19                	jne    1312d <bitmap_set_bit+0x27>
   13114:	68 60 4a 01 00       	push   $0x14a60
   13119:	68 10 4b 01 00       	push   $0x14b10
   1311e:	6a 48                	push   $0x48
   13120:	68 78 4a 01 00       	push   $0x14a78
   13125:	e8 84 fe ff ff       	call   12fae <pannic>
   1312a:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   1312d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13131:	78 06                	js     13139 <bitmap_set_bit+0x33>
   13133:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13137:	79 19                	jns    13152 <bitmap_set_bit+0x4c>
   13139:	68 cf 4a 01 00       	push   $0x14acf
   1313e:	68 10 4b 01 00       	push   $0x14b10
   13143:	6a 49                	push   $0x49
   13145:	68 78 4a 01 00       	push   $0x14a78
   1314a:	e8 5f fe ff ff       	call   12fae <pannic>
   1314f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   13152:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13159:	e9 92 00 00 00       	jmp    131f0 <bitmap_set_bit+0xea>
        if (bit) {
   1315e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13162:	74 42                	je     131a6 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   13164:	8b 45 08             	mov    0x8(%ebp),%eax
   13167:	8b 48 04             	mov    0x4(%eax),%ecx
   1316a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1316d:	8d 50 07             	lea    0x7(%eax),%edx
   13170:	85 c0                	test   %eax,%eax
   13172:	0f 48 c2             	cmovs  %edx,%eax
   13175:	c1 f8 03             	sar    $0x3,%eax
   13178:	89 c2                	mov    %eax,%edx
   1317a:	89 d0                	mov    %edx,%eax
   1317c:	01 c8                	add    %ecx,%eax
   1317e:	0f b6 00             	movzbl (%eax),%eax
   13181:	89 c6                	mov    %eax,%esi
   13183:	8b 45 0c             	mov    0xc(%ebp),%eax
   13186:	83 e0 07             	and    $0x7,%eax
   13189:	bb 01 00 00 00       	mov    $0x1,%ebx
   1318e:	89 c1                	mov    %eax,%ecx
   13190:	d3 e3                	shl    %cl,%ebx
   13192:	89 d8                	mov    %ebx,%eax
   13194:	89 f1                	mov    %esi,%ecx
   13196:	09 c1                	or     %eax,%ecx
   13198:	8b 45 08             	mov    0x8(%ebp),%eax
   1319b:	8b 40 04             	mov    0x4(%eax),%eax
   1319e:	01 d0                	add    %edx,%eax
   131a0:	89 ca                	mov    %ecx,%edx
   131a2:	88 10                	mov    %dl,(%eax)
   131a4:	eb 42                	jmp    131e8 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   131a6:	8b 45 08             	mov    0x8(%ebp),%eax
   131a9:	8b 48 04             	mov    0x4(%eax),%ecx
   131ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   131af:	8d 50 07             	lea    0x7(%eax),%edx
   131b2:	85 c0                	test   %eax,%eax
   131b4:	0f 48 c2             	cmovs  %edx,%eax
   131b7:	c1 f8 03             	sar    $0x3,%eax
   131ba:	89 c2                	mov    %eax,%edx
   131bc:	89 d0                	mov    %edx,%eax
   131be:	01 c8                	add    %ecx,%eax
   131c0:	0f b6 00             	movzbl (%eax),%eax
   131c3:	89 c6                	mov    %eax,%esi
   131c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   131c8:	83 e0 07             	and    $0x7,%eax
   131cb:	bb 01 00 00 00       	mov    $0x1,%ebx
   131d0:	89 c1                	mov    %eax,%ecx
   131d2:	d3 e3                	shl    %cl,%ebx
   131d4:	89 d8                	mov    %ebx,%eax
   131d6:	f7 d0                	not    %eax
   131d8:	89 f1                	mov    %esi,%ecx
   131da:	21 c1                	and    %eax,%ecx
   131dc:	8b 45 08             	mov    0x8(%ebp),%eax
   131df:	8b 40 04             	mov    0x4(%eax),%eax
   131e2:	01 d0                	add    %edx,%eax
   131e4:	89 ca                	mov    %ecx,%edx
   131e6:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   131e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   131ec:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   131f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131f3:	3b 45 10             	cmp    0x10(%ebp),%eax
   131f6:	7d 0e                	jge    13206 <bitmap_set_bit+0x100>
   131f8:	8b 45 08             	mov    0x8(%ebp),%eax
   131fb:	8b 00                	mov    (%eax),%eax
   131fd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13200:	0f 8c 58 ff ff ff    	jl     1315e <bitmap_set_bit+0x58>
        }
    }
}
   13206:	90                   	nop
   13207:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1320a:	5b                   	pop    %ebx
   1320b:	5e                   	pop    %esi
   1320c:	5d                   	pop    %ebp
   1320d:	c3                   	ret    

0001320e <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1320e:	55                   	push   %ebp
   1320f:	89 e5                	mov    %esp,%ebp
   13211:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   13214:	83 ec 08             	sub    $0x8,%esp
   13217:	ff 75 0c             	push   0xc(%ebp)
   1321a:	ff 75 08             	push   0x8(%ebp)
   1321d:	e8 6c fe ff ff       	call   1308e <bitmap_get_bit>
   13222:	83 c4 10             	add    $0x10,%esp
   13225:	84 c0                	test   %al,%al
   13227:	0f 95 c0             	setne  %al
   1322a:	0f b6 c0             	movzbl %al,%eax
}
   1322d:	c9                   	leave  
   1322e:	c3                   	ret    

0001322f <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   1322f:	55                   	push   %ebp
   13230:	89 e5                	mov    %esp,%ebp
   13232:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13235:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13239:	75 19                	jne    13254 <bitmap_alloc_nbits+0x25>
   1323b:	68 60 4a 01 00       	push   $0x14a60
   13240:	68 20 4b 01 00       	push   $0x14b20
   13245:	6a 68                	push   $0x68
   13247:	68 78 4a 01 00       	push   $0x14a78
   1324c:	e8 5d fd ff ff       	call   12fae <pannic>
   13251:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   13254:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13258:	79 19                	jns    13273 <bitmap_alloc_nbits+0x44>
   1325a:	68 e8 4a 01 00       	push   $0x14ae8
   1325f:	68 20 4b 01 00       	push   $0x14b20
   13264:	6a 69                	push   $0x69
   13266:	68 78 4a 01 00       	push   $0x14a78
   1326b:	e8 3e fd ff ff       	call   12fae <pannic>
   13270:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   13273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   1327a:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   13281:	e9 8f 00 00 00       	jmp    13315 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   13286:	83 ec 08             	sub    $0x8,%esp
   13289:	ff 75 f4             	push   -0xc(%ebp)
   1328c:	ff 75 08             	push   0x8(%ebp)
   1328f:	e8 fa fd ff ff       	call   1308e <bitmap_get_bit>
   13294:	83 c4 10             	add    $0x10,%esp
   13297:	0f b6 c0             	movzbl %al,%eax
   1329a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1329d:	74 06                	je     132a5 <bitmap_alloc_nbits+0x76>
            search_index++;
   1329f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   132a3:	eb 70                	jmp    13315 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   132a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132a8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   132ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   132b2:	eb 2d                	jmp    132e1 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   132b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132b7:	8d 50 01             	lea    0x1(%eax),%edx
   132ba:	89 55 f4             	mov    %edx,-0xc(%ebp)
   132bd:	83 ec 08             	sub    $0x8,%esp
   132c0:	50                   	push   %eax
   132c1:	ff 75 08             	push   0x8(%ebp)
   132c4:	e8 c5 fd ff ff       	call   1308e <bitmap_get_bit>
   132c9:	83 c4 10             	add    $0x10,%esp
   132cc:	0f b6 c0             	movzbl %al,%eax
   132cf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   132d2:	74 09                	je     132dd <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   132d4:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   132db:	eb 16                	jmp    132f3 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   132dd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   132e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   132e4:	3b 45 10             	cmp    0x10(%ebp),%eax
   132e7:	7d 0a                	jge    132f3 <bitmap_alloc_nbits+0xc4>
   132e9:	8b 45 08             	mov    0x8(%ebp),%eax
   132ec:	8b 00                	mov    (%eax),%eax
   132ee:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   132f1:	7c c1                	jl     132b4 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   132f3:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   132f7:	74 1c                	je     13315 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   132f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   132fc:	f7 d0                	not    %eax
   132fe:	50                   	push   %eax
   132ff:	ff 75 10             	push   0x10(%ebp)
   13302:	ff 75 f0             	push   -0x10(%ebp)
   13305:	ff 75 08             	push   0x8(%ebp)
   13308:	e8 f9 fd ff ff       	call   13106 <bitmap_set_bit>
   1330d:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   13310:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13313:	eb 13                	jmp    13328 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   13315:	8b 45 08             	mov    0x8(%ebp),%eax
   13318:	8b 00                	mov    (%eax),%eax
   1331a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1331d:	0f 8c 63 ff ff ff    	jl     13286 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   13323:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   13328:	c9                   	leave  
   13329:	c3                   	ret    

0001332a <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1332a:	55                   	push   %ebp
   1332b:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   1332d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13331:	74 3b                	je     1336e <kernel_strcpy+0x44>
   13333:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13337:	74 35                	je     1336e <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   13339:	eb 17                	jmp    13352 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   1333b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1333e:	8d 42 01             	lea    0x1(%edx),%eax
   13341:	89 45 0c             	mov    %eax,0xc(%ebp)
   13344:	8b 45 08             	mov    0x8(%ebp),%eax
   13347:	8d 48 01             	lea    0x1(%eax),%ecx
   1334a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1334d:	0f b6 12             	movzbl (%edx),%edx
   13350:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   13352:	8b 45 08             	mov    0x8(%ebp),%eax
   13355:	0f b6 00             	movzbl (%eax),%eax
   13358:	84 c0                	test   %al,%al
   1335a:	74 0a                	je     13366 <kernel_strcpy+0x3c>
   1335c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1335f:	0f b6 00             	movzbl (%eax),%eax
   13362:	84 c0                	test   %al,%al
   13364:	75 d5                	jne    1333b <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   13366:	8b 45 08             	mov    0x8(%ebp),%eax
   13369:	c6 00 00             	movb   $0x0,(%eax)
   1336c:	eb 01                	jmp    1336f <kernel_strcpy+0x45>
    if (!dest || !src) return;
   1336e:	90                   	nop
    
}
   1336f:	5d                   	pop    %ebp
   13370:	c3                   	ret    

00013371 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   13371:	55                   	push   %ebp
   13372:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   13374:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13378:	74 45                	je     133bf <kernel_strncpy+0x4e>
   1337a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1337e:	74 3f                	je     133bf <kernel_strncpy+0x4e>
   13380:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13384:	74 39                	je     133bf <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   13386:	eb 17                	jmp    1339f <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   13388:	8b 55 0c             	mov    0xc(%ebp),%edx
   1338b:	8d 42 01             	lea    0x1(%edx),%eax
   1338e:	89 45 0c             	mov    %eax,0xc(%ebp)
   13391:	8b 45 08             	mov    0x8(%ebp),%eax
   13394:	8d 48 01             	lea    0x1(%eax),%ecx
   13397:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1339a:	0f b6 12             	movzbl (%edx),%edx
   1339d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   1339f:	8b 45 10             	mov    0x10(%ebp),%eax
   133a2:	8d 50 ff             	lea    -0x1(%eax),%edx
   133a5:	89 55 10             	mov    %edx,0x10(%ebp)
   133a8:	83 f8 01             	cmp    $0x1,%eax
   133ab:	7e 0a                	jle    133b7 <kernel_strncpy+0x46>
   133ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   133b0:	0f b6 00             	movzbl (%eax),%eax
   133b3:	84 c0                	test   %al,%al
   133b5:	75 d1                	jne    13388 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   133b7:	8b 45 08             	mov    0x8(%ebp),%eax
   133ba:	c6 00 00             	movb   $0x0,(%eax)
   133bd:	eb 01                	jmp    133c0 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   133bf:	90                   	nop
}
   133c0:	5d                   	pop    %ebp
   133c1:	c3                   	ret    

000133c2 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   133c2:	55                   	push   %ebp
   133c3:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   133c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   133c9:	74 06                	je     133d1 <kernel_strncmp+0xf>
   133cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   133cf:	75 0f                	jne    133e0 <kernel_strncmp+0x1e>
   133d1:	b8 00 00 00 00       	mov    $0x0,%eax
   133d6:	eb 52                	jmp    1342a <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   133d8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   133dc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   133e0:	8b 45 08             	mov    0x8(%ebp),%eax
   133e3:	0f b6 00             	movzbl (%eax),%eax
   133e6:	84 c0                	test   %al,%al
   133e8:	74 24                	je     1340e <kernel_strncmp+0x4c>
   133ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   133ed:	0f b6 00             	movzbl (%eax),%eax
   133f0:	84 c0                	test   %al,%al
   133f2:	74 1a                	je     1340e <kernel_strncmp+0x4c>
   133f4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   133f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   133fc:	74 10                	je     1340e <kernel_strncmp+0x4c>
   133fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13401:	0f b6 10             	movzbl (%eax),%edx
   13404:	8b 45 0c             	mov    0xc(%ebp),%eax
   13407:	0f b6 00             	movzbl (%eax),%eax
   1340a:	38 c2                	cmp    %al,%dl
   1340c:	74 ca                	je     133d8 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   1340e:	8b 45 08             	mov    0x8(%ebp),%eax
   13411:	0f b6 10             	movzbl (%eax),%edx
   13414:	8b 45 0c             	mov    0xc(%ebp),%eax
   13417:	0f b6 00             	movzbl (%eax),%eax
   1341a:	38 c2                	cmp    %al,%dl
   1341c:	7e 07                	jle    13425 <kernel_strncmp+0x63>
   1341e:	b8 01 00 00 00       	mov    $0x1,%eax
   13423:	eb 05                	jmp    1342a <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   13425:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   1342a:	5d                   	pop    %ebp
   1342b:	c3                   	ret    

0001342c <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   1342c:	55                   	push   %ebp
   1342d:	89 e5                	mov    %esp,%ebp
   1342f:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   13432:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13436:	75 07                	jne    1343f <kernel_strlen+0x13>
   13438:	b8 00 00 00 00       	mov    $0x0,%eax
   1343d:	eb 20                	jmp    1345f <kernel_strlen+0x33>

    int len = 0;
   1343f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   13446:	eb 04                	jmp    1344c <kernel_strlen+0x20>
   13448:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1344c:	8b 45 08             	mov    0x8(%ebp),%eax
   1344f:	8d 50 01             	lea    0x1(%eax),%edx
   13452:	89 55 08             	mov    %edx,0x8(%ebp)
   13455:	0f b6 00             	movzbl (%eax),%eax
   13458:	84 c0                	test   %al,%al
   1345a:	75 ec                	jne    13448 <kernel_strlen+0x1c>

    return len;
   1345c:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   1345f:	c9                   	leave  
   13460:	c3                   	ret    

00013461 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   13461:	55                   	push   %ebp
   13462:	89 e5                	mov    %esp,%ebp
   13464:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   13467:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1346b:	74 40                	je     134ad <kernel_memcpy+0x4c>
   1346d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13471:	74 3a                	je     134ad <kernel_memcpy+0x4c>
   13473:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13477:	74 34                	je     134ad <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   13479:	8b 45 08             	mov    0x8(%ebp),%eax
   1347c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   1347f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13482:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   13485:	eb 17                	jmp    1349e <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   13487:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1348a:	8d 42 01             	lea    0x1(%edx),%eax
   1348d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13490:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13493:	8d 48 01             	lea    0x1(%eax),%ecx
   13496:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   13499:	0f b6 12             	movzbl (%edx),%edx
   1349c:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1349e:	8b 45 10             	mov    0x10(%ebp),%eax
   134a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   134a4:	89 55 10             	mov    %edx,0x10(%ebp)
   134a7:	85 c0                	test   %eax,%eax
   134a9:	75 dc                	jne    13487 <kernel_memcpy+0x26>
   134ab:	eb 01                	jmp    134ae <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   134ad:	90                   	nop
    }
    
}
   134ae:	c9                   	leave  
   134af:	c3                   	ret    

000134b0 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   134b0:	55                   	push   %ebp
   134b1:	89 e5                	mov    %esp,%ebp
   134b3:	83 ec 14             	sub    $0x14,%esp
   134b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   134b9:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   134bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   134c0:	74 2c                	je     134ee <kernel_memset+0x3e>
   134c2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   134c6:	74 26                	je     134ee <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   134c8:	8b 45 08             	mov    0x8(%ebp),%eax
   134cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   134ce:	eb 0f                	jmp    134df <kernel_memset+0x2f>
        *(d++) = v;
   134d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134d3:	8d 50 01             	lea    0x1(%eax),%edx
   134d6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   134d9:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   134dd:	88 10                	mov    %dl,(%eax)
    while (size--) {
   134df:	8b 45 10             	mov    0x10(%ebp),%eax
   134e2:	8d 50 ff             	lea    -0x1(%eax),%edx
   134e5:	89 55 10             	mov    %edx,0x10(%ebp)
   134e8:	85 c0                	test   %eax,%eax
   134ea:	75 e4                	jne    134d0 <kernel_memset+0x20>
   134ec:	eb 01                	jmp    134ef <kernel_memset+0x3f>
    if (!dest || !size) return;
   134ee:	90                   	nop
    }
    
}
   134ef:	c9                   	leave  
   134f0:	c3                   	ret    

000134f1 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   134f1:	55                   	push   %ebp
   134f2:	89 e5                	mov    %esp,%ebp
   134f4:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   134f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   134fb:	74 0c                	je     13509 <kernel_memcmp+0x18>
   134fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13501:	74 06                	je     13509 <kernel_memcmp+0x18>
   13503:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13507:	75 07                	jne    13510 <kernel_memcmp+0x1f>
   13509:	b8 00 00 00 00       	mov    $0x0,%eax
   1350e:	eb 63                	jmp    13573 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   13510:	8b 45 08             	mov    0x8(%ebp),%eax
   13513:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   13516:	8b 45 0c             	mov    0xc(%ebp),%eax
   13519:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   1351c:	eb 08                	jmp    13526 <kernel_memcmp+0x35>
        d1++;
   1351e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   13522:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   13526:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1352a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1352e:	74 10                	je     13540 <kernel_memcmp+0x4f>
   13530:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13533:	0f b6 10             	movzbl (%eax),%edx
   13536:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13539:	0f b6 00             	movzbl (%eax),%eax
   1353c:	38 c2                	cmp    %al,%dl
   1353e:	74 de                	je     1351e <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   13540:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13543:	0f b6 10             	movzbl (%eax),%edx
   13546:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13549:	0f b6 00             	movzbl (%eax),%eax
   1354c:	38 c2                	cmp    %al,%dl
   1354e:	76 07                	jbe    13557 <kernel_memcmp+0x66>
   13550:	b8 01 00 00 00       	mov    $0x1,%eax
   13555:	eb 1c                	jmp    13573 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   13557:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1355a:	0f b6 10             	movzbl (%eax),%edx
   1355d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13560:	0f b6 00             	movzbl (%eax),%eax
   13563:	38 c2                	cmp    %al,%dl
   13565:	73 07                	jae    1356e <kernel_memcmp+0x7d>
   13567:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1356c:	eb 05                	jmp    13573 <kernel_memcmp+0x82>
    else return 0;
   1356e:	b8 00 00 00 00       	mov    $0x0,%eax

}
   13573:	c9                   	leave  
   13574:	c3                   	ret    

00013575 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   13575:	55                   	push   %ebp
   13576:	89 e5                	mov    %esp,%ebp
   13578:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1357b:	8d 45 10             	lea    0x10(%ebp),%eax
   1357e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   13581:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13584:	83 ec 04             	sub    $0x4,%esp
   13587:	50                   	push   %eax
   13588:	ff 75 0c             	push   0xc(%ebp)
   1358b:	ff 75 08             	push   0x8(%ebp)
   1358e:	e8 06 00 00 00       	call   13599 <kernel_vsprintf>
   13593:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   13596:	90                   	nop
   13597:	c9                   	leave  
   13598:	c3                   	ret    

00013599 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   13599:	55                   	push   %ebp
   1359a:	89 e5                	mov    %esp,%ebp
   1359c:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   1359f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   135a6:	8b 45 08             	mov    0x8(%ebp),%eax
   135a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   135ac:	e9 68 01 00 00       	jmp    13719 <kernel_vsprintf+0x180>
        switch (state) {
   135b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   135b5:	74 0b                	je     135c2 <kernel_vsprintf+0x29>
   135b7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   135bb:	74 2b                	je     135e8 <kernel_vsprintf+0x4f>
   135bd:	e9 56 01 00 00       	jmp    13718 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   135c2:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   135c6:	75 0c                	jne    135d4 <kernel_vsprintf+0x3b>
   135c8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   135cf:	e9 45 01 00 00       	jmp    13719 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   135d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   135d7:	8d 50 01             	lea    0x1(%eax),%edx
   135da:	89 55 f0             	mov    %edx,-0x10(%ebp)
   135dd:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   135e1:	88 10                	mov    %dl,(%eax)
            break;
   135e3:	e9 31 01 00 00       	jmp    13719 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   135e8:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   135ec:	75 47                	jne    13635 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   135ee:	8b 45 10             	mov    0x10(%ebp),%eax
   135f1:	8d 50 04             	lea    0x4(%eax),%edx
   135f4:	89 55 10             	mov    %edx,0x10(%ebp)
   135f7:	8b 00                	mov    (%eax),%eax
   135f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   135fc:	ff 75 ec             	push   -0x14(%ebp)
   135ff:	e8 28 fe ff ff       	call   1342c <kernel_strlen>
   13604:	83 c4 04             	add    $0x4,%esp
   13607:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   1360a:	eb 17                	jmp    13623 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   1360c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1360f:	8d 42 01             	lea    0x1(%edx),%eax
   13612:	89 45 ec             	mov    %eax,-0x14(%ebp)
   13615:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13618:	8d 48 01             	lea    0x1(%eax),%ecx
   1361b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1361e:	0f b6 12             	movzbl (%edx),%edx
   13621:	88 10                	mov    %dl,(%eax)
                while (len--) {
   13623:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13626:	8d 50 ff             	lea    -0x1(%eax),%edx
   13629:	89 55 e8             	mov    %edx,-0x18(%ebp)
   1362c:	85 c0                	test   %eax,%eax
   1362e:	75 dc                	jne    1360c <kernel_vsprintf+0x73>
   13630:	e9 da 00 00 00       	jmp    1370f <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   13635:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   13639:	75 37                	jne    13672 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   1363b:	8b 45 10             	mov    0x10(%ebp),%eax
   1363e:	8d 50 04             	lea    0x4(%eax),%edx
   13641:	89 55 10             	mov    %edx,0x10(%ebp)
   13644:	8b 00                	mov    (%eax),%eax
   13646:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   13649:	83 ec 04             	sub    $0x4,%esp
   1364c:	6a 0a                	push   $0xa
   1364e:	ff 75 d8             	push   -0x28(%ebp)
   13651:	ff 75 f0             	push   -0x10(%ebp)
   13654:	e8 dd 00 00 00       	call   13736 <kernel_itoa>
   13659:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   1365c:	83 ec 0c             	sub    $0xc,%esp
   1365f:	ff 75 f0             	push   -0x10(%ebp)
   13662:	e8 c5 fd ff ff       	call   1342c <kernel_strlen>
   13667:	83 c4 10             	add    $0x10,%esp
   1366a:	01 45 f0             	add    %eax,-0x10(%ebp)
   1366d:	e9 9d 00 00 00       	jmp    1370f <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   13672:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   13676:	74 06                	je     1367e <kernel_vsprintf+0xe5>
   13678:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   1367c:	75 34                	jne    136b2 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   1367e:	8b 45 10             	mov    0x10(%ebp),%eax
   13681:	8d 50 04             	lea    0x4(%eax),%edx
   13684:	89 55 10             	mov    %edx,0x10(%ebp)
   13687:	8b 00                	mov    (%eax),%eax
   13689:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   1368c:	83 ec 04             	sub    $0x4,%esp
   1368f:	6a 10                	push   $0x10
   13691:	ff 75 dc             	push   -0x24(%ebp)
   13694:	ff 75 f0             	push   -0x10(%ebp)
   13697:	e8 9a 00 00 00       	call   13736 <kernel_itoa>
   1369c:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1369f:	83 ec 0c             	sub    $0xc,%esp
   136a2:	ff 75 f0             	push   -0x10(%ebp)
   136a5:	e8 82 fd ff ff       	call   1342c <kernel_strlen>
   136aa:	83 c4 10             	add    $0x10,%esp
   136ad:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   136b0:	eb 5d                	jmp    1370f <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   136b2:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   136b6:	75 34                	jne    136ec <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   136b8:	8b 45 10             	mov    0x10(%ebp),%eax
   136bb:	8d 50 04             	lea    0x4(%eax),%edx
   136be:	89 55 10             	mov    %edx,0x10(%ebp)
   136c1:	8b 00                	mov    (%eax),%eax
   136c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   136c6:	83 ec 04             	sub    $0x4,%esp
   136c9:	6a 02                	push   $0x2
   136cb:	ff 75 e0             	push   -0x20(%ebp)
   136ce:	ff 75 f0             	push   -0x10(%ebp)
   136d1:	e8 60 00 00 00       	call   13736 <kernel_itoa>
   136d6:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   136d9:	83 ec 0c             	sub    $0xc,%esp
   136dc:	ff 75 f0             	push   -0x10(%ebp)
   136df:	e8 48 fd ff ff       	call   1342c <kernel_strlen>
   136e4:	83 c4 10             	add    $0x10,%esp
   136e7:	01 45 f0             	add    %eax,-0x10(%ebp)
   136ea:	eb 23                	jmp    1370f <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   136ec:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   136f0:	75 1d                	jne    1370f <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   136f2:	8b 45 10             	mov    0x10(%ebp),%eax
   136f5:	8d 50 04             	lea    0x4(%eax),%edx
   136f8:	89 55 10             	mov    %edx,0x10(%ebp)
   136fb:	8b 00                	mov    (%eax),%eax
   136fd:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   13700:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13703:	8d 50 01             	lea    0x1(%eax),%edx
   13706:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13709:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1370d:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   1370f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   13716:	eb 01                	jmp    13719 <kernel_vsprintf+0x180>
        default:
            break;
   13718:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   13719:	8b 45 0c             	mov    0xc(%ebp),%eax
   1371c:	8d 50 01             	lea    0x1(%eax),%edx
   1371f:	89 55 0c             	mov    %edx,0xc(%ebp)
   13722:	0f b6 00             	movzbl (%eax),%eax
   13725:	88 45 e7             	mov    %al,-0x19(%ebp)
   13728:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   1372c:	0f 85 7f fe ff ff    	jne    135b1 <kernel_vsprintf+0x18>
        }
    }
    

}
   13732:	90                   	nop
   13733:	90                   	nop
   13734:	c9                   	leave  
   13735:	c3                   	ret    

00013736 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   13736:	55                   	push   %ebp
   13737:	89 e5                	mov    %esp,%ebp
   13739:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   1373f:	8b 45 08             	mov    0x8(%ebp),%eax
   13742:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   13745:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   13749:	74 1d                	je     13768 <kernel_itoa+0x32>
   1374b:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1374f:	74 17                	je     13768 <kernel_itoa+0x32>
   13751:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13755:	74 11                	je     13768 <kernel_itoa+0x32>
   13757:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1375b:	74 0b                	je     13768 <kernel_itoa+0x32>
        *buf = '\0';
   1375d:	8b 45 08             	mov    0x8(%ebp),%eax
   13760:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13763:	e9 a2 00 00 00       	jmp    1380a <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   13768:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1376c:	79 11                	jns    1377f <kernel_itoa+0x49>
        *(p++) = '-';
   1376e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13771:	8d 50 01             	lea    0x1(%eax),%edx
   13774:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13777:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   1377a:	f7 5d 0c             	negl   0xc(%ebp)
   1377d:	eb 1a                	jmp    13799 <kernel_itoa+0x63>
    } else if (num == 0) {
   1377f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13783:	75 14                	jne    13799 <kernel_itoa+0x63>
        *(p++) = '0';
   13785:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13788:	8d 50 01             	lea    0x1(%eax),%edx
   1378b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1378e:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   13791:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13794:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13797:	eb 71                	jmp    1380a <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   13799:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   137a0:	eb 2e                	jmp    137d0 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   137a2:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   137a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   137ab:	99                   	cltd   
   137ac:	f7 7d 10             	idivl  0x10(%ebp)
   137af:	89 d0                	mov    %edx,%eax
   137b1:	01 c1                	add    %eax,%ecx
   137b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   137b6:	8d 50 01             	lea    0x1(%eax),%edx
   137b9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   137bc:	0f b6 11             	movzbl (%ecx),%edx
   137bf:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   137c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   137c9:	99                   	cltd   
   137ca:	f7 7d 10             	idivl  0x10(%ebp)
   137cd:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   137d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   137d4:	7f cc                	jg     137a2 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   137d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   137d9:	83 e8 01             	sub    $0x1,%eax
   137dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
   137df:	eb 1d                	jmp    137fe <kernel_itoa+0xc8>
            *(p++) = arr[i];
   137e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137e4:	8d 50 01             	lea    0x1(%eax),%edx
   137e7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   137ea:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   137f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   137f3:	01 ca                	add    %ecx,%edx
   137f5:	0f b6 12             	movzbl (%edx),%edx
   137f8:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   137fa:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   137fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13802:	79 dd                	jns    137e1 <kernel_itoa+0xab>
    }
    *p = '\0';
   13804:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13807:	c6 00 00             	movb   $0x0,(%eax)
   1380a:	c9                   	leave  
   1380b:	c3                   	ret    

0001380c <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1380c:	55                   	push   %ebp
   1380d:	89 e5                	mov    %esp,%ebp
   1380f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13812:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13816:	75 19                	jne    13831 <list_is_empty+0x25>
   13818:	68 44 4b 01 00       	push   $0x14b44
   1381d:	68 28 4c 01 00       	push   $0x14c28
   13822:	6a 38                	push   $0x38
   13824:	68 58 4b 01 00       	push   $0x14b58
   13829:	e8 80 f7 ff ff       	call   12fae <pannic>
   1382e:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   13831:	8b 45 08             	mov    0x8(%ebp),%eax
   13834:	8b 40 08             	mov    0x8(%eax),%eax
   13837:	85 c0                	test   %eax,%eax
   13839:	0f 94 c0             	sete   %al
   1383c:	0f b6 c0             	movzbl %al,%eax
}
   1383f:	c9                   	leave  
   13840:	c3                   	ret    

00013841 <list_get_size>:
static inline int list_get_size(list_t *list) {
   13841:	55                   	push   %ebp
   13842:	89 e5                	mov    %esp,%ebp
   13844:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13847:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1384b:	75 19                	jne    13866 <list_get_size+0x25>
   1384d:	68 44 4b 01 00       	push   $0x14b44
   13852:	68 60 4c 01 00       	push   $0x14c60
   13857:	6a 3e                	push   $0x3e
   13859:	68 58 4b 01 00       	push   $0x14b58
   1385e:	e8 4b f7 ff ff       	call   12fae <pannic>
   13863:	83 c4 10             	add    $0x10,%esp
    return list->size;
   13866:	8b 45 08             	mov    0x8(%ebp),%eax
   13869:	8b 40 08             	mov    0x8(%eax),%eax
}
   1386c:	c9                   	leave  
   1386d:	c3                   	ret    

0001386e <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   1386e:	55                   	push   %ebp
   1386f:	89 e5                	mov    %esp,%ebp
   13871:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13874:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13878:	74 06                	je     13880 <list_insert_first+0x12>
   1387a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1387e:	75 19                	jne    13899 <list_insert_first+0x2b>
   13880:	68 98 4b 01 00       	push   $0x14b98
   13885:	68 14 4c 01 00       	push   $0x14c14
   1388a:	6a 0f                	push   $0xf
   1388c:	68 c8 4b 01 00       	push   $0x14bc8
   13891:	e8 18 f7 ff ff       	call   12fae <pannic>
   13896:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   13899:	8b 45 08             	mov    0x8(%ebp),%eax
   1389c:	8b 10                	mov    (%eax),%edx
   1389e:	8b 45 0c             	mov    0xc(%ebp),%eax
   138a1:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   138a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   138a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   138ad:	83 ec 0c             	sub    $0xc,%esp
   138b0:	ff 75 08             	push   0x8(%ebp)
   138b3:	e8 54 ff ff ff       	call   1380c <list_is_empty>
   138b8:	83 c4 10             	add    $0x10,%esp
   138bb:	85 c0                	test   %eax,%eax
   138bd:	74 16                	je     138d5 <list_insert_first+0x67>
        list->first = list->last = node;
   138bf:	8b 45 08             	mov    0x8(%ebp),%eax
   138c2:	8b 55 0c             	mov    0xc(%ebp),%edx
   138c5:	89 50 04             	mov    %edx,0x4(%eax)
   138c8:	8b 45 08             	mov    0x8(%ebp),%eax
   138cb:	8b 50 04             	mov    0x4(%eax),%edx
   138ce:	8b 45 08             	mov    0x8(%ebp),%eax
   138d1:	89 10                	mov    %edx,(%eax)
   138d3:	eb 12                	jmp    138e7 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   138d5:	8b 45 08             	mov    0x8(%ebp),%eax
   138d8:	8b 00                	mov    (%eax),%eax
   138da:	8b 55 0c             	mov    0xc(%ebp),%edx
   138dd:	89 10                	mov    %edx,(%eax)
        list->first = node;
   138df:	8b 45 08             	mov    0x8(%ebp),%eax
   138e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   138e5:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   138e7:	8b 45 08             	mov    0x8(%ebp),%eax
   138ea:	8b 40 08             	mov    0x8(%eax),%eax
   138ed:	8d 50 01             	lea    0x1(%eax),%edx
   138f0:	8b 45 08             	mov    0x8(%ebp),%eax
   138f3:	89 50 08             	mov    %edx,0x8(%eax)
}
   138f6:	90                   	nop
   138f7:	c9                   	leave  
   138f8:	c3                   	ret    

000138f9 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   138f9:	55                   	push   %ebp
   138fa:	89 e5                	mov    %esp,%ebp
   138fc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   138ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13903:	74 06                	je     1390b <list_insert_last+0x12>
   13905:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13909:	75 19                	jne    13924 <list_insert_last+0x2b>
   1390b:	68 98 4b 01 00       	push   $0x14b98
   13910:	68 38 4c 01 00       	push   $0x14c38
   13915:	6a 1f                	push   $0x1f
   13917:	68 c8 4b 01 00       	push   $0x14bc8
   1391c:	e8 8d f6 ff ff       	call   12fae <pannic>
   13921:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   13924:	8b 45 08             	mov    0x8(%ebp),%eax
   13927:	8b 50 04             	mov    0x4(%eax),%edx
   1392a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1392d:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1392f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13932:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   13939:	83 ec 0c             	sub    $0xc,%esp
   1393c:	ff 75 08             	push   0x8(%ebp)
   1393f:	e8 c8 fe ff ff       	call   1380c <list_is_empty>
   13944:	83 c4 10             	add    $0x10,%esp
   13947:	85 c0                	test   %eax,%eax
   13949:	74 16                	je     13961 <list_insert_last+0x68>
        list->first = list->last = node;
   1394b:	8b 45 08             	mov    0x8(%ebp),%eax
   1394e:	8b 55 0c             	mov    0xc(%ebp),%edx
   13951:	89 50 04             	mov    %edx,0x4(%eax)
   13954:	8b 45 08             	mov    0x8(%ebp),%eax
   13957:	8b 50 04             	mov    0x4(%eax),%edx
   1395a:	8b 45 08             	mov    0x8(%ebp),%eax
   1395d:	89 10                	mov    %edx,(%eax)
   1395f:	eb 15                	jmp    13976 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   13961:	8b 45 08             	mov    0x8(%ebp),%eax
   13964:	8b 40 04             	mov    0x4(%eax),%eax
   13967:	8b 55 0c             	mov    0xc(%ebp),%edx
   1396a:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1396d:	8b 45 08             	mov    0x8(%ebp),%eax
   13970:	8b 55 0c             	mov    0xc(%ebp),%edx
   13973:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   13976:	8b 45 08             	mov    0x8(%ebp),%eax
   13979:	8b 40 08             	mov    0x8(%eax),%eax
   1397c:	8d 50 01             	lea    0x1(%eax),%edx
   1397f:	8b 45 08             	mov    0x8(%ebp),%eax
   13982:	89 50 08             	mov    %edx,0x8(%eax)

}
   13985:	90                   	nop
   13986:	c9                   	leave  
   13987:	c3                   	ret    

00013988 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   13988:	55                   	push   %ebp
   13989:	89 e5                	mov    %esp,%ebp
   1398b:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1398e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13992:	75 19                	jne    139ad <list_remove_first+0x25>
   13994:	68 fe 4b 01 00       	push   $0x14bfe
   13999:	68 4c 4c 01 00       	push   $0x14c4c
   1399e:	6a 31                	push   $0x31
   139a0:	68 c8 4b 01 00       	push   $0x14bc8
   139a5:	e8 04 f6 ff ff       	call   12fae <pannic>
   139aa:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   139ad:	83 ec 0c             	sub    $0xc,%esp
   139b0:	ff 75 08             	push   0x8(%ebp)
   139b3:	e8 54 fe ff ff       	call   1380c <list_is_empty>
   139b8:	83 c4 10             	add    $0x10,%esp
   139bb:	85 c0                	test   %eax,%eax
   139bd:	74 07                	je     139c6 <list_remove_first+0x3e>
        return (list_node_t*)0;
   139bf:	b8 00 00 00 00       	mov    $0x0,%eax
   139c4:	eb 71                	jmp    13a37 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   139c6:	8b 45 08             	mov    0x8(%ebp),%eax
   139c9:	8b 00                	mov    (%eax),%eax
   139cb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   139ce:	83 ec 0c             	sub    $0xc,%esp
   139d1:	ff 75 08             	push   0x8(%ebp)
   139d4:	e8 68 fe ff ff       	call   13841 <list_get_size>
   139d9:	83 c4 10             	add    $0x10,%esp
   139dc:	83 f8 01             	cmp    $0x1,%eax
   139df:	75 17                	jne    139f8 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   139e1:	8b 45 08             	mov    0x8(%ebp),%eax
   139e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   139eb:	8b 45 08             	mov    0x8(%ebp),%eax
   139ee:	8b 50 04             	mov    0x4(%eax),%edx
   139f1:	8b 45 08             	mov    0x8(%ebp),%eax
   139f4:	89 10                	mov    %edx,(%eax)
   139f6:	eb 18                	jmp    13a10 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   139f8:	8b 45 08             	mov    0x8(%ebp),%eax
   139fb:	8b 00                	mov    (%eax),%eax
   139fd:	8b 50 04             	mov    0x4(%eax),%edx
   13a00:	8b 45 08             	mov    0x8(%ebp),%eax
   13a03:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   13a05:	8b 45 08             	mov    0x8(%ebp),%eax
   13a08:	8b 00                	mov    (%eax),%eax
   13a0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   13a10:	8b 45 08             	mov    0x8(%ebp),%eax
   13a13:	8b 40 08             	mov    0x8(%eax),%eax
   13a16:	8d 50 ff             	lea    -0x1(%eax),%edx
   13a19:	8b 45 08             	mov    0x8(%ebp),%eax
   13a1c:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a22:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a2c:	8b 50 04             	mov    0x4(%eax),%edx
   13a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a32:	89 10                	mov    %edx,(%eax)
    return ret;
   13a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   13a37:	c9                   	leave  
   13a38:	c3                   	ret    

00013a39 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   13a39:	55                   	push   %ebp
   13a3a:	89 e5                	mov    %esp,%ebp
   13a3c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   13a3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13a43:	75 19                	jne    13a5e <list_remove_last+0x25>
   13a45:	68 fe 4b 01 00       	push   $0x14bfe
   13a4a:	68 70 4c 01 00       	push   $0x14c70
   13a4f:	6a 46                	push   $0x46
   13a51:	68 c8 4b 01 00       	push   $0x14bc8
   13a56:	e8 53 f5 ff ff       	call   12fae <pannic>
   13a5b:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   13a5e:	83 ec 0c             	sub    $0xc,%esp
   13a61:	ff 75 08             	push   0x8(%ebp)
   13a64:	e8 a3 fd ff ff       	call   1380c <list_is_empty>
   13a69:	83 c4 10             	add    $0x10,%esp
   13a6c:	85 c0                	test   %eax,%eax
   13a6e:	74 07                	je     13a77 <list_remove_last+0x3e>
        return (list_node_t*)0;
   13a70:	b8 00 00 00 00       	mov    $0x0,%eax
   13a75:	eb 75                	jmp    13aec <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   13a77:	8b 45 08             	mov    0x8(%ebp),%eax
   13a7a:	8b 40 04             	mov    0x4(%eax),%eax
   13a7d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13a80:	83 ec 0c             	sub    $0xc,%esp
   13a83:	ff 75 08             	push   0x8(%ebp)
   13a86:	e8 b6 fd ff ff       	call   13841 <list_get_size>
   13a8b:	83 c4 10             	add    $0x10,%esp
   13a8e:	83 f8 01             	cmp    $0x1,%eax
   13a91:	75 17                	jne    13aaa <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   13a93:	8b 45 08             	mov    0x8(%ebp),%eax
   13a96:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13a9d:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa0:	8b 50 04             	mov    0x4(%eax),%edx
   13aa3:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa6:	89 10                	mov    %edx,(%eax)
   13aa8:	eb 1b                	jmp    13ac5 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   13aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   13aad:	8b 40 04             	mov    0x4(%eax),%eax
   13ab0:	8b 10                	mov    (%eax),%edx
   13ab2:	8b 45 08             	mov    0x8(%ebp),%eax
   13ab5:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   13ab8:	8b 45 08             	mov    0x8(%ebp),%eax
   13abb:	8b 40 04             	mov    0x4(%eax),%eax
   13abe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   13ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ac8:	8b 40 08             	mov    0x8(%eax),%eax
   13acb:	8d 50 ff             	lea    -0x1(%eax),%edx
   13ace:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad1:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ad7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ae1:	8b 50 04             	mov    0x4(%eax),%edx
   13ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ae7:	89 10                	mov    %edx,(%eax)
    return ret;
   13ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13aec:	c9                   	leave  
   13aed:	c3                   	ret    

00013aee <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13aee:	55                   	push   %ebp
   13aef:	89 e5                	mov    %esp,%ebp
   13af1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13af4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13af8:	74 06                	je     13b00 <list_remove+0x12>
   13afa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13afe:	75 19                	jne    13b19 <list_remove+0x2b>
   13b00:	68 98 4b 01 00       	push   $0x14b98
   13b05:	68 84 4c 01 00       	push   $0x14c84
   13b0a:	6a 5b                	push   $0x5b
   13b0c:	68 c8 4b 01 00       	push   $0x14bc8
   13b11:	e8 98 f4 ff ff       	call   12fae <pannic>
   13b16:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   13b19:	83 ec 0c             	sub    $0xc,%esp
   13b1c:	ff 75 08             	push   0x8(%ebp)
   13b1f:	e8 e8 fc ff ff       	call   1380c <list_is_empty>
   13b24:	83 c4 10             	add    $0x10,%esp
   13b27:	85 c0                	test   %eax,%eax
   13b29:	74 0a                	je     13b35 <list_remove+0x47>
        return (list_node_t*)0;
   13b2b:	b8 00 00 00 00       	mov    $0x0,%eax
   13b30:	e9 80 00 00 00       	jmp    13bb5 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   13b35:	8b 45 08             	mov    0x8(%ebp),%eax
   13b38:	8b 00                	mov    (%eax),%eax
   13b3a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13b3d:	75 0b                	jne    13b4a <list_remove+0x5c>
   13b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b42:	8b 50 04             	mov    0x4(%eax),%edx
   13b45:	8b 45 08             	mov    0x8(%ebp),%eax
   13b48:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   13b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b4d:	8b 40 04             	mov    0x4(%eax),%eax
   13b50:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13b53:	75 0b                	jne    13b60 <list_remove+0x72>
   13b55:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b58:	8b 10                	mov    (%eax),%edx
   13b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b5d:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   13b60:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b63:	8b 00                	mov    (%eax),%eax
   13b65:	85 c0                	test   %eax,%eax
   13b67:	74 0e                	je     13b77 <list_remove+0x89>
   13b69:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b6c:	8b 00                	mov    (%eax),%eax
   13b6e:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b71:	8b 52 04             	mov    0x4(%edx),%edx
   13b74:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   13b77:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b7a:	8b 40 04             	mov    0x4(%eax),%eax
   13b7d:	85 c0                	test   %eax,%eax
   13b7f:	74 0d                	je     13b8e <list_remove+0xa0>
   13b81:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b84:	8b 40 04             	mov    0x4(%eax),%eax
   13b87:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b8a:	8b 12                	mov    (%edx),%edx
   13b8c:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   13b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b91:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13b98:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b9b:	8b 50 04             	mov    0x4(%eax),%edx
   13b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ba1:	89 10                	mov    %edx,(%eax)
    list->size--;
   13ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba6:	8b 40 08             	mov    0x8(%eax),%eax
   13ba9:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bac:	8b 45 08             	mov    0x8(%ebp),%eax
   13baf:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   13bb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bb5:	c9                   	leave  
   13bb6:	c3                   	ret    

00013bb7 <inb>:
static inline uint8_t inb(uint16_t port) {
   13bb7:	55                   	push   %ebp
   13bb8:	89 e5                	mov    %esp,%ebp
   13bba:	83 ec 14             	sub    $0x14,%esp
   13bbd:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13bc4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13bc8:	89 c2                	mov    %eax,%edx
   13bca:	ec                   	in     (%dx),%al
   13bcb:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13bce:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13bd2:	c9                   	leave  
   13bd3:	c3                   	ret    

00013bd4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13bd4:	55                   	push   %ebp
   13bd5:	89 e5                	mov    %esp,%ebp
   13bd7:	83 ec 08             	sub    $0x8,%esp
   13bda:	8b 45 08             	mov    0x8(%ebp),%eax
   13bdd:	8b 55 0c             	mov    0xc(%ebp),%edx
   13be0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13be4:	89 d0                	mov    %edx,%eax
   13be6:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13be9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13bed:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13bf1:	ee                   	out    %al,(%dx)
}
   13bf2:	90                   	nop
   13bf3:	c9                   	leave  
   13bf4:	c3                   	ret    

00013bf5 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13bf5:	55                   	push   %ebp
   13bf6:	89 e5                	mov    %esp,%ebp
   13bf8:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13bfb:	6a 00                	push   $0x0
   13bfd:	68 f9 03 00 00       	push   $0x3f9
   13c02:	e8 cd ff ff ff       	call   13bd4 <outb>
   13c07:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13c0a:	68 80 00 00 00       	push   $0x80
   13c0f:	68 fb 03 00 00       	push   $0x3fb
   13c14:	e8 bb ff ff ff       	call   13bd4 <outb>
   13c19:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13c1c:	6a 03                	push   $0x3
   13c1e:	68 f8 03 00 00       	push   $0x3f8
   13c23:	e8 ac ff ff ff       	call   13bd4 <outb>
   13c28:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13c2b:	6a 00                	push   $0x0
   13c2d:	68 f9 03 00 00       	push   $0x3f9
   13c32:	e8 9d ff ff ff       	call   13bd4 <outb>
   13c37:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   13c3a:	6a 03                	push   $0x3
   13c3c:	68 fb 03 00 00       	push   $0x3fb
   13c41:	e8 8e ff ff ff       	call   13bd4 <outb>
   13c46:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   13c49:	68 c7 00 00 00       	push   $0xc7
   13c4e:	68 fa 03 00 00       	push   $0x3fa
   13c53:	e8 7c ff ff ff       	call   13bd4 <outb>
   13c58:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   13c5b:	6a 0f                	push   $0xf
   13c5d:	68 fc 03 00 00       	push   $0x3fc
   13c62:	e8 6d ff ff ff       	call   13bd4 <outb>
   13c67:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   13c6a:	83 ec 0c             	sub    $0xc,%esp
   13c6d:	68 04 0a 03 00       	push   $0x30a04
   13c72:	e8 22 ec ff ff       	call   12899 <mutex_init>
   13c77:	83 c4 10             	add    $0x10,%esp
}
   13c7a:	90                   	nop
   13c7b:	c9                   	leave  
   13c7c:	c3                   	ret    

00013c7d <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   13c7d:	55                   	push   %ebp
   13c7e:	89 e5                	mov    %esp,%ebp
   13c80:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   13c86:	83 ec 04             	sub    $0x4,%esp
   13c89:	68 80 00 00 00       	push   $0x80
   13c8e:	6a 00                	push   $0x0
   13c90:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13c96:	50                   	push   %eax
   13c97:	e8 14 f8 ff ff       	call   134b0 <kernel_memset>
   13c9c:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   13c9f:	8d 45 0c             	lea    0xc(%ebp),%eax
   13ca2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   13ca8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13cae:	83 ec 04             	sub    $0x4,%esp
   13cb1:	50                   	push   %eax
   13cb2:	ff 75 08             	push   0x8(%ebp)
   13cb5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13cbb:	50                   	push   %eax
   13cbc:	e8 d8 f8 ff ff       	call   13599 <kernel_vsprintf>
   13cc1:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   13cc4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13cca:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13ccd:	83 ec 0c             	sub    $0xc,%esp
   13cd0:	68 04 0a 03 00       	push   $0x30a04
   13cd5:	e8 0c ec ff ff       	call   128e6 <mutex_lock>
   13cda:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13cdd:	eb 57                	jmp    13d36 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13cdf:	90                   	nop
   13ce0:	83 ec 0c             	sub    $0xc,%esp
   13ce3:	68 fd 03 00 00       	push   $0x3fd
   13ce8:	e8 ca fe ff ff       	call   13bb7 <inb>
   13ced:	83 c4 10             	add    $0x10,%esp
   13cf0:	0f b6 c0             	movzbl %al,%eax
   13cf3:	83 e0 40             	and    $0x40,%eax
   13cf6:	85 c0                	test   %eax,%eax
   13cf8:	74 e6                	je     13ce0 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13cfd:	0f b6 00             	movzbl (%eax),%eax
   13d00:	3c 0a                	cmp    $0xa,%al
   13d02:	75 12                	jne    13d16 <log_printf+0x99>
   13d04:	83 ec 08             	sub    $0x8,%esp
   13d07:	6a 0d                	push   $0xd
   13d09:	68 f8 03 00 00       	push   $0x3f8
   13d0e:	e8 c1 fe ff ff       	call   13bd4 <outb>
   13d13:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   13d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d19:	8d 50 01             	lea    0x1(%eax),%edx
   13d1c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13d1f:	0f b6 00             	movzbl (%eax),%eax
   13d22:	0f b6 c0             	movzbl %al,%eax
   13d25:	83 ec 08             	sub    $0x8,%esp
   13d28:	50                   	push   %eax
   13d29:	68 f8 03 00 00       	push   $0x3f8
   13d2e:	e8 a1 fe ff ff       	call   13bd4 <outb>
   13d33:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d39:	0f b6 00             	movzbl (%eax),%eax
   13d3c:	84 c0                	test   %al,%al
   13d3e:	75 9f                	jne    13cdf <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   13d40:	83 ec 08             	sub    $0x8,%esp
   13d43:	6a 0d                	push   $0xd
   13d45:	68 f8 03 00 00       	push   $0x3f8
   13d4a:	e8 85 fe ff ff       	call   13bd4 <outb>
   13d4f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   13d52:	83 ec 08             	sub    $0x8,%esp
   13d55:	6a 0a                	push   $0xa
   13d57:	68 f8 03 00 00       	push   $0x3f8
   13d5c:	e8 73 fe ff ff       	call   13bd4 <outb>
   13d61:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   13d64:	83 ec 0c             	sub    $0xc,%esp
   13d67:	68 04 0a 03 00       	push   $0x30a04
   13d6c:	e8 06 ec ff ff       	call   12977 <mutex_unlock>
   13d71:	83 c4 10             	add    $0x10,%esp
   13d74:	90                   	nop
   13d75:	c9                   	leave  
   13d76:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 01 01 00 00       	jmp    80000111 <first_main>

80000010 <sys_call>:
}syscall_args_t;




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <sys_call>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
    if (ms <= 0) return;
80000083:	90                   	nop

}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <sys_call>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:

static inline void print_msg(const char *fmt, int arg) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
800000a7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <sys_call>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <fork>:

static inline int fork (void) {
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000cf:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800000d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000d9:	50                   	push   %eax
800000da:	e8 31 ff ff ff       	call   80000010 <sys_call>
800000df:	83 c4 04             	add    $0x4,%esp
}
800000e2:	c9                   	leave  
800000e3:	c3                   	ret    

800000e4 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
static inline int execve(const char *name, char * const * argv, char * const * env) {
800000e4:	55                   	push   %ebp
800000e5:	89 e5                	mov    %esp,%ebp
800000e7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800000ea:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800000f1:	8b 45 08             	mov    0x8(%ebp),%eax
800000f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800000f7:	8b 45 0c             	mov    0xc(%ebp),%eax
800000fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800000fd:	8b 45 10             	mov    0x10(%ebp),%eax
80000100:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
80000103:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000106:	50                   	push   %eax
80000107:	e8 04 ff ff ff       	call   80000010 <sys_call>
8000010c:	83 c4 04             	add    $0x4,%esp
}
8000010f:	c9                   	leave  
80000110:	c3                   	ret    

80000111 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
80000111:	55                   	push   %ebp
80000112:	89 e5                	mov    %esp,%ebp
80000114:	83 ec 20             	sub    $0x20,%esp
    int count = 3;
80000117:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
    int pid = fork();
8000011e:	e8 a6 ff ff ff       	call   800000c9 <fork>
80000123:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (;;) {
        print_msg("pid=%d", pid);
80000126:	ff 75 f8             	push   -0x8(%ebp)
80000129:	68 d0 01 00 80       	push   $0x800001d0
8000012e:	e8 6e ff ff ff       	call   800000a1 <print_msg>
80000133:	83 c4 08             	add    $0x8,%esp
        if (pid == 0) {
80000136:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
8000013a:	75 5b                	jne    80000197 <first_main+0x86>
            print_msg("child pid=%d", getpid());
8000013c:	e8 45 ff ff ff       	call   80000086 <getpid>
80000141:	50                   	push   %eax
80000142:	68 d7 01 00 80       	push   $0x800001d7
80000147:	e8 55 ff ff ff       	call   800000a1 <print_msg>
8000014c:	83 c4 08             	add    $0x8,%esp
            print_msg("count=%d", count++);
8000014f:	8b 45 fc             	mov    -0x4(%ebp),%eax
80000152:	8d 50 01             	lea    0x1(%eax),%edx
80000155:	89 55 fc             	mov    %edx,-0x4(%ebp)
80000158:	50                   	push   %eax
80000159:	68 e4 01 00 80       	push   $0x800001e4
8000015e:	e8 3e ff ff ff       	call   800000a1 <print_msg>
80000163:	83 c4 08             	add    $0x8,%esp
            char const *argv[] = {"arg0", "arg1", "arg2", "arg3"};
80000166:	c7 45 e8 ed 01 00 80 	movl   $0x800001ed,-0x18(%ebp)
8000016d:	c7 45 ec f2 01 00 80 	movl   $0x800001f2,-0x14(%ebp)
80000174:	c7 45 f0 f7 01 00 80 	movl   $0x800001f7,-0x10(%ebp)
8000017b:	c7 45 f4 fc 01 00 80 	movl   $0x800001fc,-0xc(%ebp)
            execve("/shell.elf", argv, 0);
80000182:	6a 00                	push   $0x0
80000184:	8d 45 e8             	lea    -0x18(%ebp),%eax
80000187:	50                   	push   %eax
80000188:	68 01 02 00 80       	push   $0x80000201
8000018d:	e8 52 ff ff ff       	call   800000e4 <execve>
80000192:	83 c4 0c             	add    $0xc,%esp
80000195:	eb 27                	jmp    800001be <first_main+0xad>
        } else {
            print_msg("parent pid=%d", getpid());
80000197:	e8 ea fe ff ff       	call   80000086 <getpid>
8000019c:	50                   	push   %eax
8000019d:	68 0c 02 00 80       	push   $0x8000020c
800001a2:	e8 fa fe ff ff       	call   800000a1 <print_msg>
800001a7:	83 c4 08             	add    $0x8,%esp
            print_msg("count=%d", count);
800001aa:	ff 75 fc             	push   -0x4(%ebp)
800001ad:	68 e4 01 00 80       	push   $0x800001e4
800001b2:	e8 ea fe ff ff       	call   800000a1 <print_msg>
800001b7:	83 c4 08             	add    $0x8,%esp
            count += 2;
800001ba:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)

        }
        msleep(1000);
800001be:	68 e8 03 00 00       	push   $0x3e8
800001c3:	e8 94 fe ff ff       	call   8000005c <msleep>
800001c8:	83 c4 04             	add    $0x4,%esp
        print_msg("pid=%d", pid);
800001cb:	e9 56 ff ff ff       	jmp    80000126 <first_main+0x15>
800001d0:	70 69                	jo     8000023b <first_main+0x12a>
800001d2:	64 3d 25 64 00 63    	fs cmp $0x63006425,%eax
800001d8:	68 69 6c 64 20       	push   $0x20646c69
800001dd:	70 69                	jo     80000248 <first_main+0x137>
800001df:	64 3d 25 64 00 63    	fs cmp $0x63006425,%eax
800001e5:	6f                   	outsl  %ds:(%esi),(%dx)
800001e6:	75 6e                	jne    80000256 <first_main+0x145>
800001e8:	74 3d                	je     80000227 <first_main+0x116>
800001ea:	25 64 00 61 72       	and    $0x72610064,%eax
800001ef:	67 30 00             	xor    %al,(%bx,%si)
800001f2:	61                   	popa   
800001f3:	72 67                	jb     8000025c <first_main+0x14b>
800001f5:	31 00                	xor    %eax,(%eax)
800001f7:	61                   	popa   
800001f8:	72 67                	jb     80000261 <first_main+0x150>
800001fa:	32 00                	xor    (%eax),%al
800001fc:	61                   	popa   
800001fd:	72 67                	jb     80000266 <first_main+0x155>
800001ff:	33 00                	xor    (%eax),%eax
80000201:	2f                   	das    
80000202:	73 68                	jae    8000026c <first_main+0x15b>
80000204:	65 6c                	gs insb (%dx),%es:(%edi)
80000206:	6c                   	insb   (%dx),%es:(%edi)
80000207:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
8000020a:	66 00 70 61          	data16 add %dh,0x61(%eax)
8000020e:	72 65                	jb     80000275 <first_main+0x164>
80000210:	6e                   	outsb  %ds:(%esi),(%dx)
80000211:	74 20                	je     80000233 <first_main+0x122>
80000213:	70 69                	jo     8000027e <first_main+0x16d>
80000215:	64                   	fs
80000216:	3d                   	.byte 0x3d
80000217:	25                   	.byte 0x25
80000218:	64                   	fs
	...
