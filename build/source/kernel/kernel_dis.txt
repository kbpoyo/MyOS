
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001a94 memsz 0x000163c0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001622  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000469  00011624  00011624  00002624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011a90  00011a90  00002a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00014920  00011aa0  00011aa0  00002a94  2**5
                  ALLOC
  4 .debug_line   00000c2e  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000457  00000000  00000000  000036c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001c0c  00000000  00000000  00003b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000abe  00000000  00000000  00005725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  000061e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a32  00000000  00000000  00006308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  00006d3a  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000974  00000000  00000000  00006d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
00010298 l     F .text	0000001a far_jump
000102b2 l     F .text	000000be tss_init
00011670 l     O .rodata	0000000a __func__.0
000103b0 l     F .text	0000001f switch_to_tss
00000000 l    df *ABS*	00000000 gdt.c
000103e7 l     F .text	00000028 lgdt
00011aa0 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
00010582 l     F .text	00000007 cli
00010589 l     F .text	00000007 sti
00010590 l     F .text	00000007 hlt
00010597 l     F .text	0000001d inb
000105b4 l     F .text	00000021 outb
000105d5 l     F .text	00000028 lidt
00021aa0 l     O .bss	00000800 idt_table
000105fd l     F .text	000000e9 print_exception_fram
000106e6 l     F .text	0000003e do_default_handler
00010970 l     F .text	00000047 gate_desc_set
000109f7 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d78 l     F .text	00000021 outb
000222a0 l     O .bss	00000004 sys_tick
00010dbc l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011a44 l     O .rodata	0000000c __func__.0
000222c0 l     O .bss	0000006c task_1
00022340 l     O .bss	0000006c task_2
000223c0 l     O .bss	00001000 init_stack_1
000233c0 l     O .bss	00001000 init_stack_2
00000000 l    df *ABS*	00000000 assert.c
00010f76 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
00011a90 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 log.c
00011495 l     F .text	0000001d inb
000114b2 l     F .text	00000021 outb
000110ea g     F .text	0000004f kernel_memcpy
00010bfd g     F .text	00000098 idt_enable
00010858 g     F .text	0000001c do_handler_segment_not_present
00010d34 g     F .text	0000000b idt_enable_global
00011139 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
000114d3 g     F .text	00000075 log_init
00010ef2 g     F .text	00000084 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00010fb3 g     F .text	00000047 kernel_strcpy
00010d29 g     F .text	0000000b idt_disable_global
000109b7 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000107b0 g     F .text	0000001c do_handler_overflow
000108e4 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010890 g     F .text	0000001c do_handler_general_protection
00010954 g     F .text	0000001c do_handler_control_exception
00010740 g     F .text	0000001c do_handler_divider
00010820 g     F .text	0000001c do_handler_double_fault
000108ac g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00010d3f g     F .text	00000039 pic_send_eoi
00010180 g       .text	00000000 exception_handler_stack_segment_fault
000104ce g     F .text	00000070 gdt_init
00010938 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
0001027b g       .text	00000000 exception_handler_time
0001075c g     F .text	0000001c do_handler_debug
000243c0 g     O .bss	00002000 stack
00010eb4 g     F .text	0000003e test_task_2
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
00010a8a g     F .text	00000173 idt_init
000107e8 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000108c8 g     F .text	0000001c do_handler_fpu_error
00010900 g     F .text	0000001c do_handler_machine_check
00010047 g       .text	00000000 exception_handler_divider
00010ffa g     F .text	00000051 kernel_strncpy
00010e36 g     F .text	00000040 kernel_init
00010000 g       .text	00000000 _start
00011222 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
0001083c g     F .text	0000001c do_handler_invalid_tss
00010c95 g     F .text	00000094 idt_disable
00010778 g     F .text	0000001c do_handler_nmi
00010e76 g     F .text	0000003e test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010804 g     F .text	0000001c do_handler_device_unavailable
0001117a g     F .text	00000084 kernel_memcmp
0001091c g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010724 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000103cf g     F .text	00000018 task_switch_from_to
000110b5 g     F .text	00000035 kernel_strlen
00010064 g       .text	00000000 exception_handler_debug
0001040f g     F .text	000000bf segment_desc_set
000107cc g     F .text	0000001c do_handler_bound_range
0001104b g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010f7d g     F .text	00000036 pannic
00010874 g     F .text	0000001c do_handler_stack_segment_fault
00010794 g     F .text	0000001c do_handler_breakpoint
00011548 g     F .text	000000da log_printf
00010370 g     F .text	00000040 task_init
000111fe g     F .text	00000024 kernel_sprintf
0001053e g     F .text	00000044 gdt_alloc_desc
000113bf g     F .text	000000d6 kernel_itoa
00010d99 g     F .text	00000023 do_handler_time
00010e1e g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 2b 0e 00 00       	call   10e36 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc c0 63 02 00       	mov    $0x263c0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 c8 0e 00 00       	jmp    10ef2 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 e9 06 00 00       	call   10724 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 e8 06 00 00       	call   10740 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 e7 06 00 00       	call   1075c <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 e6 06 00 00       	call   10778 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 e5 06 00 00       	call   10794 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 e4 06 00 00       	call   107b0 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 e3 06 00 00       	call   107cc <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 e2 06 00 00       	call   107e8 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 e1 06 00 00       	call   10804 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 e2 06 00 00       	call   10820 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 e3 06 00 00       	call   1083c <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 e4 06 00 00       	call   10858 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 e5 06 00 00       	call   10874 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 e6 06 00 00       	call   10890 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 e7 06 00 00       	call   108ac <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 e6 06 00 00       	call   108c8 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 e7 06 00 00       	call   108e4 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 e6 06 00 00       	call   10900 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 e5 06 00 00       	call   1091c <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 e4 06 00 00       	call   10938 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 e5 06 00 00       	call   10954 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 0d 0b 00 00       	call   10d99 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10298:	55                   	push   %ebp
   10299:	89 e5                	mov    %esp,%ebp
   1029b:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   1029e:	8b 45 0c             	mov    0xc(%ebp),%eax
   102a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   102a4:	8b 45 08             	mov    0x8(%ebp),%eax
   102a7:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   102aa:	8d 45 f8             	lea    -0x8(%ebp),%eax
   102ad:	ff 28                	ljmp   *(%eax)
}
   102af:	90                   	nop
   102b0:	c9                   	leave  
   102b1:	c3                   	ret    

000102b2 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   102b2:	55                   	push   %ebp
   102b3:	89 e5                	mov    %esp,%ebp
   102b5:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	83 ec 04             	sub    $0x4,%esp
   102be:	6a 68                	push   $0x68
   102c0:	6a 00                	push   $0x0
   102c2:	50                   	push   %eax
   102c3:	e8 71 0e 00 00       	call   11139 <kernel_memset>
   102c8:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   102cb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ce:	8b 55 0c             	mov    0xc(%ebp),%edx
   102d1:	89 50 20             	mov    %edx,0x20(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	8b 55 10             	mov    0x10(%ebp),%edx
   102da:	89 50 04             	mov    %edx,0x4(%eax)
   102dd:	8b 45 08             	mov    0x8(%ebp),%eax
   102e0:	8b 50 04             	mov    0x4(%eax),%edx
   102e3:	8b 45 08             	mov    0x8(%ebp),%eax
   102e6:	89 50 38             	mov    %edx,0x38(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   102e9:	8b 45 08             	mov    0x8(%ebp),%eax
   102ec:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
   102f3:	8b 45 08             	mov    0x8(%ebp),%eax
   102f6:	8b 50 08             	mov    0x8(%eax),%edx
   102f9:	8b 45 08             	mov    0x8(%ebp),%eax
   102fc:	89 50 50             	mov    %edx,0x50(%eax)

    //5. 平台模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   102ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10302:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
   10309:	8b 45 08             	mov    0x8(%ebp),%eax
   1030c:	8b 50 54             	mov    0x54(%eax),%edx
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	89 50 5c             	mov    %edx,0x5c(%eax)
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	8b 50 5c             	mov    0x5c(%eax),%edx
   1031b:	8b 45 08             	mov    0x8(%ebp),%eax
   1031e:	89 50 58             	mov    %edx,0x58(%eax)
   10321:	8b 45 08             	mov    0x8(%ebp),%eax
   10324:	8b 50 58             	mov    0x58(%eax),%edx
   10327:	8b 45 08             	mov    0x8(%ebp),%eax
   1032a:	89 50 48             	mov    %edx,0x48(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   1032d:	8b 45 08             	mov    0x8(%ebp),%eax
   10330:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 + EFLAGS_IF;
   10337:	8b 45 08             	mov    0x8(%ebp),%eax
   1033a:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10341:	e8 f8 01 00 00       	call   1053e <gdt_alloc_desc>
   10346:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	89 c2                	mov    %eax,%edx
   1034e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10351:	0f b7 c0             	movzwl %ax,%eax
   10354:	68 89 00 00 00       	push   $0x89
   10359:	6a 68                	push   $0x68
   1035b:	52                   	push   %edx
   1035c:	50                   	push   %eax
   1035d:	e8 ad 00 00 00       	call   1040f <segment_desc_set>
   10362:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10365:	8b 45 08             	mov    0x8(%ebp),%eax
   10368:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1036b:	89 50 68             	mov    %edx,0x68(%eax)
}
   1036e:	c9                   	leave  
   1036f:	c3                   	ret    

00010370 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
int task_init(task_t *task, uint32_t entry, uint32_t esp) {
   10370:	55                   	push   %ebp
   10371:	89 e5                	mov    %esp,%ebp
   10373:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10376:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1037a:	75 19                	jne    10395 <task_init+0x25>
   1037c:	68 24 16 01 00       	push   $0x11624
   10381:	68 70 16 01 00       	push   $0x11670
   10386:	6a 49                	push   $0x49
   10388:	68 38 16 01 00       	push   $0x11638
   1038d:	e8 eb 0b 00 00       	call   10f7d <pannic>
   10392:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   10395:	83 ec 04             	sub    $0x4,%esp
   10398:	ff 75 10             	push   0x10(%ebp)
   1039b:	ff 75 0c             	push   0xc(%ebp)
   1039e:	ff 75 08             	push   0x8(%ebp)
   103a1:	e8 0c ff ff ff       	call   102b2 <tss_init>
   103a6:	83 c4 10             	add    $0x10,%esp
    return 0;    
   103a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103ae:	c9                   	leave  
   103af:	c3                   	ret    

000103b0 <switch_to_tss>:


static void switch_to_tss(uint16_t tss_selector) {
   103b0:	55                   	push   %ebp
   103b1:	89 e5                	mov    %esp,%ebp
   103b3:	83 ec 04             	sub    $0x4,%esp
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   103bd:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103c1:	6a 00                	push   $0x0
   103c3:	50                   	push   %eax
   103c4:	e8 cf fe ff ff       	call   10298 <far_jump>
   103c9:	83 c4 08             	add    $0x8,%esp
}
   103cc:	90                   	nop
   103cd:	c9                   	leave  
   103ce:	c3                   	ret    

000103cf <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   103cf:	55                   	push   %ebp
   103d0:	89 e5                	mov    %esp,%ebp
    switch_to_tss(to->tss_selector);
   103d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   103d5:	8b 40 68             	mov    0x68(%eax),%eax
   103d8:	0f b7 c0             	movzwl %ax,%eax
   103db:	50                   	push   %eax
   103dc:	e8 cf ff ff ff       	call   103b0 <switch_to_tss>
   103e1:	83 c4 04             	add    $0x4,%esp
}
   103e4:	90                   	nop
   103e5:	c9                   	leave  
   103e6:	c3                   	ret    

000103e7 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   103e7:	55                   	push   %ebp
   103e8:	89 e5                	mov    %esp,%ebp
   103ea:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   103ed:	8b 45 08             	mov    0x8(%ebp),%eax
   103f0:	c1 e8 10             	shr    $0x10,%eax
   103f3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   103f7:	8b 45 08             	mov    0x8(%ebp),%eax
   103fa:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   103fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10401:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10404:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10408:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1040c:	90                   	nop
   1040d:	c9                   	leave  
   1040e:	c3                   	ret    

0001040f <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1040f:	55                   	push   %ebp
   10410:	89 e5                	mov    %esp,%ebp
   10412:	83 ec 18             	sub    $0x18,%esp
   10415:	8b 55 08             	mov    0x8(%ebp),%edx
   10418:	8b 45 14             	mov    0x14(%ebp),%eax
   1041b:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1041f:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10423:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10427:	66 c1 e8 03          	shr    $0x3,%ax
   1042b:	0f b7 c0             	movzwl %ax,%eax
   1042e:	c1 e0 03             	shl    $0x3,%eax
   10431:	05 a0 1a 01 00       	add    $0x11aa0,%eax
   10436:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10439:	8b 45 0c             	mov    0xc(%ebp),%eax
   1043c:	89 c2                	mov    %eax,%edx
   1043e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10441:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10445:	8b 45 0c             	mov    0xc(%ebp),%eax
   10448:	c1 e8 10             	shr    $0x10,%eax
   1044b:	89 c2                	mov    %eax,%edx
   1044d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10450:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10453:	8b 45 0c             	mov    0xc(%ebp),%eax
   10456:	c1 e8 18             	shr    $0x18,%eax
   10459:	89 c2                	mov    %eax,%edx
   1045b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1045e:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10461:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10468:	76 1d                	jbe    10487 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1046a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1046d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10471:	66 0d 00 80          	or     $0x8000,%ax
   10475:	89 c2                	mov    %eax,%edx
   10477:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1047a:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1047e:	8b 45 10             	mov    0x10(%ebp),%eax
   10481:	c1 e8 0c             	shr    $0xc,%eax
   10484:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10487:	8b 45 10             	mov    0x10(%ebp),%eax
   1048a:	89 c2                	mov    %eax,%edx
   1048c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1048f:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10492:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10495:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10499:	89 c2                	mov    %eax,%edx
   1049b:	8b 45 10             	mov    0x10(%ebp),%eax
   1049e:	c1 e8 08             	shr    $0x8,%eax
   104a1:	66 25 00 0f          	and    $0xf00,%ax
   104a5:	09 d0                	or     %edx,%eax
   104a7:	89 c2                	mov    %eax,%edx
   104a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104ac:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   104b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104b3:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104b7:	89 c2                	mov    %eax,%edx
   104b9:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   104bd:	80 e4 f0             	and    $0xf0,%ah
   104c0:	09 d0                	or     %edx,%eax
   104c2:	89 c2                	mov    %eax,%edx
   104c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c7:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   104cb:	90                   	nop
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   104d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104db:	eb 1c                	jmp    104f9 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   104dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104e0:	c1 e0 03             	shl    $0x3,%eax
   104e3:	0f b7 c0             	movzwl %ax,%eax
   104e6:	6a 00                	push   $0x0
   104e8:	6a 00                	push   $0x0
   104ea:	6a 00                	push   $0x0
   104ec:	50                   	push   %eax
   104ed:	e8 1d ff ff ff       	call   1040f <segment_desc_set>
   104f2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   104f5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104f9:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10500:	7e db                	jle    104dd <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10502:	68 92 40 00 00       	push   $0x4092
   10507:	6a ff                	push   $0xffffffff
   10509:	6a 00                	push   $0x0
   1050b:	6a 10                	push   $0x10
   1050d:	e8 fd fe ff ff       	call   1040f <segment_desc_set>
   10512:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10515:	68 9a 40 00 00       	push   $0x409a
   1051a:	6a ff                	push   $0xffffffff
   1051c:	6a 00                	push   $0x0
   1051e:	6a 08                	push   $0x8
   10520:	e8 ea fe ff ff       	call   1040f <segment_desc_set>
   10525:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10528:	b8 a0 1a 01 00       	mov    $0x11aa0,%eax
   1052d:	68 00 00 01 00       	push   $0x10000
   10532:	50                   	push   %eax
   10533:	e8 af fe ff ff       	call   103e7 <lgdt>
   10538:	83 c4 08             	add    $0x8,%esp
}
   1053b:	90                   	nop
   1053c:	c9                   	leave  
   1053d:	c3                   	ret    

0001053e <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   1053e:	55                   	push   %ebp
   1053f:	89 e5                	mov    %esp,%ebp
   10541:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10544:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1054b:	eb 25                	jmp    10572 <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   1054d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10550:	c1 e0 03             	shl    $0x3,%eax
   10553:	05 a0 1a 01 00       	add    $0x11aa0,%eax
   10558:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   1055b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1055e:	0f b7 00             	movzwl (%eax),%eax
   10561:	66 85 c0             	test   %ax,%ax
   10564:	75 08                	jne    1056e <gdt_alloc_desc+0x30>
            return i << 3;
   10566:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10569:	c1 e0 03             	shl    $0x3,%eax
   1056c:	eb 12                	jmp    10580 <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1056e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10572:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10579:	7e d2                	jle    1054d <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   1057b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10580:	c9                   	leave  
   10581:	c3                   	ret    

00010582 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10582:	55                   	push   %ebp
   10583:	89 e5                	mov    %esp,%ebp
   10585:	fa                   	cli    
   10586:	90                   	nop
   10587:	5d                   	pop    %ebp
   10588:	c3                   	ret    

00010589 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	fb                   	sti    
   1058d:	90                   	nop
   1058e:	5d                   	pop    %ebp
   1058f:	c3                   	ret    

00010590 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10590:	55                   	push   %ebp
   10591:	89 e5                	mov    %esp,%ebp
   10593:	f4                   	hlt    
   10594:	90                   	nop
   10595:	5d                   	pop    %ebp
   10596:	c3                   	ret    

00010597 <inb>:
static inline uint8_t inb(uint16_t port) {
   10597:	55                   	push   %ebp
   10598:	89 e5                	mov    %esp,%ebp
   1059a:	83 ec 14             	sub    $0x14,%esp
   1059d:	8b 45 08             	mov    0x8(%ebp),%eax
   105a0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   105a4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105a8:	89 c2                	mov    %eax,%edx
   105aa:	ec                   	in     (%dx),%al
   105ab:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   105ae:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   105b2:	c9                   	leave  
   105b3:	c3                   	ret    

000105b4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   105b4:	55                   	push   %ebp
   105b5:	89 e5                	mov    %esp,%ebp
   105b7:	83 ec 08             	sub    $0x8,%esp
   105ba:	8b 45 08             	mov    0x8(%ebp),%eax
   105bd:	8b 55 0c             	mov    0xc(%ebp),%edx
   105c0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   105c4:	89 d0                	mov    %edx,%eax
   105c6:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   105c9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   105cd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   105d1:	ee                   	out    %al,(%dx)
}
   105d2:	90                   	nop
   105d3:	c9                   	leave  
   105d4:	c3                   	ret    

000105d5 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   105d5:	55                   	push   %ebp
   105d6:	89 e5                	mov    %esp,%ebp
   105d8:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   105db:	8b 45 08             	mov    0x8(%ebp),%eax
   105de:	c1 e8 10             	shr    $0x10,%eax
   105e1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   105e5:	8b 45 08             	mov    0x8(%ebp),%eax
   105e8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   105ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   105ef:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   105f2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   105f6:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   105fa:	90                   	nop
   105fb:	c9                   	leave  
   105fc:	c3                   	ret    

000105fd <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   105fd:	55                   	push   %ebp
   105fe:	89 e5                	mov    %esp,%ebp
   10600:	57                   	push   %edi
   10601:	56                   	push   %esi
   10602:	53                   	push   %ebx
   10603:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10606:	83 ec 0c             	sub    $0xc,%esp
   10609:	68 7c 16 01 00       	push   $0x1167c
   1060e:	e8 35 0f 00 00       	call   11548 <log_printf>
   10613:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	8b 50 34             	mov    0x34(%eax),%edx
   1061c:	8b 45 08             	mov    0x8(%ebp),%eax
   1061f:	8b 40 30             	mov    0x30(%eax),%eax
   10622:	83 ec 04             	sub    $0x4,%esp
   10625:	52                   	push   %edx
   10626:	50                   	push   %eax
   10627:	68 ba 16 01 00       	push   $0x116ba
   1062c:	e8 17 0f 00 00       	call   11548 <log_printf>
   10631:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10634:	8b 45 08             	mov    0x8(%ebp),%eax
   10637:	8b 38                	mov    (%eax),%edi
   10639:	8b 45 08             	mov    0x8(%ebp),%eax
   1063c:	8b 70 04             	mov    0x4(%eax),%esi
   1063f:	8b 45 08             	mov    0x8(%ebp),%eax
   10642:	8b 58 08             	mov    0x8(%eax),%ebx
   10645:	8b 45 08             	mov    0x8(%ebp),%eax
   10648:	8b 48 0c             	mov    0xc(%eax),%ecx
   1064b:	8b 45 08             	mov    0x8(%ebp),%eax
   1064e:	8b 50 0c             	mov    0xc(%eax),%edx
   10651:	8b 45 08             	mov    0x8(%ebp),%eax
   10654:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10657:	83 ec 04             	sub    $0x4,%esp
   1065a:	57                   	push   %edi
   1065b:	56                   	push   %esi
   1065c:	53                   	push   %ebx
   1065d:	51                   	push   %ecx
   1065e:	52                   	push   %edx
   1065f:	50                   	push   %eax
   10660:	68 d4 16 01 00       	push   $0x116d4
   10665:	e8 de 0e 00 00       	call   11548 <log_printf>
   1066a:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   1066d:	8b 45 08             	mov    0x8(%ebp),%eax
   10670:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10673:	8b 45 08             	mov    0x8(%ebp),%eax
   10676:	8b 40 18             	mov    0x18(%eax),%eax
   10679:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1067c:	8b 45 08             	mov    0x8(%ebp),%eax
   1067f:	8b 58 10             	mov    0x10(%eax),%ebx
   10682:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10685:	8b 45 08             	mov    0x8(%ebp),%eax
   10688:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   1068b:	8b 45 08             	mov    0x8(%ebp),%eax
   1068e:	8b 70 24             	mov    0x24(%eax),%esi
   10691:	8b 45 08             	mov    0x8(%ebp),%eax
   10694:	8b 58 28             	mov    0x28(%eax),%ebx
   10697:	8b 45 08             	mov    0x8(%ebp),%eax
   1069a:	8b 50 20             	mov    0x20(%eax),%edx
   1069d:	8b 45 08             	mov    0x8(%ebp),%eax
   106a0:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   106a3:	83 ec 0c             	sub    $0xc,%esp
   106a6:	51                   	push   %ecx
   106a7:	ff 75 e4             	push   -0x1c(%ebp)
   106aa:	ff 75 e0             	push   -0x20(%ebp)
   106ad:	57                   	push   %edi
   106ae:	56                   	push   %esi
   106af:	53                   	push   %ebx
   106b0:	52                   	push   %edx
   106b1:	50                   	push   %eax
   106b2:	68 04 17 01 00       	push   $0x11704
   106b7:	e8 8c 0e 00 00       	call   11548 <log_printf>
   106bc:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   106bf:	8b 45 08             	mov    0x8(%ebp),%eax
   106c2:	8b 50 40             	mov    0x40(%eax),%edx
   106c5:	8b 45 08             	mov    0x8(%ebp),%eax
   106c8:	8b 40 38             	mov    0x38(%eax),%eax
   106cb:	83 ec 04             	sub    $0x4,%esp
   106ce:	52                   	push   %edx
   106cf:	50                   	push   %eax
   106d0:	68 5c 17 01 00       	push   $0x1175c
   106d5:	e8 6e 0e 00 00       	call   11548 <log_printf>
   106da:	83 c4 10             	add    $0x10,%esp
}
   106dd:	90                   	nop
   106de:	8d 65 f4             	lea    -0xc(%ebp),%esp
   106e1:	5b                   	pop    %ebx
   106e2:	5e                   	pop    %esi
   106e3:	5f                   	pop    %edi
   106e4:	5d                   	pop    %ebp
   106e5:	c3                   	ret    

000106e6 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   106e6:	55                   	push   %ebp
   106e7:	89 e5                	mov    %esp,%ebp
   106e9:	83 ec 08             	sub    $0x8,%esp

  log_printf("----------------------------------");
   106ec:	83 ec 0c             	sub    $0xc,%esp
   106ef:	68 78 17 01 00       	push   $0x11778
   106f4:	e8 4f 0e 00 00       	call   11548 <log_printf>
   106f9:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   106fc:	83 ec 08             	sub    $0x8,%esp
   106ff:	ff 75 0c             	push   0xc(%ebp)
   10702:	68 9b 17 01 00       	push   $0x1179b
   10707:	e8 3c 0e 00 00       	call   11548 <log_printf>
   1070c:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   1070f:	83 ec 0c             	sub    $0xc,%esp
   10712:	ff 75 08             	push   0x8(%ebp)
   10715:	e8 e3 fe ff ff       	call   105fd <print_exception_fram>
   1071a:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   1071d:	e8 6e fe ff ff       	call   10590 <hlt>
   10722:	eb f9                	jmp    1071d <do_default_handler+0x37>

00010724 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10724:	55                   	push   %ebp
   10725:	89 e5                	mov    %esp,%ebp
   10727:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1072a:	83 ec 08             	sub    $0x8,%esp
   1072d:	68 b5 17 01 00       	push   $0x117b5
   10732:	ff 75 08             	push   0x8(%ebp)
   10735:	e8 ac ff ff ff       	call   106e6 <do_default_handler>
   1073a:	83 c4 10             	add    $0x10,%esp
}
   1073d:	90                   	nop
   1073e:	c9                   	leave  
   1073f:	c3                   	ret    

00010740 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10740:	55                   	push   %ebp
   10741:	89 e5                	mov    %esp,%ebp
   10743:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10746:	83 ec 08             	sub    $0x8,%esp
   10749:	68 c7 17 01 00       	push   $0x117c7
   1074e:	ff 75 08             	push   0x8(%ebp)
   10751:	e8 90 ff ff ff       	call   106e6 <do_default_handler>
   10756:	83 c4 10             	add    $0x10,%esp
}
   10759:	90                   	nop
   1075a:	c9                   	leave  
   1075b:	c3                   	ret    

0001075c <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   1075c:	55                   	push   %ebp
   1075d:	89 e5                	mov    %esp,%ebp
   1075f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10762:	83 ec 08             	sub    $0x8,%esp
   10765:	68 d9 17 01 00       	push   $0x117d9
   1076a:	ff 75 08             	push   0x8(%ebp)
   1076d:	e8 74 ff ff ff       	call   106e6 <do_default_handler>
   10772:	83 c4 10             	add    $0x10,%esp
}
   10775:	90                   	nop
   10776:	c9                   	leave  
   10777:	c3                   	ret    

00010778 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10778:	55                   	push   %ebp
   10779:	89 e5                	mov    %esp,%ebp
   1077b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1077e:	83 ec 08             	sub    $0x8,%esp
   10781:	68 e9 17 01 00       	push   $0x117e9
   10786:	ff 75 08             	push   0x8(%ebp)
   10789:	e8 58 ff ff ff       	call   106e6 <do_default_handler>
   1078e:	83 c4 10             	add    $0x10,%esp
}
   10791:	90                   	nop
   10792:	c9                   	leave  
   10793:	c3                   	ret    

00010794 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10794:	55                   	push   %ebp
   10795:	89 e5                	mov    %esp,%ebp
   10797:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   1079a:	83 ec 08             	sub    $0x8,%esp
   1079d:	68 f7 17 01 00       	push   $0x117f7
   107a2:	ff 75 08             	push   0x8(%ebp)
   107a5:	e8 3c ff ff ff       	call   106e6 <do_default_handler>
   107aa:	83 c4 10             	add    $0x10,%esp
}
   107ad:	90                   	nop
   107ae:	c9                   	leave  
   107af:	c3                   	ret    

000107b0 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   107b0:	55                   	push   %ebp
   107b1:	89 e5                	mov    %esp,%ebp
   107b3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   107b6:	83 ec 08             	sub    $0x8,%esp
   107b9:	68 0c 18 01 00       	push   $0x1180c
   107be:	ff 75 08             	push   0x8(%ebp)
   107c1:	e8 20 ff ff ff       	call   106e6 <do_default_handler>
   107c6:	83 c4 10             	add    $0x10,%esp
}
   107c9:	90                   	nop
   107ca:	c9                   	leave  
   107cb:	c3                   	ret    

000107cc <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   107cc:	55                   	push   %ebp
   107cd:	89 e5                	mov    %esp,%ebp
   107cf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   107d2:	83 ec 08             	sub    $0x8,%esp
   107d5:	68 1f 18 01 00       	push   $0x1181f
   107da:	ff 75 08             	push   0x8(%ebp)
   107dd:	e8 04 ff ff ff       	call   106e6 <do_default_handler>
   107e2:	83 c4 10             	add    $0x10,%esp
}
   107e5:	90                   	nop
   107e6:	c9                   	leave  
   107e7:	c3                   	ret    

000107e8 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   107e8:	55                   	push   %ebp
   107e9:	89 e5                	mov    %esp,%ebp
   107eb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   107ee:	83 ec 08             	sub    $0x8,%esp
   107f1:	68 35 18 01 00       	push   $0x11835
   107f6:	ff 75 08             	push   0x8(%ebp)
   107f9:	e8 e8 fe ff ff       	call   106e6 <do_default_handler>
   107fe:	83 c4 10             	add    $0x10,%esp
}
   10801:	90                   	nop
   10802:	c9                   	leave  
   10803:	c3                   	ret    

00010804 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10804:	55                   	push   %ebp
   10805:	89 e5                	mov    %esp,%ebp
   10807:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1080a:	83 ec 08             	sub    $0x8,%esp
   1080d:	68 4e 18 01 00       	push   $0x1184e
   10812:	ff 75 08             	push   0x8(%ebp)
   10815:	e8 cc fe ff ff       	call   106e6 <do_default_handler>
   1081a:	83 c4 10             	add    $0x10,%esp
}
   1081d:	90                   	nop
   1081e:	c9                   	leave  
   1081f:	c3                   	ret    

00010820 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10820:	55                   	push   %ebp
   10821:	89 e5                	mov    %esp,%ebp
   10823:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10826:	83 ec 08             	sub    $0x8,%esp
   10829:	68 6b 18 01 00       	push   $0x1186b
   1082e:	ff 75 08             	push   0x8(%ebp)
   10831:	e8 b0 fe ff ff       	call   106e6 <do_default_handler>
   10836:	83 c4 10             	add    $0x10,%esp
}
   10839:	90                   	nop
   1083a:	c9                   	leave  
   1083b:	c3                   	ret    

0001083c <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   1083c:	55                   	push   %ebp
   1083d:	89 e5                	mov    %esp,%ebp
   1083f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10842:	83 ec 08             	sub    $0x8,%esp
   10845:	68 82 18 01 00       	push   $0x11882
   1084a:	ff 75 08             	push   0x8(%ebp)
   1084d:	e8 94 fe ff ff       	call   106e6 <do_default_handler>
   10852:	83 c4 10             	add    $0x10,%esp
}
   10855:	90                   	nop
   10856:	c9                   	leave  
   10857:	c3                   	ret    

00010858 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10858:	55                   	push   %ebp
   10859:	89 e5                	mov    %esp,%ebp
   1085b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   1085e:	83 ec 08             	sub    $0x8,%esp
   10861:	68 98 18 01 00       	push   $0x11898
   10866:	ff 75 08             	push   0x8(%ebp)
   10869:	e8 78 fe ff ff       	call   106e6 <do_default_handler>
   1086e:	83 c4 10             	add    $0x10,%esp
}
   10871:	90                   	nop
   10872:	c9                   	leave  
   10873:	c3                   	ret    

00010874 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10874:	55                   	push   %ebp
   10875:	89 e5                	mov    %esp,%ebp
   10877:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1087a:	83 ec 08             	sub    $0x8,%esp
   1087d:	68 b6 18 01 00       	push   $0x118b6
   10882:	ff 75 08             	push   0x8(%ebp)
   10885:	e8 5c fe ff ff       	call   106e6 <do_default_handler>
   1088a:	83 c4 10             	add    $0x10,%esp
}
   1088d:	90                   	nop
   1088e:	c9                   	leave  
   1088f:	c3                   	ret    

00010890 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10890:	55                   	push   %ebp
   10891:	89 e5                	mov    %esp,%ebp
   10893:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10896:	83 ec 08             	sub    $0x8,%esp
   10899:	68 d4 18 01 00       	push   $0x118d4
   1089e:	ff 75 08             	push   0x8(%ebp)
   108a1:	e8 40 fe ff ff       	call   106e6 <do_default_handler>
   108a6:	83 c4 10             	add    $0x10,%esp
}
   108a9:	90                   	nop
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   108b2:	83 ec 08             	sub    $0x8,%esp
   108b5:	68 f1 18 01 00       	push   $0x118f1
   108ba:	ff 75 08             	push   0x8(%ebp)
   108bd:	e8 24 fe ff ff       	call   106e6 <do_default_handler>
   108c2:	83 c4 10             	add    $0x10,%esp
}
   108c5:	90                   	nop
   108c6:	c9                   	leave  
   108c7:	c3                   	ret    

000108c8 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   108c8:	55                   	push   %ebp
   108c9:	89 e5                	mov    %esp,%ebp
   108cb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   108ce:	83 ec 08             	sub    $0x8,%esp
   108d1:	68 06 19 01 00       	push   $0x11906
   108d6:	ff 75 08             	push   0x8(%ebp)
   108d9:	e8 08 fe ff ff       	call   106e6 <do_default_handler>
   108de:	83 c4 10             	add    $0x10,%esp
}
   108e1:	90                   	nop
   108e2:	c9                   	leave  
   108e3:	c3                   	ret    

000108e4 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   108e4:	55                   	push   %ebp
   108e5:	89 e5                	mov    %esp,%ebp
   108e7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   108ea:	83 ec 08             	sub    $0x8,%esp
   108ed:	68 1a 19 01 00       	push   $0x1191a
   108f2:	ff 75 08             	push   0x8(%ebp)
   108f5:	e8 ec fd ff ff       	call   106e6 <do_default_handler>
   108fa:	83 c4 10             	add    $0x10,%esp
}
   108fd:	90                   	nop
   108fe:	c9                   	leave  
   108ff:	c3                   	ret    

00010900 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10900:	55                   	push   %ebp
   10901:	89 e5                	mov    %esp,%ebp
   10903:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10906:	83 ec 08             	sub    $0x8,%esp
   10909:	68 34 19 01 00       	push   $0x11934
   1090e:	ff 75 08             	push   0x8(%ebp)
   10911:	e8 d0 fd ff ff       	call   106e6 <do_default_handler>
   10916:	83 c4 10             	add    $0x10,%esp
}
   10919:	90                   	nop
   1091a:	c9                   	leave  
   1091b:	c3                   	ret    

0001091c <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1091c:	55                   	push   %ebp
   1091d:	89 e5                	mov    %esp,%ebp
   1091f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10922:	83 ec 08             	sub    $0x8,%esp
   10925:	68 4c 19 01 00       	push   $0x1194c
   1092a:	ff 75 08             	push   0x8(%ebp)
   1092d:	e8 b4 fd ff ff       	call   106e6 <do_default_handler>
   10932:	83 c4 10             	add    $0x10,%esp
}
   10935:	90                   	nop
   10936:	c9                   	leave  
   10937:	c3                   	ret    

00010938 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   10938:	55                   	push   %ebp
   10939:	89 e5                	mov    %esp,%ebp
   1093b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   1093e:	83 ec 08             	sub    $0x8,%esp
   10941:	68 64 19 01 00       	push   $0x11964
   10946:	ff 75 08             	push   0x8(%ebp)
   10949:	e8 98 fd ff ff       	call   106e6 <do_default_handler>
   1094e:	83 c4 10             	add    $0x10,%esp
}
   10951:	90                   	nop
   10952:	c9                   	leave  
   10953:	c3                   	ret    

00010954 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   10954:	55                   	push   %ebp
   10955:	89 e5                	mov    %esp,%ebp
   10957:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1095a:	83 ec 08             	sub    $0x8,%esp
   1095d:	68 80 19 01 00       	push   $0x11980
   10962:	ff 75 08             	push   0x8(%ebp)
   10965:	e8 7c fd ff ff       	call   106e6 <do_default_handler>
   1096a:	83 c4 10             	add    $0x10,%esp
}
   1096d:	90                   	nop
   1096e:	c9                   	leave  
   1096f:	c3                   	ret    

00010970 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10970:	55                   	push   %ebp
   10971:	89 e5                	mov    %esp,%ebp
   10973:	83 ec 08             	sub    $0x8,%esp
   10976:	8b 55 0c             	mov    0xc(%ebp),%edx
   10979:	8b 45 14             	mov    0x14(%ebp),%eax
   1097c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10980:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10984:	8b 45 10             	mov    0x10(%ebp),%eax
   10987:	89 c2                	mov    %eax,%edx
   10989:	8b 45 08             	mov    0x8(%ebp),%eax
   1098c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1098f:	8b 45 10             	mov    0x10(%ebp),%eax
   10992:	c1 e8 10             	shr    $0x10,%eax
   10995:	89 c2                	mov    %eax,%edx
   10997:	8b 45 08             	mov    0x8(%ebp),%eax
   1099a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1099e:	8b 45 08             	mov    0x8(%ebp),%eax
   109a1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   109a5:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   109a9:	8b 45 08             	mov    0x8(%ebp),%eax
   109ac:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   109b0:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   109b4:	90                   	nop
   109b5:	c9                   	leave  
   109b6:	c3                   	ret    

000109b7 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   109b7:	55                   	push   %ebp
   109b8:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   109ba:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   109c1:	7f 06                	jg     109c9 <idt_install+0x12>
   109c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109c7:	79 07                	jns    109d0 <idt_install+0x19>
   109c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   109ce:	eb 25                	jmp    109f5 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   109d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   109d3:	8b 55 08             	mov    0x8(%ebp),%edx
   109d6:	c1 e2 03             	shl    $0x3,%edx
   109d9:	81 c2 a0 1a 02 00    	add    $0x21aa0,%edx
   109df:	68 00 8e 00 00       	push   $0x8e00
   109e4:	50                   	push   %eax
   109e5:	6a 08                	push   $0x8
   109e7:	52                   	push   %edx
   109e8:	e8 83 ff ff ff       	call   10970 <gate_desc_set>
   109ed:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   109f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   109f5:	c9                   	leave  
   109f6:	c3                   	ret    

000109f7 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   109f7:	55                   	push   %ebp
   109f8:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   109fa:	6a 11                	push   $0x11
   109fc:	6a 20                	push   $0x20
   109fe:	e8 b1 fb ff ff       	call   105b4 <outb>
   10a03:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   10a06:	6a 20                	push   $0x20
   10a08:	6a 21                	push   $0x21
   10a0a:	e8 a5 fb ff ff       	call   105b4 <outb>
   10a0f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   10a12:	6a 04                	push   $0x4
   10a14:	6a 21                	push   $0x21
   10a16:	e8 99 fb ff ff       	call   105b4 <outb>
   10a1b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   10a1e:	6a 01                	push   $0x1
   10a20:	6a 21                	push   $0x21
   10a22:	e8 8d fb ff ff       	call   105b4 <outb>
   10a27:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   10a2a:	6a 11                	push   $0x11
   10a2c:	68 a0 00 00 00       	push   $0xa0
   10a31:	e8 7e fb ff ff       	call   105b4 <outb>
   10a36:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   10a39:	6a 28                	push   $0x28
   10a3b:	68 a1 00 00 00       	push   $0xa1
   10a40:	e8 6f fb ff ff       	call   105b4 <outb>
   10a45:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   10a48:	6a 02                	push   $0x2
   10a4a:	68 a1 00 00 00       	push   $0xa1
   10a4f:	e8 60 fb ff ff       	call   105b4 <outb>
   10a54:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   10a57:	6a 01                	push   $0x1
   10a59:	68 a1 00 00 00       	push   $0xa1
   10a5e:	e8 51 fb ff ff       	call   105b4 <outb>
   10a63:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   10a66:	68 fb 00 00 00       	push   $0xfb
   10a6b:	6a 21                	push   $0x21
   10a6d:	e8 42 fb ff ff       	call   105b4 <outb>
   10a72:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   10a75:	68 ff 00 00 00       	push   $0xff
   10a7a:	68 a1 00 00 00       	push   $0xa1
   10a7f:	e8 30 fb ff ff       	call   105b4 <outb>
   10a84:	83 c4 08             	add    $0x8,%esp


}
   10a87:	90                   	nop
   10a88:	c9                   	leave  
   10a89:	c3                   	ret    

00010a8a <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   10a8a:	55                   	push   %ebp
   10a8b:	89 e5                	mov    %esp,%ebp
   10a8d:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10a90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10a97:	eb 14                	jmp    10aad <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   10a99:	68 2a 00 01 00       	push   $0x1002a
   10a9e:	ff 75 fc             	push   -0x4(%ebp)
   10aa1:	e8 11 ff ff ff       	call   109b7 <idt_install>
   10aa6:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   10aa9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10aad:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10ab4:	7e e3                	jle    10a99 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   10ab6:	68 47 00 01 00       	push   $0x10047
   10abb:	6a 00                	push   $0x0
   10abd:	e8 f5 fe ff ff       	call   109b7 <idt_install>
   10ac2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   10ac5:	68 64 00 01 00       	push   $0x10064
   10aca:	6a 01                	push   $0x1
   10acc:	e8 e6 fe ff ff       	call   109b7 <idt_install>
   10ad1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   10ad4:	68 81 00 01 00       	push   $0x10081
   10ad9:	6a 02                	push   $0x2
   10adb:	e8 d7 fe ff ff       	call   109b7 <idt_install>
   10ae0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   10ae3:	68 9e 00 01 00       	push   $0x1009e
   10ae8:	6a 03                	push   $0x3
   10aea:	e8 c8 fe ff ff       	call   109b7 <idt_install>
   10aef:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   10af2:	68 bb 00 01 00       	push   $0x100bb
   10af7:	6a 04                	push   $0x4
   10af9:	e8 b9 fe ff ff       	call   109b7 <idt_install>
   10afe:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   10b01:	68 d8 00 01 00       	push   $0x100d8
   10b06:	6a 05                	push   $0x5
   10b08:	e8 aa fe ff ff       	call   109b7 <idt_install>
   10b0d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   10b10:	68 f5 00 01 00       	push   $0x100f5
   10b15:	6a 06                	push   $0x6
   10b17:	e8 9b fe ff ff       	call   109b7 <idt_install>
   10b1c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   10b1f:	68 12 01 01 00       	push   $0x10112
   10b24:	6a 07                	push   $0x7
   10b26:	e8 8c fe ff ff       	call   109b7 <idt_install>
   10b2b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   10b2e:	68 2f 01 01 00       	push   $0x1012f
   10b33:	6a 08                	push   $0x8
   10b35:	e8 7d fe ff ff       	call   109b7 <idt_install>
   10b3a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   10b3d:	68 4a 01 01 00       	push   $0x1014a
   10b42:	6a 0a                	push   $0xa
   10b44:	e8 6e fe ff ff       	call   109b7 <idt_install>
   10b49:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   10b4c:	68 65 01 01 00       	push   $0x10165
   10b51:	6a 0b                	push   $0xb
   10b53:	e8 5f fe ff ff       	call   109b7 <idt_install>
   10b58:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   10b5b:	68 80 01 01 00       	push   $0x10180
   10b60:	6a 0c                	push   $0xc
   10b62:	e8 50 fe ff ff       	call   109b7 <idt_install>
   10b67:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   10b6a:	68 9b 01 01 00       	push   $0x1019b
   10b6f:	6a 0d                	push   $0xd
   10b71:	e8 41 fe ff ff       	call   109b7 <idt_install>
   10b76:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   10b79:	68 b6 01 01 00       	push   $0x101b6
   10b7e:	6a 0e                	push   $0xe
   10b80:	e8 32 fe ff ff       	call   109b7 <idt_install>
   10b85:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   10b88:	68 d1 01 01 00       	push   $0x101d1
   10b8d:	6a 10                	push   $0x10
   10b8f:	e8 23 fe ff ff       	call   109b7 <idt_install>
   10b94:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   10b97:	68 ee 01 01 00       	push   $0x101ee
   10b9c:	6a 11                	push   $0x11
   10b9e:	e8 14 fe ff ff       	call   109b7 <idt_install>
   10ba3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   10ba6:	68 09 02 01 00       	push   $0x10209
   10bab:	6a 12                	push   $0x12
   10bad:	e8 05 fe ff ff       	call   109b7 <idt_install>
   10bb2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   10bb5:	68 26 02 01 00       	push   $0x10226
   10bba:	6a 13                	push   $0x13
   10bbc:	e8 f6 fd ff ff       	call   109b7 <idt_install>
   10bc1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   10bc4:	68 43 02 01 00       	push   $0x10243
   10bc9:	6a 14                	push   $0x14
   10bcb:	e8 e7 fd ff ff       	call   109b7 <idt_install>
   10bd0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   10bd3:	68 60 02 01 00       	push   $0x10260
   10bd8:	6a 15                	push   $0x15
   10bda:	e8 d8 fd ff ff       	call   109b7 <idt_install>
   10bdf:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   10be2:	b8 a0 1a 02 00       	mov    $0x21aa0,%eax
   10be7:	68 00 08 00 00       	push   $0x800
   10bec:	50                   	push   %eax
   10bed:	e8 e3 f9 ff ff       	call   105d5 <lidt>
   10bf2:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   10bf5:	e8 fd fd ff ff       	call   109f7 <init_pic>
}
   10bfa:	90                   	nop
   10bfb:	c9                   	leave  
   10bfc:	c3                   	ret    

00010bfd <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   10bfd:	55                   	push   %ebp
   10bfe:	89 e5                	mov    %esp,%ebp
   10c00:	53                   	push   %ebx
   10c01:	83 ec 14             	sub    $0x14,%esp
   10c04:	8b 45 08             	mov    0x8(%ebp),%eax
   10c07:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10c0a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10c0e:	76 7f                	jbe    10c8f <idt_enable+0x92>
   10c10:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   10c14:	77 79                	ja     10c8f <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10c16:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10c1a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10c1e:	77 33                	ja     10c53 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c20:	6a 21                	push   $0x21
   10c22:	e8 70 f9 ff ff       	call   10597 <inb>
   10c27:	83 c4 04             	add    $0x4,%esp
   10c2a:	89 c3                	mov    %eax,%ebx
   10c2c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10c30:	ba 01 00 00 00       	mov    $0x1,%edx
   10c35:	89 c1                	mov    %eax,%ecx
   10c37:	d3 e2                	shl    %cl,%edx
   10c39:	89 d0                	mov    %edx,%eax
   10c3b:	f7 d0                	not    %eax
   10c3d:	21 d8                	and    %ebx,%eax
   10c3f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10c42:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c46:	50                   	push   %eax
   10c47:	6a 21                	push   $0x21
   10c49:	e8 66 f9 ff ff       	call   105b4 <outb>
   10c4e:	83 c4 08             	add    $0x8,%esp
   10c51:	eb 3d                	jmp    10c90 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   10c53:	68 a1 00 00 00       	push   $0xa1
   10c58:	e8 3a f9 ff ff       	call   10597 <inb>
   10c5d:	83 c4 04             	add    $0x4,%esp
   10c60:	89 c3                	mov    %eax,%ebx
   10c62:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10c66:	83 e8 08             	sub    $0x8,%eax
   10c69:	ba 01 00 00 00       	mov    $0x1,%edx
   10c6e:	89 c1                	mov    %eax,%ecx
   10c70:	d3 e2                	shl    %cl,%edx
   10c72:	89 d0                	mov    %edx,%eax
   10c74:	f7 d0                	not    %eax
   10c76:	21 d8                	and    %ebx,%eax
   10c78:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10c7b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c7f:	50                   	push   %eax
   10c80:	68 a1 00 00 00       	push   $0xa1
   10c85:	e8 2a f9 ff ff       	call   105b4 <outb>
   10c8a:	83 c4 08             	add    $0x8,%esp
   10c8d:	eb 01                	jmp    10c90 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   10c8f:	90                   	nop
  }
  
}
   10c90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c93:	c9                   	leave  
   10c94:	c3                   	ret    

00010c95 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   10c95:	55                   	push   %ebp
   10c96:	89 e5                	mov    %esp,%ebp
   10c98:	53                   	push   %ebx
   10c99:	83 ec 14             	sub    $0x14,%esp
   10c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10ca2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   10ca6:	76 7b                	jbe    10d23 <idt_disable+0x8e>
   10ca8:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   10cac:	77 75                	ja     10d23 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   10cae:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   10cb2:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   10cb6:	77 31                	ja     10ce9 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10cb8:	6a 21                	push   $0x21
   10cba:	e8 d8 f8 ff ff       	call   10597 <inb>
   10cbf:	83 c4 04             	add    $0x4,%esp
   10cc2:	89 c3                	mov    %eax,%ebx
   10cc4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10cc8:	ba 01 00 00 00       	mov    $0x1,%edx
   10ccd:	89 c1                	mov    %eax,%ecx
   10ccf:	d3 e2                	shl    %cl,%edx
   10cd1:	89 d0                	mov    %edx,%eax
   10cd3:	09 d8                	or     %ebx,%eax
   10cd5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   10cd8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10cdc:	50                   	push   %eax
   10cdd:	6a 21                	push   $0x21
   10cdf:	e8 d0 f8 ff ff       	call   105b4 <outb>
   10ce4:	83 c4 08             	add    $0x8,%esp
   10ce7:	eb 3b                	jmp    10d24 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   10ce9:	68 a1 00 00 00       	push   $0xa1
   10cee:	e8 a4 f8 ff ff       	call   10597 <inb>
   10cf3:	83 c4 04             	add    $0x4,%esp
   10cf6:	89 c3                	mov    %eax,%ebx
   10cf8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   10cfc:	83 e8 08             	sub    $0x8,%eax
   10cff:	ba 01 00 00 00       	mov    $0x1,%edx
   10d04:	89 c1                	mov    %eax,%ecx
   10d06:	d3 e2                	shl    %cl,%edx
   10d08:	89 d0                	mov    %edx,%eax
   10d0a:	09 d8                	or     %ebx,%eax
   10d0c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   10d0f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d13:	50                   	push   %eax
   10d14:	68 a1 00 00 00       	push   $0xa1
   10d19:	e8 96 f8 ff ff       	call   105b4 <outb>
   10d1e:	83 c4 08             	add    $0x8,%esp
   10d21:	eb 01                	jmp    10d24 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   10d23:	90                   	nop
  }
  
}
   10d24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d27:	c9                   	leave  
   10d28:	c3                   	ret    

00010d29 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   10d29:	55                   	push   %ebp
   10d2a:	89 e5                	mov    %esp,%ebp
  cli();
   10d2c:	e8 51 f8 ff ff       	call   10582 <cli>
}
   10d31:	90                   	nop
   10d32:	5d                   	pop    %ebp
   10d33:	c3                   	ret    

00010d34 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   10d34:	55                   	push   %ebp
   10d35:	89 e5                	mov    %esp,%ebp
  sti();
   10d37:	e8 4d f8 ff ff       	call   10589 <sti>
}
   10d3c:	90                   	nop
   10d3d:	5d                   	pop    %ebp
   10d3e:	c3                   	ret    

00010d3f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   10d3f:	55                   	push   %ebp
   10d40:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   10d42:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   10d46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d4a:	78 29                	js     10d75 <pic_send_eoi+0x36>
   10d4c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   10d50:	7f 23                	jg     10d75 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   10d52:	6a 20                	push   $0x20
   10d54:	6a 20                	push   $0x20
   10d56:	e8 59 f8 ff ff       	call   105b4 <outb>
   10d5b:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   10d5e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d62:	7e 12                	jle    10d76 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   10d64:	6a 20                	push   $0x20
   10d66:	68 a0 00 00 00       	push   $0xa0
   10d6b:	e8 44 f8 ff ff       	call   105b4 <outb>
   10d70:	83 c4 08             	add    $0x8,%esp
   10d73:	eb 01                	jmp    10d76 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   10d75:	90                   	nop
  }

   10d76:	c9                   	leave  
   10d77:	c3                   	ret    

00010d78 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10d78:	55                   	push   %ebp
   10d79:	89 e5                	mov    %esp,%ebp
   10d7b:	83 ec 08             	sub    $0x8,%esp
   10d7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d81:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d84:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10d88:	89 d0                	mov    %edx,%eax
   10d8a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10d8d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d91:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10d95:	ee                   	out    %al,(%dx)
}
   10d96:	90                   	nop
   10d97:	c9                   	leave  
   10d98:	c3                   	ret    

00010d99 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   10d99:	55                   	push   %ebp
   10d9a:	89 e5                	mov    %esp,%ebp
   10d9c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10d9f:	a1 a0 22 02 00       	mov    0x222a0,%eax
   10da4:	83 c0 01             	add    $0x1,%eax
   10da7:	a3 a0 22 02 00       	mov    %eax,0x222a0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   10dac:	83 ec 0c             	sub    $0xc,%esp
   10daf:	6a 20                	push   $0x20
   10db1:	e8 89 ff ff ff       	call   10d3f <pic_send_eoi>
   10db6:	83 c4 10             	add    $0x10,%esp
}
   10db9:	90                   	nop
   10dba:	c9                   	leave  
   10dbb:	c3                   	ret    

00010dbc <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   10dbc:	55                   	push   %ebp
   10dbd:	89 e5                	mov    %esp,%ebp
   10dbf:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   10dc2:	6a 36                	push   $0x36
   10dc4:	6a 43                	push   $0x43
   10dc6:	e8 ad ff ff ff       	call   10d78 <outb>
   10dcb:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   10dce:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   10dd4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10dd8:	0f b6 c0             	movzbl %al,%eax
   10ddb:	50                   	push   %eax
   10ddc:	6a 40                	push   $0x40
   10dde:	e8 95 ff ff ff       	call   10d78 <outb>
   10de3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   10de6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   10dea:	66 c1 e8 08          	shr    $0x8,%ax
   10dee:	0f b6 c0             	movzbl %al,%eax
   10df1:	50                   	push   %eax
   10df2:	6a 40                	push   $0x40
   10df4:	e8 7f ff ff ff       	call   10d78 <outb>
   10df9:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   10dfc:	83 ec 08             	sub    $0x8,%esp
   10dff:	68 7b 02 01 00       	push   $0x1027b
   10e04:	6a 20                	push   $0x20
   10e06:	e8 ac fb ff ff       	call   109b7 <idt_install>
   10e0b:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   10e0e:	83 ec 0c             	sub    $0xc,%esp
   10e11:	6a 20                	push   $0x20
   10e13:	e8 e5 fd ff ff       	call   10bfd <idt_enable>
   10e18:	83 c4 10             	add    $0x10,%esp

}
   10e1b:	90                   	nop
   10e1c:	c9                   	leave  
   10e1d:	c3                   	ret    

00010e1e <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   10e1e:	55                   	push   %ebp
   10e1f:	89 e5                	mov    %esp,%ebp
   10e21:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e24:	c7 05 a0 22 02 00 00 	movl   $0x0,0x222a0
   10e2b:	00 00 00 
    init_pit();
   10e2e:	e8 89 ff ff ff       	call   10dbc <init_pit>
   10e33:	90                   	nop
   10e34:	c9                   	leave  
   10e35:	c3                   	ret    

00010e36 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   10e36:	55                   	push   %ebp
   10e37:	89 e5                	mov    %esp,%ebp
   10e39:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   10e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3f:	8b 40 50             	mov    0x50(%eax),%eax
   10e42:	85 c0                	test   %eax,%eax
   10e44:	75 19                	jne    10e5f <kernel_init+0x29>
   10e46:	68 9c 19 01 00       	push   $0x1199c
   10e4b:	68 44 1a 01 00       	push   $0x11a44
   10e50:	6a 1d                	push   $0x1d
   10e52:	68 c0 19 01 00       	push   $0x119c0
   10e57:	e8 21 01 00 00       	call   10f7d <pannic>
   10e5c:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   10e5f:	e8 6f 06 00 00       	call   114d3 <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   10e64:	e8 65 f6 ff ff       	call   104ce <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   10e69:	e8 1c fc ff ff       	call   10a8a <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   10e6e:	e8 ab ff ff ff       	call   10e1e <time_init>

    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   10e73:	90                   	nop
   10e74:	c9                   	leave  
   10e75:	c3                   	ret    

00010e76 <test_task_1>:
static task_t task_2;
//声明预留一下任务使用的栈空间
static uint32_t init_stack_1[1024]; 
static uint32_t init_stack_2[1024]; 

void test_task_1(void) {
   10e76:	55                   	push   %ebp
   10e77:	89 e5                	mov    %esp,%ebp
   10e79:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   10e7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_1: %d", count++);
   10e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e86:	8d 50 01             	lea    0x1(%eax),%edx
   10e89:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e8c:	83 ec 08             	sub    $0x8,%esp
   10e8f:	50                   	push   %eax
   10e90:	68 f5 19 01 00       	push   $0x119f5
   10e95:	e8 ae 06 00 00       	call   11548 <log_printf>
   10e9a:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task_1, &task_2);
   10e9d:	83 ec 08             	sub    $0x8,%esp
   10ea0:	68 40 23 02 00       	push   $0x22340
   10ea5:	68 c0 22 02 00       	push   $0x222c0
   10eaa:	e8 20 f5 ff ff       	call   103cf <task_switch_from_to>
   10eaf:	83 c4 10             	add    $0x10,%esp
        log_printf("task_1: %d", count++);
   10eb2:	eb cf                	jmp    10e83 <test_task_1+0xd>

00010eb4 <test_task_2>:
     }
}

void test_task_2(void) {
   10eb4:	55                   	push   %ebp
   10eb5:	89 e5                	mov    %esp,%ebp
   10eb7:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   10eba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_2: %d", count++);
   10ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ec4:	8d 50 01             	lea    0x1(%eax),%edx
   10ec7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10eca:	83 ec 08             	sub    $0x8,%esp
   10ecd:	50                   	push   %eax
   10ece:	68 00 1a 01 00       	push   $0x11a00
   10ed3:	e8 70 06 00 00       	call   11548 <log_printf>
   10ed8:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task_2, &task_1);
   10edb:	83 ec 08             	sub    $0x8,%esp
   10ede:	68 c0 22 02 00       	push   $0x222c0
   10ee3:	68 40 23 02 00       	push   $0x22340
   10ee8:	e8 e2 f4 ff ff       	call   103cf <task_switch_from_to>
   10eed:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %d", count++);
   10ef0:	eb cf                	jmp    10ec1 <test_task_2+0xd>

00010ef2 <init_main>:
     }
}
void init_main(void) {
   10ef2:	55                   	push   %ebp
   10ef3:	89 e5                	mov    %esp,%ebp
   10ef5:	83 ec 18             	sub    $0x18,%esp

    log_printf("Kernel is running......");
   10ef8:	83 ec 0c             	sub    $0xc,%esp
   10efb:	68 0b 1a 01 00       	push   $0x11a0b
   10f00:	e8 43 06 00 00       	call   11548 <log_printf>
   10f05:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   10f08:	83 ec 04             	sub    $0x4,%esp
   10f0b:	68 23 1a 01 00       	push   $0x11a23
   10f10:	68 29 1a 01 00       	push   $0x11a29
   10f15:	68 2e 1a 01 00       	push   $0x11a2e
   10f1a:	e8 29 06 00 00       	call   11548 <log_printf>
   10f1f:	83 c4 10             	add    $0x10,%esp

    task_init(&task_1, (uint32_t)test_task_1, (uint32_t)&init_stack_1[1024]);
   10f22:	ba c0 33 02 00       	mov    $0x233c0,%edx
   10f27:	b8 76 0e 01 00       	mov    $0x10e76,%eax
   10f2c:	83 ec 04             	sub    $0x4,%esp
   10f2f:	52                   	push   %edx
   10f30:	50                   	push   %eax
   10f31:	68 c0 22 02 00       	push   $0x222c0
   10f36:	e8 35 f4 ff ff       	call   10370 <task_init>
   10f3b:	83 c4 10             	add    $0x10,%esp
    task_init(&task_2, (uint32_t)test_task_2, (uint32_t)&init_stack_2[1024]);
   10f3e:	ba c0 43 02 00       	mov    $0x243c0,%edx
   10f43:	b8 b4 0e 01 00       	mov    $0x10eb4,%eax
   10f48:	83 ec 04             	sub    $0x4,%esp
   10f4b:	52                   	push   %edx
   10f4c:	50                   	push   %eax
   10f4d:	68 40 23 02 00       	push   $0x22340
   10f52:	e8 19 f4 ff ff       	call   10370 <task_init>
   10f57:	83 c4 10             	add    $0x10,%esp

    task_switch_from_to(0, &task_1);
   10f5a:	83 ec 08             	sub    $0x8,%esp
   10f5d:	68 c0 22 02 00       	push   $0x222c0
   10f62:	6a 00                	push   $0x0
   10f64:	e8 66 f4 ff ff       	call   103cf <task_switch_from_to>
   10f69:	83 c4 10             	add    $0x10,%esp

    int count = 0;
   10f6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

   10f73:	90                   	nop
   10f74:	c9                   	leave  
   10f75:	c3                   	ret    

00010f76 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10f76:	55                   	push   %ebp
   10f77:	89 e5                	mov    %esp,%ebp
   10f79:	f4                   	hlt    
   10f7a:	90                   	nop
   10f7b:	5d                   	pop    %ebp
   10f7c:	c3                   	ret    

00010f7d <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   10f7d:	55                   	push   %ebp
   10f7e:	89 e5                	mov    %esp,%ebp
   10f80:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   10f83:	83 ec 08             	sub    $0x8,%esp
   10f86:	ff 75 14             	push   0x14(%ebp)
   10f89:	68 50 1a 01 00       	push   $0x11a50
   10f8e:	e8 b5 05 00 00       	call   11548 <log_printf>
   10f93:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   10f96:	ff 75 10             	push   0x10(%ebp)
   10f99:	ff 75 0c             	push   0xc(%ebp)
   10f9c:	ff 75 08             	push   0x8(%ebp)
   10f9f:	68 61 1a 01 00       	push   $0x11a61
   10fa4:	e8 9f 05 00 00       	call   11548 <log_printf>
   10fa9:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   10fac:	e8 c5 ff ff ff       	call   10f76 <hlt>
   10fb1:	eb f9                	jmp    10fac <pannic+0x2f>

00010fb3 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   10fb3:	55                   	push   %ebp
   10fb4:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   10fb6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fba:	74 3b                	je     10ff7 <kernel_strcpy+0x44>
   10fbc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fc0:	74 35                	je     10ff7 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   10fc2:	eb 17                	jmp    10fdb <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   10fc4:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fc7:	8d 42 01             	lea    0x1(%edx),%eax
   10fca:	89 45 0c             	mov    %eax,0xc(%ebp)
   10fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd0:	8d 48 01             	lea    0x1(%eax),%ecx
   10fd3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10fd6:	0f b6 12             	movzbl (%edx),%edx
   10fd9:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10fdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fde:	0f b6 00             	movzbl (%eax),%eax
   10fe1:	84 c0                	test   %al,%al
   10fe3:	74 0a                	je     10fef <kernel_strcpy+0x3c>
   10fe5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe8:	0f b6 00             	movzbl (%eax),%eax
   10feb:	84 c0                	test   %al,%al
   10fed:	75 d5                	jne    10fc4 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   10fef:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff2:	c6 00 00             	movb   $0x0,(%eax)
   10ff5:	eb 01                	jmp    10ff8 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   10ff7:	90                   	nop
    
}
   10ff8:	5d                   	pop    %ebp
   10ff9:	c3                   	ret    

00010ffa <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   10ffa:	55                   	push   %ebp
   10ffb:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   10ffd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11001:	74 45                	je     11048 <kernel_strncpy+0x4e>
   11003:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11007:	74 3f                	je     11048 <kernel_strncpy+0x4e>
   11009:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1100d:	74 39                	je     11048 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   1100f:	eb 17                	jmp    11028 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   11011:	8b 55 0c             	mov    0xc(%ebp),%edx
   11014:	8d 42 01             	lea    0x1(%edx),%eax
   11017:	89 45 0c             	mov    %eax,0xc(%ebp)
   1101a:	8b 45 08             	mov    0x8(%ebp),%eax
   1101d:	8d 48 01             	lea    0x1(%eax),%ecx
   11020:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11023:	0f b6 12             	movzbl (%edx),%edx
   11026:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   11028:	8b 45 10             	mov    0x10(%ebp),%eax
   1102b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1102e:	89 55 10             	mov    %edx,0x10(%ebp)
   11031:	83 f8 01             	cmp    $0x1,%eax
   11034:	7e 0a                	jle    11040 <kernel_strncpy+0x46>
   11036:	8b 45 0c             	mov    0xc(%ebp),%eax
   11039:	0f b6 00             	movzbl (%eax),%eax
   1103c:	84 c0                	test   %al,%al
   1103e:	75 d1                	jne    11011 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   11040:	8b 45 08             	mov    0x8(%ebp),%eax
   11043:	c6 00 00             	movb   $0x0,(%eax)
   11046:	eb 01                	jmp    11049 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11048:	90                   	nop
}
   11049:	5d                   	pop    %ebp
   1104a:	c3                   	ret    

0001104b <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1104b:	55                   	push   %ebp
   1104c:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   1104e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11052:	74 06                	je     1105a <kernel_strncmp+0xf>
   11054:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11058:	75 0f                	jne    11069 <kernel_strncmp+0x1e>
   1105a:	b8 00 00 00 00       	mov    $0x0,%eax
   1105f:	eb 52                	jmp    110b3 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   11061:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11065:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11069:	8b 45 08             	mov    0x8(%ebp),%eax
   1106c:	0f b6 00             	movzbl (%eax),%eax
   1106f:	84 c0                	test   %al,%al
   11071:	74 24                	je     11097 <kernel_strncmp+0x4c>
   11073:	8b 45 0c             	mov    0xc(%ebp),%eax
   11076:	0f b6 00             	movzbl (%eax),%eax
   11079:	84 c0                	test   %al,%al
   1107b:	74 1a                	je     11097 <kernel_strncmp+0x4c>
   1107d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11081:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11085:	74 10                	je     11097 <kernel_strncmp+0x4c>
   11087:	8b 45 08             	mov    0x8(%ebp),%eax
   1108a:	0f b6 10             	movzbl (%eax),%edx
   1108d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11090:	0f b6 00             	movzbl (%eax),%eax
   11093:	38 c2                	cmp    %al,%dl
   11095:	74 ca                	je     11061 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11097:	8b 45 08             	mov    0x8(%ebp),%eax
   1109a:	0f b6 10             	movzbl (%eax),%edx
   1109d:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a0:	0f b6 00             	movzbl (%eax),%eax
   110a3:	38 c2                	cmp    %al,%dl
   110a5:	7e 07                	jle    110ae <kernel_strncmp+0x63>
   110a7:	b8 01 00 00 00       	mov    $0x1,%eax
   110ac:	eb 05                	jmp    110b3 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   110ae:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   110b3:	5d                   	pop    %ebp
   110b4:	c3                   	ret    

000110b5 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   110b5:	55                   	push   %ebp
   110b6:	89 e5                	mov    %esp,%ebp
   110b8:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   110bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110bf:	75 07                	jne    110c8 <kernel_strlen+0x13>
   110c1:	b8 00 00 00 00       	mov    $0x0,%eax
   110c6:	eb 20                	jmp    110e8 <kernel_strlen+0x33>

    int len = 0;
   110c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   110cf:	eb 04                	jmp    110d5 <kernel_strlen+0x20>
   110d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   110d5:	8b 45 08             	mov    0x8(%ebp),%eax
   110d8:	8d 50 01             	lea    0x1(%eax),%edx
   110db:	89 55 08             	mov    %edx,0x8(%ebp)
   110de:	0f b6 00             	movzbl (%eax),%eax
   110e1:	84 c0                	test   %al,%al
   110e3:	75 ec                	jne    110d1 <kernel_strlen+0x1c>

    return len;
   110e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   110e8:	c9                   	leave  
   110e9:	c3                   	ret    

000110ea <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   110ea:	55                   	push   %ebp
   110eb:	89 e5                	mov    %esp,%ebp
   110ed:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   110f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110f4:	74 40                	je     11136 <kernel_memcpy+0x4c>
   110f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110fa:	74 3a                	je     11136 <kernel_memcpy+0x4c>
   110fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11100:	74 34                	je     11136 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   11108:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   1110e:	eb 17                	jmp    11127 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   11110:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11113:	8d 42 01             	lea    0x1(%edx),%eax
   11116:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11119:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1111c:	8d 48 01             	lea    0x1(%eax),%ecx
   1111f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11122:	0f b6 12             	movzbl (%edx),%edx
   11125:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11127:	8b 45 10             	mov    0x10(%ebp),%eax
   1112a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1112d:	89 55 10             	mov    %edx,0x10(%ebp)
   11130:	85 c0                	test   %eax,%eax
   11132:	75 dc                	jne    11110 <kernel_memcpy+0x26>
   11134:	eb 01                	jmp    11137 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   11136:	90                   	nop
    }
    
}
   11137:	c9                   	leave  
   11138:	c3                   	ret    

00011139 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   11139:	55                   	push   %ebp
   1113a:	89 e5                	mov    %esp,%ebp
   1113c:	83 ec 14             	sub    $0x14,%esp
   1113f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11142:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11145:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11149:	74 2c                	je     11177 <kernel_memset+0x3e>
   1114b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1114f:	74 26                	je     11177 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   11151:	8b 45 08             	mov    0x8(%ebp),%eax
   11154:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   11157:	eb 0f                	jmp    11168 <kernel_memset+0x2f>
        *(d++) = v;
   11159:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1115c:	8d 50 01             	lea    0x1(%eax),%edx
   1115f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11162:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11166:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11168:	8b 45 10             	mov    0x10(%ebp),%eax
   1116b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1116e:	89 55 10             	mov    %edx,0x10(%ebp)
   11171:	85 c0                	test   %eax,%eax
   11173:	75 e4                	jne    11159 <kernel_memset+0x20>
   11175:	eb 01                	jmp    11178 <kernel_memset+0x3f>
    if (!dest || !size) return;
   11177:	90                   	nop
    }
    
}
   11178:	c9                   	leave  
   11179:	c3                   	ret    

0001117a <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1117a:	55                   	push   %ebp
   1117b:	89 e5                	mov    %esp,%ebp
   1117d:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   11180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11184:	74 0c                	je     11192 <kernel_memcmp+0x18>
   11186:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1118a:	74 06                	je     11192 <kernel_memcmp+0x18>
   1118c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11190:	75 07                	jne    11199 <kernel_memcmp+0x1f>
   11192:	b8 00 00 00 00       	mov    $0x0,%eax
   11197:	eb 63                	jmp    111fc <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   11199:	8b 45 08             	mov    0x8(%ebp),%eax
   1119c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1119f:	8b 45 0c             	mov    0xc(%ebp),%eax
   111a2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   111a5:	eb 08                	jmp    111af <kernel_memcmp+0x35>
        d1++;
   111a7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   111ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   111af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   111b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111b7:	74 10                	je     111c9 <kernel_memcmp+0x4f>
   111b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111bc:	0f b6 10             	movzbl (%eax),%edx
   111bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111c2:	0f b6 00             	movzbl (%eax),%eax
   111c5:	38 c2                	cmp    %al,%dl
   111c7:	74 de                	je     111a7 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   111c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111cc:	0f b6 10             	movzbl (%eax),%edx
   111cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111d2:	0f b6 00             	movzbl (%eax),%eax
   111d5:	38 c2                	cmp    %al,%dl
   111d7:	76 07                	jbe    111e0 <kernel_memcmp+0x66>
   111d9:	b8 01 00 00 00       	mov    $0x1,%eax
   111de:	eb 1c                	jmp    111fc <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   111e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111e3:	0f b6 10             	movzbl (%eax),%edx
   111e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111e9:	0f b6 00             	movzbl (%eax),%eax
   111ec:	38 c2                	cmp    %al,%dl
   111ee:	73 07                	jae    111f7 <kernel_memcmp+0x7d>
   111f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111f5:	eb 05                	jmp    111fc <kernel_memcmp+0x82>
    else return 0;
   111f7:	b8 00 00 00 00       	mov    $0x0,%eax

}
   111fc:	c9                   	leave  
   111fd:	c3                   	ret    

000111fe <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   111fe:	55                   	push   %ebp
   111ff:	89 e5                	mov    %esp,%ebp
   11201:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11204:	8d 45 10             	lea    0x10(%ebp),%eax
   11207:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   1120a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1120d:	83 ec 04             	sub    $0x4,%esp
   11210:	50                   	push   %eax
   11211:	ff 75 0c             	push   0xc(%ebp)
   11214:	ff 75 08             	push   0x8(%ebp)
   11217:	e8 06 00 00 00       	call   11222 <kernel_vsprintf>
   1121c:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1121f:	90                   	nop
   11220:	c9                   	leave  
   11221:	c3                   	ret    

00011222 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   11222:	55                   	push   %ebp
   11223:	89 e5                	mov    %esp,%ebp
   11225:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   11228:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   1122f:	8b 45 08             	mov    0x8(%ebp),%eax
   11232:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11235:	e9 68 01 00 00       	jmp    113a2 <kernel_vsprintf+0x180>
        switch (state) {
   1123a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1123e:	74 0b                	je     1124b <kernel_vsprintf+0x29>
   11240:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11244:	74 2b                	je     11271 <kernel_vsprintf+0x4f>
   11246:	e9 56 01 00 00       	jmp    113a1 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1124b:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   1124f:	75 0c                	jne    1125d <kernel_vsprintf+0x3b>
   11251:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11258:	e9 45 01 00 00       	jmp    113a2 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   1125d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11260:	8d 50 01             	lea    0x1(%eax),%edx
   11263:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11266:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1126a:	88 10                	mov    %dl,(%eax)
            break;
   1126c:	e9 31 01 00 00       	jmp    113a2 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   11271:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11275:	75 47                	jne    112be <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11277:	8b 45 10             	mov    0x10(%ebp),%eax
   1127a:	8d 50 04             	lea    0x4(%eax),%edx
   1127d:	89 55 10             	mov    %edx,0x10(%ebp)
   11280:	8b 00                	mov    (%eax),%eax
   11282:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11285:	ff 75 ec             	push   -0x14(%ebp)
   11288:	e8 28 fe ff ff       	call   110b5 <kernel_strlen>
   1128d:	83 c4 04             	add    $0x4,%esp
   11290:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11293:	eb 17                	jmp    112ac <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11295:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11298:	8d 42 01             	lea    0x1(%edx),%eax
   1129b:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1129e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112a1:	8d 48 01             	lea    0x1(%eax),%ecx
   112a4:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   112a7:	0f b6 12             	movzbl (%edx),%edx
   112aa:	88 10                	mov    %dl,(%eax)
                while (len--) {
   112ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112af:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b2:	89 55 e8             	mov    %edx,-0x18(%ebp)
   112b5:	85 c0                	test   %eax,%eax
   112b7:	75 dc                	jne    11295 <kernel_vsprintf+0x73>
   112b9:	e9 da 00 00 00       	jmp    11398 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   112be:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   112c2:	75 37                	jne    112fb <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   112c4:	8b 45 10             	mov    0x10(%ebp),%eax
   112c7:	8d 50 04             	lea    0x4(%eax),%edx
   112ca:	89 55 10             	mov    %edx,0x10(%ebp)
   112cd:	8b 00                	mov    (%eax),%eax
   112cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   112d2:	83 ec 04             	sub    $0x4,%esp
   112d5:	6a 0a                	push   $0xa
   112d7:	ff 75 d8             	push   -0x28(%ebp)
   112da:	ff 75 f0             	push   -0x10(%ebp)
   112dd:	e8 dd 00 00 00       	call   113bf <kernel_itoa>
   112e2:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   112e5:	83 ec 0c             	sub    $0xc,%esp
   112e8:	ff 75 f0             	push   -0x10(%ebp)
   112eb:	e8 c5 fd ff ff       	call   110b5 <kernel_strlen>
   112f0:	83 c4 10             	add    $0x10,%esp
   112f3:	01 45 f0             	add    %eax,-0x10(%ebp)
   112f6:	e9 9d 00 00 00       	jmp    11398 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   112fb:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   112ff:	74 06                	je     11307 <kernel_vsprintf+0xe5>
   11301:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   11305:	75 34                	jne    1133b <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   11307:	8b 45 10             	mov    0x10(%ebp),%eax
   1130a:	8d 50 04             	lea    0x4(%eax),%edx
   1130d:	89 55 10             	mov    %edx,0x10(%ebp)
   11310:	8b 00                	mov    (%eax),%eax
   11312:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   11315:	83 ec 04             	sub    $0x4,%esp
   11318:	6a 10                	push   $0x10
   1131a:	ff 75 dc             	push   -0x24(%ebp)
   1131d:	ff 75 f0             	push   -0x10(%ebp)
   11320:	e8 9a 00 00 00       	call   113bf <kernel_itoa>
   11325:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11328:	83 ec 0c             	sub    $0xc,%esp
   1132b:	ff 75 f0             	push   -0x10(%ebp)
   1132e:	e8 82 fd ff ff       	call   110b5 <kernel_strlen>
   11333:	83 c4 10             	add    $0x10,%esp
   11336:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   11339:	eb 5d                	jmp    11398 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1133b:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1133f:	75 34                	jne    11375 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   11341:	8b 45 10             	mov    0x10(%ebp),%eax
   11344:	8d 50 04             	lea    0x4(%eax),%edx
   11347:	89 55 10             	mov    %edx,0x10(%ebp)
   1134a:	8b 00                	mov    (%eax),%eax
   1134c:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   1134f:	83 ec 04             	sub    $0x4,%esp
   11352:	6a 02                	push   $0x2
   11354:	ff 75 e0             	push   -0x20(%ebp)
   11357:	ff 75 f0             	push   -0x10(%ebp)
   1135a:	e8 60 00 00 00       	call   113bf <kernel_itoa>
   1135f:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11362:	83 ec 0c             	sub    $0xc,%esp
   11365:	ff 75 f0             	push   -0x10(%ebp)
   11368:	e8 48 fd ff ff       	call   110b5 <kernel_strlen>
   1136d:	83 c4 10             	add    $0x10,%esp
   11370:	01 45 f0             	add    %eax,-0x10(%ebp)
   11373:	eb 23                	jmp    11398 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11375:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11379:	75 1d                	jne    11398 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1137b:	8b 45 10             	mov    0x10(%ebp),%eax
   1137e:	8d 50 04             	lea    0x4(%eax),%edx
   11381:	89 55 10             	mov    %edx,0x10(%ebp)
   11384:	8b 00                	mov    (%eax),%eax
   11386:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11389:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1138c:	8d 50 01             	lea    0x1(%eax),%edx
   1138f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11392:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11396:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11398:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1139f:	eb 01                	jmp    113a2 <kernel_vsprintf+0x180>
        default:
            break;
   113a1:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   113a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a5:	8d 50 01             	lea    0x1(%eax),%edx
   113a8:	89 55 0c             	mov    %edx,0xc(%ebp)
   113ab:	0f b6 00             	movzbl (%eax),%eax
   113ae:	88 45 e7             	mov    %al,-0x19(%ebp)
   113b1:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   113b5:	0f 85 7f fe ff ff    	jne    1123a <kernel_vsprintf+0x18>
        }
    }
    

}
   113bb:	90                   	nop
   113bc:	90                   	nop
   113bd:	c9                   	leave  
   113be:	c3                   	ret    

000113bf <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   113bf:	55                   	push   %ebp
   113c0:	89 e5                	mov    %esp,%ebp
   113c2:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   113c8:	8b 45 08             	mov    0x8(%ebp),%eax
   113cb:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   113ce:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   113d2:	74 1d                	je     113f1 <kernel_itoa+0x32>
   113d4:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   113d8:	74 17                	je     113f1 <kernel_itoa+0x32>
   113da:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   113de:	74 11                	je     113f1 <kernel_itoa+0x32>
   113e0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   113e4:	74 0b                	je     113f1 <kernel_itoa+0x32>
        *buf = '\0';
   113e6:	8b 45 08             	mov    0x8(%ebp),%eax
   113e9:	c6 00 00             	movb   $0x0,(%eax)
        return;
   113ec:	e9 a2 00 00 00       	jmp    11493 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   113f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113f5:	79 11                	jns    11408 <kernel_itoa+0x49>
        *(p++) = '-';
   113f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113fa:	8d 50 01             	lea    0x1(%eax),%edx
   113fd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11400:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   11403:	f7 5d 0c             	negl   0xc(%ebp)
   11406:	eb 1a                	jmp    11422 <kernel_itoa+0x63>
    } else if (num == 0) {
   11408:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1140c:	75 14                	jne    11422 <kernel_itoa+0x63>
        *(p++) = '0';
   1140e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11411:	8d 50 01             	lea    0x1(%eax),%edx
   11414:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11417:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   1141a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1141d:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11420:	eb 71                	jmp    11493 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   11422:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   11429:	eb 2e                	jmp    11459 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   1142b:	8b 0d 90 1a 01 00    	mov    0x11a90,%ecx
   11431:	8b 45 0c             	mov    0xc(%ebp),%eax
   11434:	99                   	cltd   
   11435:	f7 7d 10             	idivl  0x10(%ebp)
   11438:	89 d0                	mov    %edx,%eax
   1143a:	01 c1                	add    %eax,%ecx
   1143c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1143f:	8d 50 01             	lea    0x1(%eax),%edx
   11442:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11445:	0f b6 11             	movzbl (%ecx),%edx
   11448:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   1144f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11452:	99                   	cltd   
   11453:	f7 7d 10             	idivl  0x10(%ebp)
   11456:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11459:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1145d:	7f cc                	jg     1142b <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   1145f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11462:	83 e8 01             	sub    $0x1,%eax
   11465:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11468:	eb 1d                	jmp    11487 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1146a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1146d:	8d 50 01             	lea    0x1(%eax),%edx
   11470:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11473:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11479:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1147c:	01 ca                	add    %ecx,%edx
   1147e:	0f b6 12             	movzbl (%edx),%edx
   11481:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   11483:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11487:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1148b:	79 dd                	jns    1146a <kernel_itoa+0xab>
    }
    *p = '\0';
   1148d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11490:	c6 00 00             	movb   $0x0,(%eax)
   11493:	c9                   	leave  
   11494:	c3                   	ret    

00011495 <inb>:
static inline uint8_t inb(uint16_t port) {
   11495:	55                   	push   %ebp
   11496:	89 e5                	mov    %esp,%ebp
   11498:	83 ec 14             	sub    $0x14,%esp
   1149b:	8b 45 08             	mov    0x8(%ebp),%eax
   1149e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   114a2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   114a6:	89 c2                	mov    %eax,%edx
   114a8:	ec                   	in     (%dx),%al
   114a9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   114ac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   114b0:	c9                   	leave  
   114b1:	c3                   	ret    

000114b2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   114b2:	55                   	push   %ebp
   114b3:	89 e5                	mov    %esp,%ebp
   114b5:	83 ec 08             	sub    $0x8,%esp
   114b8:	8b 45 08             	mov    0x8(%ebp),%eax
   114bb:	8b 55 0c             	mov    0xc(%ebp),%edx
   114be:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   114c2:	89 d0                	mov    %edx,%eax
   114c4:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   114c7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114cb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114cf:	ee                   	out    %al,(%dx)
}
   114d0:	90                   	nop
   114d1:	c9                   	leave  
   114d2:	c3                   	ret    

000114d3 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   114d3:	55                   	push   %ebp
   114d4:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   114d6:	6a 00                	push   $0x0
   114d8:	68 f9 03 00 00       	push   $0x3f9
   114dd:	e8 d0 ff ff ff       	call   114b2 <outb>
   114e2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   114e5:	68 80 00 00 00       	push   $0x80
   114ea:	68 fb 03 00 00       	push   $0x3fb
   114ef:	e8 be ff ff ff       	call   114b2 <outb>
   114f4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   114f7:	6a 03                	push   $0x3
   114f9:	68 f8 03 00 00       	push   $0x3f8
   114fe:	e8 af ff ff ff       	call   114b2 <outb>
   11503:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11506:	6a 00                	push   $0x0
   11508:	68 f9 03 00 00       	push   $0x3f9
   1150d:	e8 a0 ff ff ff       	call   114b2 <outb>
   11512:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11515:	6a 03                	push   $0x3
   11517:	68 fb 03 00 00       	push   $0x3fb
   1151c:	e8 91 ff ff ff       	call   114b2 <outb>
   11521:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11524:	68 c7 00 00 00       	push   $0xc7
   11529:	68 fa 03 00 00       	push   $0x3fa
   1152e:	e8 7f ff ff ff       	call   114b2 <outb>
   11533:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11536:	6a 0f                	push   $0xf
   11538:	68 fc 03 00 00       	push   $0x3fc
   1153d:	e8 70 ff ff ff       	call   114b2 <outb>
   11542:	83 c4 08             	add    $0x8,%esp
}
   11545:	90                   	nop
   11546:	c9                   	leave  
   11547:	c3                   	ret    

00011548 <log_printf>:


void log_printf(const char *formate, ...) {
   11548:	55                   	push   %ebp
   11549:	89 e5                	mov    %esp,%ebp
   1154b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11551:	83 ec 04             	sub    $0x4,%esp
   11554:	68 80 00 00 00       	push   $0x80
   11559:	6a 00                	push   $0x0
   1155b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11561:	50                   	push   %eax
   11562:	e8 d2 fb ff ff       	call   11139 <kernel_memset>
   11567:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1156a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1156d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   11573:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11579:	83 ec 04             	sub    $0x4,%esp
   1157c:	50                   	push   %eax
   1157d:	ff 75 08             	push   0x8(%ebp)
   11580:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11586:	50                   	push   %eax
   11587:	e8 96 fc ff ff       	call   11222 <kernel_vsprintf>
   1158c:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1158f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11595:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   11598:	eb 57                	jmp    115f1 <log_printf+0xa9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1159a:	90                   	nop
   1159b:	83 ec 0c             	sub    $0xc,%esp
   1159e:	68 fd 03 00 00       	push   $0x3fd
   115a3:	e8 ed fe ff ff       	call   11495 <inb>
   115a8:	83 c4 10             	add    $0x10,%esp
   115ab:	0f b6 c0             	movzbl %al,%eax
   115ae:	83 e0 40             	and    $0x40,%eax
   115b1:	85 c0                	test   %eax,%eax
   115b3:	74 e6                	je     1159b <log_printf+0x53>

        if (*p == '\n') outb(COM1_PORT, '\r');
   115b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115b8:	0f b6 00             	movzbl (%eax),%eax
   115bb:	3c 0a                	cmp    $0xa,%al
   115bd:	75 12                	jne    115d1 <log_printf+0x89>
   115bf:	83 ec 08             	sub    $0x8,%esp
   115c2:	6a 0d                	push   $0xd
   115c4:	68 f8 03 00 00       	push   $0x3f8
   115c9:	e8 e4 fe ff ff       	call   114b2 <outb>
   115ce:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   115d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115d4:	8d 50 01             	lea    0x1(%eax),%edx
   115d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115da:	0f b6 00             	movzbl (%eax),%eax
   115dd:	0f b6 c0             	movzbl %al,%eax
   115e0:	83 ec 08             	sub    $0x8,%esp
   115e3:	50                   	push   %eax
   115e4:	68 f8 03 00 00       	push   $0x3f8
   115e9:	e8 c4 fe ff ff       	call   114b2 <outb>
   115ee:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   115f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115f4:	0f b6 00             	movzbl (%eax),%eax
   115f7:	84 c0                	test   %al,%al
   115f9:	75 9f                	jne    1159a <log_printf+0x52>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   115fb:	83 ec 08             	sub    $0x8,%esp
   115fe:	6a 0d                	push   $0xd
   11600:	68 f8 03 00 00       	push   $0x3f8
   11605:	e8 a8 fe ff ff       	call   114b2 <outb>
   1160a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1160d:	83 ec 08             	sub    $0x8,%esp
   11610:	6a 0a                	push   $0xa
   11612:	68 f8 03 00 00       	push   $0x3f8
   11617:	e8 96 fe ff ff       	call   114b2 <outb>
   1161c:	83 c4 10             	add    $0x10,%esp
   1161f:	90                   	nop
   11620:	c9                   	leave  
   11621:	c3                   	ret    
