
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000059cc memsz 0x000059cc flags r-x
    LOAD off    0x00007000 vaddr 0x00016000 paddr 0x00016000 align 2**12
         filesz 0x00000044 memsz 0x00024e20 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x0003b000 align 2**12
         filesz 0x00000331 memsz 0x00000331 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000490c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000010ac  00014920  00014920  00005920  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00016000  00016000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00023e20  00017000  00017000  00007044  2**12
                  ALLOC
  4 .first_task   00000331  80000000  0003b000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000028f2  00000000  00000000  00008331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000932  00000000  00000000  0000ac23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000075fb  00000000  00000000  0000b555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001fa6  00000000  00000000  00012b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000002a0  00000000  00000000  00014af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000017a6  00000000  00000000  00014d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000004e  00000000  00000000  0001653e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002d  00000000  00000000  0001658c  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001b44  00000000  00000000  000165bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	0000000f get_pte_privilege
0001036f l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00007e88 paddr_alloc
0001f000 l     O .bss	00001000 kernel_page_dir
00010380 l     F .text	00000025 page_index
000103a5 l     F .text	00000056 page_ref_add
000103fb l     F .text	00000068 page_ref_sub
00010463 l     F .text	0000004e get_page_ref
000104b1 l     F .text	00000051 clear_page_ref
00010502 l     F .text	00000087 addr_alloc_init
00010589 l     F .text	00000067 addr_alloc_page
000105f0 l     F .text	0000009c addr_free_page
0001068c l     F .text	00000066 show_mem_info
000106f2 l     F .text	00000037 total_mem_size
00014a68 l     O .rodata	00000011 __func__.3
00016000 l     O .data	00000040 kernal_map.2
00014a7c l     O .rodata	0000000c __func__.1
00010e0f l     F .text	00000010 curr_page_dir
00014a88 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010fb8 l     F .text	0000003d list_node_init
00014c4c l     O .rodata	0000000f __func__.11
00010ff5 l     F .text	0000002d list_node_next
00014cac l     O .rodata	0000000f __func__.5
00011022 l     F .text	00000047 list_init
00014c5c l     O .rodata	0000000a __func__.10
00011069 l     F .text	00000035 list_is_empty
00014cbc l     O .rodata	0000000e __func__.4
0001109e l     F .text	0000002d list_get_size
00014cec l     O .rodata	0000000e __func__.1
000110cb l     F .text	0000002c list_get_first
00014c9c l     O .rodata	0000000f __func__.6
000110f7 l     F .text	00000017 up2
0001110e l     F .text	00000007 hlt
00011115 l     F .text	0000000c write_cr3
00011121 l     F .text	0000001a far_jump
0001113b l     F .text	00000017 write_tr
00011152 l     F .text	00000011 mmu_set_page_dir
00020000 l     O .bss	000001b8 task_manager
000201c0 l     O .bss	00006200 task_table
000263c0 l     O .bss	00000014 task_table_lock
00011163 l     F .text	0000001f switch_to_tss
0001119d l     F .text	00000172 tss_init
00014c40 l     O .rodata	0000000a __func__.12
000263e0 l     O .bss	00000200 empty_task_stack
000114c6 l     F .text	0000000a empty_task
00014c68 l     O .rodata	00000010 __func__.9
00014c78 l     O .rodata	0000000f __func__.8
00014c88 l     O .rodata	00000011 __func__.7
00014ccc l     O .rodata	0000000f __func__.3
00014cdc l     O .rodata	00000010 __func__.2
000119a5 l     F .text	00000068 alloc_task
00011a0d l     F .text	00000033 free_task
00011c89 l     F .text	00000114 load_phdr
00011d9d l     F .text	00000213 load_elf_file
00011fb0 l     F .text	000000f1 copy_args
00014cfc l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012297 l     F .text	00000028 lgdt
000265e0 l     O .bss	00010000 gdt_table
000365e0 l     O .bss	00002000 is_alloc
000385e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000124cd l     F .text	00000007 cli
000124d4 l     F .text	00000007 sti
000124db l     F .text	00000007 hlt
000124e2 l     F .text	0000001d inb
000124ff l     F .text	00000021 outb
00012520 l     F .text	00000028 lidt
00012548 l     F .text	00000011 read_cr2
00012559 l     F .text	00000010 read_eflags
00012569 l     F .text	0000000b write_eflags
00038600 l     O .bss	00000800 idt_table
00012574 l     F .text	0000010f print_exception_fram
00012683 l     F .text	0000003e do_default_handler
00012a99 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
000152e0 l     O .rodata	000000e8 sys_table
00000000 l    df *ABS*	00000000 time.c
00012f2e l     F .text	00000021 outb
00038e00 l     O .bss	00000004 sys_tick
00012f77 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 fs.c
00012ff1 l     F .text	0000001d inb
0001300e l     F .text	00000021 outb
0001302f l     F .text	0000001f inw
00038e04 l     O .bss	00000004 temp_pos
0001304e l     F .text	0000013d read_disk
00000000 l    df *ABS*	00000000 init.c
00015488 l     O .rodata	0000000c __func__.1
00015494 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
0001333f l     F .text	00000047 list_init
00015554 l     O .rodata	0000000a __func__.1
00013386 l     F .text	00000035 list_is_empty
00015560 l     O .rodata	0000000e __func__.0
00015548 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00013551 l     F .text	00000047 list_init
00015614 l     O .rodata	0000000a __func__.1
00013598 l     F .text	00000035 list_is_empty
00015620 l     O .rodata	0000000e __func__.0
00015608 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00013721 l     F .text	00000047 list_init
00015734 l     O .rodata	0000000a __func__.3
00013768 l     F .text	0000002d list_get_size
00015740 l     O .rodata	0000000e __func__.2
00013795 l     F .text	0000002c list_get_first
00015760 l     O .rodata	0000000f __func__.0
000137c1 l     F .text	0000002d list_get_last
00015750 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00013ac9 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00015830 l     O .rodata	0000000c __func__.3
0001583c l     O .rodata	0000000f __func__.2
0001584c l     O .rodata	0000000f __func__.1
0001585c l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00016040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000143a1 l     F .text	00000035 list_is_empty
00015964 l     O .rodata	0000000e __func__.5
000143d6 l     F .text	0000002d list_get_size
0001599c l     O .rodata	0000000e __func__.2
00015950 l     O .rodata	00000012 __func__.6
00015974 l     O .rodata	00000011 __func__.4
00015988 l     O .rodata	00000012 __func__.3
000159ac l     O .rodata	00000011 __func__.1
000159c0 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0001474c l     F .text	0000001d inb
00014769 l     F .text	00000021 outb
00038e08 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
00013bb0 g     F .text	00000078 bitmap_get_bit
00013f83 g     F .text	0000004f kernel_memcpy
0001322d g     F .text	0000000a sys_close
00012ce1 g     F .text	00000098 idt_enable
00011781 g     F .text	0000000a task_current
800001de g     F .first_task	0000001b yield
0001448e g     F .text	0000008f list_insert_last
00010fae g     F .text	0000000a sys_sbrk
00011c28 g     F .text	00000061 sys_yield
000127f5 g     F .text	0000001c do_handler_segment_not_present
000116bd g     F .text	0000004b task_set_ready
00013d30 g     F .text	00000021 bitmap_is_set
00012e18 g     F .text	0000000b idt_enable_global
00013fd2 g     F .text	00000041 kernel_memset
00013209 g     F .text	00000024 sys_lseek
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012e9f g     F .text	0000008f do_handler_syscall
0001432e g     F .text	0000002d strings_count
0001478a g     F .text	00000088 log_init
00011aad g     F .text	0000017b sys_fork
00013302 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012e85 g     F .text	0000001a sys_print_msg
00013e4c g     F .text	00000047 kernel_strcpy
00012e0d g     F .text	0000000b idt_disable_global
00016000 g       .data	00000000 s_data
80000010 g     F .first_task	00000094 first_main
00012a56 g     F .text	00000043 idt_install
800001b1 g     F .first_task	0000002d execve
80000153 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
0001274d g     F .text	0000001c do_handler_overflow
000129ca g     F .text	0000001c do_handler_alignment_check
000131c4 g     F .text	0000003f sys_read
0001019b g       .text	00000000 exception_handler_general_protection
0001282d g     F .text	000000b1 do_handler_general_protection
00012a3a g     F .text	0000001c do_handler_control_exception
000136f8 g     F .text	00000029 sem_count
000126dd g     F .text	0000001c do_handler_divider
00013c28 g     F .text	00000108 bitmap_set_bit
000127bd g     F .text	0000001c do_handler_double_fault
000128de g     F .text	000000d0 do_handler_page_fault
800002c8 g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
00012e23 g     F .text	00000039 pic_send_eoi
000145ce g     F .text	000000b5 list_remove_last
000116b3 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00013610 g     F .text	0000006b sem_wait
00010ded g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00013241 g     F .text	0000000a sys_fstat
0001237e g     F .text	000000b3 gdt_init
00012a1e g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
8000029b g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
000126f9 g     F .text	0000001c do_handler_debug
00038e20 g     O .bss	00002000 stack
00011a40 g     F .text	00000060 sys_sleep
00010e3f g     F .text	00000099 memory_free_page
000137ee g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0003b000 g       *ABS*	00000000 s_first_task
00011446 g     F .text	00000080 task_uninit
00010d35 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00012b2c g     F .text	000001b5 idt_init
0001367b g     F .text	0000007d sem_notify
00010f2b g     F .text	00000083 memory_copy_uvm_data
000124a6 g     F .text	00000027 gdt_free
00012785 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000129ae g     F .text	0000001c do_handler_fpu_error
000115ad g     F .text	00000106 task_first_init
000129e6 g     F .text	0000001c do_handler_machine_check
8000024d g     F .first_task	0000002d write
0001318b g     F .text	00000039 sys_open
800002e9 g     F .first_task	00000027 fstat
00013237 g     F .text	0000000a sys_isatty
00014403 g     F .text	0000008b list_insert_first
0001195a g     F .text	0000004b task_set_wakeup
00011753 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
800000dd g     F .first_task	0000004c sys_call
00010943 g     F .text	00000085 memory_creat_uvm
00013e93 g     F .text	00000051 kernel_strncpy
00013203 g     F .text	00000006 sys_write
0003b331 g       *ABS*	00000000 mem_free_start
0001324b g     F .text	00000053 kernel_init
000135cd g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000140bb g     F .text	0000019d kernel_vsprintf
0001435b g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0003b000 g       .first_task	00000000 e_data
80000220 g     F .first_task	0000002d read
00013408 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000127d9 g     F .text	0000001c do_handler_invalid_tss
00012d79 g     F .text	00000094 idt_disable
0003b331 g       *ABS*	00000000 e_first_task
000118fe g     F .text	0000005c task_set_sleep
000107d9 g     F .text	000000b6 memory_creat_map
00012715 g     F .text	0000001c do_handler_nmi
80000196 g     F .first_task	0000001b fork
000133bb g     F .text	0000004d mutex_init
80000310 g     F .first_task	00000021 sbrk
00010226 g       .text	00000000 exception_handler_smd_exception
00010b55 g     F .text	000000e7 memory_destroy_uvm
00013b06 g     F .text	00000016 bitmap_byte_count
000127a1 g     F .text	0000001c do_handler_device_unavailable
00012e5c g     F .text	00000018 idt_enter_protection
0001088f g     F .text	000000b4 create_kernal_table
000117f3 g     F .text	0000010b task_slice_end
000109c8 g     F .text	0000018d memory_copy_uvm
0001329e g     F .text	00000064 move_to_first_task
00014013 g     F .text	00000084 kernel_memcmp
00012a02 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000126c1 g     F .text	0000001c do_handler_unknown
00010e1f g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011182 g     F .text	0000001b task_switch_from_to
00013499 g     F .text	000000b8 mutex_unlock
0001178b g     F .text	00000068 task_switch
8000016e g     F .first_task	00000028 print_msg
00013f4e g     F .text	00000035 kernel_strlen
00011708 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000122bf g     F .text	000000bf segment_desc_set
00012769 g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
0001451d g     F .text	000000b1 list_remove_first
000159cc g       .rodata	00000000 e_text
00013ee4 g     F .text	0000006a kernel_strncmp
00013b1c g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00013d51 g     F .text	000000fb bitmap_alloc_nbits
000114d0 g     F .text	000000dd task_manager_init
0001130f g     F .text	00000044 task_start
00010c3c g     F .text	000000f9 memory_init
000120a1 g     F .text	000001af sys_execve
00013ad0 g     F .text	00000036 pannic
00010ed8 g     F .text	00000053 memory_get_paddr
00012811 g     F .text	0000001c do_handler_stack_segment_fault
00012731 g     F .text	0000001c do_handler_breakpoint
00014812 g     F .text	000000fa log_printf
00011353 g     F .text	000000f3 task_init
800001f9 g     F .first_task	00000027 open
00014097 g     F .text	00000024 kernel_sprintf
00011aa0 g     F .text	0000000d sys_getpid
00012431 g     F .text	00000075 gdt_alloc_desc
00014258 g     F .text	000000d6 kernel_itoa
00014683 g     F .text	000000c9 list_remove
00012250 g     F .text	00000047 gate_desc_set
80000129 g     F .first_task	0000002a msleep
00012e74 g     F .text	00000011 idt_leave_protection
8000027a g     F .first_task	00000021 close
00010729 g     F .text	000000b0 find_pte
00012f4f g     F .text	00000028 do_handler_time
00012fd9 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 40 32 00 00       	call   1324b <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 ae 03 00       	mov    $0x3ae20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 d8 32 00 00       	jmp    13302 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 86 26 00 00       	call   126c1 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 85 26 00 00       	call   126dd <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 84 26 00 00       	call   126f9 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 83 26 00 00       	call   12715 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 82 26 00 00       	call   12731 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 81 26 00 00       	call   1274d <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 80 26 00 00       	call   12769 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 7f 26 00 00       	call   12785 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 7e 26 00 00       	call   127a1 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 7f 26 00 00       	call   127bd <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 80 26 00 00       	call   127d9 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 81 26 00 00       	call   127f5 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 82 26 00 00       	call   12811 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 83 26 00 00       	call   1282d <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 19 27 00 00       	call   128de <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 cc 27 00 00       	call   129ae <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 cd 27 00 00       	call   129ca <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 cc 27 00 00       	call   129e6 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 cb 27 00 00       	call   12a02 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 ca 27 00 00       	call   12a1e <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 cb 27 00 00       	call   12a3a <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 c3 2c 00 00       	call   12f4f <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 e4 2b 00 00       	call   12e9f <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10363:	8b 45 08             	mov    0x8(%ebp),%eax
   10366:	8b 00                	mov    (%eax),%eax
   10368:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1036d:	5d                   	pop    %ebp
   1036e:	c3                   	ret    

0001036f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1036f:	55                   	push   %ebp
   10370:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10372:	ff 75 08             	push   0x8(%ebp)
   10375:	e8 71 ff ff ff       	call   102eb <write_cr3>
   1037a:	83 c4 04             	add    $0x4,%esp
}
   1037d:	90                   	nop
   1037e:	c9                   	leave  
   1037f:	c3                   	ret    

00010380 <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   10384:	8b 45 08             	mov    0x8(%ebp),%eax
   10387:	8b 50 1c             	mov    0x1c(%eax),%edx
   1038a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1038d:	29 d0                	sub    %edx,%eax
   1038f:	89 c1                	mov    %eax,%ecx
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	8b 58 24             	mov    0x24(%eax),%ebx
   10397:	89 c8                	mov    %ecx,%eax
   10399:	ba 00 00 00 00       	mov    $0x0,%edx
   1039e:	f7 f3                	div    %ebx
}
   103a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103a3:	c9                   	leave  
   103a4:	c3                   	ret    

000103a5 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103a5:	55                   	push   %ebp
   103a6:	89 e5                	mov    %esp,%ebp
   103a8:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103ab:	ff 75 0c             	push   0xc(%ebp)
   103ae:	ff 75 08             	push   0x8(%ebp)
   103b1:	e8 ca ff ff ff       	call   10380 <page_index>
   103b6:	83 c4 08             	add    $0x8,%esp
   103b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103bc:	8b 45 08             	mov    0x8(%ebp),%eax
   103bf:	83 ec 0c             	sub    $0xc,%esp
   103c2:	50                   	push   %eax
   103c3:	e8 40 30 00 00       	call   13408 <mutex_lock>
   103c8:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103cb:	8b 55 08             	mov    0x8(%ebp),%edx
   103ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103d1:	01 d0                	add    %edx,%eax
   103d3:	83 c0 28             	add    $0x28,%eax
   103d6:	0f b6 00             	movzbl (%eax),%eax
   103d9:	8d 50 01             	lea    0x1(%eax),%edx
   103dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103e2:	01 c8                	add    %ecx,%eax
   103e4:	83 c0 28             	add    $0x28,%eax
   103e7:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   103e9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ec:	83 ec 0c             	sub    $0xc,%esp
   103ef:	50                   	push   %eax
   103f0:	e8 a4 30 00 00       	call   13499 <mutex_unlock>
   103f5:	83 c4 10             	add    $0x10,%esp
 }
   103f8:	90                   	nop
   103f9:	c9                   	leave  
   103fa:	c3                   	ret    

000103fb <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   103fb:	55                   	push   %ebp
   103fc:	89 e5                	mov    %esp,%ebp
   103fe:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   10401:	ff 75 0c             	push   0xc(%ebp)
   10404:	ff 75 08             	push   0x8(%ebp)
   10407:	e8 74 ff ff ff       	call   10380 <page_index>
   1040c:	83 c4 08             	add    $0x8,%esp
   1040f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	83 ec 0c             	sub    $0xc,%esp
   10418:	50                   	push   %eax
   10419:	e8 ea 2f 00 00       	call   13408 <mutex_lock>
   1041e:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   10421:	8b 55 08             	mov    0x8(%ebp),%edx
   10424:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10427:	01 d0                	add    %edx,%eax
   10429:	83 c0 28             	add    $0x28,%eax
   1042c:	0f b6 00             	movzbl (%eax),%eax
   1042f:	84 c0                	test   %al,%al
   10431:	74 1e                	je     10451 <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10433:	8b 55 08             	mov    0x8(%ebp),%edx
   10436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10439:	01 d0                	add    %edx,%eax
   1043b:	83 c0 28             	add    $0x28,%eax
   1043e:	0f b6 00             	movzbl (%eax),%eax
   10441:	8d 50 ff             	lea    -0x1(%eax),%edx
   10444:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10447:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044a:	01 c8                	add    %ecx,%eax
   1044c:	83 c0 28             	add    $0x28,%eax
   1044f:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10451:	8b 45 08             	mov    0x8(%ebp),%eax
   10454:	83 ec 0c             	sub    $0xc,%esp
   10457:	50                   	push   %eax
   10458:	e8 3c 30 00 00       	call   13499 <mutex_unlock>
   1045d:	83 c4 10             	add    $0x10,%esp
 }
   10460:	90                   	nop
   10461:	c9                   	leave  
   10462:	c3                   	ret    

00010463 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
   10466:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10469:	ff 75 0c             	push   0xc(%ebp)
   1046c:	ff 75 08             	push   0x8(%ebp)
   1046f:	e8 0c ff ff ff       	call   10380 <page_index>
   10474:	83 c4 08             	add    $0x8,%esp
   10477:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 82 2f 00 00       	call   13408 <mutex_lock>
   10486:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   10489:	8b 55 08             	mov    0x8(%ebp),%edx
   1048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048f:	01 d0                	add    %edx,%eax
   10491:	83 c0 28             	add    $0x28,%eax
   10494:	0f b6 00             	movzbl (%eax),%eax
   10497:	0f b6 c0             	movzbl %al,%eax
   1049a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	83 ec 0c             	sub    $0xc,%esp
   104a3:	50                   	push   %eax
   104a4:	e8 f0 2f 00 00       	call   13499 <mutex_unlock>
   104a9:	83 c4 10             	add    $0x10,%esp

  return ref;
   104ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104af:	c9                   	leave  
   104b0:	c3                   	ret    

000104b1 <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104b1:	55                   	push   %ebp
   104b2:	89 e5                	mov    %esp,%ebp
   104b4:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	83 ec 0c             	sub    $0xc,%esp
   104bd:	50                   	push   %eax
   104be:	e8 45 2f 00 00       	call   13408 <mutex_lock>
   104c3:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104c6:	8b 45 08             	mov    0x8(%ebp),%eax
   104c9:	8b 40 20             	mov    0x20(%eax),%eax
   104cc:	8b 55 08             	mov    0x8(%ebp),%edx
   104cf:	8b 4a 24             	mov    0x24(%edx),%ecx
   104d2:	ba 00 00 00 00       	mov    $0x0,%edx
   104d7:	f7 f1                	div    %ecx
   104d9:	89 c2                	mov    %eax,%edx
   104db:	8b 45 08             	mov    0x8(%ebp),%eax
   104de:	83 c0 28             	add    $0x28,%eax
   104e1:	83 ec 04             	sub    $0x4,%esp
   104e4:	52                   	push   %edx
   104e5:	6a 00                	push   $0x0
   104e7:	50                   	push   %eax
   104e8:	e8 e5 3a 00 00       	call   13fd2 <kernel_memset>
   104ed:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   104f0:	8b 45 08             	mov    0x8(%ebp),%eax
   104f3:	83 ec 0c             	sub    $0xc,%esp
   104f6:	50                   	push   %eax
   104f7:	e8 9d 2f 00 00       	call   13499 <mutex_unlock>
   104fc:	83 c4 10             	add    $0x10,%esp
}
   104ff:	90                   	nop
   10500:	c9                   	leave  
   10501:	c3                   	ret    

00010502 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10502:	55                   	push   %ebp
   10503:	89 e5                	mov    %esp,%ebp
   10505:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10508:	8b 45 08             	mov    0x8(%ebp),%eax
   1050b:	83 ec 0c             	sub    $0xc,%esp
   1050e:	50                   	push   %eax
   1050f:	e8 a7 2e 00 00       	call   133bb <mutex_init>
   10514:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10517:	8b 45 08             	mov    0x8(%ebp),%eax
   1051a:	8b 55 10             	mov    0x10(%ebp),%edx
   1051d:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 55 14             	mov    0x14(%ebp),%edx
   10526:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10529:	8b 45 08             	mov    0x8(%ebp),%eax
   1052c:	8b 55 18             	mov    0x18(%ebp),%edx
   1052f:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 20             	mov    0x20(%eax),%eax
   10538:	8b 55 08             	mov    0x8(%ebp),%edx
   1053b:	8b 4a 24             	mov    0x24(%edx),%ecx
   1053e:	ba 00 00 00 00       	mov    $0x0,%edx
   10543:	f7 f1                	div    %ecx
   10545:	89 c2                	mov    %eax,%edx
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	83 c0 14             	add    $0x14,%eax
   1054d:	6a 00                	push   $0x0
   1054f:	52                   	push   %edx
   10550:	ff 75 0c             	push   0xc(%ebp)
   10553:	50                   	push   %eax
   10554:	e8 c3 35 00 00       	call   13b1c <bitmap_init>
   10559:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   1055c:	8b 45 08             	mov    0x8(%ebp),%eax
   1055f:	8b 40 20             	mov    0x20(%eax),%eax
   10562:	8b 55 08             	mov    0x8(%ebp),%edx
   10565:	8b 4a 24             	mov    0x24(%edx),%ecx
   10568:	ba 00 00 00 00       	mov    $0x0,%edx
   1056d:	f7 f1                	div    %ecx
   1056f:	89 c2                	mov    %eax,%edx
   10571:	8b 45 08             	mov    0x8(%ebp),%eax
   10574:	83 c0 28             	add    $0x28,%eax
   10577:	83 ec 04             	sub    $0x4,%esp
   1057a:	52                   	push   %edx
   1057b:	6a 00                	push   $0x0
   1057d:	50                   	push   %eax
   1057e:	e8 4f 3a 00 00       	call   13fd2 <kernel_memset>
   10583:	83 c4 10             	add    $0x10,%esp
}
   10586:	90                   	nop
   10587:	c9                   	leave  
   10588:	c3                   	ret    

00010589 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1058f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	83 ec 0c             	sub    $0xc,%esp
   1059c:	50                   	push   %eax
   1059d:	e8 66 2e 00 00       	call   13408 <mutex_lock>
   105a2:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	83 c0 14             	add    $0x14,%eax
   105ab:	83 ec 04             	sub    $0x4,%esp
   105ae:	ff 75 0c             	push   0xc(%ebp)
   105b1:	6a 00                	push   $0x0
   105b3:	50                   	push   %eax
   105b4:	e8 98 37 00 00       	call   13d51 <bitmap_alloc_nbits>
   105b9:	83 c4 10             	add    $0x10,%esp
   105bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105c3:	78 17                	js     105dc <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105c5:	8b 45 08             	mov    0x8(%ebp),%eax
   105c8:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105cb:	8b 45 08             	mov    0x8(%ebp),%eax
   105ce:	8b 50 24             	mov    0x24(%eax),%edx
   105d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105d4:	0f af c2             	imul   %edx,%eax
   105d7:	01 c8                	add    %ecx,%eax
   105d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105dc:	8b 45 08             	mov    0x8(%ebp),%eax
   105df:	83 ec 0c             	sub    $0xc,%esp
   105e2:	50                   	push   %eax
   105e3:	e8 b1 2e 00 00       	call   13499 <mutex_unlock>
   105e8:	83 c4 10             	add    $0x10,%esp

  return addr;
   105eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   105ee:	c9                   	leave  
   105ef:	c3                   	ret    

000105f0 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   105f0:	55                   	push   %ebp
   105f1:	89 e5                	mov    %esp,%ebp
   105f3:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   105f6:	8b 45 08             	mov    0x8(%ebp),%eax
   105f9:	83 ec 0c             	sub    $0xc,%esp
   105fc:	50                   	push   %eax
   105fd:	e8 06 2e 00 00       	call   13408 <mutex_lock>
   10602:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1060c:	eb 64                	jmp    10672 <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1060e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10611:	c1 e0 0c             	shl    $0xc,%eax
   10614:	89 c2                	mov    %eax,%edx
   10616:	8b 45 0c             	mov    0xc(%ebp),%eax
   10619:	01 d0                	add    %edx,%eax
   1061b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1061e:	83 ec 08             	sub    $0x8,%esp
   10621:	ff 75 f0             	push   -0x10(%ebp)
   10624:	ff 75 08             	push   0x8(%ebp)
   10627:	e8 cf fd ff ff       	call   103fb <page_ref_sub>
   1062c:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1062f:	83 ec 08             	sub    $0x8,%esp
   10632:	ff 75 f0             	push   -0x10(%ebp)
   10635:	ff 75 08             	push   0x8(%ebp)
   10638:	e8 26 fe ff ff       	call   10463 <get_page_ref>
   1063d:	83 c4 10             	add    $0x10,%esp
   10640:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10643:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10647:	75 25                	jne    1066e <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10649:	83 ec 08             	sub    $0x8,%esp
   1064c:	ff 75 f0             	push   -0x10(%ebp)
   1064f:	ff 75 08             	push   0x8(%ebp)
   10652:	e8 29 fd ff ff       	call   10380 <page_index>
   10657:	83 c4 10             	add    $0x10,%esp
   1065a:	8b 55 08             	mov    0x8(%ebp),%edx
   1065d:	83 c2 14             	add    $0x14,%edx
   10660:	6a 00                	push   $0x0
   10662:	6a 01                	push   $0x1
   10664:	50                   	push   %eax
   10665:	52                   	push   %edx
   10666:	e8 bd 35 00 00       	call   13c28 <bitmap_set_bit>
   1066b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1066e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10672:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10675:	3b 45 10             	cmp    0x10(%ebp),%eax
   10678:	7c 94                	jl     1060e <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   1067a:	8b 45 08             	mov    0x8(%ebp),%eax
   1067d:	83 ec 0c             	sub    $0xc,%esp
   10680:	50                   	push   %eax
   10681:	e8 13 2e 00 00       	call   13499 <mutex_unlock>
   10686:	83 c4 10             	add    $0x10,%esp
}
   10689:	90                   	nop
   1068a:	c9                   	leave  
   1068b:	c3                   	ret    

0001068c <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1068c:	55                   	push   %ebp
   1068d:	89 e5                	mov    %esp,%ebp
   1068f:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10692:	83 ec 0c             	sub    $0xc,%esp
   10695:	68 20 49 01 00       	push   $0x14920
   1069a:	e8 73 41 00 00       	call   14812 <log_printf>
   1069f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106a9:	eb 29                	jmp    106d4 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106ab:	8b 45 08             	mov    0x8(%ebp),%eax
   106ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106b1:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106bb:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106be:	52                   	push   %edx
   106bf:	50                   	push   %eax
   106c0:	ff 75 f4             	push   -0xc(%ebp)
   106c3:	68 2c 49 01 00       	push   $0x1492c
   106c8:	e8 45 41 00 00       	call   14812 <log_printf>
   106cd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 40 50             	mov    0x50(%eax),%eax
   106da:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106dd:	7c cc                	jl     106ab <show_mem_info+0x1f>
    }

    log_printf("");
   106df:	83 ec 0c             	sub    $0xc,%esp
   106e2:	68 3e 49 01 00       	push   $0x1493e
   106e7:	e8 26 41 00 00       	call   14812 <log_printf>
   106ec:	83 c4 10             	add    $0x10,%esp
}
   106ef:	90                   	nop
   106f0:	c9                   	leave  
   106f1:	c3                   	ret    

000106f2 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   106f2:	55                   	push   %ebp
   106f3:	89 e5                	mov    %esp,%ebp
   106f5:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10706:	eb 11                	jmp    10719 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10708:	8b 45 08             	mov    0x8(%ebp),%eax
   1070b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1070e:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10712:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10715:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10719:	8b 45 08             	mov    0x8(%ebp),%eax
   1071c:	8b 40 50             	mov    0x50(%eax),%eax
   1071f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10722:	7c e4                	jl     10708 <total_mem_size+0x16>
    }

    return mem_size;
   10724:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10727:	c9                   	leave  
   10728:	c3                   	ret    

00010729 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10729:	55                   	push   %ebp
   1072a:	89 e5                	mov    %esp,%ebp
   1072c:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1072f:	ff 75 0c             	push   0xc(%ebp)
   10732:	e8 c0 fb ff ff       	call   102f7 <pde_index>
   10737:	83 c4 04             	add    $0x4,%esp
   1073a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10741:	8b 45 08             	mov    0x8(%ebp),%eax
   10744:	01 d0                	add    %edx,%eax
   10746:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10749:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074c:	0f b6 00             	movzbl (%eax),%eax
   1074f:	83 e0 01             	and    $0x1,%eax
   10752:	84 c0                	test   %al,%al
   10754:	74 10                	je     10766 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10756:	ff 75 f0             	push   -0x10(%ebp)
   10759:	e8 b4 fb ff ff       	call   10312 <pde_to_pt_addr>
   1075e:	83 c4 04             	add    $0x4,%esp
   10761:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10764:	eb 57                	jmp    107bd <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10766:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1076a:	75 07                	jne    10773 <find_pte+0x4a>
      return (pte_t*)0;
   1076c:	b8 00 00 00 00       	mov    $0x0,%eax
   10771:	eb 64                	jmp    107d7 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10773:	83 ec 08             	sub    $0x8,%esp
   10776:	6a 01                	push   $0x1
   10778:	68 00 70 01 00       	push   $0x17000
   1077d:	e8 07 fe ff ff       	call   10589 <addr_alloc_page>
   10782:	83 c4 10             	add    $0x10,%esp
   10785:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10788:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1078c:	75 07                	jne    10795 <find_pte+0x6c>
      return (pte_t*)0;
   1078e:	b8 00 00 00 00       	mov    $0x0,%eax
   10793:	eb 42                	jmp    107d7 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10795:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1079b:	83 ec 04             	sub    $0x4,%esp
   1079e:	68 00 10 00 00       	push   $0x1000
   107a3:	6a 00                	push   $0x0
   107a5:	ff 75 f4             	push   -0xc(%ebp)
   107a8:	e8 25 38 00 00       	call   13fd2 <kernel_memset>
   107ad:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b3:	83 c8 07             	or     $0x7,%eax
   107b6:	89 c2                	mov    %eax,%edx
   107b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107bb:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107bd:	83 ec 0c             	sub    $0xc,%esp
   107c0:	ff 75 0c             	push   0xc(%ebp)
   107c3:	e8 3a fb ff ff       	call   10302 <pte_index>
   107c8:	83 c4 10             	add    $0x10,%esp
   107cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d5:	01 d0                	add    %edx,%eax

}
   107d7:	c9                   	leave  
   107d8:	c3                   	ret    

000107d9 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107d9:	55                   	push   %ebp
   107da:	89 e5                	mov    %esp,%ebp
   107dc:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107e6:	e9 91 00 00 00       	jmp    1087c <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   107eb:	83 ec 04             	sub    $0x4,%esp
   107ee:	6a 01                	push   $0x1
   107f0:	ff 75 0c             	push   0xc(%ebp)
   107f3:	ff 75 08             	push   0x8(%ebp)
   107f6:	e8 2e ff ff ff       	call   10729 <find_pte>
   107fb:	83 c4 10             	add    $0x10,%esp
   107fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10801:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10805:	75 17                	jne    1081e <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0");
   10807:	83 ec 0c             	sub    $0xc,%esp
   1080a:	68 3f 49 01 00       	push   $0x1493f
   1080f:	e8 fe 3f 00 00       	call   14812 <log_printf>
   10814:	83 c4 10             	add    $0x10,%esp
      return -1;
   10817:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1081c:	eb 6f                	jmp    1088d <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10821:	0f b6 00             	movzbl (%eax),%eax
   10824:	83 e0 01             	and    $0x1,%eax
   10827:	84 c0                	test   %al,%al
   10829:	74 1c                	je     10847 <memory_creat_map+0x6e>
   1082b:	68 59 49 01 00       	push   $0x14959
   10830:	68 68 4a 01 00       	push   $0x14a68
   10835:	68 1c 01 00 00       	push   $0x11c
   1083a:	68 6c 49 01 00       	push   $0x1496c
   1083f:	e8 8c 32 00 00       	call   13ad0 <pannic>
   10844:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10847:	8b 45 10             	mov    0x10(%ebp),%eax
   1084a:	0b 45 18             	or     0x18(%ebp),%eax
   1084d:	83 c8 01             	or     $0x1,%eax
   10850:	89 c2                	mov    %eax,%edx
   10852:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10855:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10857:	83 ec 08             	sub    $0x8,%esp
   1085a:	ff 75 10             	push   0x10(%ebp)
   1085d:	68 00 70 01 00       	push   $0x17000
   10862:	e8 3e fb ff ff       	call   103a5 <page_ref_add>
   10867:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1086a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10871:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10878:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087f:	3b 45 14             	cmp    0x14(%ebp),%eax
   10882:	0f 8c 63 ff ff ff    	jl     107eb <memory_creat_map+0x12>

  }

  return 1;
   10888:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   1088d:	c9                   	leave  
   1088e:	c3                   	ret    

0001088f <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1088f:	55                   	push   %ebp
   10890:	89 e5                	mov    %esp,%ebp
   10892:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1089c:	e9 92 00 00 00       	jmp    10933 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108a4:	c1 e0 04             	shl    $0x4,%eax
   108a7:	05 00 60 01 00       	add    $0x16000,%eax
   108ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108b2:	8b 00                	mov    (%eax),%eax
   108b4:	68 00 10 00 00       	push   $0x1000
   108b9:	50                   	push   %eax
   108ba:	e8 08 fa ff ff       	call   102c7 <down2>
   108bf:	83 c4 08             	add    $0x8,%esp
   108c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108c8:	8b 40 08             	mov    0x8(%eax),%eax
   108cb:	68 00 10 00 00       	push   $0x1000
   108d0:	50                   	push   %eax
   108d1:	e8 f1 f9 ff ff       	call   102c7 <down2>
   108d6:	83 c4 08             	add    $0x8,%esp
   108d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108df:	8b 40 04             	mov    0x4(%eax),%eax
   108e2:	68 00 10 00 00       	push   $0x1000
   108e7:	50                   	push   %eax
   108e8:	e8 e7 f9 ff ff       	call   102d4 <up2>
   108ed:	83 c4 08             	add    $0x8,%esp
   108f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   108f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108f6:	2b 45 ec             	sub    -0x14(%ebp),%eax
   108f9:	c1 e8 0c             	shr    $0xc,%eax
   108fc:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 0c             	mov    0xc(%eax),%eax
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	50                   	push   %eax
   10909:	ff 75 e0             	push   -0x20(%ebp)
   1090c:	ff 75 e8             	push   -0x18(%ebp)
   1090f:	ff 75 ec             	push   -0x14(%ebp)
   10912:	68 00 f0 01 00       	push   $0x1f000
   10917:	e8 bd fe ff ff       	call   107d9 <memory_creat_map>
   1091c:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1091f:	83 ec 0c             	sub    $0xc,%esp
   10922:	68 00 70 01 00       	push   $0x17000
   10927:	e8 85 fb ff ff       	call   104b1 <clear_page_ref>
   1092c:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1092f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10933:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10936:	83 f8 03             	cmp    $0x3,%eax
   10939:	0f 86 62 ff ff ff    	jbe    108a1 <create_kernal_table+0x12>

  }
}
   1093f:	90                   	nop
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10949:	83 ec 08             	sub    $0x8,%esp
   1094c:	6a 01                	push   $0x1
   1094e:	68 00 70 01 00       	push   $0x17000
   10953:	e8 31 fc ff ff       	call   10589 <addr_alloc_page>
   10958:	83 c4 10             	add    $0x10,%esp
   1095b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1095e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10962:	75 07                	jne    1096b <memory_creat_uvm+0x28>
   10964:	b8 00 00 00 00       	mov    $0x0,%eax
   10969:	eb 5b                	jmp    109c6 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1096b:	83 ec 04             	sub    $0x4,%esp
   1096e:	68 00 10 00 00       	push   $0x1000
   10973:	6a 00                	push   $0x0
   10975:	ff 75 f0             	push   -0x10(%ebp)
   10978:	e8 55 36 00 00       	call   13fd2 <kernel_memset>
   1097d:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10980:	83 ec 0c             	sub    $0xc,%esp
   10983:	68 00 00 00 80       	push   $0x80000000
   10988:	e8 6a f9 ff ff       	call   102f7 <pde_index>
   1098d:	83 c4 10             	add    $0x10,%esp
   10990:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10993:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1099a:	eb 1f                	jmp    109bb <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1099f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109a9:	01 c2                	add    %eax,%edx
   109ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109ae:	8b 04 85 00 f0 01 00 	mov    0x1f000(,%eax,4),%eax
   109b5:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109be:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109c1:	77 d9                	ja     1099c <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
   109cb:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ce:	68 00 00 00 80       	push   $0x80000000
   109d3:	e8 1f f9 ff ff       	call   102f7 <pde_index>
   109d8:	83 c4 04             	add    $0x4,%esp
   109db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   109eb:	01 d0                	add    %edx,%eax
   109ed:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   109f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
   109f6:	e9 2a 01 00 00       	jmp    10b25 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   109fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109fe:	0f b6 00             	movzbl (%eax),%eax
   10a01:	83 e0 01             	and    $0x1,%eax
   10a04:	84 c0                	test   %al,%al
   10a06:	0f 84 10 01 00 00    	je     10b1c <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a0c:	ff 75 f4             	push   -0xc(%ebp)
   10a0f:	e8 fe f8 ff ff       	call   10312 <pde_to_pt_addr>
   10a14:	83 c4 04             	add    $0x4,%esp
   10a17:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a1a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a21:	e9 e7 00 00 00       	jmp    10b0d <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a29:	0f b6 00             	movzbl (%eax),%eax
   10a2c:	83 e0 01             	and    $0x1,%eax
   10a2f:	84 c0                	test   %al,%al
   10a31:	0f 84 cd 00 00 00    	je     10b04 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a3a:	c1 e0 16             	shl    $0x16,%eax
   10a3d:	89 c2                	mov    %eax,%edx
   10a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a42:	c1 e0 0c             	shl    $0xc,%eax
   10a45:	09 d0                	or     %edx,%eax
   10a47:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //当前页支持写操作，需进行复制操作
   10a4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a4d:	8b 00                	mov    (%eax),%eax
   10a4f:	83 e0 02             	and    $0x2,%eax
   10a52:	85 c0                	test   %eax,%eax
   10a54:	74 6c                	je     10ac2 <memory_copy_uvm+0xfa>
        //分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a56:	83 ec 08             	sub    $0x8,%esp
   10a59:	6a 01                	push   $0x1
   10a5b:	68 00 70 01 00       	push   $0x17000
   10a60:	e8 24 fb ff ff       	call   10589 <addr_alloc_page>
   10a65:	83 c4 10             	add    $0x10,%esp
   10a68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a6b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a6f:	0f 84 c4 00 00 00    	je     10b39 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a75:	83 ec 0c             	sub    $0xc,%esp
   10a78:	ff 75 ec             	push   -0x14(%ebp)
   10a7b:	e8 e0 f8 ff ff       	call   10360 <get_pte_privilege>
   10a80:	83 c4 10             	add    $0x10,%esp
   10a83:	8b 55 08             	mov    0x8(%ebp),%edx
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	50                   	push   %eax
   10a8a:	6a 01                	push   $0x1
   10a8c:	ff 75 d4             	push   -0x2c(%ebp)
   10a8f:	ff 75 e0             	push   -0x20(%ebp)
   10a92:	52                   	push   %edx
   10a93:	e8 41 fd ff ff       	call   107d9 <memory_creat_map>
   10a98:	83 c4 20             	add    $0x20,%esp
   10a9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10a9e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10aa2:	0f 88 94 00 00 00    	js     10b3c <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //拷贝该页内容
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10aa8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10aab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10aae:	83 ec 04             	sub    $0x4,%esp
   10ab1:	68 00 10 00 00       	push   $0x1000
   10ab6:	52                   	push   %edx
   10ab7:	50                   	push   %eax
   10ab8:	e8 c6 34 00 00       	call   13f83 <kernel_memcpy>
   10abd:	83 c4 10             	add    $0x10,%esp
   10ac0:	eb 43                	jmp    10b05 <memory_copy_uvm+0x13d>

      } else {  //当前页为只读页，直接共享该页即可，即只复制页表项即可
        //获取该页的地址
        uint32_t page = pte_to_pg_addr(pte);
   10ac2:	83 ec 0c             	sub    $0xc,%esp
   10ac5:	ff 75 ec             	push   -0x14(%ebp)
   10ac8:	e8 6c f8 ff ff       	call   10339 <pte_to_pg_addr>
   10acd:	83 c4 10             	add    $0x10,%esp
   10ad0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10ad3:	83 ec 0c             	sub    $0xc,%esp
   10ad6:	ff 75 ec             	push   -0x14(%ebp)
   10ad9:	e8 82 f8 ff ff       	call   10360 <get_pte_privilege>
   10ade:	83 c4 10             	add    $0x10,%esp
   10ae1:	8b 55 08             	mov    0x8(%ebp),%edx
   10ae4:	83 ec 0c             	sub    $0xc,%esp
   10ae7:	50                   	push   %eax
   10ae8:	6a 01                	push   $0x1
   10aea:	ff 75 dc             	push   -0x24(%ebp)
   10aed:	ff 75 e0             	push   -0x20(%ebp)
   10af0:	52                   	push   %edx
   10af1:	e8 e3 fc ff ff       	call   107d9 <memory_creat_map>
   10af6:	83 c4 20             	add    $0x20,%esp
   10af9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10afc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b00:	78 3d                	js     10b3f <memory_copy_uvm+0x177>
   10b02:	eb 01                	jmp    10b05 <memory_copy_uvm+0x13d>
        continue;
   10b04:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b05:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b09:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b0d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b14:	0f 8e 0c ff ff ff    	jle    10a26 <memory_copy_uvm+0x5e>
   10b1a:	eb 01                	jmp    10b1d <memory_copy_uvm+0x155>
      continue;
   10b1c:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b1d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b21:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b25:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b2c:	0f 8e c9 fe ff ff    	jle    109fb <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b32:	b8 01 00 00 00       	mov    $0x1,%eax
   10b37:	eb 1a                	jmp    10b53 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b39:	90                   	nop
   10b3a:	eb 04                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3c:	90                   	nop
   10b3d:	eb 01                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3f:	90                   	nop


copy_uvm_failed:
  //copy虚拟空间映射失败，以开启读共享的方式清理对应资源
  memory_destroy_uvm(to_page_dir);
   10b40:	83 ec 0c             	sub    $0xc,%esp
   10b43:	ff 75 08             	push   0x8(%ebp)
   10b46:	e8 0a 00 00 00       	call   10b55 <memory_destroy_uvm>
   10b4b:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <memory_destroy_uvm>:
 *        //TODO:进行了读不释放写释放的处理操作，只能供memory_copy_uvm函数失败时调用
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b5b:	68 00 00 00 80       	push   $0x80000000
   10b60:	e8 92 f7 ff ff       	call   102f7 <pde_index>
   10b65:	83 c4 04             	add    $0x4,%esp
   10b68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b6e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b75:	8b 45 08             	mov    0x8(%ebp),%eax
   10b78:	01 d0                	add    %edx,%eax
   10b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10b83:	e9 8f 00 00 00       	jmp    10c17 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b8b:	0f b6 00             	movzbl (%eax),%eax
   10b8e:	83 e0 01             	and    $0x1,%eax
   10b91:	84 c0                	test   %al,%al
   10b93:	74 79                	je     10c0e <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10b95:	ff 75 f4             	push   -0xc(%ebp)
   10b98:	e8 75 f7 ff ff       	call   10312 <pde_to_pt_addr>
   10b9d:	83 c4 04             	add    $0x4,%esp
   10ba0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10ba3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10baa:	eb 36                	jmp    10be2 <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10baf:	0f b6 00             	movzbl (%eax),%eax
   10bb2:	83 e0 01             	and    $0x1,%eax
   10bb5:	84 c0                	test   %al,%al
   10bb7:	74 20                	je     10bd9 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bb9:	ff 75 ec             	push   -0x14(%ebp)
   10bbc:	e8 78 f7 ff ff       	call   10339 <pte_to_pg_addr>
   10bc1:	83 c4 04             	add    $0x4,%esp
   10bc4:	83 ec 04             	sub    $0x4,%esp
   10bc7:	6a 01                	push   $0x1
   10bc9:	50                   	push   %eax
   10bca:	68 00 70 01 00       	push   $0x17000
   10bcf:	e8 1c fa ff ff       	call   105f0 <addr_free_page>
   10bd4:	83 c4 10             	add    $0x10,%esp
   10bd7:	eb 01                	jmp    10bda <memory_destroy_uvm+0x85>
        continue;
   10bd9:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bda:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bde:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10be2:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10be9:	7e c1                	jle    10bac <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10beb:	83 ec 0c             	sub    $0xc,%esp
   10bee:	ff 75 f4             	push   -0xc(%ebp)
   10bf1:	e8 1c f7 ff ff       	call   10312 <pde_to_pt_addr>
   10bf6:	83 c4 10             	add    $0x10,%esp
   10bf9:	83 ec 04             	sub    $0x4,%esp
   10bfc:	6a 01                	push   $0x1
   10bfe:	50                   	push   %eax
   10bff:	68 00 70 01 00       	push   $0x17000
   10c04:	e8 e7 f9 ff ff       	call   105f0 <addr_free_page>
   10c09:	83 c4 10             	add    $0x10,%esp
   10c0c:	eb 01                	jmp    10c0f <memory_destroy_uvm+0xba>
        continue;
   10c0e:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c13:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c17:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c1e:	0f 8e 64 ff ff ff    	jle    10b88 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c24:	83 ec 04             	sub    $0x4,%esp
   10c27:	6a 01                	push   $0x1
   10c29:	ff 75 08             	push   0x8(%ebp)
   10c2c:	68 00 70 01 00       	push   $0x17000
   10c31:	e8 ba f9 ff ff       	call   105f0 <addr_free_page>
   10c36:	83 c4 10             	add    $0x10,%esp
}
   10c39:	90                   	nop
   10c3a:	c9                   	leave  
   10c3b:	c3                   	ret    

00010c3c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c3c:	55                   	push   %ebp
   10c3d:	89 e5                	mov    %esp,%ebp
   10c3f:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10c42:	83 ec 0c             	sub    $0xc,%esp
   10c45:	68 a3 49 01 00       	push   $0x149a3
   10c4a:	e8 c3 3b 00 00       	call   14812 <log_printf>
   10c4f:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10c52:	83 ec 08             	sub    $0x8,%esp
   10c55:	68 31 b3 03 00       	push   $0x3b331
   10c5a:	68 af 49 01 00       	push   $0x149af
   10c5f:	e8 ae 3b 00 00       	call   14812 <log_printf>
   10c64:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c67:	83 ec 0c             	sub    $0xc,%esp
   10c6a:	ff 75 08             	push   0x8(%ebp)
   10c6d:	e8 1a fa ff ff       	call   1068c <show_mem_info>
   10c72:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c75:	83 ec 0c             	sub    $0xc,%esp
   10c78:	ff 75 08             	push   0x8(%ebp)
   10c7b:	e8 72 fa ff ff       	call   106f2 <total_mem_size>
   10c80:	83 c4 10             	add    $0x10,%esp
   10c83:	2d 00 00 10 00       	sub    $0x100000,%eax
   10c88:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10c8b:	83 ec 08             	sub    $0x8,%esp
   10c8e:	68 00 10 00 00       	push   $0x1000
   10c93:	ff 75 f4             	push   -0xc(%ebp)
   10c96:	e8 2c f6 ff ff       	call   102c7 <down2>
   10c9b:	83 c4 10             	add    $0x10,%esp
   10c9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10ca1:	83 ec 04             	sub    $0x4,%esp
   10ca4:	ff 75 f4             	push   -0xc(%ebp)
   10ca7:	68 00 00 10 00       	push   $0x100000
   10cac:	68 c4 49 01 00       	push   $0x149c4
   10cb1:	e8 5c 3b 00 00       	call   14812 <log_printf>
   10cb6:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cb9:	c7 45 f0 31 b3 03 00 	movl   $0x3b331,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cc0:	83 ec 0c             	sub    $0xc,%esp
   10cc3:	68 00 10 00 00       	push   $0x1000
   10cc8:	ff 75 f4             	push   -0xc(%ebp)
   10ccb:	68 00 00 10 00       	push   $0x100000
   10cd0:	ff 75 f0             	push   -0x10(%ebp)
   10cd3:	68 00 70 01 00       	push   $0x17000
   10cd8:	e8 25 f8 ff ff       	call   10502 <addr_alloc_init>
   10cdd:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10ce0:	a1 20 70 01 00       	mov    0x17020,%eax
   10ce5:	c1 e8 0c             	shr    $0xc,%eax
   10ce8:	83 ec 0c             	sub    $0xc,%esp
   10ceb:	50                   	push   %eax
   10cec:	e8 15 2e 00 00       	call   13b06 <bitmap_byte_count>
   10cf1:	83 c4 10             	add    $0x10,%esp
   10cf4:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10cf7:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10cfe:	76 1c                	jbe    10d1c <memory_init+0xe0>
   10d00:	68 e4 49 01 00       	push   $0x149e4
   10d05:	68 7c 4a 01 00       	push   $0x14a7c
   10d0a:	68 f9 01 00 00       	push   $0x1f9
   10d0f:	68 6c 49 01 00       	push   $0x1496c
   10d14:	e8 b7 2d 00 00       	call   13ad0 <pannic>
   10d19:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d1c:	e8 6e fb ff ff       	call   1088f <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d21:	b8 00 f0 01 00       	mov    $0x1f000,%eax
   10d26:	83 ec 0c             	sub    $0xc,%esp
   10d29:	50                   	push   %eax
   10d2a:	e8 40 f6 ff ff       	call   1036f <mmu_set_page_dir>
   10d2f:	83 c4 10             	add    $0x10,%esp
}
   10d32:	90                   	nop
   10d33:	c9                   	leave  
   10d34:	c3                   	ret    

00010d35 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d35:	55                   	push   %ebp
   10d36:	89 e5                	mov    %esp,%ebp
   10d38:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d41:	68 00 10 00 00       	push   $0x1000
   10d46:	ff 75 10             	push   0x10(%ebp)
   10d49:	e8 86 f5 ff ff       	call   102d4 <up2>
   10d4e:	83 c4 08             	add    $0x8,%esp
   10d51:	c1 e8 0c             	shr    $0xc,%eax
   10d54:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d5e:	eb 7a                	jmp    10dda <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	6a 01                	push   $0x1
   10d65:	68 00 70 01 00       	push   $0x17000
   10d6a:	e8 1a f8 ff ff       	call   10589 <addr_alloc_page>
   10d6f:	83 c4 10             	add    $0x10,%esp
   10d72:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d79:	75 17                	jne    10d92 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   10d7b:	83 ec 0c             	sub    $0xc,%esp
   10d7e:	68 08 4a 01 00       	push   $0x14a08
   10d83:	e8 8a 3a 00 00       	call   14812 <log_printf>
   10d88:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10d8b:	b8 00 00 00 00       	mov    $0x0,%eax
   10d90:	eb 59                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10d92:	8b 45 08             	mov    0x8(%ebp),%eax
   10d95:	83 ec 0c             	sub    $0xc,%esp
   10d98:	ff 75 14             	push   0x14(%ebp)
   10d9b:	6a 01                	push   $0x1
   10d9d:	ff 75 e8             	push   -0x18(%ebp)
   10da0:	ff 75 f4             	push   -0xc(%ebp)
   10da3:	50                   	push   %eax
   10da4:	e8 30 fa ff ff       	call   107d9 <memory_creat_map>
   10da9:	83 c4 20             	add    $0x20,%esp
   10dac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10daf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10db3:	79 1a                	jns    10dcf <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10db5:	83 ec 08             	sub    $0x8,%esp
   10db8:	ff 75 e4             	push   -0x1c(%ebp)
   10dbb:	68 24 4a 01 00       	push   $0x14a24
   10dc0:	e8 4d 3a 00 00       	call   14812 <log_printf>
   10dc5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dcd:	eb 1c                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dcf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10dd6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ddd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10de0:	0f 8c 7a ff ff ff    	jl     10d60 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10deb:	c9                   	leave  
   10dec:	c3                   	ret    

00010ded <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10ded:	55                   	push   %ebp
   10dee:	89 e5                	mov    %esp,%ebp
   10df0:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10df3:	e8 89 09 00 00       	call   11781 <task_current>
   10df8:	8b 40 74             	mov    0x74(%eax),%eax
   10dfb:	ff 75 10             	push   0x10(%ebp)
   10dfe:	ff 75 0c             	push   0xc(%ebp)
   10e01:	ff 75 08             	push   0x8(%ebp)
   10e04:	50                   	push   %eax
   10e05:	e8 2b ff ff ff       	call   10d35 <memory_alloc_for_page_dir>
   10e0a:	83 c4 10             	add    $0x10,%esp
}
   10e0d:	c9                   	leave  
   10e0e:	c3                   	ret    

00010e0f <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e0f:	55                   	push   %ebp
   10e10:	89 e5                	mov    %esp,%ebp
   10e12:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e15:	e8 67 09 00 00       	call   11781 <task_current>
   10e1a:	8b 40 74             	mov    0x74(%eax),%eax
}
   10e1d:	c9                   	leave  
   10e1e:	c3                   	ret    

00010e1f <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e1f:	55                   	push   %ebp
   10e20:	89 e5                	mov    %esp,%ebp
   10e22:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e25:	83 ec 08             	sub    $0x8,%esp
   10e28:	6a 01                	push   $0x1
   10e2a:	68 00 70 01 00       	push   $0x17000
   10e2f:	e8 55 f7 ff ff       	call   10589 <addr_alloc_page>
   10e34:	83 c4 10             	add    $0x10,%esp
   10e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e3d:	c9                   	leave  
   10e3e:	c3                   	ret    

00010e3f <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e3f:	55                   	push   %ebp
   10e40:	89 e5                	mov    %esp,%ebp
   10e42:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e45:	8b 45 08             	mov    0x8(%ebp),%eax
   10e48:	85 c0                	test   %eax,%eax
   10e4a:	78 17                	js     10e63 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e4c:	83 ec 04             	sub    $0x4,%esp
   10e4f:	6a 01                	push   $0x1
   10e51:	ff 75 08             	push   0x8(%ebp)
   10e54:	68 00 70 01 00       	push   $0x17000
   10e59:	e8 92 f7 ff ff       	call   105f0 <addr_free_page>
   10e5e:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e61:	eb 72                	jmp    10ed5 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e63:	e8 a7 ff ff ff       	call   10e0f <curr_page_dir>
   10e68:	83 ec 04             	sub    $0x4,%esp
   10e6b:	6a 00                	push   $0x0
   10e6d:	ff 75 08             	push   0x8(%ebp)
   10e70:	50                   	push   %eax
   10e71:	e8 b3 f8 ff ff       	call   10729 <find_pte>
   10e76:	83 c4 10             	add    $0x10,%esp
   10e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e80:	74 0d                	je     10e8f <memory_free_page+0x50>
   10e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e85:	0f b6 00             	movzbl (%eax),%eax
   10e88:	83 e0 01             	and    $0x1,%eax
   10e8b:	84 c0                	test   %al,%al
   10e8d:	75 1c                	jne    10eab <memory_free_page+0x6c>
   10e8f:	68 44 4a 01 00       	push   $0x14a44
   10e94:	68 88 4a 01 00       	push   $0x14a88
   10e99:	68 5b 02 00 00       	push   $0x25b
   10e9e:	68 6c 49 01 00       	push   $0x1496c
   10ea3:	e8 28 2c 00 00       	call   13ad0 <pannic>
   10ea8:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10eab:	83 ec 0c             	sub    $0xc,%esp
   10eae:	ff 75 f4             	push   -0xc(%ebp)
   10eb1:	e8 83 f4 ff ff       	call   10339 <pte_to_pg_addr>
   10eb6:	83 c4 10             	add    $0x10,%esp
   10eb9:	83 ec 04             	sub    $0x4,%esp
   10ebc:	6a 01                	push   $0x1
   10ebe:	50                   	push   %eax
   10ebf:	68 00 70 01 00       	push   $0x17000
   10ec4:	e8 27 f7 ff ff       	call   105f0 <addr_free_page>
   10ec9:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ecf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ed5:	90                   	nop
   10ed6:	c9                   	leave  
   10ed7:	c3                   	ret    

00010ed8 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ed8:	55                   	push   %ebp
   10ed9:	89 e5                	mov    %esp,%ebp
   10edb:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10ede:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee1:	83 ec 04             	sub    $0x4,%esp
   10ee4:	6a 00                	push   $0x0
   10ee6:	ff 75 0c             	push   0xc(%ebp)
   10ee9:	50                   	push   %eax
   10eea:	e8 3a f8 ff ff       	call   10729 <find_pte>
   10eef:	83 c4 10             	add    $0x10,%esp
   10ef2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10ef5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ef9:	74 0d                	je     10f08 <memory_get_paddr+0x30>
   10efb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10efe:	0f b6 00             	movzbl (%eax),%eax
   10f01:	83 e0 01             	and    $0x1,%eax
   10f04:	84 c0                	test   %al,%al
   10f06:	75 07                	jne    10f0f <memory_get_paddr+0x37>
    return 0;
   10f08:	b8 00 00 00 00       	mov    $0x0,%eax
   10f0d:	eb 1a                	jmp    10f29 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f0f:	83 ec 0c             	sub    $0xc,%esp
   10f12:	ff 75 f4             	push   -0xc(%ebp)
   10f15:	e8 1f f4 ff ff       	call   10339 <pte_to_pg_addr>
   10f1a:	83 c4 10             	add    $0x10,%esp
   10f1d:	89 c2                	mov    %eax,%edx
   10f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f22:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f27:	09 d0                	or     %edx,%eax

}
   10f29:	c9                   	leave  
   10f2a:	c3                   	ret    

00010f2b <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f2b:	55                   	push   %ebp
   10f2c:	89 e5                	mov    %esp,%ebp
   10f2e:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f31:	eb 6e                	jmp    10fa1 <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f33:	83 ec 08             	sub    $0x8,%esp
   10f36:	ff 75 08             	push   0x8(%ebp)
   10f39:	ff 75 0c             	push   0xc(%ebp)
   10f3c:	e8 97 ff ff ff       	call   10ed8 <memory_get_paddr>
   10f41:	83 c4 10             	add    $0x10,%esp
   10f44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f4b:	75 07                	jne    10f54 <memory_copy_uvm_data+0x29>
      return -1;
   10f4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f52:	eb 58                	jmp    10fac <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f57:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f5f:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f64:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f67:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f6a:	8b 45 14             	mov    0x14(%ebp),%eax
   10f6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f70:	73 06                	jae    10f78 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f72:	8b 45 14             	mov    0x14(%ebp),%eax
   10f75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f78:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f7b:	8b 55 10             	mov    0x10(%ebp),%edx
   10f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f81:	83 ec 04             	sub    $0x4,%esp
   10f84:	51                   	push   %ecx
   10f85:	52                   	push   %edx
   10f86:	50                   	push   %eax
   10f87:	e8 f7 2f 00 00       	call   13f83 <kernel_memcpy>
   10f8c:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f92:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f98:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f9e:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fa1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fa5:	75 8c                	jne    10f33 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fa7:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fac:	c9                   	leave  
   10fad:	c3                   	ret    

00010fae <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fae:	55                   	push   %ebp
   10faf:	89 e5                	mov    %esp,%ebp
  return (char*)0;
   10fb1:	b8 00 00 00 00       	mov    $0x0,%eax
   10fb6:	5d                   	pop    %ebp
   10fb7:	c3                   	ret    

00010fb8 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10fb8:	55                   	push   %ebp
   10fb9:	89 e5                	mov    %esp,%ebp
   10fbb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10fbe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fc2:	75 19                	jne    10fdd <list_node_init+0x25>
   10fc4:	68 9c 4a 01 00       	push   $0x14a9c
   10fc9:	68 4c 4c 01 00       	push   $0x14c4c
   10fce:	6a 20                	push   $0x20
   10fd0:	68 b4 4a 01 00       	push   $0x14ab4
   10fd5:	e8 f6 2a 00 00       	call   13ad0 <pannic>
   10fda:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fea:	8b 50 04             	mov    0x4(%eax),%edx
   10fed:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff0:	89 10                	mov    %edx,(%eax)
}
   10ff2:	90                   	nop
   10ff3:	c9                   	leave  
   10ff4:	c3                   	ret    

00010ff5 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10ff5:	55                   	push   %ebp
   10ff6:	89 e5                	mov    %esp,%ebp
   10ff8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10ffb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fff:	75 19                	jne    1101a <list_node_next+0x25>
   11001:	68 9c 4a 01 00       	push   $0x14a9c
   11006:	68 ac 4c 01 00       	push   $0x14cac
   1100b:	6a 2b                	push   $0x2b
   1100d:	68 b4 4a 01 00       	push   $0x14ab4
   11012:	e8 b9 2a 00 00       	call   13ad0 <pannic>
   11017:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1101a:	8b 45 08             	mov    0x8(%ebp),%eax
   1101d:	8b 40 04             	mov    0x4(%eax),%eax
}
   11020:	c9                   	leave  
   11021:	c3                   	ret    

00011022 <list_init>:

static inline void list_init(list_t *list) {
   11022:	55                   	push   %ebp
   11023:	89 e5                	mov    %esp,%ebp
   11025:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11028:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1102c:	75 19                	jne    11047 <list_init+0x25>
   1102e:	68 f2 4a 01 00       	push   $0x14af2
   11033:	68 5c 4c 01 00       	push   $0x14c5c
   11038:	6a 31                	push   $0x31
   1103a:	68 b4 4a 01 00       	push   $0x14ab4
   1103f:	e8 8c 2a 00 00       	call   13ad0 <pannic>
   11044:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11047:	8b 45 08             	mov    0x8(%ebp),%eax
   1104a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11051:	8b 45 08             	mov    0x8(%ebp),%eax
   11054:	8b 50 04             	mov    0x4(%eax),%edx
   11057:	8b 45 08             	mov    0x8(%ebp),%eax
   1105a:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1105c:	8b 45 08             	mov    0x8(%ebp),%eax
   1105f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11066:	90                   	nop
   11067:	c9                   	leave  
   11068:	c3                   	ret    

00011069 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   11069:	55                   	push   %ebp
   1106a:	89 e5                	mov    %esp,%ebp
   1106c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1106f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11073:	75 19                	jne    1108e <list_is_empty+0x25>
   11075:	68 f2 4a 01 00       	push   $0x14af2
   1107a:	68 bc 4c 01 00       	push   $0x14cbc
   1107f:	6a 38                	push   $0x38
   11081:	68 b4 4a 01 00       	push   $0x14ab4
   11086:	e8 45 2a 00 00       	call   13ad0 <pannic>
   1108b:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   1108e:	8b 45 08             	mov    0x8(%ebp),%eax
   11091:	8b 40 08             	mov    0x8(%eax),%eax
   11094:	85 c0                	test   %eax,%eax
   11096:	0f 94 c0             	sete   %al
   11099:	0f b6 c0             	movzbl %al,%eax
}
   1109c:	c9                   	leave  
   1109d:	c3                   	ret    

0001109e <list_get_size>:

static inline int list_get_size(list_t *list) {
   1109e:	55                   	push   %ebp
   1109f:	89 e5                	mov    %esp,%ebp
   110a1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   110a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110a8:	75 19                	jne    110c3 <list_get_size+0x25>
   110aa:	68 f2 4a 01 00       	push   $0x14af2
   110af:	68 ec 4c 01 00       	push   $0x14cec
   110b4:	6a 3e                	push   $0x3e
   110b6:	68 b4 4a 01 00       	push   $0x14ab4
   110bb:	e8 10 2a 00 00       	call   13ad0 <pannic>
   110c0:	83 c4 10             	add    $0x10,%esp

    return list->size;
   110c3:	8b 45 08             	mov    0x8(%ebp),%eax
   110c6:	8b 40 08             	mov    0x8(%eax),%eax
}
   110c9:	c9                   	leave  
   110ca:	c3                   	ret    

000110cb <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   110cb:	55                   	push   %ebp
   110cc:	89 e5                	mov    %esp,%ebp
   110ce:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   110d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110d5:	75 19                	jne    110f0 <list_get_first+0x25>
   110d7:	68 f2 4a 01 00       	push   $0x14af2
   110dc:	68 9c 4c 01 00       	push   $0x14c9c
   110e1:	6a 44                	push   $0x44
   110e3:	68 b4 4a 01 00       	push   $0x14ab4
   110e8:	e8 e3 29 00 00       	call   13ad0 <pannic>
   110ed:	83 c4 10             	add    $0x10,%esp

    return list->first;
   110f0:	8b 45 08             	mov    0x8(%ebp),%eax
   110f3:	8b 00                	mov    (%eax),%eax
}
   110f5:	c9                   	leave  
   110f6:	c3                   	ret    

000110f7 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   110f7:	55                   	push   %ebp
   110f8:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   110fa:	8b 55 08             	mov    0x8(%ebp),%edx
   110fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11100:	01 d0                	add    %edx,%eax
   11102:	8d 50 ff             	lea    -0x1(%eax),%edx
   11105:	8b 45 0c             	mov    0xc(%ebp),%eax
   11108:	f7 d8                	neg    %eax
   1110a:	21 d0                	and    %edx,%eax
}
   1110c:	5d                   	pop    %ebp
   1110d:	c3                   	ret    

0001110e <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1110e:	55                   	push   %ebp
   1110f:	89 e5                	mov    %esp,%ebp
   11111:	f4                   	hlt    
   11112:	90                   	nop
   11113:	5d                   	pop    %ebp
   11114:	c3                   	ret    

00011115 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11115:	55                   	push   %ebp
   11116:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11118:	8b 45 08             	mov    0x8(%ebp),%eax
   1111b:	0f 22 d8             	mov    %eax,%cr3
}
   1111e:	90                   	nop
   1111f:	5d                   	pop    %ebp
   11120:	c3                   	ret    

00011121 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11121:	55                   	push   %ebp
   11122:	89 e5                	mov    %esp,%ebp
   11124:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11127:	8b 45 0c             	mov    0xc(%ebp),%eax
   1112a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1112d:	8b 45 08             	mov    0x8(%ebp),%eax
   11130:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11133:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11136:	ff 28                	ljmp   *(%eax)
}
   11138:	90                   	nop
   11139:	c9                   	leave  
   1113a:	c3                   	ret    

0001113b <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1113b:	55                   	push   %ebp
   1113c:	89 e5                	mov    %esp,%ebp
   1113e:	83 ec 04             	sub    $0x4,%esp
   11141:	8b 45 08             	mov    0x8(%ebp),%eax
   11144:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11148:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1114c:	0f 00 d8             	ltr    %ax
}
   1114f:	90                   	nop
   11150:	c9                   	leave  
   11151:	c3                   	ret    

00011152 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11152:	55                   	push   %ebp
   11153:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11155:	ff 75 08             	push   0x8(%ebp)
   11158:	e8 b8 ff ff ff       	call   11115 <write_cr3>
   1115d:	83 c4 04             	add    $0x4,%esp
}
   11160:	90                   	nop
   11161:	c9                   	leave  
   11162:	c3                   	ret    

00011163 <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   11163:	55                   	push   %ebp
   11164:	89 e5                	mov    %esp,%ebp
   11166:	83 ec 04             	sub    $0x4,%esp
   11169:	8b 45 08             	mov    0x8(%ebp),%eax
   1116c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   11170:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11174:	6a 00                	push   $0x0
   11176:	50                   	push   %eax
   11177:	e8 a5 ff ff ff       	call   11121 <far_jump>
   1117c:	83 c4 08             	add    $0x8,%esp
}
   1117f:	90                   	nop
   11180:	c9                   	leave  
   11181:	c3                   	ret    

00011182 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11182:	55                   	push   %ebp
   11183:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   11185:	8b 45 0c             	mov    0xc(%ebp),%eax
   11188:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   1118e:	0f b7 c0             	movzwl %ax,%eax
   11191:	50                   	push   %eax
   11192:	e8 cc ff ff ff       	call   11163 <switch_to_tss>
   11197:	83 c4 04             	add    $0x4,%esp
}
   1119a:	90                   	nop
   1119b:	c9                   	leave  
   1119c:	c3                   	ret    

0001119d <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   1119d:	55                   	push   %ebp
   1119e:	89 e5                	mov    %esp,%ebp
   111a0:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   111a3:	e8 89 12 00 00       	call   12431 <gdt_alloc_desc>
   111a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   111ab:	8b 45 08             	mov    0x8(%ebp),%eax
   111ae:	83 c0 58             	add    $0x58,%eax
   111b1:	89 c2                	mov    %eax,%edx
   111b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111b6:	0f b7 c0             	movzwl %ax,%eax
   111b9:	68 89 00 00 00       	push   $0x89
   111be:	6a 68                	push   $0x68
   111c0:	52                   	push   %edx
   111c1:	50                   	push   %eax
   111c2:	e8 f8 10 00 00       	call   122bf <segment_desc_set>
   111c7:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   111ca:	8b 45 08             	mov    0x8(%ebp),%eax
   111cd:	83 c0 58             	add    $0x58,%eax
   111d0:	83 ec 04             	sub    $0x4,%esp
   111d3:	6a 68                	push   $0x68
   111d5:	6a 00                	push   $0x0
   111d7:	50                   	push   %eax
   111d8:	e8 f5 2d 00 00       	call   13fd2 <kernel_memset>
   111dd:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   111e0:	8b 45 08             	mov    0x8(%ebp),%eax
   111e3:	8b 55 ec             	mov    -0x14(%ebp),%edx
   111e6:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   111ec:	8b 45 14             	mov    0x14(%ebp),%eax
   111ef:	83 e0 01             	and    $0x1,%eax
   111f2:	85 c0                	test   %eax,%eax
   111f4:	74 10                	je     11206 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   111f6:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   111fd:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11204:	eb 16                	jmp    1121c <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   11206:	a1 b0 01 02 00       	mov    0x201b0,%eax
   1120b:	83 c8 03             	or     $0x3,%eax
   1120e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   11211:	a1 b4 01 02 00       	mov    0x201b4,%eax
   11216:	83 c8 03             	or     $0x3,%eax
   11219:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1121c:	8b 45 08             	mov    0x8(%ebp),%eax
   1121f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11222:	89 50 78             	mov    %edx,0x78(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	8b 55 10             	mov    0x10(%ebp),%edx
   1122b:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   11231:	e8 e9 fb ff ff       	call   10e1f <memory_alloc_page>
   11236:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   11239:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1123d:	0f 84 9b 00 00 00    	je     112de <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   11243:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11246:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1124c:	8b 45 08             	mov    0x8(%ebp),%eax
   1124f:	89 50 5c             	mov    %edx,0x5c(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   11252:	8b 45 08             	mov    0x8(%ebp),%eax
   11255:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11258:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   1125e:	8b 45 08             	mov    0x8(%ebp),%eax
   11261:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11268:	8b 45 08             	mov    0x8(%ebp),%eax
   1126b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1126e:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   11274:	8b 45 08             	mov    0x8(%ebp),%eax
   11277:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   1127d:	8b 45 08             	mov    0x8(%ebp),%eax
   11280:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   11286:	8b 45 08             	mov    0x8(%ebp),%eax
   11289:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   1128f:	8b 45 08             	mov    0x8(%ebp),%eax
   11292:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11298:	8b 45 08             	mov    0x8(%ebp),%eax
   1129b:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   112a1:	8b 45 08             	mov    0x8(%ebp),%eax
   112a4:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   112aa:	8b 45 08             	mov    0x8(%ebp),%eax
   112ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112b0:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   112b6:	8b 45 08             	mov    0x8(%ebp),%eax
   112b9:	c7 40 7c 02 02 00 00 	movl   $0x202,0x7c(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   112c0:	e8 7e f6 ff ff       	call   10943 <memory_creat_uvm>
   112c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   112c8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   112cc:	74 13                	je     112e1 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   112ce:	8b 45 08             	mov    0x8(%ebp),%eax
   112d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   112d4:	89 50 74             	mov    %edx,0x74(%eax)
    
    return 0;
   112d7:	b8 00 00 00 00       	mov    $0x0,%eax
   112dc:	eb 2f                	jmp    1130d <tss_init+0x170>
        goto tss_init_failed;   
   112de:	90                   	nop
   112df:	eb 01                	jmp    112e2 <tss_init+0x145>
        goto tss_init_failed;
   112e1:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   112e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112e5:	0f b7 c0             	movzwl %ax,%eax
   112e8:	83 ec 0c             	sub    $0xc,%esp
   112eb:	50                   	push   %eax
   112ec:	e8 b5 11 00 00       	call   124a6 <gdt_free>
   112f1:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   112f4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   112f8:	74 0e                	je     11308 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   112fa:	83 ec 0c             	sub    $0xc,%esp
   112fd:	ff 75 e8             	push   -0x18(%ebp)
   11300:	e8 3a fb ff ff       	call   10e3f <memory_free_page>
   11305:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11308:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1130d:	c9                   	leave  
   1130e:	c3                   	ret    

0001130f <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   1130f:	55                   	push   %ebp
   11310:	89 e5                	mov    %esp,%ebp
   11312:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11315:	e8 42 1b 00 00       	call   12e5c <idt_enter_protection>
   1131a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   1131d:	8b 45 08             	mov    0x8(%ebp),%eax
   11320:	83 c0 48             	add    $0x48,%eax
   11323:	83 ec 08             	sub    $0x8,%esp
   11326:	50                   	push   %eax
   11327:	68 10 00 02 00       	push   $0x20010
   1132c:	e8 5d 31 00 00       	call   1448e <list_insert_last>
   11331:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   11334:	83 ec 0c             	sub    $0xc,%esp
   11337:	ff 75 08             	push   0x8(%ebp)
   1133a:	e8 7e 03 00 00       	call   116bd <task_set_ready>
   1133f:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   11342:	83 ec 0c             	sub    $0xc,%esp
   11345:	ff 75 f4             	push   -0xc(%ebp)
   11348:	e8 27 1b 00 00       	call   12e74 <idt_leave_protection>
   1134d:	83 c4 10             	add    $0x10,%esp
}
   11350:	90                   	nop
   11351:	c9                   	leave  
   11352:	c3                   	ret    

00011353 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   11353:	55                   	push   %ebp
   11354:	89 e5                	mov    %esp,%ebp
   11356:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   11359:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1135d:	75 1c                	jne    1137b <task_init+0x28>
   1135f:	68 05 4b 01 00       	push   $0x14b05
   11364:	68 40 4c 01 00       	push   $0x14c40
   11369:	68 9f 00 00 00       	push   $0x9f
   1136e:	68 18 4b 01 00       	push   $0x14b18
   11373:	e8 58 27 00 00       	call   13ad0 <pannic>
   11378:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   1137b:	ff 75 18             	push   0x18(%ebp)
   1137e:	ff 75 14             	push   0x14(%ebp)
   11381:	ff 75 10             	push   0x10(%ebp)
   11384:	ff 75 08             	push   0x8(%ebp)
   11387:	e8 11 fe ff ff       	call   1119d <tss_init>
   1138c:	83 c4 10             	add    $0x10,%esp
   1138f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   11392:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   11396:	75 08                	jne    113a0 <task_init+0x4d>
        return err;
   11398:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1139b:	e9 a4 00 00 00       	jmp    11444 <task_init+0xf1>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   113a0:	8b 45 08             	mov    0x8(%ebp),%eax
   113a3:	83 c0 20             	add    $0x20,%eax
   113a6:	83 ec 04             	sub    $0x4,%esp
   113a9:	6a 20                	push   $0x20
   113ab:	ff 75 0c             	push   0xc(%ebp)
   113ae:	50                   	push   %eax
   113af:	e8 df 2a 00 00       	call   13e93 <kernel_strncpy>
   113b4:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   113b7:	8b 45 08             	mov    0x8(%ebp),%eax
   113ba:	83 c0 40             	add    $0x40,%eax
   113bd:	83 ec 0c             	sub    $0xc,%esp
   113c0:	50                   	push   %eax
   113c1:	e8 f2 fb ff ff       	call   10fb8 <list_node_init>
   113c6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   113c9:	8b 45 08             	mov    0x8(%ebp),%eax
   113cc:	83 c0 48             	add    $0x48,%eax
   113cf:	83 ec 0c             	sub    $0xc,%esp
   113d2:	50                   	push   %eax
   113d3:	e8 e0 fb ff ff       	call   10fb8 <list_node_init>
   113d8:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   113db:	8b 45 08             	mov    0x8(%ebp),%eax
   113de:	83 c0 50             	add    $0x50,%eax
   113e1:	83 ec 0c             	sub    $0xc,%esp
   113e4:	50                   	push   %eax
   113e5:	e8 ce fb ff ff       	call   10fb8 <list_node_init>
   113ea:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   113ed:	8b 45 08             	mov    0x8(%ebp),%eax
   113f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   113f6:	8b 45 08             	mov    0x8(%ebp),%eax
   113f9:	c7 40 18 0a 00 00 00 	movl   $0xa,0x18(%eax)
   11400:	8b 45 08             	mov    0x8(%ebp),%eax
   11403:	8b 50 18             	mov    0x18(%eax),%edx
   11406:	8b 45 08             	mov    0x8(%ebp),%eax
   11409:	89 50 14             	mov    %edx,0x14(%eax)
    task->sleep = 0;
   1140c:	8b 45 08             	mov    0x8(%ebp),%eax
   1140f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    task->pid = (uint32_t)task;
   11416:	8b 55 08             	mov    0x8(%ebp),%edx
   11419:	8b 45 08             	mov    0x8(%ebp),%eax
   1141c:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   1141f:	8b 45 08             	mov    0x8(%ebp),%eax
   11422:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->heap_start = task->heap_end = 0;
   11429:	8b 45 08             	mov    0x8(%ebp),%eax
   1142c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   11433:	8b 45 08             	mov    0x8(%ebp),%eax
   11436:	8b 50 10             	mov    0x10(%eax),%edx
   11439:	8b 45 08             	mov    0x8(%ebp),%eax
   1143c:	89 50 0c             	mov    %edx,0xc(%eax)
   

    return 1;
   1143f:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11444:	c9                   	leave  
   11445:	c3                   	ret    

00011446 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   11446:	55                   	push   %ebp
   11447:	89 e5                	mov    %esp,%ebp
   11449:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   1144c:	8b 45 08             	mov    0x8(%ebp),%eax
   1144f:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   11455:	85 c0                	test   %eax,%eax
   11457:	74 18                	je     11471 <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11459:	8b 45 08             	mov    0x8(%ebp),%eax
   1145c:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   11462:	0f b7 c0             	movzwl %ax,%eax
   11465:	83 ec 0c             	sub    $0xc,%esp
   11468:	50                   	push   %eax
   11469:	e8 38 10 00 00       	call   124a6 <gdt_free>
   1146e:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   11471:	8b 45 08             	mov    0x8(%ebp),%eax
   11474:	8b 40 5c             	mov    0x5c(%eax),%eax
   11477:	85 c0                	test   %eax,%eax
   11479:	74 17                	je     11492 <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   1147b:	8b 45 08             	mov    0x8(%ebp),%eax
   1147e:	8b 40 5c             	mov    0x5c(%eax),%eax
   11481:	2d 00 10 00 00       	sub    $0x1000,%eax
   11486:	83 ec 0c             	sub    $0xc,%esp
   11489:	50                   	push   %eax
   1148a:	e8 b0 f9 ff ff       	call   10e3f <memory_free_page>
   1148f:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   11492:	8b 45 08             	mov    0x8(%ebp),%eax
   11495:	8b 40 74             	mov    0x74(%eax),%eax
   11498:	85 c0                	test   %eax,%eax
   1149a:	74 12                	je     114ae <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   1149c:	8b 45 08             	mov    0x8(%ebp),%eax
   1149f:	8b 40 74             	mov    0x74(%eax),%eax
   114a2:	83 ec 0c             	sub    $0xc,%esp
   114a5:	50                   	push   %eax
   114a6:	e8 aa f6 ff ff       	call   10b55 <memory_destroy_uvm>
   114ab:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   114ae:	83 ec 04             	sub    $0x4,%esp
   114b1:	68 c4 00 00 00       	push   $0xc4
   114b6:	6a 00                	push   $0x0
   114b8:	ff 75 08             	push   0x8(%ebp)
   114bb:	e8 12 2b 00 00       	call   13fd2 <kernel_memset>
   114c0:	83 c4 10             	add    $0x10,%esp
}
   114c3:	90                   	nop
   114c4:	c9                   	leave  
   114c5:	c3                   	ret    

000114c6 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   114c6:	55                   	push   %ebp
   114c7:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   114c9:	e8 40 fc ff ff       	call   1110e <hlt>
   114ce:	eb f9                	jmp    114c9 <empty_task+0x3>

000114d0 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   114d0:	55                   	push   %ebp
   114d1:	89 e5                	mov    %esp,%ebp
   114d3:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   114d6:	e8 56 0f 00 00       	call   12431 <gdt_alloc_desc>
   114db:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   114de:	e8 4e 0f 00 00       	call   12431 <gdt_alloc_desc>
   114e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   114e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114e9:	0f b7 c0             	movzwl %ax,%eax
   114ec:	68 f2 40 00 00       	push   $0x40f2
   114f1:	6a ff                	push   $0xffffffff
   114f3:	6a 00                	push   $0x0
   114f5:	50                   	push   %eax
   114f6:	e8 c4 0d 00 00       	call   122bf <segment_desc_set>
   114fb:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   114fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11501:	0f b7 c0             	movzwl %ax,%eax
   11504:	68 fa 40 00 00       	push   $0x40fa
   11509:	6a ff                	push   $0xffffffff
   1150b:	6a 00                	push   $0x0
   1150d:	50                   	push   %eax
   1150e:	e8 ac 0d 00 00       	call   122bf <segment_desc_set>
   11513:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   11516:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11519:	a3 b0 01 02 00       	mov    %eax,0x201b0
    task_manager.app_data_selector = data_selector;
   1151e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11521:	a3 b4 01 02 00       	mov    %eax,0x201b4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   11526:	83 ec 0c             	sub    $0xc,%esp
   11529:	68 04 00 02 00       	push   $0x20004
   1152e:	e8 ef fa ff ff       	call   11022 <list_init>
   11533:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11536:	83 ec 0c             	sub    $0xc,%esp
   11539:	68 10 00 02 00       	push   $0x20010
   1153e:	e8 df fa ff ff       	call   11022 <list_init>
   11543:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11546:	83 ec 0c             	sub    $0xc,%esp
   11549:	68 1c 00 02 00       	push   $0x2001c
   1154e:	e8 cf fa ff ff       	call   11022 <list_init>
   11553:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   11556:	c7 05 00 00 02 00 00 	movl   $0x0,0x20000
   1155d:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   11560:	ba e0 65 02 00       	mov    $0x265e0,%edx
   11565:	b8 c6 14 01 00       	mov    $0x114c6,%eax
   1156a:	83 ec 0c             	sub    $0xc,%esp
   1156d:	6a 01                	push   $0x1
   1156f:	52                   	push   %edx
   11570:	50                   	push   %eax
   11571:	68 4d 4b 01 00       	push   $0x14b4d
   11576:	68 ec 00 02 00       	push   $0x200ec
   1157b:	e8 d3 fd ff ff       	call   11353 <task_init>
   11580:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   11583:	83 ec 04             	sub    $0x4,%esp
   11586:	68 00 62 00 00       	push   $0x6200
   1158b:	6a 00                	push   $0x0
   1158d:	68 c0 01 02 00       	push   $0x201c0
   11592:	e8 3b 2a 00 00       	call   13fd2 <kernel_memset>
   11597:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   1159a:	83 ec 0c             	sub    $0xc,%esp
   1159d:	68 c0 63 02 00       	push   $0x263c0
   115a2:	e8 14 1e 00 00       	call   133bb <mutex_init>
   115a7:	83 c4 10             	add    $0x10,%esp
  
}
   115aa:	90                   	nop
   115ab:	c9                   	leave  
   115ac:	c3                   	ret    

000115ad <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   115ad:	55                   	push   %ebp
   115ae:	89 e5                	mov    %esp,%ebp
   115b0:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task[], e_first_task[];
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);   //进程所需空间大小
   115b3:	b8 31 b3 03 00       	mov    $0x3b331,%eax
   115b8:	2d 00 b0 03 00       	sub    $0x3b000,%eax
   115bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   115c0:	68 00 10 00 00       	push   $0x1000
   115c5:	ff 75 f4             	push   -0xc(%ebp)
   115c8:	e8 2a fb ff ff       	call   110f7 <up2>
   115cd:	83 c4 08             	add    $0x8,%esp
   115d0:	05 00 a0 00 00       	add    $0xa000,%eax
   115d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   115d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115db:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   115de:	72 1c                	jb     115fc <task_first_init+0x4f>
   115e0:	68 58 4b 01 00       	push   $0x14b58
   115e5:	68 68 4c 01 00       	push   $0x14c68
   115ea:	68 35 01 00 00       	push   $0x135
   115ef:	68 18 4b 01 00       	push   $0x14b18
   115f4:	e8 d7 24 00 00       	call   13ad0 <pannic>
   115f9:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   115fc:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   11603:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11606:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11609:	01 d0                	add    %edx,%eax
   1160b:	83 ec 0c             	sub    $0xc,%esp
   1160e:	6a 00                	push   $0x0
   11610:	50                   	push   %eax
   11611:	ff 75 ec             	push   -0x14(%ebp)
   11614:	68 6f 4b 01 00       	push   $0x14b6f
   11619:	68 28 00 02 00       	push   $0x20028
   1161e:	e8 30 fd ff ff       	call   11353 <task_init>
   11623:	83 c4 20             	add    $0x20,%esp
    
    //4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
    task_manager.first_task.heap_start = (uint32_t)e_first_task;    //堆起始地址紧靠程序bss段之后
   11626:	b8 31 b3 03 00       	mov    $0x3b331,%eax
   1162b:	a3 34 00 02 00       	mov    %eax,0x20034
    task_manager.first_task.heap_end = (uint32_t)e_first_task;      //堆大小初始为0
   11630:	b8 31 b3 03 00       	mov    $0x3b331,%eax
   11635:	a3 38 00 02 00       	mov    %eax,0x20038

    //5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   1163a:	a1 e8 00 02 00       	mov    0x200e8,%eax
   1163f:	0f b7 c0             	movzwl %ax,%eax
   11642:	83 ec 0c             	sub    $0xc,%esp
   11645:	50                   	push   %eax
   11646:	e8 f0 fa ff ff       	call   1113b <write_tr>
   1164b:	83 c4 10             	add    $0x10,%esp

    //6.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   1164e:	c7 05 00 00 02 00 28 	movl   $0x20028,0x20000
   11655:	00 02 00 

    //7.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11658:	a1 9c 00 02 00       	mov    0x2009c,%eax
   1165d:	83 ec 0c             	sub    $0xc,%esp
   11660:	50                   	push   %eax
   11661:	e8 ec fa ff ff       	call   11152 <mmu_set_page_dir>
   11666:	83 c4 10             	add    $0x10,%esp

    //8.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   11669:	a1 00 00 02 00       	mov    0x20000,%eax
   1166e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11674:	83 ec 04             	sub    $0x4,%esp
   11677:	6a 07                	push   $0x7
   11679:	ff 75 f0             	push   -0x10(%ebp)
   1167c:	ff 75 ec             	push   -0x14(%ebp)
   1167f:	e8 69 f7 ff ff       	call   10ded <memory_alloc_page_for>
   11684:	83 c4 10             	add    $0x10,%esp

    //10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   11687:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1168a:	83 ec 04             	sub    $0x4,%esp
   1168d:	50                   	push   %eax
   1168e:	68 00 b0 03 00       	push   $0x3b000
   11693:	68 00 00 00 80       	push   $0x80000000
   11698:	e8 e6 28 00 00       	call   13f83 <kernel_memcpy>
   1169d:	83 c4 10             	add    $0x10,%esp

    //11.将任务设为可被调度
    task_start(&task_manager.first_task);
   116a0:	83 ec 0c             	sub    $0xc,%esp
   116a3:	68 28 00 02 00       	push   $0x20028
   116a8:	e8 62 fc ff ff       	call   1130f <task_start>
   116ad:	83 c4 10             	add    $0x10,%esp
}
   116b0:	90                   	nop
   116b1:	c9                   	leave  
   116b2:	c3                   	ret    

000116b3 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   116b3:	55                   	push   %ebp
   116b4:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   116b6:	b8 28 00 02 00       	mov    $0x20028,%eax
}
   116bb:	5d                   	pop    %ebp
   116bc:	c3                   	ret    

000116bd <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   116bd:	55                   	push   %ebp
   116be:	89 e5                	mov    %esp,%ebp
   116c0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   116c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116c7:	75 1c                	jne    116e5 <task_set_ready+0x28>
   116c9:	68 05 4b 01 00       	push   $0x14b05
   116ce:	68 78 4c 01 00       	push   $0x14c78
   116d3:	68 66 01 00 00       	push   $0x166
   116d8:	68 18 4b 01 00       	push   $0x14b18
   116dd:	e8 ee 23 00 00       	call   13ad0 <pannic>
   116e2:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   116e5:	8b 45 08             	mov    0x8(%ebp),%eax
   116e8:	83 c0 40             	add    $0x40,%eax
   116eb:	83 ec 08             	sub    $0x8,%esp
   116ee:	50                   	push   %eax
   116ef:	68 04 00 02 00       	push   $0x20004
   116f4:	e8 95 2d 00 00       	call   1448e <list_insert_last>
   116f9:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   116fc:	8b 45 08             	mov    0x8(%ebp),%eax
   116ff:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11705:	90                   	nop
   11706:	c9                   	leave  
   11707:	c3                   	ret    

00011708 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11708:	55                   	push   %ebp
   11709:	89 e5                	mov    %esp,%ebp
   1170b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1170e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11712:	75 1c                	jne    11730 <task_set_unready+0x28>
   11714:	68 05 4b 01 00       	push   $0x14b05
   11719:	68 88 4c 01 00       	push   $0x14c88
   1171e:	68 75 01 00 00       	push   $0x175
   11723:	68 18 4b 01 00       	push   $0x14b18
   11728:	e8 a3 23 00 00       	call   13ad0 <pannic>
   1172d:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   11730:	8b 45 08             	mov    0x8(%ebp),%eax
   11733:	83 c0 40             	add    $0x40,%eax
   11736:	83 ec 08             	sub    $0x8,%esp
   11739:	50                   	push   %eax
   1173a:	68 04 00 02 00       	push   $0x20004
   1173f:	e8 3f 2f 00 00       	call   14683 <list_remove>
   11744:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11747:	8b 45 08             	mov    0x8(%ebp),%eax
   1174a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11750:	90                   	nop
   11751:	c9                   	leave  
   11752:	c3                   	ret    

00011753 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   11753:	55                   	push   %ebp
   11754:	89 e5                	mov    %esp,%ebp
   11756:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11759:	83 ec 0c             	sub    $0xc,%esp
   1175c:	68 04 00 02 00       	push   $0x20004
   11761:	e8 65 f9 ff ff       	call   110cb <list_get_first>
   11766:	83 c4 10             	add    $0x10,%esp
   11769:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   1176c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11770:	74 08                	je     1177a <task_ready_first+0x27>
   11772:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11775:	83 e8 40             	sub    $0x40,%eax
   11778:	eb 05                	jmp    1177f <task_ready_first+0x2c>
   1177a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1177f:	c9                   	leave  
   11780:	c3                   	ret    

00011781 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   11781:	55                   	push   %ebp
   11782:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11784:	a1 00 00 02 00       	mov    0x20000,%eax
}
   11789:	5d                   	pop    %ebp
   1178a:	c3                   	ret    

0001178b <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   1178b:	55                   	push   %ebp
   1178c:	89 e5                	mov    %esp,%ebp
   1178e:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11791:	e8 c6 16 00 00       	call   12e5c <idt_enter_protection>
   11796:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   11799:	e8 b5 ff ff ff       	call   11753 <task_ready_first>
   1179e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   117a1:	a1 00 00 02 00       	mov    0x20000,%eax
   117a6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   117a9:	74 37                	je     117e2 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   117ab:	a1 00 00 02 00       	mov    0x20000,%eax
   117b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   117b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   117b7:	75 07                	jne    117c0 <task_switch+0x35>
            to = &task_manager.empty_task;
   117b9:	c7 45 f4 ec 00 02 00 	movl   $0x200ec,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   117c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117c3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   117c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117cc:	a3 00 00 02 00       	mov    %eax,0x20000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   117d1:	83 ec 08             	sub    $0x8,%esp
   117d4:	ff 75 f4             	push   -0xc(%ebp)
   117d7:	ff 75 ec             	push   -0x14(%ebp)
   117da:	e8 a3 f9 ff ff       	call   11182 <task_switch_from_to>
   117df:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   117e2:	83 ec 0c             	sub    $0xc,%esp
   117e5:	ff 75 f0             	push   -0x10(%ebp)
   117e8:	e8 87 16 00 00       	call   12e74 <idt_leave_protection>
   117ed:	83 c4 10             	add    $0x10,%esp
}
   117f0:	90                   	nop
   117f1:	c9                   	leave  
   117f2:	c3                   	ret    

000117f3 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   117f3:	55                   	push   %ebp
   117f4:	89 e5                	mov    %esp,%ebp
   117f6:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   117f9:	83 ec 0c             	sub    $0xc,%esp
   117fc:	68 1c 00 02 00       	push   $0x2001c
   11801:	e8 c5 f8 ff ff       	call   110cb <list_get_first>
   11806:	83 c4 10             	add    $0x10,%esp
   11809:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   1180c:	eb 62                	jmp    11870 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   1180e:	83 ec 0c             	sub    $0xc,%esp
   11811:	ff 75 f4             	push   -0xc(%ebp)
   11814:	e8 dc f7 ff ff       	call   10ff5 <list_node_next>
   11819:	83 c4 10             	add    $0x10,%esp
   1181c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   1181f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11823:	74 08                	je     1182d <task_slice_end+0x3a>
   11825:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11828:	83 e8 40             	sub    $0x40,%eax
   1182b:	eb 05                	jmp    11832 <task_slice_end+0x3f>
   1182d:	b8 00 00 00 00       	mov    $0x0,%eax
   11832:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11835:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11838:	8b 40 1c             	mov    0x1c(%eax),%eax
   1183b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1183e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11841:	89 50 1c             	mov    %edx,0x1c(%eax)
   11844:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11847:	8b 40 1c             	mov    0x1c(%eax),%eax
   1184a:	85 c0                	test   %eax,%eax
   1184c:	75 1c                	jne    1186a <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   1184e:	83 ec 0c             	sub    $0xc,%esp
   11851:	ff 75 e8             	push   -0x18(%ebp)
   11854:	e8 01 01 00 00       	call   1195a <task_set_wakeup>
   11859:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   1185c:	83 ec 0c             	sub    $0xc,%esp
   1185f:	ff 75 e8             	push   -0x18(%ebp)
   11862:	e8 56 fe ff ff       	call   116bd <task_set_ready>
   11867:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1186a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1186d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11870:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11874:	75 98                	jne    1180e <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11876:	e8 06 ff ff ff       	call   11781 <task_current>
   1187b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   1187e:	81 7d f0 ec 00 02 00 	cmpl   $0x200ec,-0x10(%ebp)
   11885:	75 23                	jne    118aa <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11887:	83 ec 0c             	sub    $0xc,%esp
   1188a:	68 04 00 02 00       	push   $0x20004
   1188f:	e8 d5 f7 ff ff       	call   11069 <list_is_empty>
   11894:	83 c4 10             	add    $0x10,%esp
   11897:	85 c0                	test   %eax,%eax
   11899:	75 60                	jne    118fb <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1189b:	c7 05 ec 00 02 00 00 	movl   $0x0,0x200ec
   118a2:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   118a5:	e8 e1 fe ff ff       	call   1178b <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   118aa:	81 7d f0 ec 00 02 00 	cmpl   $0x200ec,-0x10(%ebp)
   118b1:	74 49                	je     118fc <task_slice_end+0x109>
   118b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118b6:	8b 40 18             	mov    0x18(%eax),%eax
   118b9:	8d 50 ff             	lea    -0x1(%eax),%edx
   118bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118bf:	89 50 18             	mov    %edx,0x18(%eax)
   118c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118c5:	8b 40 18             	mov    0x18(%eax),%eax
   118c8:	85 c0                	test   %eax,%eax
   118ca:	75 30                	jne    118fc <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   118cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118cf:	8b 50 14             	mov    0x14(%eax),%edx
   118d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118d5:	89 50 18             	mov    %edx,0x18(%eax)
        task_set_unready(curr_task);
   118d8:	83 ec 0c             	sub    $0xc,%esp
   118db:	ff 75 f0             	push   -0x10(%ebp)
   118de:	e8 25 fe ff ff       	call   11708 <task_set_unready>
   118e3:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   118e6:	83 ec 0c             	sub    $0xc,%esp
   118e9:	ff 75 f0             	push   -0x10(%ebp)
   118ec:	e8 cc fd ff ff       	call   116bd <task_set_ready>
   118f1:	83 c4 10             	add    $0x10,%esp
        task_switch();
   118f4:	e8 92 fe ff ff       	call   1178b <task_switch>
   118f9:	eb 01                	jmp    118fc <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   118fb:	90                   	nop
    }
}
   118fc:	c9                   	leave  
   118fd:	c3                   	ret    

000118fe <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   118fe:	55                   	push   %ebp
   118ff:	89 e5                	mov    %esp,%ebp
   11901:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11904:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11908:	75 1c                	jne    11926 <task_set_sleep+0x28>
   1190a:	68 05 4b 01 00       	push   $0x14b05
   1190f:	68 cc 4c 01 00       	push   $0x14ccc
   11914:	68 ea 01 00 00       	push   $0x1ea
   11919:	68 18 4b 01 00       	push   $0x14b18
   1191e:	e8 ad 21 00 00       	call   13ad0 <pannic>
   11923:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   11926:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1192a:	74 2b                	je     11957 <task_set_sleep+0x59>

    task->sleep = slice;
   1192c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1192f:	8b 45 08             	mov    0x8(%ebp),%eax
   11932:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->state = TASK_SLEEP;
   11935:	8b 45 08             	mov    0x8(%ebp),%eax
   11938:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   1193e:	8b 45 08             	mov    0x8(%ebp),%eax
   11941:	83 c0 40             	add    $0x40,%eax
   11944:	83 ec 08             	sub    $0x8,%esp
   11947:	50                   	push   %eax
   11948:	68 1c 00 02 00       	push   $0x2001c
   1194d:	e8 3c 2b 00 00       	call   1448e <list_insert_last>
   11952:	83 c4 10             	add    $0x10,%esp
   11955:	eb 01                	jmp    11958 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11957:	90                   	nop
}
   11958:	c9                   	leave  
   11959:	c3                   	ret    

0001195a <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   1195a:	55                   	push   %ebp
   1195b:	89 e5                	mov    %esp,%ebp
   1195d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11960:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11964:	75 1c                	jne    11982 <task_set_wakeup+0x28>
   11966:	68 05 4b 01 00       	push   $0x14b05
   1196b:	68 dc 4c 01 00       	push   $0x14cdc
   11970:	68 f8 01 00 00       	push   $0x1f8
   11975:	68 18 4b 01 00       	push   $0x14b18
   1197a:	e8 51 21 00 00       	call   13ad0 <pannic>
   1197f:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11982:	8b 45 08             	mov    0x8(%ebp),%eax
   11985:	83 c0 40             	add    $0x40,%eax
   11988:	83 ec 08             	sub    $0x8,%esp
   1198b:	50                   	push   %eax
   1198c:	68 1c 00 02 00       	push   $0x2001c
   11991:	e8 ed 2c 00 00       	call   14683 <list_remove>
   11996:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11999:	8b 45 08             	mov    0x8(%ebp),%eax
   1199c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   119a2:	90                   	nop
   119a3:	c9                   	leave  
   119a4:	c3                   	ret    

000119a5 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   119a5:	55                   	push   %ebp
   119a6:	89 e5                	mov    %esp,%ebp
   119a8:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   119ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   119b2:	83 ec 0c             	sub    $0xc,%esp
   119b5:	68 c0 63 02 00       	push   $0x263c0
   119ba:	e8 49 1a 00 00       	call   13408 <mutex_lock>
   119bf:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   119c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   119c9:	eb 27                	jmp    119f2 <alloc_task+0x4d>
        task_t *curr = task_table + i;
   119cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119ce:	69 c0 c4 00 00 00    	imul   $0xc4,%eax,%eax
   119d4:	05 c0 01 02 00       	add    $0x201c0,%eax
   119d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   119dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119df:	8b 40 08             	mov    0x8(%eax),%eax
   119e2:	85 c0                	test   %eax,%eax
   119e4:	75 08                	jne    119ee <alloc_task+0x49>
            task = curr;
   119e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   119ec:	eb 0a                	jmp    119f8 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   119ee:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   119f2:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   119f6:	7e d3                	jle    119cb <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   119f8:	83 ec 0c             	sub    $0xc,%esp
   119fb:	68 c0 63 02 00       	push   $0x263c0
   11a00:	e8 94 1a 00 00       	call   13499 <mutex_unlock>
   11a05:	83 c4 10             	add    $0x10,%esp

    return task;
   11a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11a0b:	c9                   	leave  
   11a0c:	c3                   	ret    

00011a0d <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   11a0d:	55                   	push   %ebp
   11a0e:	89 e5                	mov    %esp,%ebp
   11a10:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   11a13:	83 ec 0c             	sub    $0xc,%esp
   11a16:	68 c0 63 02 00       	push   $0x263c0
   11a1b:	e8 e8 19 00 00       	call   13408 <mutex_lock>
   11a20:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   11a23:	8b 45 08             	mov    0x8(%ebp),%eax
   11a26:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   11a2d:	83 ec 0c             	sub    $0xc,%esp
   11a30:	68 c0 63 02 00       	push   $0x263c0
   11a35:	e8 5f 1a 00 00       	call   13499 <mutex_unlock>
   11a3a:	83 c4 10             	add    $0x10,%esp
}
   11a3d:	90                   	nop
   11a3e:	c9                   	leave  
   11a3f:	c3                   	ret    

00011a40 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11a40:	55                   	push   %ebp
   11a41:	89 e5                	mov    %esp,%ebp
   11a43:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11a46:	e8 11 14 00 00       	call   12e5c <idt_enter_protection>
   11a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11a4e:	e8 2e fd ff ff       	call   11781 <task_current>
   11a53:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11a56:	83 ec 0c             	sub    $0xc,%esp
   11a59:	ff 75 f0             	push   -0x10(%ebp)
   11a5c:	e8 a7 fc ff ff       	call   11708 <task_set_unready>
   11a61:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11a64:	8b 45 08             	mov    0x8(%ebp),%eax
   11a67:	83 c0 09             	add    $0x9,%eax
   11a6a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11a6f:	f7 e2                	mul    %edx
   11a71:	89 d0                	mov    %edx,%eax
   11a73:	c1 e8 03             	shr    $0x3,%eax
   11a76:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11a79:	83 ec 08             	sub    $0x8,%esp
   11a7c:	ff 75 ec             	push   -0x14(%ebp)
   11a7f:	ff 75 f0             	push   -0x10(%ebp)
   11a82:	e8 77 fe ff ff       	call   118fe <task_set_sleep>
   11a87:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11a8a:	e8 fc fc ff ff       	call   1178b <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11a8f:	83 ec 0c             	sub    $0xc,%esp
   11a92:	ff 75 f4             	push   -0xc(%ebp)
   11a95:	e8 da 13 00 00       	call   12e74 <idt_leave_protection>
   11a9a:	83 c4 10             	add    $0x10,%esp
}
   11a9d:	90                   	nop
   11a9e:	c9                   	leave  
   11a9f:	c3                   	ret    

00011aa0 <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11aa0:	55                   	push   %ebp
   11aa1:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11aa3:	e8 d9 fc ff ff       	call   11781 <task_current>
   11aa8:	8b 40 08             	mov    0x8(%eax),%eax
}
   11aab:	5d                   	pop    %ebp
   11aac:	c3                   	ret    

00011aad <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11aad:	55                   	push   %ebp
   11aae:	89 e5                	mov    %esp,%ebp
   11ab0:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   11ab3:	e8 c9 fc ff ff       	call   11781 <task_current>
   11ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   11abb:	e8 e5 fe ff ff       	call   119a5 <alloc_task>
   11ac0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   11ac3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ac7:	0f 84 2b 01 00 00    	je     11bf8 <sys_fork+0x14b>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ad0:	8b 40 5c             	mov    0x5c(%eax),%eax
   11ad3:	83 e8 58             	sub    $0x58,%eax
   11ad6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   11ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11adc:	8b 40 50             	mov    0x50(%eax),%eax
   11adf:	8d 48 14             	lea    0x14(%eax),%ecx
   11ae2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae5:	8b 40 34             	mov    0x34(%eax),%eax
   11ae8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11aeb:	83 c2 20             	add    $0x20,%edx
   11aee:	83 ec 0c             	sub    $0xc,%esp
   11af1:	6a 00                	push   $0x0
   11af3:	51                   	push   %ecx
   11af4:	50                   	push   %eax
   11af5:	52                   	push   %edx
   11af6:	ff 75 f0             	push   -0x10(%ebp)
   11af9:	e8 55 f8 ff ff       	call   11353 <task_init>
   11afe:	83 c4 20             	add    $0x20,%esp
   11b01:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11b04:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11b08:	0f 88 ed 00 00 00    	js     11bfb <sys_fork+0x14e>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11b0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b11:	83 c0 58             	add    $0x58,%eax
   11b14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11b17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b1a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11b21:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b24:	8b 50 24             	mov    0x24(%eax),%edx
   11b27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b2a:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11b2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b30:	8b 50 2c             	mov    0x2c(%eax),%edx
   11b33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b36:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b3c:	8b 50 28             	mov    0x28(%eax),%edx
   11b3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b42:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11b45:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b48:	8b 50 14             	mov    0x14(%eax),%edx
   11b4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b4e:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b54:	8b 50 18             	mov    0x18(%eax),%edx
   11b57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b5a:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11b5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b60:	8b 10                	mov    (%eax),%edx
   11b62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b65:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11b68:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b6b:	8b 50 1c             	mov    0x1c(%eax),%edx
   11b6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b71:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11b74:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b77:	8b 50 38             	mov    0x38(%eax),%edx
   11b7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b7d:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b83:	8b 50 10             	mov    0x10(%eax),%edx
   11b86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b89:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11b8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b8f:	8b 50 0c             	mov    0xc(%eax),%edx
   11b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b95:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b9b:	8b 50 08             	mov    0x8(%eax),%edx
   11b9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ba1:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ba7:	8b 50 04             	mov    0x4(%eax),%edx
   11baa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bad:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   11bb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bb3:	8b 50 54             	mov    0x54(%eax),%edx
   11bb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bb9:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   11bbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11bc2:	89 50 04             	mov    %edx,0x4(%eax)

    //拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bc8:	8b 50 74             	mov    0x74(%eax),%edx
   11bcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bce:	8b 40 1c             	mov    0x1c(%eax),%eax
   11bd1:	83 ec 08             	sub    $0x8,%esp
   11bd4:	52                   	push   %edx
   11bd5:	50                   	push   %eax
   11bd6:	e8 ed ed ff ff       	call   109c8 <memory_copy_uvm>
   11bdb:	83 c4 10             	add    $0x10,%esp
   11bde:	85 c0                	test   %eax,%eax
   11be0:	78 1c                	js     11bfe <sys_fork+0x151>
        goto fork_failed;

    //子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   11be2:	83 ec 0c             	sub    $0xc,%esp
   11be5:	ff 75 f0             	push   -0x10(%ebp)
   11be8:	e8 22 f7 ff ff       	call   1130f <task_start>
   11bed:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   11bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bf3:	8b 40 08             	mov    0x8(%eax),%eax
   11bf6:	eb 2e                	jmp    11c26 <sys_fork+0x179>
        goto fork_failed;
   11bf8:	90                   	nop
   11bf9:	eb 04                	jmp    11bff <sys_fork+0x152>
        goto fork_failed;
   11bfb:	90                   	nop
   11bfc:	eb 01                	jmp    11bff <sys_fork+0x152>
        goto fork_failed;
   11bfe:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   11bff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c03:	74 1c                	je     11c21 <sys_fork+0x174>
        task_uninit(child_task);
   11c05:	83 ec 0c             	sub    $0xc,%esp
   11c08:	ff 75 f0             	push   -0x10(%ebp)
   11c0b:	e8 36 f8 ff ff       	call   11446 <task_uninit>
   11c10:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11c13:	83 ec 0c             	sub    $0xc,%esp
   11c16:	ff 75 f0             	push   -0x10(%ebp)
   11c19:	e8 ef fd ff ff       	call   11a0d <free_task>
   11c1e:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   11c21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c26:	c9                   	leave  
   11c27:	c3                   	ret    

00011c28 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11c28:	55                   	push   %ebp
   11c29:	89 e5                	mov    %esp,%ebp
   11c2b:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c2e:	e8 29 12 00 00       	call   12e5c <idt_enter_protection>
   11c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11c36:	83 ec 0c             	sub    $0xc,%esp
   11c39:	68 04 00 02 00       	push   $0x20004
   11c3e:	e8 5b f4 ff ff       	call   1109e <list_get_size>
   11c43:	83 c4 10             	add    $0x10,%esp
   11c46:	83 f8 01             	cmp    $0x1,%eax
   11c49:	7e 29                	jle    11c74 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11c4b:	e8 31 fb ff ff       	call   11781 <task_current>
   11c50:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   11c53:	83 ec 0c             	sub    $0xc,%esp
   11c56:	ff 75 f0             	push   -0x10(%ebp)
   11c59:	e8 aa fa ff ff       	call   11708 <task_set_unready>
   11c5e:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   11c61:	83 ec 0c             	sub    $0xc,%esp
   11c64:	ff 75 f0             	push   -0x10(%ebp)
   11c67:	e8 51 fa ff ff       	call   116bd <task_set_ready>
   11c6c:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11c6f:	e8 17 fb ff ff       	call   1178b <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11c74:	83 ec 0c             	sub    $0xc,%esp
   11c77:	ff 75 f4             	push   -0xc(%ebp)
   11c7a:	e8 f5 11 00 00       	call   12e74 <idt_leave_protection>
   11c7f:	83 c4 10             	add    $0x10,%esp
    return 0;
   11c82:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c87:	c9                   	leave  
   11c88:	c3                   	ret    

00011c89 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int 
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11c89:	55                   	push   %ebp
   11c8a:	89 e5                	mov    %esp,%ebp
   11c8c:	83 ec 28             	sub    $0x28,%esp
    //获取该段的权限
    uint32_t privilege = PTE_P | PTE_U;
   11c8f:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
    if (elf_phdr->p_flags & PT_W) { //该段具有写权限
   11c96:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c99:	8b 40 18             	mov    0x18(%eax),%eax
   11c9c:	83 e0 02             	and    $0x2,%eax
   11c9f:	85 c0                	test   %eax,%eax
   11ca1:	74 04                	je     11ca7 <load_phdr+0x1e>
        privilege |= PTE_W;
   11ca3:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
    }

    //为该段分配页空间并创建映射关系
    int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr, elf_phdr->p_memsz, privilege);
   11ca7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11caa:	8b 50 14             	mov    0x14(%eax),%edx
   11cad:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb0:	8b 40 08             	mov    0x8(%eax),%eax
   11cb3:	ff 75 f4             	push   -0xc(%ebp)
   11cb6:	52                   	push   %edx
   11cb7:	50                   	push   %eax
   11cb8:	ff 75 10             	push   0x10(%ebp)
   11cbb:	e8 75 f0 ff ff       	call   10d35 <memory_alloc_for_page_dir>
   11cc0:	83 c4 10             	add    $0x10,%esp
   11cc3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11cc6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11cca:	79 1a                	jns    11ce6 <load_phdr+0x5d>
        log_printf("no memory");
   11ccc:	83 ec 0c             	sub    $0xc,%esp
   11ccf:	68 7a 4b 01 00       	push   $0x14b7a
   11cd4:	e8 39 2b 00 00       	call   14812 <log_printf>
   11cd9:	83 c4 10             	add    $0x10,%esp
        return -1;
   11cdc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ce1:	e9 b5 00 00 00       	jmp    11d9b <load_phdr+0x112>
    }

    //使文件的读取位置偏移到该程序段的起始位置
    if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11ce6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ce9:	8b 40 04             	mov    0x4(%eax),%eax
   11cec:	83 ec 04             	sub    $0x4,%esp
   11cef:	6a 00                	push   $0x0
   11cf1:	50                   	push   %eax
   11cf2:	ff 75 08             	push   0x8(%ebp)
   11cf5:	e8 0f 15 00 00       	call   13209 <sys_lseek>
   11cfa:	83 c4 10             	add    $0x10,%esp
   11cfd:	85 c0                	test   %eax,%eax
   11cff:	79 1a                	jns    11d1b <load_phdr+0x92>
        log_printf("lseek file failed");
   11d01:	83 ec 0c             	sub    $0xc,%esp
   11d04:	68 84 4b 01 00       	push   $0x14b84
   11d09:	e8 04 2b 00 00       	call   14812 <log_printf>
   11d0e:	83 c4 10             	add    $0x10,%esp
        return -1;
   11d11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d16:	e9 80 00 00 00       	jmp    11d9b <load_phdr+0x112>
    }

    //获取该程序段的起始虚拟地址和段在文件中的大小
    uint32_t vaddr = elf_phdr->p_vaddr;
   11d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d1e:	8b 40 08             	mov    0x8(%eax),%eax
   11d21:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = elf_phdr->p_filesz;
   11d24:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d27:	8b 40 10             	mov    0x10(%eax),%eax
   11d2a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (size > 0) {  //按页读取并拷贝
   11d2d:	eb 61                	jmp    11d90 <load_phdr+0x107>
        //获取需要拷贝的空间大小
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11d2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d32:	ba 00 10 00 00       	mov    $0x1000,%edx
   11d37:	39 d0                	cmp    %edx,%eax
   11d39:	0f 47 c2             	cmova  %edx,%eax
   11d3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //获取vaddr在page_dir中关联的物理页的物理地址
        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11d3f:	83 ec 08             	sub    $0x8,%esp
   11d42:	ff 75 f0             	push   -0x10(%ebp)
   11d45:	ff 75 10             	push   0x10(%ebp)
   11d48:	e8 8b f1 ff ff       	call   10ed8 <memory_get_paddr>
   11d4d:	83 c4 10             	add    $0x10,%esp
   11d50:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //拷贝curr_size大小的内容到paddr对应的页中
        if (sys_read(file, (char*)paddr, curr_size) < curr_size) {
   11d53:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11d56:	83 ec 04             	sub    $0x4,%esp
   11d59:	ff 75 e4             	push   -0x1c(%ebp)
   11d5c:	50                   	push   %eax
   11d5d:	ff 75 08             	push   0x8(%ebp)
   11d60:	e8 5f 14 00 00       	call   131c4 <sys_read>
   11d65:	83 c4 10             	add    $0x10,%esp
   11d68:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11d6b:	7e 17                	jle    11d84 <load_phdr+0xfb>
            log_printf("read file failed");
   11d6d:	83 ec 0c             	sub    $0xc,%esp
   11d70:	68 96 4b 01 00       	push   $0x14b96
   11d75:	e8 98 2a 00 00       	call   14812 <log_printf>
   11d7a:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d82:	eb 17                	jmp    11d9b <load_phdr+0x112>
        }

        size -= curr_size;
   11d84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d87:	29 45 ec             	sub    %eax,-0x14(%ebp)
        vaddr += curr_size;
   11d8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d8d:	01 45 f0             	add    %eax,-0x10(%ebp)
    while (size > 0) {  //按页读取并拷贝
   11d90:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d94:	75 99                	jne    11d2f <load_phdr+0xa6>
    }

    return 0;
   11d96:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d9b:	c9                   	leave  
   11d9c:	c3                   	ret    

00011d9d <load_elf_file>:
 * @param task 
 * @param name 
 * @param page_dir 
 * @return uint32_t 
 */
static uint32_t load_elf_file(task_t *task, const char * name, uint32_t page_dir) {
   11d9d:	55                   	push   %ebp
   11d9e:	89 e5                	mov    %esp,%ebp
   11da0:	83 ec 78             	sub    $0x78,%esp
    //1.定义elf文件头对象,和程序段表项对象
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    //2.打开文件
    int file = sys_open(name, 0);
   11da3:	83 ec 08             	sub    $0x8,%esp
   11da6:	6a 00                	push   $0x0
   11da8:	ff 75 0c             	push   0xc(%ebp)
   11dab:	e8 db 13 00 00       	call   1318b <sys_open>
   11db0:	83 c4 10             	add    $0x10,%esp
   11db3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11db6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11dba:	79 18                	jns    11dd4 <load_elf_file+0x37>
        log_printf("open failed %s", name);
   11dbc:	83 ec 08             	sub    $0x8,%esp
   11dbf:	ff 75 0c             	push   0xc(%ebp)
   11dc2:	68 a7 4b 01 00       	push   $0x14ba7
   11dc7:	e8 46 2a 00 00       	call   14812 <log_printf>
   11dcc:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dcf:	e9 c1 01 00 00       	jmp    11f95 <load_elf_file+0x1f8>
    }

    //3.读取elf文件的elf头部分
    int cnt = sys_read(file, (char*)&elf_hdr, sizeof(Elf32_Ehdr));
   11dd4:	83 ec 04             	sub    $0x4,%esp
   11dd7:	6a 34                	push   $0x34
   11dd9:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11ddc:	50                   	push   %eax
   11ddd:	ff 75 ec             	push   -0x14(%ebp)
   11de0:	e8 df 13 00 00       	call   131c4 <sys_read>
   11de5:	83 c4 10             	add    $0x10,%esp
   11de8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11dee:	83 f8 33             	cmp    $0x33,%eax
   11df1:	77 18                	ja     11e0b <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11df3:	83 ec 08             	sub    $0x8,%esp
   11df6:	ff 75 e8             	push   -0x18(%ebp)
   11df9:	68 b6 4b 01 00       	push   $0x14bb6
   11dfe:	e8 0f 2a 00 00       	call   14812 <log_printf>
   11e03:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e06:	e9 8a 01 00 00       	jmp    11f95 <load_elf_file+0x1f8>
    }

    //4.判断是否为ELF文件
    if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' 
   11e0b:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11e0f:	3c 7f                	cmp    $0x7f,%al
   11e11:	75 18                	jne    11e2b <load_elf_file+0x8e>
   11e13:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11e17:	3c 45                	cmp    $0x45,%al
   11e19:	75 10                	jne    11e2b <load_elf_file+0x8e>
        || elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   11e1b:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11e1f:	3c 4c                	cmp    $0x4c,%al
   11e21:	75 08                	jne    11e2b <load_elf_file+0x8e>
   11e23:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11e27:	3c 46                	cmp    $0x46,%al
   11e29:	74 15                	je     11e40 <load_elf_file+0xa3>
            log_printf("check elf ident failed.");
   11e2b:	83 ec 0c             	sub    $0xc,%esp
   11e2e:	68 d1 4b 01 00       	push   $0x14bd1
   11e33:	e8 da 29 00 00       	call   14812 <log_printf>
   11e38:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e3b:	e9 55 01 00 00       	jmp    11f95 <load_elf_file+0x1f8>
    }

    
    //5.必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) || (elf_hdr.e_entry == 0)) {
   11e40:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11e44:	66 83 f8 02          	cmp    $0x2,%ax
   11e48:	75 11                	jne    11e5b <load_elf_file+0xbe>
   11e4a:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11e4e:	66 83 f8 03          	cmp    $0x3,%ax
   11e52:	75 07                	jne    11e5b <load_elf_file+0xbe>
   11e54:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e57:	85 c0                	test   %eax,%eax
   11e59:	75 15                	jne    11e70 <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11e5b:	83 ec 0c             	sub    $0xc,%esp
   11e5e:	68 ec 4b 01 00       	push   $0x14bec
   11e63:	e8 aa 29 00 00       	call   14812 <log_printf>
   11e68:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e6b:	e9 25 01 00 00       	jmp    11f95 <load_elf_file+0x1f8>
    }

    //6.必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11e70:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e74:	66 85 c0             	test   %ax,%ax
   11e77:	74 07                	je     11e80 <load_elf_file+0xe3>
   11e79:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e7c:	85 c0                	test   %eax,%eax
   11e7e:	75 15                	jne    11e95 <load_elf_file+0xf8>
        log_printf("none programe header");
   11e80:	83 ec 0c             	sub    $0xc,%esp
   11e83:	68 0c 4c 01 00       	push   $0x14c0c
   11e88:	e8 85 29 00 00       	call   14812 <log_printf>
   11e8d:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e90:	e9 00 01 00 00       	jmp    11f95 <load_elf_file+0x1f8>
    }

    //7.遍历elf文件的程序段，加载可加载段到内存中对应位置
    uint32_t e_phoff = elf_hdr.e_phoff; //获取程序段表的偏移地址
   11e95:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   11e9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11ea2:	e9 cb 00 00 00       	jmp    11f72 <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11eaa:	83 ec 04             	sub    $0x4,%esp
   11ead:	6a 00                	push   $0x0
   11eaf:	50                   	push   %eax
   11eb0:	ff 75 ec             	push   -0x14(%ebp)
   11eb3:	e8 51 13 00 00       	call   13209 <sys_lseek>
   11eb8:	83 c4 10             	add    $0x10,%esp
   11ebb:	85 c0                	test   %eax,%eax
   11ebd:	79 15                	jns    11ed4 <load_elf_file+0x137>
            log_printf("read file failed");
   11ebf:	83 ec 0c             	sub    $0xc,%esp
   11ec2:	68 96 4b 01 00       	push   $0x14b96
   11ec7:	e8 46 29 00 00       	call   14812 <log_printf>
   11ecc:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ecf:	e9 c1 00 00 00       	jmp    11f95 <load_elf_file+0x1f8>
        }

        cnt = sys_read(file, (char*)&elf_phdr, sizeof(Elf32_Phdr));
   11ed4:	83 ec 04             	sub    $0x4,%esp
   11ed7:	6a 20                	push   $0x20
   11ed9:	8d 45 90             	lea    -0x70(%ebp),%eax
   11edc:	50                   	push   %eax
   11edd:	ff 75 ec             	push   -0x14(%ebp)
   11ee0:	e8 df 12 00 00       	call   131c4 <sys_read>
   11ee5:	83 c4 10             	add    $0x10,%esp
   11ee8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11eeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11eee:	83 f8 1f             	cmp    $0x1f,%eax
   11ef1:	77 15                	ja     11f08 <load_elf_file+0x16b>
            log_printf("read file failed");
   11ef3:	83 ec 0c             	sub    $0xc,%esp
   11ef6:	68 96 4b 01 00       	push   $0x14b96
   11efb:	e8 12 29 00 00       	call   14812 <log_printf>
   11f00:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f03:	e9 8d 00 00 00       	jmp    11f95 <load_elf_file+0x1f8>
        }

        //若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
        if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   11f08:	8b 45 90             	mov    -0x70(%ebp),%eax
   11f0b:	83 f8 01             	cmp    $0x1,%eax
   11f0e:	75 53                	jne    11f63 <load_elf_file+0x1c6>
   11f10:	8b 45 98             	mov    -0x68(%ebp),%eax
   11f13:	85 c0                	test   %eax,%eax
   11f15:	79 4c                	jns    11f63 <load_elf_file+0x1c6>
            continue;
        }

        //加载该程序段
        int err = load_phdr(file, &elf_phdr, page_dir);
   11f17:	83 ec 04             	sub    $0x4,%esp
   11f1a:	ff 75 10             	push   0x10(%ebp)
   11f1d:	8d 45 90             	lea    -0x70(%ebp),%eax
   11f20:	50                   	push   %eax
   11f21:	ff 75 ec             	push   -0x14(%ebp)
   11f24:	e8 60 fd ff ff       	call   11c89 <load_phdr>
   11f29:	83 c4 10             	add    $0x10,%esp
   11f2c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11f2f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11f33:	79 12                	jns    11f47 <load_elf_file+0x1aa>
            log_printf("load program failed");
   11f35:	83 ec 0c             	sub    $0xc,%esp
   11f38:	68 21 4c 01 00       	push   $0x14c21
   11f3d:	e8 d0 28 00 00       	call   14812 <log_printf>
   11f42:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f45:	eb 4e                	jmp    11f95 <load_elf_file+0x1f8>
        }

        //更新堆空间的位置，紧靠最后一个可加载段
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11f47:	8b 55 98             	mov    -0x68(%ebp),%edx
   11f4a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11f4d:	01 c2                	add    %eax,%edx
   11f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f52:	89 50 0c             	mov    %edx,0xc(%eax)
        task->heap_end = task->heap_start;
   11f55:	8b 45 08             	mov    0x8(%ebp),%eax
   11f58:	8b 50 0c             	mov    0xc(%eax),%edx
   11f5b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5e:	89 50 10             	mov    %edx,0x10(%eax)
   11f61:	eb 01                	jmp    11f64 <load_elf_file+0x1c7>
            continue;
   11f63:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   11f64:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f68:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f6c:	0f b7 c0             	movzwl %ax,%eax
   11f6f:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f72:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f76:	0f b7 c0             	movzwl %ax,%eax
   11f79:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f7c:	0f 8c 25 ff ff ff    	jl     11ea7 <load_elf_file+0x10a>
    }

    //成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
    sys_close(file);
   11f82:	83 ec 0c             	sub    $0xc,%esp
   11f85:	ff 75 ec             	push   -0x14(%ebp)
   11f88:	e8 a0 12 00 00       	call   1322d <sys_close>
   11f8d:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f90:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f93:	eb 19                	jmp    11fae <load_elf_file+0x211>

//错误处理
load_failed:
    if (file >= 0) {    //文件已被打开，则关闭该文件
   11f95:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f99:	78 0e                	js     11fa9 <load_elf_file+0x20c>
        sys_close(file);
   11f9b:	83 ec 0c             	sub    $0xc,%esp
   11f9e:	ff 75 ec             	push   -0x14(%ebp)
   11fa1:	e8 87 12 00 00       	call   1322d <sys_close>
   11fa6:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   11fa9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11fae:	c9                   	leave  
   11faf:	c3                   	ret    

00011fb0 <copy_args>:
 * @param stack_top 新任务的栈顶地址
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int 
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char * const *argv, int argc) {
   11fb0:	55                   	push   %ebp
   11fb1:	89 e5                	mov    %esp,%ebp
   11fb3:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   11fb6:	8b 45 14             	mov    0x14(%ebp),%eax
   11fb9:	89 45 d8             	mov    %eax,-0x28(%ebp)


    //1.获取char*数组在目标虚拟空间中的的虚拟地址
    //char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
    //即指向了该字符串数组第一个char*的地址
    task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   11fbc:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fbf:	83 c0 0c             	add    $0xc,%eax
   11fc2:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //2.获取char*数组对应的虚拟空间关联的物理地址
    char **to_argv_paddr = (char**)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);  
   11fc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11fc8:	83 ec 08             	sub    $0x8,%esp
   11fcb:	50                   	push   %eax
   11fcc:	ff 75 08             	push   0x8(%ebp)
   11fcf:	e8 04 ef ff ff       	call   10ed8 <memory_get_paddr>
   11fd4:	83 c4 10             	add    $0x10,%esp
   11fd7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //3.获取参数的存储地址, 偏移量为 task_args 加上 argc个参数的字符串指针的大小，
    char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char*) * argc;
   11fda:	8b 45 14             	mov    0x14(%ebp),%eax
   11fdd:	83 c0 03             	add    $0x3,%eax
   11fe0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fe7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fea:	01 d0                	add    %edx,%eax
   11fec:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
    for (int i = 0; i < argc; ++i) {
   11fef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11ff6:	e9 82 00 00 00       	jmp    1207d <copy_args+0xcd>
        char *from = argv[i];
   11ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ffe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12005:	8b 45 10             	mov    0x10(%ebp),%eax
   12008:	01 d0                	add    %edx,%eax
   1200a:	8b 00                	mov    (%eax),%eax
   1200c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kernel_strlen(from) + 1;
   1200f:	83 ec 0c             	sub    $0xc,%esp
   12012:	ff 75 e8             	push   -0x18(%ebp)
   12015:	e8 34 1f 00 00       	call   13f4e <kernel_strlen>
   1201a:	83 c4 10             	add    $0x10,%esp
   1201d:	83 c0 01             	add    $0x1,%eax
   12020:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir, (uint32_t)from, len);
   12023:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   12026:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12029:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1202c:	51                   	push   %ecx
   1202d:	52                   	push   %edx
   1202e:	ff 75 08             	push   0x8(%ebp)
   12031:	50                   	push   %eax
   12032:	e8 f4 ee ff ff       	call   10f2b <memory_copy_uvm_data>
   12037:	83 c4 10             	add    $0x10,%esp
   1203a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   1203d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12041:	79 1c                	jns    1205f <copy_args+0xaf>
   12043:	68 35 4c 01 00       	push   $0x14c35
   12048:	68 fc 4c 01 00       	push   $0x14cfc
   1204d:	68 50 03 00 00       	push   $0x350
   12052:	68 18 4b 01 00       	push   $0x14b18
   12057:	e8 74 1a 00 00       	call   13ad0 <pannic>
   1205c:	83 c4 10             	add    $0x10,%esp
        to_argv_paddr[i] = dest_arg;
   1205f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12062:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12069:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1206c:	01 c2                	add    %eax,%edx
   1206e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12071:	89 02                	mov    %eax,(%edx)
        dest_arg += len;
   12073:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12076:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; ++i) {
   12079:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1207d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12080:	3b 45 14             	cmp    0x14(%ebp),%eax
   12083:	0f 8c 72 ff ff ff    	jl     11ffb <copy_args+0x4b>
    }


    //4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
    memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args, sizeof(task_args_t)); 
   12089:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1208c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1208f:	6a 0c                	push   $0xc
   12091:	52                   	push   %edx
   12092:	ff 75 08             	push   0x8(%ebp)
   12095:	50                   	push   %eax
   12096:	e8 90 ee ff ff       	call   10f2b <memory_copy_uvm_data>
   1209b:	83 c4 10             	add    $0x10,%esp
}
   1209e:	90                   	nop
   1209f:	c9                   	leave  
   120a0:	c3                   	ret    

000120a1 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   120a1:	55                   	push   %ebp
   120a2:	89 e5                	mov    %esp,%ebp
   120a4:	83 ec 28             	sub    $0x28,%esp
        //1.获取当前任务进程
        task_t *task = task_current();
   120a7:	e8 d5 f6 ff ff       	call   11781 <task_current>
   120ac:	89 45 f4             	mov    %eax,-0xc(%ebp)

        //2.获取当前任务的页目录表
        uint32_t old_page_dir = task->tss.cr3;
   120af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120b2:	8b 40 74             	mov    0x74(%eax),%eax
   120b5:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.创建一个新的页目录表
        uint32_t new_page_dir = memory_creat_uvm();
   120b8:	e8 86 e8 ff ff       	call   10943 <memory_creat_uvm>
   120bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (new_page_dir == 0)  //创建失败
   120c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120c4:	0f 84 4a 01 00 00    	je     12214 <sys_execve+0x173>
            goto exec_failed;

        //4.加载elf文件，替换当前任务
        uint32_t entry = load_elf_file(task, name, new_page_dir);
   120ca:	83 ec 04             	sub    $0x4,%esp
   120cd:	ff 75 ec             	push   -0x14(%ebp)
   120d0:	ff 75 08             	push   0x8(%ebp)
   120d3:	ff 75 f4             	push   -0xc(%ebp)
   120d6:	e8 c2 fc ff ff       	call   11d9d <load_elf_file>
   120db:	83 c4 10             	add    $0x10,%esp
   120de:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (entry == 0)
   120e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   120e5:	0f 84 2c 01 00 00    	je     12217 <sys_execve+0x176>
            goto exec_failed;

        
        //5.为新进程分配用户栈空间
        uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   120eb:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
        int err = memory_alloc_for_page_dir(new_page_dir, 
   120f2:	6a 07                	push   $0x7
   120f4:	68 00 20 03 00       	push   $0x32000
   120f9:	68 00 e0 fc df       	push   $0xdffce000
   120fe:	ff 75 ec             	push   -0x14(%ebp)
   12101:	e8 2f ec ff ff       	call   10d35 <memory_alloc_for_page_dir>
   12106:	83 c4 10             	add    $0x10,%esp
   12109:	89 45 e0             	mov    %eax,-0x20(%ebp)
            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, 
            MEM_TASK_STACK_SIZE, 
            PTE_P | PTE_U | PTE_W);

        if (err < 0) 
   1210c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12110:	0f 88 04 01 00 00    	js     1221a <sys_execve+0x179>
            goto exec_failed;

        //6.将被执行任务的入口参数拷贝到栈上方对应内存空间
        int argc = strings_count(argv);
   12116:	83 ec 0c             	sub    $0xc,%esp
   12119:	ff 75 0c             	push   0xc(%ebp)
   1211c:	e8 0d 22 00 00       	call   1432e <strings_count>
   12121:	83 c4 10             	add    $0x10,%esp
   12124:	89 45 dc             	mov    %eax,-0x24(%ebp)
        err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   12127:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1212a:	ff 75 dc             	push   -0x24(%ebp)
   1212d:	ff 75 0c             	push   0xc(%ebp)
   12130:	50                   	push   %eax
   12131:	ff 75 ec             	push   -0x14(%ebp)
   12134:	e8 77 fe ff ff       	call   11fb0 <copy_args>
   12139:	83 c4 10             	add    $0x10,%esp
   1213c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   1213f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12143:	0f 88 d4 00 00 00    	js     1221d <sys_execve+0x17c>

      

        //7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
        //所以用最高地址减去大小即可获得该帧的起始地址
        syscall_frame_t *frame = (syscall_frame_t*)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   12149:	e8 33 f6 ff ff       	call   11781 <task_current>
   1214e:	8b 40 5c             	mov    0x5c(%eax),%eax
   12151:	83 e8 58             	sub    $0x58,%eax
   12154:	89 45 d8             	mov    %eax,-0x28(%ebp)
        
        //8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
        frame->esp = stack_top - 5 * 4;
   12157:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1215a:	8d 50 ec             	lea    -0x14(%eax),%edx
   1215d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12160:	89 50 50             	mov    %edx,0x50(%eax)
        frame->eip = entry;
   12163:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12166:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12169:	89 50 34             	mov    %edx,0x34(%eax)

        //9.让进程更清爽的运行，清空通用寄存器的值
        frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1216c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1216f:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12176:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12179:	8b 50 28             	mov    0x28(%eax),%edx
   1217c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1217f:	89 50 2c             	mov    %edx,0x2c(%eax)
   12182:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12185:	8b 50 2c             	mov    0x2c(%eax),%edx
   12188:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1218b:	89 50 24             	mov    %edx,0x24(%eax)
   1218e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12191:	8b 50 24             	mov    0x24(%eax),%edx
   12194:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12197:	89 50 30             	mov    %edx,0x30(%eax)
        frame->esi = frame->edi = frame->ebp = 0;
   1219a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1219d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   121a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121a7:	8b 50 1c             	mov    0x1c(%eax),%edx
   121aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ad:	89 50 14             	mov    %edx,0x14(%eax)
   121b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b3:	8b 50 14             	mov    0x14(%eax),%edx
   121b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b9:	89 50 18             	mov    %edx,0x18(%eax)
        frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   121bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121bf:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

        //10.修改当前任务名为被执行任务名
        kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   121c5:	83 ec 0c             	sub    $0xc,%esp
   121c8:	ff 75 08             	push   0x8(%ebp)
   121cb:	e8 8b 21 00 00       	call   1435b <get_file_name>
   121d0:	83 c4 10             	add    $0x10,%esp
   121d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   121d6:	83 c2 20             	add    $0x20,%edx
   121d9:	83 ec 04             	sub    $0x4,%esp
   121dc:	6a 20                	push   $0x20
   121de:	50                   	push   %eax
   121df:	52                   	push   %edx
   121e0:	e8 ae 1c 00 00       	call   13e93 <kernel_strncpy>
   121e5:	83 c4 10             	add    $0x10,%esp
        
        //11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
        task->tss.cr3 = new_page_dir;
   121e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
   121ee:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(new_page_dir);
   121f1:	83 ec 0c             	sub    $0xc,%esp
   121f4:	ff 75 ec             	push   -0x14(%ebp)
   121f7:	e8 56 ef ff ff       	call   11152 <mmu_set_page_dir>
   121fc:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(old_page_dir);
   121ff:	83 ec 0c             	sub    $0xc,%esp
   12202:	ff 75 f0             	push   -0x10(%ebp)
   12205:	e8 4b e9 ff ff       	call   10b55 <memory_destroy_uvm>
   1220a:	83 c4 10             	add    $0x10,%esp
    return 0;
   1220d:	b8 00 00 00 00       	mov    $0x0,%eax
   12212:	eb 3a                	jmp    1224e <sys_execve+0x1ad>
            goto exec_failed;
   12214:	90                   	nop
   12215:	eb 07                	jmp    1221e <sys_execve+0x17d>
            goto exec_failed;
   12217:	90                   	nop
   12218:	eb 04                	jmp    1221e <sys_execve+0x17d>
            goto exec_failed;
   1221a:	90                   	nop
   1221b:	eb 01                	jmp    1221e <sys_execve+0x17d>
            goto exec_failed;
   1221d:	90                   	nop

exec_failed:
    // 执行失败，释放资源并恢复到原进程状态
    if (new_page_dir) {
   1221e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12222:	74 25                	je     12249 <sys_execve+0x1a8>
        task->tss.cr3 = old_page_dir;
   12224:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12227:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1222a:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(old_page_dir);
   1222d:	83 ec 0c             	sub    $0xc,%esp
   12230:	ff 75 f0             	push   -0x10(%ebp)
   12233:	e8 1a ef ff ff       	call   11152 <mmu_set_page_dir>
   12238:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1223b:	83 ec 0c             	sub    $0xc,%esp
   1223e:	ff 75 ec             	push   -0x14(%ebp)
   12241:	e8 0f e9 ff ff       	call   10b55 <memory_destroy_uvm>
   12246:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   12249:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1224e:	c9                   	leave  
   1224f:	c3                   	ret    

00012250 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   12250:	55                   	push   %ebp
   12251:	89 e5                	mov    %esp,%ebp
   12253:	83 ec 08             	sub    $0x8,%esp
   12256:	8b 55 0c             	mov    0xc(%ebp),%edx
   12259:	8b 45 14             	mov    0x14(%ebp),%eax
   1225c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12260:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12264:	8b 45 10             	mov    0x10(%ebp),%eax
   12267:	89 c2                	mov    %eax,%edx
   12269:	8b 45 08             	mov    0x8(%ebp),%eax
   1226c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1226f:	8b 45 10             	mov    0x10(%ebp),%eax
   12272:	c1 e8 10             	shr    $0x10,%eax
   12275:	89 c2                	mov    %eax,%edx
   12277:	8b 45 08             	mov    0x8(%ebp),%eax
   1227a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1227e:	8b 45 08             	mov    0x8(%ebp),%eax
   12281:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12285:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12289:	8b 45 08             	mov    0x8(%ebp),%eax
   1228c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12290:	66 89 50 04          	mov    %dx,0x4(%eax)
   12294:	90                   	nop
   12295:	c9                   	leave  
   12296:	c3                   	ret    

00012297 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12297:	55                   	push   %ebp
   12298:	89 e5                	mov    %esp,%ebp
   1229a:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1229d:	8b 45 08             	mov    0x8(%ebp),%eax
   122a0:	c1 e8 10             	shr    $0x10,%eax
   122a3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   122a7:	8b 45 08             	mov    0x8(%ebp),%eax
   122aa:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   122ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   122b1:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   122b4:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   122b8:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   122bc:	90                   	nop
   122bd:	c9                   	leave  
   122be:	c3                   	ret    

000122bf <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   122bf:	55                   	push   %ebp
   122c0:	89 e5                	mov    %esp,%ebp
   122c2:	83 ec 18             	sub    $0x18,%esp
   122c5:	8b 55 08             	mov    0x8(%ebp),%edx
   122c8:	8b 45 14             	mov    0x14(%ebp),%eax
   122cb:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   122cf:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   122d3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   122d7:	66 c1 e8 03          	shr    $0x3,%ax
   122db:	0f b7 c0             	movzwl %ax,%eax
   122de:	c1 e0 03             	shl    $0x3,%eax
   122e1:	05 e0 65 02 00       	add    $0x265e0,%eax
   122e6:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   122e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   122ec:	89 c2                	mov    %eax,%edx
   122ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122f1:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   122f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   122f8:	c1 e8 10             	shr    $0x10,%eax
   122fb:	89 c2                	mov    %eax,%edx
   122fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12300:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   12303:	8b 45 0c             	mov    0xc(%ebp),%eax
   12306:	c1 e8 18             	shr    $0x18,%eax
   12309:	89 c2                	mov    %eax,%edx
   1230b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1230e:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   12311:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12318:	76 1d                	jbe    12337 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1231a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1231d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12321:	66 0d 00 80          	or     $0x8000,%ax
   12325:	89 c2                	mov    %eax,%edx
   12327:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1232a:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1232e:	8b 45 10             	mov    0x10(%ebp),%eax
   12331:	c1 e8 0c             	shr    $0xc,%eax
   12334:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12337:	8b 45 10             	mov    0x10(%ebp),%eax
   1233a:	89 c2                	mov    %eax,%edx
   1233c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1233f:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   12342:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12345:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12349:	89 c2                	mov    %eax,%edx
   1234b:	8b 45 10             	mov    0x10(%ebp),%eax
   1234e:	c1 e8 08             	shr    $0x8,%eax
   12351:	66 25 00 0f          	and    $0xf00,%ax
   12355:	09 d0                	or     %edx,%eax
   12357:	89 c2                	mov    %eax,%edx
   12359:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1235c:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   12360:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12363:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12367:	89 c2                	mov    %eax,%edx
   12369:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1236d:	80 e4 f0             	and    $0xf0,%ah
   12370:	09 d0                	or     %edx,%eax
   12372:	89 c2                	mov    %eax,%edx
   12374:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12377:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1237b:	90                   	nop
   1237c:	c9                   	leave  
   1237d:	c3                   	ret    

0001237e <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1237e:	55                   	push   %ebp
   1237f:	89 e5                	mov    %esp,%ebp
   12381:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12384:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1238b:	eb 1c                	jmp    123a9 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1238d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12390:	c1 e0 03             	shl    $0x3,%eax
   12393:	0f b7 c0             	movzwl %ax,%eax
   12396:	6a 00                	push   $0x0
   12398:	6a 00                	push   $0x0
   1239a:	6a 00                	push   $0x0
   1239c:	50                   	push   %eax
   1239d:	e8 1d ff ff ff       	call   122bf <segment_desc_set>
   123a2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   123a5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123a9:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   123b0:	7e db                	jle    1238d <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   123b2:	68 92 40 00 00       	push   $0x4092
   123b7:	6a ff                	push   $0xffffffff
   123b9:	6a 00                	push   $0x0
   123bb:	6a 10                	push   $0x10
   123bd:	e8 fd fe ff ff       	call   122bf <segment_desc_set>
   123c2:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   123c5:	c6 05 e2 65 03 00 01 	movb   $0x1,0x365e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   123cc:	68 9a 40 00 00       	push   $0x409a
   123d1:	6a ff                	push   $0xffffffff
   123d3:	6a 00                	push   $0x0
   123d5:	6a 08                	push   $0x8
   123d7:	e8 e3 fe ff ff       	call   122bf <segment_desc_set>
   123dc:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   123df:	c6 05 e1 65 03 00 01 	movb   $0x1,0x365e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   123e6:	ba ad 02 01 00       	mov    $0x102ad,%edx
   123eb:	b8 f8 65 02 00       	mov    $0x265f8,%eax
   123f0:	68 05 ec 00 00       	push   $0xec05
   123f5:	52                   	push   %edx
   123f6:	6a 08                	push   $0x8
   123f8:	50                   	push   %eax
   123f9:	e8 52 fe ff ff       	call   12250 <gate_desc_set>
   123fe:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   12401:	c6 05 e3 65 03 00 01 	movb   $0x1,0x365e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12408:	b8 e0 65 02 00       	mov    $0x265e0,%eax
   1240d:	83 ec 08             	sub    $0x8,%esp
   12410:	68 00 00 01 00       	push   $0x10000
   12415:	50                   	push   %eax
   12416:	e8 7c fe ff ff       	call   12297 <lgdt>
   1241b:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   1241e:	83 ec 0c             	sub    $0xc,%esp
   12421:	68 e0 85 03 00       	push   $0x385e0
   12426:	e8 90 0f 00 00       	call   133bb <mutex_init>
   1242b:	83 c4 10             	add    $0x10,%esp
}
   1242e:	90                   	nop
   1242f:	c9                   	leave  
   12430:	c3                   	ret    

00012431 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   12431:	55                   	push   %ebp
   12432:	89 e5                	mov    %esp,%ebp
   12434:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12437:	83 ec 0c             	sub    $0xc,%esp
   1243a:	68 e0 85 03 00       	push   $0x385e0
   1243f:	e8 c4 0f 00 00       	call   13408 <mutex_lock>
   12444:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12447:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1244e:	eb 36                	jmp    12486 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   12450:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12453:	05 e0 65 03 00       	add    $0x365e0,%eax
   12458:	0f b6 00             	movzbl (%eax),%eax
   1245b:	84 c0                	test   %al,%al
   1245d:	75 23                	jne    12482 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   1245f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12462:	05 e0 65 03 00       	add    $0x365e0,%eax
   12467:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   1246a:	83 ec 0c             	sub    $0xc,%esp
   1246d:	68 e0 85 03 00       	push   $0x385e0
   12472:	e8 22 10 00 00       	call   13499 <mutex_unlock>
   12477:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1247a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1247d:	c1 e0 03             	shl    $0x3,%eax
   12480:	eb 22                	jmp    124a4 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12482:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12486:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1248d:	7e c1                	jle    12450 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   1248f:	83 ec 0c             	sub    $0xc,%esp
   12492:	68 e0 85 03 00       	push   $0x385e0
   12497:	e8 fd 0f 00 00       	call   13499 <mutex_unlock>
   1249c:	83 c4 10             	add    $0x10,%esp
    return -1;
   1249f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   124a4:	c9                   	leave  
   124a5:	c3                   	ret    

000124a6 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   124a6:	55                   	push   %ebp
   124a7:	89 e5                	mov    %esp,%ebp
   124a9:	83 ec 14             	sub    $0x14,%esp
   124ac:	8b 45 08             	mov    0x8(%ebp),%eax
   124af:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   124b3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   124b7:	66 c1 e8 03          	shr    $0x3,%ax
   124bb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   124bf:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   124c3:	c6 80 e0 65 03 00 00 	movb   $0x0,0x365e0(%eax)
}
   124ca:	90                   	nop
   124cb:	c9                   	leave  
   124cc:	c3                   	ret    

000124cd <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   124cd:	55                   	push   %ebp
   124ce:	89 e5                	mov    %esp,%ebp
   124d0:	fa                   	cli    
   124d1:	90                   	nop
   124d2:	5d                   	pop    %ebp
   124d3:	c3                   	ret    

000124d4 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   124d4:	55                   	push   %ebp
   124d5:	89 e5                	mov    %esp,%ebp
   124d7:	fb                   	sti    
   124d8:	90                   	nop
   124d9:	5d                   	pop    %ebp
   124da:	c3                   	ret    

000124db <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   124db:	55                   	push   %ebp
   124dc:	89 e5                	mov    %esp,%ebp
   124de:	f4                   	hlt    
   124df:	90                   	nop
   124e0:	5d                   	pop    %ebp
   124e1:	c3                   	ret    

000124e2 <inb>:
static inline uint8_t inb(uint16_t port) {
   124e2:	55                   	push   %ebp
   124e3:	89 e5                	mov    %esp,%ebp
   124e5:	83 ec 14             	sub    $0x14,%esp
   124e8:	8b 45 08             	mov    0x8(%ebp),%eax
   124eb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   124ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   124f3:	89 c2                	mov    %eax,%edx
   124f5:	ec                   	in     (%dx),%al
   124f6:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   124f9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   124fd:	c9                   	leave  
   124fe:	c3                   	ret    

000124ff <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   124ff:	55                   	push   %ebp
   12500:	89 e5                	mov    %esp,%ebp
   12502:	83 ec 08             	sub    $0x8,%esp
   12505:	8b 45 08             	mov    0x8(%ebp),%eax
   12508:	8b 55 0c             	mov    0xc(%ebp),%edx
   1250b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1250f:	89 d0                	mov    %edx,%eax
   12511:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12514:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12518:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1251c:	ee                   	out    %al,(%dx)
}
   1251d:	90                   	nop
   1251e:	c9                   	leave  
   1251f:	c3                   	ret    

00012520 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12520:	55                   	push   %ebp
   12521:	89 e5                	mov    %esp,%ebp
   12523:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   12526:	8b 45 08             	mov    0x8(%ebp),%eax
   12529:	c1 e8 10             	shr    $0x10,%eax
   1252c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   12530:	8b 45 08             	mov    0x8(%ebp),%eax
   12533:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12537:	8b 45 0c             	mov    0xc(%ebp),%eax
   1253a:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   1253d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12541:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12545:	90                   	nop
   12546:	c9                   	leave  
   12547:	c3                   	ret    

00012548 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12548:	55                   	push   %ebp
   12549:	89 e5                	mov    %esp,%ebp
   1254b:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   1254e:	0f 20 d0             	mov    %cr2,%eax
   12551:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12554:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12557:	c9                   	leave  
   12558:	c3                   	ret    

00012559 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12559:	55                   	push   %ebp
   1255a:	89 e5                	mov    %esp,%ebp
   1255c:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1255f:	9c                   	pushf  
   12560:	58                   	pop    %eax
   12561:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12564:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12567:	c9                   	leave  
   12568:	c3                   	ret    

00012569 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12569:	55                   	push   %ebp
   1256a:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   1256c:	8b 45 08             	mov    0x8(%ebp),%eax
   1256f:	50                   	push   %eax
   12570:	9d                   	popf   
}
   12571:	90                   	nop
   12572:	5d                   	pop    %ebp
   12573:	c3                   	ret    

00012574 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12574:	55                   	push   %ebp
   12575:	89 e5                	mov    %esp,%ebp
   12577:	57                   	push   %edi
   12578:	56                   	push   %esi
   12579:	53                   	push   %ebx
   1257a:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   1257d:	8b 45 08             	mov    0x8(%ebp),%eax
   12580:	8b 40 3c             	mov    0x3c(%eax),%eax
   12583:	83 e0 03             	and    $0x3,%eax
   12586:	85 c0                	test   %eax,%eax
   12588:	74 14                	je     1259e <print_exception_fram+0x2a>
    ss = frame->ss3;
   1258a:	8b 45 08             	mov    0x8(%ebp),%eax
   1258d:	8b 40 48             	mov    0x48(%eax),%eax
   12590:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12593:	8b 45 08             	mov    0x8(%ebp),%eax
   12596:	8b 40 44             	mov    0x44(%eax),%eax
   12599:	89 45 e0             	mov    %eax,-0x20(%ebp)
   1259c:	eb 12                	jmp    125b0 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   1259e:	8b 45 08             	mov    0x8(%ebp),%eax
   125a1:	8b 40 0c             	mov    0xc(%eax),%eax
   125a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   125a7:	8b 45 08             	mov    0x8(%ebp),%eax
   125aa:	8b 40 1c             	mov    0x1c(%eax),%eax
   125ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   125b0:	83 ec 0c             	sub    $0xc,%esp
   125b3:	68 08 4d 01 00       	push   $0x14d08
   125b8:	e8 55 22 00 00       	call   14812 <log_printf>
   125bd:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   125c0:	8b 45 08             	mov    0x8(%ebp),%eax
   125c3:	8b 50 34             	mov    0x34(%eax),%edx
   125c6:	8b 45 08             	mov    0x8(%ebp),%eax
   125c9:	8b 40 30             	mov    0x30(%eax),%eax
   125cc:	83 ec 04             	sub    $0x4,%esp
   125cf:	52                   	push   %edx
   125d0:	50                   	push   %eax
   125d1:	68 46 4d 01 00       	push   $0x14d46
   125d6:	e8 37 22 00 00       	call   14812 <log_printf>
   125db:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   125de:	8b 45 08             	mov    0x8(%ebp),%eax
   125e1:	8b 30                	mov    (%eax),%esi
   125e3:	8b 45 08             	mov    0x8(%ebp),%eax
   125e6:	8b 58 04             	mov    0x4(%eax),%ebx
   125e9:	8b 45 08             	mov    0x8(%ebp),%eax
   125ec:	8b 48 08             	mov    0x8(%eax),%ecx
   125ef:	8b 45 08             	mov    0x8(%ebp),%eax
   125f2:	8b 50 0c             	mov    0xc(%eax),%edx
   125f5:	8b 45 08             	mov    0x8(%ebp),%eax
   125f8:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   125fb:	83 ec 04             	sub    $0x4,%esp
   125fe:	56                   	push   %esi
   125ff:	53                   	push   %ebx
   12600:	51                   	push   %ecx
   12601:	ff 75 e4             	push   -0x1c(%ebp)
   12604:	52                   	push   %edx
   12605:	50                   	push   %eax
   12606:	68 60 4d 01 00       	push   $0x14d60
   1260b:	e8 02 22 00 00       	call   14812 <log_printf>
   12610:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12613:	8b 45 08             	mov    0x8(%ebp),%eax
   12616:	8b 40 18             	mov    0x18(%eax),%eax
   12619:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   1261c:	8b 45 08             	mov    0x8(%ebp),%eax
   1261f:	8b 78 10             	mov    0x10(%eax),%edi
   12622:	8b 45 08             	mov    0x8(%ebp),%eax
   12625:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12628:	8b 45 08             	mov    0x8(%ebp),%eax
   1262b:	8b 58 24             	mov    0x24(%eax),%ebx
   1262e:	8b 45 08             	mov    0x8(%ebp),%eax
   12631:	8b 48 28             	mov    0x28(%eax),%ecx
   12634:	8b 45 08             	mov    0x8(%ebp),%eax
   12637:	8b 50 20             	mov    0x20(%eax),%edx
   1263a:	8b 45 08             	mov    0x8(%ebp),%eax
   1263d:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12640:	83 ec 0c             	sub    $0xc,%esp
   12643:	ff 75 e0             	push   -0x20(%ebp)
   12646:	ff 75 d4             	push   -0x2c(%ebp)
   12649:	57                   	push   %edi
   1264a:	56                   	push   %esi
   1264b:	53                   	push   %ebx
   1264c:	51                   	push   %ecx
   1264d:	52                   	push   %edx
   1264e:	50                   	push   %eax
   1264f:	68 90 4d 01 00       	push   $0x14d90
   12654:	e8 b9 21 00 00       	call   14812 <log_printf>
   12659:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   1265c:	8b 45 08             	mov    0x8(%ebp),%eax
   1265f:	8b 50 40             	mov    0x40(%eax),%edx
   12662:	8b 45 08             	mov    0x8(%ebp),%eax
   12665:	8b 40 38             	mov    0x38(%eax),%eax
   12668:	83 ec 04             	sub    $0x4,%esp
   1266b:	52                   	push   %edx
   1266c:	50                   	push   %eax
   1266d:	68 e8 4d 01 00       	push   $0x14de8
   12672:	e8 9b 21 00 00       	call   14812 <log_printf>
   12677:	83 c4 10             	add    $0x10,%esp
}
   1267a:	90                   	nop
   1267b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1267e:	5b                   	pop    %ebx
   1267f:	5e                   	pop    %esi
   12680:	5f                   	pop    %edi
   12681:	5d                   	pop    %ebp
   12682:	c3                   	ret    

00012683 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12683:	55                   	push   %ebp
   12684:	89 e5                	mov    %esp,%ebp
   12686:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   12689:	83 ec 0c             	sub    $0xc,%esp
   1268c:	68 04 4e 01 00       	push   $0x14e04
   12691:	e8 7c 21 00 00       	call   14812 <log_printf>
   12696:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   12699:	83 ec 08             	sub    $0x8,%esp
   1269c:	ff 75 0c             	push   0xc(%ebp)
   1269f:	68 38 4e 01 00       	push   $0x14e38
   126a4:	e8 69 21 00 00       	call   14812 <log_printf>
   126a9:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   126ac:	83 ec 0c             	sub    $0xc,%esp
   126af:	ff 75 08             	push   0x8(%ebp)
   126b2:	e8 bd fe ff ff       	call   12574 <print_exception_fram>
   126b7:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   126ba:	e8 1c fe ff ff       	call   124db <hlt>
   126bf:	eb f9                	jmp    126ba <do_default_handler+0x37>

000126c1 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   126c1:	55                   	push   %ebp
   126c2:	89 e5                	mov    %esp,%ebp
   126c4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   126c7:	83 ec 08             	sub    $0x8,%esp
   126ca:	68 52 4e 01 00       	push   $0x14e52
   126cf:	ff 75 08             	push   0x8(%ebp)
   126d2:	e8 ac ff ff ff       	call   12683 <do_default_handler>
   126d7:	83 c4 10             	add    $0x10,%esp
}
   126da:	90                   	nop
   126db:	c9                   	leave  
   126dc:	c3                   	ret    

000126dd <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   126dd:	55                   	push   %ebp
   126de:	89 e5                	mov    %esp,%ebp
   126e0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   126e3:	83 ec 08             	sub    $0x8,%esp
   126e6:	68 64 4e 01 00       	push   $0x14e64
   126eb:	ff 75 08             	push   0x8(%ebp)
   126ee:	e8 90 ff ff ff       	call   12683 <do_default_handler>
   126f3:	83 c4 10             	add    $0x10,%esp
}
   126f6:	90                   	nop
   126f7:	c9                   	leave  
   126f8:	c3                   	ret    

000126f9 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   126f9:	55                   	push   %ebp
   126fa:	89 e5                	mov    %esp,%ebp
   126fc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   126ff:	83 ec 08             	sub    $0x8,%esp
   12702:	68 76 4e 01 00       	push   $0x14e76
   12707:	ff 75 08             	push   0x8(%ebp)
   1270a:	e8 74 ff ff ff       	call   12683 <do_default_handler>
   1270f:	83 c4 10             	add    $0x10,%esp
}
   12712:	90                   	nop
   12713:	c9                   	leave  
   12714:	c3                   	ret    

00012715 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12715:	55                   	push   %ebp
   12716:	89 e5                	mov    %esp,%ebp
   12718:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1271b:	83 ec 08             	sub    $0x8,%esp
   1271e:	68 86 4e 01 00       	push   $0x14e86
   12723:	ff 75 08             	push   0x8(%ebp)
   12726:	e8 58 ff ff ff       	call   12683 <do_default_handler>
   1272b:	83 c4 10             	add    $0x10,%esp
}
   1272e:	90                   	nop
   1272f:	c9                   	leave  
   12730:	c3                   	ret    

00012731 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12731:	55                   	push   %ebp
   12732:	89 e5                	mov    %esp,%ebp
   12734:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12737:	83 ec 08             	sub    $0x8,%esp
   1273a:	68 94 4e 01 00       	push   $0x14e94
   1273f:	ff 75 08             	push   0x8(%ebp)
   12742:	e8 3c ff ff ff       	call   12683 <do_default_handler>
   12747:	83 c4 10             	add    $0x10,%esp
}
   1274a:	90                   	nop
   1274b:	c9                   	leave  
   1274c:	c3                   	ret    

0001274d <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   1274d:	55                   	push   %ebp
   1274e:	89 e5                	mov    %esp,%ebp
   12750:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12753:	83 ec 08             	sub    $0x8,%esp
   12756:	68 a9 4e 01 00       	push   $0x14ea9
   1275b:	ff 75 08             	push   0x8(%ebp)
   1275e:	e8 20 ff ff ff       	call   12683 <do_default_handler>
   12763:	83 c4 10             	add    $0x10,%esp
}
   12766:	90                   	nop
   12767:	c9                   	leave  
   12768:	c3                   	ret    

00012769 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12769:	55                   	push   %ebp
   1276a:	89 e5                	mov    %esp,%ebp
   1276c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1276f:	83 ec 08             	sub    $0x8,%esp
   12772:	68 bc 4e 01 00       	push   $0x14ebc
   12777:	ff 75 08             	push   0x8(%ebp)
   1277a:	e8 04 ff ff ff       	call   12683 <do_default_handler>
   1277f:	83 c4 10             	add    $0x10,%esp
}
   12782:	90                   	nop
   12783:	c9                   	leave  
   12784:	c3                   	ret    

00012785 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12785:	55                   	push   %ebp
   12786:	89 e5                	mov    %esp,%ebp
   12788:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   1278b:	83 ec 08             	sub    $0x8,%esp
   1278e:	68 d2 4e 01 00       	push   $0x14ed2
   12793:	ff 75 08             	push   0x8(%ebp)
   12796:	e8 e8 fe ff ff       	call   12683 <do_default_handler>
   1279b:	83 c4 10             	add    $0x10,%esp
}
   1279e:	90                   	nop
   1279f:	c9                   	leave  
   127a0:	c3                   	ret    

000127a1 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   127a1:	55                   	push   %ebp
   127a2:	89 e5                	mov    %esp,%ebp
   127a4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   127a7:	83 ec 08             	sub    $0x8,%esp
   127aa:	68 eb 4e 01 00       	push   $0x14eeb
   127af:	ff 75 08             	push   0x8(%ebp)
   127b2:	e8 cc fe ff ff       	call   12683 <do_default_handler>
   127b7:	83 c4 10             	add    $0x10,%esp
}
   127ba:	90                   	nop
   127bb:	c9                   	leave  
   127bc:	c3                   	ret    

000127bd <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   127bd:	55                   	push   %ebp
   127be:	89 e5                	mov    %esp,%ebp
   127c0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   127c3:	83 ec 08             	sub    $0x8,%esp
   127c6:	68 08 4f 01 00       	push   $0x14f08
   127cb:	ff 75 08             	push   0x8(%ebp)
   127ce:	e8 b0 fe ff ff       	call   12683 <do_default_handler>
   127d3:	83 c4 10             	add    $0x10,%esp
}
   127d6:	90                   	nop
   127d7:	c9                   	leave  
   127d8:	c3                   	ret    

000127d9 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   127d9:	55                   	push   %ebp
   127da:	89 e5                	mov    %esp,%ebp
   127dc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   127df:	83 ec 08             	sub    $0x8,%esp
   127e2:	68 1f 4f 01 00       	push   $0x14f1f
   127e7:	ff 75 08             	push   0x8(%ebp)
   127ea:	e8 94 fe ff ff       	call   12683 <do_default_handler>
   127ef:	83 c4 10             	add    $0x10,%esp
}
   127f2:	90                   	nop
   127f3:	c9                   	leave  
   127f4:	c3                   	ret    

000127f5 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   127f5:	55                   	push   %ebp
   127f6:	89 e5                	mov    %esp,%ebp
   127f8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   127fb:	83 ec 08             	sub    $0x8,%esp
   127fe:	68 35 4f 01 00       	push   $0x14f35
   12803:	ff 75 08             	push   0x8(%ebp)
   12806:	e8 78 fe ff ff       	call   12683 <do_default_handler>
   1280b:	83 c4 10             	add    $0x10,%esp
}
   1280e:	90                   	nop
   1280f:	c9                   	leave  
   12810:	c3                   	ret    

00012811 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12811:	55                   	push   %ebp
   12812:	89 e5                	mov    %esp,%ebp
   12814:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12817:	83 ec 08             	sub    $0x8,%esp
   1281a:	68 53 4f 01 00       	push   $0x14f53
   1281f:	ff 75 08             	push   0x8(%ebp)
   12822:	e8 5c fe ff ff       	call   12683 <do_default_handler>
   12827:	83 c4 10             	add    $0x10,%esp
}
   1282a:	90                   	nop
   1282b:	c9                   	leave  
   1282c:	c3                   	ret    

0001282d <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   1282d:	55                   	push   %ebp
   1282e:	89 e5                	mov    %esp,%ebp
   12830:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12833:	83 ec 0c             	sub    $0xc,%esp
   12836:	68 74 4f 01 00       	push   $0x14f74
   1283b:	e8 d2 1f 00 00       	call   14812 <log_printf>
   12840:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12843:	83 ec 0c             	sub    $0xc,%esp
   12846:	68 98 4f 01 00       	push   $0x14f98
   1284b:	e8 c2 1f 00 00       	call   14812 <log_printf>
   12850:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12853:	8b 45 08             	mov    0x8(%ebp),%eax
   12856:	8b 40 34             	mov    0x34(%eax),%eax
   12859:	83 e0 01             	and    $0x1,%eax
   1285c:	85 c0                	test   %eax,%eax
   1285e:	74 12                	je     12872 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12860:	83 ec 0c             	sub    $0xc,%esp
   12863:	68 c4 4f 01 00       	push   $0x14fc4
   12868:	e8 a5 1f 00 00       	call   14812 <log_printf>
   1286d:	83 c4 10             	add    $0x10,%esp
   12870:	eb 10                	jmp    12882 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   12872:	83 ec 0c             	sub    $0xc,%esp
   12875:	68 40 50 01 00       	push   $0x15040
   1287a:	e8 93 1f 00 00       	call   14812 <log_printf>
   1287f:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   12882:	8b 45 08             	mov    0x8(%ebp),%eax
   12885:	8b 40 34             	mov    0x34(%eax),%eax
   12888:	83 e0 02             	and    $0x2,%eax
   1288b:	85 c0                	test   %eax,%eax
   1288d:	74 12                	je     128a1 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   1288f:	83 ec 0c             	sub    $0xc,%esp
   12892:	68 98 50 01 00       	push   $0x15098
   12897:	e8 76 1f 00 00       	call   14812 <log_printf>
   1289c:	83 c4 10             	add    $0x10,%esp
   1289f:	eb 10                	jmp    128b1 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   128a1:	83 ec 0c             	sub    $0xc,%esp
   128a4:	68 e4 50 01 00       	push   $0x150e4
   128a9:	e8 64 1f 00 00       	call   14812 <log_printf>
   128ae:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   128b1:	8b 45 08             	mov    0x8(%ebp),%eax
   128b4:	8b 40 34             	mov    0x34(%eax),%eax
   128b7:	25 f8 ff 00 00       	and    $0xfff8,%eax
   128bc:	83 ec 08             	sub    $0x8,%esp
   128bf:	50                   	push   %eax
   128c0:	68 10 51 01 00       	push   $0x15110
   128c5:	e8 48 1f 00 00       	call   14812 <log_printf>
   128ca:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   128cd:	83 ec 0c             	sub    $0xc,%esp
   128d0:	ff 75 08             	push   0x8(%ebp)
   128d3:	e8 9c fc ff ff       	call   12574 <print_exception_fram>
   128d8:	83 c4 10             	add    $0x10,%esp
}
   128db:	90                   	nop
   128dc:	c9                   	leave  
   128dd:	c3                   	ret    

000128de <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   128de:	55                   	push   %ebp
   128df:	89 e5                	mov    %esp,%ebp
   128e1:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   128e4:	83 ec 0c             	sub    $0xc,%esp
   128e7:	68 74 4f 01 00       	push   $0x14f74
   128ec:	e8 21 1f 00 00       	call   14812 <log_printf>
   128f1:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   128f4:	83 ec 0c             	sub    $0xc,%esp
   128f7:	68 24 51 01 00       	push   $0x15124
   128fc:	e8 11 1f 00 00       	call   14812 <log_printf>
   12901:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12904:	8b 45 08             	mov    0x8(%ebp),%eax
   12907:	8b 40 34             	mov    0x34(%eax),%eax
   1290a:	83 e0 01             	and    $0x1,%eax
   1290d:	85 c0                	test   %eax,%eax
   1290f:	74 18                	je     12929 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   12911:	e8 32 fc ff ff       	call   12548 <read_cr2>
   12916:	83 ec 08             	sub    $0x8,%esp
   12919:	50                   	push   %eax
   1291a:	68 48 51 01 00       	push   $0x15148
   1291f:	e8 ee 1e 00 00       	call   14812 <log_printf>
   12924:	83 c4 10             	add    $0x10,%esp
   12927:	eb 16                	jmp    1293f <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   12929:	e8 1a fc ff ff       	call   12548 <read_cr2>
   1292e:	83 ec 08             	sub    $0x8,%esp
   12931:	50                   	push   %eax
   12932:	68 6f 51 01 00       	push   $0x1516f
   12937:	e8 d6 1e 00 00       	call   14812 <log_printf>
   1293c:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   1293f:	8b 45 08             	mov    0x8(%ebp),%eax
   12942:	8b 40 34             	mov    0x34(%eax),%eax
   12945:	83 e0 02             	and    $0x2,%eax
   12948:	85 c0                	test   %eax,%eax
   1294a:	74 12                	je     1295e <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   1294c:	83 ec 0c             	sub    $0xc,%esp
   1294f:	68 8c 51 01 00       	push   $0x1518c
   12954:	e8 b9 1e 00 00       	call   14812 <log_printf>
   12959:	83 c4 10             	add    $0x10,%esp
   1295c:	eb 10                	jmp    1296e <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   1295e:	83 ec 0c             	sub    $0xc,%esp
   12961:	68 b8 51 01 00       	push   $0x151b8
   12966:	e8 a7 1e 00 00       	call   14812 <log_printf>
   1296b:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   1296e:	8b 45 08             	mov    0x8(%ebp),%eax
   12971:	8b 40 34             	mov    0x34(%eax),%eax
   12974:	83 e0 04             	and    $0x4,%eax
   12977:	85 c0                	test   %eax,%eax
   12979:	74 12                	je     1298d <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   1297b:	83 ec 0c             	sub    $0xc,%esp
   1297e:	68 e4 51 01 00       	push   $0x151e4
   12983:	e8 8a 1e 00 00       	call   14812 <log_printf>
   12988:	83 c4 10             	add    $0x10,%esp
   1298b:	eb 10                	jmp    1299d <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   1298d:	83 ec 0c             	sub    $0xc,%esp
   12990:	68 0c 52 01 00       	push   $0x1520c
   12995:	e8 78 1e 00 00       	call   14812 <log_printf>
   1299a:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   1299d:	83 ec 0c             	sub    $0xc,%esp
   129a0:	ff 75 08             	push   0x8(%ebp)
   129a3:	e8 cc fb ff ff       	call   12574 <print_exception_fram>
   129a8:	83 c4 10             	add    $0x10,%esp
}
   129ab:	90                   	nop
   129ac:	c9                   	leave  
   129ad:	c3                   	ret    

000129ae <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   129ae:	55                   	push   %ebp
   129af:	89 e5                	mov    %esp,%ebp
   129b1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   129b4:	83 ec 08             	sub    $0x8,%esp
   129b7:	68 37 52 01 00       	push   $0x15237
   129bc:	ff 75 08             	push   0x8(%ebp)
   129bf:	e8 bf fc ff ff       	call   12683 <do_default_handler>
   129c4:	83 c4 10             	add    $0x10,%esp
}
   129c7:	90                   	nop
   129c8:	c9                   	leave  
   129c9:	c3                   	ret    

000129ca <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   129ca:	55                   	push   %ebp
   129cb:	89 e5                	mov    %esp,%ebp
   129cd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   129d0:	83 ec 08             	sub    $0x8,%esp
   129d3:	68 4b 52 01 00       	push   $0x1524b
   129d8:	ff 75 08             	push   0x8(%ebp)
   129db:	e8 a3 fc ff ff       	call   12683 <do_default_handler>
   129e0:	83 c4 10             	add    $0x10,%esp
}
   129e3:	90                   	nop
   129e4:	c9                   	leave  
   129e5:	c3                   	ret    

000129e6 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   129e6:	55                   	push   %ebp
   129e7:	89 e5                	mov    %esp,%ebp
   129e9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   129ec:	83 ec 08             	sub    $0x8,%esp
   129ef:	68 65 52 01 00       	push   $0x15265
   129f4:	ff 75 08             	push   0x8(%ebp)
   129f7:	e8 87 fc ff ff       	call   12683 <do_default_handler>
   129fc:	83 c4 10             	add    $0x10,%esp
}
   129ff:	90                   	nop
   12a00:	c9                   	leave  
   12a01:	c3                   	ret    

00012a02 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12a02:	55                   	push   %ebp
   12a03:	89 e5                	mov    %esp,%ebp
   12a05:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   12a08:	83 ec 08             	sub    $0x8,%esp
   12a0b:	68 7d 52 01 00       	push   $0x1527d
   12a10:	ff 75 08             	push   0x8(%ebp)
   12a13:	e8 6b fc ff ff       	call   12683 <do_default_handler>
   12a18:	83 c4 10             	add    $0x10,%esp
}
   12a1b:	90                   	nop
   12a1c:	c9                   	leave  
   12a1d:	c3                   	ret    

00012a1e <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12a1e:	55                   	push   %ebp
   12a1f:	89 e5                	mov    %esp,%ebp
   12a21:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   12a24:	83 ec 08             	sub    $0x8,%esp
   12a27:	68 95 52 01 00       	push   $0x15295
   12a2c:	ff 75 08             	push   0x8(%ebp)
   12a2f:	e8 4f fc ff ff       	call   12683 <do_default_handler>
   12a34:	83 c4 10             	add    $0x10,%esp
}
   12a37:	90                   	nop
   12a38:	c9                   	leave  
   12a39:	c3                   	ret    

00012a3a <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12a3a:	55                   	push   %ebp
   12a3b:	89 e5                	mov    %esp,%ebp
   12a3d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   12a40:	83 ec 08             	sub    $0x8,%esp
   12a43:	68 b1 52 01 00       	push   $0x152b1
   12a48:	ff 75 08             	push   0x8(%ebp)
   12a4b:	e8 33 fc ff ff       	call   12683 <do_default_handler>
   12a50:	83 c4 10             	add    $0x10,%esp
}
   12a53:	90                   	nop
   12a54:	c9                   	leave  
   12a55:	c3                   	ret    

00012a56 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12a56:	55                   	push   %ebp
   12a57:	89 e5                	mov    %esp,%ebp
   12a59:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12a5c:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12a63:	7f 06                	jg     12a6b <idt_install+0x15>
   12a65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a69:	79 07                	jns    12a72 <idt_install+0x1c>
   12a6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12a70:	eb 25                	jmp    12a97 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12a72:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a75:	8b 55 08             	mov    0x8(%ebp),%edx
   12a78:	c1 e2 03             	shl    $0x3,%edx
   12a7b:	81 c2 00 86 03 00    	add    $0x38600,%edx
   12a81:	68 00 8e 00 00       	push   $0x8e00
   12a86:	50                   	push   %eax
   12a87:	6a 08                	push   $0x8
   12a89:	52                   	push   %edx
   12a8a:	e8 c1 f7 ff ff       	call   12250 <gate_desc_set>
   12a8f:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12a92:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a97:	c9                   	leave  
   12a98:	c3                   	ret    

00012a99 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12a99:	55                   	push   %ebp
   12a9a:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12a9c:	6a 11                	push   $0x11
   12a9e:	6a 20                	push   $0x20
   12aa0:	e8 5a fa ff ff       	call   124ff <outb>
   12aa5:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12aa8:	6a 20                	push   $0x20
   12aaa:	6a 21                	push   $0x21
   12aac:	e8 4e fa ff ff       	call   124ff <outb>
   12ab1:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12ab4:	6a 04                	push   $0x4
   12ab6:	6a 21                	push   $0x21
   12ab8:	e8 42 fa ff ff       	call   124ff <outb>
   12abd:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12ac0:	6a 01                	push   $0x1
   12ac2:	6a 21                	push   $0x21
   12ac4:	e8 36 fa ff ff       	call   124ff <outb>
   12ac9:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12acc:	6a 11                	push   $0x11
   12ace:	68 a0 00 00 00       	push   $0xa0
   12ad3:	e8 27 fa ff ff       	call   124ff <outb>
   12ad8:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12adb:	6a 28                	push   $0x28
   12add:	68 a1 00 00 00       	push   $0xa1
   12ae2:	e8 18 fa ff ff       	call   124ff <outb>
   12ae7:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12aea:	6a 02                	push   $0x2
   12aec:	68 a1 00 00 00       	push   $0xa1
   12af1:	e8 09 fa ff ff       	call   124ff <outb>
   12af6:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12af9:	6a 01                	push   $0x1
   12afb:	68 a1 00 00 00       	push   $0xa1
   12b00:	e8 fa f9 ff ff       	call   124ff <outb>
   12b05:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12b08:	68 fb 00 00 00       	push   $0xfb
   12b0d:	6a 21                	push   $0x21
   12b0f:	e8 eb f9 ff ff       	call   124ff <outb>
   12b14:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12b17:	68 ff 00 00 00       	push   $0xff
   12b1c:	68 a1 00 00 00       	push   $0xa1
   12b21:	e8 d9 f9 ff ff       	call   124ff <outb>
   12b26:	83 c4 08             	add    $0x8,%esp


}
   12b29:	90                   	nop
   12b2a:	c9                   	leave  
   12b2b:	c3                   	ret    

00012b2c <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12b2c:	55                   	push   %ebp
   12b2d:	89 e5                	mov    %esp,%ebp
   12b2f:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12b32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12b39:	eb 17                	jmp    12b52 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12b3b:	83 ec 08             	sub    $0x8,%esp
   12b3e:	68 2a 00 01 00       	push   $0x1002a
   12b43:	ff 75 f4             	push   -0xc(%ebp)
   12b46:	e8 0b ff ff ff       	call   12a56 <idt_install>
   12b4b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12b4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12b52:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12b59:	7e e0                	jle    12b3b <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12b5b:	83 ec 08             	sub    $0x8,%esp
   12b5e:	68 47 00 01 00       	push   $0x10047
   12b63:	6a 00                	push   $0x0
   12b65:	e8 ec fe ff ff       	call   12a56 <idt_install>
   12b6a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12b6d:	83 ec 08             	sub    $0x8,%esp
   12b70:	68 64 00 01 00       	push   $0x10064
   12b75:	6a 01                	push   $0x1
   12b77:	e8 da fe ff ff       	call   12a56 <idt_install>
   12b7c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12b7f:	83 ec 08             	sub    $0x8,%esp
   12b82:	68 81 00 01 00       	push   $0x10081
   12b87:	6a 02                	push   $0x2
   12b89:	e8 c8 fe ff ff       	call   12a56 <idt_install>
   12b8e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12b91:	83 ec 08             	sub    $0x8,%esp
   12b94:	68 9e 00 01 00       	push   $0x1009e
   12b99:	6a 03                	push   $0x3
   12b9b:	e8 b6 fe ff ff       	call   12a56 <idt_install>
   12ba0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12ba3:	83 ec 08             	sub    $0x8,%esp
   12ba6:	68 bb 00 01 00       	push   $0x100bb
   12bab:	6a 04                	push   $0x4
   12bad:	e8 a4 fe ff ff       	call   12a56 <idt_install>
   12bb2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12bb5:	83 ec 08             	sub    $0x8,%esp
   12bb8:	68 d8 00 01 00       	push   $0x100d8
   12bbd:	6a 05                	push   $0x5
   12bbf:	e8 92 fe ff ff       	call   12a56 <idt_install>
   12bc4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12bc7:	83 ec 08             	sub    $0x8,%esp
   12bca:	68 f5 00 01 00       	push   $0x100f5
   12bcf:	6a 06                	push   $0x6
   12bd1:	e8 80 fe ff ff       	call   12a56 <idt_install>
   12bd6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12bd9:	83 ec 08             	sub    $0x8,%esp
   12bdc:	68 12 01 01 00       	push   $0x10112
   12be1:	6a 07                	push   $0x7
   12be3:	e8 6e fe ff ff       	call   12a56 <idt_install>
   12be8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12beb:	83 ec 08             	sub    $0x8,%esp
   12bee:	68 2f 01 01 00       	push   $0x1012f
   12bf3:	6a 08                	push   $0x8
   12bf5:	e8 5c fe ff ff       	call   12a56 <idt_install>
   12bfa:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12bfd:	83 ec 08             	sub    $0x8,%esp
   12c00:	68 4a 01 01 00       	push   $0x1014a
   12c05:	6a 0a                	push   $0xa
   12c07:	e8 4a fe ff ff       	call   12a56 <idt_install>
   12c0c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12c0f:	83 ec 08             	sub    $0x8,%esp
   12c12:	68 65 01 01 00       	push   $0x10165
   12c17:	6a 0b                	push   $0xb
   12c19:	e8 38 fe ff ff       	call   12a56 <idt_install>
   12c1e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12c21:	83 ec 08             	sub    $0x8,%esp
   12c24:	68 80 01 01 00       	push   $0x10180
   12c29:	6a 0c                	push   $0xc
   12c2b:	e8 26 fe ff ff       	call   12a56 <idt_install>
   12c30:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   12c33:	83 ec 08             	sub    $0x8,%esp
   12c36:	68 9b 01 01 00       	push   $0x1019b
   12c3b:	6a 0d                	push   $0xd
   12c3d:	e8 14 fe ff ff       	call   12a56 <idt_install>
   12c42:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12c45:	83 ec 08             	sub    $0x8,%esp
   12c48:	68 b6 01 01 00       	push   $0x101b6
   12c4d:	6a 0e                	push   $0xe
   12c4f:	e8 02 fe ff ff       	call   12a56 <idt_install>
   12c54:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   12c57:	83 ec 08             	sub    $0x8,%esp
   12c5a:	68 d1 01 01 00       	push   $0x101d1
   12c5f:	6a 10                	push   $0x10
   12c61:	e8 f0 fd ff ff       	call   12a56 <idt_install>
   12c66:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   12c69:	83 ec 08             	sub    $0x8,%esp
   12c6c:	68 ee 01 01 00       	push   $0x101ee
   12c71:	6a 11                	push   $0x11
   12c73:	e8 de fd ff ff       	call   12a56 <idt_install>
   12c78:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   12c7b:	83 ec 08             	sub    $0x8,%esp
   12c7e:	68 09 02 01 00       	push   $0x10209
   12c83:	6a 12                	push   $0x12
   12c85:	e8 cc fd ff ff       	call   12a56 <idt_install>
   12c8a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   12c8d:	83 ec 08             	sub    $0x8,%esp
   12c90:	68 26 02 01 00       	push   $0x10226
   12c95:	6a 13                	push   $0x13
   12c97:	e8 ba fd ff ff       	call   12a56 <idt_install>
   12c9c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12c9f:	83 ec 08             	sub    $0x8,%esp
   12ca2:	68 43 02 01 00       	push   $0x10243
   12ca7:	6a 14                	push   $0x14
   12ca9:	e8 a8 fd ff ff       	call   12a56 <idt_install>
   12cae:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12cb1:	83 ec 08             	sub    $0x8,%esp
   12cb4:	68 60 02 01 00       	push   $0x10260
   12cb9:	6a 15                	push   $0x15
   12cbb:	e8 96 fd ff ff       	call   12a56 <idt_install>
   12cc0:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12cc3:	b8 00 86 03 00       	mov    $0x38600,%eax
   12cc8:	83 ec 08             	sub    $0x8,%esp
   12ccb:	68 00 08 00 00       	push   $0x800
   12cd0:	50                   	push   %eax
   12cd1:	e8 4a f8 ff ff       	call   12520 <lidt>
   12cd6:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12cd9:	e8 bb fd ff ff       	call   12a99 <init_pic>
}
   12cde:	90                   	nop
   12cdf:	c9                   	leave  
   12ce0:	c3                   	ret    

00012ce1 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12ce1:	55                   	push   %ebp
   12ce2:	89 e5                	mov    %esp,%ebp
   12ce4:	53                   	push   %ebx
   12ce5:	83 ec 14             	sub    $0x14,%esp
   12ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   12ceb:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12cee:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12cf2:	76 7f                	jbe    12d73 <idt_enable+0x92>
   12cf4:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12cf8:	77 79                	ja     12d73 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12cfa:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12cfe:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12d02:	77 33                	ja     12d37 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12d04:	6a 21                	push   $0x21
   12d06:	e8 d7 f7 ff ff       	call   124e2 <inb>
   12d0b:	83 c4 04             	add    $0x4,%esp
   12d0e:	89 c3                	mov    %eax,%ebx
   12d10:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12d14:	ba 01 00 00 00       	mov    $0x1,%edx
   12d19:	89 c1                	mov    %eax,%ecx
   12d1b:	d3 e2                	shl    %cl,%edx
   12d1d:	89 d0                	mov    %edx,%eax
   12d1f:	f7 d0                	not    %eax
   12d21:	21 d8                	and    %ebx,%eax
   12d23:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12d26:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12d2a:	50                   	push   %eax
   12d2b:	6a 21                	push   $0x21
   12d2d:	e8 cd f7 ff ff       	call   124ff <outb>
   12d32:	83 c4 08             	add    $0x8,%esp
   12d35:	eb 3d                	jmp    12d74 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   12d37:	68 a1 00 00 00       	push   $0xa1
   12d3c:	e8 a1 f7 ff ff       	call   124e2 <inb>
   12d41:	83 c4 04             	add    $0x4,%esp
   12d44:	89 c3                	mov    %eax,%ebx
   12d46:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12d4a:	83 e8 08             	sub    $0x8,%eax
   12d4d:	ba 01 00 00 00       	mov    $0x1,%edx
   12d52:	89 c1                	mov    %eax,%ecx
   12d54:	d3 e2                	shl    %cl,%edx
   12d56:	89 d0                	mov    %edx,%eax
   12d58:	f7 d0                	not    %eax
   12d5a:	21 d8                	and    %ebx,%eax
   12d5c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12d5f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12d63:	50                   	push   %eax
   12d64:	68 a1 00 00 00       	push   $0xa1
   12d69:	e8 91 f7 ff ff       	call   124ff <outb>
   12d6e:	83 c4 08             	add    $0x8,%esp
   12d71:	eb 01                	jmp    12d74 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12d73:	90                   	nop
  }
  
}
   12d74:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12d77:	c9                   	leave  
   12d78:	c3                   	ret    

00012d79 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   12d79:	55                   	push   %ebp
   12d7a:	89 e5                	mov    %esp,%ebp
   12d7c:	53                   	push   %ebx
   12d7d:	83 ec 14             	sub    $0x14,%esp
   12d80:	8b 45 08             	mov    0x8(%ebp),%eax
   12d83:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12d86:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12d8a:	76 7b                	jbe    12e07 <idt_disable+0x8e>
   12d8c:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12d90:	77 75                	ja     12e07 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12d92:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12d96:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12d9a:	77 31                	ja     12dcd <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12d9c:	6a 21                	push   $0x21
   12d9e:	e8 3f f7 ff ff       	call   124e2 <inb>
   12da3:	83 c4 04             	add    $0x4,%esp
   12da6:	89 c3                	mov    %eax,%ebx
   12da8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12dac:	ba 01 00 00 00       	mov    $0x1,%edx
   12db1:	89 c1                	mov    %eax,%ecx
   12db3:	d3 e2                	shl    %cl,%edx
   12db5:	89 d0                	mov    %edx,%eax
   12db7:	09 d8                	or     %ebx,%eax
   12db9:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12dbc:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12dc0:	50                   	push   %eax
   12dc1:	6a 21                	push   $0x21
   12dc3:	e8 37 f7 ff ff       	call   124ff <outb>
   12dc8:	83 c4 08             	add    $0x8,%esp
   12dcb:	eb 3b                	jmp    12e08 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12dcd:	68 a1 00 00 00       	push   $0xa1
   12dd2:	e8 0b f7 ff ff       	call   124e2 <inb>
   12dd7:	83 c4 04             	add    $0x4,%esp
   12dda:	89 c3                	mov    %eax,%ebx
   12ddc:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12de0:	83 e8 08             	sub    $0x8,%eax
   12de3:	ba 01 00 00 00       	mov    $0x1,%edx
   12de8:	89 c1                	mov    %eax,%ecx
   12dea:	d3 e2                	shl    %cl,%edx
   12dec:	89 d0                	mov    %edx,%eax
   12dee:	09 d8                	or     %ebx,%eax
   12df0:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12df3:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12df7:	50                   	push   %eax
   12df8:	68 a1 00 00 00       	push   $0xa1
   12dfd:	e8 fd f6 ff ff       	call   124ff <outb>
   12e02:	83 c4 08             	add    $0x8,%esp
   12e05:	eb 01                	jmp    12e08 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12e07:	90                   	nop
  }
  
}
   12e08:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12e0b:	c9                   	leave  
   12e0c:	c3                   	ret    

00012e0d <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   12e0d:	55                   	push   %ebp
   12e0e:	89 e5                	mov    %esp,%ebp
  cli();
   12e10:	e8 b8 f6 ff ff       	call   124cd <cli>
}
   12e15:	90                   	nop
   12e16:	5d                   	pop    %ebp
   12e17:	c3                   	ret    

00012e18 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   12e18:	55                   	push   %ebp
   12e19:	89 e5                	mov    %esp,%ebp
  sti();
   12e1b:	e8 b4 f6 ff ff       	call   124d4 <sti>
}
   12e20:	90                   	nop
   12e21:	5d                   	pop    %ebp
   12e22:	c3                   	ret    

00012e23 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   12e23:	55                   	push   %ebp
   12e24:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   12e26:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   12e2a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e2e:	78 29                	js     12e59 <pic_send_eoi+0x36>
   12e30:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   12e34:	7f 23                	jg     12e59 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   12e36:	6a 20                	push   $0x20
   12e38:	6a 20                	push   $0x20
   12e3a:	e8 c0 f6 ff ff       	call   124ff <outb>
   12e3f:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   12e42:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12e46:	7e 12                	jle    12e5a <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   12e48:	6a 20                	push   $0x20
   12e4a:	68 a0 00 00 00       	push   $0xa0
   12e4f:	e8 ab f6 ff ff       	call   124ff <outb>
   12e54:	83 c4 08             	add    $0x8,%esp
   12e57:	eb 01                	jmp    12e5a <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   12e59:	90                   	nop
  }

}
   12e5a:	c9                   	leave  
   12e5b:	c3                   	ret    

00012e5c <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   12e5c:	55                   	push   %ebp
   12e5d:	89 e5                	mov    %esp,%ebp
   12e5f:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   12e62:	e8 f2 f6 ff ff       	call   12559 <read_eflags>
   12e67:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   12e6a:	e8 9e ff ff ff       	call   12e0d <idt_disable_global>
  return state;;
   12e6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12e72:	c9                   	leave  
   12e73:	c3                   	ret    

00012e74 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   12e74:	55                   	push   %ebp
   12e75:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   12e77:	ff 75 08             	push   0x8(%ebp)
   12e7a:	e8 ea f6 ff ff       	call   12569 <write_eflags>
   12e7f:	83 c4 04             	add    $0x4,%esp
}
   12e82:	90                   	nop
   12e83:	c9                   	leave  
   12e84:	c3                   	ret    

00012e85 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   12e85:	55                   	push   %ebp
   12e86:	89 e5                	mov    %esp,%ebp
   12e88:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   12e8b:	83 ec 08             	sub    $0x8,%esp
   12e8e:	ff 75 0c             	push   0xc(%ebp)
   12e91:	ff 75 08             	push   0x8(%ebp)
   12e94:	e8 79 19 00 00       	call   14812 <log_printf>
   12e99:	83 c4 10             	add    $0x10,%esp
}
   12e9c:	90                   	nop
   12e9d:	c9                   	leave  
   12e9e:	c3                   	ret    

00012e9f <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   12e9f:	55                   	push   %ebp
   12ea0:	89 e5                	mov    %esp,%ebp
   12ea2:	53                   	push   %ebx
   12ea3:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12ea6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea9:	8b 40 3c             	mov    0x3c(%eax),%eax
   12eac:	83 f8 39             	cmp    $0x39,%eax
   12eaf:	77 48                	ja     12ef9 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   12eb1:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb4:	8b 40 3c             	mov    0x3c(%eax),%eax
   12eb7:	8b 04 85 e0 52 01 00 	mov    0x152e0(,%eax,4),%eax
   12ebe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   12ec1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12ec5:	74 32                	je     12ef9 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12ec7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eca:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12ecd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed0:	8b 48 48             	mov    0x48(%eax),%ecx
   12ed3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed6:	8b 50 44             	mov    0x44(%eax),%edx
   12ed9:	8b 45 08             	mov    0x8(%ebp),%eax
   12edc:	8b 40 40             	mov    0x40(%eax),%eax
   12edf:	53                   	push   %ebx
   12ee0:	51                   	push   %ecx
   12ee1:	52                   	push   %edx
   12ee2:	50                   	push   %eax
   12ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ee6:	ff d0                	call   *%eax
   12ee8:	83 c4 10             	add    $0x10,%esp
   12eeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   12eee:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12ef1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef4:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   12ef7:	eb 30                	jmp    12f29 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   12ef9:	e8 83 e8 ff ff       	call   11781 <task_current>
   12efe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   12f01:	8b 45 08             	mov    0x8(%ebp),%eax
   12f04:	8b 40 3c             	mov    0x3c(%eax),%eax
   12f07:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12f0a:	83 c2 20             	add    $0x20,%edx
   12f0d:	83 ec 04             	sub    $0x4,%esp
   12f10:	50                   	push   %eax
   12f11:	52                   	push   %edx
   12f12:	68 c8 53 01 00       	push   $0x153c8
   12f17:	e8 f6 18 00 00       	call   14812 <log_printf>
   12f1c:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   12f1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f22:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   12f29:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12f2c:	c9                   	leave  
   12f2d:	c3                   	ret    

00012f2e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12f2e:	55                   	push   %ebp
   12f2f:	89 e5                	mov    %esp,%ebp
   12f31:	83 ec 08             	sub    $0x8,%esp
   12f34:	8b 45 08             	mov    0x8(%ebp),%eax
   12f37:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f3a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12f3e:	89 d0                	mov    %edx,%eax
   12f40:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12f43:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12f47:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12f4b:	ee                   	out    %al,(%dx)
}
   12f4c:	90                   	nop
   12f4d:	c9                   	leave  
   12f4e:	c3                   	ret    

00012f4f <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   12f4f:	55                   	push   %ebp
   12f50:	89 e5                	mov    %esp,%ebp
   12f52:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12f55:	a1 00 8e 03 00       	mov    0x38e00,%eax
   12f5a:	83 c0 01             	add    $0x1,%eax
   12f5d:	a3 00 8e 03 00       	mov    %eax,0x38e00

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   12f62:	83 ec 0c             	sub    $0xc,%esp
   12f65:	6a 20                	push   $0x20
   12f67:	e8 b7 fe ff ff       	call   12e23 <pic_send_eoi>
   12f6c:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   12f6f:	e8 7f e8 ff ff       	call   117f3 <task_slice_end>
}
   12f74:	90                   	nop
   12f75:	c9                   	leave  
   12f76:	c3                   	ret    

00012f77 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   12f77:	55                   	push   %ebp
   12f78:	89 e5                	mov    %esp,%ebp
   12f7a:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   12f7d:	6a 36                	push   $0x36
   12f7f:	6a 43                	push   $0x43
   12f81:	e8 a8 ff ff ff       	call   12f2e <outb>
   12f86:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   12f89:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   12f8f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12f93:	0f b6 c0             	movzbl %al,%eax
   12f96:	50                   	push   %eax
   12f97:	6a 40                	push   $0x40
   12f99:	e8 90 ff ff ff       	call   12f2e <outb>
   12f9e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   12fa1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12fa5:	66 c1 e8 08          	shr    $0x8,%ax
   12fa9:	0f b6 c0             	movzbl %al,%eax
   12fac:	50                   	push   %eax
   12fad:	6a 40                	push   $0x40
   12faf:	e8 7a ff ff ff       	call   12f2e <outb>
   12fb4:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   12fb7:	83 ec 08             	sub    $0x8,%esp
   12fba:	68 7b 02 01 00       	push   $0x1027b
   12fbf:	6a 20                	push   $0x20
   12fc1:	e8 90 fa ff ff       	call   12a56 <idt_install>
   12fc6:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   12fc9:	83 ec 0c             	sub    $0xc,%esp
   12fcc:	6a 20                	push   $0x20
   12fce:	e8 0e fd ff ff       	call   12ce1 <idt_enable>
   12fd3:	83 c4 10             	add    $0x10,%esp

}
   12fd6:	90                   	nop
   12fd7:	c9                   	leave  
   12fd8:	c3                   	ret    

00012fd9 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   12fd9:	55                   	push   %ebp
   12fda:	89 e5                	mov    %esp,%ebp
   12fdc:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12fdf:	c7 05 00 8e 03 00 00 	movl   $0x0,0x38e00
   12fe6:	00 00 00 
    init_pit();
   12fe9:	e8 89 ff ff ff       	call   12f77 <init_pit>
   12fee:	90                   	nop
   12fef:	c9                   	leave  
   12ff0:	c3                   	ret    

00012ff1 <inb>:
static inline uint8_t inb(uint16_t port) {
   12ff1:	55                   	push   %ebp
   12ff2:	89 e5                	mov    %esp,%ebp
   12ff4:	83 ec 14             	sub    $0x14,%esp
   12ff7:	8b 45 08             	mov    0x8(%ebp),%eax
   12ffa:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12ffe:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13002:	89 c2                	mov    %eax,%edx
   13004:	ec                   	in     (%dx),%al
   13005:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13008:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1300c:	c9                   	leave  
   1300d:	c3                   	ret    

0001300e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1300e:	55                   	push   %ebp
   1300f:	89 e5                	mov    %esp,%ebp
   13011:	83 ec 08             	sub    $0x8,%esp
   13014:	8b 45 08             	mov    0x8(%ebp),%eax
   13017:	8b 55 0c             	mov    0xc(%ebp),%edx
   1301a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1301e:	89 d0                	mov    %edx,%eax
   13020:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13023:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13027:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1302b:	ee                   	out    %al,(%dx)
}
   1302c:	90                   	nop
   1302d:	c9                   	leave  
   1302e:	c3                   	ret    

0001302f <inw>:
static inline uint16_t inw(uint16_t port) {
   1302f:	55                   	push   %ebp
   13030:	89 e5                	mov    %esp,%ebp
   13032:	83 ec 14             	sub    $0x14,%esp
   13035:	8b 45 08             	mov    0x8(%ebp),%eax
   13038:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   1303c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13040:	89 c2                	mov    %eax,%edx
   13042:	66 ed                	in     (%dx),%ax
   13044:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   13048:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   1304c:	c9                   	leave  
   1304d:	c3                   	ret    

0001304e <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   1304e:	55                   	push   %ebp
   1304f:	89 e5                	mov    %esp,%ebp
   13051:	53                   	push   %ebx
   13052:	83 ec 14             	sub    $0x14,%esp
   13055:	8b 45 0c             	mov    0xc(%ebp),%eax
   13058:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   1305c:	68 e0 00 00 00       	push   $0xe0
   13061:	68 f6 01 00 00       	push   $0x1f6
   13066:	e8 a3 ff ff ff       	call   1300e <outb>
   1306b:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   1306e:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   13072:	66 c1 e8 08          	shr    $0x8,%ax
   13076:	0f b6 c0             	movzbl %al,%eax
   13079:	50                   	push   %eax
   1307a:	68 f2 01 00 00       	push   $0x1f2
   1307f:	e8 8a ff ff ff       	call   1300e <outb>
   13084:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   13087:	8b 45 08             	mov    0x8(%ebp),%eax
   1308a:	c1 e8 18             	shr    $0x18,%eax
   1308d:	0f b6 c0             	movzbl %al,%eax
   13090:	50                   	push   %eax
   13091:	68 f3 01 00 00       	push   $0x1f3
   13096:	e8 73 ff ff ff       	call   1300e <outb>
   1309b:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   1309e:	6a 00                	push   $0x0
   130a0:	68 f4 01 00 00       	push   $0x1f4
   130a5:	e8 64 ff ff ff       	call   1300e <outb>
   130aa:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   130ad:	6a 00                	push   $0x0
   130af:	68 f5 01 00 00       	push   $0x1f5
   130b4:	e8 55 ff ff ff       	call   1300e <outb>
   130b9:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   130bc:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   130c0:	0f b6 c0             	movzbl %al,%eax
   130c3:	50                   	push   %eax
   130c4:	68 f2 01 00 00       	push   $0x1f2
   130c9:	e8 40 ff ff ff       	call   1300e <outb>
   130ce:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   130d1:	8b 45 08             	mov    0x8(%ebp),%eax
   130d4:	0f b6 c0             	movzbl %al,%eax
   130d7:	50                   	push   %eax
   130d8:	68 f3 01 00 00       	push   $0x1f3
   130dd:	e8 2c ff ff ff       	call   1300e <outb>
   130e2:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   130e5:	8b 45 08             	mov    0x8(%ebp),%eax
   130e8:	c1 e8 08             	shr    $0x8,%eax
   130eb:	0f b6 c0             	movzbl %al,%eax
   130ee:	50                   	push   %eax
   130ef:	68 f4 01 00 00       	push   $0x1f4
   130f4:	e8 15 ff ff ff       	call   1300e <outb>
   130f9:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   130fc:	8b 45 08             	mov    0x8(%ebp),%eax
   130ff:	c1 e8 10             	shr    $0x10,%eax
   13102:	0f b6 c0             	movzbl %al,%eax
   13105:	50                   	push   %eax
   13106:	68 f5 01 00 00       	push   $0x1f5
   1310b:	e8 fe fe ff ff       	call   1300e <outb>
   13110:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   13113:	6a 24                	push   $0x24
   13115:	68 f7 01 00 00       	push   $0x1f7
   1311a:	e8 ef fe ff ff       	call   1300e <outb>
   1311f:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   13122:	8b 45 10             	mov    0x10(%ebp),%eax
   13125:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   13128:	eb 4a                	jmp    13174 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   1312a:	90                   	nop
   1312b:	68 f7 01 00 00       	push   $0x1f7
   13130:	e8 bc fe ff ff       	call   12ff1 <inb>
   13135:	83 c4 04             	add    $0x4,%esp
   13138:	0f b6 c0             	movzbl %al,%eax
   1313b:	25 88 00 00 00       	and    $0x88,%eax
   13140:	83 f8 08             	cmp    $0x8,%eax
   13143:	75 e6                	jne    1312b <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   13145:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1314c:	eb 1d                	jmp    1316b <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   1314e:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   13151:	8d 43 02             	lea    0x2(%ebx),%eax
   13154:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13157:	68 f0 01 00 00       	push   $0x1f0
   1315c:	e8 ce fe ff ff       	call   1302f <inw>
   13161:	83 c4 04             	add    $0x4,%esp
   13164:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   13167:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1316b:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   13172:	7e da                	jle    1314e <read_disk+0x100>
    while (sector_count--) {
   13174:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   13178:	8d 50 ff             	lea    -0x1(%eax),%edx
   1317b:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   1317f:	66 85 c0             	test   %ax,%ax
   13182:	75 a6                	jne    1312a <read_disk+0xdc>
        }
        
    }
    
}
   13184:	90                   	nop
   13185:	90                   	nop
   13186:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13189:	c9                   	leave  
   1318a:	c3                   	ret    

0001318b <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   1318b:	55                   	push   %ebp
   1318c:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/') {  //打开外部程序
   1318e:	8b 45 08             	mov    0x8(%ebp),%eax
   13191:	0f b6 00             	movzbl (%eax),%eax
   13194:	3c 2f                	cmp    $0x2f,%al
   13196:	75 25                	jne    131bd <sys_open+0x32>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   13198:	68 00 00 80 07       	push   $0x7800000
   1319d:	6a 50                	push   $0x50
   1319f:	68 88 13 00 00       	push   $0x1388
   131a4:	e8 a5 fe ff ff       	call   1304e <read_disk>
   131a9:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   131ac:	c7 05 04 8e 03 00 00 	movl   $0x7800000,0x38e04
   131b3:	00 80 07 
        return TEMP_FILE_ID;
   131b6:	b8 64 00 00 00       	mov    $0x64,%eax
   131bb:	eb 05                	jmp    131c2 <sys_open+0x37>
    }

    return -1;
   131bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   131c2:	c9                   	leave  
   131c3:	c3                   	ret    

000131c4 <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   131c4:	55                   	push   %ebp
   131c5:	89 e5                	mov    %esp,%ebp
   131c7:	83 ec 08             	sub    $0x8,%esp
    if (file == TEMP_FILE_ID) {
   131ca:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   131ce:	75 2c                	jne    131fc <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   131d0:	a1 04 8e 03 00       	mov    0x38e04,%eax
   131d5:	83 ec 04             	sub    $0x4,%esp
   131d8:	ff 75 10             	push   0x10(%ebp)
   131db:	50                   	push   %eax
   131dc:	ff 75 0c             	push   0xc(%ebp)
   131df:	e8 9f 0d 00 00       	call   13f83 <kernel_memcpy>
   131e4:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   131e7:	8b 15 04 8e 03 00    	mov    0x38e04,%edx
   131ed:	8b 45 10             	mov    0x10(%ebp),%eax
   131f0:	01 d0                	add    %edx,%eax
   131f2:	a3 04 8e 03 00       	mov    %eax,0x38e04
        return len;
   131f7:	8b 45 10             	mov    0x10(%ebp),%eax
   131fa:	eb 05                	jmp    13201 <sys_read+0x3d>
    }

    return -1;
   131fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13201:	c9                   	leave  
   13202:	c3                   	ret    

00013203 <sys_write>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int file, char *ptr, int len) {
   13203:	55                   	push   %ebp
   13204:	89 e5                	mov    %esp,%ebp

}
   13206:	90                   	nop
   13207:	5d                   	pop    %ebp
   13208:	c3                   	ret    

00013209 <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   13209:	55                   	push   %ebp
   1320a:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   1320c:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   13210:	75 14                	jne    13226 <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   13212:	8b 45 0c             	mov    0xc(%ebp),%eax
   13215:	05 00 00 80 07       	add    $0x7800000,%eax
   1321a:	a3 04 8e 03 00       	mov    %eax,0x38e04
        return 0;
   1321f:	b8 00 00 00 00       	mov    $0x0,%eax
   13224:	eb 05                	jmp    1322b <sys_lseek+0x22>
    }

    return -1;
   13226:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   1322b:	5d                   	pop    %ebp
   1322c:	c3                   	ret    

0001322d <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   1322d:	55                   	push   %ebp
   1322e:	89 e5                	mov    %esp,%ebp
    return 0;
   13230:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13235:	5d                   	pop    %ebp
   13236:	c3                   	ret    

00013237 <sys_isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int sys_isatty(int file) {
   13237:	55                   	push   %ebp
   13238:	89 e5                	mov    %esp,%ebp
    return -1;
   1323a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1323f:	5d                   	pop    %ebp
   13240:	c3                   	ret    

00013241 <sys_fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int sys_fstat(int file, struct stat *st) {
   13241:	55                   	push   %ebp
   13242:	89 e5                	mov    %esp,%ebp
    return -1;
   13244:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13249:	5d                   	pop    %ebp
   1324a:	c3                   	ret    

0001324b <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1324b:	55                   	push   %ebp
   1324c:	89 e5                	mov    %esp,%ebp
   1324e:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   13251:	8b 45 08             	mov    0x8(%ebp),%eax
   13254:	8b 40 50             	mov    0x50(%eax),%eax
   13257:	85 c0                	test   %eax,%eax
   13259:	75 19                	jne    13274 <kernel_init+0x29>
   1325b:	68 ec 53 01 00       	push   $0x153ec
   13260:	68 88 54 01 00       	push   $0x15488
   13265:	6a 22                	push   $0x22
   13267:	68 10 54 01 00       	push   $0x15410
   1326c:	e8 5f 08 00 00       	call   13ad0 <pannic>
   13271:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   13274:	e8 11 15 00 00       	call   1478a <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   13279:	83 ec 0c             	sub    $0xc,%esp
   1327c:	ff 75 08             	push   0x8(%ebp)
   1327f:	e8 b8 d9 ff ff       	call   10c3c <memory_init>
   13284:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   13287:	e8 f2 f0 ff ff       	call   1237e <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   1328c:	e8 9b f8 ff ff       	call   12b2c <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   13291:	e8 43 fd ff ff       	call   12fd9 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   13296:	e8 35 e2 ff ff       	call   114d0 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1329b:	90                   	nop
   1329c:	c9                   	leave  
   1329d:	c3                   	ret    

0001329e <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   1329e:	55                   	push   %ebp
   1329f:	89 e5                	mov    %esp,%ebp
   132a1:	56                   	push   %esi
   132a2:	53                   	push   %ebx
   132a3:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   132a6:	e8 d6 e4 ff ff       	call   11781 <task_current>
   132ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   132ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   132b2:	75 19                	jne    132cd <move_to_first_task+0x2f>
   132b4:	68 45 54 01 00       	push   $0x15445
   132b9:	68 94 54 01 00       	push   $0x15494
   132be:	6a 42                	push   $0x42
   132c0:	68 10 54 01 00       	push   $0x15410
   132c5:	e8 06 08 00 00       	call   13ad0 <pannic>
   132ca:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   132cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132d0:	83 c0 58             	add    $0x58,%eax
   132d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   132d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   132d9:	8b 40 50             	mov    0x50(%eax),%eax
   132dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
   132df:	8b 52 38             	mov    0x38(%edx),%edx
   132e2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   132e5:	8b 49 24             	mov    0x24(%ecx),%ecx
   132e8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   132eb:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   132ee:	8b 75 f0             	mov    -0x10(%ebp),%esi
   132f1:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   132f4:	50                   	push   %eax
   132f5:	52                   	push   %edx
   132f6:	51                   	push   %ecx
   132f7:	53                   	push   %ebx
   132f8:	56                   	push   %esi
   132f9:	cf                   	iret   

        
    );
}
   132fa:	90                   	nop
   132fb:	8d 65 f8             	lea    -0x8(%ebp),%esp
   132fe:	5b                   	pop    %ebx
   132ff:	5e                   	pop    %esi
   13300:	5d                   	pop    %ebp
   13301:	c3                   	ret    

00013302 <init_main>:


void init_main(void) {
   13302:	55                   	push   %ebp
   13303:	89 e5                	mov    %esp,%ebp
   13305:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   13308:	83 ec 0c             	sub    $0xc,%esp
   1330b:	68 4f 54 01 00       	push   $0x1544f
   13310:	e8 fd 14 00 00       	call   14812 <log_printf>
   13315:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   13318:	83 ec 04             	sub    $0x4,%esp
   1331b:	68 67 54 01 00       	push   $0x15467
   13320:	68 6d 54 01 00       	push   $0x1546d
   13325:	68 72 54 01 00       	push   $0x15472
   1332a:	e8 e3 14 00 00       	call   14812 <log_printf>
   1332f:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   13332:	e8 76 e2 ff ff       	call   115ad <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   13337:	e8 62 ff ff ff       	call   1329e <move_to_first_task>
   1333c:	90                   	nop
   1333d:	c9                   	leave  
   1333e:	c3                   	ret    

0001333f <list_init>:
static inline void list_init(list_t *list) {
   1333f:	55                   	push   %ebp
   13340:	89 e5                	mov    %esp,%ebp
   13342:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13345:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13349:	75 19                	jne    13364 <list_init+0x25>
   1334b:	68 a8 54 01 00       	push   $0x154a8
   13350:	68 54 55 01 00       	push   $0x15554
   13355:	6a 31                	push   $0x31
   13357:	68 bc 54 01 00       	push   $0x154bc
   1335c:	e8 6f 07 00 00       	call   13ad0 <pannic>
   13361:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   13364:	8b 45 08             	mov    0x8(%ebp),%eax
   13367:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1336e:	8b 45 08             	mov    0x8(%ebp),%eax
   13371:	8b 50 04             	mov    0x4(%eax),%edx
   13374:	8b 45 08             	mov    0x8(%ebp),%eax
   13377:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   13379:	8b 45 08             	mov    0x8(%ebp),%eax
   1337c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13383:	90                   	nop
   13384:	c9                   	leave  
   13385:	c3                   	ret    

00013386 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13386:	55                   	push   %ebp
   13387:	89 e5                	mov    %esp,%ebp
   13389:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1338c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13390:	75 19                	jne    133ab <list_is_empty+0x25>
   13392:	68 a8 54 01 00       	push   $0x154a8
   13397:	68 60 55 01 00       	push   $0x15560
   1339c:	6a 38                	push   $0x38
   1339e:	68 bc 54 01 00       	push   $0x154bc
   133a3:	e8 28 07 00 00       	call   13ad0 <pannic>
   133a8:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   133ab:	8b 45 08             	mov    0x8(%ebp),%eax
   133ae:	8b 40 08             	mov    0x8(%eax),%eax
   133b1:	85 c0                	test   %eax,%eax
   133b3:	0f 94 c0             	sete   %al
   133b6:	0f b6 c0             	movzbl %al,%eax
}
   133b9:	c9                   	leave  
   133ba:	c3                   	ret    

000133bb <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   133bb:	55                   	push   %ebp
   133bc:	89 e5                	mov    %esp,%ebp
   133be:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   133c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   133c5:	75 19                	jne    133e0 <mutex_init+0x25>
   133c7:	68 fa 54 01 00       	push   $0x154fa
   133cc:	68 48 55 01 00       	push   $0x15548
   133d1:	6a 15                	push   $0x15
   133d3:	68 10 55 01 00       	push   $0x15510
   133d8:	e8 f3 06 00 00       	call   13ad0 <pannic>
   133dd:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   133e0:	8b 45 08             	mov    0x8(%ebp),%eax
   133e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   133ea:	8b 45 08             	mov    0x8(%ebp),%eax
   133ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   133f3:	8b 45 08             	mov    0x8(%ebp),%eax
   133f6:	83 c0 08             	add    $0x8,%eax
   133f9:	83 ec 0c             	sub    $0xc,%esp
   133fc:	50                   	push   %eax
   133fd:	e8 3d ff ff ff       	call   1333f <list_init>
   13402:	83 c4 10             	add    $0x10,%esp
}
   13405:	90                   	nop
   13406:	c9                   	leave  
   13407:	c3                   	ret    

00013408 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   13408:	55                   	push   %ebp
   13409:	89 e5                	mov    %esp,%ebp
   1340b:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1340e:	e8 49 fa ff ff       	call   12e5c <idt_enter_protection>
   13413:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   13416:	e8 66 e3 ff ff       	call   11781 <task_current>
   1341b:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   1341e:	8b 45 08             	mov    0x8(%ebp),%eax
   13421:	8b 40 04             	mov    0x4(%eax),%eax
   13424:	85 c0                	test   %eax,%eax
   13426:	75 19                	jne    13441 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   13428:	8b 45 08             	mov    0x8(%ebp),%eax
   1342b:	8b 40 04             	mov    0x4(%eax),%eax
   1342e:	8d 50 01             	lea    0x1(%eax),%edx
   13431:	8b 45 08             	mov    0x8(%ebp),%eax
   13434:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   13437:	8b 45 08             	mov    0x8(%ebp),%eax
   1343a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1343d:	89 10                	mov    %edx,(%eax)
   1343f:	eb 47                	jmp    13488 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   13441:	8b 45 08             	mov    0x8(%ebp),%eax
   13444:	8b 00                	mov    (%eax),%eax
   13446:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   13449:	75 11                	jne    1345c <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   1344b:	8b 45 08             	mov    0x8(%ebp),%eax
   1344e:	8b 40 04             	mov    0x4(%eax),%eax
   13451:	8d 50 01             	lea    0x1(%eax),%edx
   13454:	8b 45 08             	mov    0x8(%ebp),%eax
   13457:	89 50 04             	mov    %edx,0x4(%eax)
   1345a:	eb 2c                	jmp    13488 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   1345c:	83 ec 0c             	sub    $0xc,%esp
   1345f:	ff 75 f0             	push   -0x10(%ebp)
   13462:	e8 a1 e2 ff ff       	call   11708 <task_set_unready>
   13467:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   1346a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1346d:	8d 50 50             	lea    0x50(%eax),%edx
   13470:	8b 45 08             	mov    0x8(%ebp),%eax
   13473:	83 c0 08             	add    $0x8,%eax
   13476:	83 ec 08             	sub    $0x8,%esp
   13479:	52                   	push   %edx
   1347a:	50                   	push   %eax
   1347b:	e8 0e 10 00 00       	call   1448e <list_insert_last>
   13480:	83 c4 10             	add    $0x10,%esp
    task_switch();
   13483:	e8 03 e3 ff ff       	call   1178b <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   13488:	83 ec 0c             	sub    $0xc,%esp
   1348b:	ff 75 f4             	push   -0xc(%ebp)
   1348e:	e8 e1 f9 ff ff       	call   12e74 <idt_leave_protection>
   13493:	83 c4 10             	add    $0x10,%esp
}
   13496:	90                   	nop
   13497:	c9                   	leave  
   13498:	c3                   	ret    

00013499 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   13499:	55                   	push   %ebp
   1349a:	89 e5                	mov    %esp,%ebp
   1349c:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1349f:	e8 b8 f9 ff ff       	call   12e5c <idt_enter_protection>
   134a4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   134a7:	e8 d5 e2 ff ff       	call   11781 <task_current>
   134ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   134af:	8b 45 08             	mov    0x8(%ebp),%eax
   134b2:	8b 00                	mov    (%eax),%eax
   134b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   134b7:	0f 85 83 00 00 00    	jne    13540 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   134bd:	8b 45 08             	mov    0x8(%ebp),%eax
   134c0:	8b 40 04             	mov    0x4(%eax),%eax
   134c3:	8d 50 ff             	lea    -0x1(%eax),%edx
   134c6:	8b 45 08             	mov    0x8(%ebp),%eax
   134c9:	89 50 04             	mov    %edx,0x4(%eax)
   134cc:	8b 45 08             	mov    0x8(%ebp),%eax
   134cf:	8b 40 04             	mov    0x4(%eax),%eax
   134d2:	85 c0                	test   %eax,%eax
   134d4:	75 6a                	jne    13540 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   134d6:	8b 45 08             	mov    0x8(%ebp),%eax
   134d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   134df:	8b 45 08             	mov    0x8(%ebp),%eax
   134e2:	83 c0 08             	add    $0x8,%eax
   134e5:	83 ec 0c             	sub    $0xc,%esp
   134e8:	50                   	push   %eax
   134e9:	e8 98 fe ff ff       	call   13386 <list_is_empty>
   134ee:	83 c4 10             	add    $0x10,%esp
   134f1:	85 c0                	test   %eax,%eax
   134f3:	75 4b                	jne    13540 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   134f5:	8b 45 08             	mov    0x8(%ebp),%eax
   134f8:	83 c0 08             	add    $0x8,%eax
   134fb:	83 ec 0c             	sub    $0xc,%esp
   134fe:	50                   	push   %eax
   134ff:	e8 19 10 00 00       	call   1451d <list_remove_first>
   13504:	83 c4 10             	add    $0x10,%esp
   13507:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   1350a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1350e:	74 08                	je     13518 <mutex_unlock+0x7f>
   13510:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13513:	83 e8 50             	sub    $0x50,%eax
   13516:	eb 05                	jmp    1351d <mutex_unlock+0x84>
   13518:	b8 00 00 00 00       	mov    $0x0,%eax
   1351d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   13520:	8b 45 08             	mov    0x8(%ebp),%eax
   13523:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   1352a:	8b 45 08             	mov    0x8(%ebp),%eax
   1352d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   13530:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   13532:	83 ec 0c             	sub    $0xc,%esp
   13535:	ff 75 e8             	push   -0x18(%ebp)
   13538:	e8 80 e1 ff ff       	call   116bd <task_set_ready>
   1353d:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   13540:	83 ec 0c             	sub    $0xc,%esp
   13543:	ff 75 f4             	push   -0xc(%ebp)
   13546:	e8 29 f9 ff ff       	call   12e74 <idt_leave_protection>
   1354b:	83 c4 10             	add    $0x10,%esp
}
   1354e:	90                   	nop
   1354f:	c9                   	leave  
   13550:	c3                   	ret    

00013551 <list_init>:
static inline void list_init(list_t *list) {
   13551:	55                   	push   %ebp
   13552:	89 e5                	mov    %esp,%ebp
   13554:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13557:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1355b:	75 19                	jne    13576 <list_init+0x25>
   1355d:	68 70 55 01 00       	push   $0x15570
   13562:	68 14 56 01 00       	push   $0x15614
   13567:	6a 31                	push   $0x31
   13569:	68 84 55 01 00       	push   $0x15584
   1356e:	e8 5d 05 00 00       	call   13ad0 <pannic>
   13573:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   13576:	8b 45 08             	mov    0x8(%ebp),%eax
   13579:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13580:	8b 45 08             	mov    0x8(%ebp),%eax
   13583:	8b 50 04             	mov    0x4(%eax),%edx
   13586:	8b 45 08             	mov    0x8(%ebp),%eax
   13589:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1358b:	8b 45 08             	mov    0x8(%ebp),%eax
   1358e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13595:	90                   	nop
   13596:	c9                   	leave  
   13597:	c3                   	ret    

00013598 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13598:	55                   	push   %ebp
   13599:	89 e5                	mov    %esp,%ebp
   1359b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1359e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135a2:	75 19                	jne    135bd <list_is_empty+0x25>
   135a4:	68 70 55 01 00       	push   $0x15570
   135a9:	68 20 56 01 00       	push   $0x15620
   135ae:	6a 38                	push   $0x38
   135b0:	68 84 55 01 00       	push   $0x15584
   135b5:	e8 16 05 00 00       	call   13ad0 <pannic>
   135ba:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   135bd:	8b 45 08             	mov    0x8(%ebp),%eax
   135c0:	8b 40 08             	mov    0x8(%eax),%eax
   135c3:	85 c0                	test   %eax,%eax
   135c5:	0f 94 c0             	sete   %al
   135c8:	0f b6 c0             	movzbl %al,%eax
}
   135cb:	c9                   	leave  
   135cc:	c3                   	ret    

000135cd <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   135cd:	55                   	push   %ebp
   135ce:	89 e5                	mov    %esp,%ebp
   135d0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   135d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135d7:	75 19                	jne    135f2 <sem_init+0x25>
   135d9:	68 c2 55 01 00       	push   $0x155c2
   135de:	68 08 56 01 00       	push   $0x15608
   135e3:	6a 18                	push   $0x18
   135e5:	68 d4 55 01 00       	push   $0x155d4
   135ea:	e8 e1 04 00 00       	call   13ad0 <pannic>
   135ef:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   135f2:	8b 45 08             	mov    0x8(%ebp),%eax
   135f5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   135fb:	8b 45 08             	mov    0x8(%ebp),%eax
   135fe:	83 c0 04             	add    $0x4,%eax
   13601:	83 ec 0c             	sub    $0xc,%esp
   13604:	50                   	push   %eax
   13605:	e8 47 ff ff ff       	call   13551 <list_init>
   1360a:	83 c4 10             	add    $0x10,%esp
}
   1360d:	90                   	nop
   1360e:	c9                   	leave  
   1360f:	c3                   	ret    

00013610 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   13610:	55                   	push   %ebp
   13611:	89 e5                	mov    %esp,%ebp
   13613:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   13616:	e8 41 f8 ff ff       	call   12e5c <idt_enter_protection>
   1361b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   1361e:	8b 45 08             	mov    0x8(%ebp),%eax
   13621:	8b 00                	mov    (%eax),%eax
   13623:	85 c0                	test   %eax,%eax
   13625:	7e 0f                	jle    13636 <sem_wait+0x26>
        --sem->count;   
   13627:	8b 45 08             	mov    0x8(%ebp),%eax
   1362a:	8b 00                	mov    (%eax),%eax
   1362c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1362f:	8b 45 08             	mov    0x8(%ebp),%eax
   13632:	89 10                	mov    %edx,(%eax)
   13634:	eb 34                	jmp    1366a <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   13636:	e8 46 e1 ff ff       	call   11781 <task_current>
   1363b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   1363e:	83 ec 0c             	sub    $0xc,%esp
   13641:	ff 75 f0             	push   -0x10(%ebp)
   13644:	e8 bf e0 ff ff       	call   11708 <task_set_unready>
   13649:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   1364c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1364f:	8d 50 50             	lea    0x50(%eax),%edx
   13652:	8b 45 08             	mov    0x8(%ebp),%eax
   13655:	83 c0 04             	add    $0x4,%eax
   13658:	83 ec 08             	sub    $0x8,%esp
   1365b:	52                   	push   %edx
   1365c:	50                   	push   %eax
   1365d:	e8 2c 0e 00 00       	call   1448e <list_insert_last>
   13662:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   13665:	e8 21 e1 ff ff       	call   1178b <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   1366a:	83 ec 0c             	sub    $0xc,%esp
   1366d:	ff 75 f4             	push   -0xc(%ebp)
   13670:	e8 ff f7 ff ff       	call   12e74 <idt_leave_protection>
   13675:	83 c4 10             	add    $0x10,%esp
}
   13678:	90                   	nop
   13679:	c9                   	leave  
   1367a:	c3                   	ret    

0001367b <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   1367b:	55                   	push   %ebp
   1367c:	89 e5                	mov    %esp,%ebp
   1367e:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   13681:	e8 d6 f7 ff ff       	call   12e5c <idt_enter_protection>
   13686:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   13689:	8b 45 08             	mov    0x8(%ebp),%eax
   1368c:	83 c0 04             	add    $0x4,%eax
   1368f:	83 ec 0c             	sub    $0xc,%esp
   13692:	50                   	push   %eax
   13693:	e8 00 ff ff ff       	call   13598 <list_is_empty>
   13698:	83 c4 10             	add    $0x10,%esp
   1369b:	85 c0                	test   %eax,%eax
   1369d:	75 3b                	jne    136da <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   1369f:	8b 45 08             	mov    0x8(%ebp),%eax
   136a2:	83 c0 04             	add    $0x4,%eax
   136a5:	83 ec 0c             	sub    $0xc,%esp
   136a8:	50                   	push   %eax
   136a9:	e8 6f 0e 00 00       	call   1451d <list_remove_first>
   136ae:	83 c4 10             	add    $0x10,%esp
   136b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   136b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   136b8:	74 08                	je     136c2 <sem_notify+0x47>
   136ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   136bd:	83 e8 50             	sub    $0x50,%eax
   136c0:	eb 05                	jmp    136c7 <sem_notify+0x4c>
   136c2:	b8 00 00 00 00       	mov    $0x0,%eax
   136c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   136ca:	83 ec 0c             	sub    $0xc,%esp
   136cd:	ff 75 ec             	push   -0x14(%ebp)
   136d0:	e8 e8 df ff ff       	call   116bd <task_set_ready>
   136d5:	83 c4 10             	add    $0x10,%esp
   136d8:	eb 0d                	jmp    136e7 <sem_notify+0x6c>
    } else {
        sem->count++;
   136da:	8b 45 08             	mov    0x8(%ebp),%eax
   136dd:	8b 00                	mov    (%eax),%eax
   136df:	8d 50 01             	lea    0x1(%eax),%edx
   136e2:	8b 45 08             	mov    0x8(%ebp),%eax
   136e5:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   136e7:	83 ec 0c             	sub    $0xc,%esp
   136ea:	ff 75 f4             	push   -0xc(%ebp)
   136ed:	e8 82 f7 ff ff       	call   12e74 <idt_leave_protection>
   136f2:	83 c4 10             	add    $0x10,%esp

}
   136f5:	90                   	nop
   136f6:	c9                   	leave  
   136f7:	c3                   	ret    

000136f8 <sem_count>:

int sem_count(sem_t *sem) {
   136f8:	55                   	push   %ebp
   136f9:	89 e5                	mov    %esp,%ebp
   136fb:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   136fe:	e8 59 f7 ff ff       	call   12e5c <idt_enter_protection>
   13703:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   13706:	8b 45 08             	mov    0x8(%ebp),%eax
   13709:	8b 00                	mov    (%eax),%eax
   1370b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   1370e:	83 ec 0c             	sub    $0xc,%esp
   13711:	ff 75 f4             	push   -0xc(%ebp)
   13714:	e8 5b f7 ff ff       	call   12e74 <idt_leave_protection>
   13719:	83 c4 10             	add    $0x10,%esp

    return count;
   1371c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1371f:	c9                   	leave  
   13720:	c3                   	ret    

00013721 <list_init>:
static inline void list_init(list_t *list) {
   13721:	55                   	push   %ebp
   13722:	89 e5                	mov    %esp,%ebp
   13724:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13727:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1372b:	75 19                	jne    13746 <list_init+0x25>
   1372d:	68 30 56 01 00       	push   $0x15630
   13732:	68 34 57 01 00       	push   $0x15734
   13737:	6a 31                	push   $0x31
   13739:	68 44 56 01 00       	push   $0x15644
   1373e:	e8 8d 03 00 00       	call   13ad0 <pannic>
   13743:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   13746:	8b 45 08             	mov    0x8(%ebp),%eax
   13749:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13750:	8b 45 08             	mov    0x8(%ebp),%eax
   13753:	8b 50 04             	mov    0x4(%eax),%edx
   13756:	8b 45 08             	mov    0x8(%ebp),%eax
   13759:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1375b:	8b 45 08             	mov    0x8(%ebp),%eax
   1375e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13765:	90                   	nop
   13766:	c9                   	leave  
   13767:	c3                   	ret    

00013768 <list_get_size>:
static inline int list_get_size(list_t *list) {
   13768:	55                   	push   %ebp
   13769:	89 e5                	mov    %esp,%ebp
   1376b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1376e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13772:	75 19                	jne    1378d <list_get_size+0x25>
   13774:	68 30 56 01 00       	push   $0x15630
   13779:	68 40 57 01 00       	push   $0x15740
   1377e:	6a 3e                	push   $0x3e
   13780:	68 44 56 01 00       	push   $0x15644
   13785:	e8 46 03 00 00       	call   13ad0 <pannic>
   1378a:	83 c4 10             	add    $0x10,%esp
    return list->size;
   1378d:	8b 45 08             	mov    0x8(%ebp),%eax
   13790:	8b 40 08             	mov    0x8(%eax),%eax
}
   13793:	c9                   	leave  
   13794:	c3                   	ret    

00013795 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   13795:	55                   	push   %ebp
   13796:	89 e5                	mov    %esp,%ebp
   13798:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1379b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1379f:	75 19                	jne    137ba <list_get_first+0x25>
   137a1:	68 30 56 01 00       	push   $0x15630
   137a6:	68 60 57 01 00       	push   $0x15760
   137ab:	6a 44                	push   $0x44
   137ad:	68 44 56 01 00       	push   $0x15644
   137b2:	e8 19 03 00 00       	call   13ad0 <pannic>
   137b7:	83 c4 10             	add    $0x10,%esp
    return list->first;
   137ba:	8b 45 08             	mov    0x8(%ebp),%eax
   137bd:	8b 00                	mov    (%eax),%eax
}
   137bf:	c9                   	leave  
   137c0:	c3                   	ret    

000137c1 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   137c1:	55                   	push   %ebp
   137c2:	89 e5                	mov    %esp,%ebp
   137c4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   137c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   137cb:	75 19                	jne    137e6 <list_get_last+0x25>
   137cd:	68 30 56 01 00       	push   $0x15630
   137d2:	68 50 57 01 00       	push   $0x15750
   137d7:	6a 4a                	push   $0x4a
   137d9:	68 44 56 01 00       	push   $0x15644
   137de:	e8 ed 02 00 00       	call   13ad0 <pannic>
   137e3:	83 c4 10             	add    $0x10,%esp

    return list->last;
   137e6:	8b 45 08             	mov    0x8(%ebp),%eax
   137e9:	8b 40 04             	mov    0x4(%eax),%eax
}
   137ec:	c9                   	leave  
   137ed:	c3                   	ret    

000137ee <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   137ee:	55                   	push   %ebp
   137ef:	89 e5                	mov    %esp,%ebp
   137f1:	56                   	push   %esi
   137f2:	53                   	push   %ebx
   137f3:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   137f6:	83 ec 0c             	sub    $0xc,%esp
   137f9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   137fc:	50                   	push   %eax
   137fd:	e8 1f ff ff ff       	call   13721 <list_init>
   13802:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13805:	83 ec 0c             	sub    $0xc,%esp
   13808:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1380b:	50                   	push   %eax
   1380c:	e8 57 ff ff ff       	call   13768 <list_get_size>
   13811:	83 c4 10             	add    $0x10,%esp
   13814:	89 c6                	mov    %eax,%esi
   13816:	83 ec 0c             	sub    $0xc,%esp
   13819:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1381c:	50                   	push   %eax
   1381d:	e8 9f ff ff ff       	call   137c1 <list_get_last>
   13822:	83 c4 10             	add    $0x10,%esp
   13825:	89 c3                	mov    %eax,%ebx
   13827:	83 ec 0c             	sub    $0xc,%esp
   1382a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1382d:	50                   	push   %eax
   1382e:	e8 62 ff ff ff       	call   13795 <list_get_first>
   13833:	83 c4 10             	add    $0x10,%esp
   13836:	56                   	push   %esi
   13837:	53                   	push   %ebx
   13838:	50                   	push   %eax
   13839:	68 84 56 01 00       	push   $0x15684
   1383e:	e8 cf 0f 00 00       	call   14812 <log_printf>
   13843:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   13846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1384d:	eb 3f                	jmp    1388e <list_test+0xa0>
        list_node_t *node = nodes + i;
   1384f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13852:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13859:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1385c:	01 d0                	add    %edx,%eax
   1385e:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   13861:	8b 45 d0             	mov    -0x30(%ebp),%eax
   13864:	83 ec 04             	sub    $0x4,%esp
   13867:	50                   	push   %eax
   13868:	ff 75 f4             	push   -0xc(%ebp)
   1386b:	68 ac 56 01 00       	push   $0x156ac
   13870:	e8 9d 0f 00 00       	call   14812 <log_printf>
   13875:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   13878:	83 ec 08             	sub    $0x8,%esp
   1387b:	ff 75 d0             	push   -0x30(%ebp)
   1387e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13881:	50                   	push   %eax
   13882:	e8 7c 0b 00 00       	call   14403 <list_insert_first>
   13887:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1388a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1388e:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   13892:	7e bb                	jle    1384f <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13894:	83 ec 0c             	sub    $0xc,%esp
   13897:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1389a:	50                   	push   %eax
   1389b:	e8 c8 fe ff ff       	call   13768 <list_get_size>
   138a0:	83 c4 10             	add    $0x10,%esp
   138a3:	89 c6                	mov    %eax,%esi
   138a5:	83 ec 0c             	sub    $0xc,%esp
   138a8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   138ab:	50                   	push   %eax
   138ac:	e8 10 ff ff ff       	call   137c1 <list_get_last>
   138b1:	83 c4 10             	add    $0x10,%esp
   138b4:	89 c3                	mov    %eax,%ebx
   138b6:	83 ec 0c             	sub    $0xc,%esp
   138b9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   138bc:	50                   	push   %eax
   138bd:	e8 d3 fe ff ff       	call   13795 <list_get_first>
   138c2:	83 c4 10             	add    $0x10,%esp
   138c5:	56                   	push   %esi
   138c6:	53                   	push   %ebx
   138c7:	50                   	push   %eax
   138c8:	68 84 56 01 00       	push   $0x15684
   138cd:	e8 40 0f 00 00       	call   14812 <log_printf>
   138d2:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   138d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   138dc:	eb 2d                	jmp    1390b <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   138de:	83 ec 0c             	sub    $0xc,%esp
   138e1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   138e4:	50                   	push   %eax
   138e5:	e8 33 0c 00 00       	call   1451d <list_remove_first>
   138ea:	83 c4 10             	add    $0x10,%esp
   138ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   138f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   138f3:	83 ec 04             	sub    $0x4,%esp
   138f6:	50                   	push   %eax
   138f7:	ff 75 f0             	push   -0x10(%ebp)
   138fa:	68 cb 56 01 00       	push   $0x156cb
   138ff:	e8 0e 0f 00 00       	call   14812 <log_printf>
   13904:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13907:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1390b:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1390f:	7e cd                	jle    138de <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13911:	83 ec 0c             	sub    $0xc,%esp
   13914:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13917:	50                   	push   %eax
   13918:	e8 4b fe ff ff       	call   13768 <list_get_size>
   1391d:	83 c4 10             	add    $0x10,%esp
   13920:	89 c6                	mov    %eax,%esi
   13922:	83 ec 0c             	sub    $0xc,%esp
   13925:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13928:	50                   	push   %eax
   13929:	e8 93 fe ff ff       	call   137c1 <list_get_last>
   1392e:	83 c4 10             	add    $0x10,%esp
   13931:	89 c3                	mov    %eax,%ebx
   13933:	83 ec 0c             	sub    $0xc,%esp
   13936:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13939:	50                   	push   %eax
   1393a:	e8 56 fe ff ff       	call   13795 <list_get_first>
   1393f:	83 c4 10             	add    $0x10,%esp
   13942:	56                   	push   %esi
   13943:	53                   	push   %ebx
   13944:	50                   	push   %eax
   13945:	68 84 56 01 00       	push   $0x15684
   1394a:	e8 c3 0e 00 00       	call   14812 <log_printf>
   1394f:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   13952:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   13959:	eb 3f                	jmp    1399a <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1395b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1395e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13965:	8d 45 9c             	lea    -0x64(%ebp),%eax
   13968:	01 d0                	add    %edx,%eax
   1396a:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   1396d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13970:	83 ec 04             	sub    $0x4,%esp
   13973:	50                   	push   %eax
   13974:	ff 75 ec             	push   -0x14(%ebp)
   13977:	68 e2 56 01 00       	push   $0x156e2
   1397c:	e8 91 0e 00 00       	call   14812 <log_printf>
   13981:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   13984:	83 ec 08             	sub    $0x8,%esp
   13987:	ff 75 d8             	push   -0x28(%ebp)
   1398a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1398d:	50                   	push   %eax
   1398e:	e8 fb 0a 00 00       	call   1448e <list_insert_last>
   13993:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13996:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1399a:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1399e:	7e bb                	jle    1395b <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   139a0:	83 ec 0c             	sub    $0xc,%esp
   139a3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139a6:	50                   	push   %eax
   139a7:	e8 bc fd ff ff       	call   13768 <list_get_size>
   139ac:	83 c4 10             	add    $0x10,%esp
   139af:	89 c6                	mov    %eax,%esi
   139b1:	83 ec 0c             	sub    $0xc,%esp
   139b4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139b7:	50                   	push   %eax
   139b8:	e8 04 fe ff ff       	call   137c1 <list_get_last>
   139bd:	83 c4 10             	add    $0x10,%esp
   139c0:	89 c3                	mov    %eax,%ebx
   139c2:	83 ec 0c             	sub    $0xc,%esp
   139c5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139c8:	50                   	push   %eax
   139c9:	e8 c7 fd ff ff       	call   13795 <list_get_first>
   139ce:	83 c4 10             	add    $0x10,%esp
   139d1:	56                   	push   %esi
   139d2:	53                   	push   %ebx
   139d3:	50                   	push   %eax
   139d4:	68 84 56 01 00       	push   $0x15684
   139d9:	e8 34 0e 00 00       	call   14812 <log_printf>
   139de:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   139e1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   139e8:	eb 2d                	jmp    13a17 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   139ea:	83 ec 0c             	sub    $0xc,%esp
   139ed:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139f0:	50                   	push   %eax
   139f1:	e8 d8 0b 00 00       	call   145ce <list_remove_last>
   139f6:	83 c4 10             	add    $0x10,%esp
   139f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   139fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
   139ff:	83 ec 04             	sub    $0x4,%esp
   13a02:	50                   	push   %eax
   13a03:	ff 75 e8             	push   -0x18(%ebp)
   13a06:	68 00 57 01 00       	push   $0x15700
   13a0b:	e8 02 0e 00 00       	call   14812 <log_printf>
   13a10:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13a13:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13a17:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   13a1b:	7e cd                	jle    139ea <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13a1d:	83 ec 0c             	sub    $0xc,%esp
   13a20:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13a23:	50                   	push   %eax
   13a24:	e8 3f fd ff ff       	call   13768 <list_get_size>
   13a29:	83 c4 10             	add    $0x10,%esp
   13a2c:	89 c6                	mov    %eax,%esi
   13a2e:	83 ec 0c             	sub    $0xc,%esp
   13a31:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13a34:	50                   	push   %eax
   13a35:	e8 87 fd ff ff       	call   137c1 <list_get_last>
   13a3a:	83 c4 10             	add    $0x10,%esp
   13a3d:	89 c3                	mov    %eax,%ebx
   13a3f:	83 ec 0c             	sub    $0xc,%esp
   13a42:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13a45:	50                   	push   %eax
   13a46:	e8 4a fd ff ff       	call   13795 <list_get_first>
   13a4b:	83 c4 10             	add    $0x10,%esp
   13a4e:	56                   	push   %esi
   13a4f:	53                   	push   %ebx
   13a50:	50                   	push   %eax
   13a51:	68 84 56 01 00       	push   $0x15684
   13a56:	e8 b7 0d 00 00       	call   14812 <log_printf>
   13a5b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   13a5e:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   13a65:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   13a6c:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   13a73:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   13a7a:	8d 45 90             	lea    -0x70(%ebp),%eax
   13a7d:	83 c0 04             	add    $0x4,%eax
   13a80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   13a83:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   13a87:	74 08                	je     13a91 <list_test+0x2a3>
   13a89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13a8c:	83 e8 04             	sub    $0x4,%eax
   13a8f:	eb 05                	jmp    13a96 <list_test+0x2a8>
   13a91:	b8 00 00 00 00       	mov    $0x0,%eax
   13a96:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   13a99:	8d 45 90             	lea    -0x70(%ebp),%eax
   13a9c:	83 ec 08             	sub    $0x8,%esp
   13a9f:	50                   	push   %eax
   13aa0:	68 16 57 01 00       	push   $0x15716
   13aa5:	e8 68 0d 00 00       	call   14812 <log_printf>
   13aaa:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   13aad:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13ab0:	83 ec 08             	sub    $0x8,%esp
   13ab3:	50                   	push   %eax
   13ab4:	68 24 57 01 00       	push   $0x15724
   13ab9:	e8 54 0d 00 00       	call   14812 <log_printf>
   13abe:	83 c4 10             	add    $0x10,%esp

 }
   13ac1:	90                   	nop
   13ac2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13ac5:	5b                   	pop    %ebx
   13ac6:	5e                   	pop    %esi
   13ac7:	5d                   	pop    %ebp
   13ac8:	c3                   	ret    

00013ac9 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   13ac9:	55                   	push   %ebp
   13aca:	89 e5                	mov    %esp,%ebp
   13acc:	f4                   	hlt    
   13acd:	90                   	nop
   13ace:	5d                   	pop    %ebp
   13acf:	c3                   	ret    

00013ad0 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   13ad0:	55                   	push   %ebp
   13ad1:	89 e5                	mov    %esp,%ebp
   13ad3:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   13ad6:	83 ec 08             	sub    $0x8,%esp
   13ad9:	ff 75 14             	push   0x14(%ebp)
   13adc:	68 6f 57 01 00       	push   $0x1576f
   13ae1:	e8 2c 0d 00 00       	call   14812 <log_printf>
   13ae6:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   13ae9:	ff 75 10             	push   0x10(%ebp)
   13aec:	ff 75 0c             	push   0xc(%ebp)
   13aef:	ff 75 08             	push   0x8(%ebp)
   13af2:	68 80 57 01 00       	push   $0x15780
   13af7:	e8 16 0d 00 00       	call   14812 <log_printf>
   13afc:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   13aff:	e8 c5 ff ff ff       	call   13ac9 <hlt>
   13b04:	eb f9                	jmp    13aff <pannic+0x2f>

00013b06 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   13b06:	55                   	push   %ebp
   13b07:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   13b09:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0c:	83 c0 07             	add    $0x7,%eax
   13b0f:	8d 50 07             	lea    0x7(%eax),%edx
   13b12:	85 c0                	test   %eax,%eax
   13b14:	0f 48 c2             	cmovs  %edx,%eax
   13b17:	c1 f8 03             	sar    $0x3,%eax
}
   13b1a:	5d                   	pop    %ebp
   13b1b:	c3                   	ret    

00013b1c <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   13b1c:	55                   	push   %ebp
   13b1d:	89 e5                	mov    %esp,%ebp
   13b1f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13b22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b26:	75 19                	jne    13b41 <bitmap_init+0x25>
   13b28:	68 9c 57 01 00       	push   $0x1579c
   13b2d:	68 30 58 01 00       	push   $0x15830
   13b32:	6a 24                	push   $0x24
   13b34:	68 b4 57 01 00       	push   $0x157b4
   13b39:	e8 92 ff ff ff       	call   13ad0 <pannic>
   13b3e:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   13b41:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b45:	75 19                	jne    13b60 <bitmap_init+0x44>
   13b47:	68 ec 57 01 00       	push   $0x157ec
   13b4c:	68 30 58 01 00       	push   $0x15830
   13b51:	6a 25                	push   $0x25
   13b53:	68 b4 57 01 00       	push   $0x157b4
   13b58:	e8 73 ff ff ff       	call   13ad0 <pannic>
   13b5d:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   13b60:	8b 45 08             	mov    0x8(%ebp),%eax
   13b63:	8b 55 10             	mov    0x10(%ebp),%edx
   13b66:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   13b68:	8b 45 08             	mov    0x8(%ebp),%eax
   13b6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b6e:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   13b71:	8b 45 08             	mov    0x8(%ebp),%eax
   13b74:	8b 00                	mov    (%eax),%eax
   13b76:	83 ec 0c             	sub    $0xc,%esp
   13b79:	50                   	push   %eax
   13b7a:	e8 87 ff ff ff       	call   13b06 <bitmap_byte_count>
   13b7f:	83 c4 10             	add    $0x10,%esp
   13b82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   13b85:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13b89:	74 07                	je     13b92 <bitmap_init+0x76>
   13b8b:	ba ff 00 00 00       	mov    $0xff,%edx
   13b90:	eb 05                	jmp    13b97 <bitmap_init+0x7b>
   13b92:	ba 00 00 00 00       	mov    $0x0,%edx
   13b97:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9a:	8b 40 04             	mov    0x4(%eax),%eax
   13b9d:	83 ec 04             	sub    $0x4,%esp
   13ba0:	ff 75 f4             	push   -0xc(%ebp)
   13ba3:	52                   	push   %edx
   13ba4:	50                   	push   %eax
   13ba5:	e8 28 04 00 00       	call   13fd2 <kernel_memset>
   13baa:	83 c4 10             	add    $0x10,%esp

}
   13bad:	90                   	nop
   13bae:	c9                   	leave  
   13baf:	c3                   	ret    

00013bb0 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   13bb0:	55                   	push   %ebp
   13bb1:	89 e5                	mov    %esp,%ebp
   13bb3:	53                   	push   %ebx
   13bb4:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13bb7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13bbb:	75 19                	jne    13bd6 <bitmap_get_bit+0x26>
   13bbd:	68 9c 57 01 00       	push   $0x1579c
   13bc2:	68 3c 58 01 00       	push   $0x1583c
   13bc7:	6a 39                	push   $0x39
   13bc9:	68 b4 57 01 00       	push   $0x157b4
   13bce:	e8 fd fe ff ff       	call   13ad0 <pannic>
   13bd3:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   13bd6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13bda:	79 19                	jns    13bf5 <bitmap_get_bit+0x45>
   13bdc:	68 00 58 01 00       	push   $0x15800
   13be1:	68 3c 58 01 00       	push   $0x1583c
   13be6:	6a 3a                	push   $0x3a
   13be8:	68 b4 57 01 00       	push   $0x157b4
   13bed:	e8 de fe ff ff       	call   13ad0 <pannic>
   13bf2:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   13bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf8:	8b 48 04             	mov    0x4(%eax),%ecx
   13bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bfe:	8d 50 07             	lea    0x7(%eax),%edx
   13c01:	85 c0                	test   %eax,%eax
   13c03:	0f 48 c2             	cmovs  %edx,%eax
   13c06:	c1 f8 03             	sar    $0x3,%eax
   13c09:	01 c8                	add    %ecx,%eax
   13c0b:	0f b6 00             	movzbl (%eax),%eax
   13c0e:	89 c3                	mov    %eax,%ebx
   13c10:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c13:	83 e0 07             	and    $0x7,%eax
   13c16:	ba 01 00 00 00       	mov    $0x1,%edx
   13c1b:	89 c1                	mov    %eax,%ecx
   13c1d:	d3 e2                	shl    %cl,%edx
   13c1f:	89 d0                	mov    %edx,%eax
   13c21:	21 d8                	and    %ebx,%eax
}
   13c23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13c26:	c9                   	leave  
   13c27:	c3                   	ret    

00013c28 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   13c28:	55                   	push   %ebp
   13c29:	89 e5                	mov    %esp,%ebp
   13c2b:	56                   	push   %esi
   13c2c:	53                   	push   %ebx
   13c2d:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13c30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13c34:	75 19                	jne    13c4f <bitmap_set_bit+0x27>
   13c36:	68 9c 57 01 00       	push   $0x1579c
   13c3b:	68 4c 58 01 00       	push   $0x1584c
   13c40:	6a 48                	push   $0x48
   13c42:	68 b4 57 01 00       	push   $0x157b4
   13c47:	e8 84 fe ff ff       	call   13ad0 <pannic>
   13c4c:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   13c4f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13c53:	78 06                	js     13c5b <bitmap_set_bit+0x33>
   13c55:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13c59:	79 19                	jns    13c74 <bitmap_set_bit+0x4c>
   13c5b:	68 0b 58 01 00       	push   $0x1580b
   13c60:	68 4c 58 01 00       	push   $0x1584c
   13c65:	6a 49                	push   $0x49
   13c67:	68 b4 57 01 00       	push   $0x157b4
   13c6c:	e8 5f fe ff ff       	call   13ad0 <pannic>
   13c71:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   13c74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13c7b:	e9 92 00 00 00       	jmp    13d12 <bitmap_set_bit+0xea>
        if (bit) {
   13c80:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13c84:	74 42                	je     13cc8 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   13c86:	8b 45 08             	mov    0x8(%ebp),%eax
   13c89:	8b 48 04             	mov    0x4(%eax),%ecx
   13c8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c8f:	8d 50 07             	lea    0x7(%eax),%edx
   13c92:	85 c0                	test   %eax,%eax
   13c94:	0f 48 c2             	cmovs  %edx,%eax
   13c97:	c1 f8 03             	sar    $0x3,%eax
   13c9a:	89 c2                	mov    %eax,%edx
   13c9c:	89 d0                	mov    %edx,%eax
   13c9e:	01 c8                	add    %ecx,%eax
   13ca0:	0f b6 00             	movzbl (%eax),%eax
   13ca3:	89 c6                	mov    %eax,%esi
   13ca5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ca8:	83 e0 07             	and    $0x7,%eax
   13cab:	bb 01 00 00 00       	mov    $0x1,%ebx
   13cb0:	89 c1                	mov    %eax,%ecx
   13cb2:	d3 e3                	shl    %cl,%ebx
   13cb4:	89 d8                	mov    %ebx,%eax
   13cb6:	89 f1                	mov    %esi,%ecx
   13cb8:	09 c1                	or     %eax,%ecx
   13cba:	8b 45 08             	mov    0x8(%ebp),%eax
   13cbd:	8b 40 04             	mov    0x4(%eax),%eax
   13cc0:	01 d0                	add    %edx,%eax
   13cc2:	89 ca                	mov    %ecx,%edx
   13cc4:	88 10                	mov    %dl,(%eax)
   13cc6:	eb 42                	jmp    13d0a <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   13cc8:	8b 45 08             	mov    0x8(%ebp),%eax
   13ccb:	8b 48 04             	mov    0x4(%eax),%ecx
   13cce:	8b 45 0c             	mov    0xc(%ebp),%eax
   13cd1:	8d 50 07             	lea    0x7(%eax),%edx
   13cd4:	85 c0                	test   %eax,%eax
   13cd6:	0f 48 c2             	cmovs  %edx,%eax
   13cd9:	c1 f8 03             	sar    $0x3,%eax
   13cdc:	89 c2                	mov    %eax,%edx
   13cde:	89 d0                	mov    %edx,%eax
   13ce0:	01 c8                	add    %ecx,%eax
   13ce2:	0f b6 00             	movzbl (%eax),%eax
   13ce5:	89 c6                	mov    %eax,%esi
   13ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
   13cea:	83 e0 07             	and    $0x7,%eax
   13ced:	bb 01 00 00 00       	mov    $0x1,%ebx
   13cf2:	89 c1                	mov    %eax,%ecx
   13cf4:	d3 e3                	shl    %cl,%ebx
   13cf6:	89 d8                	mov    %ebx,%eax
   13cf8:	f7 d0                	not    %eax
   13cfa:	89 f1                	mov    %esi,%ecx
   13cfc:	21 c1                	and    %eax,%ecx
   13cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   13d01:	8b 40 04             	mov    0x4(%eax),%eax
   13d04:	01 d0                	add    %edx,%eax
   13d06:	89 ca                	mov    %ecx,%edx
   13d08:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   13d0a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13d0e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   13d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d15:	3b 45 10             	cmp    0x10(%ebp),%eax
   13d18:	7d 0e                	jge    13d28 <bitmap_set_bit+0x100>
   13d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d1d:	8b 00                	mov    (%eax),%eax
   13d1f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13d22:	0f 8c 58 ff ff ff    	jl     13c80 <bitmap_set_bit+0x58>
        }
    }
}
   13d28:	90                   	nop
   13d29:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13d2c:	5b                   	pop    %ebx
   13d2d:	5e                   	pop    %esi
   13d2e:	5d                   	pop    %ebp
   13d2f:	c3                   	ret    

00013d30 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   13d30:	55                   	push   %ebp
   13d31:	89 e5                	mov    %esp,%ebp
   13d33:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   13d36:	83 ec 08             	sub    $0x8,%esp
   13d39:	ff 75 0c             	push   0xc(%ebp)
   13d3c:	ff 75 08             	push   0x8(%ebp)
   13d3f:	e8 6c fe ff ff       	call   13bb0 <bitmap_get_bit>
   13d44:	83 c4 10             	add    $0x10,%esp
   13d47:	84 c0                	test   %al,%al
   13d49:	0f 95 c0             	setne  %al
   13d4c:	0f b6 c0             	movzbl %al,%eax
}
   13d4f:	c9                   	leave  
   13d50:	c3                   	ret    

00013d51 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   13d51:	55                   	push   %ebp
   13d52:	89 e5                	mov    %esp,%ebp
   13d54:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13d57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d5b:	75 19                	jne    13d76 <bitmap_alloc_nbits+0x25>
   13d5d:	68 9c 57 01 00       	push   $0x1579c
   13d62:	68 5c 58 01 00       	push   $0x1585c
   13d67:	6a 68                	push   $0x68
   13d69:	68 b4 57 01 00       	push   $0x157b4
   13d6e:	e8 5d fd ff ff       	call   13ad0 <pannic>
   13d73:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   13d76:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13d7a:	79 19                	jns    13d95 <bitmap_alloc_nbits+0x44>
   13d7c:	68 24 58 01 00       	push   $0x15824
   13d81:	68 5c 58 01 00       	push   $0x1585c
   13d86:	6a 69                	push   $0x69
   13d88:	68 b4 57 01 00       	push   $0x157b4
   13d8d:	e8 3e fd ff ff       	call   13ad0 <pannic>
   13d92:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   13d95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   13d9c:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   13da3:	e9 8f 00 00 00       	jmp    13e37 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   13da8:	83 ec 08             	sub    $0x8,%esp
   13dab:	ff 75 f4             	push   -0xc(%ebp)
   13dae:	ff 75 08             	push   0x8(%ebp)
   13db1:	e8 fa fd ff ff       	call   13bb0 <bitmap_get_bit>
   13db6:	83 c4 10             	add    $0x10,%esp
   13db9:	0f b6 c0             	movzbl %al,%eax
   13dbc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13dbf:	74 06                	je     13dc7 <bitmap_alloc_nbits+0x76>
            search_index++;
   13dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   13dc5:	eb 70                	jmp    13e37 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   13dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dca:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13dcd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   13dd4:	eb 2d                	jmp    13e03 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   13dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dd9:	8d 50 01             	lea    0x1(%eax),%edx
   13ddc:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13ddf:	83 ec 08             	sub    $0x8,%esp
   13de2:	50                   	push   %eax
   13de3:	ff 75 08             	push   0x8(%ebp)
   13de6:	e8 c5 fd ff ff       	call   13bb0 <bitmap_get_bit>
   13deb:	83 c4 10             	add    $0x10,%esp
   13dee:	0f b6 c0             	movzbl %al,%eax
   13df1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13df4:	74 09                	je     13dff <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   13df6:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   13dfd:	eb 16                	jmp    13e15 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13dff:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   13e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13e06:	3b 45 10             	cmp    0x10(%ebp),%eax
   13e09:	7d 0a                	jge    13e15 <bitmap_alloc_nbits+0xc4>
   13e0b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e0e:	8b 00                	mov    (%eax),%eax
   13e10:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13e13:	7c c1                	jl     13dd6 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   13e15:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   13e19:	74 1c                	je     13e37 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   13e1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e1e:	f7 d0                	not    %eax
   13e20:	50                   	push   %eax
   13e21:	ff 75 10             	push   0x10(%ebp)
   13e24:	ff 75 f0             	push   -0x10(%ebp)
   13e27:	ff 75 08             	push   0x8(%ebp)
   13e2a:	e8 f9 fd ff ff       	call   13c28 <bitmap_set_bit>
   13e2f:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   13e32:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e35:	eb 13                	jmp    13e4a <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   13e37:	8b 45 08             	mov    0x8(%ebp),%eax
   13e3a:	8b 00                	mov    (%eax),%eax
   13e3c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13e3f:	0f 8c 63 ff ff ff    	jl     13da8 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   13e45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   13e4a:	c9                   	leave  
   13e4b:	c3                   	ret    

00013e4c <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   13e4c:	55                   	push   %ebp
   13e4d:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   13e4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e53:	74 3b                	je     13e90 <kernel_strcpy+0x44>
   13e55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13e59:	74 35                	je     13e90 <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   13e5b:	eb 17                	jmp    13e74 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   13e5d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e60:	8d 42 01             	lea    0x1(%edx),%eax
   13e63:	89 45 0c             	mov    %eax,0xc(%ebp)
   13e66:	8b 45 08             	mov    0x8(%ebp),%eax
   13e69:	8d 48 01             	lea    0x1(%eax),%ecx
   13e6c:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13e6f:	0f b6 12             	movzbl (%edx),%edx
   13e72:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   13e74:	8b 45 08             	mov    0x8(%ebp),%eax
   13e77:	0f b6 00             	movzbl (%eax),%eax
   13e7a:	84 c0                	test   %al,%al
   13e7c:	74 0a                	je     13e88 <kernel_strcpy+0x3c>
   13e7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e81:	0f b6 00             	movzbl (%eax),%eax
   13e84:	84 c0                	test   %al,%al
   13e86:	75 d5                	jne    13e5d <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   13e88:	8b 45 08             	mov    0x8(%ebp),%eax
   13e8b:	c6 00 00             	movb   $0x0,(%eax)
   13e8e:	eb 01                	jmp    13e91 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   13e90:	90                   	nop
}
   13e91:	5d                   	pop    %ebp
   13e92:	c3                   	ret    

00013e93 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   13e93:	55                   	push   %ebp
   13e94:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   13e96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e9a:	74 45                	je     13ee1 <kernel_strncpy+0x4e>
   13e9c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ea0:	74 3f                	je     13ee1 <kernel_strncpy+0x4e>
   13ea2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13ea6:	74 39                	je     13ee1 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   13ea8:	eb 17                	jmp    13ec1 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   13eaa:	8b 55 0c             	mov    0xc(%ebp),%edx
   13ead:	8d 42 01             	lea    0x1(%edx),%eax
   13eb0:	89 45 0c             	mov    %eax,0xc(%ebp)
   13eb3:	8b 45 08             	mov    0x8(%ebp),%eax
   13eb6:	8d 48 01             	lea    0x1(%eax),%ecx
   13eb9:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13ebc:	0f b6 12             	movzbl (%edx),%edx
   13ebf:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   13ec1:	8b 45 10             	mov    0x10(%ebp),%eax
   13ec4:	8d 50 ff             	lea    -0x1(%eax),%edx
   13ec7:	89 55 10             	mov    %edx,0x10(%ebp)
   13eca:	83 f8 01             	cmp    $0x1,%eax
   13ecd:	7e 0a                	jle    13ed9 <kernel_strncpy+0x46>
   13ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ed2:	0f b6 00             	movzbl (%eax),%eax
   13ed5:	84 c0                	test   %al,%al
   13ed7:	75 d1                	jne    13eaa <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   13ed9:	8b 45 08             	mov    0x8(%ebp),%eax
   13edc:	c6 00 00             	movb   $0x0,(%eax)
   13edf:	eb 01                	jmp    13ee2 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   13ee1:	90                   	nop
}
   13ee2:	5d                   	pop    %ebp
   13ee3:	c3                   	ret    

00013ee4 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   13ee4:	55                   	push   %ebp
   13ee5:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   13ee7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13eeb:	74 06                	je     13ef3 <kernel_strncmp+0xf>
   13eed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ef1:	75 0f                	jne    13f02 <kernel_strncmp+0x1e>
   13ef3:	b8 00 00 00 00       	mov    $0x0,%eax
   13ef8:	eb 52                	jmp    13f4c <kernel_strncmp+0x68>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   13efa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   13efe:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   13f02:	8b 45 08             	mov    0x8(%ebp),%eax
   13f05:	0f b6 00             	movzbl (%eax),%eax
   13f08:	84 c0                	test   %al,%al
   13f0a:	74 24                	je     13f30 <kernel_strncmp+0x4c>
   13f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f0f:	0f b6 00             	movzbl (%eax),%eax
   13f12:	84 c0                	test   %al,%al
   13f14:	74 1a                	je     13f30 <kernel_strncmp+0x4c>
   13f16:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   13f1a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13f1e:	74 10                	je     13f30 <kernel_strncmp+0x4c>
   13f20:	8b 45 08             	mov    0x8(%ebp),%eax
   13f23:	0f b6 10             	movzbl (%eax),%edx
   13f26:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f29:	0f b6 00             	movzbl (%eax),%eax
   13f2c:	38 c2                	cmp    %al,%dl
   13f2e:	74 ca                	je     13efa <kernel_strncmp+0x16>
  }

  if (*s1 > *s2)
   13f30:	8b 45 08             	mov    0x8(%ebp),%eax
   13f33:	0f b6 10             	movzbl (%eax),%edx
   13f36:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f39:	0f b6 00             	movzbl (%eax),%eax
   13f3c:	38 c2                	cmp    %al,%dl
   13f3e:	7e 07                	jle    13f47 <kernel_strncmp+0x63>
    return 1;
   13f40:	b8 01 00 00 00       	mov    $0x1,%eax
   13f45:	eb 05                	jmp    13f4c <kernel_strncmp+0x68>
  else if (*s1 < *s1)
    return -1;
  else
    return 0;
   13f47:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13f4c:	5d                   	pop    %ebp
   13f4d:	c3                   	ret    

00013f4e <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   13f4e:	55                   	push   %ebp
   13f4f:	89 e5                	mov    %esp,%ebp
   13f51:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   13f54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13f58:	75 07                	jne    13f61 <kernel_strlen+0x13>
   13f5a:	b8 00 00 00 00       	mov    $0x0,%eax
   13f5f:	eb 20                	jmp    13f81 <kernel_strlen+0x33>

  int len = 0;
   13f61:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   13f68:	eb 04                	jmp    13f6e <kernel_strlen+0x20>
   13f6a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13f6e:	8b 45 08             	mov    0x8(%ebp),%eax
   13f71:	8d 50 01             	lea    0x1(%eax),%edx
   13f74:	89 55 08             	mov    %edx,0x8(%ebp)
   13f77:	0f b6 00             	movzbl (%eax),%eax
   13f7a:	84 c0                	test   %al,%al
   13f7c:	75 ec                	jne    13f6a <kernel_strlen+0x1c>

  return len;
   13f7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13f81:	c9                   	leave  
   13f82:	c3                   	ret    

00013f83 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   13f83:	55                   	push   %ebp
   13f84:	89 e5                	mov    %esp,%ebp
   13f86:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   13f89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13f8d:	74 40                	je     13fcf <kernel_memcpy+0x4c>
   13f8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13f93:	74 3a                	je     13fcf <kernel_memcpy+0x4c>
   13f95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13f99:	74 34                	je     13fcf <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   13f9b:	8b 45 08             	mov    0x8(%ebp),%eax
   13f9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   13fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fa4:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   13fa7:	eb 17                	jmp    13fc0 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   13fa9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   13fac:	8d 42 01             	lea    0x1(%edx),%eax
   13faf:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13fb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13fb5:	8d 48 01             	lea    0x1(%eax),%ecx
   13fb8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   13fbb:	0f b6 12             	movzbl (%edx),%edx
   13fbe:	88 10                	mov    %dl,(%eax)
  while (size--) {
   13fc0:	8b 45 10             	mov    0x10(%ebp),%eax
   13fc3:	8d 50 ff             	lea    -0x1(%eax),%edx
   13fc6:	89 55 10             	mov    %edx,0x10(%ebp)
   13fc9:	85 c0                	test   %eax,%eax
   13fcb:	75 dc                	jne    13fa9 <kernel_memcpy+0x26>
   13fcd:	eb 01                	jmp    13fd0 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   13fcf:	90                   	nop
  }
}
   13fd0:	c9                   	leave  
   13fd1:	c3                   	ret    

00013fd2 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   13fd2:	55                   	push   %ebp
   13fd3:	89 e5                	mov    %esp,%ebp
   13fd5:	83 ec 14             	sub    $0x14,%esp
   13fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fdb:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   13fde:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13fe2:	74 2c                	je     14010 <kernel_memset+0x3e>
   13fe4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13fe8:	74 26                	je     14010 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   13fea:	8b 45 08             	mov    0x8(%ebp),%eax
   13fed:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   13ff0:	eb 0f                	jmp    14001 <kernel_memset+0x2f>
    *(d++) = v;
   13ff2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ff5:	8d 50 01             	lea    0x1(%eax),%edx
   13ff8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13ffb:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13fff:	88 10                	mov    %dl,(%eax)
  while (size--) {
   14001:	8b 45 10             	mov    0x10(%ebp),%eax
   14004:	8d 50 ff             	lea    -0x1(%eax),%edx
   14007:	89 55 10             	mov    %edx,0x10(%ebp)
   1400a:	85 c0                	test   %eax,%eax
   1400c:	75 e4                	jne    13ff2 <kernel_memset+0x20>
   1400e:	eb 01                	jmp    14011 <kernel_memset+0x3f>
  if (!dest || !size) return;
   14010:	90                   	nop
  }
}
   14011:	c9                   	leave  
   14012:	c3                   	ret    

00014013 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   14013:	55                   	push   %ebp
   14014:	89 e5                	mov    %esp,%ebp
   14016:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   14019:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1401d:	74 0c                	je     1402b <kernel_memcmp+0x18>
   1401f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14023:	74 06                	je     1402b <kernel_memcmp+0x18>
   14025:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14029:	75 07                	jne    14032 <kernel_memcmp+0x1f>
   1402b:	b8 00 00 00 00       	mov    $0x0,%eax
   14030:	eb 63                	jmp    14095 <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   14032:	8b 45 08             	mov    0x8(%ebp),%eax
   14035:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   14038:	8b 45 0c             	mov    0xc(%ebp),%eax
   1403b:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   1403e:	eb 08                	jmp    14048 <kernel_memcmp+0x35>
    d1++;
   14040:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   14044:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   14048:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1404c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14050:	74 10                	je     14062 <kernel_memcmp+0x4f>
   14052:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14055:	0f b6 10             	movzbl (%eax),%edx
   14058:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1405b:	0f b6 00             	movzbl (%eax),%eax
   1405e:	38 c2                	cmp    %al,%dl
   14060:	74 de                	je     14040 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   14062:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14065:	0f b6 10             	movzbl (%eax),%edx
   14068:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1406b:	0f b6 00             	movzbl (%eax),%eax
   1406e:	38 c2                	cmp    %al,%dl
   14070:	76 07                	jbe    14079 <kernel_memcmp+0x66>
    return 1;
   14072:	b8 01 00 00 00       	mov    $0x1,%eax
   14077:	eb 1c                	jmp    14095 <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   14079:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1407c:	0f b6 10             	movzbl (%eax),%edx
   1407f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14082:	0f b6 00             	movzbl (%eax),%eax
   14085:	38 c2                	cmp    %al,%dl
   14087:	73 07                	jae    14090 <kernel_memcmp+0x7d>
    return -1;
   14089:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1408e:	eb 05                	jmp    14095 <kernel_memcmp+0x82>
  else
    return 0;
   14090:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14095:	c9                   	leave  
   14096:	c3                   	ret    

00014097 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   14097:	55                   	push   %ebp
   14098:	89 e5                	mov    %esp,%ebp
   1409a:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   1409d:	8d 45 10             	lea    0x10(%ebp),%eax
   140a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   140a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140a6:	83 ec 04             	sub    $0x4,%esp
   140a9:	50                   	push   %eax
   140aa:	ff 75 0c             	push   0xc(%ebp)
   140ad:	ff 75 08             	push   0x8(%ebp)
   140b0:	e8 06 00 00 00       	call   140bb <kernel_vsprintf>
   140b5:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   140b8:	90                   	nop
   140b9:	c9                   	leave  
   140ba:	c3                   	ret    

000140bb <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   140bb:	55                   	push   %ebp
   140bc:	89 e5                	mov    %esp,%ebp
   140be:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   140c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   140c8:	8b 45 08             	mov    0x8(%ebp),%eax
   140cb:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   140ce:	e9 68 01 00 00       	jmp    1423b <kernel_vsprintf+0x180>
    switch (state) {
   140d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   140d7:	74 0b                	je     140e4 <kernel_vsprintf+0x29>
   140d9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   140dd:	74 2b                	je     1410a <kernel_vsprintf+0x4f>
   140df:	e9 56 01 00 00       	jmp    1423a <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   140e4:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   140e8:	75 0c                	jne    140f6 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   140ea:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   140f1:	e9 45 01 00 00       	jmp    1423b <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   140f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140f9:	8d 50 01             	lea    0x1(%eax),%edx
   140fc:	89 55 f0             	mov    %edx,-0x10(%ebp)
   140ff:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   14103:	88 10                	mov    %dl,(%eax)
        break;
   14105:	e9 31 01 00 00       	jmp    1423b <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   1410a:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   1410e:	75 47                	jne    14157 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   14110:	8b 45 10             	mov    0x10(%ebp),%eax
   14113:	8d 50 04             	lea    0x4(%eax),%edx
   14116:	89 55 10             	mov    %edx,0x10(%ebp)
   14119:	8b 00                	mov    (%eax),%eax
   1411b:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   1411e:	ff 75 ec             	push   -0x14(%ebp)
   14121:	e8 28 fe ff ff       	call   13f4e <kernel_strlen>
   14126:	83 c4 04             	add    $0x4,%esp
   14129:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   1412c:	eb 17                	jmp    14145 <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   1412e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   14131:	8d 42 01             	lea    0x1(%edx),%eax
   14134:	89 45 ec             	mov    %eax,-0x14(%ebp)
   14137:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1413a:	8d 48 01             	lea    0x1(%eax),%ecx
   1413d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   14140:	0f b6 12             	movzbl (%edx),%edx
   14143:	88 10                	mov    %dl,(%eax)
          while (len--) {
   14145:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14148:	8d 50 ff             	lea    -0x1(%eax),%edx
   1414b:	89 55 e8             	mov    %edx,-0x18(%ebp)
   1414e:	85 c0                	test   %eax,%eax
   14150:	75 dc                	jne    1412e <kernel_vsprintf+0x73>
   14152:	e9 da 00 00 00       	jmp    14231 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   14157:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1415b:	75 37                	jne    14194 <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   1415d:	8b 45 10             	mov    0x10(%ebp),%eax
   14160:	8d 50 04             	lea    0x4(%eax),%edx
   14163:	89 55 10             	mov    %edx,0x10(%ebp)
   14166:	8b 00                	mov    (%eax),%eax
   14168:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   1416b:	83 ec 04             	sub    $0x4,%esp
   1416e:	6a 0a                	push   $0xa
   14170:	ff 75 d8             	push   -0x28(%ebp)
   14173:	ff 75 f0             	push   -0x10(%ebp)
   14176:	e8 dd 00 00 00       	call   14258 <kernel_itoa>
   1417b:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   1417e:	83 ec 0c             	sub    $0xc,%esp
   14181:	ff 75 f0             	push   -0x10(%ebp)
   14184:	e8 c5 fd ff ff       	call   13f4e <kernel_strlen>
   14189:	83 c4 10             	add    $0x10,%esp
   1418c:	01 45 f0             	add    %eax,-0x10(%ebp)
   1418f:	e9 9d 00 00 00       	jmp    14231 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   14194:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   14198:	74 06                	je     141a0 <kernel_vsprintf+0xe5>
   1419a:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   1419e:	75 34                	jne    141d4 <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   141a0:	8b 45 10             	mov    0x10(%ebp),%eax
   141a3:	8d 50 04             	lea    0x4(%eax),%edx
   141a6:	89 55 10             	mov    %edx,0x10(%ebp)
   141a9:	8b 00                	mov    (%eax),%eax
   141ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   141ae:	83 ec 04             	sub    $0x4,%esp
   141b1:	6a 10                	push   $0x10
   141b3:	ff 75 dc             	push   -0x24(%ebp)
   141b6:	ff 75 f0             	push   -0x10(%ebp)
   141b9:	e8 9a 00 00 00       	call   14258 <kernel_itoa>
   141be:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   141c1:	83 ec 0c             	sub    $0xc,%esp
   141c4:	ff 75 f0             	push   -0x10(%ebp)
   141c7:	e8 82 fd ff ff       	call   13f4e <kernel_strlen>
   141cc:	83 c4 10             	add    $0x10,%esp
   141cf:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   141d2:	eb 5d                	jmp    14231 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   141d4:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   141d8:	75 34                	jne    1420e <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   141da:	8b 45 10             	mov    0x10(%ebp),%eax
   141dd:	8d 50 04             	lea    0x4(%eax),%edx
   141e0:	89 55 10             	mov    %edx,0x10(%ebp)
   141e3:	8b 00                	mov    (%eax),%eax
   141e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   141e8:	83 ec 04             	sub    $0x4,%esp
   141eb:	6a 02                	push   $0x2
   141ed:	ff 75 e0             	push   -0x20(%ebp)
   141f0:	ff 75 f0             	push   -0x10(%ebp)
   141f3:	e8 60 00 00 00       	call   14258 <kernel_itoa>
   141f8:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   141fb:	83 ec 0c             	sub    $0xc,%esp
   141fe:	ff 75 f0             	push   -0x10(%ebp)
   14201:	e8 48 fd ff ff       	call   13f4e <kernel_strlen>
   14206:	83 c4 10             	add    $0x10,%esp
   14209:	01 45 f0             	add    %eax,-0x10(%ebp)
   1420c:	eb 23                	jmp    14231 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   1420e:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   14212:	75 1d                	jne    14231 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   14214:	8b 45 10             	mov    0x10(%ebp),%eax
   14217:	8d 50 04             	lea    0x4(%eax),%edx
   1421a:	89 55 10             	mov    %edx,0x10(%ebp)
   1421d:	8b 00                	mov    (%eax),%eax
   1421f:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   14222:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14225:	8d 50 01             	lea    0x1(%eax),%edx
   14228:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1422b:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1422f:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   14231:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   14238:	eb 01                	jmp    1423b <kernel_vsprintf+0x180>
      default:
        break;
   1423a:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   1423b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1423e:	8d 50 01             	lea    0x1(%eax),%edx
   14241:	89 55 0c             	mov    %edx,0xc(%ebp)
   14244:	0f b6 00             	movzbl (%eax),%eax
   14247:	88 45 e7             	mov    %al,-0x19(%ebp)
   1424a:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   1424e:	0f 85 7f fe ff ff    	jne    140d3 <kernel_vsprintf+0x18>
    }
  }
}
   14254:	90                   	nop
   14255:	90                   	nop
   14256:	c9                   	leave  
   14257:	c3                   	ret    

00014258 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   14258:	55                   	push   %ebp
   14259:	89 e5                	mov    %esp,%ebp
   1425b:	81 ec 90 00 00 00    	sub    $0x90,%esp
  char *p = buf;
   14261:	8b 45 08             	mov    0x8(%ebp),%eax
   14264:	89 45 fc             	mov    %eax,-0x4(%ebp)

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   14267:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1426b:	74 1d                	je     1428a <kernel_itoa+0x32>
   1426d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   14271:	74 17                	je     1428a <kernel_itoa+0x32>
   14273:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   14277:	74 11                	je     1428a <kernel_itoa+0x32>
   14279:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1427d:	74 0b                	je     1428a <kernel_itoa+0x32>
    *buf = '\0';
   1427f:	8b 45 08             	mov    0x8(%ebp),%eax
   14282:	c6 00 00             	movb   $0x0,(%eax)
    return;
   14285:	e9 a2 00 00 00       	jmp    1432c <kernel_itoa+0xd4>
  }

  if (num < 0) {
   1428a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1428e:	79 11                	jns    142a1 <kernel_itoa+0x49>
    *(p++) = '-';
   14290:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14293:	8d 50 01             	lea    0x1(%eax),%edx
   14296:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14299:	c6 00 2d             	movb   $0x2d,(%eax)
    num = -num;
   1429c:	f7 5d 0c             	negl   0xc(%ebp)
   1429f:	eb 1a                	jmp    142bb <kernel_itoa+0x63>
  } else if (num == 0) {
   142a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   142a5:	75 14                	jne    142bb <kernel_itoa+0x63>
    *(p++) = '0';
   142a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   142aa:	8d 50 01             	lea    0x1(%eax),%edx
   142ad:	89 55 fc             	mov    %edx,-0x4(%ebp)
   142b0:	c6 00 30             	movb   $0x30,(%eax)
    *p = '\0';
   142b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   142b6:	c6 00 00             	movb   $0x0,(%eax)
    return;
   142b9:	eb 71                	jmp    1432c <kernel_itoa+0xd4>
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   142bb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  while (num > 0) {
   142c2:	eb 2e                	jmp    142f2 <kernel_itoa+0x9a>
    arr[len++] = num_to_char[num % base];
   142c4:	8b 0d 40 60 01 00    	mov    0x16040,%ecx
   142ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   142cd:	99                   	cltd   
   142ce:	f7 7d 10             	idivl  0x10(%ebp)
   142d1:	89 d0                	mov    %edx,%eax
   142d3:	01 c1                	add    %eax,%ecx
   142d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   142d8:	8d 50 01             	lea    0x1(%eax),%edx
   142db:	89 55 f8             	mov    %edx,-0x8(%ebp)
   142de:	0f b6 11             	movzbl (%ecx),%edx
   142e1:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
    num /= base;
   142e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   142eb:	99                   	cltd   
   142ec:	f7 7d 10             	idivl  0x10(%ebp)
   142ef:	89 45 0c             	mov    %eax,0xc(%ebp)
  while (num > 0) {
   142f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   142f6:	7f cc                	jg     142c4 <kernel_itoa+0x6c>
  }

  for (int i = len - 1; i >= 0; --i) {
   142f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   142fb:	83 e8 01             	sub    $0x1,%eax
   142fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
   14301:	eb 1d                	jmp    14320 <kernel_itoa+0xc8>
    *(p++) = arr[i];
   14303:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14306:	8d 50 01             	lea    0x1(%eax),%edx
   14309:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1430c:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   14312:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14315:	01 ca                	add    %ecx,%edx
   14317:	0f b6 12             	movzbl (%edx),%edx
   1431a:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   1431c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   14320:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14324:	79 dd                	jns    14303 <kernel_itoa+0xab>
  }
  *p = '\0';
   14326:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14329:	c6 00 00             	movb   $0x0,(%eax)
}
   1432c:	c9                   	leave  
   1432d:	c3                   	ret    

0001432e <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   1432e:	55                   	push   %ebp
   1432f:	89 e5                	mov    %esp,%ebp
   14331:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   14334:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   1433b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1433f:	74 15                	je     14356 <strings_count+0x28>
    while (*(strs++)) {
   14341:	eb 04                	jmp    14347 <strings_count+0x19>
      count++;
   14343:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   14347:	8b 45 08             	mov    0x8(%ebp),%eax
   1434a:	8d 50 04             	lea    0x4(%eax),%edx
   1434d:	89 55 08             	mov    %edx,0x8(%ebp)
   14350:	8b 00                	mov    (%eax),%eax
   14352:	85 c0                	test   %eax,%eax
   14354:	75 ed                	jne    14343 <strings_count+0x15>
    }
  }

  return count;
   14356:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   14359:	c9                   	leave  
   1435a:	c3                   	ret    

0001435b <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   1435b:	55                   	push   %ebp
   1435c:	89 e5                	mov    %esp,%ebp
   1435e:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   14361:	8b 45 08             	mov    0x8(%ebp),%eax
   14364:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   14367:	eb 04                	jmp    1436d <get_file_name+0x12>
    s++;
   14369:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   1436d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14370:	0f b6 00             	movzbl (%eax),%eax
   14373:	84 c0                	test   %al,%al
   14375:	75 f2                	jne    14369 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   14377:	eb 04                	jmp    1437d <get_file_name+0x22>
    s--;
   14379:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   1437d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14380:	0f b6 00             	movzbl (%eax),%eax
   14383:	3c 2f                	cmp    $0x2f,%al
   14385:	74 12                	je     14399 <get_file_name+0x3e>
   14387:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1438a:	0f b6 00             	movzbl (%eax),%eax
   1438d:	3c 5c                	cmp    $0x5c,%al
   1438f:	74 08                	je     14399 <get_file_name+0x3e>
   14391:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14394:	3b 45 08             	cmp    0x8(%ebp),%eax
   14397:	73 e0                	jae    14379 <get_file_name+0x1e>
  }

  return s + 1;  
   14399:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1439c:	83 c0 01             	add    $0x1,%eax
   1439f:	c9                   	leave  
   143a0:	c3                   	ret    

000143a1 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   143a1:	55                   	push   %ebp
   143a2:	89 e5                	mov    %esp,%ebp
   143a4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   143a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   143ab:	75 19                	jne    143c6 <list_is_empty+0x25>
   143ad:	68 80 58 01 00       	push   $0x15880
   143b2:	68 64 59 01 00       	push   $0x15964
   143b7:	6a 38                	push   $0x38
   143b9:	68 94 58 01 00       	push   $0x15894
   143be:	e8 0d f7 ff ff       	call   13ad0 <pannic>
   143c3:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   143c6:	8b 45 08             	mov    0x8(%ebp),%eax
   143c9:	8b 40 08             	mov    0x8(%eax),%eax
   143cc:	85 c0                	test   %eax,%eax
   143ce:	0f 94 c0             	sete   %al
   143d1:	0f b6 c0             	movzbl %al,%eax
}
   143d4:	c9                   	leave  
   143d5:	c3                   	ret    

000143d6 <list_get_size>:
static inline int list_get_size(list_t *list) {
   143d6:	55                   	push   %ebp
   143d7:	89 e5                	mov    %esp,%ebp
   143d9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   143dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   143e0:	75 19                	jne    143fb <list_get_size+0x25>
   143e2:	68 80 58 01 00       	push   $0x15880
   143e7:	68 9c 59 01 00       	push   $0x1599c
   143ec:	6a 3e                	push   $0x3e
   143ee:	68 94 58 01 00       	push   $0x15894
   143f3:	e8 d8 f6 ff ff       	call   13ad0 <pannic>
   143f8:	83 c4 10             	add    $0x10,%esp
    return list->size;
   143fb:	8b 45 08             	mov    0x8(%ebp),%eax
   143fe:	8b 40 08             	mov    0x8(%eax),%eax
}
   14401:	c9                   	leave  
   14402:	c3                   	ret    

00014403 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   14403:	55                   	push   %ebp
   14404:	89 e5                	mov    %esp,%ebp
   14406:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14409:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1440d:	74 06                	je     14415 <list_insert_first+0x12>
   1440f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14413:	75 19                	jne    1442e <list_insert_first+0x2b>
   14415:	68 d4 58 01 00       	push   $0x158d4
   1441a:	68 50 59 01 00       	push   $0x15950
   1441f:	6a 0f                	push   $0xf
   14421:	68 04 59 01 00       	push   $0x15904
   14426:	e8 a5 f6 ff ff       	call   13ad0 <pannic>
   1442b:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   1442e:	8b 45 08             	mov    0x8(%ebp),%eax
   14431:	8b 10                	mov    (%eax),%edx
   14433:	8b 45 0c             	mov    0xc(%ebp),%eax
   14436:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   14439:	8b 45 0c             	mov    0xc(%ebp),%eax
   1443c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   14442:	83 ec 0c             	sub    $0xc,%esp
   14445:	ff 75 08             	push   0x8(%ebp)
   14448:	e8 54 ff ff ff       	call   143a1 <list_is_empty>
   1444d:	83 c4 10             	add    $0x10,%esp
   14450:	85 c0                	test   %eax,%eax
   14452:	74 16                	je     1446a <list_insert_first+0x67>
        list->first = list->last = node;
   14454:	8b 45 08             	mov    0x8(%ebp),%eax
   14457:	8b 55 0c             	mov    0xc(%ebp),%edx
   1445a:	89 50 04             	mov    %edx,0x4(%eax)
   1445d:	8b 45 08             	mov    0x8(%ebp),%eax
   14460:	8b 50 04             	mov    0x4(%eax),%edx
   14463:	8b 45 08             	mov    0x8(%ebp),%eax
   14466:	89 10                	mov    %edx,(%eax)
   14468:	eb 12                	jmp    1447c <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1446a:	8b 45 08             	mov    0x8(%ebp),%eax
   1446d:	8b 00                	mov    (%eax),%eax
   1446f:	8b 55 0c             	mov    0xc(%ebp),%edx
   14472:	89 10                	mov    %edx,(%eax)
        list->first = node;
   14474:	8b 45 08             	mov    0x8(%ebp),%eax
   14477:	8b 55 0c             	mov    0xc(%ebp),%edx
   1447a:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   1447c:	8b 45 08             	mov    0x8(%ebp),%eax
   1447f:	8b 40 08             	mov    0x8(%eax),%eax
   14482:	8d 50 01             	lea    0x1(%eax),%edx
   14485:	8b 45 08             	mov    0x8(%ebp),%eax
   14488:	89 50 08             	mov    %edx,0x8(%eax)
}
   1448b:	90                   	nop
   1448c:	c9                   	leave  
   1448d:	c3                   	ret    

0001448e <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1448e:	55                   	push   %ebp
   1448f:	89 e5                	mov    %esp,%ebp
   14491:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14494:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14498:	74 06                	je     144a0 <list_insert_last+0x12>
   1449a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1449e:	75 19                	jne    144b9 <list_insert_last+0x2b>
   144a0:	68 d4 58 01 00       	push   $0x158d4
   144a5:	68 74 59 01 00       	push   $0x15974
   144aa:	6a 1f                	push   $0x1f
   144ac:	68 04 59 01 00       	push   $0x15904
   144b1:	e8 1a f6 ff ff       	call   13ad0 <pannic>
   144b6:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   144b9:	8b 45 08             	mov    0x8(%ebp),%eax
   144bc:	8b 50 04             	mov    0x4(%eax),%edx
   144bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   144c2:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   144c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   144c7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   144ce:	83 ec 0c             	sub    $0xc,%esp
   144d1:	ff 75 08             	push   0x8(%ebp)
   144d4:	e8 c8 fe ff ff       	call   143a1 <list_is_empty>
   144d9:	83 c4 10             	add    $0x10,%esp
   144dc:	85 c0                	test   %eax,%eax
   144de:	74 16                	je     144f6 <list_insert_last+0x68>
        list->first = list->last = node;
   144e0:	8b 45 08             	mov    0x8(%ebp),%eax
   144e3:	8b 55 0c             	mov    0xc(%ebp),%edx
   144e6:	89 50 04             	mov    %edx,0x4(%eax)
   144e9:	8b 45 08             	mov    0x8(%ebp),%eax
   144ec:	8b 50 04             	mov    0x4(%eax),%edx
   144ef:	8b 45 08             	mov    0x8(%ebp),%eax
   144f2:	89 10                	mov    %edx,(%eax)
   144f4:	eb 15                	jmp    1450b <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   144f6:	8b 45 08             	mov    0x8(%ebp),%eax
   144f9:	8b 40 04             	mov    0x4(%eax),%eax
   144fc:	8b 55 0c             	mov    0xc(%ebp),%edx
   144ff:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   14502:	8b 45 08             	mov    0x8(%ebp),%eax
   14505:	8b 55 0c             	mov    0xc(%ebp),%edx
   14508:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   1450b:	8b 45 08             	mov    0x8(%ebp),%eax
   1450e:	8b 40 08             	mov    0x8(%eax),%eax
   14511:	8d 50 01             	lea    0x1(%eax),%edx
   14514:	8b 45 08             	mov    0x8(%ebp),%eax
   14517:	89 50 08             	mov    %edx,0x8(%eax)

}
   1451a:	90                   	nop
   1451b:	c9                   	leave  
   1451c:	c3                   	ret    

0001451d <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   1451d:	55                   	push   %ebp
   1451e:	89 e5                	mov    %esp,%ebp
   14520:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   14523:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14527:	75 19                	jne    14542 <list_remove_first+0x25>
   14529:	68 3a 59 01 00       	push   $0x1593a
   1452e:	68 88 59 01 00       	push   $0x15988
   14533:	6a 31                	push   $0x31
   14535:	68 04 59 01 00       	push   $0x15904
   1453a:	e8 91 f5 ff ff       	call   13ad0 <pannic>
   1453f:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   14542:	83 ec 0c             	sub    $0xc,%esp
   14545:	ff 75 08             	push   0x8(%ebp)
   14548:	e8 54 fe ff ff       	call   143a1 <list_is_empty>
   1454d:	83 c4 10             	add    $0x10,%esp
   14550:	85 c0                	test   %eax,%eax
   14552:	74 07                	je     1455b <list_remove_first+0x3e>
        return (list_node_t*)0;
   14554:	b8 00 00 00 00       	mov    $0x0,%eax
   14559:	eb 71                	jmp    145cc <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   1455b:	8b 45 08             	mov    0x8(%ebp),%eax
   1455e:	8b 00                	mov    (%eax),%eax
   14560:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   14563:	83 ec 0c             	sub    $0xc,%esp
   14566:	ff 75 08             	push   0x8(%ebp)
   14569:	e8 68 fe ff ff       	call   143d6 <list_get_size>
   1456e:	83 c4 10             	add    $0x10,%esp
   14571:	83 f8 01             	cmp    $0x1,%eax
   14574:	75 17                	jne    1458d <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   14576:	8b 45 08             	mov    0x8(%ebp),%eax
   14579:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14580:	8b 45 08             	mov    0x8(%ebp),%eax
   14583:	8b 50 04             	mov    0x4(%eax),%edx
   14586:	8b 45 08             	mov    0x8(%ebp),%eax
   14589:	89 10                	mov    %edx,(%eax)
   1458b:	eb 18                	jmp    145a5 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   1458d:	8b 45 08             	mov    0x8(%ebp),%eax
   14590:	8b 00                	mov    (%eax),%eax
   14592:	8b 50 04             	mov    0x4(%eax),%edx
   14595:	8b 45 08             	mov    0x8(%ebp),%eax
   14598:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   1459a:	8b 45 08             	mov    0x8(%ebp),%eax
   1459d:	8b 00                	mov    (%eax),%eax
   1459f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   145a5:	8b 45 08             	mov    0x8(%ebp),%eax
   145a8:	8b 40 08             	mov    0x8(%eax),%eax
   145ab:	8d 50 ff             	lea    -0x1(%eax),%edx
   145ae:	8b 45 08             	mov    0x8(%ebp),%eax
   145b1:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   145b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145b7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   145be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145c1:	8b 50 04             	mov    0x4(%eax),%edx
   145c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145c7:	89 10                	mov    %edx,(%eax)
    return ret;
   145c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   145cc:	c9                   	leave  
   145cd:	c3                   	ret    

000145ce <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   145ce:	55                   	push   %ebp
   145cf:	89 e5                	mov    %esp,%ebp
   145d1:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   145d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   145d8:	75 19                	jne    145f3 <list_remove_last+0x25>
   145da:	68 3a 59 01 00       	push   $0x1593a
   145df:	68 ac 59 01 00       	push   $0x159ac
   145e4:	6a 46                	push   $0x46
   145e6:	68 04 59 01 00       	push   $0x15904
   145eb:	e8 e0 f4 ff ff       	call   13ad0 <pannic>
   145f0:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   145f3:	83 ec 0c             	sub    $0xc,%esp
   145f6:	ff 75 08             	push   0x8(%ebp)
   145f9:	e8 a3 fd ff ff       	call   143a1 <list_is_empty>
   145fe:	83 c4 10             	add    $0x10,%esp
   14601:	85 c0                	test   %eax,%eax
   14603:	74 07                	je     1460c <list_remove_last+0x3e>
        return (list_node_t*)0;
   14605:	b8 00 00 00 00       	mov    $0x0,%eax
   1460a:	eb 75                	jmp    14681 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   1460c:	8b 45 08             	mov    0x8(%ebp),%eax
   1460f:	8b 40 04             	mov    0x4(%eax),%eax
   14612:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   14615:	83 ec 0c             	sub    $0xc,%esp
   14618:	ff 75 08             	push   0x8(%ebp)
   1461b:	e8 b6 fd ff ff       	call   143d6 <list_get_size>
   14620:	83 c4 10             	add    $0x10,%esp
   14623:	83 f8 01             	cmp    $0x1,%eax
   14626:	75 17                	jne    1463f <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   14628:	8b 45 08             	mov    0x8(%ebp),%eax
   1462b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14632:	8b 45 08             	mov    0x8(%ebp),%eax
   14635:	8b 50 04             	mov    0x4(%eax),%edx
   14638:	8b 45 08             	mov    0x8(%ebp),%eax
   1463b:	89 10                	mov    %edx,(%eax)
   1463d:	eb 1b                	jmp    1465a <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   1463f:	8b 45 08             	mov    0x8(%ebp),%eax
   14642:	8b 40 04             	mov    0x4(%eax),%eax
   14645:	8b 10                	mov    (%eax),%edx
   14647:	8b 45 08             	mov    0x8(%ebp),%eax
   1464a:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   1464d:	8b 45 08             	mov    0x8(%ebp),%eax
   14650:	8b 40 04             	mov    0x4(%eax),%eax
   14653:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   1465a:	8b 45 08             	mov    0x8(%ebp),%eax
   1465d:	8b 40 08             	mov    0x8(%eax),%eax
   14660:	8d 50 ff             	lea    -0x1(%eax),%edx
   14663:	8b 45 08             	mov    0x8(%ebp),%eax
   14666:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   14669:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1466c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14673:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14676:	8b 50 04             	mov    0x4(%eax),%edx
   14679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1467c:	89 10                	mov    %edx,(%eax)
    return ret;
   1467e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14681:	c9                   	leave  
   14682:	c3                   	ret    

00014683 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   14683:	55                   	push   %ebp
   14684:	89 e5                	mov    %esp,%ebp
   14686:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14689:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1468d:	74 06                	je     14695 <list_remove+0x12>
   1468f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14693:	75 19                	jne    146ae <list_remove+0x2b>
   14695:	68 d4 58 01 00       	push   $0x158d4
   1469a:	68 c0 59 01 00       	push   $0x159c0
   1469f:	6a 5b                	push   $0x5b
   146a1:	68 04 59 01 00       	push   $0x15904
   146a6:	e8 25 f4 ff ff       	call   13ad0 <pannic>
   146ab:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   146ae:	83 ec 0c             	sub    $0xc,%esp
   146b1:	ff 75 08             	push   0x8(%ebp)
   146b4:	e8 e8 fc ff ff       	call   143a1 <list_is_empty>
   146b9:	83 c4 10             	add    $0x10,%esp
   146bc:	85 c0                	test   %eax,%eax
   146be:	74 0a                	je     146ca <list_remove+0x47>
        return (list_node_t*)0;
   146c0:	b8 00 00 00 00       	mov    $0x0,%eax
   146c5:	e9 80 00 00 00       	jmp    1474a <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   146ca:	8b 45 08             	mov    0x8(%ebp),%eax
   146cd:	8b 00                	mov    (%eax),%eax
   146cf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   146d2:	75 0b                	jne    146df <list_remove+0x5c>
   146d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   146d7:	8b 50 04             	mov    0x4(%eax),%edx
   146da:	8b 45 08             	mov    0x8(%ebp),%eax
   146dd:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   146df:	8b 45 08             	mov    0x8(%ebp),%eax
   146e2:	8b 40 04             	mov    0x4(%eax),%eax
   146e5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   146e8:	75 0b                	jne    146f5 <list_remove+0x72>
   146ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   146ed:	8b 10                	mov    (%eax),%edx
   146ef:	8b 45 08             	mov    0x8(%ebp),%eax
   146f2:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   146f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   146f8:	8b 00                	mov    (%eax),%eax
   146fa:	85 c0                	test   %eax,%eax
   146fc:	74 0e                	je     1470c <list_remove+0x89>
   146fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   14701:	8b 00                	mov    (%eax),%eax
   14703:	8b 55 0c             	mov    0xc(%ebp),%edx
   14706:	8b 52 04             	mov    0x4(%edx),%edx
   14709:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   1470c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1470f:	8b 40 04             	mov    0x4(%eax),%eax
   14712:	85 c0                	test   %eax,%eax
   14714:	74 0d                	je     14723 <list_remove+0xa0>
   14716:	8b 45 0c             	mov    0xc(%ebp),%eax
   14719:	8b 40 04             	mov    0x4(%eax),%eax
   1471c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1471f:	8b 12                	mov    (%edx),%edx
   14721:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   14723:	8b 45 0c             	mov    0xc(%ebp),%eax
   14726:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1472d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14730:	8b 50 04             	mov    0x4(%eax),%edx
   14733:	8b 45 0c             	mov    0xc(%ebp),%eax
   14736:	89 10                	mov    %edx,(%eax)
    list->size--;
   14738:	8b 45 08             	mov    0x8(%ebp),%eax
   1473b:	8b 40 08             	mov    0x8(%eax),%eax
   1473e:	8d 50 ff             	lea    -0x1(%eax),%edx
   14741:	8b 45 08             	mov    0x8(%ebp),%eax
   14744:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   14747:	8b 45 0c             	mov    0xc(%ebp),%eax
   1474a:	c9                   	leave  
   1474b:	c3                   	ret    

0001474c <inb>:
static inline uint8_t inb(uint16_t port) {
   1474c:	55                   	push   %ebp
   1474d:	89 e5                	mov    %esp,%ebp
   1474f:	83 ec 14             	sub    $0x14,%esp
   14752:	8b 45 08             	mov    0x8(%ebp),%eax
   14755:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14759:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1475d:	89 c2                	mov    %eax,%edx
   1475f:	ec                   	in     (%dx),%al
   14760:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14763:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14767:	c9                   	leave  
   14768:	c3                   	ret    

00014769 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14769:	55                   	push   %ebp
   1476a:	89 e5                	mov    %esp,%ebp
   1476c:	83 ec 08             	sub    $0x8,%esp
   1476f:	8b 45 08             	mov    0x8(%ebp),%eax
   14772:	8b 55 0c             	mov    0xc(%ebp),%edx
   14775:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14779:	89 d0                	mov    %edx,%eax
   1477b:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1477e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14782:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14786:	ee                   	out    %al,(%dx)
}
   14787:	90                   	nop
   14788:	c9                   	leave  
   14789:	c3                   	ret    

0001478a <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1478a:	55                   	push   %ebp
   1478b:	89 e5                	mov    %esp,%ebp
   1478d:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   14790:	6a 00                	push   $0x0
   14792:	68 f9 03 00 00       	push   $0x3f9
   14797:	e8 cd ff ff ff       	call   14769 <outb>
   1479c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   1479f:	68 80 00 00 00       	push   $0x80
   147a4:	68 fb 03 00 00       	push   $0x3fb
   147a9:	e8 bb ff ff ff       	call   14769 <outb>
   147ae:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   147b1:	6a 03                	push   $0x3
   147b3:	68 f8 03 00 00       	push   $0x3f8
   147b8:	e8 ac ff ff ff       	call   14769 <outb>
   147bd:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   147c0:	6a 00                	push   $0x0
   147c2:	68 f9 03 00 00       	push   $0x3f9
   147c7:	e8 9d ff ff ff       	call   14769 <outb>
   147cc:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   147cf:	6a 03                	push   $0x3
   147d1:	68 fb 03 00 00       	push   $0x3fb
   147d6:	e8 8e ff ff ff       	call   14769 <outb>
   147db:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   147de:	68 c7 00 00 00       	push   $0xc7
   147e3:	68 fa 03 00 00       	push   $0x3fa
   147e8:	e8 7c ff ff ff       	call   14769 <outb>
   147ed:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   147f0:	6a 0f                	push   $0xf
   147f2:	68 fc 03 00 00       	push   $0x3fc
   147f7:	e8 6d ff ff ff       	call   14769 <outb>
   147fc:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   147ff:	83 ec 0c             	sub    $0xc,%esp
   14802:	68 08 8e 03 00       	push   $0x38e08
   14807:	e8 af eb ff ff       	call   133bb <mutex_init>
   1480c:	83 c4 10             	add    $0x10,%esp
}
   1480f:	90                   	nop
   14810:	c9                   	leave  
   14811:	c3                   	ret    

00014812 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   14812:	55                   	push   %ebp
   14813:	89 e5                	mov    %esp,%ebp
   14815:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1481b:	83 ec 04             	sub    $0x4,%esp
   1481e:	68 80 00 00 00       	push   $0x80
   14823:	6a 00                	push   $0x0
   14825:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1482b:	50                   	push   %eax
   1482c:	e8 a1 f7 ff ff       	call   13fd2 <kernel_memset>
   14831:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   14834:	8d 45 0c             	lea    0xc(%ebp),%eax
   14837:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1483d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   14843:	83 ec 04             	sub    $0x4,%esp
   14846:	50                   	push   %eax
   14847:	ff 75 08             	push   0x8(%ebp)
   1484a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14850:	50                   	push   %eax
   14851:	e8 65 f8 ff ff       	call   140bb <kernel_vsprintf>
   14856:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   14859:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1485f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   14862:	83 ec 0c             	sub    $0xc,%esp
   14865:	68 08 8e 03 00       	push   $0x38e08
   1486a:	e8 99 eb ff ff       	call   13408 <mutex_lock>
   1486f:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   14872:	eb 57                	jmp    148cb <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   14874:	90                   	nop
   14875:	83 ec 0c             	sub    $0xc,%esp
   14878:	68 fd 03 00 00       	push   $0x3fd
   1487d:	e8 ca fe ff ff       	call   1474c <inb>
   14882:	83 c4 10             	add    $0x10,%esp
   14885:	0f b6 c0             	movzbl %al,%eax
   14888:	83 e0 40             	and    $0x40,%eax
   1488b:	85 c0                	test   %eax,%eax
   1488d:	74 e6                	je     14875 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   1488f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14892:	0f b6 00             	movzbl (%eax),%eax
   14895:	3c 0a                	cmp    $0xa,%al
   14897:	75 12                	jne    148ab <log_printf+0x99>
   14899:	83 ec 08             	sub    $0x8,%esp
   1489c:	6a 0d                	push   $0xd
   1489e:	68 f8 03 00 00       	push   $0x3f8
   148a3:	e8 c1 fe ff ff       	call   14769 <outb>
   148a8:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   148ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148ae:	8d 50 01             	lea    0x1(%eax),%edx
   148b1:	89 55 f4             	mov    %edx,-0xc(%ebp)
   148b4:	0f b6 00             	movzbl (%eax),%eax
   148b7:	0f b6 c0             	movzbl %al,%eax
   148ba:	83 ec 08             	sub    $0x8,%esp
   148bd:	50                   	push   %eax
   148be:	68 f8 03 00 00       	push   $0x3f8
   148c3:	e8 a1 fe ff ff       	call   14769 <outb>
   148c8:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   148cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148ce:	0f b6 00             	movzbl (%eax),%eax
   148d1:	84 c0                	test   %al,%al
   148d3:	75 9f                	jne    14874 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   148d5:	83 ec 08             	sub    $0x8,%esp
   148d8:	6a 0d                	push   $0xd
   148da:	68 f8 03 00 00       	push   $0x3f8
   148df:	e8 85 fe ff ff       	call   14769 <outb>
   148e4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   148e7:	83 ec 08             	sub    $0x8,%esp
   148ea:	6a 0a                	push   $0xa
   148ec:	68 f8 03 00 00       	push   $0x3f8
   148f1:	e8 73 fe ff ff       	call   14769 <outb>
   148f6:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   148f9:	83 ec 0c             	sub    $0xc,%esp
   148fc:	68 08 8e 03 00       	push   $0x38e08
   14901:	e8 93 eb ff ff       	call   13499 <mutex_unlock>
   14906:	83 c4 10             	add    $0x10,%esp
   14909:	90                   	nop
   1490a:	c9                   	leave  
   1490b:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    //     //msleep(100);
    // }
    
    int pid;
    int i;
    for (i = 0; i < 1; ++i) {
80000016:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8000001d:	eb 12                	jmp    80000031 <first_main+0x21>
        pid = fork();
8000001f:	e8 72 01 00 00       	call   80000196 <fork>
80000024:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (pid == 0)
80000027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8000002b:	74 0c                	je     80000039 <first_main+0x29>
    for (i = 0; i < 1; ++i) {
8000002d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80000031:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000035:	7e e8                	jle    8000001f <first_main+0xf>
80000037:	eb 01                	jmp    8000003a <first_main+0x2a>
            break;
80000039:	90                   	nop
    }

    char * const argv[] = {"arg0", "arg1", "arg2", "arg3", 0};
8000003a:	c7 45 dc a4 00 00 80 	movl   $0x800000a4,-0x24(%ebp)
80000041:	c7 45 e0 a9 00 00 80 	movl   $0x800000a9,-0x20(%ebp)
80000048:	c7 45 e4 ae 00 00 80 	movl   $0x800000ae,-0x1c(%ebp)
8000004f:	c7 45 e8 b3 00 00 80 	movl   $0x800000b3,-0x18(%ebp)
80000056:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    print_msg("i = %d", i);
8000005d:	83 ec 08             	sub    $0x8,%esp
80000060:	ff 75 f0             	push   -0x10(%ebp)
80000063:	68 b8 00 00 80       	push   $0x800000b8
80000068:	e8 01 01 00 00       	call   8000016e <print_msg>
8000006d:	83 c4 10             	add    $0x10,%esp
    print_msg("fist task pid = %d", getpid());
80000070:	e8 de 00 00 00       	call   80000153 <getpid>
80000075:	83 ec 08             	sub    $0x8,%esp
80000078:	50                   	push   %eax
80000079:	68 bf 00 00 80       	push   $0x800000bf
8000007e:	e8 eb 00 00 00       	call   8000016e <print_msg>
80000083:	83 c4 10             	add    $0x10,%esp
    if (pid != 0) execve("/shell.elf", argv, 0);
80000086:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8000008a:	74 16                	je     800000a2 <first_main+0x92>
8000008c:	83 ec 04             	sub    $0x4,%esp
8000008f:	6a 00                	push   $0x0
80000091:	8d 45 dc             	lea    -0x24(%ebp),%eax
80000094:	50                   	push   %eax
80000095:	68 d2 00 00 80       	push   $0x800000d2
8000009a:	e8 12 01 00 00       	call   800001b1 <execve>
8000009f:	83 c4 10             	add    $0x10,%esp
    
    for (;;)
800000a2:	eb fe                	jmp    800000a2 <first_main+0x92>
800000a4:	61                   	popa   
800000a5:	72 67                	jb     8000010e <sys_call+0x31>
800000a7:	30 00                	xor    %al,(%eax)
800000a9:	61                   	popa   
800000aa:	72 67                	jb     80000113 <sys_call+0x36>
800000ac:	31 00                	xor    %eax,(%eax)
800000ae:	61                   	popa   
800000af:	72 67                	jb     80000118 <sys_call+0x3b>
800000b1:	32 00                	xor    (%eax),%al
800000b3:	61                   	popa   
800000b4:	72 67                	jb     8000011d <sys_call+0x40>
800000b6:	33 00                	xor    (%eax),%eax
800000b8:	69 20 3d 20 25 64    	imul   $0x6425203d,(%eax),%esp
800000be:	00 66 69             	add    %ah,0x69(%esi)
800000c1:	73 74                	jae    80000137 <msleep+0xe>
800000c3:	20 74 61 73          	and    %dh,0x73(%ecx,%eiz,2)
800000c7:	6b 20 70             	imul   $0x70,(%eax),%esp
800000ca:	69 64 20 3d 20 25 64 	imul   $0x642520,0x3d(%eax,%eiz,1),%esp
800000d1:	00 
800000d2:	2f                   	das    
800000d3:	73 68                	jae    8000013d <msleep+0x14>
800000d5:	65 6c                	gs insb (%dx),%es:(%edi)
800000d7:	6c                   	insb   (%dx),%es:(%edi)
800000d8:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
800000db:	66                   	data16
	...

800000dd <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
800000dd:	55                   	push   %ebp
800000de:	89 e5                	mov    %esp,%ebp
800000e0:	57                   	push   %edi
800000e1:	56                   	push   %esi
800000e2:	53                   	push   %ebx
800000e3:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000e6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000ed:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000f4:	8b 45 08             	mov    0x8(%ebp),%eax
800000f7:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000fa:	8b 55 08             	mov    0x8(%ebp),%edx
800000fd:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000100:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000103:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000106:	8b 5d 08             	mov    0x8(%ebp),%ebx
80000109:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000010c:	8b 75 08             	mov    0x8(%ebp),%esi
8000010f:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000111:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000114:	50                   	push   %eax
80000115:	52                   	push   %edx
80000116:	51                   	push   %ecx
80000117:	53                   	push   %ebx
80000118:	56                   	push   %esi
80000119:	ff 1f                	lcall  *(%edi)
8000011b:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8000011e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000121:	83 c4 10             	add    $0x10,%esp
80000124:	5b                   	pop    %ebx
80000125:	5e                   	pop    %esi
80000126:	5f                   	pop    %edi
80000127:	5d                   	pop    %ebp
80000128:	c3                   	ret    

80000129 <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
80000129:	55                   	push   %ebp
8000012a:	89 e5                	mov    %esp,%ebp
8000012c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
8000012f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000133:	7e 1b                	jle    80000150 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000135:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000013c:	8b 45 08             	mov    0x8(%ebp),%eax
8000013f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000142:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000145:	50                   	push   %eax
80000146:	e8 92 ff ff ff       	call   800000dd <sys_call>
8000014b:	83 c4 04             	add    $0x4,%esp
8000014e:	eb 01                	jmp    80000151 <msleep+0x28>
    if (ms <= 0) return;
80000150:	90                   	nop

}
80000151:	c9                   	leave  
80000152:	c3                   	ret    

80000153 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000153:	55                   	push   %ebp
80000154:	89 e5                	mov    %esp,%ebp
80000156:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000159:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000160:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000163:	50                   	push   %eax
80000164:	e8 74 ff ff ff       	call   800000dd <sys_call>
80000169:	83 c4 04             	add    $0x4,%esp
}
8000016c:	c9                   	leave  
8000016d:	c3                   	ret    

8000016e <print_msg>:

void print_msg(const char *fmt, int arg) {
8000016e:	55                   	push   %ebp
8000016f:	89 e5                	mov    %esp,%ebp
80000171:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000174:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000017b:	8b 45 08             	mov    0x8(%ebp),%eax
8000017e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000181:	8b 45 0c             	mov    0xc(%ebp),%eax
80000184:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000187:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000018a:	50                   	push   %eax
8000018b:	e8 4d ff ff ff       	call   800000dd <sys_call>
80000190:	83 c4 04             	add    $0x4,%esp
}
80000193:	90                   	nop
80000194:	c9                   	leave  
80000195:	c3                   	ret    

80000196 <fork>:

int fork (void) {
80000196:	55                   	push   %ebp
80000197:	89 e5                	mov    %esp,%ebp
80000199:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000019c:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800001a3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001a6:	50                   	push   %eax
800001a7:	e8 31 ff ff ff       	call   800000dd <sys_call>
800001ac:	83 c4 04             	add    $0x4,%esp
}
800001af:	c9                   	leave  
800001b0:	c3                   	ret    

800001b1 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001b1:	55                   	push   %ebp
800001b2:	89 e5                	mov    %esp,%ebp
800001b4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001b7:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001be:	8b 45 08             	mov    0x8(%ebp),%eax
800001c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001c4:	8b 45 0c             	mov    0xc(%ebp),%eax
800001c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001ca:	8b 45 10             	mov    0x10(%ebp),%eax
800001cd:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001d0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d3:	50                   	push   %eax
800001d4:	e8 04 ff ff ff       	call   800000dd <sys_call>
800001d9:	83 c4 04             	add    $0x4,%esp
}
800001dc:	c9                   	leave  
800001dd:	c3                   	ret    

800001de <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001de:	55                   	push   %ebp
800001df:	89 e5                	mov    %esp,%ebp
800001e1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001e4:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001eb:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ee:	50                   	push   %eax
800001ef:	e8 e9 fe ff ff       	call   800000dd <sys_call>
800001f4:	83 c4 04             	add    $0x4,%esp
}
800001f7:	c9                   	leave  
800001f8:	c3                   	ret    

800001f9 <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001f9:	55                   	push   %ebp
800001fa:	89 e5                	mov    %esp,%ebp
800001fc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
800001ff:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000206:	8b 45 08             	mov    0x8(%ebp),%eax
80000209:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8000020c:	8b 45 0c             	mov    0xc(%ebp),%eax
8000020f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000212:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000215:	50                   	push   %eax
80000216:	e8 c2 fe ff ff       	call   800000dd <sys_call>
8000021b:	83 c4 04             	add    $0x4,%esp
}
8000021e:	c9                   	leave  
8000021f:	c3                   	ret    

80000220 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000220:	55                   	push   %ebp
80000221:	89 e5                	mov    %esp,%ebp
80000223:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000226:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000022d:	8b 45 08             	mov    0x8(%ebp),%eax
80000230:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000233:	8b 45 0c             	mov    0xc(%ebp),%eax
80000236:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000239:	8b 45 10             	mov    0x10(%ebp),%eax
8000023c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000023f:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000242:	50                   	push   %eax
80000243:	e8 95 fe ff ff       	call   800000dd <sys_call>
80000248:	83 c4 04             	add    $0x4,%esp
}
8000024b:	c9                   	leave  
8000024c:	c3                   	ret    

8000024d <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000024d:	55                   	push   %ebp
8000024e:	89 e5                	mov    %esp,%ebp
80000250:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000253:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000025a:	8b 45 08             	mov    0x8(%ebp),%eax
8000025d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000260:	8b 45 0c             	mov    0xc(%ebp),%eax
80000263:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000266:	8b 45 10             	mov    0x10(%ebp),%eax
80000269:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000026c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000026f:	50                   	push   %eax
80000270:	e8 68 fe ff ff       	call   800000dd <sys_call>
80000275:	83 c4 04             	add    $0x4,%esp
}
80000278:	c9                   	leave  
80000279:	c3                   	ret    

8000027a <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000027a:	55                   	push   %ebp
8000027b:	89 e5                	mov    %esp,%ebp
8000027d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000280:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000287:	8b 45 08             	mov    0x8(%ebp),%eax
8000028a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000028d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000290:	50                   	push   %eax
80000291:	e8 47 fe ff ff       	call   800000dd <sys_call>
80000296:	83 c4 04             	add    $0x4,%esp
}
80000299:	c9                   	leave  
8000029a:	c3                   	ret    

8000029b <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000029b:	55                   	push   %ebp
8000029c:	89 e5                	mov    %esp,%ebp
8000029e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002a1:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
800002a8:	8b 45 08             	mov    0x8(%ebp),%eax
800002ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002ae:	8b 45 0c             	mov    0xc(%ebp),%eax
800002b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002b4:	8b 45 10             	mov    0x10(%ebp),%eax
800002b7:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002bd:	50                   	push   %eax
800002be:	e8 1a fe ff ff       	call   800000dd <sys_call>
800002c3:	83 c4 04             	add    $0x4,%esp
}
800002c6:	c9                   	leave  
800002c7:	c3                   	ret    

800002c8 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002c8:	55                   	push   %ebp
800002c9:	89 e5                	mov    %esp,%ebp
800002cb:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002ce:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002d5:	8b 45 08             	mov    0x8(%ebp),%eax
800002d8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002db:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002de:	50                   	push   %eax
800002df:	e8 f9 fd ff ff       	call   800000dd <sys_call>
800002e4:	83 c4 04             	add    $0x4,%esp
}
800002e7:	c9                   	leave  
800002e8:	c3                   	ret    

800002e9 <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002e9:	55                   	push   %ebp
800002ea:	89 e5                	mov    %esp,%ebp
800002ec:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002ef:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002f6:	8b 45 08             	mov    0x8(%ebp),%eax
800002f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002fc:	8b 45 0c             	mov    0xc(%ebp),%eax
800002ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000302:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000305:	50                   	push   %eax
80000306:	e8 d2 fd ff ff       	call   800000dd <sys_call>
8000030b:	83 c4 04             	add    $0x4,%esp
}
8000030e:	c9                   	leave  
8000030f:	c3                   	ret    

80000310 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000310:	55                   	push   %ebp
80000311:	89 e5                	mov    %esp,%ebp
80000313:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000316:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
8000031d:	8b 45 08             	mov    0x8(%ebp),%eax
80000320:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000323:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000326:	50                   	push   %eax
80000327:	e8 b1 fd ff ff       	call   800000dd <sys_call>
8000032c:	83 c4 04             	add    $0x4,%esp
8000032f:	c9                   	leave  
80000330:	c3                   	ret    
