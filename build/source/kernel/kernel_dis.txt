
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003a54 memsz 0x00020830 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee8  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000b68  00012ee8  00012ee8  00003ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00013a50  00013a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cdd0  00013a60  00013a60  00004a54  2**5
                  ALLOC
  4 .debug_line   00001982  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000650  00000000  00000000  000063d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004977  00000000  00000000  00006a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001690  00000000  00000000  0000b39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000f4e  00000000  00000000  0000cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000db5e  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000011d4  00000000  00000000  0000db8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
00013a60 l     O .bss	00000028 paddr_alloc
000102ba l     F .text	0000005d addr_alloc_init
00010317 l     F .text	00000067 addr_alloc_page
0001037e l     F .text	00000061 addr_free_page
000103df l     F .text	00000066 show_mem_info
00010445 l     F .text	00000037 total_mem_size
00012fa0 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
00010560 l     F .text	0000003d list_node_init
00013080 l     O .rodata	0000000f __func__.9
0001059d l     F .text	0000002d list_node_next
000130e0 l     O .rodata	0000000f __func__.3
000105ca l     F .text	00000047 list_init
00013090 l     O .rodata	0000000a __func__.8
00010611 l     F .text	00000035 list_is_empty
000130f0 l     O .rodata	0000000e __func__.2
00010646 l     F .text	0000002d list_get_size
000130d0 l     O .rodata	0000000e __func__.4
00010673 l     F .text	0000002c list_get_first
000130c0 l     O .rodata	0000000f __func__.5
0001069f l     F .text	00000007 hlt
000106a6 l     F .text	0000001a far_jump
000106c0 l     F .text	00000017 write_tr
00013aa0 l     O .bss	00000190 task_manager
000106d7 l     F .text	0000001f switch_to_tss
00010711 l     F .text	000000e5 tss_init
00013074 l     O .rodata	0000000a __func__.10
00013c40 l     O .bss	00000200 empty_task_stack
000108da l     F .text	0000000a empty_task
0001309c l     O .rodata	0000000f __func__.7
000130ac l     O .rodata	00000011 __func__.6
00013100 l     O .rodata	0000000f __func__.1
00013110 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010d5a l     F .text	00000028 lgdt
00013e40 l     O .bss	00010000 gdt_table
00023e40 l     O .bss	00008000 is_alloc
0002be40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010f4c l     F .text	00000007 cli
00010f53 l     F .text	00000007 sti
00010f5a l     F .text	00000007 hlt
00010f61 l     F .text	0000001d inb
00010f7e l     F .text	00000021 outb
00010f9f l     F .text	00000028 lidt
00010fc7 l     F .text	00000010 read_eflags
00010fd7 l     F .text	0000000b write_eflags
0002be60 l     O .bss	00000800 idt_table
00010fe2 l     F .text	000000e9 print_exception_fram
000110cb l     F .text	0000003e do_default_handler
00011355 l     F .text	00000047 gate_desc_set
000113dc l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011786 l     F .text	00000021 outb
0002c660 l     O .bss	00000004 sys_tick
000117cf l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011849 l     F .text	00000007 sti
00013520 l     O .rodata	0000000c __func__.0
0002c680 l     O .bss	000000b4 task_test_task_1
0002c740 l     O .bss	000000b4 task_test_task_2
0002c800 l     O .bss	00001000 test_task_1_stack
0002d800 l     O .bss	00001000 test_task_2_stack
0002e800 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
0001198e l     F .text	00000047 list_init
000135d8 l     O .rodata	0000000a __func__.1
000119d5 l     F .text	00000035 list_is_empty
000135e4 l     O .rodata	0000000e __func__.0
000135cc l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011ba0 l     F .text	00000047 list_init
00013698 l     O .rodata	0000000a __func__.1
00011be7 l     F .text	00000035 list_is_empty
000136a4 l     O .rodata	0000000e __func__.0
0001368c l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011d70 l     F .text	00000047 list_init
000137b8 l     O .rodata	0000000a __func__.3
00011db7 l     F .text	0000002d list_get_size
000137c4 l     O .rodata	0000000e __func__.2
00011de4 l     F .text	0000002c list_get_first
000137e4 l     O .rodata	0000000f __func__.0
00011e10 l     F .text	0000002d list_get_last
000137d4 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012118 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
000138b4 l     O .rodata	0000000c __func__.3
000138c0 l     O .rodata	0000000f __func__.2
000138d0 l     O .rodata	0000000f __func__.1
000138e0 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00013a50 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
0001297d l     F .text	00000035 list_is_empty
000139e8 l     O .rodata	0000000e __func__.5
000129b2 l     F .text	0000002d list_get_size
00013a20 l     O .rodata	0000000e __func__.2
000139d4 l     O .rodata	00000012 __func__.6
000139f8 l     O .rodata	00000011 __func__.4
00013a0c l     O .rodata	00000012 __func__.3
00013a30 l     O .rodata	00000011 __func__.1
00013a44 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012d28 l     F .text	0000001d inb
00012d45 l     F .text	00000021 outb
0002e810 l     O .bss	00000014 mutex
000121ff g     F .text	00000078 bitmap_get_bit
000125d2 g     F .text	0000004f kernel_memcpy
000115e2 g     F .text	00000098 idt_enable
00010a75 g     F .text	0000000a task_current
00012a6a g     F .text	0000008f list_insert_last
00010ae7 g     F .text	00000061 sys_yield
0001123d g     F .text	0000001c do_handler_segment_not_present
000109b1 g     F .text	0000004b task_set_ready
0001237f g     F .text	00000021 bitmap_is_set
00011719 g     F .text	0000000b idt_enable_global
00012621 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012d66 g     F .text	00000088 log_init
000118f5 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
0001249b g     F .text	00000047 kernel_strcpy
0001170e g     F .text	0000000b idt_disable_global
0001139c g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011195 g     F .text	0000001c do_handler_overflow
000112c9 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011275 g     F .text	0000001c do_handler_general_protection
00011339 g     F .text	0000001c do_handler_control_exception
00011d47 g     F .text	00000029 sem_count
00011125 g     F .text	0000001c do_handler_divider
00012277 g     F .text	00000108 bitmap_set_bit
00011205 g     F .text	0000001c do_handler_double_fault
00011291 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011724 g     F .text	00000039 pic_send_eoi
00012baa g     F .text	000000b5 list_remove_last
000109a7 g     F .text	0000000a task_first_task
00011c5f g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010e41 g     F .text	00000094 gdt_init
0001131d g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011141 g     F .text	0000001c do_handler_debug
0002e830 g     O .bss	00002000 stack
00010cfa g     F .text	00000060 sys_sleep
000118cc g     F .text	00000029 test_task_2
00011e3d g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
0001146f g     F .text	00000173 idt_init
00011cca g     F .text	0000007d sem_notify
000111cd g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000112ad g     F .text	0000001c do_handler_fpu_error
0001095f g     F .text	00000048 task_first_init
000112e5 g     F .text	0000001c do_handler_machine_check
000129df g     F .text	0000008b list_insert_first
00010caf g     F .text	0000004b task_set_wakeup
00010a47 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000124e2 g     F .text	00000051 kernel_strncpy
00030830 g       .bss	00000000 mem_free_start
00011850 g     F .text	00000053 kernel_init
00011c1c g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
0001270a g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011a57 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011221 g     F .text	0000001c do_handler_invalid_tss
0001167a g     F .text	00000094 idt_disable
00010c53 g     F .text	0000005c task_set_sleep
0001115d g     F .text	0000001c do_handler_nmi
00011a0a g     F .text	0000004d mutex_init
000118a3 g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00012155 g     F .text	00000016 bitmap_byte_count
000111e9 g     F .text	0000001c do_handler_device_unavailable
0001175d g     F .text	00000018 idt_enter_protection
00010b48 g     F .text	0000010b task_slice_end
00012662 g     F .text	00000084 kernel_memcmp
00011301 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011109 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000106f6 g     F .text	0000001b task_switch_from_to
00011ae8 g     F .text	000000b8 mutex_unlock
00010a7f g     F .text	00000068 task_switch
0001259d g     F .text	00000035 kernel_strlen
000109fc g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010d82 g     F .text	000000bf segment_desc_set
000111b1 g     F .text	0000001c do_handler_bound_range
00012af9 g     F .text	000000b1 list_remove_first
00012533 g     F .text	0000006a kernel_strncmp
0001216b g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
000123a0 g     F .text	000000fb bitmap_alloc_nbits
000108e4 g     F .text	0000007b task_manager_init
0001047c g     F .text	000000e4 memory_init
0001211f g     F .text	00000036 pannic
00011259 g     F .text	0000001c do_handler_stack_segment_fault
00011179 g     F .text	0000001c do_handler_breakpoint
00012dee g     F .text	000000fa log_printf
000107f6 g     F .text	000000e4 task_init
000126e6 g     F .text	00000024 kernel_sprintf
00010ed5 g     F .text	00000077 gdt_alloc_desc
000128a7 g     F .text	000000d6 kernel_itoa
00012c5f g     F .text	000000c9 list_remove
00011775 g     F .text	00000011 idt_leave_protection
000117a7 g     F .text	00000028 do_handler_time
00011831 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 45 18 00 00       	call   11850 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 30 08 03 00       	mov    $0x30830,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 cb 18 00 00       	jmp    118f5 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 ce 10 00 00       	call   11109 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 cd 10 00 00       	call   11125 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 cc 10 00 00       	call   11141 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 cb 10 00 00       	call   1115d <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 ca 10 00 00       	call   11179 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 c9 10 00 00       	call   11195 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 c8 10 00 00       	call   111b1 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 c7 10 00 00       	call   111cd <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 c6 10 00 00       	call   111e9 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 c7 10 00 00       	call   11205 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 c8 10 00 00       	call   11221 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 c9 10 00 00       	call   1123d <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 ca 10 00 00       	call   11259 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 cb 10 00 00       	call   11275 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 cc 10 00 00       	call   11291 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 cb 10 00 00       	call   112ad <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 cc 10 00 00       	call   112c9 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 cb 10 00 00       	call   112e5 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 ca 10 00 00       	call   11301 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 c9 10 00 00       	call   1131d <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 ca 10 00 00       	call   11339 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 1b 15 00 00       	call   117a7 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	83 ec 0c             	sub    $0xc,%esp
   102c6:	50                   	push   %eax
   102c7:	e8 3e 17 00 00       	call   11a0a <mutex_init>
   102cc:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   102cf:	8b 45 08             	mov    0x8(%ebp),%eax
   102d2:	8b 55 10             	mov    0x10(%ebp),%edx
   102d5:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   102d8:	8b 45 08             	mov    0x8(%ebp),%eax
   102db:	8b 55 14             	mov    0x14(%ebp),%edx
   102de:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   102e1:	8b 45 08             	mov    0x8(%ebp),%eax
   102e4:	8b 55 18             	mov    0x18(%ebp),%edx
   102e7:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   102ea:	8b 45 08             	mov    0x8(%ebp),%eax
   102ed:	8b 40 20             	mov    0x20(%eax),%eax
   102f0:	8b 55 08             	mov    0x8(%ebp),%edx
   102f3:	8b 4a 24             	mov    0x24(%edx),%ecx
   102f6:	ba 00 00 00 00       	mov    $0x0,%edx
   102fb:	f7 f1                	div    %ecx
   102fd:	89 c2                	mov    %eax,%edx
   102ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10302:	83 c0 14             	add    $0x14,%eax
   10305:	6a 00                	push   $0x0
   10307:	52                   	push   %edx
   10308:	ff 75 0c             	push   0xc(%ebp)
   1030b:	50                   	push   %eax
   1030c:	e8 5a 1e 00 00       	call   1216b <bitmap_init>
   10311:	83 c4 10             	add    $0x10,%esp
}
   10314:	90                   	nop
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1031d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10324:	8b 45 08             	mov    0x8(%ebp),%eax
   10327:	83 ec 0c             	sub    $0xc,%esp
   1032a:	50                   	push   %eax
   1032b:	e8 27 17 00 00       	call   11a57 <mutex_lock>
   10330:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	83 c0 14             	add    $0x14,%eax
   10339:	83 ec 04             	sub    $0x4,%esp
   1033c:	ff 75 0c             	push   0xc(%ebp)
   1033f:	6a 00                	push   $0x0
   10341:	50                   	push   %eax
   10342:	e8 59 20 00 00       	call   123a0 <bitmap_alloc_nbits>
   10347:	83 c4 10             	add    $0x10,%esp
   1034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   1034d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10351:	78 17                	js     1036a <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   10353:	8b 45 08             	mov    0x8(%ebp),%eax
   10356:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	8b 50 24             	mov    0x24(%eax),%edx
   1035f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10362:	0f af c2             	imul   %edx,%eax
   10365:	01 c8                	add    %ecx,%eax
   10367:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	83 ec 0c             	sub    $0xc,%esp
   10370:	50                   	push   %eax
   10371:	e8 72 17 00 00       	call   11ae8 <mutex_unlock>
   10376:	83 c4 10             	add    $0x10,%esp

  return addr;
   10379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1037c:	c9                   	leave  
   1037d:	c3                   	ret    

0001037e <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1037e:	55                   	push   %ebp
   1037f:	89 e5                	mov    %esp,%ebp
   10381:	53                   	push   %ebx
   10382:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   10385:	8b 45 08             	mov    0x8(%ebp),%eax
   10388:	83 ec 0c             	sub    $0xc,%esp
   1038b:	50                   	push   %eax
   1038c:	e8 c6 16 00 00       	call   11a57 <mutex_lock>
   10391:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 50 1c             	mov    0x1c(%eax),%edx
   1039a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1039d:	29 d0                	sub    %edx,%eax
   1039f:	89 c1                	mov    %eax,%ecx
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 58 24             	mov    0x24(%eax),%ebx
   103a7:	89 c8                	mov    %ecx,%eax
   103a9:	ba 00 00 00 00       	mov    $0x0,%edx
   103ae:	f7 f3                	div    %ebx
   103b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   103b3:	8b 45 08             	mov    0x8(%ebp),%eax
   103b6:	83 c0 14             	add    $0x14,%eax
   103b9:	6a 00                	push   $0x0
   103bb:	ff 75 10             	push   0x10(%ebp)
   103be:	ff 75 f4             	push   -0xc(%ebp)
   103c1:	50                   	push   %eax
   103c2:	e8 b0 1e 00 00       	call   12277 <bitmap_set_bit>
   103c7:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 ec 0c             	sub    $0xc,%esp
   103d0:	50                   	push   %eax
   103d1:	e8 12 17 00 00       	call   11ae8 <mutex_unlock>
   103d6:	83 c4 10             	add    $0x10,%esp
}
   103d9:	90                   	nop
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   103e5:	83 ec 0c             	sub    $0xc,%esp
   103e8:	68 e8 2e 01 00       	push   $0x12ee8
   103ed:	e8 fc 29 00 00       	call   12dee <log_printf>
   103f2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   103f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   103fc:	eb 29                	jmp    10427 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10404:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1040e:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10411:	52                   	push   %edx
   10412:	50                   	push   %eax
   10413:	ff 75 f4             	push   -0xc(%ebp)
   10416:	68 f4 2e 01 00       	push   $0x12ef4
   1041b:	e8 ce 29 00 00       	call   12dee <log_printf>
   10420:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10423:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10427:	8b 45 08             	mov    0x8(%ebp),%eax
   1042a:	8b 40 50             	mov    0x50(%eax),%eax
   1042d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10430:	7c cc                	jl     103fe <show_mem_info+0x1f>
    }

    log_printf("");
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	68 06 2f 01 00       	push   $0x12f06
   1043a:	e8 af 29 00 00       	call   12dee <log_printf>
   1043f:	83 c4 10             	add    $0x10,%esp
}
   10442:	90                   	nop
   10443:	c9                   	leave  
   10444:	c3                   	ret    

00010445 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   10445:	55                   	push   %ebp
   10446:	89 e5                	mov    %esp,%ebp
   10448:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   1044b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10459:	eb 11                	jmp    1046c <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   1045b:	8b 45 08             	mov    0x8(%ebp),%eax
   1045e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10461:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10465:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10468:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	8b 40 50             	mov    0x50(%eax),%eax
   10472:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10475:	7c e4                	jl     1045b <total_mem_size+0x16>
    }

    return mem_size;
   10477:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1047a:	c9                   	leave  
   1047b:	c3                   	ret    

0001047c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1047c:	55                   	push   %ebp
   1047d:	89 e5                	mov    %esp,%ebp
   1047f:	83 ec 18             	sub    $0x18,%esp

  
  //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern uint8_t* mem_free_start;

    log_printf("memory init");
   10482:	83 ec 0c             	sub    $0xc,%esp
   10485:	68 07 2f 01 00       	push   $0x12f07
   1048a:	e8 5f 29 00 00       	call   12dee <log_printf>
   1048f:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: %d", mem_free_start);
   10492:	a1 30 08 03 00       	mov    0x30830,%eax
   10497:	83 ec 08             	sub    $0x8,%esp
   1049a:	50                   	push   %eax
   1049b:	68 13 2f 01 00       	push   $0x12f13
   104a0:	e8 49 29 00 00       	call   12dee <log_printf>
   104a5:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   104a8:	83 ec 0c             	sub    $0xc,%esp
   104ab:	ff 75 08             	push   0x8(%ebp)
   104ae:	e8 2c ff ff ff       	call   103df <show_mem_info>
   104b3:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   104b6:	83 ec 0c             	sub    $0xc,%esp
   104b9:	ff 75 08             	push   0x8(%ebp)
   104bc:	e8 84 ff ff ff       	call   10445 <total_mem_size>
   104c1:	83 c4 10             	add    $0x10,%esp
   104c4:	2d 00 00 10 00       	sub    $0x100000,%eax
   104c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   104cc:	83 ec 08             	sub    $0x8,%esp
   104cf:	68 00 10 00 00       	push   $0x1000
   104d4:	ff 75 f4             	push   -0xc(%ebp)
   104d7:	e8 d1 fd ff ff       	call   102ad <down2>
   104dc:	83 c4 10             	add    $0x10,%esp
   104df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   104e2:	83 ec 04             	sub    $0x4,%esp
   104e5:	ff 75 f4             	push   -0xc(%ebp)
   104e8:	68 00 00 10 00       	push   $0x100000
   104ed:	68 26 2f 01 00       	push   $0x12f26
   104f2:	e8 f7 28 00 00       	call   12dee <log_printf>
   104f7:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   104fa:	c7 45 f0 30 08 03 00 	movl   $0x30830,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10501:	83 ec 0c             	sub    $0xc,%esp
   10504:	68 00 10 00 00       	push   $0x1000
   10509:	ff 75 f4             	push   -0xc(%ebp)
   1050c:	68 00 00 10 00       	push   $0x100000
   10511:	ff 75 f0             	push   -0x10(%ebp)
   10514:	68 60 3a 01 00       	push   $0x13a60
   10519:	e8 9c fd ff ff       	call   102ba <addr_alloc_init>
   1051e:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  //位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
   10521:	a1 80 3a 01 00       	mov    0x13a80,%eax
   10526:	c1 e8 0c             	shr    $0xc,%eax
   10529:	83 ec 0c             	sub    $0xc,%esp
   1052c:	50                   	push   %eax
   1052d:	e8 23 1c 00 00       	call   12155 <bitmap_byte_count>
   10532:	83 c4 10             	add    $0x10,%esp
   10535:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10538:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   1053f:	76 1c                	jbe    1055d <memory_init+0xe1>
   10541:	68 44 2f 01 00       	push   $0x12f44
   10546:	68 a0 2f 01 00       	push   $0x12fa0
   1054b:	68 8f 00 00 00       	push   $0x8f
   10550:	68 68 2f 01 00       	push   $0x12f68
   10555:	e8 c5 1b 00 00       	call   1211f <pannic>
   1055a:	83 c4 10             	add    $0x10,%esp
    

   1055d:	90                   	nop
   1055e:	c9                   	leave  
   1055f:	c3                   	ret    

00010560 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10560:	55                   	push   %ebp
   10561:	89 e5                	mov    %esp,%ebp
   10563:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10566:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1056a:	75 19                	jne    10585 <list_node_init+0x25>
   1056c:	68 ac 2f 01 00       	push   $0x12fac
   10571:	68 80 30 01 00       	push   $0x13080
   10576:	6a 20                	push   $0x20
   10578:	68 c4 2f 01 00       	push   $0x12fc4
   1057d:	e8 9d 1b 00 00       	call   1211f <pannic>
   10582:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10585:	8b 45 08             	mov    0x8(%ebp),%eax
   10588:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1058f:	8b 45 08             	mov    0x8(%ebp),%eax
   10592:	8b 50 04             	mov    0x4(%eax),%edx
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	89 10                	mov    %edx,(%eax)
}
   1059a:	90                   	nop
   1059b:	c9                   	leave  
   1059c:	c3                   	ret    

0001059d <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1059d:	55                   	push   %ebp
   1059e:	89 e5                	mov    %esp,%ebp
   105a0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   105a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105a7:	75 19                	jne    105c2 <list_node_next+0x25>
   105a9:	68 ac 2f 01 00       	push   $0x12fac
   105ae:	68 e0 30 01 00       	push   $0x130e0
   105b3:	6a 2b                	push   $0x2b
   105b5:	68 c4 2f 01 00       	push   $0x12fc4
   105ba:	e8 60 1b 00 00       	call   1211f <pannic>
   105bf:	83 c4 10             	add    $0x10,%esp

    return node->next;
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	8b 40 04             	mov    0x4(%eax),%eax
}
   105c8:	c9                   	leave  
   105c9:	c3                   	ret    

000105ca <list_init>:

static inline void list_init(list_t *list) {
   105ca:	55                   	push   %ebp
   105cb:	89 e5                	mov    %esp,%ebp
   105cd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   105d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105d4:	75 19                	jne    105ef <list_init+0x25>
   105d6:	68 02 30 01 00       	push   $0x13002
   105db:	68 90 30 01 00       	push   $0x13090
   105e0:	6a 31                	push   $0x31
   105e2:	68 c4 2f 01 00       	push   $0x12fc4
   105e7:	e8 33 1b 00 00       	call   1211f <pannic>
   105ec:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   105ef:	8b 45 08             	mov    0x8(%ebp),%eax
   105f2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	8b 50 04             	mov    0x4(%eax),%edx
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10604:	8b 45 08             	mov    0x8(%ebp),%eax
   10607:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1060e:	90                   	nop
   1060f:	c9                   	leave  
   10610:	c3                   	ret    

00010611 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10611:	55                   	push   %ebp
   10612:	89 e5                	mov    %esp,%ebp
   10614:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10617:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1061b:	75 19                	jne    10636 <list_is_empty+0x25>
   1061d:	68 02 30 01 00       	push   $0x13002
   10622:	68 f0 30 01 00       	push   $0x130f0
   10627:	6a 38                	push   $0x38
   10629:	68 c4 2f 01 00       	push   $0x12fc4
   1062e:	e8 ec 1a 00 00       	call   1211f <pannic>
   10633:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10636:	8b 45 08             	mov    0x8(%ebp),%eax
   10639:	8b 40 08             	mov    0x8(%eax),%eax
   1063c:	85 c0                	test   %eax,%eax
   1063e:	0f 94 c0             	sete   %al
   10641:	0f b6 c0             	movzbl %al,%eax
}
   10644:	c9                   	leave  
   10645:	c3                   	ret    

00010646 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10646:	55                   	push   %ebp
   10647:	89 e5                	mov    %esp,%ebp
   10649:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1064c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10650:	75 19                	jne    1066b <list_get_size+0x25>
   10652:	68 02 30 01 00       	push   $0x13002
   10657:	68 d0 30 01 00       	push   $0x130d0
   1065c:	6a 3e                	push   $0x3e
   1065e:	68 c4 2f 01 00       	push   $0x12fc4
   10663:	e8 b7 1a 00 00       	call   1211f <pannic>
   10668:	83 c4 10             	add    $0x10,%esp

    return list->size;
   1066b:	8b 45 08             	mov    0x8(%ebp),%eax
   1066e:	8b 40 08             	mov    0x8(%eax),%eax
}
   10671:	c9                   	leave  
   10672:	c3                   	ret    

00010673 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10673:	55                   	push   %ebp
   10674:	89 e5                	mov    %esp,%ebp
   10676:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10679:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1067d:	75 19                	jne    10698 <list_get_first+0x25>
   1067f:	68 02 30 01 00       	push   $0x13002
   10684:	68 c0 30 01 00       	push   $0x130c0
   10689:	6a 44                	push   $0x44
   1068b:	68 c4 2f 01 00       	push   $0x12fc4
   10690:	e8 8a 1a 00 00       	call   1211f <pannic>
   10695:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10698:	8b 45 08             	mov    0x8(%ebp),%eax
   1069b:	8b 00                	mov    (%eax),%eax
}
   1069d:	c9                   	leave  
   1069e:	c3                   	ret    

0001069f <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1069f:	55                   	push   %ebp
   106a0:	89 e5                	mov    %esp,%ebp
   106a2:	f4                   	hlt    
   106a3:	90                   	nop
   106a4:	5d                   	pop    %ebp
   106a5:	c3                   	ret    

000106a6 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   106a6:	55                   	push   %ebp
   106a7:	89 e5                	mov    %esp,%ebp
   106a9:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   106ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   106af:	89 45 f8             	mov    %eax,-0x8(%ebp)
   106b2:	8b 45 08             	mov    0x8(%ebp),%eax
   106b5:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   106b8:	8d 45 f8             	lea    -0x8(%ebp),%eax
   106bb:	ff 28                	ljmp   *(%eax)
}
   106bd:	90                   	nop
   106be:	c9                   	leave  
   106bf:	c3                   	ret    

000106c0 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   106c0:	55                   	push   %ebp
   106c1:	89 e5                	mov    %esp,%ebp
   106c3:	83 ec 04             	sub    $0x4,%esp
   106c6:	8b 45 08             	mov    0x8(%ebp),%eax
   106c9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   106cd:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   106d1:	0f 00 d8             	ltr    %ax
}
   106d4:	90                   	nop
   106d5:	c9                   	leave  
   106d6:	c3                   	ret    

000106d7 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   106d7:	55                   	push   %ebp
   106d8:	89 e5                	mov    %esp,%ebp
   106da:	83 ec 04             	sub    $0x4,%esp
   106dd:	8b 45 08             	mov    0x8(%ebp),%eax
   106e0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   106e4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   106e8:	6a 00                	push   $0x0
   106ea:	50                   	push   %eax
   106eb:	e8 b6 ff ff ff       	call   106a6 <far_jump>
   106f0:	83 c4 08             	add    $0x8,%esp
}
   106f3:	90                   	nop
   106f4:	c9                   	leave  
   106f5:	c3                   	ret    

000106f6 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   106f6:	55                   	push   %ebp
   106f7:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   106f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   106fc:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10702:	0f b7 c0             	movzwl %ax,%eax
   10705:	50                   	push   %eax
   10706:	e8 cc ff ff ff       	call   106d7 <switch_to_tss>
   1070b:	83 c4 04             	add    $0x4,%esp
}
   1070e:	90                   	nop
   1070f:	c9                   	leave  
   10710:	c3                   	ret    

00010711 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   10711:	55                   	push   %ebp
   10712:	89 e5                	mov    %esp,%ebp
   10714:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10717:	8b 45 08             	mov    0x8(%ebp),%eax
   1071a:	83 c0 48             	add    $0x48,%eax
   1071d:	83 ec 04             	sub    $0x4,%esp
   10720:	6a 68                	push   $0x68
   10722:	6a 00                	push   $0x0
   10724:	50                   	push   %eax
   10725:	e8 f7 1e 00 00       	call   12621 <kernel_memset>
   1072a:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1072d:	8b 45 08             	mov    0x8(%ebp),%eax
   10730:	8b 55 0c             	mov    0xc(%ebp),%edx
   10733:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 55 10             	mov    0x10(%ebp),%edx
   1073c:	89 50 4c             	mov    %edx,0x4c(%eax)
   1073f:	8b 45 08             	mov    0x8(%ebp),%eax
   10742:	8b 50 4c             	mov    0x4c(%eax),%edx
   10745:	8b 45 08             	mov    0x8(%ebp),%eax
   10748:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1074e:	8b 45 08             	mov    0x8(%ebp),%eax
   10751:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10758:	8b 45 08             	mov    0x8(%ebp),%eax
   1075b:	8b 50 50             	mov    0x50(%eax),%edx
   1075e:	8b 45 08             	mov    0x8(%ebp),%eax
   10761:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10767:	8b 45 08             	mov    0x8(%ebp),%eax
   1076a:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   10771:	00 00 00 
   10774:	8b 45 08             	mov    0x8(%ebp),%eax
   10777:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   1077d:	8b 45 08             	mov    0x8(%ebp),%eax
   10780:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10786:	8b 45 08             	mov    0x8(%ebp),%eax
   10789:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1078f:	8b 45 08             	mov    0x8(%ebp),%eax
   10792:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10798:	8b 45 08             	mov    0x8(%ebp),%eax
   1079b:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   107a1:	8b 45 08             	mov    0x8(%ebp),%eax
   107a4:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   107aa:	8b 45 08             	mov    0x8(%ebp),%eax
   107ad:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   107b4:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   107b7:	8b 45 08             	mov    0x8(%ebp),%eax
   107ba:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   107c1:	e8 0f 07 00 00       	call   10ed5 <gdt_alloc_desc>
   107c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   107c9:	8b 45 08             	mov    0x8(%ebp),%eax
   107cc:	83 c0 48             	add    $0x48,%eax
   107cf:	89 c2                	mov    %eax,%edx
   107d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d4:	0f b7 c0             	movzwl %ax,%eax
   107d7:	68 89 00 00 00       	push   $0x89
   107dc:	6a 68                	push   $0x68
   107de:	52                   	push   %edx
   107df:	50                   	push   %eax
   107e0:	e8 9d 05 00 00       	call   10d82 <segment_desc_set>
   107e5:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   107e8:	8b 45 08             	mov    0x8(%ebp),%eax
   107eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   107ee:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   107fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10800:	75 19                	jne    1081b <task_init+0x25>
   10802:	68 15 30 01 00       	push   $0x13015
   10807:	68 74 30 01 00       	push   $0x13074
   1080c:	6a 60                	push   $0x60
   1080e:	68 28 30 01 00       	push   $0x13028
   10813:	e8 07 19 00 00       	call   1211f <pannic>
   10818:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   1081b:	83 ec 04             	sub    $0x4,%esp
   1081e:	ff 75 14             	push   0x14(%ebp)
   10821:	ff 75 10             	push   0x10(%ebp)
   10824:	ff 75 08             	push   0x8(%ebp)
   10827:	e8 e5 fe ff ff       	call   10711 <tss_init>
   1082c:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1082f:	8b 45 08             	mov    0x8(%ebp),%eax
   10832:	83 c0 10             	add    $0x10,%eax
   10835:	83 ec 04             	sub    $0x4,%esp
   10838:	6a 20                	push   $0x20
   1083a:	ff 75 0c             	push   0xc(%ebp)
   1083d:	50                   	push   %eax
   1083e:	e8 9f 1c 00 00       	call   124e2 <kernel_strncpy>
   10843:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10846:	8b 45 08             	mov    0x8(%ebp),%eax
   10849:	83 c0 30             	add    $0x30,%eax
   1084c:	83 ec 0c             	sub    $0xc,%esp
   1084f:	50                   	push   %eax
   10850:	e8 0b fd ff ff       	call   10560 <list_node_init>
   10855:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10858:	8b 45 08             	mov    0x8(%ebp),%eax
   1085b:	83 c0 38             	add    $0x38,%eax
   1085e:	83 ec 0c             	sub    $0xc,%esp
   10861:	50                   	push   %eax
   10862:	e8 f9 fc ff ff       	call   10560 <list_node_init>
   10867:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   1086a:	8b 45 08             	mov    0x8(%ebp),%eax
   1086d:	83 c0 40             	add    $0x40,%eax
   10870:	83 ec 0c             	sub    $0xc,%esp
   10873:	50                   	push   %eax
   10874:	e8 e7 fc ff ff       	call   10560 <list_node_init>
   10879:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   1087c:	8b 45 08             	mov    0x8(%ebp),%eax
   1087f:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10886:	8b 45 08             	mov    0x8(%ebp),%eax
   10889:	8b 50 08             	mov    0x8(%eax),%edx
   1088c:	8b 45 08             	mov    0x8(%ebp),%eax
   1088f:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10892:	8b 45 08             	mov    0x8(%ebp),%eax
   10895:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1089c:	e8 bc 0e 00 00       	call   1175d <idt_enter_protection>
   108a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   108a4:	8b 45 08             	mov    0x8(%ebp),%eax
   108a7:	83 c0 38             	add    $0x38,%eax
   108aa:	83 ec 08             	sub    $0x8,%esp
   108ad:	50                   	push   %eax
   108ae:	68 b0 3a 01 00       	push   $0x13ab0
   108b3:	e8 b2 21 00 00       	call   12a6a <list_insert_last>
   108b8:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   108bb:	83 ec 0c             	sub    $0xc,%esp
   108be:	ff 75 08             	push   0x8(%ebp)
   108c1:	e8 eb 00 00 00       	call   109b1 <task_set_ready>
   108c6:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   108c9:	83 ec 0c             	sub    $0xc,%esp
   108cc:	ff 75 f4             	push   -0xc(%ebp)
   108cf:	e8 a1 0e 00 00       	call   11775 <idt_leave_protection>
   108d4:	83 c4 10             	add    $0x10,%esp
}
   108d7:	90                   	nop
   108d8:	c9                   	leave  
   108d9:	c3                   	ret    

000108da <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   108da:	55                   	push   %ebp
   108db:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   108dd:	e8 bd fd ff ff       	call   1069f <hlt>
   108e2:	eb f9                	jmp    108dd <empty_task+0x3>

000108e4 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   108e4:	55                   	push   %ebp
   108e5:	89 e5                	mov    %esp,%ebp
   108e7:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   108ea:	83 ec 0c             	sub    $0xc,%esp
   108ed:	68 a4 3a 01 00       	push   $0x13aa4
   108f2:	e8 d3 fc ff ff       	call   105ca <list_init>
   108f7:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   108fa:	83 ec 0c             	sub    $0xc,%esp
   108fd:	68 b0 3a 01 00       	push   $0x13ab0
   10902:	e8 c3 fc ff ff       	call   105ca <list_init>
   10907:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1090a:	83 ec 0c             	sub    $0xc,%esp
   1090d:	68 bc 3a 01 00       	push   $0x13abc
   10912:	e8 b3 fc ff ff       	call   105ca <list_init>
   10917:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   1091a:	c7 05 a0 3a 01 00 00 	movl   $0x0,0x13aa0
   10921:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10924:	ba 40 3e 01 00       	mov    $0x13e40,%edx
   10929:	b8 da 08 01 00       	mov    $0x108da,%eax
   1092e:	52                   	push   %edx
   1092f:	50                   	push   %eax
   10930:	68 5d 30 01 00       	push   $0x1305d
   10935:	68 7c 3b 01 00       	push   $0x13b7c
   1093a:	e8 b7 fe ff ff       	call   107f6 <task_init>
   1093f:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10942:	83 ec 0c             	sub    $0xc,%esp
   10945:	68 7c 3b 01 00       	push   $0x13b7c
   1094a:	e8 ad 00 00 00       	call   109fc <task_set_unready>
   1094f:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10952:	c7 05 7c 3b 01 00 00 	movl   $0x0,0x13b7c
   10959:	00 00 00 
}
   1095c:	90                   	nop
   1095d:	c9                   	leave  
   1095e:	c3                   	ret    

0001095f <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   1095f:	55                   	push   %ebp
   10960:	89 e5                	mov    %esp,%ebp
   10962:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   10965:	6a 00                	push   $0x0
   10967:	6a 00                	push   $0x0
   10969:	68 68 30 01 00       	push   $0x13068
   1096e:	68 c8 3a 01 00       	push   $0x13ac8
   10973:	e8 7e fe ff ff       	call   107f6 <task_init>
   10978:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   1097b:	a1 78 3b 01 00       	mov    0x13b78,%eax
   10980:	0f b7 c0             	movzwl %ax,%eax
   10983:	83 ec 0c             	sub    $0xc,%esp
   10986:	50                   	push   %eax
   10987:	e8 34 fd ff ff       	call   106c0 <write_tr>
   1098c:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   1098f:	c7 05 a0 3a 01 00 c8 	movl   $0x13ac8,0x13aa0
   10996:	3a 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10999:	a1 a0 3a 01 00       	mov    0x13aa0,%eax
   1099e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   109a4:	90                   	nop
   109a5:	c9                   	leave  
   109a6:	c3                   	ret    

000109a7 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   109a7:	55                   	push   %ebp
   109a8:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   109aa:	b8 c8 3a 01 00       	mov    $0x13ac8,%eax
}
   109af:	5d                   	pop    %ebp
   109b0:	c3                   	ret    

000109b1 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   109b1:	55                   	push   %ebp
   109b2:	89 e5                	mov    %esp,%ebp
   109b4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   109b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109bb:	75 1c                	jne    109d9 <task_set_ready+0x28>
   109bd:	68 15 30 01 00       	push   $0x13015
   109c2:	68 9c 30 01 00       	push   $0x1309c
   109c7:	68 c9 00 00 00       	push   $0xc9
   109cc:	68 28 30 01 00       	push   $0x13028
   109d1:	e8 49 17 00 00       	call   1211f <pannic>
   109d6:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   109d9:	8b 45 08             	mov    0x8(%ebp),%eax
   109dc:	83 c0 30             	add    $0x30,%eax
   109df:	83 ec 08             	sub    $0x8,%esp
   109e2:	50                   	push   %eax
   109e3:	68 a4 3a 01 00       	push   $0x13aa4
   109e8:	e8 7d 20 00 00       	call   12a6a <list_insert_last>
   109ed:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   109f0:	8b 45 08             	mov    0x8(%ebp),%eax
   109f3:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   109f9:	90                   	nop
   109fa:	c9                   	leave  
   109fb:	c3                   	ret    

000109fc <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   109fc:	55                   	push   %ebp
   109fd:	89 e5                	mov    %esp,%ebp
   109ff:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10a02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a06:	75 1c                	jne    10a24 <task_set_unready+0x28>
   10a08:	68 15 30 01 00       	push   $0x13015
   10a0d:	68 ac 30 01 00       	push   $0x130ac
   10a12:	68 d8 00 00 00       	push   $0xd8
   10a17:	68 28 30 01 00       	push   $0x13028
   10a1c:	e8 fe 16 00 00       	call   1211f <pannic>
   10a21:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10a24:	8b 45 08             	mov    0x8(%ebp),%eax
   10a27:	83 c0 30             	add    $0x30,%eax
   10a2a:	83 ec 08             	sub    $0x8,%esp
   10a2d:	50                   	push   %eax
   10a2e:	68 a4 3a 01 00       	push   $0x13aa4
   10a33:	e8 27 22 00 00       	call   12c5f <list_remove>
   10a38:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10a3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10a44:	90                   	nop
   10a45:	c9                   	leave  
   10a46:	c3                   	ret    

00010a47 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10a47:	55                   	push   %ebp
   10a48:	89 e5                	mov    %esp,%ebp
   10a4a:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10a4d:	83 ec 0c             	sub    $0xc,%esp
   10a50:	68 a4 3a 01 00       	push   $0x13aa4
   10a55:	e8 19 fc ff ff       	call   10673 <list_get_first>
   10a5a:	83 c4 10             	add    $0x10,%esp
   10a5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10a60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a64:	74 08                	je     10a6e <task_ready_first+0x27>
   10a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a69:	83 e8 30             	sub    $0x30,%eax
   10a6c:	eb 05                	jmp    10a73 <task_ready_first+0x2c>
   10a6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a73:	c9                   	leave  
   10a74:	c3                   	ret    

00010a75 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10a75:	55                   	push   %ebp
   10a76:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10a78:	a1 a0 3a 01 00       	mov    0x13aa0,%eax
}
   10a7d:	5d                   	pop    %ebp
   10a7e:	c3                   	ret    

00010a7f <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10a7f:	55                   	push   %ebp
   10a80:	89 e5                	mov    %esp,%ebp
   10a82:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10a85:	e8 d3 0c 00 00       	call   1175d <idt_enter_protection>
   10a8a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10a8d:	e8 b5 ff ff ff       	call   10a47 <task_ready_first>
   10a92:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10a95:	a1 a0 3a 01 00       	mov    0x13aa0,%eax
   10a9a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10a9d:	74 37                	je     10ad6 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10a9f:	a1 a0 3a 01 00       	mov    0x13aa0,%eax
   10aa4:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aab:	75 07                	jne    10ab4 <task_switch+0x35>
            to = &task_manager.empty_task;
   10aad:	c7 45 f4 7c 3b 01 00 	movl   $0x13b7c,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ab7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ac0:	a3 a0 3a 01 00       	mov    %eax,0x13aa0
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10ac5:	83 ec 08             	sub    $0x8,%esp
   10ac8:	ff 75 f4             	push   -0xc(%ebp)
   10acb:	ff 75 ec             	push   -0x14(%ebp)
   10ace:	e8 23 fc ff ff       	call   106f6 <task_switch_from_to>
   10ad3:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10ad6:	83 ec 0c             	sub    $0xc,%esp
   10ad9:	ff 75 f0             	push   -0x10(%ebp)
   10adc:	e8 94 0c 00 00       	call   11775 <idt_leave_protection>
   10ae1:	83 c4 10             	add    $0x10,%esp
}
   10ae4:	90                   	nop
   10ae5:	c9                   	leave  
   10ae6:	c3                   	ret    

00010ae7 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10ae7:	55                   	push   %ebp
   10ae8:	89 e5                	mov    %esp,%ebp
   10aea:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10aed:	e8 6b 0c 00 00       	call   1175d <idt_enter_protection>
   10af2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10af5:	83 ec 0c             	sub    $0xc,%esp
   10af8:	68 a4 3a 01 00       	push   $0x13aa4
   10afd:	e8 44 fb ff ff       	call   10646 <list_get_size>
   10b02:	83 c4 10             	add    $0x10,%esp
   10b05:	83 f8 01             	cmp    $0x1,%eax
   10b08:	7e 29                	jle    10b33 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10b0a:	e8 66 ff ff ff       	call   10a75 <task_current>
   10b0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10b12:	83 ec 0c             	sub    $0xc,%esp
   10b15:	ff 75 f0             	push   -0x10(%ebp)
   10b18:	e8 df fe ff ff       	call   109fc <task_set_unready>
   10b1d:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10b20:	83 ec 0c             	sub    $0xc,%esp
   10b23:	ff 75 f0             	push   -0x10(%ebp)
   10b26:	e8 86 fe ff ff       	call   109b1 <task_set_ready>
   10b2b:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10b2e:	e8 4c ff ff ff       	call   10a7f <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10b33:	83 ec 0c             	sub    $0xc,%esp
   10b36:	ff 75 f4             	push   -0xc(%ebp)
   10b39:	e8 37 0c 00 00       	call   11775 <idt_leave_protection>
   10b3e:	83 c4 10             	add    $0x10,%esp
    return 0;
   10b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b46:	c9                   	leave  
   10b47:	c3                   	ret    

00010b48 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10b48:	55                   	push   %ebp
   10b49:	89 e5                	mov    %esp,%ebp
   10b4b:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10b4e:	83 ec 0c             	sub    $0xc,%esp
   10b51:	68 bc 3a 01 00       	push   $0x13abc
   10b56:	e8 18 fb ff ff       	call   10673 <list_get_first>
   10b5b:	83 c4 10             	add    $0x10,%esp
   10b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10b61:	eb 62                	jmp    10bc5 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10b63:	83 ec 0c             	sub    $0xc,%esp
   10b66:	ff 75 f4             	push   -0xc(%ebp)
   10b69:	e8 2f fa ff ff       	call   1059d <list_node_next>
   10b6e:	83 c4 10             	add    $0x10,%esp
   10b71:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10b74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b78:	74 08                	je     10b82 <task_slice_end+0x3a>
   10b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b7d:	83 e8 30             	sub    $0x30,%eax
   10b80:	eb 05                	jmp    10b87 <task_slice_end+0x3f>
   10b82:	b8 00 00 00 00       	mov    $0x0,%eax
   10b87:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10b8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b8d:	8b 40 0c             	mov    0xc(%eax),%eax
   10b90:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b93:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b96:	89 50 0c             	mov    %edx,0xc(%eax)
   10b99:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b9c:	8b 40 0c             	mov    0xc(%eax),%eax
   10b9f:	85 c0                	test   %eax,%eax
   10ba1:	75 1c                	jne    10bbf <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10ba3:	83 ec 0c             	sub    $0xc,%esp
   10ba6:	ff 75 e8             	push   -0x18(%ebp)
   10ba9:	e8 01 01 00 00       	call   10caf <task_set_wakeup>
   10bae:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10bb1:	83 ec 0c             	sub    $0xc,%esp
   10bb4:	ff 75 e8             	push   -0x18(%ebp)
   10bb7:	e8 f5 fd ff ff       	call   109b1 <task_set_ready>
   10bbc:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10bbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10bc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10bc9:	75 98                	jne    10b63 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10bcb:	e8 a5 fe ff ff       	call   10a75 <task_current>
   10bd0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10bd3:	81 7d f0 7c 3b 01 00 	cmpl   $0x13b7c,-0x10(%ebp)
   10bda:	75 23                	jne    10bff <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10bdc:	83 ec 0c             	sub    $0xc,%esp
   10bdf:	68 a4 3a 01 00       	push   $0x13aa4
   10be4:	e8 28 fa ff ff       	call   10611 <list_is_empty>
   10be9:	83 c4 10             	add    $0x10,%esp
   10bec:	85 c0                	test   %eax,%eax
   10bee:	75 60                	jne    10c50 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10bf0:	c7 05 7c 3b 01 00 00 	movl   $0x0,0x13b7c
   10bf7:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10bfa:	e8 80 fe ff ff       	call   10a7f <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10bff:	81 7d f0 7c 3b 01 00 	cmpl   $0x13b7c,-0x10(%ebp)
   10c06:	74 49                	je     10c51 <task_slice_end+0x109>
   10c08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c0b:	8b 40 08             	mov    0x8(%eax),%eax
   10c0e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c14:	89 50 08             	mov    %edx,0x8(%eax)
   10c17:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c1a:	8b 40 08             	mov    0x8(%eax),%eax
   10c1d:	85 c0                	test   %eax,%eax
   10c1f:	75 30                	jne    10c51 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c24:	8b 50 04             	mov    0x4(%eax),%edx
   10c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c2a:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10c2d:	83 ec 0c             	sub    $0xc,%esp
   10c30:	ff 75 f0             	push   -0x10(%ebp)
   10c33:	e8 c4 fd ff ff       	call   109fc <task_set_unready>
   10c38:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10c3b:	83 ec 0c             	sub    $0xc,%esp
   10c3e:	ff 75 f0             	push   -0x10(%ebp)
   10c41:	e8 6b fd ff ff       	call   109b1 <task_set_ready>
   10c46:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10c49:	e8 31 fe ff ff       	call   10a7f <task_switch>
   10c4e:	eb 01                	jmp    10c51 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10c50:	90                   	nop
    }
}
   10c51:	c9                   	leave  
   10c52:	c3                   	ret    

00010c53 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10c53:	55                   	push   %ebp
   10c54:	89 e5                	mov    %esp,%ebp
   10c56:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c5d:	75 1c                	jne    10c7b <task_set_sleep+0x28>
   10c5f:	68 15 30 01 00       	push   $0x13015
   10c64:	68 00 31 01 00       	push   $0x13100
   10c69:	68 66 01 00 00       	push   $0x166
   10c6e:	68 28 30 01 00       	push   $0x13028
   10c73:	e8 a7 14 00 00       	call   1211f <pannic>
   10c78:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10c7b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10c7f:	74 2b                	je     10cac <task_set_sleep+0x59>

    task->sleep = slice;
   10c81:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c84:	8b 45 08             	mov    0x8(%ebp),%eax
   10c87:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10c8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10c93:	8b 45 08             	mov    0x8(%ebp),%eax
   10c96:	83 c0 30             	add    $0x30,%eax
   10c99:	83 ec 08             	sub    $0x8,%esp
   10c9c:	50                   	push   %eax
   10c9d:	68 bc 3a 01 00       	push   $0x13abc
   10ca2:	e8 c3 1d 00 00       	call   12a6a <list_insert_last>
   10ca7:	83 c4 10             	add    $0x10,%esp
   10caa:	eb 01                	jmp    10cad <task_set_sleep+0x5a>
    if (slice == 0) return;
   10cac:	90                   	nop
}
   10cad:	c9                   	leave  
   10cae:	c3                   	ret    

00010caf <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10caf:	55                   	push   %ebp
   10cb0:	89 e5                	mov    %esp,%ebp
   10cb2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10cb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cb9:	75 1c                	jne    10cd7 <task_set_wakeup+0x28>
   10cbb:	68 15 30 01 00       	push   $0x13015
   10cc0:	68 10 31 01 00       	push   $0x13110
   10cc5:	68 74 01 00 00       	push   $0x174
   10cca:	68 28 30 01 00       	push   $0x13028
   10ccf:	e8 4b 14 00 00       	call   1211f <pannic>
   10cd4:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cda:	83 c0 30             	add    $0x30,%eax
   10cdd:	83 ec 08             	sub    $0x8,%esp
   10ce0:	50                   	push   %eax
   10ce1:	68 bc 3a 01 00       	push   $0x13abc
   10ce6:	e8 74 1f 00 00       	call   12c5f <list_remove>
   10ceb:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10cee:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10cf7:	90                   	nop
   10cf8:	c9                   	leave  
   10cf9:	c3                   	ret    

00010cfa <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10cfa:	55                   	push   %ebp
   10cfb:	89 e5                	mov    %esp,%ebp
   10cfd:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10d00:	e8 58 0a 00 00       	call   1175d <idt_enter_protection>
   10d05:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10d08:	e8 68 fd ff ff       	call   10a75 <task_current>
   10d0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10d10:	83 ec 0c             	sub    $0xc,%esp
   10d13:	ff 75 f0             	push   -0x10(%ebp)
   10d16:	e8 e1 fc ff ff       	call   109fc <task_set_unready>
   10d1b:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10d1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d21:	83 c0 09             	add    $0x9,%eax
   10d24:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10d29:	f7 e2                	mul    %edx
   10d2b:	89 d0                	mov    %edx,%eax
   10d2d:	c1 e8 03             	shr    $0x3,%eax
   10d30:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10d33:	83 ec 08             	sub    $0x8,%esp
   10d36:	ff 75 ec             	push   -0x14(%ebp)
   10d39:	ff 75 f0             	push   -0x10(%ebp)
   10d3c:	e8 12 ff ff ff       	call   10c53 <task_set_sleep>
   10d41:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10d44:	e8 36 fd ff ff       	call   10a7f <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10d49:	83 ec 0c             	sub    $0xc,%esp
   10d4c:	ff 75 f4             	push   -0xc(%ebp)
   10d4f:	e8 21 0a 00 00       	call   11775 <idt_leave_protection>
   10d54:	83 c4 10             	add    $0x10,%esp
   10d57:	90                   	nop
   10d58:	c9                   	leave  
   10d59:	c3                   	ret    

00010d5a <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10d5a:	55                   	push   %ebp
   10d5b:	89 e5                	mov    %esp,%ebp
   10d5d:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10d60:	8b 45 08             	mov    0x8(%ebp),%eax
   10d63:	c1 e8 10             	shr    $0x10,%eax
   10d66:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10d71:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d74:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10d77:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10d7b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10d7f:	90                   	nop
   10d80:	c9                   	leave  
   10d81:	c3                   	ret    

00010d82 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10d82:	55                   	push   %ebp
   10d83:	89 e5                	mov    %esp,%ebp
   10d85:	83 ec 18             	sub    $0x18,%esp
   10d88:	8b 55 08             	mov    0x8(%ebp),%edx
   10d8b:	8b 45 14             	mov    0x14(%ebp),%eax
   10d8e:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10d92:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10d96:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10d9a:	66 c1 e8 03          	shr    $0x3,%ax
   10d9e:	0f b7 c0             	movzwl %ax,%eax
   10da1:	c1 e0 03             	shl    $0x3,%eax
   10da4:	05 40 3e 01 00       	add    $0x13e40,%eax
   10da9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10dac:	8b 45 0c             	mov    0xc(%ebp),%eax
   10daf:	89 c2                	mov    %eax,%edx
   10db1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10db4:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10db8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dbb:	c1 e8 10             	shr    $0x10,%eax
   10dbe:	89 c2                	mov    %eax,%edx
   10dc0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dc3:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10dc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dc9:	c1 e8 18             	shr    $0x18,%eax
   10dcc:	89 c2                	mov    %eax,%edx
   10dce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dd1:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10dd4:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10ddb:	76 1d                	jbe    10dfa <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10ddd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10de0:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10de4:	66 0d 00 80          	or     $0x8000,%ax
   10de8:	89 c2                	mov    %eax,%edx
   10dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ded:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10df1:	8b 45 10             	mov    0x10(%ebp),%eax
   10df4:	c1 e8 0c             	shr    $0xc,%eax
   10df7:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10dfa:	8b 45 10             	mov    0x10(%ebp),%eax
   10dfd:	89 c2                	mov    %eax,%edx
   10dff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e02:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10e05:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e08:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e0c:	89 c2                	mov    %eax,%edx
   10e0e:	8b 45 10             	mov    0x10(%ebp),%eax
   10e11:	c1 e8 08             	shr    $0x8,%eax
   10e14:	66 25 00 0f          	and    $0xf00,%ax
   10e18:	09 d0                	or     %edx,%eax
   10e1a:	89 c2                	mov    %eax,%edx
   10e1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e1f:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10e23:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e26:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e2a:	89 c2                	mov    %eax,%edx
   10e2c:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10e30:	80 e4 f0             	and    $0xf0,%ah
   10e33:	09 d0                	or     %edx,%eax
   10e35:	89 c2                	mov    %eax,%edx
   10e37:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e3a:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10e3e:	90                   	nop
   10e3f:	c9                   	leave  
   10e40:	c3                   	ret    

00010e41 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10e41:	55                   	push   %ebp
   10e42:	89 e5                	mov    %esp,%ebp
   10e44:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10e47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10e4e:	eb 1c                	jmp    10e6c <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10e50:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e53:	c1 e0 03             	shl    $0x3,%eax
   10e56:	0f b7 c0             	movzwl %ax,%eax
   10e59:	6a 00                	push   $0x0
   10e5b:	6a 00                	push   $0x0
   10e5d:	6a 00                	push   $0x0
   10e5f:	50                   	push   %eax
   10e60:	e8 1d ff ff ff       	call   10d82 <segment_desc_set>
   10e65:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10e68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10e6c:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10e73:	7e db                	jle    10e50 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10e75:	68 92 40 00 00       	push   $0x4092
   10e7a:	6a ff                	push   $0xffffffff
   10e7c:	6a 00                	push   $0x0
   10e7e:	6a 10                	push   $0x10
   10e80:	e8 fd fe ff ff       	call   10d82 <segment_desc_set>
   10e85:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10e88:	c7 05 48 3e 02 00 01 	movl   $0x1,0x23e48
   10e8f:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10e92:	68 9a 40 00 00       	push   $0x409a
   10e97:	6a ff                	push   $0xffffffff
   10e99:	6a 00                	push   $0x0
   10e9b:	6a 08                	push   $0x8
   10e9d:	e8 e0 fe ff ff       	call   10d82 <segment_desc_set>
   10ea2:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10ea5:	c7 05 44 3e 02 00 01 	movl   $0x1,0x23e44
   10eac:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10eaf:	b8 40 3e 01 00       	mov    $0x13e40,%eax
   10eb4:	68 00 00 01 00       	push   $0x10000
   10eb9:	50                   	push   %eax
   10eba:	e8 9b fe ff ff       	call   10d5a <lgdt>
   10ebf:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10ec2:	83 ec 0c             	sub    $0xc,%esp
   10ec5:	68 40 be 02 00       	push   $0x2be40
   10eca:	e8 3b 0b 00 00       	call   11a0a <mutex_init>
   10ecf:	83 c4 10             	add    $0x10,%esp
}
   10ed2:	90                   	nop
   10ed3:	c9                   	leave  
   10ed4:	c3                   	ret    

00010ed5 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10ed5:	55                   	push   %ebp
   10ed6:	89 e5                	mov    %esp,%ebp
   10ed8:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10edb:	83 ec 0c             	sub    $0xc,%esp
   10ede:	68 40 be 02 00       	push   $0x2be40
   10ee3:	e8 6f 0b 00 00       	call   11a57 <mutex_lock>
   10ee8:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10eeb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10ef2:	eb 38                	jmp    10f2c <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ef7:	8b 04 85 40 3e 02 00 	mov    0x23e40(,%eax,4),%eax
   10efe:	85 c0                	test   %eax,%eax
   10f00:	75 26                	jne    10f28 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f05:	c7 04 85 40 3e 02 00 	movl   $0x1,0x23e40(,%eax,4)
   10f0c:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10f10:	83 ec 0c             	sub    $0xc,%esp
   10f13:	68 40 be 02 00       	push   $0x2be40
   10f18:	e8 cb 0b 00 00       	call   11ae8 <mutex_unlock>
   10f1d:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f23:	c1 e0 03             	shl    $0x3,%eax
   10f26:	eb 22                	jmp    10f4a <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10f28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f2c:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10f33:	7e bf                	jle    10ef4 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10f35:	83 ec 0c             	sub    $0xc,%esp
   10f38:	68 40 be 02 00       	push   $0x2be40
   10f3d:	e8 a6 0b 00 00       	call   11ae8 <mutex_unlock>
   10f42:	83 c4 10             	add    $0x10,%esp
    return -1;
   10f45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10f4a:	c9                   	leave  
   10f4b:	c3                   	ret    

00010f4c <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10f4c:	55                   	push   %ebp
   10f4d:	89 e5                	mov    %esp,%ebp
   10f4f:	fa                   	cli    
   10f50:	90                   	nop
   10f51:	5d                   	pop    %ebp
   10f52:	c3                   	ret    

00010f53 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10f53:	55                   	push   %ebp
   10f54:	89 e5                	mov    %esp,%ebp
   10f56:	fb                   	sti    
   10f57:	90                   	nop
   10f58:	5d                   	pop    %ebp
   10f59:	c3                   	ret    

00010f5a <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10f5a:	55                   	push   %ebp
   10f5b:	89 e5                	mov    %esp,%ebp
   10f5d:	f4                   	hlt    
   10f5e:	90                   	nop
   10f5f:	5d                   	pop    %ebp
   10f60:	c3                   	ret    

00010f61 <inb>:
static inline uint8_t inb(uint16_t port) {
   10f61:	55                   	push   %ebp
   10f62:	89 e5                	mov    %esp,%ebp
   10f64:	83 ec 14             	sub    $0x14,%esp
   10f67:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10f6e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10f72:	89 c2                	mov    %eax,%edx
   10f74:	ec                   	in     (%dx),%al
   10f75:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10f78:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10f7c:	c9                   	leave  
   10f7d:	c3                   	ret    

00010f7e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10f7e:	55                   	push   %ebp
   10f7f:	89 e5                	mov    %esp,%ebp
   10f81:	83 ec 08             	sub    $0x8,%esp
   10f84:	8b 45 08             	mov    0x8(%ebp),%eax
   10f87:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f8a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10f8e:	89 d0                	mov    %edx,%eax
   10f90:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10f93:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f97:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10f9b:	ee                   	out    %al,(%dx)
}
   10f9c:	90                   	nop
   10f9d:	c9                   	leave  
   10f9e:	c3                   	ret    

00010f9f <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10f9f:	55                   	push   %ebp
   10fa0:	89 e5                	mov    %esp,%ebp
   10fa2:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa8:	c1 e8 10             	shr    $0x10,%eax
   10fab:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10faf:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fb9:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10fbc:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10fc0:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10fc4:	90                   	nop
   10fc5:	c9                   	leave  
   10fc6:	c3                   	ret    

00010fc7 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10fc7:	55                   	push   %ebp
   10fc8:	89 e5                	mov    %esp,%ebp
   10fca:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10fcd:	9c                   	pushf  
   10fce:	58                   	pop    %eax
   10fcf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10fd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10fd5:	c9                   	leave  
   10fd6:	c3                   	ret    

00010fd7 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10fd7:	55                   	push   %ebp
   10fd8:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10fda:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdd:	50                   	push   %eax
   10fde:	9d                   	popf   
}
   10fdf:	90                   	nop
   10fe0:	5d                   	pop    %ebp
   10fe1:	c3                   	ret    

00010fe2 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10fe2:	55                   	push   %ebp
   10fe3:	89 e5                	mov    %esp,%ebp
   10fe5:	57                   	push   %edi
   10fe6:	56                   	push   %esi
   10fe7:	53                   	push   %ebx
   10fe8:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10feb:	83 ec 0c             	sub    $0xc,%esp
   10fee:	68 20 31 01 00       	push   $0x13120
   10ff3:	e8 f6 1d 00 00       	call   12dee <log_printf>
   10ff8:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10ffb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffe:	8b 50 34             	mov    0x34(%eax),%edx
   11001:	8b 45 08             	mov    0x8(%ebp),%eax
   11004:	8b 40 30             	mov    0x30(%eax),%eax
   11007:	83 ec 04             	sub    $0x4,%esp
   1100a:	52                   	push   %edx
   1100b:	50                   	push   %eax
   1100c:	68 5e 31 01 00       	push   $0x1315e
   11011:	e8 d8 1d 00 00       	call   12dee <log_printf>
   11016:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   11019:	8b 45 08             	mov    0x8(%ebp),%eax
   1101c:	8b 38                	mov    (%eax),%edi
   1101e:	8b 45 08             	mov    0x8(%ebp),%eax
   11021:	8b 70 04             	mov    0x4(%eax),%esi
   11024:	8b 45 08             	mov    0x8(%ebp),%eax
   11027:	8b 58 08             	mov    0x8(%eax),%ebx
   1102a:	8b 45 08             	mov    0x8(%ebp),%eax
   1102d:	8b 48 0c             	mov    0xc(%eax),%ecx
   11030:	8b 45 08             	mov    0x8(%ebp),%eax
   11033:	8b 50 0c             	mov    0xc(%eax),%edx
   11036:	8b 45 08             	mov    0x8(%ebp),%eax
   11039:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   1103c:	83 ec 04             	sub    $0x4,%esp
   1103f:	57                   	push   %edi
   11040:	56                   	push   %esi
   11041:	53                   	push   %ebx
   11042:	51                   	push   %ecx
   11043:	52                   	push   %edx
   11044:	50                   	push   %eax
   11045:	68 78 31 01 00       	push   $0x13178
   1104a:	e8 9f 1d 00 00       	call   12dee <log_printf>
   1104f:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   11052:	8b 45 08             	mov    0x8(%ebp),%eax
   11055:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11058:	8b 45 08             	mov    0x8(%ebp),%eax
   1105b:	8b 40 18             	mov    0x18(%eax),%eax
   1105e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	8b 58 10             	mov    0x10(%eax),%ebx
   11067:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1106a:	8b 45 08             	mov    0x8(%ebp),%eax
   1106d:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11070:	8b 45 08             	mov    0x8(%ebp),%eax
   11073:	8b 70 24             	mov    0x24(%eax),%esi
   11076:	8b 45 08             	mov    0x8(%ebp),%eax
   11079:	8b 58 28             	mov    0x28(%eax),%ebx
   1107c:	8b 45 08             	mov    0x8(%ebp),%eax
   1107f:	8b 50 20             	mov    0x20(%eax),%edx
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11088:	83 ec 0c             	sub    $0xc,%esp
   1108b:	51                   	push   %ecx
   1108c:	ff 75 e4             	push   -0x1c(%ebp)
   1108f:	ff 75 e0             	push   -0x20(%ebp)
   11092:	57                   	push   %edi
   11093:	56                   	push   %esi
   11094:	53                   	push   %ebx
   11095:	52                   	push   %edx
   11096:	50                   	push   %eax
   11097:	68 a8 31 01 00       	push   $0x131a8
   1109c:	e8 4d 1d 00 00       	call   12dee <log_printf>
   110a1:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   110a4:	8b 45 08             	mov    0x8(%ebp),%eax
   110a7:	8b 50 40             	mov    0x40(%eax),%edx
   110aa:	8b 45 08             	mov    0x8(%ebp),%eax
   110ad:	8b 40 38             	mov    0x38(%eax),%eax
   110b0:	83 ec 04             	sub    $0x4,%esp
   110b3:	52                   	push   %edx
   110b4:	50                   	push   %eax
   110b5:	68 00 32 01 00       	push   $0x13200
   110ba:	e8 2f 1d 00 00       	call   12dee <log_printf>
   110bf:	83 c4 10             	add    $0x10,%esp
}
   110c2:	90                   	nop
   110c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
   110c6:	5b                   	pop    %ebx
   110c7:	5e                   	pop    %esi
   110c8:	5f                   	pop    %edi
   110c9:	5d                   	pop    %ebp
   110ca:	c3                   	ret    

000110cb <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   110cb:	55                   	push   %ebp
   110cc:	89 e5                	mov    %esp,%ebp
   110ce:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   110d1:	83 ec 0c             	sub    $0xc,%esp
   110d4:	68 1c 32 01 00       	push   $0x1321c
   110d9:	e8 10 1d 00 00       	call   12dee <log_printf>
   110de:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   110e1:	83 ec 08             	sub    $0x8,%esp
   110e4:	ff 75 0c             	push   0xc(%ebp)
   110e7:	68 50 32 01 00       	push   $0x13250
   110ec:	e8 fd 1c 00 00       	call   12dee <log_printf>
   110f1:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   110f4:	83 ec 0c             	sub    $0xc,%esp
   110f7:	ff 75 08             	push   0x8(%ebp)
   110fa:	e8 e3 fe ff ff       	call   10fe2 <print_exception_fram>
   110ff:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11102:	e8 53 fe ff ff       	call   10f5a <hlt>
   11107:	eb f9                	jmp    11102 <do_default_handler+0x37>

00011109 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11109:	55                   	push   %ebp
   1110a:	89 e5                	mov    %esp,%ebp
   1110c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1110f:	83 ec 08             	sub    $0x8,%esp
   11112:	68 6a 32 01 00       	push   $0x1326a
   11117:	ff 75 08             	push   0x8(%ebp)
   1111a:	e8 ac ff ff ff       	call   110cb <do_default_handler>
   1111f:	83 c4 10             	add    $0x10,%esp
}
   11122:	90                   	nop
   11123:	c9                   	leave  
   11124:	c3                   	ret    

00011125 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11125:	55                   	push   %ebp
   11126:	89 e5                	mov    %esp,%ebp
   11128:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1112b:	83 ec 08             	sub    $0x8,%esp
   1112e:	68 7c 32 01 00       	push   $0x1327c
   11133:	ff 75 08             	push   0x8(%ebp)
   11136:	e8 90 ff ff ff       	call   110cb <do_default_handler>
   1113b:	83 c4 10             	add    $0x10,%esp
}
   1113e:	90                   	nop
   1113f:	c9                   	leave  
   11140:	c3                   	ret    

00011141 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11141:	55                   	push   %ebp
   11142:	89 e5                	mov    %esp,%ebp
   11144:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11147:	83 ec 08             	sub    $0x8,%esp
   1114a:	68 8e 32 01 00       	push   $0x1328e
   1114f:	ff 75 08             	push   0x8(%ebp)
   11152:	e8 74 ff ff ff       	call   110cb <do_default_handler>
   11157:	83 c4 10             	add    $0x10,%esp
}
   1115a:	90                   	nop
   1115b:	c9                   	leave  
   1115c:	c3                   	ret    

0001115d <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   1115d:	55                   	push   %ebp
   1115e:	89 e5                	mov    %esp,%ebp
   11160:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   11163:	83 ec 08             	sub    $0x8,%esp
   11166:	68 9e 32 01 00       	push   $0x1329e
   1116b:	ff 75 08             	push   0x8(%ebp)
   1116e:	e8 58 ff ff ff       	call   110cb <do_default_handler>
   11173:	83 c4 10             	add    $0x10,%esp
}
   11176:	90                   	nop
   11177:	c9                   	leave  
   11178:	c3                   	ret    

00011179 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11179:	55                   	push   %ebp
   1117a:	89 e5                	mov    %esp,%ebp
   1117c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   1117f:	83 ec 08             	sub    $0x8,%esp
   11182:	68 ac 32 01 00       	push   $0x132ac
   11187:	ff 75 08             	push   0x8(%ebp)
   1118a:	e8 3c ff ff ff       	call   110cb <do_default_handler>
   1118f:	83 c4 10             	add    $0x10,%esp
}
   11192:	90                   	nop
   11193:	c9                   	leave  
   11194:	c3                   	ret    

00011195 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11195:	55                   	push   %ebp
   11196:	89 e5                	mov    %esp,%ebp
   11198:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1119b:	83 ec 08             	sub    $0x8,%esp
   1119e:	68 c1 32 01 00       	push   $0x132c1
   111a3:	ff 75 08             	push   0x8(%ebp)
   111a6:	e8 20 ff ff ff       	call   110cb <do_default_handler>
   111ab:	83 c4 10             	add    $0x10,%esp
}
   111ae:	90                   	nop
   111af:	c9                   	leave  
   111b0:	c3                   	ret    

000111b1 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   111b1:	55                   	push   %ebp
   111b2:	89 e5                	mov    %esp,%ebp
   111b4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   111b7:	83 ec 08             	sub    $0x8,%esp
   111ba:	68 d4 32 01 00       	push   $0x132d4
   111bf:	ff 75 08             	push   0x8(%ebp)
   111c2:	e8 04 ff ff ff       	call   110cb <do_default_handler>
   111c7:	83 c4 10             	add    $0x10,%esp
}
   111ca:	90                   	nop
   111cb:	c9                   	leave  
   111cc:	c3                   	ret    

000111cd <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   111cd:	55                   	push   %ebp
   111ce:	89 e5                	mov    %esp,%ebp
   111d0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   111d3:	83 ec 08             	sub    $0x8,%esp
   111d6:	68 ea 32 01 00       	push   $0x132ea
   111db:	ff 75 08             	push   0x8(%ebp)
   111de:	e8 e8 fe ff ff       	call   110cb <do_default_handler>
   111e3:	83 c4 10             	add    $0x10,%esp
}
   111e6:	90                   	nop
   111e7:	c9                   	leave  
   111e8:	c3                   	ret    

000111e9 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   111e9:	55                   	push   %ebp
   111ea:	89 e5                	mov    %esp,%ebp
   111ec:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   111ef:	83 ec 08             	sub    $0x8,%esp
   111f2:	68 03 33 01 00       	push   $0x13303
   111f7:	ff 75 08             	push   0x8(%ebp)
   111fa:	e8 cc fe ff ff       	call   110cb <do_default_handler>
   111ff:	83 c4 10             	add    $0x10,%esp
}
   11202:	90                   	nop
   11203:	c9                   	leave  
   11204:	c3                   	ret    

00011205 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11205:	55                   	push   %ebp
   11206:	89 e5                	mov    %esp,%ebp
   11208:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1120b:	83 ec 08             	sub    $0x8,%esp
   1120e:	68 20 33 01 00       	push   $0x13320
   11213:	ff 75 08             	push   0x8(%ebp)
   11216:	e8 b0 fe ff ff       	call   110cb <do_default_handler>
   1121b:	83 c4 10             	add    $0x10,%esp
}
   1121e:	90                   	nop
   1121f:	c9                   	leave  
   11220:	c3                   	ret    

00011221 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11221:	55                   	push   %ebp
   11222:	89 e5                	mov    %esp,%ebp
   11224:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11227:	83 ec 08             	sub    $0x8,%esp
   1122a:	68 37 33 01 00       	push   $0x13337
   1122f:	ff 75 08             	push   0x8(%ebp)
   11232:	e8 94 fe ff ff       	call   110cb <do_default_handler>
   11237:	83 c4 10             	add    $0x10,%esp
}
   1123a:	90                   	nop
   1123b:	c9                   	leave  
   1123c:	c3                   	ret    

0001123d <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   1123d:	55                   	push   %ebp
   1123e:	89 e5                	mov    %esp,%ebp
   11240:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11243:	83 ec 08             	sub    $0x8,%esp
   11246:	68 4d 33 01 00       	push   $0x1334d
   1124b:	ff 75 08             	push   0x8(%ebp)
   1124e:	e8 78 fe ff ff       	call   110cb <do_default_handler>
   11253:	83 c4 10             	add    $0x10,%esp
}
   11256:	90                   	nop
   11257:	c9                   	leave  
   11258:	c3                   	ret    

00011259 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11259:	55                   	push   %ebp
   1125a:	89 e5                	mov    %esp,%ebp
   1125c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1125f:	83 ec 08             	sub    $0x8,%esp
   11262:	68 6b 33 01 00       	push   $0x1336b
   11267:	ff 75 08             	push   0x8(%ebp)
   1126a:	e8 5c fe ff ff       	call   110cb <do_default_handler>
   1126f:	83 c4 10             	add    $0x10,%esp
}
   11272:	90                   	nop
   11273:	c9                   	leave  
   11274:	c3                   	ret    

00011275 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11275:	55                   	push   %ebp
   11276:	89 e5                	mov    %esp,%ebp
   11278:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   1127b:	83 ec 08             	sub    $0x8,%esp
   1127e:	68 89 33 01 00       	push   $0x13389
   11283:	ff 75 08             	push   0x8(%ebp)
   11286:	e8 40 fe ff ff       	call   110cb <do_default_handler>
   1128b:	83 c4 10             	add    $0x10,%esp
}
   1128e:	90                   	nop
   1128f:	c9                   	leave  
   11290:	c3                   	ret    

00011291 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   11291:	55                   	push   %ebp
   11292:	89 e5                	mov    %esp,%ebp
   11294:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   11297:	83 ec 08             	sub    $0x8,%esp
   1129a:	68 a6 33 01 00       	push   $0x133a6
   1129f:	ff 75 08             	push   0x8(%ebp)
   112a2:	e8 24 fe ff ff       	call   110cb <do_default_handler>
   112a7:	83 c4 10             	add    $0x10,%esp
}
   112aa:	90                   	nop
   112ab:	c9                   	leave  
   112ac:	c3                   	ret    

000112ad <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   112ad:	55                   	push   %ebp
   112ae:	89 e5                	mov    %esp,%ebp
   112b0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   112b3:	83 ec 08             	sub    $0x8,%esp
   112b6:	68 bb 33 01 00       	push   $0x133bb
   112bb:	ff 75 08             	push   0x8(%ebp)
   112be:	e8 08 fe ff ff       	call   110cb <do_default_handler>
   112c3:	83 c4 10             	add    $0x10,%esp
}
   112c6:	90                   	nop
   112c7:	c9                   	leave  
   112c8:	c3                   	ret    

000112c9 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   112c9:	55                   	push   %ebp
   112ca:	89 e5                	mov    %esp,%ebp
   112cc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   112cf:	83 ec 08             	sub    $0x8,%esp
   112d2:	68 cf 33 01 00       	push   $0x133cf
   112d7:	ff 75 08             	push   0x8(%ebp)
   112da:	e8 ec fd ff ff       	call   110cb <do_default_handler>
   112df:	83 c4 10             	add    $0x10,%esp
}
   112e2:	90                   	nop
   112e3:	c9                   	leave  
   112e4:	c3                   	ret    

000112e5 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   112e5:	55                   	push   %ebp
   112e6:	89 e5                	mov    %esp,%ebp
   112e8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   112eb:	83 ec 08             	sub    $0x8,%esp
   112ee:	68 e9 33 01 00       	push   $0x133e9
   112f3:	ff 75 08             	push   0x8(%ebp)
   112f6:	e8 d0 fd ff ff       	call   110cb <do_default_handler>
   112fb:	83 c4 10             	add    $0x10,%esp
}
   112fe:	90                   	nop
   112ff:	c9                   	leave  
   11300:	c3                   	ret    

00011301 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11301:	55                   	push   %ebp
   11302:	89 e5                	mov    %esp,%ebp
   11304:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11307:	83 ec 08             	sub    $0x8,%esp
   1130a:	68 01 34 01 00       	push   $0x13401
   1130f:	ff 75 08             	push   0x8(%ebp)
   11312:	e8 b4 fd ff ff       	call   110cb <do_default_handler>
   11317:	83 c4 10             	add    $0x10,%esp
}
   1131a:	90                   	nop
   1131b:	c9                   	leave  
   1131c:	c3                   	ret    

0001131d <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1131d:	55                   	push   %ebp
   1131e:	89 e5                	mov    %esp,%ebp
   11320:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11323:	83 ec 08             	sub    $0x8,%esp
   11326:	68 19 34 01 00       	push   $0x13419
   1132b:	ff 75 08             	push   0x8(%ebp)
   1132e:	e8 98 fd ff ff       	call   110cb <do_default_handler>
   11333:	83 c4 10             	add    $0x10,%esp
}
   11336:	90                   	nop
   11337:	c9                   	leave  
   11338:	c3                   	ret    

00011339 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11339:	55                   	push   %ebp
   1133a:	89 e5                	mov    %esp,%ebp
   1133c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1133f:	83 ec 08             	sub    $0x8,%esp
   11342:	68 35 34 01 00       	push   $0x13435
   11347:	ff 75 08             	push   0x8(%ebp)
   1134a:	e8 7c fd ff ff       	call   110cb <do_default_handler>
   1134f:	83 c4 10             	add    $0x10,%esp
}
   11352:	90                   	nop
   11353:	c9                   	leave  
   11354:	c3                   	ret    

00011355 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11355:	55                   	push   %ebp
   11356:	89 e5                	mov    %esp,%ebp
   11358:	83 ec 08             	sub    $0x8,%esp
   1135b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1135e:	8b 45 14             	mov    0x14(%ebp),%eax
   11361:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11365:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11369:	8b 45 10             	mov    0x10(%ebp),%eax
   1136c:	89 c2                	mov    %eax,%edx
   1136e:	8b 45 08             	mov    0x8(%ebp),%eax
   11371:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11374:	8b 45 10             	mov    0x10(%ebp),%eax
   11377:	c1 e8 10             	shr    $0x10,%eax
   1137a:	89 c2                	mov    %eax,%edx
   1137c:	8b 45 08             	mov    0x8(%ebp),%eax
   1137f:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11383:	8b 45 08             	mov    0x8(%ebp),%eax
   11386:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1138a:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1138e:	8b 45 08             	mov    0x8(%ebp),%eax
   11391:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11395:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11399:	90                   	nop
   1139a:	c9                   	leave  
   1139b:	c3                   	ret    

0001139c <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   1139c:	55                   	push   %ebp
   1139d:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   1139f:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   113a6:	7f 06                	jg     113ae <idt_install+0x12>
   113a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113ac:	79 07                	jns    113b5 <idt_install+0x19>
   113ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   113b3:	eb 25                	jmp    113da <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   113b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   113b8:	8b 55 08             	mov    0x8(%ebp),%edx
   113bb:	c1 e2 03             	shl    $0x3,%edx
   113be:	81 c2 60 be 02 00    	add    $0x2be60,%edx
   113c4:	68 00 8e 00 00       	push   $0x8e00
   113c9:	50                   	push   %eax
   113ca:	6a 08                	push   $0x8
   113cc:	52                   	push   %edx
   113cd:	e8 83 ff ff ff       	call   11355 <gate_desc_set>
   113d2:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   113d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113da:	c9                   	leave  
   113db:	c3                   	ret    

000113dc <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   113dc:	55                   	push   %ebp
   113dd:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   113df:	6a 11                	push   $0x11
   113e1:	6a 20                	push   $0x20
   113e3:	e8 96 fb ff ff       	call   10f7e <outb>
   113e8:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   113eb:	6a 20                	push   $0x20
   113ed:	6a 21                	push   $0x21
   113ef:	e8 8a fb ff ff       	call   10f7e <outb>
   113f4:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   113f7:	6a 04                	push   $0x4
   113f9:	6a 21                	push   $0x21
   113fb:	e8 7e fb ff ff       	call   10f7e <outb>
   11400:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11403:	6a 01                	push   $0x1
   11405:	6a 21                	push   $0x21
   11407:	e8 72 fb ff ff       	call   10f7e <outb>
   1140c:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1140f:	6a 11                	push   $0x11
   11411:	68 a0 00 00 00       	push   $0xa0
   11416:	e8 63 fb ff ff       	call   10f7e <outb>
   1141b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1141e:	6a 28                	push   $0x28
   11420:	68 a1 00 00 00       	push   $0xa1
   11425:	e8 54 fb ff ff       	call   10f7e <outb>
   1142a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1142d:	6a 02                	push   $0x2
   1142f:	68 a1 00 00 00       	push   $0xa1
   11434:	e8 45 fb ff ff       	call   10f7e <outb>
   11439:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   1143c:	6a 01                	push   $0x1
   1143e:	68 a1 00 00 00       	push   $0xa1
   11443:	e8 36 fb ff ff       	call   10f7e <outb>
   11448:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   1144b:	68 fb 00 00 00       	push   $0xfb
   11450:	6a 21                	push   $0x21
   11452:	e8 27 fb ff ff       	call   10f7e <outb>
   11457:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   1145a:	68 ff 00 00 00       	push   $0xff
   1145f:	68 a1 00 00 00       	push   $0xa1
   11464:	e8 15 fb ff ff       	call   10f7e <outb>
   11469:	83 c4 08             	add    $0x8,%esp


}
   1146c:	90                   	nop
   1146d:	c9                   	leave  
   1146e:	c3                   	ret    

0001146f <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1146f:	55                   	push   %ebp
   11470:	89 e5                	mov    %esp,%ebp
   11472:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11475:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1147c:	eb 14                	jmp    11492 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   1147e:	68 2a 00 01 00       	push   $0x1002a
   11483:	ff 75 fc             	push   -0x4(%ebp)
   11486:	e8 11 ff ff ff       	call   1139c <idt_install>
   1148b:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1148e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11492:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11499:	7e e3                	jle    1147e <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   1149b:	68 47 00 01 00       	push   $0x10047
   114a0:	6a 00                	push   $0x0
   114a2:	e8 f5 fe ff ff       	call   1139c <idt_install>
   114a7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   114aa:	68 64 00 01 00       	push   $0x10064
   114af:	6a 01                	push   $0x1
   114b1:	e8 e6 fe ff ff       	call   1139c <idt_install>
   114b6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   114b9:	68 81 00 01 00       	push   $0x10081
   114be:	6a 02                	push   $0x2
   114c0:	e8 d7 fe ff ff       	call   1139c <idt_install>
   114c5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   114c8:	68 9e 00 01 00       	push   $0x1009e
   114cd:	6a 03                	push   $0x3
   114cf:	e8 c8 fe ff ff       	call   1139c <idt_install>
   114d4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   114d7:	68 bb 00 01 00       	push   $0x100bb
   114dc:	6a 04                	push   $0x4
   114de:	e8 b9 fe ff ff       	call   1139c <idt_install>
   114e3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   114e6:	68 d8 00 01 00       	push   $0x100d8
   114eb:	6a 05                	push   $0x5
   114ed:	e8 aa fe ff ff       	call   1139c <idt_install>
   114f2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   114f5:	68 f5 00 01 00       	push   $0x100f5
   114fa:	6a 06                	push   $0x6
   114fc:	e8 9b fe ff ff       	call   1139c <idt_install>
   11501:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11504:	68 12 01 01 00       	push   $0x10112
   11509:	6a 07                	push   $0x7
   1150b:	e8 8c fe ff ff       	call   1139c <idt_install>
   11510:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11513:	68 2f 01 01 00       	push   $0x1012f
   11518:	6a 08                	push   $0x8
   1151a:	e8 7d fe ff ff       	call   1139c <idt_install>
   1151f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11522:	68 4a 01 01 00       	push   $0x1014a
   11527:	6a 0a                	push   $0xa
   11529:	e8 6e fe ff ff       	call   1139c <idt_install>
   1152e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11531:	68 65 01 01 00       	push   $0x10165
   11536:	6a 0b                	push   $0xb
   11538:	e8 5f fe ff ff       	call   1139c <idt_install>
   1153d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11540:	68 80 01 01 00       	push   $0x10180
   11545:	6a 0c                	push   $0xc
   11547:	e8 50 fe ff ff       	call   1139c <idt_install>
   1154c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1154f:	68 9b 01 01 00       	push   $0x1019b
   11554:	6a 0d                	push   $0xd
   11556:	e8 41 fe ff ff       	call   1139c <idt_install>
   1155b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1155e:	68 b6 01 01 00       	push   $0x101b6
   11563:	6a 0e                	push   $0xe
   11565:	e8 32 fe ff ff       	call   1139c <idt_install>
   1156a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1156d:	68 d1 01 01 00       	push   $0x101d1
   11572:	6a 10                	push   $0x10
   11574:	e8 23 fe ff ff       	call   1139c <idt_install>
   11579:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   1157c:	68 ee 01 01 00       	push   $0x101ee
   11581:	6a 11                	push   $0x11
   11583:	e8 14 fe ff ff       	call   1139c <idt_install>
   11588:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   1158b:	68 09 02 01 00       	push   $0x10209
   11590:	6a 12                	push   $0x12
   11592:	e8 05 fe ff ff       	call   1139c <idt_install>
   11597:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   1159a:	68 26 02 01 00       	push   $0x10226
   1159f:	6a 13                	push   $0x13
   115a1:	e8 f6 fd ff ff       	call   1139c <idt_install>
   115a6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   115a9:	68 43 02 01 00       	push   $0x10243
   115ae:	6a 14                	push   $0x14
   115b0:	e8 e7 fd ff ff       	call   1139c <idt_install>
   115b5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   115b8:	68 60 02 01 00       	push   $0x10260
   115bd:	6a 15                	push   $0x15
   115bf:	e8 d8 fd ff ff       	call   1139c <idt_install>
   115c4:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   115c7:	b8 60 be 02 00       	mov    $0x2be60,%eax
   115cc:	68 00 08 00 00       	push   $0x800
   115d1:	50                   	push   %eax
   115d2:	e8 c8 f9 ff ff       	call   10f9f <lidt>
   115d7:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   115da:	e8 fd fd ff ff       	call   113dc <init_pic>
}
   115df:	90                   	nop
   115e0:	c9                   	leave  
   115e1:	c3                   	ret    

000115e2 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   115e2:	55                   	push   %ebp
   115e3:	89 e5                	mov    %esp,%ebp
   115e5:	53                   	push   %ebx
   115e6:	83 ec 14             	sub    $0x14,%esp
   115e9:	8b 45 08             	mov    0x8(%ebp),%eax
   115ec:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   115ef:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   115f3:	76 7f                	jbe    11674 <idt_enable+0x92>
   115f5:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   115f9:	77 79                	ja     11674 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   115fb:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   115ff:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11603:	77 33                	ja     11638 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11605:	6a 21                	push   $0x21
   11607:	e8 55 f9 ff ff       	call   10f61 <inb>
   1160c:	83 c4 04             	add    $0x4,%esp
   1160f:	89 c3                	mov    %eax,%ebx
   11611:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11615:	ba 01 00 00 00       	mov    $0x1,%edx
   1161a:	89 c1                	mov    %eax,%ecx
   1161c:	d3 e2                	shl    %cl,%edx
   1161e:	89 d0                	mov    %edx,%eax
   11620:	f7 d0                	not    %eax
   11622:	21 d8                	and    %ebx,%eax
   11624:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11627:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1162b:	50                   	push   %eax
   1162c:	6a 21                	push   $0x21
   1162e:	e8 4b f9 ff ff       	call   10f7e <outb>
   11633:	83 c4 08             	add    $0x8,%esp
   11636:	eb 3d                	jmp    11675 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11638:	68 a1 00 00 00       	push   $0xa1
   1163d:	e8 1f f9 ff ff       	call   10f61 <inb>
   11642:	83 c4 04             	add    $0x4,%esp
   11645:	89 c3                	mov    %eax,%ebx
   11647:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1164b:	83 e8 08             	sub    $0x8,%eax
   1164e:	ba 01 00 00 00       	mov    $0x1,%edx
   11653:	89 c1                	mov    %eax,%ecx
   11655:	d3 e2                	shl    %cl,%edx
   11657:	89 d0                	mov    %edx,%eax
   11659:	f7 d0                	not    %eax
   1165b:	21 d8                	and    %ebx,%eax
   1165d:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11660:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11664:	50                   	push   %eax
   11665:	68 a1 00 00 00       	push   $0xa1
   1166a:	e8 0f f9 ff ff       	call   10f7e <outb>
   1166f:	83 c4 08             	add    $0x8,%esp
   11672:	eb 01                	jmp    11675 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11674:	90                   	nop
  }
  
}
   11675:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11678:	c9                   	leave  
   11679:	c3                   	ret    

0001167a <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   1167a:	55                   	push   %ebp
   1167b:	89 e5                	mov    %esp,%ebp
   1167d:	53                   	push   %ebx
   1167e:	83 ec 14             	sub    $0x14,%esp
   11681:	8b 45 08             	mov    0x8(%ebp),%eax
   11684:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11687:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1168b:	76 7b                	jbe    11708 <idt_disable+0x8e>
   1168d:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11691:	77 75                	ja     11708 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11693:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11697:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1169b:	77 31                	ja     116ce <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1169d:	6a 21                	push   $0x21
   1169f:	e8 bd f8 ff ff       	call   10f61 <inb>
   116a4:	83 c4 04             	add    $0x4,%esp
   116a7:	89 c3                	mov    %eax,%ebx
   116a9:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   116ad:	ba 01 00 00 00       	mov    $0x1,%edx
   116b2:	89 c1                	mov    %eax,%ecx
   116b4:	d3 e2                	shl    %cl,%edx
   116b6:	89 d0                	mov    %edx,%eax
   116b8:	09 d8                	or     %ebx,%eax
   116ba:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   116bd:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   116c1:	50                   	push   %eax
   116c2:	6a 21                	push   $0x21
   116c4:	e8 b5 f8 ff ff       	call   10f7e <outb>
   116c9:	83 c4 08             	add    $0x8,%esp
   116cc:	eb 3b                	jmp    11709 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   116ce:	68 a1 00 00 00       	push   $0xa1
   116d3:	e8 89 f8 ff ff       	call   10f61 <inb>
   116d8:	83 c4 04             	add    $0x4,%esp
   116db:	89 c3                	mov    %eax,%ebx
   116dd:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   116e1:	83 e8 08             	sub    $0x8,%eax
   116e4:	ba 01 00 00 00       	mov    $0x1,%edx
   116e9:	89 c1                	mov    %eax,%ecx
   116eb:	d3 e2                	shl    %cl,%edx
   116ed:	89 d0                	mov    %edx,%eax
   116ef:	09 d8                	or     %ebx,%eax
   116f1:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   116f4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   116f8:	50                   	push   %eax
   116f9:	68 a1 00 00 00       	push   $0xa1
   116fe:	e8 7b f8 ff ff       	call   10f7e <outb>
   11703:	83 c4 08             	add    $0x8,%esp
   11706:	eb 01                	jmp    11709 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11708:	90                   	nop
  }
  
}
   11709:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1170c:	c9                   	leave  
   1170d:	c3                   	ret    

0001170e <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1170e:	55                   	push   %ebp
   1170f:	89 e5                	mov    %esp,%ebp
  cli();
   11711:	e8 36 f8 ff ff       	call   10f4c <cli>
}
   11716:	90                   	nop
   11717:	5d                   	pop    %ebp
   11718:	c3                   	ret    

00011719 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11719:	55                   	push   %ebp
   1171a:	89 e5                	mov    %esp,%ebp
  sti();
   1171c:	e8 32 f8 ff ff       	call   10f53 <sti>
}
   11721:	90                   	nop
   11722:	5d                   	pop    %ebp
   11723:	c3                   	ret    

00011724 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11724:	55                   	push   %ebp
   11725:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11727:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   1172b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1172f:	78 29                	js     1175a <pic_send_eoi+0x36>
   11731:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11735:	7f 23                	jg     1175a <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11737:	6a 20                	push   $0x20
   11739:	6a 20                	push   $0x20
   1173b:	e8 3e f8 ff ff       	call   10f7e <outb>
   11740:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11743:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11747:	7e 12                	jle    1175b <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11749:	6a 20                	push   $0x20
   1174b:	68 a0 00 00 00       	push   $0xa0
   11750:	e8 29 f8 ff ff       	call   10f7e <outb>
   11755:	83 c4 08             	add    $0x8,%esp
   11758:	eb 01                	jmp    1175b <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   1175a:	90                   	nop
  }

}
   1175b:	c9                   	leave  
   1175c:	c3                   	ret    

0001175d <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   1175d:	55                   	push   %ebp
   1175e:	89 e5                	mov    %esp,%ebp
   11760:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11763:	e8 5f f8 ff ff       	call   10fc7 <read_eflags>
   11768:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   1176b:	e8 9e ff ff ff       	call   1170e <idt_disable_global>
  return state;;
   11770:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11773:	c9                   	leave  
   11774:	c3                   	ret    

00011775 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11775:	55                   	push   %ebp
   11776:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11778:	ff 75 08             	push   0x8(%ebp)
   1177b:	e8 57 f8 ff ff       	call   10fd7 <write_eflags>
   11780:	83 c4 04             	add    $0x4,%esp
}
   11783:	90                   	nop
   11784:	c9                   	leave  
   11785:	c3                   	ret    

00011786 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11786:	55                   	push   %ebp
   11787:	89 e5                	mov    %esp,%ebp
   11789:	83 ec 08             	sub    $0x8,%esp
   1178c:	8b 45 08             	mov    0x8(%ebp),%eax
   1178f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11792:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11796:	89 d0                	mov    %edx,%eax
   11798:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1179b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1179f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   117a3:	ee                   	out    %al,(%dx)
}
   117a4:	90                   	nop
   117a5:	c9                   	leave  
   117a6:	c3                   	ret    

000117a7 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   117a7:	55                   	push   %ebp
   117a8:	89 e5                	mov    %esp,%ebp
   117aa:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   117ad:	a1 60 c6 02 00       	mov    0x2c660,%eax
   117b2:	83 c0 01             	add    $0x1,%eax
   117b5:	a3 60 c6 02 00       	mov    %eax,0x2c660

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   117ba:	83 ec 0c             	sub    $0xc,%esp
   117bd:	6a 20                	push   $0x20
   117bf:	e8 60 ff ff ff       	call   11724 <pic_send_eoi>
   117c4:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   117c7:	e8 7c f3 ff ff       	call   10b48 <task_slice_end>
}
   117cc:	90                   	nop
   117cd:	c9                   	leave  
   117ce:	c3                   	ret    

000117cf <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   117cf:	55                   	push   %ebp
   117d0:	89 e5                	mov    %esp,%ebp
   117d2:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   117d5:	6a 36                	push   $0x36
   117d7:	6a 43                	push   $0x43
   117d9:	e8 a8 ff ff ff       	call   11786 <outb>
   117de:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   117e1:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   117e7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   117eb:	0f b6 c0             	movzbl %al,%eax
   117ee:	50                   	push   %eax
   117ef:	6a 40                	push   $0x40
   117f1:	e8 90 ff ff ff       	call   11786 <outb>
   117f6:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   117f9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   117fd:	66 c1 e8 08          	shr    $0x8,%ax
   11801:	0f b6 c0             	movzbl %al,%eax
   11804:	50                   	push   %eax
   11805:	6a 40                	push   $0x40
   11807:	e8 7a ff ff ff       	call   11786 <outb>
   1180c:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1180f:	83 ec 08             	sub    $0x8,%esp
   11812:	68 7b 02 01 00       	push   $0x1027b
   11817:	6a 20                	push   $0x20
   11819:	e8 7e fb ff ff       	call   1139c <idt_install>
   1181e:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11821:	83 ec 0c             	sub    $0xc,%esp
   11824:	6a 20                	push   $0x20
   11826:	e8 b7 fd ff ff       	call   115e2 <idt_enable>
   1182b:	83 c4 10             	add    $0x10,%esp

}
   1182e:	90                   	nop
   1182f:	c9                   	leave  
   11830:	c3                   	ret    

00011831 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   11831:	55                   	push   %ebp
   11832:	89 e5                	mov    %esp,%ebp
   11834:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11837:	c7 05 60 c6 02 00 00 	movl   $0x0,0x2c660
   1183e:	00 00 00 
    init_pit();
   11841:	e8 89 ff ff ff       	call   117cf <init_pit>
   11846:	90                   	nop
   11847:	c9                   	leave  
   11848:	c3                   	ret    

00011849 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11849:	55                   	push   %ebp
   1184a:	89 e5                	mov    %esp,%ebp
   1184c:	fb                   	sti    
   1184d:	90                   	nop
   1184e:	5d                   	pop    %ebp
   1184f:	c3                   	ret    

00011850 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   11850:	55                   	push   %ebp
   11851:	89 e5                	mov    %esp,%ebp
   11853:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11856:	8b 45 08             	mov    0x8(%ebp),%eax
   11859:	8b 40 50             	mov    0x50(%eax),%eax
   1185c:	85 c0                	test   %eax,%eax
   1185e:	75 19                	jne    11879 <kernel_init+0x29>
   11860:	68 54 34 01 00       	push   $0x13454
   11865:	68 20 35 01 00       	push   $0x13520
   1186a:	6a 22                	push   $0x22
   1186c:	68 78 34 01 00       	push   $0x13478
   11871:	e8 a9 08 00 00       	call   1211f <pannic>
   11876:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11879:	e8 e8 14 00 00       	call   12d66 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   1187e:	83 ec 0c             	sub    $0xc,%esp
   11881:	ff 75 08             	push   0x8(%ebp)
   11884:	e8 f3 eb ff ff       	call   1047c <memory_init>
   11889:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   1188c:	e8 b0 f5 ff ff       	call   10e41 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11891:	e8 d9 fb ff ff       	call   1146f <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11896:	e8 96 ff ff ff       	call   11831 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   1189b:	e8 44 f0 ff ff       	call   108e4 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   118a0:	90                   	nop
   118a1:	c9                   	leave  
   118a2:	c3                   	ret    

000118a3 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   118a3:	55                   	push   %ebp
   118a4:	89 e5                	mov    %esp,%ebp
   118a6:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   118a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   118b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118b3:	8d 50 01             	lea    0x1(%eax),%edx
   118b6:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118b9:	83 ec 08             	sub    $0x8,%esp
   118bc:	50                   	push   %eax
   118bd:	68 ad 34 01 00       	push   $0x134ad
   118c2:	e8 27 15 00 00       	call   12dee <log_printf>
   118c7:	83 c4 10             	add    $0x10,%esp
   118ca:	eb e4                	jmp    118b0 <test_task_1+0xd>

000118cc <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   118cc:	55                   	push   %ebp
   118cd:	89 e5                	mov    %esp,%ebp
   118cf:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   118d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   118d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118dc:	8d 50 01             	lea    0x1(%eax),%edx
   118df:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118e2:	83 ec 08             	sub    $0x8,%esp
   118e5:	50                   	push   %eax
   118e6:	68 b8 34 01 00       	push   $0x134b8
   118eb:	e8 fe 14 00 00       	call   12dee <log_printf>
   118f0:	83 c4 10             	add    $0x10,%esp
   118f3:	eb e4                	jmp    118d9 <test_task_2+0xd>

000118f5 <init_main>:
     }
}



void init_main(void) {
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   118fb:	83 ec 0c             	sub    $0xc,%esp
   118fe:	68 c3 34 01 00       	push   $0x134c3
   11903:	e8 e6 14 00 00       	call   12dee <log_printf>
   11908:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   1190b:	83 ec 04             	sub    $0x4,%esp
   1190e:	68 db 34 01 00       	push   $0x134db
   11913:	68 e1 34 01 00       	push   $0x134e1
   11918:	68 e6 34 01 00       	push   $0x134e6
   1191d:	e8 cc 14 00 00       	call   12dee <log_printf>
   11922:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11925:	e8 35 f0 ff ff       	call   1095f <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   1192a:	ba 00 d8 02 00       	mov    $0x2d800,%edx
   1192f:	b8 a3 18 01 00       	mov    $0x118a3,%eax
   11934:	52                   	push   %edx
   11935:	50                   	push   %eax
   11936:	68 fc 34 01 00       	push   $0x134fc
   1193b:	68 80 c6 02 00       	push   $0x2c680
   11940:	e8 b1 ee ff ff       	call   107f6 <task_init>
   11945:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11948:	ba 00 e8 02 00       	mov    $0x2e800,%edx
   1194d:	b8 cc 18 01 00       	mov    $0x118cc,%eax
   11952:	52                   	push   %edx
   11953:	50                   	push   %eax
   11954:	68 08 35 01 00       	push   $0x13508
   11959:	68 40 c7 02 00       	push   $0x2c740
   1195e:	e8 93 ee ff ff       	call   107f6 <task_init>
   11963:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   11966:	e8 de fe ff ff       	call   11849 <sti>

    int count = 0;
   1196b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   11972:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11975:	8d 50 01             	lea    0x1(%eax),%edx
   11978:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1197b:	83 ec 08             	sub    $0x8,%esp
   1197e:	50                   	push   %eax
   1197f:	68 14 35 01 00       	push   $0x13514
   11984:	e8 65 14 00 00       	call   12dee <log_printf>
   11989:	83 c4 10             	add    $0x10,%esp
   1198c:	eb e4                	jmp    11972 <init_main+0x7d>

0001198e <list_init>:
static inline void list_init(list_t *list) {
   1198e:	55                   	push   %ebp
   1198f:	89 e5                	mov    %esp,%ebp
   11991:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11994:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11998:	75 19                	jne    119b3 <list_init+0x25>
   1199a:	68 2c 35 01 00       	push   $0x1352c
   1199f:	68 d8 35 01 00       	push   $0x135d8
   119a4:	6a 31                	push   $0x31
   119a6:	68 40 35 01 00       	push   $0x13540
   119ab:	e8 6f 07 00 00       	call   1211f <pannic>
   119b0:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   119b3:	8b 45 08             	mov    0x8(%ebp),%eax
   119b6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   119bd:	8b 45 08             	mov    0x8(%ebp),%eax
   119c0:	8b 50 04             	mov    0x4(%eax),%edx
   119c3:	8b 45 08             	mov    0x8(%ebp),%eax
   119c6:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   119c8:	8b 45 08             	mov    0x8(%ebp),%eax
   119cb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   119d2:	90                   	nop
   119d3:	c9                   	leave  
   119d4:	c3                   	ret    

000119d5 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   119d5:	55                   	push   %ebp
   119d6:	89 e5                	mov    %esp,%ebp
   119d8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   119db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119df:	75 19                	jne    119fa <list_is_empty+0x25>
   119e1:	68 2c 35 01 00       	push   $0x1352c
   119e6:	68 e4 35 01 00       	push   $0x135e4
   119eb:	6a 38                	push   $0x38
   119ed:	68 40 35 01 00       	push   $0x13540
   119f2:	e8 28 07 00 00       	call   1211f <pannic>
   119f7:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   119fa:	8b 45 08             	mov    0x8(%ebp),%eax
   119fd:	8b 40 08             	mov    0x8(%eax),%eax
   11a00:	85 c0                	test   %eax,%eax
   11a02:	0f 94 c0             	sete   %al
   11a05:	0f b6 c0             	movzbl %al,%eax
}
   11a08:	c9                   	leave  
   11a09:	c3                   	ret    

00011a0a <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11a0a:	55                   	push   %ebp
   11a0b:	89 e5                	mov    %esp,%ebp
   11a0d:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11a10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a14:	75 19                	jne    11a2f <mutex_init+0x25>
   11a16:	68 7e 35 01 00       	push   $0x1357e
   11a1b:	68 cc 35 01 00       	push   $0x135cc
   11a20:	6a 15                	push   $0x15
   11a22:	68 94 35 01 00       	push   $0x13594
   11a27:	e8 f3 06 00 00       	call   1211f <pannic>
   11a2c:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a32:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11a39:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11a42:	8b 45 08             	mov    0x8(%ebp),%eax
   11a45:	83 c0 08             	add    $0x8,%eax
   11a48:	83 ec 0c             	sub    $0xc,%esp
   11a4b:	50                   	push   %eax
   11a4c:	e8 3d ff ff ff       	call   1198e <list_init>
   11a51:	83 c4 10             	add    $0x10,%esp
}
   11a54:	90                   	nop
   11a55:	c9                   	leave  
   11a56:	c3                   	ret    

00011a57 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11a57:	55                   	push   %ebp
   11a58:	89 e5                	mov    %esp,%ebp
   11a5a:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11a5d:	e8 fb fc ff ff       	call   1175d <idt_enter_protection>
   11a62:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11a65:	e8 0b f0 ff ff       	call   10a75 <task_current>
   11a6a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11a6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a70:	8b 40 04             	mov    0x4(%eax),%eax
   11a73:	85 c0                	test   %eax,%eax
   11a75:	75 19                	jne    11a90 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11a77:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7a:	8b 40 04             	mov    0x4(%eax),%eax
   11a7d:	8d 50 01             	lea    0x1(%eax),%edx
   11a80:	8b 45 08             	mov    0x8(%ebp),%eax
   11a83:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11a86:	8b 45 08             	mov    0x8(%ebp),%eax
   11a89:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11a8c:	89 10                	mov    %edx,(%eax)
   11a8e:	eb 47                	jmp    11ad7 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11a90:	8b 45 08             	mov    0x8(%ebp),%eax
   11a93:	8b 00                	mov    (%eax),%eax
   11a95:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11a98:	75 11                	jne    11aab <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11a9a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9d:	8b 40 04             	mov    0x4(%eax),%eax
   11aa0:	8d 50 01             	lea    0x1(%eax),%edx
   11aa3:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa6:	89 50 04             	mov    %edx,0x4(%eax)
   11aa9:	eb 2c                	jmp    11ad7 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11aab:	83 ec 0c             	sub    $0xc,%esp
   11aae:	ff 75 f0             	push   -0x10(%ebp)
   11ab1:	e8 46 ef ff ff       	call   109fc <task_set_unready>
   11ab6:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11abc:	8d 50 40             	lea    0x40(%eax),%edx
   11abf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac2:	83 c0 08             	add    $0x8,%eax
   11ac5:	83 ec 08             	sub    $0x8,%esp
   11ac8:	52                   	push   %edx
   11ac9:	50                   	push   %eax
   11aca:	e8 9b 0f 00 00       	call   12a6a <list_insert_last>
   11acf:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11ad2:	e8 a8 ef ff ff       	call   10a7f <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11ad7:	83 ec 0c             	sub    $0xc,%esp
   11ada:	ff 75 f4             	push   -0xc(%ebp)
   11add:	e8 93 fc ff ff       	call   11775 <idt_leave_protection>
   11ae2:	83 c4 10             	add    $0x10,%esp
}
   11ae5:	90                   	nop
   11ae6:	c9                   	leave  
   11ae7:	c3                   	ret    

00011ae8 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11ae8:	55                   	push   %ebp
   11ae9:	89 e5                	mov    %esp,%ebp
   11aeb:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11aee:	e8 6a fc ff ff       	call   1175d <idt_enter_protection>
   11af3:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11af6:	e8 7a ef ff ff       	call   10a75 <task_current>
   11afb:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11afe:	8b 45 08             	mov    0x8(%ebp),%eax
   11b01:	8b 00                	mov    (%eax),%eax
   11b03:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11b06:	0f 85 83 00 00 00    	jne    11b8f <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11b0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0f:	8b 40 04             	mov    0x4(%eax),%eax
   11b12:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b15:	8b 45 08             	mov    0x8(%ebp),%eax
   11b18:	89 50 04             	mov    %edx,0x4(%eax)
   11b1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1e:	8b 40 04             	mov    0x4(%eax),%eax
   11b21:	85 c0                	test   %eax,%eax
   11b23:	75 6a                	jne    11b8f <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11b25:	8b 45 08             	mov    0x8(%ebp),%eax
   11b28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b31:	83 c0 08             	add    $0x8,%eax
   11b34:	83 ec 0c             	sub    $0xc,%esp
   11b37:	50                   	push   %eax
   11b38:	e8 98 fe ff ff       	call   119d5 <list_is_empty>
   11b3d:	83 c4 10             	add    $0x10,%esp
   11b40:	85 c0                	test   %eax,%eax
   11b42:	75 4b                	jne    11b8f <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11b44:	8b 45 08             	mov    0x8(%ebp),%eax
   11b47:	83 c0 08             	add    $0x8,%eax
   11b4a:	83 ec 0c             	sub    $0xc,%esp
   11b4d:	50                   	push   %eax
   11b4e:	e8 a6 0f 00 00       	call   12af9 <list_remove_first>
   11b53:	83 c4 10             	add    $0x10,%esp
   11b56:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11b59:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11b5d:	74 08                	je     11b67 <mutex_unlock+0x7f>
   11b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b62:	83 e8 40             	sub    $0x40,%eax
   11b65:	eb 05                	jmp    11b6c <mutex_unlock+0x84>
   11b67:	b8 00 00 00 00       	mov    $0x0,%eax
   11b6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b72:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11b79:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11b7f:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11b81:	83 ec 0c             	sub    $0xc,%esp
   11b84:	ff 75 e8             	push   -0x18(%ebp)
   11b87:	e8 25 ee ff ff       	call   109b1 <task_set_ready>
   11b8c:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11b8f:	83 ec 0c             	sub    $0xc,%esp
   11b92:	ff 75 f4             	push   -0xc(%ebp)
   11b95:	e8 db fb ff ff       	call   11775 <idt_leave_protection>
   11b9a:	83 c4 10             	add    $0x10,%esp
}
   11b9d:	90                   	nop
   11b9e:	c9                   	leave  
   11b9f:	c3                   	ret    

00011ba0 <list_init>:
static inline void list_init(list_t *list) {
   11ba0:	55                   	push   %ebp
   11ba1:	89 e5                	mov    %esp,%ebp
   11ba3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ba6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11baa:	75 19                	jne    11bc5 <list_init+0x25>
   11bac:	68 f4 35 01 00       	push   $0x135f4
   11bb1:	68 98 36 01 00       	push   $0x13698
   11bb6:	6a 31                	push   $0x31
   11bb8:	68 08 36 01 00       	push   $0x13608
   11bbd:	e8 5d 05 00 00       	call   1211f <pannic>
   11bc2:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd2:	8b 50 04             	mov    0x4(%eax),%edx
   11bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd8:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11bda:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11be4:	90                   	nop
   11be5:	c9                   	leave  
   11be6:	c3                   	ret    

00011be7 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11be7:	55                   	push   %ebp
   11be8:	89 e5                	mov    %esp,%ebp
   11bea:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11bed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bf1:	75 19                	jne    11c0c <list_is_empty+0x25>
   11bf3:	68 f4 35 01 00       	push   $0x135f4
   11bf8:	68 a4 36 01 00       	push   $0x136a4
   11bfd:	6a 38                	push   $0x38
   11bff:	68 08 36 01 00       	push   $0x13608
   11c04:	e8 16 05 00 00       	call   1211f <pannic>
   11c09:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11c0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0f:	8b 40 08             	mov    0x8(%eax),%eax
   11c12:	85 c0                	test   %eax,%eax
   11c14:	0f 94 c0             	sete   %al
   11c17:	0f b6 c0             	movzbl %al,%eax
}
   11c1a:	c9                   	leave  
   11c1b:	c3                   	ret    

00011c1c <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11c1c:	55                   	push   %ebp
   11c1d:	89 e5                	mov    %esp,%ebp
   11c1f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11c22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c26:	75 19                	jne    11c41 <sem_init+0x25>
   11c28:	68 46 36 01 00       	push   $0x13646
   11c2d:	68 8c 36 01 00       	push   $0x1368c
   11c32:	6a 18                	push   $0x18
   11c34:	68 58 36 01 00       	push   $0x13658
   11c39:	e8 e1 04 00 00       	call   1211f <pannic>
   11c3e:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11c41:	8b 45 08             	mov    0x8(%ebp),%eax
   11c44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11c4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4d:	83 c0 04             	add    $0x4,%eax
   11c50:	83 ec 0c             	sub    $0xc,%esp
   11c53:	50                   	push   %eax
   11c54:	e8 47 ff ff ff       	call   11ba0 <list_init>
   11c59:	83 c4 10             	add    $0x10,%esp
}
   11c5c:	90                   	nop
   11c5d:	c9                   	leave  
   11c5e:	c3                   	ret    

00011c5f <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11c5f:	55                   	push   %ebp
   11c60:	89 e5                	mov    %esp,%ebp
   11c62:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11c65:	e8 f3 fa ff ff       	call   1175d <idt_enter_protection>
   11c6a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11c6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c70:	8b 00                	mov    (%eax),%eax
   11c72:	85 c0                	test   %eax,%eax
   11c74:	7e 0f                	jle    11c85 <sem_wait+0x26>
        --sem->count;   
   11c76:	8b 45 08             	mov    0x8(%ebp),%eax
   11c79:	8b 00                	mov    (%eax),%eax
   11c7b:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c81:	89 10                	mov    %edx,(%eax)
   11c83:	eb 34                	jmp    11cb9 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11c85:	e8 eb ed ff ff       	call   10a75 <task_current>
   11c8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11c8d:	83 ec 0c             	sub    $0xc,%esp
   11c90:	ff 75 f0             	push   -0x10(%ebp)
   11c93:	e8 64 ed ff ff       	call   109fc <task_set_unready>
   11c98:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c9e:	8d 50 40             	lea    0x40(%eax),%edx
   11ca1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca4:	83 c0 04             	add    $0x4,%eax
   11ca7:	83 ec 08             	sub    $0x8,%esp
   11caa:	52                   	push   %edx
   11cab:	50                   	push   %eax
   11cac:	e8 b9 0d 00 00       	call   12a6a <list_insert_last>
   11cb1:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11cb4:	e8 c6 ed ff ff       	call   10a7f <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11cb9:	83 ec 0c             	sub    $0xc,%esp
   11cbc:	ff 75 f4             	push   -0xc(%ebp)
   11cbf:	e8 b1 fa ff ff       	call   11775 <idt_leave_protection>
   11cc4:	83 c4 10             	add    $0x10,%esp
}
   11cc7:	90                   	nop
   11cc8:	c9                   	leave  
   11cc9:	c3                   	ret    

00011cca <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11cca:	55                   	push   %ebp
   11ccb:	89 e5                	mov    %esp,%ebp
   11ccd:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11cd0:	e8 88 fa ff ff       	call   1175d <idt_enter_protection>
   11cd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11cd8:	8b 45 08             	mov    0x8(%ebp),%eax
   11cdb:	83 c0 04             	add    $0x4,%eax
   11cde:	83 ec 0c             	sub    $0xc,%esp
   11ce1:	50                   	push   %eax
   11ce2:	e8 00 ff ff ff       	call   11be7 <list_is_empty>
   11ce7:	83 c4 10             	add    $0x10,%esp
   11cea:	85 c0                	test   %eax,%eax
   11cec:	75 3b                	jne    11d29 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11cee:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf1:	83 c0 04             	add    $0x4,%eax
   11cf4:	83 ec 0c             	sub    $0xc,%esp
   11cf7:	50                   	push   %eax
   11cf8:	e8 fc 0d 00 00       	call   12af9 <list_remove_first>
   11cfd:	83 c4 10             	add    $0x10,%esp
   11d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11d03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d07:	74 08                	je     11d11 <sem_notify+0x47>
   11d09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d0c:	83 e8 40             	sub    $0x40,%eax
   11d0f:	eb 05                	jmp    11d16 <sem_notify+0x4c>
   11d11:	b8 00 00 00 00       	mov    $0x0,%eax
   11d16:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11d19:	83 ec 0c             	sub    $0xc,%esp
   11d1c:	ff 75 ec             	push   -0x14(%ebp)
   11d1f:	e8 8d ec ff ff       	call   109b1 <task_set_ready>
   11d24:	83 c4 10             	add    $0x10,%esp
   11d27:	eb 0d                	jmp    11d36 <sem_notify+0x6c>
    } else {
        sem->count++;
   11d29:	8b 45 08             	mov    0x8(%ebp),%eax
   11d2c:	8b 00                	mov    (%eax),%eax
   11d2e:	8d 50 01             	lea    0x1(%eax),%edx
   11d31:	8b 45 08             	mov    0x8(%ebp),%eax
   11d34:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11d36:	83 ec 0c             	sub    $0xc,%esp
   11d39:	ff 75 f4             	push   -0xc(%ebp)
   11d3c:	e8 34 fa ff ff       	call   11775 <idt_leave_protection>
   11d41:	83 c4 10             	add    $0x10,%esp

}
   11d44:	90                   	nop
   11d45:	c9                   	leave  
   11d46:	c3                   	ret    

00011d47 <sem_count>:

int sem_count(sem_t *sem) {
   11d47:	55                   	push   %ebp
   11d48:	89 e5                	mov    %esp,%ebp
   11d4a:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11d4d:	e8 0b fa ff ff       	call   1175d <idt_enter_protection>
   11d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11d55:	8b 45 08             	mov    0x8(%ebp),%eax
   11d58:	8b 00                	mov    (%eax),%eax
   11d5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11d5d:	83 ec 0c             	sub    $0xc,%esp
   11d60:	ff 75 f4             	push   -0xc(%ebp)
   11d63:	e8 0d fa ff ff       	call   11775 <idt_leave_protection>
   11d68:	83 c4 10             	add    $0x10,%esp

    return count;
   11d6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d6e:	c9                   	leave  
   11d6f:	c3                   	ret    

00011d70 <list_init>:
static inline void list_init(list_t *list) {
   11d70:	55                   	push   %ebp
   11d71:	89 e5                	mov    %esp,%ebp
   11d73:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11d76:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d7a:	75 19                	jne    11d95 <list_init+0x25>
   11d7c:	68 b4 36 01 00       	push   $0x136b4
   11d81:	68 b8 37 01 00       	push   $0x137b8
   11d86:	6a 31                	push   $0x31
   11d88:	68 c8 36 01 00       	push   $0x136c8
   11d8d:	e8 8d 03 00 00       	call   1211f <pannic>
   11d92:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11d95:	8b 45 08             	mov    0x8(%ebp),%eax
   11d98:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d9f:	8b 45 08             	mov    0x8(%ebp),%eax
   11da2:	8b 50 04             	mov    0x4(%eax),%edx
   11da5:	8b 45 08             	mov    0x8(%ebp),%eax
   11da8:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11daa:	8b 45 08             	mov    0x8(%ebp),%eax
   11dad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11db4:	90                   	nop
   11db5:	c9                   	leave  
   11db6:	c3                   	ret    

00011db7 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11db7:	55                   	push   %ebp
   11db8:	89 e5                	mov    %esp,%ebp
   11dba:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11dbd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11dc1:	75 19                	jne    11ddc <list_get_size+0x25>
   11dc3:	68 b4 36 01 00       	push   $0x136b4
   11dc8:	68 c4 37 01 00       	push   $0x137c4
   11dcd:	6a 3e                	push   $0x3e
   11dcf:	68 c8 36 01 00       	push   $0x136c8
   11dd4:	e8 46 03 00 00       	call   1211f <pannic>
   11dd9:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11ddc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ddf:	8b 40 08             	mov    0x8(%eax),%eax
}
   11de2:	c9                   	leave  
   11de3:	c3                   	ret    

00011de4 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11de4:	55                   	push   %ebp
   11de5:	89 e5                	mov    %esp,%ebp
   11de7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11dea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11dee:	75 19                	jne    11e09 <list_get_first+0x25>
   11df0:	68 b4 36 01 00       	push   $0x136b4
   11df5:	68 e4 37 01 00       	push   $0x137e4
   11dfa:	6a 44                	push   $0x44
   11dfc:	68 c8 36 01 00       	push   $0x136c8
   11e01:	e8 19 03 00 00       	call   1211f <pannic>
   11e06:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11e09:	8b 45 08             	mov    0x8(%ebp),%eax
   11e0c:	8b 00                	mov    (%eax),%eax
}
   11e0e:	c9                   	leave  
   11e0f:	c3                   	ret    

00011e10 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11e10:	55                   	push   %ebp
   11e11:	89 e5                	mov    %esp,%ebp
   11e13:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e1a:	75 19                	jne    11e35 <list_get_last+0x25>
   11e1c:	68 b4 36 01 00       	push   $0x136b4
   11e21:	68 d4 37 01 00       	push   $0x137d4
   11e26:	6a 4a                	push   $0x4a
   11e28:	68 c8 36 01 00       	push   $0x136c8
   11e2d:	e8 ed 02 00 00       	call   1211f <pannic>
   11e32:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11e35:	8b 45 08             	mov    0x8(%ebp),%eax
   11e38:	8b 40 04             	mov    0x4(%eax),%eax
}
   11e3b:	c9                   	leave  
   11e3c:	c3                   	ret    

00011e3d <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11e3d:	55                   	push   %ebp
   11e3e:	89 e5                	mov    %esp,%ebp
   11e40:	56                   	push   %esi
   11e41:	53                   	push   %ebx
   11e42:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11e45:	83 ec 0c             	sub    $0xc,%esp
   11e48:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e4b:	50                   	push   %eax
   11e4c:	e8 1f ff ff ff       	call   11d70 <list_init>
   11e51:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11e54:	83 ec 0c             	sub    $0xc,%esp
   11e57:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e5a:	50                   	push   %eax
   11e5b:	e8 57 ff ff ff       	call   11db7 <list_get_size>
   11e60:	83 c4 10             	add    $0x10,%esp
   11e63:	89 c6                	mov    %eax,%esi
   11e65:	83 ec 0c             	sub    $0xc,%esp
   11e68:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e6b:	50                   	push   %eax
   11e6c:	e8 9f ff ff ff       	call   11e10 <list_get_last>
   11e71:	83 c4 10             	add    $0x10,%esp
   11e74:	89 c3                	mov    %eax,%ebx
   11e76:	83 ec 0c             	sub    $0xc,%esp
   11e79:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11e7c:	50                   	push   %eax
   11e7d:	e8 62 ff ff ff       	call   11de4 <list_get_first>
   11e82:	83 c4 10             	add    $0x10,%esp
   11e85:	56                   	push   %esi
   11e86:	53                   	push   %ebx
   11e87:	50                   	push   %eax
   11e88:	68 08 37 01 00       	push   $0x13708
   11e8d:	e8 5c 0f 00 00       	call   12dee <log_printf>
   11e92:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11e95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e9c:	eb 3f                	jmp    11edd <list_test+0xa0>
        list_node_t *node = nodes + i;
   11e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ea1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11ea8:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11eab:	01 d0                	add    %edx,%eax
   11ead:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11eb0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11eb3:	83 ec 04             	sub    $0x4,%esp
   11eb6:	50                   	push   %eax
   11eb7:	ff 75 f4             	push   -0xc(%ebp)
   11eba:	68 30 37 01 00       	push   $0x13730
   11ebf:	e8 2a 0f 00 00       	call   12dee <log_printf>
   11ec4:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11ec7:	83 ec 08             	sub    $0x8,%esp
   11eca:	ff 75 d0             	push   -0x30(%ebp)
   11ecd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ed0:	50                   	push   %eax
   11ed1:	e8 09 0b 00 00       	call   129df <list_insert_first>
   11ed6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11ed9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11edd:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11ee1:	7e bb                	jle    11e9e <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11ee3:	83 ec 0c             	sub    $0xc,%esp
   11ee6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ee9:	50                   	push   %eax
   11eea:	e8 c8 fe ff ff       	call   11db7 <list_get_size>
   11eef:	83 c4 10             	add    $0x10,%esp
   11ef2:	89 c6                	mov    %eax,%esi
   11ef4:	83 ec 0c             	sub    $0xc,%esp
   11ef7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11efa:	50                   	push   %eax
   11efb:	e8 10 ff ff ff       	call   11e10 <list_get_last>
   11f00:	83 c4 10             	add    $0x10,%esp
   11f03:	89 c3                	mov    %eax,%ebx
   11f05:	83 ec 0c             	sub    $0xc,%esp
   11f08:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f0b:	50                   	push   %eax
   11f0c:	e8 d3 fe ff ff       	call   11de4 <list_get_first>
   11f11:	83 c4 10             	add    $0x10,%esp
   11f14:	56                   	push   %esi
   11f15:	53                   	push   %ebx
   11f16:	50                   	push   %eax
   11f17:	68 08 37 01 00       	push   $0x13708
   11f1c:	e8 cd 0e 00 00       	call   12dee <log_printf>
   11f21:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11f24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f2b:	eb 2d                	jmp    11f5a <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11f2d:	83 ec 0c             	sub    $0xc,%esp
   11f30:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f33:	50                   	push   %eax
   11f34:	e8 c0 0b 00 00       	call   12af9 <list_remove_first>
   11f39:	83 c4 10             	add    $0x10,%esp
   11f3c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11f3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11f42:	83 ec 04             	sub    $0x4,%esp
   11f45:	50                   	push   %eax
   11f46:	ff 75 f0             	push   -0x10(%ebp)
   11f49:	68 4f 37 01 00       	push   $0x1374f
   11f4e:	e8 9b 0e 00 00       	call   12dee <log_printf>
   11f53:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11f56:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f5a:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11f5e:	7e cd                	jle    11f2d <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11f60:	83 ec 0c             	sub    $0xc,%esp
   11f63:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f66:	50                   	push   %eax
   11f67:	e8 4b fe ff ff       	call   11db7 <list_get_size>
   11f6c:	83 c4 10             	add    $0x10,%esp
   11f6f:	89 c6                	mov    %eax,%esi
   11f71:	83 ec 0c             	sub    $0xc,%esp
   11f74:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f77:	50                   	push   %eax
   11f78:	e8 93 fe ff ff       	call   11e10 <list_get_last>
   11f7d:	83 c4 10             	add    $0x10,%esp
   11f80:	89 c3                	mov    %eax,%ebx
   11f82:	83 ec 0c             	sub    $0xc,%esp
   11f85:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f88:	50                   	push   %eax
   11f89:	e8 56 fe ff ff       	call   11de4 <list_get_first>
   11f8e:	83 c4 10             	add    $0x10,%esp
   11f91:	56                   	push   %esi
   11f92:	53                   	push   %ebx
   11f93:	50                   	push   %eax
   11f94:	68 08 37 01 00       	push   $0x13708
   11f99:	e8 50 0e 00 00       	call   12dee <log_printf>
   11f9e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11fa1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11fa8:	eb 3f                	jmp    11fe9 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11faa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11fb4:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11fb7:	01 d0                	add    %edx,%eax
   11fb9:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11fbc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11fbf:	83 ec 04             	sub    $0x4,%esp
   11fc2:	50                   	push   %eax
   11fc3:	ff 75 ec             	push   -0x14(%ebp)
   11fc6:	68 66 37 01 00       	push   $0x13766
   11fcb:	e8 1e 0e 00 00       	call   12dee <log_printf>
   11fd0:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11fd3:	83 ec 08             	sub    $0x8,%esp
   11fd6:	ff 75 d8             	push   -0x28(%ebp)
   11fd9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fdc:	50                   	push   %eax
   11fdd:	e8 88 0a 00 00       	call   12a6a <list_insert_last>
   11fe2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11fe5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11fe9:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11fed:	7e bb                	jle    11faa <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11fef:	83 ec 0c             	sub    $0xc,%esp
   11ff2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ff5:	50                   	push   %eax
   11ff6:	e8 bc fd ff ff       	call   11db7 <list_get_size>
   11ffb:	83 c4 10             	add    $0x10,%esp
   11ffe:	89 c6                	mov    %eax,%esi
   12000:	83 ec 0c             	sub    $0xc,%esp
   12003:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12006:	50                   	push   %eax
   12007:	e8 04 fe ff ff       	call   11e10 <list_get_last>
   1200c:	83 c4 10             	add    $0x10,%esp
   1200f:	89 c3                	mov    %eax,%ebx
   12011:	83 ec 0c             	sub    $0xc,%esp
   12014:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12017:	50                   	push   %eax
   12018:	e8 c7 fd ff ff       	call   11de4 <list_get_first>
   1201d:	83 c4 10             	add    $0x10,%esp
   12020:	56                   	push   %esi
   12021:	53                   	push   %ebx
   12022:	50                   	push   %eax
   12023:	68 08 37 01 00       	push   $0x13708
   12028:	e8 c1 0d 00 00       	call   12dee <log_printf>
   1202d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12030:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12037:	eb 2d                	jmp    12066 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12039:	83 ec 0c             	sub    $0xc,%esp
   1203c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1203f:	50                   	push   %eax
   12040:	e8 65 0b 00 00       	call   12baa <list_remove_last>
   12045:	83 c4 10             	add    $0x10,%esp
   12048:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1204b:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1204e:	83 ec 04             	sub    $0x4,%esp
   12051:	50                   	push   %eax
   12052:	ff 75 e8             	push   -0x18(%ebp)
   12055:	68 84 37 01 00       	push   $0x13784
   1205a:	e8 8f 0d 00 00       	call   12dee <log_printf>
   1205f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12062:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12066:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1206a:	7e cd                	jle    12039 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1206c:	83 ec 0c             	sub    $0xc,%esp
   1206f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12072:	50                   	push   %eax
   12073:	e8 3f fd ff ff       	call   11db7 <list_get_size>
   12078:	83 c4 10             	add    $0x10,%esp
   1207b:	89 c6                	mov    %eax,%esi
   1207d:	83 ec 0c             	sub    $0xc,%esp
   12080:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12083:	50                   	push   %eax
   12084:	e8 87 fd ff ff       	call   11e10 <list_get_last>
   12089:	83 c4 10             	add    $0x10,%esp
   1208c:	89 c3                	mov    %eax,%ebx
   1208e:	83 ec 0c             	sub    $0xc,%esp
   12091:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12094:	50                   	push   %eax
   12095:	e8 4a fd ff ff       	call   11de4 <list_get_first>
   1209a:	83 c4 10             	add    $0x10,%esp
   1209d:	56                   	push   %esi
   1209e:	53                   	push   %ebx
   1209f:	50                   	push   %eax
   120a0:	68 08 37 01 00       	push   $0x13708
   120a5:	e8 44 0d 00 00       	call   12dee <log_printf>
   120aa:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   120ad:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   120b4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   120bb:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   120c2:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   120c9:	8d 45 90             	lea    -0x70(%ebp),%eax
   120cc:	83 c0 04             	add    $0x4,%eax
   120cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   120d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   120d6:	74 08                	je     120e0 <list_test+0x2a3>
   120d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   120db:	83 e8 04             	sub    $0x4,%eax
   120de:	eb 05                	jmp    120e5 <list_test+0x2a8>
   120e0:	b8 00 00 00 00       	mov    $0x0,%eax
   120e5:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   120e8:	8d 45 90             	lea    -0x70(%ebp),%eax
   120eb:	83 ec 08             	sub    $0x8,%esp
   120ee:	50                   	push   %eax
   120ef:	68 9a 37 01 00       	push   $0x1379a
   120f4:	e8 f5 0c 00 00       	call   12dee <log_printf>
   120f9:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   120fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
   120ff:	83 ec 08             	sub    $0x8,%esp
   12102:	50                   	push   %eax
   12103:	68 a8 37 01 00       	push   $0x137a8
   12108:	e8 e1 0c 00 00       	call   12dee <log_printf>
   1210d:	83 c4 10             	add    $0x10,%esp

 }
   12110:	90                   	nop
   12111:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12114:	5b                   	pop    %ebx
   12115:	5e                   	pop    %esi
   12116:	5d                   	pop    %ebp
   12117:	c3                   	ret    

00012118 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12118:	55                   	push   %ebp
   12119:	89 e5                	mov    %esp,%ebp
   1211b:	f4                   	hlt    
   1211c:	90                   	nop
   1211d:	5d                   	pop    %ebp
   1211e:	c3                   	ret    

0001211f <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1211f:	55                   	push   %ebp
   12120:	89 e5                	mov    %esp,%ebp
   12122:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12125:	83 ec 08             	sub    $0x8,%esp
   12128:	ff 75 14             	push   0x14(%ebp)
   1212b:	68 f3 37 01 00       	push   $0x137f3
   12130:	e8 b9 0c 00 00       	call   12dee <log_printf>
   12135:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12138:	ff 75 10             	push   0x10(%ebp)
   1213b:	ff 75 0c             	push   0xc(%ebp)
   1213e:	ff 75 08             	push   0x8(%ebp)
   12141:	68 04 38 01 00       	push   $0x13804
   12146:	e8 a3 0c 00 00       	call   12dee <log_printf>
   1214b:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1214e:	e8 c5 ff ff ff       	call   12118 <hlt>
   12153:	eb f9                	jmp    1214e <pannic+0x2f>

00012155 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12155:	55                   	push   %ebp
   12156:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12158:	8b 45 08             	mov    0x8(%ebp),%eax
   1215b:	83 c0 07             	add    $0x7,%eax
   1215e:	8d 50 07             	lea    0x7(%eax),%edx
   12161:	85 c0                	test   %eax,%eax
   12163:	0f 48 c2             	cmovs  %edx,%eax
   12166:	c1 f8 03             	sar    $0x3,%eax
}
   12169:	5d                   	pop    %ebp
   1216a:	c3                   	ret    

0001216b <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   1216b:	55                   	push   %ebp
   1216c:	89 e5                	mov    %esp,%ebp
   1216e:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12171:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12175:	75 19                	jne    12190 <bitmap_init+0x25>
   12177:	68 20 38 01 00       	push   $0x13820
   1217c:	68 b4 38 01 00       	push   $0x138b4
   12181:	6a 24                	push   $0x24
   12183:	68 38 38 01 00       	push   $0x13838
   12188:	e8 92 ff ff ff       	call   1211f <pannic>
   1218d:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12190:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12194:	75 19                	jne    121af <bitmap_init+0x44>
   12196:	68 70 38 01 00       	push   $0x13870
   1219b:	68 b4 38 01 00       	push   $0x138b4
   121a0:	6a 25                	push   $0x25
   121a2:	68 38 38 01 00       	push   $0x13838
   121a7:	e8 73 ff ff ff       	call   1211f <pannic>
   121ac:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   121af:	8b 45 08             	mov    0x8(%ebp),%eax
   121b2:	8b 55 10             	mov    0x10(%ebp),%edx
   121b5:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   121b7:	8b 45 08             	mov    0x8(%ebp),%eax
   121ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   121bd:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   121c0:	8b 45 08             	mov    0x8(%ebp),%eax
   121c3:	8b 00                	mov    (%eax),%eax
   121c5:	83 ec 0c             	sub    $0xc,%esp
   121c8:	50                   	push   %eax
   121c9:	e8 87 ff ff ff       	call   12155 <bitmap_byte_count>
   121ce:	83 c4 10             	add    $0x10,%esp
   121d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   121d4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   121d8:	74 07                	je     121e1 <bitmap_init+0x76>
   121da:	ba ff 00 00 00       	mov    $0xff,%edx
   121df:	eb 05                	jmp    121e6 <bitmap_init+0x7b>
   121e1:	ba 00 00 00 00       	mov    $0x0,%edx
   121e6:	8b 45 08             	mov    0x8(%ebp),%eax
   121e9:	8b 40 04             	mov    0x4(%eax),%eax
   121ec:	83 ec 04             	sub    $0x4,%esp
   121ef:	ff 75 f4             	push   -0xc(%ebp)
   121f2:	52                   	push   %edx
   121f3:	50                   	push   %eax
   121f4:	e8 28 04 00 00       	call   12621 <kernel_memset>
   121f9:	83 c4 10             	add    $0x10,%esp

}
   121fc:	90                   	nop
   121fd:	c9                   	leave  
   121fe:	c3                   	ret    

000121ff <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   121ff:	55                   	push   %ebp
   12200:	89 e5                	mov    %esp,%ebp
   12202:	53                   	push   %ebx
   12203:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12206:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1220a:	75 19                	jne    12225 <bitmap_get_bit+0x26>
   1220c:	68 20 38 01 00       	push   $0x13820
   12211:	68 c0 38 01 00       	push   $0x138c0
   12216:	6a 39                	push   $0x39
   12218:	68 38 38 01 00       	push   $0x13838
   1221d:	e8 fd fe ff ff       	call   1211f <pannic>
   12222:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12225:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12229:	79 19                	jns    12244 <bitmap_get_bit+0x45>
   1222b:	68 84 38 01 00       	push   $0x13884
   12230:	68 c0 38 01 00       	push   $0x138c0
   12235:	6a 3a                	push   $0x3a
   12237:	68 38 38 01 00       	push   $0x13838
   1223c:	e8 de fe ff ff       	call   1211f <pannic>
   12241:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12244:	8b 45 08             	mov    0x8(%ebp),%eax
   12247:	8b 48 04             	mov    0x4(%eax),%ecx
   1224a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1224d:	8d 50 07             	lea    0x7(%eax),%edx
   12250:	85 c0                	test   %eax,%eax
   12252:	0f 48 c2             	cmovs  %edx,%eax
   12255:	c1 f8 03             	sar    $0x3,%eax
   12258:	01 c8                	add    %ecx,%eax
   1225a:	0f b6 00             	movzbl (%eax),%eax
   1225d:	89 c3                	mov    %eax,%ebx
   1225f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12262:	83 e0 07             	and    $0x7,%eax
   12265:	ba 01 00 00 00       	mov    $0x1,%edx
   1226a:	89 c1                	mov    %eax,%ecx
   1226c:	d3 e2                	shl    %cl,%edx
   1226e:	89 d0                	mov    %edx,%eax
   12270:	21 d8                	and    %ebx,%eax
}
   12272:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12275:	c9                   	leave  
   12276:	c3                   	ret    

00012277 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12277:	55                   	push   %ebp
   12278:	89 e5                	mov    %esp,%ebp
   1227a:	56                   	push   %esi
   1227b:	53                   	push   %ebx
   1227c:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1227f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12283:	75 19                	jne    1229e <bitmap_set_bit+0x27>
   12285:	68 20 38 01 00       	push   $0x13820
   1228a:	68 d0 38 01 00       	push   $0x138d0
   1228f:	6a 48                	push   $0x48
   12291:	68 38 38 01 00       	push   $0x13838
   12296:	e8 84 fe ff ff       	call   1211f <pannic>
   1229b:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   1229e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122a2:	78 06                	js     122aa <bitmap_set_bit+0x33>
   122a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122a8:	79 19                	jns    122c3 <bitmap_set_bit+0x4c>
   122aa:	68 8f 38 01 00       	push   $0x1388f
   122af:	68 d0 38 01 00       	push   $0x138d0
   122b4:	6a 49                	push   $0x49
   122b6:	68 38 38 01 00       	push   $0x13838
   122bb:	e8 5f fe ff ff       	call   1211f <pannic>
   122c0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   122c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122ca:	e9 92 00 00 00       	jmp    12361 <bitmap_set_bit+0xea>
        if (bit) {
   122cf:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   122d3:	74 42                	je     12317 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   122d5:	8b 45 08             	mov    0x8(%ebp),%eax
   122d8:	8b 48 04             	mov    0x4(%eax),%ecx
   122db:	8b 45 0c             	mov    0xc(%ebp),%eax
   122de:	8d 50 07             	lea    0x7(%eax),%edx
   122e1:	85 c0                	test   %eax,%eax
   122e3:	0f 48 c2             	cmovs  %edx,%eax
   122e6:	c1 f8 03             	sar    $0x3,%eax
   122e9:	89 c2                	mov    %eax,%edx
   122eb:	89 d0                	mov    %edx,%eax
   122ed:	01 c8                	add    %ecx,%eax
   122ef:	0f b6 00             	movzbl (%eax),%eax
   122f2:	89 c6                	mov    %eax,%esi
   122f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   122f7:	83 e0 07             	and    $0x7,%eax
   122fa:	bb 01 00 00 00       	mov    $0x1,%ebx
   122ff:	89 c1                	mov    %eax,%ecx
   12301:	d3 e3                	shl    %cl,%ebx
   12303:	89 d8                	mov    %ebx,%eax
   12305:	89 f1                	mov    %esi,%ecx
   12307:	09 c1                	or     %eax,%ecx
   12309:	8b 45 08             	mov    0x8(%ebp),%eax
   1230c:	8b 40 04             	mov    0x4(%eax),%eax
   1230f:	01 d0                	add    %edx,%eax
   12311:	89 ca                	mov    %ecx,%edx
   12313:	88 10                	mov    %dl,(%eax)
   12315:	eb 42                	jmp    12359 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12317:	8b 45 08             	mov    0x8(%ebp),%eax
   1231a:	8b 48 04             	mov    0x4(%eax),%ecx
   1231d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12320:	8d 50 07             	lea    0x7(%eax),%edx
   12323:	85 c0                	test   %eax,%eax
   12325:	0f 48 c2             	cmovs  %edx,%eax
   12328:	c1 f8 03             	sar    $0x3,%eax
   1232b:	89 c2                	mov    %eax,%edx
   1232d:	89 d0                	mov    %edx,%eax
   1232f:	01 c8                	add    %ecx,%eax
   12331:	0f b6 00             	movzbl (%eax),%eax
   12334:	89 c6                	mov    %eax,%esi
   12336:	8b 45 0c             	mov    0xc(%ebp),%eax
   12339:	83 e0 07             	and    $0x7,%eax
   1233c:	bb 01 00 00 00       	mov    $0x1,%ebx
   12341:	89 c1                	mov    %eax,%ecx
   12343:	d3 e3                	shl    %cl,%ebx
   12345:	89 d8                	mov    %ebx,%eax
   12347:	f7 d0                	not    %eax
   12349:	89 f1                	mov    %esi,%ecx
   1234b:	21 c1                	and    %eax,%ecx
   1234d:	8b 45 08             	mov    0x8(%ebp),%eax
   12350:	8b 40 04             	mov    0x4(%eax),%eax
   12353:	01 d0                	add    %edx,%eax
   12355:	89 ca                	mov    %ecx,%edx
   12357:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12359:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1235d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12361:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12364:	3b 45 10             	cmp    0x10(%ebp),%eax
   12367:	7d 0e                	jge    12377 <bitmap_set_bit+0x100>
   12369:	8b 45 08             	mov    0x8(%ebp),%eax
   1236c:	8b 00                	mov    (%eax),%eax
   1236e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12371:	0f 8c 58 ff ff ff    	jl     122cf <bitmap_set_bit+0x58>
        }
    }
}
   12377:	90                   	nop
   12378:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1237b:	5b                   	pop    %ebx
   1237c:	5e                   	pop    %esi
   1237d:	5d                   	pop    %ebp
   1237e:	c3                   	ret    

0001237f <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1237f:	55                   	push   %ebp
   12380:	89 e5                	mov    %esp,%ebp
   12382:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12385:	83 ec 08             	sub    $0x8,%esp
   12388:	ff 75 0c             	push   0xc(%ebp)
   1238b:	ff 75 08             	push   0x8(%ebp)
   1238e:	e8 6c fe ff ff       	call   121ff <bitmap_get_bit>
   12393:	83 c4 10             	add    $0x10,%esp
   12396:	84 c0                	test   %al,%al
   12398:	0f 95 c0             	setne  %al
   1239b:	0f b6 c0             	movzbl %al,%eax
}
   1239e:	c9                   	leave  
   1239f:	c3                   	ret    

000123a0 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   123a0:	55                   	push   %ebp
   123a1:	89 e5                	mov    %esp,%ebp
   123a3:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   123a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123aa:	75 19                	jne    123c5 <bitmap_alloc_nbits+0x25>
   123ac:	68 20 38 01 00       	push   $0x13820
   123b1:	68 e0 38 01 00       	push   $0x138e0
   123b6:	6a 68                	push   $0x68
   123b8:	68 38 38 01 00       	push   $0x13838
   123bd:	e8 5d fd ff ff       	call   1211f <pannic>
   123c2:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   123c5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123c9:	79 19                	jns    123e4 <bitmap_alloc_nbits+0x44>
   123cb:	68 a8 38 01 00       	push   $0x138a8
   123d0:	68 e0 38 01 00       	push   $0x138e0
   123d5:	6a 69                	push   $0x69
   123d7:	68 38 38 01 00       	push   $0x13838
   123dc:	e8 3e fd ff ff       	call   1211f <pannic>
   123e1:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   123e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   123eb:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   123f2:	e9 8f 00 00 00       	jmp    12486 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   123f7:	83 ec 08             	sub    $0x8,%esp
   123fa:	ff 75 f4             	push   -0xc(%ebp)
   123fd:	ff 75 08             	push   0x8(%ebp)
   12400:	e8 fa fd ff ff       	call   121ff <bitmap_get_bit>
   12405:	83 c4 10             	add    $0x10,%esp
   12408:	0f b6 c0             	movzbl %al,%eax
   1240b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1240e:	74 06                	je     12416 <bitmap_alloc_nbits+0x76>
            search_index++;
   12410:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12414:	eb 70                	jmp    12486 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12416:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12419:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   1241c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   12423:	eb 2d                	jmp    12452 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   12425:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12428:	8d 50 01             	lea    0x1(%eax),%edx
   1242b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1242e:	83 ec 08             	sub    $0x8,%esp
   12431:	50                   	push   %eax
   12432:	ff 75 08             	push   0x8(%ebp)
   12435:	e8 c5 fd ff ff       	call   121ff <bitmap_get_bit>
   1243a:	83 c4 10             	add    $0x10,%esp
   1243d:	0f b6 c0             	movzbl %al,%eax
   12440:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12443:	74 09                	je     1244e <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12445:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   1244c:	eb 16                	jmp    12464 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   1244e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12452:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12455:	3b 45 10             	cmp    0x10(%ebp),%eax
   12458:	7d 0a                	jge    12464 <bitmap_alloc_nbits+0xc4>
   1245a:	8b 45 08             	mov    0x8(%ebp),%eax
   1245d:	8b 00                	mov    (%eax),%eax
   1245f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12462:	7c c1                	jl     12425 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12464:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12468:	74 1c                	je     12486 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1246a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1246d:	f7 d0                	not    %eax
   1246f:	50                   	push   %eax
   12470:	ff 75 10             	push   0x10(%ebp)
   12473:	ff 75 f0             	push   -0x10(%ebp)
   12476:	ff 75 08             	push   0x8(%ebp)
   12479:	e8 f9 fd ff ff       	call   12277 <bitmap_set_bit>
   1247e:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12481:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12484:	eb 13                	jmp    12499 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12486:	8b 45 08             	mov    0x8(%ebp),%eax
   12489:	8b 00                	mov    (%eax),%eax
   1248b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1248e:	0f 8c 63 ff ff ff    	jl     123f7 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12494:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12499:	c9                   	leave  
   1249a:	c3                   	ret    

0001249b <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1249b:	55                   	push   %ebp
   1249c:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   1249e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124a2:	74 3b                	je     124df <kernel_strcpy+0x44>
   124a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124a8:	74 35                	je     124df <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   124aa:	eb 17                	jmp    124c3 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   124ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   124af:	8d 42 01             	lea    0x1(%edx),%eax
   124b2:	89 45 0c             	mov    %eax,0xc(%ebp)
   124b5:	8b 45 08             	mov    0x8(%ebp),%eax
   124b8:	8d 48 01             	lea    0x1(%eax),%ecx
   124bb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   124be:	0f b6 12             	movzbl (%edx),%edx
   124c1:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   124c3:	8b 45 08             	mov    0x8(%ebp),%eax
   124c6:	0f b6 00             	movzbl (%eax),%eax
   124c9:	84 c0                	test   %al,%al
   124cb:	74 0a                	je     124d7 <kernel_strcpy+0x3c>
   124cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   124d0:	0f b6 00             	movzbl (%eax),%eax
   124d3:	84 c0                	test   %al,%al
   124d5:	75 d5                	jne    124ac <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   124d7:	8b 45 08             	mov    0x8(%ebp),%eax
   124da:	c6 00 00             	movb   $0x0,(%eax)
   124dd:	eb 01                	jmp    124e0 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   124df:	90                   	nop
    
}
   124e0:	5d                   	pop    %ebp
   124e1:	c3                   	ret    

000124e2 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   124e2:	55                   	push   %ebp
   124e3:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   124e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124e9:	74 45                	je     12530 <kernel_strncpy+0x4e>
   124eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124ef:	74 3f                	je     12530 <kernel_strncpy+0x4e>
   124f1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124f5:	74 39                	je     12530 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   124f7:	eb 17                	jmp    12510 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   124f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   124fc:	8d 42 01             	lea    0x1(%edx),%eax
   124ff:	89 45 0c             	mov    %eax,0xc(%ebp)
   12502:	8b 45 08             	mov    0x8(%ebp),%eax
   12505:	8d 48 01             	lea    0x1(%eax),%ecx
   12508:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1250b:	0f b6 12             	movzbl (%edx),%edx
   1250e:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   12510:	8b 45 10             	mov    0x10(%ebp),%eax
   12513:	8d 50 ff             	lea    -0x1(%eax),%edx
   12516:	89 55 10             	mov    %edx,0x10(%ebp)
   12519:	83 f8 01             	cmp    $0x1,%eax
   1251c:	7e 0a                	jle    12528 <kernel_strncpy+0x46>
   1251e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12521:	0f b6 00             	movzbl (%eax),%eax
   12524:	84 c0                	test   %al,%al
   12526:	75 d1                	jne    124f9 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12528:	8b 45 08             	mov    0x8(%ebp),%eax
   1252b:	c6 00 00             	movb   $0x0,(%eax)
   1252e:	eb 01                	jmp    12531 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   12530:	90                   	nop
}
   12531:	5d                   	pop    %ebp
   12532:	c3                   	ret    

00012533 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   12533:	55                   	push   %ebp
   12534:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12536:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1253a:	74 06                	je     12542 <kernel_strncmp+0xf>
   1253c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12540:	75 0f                	jne    12551 <kernel_strncmp+0x1e>
   12542:	b8 00 00 00 00       	mov    $0x0,%eax
   12547:	eb 52                	jmp    1259b <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12549:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   1254d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   12551:	8b 45 08             	mov    0x8(%ebp),%eax
   12554:	0f b6 00             	movzbl (%eax),%eax
   12557:	84 c0                	test   %al,%al
   12559:	74 24                	je     1257f <kernel_strncmp+0x4c>
   1255b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1255e:	0f b6 00             	movzbl (%eax),%eax
   12561:	84 c0                	test   %al,%al
   12563:	74 1a                	je     1257f <kernel_strncmp+0x4c>
   12565:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12569:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1256d:	74 10                	je     1257f <kernel_strncmp+0x4c>
   1256f:	8b 45 08             	mov    0x8(%ebp),%eax
   12572:	0f b6 10             	movzbl (%eax),%edx
   12575:	8b 45 0c             	mov    0xc(%ebp),%eax
   12578:	0f b6 00             	movzbl (%eax),%eax
   1257b:	38 c2                	cmp    %al,%dl
   1257d:	74 ca                	je     12549 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   1257f:	8b 45 08             	mov    0x8(%ebp),%eax
   12582:	0f b6 10             	movzbl (%eax),%edx
   12585:	8b 45 0c             	mov    0xc(%ebp),%eax
   12588:	0f b6 00             	movzbl (%eax),%eax
   1258b:	38 c2                	cmp    %al,%dl
   1258d:	7e 07                	jle    12596 <kernel_strncmp+0x63>
   1258f:	b8 01 00 00 00       	mov    $0x1,%eax
   12594:	eb 05                	jmp    1259b <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12596:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   1259b:	5d                   	pop    %ebp
   1259c:	c3                   	ret    

0001259d <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   1259d:	55                   	push   %ebp
   1259e:	89 e5                	mov    %esp,%ebp
   125a0:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   125a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125a7:	75 07                	jne    125b0 <kernel_strlen+0x13>
   125a9:	b8 00 00 00 00       	mov    $0x0,%eax
   125ae:	eb 20                	jmp    125d0 <kernel_strlen+0x33>

    int len = 0;
   125b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   125b7:	eb 04                	jmp    125bd <kernel_strlen+0x20>
   125b9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   125bd:	8b 45 08             	mov    0x8(%ebp),%eax
   125c0:	8d 50 01             	lea    0x1(%eax),%edx
   125c3:	89 55 08             	mov    %edx,0x8(%ebp)
   125c6:	0f b6 00             	movzbl (%eax),%eax
   125c9:	84 c0                	test   %al,%al
   125cb:	75 ec                	jne    125b9 <kernel_strlen+0x1c>

    return len;
   125cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   125d0:	c9                   	leave  
   125d1:	c3                   	ret    

000125d2 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   125d2:	55                   	push   %ebp
   125d3:	89 e5                	mov    %esp,%ebp
   125d5:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   125d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125dc:	74 40                	je     1261e <kernel_memcpy+0x4c>
   125de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125e2:	74 3a                	je     1261e <kernel_memcpy+0x4c>
   125e4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125e8:	74 34                	je     1261e <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   125ea:	8b 45 08             	mov    0x8(%ebp),%eax
   125ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   125f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f3:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   125f6:	eb 17                	jmp    1260f <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   125f8:	8b 55 f8             	mov    -0x8(%ebp),%edx
   125fb:	8d 42 01             	lea    0x1(%edx),%eax
   125fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12601:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12604:	8d 48 01             	lea    0x1(%eax),%ecx
   12607:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1260a:	0f b6 12             	movzbl (%edx),%edx
   1260d:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1260f:	8b 45 10             	mov    0x10(%ebp),%eax
   12612:	8d 50 ff             	lea    -0x1(%eax),%edx
   12615:	89 55 10             	mov    %edx,0x10(%ebp)
   12618:	85 c0                	test   %eax,%eax
   1261a:	75 dc                	jne    125f8 <kernel_memcpy+0x26>
   1261c:	eb 01                	jmp    1261f <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   1261e:	90                   	nop
    }
    
}
   1261f:	c9                   	leave  
   12620:	c3                   	ret    

00012621 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12621:	55                   	push   %ebp
   12622:	89 e5                	mov    %esp,%ebp
   12624:	83 ec 14             	sub    $0x14,%esp
   12627:	8b 45 0c             	mov    0xc(%ebp),%eax
   1262a:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   1262d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12631:	74 2c                	je     1265f <kernel_memset+0x3e>
   12633:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12637:	74 26                	je     1265f <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12639:	8b 45 08             	mov    0x8(%ebp),%eax
   1263c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   1263f:	eb 0f                	jmp    12650 <kernel_memset+0x2f>
        *(d++) = v;
   12641:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12644:	8d 50 01             	lea    0x1(%eax),%edx
   12647:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1264a:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1264e:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12650:	8b 45 10             	mov    0x10(%ebp),%eax
   12653:	8d 50 ff             	lea    -0x1(%eax),%edx
   12656:	89 55 10             	mov    %edx,0x10(%ebp)
   12659:	85 c0                	test   %eax,%eax
   1265b:	75 e4                	jne    12641 <kernel_memset+0x20>
   1265d:	eb 01                	jmp    12660 <kernel_memset+0x3f>
    if (!dest || !size) return;
   1265f:	90                   	nop
    }
    
}
   12660:	c9                   	leave  
   12661:	c3                   	ret    

00012662 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   12662:	55                   	push   %ebp
   12663:	89 e5                	mov    %esp,%ebp
   12665:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12668:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1266c:	74 0c                	je     1267a <kernel_memcmp+0x18>
   1266e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12672:	74 06                	je     1267a <kernel_memcmp+0x18>
   12674:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12678:	75 07                	jne    12681 <kernel_memcmp+0x1f>
   1267a:	b8 00 00 00 00       	mov    $0x0,%eax
   1267f:	eb 63                	jmp    126e4 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12681:	8b 45 08             	mov    0x8(%ebp),%eax
   12684:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12687:	8b 45 0c             	mov    0xc(%ebp),%eax
   1268a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   1268d:	eb 08                	jmp    12697 <kernel_memcmp+0x35>
        d1++;
   1268f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12693:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12697:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1269b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1269f:	74 10                	je     126b1 <kernel_memcmp+0x4f>
   126a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126a4:	0f b6 10             	movzbl (%eax),%edx
   126a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126aa:	0f b6 00             	movzbl (%eax),%eax
   126ad:	38 c2                	cmp    %al,%dl
   126af:	74 de                	je     1268f <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   126b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126b4:	0f b6 10             	movzbl (%eax),%edx
   126b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126ba:	0f b6 00             	movzbl (%eax),%eax
   126bd:	38 c2                	cmp    %al,%dl
   126bf:	76 07                	jbe    126c8 <kernel_memcmp+0x66>
   126c1:	b8 01 00 00 00       	mov    $0x1,%eax
   126c6:	eb 1c                	jmp    126e4 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   126c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126cb:	0f b6 10             	movzbl (%eax),%edx
   126ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126d1:	0f b6 00             	movzbl (%eax),%eax
   126d4:	38 c2                	cmp    %al,%dl
   126d6:	73 07                	jae    126df <kernel_memcmp+0x7d>
   126d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126dd:	eb 05                	jmp    126e4 <kernel_memcmp+0x82>
    else return 0;
   126df:	b8 00 00 00 00       	mov    $0x0,%eax

}
   126e4:	c9                   	leave  
   126e5:	c3                   	ret    

000126e6 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   126e6:	55                   	push   %ebp
   126e7:	89 e5                	mov    %esp,%ebp
   126e9:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   126ec:	8d 45 10             	lea    0x10(%ebp),%eax
   126ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   126f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126f5:	83 ec 04             	sub    $0x4,%esp
   126f8:	50                   	push   %eax
   126f9:	ff 75 0c             	push   0xc(%ebp)
   126fc:	ff 75 08             	push   0x8(%ebp)
   126ff:	e8 06 00 00 00       	call   1270a <kernel_vsprintf>
   12704:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12707:	90                   	nop
   12708:	c9                   	leave  
   12709:	c3                   	ret    

0001270a <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   1270a:	55                   	push   %ebp
   1270b:	89 e5                	mov    %esp,%ebp
   1270d:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12710:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12717:	8b 45 08             	mov    0x8(%ebp),%eax
   1271a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   1271d:	e9 68 01 00 00       	jmp    1288a <kernel_vsprintf+0x180>
        switch (state) {
   12722:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12726:	74 0b                	je     12733 <kernel_vsprintf+0x29>
   12728:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1272c:	74 2b                	je     12759 <kernel_vsprintf+0x4f>
   1272e:	e9 56 01 00 00       	jmp    12889 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12733:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12737:	75 0c                	jne    12745 <kernel_vsprintf+0x3b>
   12739:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12740:	e9 45 01 00 00       	jmp    1288a <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12745:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12748:	8d 50 01             	lea    0x1(%eax),%edx
   1274b:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1274e:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12752:	88 10                	mov    %dl,(%eax)
            break;
   12754:	e9 31 01 00 00       	jmp    1288a <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12759:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   1275d:	75 47                	jne    127a6 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   1275f:	8b 45 10             	mov    0x10(%ebp),%eax
   12762:	8d 50 04             	lea    0x4(%eax),%edx
   12765:	89 55 10             	mov    %edx,0x10(%ebp)
   12768:	8b 00                	mov    (%eax),%eax
   1276a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   1276d:	ff 75 ec             	push   -0x14(%ebp)
   12770:	e8 28 fe ff ff       	call   1259d <kernel_strlen>
   12775:	83 c4 04             	add    $0x4,%esp
   12778:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   1277b:	eb 17                	jmp    12794 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   1277d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12780:	8d 42 01             	lea    0x1(%edx),%eax
   12783:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12786:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12789:	8d 48 01             	lea    0x1(%eax),%ecx
   1278c:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1278f:	0f b6 12             	movzbl (%edx),%edx
   12792:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12794:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12797:	8d 50 ff             	lea    -0x1(%eax),%edx
   1279a:	89 55 e8             	mov    %edx,-0x18(%ebp)
   1279d:	85 c0                	test   %eax,%eax
   1279f:	75 dc                	jne    1277d <kernel_vsprintf+0x73>
   127a1:	e9 da 00 00 00       	jmp    12880 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   127a6:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   127aa:	75 37                	jne    127e3 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   127ac:	8b 45 10             	mov    0x10(%ebp),%eax
   127af:	8d 50 04             	lea    0x4(%eax),%edx
   127b2:	89 55 10             	mov    %edx,0x10(%ebp)
   127b5:	8b 00                	mov    (%eax),%eax
   127b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   127ba:	83 ec 04             	sub    $0x4,%esp
   127bd:	6a 0a                	push   $0xa
   127bf:	ff 75 d8             	push   -0x28(%ebp)
   127c2:	ff 75 f0             	push   -0x10(%ebp)
   127c5:	e8 dd 00 00 00       	call   128a7 <kernel_itoa>
   127ca:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   127cd:	83 ec 0c             	sub    $0xc,%esp
   127d0:	ff 75 f0             	push   -0x10(%ebp)
   127d3:	e8 c5 fd ff ff       	call   1259d <kernel_strlen>
   127d8:	83 c4 10             	add    $0x10,%esp
   127db:	01 45 f0             	add    %eax,-0x10(%ebp)
   127de:	e9 9d 00 00 00       	jmp    12880 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   127e3:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   127e7:	74 06                	je     127ef <kernel_vsprintf+0xe5>
   127e9:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   127ed:	75 34                	jne    12823 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   127ef:	8b 45 10             	mov    0x10(%ebp),%eax
   127f2:	8d 50 04             	lea    0x4(%eax),%edx
   127f5:	89 55 10             	mov    %edx,0x10(%ebp)
   127f8:	8b 00                	mov    (%eax),%eax
   127fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   127fd:	83 ec 04             	sub    $0x4,%esp
   12800:	6a 10                	push   $0x10
   12802:	ff 75 dc             	push   -0x24(%ebp)
   12805:	ff 75 f0             	push   -0x10(%ebp)
   12808:	e8 9a 00 00 00       	call   128a7 <kernel_itoa>
   1280d:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12810:	83 ec 0c             	sub    $0xc,%esp
   12813:	ff 75 f0             	push   -0x10(%ebp)
   12816:	e8 82 fd ff ff       	call   1259d <kernel_strlen>
   1281b:	83 c4 10             	add    $0x10,%esp
   1281e:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12821:	eb 5d                	jmp    12880 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12823:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12827:	75 34                	jne    1285d <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12829:	8b 45 10             	mov    0x10(%ebp),%eax
   1282c:	8d 50 04             	lea    0x4(%eax),%edx
   1282f:	89 55 10             	mov    %edx,0x10(%ebp)
   12832:	8b 00                	mov    (%eax),%eax
   12834:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12837:	83 ec 04             	sub    $0x4,%esp
   1283a:	6a 02                	push   $0x2
   1283c:	ff 75 e0             	push   -0x20(%ebp)
   1283f:	ff 75 f0             	push   -0x10(%ebp)
   12842:	e8 60 00 00 00       	call   128a7 <kernel_itoa>
   12847:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   1284a:	83 ec 0c             	sub    $0xc,%esp
   1284d:	ff 75 f0             	push   -0x10(%ebp)
   12850:	e8 48 fd ff ff       	call   1259d <kernel_strlen>
   12855:	83 c4 10             	add    $0x10,%esp
   12858:	01 45 f0             	add    %eax,-0x10(%ebp)
   1285b:	eb 23                	jmp    12880 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   1285d:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   12861:	75 1d                	jne    12880 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   12863:	8b 45 10             	mov    0x10(%ebp),%eax
   12866:	8d 50 04             	lea    0x4(%eax),%edx
   12869:	89 55 10             	mov    %edx,0x10(%ebp)
   1286c:	8b 00                	mov    (%eax),%eax
   1286e:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   12871:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12874:	8d 50 01             	lea    0x1(%eax),%edx
   12877:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1287a:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1287e:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12887:	eb 01                	jmp    1288a <kernel_vsprintf+0x180>
        default:
            break;
   12889:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   1288a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1288d:	8d 50 01             	lea    0x1(%eax),%edx
   12890:	89 55 0c             	mov    %edx,0xc(%ebp)
   12893:	0f b6 00             	movzbl (%eax),%eax
   12896:	88 45 e7             	mov    %al,-0x19(%ebp)
   12899:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   1289d:	0f 85 7f fe ff ff    	jne    12722 <kernel_vsprintf+0x18>
        }
    }
    

}
   128a3:	90                   	nop
   128a4:	90                   	nop
   128a5:	c9                   	leave  
   128a6:	c3                   	ret    

000128a7 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   128a7:	55                   	push   %ebp
   128a8:	89 e5                	mov    %esp,%ebp
   128aa:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   128b0:	8b 45 08             	mov    0x8(%ebp),%eax
   128b3:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   128b6:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   128ba:	74 1d                	je     128d9 <kernel_itoa+0x32>
   128bc:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   128c0:	74 17                	je     128d9 <kernel_itoa+0x32>
   128c2:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128c6:	74 11                	je     128d9 <kernel_itoa+0x32>
   128c8:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128cc:	74 0b                	je     128d9 <kernel_itoa+0x32>
        *buf = '\0';
   128ce:	8b 45 08             	mov    0x8(%ebp),%eax
   128d1:	c6 00 00             	movb   $0x0,(%eax)
        return;
   128d4:	e9 a2 00 00 00       	jmp    1297b <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   128d9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128dd:	79 11                	jns    128f0 <kernel_itoa+0x49>
        *(p++) = '-';
   128df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128e2:	8d 50 01             	lea    0x1(%eax),%edx
   128e5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128e8:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   128eb:	f7 5d 0c             	negl   0xc(%ebp)
   128ee:	eb 1a                	jmp    1290a <kernel_itoa+0x63>
    } else if (num == 0) {
   128f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128f4:	75 14                	jne    1290a <kernel_itoa+0x63>
        *(p++) = '0';
   128f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128f9:	8d 50 01             	lea    0x1(%eax),%edx
   128fc:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128ff:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12902:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12905:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12908:	eb 71                	jmp    1297b <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   1290a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12911:	eb 2e                	jmp    12941 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12913:	8b 0d 50 3a 01 00    	mov    0x13a50,%ecx
   12919:	8b 45 0c             	mov    0xc(%ebp),%eax
   1291c:	99                   	cltd   
   1291d:	f7 7d 10             	idivl  0x10(%ebp)
   12920:	89 d0                	mov    %edx,%eax
   12922:	01 c1                	add    %eax,%ecx
   12924:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12927:	8d 50 01             	lea    0x1(%eax),%edx
   1292a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1292d:	0f b6 11             	movzbl (%ecx),%edx
   12930:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12937:	8b 45 0c             	mov    0xc(%ebp),%eax
   1293a:	99                   	cltd   
   1293b:	f7 7d 10             	idivl  0x10(%ebp)
   1293e:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   12941:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12945:	7f cc                	jg     12913 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12947:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1294a:	83 e8 01             	sub    $0x1,%eax
   1294d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12950:	eb 1d                	jmp    1296f <kernel_itoa+0xc8>
            *(p++) = arr[i];
   12952:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12955:	8d 50 01             	lea    0x1(%eax),%edx
   12958:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1295b:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   12961:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12964:	01 ca                	add    %ecx,%edx
   12966:	0f b6 12             	movzbl (%edx),%edx
   12969:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   1296b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   1296f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12973:	79 dd                	jns    12952 <kernel_itoa+0xab>
    }
    *p = '\0';
   12975:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12978:	c6 00 00             	movb   $0x0,(%eax)
   1297b:	c9                   	leave  
   1297c:	c3                   	ret    

0001297d <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1297d:	55                   	push   %ebp
   1297e:	89 e5                	mov    %esp,%ebp
   12980:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12983:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12987:	75 19                	jne    129a2 <list_is_empty+0x25>
   12989:	68 04 39 01 00       	push   $0x13904
   1298e:	68 e8 39 01 00       	push   $0x139e8
   12993:	6a 38                	push   $0x38
   12995:	68 18 39 01 00       	push   $0x13918
   1299a:	e8 80 f7 ff ff       	call   1211f <pannic>
   1299f:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   129a2:	8b 45 08             	mov    0x8(%ebp),%eax
   129a5:	8b 40 08             	mov    0x8(%eax),%eax
   129a8:	85 c0                	test   %eax,%eax
   129aa:	0f 94 c0             	sete   %al
   129ad:	0f b6 c0             	movzbl %al,%eax
}
   129b0:	c9                   	leave  
   129b1:	c3                   	ret    

000129b2 <list_get_size>:
static inline int list_get_size(list_t *list) {
   129b2:	55                   	push   %ebp
   129b3:	89 e5                	mov    %esp,%ebp
   129b5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   129b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129bc:	75 19                	jne    129d7 <list_get_size+0x25>
   129be:	68 04 39 01 00       	push   $0x13904
   129c3:	68 20 3a 01 00       	push   $0x13a20
   129c8:	6a 3e                	push   $0x3e
   129ca:	68 18 39 01 00       	push   $0x13918
   129cf:	e8 4b f7 ff ff       	call   1211f <pannic>
   129d4:	83 c4 10             	add    $0x10,%esp
    return list->size;
   129d7:	8b 45 08             	mov    0x8(%ebp),%eax
   129da:	8b 40 08             	mov    0x8(%eax),%eax
}
   129dd:	c9                   	leave  
   129de:	c3                   	ret    

000129df <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   129df:	55                   	push   %ebp
   129e0:	89 e5                	mov    %esp,%ebp
   129e2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   129e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129e9:	74 06                	je     129f1 <list_insert_first+0x12>
   129eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129ef:	75 19                	jne    12a0a <list_insert_first+0x2b>
   129f1:	68 58 39 01 00       	push   $0x13958
   129f6:	68 d4 39 01 00       	push   $0x139d4
   129fb:	6a 0f                	push   $0xf
   129fd:	68 88 39 01 00       	push   $0x13988
   12a02:	e8 18 f7 ff ff       	call   1211f <pannic>
   12a07:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0d:	8b 10                	mov    (%eax),%edx
   12a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a12:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12a15:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12a1e:	83 ec 0c             	sub    $0xc,%esp
   12a21:	ff 75 08             	push   0x8(%ebp)
   12a24:	e8 54 ff ff ff       	call   1297d <list_is_empty>
   12a29:	83 c4 10             	add    $0x10,%esp
   12a2c:	85 c0                	test   %eax,%eax
   12a2e:	74 16                	je     12a46 <list_insert_first+0x67>
        list->first = list->last = node;
   12a30:	8b 45 08             	mov    0x8(%ebp),%eax
   12a33:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a36:	89 50 04             	mov    %edx,0x4(%eax)
   12a39:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3c:	8b 50 04             	mov    0x4(%eax),%edx
   12a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a42:	89 10                	mov    %edx,(%eax)
   12a44:	eb 12                	jmp    12a58 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12a46:	8b 45 08             	mov    0x8(%ebp),%eax
   12a49:	8b 00                	mov    (%eax),%eax
   12a4b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a4e:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12a50:	8b 45 08             	mov    0x8(%ebp),%eax
   12a53:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a56:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12a58:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5b:	8b 40 08             	mov    0x8(%eax),%eax
   12a5e:	8d 50 01             	lea    0x1(%eax),%edx
   12a61:	8b 45 08             	mov    0x8(%ebp),%eax
   12a64:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a67:	90                   	nop
   12a68:	c9                   	leave  
   12a69:	c3                   	ret    

00012a6a <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12a6a:	55                   	push   %ebp
   12a6b:	89 e5                	mov    %esp,%ebp
   12a6d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12a70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a74:	74 06                	je     12a7c <list_insert_last+0x12>
   12a76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a7a:	75 19                	jne    12a95 <list_insert_last+0x2b>
   12a7c:	68 58 39 01 00       	push   $0x13958
   12a81:	68 f8 39 01 00       	push   $0x139f8
   12a86:	6a 1f                	push   $0x1f
   12a88:	68 88 39 01 00       	push   $0x13988
   12a8d:	e8 8d f6 ff ff       	call   1211f <pannic>
   12a92:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12a95:	8b 45 08             	mov    0x8(%ebp),%eax
   12a98:	8b 50 04             	mov    0x4(%eax),%edx
   12a9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a9e:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12aa3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12aaa:	83 ec 0c             	sub    $0xc,%esp
   12aad:	ff 75 08             	push   0x8(%ebp)
   12ab0:	e8 c8 fe ff ff       	call   1297d <list_is_empty>
   12ab5:	83 c4 10             	add    $0x10,%esp
   12ab8:	85 c0                	test   %eax,%eax
   12aba:	74 16                	je     12ad2 <list_insert_last+0x68>
        list->first = list->last = node;
   12abc:	8b 45 08             	mov    0x8(%ebp),%eax
   12abf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ac2:	89 50 04             	mov    %edx,0x4(%eax)
   12ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac8:	8b 50 04             	mov    0x4(%eax),%edx
   12acb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ace:	89 10                	mov    %edx,(%eax)
   12ad0:	eb 15                	jmp    12ae7 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad5:	8b 40 04             	mov    0x4(%eax),%eax
   12ad8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12adb:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12ade:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae1:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ae4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aea:	8b 40 08             	mov    0x8(%eax),%eax
   12aed:	8d 50 01             	lea    0x1(%eax),%edx
   12af0:	8b 45 08             	mov    0x8(%ebp),%eax
   12af3:	89 50 08             	mov    %edx,0x8(%eax)

}
   12af6:	90                   	nop
   12af7:	c9                   	leave  
   12af8:	c3                   	ret    

00012af9 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12af9:	55                   	push   %ebp
   12afa:	89 e5                	mov    %esp,%ebp
   12afc:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12aff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b03:	75 19                	jne    12b1e <list_remove_first+0x25>
   12b05:	68 be 39 01 00       	push   $0x139be
   12b0a:	68 0c 3a 01 00       	push   $0x13a0c
   12b0f:	6a 31                	push   $0x31
   12b11:	68 88 39 01 00       	push   $0x13988
   12b16:	e8 04 f6 ff ff       	call   1211f <pannic>
   12b1b:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12b1e:	83 ec 0c             	sub    $0xc,%esp
   12b21:	ff 75 08             	push   0x8(%ebp)
   12b24:	e8 54 fe ff ff       	call   1297d <list_is_empty>
   12b29:	83 c4 10             	add    $0x10,%esp
   12b2c:	85 c0                	test   %eax,%eax
   12b2e:	74 07                	je     12b37 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12b30:	b8 00 00 00 00       	mov    $0x0,%eax
   12b35:	eb 71                	jmp    12ba8 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12b37:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3a:	8b 00                	mov    (%eax),%eax
   12b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12b3f:	83 ec 0c             	sub    $0xc,%esp
   12b42:	ff 75 08             	push   0x8(%ebp)
   12b45:	e8 68 fe ff ff       	call   129b2 <list_get_size>
   12b4a:	83 c4 10             	add    $0x10,%esp
   12b4d:	83 f8 01             	cmp    $0x1,%eax
   12b50:	75 17                	jne    12b69 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12b52:	8b 45 08             	mov    0x8(%ebp),%eax
   12b55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5f:	8b 50 04             	mov    0x4(%eax),%edx
   12b62:	8b 45 08             	mov    0x8(%ebp),%eax
   12b65:	89 10                	mov    %edx,(%eax)
   12b67:	eb 18                	jmp    12b81 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12b69:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6c:	8b 00                	mov    (%eax),%eax
   12b6e:	8b 50 04             	mov    0x4(%eax),%edx
   12b71:	8b 45 08             	mov    0x8(%ebp),%eax
   12b74:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12b76:	8b 45 08             	mov    0x8(%ebp),%eax
   12b79:	8b 00                	mov    (%eax),%eax
   12b7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12b81:	8b 45 08             	mov    0x8(%ebp),%eax
   12b84:	8b 40 08             	mov    0x8(%eax),%eax
   12b87:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8d:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b93:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b9d:	8b 50 04             	mov    0x4(%eax),%edx
   12ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ba3:	89 10                	mov    %edx,(%eax)
    return ret;
   12ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12ba8:	c9                   	leave  
   12ba9:	c3                   	ret    

00012baa <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12baa:	55                   	push   %ebp
   12bab:	89 e5                	mov    %esp,%ebp
   12bad:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12bb0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12bb4:	75 19                	jne    12bcf <list_remove_last+0x25>
   12bb6:	68 be 39 01 00       	push   $0x139be
   12bbb:	68 30 3a 01 00       	push   $0x13a30
   12bc0:	6a 46                	push   $0x46
   12bc2:	68 88 39 01 00       	push   $0x13988
   12bc7:	e8 53 f5 ff ff       	call   1211f <pannic>
   12bcc:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12bcf:	83 ec 0c             	sub    $0xc,%esp
   12bd2:	ff 75 08             	push   0x8(%ebp)
   12bd5:	e8 a3 fd ff ff       	call   1297d <list_is_empty>
   12bda:	83 c4 10             	add    $0x10,%esp
   12bdd:	85 c0                	test   %eax,%eax
   12bdf:	74 07                	je     12be8 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12be1:	b8 00 00 00 00       	mov    $0x0,%eax
   12be6:	eb 75                	jmp    12c5d <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12be8:	8b 45 08             	mov    0x8(%ebp),%eax
   12beb:	8b 40 04             	mov    0x4(%eax),%eax
   12bee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12bf1:	83 ec 0c             	sub    $0xc,%esp
   12bf4:	ff 75 08             	push   0x8(%ebp)
   12bf7:	e8 b6 fd ff ff       	call   129b2 <list_get_size>
   12bfc:	83 c4 10             	add    $0x10,%esp
   12bff:	83 f8 01             	cmp    $0x1,%eax
   12c02:	75 17                	jne    12c1b <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12c04:	8b 45 08             	mov    0x8(%ebp),%eax
   12c07:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c11:	8b 50 04             	mov    0x4(%eax),%edx
   12c14:	8b 45 08             	mov    0x8(%ebp),%eax
   12c17:	89 10                	mov    %edx,(%eax)
   12c19:	eb 1b                	jmp    12c36 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12c1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c1e:	8b 40 04             	mov    0x4(%eax),%eax
   12c21:	8b 10                	mov    (%eax),%edx
   12c23:	8b 45 08             	mov    0x8(%ebp),%eax
   12c26:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12c29:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2c:	8b 40 04             	mov    0x4(%eax),%eax
   12c2f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12c36:	8b 45 08             	mov    0x8(%ebp),%eax
   12c39:	8b 40 08             	mov    0x8(%eax),%eax
   12c3c:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c3f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c42:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c48:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c52:	8b 50 04             	mov    0x4(%eax),%edx
   12c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c58:	89 10                	mov    %edx,(%eax)
    return ret;
   12c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12c5d:	c9                   	leave  
   12c5e:	c3                   	ret    

00012c5f <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12c5f:	55                   	push   %ebp
   12c60:	89 e5                	mov    %esp,%ebp
   12c62:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12c65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c69:	74 06                	je     12c71 <list_remove+0x12>
   12c6b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c6f:	75 19                	jne    12c8a <list_remove+0x2b>
   12c71:	68 58 39 01 00       	push   $0x13958
   12c76:	68 44 3a 01 00       	push   $0x13a44
   12c7b:	6a 5b                	push   $0x5b
   12c7d:	68 88 39 01 00       	push   $0x13988
   12c82:	e8 98 f4 ff ff       	call   1211f <pannic>
   12c87:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12c8a:	83 ec 0c             	sub    $0xc,%esp
   12c8d:	ff 75 08             	push   0x8(%ebp)
   12c90:	e8 e8 fc ff ff       	call   1297d <list_is_empty>
   12c95:	83 c4 10             	add    $0x10,%esp
   12c98:	85 c0                	test   %eax,%eax
   12c9a:	74 0a                	je     12ca6 <list_remove+0x47>
        return (list_node_t*)0;
   12c9c:	b8 00 00 00 00       	mov    $0x0,%eax
   12ca1:	e9 80 00 00 00       	jmp    12d26 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12ca6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca9:	8b 00                	mov    (%eax),%eax
   12cab:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12cae:	75 0b                	jne    12cbb <list_remove+0x5c>
   12cb0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cb3:	8b 50 04             	mov    0x4(%eax),%edx
   12cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   12cb9:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12cbb:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbe:	8b 40 04             	mov    0x4(%eax),%eax
   12cc1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12cc4:	75 0b                	jne    12cd1 <list_remove+0x72>
   12cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cc9:	8b 10                	mov    (%eax),%edx
   12ccb:	8b 45 08             	mov    0x8(%ebp),%eax
   12cce:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12cd1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cd4:	8b 00                	mov    (%eax),%eax
   12cd6:	85 c0                	test   %eax,%eax
   12cd8:	74 0e                	je     12ce8 <list_remove+0x89>
   12cda:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cdd:	8b 00                	mov    (%eax),%eax
   12cdf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ce2:	8b 52 04             	mov    0x4(%edx),%edx
   12ce5:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ceb:	8b 40 04             	mov    0x4(%eax),%eax
   12cee:	85 c0                	test   %eax,%eax
   12cf0:	74 0d                	je     12cff <list_remove+0xa0>
   12cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cf5:	8b 40 04             	mov    0x4(%eax),%eax
   12cf8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cfb:	8b 12                	mov    (%edx),%edx
   12cfd:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12cff:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d02:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12d09:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d0c:	8b 50 04             	mov    0x4(%eax),%edx
   12d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d12:	89 10                	mov    %edx,(%eax)
    list->size--;
   12d14:	8b 45 08             	mov    0x8(%ebp),%eax
   12d17:	8b 40 08             	mov    0x8(%eax),%eax
   12d1a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d1d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d20:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12d23:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d26:	c9                   	leave  
   12d27:	c3                   	ret    

00012d28 <inb>:
static inline uint8_t inb(uint16_t port) {
   12d28:	55                   	push   %ebp
   12d29:	89 e5                	mov    %esp,%ebp
   12d2b:	83 ec 14             	sub    $0x14,%esp
   12d2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12d31:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12d35:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d39:	89 c2                	mov    %eax,%edx
   12d3b:	ec                   	in     (%dx),%al
   12d3c:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12d3f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d43:	c9                   	leave  
   12d44:	c3                   	ret    

00012d45 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12d45:	55                   	push   %ebp
   12d46:	89 e5                	mov    %esp,%ebp
   12d48:	83 ec 08             	sub    $0x8,%esp
   12d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d51:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12d55:	89 d0                	mov    %edx,%eax
   12d57:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12d5a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d5e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d62:	ee                   	out    %al,(%dx)
}
   12d63:	90                   	nop
   12d64:	c9                   	leave  
   12d65:	c3                   	ret    

00012d66 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12d66:	55                   	push   %ebp
   12d67:	89 e5                	mov    %esp,%ebp
   12d69:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12d6c:	6a 00                	push   $0x0
   12d6e:	68 f9 03 00 00       	push   $0x3f9
   12d73:	e8 cd ff ff ff       	call   12d45 <outb>
   12d78:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12d7b:	68 80 00 00 00       	push   $0x80
   12d80:	68 fb 03 00 00       	push   $0x3fb
   12d85:	e8 bb ff ff ff       	call   12d45 <outb>
   12d8a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12d8d:	6a 03                	push   $0x3
   12d8f:	68 f8 03 00 00       	push   $0x3f8
   12d94:	e8 ac ff ff ff       	call   12d45 <outb>
   12d99:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12d9c:	6a 00                	push   $0x0
   12d9e:	68 f9 03 00 00       	push   $0x3f9
   12da3:	e8 9d ff ff ff       	call   12d45 <outb>
   12da8:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12dab:	6a 03                	push   $0x3
   12dad:	68 fb 03 00 00       	push   $0x3fb
   12db2:	e8 8e ff ff ff       	call   12d45 <outb>
   12db7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12dba:	68 c7 00 00 00       	push   $0xc7
   12dbf:	68 fa 03 00 00       	push   $0x3fa
   12dc4:	e8 7c ff ff ff       	call   12d45 <outb>
   12dc9:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   12dcc:	6a 0f                	push   $0xf
   12dce:	68 fc 03 00 00       	push   $0x3fc
   12dd3:	e8 6d ff ff ff       	call   12d45 <outb>
   12dd8:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   12ddb:	83 ec 0c             	sub    $0xc,%esp
   12dde:	68 10 e8 02 00       	push   $0x2e810
   12de3:	e8 22 ec ff ff       	call   11a0a <mutex_init>
   12de8:	83 c4 10             	add    $0x10,%esp
}
   12deb:	90                   	nop
   12dec:	c9                   	leave  
   12ded:	c3                   	ret    

00012dee <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   12dee:	55                   	push   %ebp
   12def:	89 e5                	mov    %esp,%ebp
   12df1:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12df7:	83 ec 04             	sub    $0x4,%esp
   12dfa:	68 80 00 00 00       	push   $0x80
   12dff:	6a 00                	push   $0x0
   12e01:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e07:	50                   	push   %eax
   12e08:	e8 14 f8 ff ff       	call   12621 <kernel_memset>
   12e0d:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12e10:	8d 45 0c             	lea    0xc(%ebp),%eax
   12e13:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12e19:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12e1f:	83 ec 04             	sub    $0x4,%esp
   12e22:	50                   	push   %eax
   12e23:	ff 75 08             	push   0x8(%ebp)
   12e26:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e2c:	50                   	push   %eax
   12e2d:	e8 d8 f8 ff ff       	call   1270a <kernel_vsprintf>
   12e32:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12e35:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e3b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12e3e:	83 ec 0c             	sub    $0xc,%esp
   12e41:	68 10 e8 02 00       	push   $0x2e810
   12e46:	e8 0c ec ff ff       	call   11a57 <mutex_lock>
   12e4b:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12e4e:	eb 57                	jmp    12ea7 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12e50:	90                   	nop
   12e51:	83 ec 0c             	sub    $0xc,%esp
   12e54:	68 fd 03 00 00       	push   $0x3fd
   12e59:	e8 ca fe ff ff       	call   12d28 <inb>
   12e5e:	83 c4 10             	add    $0x10,%esp
   12e61:	0f b6 c0             	movzbl %al,%eax
   12e64:	83 e0 40             	and    $0x40,%eax
   12e67:	85 c0                	test   %eax,%eax
   12e69:	74 e6                	je     12e51 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e6e:	0f b6 00             	movzbl (%eax),%eax
   12e71:	3c 0a                	cmp    $0xa,%al
   12e73:	75 12                	jne    12e87 <log_printf+0x99>
   12e75:	83 ec 08             	sub    $0x8,%esp
   12e78:	6a 0d                	push   $0xd
   12e7a:	68 f8 03 00 00       	push   $0x3f8
   12e7f:	e8 c1 fe ff ff       	call   12d45 <outb>
   12e84:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e8a:	8d 50 01             	lea    0x1(%eax),%edx
   12e8d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12e90:	0f b6 00             	movzbl (%eax),%eax
   12e93:	0f b6 c0             	movzbl %al,%eax
   12e96:	83 ec 08             	sub    $0x8,%esp
   12e99:	50                   	push   %eax
   12e9a:	68 f8 03 00 00       	push   $0x3f8
   12e9f:	e8 a1 fe ff ff       	call   12d45 <outb>
   12ea4:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12eaa:	0f b6 00             	movzbl (%eax),%eax
   12ead:	84 c0                	test   %al,%al
   12eaf:	75 9f                	jne    12e50 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12eb1:	83 ec 08             	sub    $0x8,%esp
   12eb4:	6a 0d                	push   $0xd
   12eb6:	68 f8 03 00 00       	push   $0x3f8
   12ebb:	e8 85 fe ff ff       	call   12d45 <outb>
   12ec0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12ec3:	83 ec 08             	sub    $0x8,%esp
   12ec6:	6a 0a                	push   $0xa
   12ec8:	68 f8 03 00 00       	push   $0x3f8
   12ecd:	e8 73 fe ff ff       	call   12d45 <outb>
   12ed2:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   12ed5:	83 ec 0c             	sub    $0xc,%esp
   12ed8:	68 10 e8 02 00       	push   $0x2e810
   12edd:	e8 06 ec ff ff       	call   11ae8 <mutex_unlock>
   12ee2:	83 c4 10             	add    $0x10,%esp
   12ee5:	90                   	nop
   12ee6:	c9                   	leave  
   12ee7:	c3                   	ret    
