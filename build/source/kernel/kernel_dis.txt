
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000032b8 memsz 0x00020050 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028e1  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000009d0  000128e4  000128e4  000038e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000132b4  000132b4  000042b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cd90  000132c0  000132c0  000042b8  2**5
                  ALLOC
  4 .debug_line   000015f1  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000005cf  00000000  00000000  000058a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00003ea0  00000000  00000000  00005e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000135d  00000000  00000000  00009d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001a0  00000000  00000000  0000b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000df5  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000c00d  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000ffc  00000000  00000000  0000c038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000003d list_node_init
000129b8 l     O .rodata	0000000f __func__.9
000102ea l     F .text	0000002d list_node_next
00012a18 l     O .rodata	0000000f __func__.3
00010317 l     F .text	00000047 list_init
000129c8 l     O .rodata	0000000a __func__.8
0001035e l     F .text	00000035 list_is_empty
00012a28 l     O .rodata	0000000e __func__.2
00010393 l     F .text	0000002d list_get_size
00012a08 l     O .rodata	0000000e __func__.4
000103c0 l     F .text	0000002c list_get_first
000129f8 l     O .rodata	0000000f __func__.5
000103ec l     F .text	00000007 hlt
000103f3 l     F .text	0000001a far_jump
0001040d l     F .text	00000017 write_tr
000132c0 l     O .bss	00000190 task_manager
00010424 l     F .text	0000001f switch_to_tss
0001045e l     F .text	000000e5 tss_init
000129ac l     O .rodata	0000000a __func__.10
00013460 l     O .bss	00000200 empty_task_stack
00010627 l     F .text	0000000a empty_task
000129d4 l     O .rodata	0000000f __func__.7
000129e4 l     O .rodata	00000011 __func__.6
00012a38 l     O .rodata	0000000f __func__.1
00012a48 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010aa7 l     F .text	00000028 lgdt
00013660 l     O .bss	00010000 gdt_table
00023660 l     O .bss	00008000 is_alloc
0002b660 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010c99 l     F .text	00000007 cli
00010ca0 l     F .text	00000007 sti
00010ca7 l     F .text	00000007 hlt
00010cae l     F .text	0000001d inb
00010ccb l     F .text	00000021 outb
00010cec l     F .text	00000028 lidt
00010d14 l     F .text	00000010 read_eflags
00010d24 l     F .text	0000000b write_eflags
0002b680 l     O .bss	00000800 idt_table
00010d2f l     F .text	000000e9 print_exception_fram
00010e18 l     F .text	0000003e do_default_handler
000110a2 l     F .text	00000047 gate_desc_set
00011129 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000114d3 l     F .text	00000021 outb
0002be80 l     O .bss	00000004 sys_tick
0001151c l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011596 l     F .text	00000007 sti
00012e58 l     O .rodata	0000000c __func__.0
0002bea0 l     O .bss	000000b4 task_test_task_1
0002bf60 l     O .bss	000000b4 task_test_task_2
0002c020 l     O .bss	00001000 test_task_1_stack
0002d020 l     O .bss	00001000 test_task_2_stack
0002e020 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
000116cd l     F .text	00000047 list_init
00012f10 l     O .rodata	0000000a __func__.1
00011714 l     F .text	00000035 list_is_empty
00012f1c l     O .rodata	0000000e __func__.0
00012f04 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000118df l     F .text	00000047 list_init
00012fd0 l     O .rodata	0000000a __func__.1
00011926 l     F .text	00000035 list_is_empty
00012fdc l     O .rodata	0000000e __func__.0
00012fc4 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011aaf l     F .text	00000047 list_init
000130f0 l     O .rodata	0000000a __func__.3
00011af6 l     F .text	0000002d list_get_size
000130fc l     O .rodata	0000000e __func__.2
00011b23 l     F .text	0000002c list_get_first
0001311c l     O .rodata	0000000f __func__.0
00011b4f l     F .text	0000002d list_get_last
0001310c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00011e57 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
000132b4 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012376 l     F .text	00000035 list_is_empty
0001324c l     O .rodata	0000000e __func__.5
000123ab l     F .text	0000002d list_get_size
00013284 l     O .rodata	0000000e __func__.2
00013238 l     O .rodata	00000012 __func__.6
0001325c l     O .rodata	00000011 __func__.4
00013270 l     O .rodata	00000012 __func__.3
00013294 l     O .rodata	00000011 __func__.1
000132a8 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012721 l     F .text	0000001d inb
0001273e l     F .text	00000021 outb
0002e030 l     O .bss	00000014 mutex
00011fcb g     F .text	0000004f kernel_memcpy
0001132f g     F .text	00000098 idt_enable
000107c2 g     F .text	0000000a task_current
00012463 g     F .text	0000008f list_insert_last
00010834 g     F .text	00000061 sys_yield
00010f8a g     F .text	0000001c do_handler_segment_not_present
000106fe g     F .text	0000004b task_set_ready
00011466 g     F .text	0000000b idt_enable_global
0001201a g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001275f g     F .text	00000088 log_init
00011634 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00011e94 g     F .text	00000047 kernel_strcpy
0001145b g     F .text	0000000b idt_disable_global
000110e9 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010ee2 g     F .text	0000001c do_handler_overflow
00011016 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010fc2 g     F .text	0000001c do_handler_general_protection
00011086 g     F .text	0000001c do_handler_control_exception
00011a86 g     F .text	00000029 sem_count
00010e72 g     F .text	0000001c do_handler_divider
00010f52 g     F .text	0000001c do_handler_double_fault
00010fde g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011471 g     F .text	00000039 pic_send_eoi
000125a3 g     F .text	000000b5 list_remove_last
000106f4 g     F .text	0000000a task_first_task
0001199e g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010b8e g     F .text	00000094 gdt_init
0001106a g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010e8e g     F .text	0000001c do_handler_debug
0002e050 g     O .bss	00002000 stack
00010a47 g     F .text	00000060 sys_sleep
0001160b g     F .text	00000029 test_task_2
00011b7c g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000111bc g     F .text	00000173 idt_init
00011a09 g     F .text	0000007d sem_notify
00010f1a g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010ffa g     F .text	0000001c do_handler_fpu_error
000106ac g     F .text	00000048 task_first_init
00011032 g     F .text	0000001c do_handler_machine_check
000123d8 g     F .text	0000008b list_insert_first
000109fc g     F .text	0000004b task_set_wakeup
00010794 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00011edb g     F .text	00000051 kernel_strncpy
0001159d g     F .text	00000045 kernel_init
0001195b g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012103 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011796 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00010f6e g     F .text	0000001c do_handler_invalid_tss
000113c7 g     F .text	00000094 idt_disable
000109a0 g     F .text	0000005c task_set_sleep
00010eaa g     F .text	0000001c do_handler_nmi
00011749 g     F .text	0000004d mutex_init
000115e2 g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010f36 g     F .text	0000001c do_handler_device_unavailable
000114aa g     F .text	00000018 idt_enter_protection
00010895 g     F .text	0000010b task_slice_end
0001205b g     F .text	00000084 kernel_memcmp
0001104e g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010e56 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010443 g     F .text	0000001b task_switch_from_to
00011827 g     F .text	000000b8 mutex_unlock
000107cc g     F .text	00000068 task_switch
00011f96 g     F .text	00000035 kernel_strlen
00010749 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010acf g     F .text	000000bf segment_desc_set
00010efe g     F .text	0000001c do_handler_bound_range
000124f2 g     F .text	000000b1 list_remove_first
00011f2c g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010631 g     F .text	0000007b task_manager_init
00011e5e g     F .text	00000036 pannic
00010fa6 g     F .text	0000001c do_handler_stack_segment_fault
00010ec6 g     F .text	0000001c do_handler_breakpoint
000127e7 g     F .text	000000fa log_printf
00010543 g     F .text	000000e4 task_init
000120df g     F .text	00000024 kernel_sprintf
00010c22 g     F .text	00000077 gdt_alloc_desc
000122a0 g     F .text	000000d6 kernel_itoa
00012658 g     F .text	000000c9 list_remove
000114c2 g     F .text	00000011 idt_leave_protection
000114f4 g     F .text	00000028 do_handler_time
0001157e g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 92 15 00 00       	call   1159d <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 50 00 03 00       	mov    $0x30050,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 0a 16 00 00       	jmp    11634 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 1b 0e 00 00       	call   10e56 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 1a 0e 00 00       	call   10e72 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 19 0e 00 00       	call   10e8e <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 18 0e 00 00       	call   10eaa <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 17 0e 00 00       	call   10ec6 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 16 0e 00 00       	call   10ee2 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 15 0e 00 00       	call   10efe <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 14 0e 00 00       	call   10f1a <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 13 0e 00 00       	call   10f36 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 14 0e 00 00       	call   10f52 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 15 0e 00 00       	call   10f6e <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 16 0e 00 00       	call   10f8a <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 17 0e 00 00       	call   10fa6 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 18 0e 00 00       	call   10fc2 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 19 0e 00 00       	call   10fde <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 18 0e 00 00       	call   10ffa <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 19 0e 00 00       	call   11016 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 18 0e 00 00       	call   11032 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 17 0e 00 00       	call   1104e <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 16 0e 00 00       	call   1106a <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 17 0e 00 00       	call   11086 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 68 12 00 00       	call   114f4 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <list_node_init+0x25>
   102b9:	68 e4 28 01 00       	push   $0x128e4
   102be:	68 b8 29 01 00       	push   $0x129b8
   102c3:	6a 20                	push   $0x20
   102c5:	68 fc 28 01 00       	push   $0x128fc
   102ca:	e8 8f 1b 00 00       	call   11e5e <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	8b 50 04             	mov    0x4(%eax),%edx
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	89 10                	mov    %edx,(%eax)
}
   102e7:	90                   	nop
   102e8:	c9                   	leave  
   102e9:	c3                   	ret    

000102ea <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   102ea:	55                   	push   %ebp
   102eb:	89 e5                	mov    %esp,%ebp
   102ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102f4:	75 19                	jne    1030f <list_node_next+0x25>
   102f6:	68 e4 28 01 00       	push   $0x128e4
   102fb:	68 18 2a 01 00       	push   $0x12a18
   10300:	6a 2b                	push   $0x2b
   10302:	68 fc 28 01 00       	push   $0x128fc
   10307:	e8 52 1b 00 00       	call   11e5e <pannic>
   1030c:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	8b 40 04             	mov    0x4(%eax),%eax
}
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <list_init>:

static inline void list_init(list_t *list) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1031d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10321:	75 19                	jne    1033c <list_init+0x25>
   10323:	68 3a 29 01 00       	push   $0x1293a
   10328:	68 c8 29 01 00       	push   $0x129c8
   1032d:	6a 31                	push   $0x31
   1032f:	68 fc 28 01 00       	push   $0x128fc
   10334:	e8 25 1b 00 00       	call   11e5e <pannic>
   10339:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 04             	mov    0x4(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10351:	8b 45 08             	mov    0x8(%ebp),%eax
   10354:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1035b:	90                   	nop
   1035c:	c9                   	leave  
   1035d:	c3                   	ret    

0001035e <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10368:	75 19                	jne    10383 <list_is_empty+0x25>
   1036a:	68 3a 29 01 00       	push   $0x1293a
   1036f:	68 28 2a 01 00       	push   $0x12a28
   10374:	6a 38                	push   $0x38
   10376:	68 fc 28 01 00       	push   $0x128fc
   1037b:	e8 de 1a 00 00       	call   11e5e <pannic>
   10380:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 40 08             	mov    0x8(%eax),%eax
   10389:	85 c0                	test   %eax,%eax
   1038b:	0f 94 c0             	sete   %al
   1038e:	0f b6 c0             	movzbl %al,%eax
}
   10391:	c9                   	leave  
   10392:	c3                   	ret    

00010393 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10393:	55                   	push   %ebp
   10394:	89 e5                	mov    %esp,%ebp
   10396:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10399:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1039d:	75 19                	jne    103b8 <list_get_size+0x25>
   1039f:	68 3a 29 01 00       	push   $0x1293a
   103a4:	68 08 2a 01 00       	push   $0x12a08
   103a9:	6a 3e                	push   $0x3e
   103ab:	68 fc 28 01 00       	push   $0x128fc
   103b0:	e8 a9 1a 00 00       	call   11e5e <pannic>
   103b5:	83 c4 10             	add    $0x10,%esp

    return list->size;
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 40 08             	mov    0x8(%eax),%eax
}
   103be:	c9                   	leave  
   103bf:	c3                   	ret    

000103c0 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   103c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103ca:	75 19                	jne    103e5 <list_get_first+0x25>
   103cc:	68 3a 29 01 00       	push   $0x1293a
   103d1:	68 f8 29 01 00       	push   $0x129f8
   103d6:	6a 44                	push   $0x44
   103d8:	68 fc 28 01 00       	push   $0x128fc
   103dd:	e8 7c 1a 00 00       	call   11e5e <pannic>
   103e2:	83 c4 10             	add    $0x10,%esp

    return list->first;
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	8b 00                	mov    (%eax),%eax
}
   103ea:	c9                   	leave  
   103eb:	c3                   	ret    

000103ec <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   103ec:	55                   	push   %ebp
   103ed:	89 e5                	mov    %esp,%ebp
   103ef:	f4                   	hlt    
   103f0:	90                   	nop
   103f1:	5d                   	pop    %ebp
   103f2:	c3                   	ret    

000103f3 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   103f3:	55                   	push   %ebp
   103f4:	89 e5                	mov    %esp,%ebp
   103f6:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   103f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   103fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
   103ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10402:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10405:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10408:	ff 28                	ljmp   *(%eax)
}
   1040a:	90                   	nop
   1040b:	c9                   	leave  
   1040c:	c3                   	ret    

0001040d <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1040d:	55                   	push   %ebp
   1040e:	89 e5                	mov    %esp,%ebp
   10410:	83 ec 04             	sub    $0x4,%esp
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1041a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1041e:	0f 00 d8             	ltr    %ax
}
   10421:	90                   	nop
   10422:	c9                   	leave  
   10423:	c3                   	ret    

00010424 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10424:	55                   	push   %ebp
   10425:	89 e5                	mov    %esp,%ebp
   10427:	83 ec 04             	sub    $0x4,%esp
   1042a:	8b 45 08             	mov    0x8(%ebp),%eax
   1042d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10431:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10435:	6a 00                	push   $0x0
   10437:	50                   	push   %eax
   10438:	e8 b6 ff ff ff       	call   103f3 <far_jump>
   1043d:	83 c4 08             	add    $0x8,%esp
}
   10440:	90                   	nop
   10441:	c9                   	leave  
   10442:	c3                   	ret    

00010443 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10443:	55                   	push   %ebp
   10444:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10446:	8b 45 0c             	mov    0xc(%ebp),%eax
   10449:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   1044f:	0f b7 c0             	movzwl %ax,%eax
   10452:	50                   	push   %eax
   10453:	e8 cc ff ff ff       	call   10424 <switch_to_tss>
   10458:	83 c4 04             	add    $0x4,%esp
}
   1045b:	90                   	nop
   1045c:	c9                   	leave  
   1045d:	c3                   	ret    

0001045e <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   1045e:	55                   	push   %ebp
   1045f:	89 e5                	mov    %esp,%ebp
   10461:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10464:	8b 45 08             	mov    0x8(%ebp),%eax
   10467:	83 c0 48             	add    $0x48,%eax
   1046a:	83 ec 04             	sub    $0x4,%esp
   1046d:	6a 68                	push   $0x68
   1046f:	6a 00                	push   $0x0
   10471:	50                   	push   %eax
   10472:	e8 a3 1b 00 00       	call   1201a <kernel_memset>
   10477:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10480:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10483:	8b 45 08             	mov    0x8(%ebp),%eax
   10486:	8b 55 10             	mov    0x10(%ebp),%edx
   10489:	89 50 4c             	mov    %edx,0x4c(%eax)
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 4c             	mov    0x4c(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1049b:	8b 45 08             	mov    0x8(%ebp),%eax
   1049e:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   104a5:	8b 45 08             	mov    0x8(%ebp),%eax
   104a8:	8b 50 50             	mov    0x50(%eax),%edx
   104ab:	8b 45 08             	mov    0x8(%ebp),%eax
   104ae:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   104b4:	8b 45 08             	mov    0x8(%ebp),%eax
   104b7:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   104be:	00 00 00 
   104c1:	8b 45 08             	mov    0x8(%ebp),%eax
   104c4:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   104ca:	8b 45 08             	mov    0x8(%ebp),%eax
   104cd:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   104d3:	8b 45 08             	mov    0x8(%ebp),%eax
   104d6:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   104dc:	8b 45 08             	mov    0x8(%ebp),%eax
   104df:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   104e5:	8b 45 08             	mov    0x8(%ebp),%eax
   104e8:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   104ee:	8b 45 08             	mov    0x8(%ebp),%eax
   104f1:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   104f7:	8b 45 08             	mov    0x8(%ebp),%eax
   104fa:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10501:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   1050e:	e8 0f 07 00 00       	call   10c22 <gdt_alloc_desc>
   10513:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10516:	8b 45 08             	mov    0x8(%ebp),%eax
   10519:	83 c0 48             	add    $0x48,%eax
   1051c:	89 c2                	mov    %eax,%edx
   1051e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10521:	0f b7 c0             	movzwl %ax,%eax
   10524:	68 89 00 00 00       	push   $0x89
   10529:	6a 68                	push   $0x68
   1052b:	52                   	push   %edx
   1052c:	50                   	push   %eax
   1052d:	e8 9d 05 00 00       	call   10acf <segment_desc_set>
   10532:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10535:	8b 45 08             	mov    0x8(%ebp),%eax
   10538:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1053b:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   10541:	c9                   	leave  
   10542:	c3                   	ret    

00010543 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10543:	55                   	push   %ebp
   10544:	89 e5                	mov    %esp,%ebp
   10546:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10549:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1054d:	75 19                	jne    10568 <task_init+0x25>
   1054f:	68 4d 29 01 00       	push   $0x1294d
   10554:	68 ac 29 01 00       	push   $0x129ac
   10559:	6a 60                	push   $0x60
   1055b:	68 60 29 01 00       	push   $0x12960
   10560:	e8 f9 18 00 00       	call   11e5e <pannic>
   10565:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10568:	83 ec 04             	sub    $0x4,%esp
   1056b:	ff 75 14             	push   0x14(%ebp)
   1056e:	ff 75 10             	push   0x10(%ebp)
   10571:	ff 75 08             	push   0x8(%ebp)
   10574:	e8 e5 fe ff ff       	call   1045e <tss_init>
   10579:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1057c:	8b 45 08             	mov    0x8(%ebp),%eax
   1057f:	83 c0 10             	add    $0x10,%eax
   10582:	83 ec 04             	sub    $0x4,%esp
   10585:	6a 20                	push   $0x20
   10587:	ff 75 0c             	push   0xc(%ebp)
   1058a:	50                   	push   %eax
   1058b:	e8 4b 19 00 00       	call   11edb <kernel_strncpy>
   10590:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10593:	8b 45 08             	mov    0x8(%ebp),%eax
   10596:	83 c0 30             	add    $0x30,%eax
   10599:	83 ec 0c             	sub    $0xc,%esp
   1059c:	50                   	push   %eax
   1059d:	e8 0b fd ff ff       	call   102ad <list_node_init>
   105a2:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	83 c0 38             	add    $0x38,%eax
   105ab:	83 ec 0c             	sub    $0xc,%esp
   105ae:	50                   	push   %eax
   105af:	e8 f9 fc ff ff       	call   102ad <list_node_init>
   105b4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   105b7:	8b 45 08             	mov    0x8(%ebp),%eax
   105ba:	83 c0 40             	add    $0x40,%eax
   105bd:	83 ec 0c             	sub    $0xc,%esp
   105c0:	50                   	push   %eax
   105c1:	e8 e7 fc ff ff       	call   102ad <list_node_init>
   105c6:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   105c9:	8b 45 08             	mov    0x8(%ebp),%eax
   105cc:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	8b 50 08             	mov    0x8(%eax),%edx
   105d9:	8b 45 08             	mov    0x8(%ebp),%eax
   105dc:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   105e9:	e8 bc 0e 00 00       	call   114aa <idt_enter_protection>
   105ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   105f1:	8b 45 08             	mov    0x8(%ebp),%eax
   105f4:	83 c0 38             	add    $0x38,%eax
   105f7:	83 ec 08             	sub    $0x8,%esp
   105fa:	50                   	push   %eax
   105fb:	68 d0 32 01 00       	push   $0x132d0
   10600:	e8 5e 1e 00 00       	call   12463 <list_insert_last>
   10605:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10608:	83 ec 0c             	sub    $0xc,%esp
   1060b:	ff 75 08             	push   0x8(%ebp)
   1060e:	e8 eb 00 00 00       	call   106fe <task_set_ready>
   10613:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10616:	83 ec 0c             	sub    $0xc,%esp
   10619:	ff 75 f4             	push   -0xc(%ebp)
   1061c:	e8 a1 0e 00 00       	call   114c2 <idt_leave_protection>
   10621:	83 c4 10             	add    $0x10,%esp
}
   10624:	90                   	nop
   10625:	c9                   	leave  
   10626:	c3                   	ret    

00010627 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10627:	55                   	push   %ebp
   10628:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   1062a:	e8 bd fd ff ff       	call   103ec <hlt>
   1062f:	eb f9                	jmp    1062a <empty_task+0x3>

00010631 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10631:	55                   	push   %ebp
   10632:	89 e5                	mov    %esp,%ebp
   10634:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10637:	83 ec 0c             	sub    $0xc,%esp
   1063a:	68 c4 32 01 00       	push   $0x132c4
   1063f:	e8 d3 fc ff ff       	call   10317 <list_init>
   10644:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10647:	83 ec 0c             	sub    $0xc,%esp
   1064a:	68 d0 32 01 00       	push   $0x132d0
   1064f:	e8 c3 fc ff ff       	call   10317 <list_init>
   10654:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10657:	83 ec 0c             	sub    $0xc,%esp
   1065a:	68 dc 32 01 00       	push   $0x132dc
   1065f:	e8 b3 fc ff ff       	call   10317 <list_init>
   10664:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10667:	c7 05 c0 32 01 00 00 	movl   $0x0,0x132c0
   1066e:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10671:	ba 60 36 01 00       	mov    $0x13660,%edx
   10676:	b8 27 06 01 00       	mov    $0x10627,%eax
   1067b:	52                   	push   %edx
   1067c:	50                   	push   %eax
   1067d:	68 95 29 01 00       	push   $0x12995
   10682:	68 9c 33 01 00       	push   $0x1339c
   10687:	e8 b7 fe ff ff       	call   10543 <task_init>
   1068c:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   1068f:	83 ec 0c             	sub    $0xc,%esp
   10692:	68 9c 33 01 00       	push   $0x1339c
   10697:	e8 ad 00 00 00       	call   10749 <task_set_unready>
   1069c:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   1069f:	c7 05 9c 33 01 00 00 	movl   $0x0,0x1339c
   106a6:	00 00 00 
}
   106a9:	90                   	nop
   106aa:	c9                   	leave  
   106ab:	c3                   	ret    

000106ac <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   106ac:	55                   	push   %ebp
   106ad:	89 e5                	mov    %esp,%ebp
   106af:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   106b2:	6a 00                	push   $0x0
   106b4:	6a 00                	push   $0x0
   106b6:	68 a0 29 01 00       	push   $0x129a0
   106bb:	68 e8 32 01 00       	push   $0x132e8
   106c0:	e8 7e fe ff ff       	call   10543 <task_init>
   106c5:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   106c8:	a1 98 33 01 00       	mov    0x13398,%eax
   106cd:	0f b7 c0             	movzwl %ax,%eax
   106d0:	83 ec 0c             	sub    $0xc,%esp
   106d3:	50                   	push   %eax
   106d4:	e8 34 fd ff ff       	call   1040d <write_tr>
   106d9:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   106dc:	c7 05 c0 32 01 00 e8 	movl   $0x132e8,0x132c0
   106e3:	32 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   106e6:	a1 c0 32 01 00       	mov    0x132c0,%eax
   106eb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   106f1:	90                   	nop
   106f2:	c9                   	leave  
   106f3:	c3                   	ret    

000106f4 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   106f4:	55                   	push   %ebp
   106f5:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   106f7:	b8 e8 32 01 00       	mov    $0x132e8,%eax
}
   106fc:	5d                   	pop    %ebp
   106fd:	c3                   	ret    

000106fe <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   106fe:	55                   	push   %ebp
   106ff:	89 e5                	mov    %esp,%ebp
   10701:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10704:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10708:	75 1c                	jne    10726 <task_set_ready+0x28>
   1070a:	68 4d 29 01 00       	push   $0x1294d
   1070f:	68 d4 29 01 00       	push   $0x129d4
   10714:	68 c9 00 00 00       	push   $0xc9
   10719:	68 60 29 01 00       	push   $0x12960
   1071e:	e8 3b 17 00 00       	call   11e5e <pannic>
   10723:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10726:	8b 45 08             	mov    0x8(%ebp),%eax
   10729:	83 c0 30             	add    $0x30,%eax
   1072c:	83 ec 08             	sub    $0x8,%esp
   1072f:	50                   	push   %eax
   10730:	68 c4 32 01 00       	push   $0x132c4
   10735:	e8 29 1d 00 00       	call   12463 <list_insert_last>
   1073a:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1073d:	8b 45 08             	mov    0x8(%ebp),%eax
   10740:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10746:	90                   	nop
   10747:	c9                   	leave  
   10748:	c3                   	ret    

00010749 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10749:	55                   	push   %ebp
   1074a:	89 e5                	mov    %esp,%ebp
   1074c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1074f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10753:	75 1c                	jne    10771 <task_set_unready+0x28>
   10755:	68 4d 29 01 00       	push   $0x1294d
   1075a:	68 e4 29 01 00       	push   $0x129e4
   1075f:	68 d8 00 00 00       	push   $0xd8
   10764:	68 60 29 01 00       	push   $0x12960
   10769:	e8 f0 16 00 00       	call   11e5e <pannic>
   1076e:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10771:	8b 45 08             	mov    0x8(%ebp),%eax
   10774:	83 c0 30             	add    $0x30,%eax
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	50                   	push   %eax
   1077b:	68 c4 32 01 00       	push   $0x132c4
   10780:	e8 d3 1e 00 00       	call   12658 <list_remove>
   10785:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10788:	8b 45 08             	mov    0x8(%ebp),%eax
   1078b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10791:	90                   	nop
   10792:	c9                   	leave  
   10793:	c3                   	ret    

00010794 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10794:	55                   	push   %ebp
   10795:	89 e5                	mov    %esp,%ebp
   10797:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1079a:	83 ec 0c             	sub    $0xc,%esp
   1079d:	68 c4 32 01 00       	push   $0x132c4
   107a2:	e8 19 fc ff ff       	call   103c0 <list_get_first>
   107a7:	83 c4 10             	add    $0x10,%esp
   107aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   107ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b1:	74 08                	je     107bb <task_ready_first+0x27>
   107b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b6:	83 e8 30             	sub    $0x30,%eax
   107b9:	eb 05                	jmp    107c0 <task_ready_first+0x2c>
   107bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   107c0:	c9                   	leave  
   107c1:	c3                   	ret    

000107c2 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   107c2:	55                   	push   %ebp
   107c3:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   107c5:	a1 c0 32 01 00       	mov    0x132c0,%eax
}
   107ca:	5d                   	pop    %ebp
   107cb:	c3                   	ret    

000107cc <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   107cc:	55                   	push   %ebp
   107cd:	89 e5                	mov    %esp,%ebp
   107cf:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   107d2:	e8 d3 0c 00 00       	call   114aa <idt_enter_protection>
   107d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   107da:	e8 b5 ff ff ff       	call   10794 <task_ready_first>
   107df:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   107e2:	a1 c0 32 01 00       	mov    0x132c0,%eax
   107e7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   107ea:	74 37                	je     10823 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   107ec:	a1 c0 32 01 00       	mov    0x132c0,%eax
   107f1:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   107f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107f8:	75 07                	jne    10801 <task_switch+0x35>
            to = &task_manager.empty_task;
   107fa:	c7 45 f4 9c 33 01 00 	movl   $0x1339c,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10801:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10804:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   1080a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080d:	a3 c0 32 01 00       	mov    %eax,0x132c0
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10812:	83 ec 08             	sub    $0x8,%esp
   10815:	ff 75 f4             	push   -0xc(%ebp)
   10818:	ff 75 ec             	push   -0x14(%ebp)
   1081b:	e8 23 fc ff ff       	call   10443 <task_switch_from_to>
   10820:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10823:	83 ec 0c             	sub    $0xc,%esp
   10826:	ff 75 f0             	push   -0x10(%ebp)
   10829:	e8 94 0c 00 00       	call   114c2 <idt_leave_protection>
   1082e:	83 c4 10             	add    $0x10,%esp
}
   10831:	90                   	nop
   10832:	c9                   	leave  
   10833:	c3                   	ret    

00010834 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10834:	55                   	push   %ebp
   10835:	89 e5                	mov    %esp,%ebp
   10837:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1083a:	e8 6b 0c 00 00       	call   114aa <idt_enter_protection>
   1083f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10842:	83 ec 0c             	sub    $0xc,%esp
   10845:	68 c4 32 01 00       	push   $0x132c4
   1084a:	e8 44 fb ff ff       	call   10393 <list_get_size>
   1084f:	83 c4 10             	add    $0x10,%esp
   10852:	83 f8 01             	cmp    $0x1,%eax
   10855:	7e 29                	jle    10880 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10857:	e8 66 ff ff ff       	call   107c2 <task_current>
   1085c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1085f:	83 ec 0c             	sub    $0xc,%esp
   10862:	ff 75 f0             	push   -0x10(%ebp)
   10865:	e8 df fe ff ff       	call   10749 <task_set_unready>
   1086a:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1086d:	83 ec 0c             	sub    $0xc,%esp
   10870:	ff 75 f0             	push   -0x10(%ebp)
   10873:	e8 86 fe ff ff       	call   106fe <task_set_ready>
   10878:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   1087b:	e8 4c ff ff ff       	call   107cc <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10880:	83 ec 0c             	sub    $0xc,%esp
   10883:	ff 75 f4             	push   -0xc(%ebp)
   10886:	e8 37 0c 00 00       	call   114c2 <idt_leave_protection>
   1088b:	83 c4 10             	add    $0x10,%esp
    return 0;
   1088e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10893:	c9                   	leave  
   10894:	c3                   	ret    

00010895 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10895:	55                   	push   %ebp
   10896:	89 e5                	mov    %esp,%ebp
   10898:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   1089b:	83 ec 0c             	sub    $0xc,%esp
   1089e:	68 dc 32 01 00       	push   $0x132dc
   108a3:	e8 18 fb ff ff       	call   103c0 <list_get_first>
   108a8:	83 c4 10             	add    $0x10,%esp
   108ab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   108ae:	eb 62                	jmp    10912 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   108b0:	83 ec 0c             	sub    $0xc,%esp
   108b3:	ff 75 f4             	push   -0xc(%ebp)
   108b6:	e8 2f fa ff ff       	call   102ea <list_node_next>
   108bb:	83 c4 10             	add    $0x10,%esp
   108be:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   108c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   108c5:	74 08                	je     108cf <task_slice_end+0x3a>
   108c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108ca:	83 e8 30             	sub    $0x30,%eax
   108cd:	eb 05                	jmp    108d4 <task_slice_end+0x3f>
   108cf:	b8 00 00 00 00       	mov    $0x0,%eax
   108d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   108d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108da:	8b 40 0c             	mov    0xc(%eax),%eax
   108dd:	8d 50 ff             	lea    -0x1(%eax),%edx
   108e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108e3:	89 50 0c             	mov    %edx,0xc(%eax)
   108e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108e9:	8b 40 0c             	mov    0xc(%eax),%eax
   108ec:	85 c0                	test   %eax,%eax
   108ee:	75 1c                	jne    1090c <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   108f0:	83 ec 0c             	sub    $0xc,%esp
   108f3:	ff 75 e8             	push   -0x18(%ebp)
   108f6:	e8 01 01 00 00       	call   109fc <task_set_wakeup>
   108fb:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   108fe:	83 ec 0c             	sub    $0xc,%esp
   10901:	ff 75 e8             	push   -0x18(%ebp)
   10904:	e8 f5 fd ff ff       	call   106fe <task_set_ready>
   10909:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1090c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1090f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10912:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10916:	75 98                	jne    108b0 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10918:	e8 a5 fe ff ff       	call   107c2 <task_current>
   1091d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10920:	81 7d f0 9c 33 01 00 	cmpl   $0x1339c,-0x10(%ebp)
   10927:	75 23                	jne    1094c <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10929:	83 ec 0c             	sub    $0xc,%esp
   1092c:	68 c4 32 01 00       	push   $0x132c4
   10931:	e8 28 fa ff ff       	call   1035e <list_is_empty>
   10936:	83 c4 10             	add    $0x10,%esp
   10939:	85 c0                	test   %eax,%eax
   1093b:	75 60                	jne    1099d <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1093d:	c7 05 9c 33 01 00 00 	movl   $0x0,0x1339c
   10944:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10947:	e8 80 fe ff ff       	call   107cc <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   1094c:	81 7d f0 9c 33 01 00 	cmpl   $0x1339c,-0x10(%ebp)
   10953:	74 49                	je     1099e <task_slice_end+0x109>
   10955:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10958:	8b 40 08             	mov    0x8(%eax),%eax
   1095b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1095e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10961:	89 50 08             	mov    %edx,0x8(%eax)
   10964:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10967:	8b 40 08             	mov    0x8(%eax),%eax
   1096a:	85 c0                	test   %eax,%eax
   1096c:	75 30                	jne    1099e <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1096e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10971:	8b 50 04             	mov    0x4(%eax),%edx
   10974:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10977:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   1097a:	83 ec 0c             	sub    $0xc,%esp
   1097d:	ff 75 f0             	push   -0x10(%ebp)
   10980:	e8 c4 fd ff ff       	call   10749 <task_set_unready>
   10985:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10988:	83 ec 0c             	sub    $0xc,%esp
   1098b:	ff 75 f0             	push   -0x10(%ebp)
   1098e:	e8 6b fd ff ff       	call   106fe <task_set_ready>
   10993:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10996:	e8 31 fe ff ff       	call   107cc <task_switch>
   1099b:	eb 01                	jmp    1099e <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   1099d:	90                   	nop
    }
}
   1099e:	c9                   	leave  
   1099f:	c3                   	ret    

000109a0 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   109a0:	55                   	push   %ebp
   109a1:	89 e5                	mov    %esp,%ebp
   109a3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   109a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109aa:	75 1c                	jne    109c8 <task_set_sleep+0x28>
   109ac:	68 4d 29 01 00       	push   $0x1294d
   109b1:	68 38 2a 01 00       	push   $0x12a38
   109b6:	68 66 01 00 00       	push   $0x166
   109bb:	68 60 29 01 00       	push   $0x12960
   109c0:	e8 99 14 00 00       	call   11e5e <pannic>
   109c5:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   109c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   109cc:	74 2b                	je     109f9 <task_set_sleep+0x59>

    task->sleep = slice;
   109ce:	8b 55 0c             	mov    0xc(%ebp),%edx
   109d1:	8b 45 08             	mov    0x8(%ebp),%eax
   109d4:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   109d7:	8b 45 08             	mov    0x8(%ebp),%eax
   109da:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   109e0:	8b 45 08             	mov    0x8(%ebp),%eax
   109e3:	83 c0 30             	add    $0x30,%eax
   109e6:	83 ec 08             	sub    $0x8,%esp
   109e9:	50                   	push   %eax
   109ea:	68 dc 32 01 00       	push   $0x132dc
   109ef:	e8 6f 1a 00 00       	call   12463 <list_insert_last>
   109f4:	83 c4 10             	add    $0x10,%esp
   109f7:	eb 01                	jmp    109fa <task_set_sleep+0x5a>
    if (slice == 0) return;
   109f9:	90                   	nop
}
   109fa:	c9                   	leave  
   109fb:	c3                   	ret    

000109fc <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   109fc:	55                   	push   %ebp
   109fd:	89 e5                	mov    %esp,%ebp
   109ff:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10a02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a06:	75 1c                	jne    10a24 <task_set_wakeup+0x28>
   10a08:	68 4d 29 01 00       	push   $0x1294d
   10a0d:	68 48 2a 01 00       	push   $0x12a48
   10a12:	68 74 01 00 00       	push   $0x174
   10a17:	68 60 29 01 00       	push   $0x12960
   10a1c:	e8 3d 14 00 00       	call   11e5e <pannic>
   10a21:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10a24:	8b 45 08             	mov    0x8(%ebp),%eax
   10a27:	83 c0 30             	add    $0x30,%eax
   10a2a:	83 ec 08             	sub    $0x8,%esp
   10a2d:	50                   	push   %eax
   10a2e:	68 dc 32 01 00       	push   $0x132dc
   10a33:	e8 20 1c 00 00       	call   12658 <list_remove>
   10a38:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10a3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10a44:	90                   	nop
   10a45:	c9                   	leave  
   10a46:	c3                   	ret    

00010a47 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10a47:	55                   	push   %ebp
   10a48:	89 e5                	mov    %esp,%ebp
   10a4a:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10a4d:	e8 58 0a 00 00       	call   114aa <idt_enter_protection>
   10a52:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10a55:	e8 68 fd ff ff       	call   107c2 <task_current>
   10a5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10a5d:	83 ec 0c             	sub    $0xc,%esp
   10a60:	ff 75 f0             	push   -0x10(%ebp)
   10a63:	e8 e1 fc ff ff       	call   10749 <task_set_unready>
   10a68:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10a6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6e:	83 c0 09             	add    $0x9,%eax
   10a71:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10a76:	f7 e2                	mul    %edx
   10a78:	89 d0                	mov    %edx,%eax
   10a7a:	c1 e8 03             	shr    $0x3,%eax
   10a7d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10a80:	83 ec 08             	sub    $0x8,%esp
   10a83:	ff 75 ec             	push   -0x14(%ebp)
   10a86:	ff 75 f0             	push   -0x10(%ebp)
   10a89:	e8 12 ff ff ff       	call   109a0 <task_set_sleep>
   10a8e:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10a91:	e8 36 fd ff ff       	call   107cc <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10a96:	83 ec 0c             	sub    $0xc,%esp
   10a99:	ff 75 f4             	push   -0xc(%ebp)
   10a9c:	e8 21 0a 00 00       	call   114c2 <idt_leave_protection>
   10aa1:	83 c4 10             	add    $0x10,%esp
   10aa4:	90                   	nop
   10aa5:	c9                   	leave  
   10aa6:	c3                   	ret    

00010aa7 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10aa7:	55                   	push   %ebp
   10aa8:	89 e5                	mov    %esp,%ebp
   10aaa:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10aad:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab0:	c1 e8 10             	shr    $0x10,%eax
   10ab3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   10aba:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10abe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ac1:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10ac4:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10ac8:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10acc:	90                   	nop
   10acd:	c9                   	leave  
   10ace:	c3                   	ret    

00010acf <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10acf:	55                   	push   %ebp
   10ad0:	89 e5                	mov    %esp,%ebp
   10ad2:	83 ec 18             	sub    $0x18,%esp
   10ad5:	8b 55 08             	mov    0x8(%ebp),%edx
   10ad8:	8b 45 14             	mov    0x14(%ebp),%eax
   10adb:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10adf:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10ae3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ae7:	66 c1 e8 03          	shr    $0x3,%ax
   10aeb:	0f b7 c0             	movzwl %ax,%eax
   10aee:	c1 e0 03             	shl    $0x3,%eax
   10af1:	05 60 36 01 00       	add    $0x13660,%eax
   10af6:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10af9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10afc:	89 c2                	mov    %eax,%edx
   10afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b01:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10b05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b08:	c1 e8 10             	shr    $0x10,%eax
   10b0b:	89 c2                	mov    %eax,%edx
   10b0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b10:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10b13:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b16:	c1 e8 18             	shr    $0x18,%eax
   10b19:	89 c2                	mov    %eax,%edx
   10b1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b1e:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10b21:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10b28:	76 1d                	jbe    10b47 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10b2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b2d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10b31:	66 0d 00 80          	or     $0x8000,%ax
   10b35:	89 c2                	mov    %eax,%edx
   10b37:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b3a:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10b3e:	8b 45 10             	mov    0x10(%ebp),%eax
   10b41:	c1 e8 0c             	shr    $0xc,%eax
   10b44:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10b47:	8b 45 10             	mov    0x10(%ebp),%eax
   10b4a:	89 c2                	mov    %eax,%edx
   10b4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b4f:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b55:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10b59:	89 c2                	mov    %eax,%edx
   10b5b:	8b 45 10             	mov    0x10(%ebp),%eax
   10b5e:	c1 e8 08             	shr    $0x8,%eax
   10b61:	66 25 00 0f          	and    $0xf00,%ax
   10b65:	09 d0                	or     %edx,%eax
   10b67:	89 c2                	mov    %eax,%edx
   10b69:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b6c:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10b70:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b73:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10b77:	89 c2                	mov    %eax,%edx
   10b79:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10b7d:	80 e4 f0             	and    $0xf0,%ah
   10b80:	09 d0                	or     %edx,%eax
   10b82:	89 c2                	mov    %eax,%edx
   10b84:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b87:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10b8b:	90                   	nop
   10b8c:	c9                   	leave  
   10b8d:	c3                   	ret    

00010b8e <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10b8e:	55                   	push   %ebp
   10b8f:	89 e5                	mov    %esp,%ebp
   10b91:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10b94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10b9b:	eb 1c                	jmp    10bb9 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ba0:	c1 e0 03             	shl    $0x3,%eax
   10ba3:	0f b7 c0             	movzwl %ax,%eax
   10ba6:	6a 00                	push   $0x0
   10ba8:	6a 00                	push   $0x0
   10baa:	6a 00                	push   $0x0
   10bac:	50                   	push   %eax
   10bad:	e8 1d ff ff ff       	call   10acf <segment_desc_set>
   10bb2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10bb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10bb9:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10bc0:	7e db                	jle    10b9d <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10bc2:	68 92 40 00 00       	push   $0x4092
   10bc7:	6a ff                	push   $0xffffffff
   10bc9:	6a 00                	push   $0x0
   10bcb:	6a 10                	push   $0x10
   10bcd:	e8 fd fe ff ff       	call   10acf <segment_desc_set>
   10bd2:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10bd5:	c7 05 68 36 02 00 01 	movl   $0x1,0x23668
   10bdc:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10bdf:	68 9a 40 00 00       	push   $0x409a
   10be4:	6a ff                	push   $0xffffffff
   10be6:	6a 00                	push   $0x0
   10be8:	6a 08                	push   $0x8
   10bea:	e8 e0 fe ff ff       	call   10acf <segment_desc_set>
   10bef:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10bf2:	c7 05 64 36 02 00 01 	movl   $0x1,0x23664
   10bf9:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10bfc:	b8 60 36 01 00       	mov    $0x13660,%eax
   10c01:	68 00 00 01 00       	push   $0x10000
   10c06:	50                   	push   %eax
   10c07:	e8 9b fe ff ff       	call   10aa7 <lgdt>
   10c0c:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10c0f:	83 ec 0c             	sub    $0xc,%esp
   10c12:	68 60 b6 02 00       	push   $0x2b660
   10c17:	e8 2d 0b 00 00       	call   11749 <mutex_init>
   10c1c:	83 c4 10             	add    $0x10,%esp
}
   10c1f:	90                   	nop
   10c20:	c9                   	leave  
   10c21:	c3                   	ret    

00010c22 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10c22:	55                   	push   %ebp
   10c23:	89 e5                	mov    %esp,%ebp
   10c25:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10c28:	83 ec 0c             	sub    $0xc,%esp
   10c2b:	68 60 b6 02 00       	push   $0x2b660
   10c30:	e8 61 0b 00 00       	call   11796 <mutex_lock>
   10c35:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10c38:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10c3f:	eb 38                	jmp    10c79 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c44:	8b 04 85 60 36 02 00 	mov    0x23660(,%eax,4),%eax
   10c4b:	85 c0                	test   %eax,%eax
   10c4d:	75 26                	jne    10c75 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c52:	c7 04 85 60 36 02 00 	movl   $0x1,0x23660(,%eax,4)
   10c59:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10c5d:	83 ec 0c             	sub    $0xc,%esp
   10c60:	68 60 b6 02 00       	push   $0x2b660
   10c65:	e8 bd 0b 00 00       	call   11827 <mutex_unlock>
   10c6a:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c70:	c1 e0 03             	shl    $0x3,%eax
   10c73:	eb 22                	jmp    10c97 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10c75:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10c79:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10c80:	7e bf                	jle    10c41 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10c82:	83 ec 0c             	sub    $0xc,%esp
   10c85:	68 60 b6 02 00       	push   $0x2b660
   10c8a:	e8 98 0b 00 00       	call   11827 <mutex_unlock>
   10c8f:	83 c4 10             	add    $0x10,%esp
    return -1;
   10c92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10c97:	c9                   	leave  
   10c98:	c3                   	ret    

00010c99 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10c99:	55                   	push   %ebp
   10c9a:	89 e5                	mov    %esp,%ebp
   10c9c:	fa                   	cli    
   10c9d:	90                   	nop
   10c9e:	5d                   	pop    %ebp
   10c9f:	c3                   	ret    

00010ca0 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10ca0:	55                   	push   %ebp
   10ca1:	89 e5                	mov    %esp,%ebp
   10ca3:	fb                   	sti    
   10ca4:	90                   	nop
   10ca5:	5d                   	pop    %ebp
   10ca6:	c3                   	ret    

00010ca7 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10ca7:	55                   	push   %ebp
   10ca8:	89 e5                	mov    %esp,%ebp
   10caa:	f4                   	hlt    
   10cab:	90                   	nop
   10cac:	5d                   	pop    %ebp
   10cad:	c3                   	ret    

00010cae <inb>:
static inline uint8_t inb(uint16_t port) {
   10cae:	55                   	push   %ebp
   10caf:	89 e5                	mov    %esp,%ebp
   10cb1:	83 ec 14             	sub    $0x14,%esp
   10cb4:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10cbb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10cbf:	89 c2                	mov    %eax,%edx
   10cc1:	ec                   	in     (%dx),%al
   10cc2:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10cc5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10cc9:	c9                   	leave  
   10cca:	c3                   	ret    

00010ccb <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10ccb:	55                   	push   %ebp
   10ccc:	89 e5                	mov    %esp,%ebp
   10cce:	83 ec 08             	sub    $0x8,%esp
   10cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd4:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cd7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10cdb:	89 d0                	mov    %edx,%eax
   10cdd:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10ce0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ce4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10ce8:	ee                   	out    %al,(%dx)
}
   10ce9:	90                   	nop
   10cea:	c9                   	leave  
   10ceb:	c3                   	ret    

00010cec <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10cec:	55                   	push   %ebp
   10ced:	89 e5                	mov    %esp,%ebp
   10cef:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10cf2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf5:	c1 e8 10             	shr    $0x10,%eax
   10cf8:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   10cff:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10d03:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d06:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10d09:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10d0d:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10d11:	90                   	nop
   10d12:	c9                   	leave  
   10d13:	c3                   	ret    

00010d14 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10d14:	55                   	push   %ebp
   10d15:	89 e5                	mov    %esp,%ebp
   10d17:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10d1a:	9c                   	pushf  
   10d1b:	58                   	pop    %eax
   10d1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10d1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10d22:	c9                   	leave  
   10d23:	c3                   	ret    

00010d24 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10d24:	55                   	push   %ebp
   10d25:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10d27:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2a:	50                   	push   %eax
   10d2b:	9d                   	popf   
}
   10d2c:	90                   	nop
   10d2d:	5d                   	pop    %ebp
   10d2e:	c3                   	ret    

00010d2f <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10d2f:	55                   	push   %ebp
   10d30:	89 e5                	mov    %esp,%ebp
   10d32:	57                   	push   %edi
   10d33:	56                   	push   %esi
   10d34:	53                   	push   %ebx
   10d35:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10d38:	83 ec 0c             	sub    $0xc,%esp
   10d3b:	68 58 2a 01 00       	push   $0x12a58
   10d40:	e8 a2 1a 00 00       	call   127e7 <log_printf>
   10d45:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10d48:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4b:	8b 50 34             	mov    0x34(%eax),%edx
   10d4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d51:	8b 40 30             	mov    0x30(%eax),%eax
   10d54:	83 ec 04             	sub    $0x4,%esp
   10d57:	52                   	push   %edx
   10d58:	50                   	push   %eax
   10d59:	68 96 2a 01 00       	push   $0x12a96
   10d5e:	e8 84 1a 00 00       	call   127e7 <log_printf>
   10d63:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10d66:	8b 45 08             	mov    0x8(%ebp),%eax
   10d69:	8b 38                	mov    (%eax),%edi
   10d6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6e:	8b 70 04             	mov    0x4(%eax),%esi
   10d71:	8b 45 08             	mov    0x8(%ebp),%eax
   10d74:	8b 58 08             	mov    0x8(%eax),%ebx
   10d77:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7a:	8b 48 0c             	mov    0xc(%eax),%ecx
   10d7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d80:	8b 50 0c             	mov    0xc(%eax),%edx
   10d83:	8b 45 08             	mov    0x8(%ebp),%eax
   10d86:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10d89:	83 ec 04             	sub    $0x4,%esp
   10d8c:	57                   	push   %edi
   10d8d:	56                   	push   %esi
   10d8e:	53                   	push   %ebx
   10d8f:	51                   	push   %ecx
   10d90:	52                   	push   %edx
   10d91:	50                   	push   %eax
   10d92:	68 b0 2a 01 00       	push   $0x12ab0
   10d97:	e8 4b 1a 00 00       	call   127e7 <log_printf>
   10d9c:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10d9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10da2:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10da5:	8b 45 08             	mov    0x8(%ebp),%eax
   10da8:	8b 40 18             	mov    0x18(%eax),%eax
   10dab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10dae:	8b 45 08             	mov    0x8(%ebp),%eax
   10db1:	8b 58 10             	mov    0x10(%eax),%ebx
   10db4:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10db7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dba:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10dbd:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc0:	8b 70 24             	mov    0x24(%eax),%esi
   10dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc6:	8b 58 28             	mov    0x28(%eax),%ebx
   10dc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcc:	8b 50 20             	mov    0x20(%eax),%edx
   10dcf:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd2:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10dd5:	83 ec 0c             	sub    $0xc,%esp
   10dd8:	51                   	push   %ecx
   10dd9:	ff 75 e4             	push   -0x1c(%ebp)
   10ddc:	ff 75 e0             	push   -0x20(%ebp)
   10ddf:	57                   	push   %edi
   10de0:	56                   	push   %esi
   10de1:	53                   	push   %ebx
   10de2:	52                   	push   %edx
   10de3:	50                   	push   %eax
   10de4:	68 e0 2a 01 00       	push   $0x12ae0
   10de9:	e8 f9 19 00 00       	call   127e7 <log_printf>
   10dee:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10df1:	8b 45 08             	mov    0x8(%ebp),%eax
   10df4:	8b 50 40             	mov    0x40(%eax),%edx
   10df7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfa:	8b 40 38             	mov    0x38(%eax),%eax
   10dfd:	83 ec 04             	sub    $0x4,%esp
   10e00:	52                   	push   %edx
   10e01:	50                   	push   %eax
   10e02:	68 38 2b 01 00       	push   $0x12b38
   10e07:	e8 db 19 00 00       	call   127e7 <log_printf>
   10e0c:	83 c4 10             	add    $0x10,%esp
}
   10e0f:	90                   	nop
   10e10:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10e13:	5b                   	pop    %ebx
   10e14:	5e                   	pop    %esi
   10e15:	5f                   	pop    %edi
   10e16:	5d                   	pop    %ebp
   10e17:	c3                   	ret    

00010e18 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10e18:	55                   	push   %ebp
   10e19:	89 e5                	mov    %esp,%ebp
   10e1b:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   10e1e:	83 ec 0c             	sub    $0xc,%esp
   10e21:	68 54 2b 01 00       	push   $0x12b54
   10e26:	e8 bc 19 00 00       	call   127e7 <log_printf>
   10e2b:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10e2e:	83 ec 08             	sub    $0x8,%esp
   10e31:	ff 75 0c             	push   0xc(%ebp)
   10e34:	68 88 2b 01 00       	push   $0x12b88
   10e39:	e8 a9 19 00 00       	call   127e7 <log_printf>
   10e3e:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10e41:	83 ec 0c             	sub    $0xc,%esp
   10e44:	ff 75 08             	push   0x8(%ebp)
   10e47:	e8 e3 fe ff ff       	call   10d2f <print_exception_fram>
   10e4c:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10e4f:	e8 53 fe ff ff       	call   10ca7 <hlt>
   10e54:	eb f9                	jmp    10e4f <do_default_handler+0x37>

00010e56 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10e56:	55                   	push   %ebp
   10e57:	89 e5                	mov    %esp,%ebp
   10e59:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10e5c:	83 ec 08             	sub    $0x8,%esp
   10e5f:	68 a2 2b 01 00       	push   $0x12ba2
   10e64:	ff 75 08             	push   0x8(%ebp)
   10e67:	e8 ac ff ff ff       	call   10e18 <do_default_handler>
   10e6c:	83 c4 10             	add    $0x10,%esp
}
   10e6f:	90                   	nop
   10e70:	c9                   	leave  
   10e71:	c3                   	ret    

00010e72 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10e72:	55                   	push   %ebp
   10e73:	89 e5                	mov    %esp,%ebp
   10e75:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10e78:	83 ec 08             	sub    $0x8,%esp
   10e7b:	68 b4 2b 01 00       	push   $0x12bb4
   10e80:	ff 75 08             	push   0x8(%ebp)
   10e83:	e8 90 ff ff ff       	call   10e18 <do_default_handler>
   10e88:	83 c4 10             	add    $0x10,%esp
}
   10e8b:	90                   	nop
   10e8c:	c9                   	leave  
   10e8d:	c3                   	ret    

00010e8e <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10e8e:	55                   	push   %ebp
   10e8f:	89 e5                	mov    %esp,%ebp
   10e91:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10e94:	83 ec 08             	sub    $0x8,%esp
   10e97:	68 c6 2b 01 00       	push   $0x12bc6
   10e9c:	ff 75 08             	push   0x8(%ebp)
   10e9f:	e8 74 ff ff ff       	call   10e18 <do_default_handler>
   10ea4:	83 c4 10             	add    $0x10,%esp
}
   10ea7:	90                   	nop
   10ea8:	c9                   	leave  
   10ea9:	c3                   	ret    

00010eaa <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10eaa:	55                   	push   %ebp
   10eab:	89 e5                	mov    %esp,%ebp
   10ead:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10eb0:	83 ec 08             	sub    $0x8,%esp
   10eb3:	68 d6 2b 01 00       	push   $0x12bd6
   10eb8:	ff 75 08             	push   0x8(%ebp)
   10ebb:	e8 58 ff ff ff       	call   10e18 <do_default_handler>
   10ec0:	83 c4 10             	add    $0x10,%esp
}
   10ec3:	90                   	nop
   10ec4:	c9                   	leave  
   10ec5:	c3                   	ret    

00010ec6 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10ec6:	55                   	push   %ebp
   10ec7:	89 e5                	mov    %esp,%ebp
   10ec9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10ecc:	83 ec 08             	sub    $0x8,%esp
   10ecf:	68 e4 2b 01 00       	push   $0x12be4
   10ed4:	ff 75 08             	push   0x8(%ebp)
   10ed7:	e8 3c ff ff ff       	call   10e18 <do_default_handler>
   10edc:	83 c4 10             	add    $0x10,%esp
}
   10edf:	90                   	nop
   10ee0:	c9                   	leave  
   10ee1:	c3                   	ret    

00010ee2 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10ee2:	55                   	push   %ebp
   10ee3:	89 e5                	mov    %esp,%ebp
   10ee5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10ee8:	83 ec 08             	sub    $0x8,%esp
   10eeb:	68 f9 2b 01 00       	push   $0x12bf9
   10ef0:	ff 75 08             	push   0x8(%ebp)
   10ef3:	e8 20 ff ff ff       	call   10e18 <do_default_handler>
   10ef8:	83 c4 10             	add    $0x10,%esp
}
   10efb:	90                   	nop
   10efc:	c9                   	leave  
   10efd:	c3                   	ret    

00010efe <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10efe:	55                   	push   %ebp
   10eff:	89 e5                	mov    %esp,%ebp
   10f01:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10f04:	83 ec 08             	sub    $0x8,%esp
   10f07:	68 0c 2c 01 00       	push   $0x12c0c
   10f0c:	ff 75 08             	push   0x8(%ebp)
   10f0f:	e8 04 ff ff ff       	call   10e18 <do_default_handler>
   10f14:	83 c4 10             	add    $0x10,%esp
}
   10f17:	90                   	nop
   10f18:	c9                   	leave  
   10f19:	c3                   	ret    

00010f1a <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10f1a:	55                   	push   %ebp
   10f1b:	89 e5                	mov    %esp,%ebp
   10f1d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10f20:	83 ec 08             	sub    $0x8,%esp
   10f23:	68 22 2c 01 00       	push   $0x12c22
   10f28:	ff 75 08             	push   0x8(%ebp)
   10f2b:	e8 e8 fe ff ff       	call   10e18 <do_default_handler>
   10f30:	83 c4 10             	add    $0x10,%esp
}
   10f33:	90                   	nop
   10f34:	c9                   	leave  
   10f35:	c3                   	ret    

00010f36 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10f36:	55                   	push   %ebp
   10f37:	89 e5                	mov    %esp,%ebp
   10f39:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10f3c:	83 ec 08             	sub    $0x8,%esp
   10f3f:	68 3b 2c 01 00       	push   $0x12c3b
   10f44:	ff 75 08             	push   0x8(%ebp)
   10f47:	e8 cc fe ff ff       	call   10e18 <do_default_handler>
   10f4c:	83 c4 10             	add    $0x10,%esp
}
   10f4f:	90                   	nop
   10f50:	c9                   	leave  
   10f51:	c3                   	ret    

00010f52 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10f52:	55                   	push   %ebp
   10f53:	89 e5                	mov    %esp,%ebp
   10f55:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10f58:	83 ec 08             	sub    $0x8,%esp
   10f5b:	68 58 2c 01 00       	push   $0x12c58
   10f60:	ff 75 08             	push   0x8(%ebp)
   10f63:	e8 b0 fe ff ff       	call   10e18 <do_default_handler>
   10f68:	83 c4 10             	add    $0x10,%esp
}
   10f6b:	90                   	nop
   10f6c:	c9                   	leave  
   10f6d:	c3                   	ret    

00010f6e <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10f6e:	55                   	push   %ebp
   10f6f:	89 e5                	mov    %esp,%ebp
   10f71:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10f74:	83 ec 08             	sub    $0x8,%esp
   10f77:	68 6f 2c 01 00       	push   $0x12c6f
   10f7c:	ff 75 08             	push   0x8(%ebp)
   10f7f:	e8 94 fe ff ff       	call   10e18 <do_default_handler>
   10f84:	83 c4 10             	add    $0x10,%esp
}
   10f87:	90                   	nop
   10f88:	c9                   	leave  
   10f89:	c3                   	ret    

00010f8a <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10f8a:	55                   	push   %ebp
   10f8b:	89 e5                	mov    %esp,%ebp
   10f8d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10f90:	83 ec 08             	sub    $0x8,%esp
   10f93:	68 85 2c 01 00       	push   $0x12c85
   10f98:	ff 75 08             	push   0x8(%ebp)
   10f9b:	e8 78 fe ff ff       	call   10e18 <do_default_handler>
   10fa0:	83 c4 10             	add    $0x10,%esp
}
   10fa3:	90                   	nop
   10fa4:	c9                   	leave  
   10fa5:	c3                   	ret    

00010fa6 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10fa6:	55                   	push   %ebp
   10fa7:	89 e5                	mov    %esp,%ebp
   10fa9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   10fac:	83 ec 08             	sub    $0x8,%esp
   10faf:	68 a3 2c 01 00       	push   $0x12ca3
   10fb4:	ff 75 08             	push   0x8(%ebp)
   10fb7:	e8 5c fe ff ff       	call   10e18 <do_default_handler>
   10fbc:	83 c4 10             	add    $0x10,%esp
}
   10fbf:	90                   	nop
   10fc0:	c9                   	leave  
   10fc1:	c3                   	ret    

00010fc2 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10fc2:	55                   	push   %ebp
   10fc3:	89 e5                	mov    %esp,%ebp
   10fc5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10fc8:	83 ec 08             	sub    $0x8,%esp
   10fcb:	68 c1 2c 01 00       	push   $0x12cc1
   10fd0:	ff 75 08             	push   0x8(%ebp)
   10fd3:	e8 40 fe ff ff       	call   10e18 <do_default_handler>
   10fd8:	83 c4 10             	add    $0x10,%esp
}
   10fdb:	90                   	nop
   10fdc:	c9                   	leave  
   10fdd:	c3                   	ret    

00010fde <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10fde:	55                   	push   %ebp
   10fdf:	89 e5                	mov    %esp,%ebp
   10fe1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10fe4:	83 ec 08             	sub    $0x8,%esp
   10fe7:	68 de 2c 01 00       	push   $0x12cde
   10fec:	ff 75 08             	push   0x8(%ebp)
   10fef:	e8 24 fe ff ff       	call   10e18 <do_default_handler>
   10ff4:	83 c4 10             	add    $0x10,%esp
}
   10ff7:	90                   	nop
   10ff8:	c9                   	leave  
   10ff9:	c3                   	ret    

00010ffa <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10ffa:	55                   	push   %ebp
   10ffb:	89 e5                	mov    %esp,%ebp
   10ffd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11000:	83 ec 08             	sub    $0x8,%esp
   11003:	68 f3 2c 01 00       	push   $0x12cf3
   11008:	ff 75 08             	push   0x8(%ebp)
   1100b:	e8 08 fe ff ff       	call   10e18 <do_default_handler>
   11010:	83 c4 10             	add    $0x10,%esp
}
   11013:	90                   	nop
   11014:	c9                   	leave  
   11015:	c3                   	ret    

00011016 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11016:	55                   	push   %ebp
   11017:	89 e5                	mov    %esp,%ebp
   11019:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   1101c:	83 ec 08             	sub    $0x8,%esp
   1101f:	68 07 2d 01 00       	push   $0x12d07
   11024:	ff 75 08             	push   0x8(%ebp)
   11027:	e8 ec fd ff ff       	call   10e18 <do_default_handler>
   1102c:	83 c4 10             	add    $0x10,%esp
}
   1102f:	90                   	nop
   11030:	c9                   	leave  
   11031:	c3                   	ret    

00011032 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11032:	55                   	push   %ebp
   11033:	89 e5                	mov    %esp,%ebp
   11035:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11038:	83 ec 08             	sub    $0x8,%esp
   1103b:	68 21 2d 01 00       	push   $0x12d21
   11040:	ff 75 08             	push   0x8(%ebp)
   11043:	e8 d0 fd ff ff       	call   10e18 <do_default_handler>
   11048:	83 c4 10             	add    $0x10,%esp
}
   1104b:	90                   	nop
   1104c:	c9                   	leave  
   1104d:	c3                   	ret    

0001104e <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1104e:	55                   	push   %ebp
   1104f:	89 e5                	mov    %esp,%ebp
   11051:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11054:	83 ec 08             	sub    $0x8,%esp
   11057:	68 39 2d 01 00       	push   $0x12d39
   1105c:	ff 75 08             	push   0x8(%ebp)
   1105f:	e8 b4 fd ff ff       	call   10e18 <do_default_handler>
   11064:	83 c4 10             	add    $0x10,%esp
}
   11067:	90                   	nop
   11068:	c9                   	leave  
   11069:	c3                   	ret    

0001106a <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   1106a:	55                   	push   %ebp
   1106b:	89 e5                	mov    %esp,%ebp
   1106d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11070:	83 ec 08             	sub    $0x8,%esp
   11073:	68 51 2d 01 00       	push   $0x12d51
   11078:	ff 75 08             	push   0x8(%ebp)
   1107b:	e8 98 fd ff ff       	call   10e18 <do_default_handler>
   11080:	83 c4 10             	add    $0x10,%esp
}
   11083:	90                   	nop
   11084:	c9                   	leave  
   11085:	c3                   	ret    

00011086 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11086:	55                   	push   %ebp
   11087:	89 e5                	mov    %esp,%ebp
   11089:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1108c:	83 ec 08             	sub    $0x8,%esp
   1108f:	68 6d 2d 01 00       	push   $0x12d6d
   11094:	ff 75 08             	push   0x8(%ebp)
   11097:	e8 7c fd ff ff       	call   10e18 <do_default_handler>
   1109c:	83 c4 10             	add    $0x10,%esp
}
   1109f:	90                   	nop
   110a0:	c9                   	leave  
   110a1:	c3                   	ret    

000110a2 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   110a2:	55                   	push   %ebp
   110a3:	89 e5                	mov    %esp,%ebp
   110a5:	83 ec 08             	sub    $0x8,%esp
   110a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   110ab:	8b 45 14             	mov    0x14(%ebp),%eax
   110ae:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   110b2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   110b6:	8b 45 10             	mov    0x10(%ebp),%eax
   110b9:	89 c2                	mov    %eax,%edx
   110bb:	8b 45 08             	mov    0x8(%ebp),%eax
   110be:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   110c1:	8b 45 10             	mov    0x10(%ebp),%eax
   110c4:	c1 e8 10             	shr    $0x10,%eax
   110c7:	89 c2                	mov    %eax,%edx
   110c9:	8b 45 08             	mov    0x8(%ebp),%eax
   110cc:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   110d0:	8b 45 08             	mov    0x8(%ebp),%eax
   110d3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   110d7:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   110db:	8b 45 08             	mov    0x8(%ebp),%eax
   110de:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   110e2:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   110e6:	90                   	nop
   110e7:	c9                   	leave  
   110e8:	c3                   	ret    

000110e9 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   110e9:	55                   	push   %ebp
   110ea:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   110ec:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   110f3:	7f 06                	jg     110fb <idt_install+0x12>
   110f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110f9:	79 07                	jns    11102 <idt_install+0x19>
   110fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11100:	eb 25                	jmp    11127 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11102:	8b 45 0c             	mov    0xc(%ebp),%eax
   11105:	8b 55 08             	mov    0x8(%ebp),%edx
   11108:	c1 e2 03             	shl    $0x3,%edx
   1110b:	81 c2 80 b6 02 00    	add    $0x2b680,%edx
   11111:	68 00 8e 00 00       	push   $0x8e00
   11116:	50                   	push   %eax
   11117:	6a 08                	push   $0x8
   11119:	52                   	push   %edx
   1111a:	e8 83 ff ff ff       	call   110a2 <gate_desc_set>
   1111f:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11122:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11127:	c9                   	leave  
   11128:	c3                   	ret    

00011129 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11129:	55                   	push   %ebp
   1112a:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   1112c:	6a 11                	push   $0x11
   1112e:	6a 20                	push   $0x20
   11130:	e8 96 fb ff ff       	call   10ccb <outb>
   11135:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11138:	6a 20                	push   $0x20
   1113a:	6a 21                	push   $0x21
   1113c:	e8 8a fb ff ff       	call   10ccb <outb>
   11141:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11144:	6a 04                	push   $0x4
   11146:	6a 21                	push   $0x21
   11148:	e8 7e fb ff ff       	call   10ccb <outb>
   1114d:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11150:	6a 01                	push   $0x1
   11152:	6a 21                	push   $0x21
   11154:	e8 72 fb ff ff       	call   10ccb <outb>
   11159:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1115c:	6a 11                	push   $0x11
   1115e:	68 a0 00 00 00       	push   $0xa0
   11163:	e8 63 fb ff ff       	call   10ccb <outb>
   11168:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1116b:	6a 28                	push   $0x28
   1116d:	68 a1 00 00 00       	push   $0xa1
   11172:	e8 54 fb ff ff       	call   10ccb <outb>
   11177:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1117a:	6a 02                	push   $0x2
   1117c:	68 a1 00 00 00       	push   $0xa1
   11181:	e8 45 fb ff ff       	call   10ccb <outb>
   11186:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11189:	6a 01                	push   $0x1
   1118b:	68 a1 00 00 00       	push   $0xa1
   11190:	e8 36 fb ff ff       	call   10ccb <outb>
   11195:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11198:	68 fb 00 00 00       	push   $0xfb
   1119d:	6a 21                	push   $0x21
   1119f:	e8 27 fb ff ff       	call   10ccb <outb>
   111a4:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   111a7:	68 ff 00 00 00       	push   $0xff
   111ac:	68 a1 00 00 00       	push   $0xa1
   111b1:	e8 15 fb ff ff       	call   10ccb <outb>
   111b6:	83 c4 08             	add    $0x8,%esp


}
   111b9:	90                   	nop
   111ba:	c9                   	leave  
   111bb:	c3                   	ret    

000111bc <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   111bc:	55                   	push   %ebp
   111bd:	89 e5                	mov    %esp,%ebp
   111bf:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   111c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   111c9:	eb 14                	jmp    111df <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   111cb:	68 2a 00 01 00       	push   $0x1002a
   111d0:	ff 75 fc             	push   -0x4(%ebp)
   111d3:	e8 11 ff ff ff       	call   110e9 <idt_install>
   111d8:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   111db:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   111df:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   111e6:	7e e3                	jle    111cb <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   111e8:	68 47 00 01 00       	push   $0x10047
   111ed:	6a 00                	push   $0x0
   111ef:	e8 f5 fe ff ff       	call   110e9 <idt_install>
   111f4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   111f7:	68 64 00 01 00       	push   $0x10064
   111fc:	6a 01                	push   $0x1
   111fe:	e8 e6 fe ff ff       	call   110e9 <idt_install>
   11203:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11206:	68 81 00 01 00       	push   $0x10081
   1120b:	6a 02                	push   $0x2
   1120d:	e8 d7 fe ff ff       	call   110e9 <idt_install>
   11212:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   11215:	68 9e 00 01 00       	push   $0x1009e
   1121a:	6a 03                	push   $0x3
   1121c:	e8 c8 fe ff ff       	call   110e9 <idt_install>
   11221:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   11224:	68 bb 00 01 00       	push   $0x100bb
   11229:	6a 04                	push   $0x4
   1122b:	e8 b9 fe ff ff       	call   110e9 <idt_install>
   11230:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11233:	68 d8 00 01 00       	push   $0x100d8
   11238:	6a 05                	push   $0x5
   1123a:	e8 aa fe ff ff       	call   110e9 <idt_install>
   1123f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11242:	68 f5 00 01 00       	push   $0x100f5
   11247:	6a 06                	push   $0x6
   11249:	e8 9b fe ff ff       	call   110e9 <idt_install>
   1124e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11251:	68 12 01 01 00       	push   $0x10112
   11256:	6a 07                	push   $0x7
   11258:	e8 8c fe ff ff       	call   110e9 <idt_install>
   1125d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11260:	68 2f 01 01 00       	push   $0x1012f
   11265:	6a 08                	push   $0x8
   11267:	e8 7d fe ff ff       	call   110e9 <idt_install>
   1126c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   1126f:	68 4a 01 01 00       	push   $0x1014a
   11274:	6a 0a                	push   $0xa
   11276:	e8 6e fe ff ff       	call   110e9 <idt_install>
   1127b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1127e:	68 65 01 01 00       	push   $0x10165
   11283:	6a 0b                	push   $0xb
   11285:	e8 5f fe ff ff       	call   110e9 <idt_install>
   1128a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1128d:	68 80 01 01 00       	push   $0x10180
   11292:	6a 0c                	push   $0xc
   11294:	e8 50 fe ff ff       	call   110e9 <idt_install>
   11299:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1129c:	68 9b 01 01 00       	push   $0x1019b
   112a1:	6a 0d                	push   $0xd
   112a3:	e8 41 fe ff ff       	call   110e9 <idt_install>
   112a8:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   112ab:	68 b6 01 01 00       	push   $0x101b6
   112b0:	6a 0e                	push   $0xe
   112b2:	e8 32 fe ff ff       	call   110e9 <idt_install>
   112b7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   112ba:	68 d1 01 01 00       	push   $0x101d1
   112bf:	6a 10                	push   $0x10
   112c1:	e8 23 fe ff ff       	call   110e9 <idt_install>
   112c6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   112c9:	68 ee 01 01 00       	push   $0x101ee
   112ce:	6a 11                	push   $0x11
   112d0:	e8 14 fe ff ff       	call   110e9 <idt_install>
   112d5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   112d8:	68 09 02 01 00       	push   $0x10209
   112dd:	6a 12                	push   $0x12
   112df:	e8 05 fe ff ff       	call   110e9 <idt_install>
   112e4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   112e7:	68 26 02 01 00       	push   $0x10226
   112ec:	6a 13                	push   $0x13
   112ee:	e8 f6 fd ff ff       	call   110e9 <idt_install>
   112f3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   112f6:	68 43 02 01 00       	push   $0x10243
   112fb:	6a 14                	push   $0x14
   112fd:	e8 e7 fd ff ff       	call   110e9 <idt_install>
   11302:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11305:	68 60 02 01 00       	push   $0x10260
   1130a:	6a 15                	push   $0x15
   1130c:	e8 d8 fd ff ff       	call   110e9 <idt_install>
   11311:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11314:	b8 80 b6 02 00       	mov    $0x2b680,%eax
   11319:	68 00 08 00 00       	push   $0x800
   1131e:	50                   	push   %eax
   1131f:	e8 c8 f9 ff ff       	call   10cec <lidt>
   11324:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11327:	e8 fd fd ff ff       	call   11129 <init_pic>
}
   1132c:	90                   	nop
   1132d:	c9                   	leave  
   1132e:	c3                   	ret    

0001132f <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   1132f:	55                   	push   %ebp
   11330:	89 e5                	mov    %esp,%ebp
   11332:	53                   	push   %ebx
   11333:	83 ec 14             	sub    $0x14,%esp
   11336:	8b 45 08             	mov    0x8(%ebp),%eax
   11339:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1133c:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11340:	76 7f                	jbe    113c1 <idt_enable+0x92>
   11342:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11346:	77 79                	ja     113c1 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11348:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1134c:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11350:	77 33                	ja     11385 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11352:	6a 21                	push   $0x21
   11354:	e8 55 f9 ff ff       	call   10cae <inb>
   11359:	83 c4 04             	add    $0x4,%esp
   1135c:	89 c3                	mov    %eax,%ebx
   1135e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11362:	ba 01 00 00 00       	mov    $0x1,%edx
   11367:	89 c1                	mov    %eax,%ecx
   11369:	d3 e2                	shl    %cl,%edx
   1136b:	89 d0                	mov    %edx,%eax
   1136d:	f7 d0                	not    %eax
   1136f:	21 d8                	and    %ebx,%eax
   11371:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11374:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11378:	50                   	push   %eax
   11379:	6a 21                	push   $0x21
   1137b:	e8 4b f9 ff ff       	call   10ccb <outb>
   11380:	83 c4 08             	add    $0x8,%esp
   11383:	eb 3d                	jmp    113c2 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11385:	68 a1 00 00 00       	push   $0xa1
   1138a:	e8 1f f9 ff ff       	call   10cae <inb>
   1138f:	83 c4 04             	add    $0x4,%esp
   11392:	89 c3                	mov    %eax,%ebx
   11394:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11398:	83 e8 08             	sub    $0x8,%eax
   1139b:	ba 01 00 00 00       	mov    $0x1,%edx
   113a0:	89 c1                	mov    %eax,%ecx
   113a2:	d3 e2                	shl    %cl,%edx
   113a4:	89 d0                	mov    %edx,%eax
   113a6:	f7 d0                	not    %eax
   113a8:	21 d8                	and    %ebx,%eax
   113aa:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   113ad:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   113b1:	50                   	push   %eax
   113b2:	68 a1 00 00 00       	push   $0xa1
   113b7:	e8 0f f9 ff ff       	call   10ccb <outb>
   113bc:	83 c4 08             	add    $0x8,%esp
   113bf:	eb 01                	jmp    113c2 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   113c1:	90                   	nop
  }
  
}
   113c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   113c5:	c9                   	leave  
   113c6:	c3                   	ret    

000113c7 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   113c7:	55                   	push   %ebp
   113c8:	89 e5                	mov    %esp,%ebp
   113ca:	53                   	push   %ebx
   113cb:	83 ec 14             	sub    $0x14,%esp
   113ce:	8b 45 08             	mov    0x8(%ebp),%eax
   113d1:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   113d4:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   113d8:	76 7b                	jbe    11455 <idt_disable+0x8e>
   113da:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   113de:	77 75                	ja     11455 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   113e0:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   113e4:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   113e8:	77 31                	ja     1141b <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   113ea:	6a 21                	push   $0x21
   113ec:	e8 bd f8 ff ff       	call   10cae <inb>
   113f1:	83 c4 04             	add    $0x4,%esp
   113f4:	89 c3                	mov    %eax,%ebx
   113f6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   113fa:	ba 01 00 00 00       	mov    $0x1,%edx
   113ff:	89 c1                	mov    %eax,%ecx
   11401:	d3 e2                	shl    %cl,%edx
   11403:	89 d0                	mov    %edx,%eax
   11405:	09 d8                	or     %ebx,%eax
   11407:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1140a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1140e:	50                   	push   %eax
   1140f:	6a 21                	push   $0x21
   11411:	e8 b5 f8 ff ff       	call   10ccb <outb>
   11416:	83 c4 08             	add    $0x8,%esp
   11419:	eb 3b                	jmp    11456 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1141b:	68 a1 00 00 00       	push   $0xa1
   11420:	e8 89 f8 ff ff       	call   10cae <inb>
   11425:	83 c4 04             	add    $0x4,%esp
   11428:	89 c3                	mov    %eax,%ebx
   1142a:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1142e:	83 e8 08             	sub    $0x8,%eax
   11431:	ba 01 00 00 00       	mov    $0x1,%edx
   11436:	89 c1                	mov    %eax,%ecx
   11438:	d3 e2                	shl    %cl,%edx
   1143a:	89 d0                	mov    %edx,%eax
   1143c:	09 d8                	or     %ebx,%eax
   1143e:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11441:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11445:	50                   	push   %eax
   11446:	68 a1 00 00 00       	push   $0xa1
   1144b:	e8 7b f8 ff ff       	call   10ccb <outb>
   11450:	83 c4 08             	add    $0x8,%esp
   11453:	eb 01                	jmp    11456 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11455:	90                   	nop
  }
  
}
   11456:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11459:	c9                   	leave  
   1145a:	c3                   	ret    

0001145b <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1145b:	55                   	push   %ebp
   1145c:	89 e5                	mov    %esp,%ebp
  cli();
   1145e:	e8 36 f8 ff ff       	call   10c99 <cli>
}
   11463:	90                   	nop
   11464:	5d                   	pop    %ebp
   11465:	c3                   	ret    

00011466 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11466:	55                   	push   %ebp
   11467:	89 e5                	mov    %esp,%ebp
  sti();
   11469:	e8 32 f8 ff ff       	call   10ca0 <sti>
}
   1146e:	90                   	nop
   1146f:	5d                   	pop    %ebp
   11470:	c3                   	ret    

00011471 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11471:	55                   	push   %ebp
   11472:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11474:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11478:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1147c:	78 29                	js     114a7 <pic_send_eoi+0x36>
   1147e:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11482:	7f 23                	jg     114a7 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11484:	6a 20                	push   $0x20
   11486:	6a 20                	push   $0x20
   11488:	e8 3e f8 ff ff       	call   10ccb <outb>
   1148d:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11490:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11494:	7e 12                	jle    114a8 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11496:	6a 20                	push   $0x20
   11498:	68 a0 00 00 00       	push   $0xa0
   1149d:	e8 29 f8 ff ff       	call   10ccb <outb>
   114a2:	83 c4 08             	add    $0x8,%esp
   114a5:	eb 01                	jmp    114a8 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   114a7:	90                   	nop
  }

}
   114a8:	c9                   	leave  
   114a9:	c3                   	ret    

000114aa <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   114aa:	55                   	push   %ebp
   114ab:	89 e5                	mov    %esp,%ebp
   114ad:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   114b0:	e8 5f f8 ff ff       	call   10d14 <read_eflags>
   114b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   114b8:	e8 9e ff ff ff       	call   1145b <idt_disable_global>
  return state;;
   114bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   114c0:	c9                   	leave  
   114c1:	c3                   	ret    

000114c2 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   114c2:	55                   	push   %ebp
   114c3:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   114c5:	ff 75 08             	push   0x8(%ebp)
   114c8:	e8 57 f8 ff ff       	call   10d24 <write_eflags>
   114cd:	83 c4 04             	add    $0x4,%esp
}
   114d0:	90                   	nop
   114d1:	c9                   	leave  
   114d2:	c3                   	ret    

000114d3 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   114d3:	55                   	push   %ebp
   114d4:	89 e5                	mov    %esp,%ebp
   114d6:	83 ec 08             	sub    $0x8,%esp
   114d9:	8b 45 08             	mov    0x8(%ebp),%eax
   114dc:	8b 55 0c             	mov    0xc(%ebp),%edx
   114df:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   114e3:	89 d0                	mov    %edx,%eax
   114e5:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   114e8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114ec:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114f0:	ee                   	out    %al,(%dx)
}
   114f1:	90                   	nop
   114f2:	c9                   	leave  
   114f3:	c3                   	ret    

000114f4 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   114f4:	55                   	push   %ebp
   114f5:	89 e5                	mov    %esp,%ebp
   114f7:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   114fa:	a1 80 be 02 00       	mov    0x2be80,%eax
   114ff:	83 c0 01             	add    $0x1,%eax
   11502:	a3 80 be 02 00       	mov    %eax,0x2be80

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11507:	83 ec 0c             	sub    $0xc,%esp
   1150a:	6a 20                	push   $0x20
   1150c:	e8 60 ff ff ff       	call   11471 <pic_send_eoi>
   11511:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11514:	e8 7c f3 ff ff       	call   10895 <task_slice_end>
}
   11519:	90                   	nop
   1151a:	c9                   	leave  
   1151b:	c3                   	ret    

0001151c <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1151c:	55                   	push   %ebp
   1151d:	89 e5                	mov    %esp,%ebp
   1151f:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11522:	6a 36                	push   $0x36
   11524:	6a 43                	push   $0x43
   11526:	e8 a8 ff ff ff       	call   114d3 <outb>
   1152b:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   1152e:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11534:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11538:	0f b6 c0             	movzbl %al,%eax
   1153b:	50                   	push   %eax
   1153c:	6a 40                	push   $0x40
   1153e:	e8 90 ff ff ff       	call   114d3 <outb>
   11543:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11546:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1154a:	66 c1 e8 08          	shr    $0x8,%ax
   1154e:	0f b6 c0             	movzbl %al,%eax
   11551:	50                   	push   %eax
   11552:	6a 40                	push   $0x40
   11554:	e8 7a ff ff ff       	call   114d3 <outb>
   11559:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1155c:	83 ec 08             	sub    $0x8,%esp
   1155f:	68 7b 02 01 00       	push   $0x1027b
   11564:	6a 20                	push   $0x20
   11566:	e8 7e fb ff ff       	call   110e9 <idt_install>
   1156b:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1156e:	83 ec 0c             	sub    $0xc,%esp
   11571:	6a 20                	push   $0x20
   11573:	e8 b7 fd ff ff       	call   1132f <idt_enable>
   11578:	83 c4 10             	add    $0x10,%esp

}
   1157b:	90                   	nop
   1157c:	c9                   	leave  
   1157d:	c3                   	ret    

0001157e <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1157e:	55                   	push   %ebp
   1157f:	89 e5                	mov    %esp,%ebp
   11581:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11584:	c7 05 80 be 02 00 00 	movl   $0x0,0x2be80
   1158b:	00 00 00 
    init_pit();
   1158e:	e8 89 ff ff ff       	call   1151c <init_pit>
   11593:	90                   	nop
   11594:	c9                   	leave  
   11595:	c3                   	ret    

00011596 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11596:	55                   	push   %ebp
   11597:	89 e5                	mov    %esp,%ebp
   11599:	fb                   	sti    
   1159a:	90                   	nop
   1159b:	5d                   	pop    %ebp
   1159c:	c3                   	ret    

0001159d <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1159d:	55                   	push   %ebp
   1159e:	89 e5                	mov    %esp,%ebp
   115a0:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   115a3:	8b 45 08             	mov    0x8(%ebp),%eax
   115a6:	8b 40 50             	mov    0x50(%eax),%eax
   115a9:	85 c0                	test   %eax,%eax
   115ab:	75 19                	jne    115c6 <kernel_init+0x29>
   115ad:	68 8c 2d 01 00       	push   $0x12d8c
   115b2:	68 58 2e 01 00       	push   $0x12e58
   115b7:	6a 21                	push   $0x21
   115b9:	68 b0 2d 01 00       	push   $0x12db0
   115be:	e8 9b 08 00 00       	call   11e5e <pannic>
   115c3:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   115c6:	e8 94 11 00 00       	call   1275f <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   115cb:	e8 be f5 ff ff       	call   10b8e <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   115d0:	e8 e7 fb ff ff       	call   111bc <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   115d5:	e8 a4 ff ff ff       	call   1157e <time_init>

    //6.初始化任务管理器
    task_manager_init();
   115da:	e8 52 f0 ff ff       	call   10631 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   115df:	90                   	nop
   115e0:	c9                   	leave  
   115e1:	c3                   	ret    

000115e2 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   115e2:	55                   	push   %ebp
   115e3:	89 e5                	mov    %esp,%ebp
   115e5:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   115e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   115ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115f2:	8d 50 01             	lea    0x1(%eax),%edx
   115f5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115f8:	83 ec 08             	sub    $0x8,%esp
   115fb:	50                   	push   %eax
   115fc:	68 e5 2d 01 00       	push   $0x12de5
   11601:	e8 e1 11 00 00       	call   127e7 <log_printf>
   11606:	83 c4 10             	add    $0x10,%esp
   11609:	eb e4                	jmp    115ef <test_task_1+0xd>

0001160b <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   1160b:	55                   	push   %ebp
   1160c:	89 e5                	mov    %esp,%ebp
   1160e:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11611:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   11618:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1161b:	8d 50 01             	lea    0x1(%eax),%edx
   1161e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11621:	83 ec 08             	sub    $0x8,%esp
   11624:	50                   	push   %eax
   11625:	68 f0 2d 01 00       	push   $0x12df0
   1162a:	e8 b8 11 00 00       	call   127e7 <log_printf>
   1162f:	83 c4 10             	add    $0x10,%esp
   11632:	eb e4                	jmp    11618 <test_task_2+0xd>

00011634 <init_main>:
     }
}



void init_main(void) {
   11634:	55                   	push   %ebp
   11635:	89 e5                	mov    %esp,%ebp
   11637:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   1163a:	83 ec 0c             	sub    $0xc,%esp
   1163d:	68 fb 2d 01 00       	push   $0x12dfb
   11642:	e8 a0 11 00 00       	call   127e7 <log_printf>
   11647:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   1164a:	83 ec 04             	sub    $0x4,%esp
   1164d:	68 13 2e 01 00       	push   $0x12e13
   11652:	68 19 2e 01 00       	push   $0x12e19
   11657:	68 1e 2e 01 00       	push   $0x12e1e
   1165c:	e8 86 11 00 00       	call   127e7 <log_printf>
   11661:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11664:	e8 43 f0 ff ff       	call   106ac <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11669:	ba 20 d0 02 00       	mov    $0x2d020,%edx
   1166e:	b8 e2 15 01 00       	mov    $0x115e2,%eax
   11673:	52                   	push   %edx
   11674:	50                   	push   %eax
   11675:	68 34 2e 01 00       	push   $0x12e34
   1167a:	68 a0 be 02 00       	push   $0x2bea0
   1167f:	e8 bf ee ff ff       	call   10543 <task_init>
   11684:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11687:	ba 20 e0 02 00       	mov    $0x2e020,%edx
   1168c:	b8 0b 16 01 00       	mov    $0x1160b,%eax
   11691:	52                   	push   %edx
   11692:	50                   	push   %eax
   11693:	68 40 2e 01 00       	push   $0x12e40
   11698:	68 60 bf 02 00       	push   $0x2bf60
   1169d:	e8 a1 ee ff ff       	call   10543 <task_init>
   116a2:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   116a5:	e8 ec fe ff ff       	call   11596 <sti>

    int count = 0;
   116aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   116b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116b4:	8d 50 01             	lea    0x1(%eax),%edx
   116b7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   116ba:	83 ec 08             	sub    $0x8,%esp
   116bd:	50                   	push   %eax
   116be:	68 4c 2e 01 00       	push   $0x12e4c
   116c3:	e8 1f 11 00 00       	call   127e7 <log_printf>
   116c8:	83 c4 10             	add    $0x10,%esp
   116cb:	eb e4                	jmp    116b1 <init_main+0x7d>

000116cd <list_init>:
static inline void list_init(list_t *list) {
   116cd:	55                   	push   %ebp
   116ce:	89 e5                	mov    %esp,%ebp
   116d0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   116d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116d7:	75 19                	jne    116f2 <list_init+0x25>
   116d9:	68 64 2e 01 00       	push   $0x12e64
   116de:	68 10 2f 01 00       	push   $0x12f10
   116e3:	6a 31                	push   $0x31
   116e5:	68 78 2e 01 00       	push   $0x12e78
   116ea:	e8 6f 07 00 00       	call   11e5e <pannic>
   116ef:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   116f2:	8b 45 08             	mov    0x8(%ebp),%eax
   116f5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116fc:	8b 45 08             	mov    0x8(%ebp),%eax
   116ff:	8b 50 04             	mov    0x4(%eax),%edx
   11702:	8b 45 08             	mov    0x8(%ebp),%eax
   11705:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11707:	8b 45 08             	mov    0x8(%ebp),%eax
   1170a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11711:	90                   	nop
   11712:	c9                   	leave  
   11713:	c3                   	ret    

00011714 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11714:	55                   	push   %ebp
   11715:	89 e5                	mov    %esp,%ebp
   11717:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1171a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1171e:	75 19                	jne    11739 <list_is_empty+0x25>
   11720:	68 64 2e 01 00       	push   $0x12e64
   11725:	68 1c 2f 01 00       	push   $0x12f1c
   1172a:	6a 38                	push   $0x38
   1172c:	68 78 2e 01 00       	push   $0x12e78
   11731:	e8 28 07 00 00       	call   11e5e <pannic>
   11736:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11739:	8b 45 08             	mov    0x8(%ebp),%eax
   1173c:	8b 40 08             	mov    0x8(%eax),%eax
   1173f:	85 c0                	test   %eax,%eax
   11741:	0f 94 c0             	sete   %al
   11744:	0f b6 c0             	movzbl %al,%eax
}
   11747:	c9                   	leave  
   11748:	c3                   	ret    

00011749 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11749:	55                   	push   %ebp
   1174a:	89 e5                	mov    %esp,%ebp
   1174c:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1174f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11753:	75 19                	jne    1176e <mutex_init+0x25>
   11755:	68 b6 2e 01 00       	push   $0x12eb6
   1175a:	68 04 2f 01 00       	push   $0x12f04
   1175f:	6a 15                	push   $0x15
   11761:	68 cc 2e 01 00       	push   $0x12ecc
   11766:	e8 f3 06 00 00       	call   11e5e <pannic>
   1176b:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   1176e:	8b 45 08             	mov    0x8(%ebp),%eax
   11771:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11778:	8b 45 08             	mov    0x8(%ebp),%eax
   1177b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11781:	8b 45 08             	mov    0x8(%ebp),%eax
   11784:	83 c0 08             	add    $0x8,%eax
   11787:	83 ec 0c             	sub    $0xc,%esp
   1178a:	50                   	push   %eax
   1178b:	e8 3d ff ff ff       	call   116cd <list_init>
   11790:	83 c4 10             	add    $0x10,%esp
}
   11793:	90                   	nop
   11794:	c9                   	leave  
   11795:	c3                   	ret    

00011796 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11796:	55                   	push   %ebp
   11797:	89 e5                	mov    %esp,%ebp
   11799:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1179c:	e8 09 fd ff ff       	call   114aa <idt_enter_protection>
   117a1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   117a4:	e8 19 f0 ff ff       	call   107c2 <task_current>
   117a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   117ac:	8b 45 08             	mov    0x8(%ebp),%eax
   117af:	8b 40 04             	mov    0x4(%eax),%eax
   117b2:	85 c0                	test   %eax,%eax
   117b4:	75 19                	jne    117cf <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   117b6:	8b 45 08             	mov    0x8(%ebp),%eax
   117b9:	8b 40 04             	mov    0x4(%eax),%eax
   117bc:	8d 50 01             	lea    0x1(%eax),%edx
   117bf:	8b 45 08             	mov    0x8(%ebp),%eax
   117c2:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   117c5:	8b 45 08             	mov    0x8(%ebp),%eax
   117c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   117cb:	89 10                	mov    %edx,(%eax)
   117cd:	eb 47                	jmp    11816 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   117cf:	8b 45 08             	mov    0x8(%ebp),%eax
   117d2:	8b 00                	mov    (%eax),%eax
   117d4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   117d7:	75 11                	jne    117ea <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   117d9:	8b 45 08             	mov    0x8(%ebp),%eax
   117dc:	8b 40 04             	mov    0x4(%eax),%eax
   117df:	8d 50 01             	lea    0x1(%eax),%edx
   117e2:	8b 45 08             	mov    0x8(%ebp),%eax
   117e5:	89 50 04             	mov    %edx,0x4(%eax)
   117e8:	eb 2c                	jmp    11816 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   117ea:	83 ec 0c             	sub    $0xc,%esp
   117ed:	ff 75 f0             	push   -0x10(%ebp)
   117f0:	e8 54 ef ff ff       	call   10749 <task_set_unready>
   117f5:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   117f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117fb:	8d 50 40             	lea    0x40(%eax),%edx
   117fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11801:	83 c0 08             	add    $0x8,%eax
   11804:	83 ec 08             	sub    $0x8,%esp
   11807:	52                   	push   %edx
   11808:	50                   	push   %eax
   11809:	e8 55 0c 00 00       	call   12463 <list_insert_last>
   1180e:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11811:	e8 b6 ef ff ff       	call   107cc <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11816:	83 ec 0c             	sub    $0xc,%esp
   11819:	ff 75 f4             	push   -0xc(%ebp)
   1181c:	e8 a1 fc ff ff       	call   114c2 <idt_leave_protection>
   11821:	83 c4 10             	add    $0x10,%esp
}
   11824:	90                   	nop
   11825:	c9                   	leave  
   11826:	c3                   	ret    

00011827 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11827:	55                   	push   %ebp
   11828:	89 e5                	mov    %esp,%ebp
   1182a:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1182d:	e8 78 fc ff ff       	call   114aa <idt_enter_protection>
   11832:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11835:	e8 88 ef ff ff       	call   107c2 <task_current>
   1183a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   1183d:	8b 45 08             	mov    0x8(%ebp),%eax
   11840:	8b 00                	mov    (%eax),%eax
   11842:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11845:	0f 85 83 00 00 00    	jne    118ce <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   1184b:	8b 45 08             	mov    0x8(%ebp),%eax
   1184e:	8b 40 04             	mov    0x4(%eax),%eax
   11851:	8d 50 ff             	lea    -0x1(%eax),%edx
   11854:	8b 45 08             	mov    0x8(%ebp),%eax
   11857:	89 50 04             	mov    %edx,0x4(%eax)
   1185a:	8b 45 08             	mov    0x8(%ebp),%eax
   1185d:	8b 40 04             	mov    0x4(%eax),%eax
   11860:	85 c0                	test   %eax,%eax
   11862:	75 6a                	jne    118ce <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11864:	8b 45 08             	mov    0x8(%ebp),%eax
   11867:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   1186d:	8b 45 08             	mov    0x8(%ebp),%eax
   11870:	83 c0 08             	add    $0x8,%eax
   11873:	83 ec 0c             	sub    $0xc,%esp
   11876:	50                   	push   %eax
   11877:	e8 98 fe ff ff       	call   11714 <list_is_empty>
   1187c:	83 c4 10             	add    $0x10,%esp
   1187f:	85 c0                	test   %eax,%eax
   11881:	75 4b                	jne    118ce <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11883:	8b 45 08             	mov    0x8(%ebp),%eax
   11886:	83 c0 08             	add    $0x8,%eax
   11889:	83 ec 0c             	sub    $0xc,%esp
   1188c:	50                   	push   %eax
   1188d:	e8 60 0c 00 00       	call   124f2 <list_remove_first>
   11892:	83 c4 10             	add    $0x10,%esp
   11895:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11898:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1189c:	74 08                	je     118a6 <mutex_unlock+0x7f>
   1189e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   118a1:	83 e8 40             	sub    $0x40,%eax
   118a4:	eb 05                	jmp    118ab <mutex_unlock+0x84>
   118a6:	b8 00 00 00 00       	mov    $0x0,%eax
   118ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   118ae:	8b 45 08             	mov    0x8(%ebp),%eax
   118b1:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   118b8:	8b 45 08             	mov    0x8(%ebp),%eax
   118bb:	8b 55 e8             	mov    -0x18(%ebp),%edx
   118be:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   118c0:	83 ec 0c             	sub    $0xc,%esp
   118c3:	ff 75 e8             	push   -0x18(%ebp)
   118c6:	e8 33 ee ff ff       	call   106fe <task_set_ready>
   118cb:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   118ce:	83 ec 0c             	sub    $0xc,%esp
   118d1:	ff 75 f4             	push   -0xc(%ebp)
   118d4:	e8 e9 fb ff ff       	call   114c2 <idt_leave_protection>
   118d9:	83 c4 10             	add    $0x10,%esp
}
   118dc:	90                   	nop
   118dd:	c9                   	leave  
   118de:	c3                   	ret    

000118df <list_init>:
static inline void list_init(list_t *list) {
   118df:	55                   	push   %ebp
   118e0:	89 e5                	mov    %esp,%ebp
   118e2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   118e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118e9:	75 19                	jne    11904 <list_init+0x25>
   118eb:	68 2c 2f 01 00       	push   $0x12f2c
   118f0:	68 d0 2f 01 00       	push   $0x12fd0
   118f5:	6a 31                	push   $0x31
   118f7:	68 40 2f 01 00       	push   $0x12f40
   118fc:	e8 5d 05 00 00       	call   11e5e <pannic>
   11901:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11904:	8b 45 08             	mov    0x8(%ebp),%eax
   11907:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1190e:	8b 45 08             	mov    0x8(%ebp),%eax
   11911:	8b 50 04             	mov    0x4(%eax),%edx
   11914:	8b 45 08             	mov    0x8(%ebp),%eax
   11917:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11919:	8b 45 08             	mov    0x8(%ebp),%eax
   1191c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11923:	90                   	nop
   11924:	c9                   	leave  
   11925:	c3                   	ret    

00011926 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11926:	55                   	push   %ebp
   11927:	89 e5                	mov    %esp,%ebp
   11929:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1192c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11930:	75 19                	jne    1194b <list_is_empty+0x25>
   11932:	68 2c 2f 01 00       	push   $0x12f2c
   11937:	68 dc 2f 01 00       	push   $0x12fdc
   1193c:	6a 38                	push   $0x38
   1193e:	68 40 2f 01 00       	push   $0x12f40
   11943:	e8 16 05 00 00       	call   11e5e <pannic>
   11948:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1194b:	8b 45 08             	mov    0x8(%ebp),%eax
   1194e:	8b 40 08             	mov    0x8(%eax),%eax
   11951:	85 c0                	test   %eax,%eax
   11953:	0f 94 c0             	sete   %al
   11956:	0f b6 c0             	movzbl %al,%eax
}
   11959:	c9                   	leave  
   1195a:	c3                   	ret    

0001195b <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   1195b:	55                   	push   %ebp
   1195c:	89 e5                	mov    %esp,%ebp
   1195e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11961:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11965:	75 19                	jne    11980 <sem_init+0x25>
   11967:	68 7e 2f 01 00       	push   $0x12f7e
   1196c:	68 c4 2f 01 00       	push   $0x12fc4
   11971:	6a 18                	push   $0x18
   11973:	68 90 2f 01 00       	push   $0x12f90
   11978:	e8 e1 04 00 00       	call   11e5e <pannic>
   1197d:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11980:	8b 45 08             	mov    0x8(%ebp),%eax
   11983:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11989:	8b 45 08             	mov    0x8(%ebp),%eax
   1198c:	83 c0 04             	add    $0x4,%eax
   1198f:	83 ec 0c             	sub    $0xc,%esp
   11992:	50                   	push   %eax
   11993:	e8 47 ff ff ff       	call   118df <list_init>
   11998:	83 c4 10             	add    $0x10,%esp
}
   1199b:	90                   	nop
   1199c:	c9                   	leave  
   1199d:	c3                   	ret    

0001199e <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
   119a1:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   119a4:	e8 01 fb ff ff       	call   114aa <idt_enter_protection>
   119a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   119ac:	8b 45 08             	mov    0x8(%ebp),%eax
   119af:	8b 00                	mov    (%eax),%eax
   119b1:	85 c0                	test   %eax,%eax
   119b3:	7e 0f                	jle    119c4 <sem_wait+0x26>
        --sem->count;   
   119b5:	8b 45 08             	mov    0x8(%ebp),%eax
   119b8:	8b 00                	mov    (%eax),%eax
   119ba:	8d 50 ff             	lea    -0x1(%eax),%edx
   119bd:	8b 45 08             	mov    0x8(%ebp),%eax
   119c0:	89 10                	mov    %edx,(%eax)
   119c2:	eb 34                	jmp    119f8 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   119c4:	e8 f9 ed ff ff       	call   107c2 <task_current>
   119c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   119cc:	83 ec 0c             	sub    $0xc,%esp
   119cf:	ff 75 f0             	push   -0x10(%ebp)
   119d2:	e8 72 ed ff ff       	call   10749 <task_set_unready>
   119d7:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   119da:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119dd:	8d 50 40             	lea    0x40(%eax),%edx
   119e0:	8b 45 08             	mov    0x8(%ebp),%eax
   119e3:	83 c0 04             	add    $0x4,%eax
   119e6:	83 ec 08             	sub    $0x8,%esp
   119e9:	52                   	push   %edx
   119ea:	50                   	push   %eax
   119eb:	e8 73 0a 00 00       	call   12463 <list_insert_last>
   119f0:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   119f3:	e8 d4 ed ff ff       	call   107cc <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   119f8:	83 ec 0c             	sub    $0xc,%esp
   119fb:	ff 75 f4             	push   -0xc(%ebp)
   119fe:	e8 bf fa ff ff       	call   114c2 <idt_leave_protection>
   11a03:	83 c4 10             	add    $0x10,%esp
}
   11a06:	90                   	nop
   11a07:	c9                   	leave  
   11a08:	c3                   	ret    

00011a09 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11a09:	55                   	push   %ebp
   11a0a:	89 e5                	mov    %esp,%ebp
   11a0c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11a0f:	e8 96 fa ff ff       	call   114aa <idt_enter_protection>
   11a14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11a17:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1a:	83 c0 04             	add    $0x4,%eax
   11a1d:	83 ec 0c             	sub    $0xc,%esp
   11a20:	50                   	push   %eax
   11a21:	e8 00 ff ff ff       	call   11926 <list_is_empty>
   11a26:	83 c4 10             	add    $0x10,%esp
   11a29:	85 c0                	test   %eax,%eax
   11a2b:	75 3b                	jne    11a68 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11a2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a30:	83 c0 04             	add    $0x4,%eax
   11a33:	83 ec 0c             	sub    $0xc,%esp
   11a36:	50                   	push   %eax
   11a37:	e8 b6 0a 00 00       	call   124f2 <list_remove_first>
   11a3c:	83 c4 10             	add    $0x10,%esp
   11a3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11a42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a46:	74 08                	je     11a50 <sem_notify+0x47>
   11a48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a4b:	83 e8 40             	sub    $0x40,%eax
   11a4e:	eb 05                	jmp    11a55 <sem_notify+0x4c>
   11a50:	b8 00 00 00 00       	mov    $0x0,%eax
   11a55:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11a58:	83 ec 0c             	sub    $0xc,%esp
   11a5b:	ff 75 ec             	push   -0x14(%ebp)
   11a5e:	e8 9b ec ff ff       	call   106fe <task_set_ready>
   11a63:	83 c4 10             	add    $0x10,%esp
   11a66:	eb 0d                	jmp    11a75 <sem_notify+0x6c>
    } else {
        sem->count++;
   11a68:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6b:	8b 00                	mov    (%eax),%eax
   11a6d:	8d 50 01             	lea    0x1(%eax),%edx
   11a70:	8b 45 08             	mov    0x8(%ebp),%eax
   11a73:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11a75:	83 ec 0c             	sub    $0xc,%esp
   11a78:	ff 75 f4             	push   -0xc(%ebp)
   11a7b:	e8 42 fa ff ff       	call   114c2 <idt_leave_protection>
   11a80:	83 c4 10             	add    $0x10,%esp

}
   11a83:	90                   	nop
   11a84:	c9                   	leave  
   11a85:	c3                   	ret    

00011a86 <sem_count>:

int sem_count(sem_t *sem) {
   11a86:	55                   	push   %ebp
   11a87:	89 e5                	mov    %esp,%ebp
   11a89:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11a8c:	e8 19 fa ff ff       	call   114aa <idt_enter_protection>
   11a91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11a94:	8b 45 08             	mov    0x8(%ebp),%eax
   11a97:	8b 00                	mov    (%eax),%eax
   11a99:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11a9c:	83 ec 0c             	sub    $0xc,%esp
   11a9f:	ff 75 f4             	push   -0xc(%ebp)
   11aa2:	e8 1b fa ff ff       	call   114c2 <idt_leave_protection>
   11aa7:	83 c4 10             	add    $0x10,%esp

    return count;
   11aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aad:	c9                   	leave  
   11aae:	c3                   	ret    

00011aaf <list_init>:
static inline void list_init(list_t *list) {
   11aaf:	55                   	push   %ebp
   11ab0:	89 e5                	mov    %esp,%ebp
   11ab2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ab5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ab9:	75 19                	jne    11ad4 <list_init+0x25>
   11abb:	68 ec 2f 01 00       	push   $0x12fec
   11ac0:	68 f0 30 01 00       	push   $0x130f0
   11ac5:	6a 31                	push   $0x31
   11ac7:	68 00 30 01 00       	push   $0x13000
   11acc:	e8 8d 03 00 00       	call   11e5e <pannic>
   11ad1:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ade:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae1:	8b 50 04             	mov    0x4(%eax),%edx
   11ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae7:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   11aec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11af3:	90                   	nop
   11af4:	c9                   	leave  
   11af5:	c3                   	ret    

00011af6 <list_get_size>:
static inline int list_get_size(list_t *list) {
   11af6:	55                   	push   %ebp
   11af7:	89 e5                	mov    %esp,%ebp
   11af9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11afc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b00:	75 19                	jne    11b1b <list_get_size+0x25>
   11b02:	68 ec 2f 01 00       	push   $0x12fec
   11b07:	68 fc 30 01 00       	push   $0x130fc
   11b0c:	6a 3e                	push   $0x3e
   11b0e:	68 00 30 01 00       	push   $0x13000
   11b13:	e8 46 03 00 00       	call   11e5e <pannic>
   11b18:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11b1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11b21:	c9                   	leave  
   11b22:	c3                   	ret    

00011b23 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11b23:	55                   	push   %ebp
   11b24:	89 e5                	mov    %esp,%ebp
   11b26:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b2d:	75 19                	jne    11b48 <list_get_first+0x25>
   11b2f:	68 ec 2f 01 00       	push   $0x12fec
   11b34:	68 1c 31 01 00       	push   $0x1311c
   11b39:	6a 44                	push   $0x44
   11b3b:	68 00 30 01 00       	push   $0x13000
   11b40:	e8 19 03 00 00       	call   11e5e <pannic>
   11b45:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11b48:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4b:	8b 00                	mov    (%eax),%eax
}
   11b4d:	c9                   	leave  
   11b4e:	c3                   	ret    

00011b4f <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11b4f:	55                   	push   %ebp
   11b50:	89 e5                	mov    %esp,%ebp
   11b52:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11b55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b59:	75 19                	jne    11b74 <list_get_last+0x25>
   11b5b:	68 ec 2f 01 00       	push   $0x12fec
   11b60:	68 0c 31 01 00       	push   $0x1310c
   11b65:	6a 4a                	push   $0x4a
   11b67:	68 00 30 01 00       	push   $0x13000
   11b6c:	e8 ed 02 00 00       	call   11e5e <pannic>
   11b71:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11b74:	8b 45 08             	mov    0x8(%ebp),%eax
   11b77:	8b 40 04             	mov    0x4(%eax),%eax
}
   11b7a:	c9                   	leave  
   11b7b:	c3                   	ret    

00011b7c <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11b7c:	55                   	push   %ebp
   11b7d:	89 e5                	mov    %esp,%ebp
   11b7f:	56                   	push   %esi
   11b80:	53                   	push   %ebx
   11b81:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11b84:	83 ec 0c             	sub    $0xc,%esp
   11b87:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b8a:	50                   	push   %eax
   11b8b:	e8 1f ff ff ff       	call   11aaf <list_init>
   11b90:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11b93:	83 ec 0c             	sub    $0xc,%esp
   11b96:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b99:	50                   	push   %eax
   11b9a:	e8 57 ff ff ff       	call   11af6 <list_get_size>
   11b9f:	83 c4 10             	add    $0x10,%esp
   11ba2:	89 c6                	mov    %eax,%esi
   11ba4:	83 ec 0c             	sub    $0xc,%esp
   11ba7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11baa:	50                   	push   %eax
   11bab:	e8 9f ff ff ff       	call   11b4f <list_get_last>
   11bb0:	83 c4 10             	add    $0x10,%esp
   11bb3:	89 c3                	mov    %eax,%ebx
   11bb5:	83 ec 0c             	sub    $0xc,%esp
   11bb8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11bbb:	50                   	push   %eax
   11bbc:	e8 62 ff ff ff       	call   11b23 <list_get_first>
   11bc1:	83 c4 10             	add    $0x10,%esp
   11bc4:	56                   	push   %esi
   11bc5:	53                   	push   %ebx
   11bc6:	50                   	push   %eax
   11bc7:	68 40 30 01 00       	push   $0x13040
   11bcc:	e8 16 0c 00 00       	call   127e7 <log_printf>
   11bd1:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11bd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11bdb:	eb 3f                	jmp    11c1c <list_test+0xa0>
        list_node_t *node = nodes + i;
   11bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11be0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11be7:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11bea:	01 d0                	add    %edx,%eax
   11bec:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11bef:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11bf2:	83 ec 04             	sub    $0x4,%esp
   11bf5:	50                   	push   %eax
   11bf6:	ff 75 f4             	push   -0xc(%ebp)
   11bf9:	68 68 30 01 00       	push   $0x13068
   11bfe:	e8 e4 0b 00 00       	call   127e7 <log_printf>
   11c03:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11c06:	83 ec 08             	sub    $0x8,%esp
   11c09:	ff 75 d0             	push   -0x30(%ebp)
   11c0c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c0f:	50                   	push   %eax
   11c10:	e8 c3 07 00 00       	call   123d8 <list_insert_first>
   11c15:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11c18:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c1c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11c20:	7e bb                	jle    11bdd <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11c22:	83 ec 0c             	sub    $0xc,%esp
   11c25:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c28:	50                   	push   %eax
   11c29:	e8 c8 fe ff ff       	call   11af6 <list_get_size>
   11c2e:	83 c4 10             	add    $0x10,%esp
   11c31:	89 c6                	mov    %eax,%esi
   11c33:	83 ec 0c             	sub    $0xc,%esp
   11c36:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c39:	50                   	push   %eax
   11c3a:	e8 10 ff ff ff       	call   11b4f <list_get_last>
   11c3f:	83 c4 10             	add    $0x10,%esp
   11c42:	89 c3                	mov    %eax,%ebx
   11c44:	83 ec 0c             	sub    $0xc,%esp
   11c47:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c4a:	50                   	push   %eax
   11c4b:	e8 d3 fe ff ff       	call   11b23 <list_get_first>
   11c50:	83 c4 10             	add    $0x10,%esp
   11c53:	56                   	push   %esi
   11c54:	53                   	push   %ebx
   11c55:	50                   	push   %eax
   11c56:	68 40 30 01 00       	push   $0x13040
   11c5b:	e8 87 0b 00 00       	call   127e7 <log_printf>
   11c60:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11c63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11c6a:	eb 2d                	jmp    11c99 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11c6c:	83 ec 0c             	sub    $0xc,%esp
   11c6f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c72:	50                   	push   %eax
   11c73:	e8 7a 08 00 00       	call   124f2 <list_remove_first>
   11c78:	83 c4 10             	add    $0x10,%esp
   11c7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11c7e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11c81:	83 ec 04             	sub    $0x4,%esp
   11c84:	50                   	push   %eax
   11c85:	ff 75 f0             	push   -0x10(%ebp)
   11c88:	68 87 30 01 00       	push   $0x13087
   11c8d:	e8 55 0b 00 00       	call   127e7 <log_printf>
   11c92:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11c95:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c99:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11c9d:	7e cd                	jle    11c6c <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11c9f:	83 ec 0c             	sub    $0xc,%esp
   11ca2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ca5:	50                   	push   %eax
   11ca6:	e8 4b fe ff ff       	call   11af6 <list_get_size>
   11cab:	83 c4 10             	add    $0x10,%esp
   11cae:	89 c6                	mov    %eax,%esi
   11cb0:	83 ec 0c             	sub    $0xc,%esp
   11cb3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11cb6:	50                   	push   %eax
   11cb7:	e8 93 fe ff ff       	call   11b4f <list_get_last>
   11cbc:	83 c4 10             	add    $0x10,%esp
   11cbf:	89 c3                	mov    %eax,%ebx
   11cc1:	83 ec 0c             	sub    $0xc,%esp
   11cc4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11cc7:	50                   	push   %eax
   11cc8:	e8 56 fe ff ff       	call   11b23 <list_get_first>
   11ccd:	83 c4 10             	add    $0x10,%esp
   11cd0:	56                   	push   %esi
   11cd1:	53                   	push   %ebx
   11cd2:	50                   	push   %eax
   11cd3:	68 40 30 01 00       	push   $0x13040
   11cd8:	e8 0a 0b 00 00       	call   127e7 <log_printf>
   11cdd:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11ce0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11ce7:	eb 3f                	jmp    11d28 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11ce9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11cf3:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11cf6:	01 d0                	add    %edx,%eax
   11cf8:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11cfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11cfe:	83 ec 04             	sub    $0x4,%esp
   11d01:	50                   	push   %eax
   11d02:	ff 75 ec             	push   -0x14(%ebp)
   11d05:	68 9e 30 01 00       	push   $0x1309e
   11d0a:	e8 d8 0a 00 00       	call   127e7 <log_printf>
   11d0f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11d12:	83 ec 08             	sub    $0x8,%esp
   11d15:	ff 75 d8             	push   -0x28(%ebp)
   11d18:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d1b:	50                   	push   %eax
   11d1c:	e8 42 07 00 00       	call   12463 <list_insert_last>
   11d21:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11d24:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11d28:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11d2c:	7e bb                	jle    11ce9 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11d2e:	83 ec 0c             	sub    $0xc,%esp
   11d31:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d34:	50                   	push   %eax
   11d35:	e8 bc fd ff ff       	call   11af6 <list_get_size>
   11d3a:	83 c4 10             	add    $0x10,%esp
   11d3d:	89 c6                	mov    %eax,%esi
   11d3f:	83 ec 0c             	sub    $0xc,%esp
   11d42:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d45:	50                   	push   %eax
   11d46:	e8 04 fe ff ff       	call   11b4f <list_get_last>
   11d4b:	83 c4 10             	add    $0x10,%esp
   11d4e:	89 c3                	mov    %eax,%ebx
   11d50:	83 ec 0c             	sub    $0xc,%esp
   11d53:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d56:	50                   	push   %eax
   11d57:	e8 c7 fd ff ff       	call   11b23 <list_get_first>
   11d5c:	83 c4 10             	add    $0x10,%esp
   11d5f:	56                   	push   %esi
   11d60:	53                   	push   %ebx
   11d61:	50                   	push   %eax
   11d62:	68 40 30 01 00       	push   $0x13040
   11d67:	e8 7b 0a 00 00       	call   127e7 <log_printf>
   11d6c:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11d6f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11d76:	eb 2d                	jmp    11da5 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   11d78:	83 ec 0c             	sub    $0xc,%esp
   11d7b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d7e:	50                   	push   %eax
   11d7f:	e8 1f 08 00 00       	call   125a3 <list_remove_last>
   11d84:	83 c4 10             	add    $0x10,%esp
   11d87:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   11d8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11d8d:	83 ec 04             	sub    $0x4,%esp
   11d90:	50                   	push   %eax
   11d91:	ff 75 e8             	push   -0x18(%ebp)
   11d94:	68 bc 30 01 00       	push   $0x130bc
   11d99:	e8 49 0a 00 00       	call   127e7 <log_printf>
   11d9e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11da1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11da5:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11da9:	7e cd                	jle    11d78 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11dab:	83 ec 0c             	sub    $0xc,%esp
   11dae:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11db1:	50                   	push   %eax
   11db2:	e8 3f fd ff ff       	call   11af6 <list_get_size>
   11db7:	83 c4 10             	add    $0x10,%esp
   11dba:	89 c6                	mov    %eax,%esi
   11dbc:	83 ec 0c             	sub    $0xc,%esp
   11dbf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11dc2:	50                   	push   %eax
   11dc3:	e8 87 fd ff ff       	call   11b4f <list_get_last>
   11dc8:	83 c4 10             	add    $0x10,%esp
   11dcb:	89 c3                	mov    %eax,%ebx
   11dcd:	83 ec 0c             	sub    $0xc,%esp
   11dd0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11dd3:	50                   	push   %eax
   11dd4:	e8 4a fd ff ff       	call   11b23 <list_get_first>
   11dd9:	83 c4 10             	add    $0x10,%esp
   11ddc:	56                   	push   %esi
   11ddd:	53                   	push   %ebx
   11dde:	50                   	push   %eax
   11ddf:	68 40 30 01 00       	push   $0x13040
   11de4:	e8 fe 09 00 00       	call   127e7 <log_printf>
   11de9:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   11dec:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   11df3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   11dfa:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   11e01:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   11e08:	8d 45 90             	lea    -0x70(%ebp),%eax
   11e0b:	83 c0 04             	add    $0x4,%eax
   11e0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   11e11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11e15:	74 08                	je     11e1f <list_test+0x2a3>
   11e17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e1a:	83 e8 04             	sub    $0x4,%eax
   11e1d:	eb 05                	jmp    11e24 <list_test+0x2a8>
   11e1f:	b8 00 00 00 00       	mov    $0x0,%eax
   11e24:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   11e27:	8d 45 90             	lea    -0x70(%ebp),%eax
   11e2a:	83 ec 08             	sub    $0x8,%esp
   11e2d:	50                   	push   %eax
   11e2e:	68 d2 30 01 00       	push   $0x130d2
   11e33:	e8 af 09 00 00       	call   127e7 <log_printf>
   11e38:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   11e3b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11e3e:	83 ec 08             	sub    $0x8,%esp
   11e41:	50                   	push   %eax
   11e42:	68 e0 30 01 00       	push   $0x130e0
   11e47:	e8 9b 09 00 00       	call   127e7 <log_printf>
   11e4c:	83 c4 10             	add    $0x10,%esp

 }
   11e4f:	90                   	nop
   11e50:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11e53:	5b                   	pop    %ebx
   11e54:	5e                   	pop    %esi
   11e55:	5d                   	pop    %ebp
   11e56:	c3                   	ret    

00011e57 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11e57:	55                   	push   %ebp
   11e58:	89 e5                	mov    %esp,%ebp
   11e5a:	f4                   	hlt    
   11e5b:	90                   	nop
   11e5c:	5d                   	pop    %ebp
   11e5d:	c3                   	ret    

00011e5e <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   11e5e:	55                   	push   %ebp
   11e5f:	89 e5                	mov    %esp,%ebp
   11e61:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   11e64:	83 ec 08             	sub    $0x8,%esp
   11e67:	ff 75 14             	push   0x14(%ebp)
   11e6a:	68 2b 31 01 00       	push   $0x1312b
   11e6f:	e8 73 09 00 00       	call   127e7 <log_printf>
   11e74:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   11e77:	ff 75 10             	push   0x10(%ebp)
   11e7a:	ff 75 0c             	push   0xc(%ebp)
   11e7d:	ff 75 08             	push   0x8(%ebp)
   11e80:	68 3c 31 01 00       	push   $0x1313c
   11e85:	e8 5d 09 00 00       	call   127e7 <log_printf>
   11e8a:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11e8d:	e8 c5 ff ff ff       	call   11e57 <hlt>
   11e92:	eb f9                	jmp    11e8d <pannic+0x2f>

00011e94 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   11e94:	55                   	push   %ebp
   11e95:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   11e97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e9b:	74 3b                	je     11ed8 <kernel_strcpy+0x44>
   11e9d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11ea1:	74 35                	je     11ed8 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   11ea3:	eb 17                	jmp    11ebc <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   11ea5:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ea8:	8d 42 01             	lea    0x1(%edx),%eax
   11eab:	89 45 0c             	mov    %eax,0xc(%ebp)
   11eae:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb1:	8d 48 01             	lea    0x1(%eax),%ecx
   11eb4:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11eb7:	0f b6 12             	movzbl (%edx),%edx
   11eba:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11ebc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ebf:	0f b6 00             	movzbl (%eax),%eax
   11ec2:	84 c0                	test   %al,%al
   11ec4:	74 0a                	je     11ed0 <kernel_strcpy+0x3c>
   11ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec9:	0f b6 00             	movzbl (%eax),%eax
   11ecc:	84 c0                	test   %al,%al
   11ece:	75 d5                	jne    11ea5 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   11ed0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed3:	c6 00 00             	movb   $0x0,(%eax)
   11ed6:	eb 01                	jmp    11ed9 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   11ed8:	90                   	nop
    
}
   11ed9:	5d                   	pop    %ebp
   11eda:	c3                   	ret    

00011edb <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   11edb:	55                   	push   %ebp
   11edc:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   11ede:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ee2:	74 45                	je     11f29 <kernel_strncpy+0x4e>
   11ee4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11ee8:	74 3f                	je     11f29 <kernel_strncpy+0x4e>
   11eea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11eee:	74 39                	je     11f29 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   11ef0:	eb 17                	jmp    11f09 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   11ef2:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ef5:	8d 42 01             	lea    0x1(%edx),%eax
   11ef8:	89 45 0c             	mov    %eax,0xc(%ebp)
   11efb:	8b 45 08             	mov    0x8(%ebp),%eax
   11efe:	8d 48 01             	lea    0x1(%eax),%ecx
   11f01:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11f04:	0f b6 12             	movzbl (%edx),%edx
   11f07:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   11f09:	8b 45 10             	mov    0x10(%ebp),%eax
   11f0c:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f0f:	89 55 10             	mov    %edx,0x10(%ebp)
   11f12:	83 f8 01             	cmp    $0x1,%eax
   11f15:	7e 0a                	jle    11f21 <kernel_strncpy+0x46>
   11f17:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f1a:	0f b6 00             	movzbl (%eax),%eax
   11f1d:	84 c0                	test   %al,%al
   11f1f:	75 d1                	jne    11ef2 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   11f21:	8b 45 08             	mov    0x8(%ebp),%eax
   11f24:	c6 00 00             	movb   $0x0,(%eax)
   11f27:	eb 01                	jmp    11f2a <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11f29:	90                   	nop
}
   11f2a:	5d                   	pop    %ebp
   11f2b:	c3                   	ret    

00011f2c <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   11f2c:	55                   	push   %ebp
   11f2d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   11f2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f33:	74 06                	je     11f3b <kernel_strncmp+0xf>
   11f35:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f39:	75 0f                	jne    11f4a <kernel_strncmp+0x1e>
   11f3b:	b8 00 00 00 00       	mov    $0x0,%eax
   11f40:	eb 52                	jmp    11f94 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   11f42:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11f46:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11f4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f4d:	0f b6 00             	movzbl (%eax),%eax
   11f50:	84 c0                	test   %al,%al
   11f52:	74 24                	je     11f78 <kernel_strncmp+0x4c>
   11f54:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f57:	0f b6 00             	movzbl (%eax),%eax
   11f5a:	84 c0                	test   %al,%al
   11f5c:	74 1a                	je     11f78 <kernel_strncmp+0x4c>
   11f5e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11f62:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11f66:	74 10                	je     11f78 <kernel_strncmp+0x4c>
   11f68:	8b 45 08             	mov    0x8(%ebp),%eax
   11f6b:	0f b6 10             	movzbl (%eax),%edx
   11f6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f71:	0f b6 00             	movzbl (%eax),%eax
   11f74:	38 c2                	cmp    %al,%dl
   11f76:	74 ca                	je     11f42 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11f78:	8b 45 08             	mov    0x8(%ebp),%eax
   11f7b:	0f b6 10             	movzbl (%eax),%edx
   11f7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f81:	0f b6 00             	movzbl (%eax),%eax
   11f84:	38 c2                	cmp    %al,%dl
   11f86:	7e 07                	jle    11f8f <kernel_strncmp+0x63>
   11f88:	b8 01 00 00 00       	mov    $0x1,%eax
   11f8d:	eb 05                	jmp    11f94 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   11f8f:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   11f94:	5d                   	pop    %ebp
   11f95:	c3                   	ret    

00011f96 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11f96:	55                   	push   %ebp
   11f97:	89 e5                	mov    %esp,%ebp
   11f99:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   11f9c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fa0:	75 07                	jne    11fa9 <kernel_strlen+0x13>
   11fa2:	b8 00 00 00 00       	mov    $0x0,%eax
   11fa7:	eb 20                	jmp    11fc9 <kernel_strlen+0x33>

    int len = 0;
   11fa9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   11fb0:	eb 04                	jmp    11fb6 <kernel_strlen+0x20>
   11fb2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11fb6:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb9:	8d 50 01             	lea    0x1(%eax),%edx
   11fbc:	89 55 08             	mov    %edx,0x8(%ebp)
   11fbf:	0f b6 00             	movzbl (%eax),%eax
   11fc2:	84 c0                	test   %al,%al
   11fc4:	75 ec                	jne    11fb2 <kernel_strlen+0x1c>

    return len;
   11fc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   11fc9:	c9                   	leave  
   11fca:	c3                   	ret    

00011fcb <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   11fcb:	55                   	push   %ebp
   11fcc:	89 e5                	mov    %esp,%ebp
   11fce:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   11fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fd5:	74 40                	je     12017 <kernel_memcpy+0x4c>
   11fd7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11fdb:	74 3a                	je     12017 <kernel_memcpy+0x4c>
   11fdd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11fe1:	74 34                	je     12017 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   11fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   11fe9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fec:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   11fef:	eb 17                	jmp    12008 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   11ff1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11ff4:	8d 42 01             	lea    0x1(%edx),%eax
   11ff7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11ffa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ffd:	8d 48 01             	lea    0x1(%eax),%ecx
   12000:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12003:	0f b6 12             	movzbl (%edx),%edx
   12006:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12008:	8b 45 10             	mov    0x10(%ebp),%eax
   1200b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1200e:	89 55 10             	mov    %edx,0x10(%ebp)
   12011:	85 c0                	test   %eax,%eax
   12013:	75 dc                	jne    11ff1 <kernel_memcpy+0x26>
   12015:	eb 01                	jmp    12018 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12017:	90                   	nop
    }
    
}
   12018:	c9                   	leave  
   12019:	c3                   	ret    

0001201a <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1201a:	55                   	push   %ebp
   1201b:	89 e5                	mov    %esp,%ebp
   1201d:	83 ec 14             	sub    $0x14,%esp
   12020:	8b 45 0c             	mov    0xc(%ebp),%eax
   12023:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12026:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1202a:	74 2c                	je     12058 <kernel_memset+0x3e>
   1202c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12030:	74 26                	je     12058 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12032:	8b 45 08             	mov    0x8(%ebp),%eax
   12035:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12038:	eb 0f                	jmp    12049 <kernel_memset+0x2f>
        *(d++) = v;
   1203a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1203d:	8d 50 01             	lea    0x1(%eax),%edx
   12040:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12043:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12047:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12049:	8b 45 10             	mov    0x10(%ebp),%eax
   1204c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1204f:	89 55 10             	mov    %edx,0x10(%ebp)
   12052:	85 c0                	test   %eax,%eax
   12054:	75 e4                	jne    1203a <kernel_memset+0x20>
   12056:	eb 01                	jmp    12059 <kernel_memset+0x3f>
    if (!dest || !size) return;
   12058:	90                   	nop
    }
    
}
   12059:	c9                   	leave  
   1205a:	c3                   	ret    

0001205b <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1205b:	55                   	push   %ebp
   1205c:	89 e5                	mov    %esp,%ebp
   1205e:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12061:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12065:	74 0c                	je     12073 <kernel_memcmp+0x18>
   12067:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1206b:	74 06                	je     12073 <kernel_memcmp+0x18>
   1206d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12071:	75 07                	jne    1207a <kernel_memcmp+0x1f>
   12073:	b8 00 00 00 00       	mov    $0x0,%eax
   12078:	eb 63                	jmp    120dd <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1207a:	8b 45 08             	mov    0x8(%ebp),%eax
   1207d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12080:	8b 45 0c             	mov    0xc(%ebp),%eax
   12083:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12086:	eb 08                	jmp    12090 <kernel_memcmp+0x35>
        d1++;
   12088:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   1208c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12090:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12094:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12098:	74 10                	je     120aa <kernel_memcmp+0x4f>
   1209a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1209d:	0f b6 10             	movzbl (%eax),%edx
   120a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   120a3:	0f b6 00             	movzbl (%eax),%eax
   120a6:	38 c2                	cmp    %al,%dl
   120a8:	74 de                	je     12088 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   120aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120ad:	0f b6 10             	movzbl (%eax),%edx
   120b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   120b3:	0f b6 00             	movzbl (%eax),%eax
   120b6:	38 c2                	cmp    %al,%dl
   120b8:	76 07                	jbe    120c1 <kernel_memcmp+0x66>
   120ba:	b8 01 00 00 00       	mov    $0x1,%eax
   120bf:	eb 1c                	jmp    120dd <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   120c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120c4:	0f b6 10             	movzbl (%eax),%edx
   120c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   120ca:	0f b6 00             	movzbl (%eax),%eax
   120cd:	38 c2                	cmp    %al,%dl
   120cf:	73 07                	jae    120d8 <kernel_memcmp+0x7d>
   120d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   120d6:	eb 05                	jmp    120dd <kernel_memcmp+0x82>
    else return 0;
   120d8:	b8 00 00 00 00       	mov    $0x0,%eax

}
   120dd:	c9                   	leave  
   120de:	c3                   	ret    

000120df <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   120df:	55                   	push   %ebp
   120e0:	89 e5                	mov    %esp,%ebp
   120e2:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   120e5:	8d 45 10             	lea    0x10(%ebp),%eax
   120e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   120eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120ee:	83 ec 04             	sub    $0x4,%esp
   120f1:	50                   	push   %eax
   120f2:	ff 75 0c             	push   0xc(%ebp)
   120f5:	ff 75 08             	push   0x8(%ebp)
   120f8:	e8 06 00 00 00       	call   12103 <kernel_vsprintf>
   120fd:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12100:	90                   	nop
   12101:	c9                   	leave  
   12102:	c3                   	ret    

00012103 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12103:	55                   	push   %ebp
   12104:	89 e5                	mov    %esp,%ebp
   12106:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12109:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12110:	8b 45 08             	mov    0x8(%ebp),%eax
   12113:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12116:	e9 68 01 00 00       	jmp    12283 <kernel_vsprintf+0x180>
        switch (state) {
   1211b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1211f:	74 0b                	je     1212c <kernel_vsprintf+0x29>
   12121:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12125:	74 2b                	je     12152 <kernel_vsprintf+0x4f>
   12127:	e9 56 01 00 00       	jmp    12282 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1212c:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12130:	75 0c                	jne    1213e <kernel_vsprintf+0x3b>
   12132:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12139:	e9 45 01 00 00       	jmp    12283 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   1213e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12141:	8d 50 01             	lea    0x1(%eax),%edx
   12144:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12147:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1214b:	88 10                	mov    %dl,(%eax)
            break;
   1214d:	e9 31 01 00 00       	jmp    12283 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12152:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12156:	75 47                	jne    1219f <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12158:	8b 45 10             	mov    0x10(%ebp),%eax
   1215b:	8d 50 04             	lea    0x4(%eax),%edx
   1215e:	89 55 10             	mov    %edx,0x10(%ebp)
   12161:	8b 00                	mov    (%eax),%eax
   12163:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12166:	ff 75 ec             	push   -0x14(%ebp)
   12169:	e8 28 fe ff ff       	call   11f96 <kernel_strlen>
   1216e:	83 c4 04             	add    $0x4,%esp
   12171:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12174:	eb 17                	jmp    1218d <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12176:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12179:	8d 42 01             	lea    0x1(%edx),%eax
   1217c:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1217f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12182:	8d 48 01             	lea    0x1(%eax),%ecx
   12185:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12188:	0f b6 12             	movzbl (%edx),%edx
   1218b:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1218d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12190:	8d 50 ff             	lea    -0x1(%eax),%edx
   12193:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12196:	85 c0                	test   %eax,%eax
   12198:	75 dc                	jne    12176 <kernel_vsprintf+0x73>
   1219a:	e9 da 00 00 00       	jmp    12279 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   1219f:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   121a3:	75 37                	jne    121dc <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   121a5:	8b 45 10             	mov    0x10(%ebp),%eax
   121a8:	8d 50 04             	lea    0x4(%eax),%edx
   121ab:	89 55 10             	mov    %edx,0x10(%ebp)
   121ae:	8b 00                	mov    (%eax),%eax
   121b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   121b3:	83 ec 04             	sub    $0x4,%esp
   121b6:	6a 0a                	push   $0xa
   121b8:	ff 75 d8             	push   -0x28(%ebp)
   121bb:	ff 75 f0             	push   -0x10(%ebp)
   121be:	e8 dd 00 00 00       	call   122a0 <kernel_itoa>
   121c3:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   121c6:	83 ec 0c             	sub    $0xc,%esp
   121c9:	ff 75 f0             	push   -0x10(%ebp)
   121cc:	e8 c5 fd ff ff       	call   11f96 <kernel_strlen>
   121d1:	83 c4 10             	add    $0x10,%esp
   121d4:	01 45 f0             	add    %eax,-0x10(%ebp)
   121d7:	e9 9d 00 00 00       	jmp    12279 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   121dc:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   121e0:	74 06                	je     121e8 <kernel_vsprintf+0xe5>
   121e2:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   121e6:	75 34                	jne    1221c <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   121e8:	8b 45 10             	mov    0x10(%ebp),%eax
   121eb:	8d 50 04             	lea    0x4(%eax),%edx
   121ee:	89 55 10             	mov    %edx,0x10(%ebp)
   121f1:	8b 00                	mov    (%eax),%eax
   121f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   121f6:	83 ec 04             	sub    $0x4,%esp
   121f9:	6a 10                	push   $0x10
   121fb:	ff 75 dc             	push   -0x24(%ebp)
   121fe:	ff 75 f0             	push   -0x10(%ebp)
   12201:	e8 9a 00 00 00       	call   122a0 <kernel_itoa>
   12206:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12209:	83 ec 0c             	sub    $0xc,%esp
   1220c:	ff 75 f0             	push   -0x10(%ebp)
   1220f:	e8 82 fd ff ff       	call   11f96 <kernel_strlen>
   12214:	83 c4 10             	add    $0x10,%esp
   12217:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   1221a:	eb 5d                	jmp    12279 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1221c:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12220:	75 34                	jne    12256 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12222:	8b 45 10             	mov    0x10(%ebp),%eax
   12225:	8d 50 04             	lea    0x4(%eax),%edx
   12228:	89 55 10             	mov    %edx,0x10(%ebp)
   1222b:	8b 00                	mov    (%eax),%eax
   1222d:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12230:	83 ec 04             	sub    $0x4,%esp
   12233:	6a 02                	push   $0x2
   12235:	ff 75 e0             	push   -0x20(%ebp)
   12238:	ff 75 f0             	push   -0x10(%ebp)
   1223b:	e8 60 00 00 00       	call   122a0 <kernel_itoa>
   12240:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12243:	83 ec 0c             	sub    $0xc,%esp
   12246:	ff 75 f0             	push   -0x10(%ebp)
   12249:	e8 48 fd ff ff       	call   11f96 <kernel_strlen>
   1224e:	83 c4 10             	add    $0x10,%esp
   12251:	01 45 f0             	add    %eax,-0x10(%ebp)
   12254:	eb 23                	jmp    12279 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12256:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1225a:	75 1d                	jne    12279 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1225c:	8b 45 10             	mov    0x10(%ebp),%eax
   1225f:	8d 50 04             	lea    0x4(%eax),%edx
   12262:	89 55 10             	mov    %edx,0x10(%ebp)
   12265:	8b 00                	mov    (%eax),%eax
   12267:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   1226a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1226d:	8d 50 01             	lea    0x1(%eax),%edx
   12270:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12273:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12277:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12279:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12280:	eb 01                	jmp    12283 <kernel_vsprintf+0x180>
        default:
            break;
   12282:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12283:	8b 45 0c             	mov    0xc(%ebp),%eax
   12286:	8d 50 01             	lea    0x1(%eax),%edx
   12289:	89 55 0c             	mov    %edx,0xc(%ebp)
   1228c:	0f b6 00             	movzbl (%eax),%eax
   1228f:	88 45 e7             	mov    %al,-0x19(%ebp)
   12292:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12296:	0f 85 7f fe ff ff    	jne    1211b <kernel_vsprintf+0x18>
        }
    }
    

}
   1229c:	90                   	nop
   1229d:	90                   	nop
   1229e:	c9                   	leave  
   1229f:	c3                   	ret    

000122a0 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   122a0:	55                   	push   %ebp
   122a1:	89 e5                	mov    %esp,%ebp
   122a3:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   122a9:	8b 45 08             	mov    0x8(%ebp),%eax
   122ac:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   122af:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   122b3:	74 1d                	je     122d2 <kernel_itoa+0x32>
   122b5:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   122b9:	74 17                	je     122d2 <kernel_itoa+0x32>
   122bb:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   122bf:	74 11                	je     122d2 <kernel_itoa+0x32>
   122c1:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   122c5:	74 0b                	je     122d2 <kernel_itoa+0x32>
        *buf = '\0';
   122c7:	8b 45 08             	mov    0x8(%ebp),%eax
   122ca:	c6 00 00             	movb   $0x0,(%eax)
        return;
   122cd:	e9 a2 00 00 00       	jmp    12374 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   122d2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122d6:	79 11                	jns    122e9 <kernel_itoa+0x49>
        *(p++) = '-';
   122d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122db:	8d 50 01             	lea    0x1(%eax),%edx
   122de:	89 55 fc             	mov    %edx,-0x4(%ebp)
   122e1:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   122e4:	f7 5d 0c             	negl   0xc(%ebp)
   122e7:	eb 1a                	jmp    12303 <kernel_itoa+0x63>
    } else if (num == 0) {
   122e9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122ed:	75 14                	jne    12303 <kernel_itoa+0x63>
        *(p++) = '0';
   122ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122f2:	8d 50 01             	lea    0x1(%eax),%edx
   122f5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   122f8:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   122fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122fe:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12301:	eb 71                	jmp    12374 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12303:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   1230a:	eb 2e                	jmp    1233a <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   1230c:	8b 0d b4 32 01 00    	mov    0x132b4,%ecx
   12312:	8b 45 0c             	mov    0xc(%ebp),%eax
   12315:	99                   	cltd   
   12316:	f7 7d 10             	idivl  0x10(%ebp)
   12319:	89 d0                	mov    %edx,%eax
   1231b:	01 c1                	add    %eax,%ecx
   1231d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12320:	8d 50 01             	lea    0x1(%eax),%edx
   12323:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12326:	0f b6 11             	movzbl (%ecx),%edx
   12329:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12330:	8b 45 0c             	mov    0xc(%ebp),%eax
   12333:	99                   	cltd   
   12334:	f7 7d 10             	idivl  0x10(%ebp)
   12337:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1233a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1233e:	7f cc                	jg     1230c <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12340:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12343:	83 e8 01             	sub    $0x1,%eax
   12346:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12349:	eb 1d                	jmp    12368 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1234b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1234e:	8d 50 01             	lea    0x1(%eax),%edx
   12351:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12354:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   1235a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1235d:	01 ca                	add    %ecx,%edx
   1235f:	0f b6 12             	movzbl (%edx),%edx
   12362:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12364:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   12368:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1236c:	79 dd                	jns    1234b <kernel_itoa+0xab>
    }
    *p = '\0';
   1236e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12371:	c6 00 00             	movb   $0x0,(%eax)
   12374:	c9                   	leave  
   12375:	c3                   	ret    

00012376 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12376:	55                   	push   %ebp
   12377:	89 e5                	mov    %esp,%ebp
   12379:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1237c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12380:	75 19                	jne    1239b <list_is_empty+0x25>
   12382:	68 68 31 01 00       	push   $0x13168
   12387:	68 4c 32 01 00       	push   $0x1324c
   1238c:	6a 38                	push   $0x38
   1238e:	68 7c 31 01 00       	push   $0x1317c
   12393:	e8 c6 fa ff ff       	call   11e5e <pannic>
   12398:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1239b:	8b 45 08             	mov    0x8(%ebp),%eax
   1239e:	8b 40 08             	mov    0x8(%eax),%eax
   123a1:	85 c0                	test   %eax,%eax
   123a3:	0f 94 c0             	sete   %al
   123a6:	0f b6 c0             	movzbl %al,%eax
}
   123a9:	c9                   	leave  
   123aa:	c3                   	ret    

000123ab <list_get_size>:
static inline int list_get_size(list_t *list) {
   123ab:	55                   	push   %ebp
   123ac:	89 e5                	mov    %esp,%ebp
   123ae:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   123b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123b5:	75 19                	jne    123d0 <list_get_size+0x25>
   123b7:	68 68 31 01 00       	push   $0x13168
   123bc:	68 84 32 01 00       	push   $0x13284
   123c1:	6a 3e                	push   $0x3e
   123c3:	68 7c 31 01 00       	push   $0x1317c
   123c8:	e8 91 fa ff ff       	call   11e5e <pannic>
   123cd:	83 c4 10             	add    $0x10,%esp
    return list->size;
   123d0:	8b 45 08             	mov    0x8(%ebp),%eax
   123d3:	8b 40 08             	mov    0x8(%eax),%eax
}
   123d6:	c9                   	leave  
   123d7:	c3                   	ret    

000123d8 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   123d8:	55                   	push   %ebp
   123d9:	89 e5                	mov    %esp,%ebp
   123db:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   123de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123e2:	74 06                	je     123ea <list_insert_first+0x12>
   123e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123e8:	75 19                	jne    12403 <list_insert_first+0x2b>
   123ea:	68 bc 31 01 00       	push   $0x131bc
   123ef:	68 38 32 01 00       	push   $0x13238
   123f4:	6a 0f                	push   $0xf
   123f6:	68 ec 31 01 00       	push   $0x131ec
   123fb:	e8 5e fa ff ff       	call   11e5e <pannic>
   12400:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12403:	8b 45 08             	mov    0x8(%ebp),%eax
   12406:	8b 10                	mov    (%eax),%edx
   12408:	8b 45 0c             	mov    0xc(%ebp),%eax
   1240b:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1240e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12411:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12417:	83 ec 0c             	sub    $0xc,%esp
   1241a:	ff 75 08             	push   0x8(%ebp)
   1241d:	e8 54 ff ff ff       	call   12376 <list_is_empty>
   12422:	83 c4 10             	add    $0x10,%esp
   12425:	85 c0                	test   %eax,%eax
   12427:	74 16                	je     1243f <list_insert_first+0x67>
        list->first = list->last = node;
   12429:	8b 45 08             	mov    0x8(%ebp),%eax
   1242c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1242f:	89 50 04             	mov    %edx,0x4(%eax)
   12432:	8b 45 08             	mov    0x8(%ebp),%eax
   12435:	8b 50 04             	mov    0x4(%eax),%edx
   12438:	8b 45 08             	mov    0x8(%ebp),%eax
   1243b:	89 10                	mov    %edx,(%eax)
   1243d:	eb 12                	jmp    12451 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1243f:	8b 45 08             	mov    0x8(%ebp),%eax
   12442:	8b 00                	mov    (%eax),%eax
   12444:	8b 55 0c             	mov    0xc(%ebp),%edx
   12447:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12449:	8b 45 08             	mov    0x8(%ebp),%eax
   1244c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1244f:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12451:	8b 45 08             	mov    0x8(%ebp),%eax
   12454:	8b 40 08             	mov    0x8(%eax),%eax
   12457:	8d 50 01             	lea    0x1(%eax),%edx
   1245a:	8b 45 08             	mov    0x8(%ebp),%eax
   1245d:	89 50 08             	mov    %edx,0x8(%eax)
}
   12460:	90                   	nop
   12461:	c9                   	leave  
   12462:	c3                   	ret    

00012463 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12463:	55                   	push   %ebp
   12464:	89 e5                	mov    %esp,%ebp
   12466:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12469:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1246d:	74 06                	je     12475 <list_insert_last+0x12>
   1246f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12473:	75 19                	jne    1248e <list_insert_last+0x2b>
   12475:	68 bc 31 01 00       	push   $0x131bc
   1247a:	68 5c 32 01 00       	push   $0x1325c
   1247f:	6a 1f                	push   $0x1f
   12481:	68 ec 31 01 00       	push   $0x131ec
   12486:	e8 d3 f9 ff ff       	call   11e5e <pannic>
   1248b:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   1248e:	8b 45 08             	mov    0x8(%ebp),%eax
   12491:	8b 50 04             	mov    0x4(%eax),%edx
   12494:	8b 45 0c             	mov    0xc(%ebp),%eax
   12497:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12499:	8b 45 0c             	mov    0xc(%ebp),%eax
   1249c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   124a3:	83 ec 0c             	sub    $0xc,%esp
   124a6:	ff 75 08             	push   0x8(%ebp)
   124a9:	e8 c8 fe ff ff       	call   12376 <list_is_empty>
   124ae:	83 c4 10             	add    $0x10,%esp
   124b1:	85 c0                	test   %eax,%eax
   124b3:	74 16                	je     124cb <list_insert_last+0x68>
        list->first = list->last = node;
   124b5:	8b 45 08             	mov    0x8(%ebp),%eax
   124b8:	8b 55 0c             	mov    0xc(%ebp),%edx
   124bb:	89 50 04             	mov    %edx,0x4(%eax)
   124be:	8b 45 08             	mov    0x8(%ebp),%eax
   124c1:	8b 50 04             	mov    0x4(%eax),%edx
   124c4:	8b 45 08             	mov    0x8(%ebp),%eax
   124c7:	89 10                	mov    %edx,(%eax)
   124c9:	eb 15                	jmp    124e0 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   124cb:	8b 45 08             	mov    0x8(%ebp),%eax
   124ce:	8b 40 04             	mov    0x4(%eax),%eax
   124d1:	8b 55 0c             	mov    0xc(%ebp),%edx
   124d4:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   124d7:	8b 45 08             	mov    0x8(%ebp),%eax
   124da:	8b 55 0c             	mov    0xc(%ebp),%edx
   124dd:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   124e0:	8b 45 08             	mov    0x8(%ebp),%eax
   124e3:	8b 40 08             	mov    0x8(%eax),%eax
   124e6:	8d 50 01             	lea    0x1(%eax),%edx
   124e9:	8b 45 08             	mov    0x8(%ebp),%eax
   124ec:	89 50 08             	mov    %edx,0x8(%eax)

}
   124ef:	90                   	nop
   124f0:	c9                   	leave  
   124f1:	c3                   	ret    

000124f2 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   124f2:	55                   	push   %ebp
   124f3:	89 e5                	mov    %esp,%ebp
   124f5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   124f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124fc:	75 19                	jne    12517 <list_remove_first+0x25>
   124fe:	68 22 32 01 00       	push   $0x13222
   12503:	68 70 32 01 00       	push   $0x13270
   12508:	6a 31                	push   $0x31
   1250a:	68 ec 31 01 00       	push   $0x131ec
   1250f:	e8 4a f9 ff ff       	call   11e5e <pannic>
   12514:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12517:	83 ec 0c             	sub    $0xc,%esp
   1251a:	ff 75 08             	push   0x8(%ebp)
   1251d:	e8 54 fe ff ff       	call   12376 <list_is_empty>
   12522:	83 c4 10             	add    $0x10,%esp
   12525:	85 c0                	test   %eax,%eax
   12527:	74 07                	je     12530 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12529:	b8 00 00 00 00       	mov    $0x0,%eax
   1252e:	eb 71                	jmp    125a1 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12530:	8b 45 08             	mov    0x8(%ebp),%eax
   12533:	8b 00                	mov    (%eax),%eax
   12535:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12538:	83 ec 0c             	sub    $0xc,%esp
   1253b:	ff 75 08             	push   0x8(%ebp)
   1253e:	e8 68 fe ff ff       	call   123ab <list_get_size>
   12543:	83 c4 10             	add    $0x10,%esp
   12546:	83 f8 01             	cmp    $0x1,%eax
   12549:	75 17                	jne    12562 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1254b:	8b 45 08             	mov    0x8(%ebp),%eax
   1254e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12555:	8b 45 08             	mov    0x8(%ebp),%eax
   12558:	8b 50 04             	mov    0x4(%eax),%edx
   1255b:	8b 45 08             	mov    0x8(%ebp),%eax
   1255e:	89 10                	mov    %edx,(%eax)
   12560:	eb 18                	jmp    1257a <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12562:	8b 45 08             	mov    0x8(%ebp),%eax
   12565:	8b 00                	mov    (%eax),%eax
   12567:	8b 50 04             	mov    0x4(%eax),%edx
   1256a:	8b 45 08             	mov    0x8(%ebp),%eax
   1256d:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   1256f:	8b 45 08             	mov    0x8(%ebp),%eax
   12572:	8b 00                	mov    (%eax),%eax
   12574:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1257a:	8b 45 08             	mov    0x8(%ebp),%eax
   1257d:	8b 40 08             	mov    0x8(%eax),%eax
   12580:	8d 50 ff             	lea    -0x1(%eax),%edx
   12583:	8b 45 08             	mov    0x8(%ebp),%eax
   12586:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12589:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1258c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12593:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12596:	8b 50 04             	mov    0x4(%eax),%edx
   12599:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1259c:	89 10                	mov    %edx,(%eax)
    return ret;
   1259e:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   125a1:	c9                   	leave  
   125a2:	c3                   	ret    

000125a3 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   125a3:	55                   	push   %ebp
   125a4:	89 e5                	mov    %esp,%ebp
   125a6:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   125a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125ad:	75 19                	jne    125c8 <list_remove_last+0x25>
   125af:	68 22 32 01 00       	push   $0x13222
   125b4:	68 94 32 01 00       	push   $0x13294
   125b9:	6a 46                	push   $0x46
   125bb:	68 ec 31 01 00       	push   $0x131ec
   125c0:	e8 99 f8 ff ff       	call   11e5e <pannic>
   125c5:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   125c8:	83 ec 0c             	sub    $0xc,%esp
   125cb:	ff 75 08             	push   0x8(%ebp)
   125ce:	e8 a3 fd ff ff       	call   12376 <list_is_empty>
   125d3:	83 c4 10             	add    $0x10,%esp
   125d6:	85 c0                	test   %eax,%eax
   125d8:	74 07                	je     125e1 <list_remove_last+0x3e>
        return (list_node_t*)0;
   125da:	b8 00 00 00 00       	mov    $0x0,%eax
   125df:	eb 75                	jmp    12656 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   125e1:	8b 45 08             	mov    0x8(%ebp),%eax
   125e4:	8b 40 04             	mov    0x4(%eax),%eax
   125e7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   125ea:	83 ec 0c             	sub    $0xc,%esp
   125ed:	ff 75 08             	push   0x8(%ebp)
   125f0:	e8 b6 fd ff ff       	call   123ab <list_get_size>
   125f5:	83 c4 10             	add    $0x10,%esp
   125f8:	83 f8 01             	cmp    $0x1,%eax
   125fb:	75 17                	jne    12614 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   125fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12600:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12607:	8b 45 08             	mov    0x8(%ebp),%eax
   1260a:	8b 50 04             	mov    0x4(%eax),%edx
   1260d:	8b 45 08             	mov    0x8(%ebp),%eax
   12610:	89 10                	mov    %edx,(%eax)
   12612:	eb 1b                	jmp    1262f <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12614:	8b 45 08             	mov    0x8(%ebp),%eax
   12617:	8b 40 04             	mov    0x4(%eax),%eax
   1261a:	8b 10                	mov    (%eax),%edx
   1261c:	8b 45 08             	mov    0x8(%ebp),%eax
   1261f:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12622:	8b 45 08             	mov    0x8(%ebp),%eax
   12625:	8b 40 04             	mov    0x4(%eax),%eax
   12628:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   1262f:	8b 45 08             	mov    0x8(%ebp),%eax
   12632:	8b 40 08             	mov    0x8(%eax),%eax
   12635:	8d 50 ff             	lea    -0x1(%eax),%edx
   12638:	8b 45 08             	mov    0x8(%ebp),%eax
   1263b:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1263e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12641:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12648:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1264b:	8b 50 04             	mov    0x4(%eax),%edx
   1264e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12651:	89 10                	mov    %edx,(%eax)
    return ret;
   12653:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12656:	c9                   	leave  
   12657:	c3                   	ret    

00012658 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12658:	55                   	push   %ebp
   12659:	89 e5                	mov    %esp,%ebp
   1265b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1265e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12662:	74 06                	je     1266a <list_remove+0x12>
   12664:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12668:	75 19                	jne    12683 <list_remove+0x2b>
   1266a:	68 bc 31 01 00       	push   $0x131bc
   1266f:	68 a8 32 01 00       	push   $0x132a8
   12674:	6a 5b                	push   $0x5b
   12676:	68 ec 31 01 00       	push   $0x131ec
   1267b:	e8 de f7 ff ff       	call   11e5e <pannic>
   12680:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12683:	83 ec 0c             	sub    $0xc,%esp
   12686:	ff 75 08             	push   0x8(%ebp)
   12689:	e8 e8 fc ff ff       	call   12376 <list_is_empty>
   1268e:	83 c4 10             	add    $0x10,%esp
   12691:	85 c0                	test   %eax,%eax
   12693:	74 0a                	je     1269f <list_remove+0x47>
        return (list_node_t*)0;
   12695:	b8 00 00 00 00       	mov    $0x0,%eax
   1269a:	e9 80 00 00 00       	jmp    1271f <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   1269f:	8b 45 08             	mov    0x8(%ebp),%eax
   126a2:	8b 00                	mov    (%eax),%eax
   126a4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126a7:	75 0b                	jne    126b4 <list_remove+0x5c>
   126a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   126ac:	8b 50 04             	mov    0x4(%eax),%edx
   126af:	8b 45 08             	mov    0x8(%ebp),%eax
   126b2:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   126b4:	8b 45 08             	mov    0x8(%ebp),%eax
   126b7:	8b 40 04             	mov    0x4(%eax),%eax
   126ba:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126bd:	75 0b                	jne    126ca <list_remove+0x72>
   126bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   126c2:	8b 10                	mov    (%eax),%edx
   126c4:	8b 45 08             	mov    0x8(%ebp),%eax
   126c7:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   126ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   126cd:	8b 00                	mov    (%eax),%eax
   126cf:	85 c0                	test   %eax,%eax
   126d1:	74 0e                	je     126e1 <list_remove+0x89>
   126d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   126d6:	8b 00                	mov    (%eax),%eax
   126d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   126db:	8b 52 04             	mov    0x4(%edx),%edx
   126de:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   126e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   126e4:	8b 40 04             	mov    0x4(%eax),%eax
   126e7:	85 c0                	test   %eax,%eax
   126e9:	74 0d                	je     126f8 <list_remove+0xa0>
   126eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   126ee:	8b 40 04             	mov    0x4(%eax),%eax
   126f1:	8b 55 0c             	mov    0xc(%ebp),%edx
   126f4:	8b 12                	mov    (%edx),%edx
   126f6:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   126f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   126fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12702:	8b 45 0c             	mov    0xc(%ebp),%eax
   12705:	8b 50 04             	mov    0x4(%eax),%edx
   12708:	8b 45 0c             	mov    0xc(%ebp),%eax
   1270b:	89 10                	mov    %edx,(%eax)
    list->size--;
   1270d:	8b 45 08             	mov    0x8(%ebp),%eax
   12710:	8b 40 08             	mov    0x8(%eax),%eax
   12713:	8d 50 ff             	lea    -0x1(%eax),%edx
   12716:	8b 45 08             	mov    0x8(%ebp),%eax
   12719:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   1271c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1271f:	c9                   	leave  
   12720:	c3                   	ret    

00012721 <inb>:
static inline uint8_t inb(uint16_t port) {
   12721:	55                   	push   %ebp
   12722:	89 e5                	mov    %esp,%ebp
   12724:	83 ec 14             	sub    $0x14,%esp
   12727:	8b 45 08             	mov    0x8(%ebp),%eax
   1272a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1272e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12732:	89 c2                	mov    %eax,%edx
   12734:	ec                   	in     (%dx),%al
   12735:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12738:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1273c:	c9                   	leave  
   1273d:	c3                   	ret    

0001273e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1273e:	55                   	push   %ebp
   1273f:	89 e5                	mov    %esp,%ebp
   12741:	83 ec 08             	sub    $0x8,%esp
   12744:	8b 45 08             	mov    0x8(%ebp),%eax
   12747:	8b 55 0c             	mov    0xc(%ebp),%edx
   1274a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1274e:	89 d0                	mov    %edx,%eax
   12750:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12753:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12757:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1275b:	ee                   	out    %al,(%dx)
}
   1275c:	90                   	nop
   1275d:	c9                   	leave  
   1275e:	c3                   	ret    

0001275f <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1275f:	55                   	push   %ebp
   12760:	89 e5                	mov    %esp,%ebp
   12762:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12765:	6a 00                	push   $0x0
   12767:	68 f9 03 00 00       	push   $0x3f9
   1276c:	e8 cd ff ff ff       	call   1273e <outb>
   12771:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12774:	68 80 00 00 00       	push   $0x80
   12779:	68 fb 03 00 00       	push   $0x3fb
   1277e:	e8 bb ff ff ff       	call   1273e <outb>
   12783:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12786:	6a 03                	push   $0x3
   12788:	68 f8 03 00 00       	push   $0x3f8
   1278d:	e8 ac ff ff ff       	call   1273e <outb>
   12792:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12795:	6a 00                	push   $0x0
   12797:	68 f9 03 00 00       	push   $0x3f9
   1279c:	e8 9d ff ff ff       	call   1273e <outb>
   127a1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   127a4:	6a 03                	push   $0x3
   127a6:	68 fb 03 00 00       	push   $0x3fb
   127ab:	e8 8e ff ff ff       	call   1273e <outb>
   127b0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   127b3:	68 c7 00 00 00       	push   $0xc7
   127b8:	68 fa 03 00 00       	push   $0x3fa
   127bd:	e8 7c ff ff ff       	call   1273e <outb>
   127c2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   127c5:	6a 0f                	push   $0xf
   127c7:	68 fc 03 00 00       	push   $0x3fc
   127cc:	e8 6d ff ff ff       	call   1273e <outb>
   127d1:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   127d4:	83 ec 0c             	sub    $0xc,%esp
   127d7:	68 30 e0 02 00       	push   $0x2e030
   127dc:	e8 68 ef ff ff       	call   11749 <mutex_init>
   127e1:	83 c4 10             	add    $0x10,%esp
}
   127e4:	90                   	nop
   127e5:	c9                   	leave  
   127e6:	c3                   	ret    

000127e7 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   127e7:	55                   	push   %ebp
   127e8:	89 e5                	mov    %esp,%ebp
   127ea:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   127f0:	83 ec 04             	sub    $0x4,%esp
   127f3:	68 80 00 00 00       	push   $0x80
   127f8:	6a 00                	push   $0x0
   127fa:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12800:	50                   	push   %eax
   12801:	e8 14 f8 ff ff       	call   1201a <kernel_memset>
   12806:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12809:	8d 45 0c             	lea    0xc(%ebp),%eax
   1280c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12812:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12818:	83 ec 04             	sub    $0x4,%esp
   1281b:	50                   	push   %eax
   1281c:	ff 75 08             	push   0x8(%ebp)
   1281f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12825:	50                   	push   %eax
   12826:	e8 d8 f8 ff ff       	call   12103 <kernel_vsprintf>
   1282b:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1282e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12834:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12837:	83 ec 0c             	sub    $0xc,%esp
   1283a:	68 30 e0 02 00       	push   $0x2e030
   1283f:	e8 52 ef ff ff       	call   11796 <mutex_lock>
   12844:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12847:	eb 57                	jmp    128a0 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12849:	90                   	nop
   1284a:	83 ec 0c             	sub    $0xc,%esp
   1284d:	68 fd 03 00 00       	push   $0x3fd
   12852:	e8 ca fe ff ff       	call   12721 <inb>
   12857:	83 c4 10             	add    $0x10,%esp
   1285a:	0f b6 c0             	movzbl %al,%eax
   1285d:	83 e0 40             	and    $0x40,%eax
   12860:	85 c0                	test   %eax,%eax
   12862:	74 e6                	je     1284a <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12864:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12867:	0f b6 00             	movzbl (%eax),%eax
   1286a:	3c 0a                	cmp    $0xa,%al
   1286c:	75 12                	jne    12880 <log_printf+0x99>
   1286e:	83 ec 08             	sub    $0x8,%esp
   12871:	6a 0d                	push   $0xd
   12873:	68 f8 03 00 00       	push   $0x3f8
   12878:	e8 c1 fe ff ff       	call   1273e <outb>
   1287d:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12880:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12883:	8d 50 01             	lea    0x1(%eax),%edx
   12886:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12889:	0f b6 00             	movzbl (%eax),%eax
   1288c:	0f b6 c0             	movzbl %al,%eax
   1288f:	83 ec 08             	sub    $0x8,%esp
   12892:	50                   	push   %eax
   12893:	68 f8 03 00 00       	push   $0x3f8
   12898:	e8 a1 fe ff ff       	call   1273e <outb>
   1289d:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   128a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128a3:	0f b6 00             	movzbl (%eax),%eax
   128a6:	84 c0                	test   %al,%al
   128a8:	75 9f                	jne    12849 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   128aa:	83 ec 08             	sub    $0x8,%esp
   128ad:	6a 0d                	push   $0xd
   128af:	68 f8 03 00 00       	push   $0x3f8
   128b4:	e8 85 fe ff ff       	call   1273e <outb>
   128b9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   128bc:	83 ec 08             	sub    $0x8,%esp
   128bf:	6a 0a                	push   $0xa
   128c1:	68 f8 03 00 00       	push   $0x3f8
   128c6:	e8 73 fe ff ff       	call   1273e <outb>
   128cb:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   128ce:	83 ec 0c             	sub    $0xc,%esp
   128d1:	68 30 e0 02 00       	push   $0x2e030
   128d6:	e8 4c ef ff ff       	call   11827 <mutex_unlock>
   128db:	83 c4 10             	add    $0x10,%esp
   128de:	90                   	nop
   128df:	c9                   	leave  
   128e0:	c3                   	ret    
